
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	b0 59 00 20 cd a7 02 00 43 4d 04 00 a1 a7 02 00     .Y. ....CM......
   26010:	a1 a7 02 00 a1 a7 02 00 a1 a7 02 00 00 00 00 00     ................
	...
   2602c:	15 a5 02 00 a1 a7 02 00 00 00 00 00 cd a4 02 00     ................
   2603c:	a1 a7 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	91 a5 02 00 2d a4 03 00 91 a5 02 00 91 a5 02 00     ....-...........
   26050:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   26060:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   26070:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   26080:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   26090:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   260a0:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   260b0:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   260c0:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   260d0:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   260e0:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................
   260f0:	91 a5 02 00 91 a5 02 00 91 a5 02 00 91 a5 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26138:	4607      	mov	r7, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   26140:	4615      	mov	r5, r2
   26142:	463c      	mov	r4, r7
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c6 	bne.w	262d8 <__udivmoddi4+0x1a4>
   2614c:	4282      	cmp	r2, r0
   2614e:	fab2 f782 	clz	r7, r2
   26152:	d946      	bls.n	261e2 <__udivmoddi4+0xae>
   26154:	b14f      	cbz	r7, 2616a <__udivmoddi4+0x36>
   26156:	f1c7 0e20 	rsb	lr, r7, #32
   2615a:	fa24 fe0e 	lsr.w	lr, r4, lr
   2615e:	fa00 f307 	lsl.w	r3, r0, r7
   26162:	40bd      	lsls	r5, r7
   26164:	ea4e 0c03 	orr.w	ip, lr, r3
   26168:	40bc      	lsls	r4, r7
   2616a:	ea4f 4815 	mov.w	r8, r5, lsr #16
   2616e:	fa1f fe85 	uxth.w	lr, r5
   26172:	fbbc f9f8 	udiv	r9, ip, r8
   26176:	0c22      	lsrs	r2, r4, #16
   26178:	fb08 c319 	mls	r3, r8, r9, ip
   2617c:	fb09 fa0e 	mul.w	sl, r9, lr
   26180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   26184:	459a      	cmp	sl, r3
   26186:	d928      	bls.n	261da <__udivmoddi4+0xa6>
   26188:	18eb      	adds	r3, r5, r3
   2618a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   2618e:	d204      	bcs.n	2619a <__udivmoddi4+0x66>
   26190:	459a      	cmp	sl, r3
   26192:	d902      	bls.n	2619a <__udivmoddi4+0x66>
   26194:	f1a9 0002 	sub.w	r0, r9, #2
   26198:	442b      	add	r3, r5
   2619a:	eba3 030a 	sub.w	r3, r3, sl
   2619e:	b2a4      	uxth	r4, r4
   261a0:	fbb3 f2f8 	udiv	r2, r3, r8
   261a4:	fb08 3312 	mls	r3, r8, r2, r3
   261a8:	fb02 fe0e 	mul.w	lr, r2, lr
   261ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261b0:	45a6      	cmp	lr, r4
   261b2:	d914      	bls.n	261de <__udivmoddi4+0xaa>
   261b4:	192c      	adds	r4, r5, r4
   261b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   261ba:	d203      	bcs.n	261c4 <__udivmoddi4+0x90>
   261bc:	45a6      	cmp	lr, r4
   261be:	d901      	bls.n	261c4 <__udivmoddi4+0x90>
   261c0:	1e93      	subs	r3, r2, #2
   261c2:	442c      	add	r4, r5
   261c4:	eba4 040e 	sub.w	r4, r4, lr
   261c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   261cc:	b11e      	cbz	r6, 261d6 <__udivmoddi4+0xa2>
   261ce:	40fc      	lsrs	r4, r7
   261d0:	2300      	movs	r3, #0
   261d2:	6034      	str	r4, [r6, #0]
   261d4:	6073      	str	r3, [r6, #4]
   261d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261da:	4648      	mov	r0, r9
   261dc:	e7dd      	b.n	2619a <__udivmoddi4+0x66>
   261de:	4613      	mov	r3, r2
   261e0:	e7f0      	b.n	261c4 <__udivmoddi4+0x90>
   261e2:	b902      	cbnz	r2, 261e6 <__udivmoddi4+0xb2>
   261e4:	deff      	udf	#255	; 0xff
   261e6:	bb87      	cbnz	r7, 2624a <__udivmoddi4+0x116>
   261e8:	1a83      	subs	r3, r0, r2
   261ea:	2101      	movs	r1, #1
   261ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261f0:	b2aa      	uxth	r2, r5
   261f2:	fbb3 fcfe 	udiv	ip, r3, lr
   261f6:	0c20      	lsrs	r0, r4, #16
   261f8:	fb0e 331c 	mls	r3, lr, ip, r3
   261fc:	fb0c f802 	mul.w	r8, ip, r2
   26200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   26204:	4598      	cmp	r8, r3
   26206:	d963      	bls.n	262d0 <__udivmoddi4+0x19c>
   26208:	18eb      	adds	r3, r5, r3
   2620a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   2620e:	d204      	bcs.n	2621a <__udivmoddi4+0xe6>
   26210:	4598      	cmp	r8, r3
   26212:	d902      	bls.n	2621a <__udivmoddi4+0xe6>
   26214:	f1ac 0002 	sub.w	r0, ip, #2
   26218:	442b      	add	r3, r5
   2621a:	eba3 0308 	sub.w	r3, r3, r8
   2621e:	b2a4      	uxth	r4, r4
   26220:	fbb3 fcfe 	udiv	ip, r3, lr
   26224:	fb0e 331c 	mls	r3, lr, ip, r3
   26228:	fb0c f202 	mul.w	r2, ip, r2
   2622c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   26230:	42a2      	cmp	r2, r4
   26232:	d94f      	bls.n	262d4 <__udivmoddi4+0x1a0>
   26234:	192c      	adds	r4, r5, r4
   26236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   2623a:	d204      	bcs.n	26246 <__udivmoddi4+0x112>
   2623c:	42a2      	cmp	r2, r4
   2623e:	d902      	bls.n	26246 <__udivmoddi4+0x112>
   26240:	f1ac 0302 	sub.w	r3, ip, #2
   26244:	442c      	add	r4, r5
   26246:	1aa4      	subs	r4, r4, r2
   26248:	e7be      	b.n	261c8 <__udivmoddi4+0x94>
   2624a:	f1c7 0c20 	rsb	ip, r7, #32
   2624e:	fa20 f80c 	lsr.w	r8, r0, ip
   26252:	fa00 f307 	lsl.w	r3, r0, r7
   26256:	fa24 fc0c 	lsr.w	ip, r4, ip
   2625a:	40bd      	lsls	r5, r7
   2625c:	ea4c 0203 	orr.w	r2, ip, r3
   26260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   26264:	b2ab      	uxth	r3, r5
   26266:	fbb8 fcfe 	udiv	ip, r8, lr
   2626a:	0c11      	lsrs	r1, r2, #16
   2626c:	fb0e 801c 	mls	r0, lr, ip, r8
   26270:	fb0c f903 	mul.w	r9, ip, r3
   26274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   26278:	4581      	cmp	r9, r0
   2627a:	fa04 f407 	lsl.w	r4, r4, r7
   2627e:	d923      	bls.n	262c8 <__udivmoddi4+0x194>
   26280:	1828      	adds	r0, r5, r0
   26282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   26286:	d204      	bcs.n	26292 <__udivmoddi4+0x15e>
   26288:	4581      	cmp	r9, r0
   2628a:	d902      	bls.n	26292 <__udivmoddi4+0x15e>
   2628c:	f1ac 0102 	sub.w	r1, ip, #2
   26290:	4428      	add	r0, r5
   26292:	eba0 0009 	sub.w	r0, r0, r9
   26296:	b292      	uxth	r2, r2
   26298:	fbb0 fcfe 	udiv	ip, r0, lr
   2629c:	fb0e 001c 	mls	r0, lr, ip, r0
   262a0:	fb0c f803 	mul.w	r8, ip, r3
   262a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   262a8:	4598      	cmp	r8, r3
   262aa:	d90f      	bls.n	262cc <__udivmoddi4+0x198>
   262ac:	18eb      	adds	r3, r5, r3
   262ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   262b2:	d204      	bcs.n	262be <__udivmoddi4+0x18a>
   262b4:	4598      	cmp	r8, r3
   262b6:	d902      	bls.n	262be <__udivmoddi4+0x18a>
   262b8:	f1ac 0202 	sub.w	r2, ip, #2
   262bc:	442b      	add	r3, r5
   262be:	eba3 0308 	sub.w	r3, r3, r8
   262c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   262c6:	e791      	b.n	261ec <__udivmoddi4+0xb8>
   262c8:	4661      	mov	r1, ip
   262ca:	e7e2      	b.n	26292 <__udivmoddi4+0x15e>
   262cc:	4662      	mov	r2, ip
   262ce:	e7f6      	b.n	262be <__udivmoddi4+0x18a>
   262d0:	4660      	mov	r0, ip
   262d2:	e7a2      	b.n	2621a <__udivmoddi4+0xe6>
   262d4:	4663      	mov	r3, ip
   262d6:	e7b6      	b.n	26246 <__udivmoddi4+0x112>
   262d8:	4283      	cmp	r3, r0
   262da:	d905      	bls.n	262e8 <__udivmoddi4+0x1b4>
   262dc:	b10e      	cbz	r6, 262e2 <__udivmoddi4+0x1ae>
   262de:	e9c6 7000 	strd	r7, r0, [r6]
   262e2:	2100      	movs	r1, #0
   262e4:	4608      	mov	r0, r1
   262e6:	e776      	b.n	261d6 <__udivmoddi4+0xa2>
   262e8:	fab3 f183 	clz	r1, r3
   262ec:	b981      	cbnz	r1, 26310 <__udivmoddi4+0x1dc>
   262ee:	4283      	cmp	r3, r0
   262f0:	d301      	bcc.n	262f6 <__udivmoddi4+0x1c2>
   262f2:	42ba      	cmp	r2, r7
   262f4:	d80a      	bhi.n	2630c <__udivmoddi4+0x1d8>
   262f6:	1abc      	subs	r4, r7, r2
   262f8:	eb60 0303 	sbc.w	r3, r0, r3
   262fc:	2001      	movs	r0, #1
   262fe:	469c      	mov	ip, r3
   26300:	2e00      	cmp	r6, #0
   26302:	d068      	beq.n	263d6 <__udivmoddi4+0x2a2>
   26304:	e9c6 4c00 	strd	r4, ip, [r6]
   26308:	2100      	movs	r1, #0
   2630a:	e764      	b.n	261d6 <__udivmoddi4+0xa2>
   2630c:	4608      	mov	r0, r1
   2630e:	e7f7      	b.n	26300 <__udivmoddi4+0x1cc>
   26310:	f1c1 0c20 	rsb	ip, r1, #32
   26314:	408b      	lsls	r3, r1
   26316:	fa22 f40c 	lsr.w	r4, r2, ip
   2631a:	431c      	orrs	r4, r3
   2631c:	fa02 f501 	lsl.w	r5, r2, r1
   26320:	fa00 f301 	lsl.w	r3, r0, r1
   26324:	fa27 f20c 	lsr.w	r2, r7, ip
   26328:	fa20 fb0c 	lsr.w	fp, r0, ip
   2632c:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26330:	4313      	orrs	r3, r2
   26332:	fbbb f8f9 	udiv	r8, fp, r9
   26336:	fa1f fe84 	uxth.w	lr, r4
   2633a:	fb09 bb18 	mls	fp, r9, r8, fp
   2633e:	0c1a      	lsrs	r2, r3, #16
   26340:	fb08 fa0e 	mul.w	sl, r8, lr
   26344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   26348:	4592      	cmp	sl, r2
   2634a:	fa07 f701 	lsl.w	r7, r7, r1
   2634e:	d93e      	bls.n	263ce <__udivmoddi4+0x29a>
   26350:	18a2      	adds	r2, r4, r2
   26352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26356:	d204      	bcs.n	26362 <__udivmoddi4+0x22e>
   26358:	4592      	cmp	sl, r2
   2635a:	d902      	bls.n	26362 <__udivmoddi4+0x22e>
   2635c:	f1a8 0002 	sub.w	r0, r8, #2
   26360:	4422      	add	r2, r4
   26362:	eba2 020a 	sub.w	r2, r2, sl
   26366:	b29b      	uxth	r3, r3
   26368:	fbb2 f8f9 	udiv	r8, r2, r9
   2636c:	fb09 2218 	mls	r2, r9, r8, r2
   26370:	fb08 fe0e 	mul.w	lr, r8, lr
   26374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   26378:	4596      	cmp	lr, r2
   2637a:	d92a      	bls.n	263d2 <__udivmoddi4+0x29e>
   2637c:	18a2      	adds	r2, r4, r2
   2637e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   26382:	d204      	bcs.n	2638e <__udivmoddi4+0x25a>
   26384:	4596      	cmp	lr, r2
   26386:	d902      	bls.n	2638e <__udivmoddi4+0x25a>
   26388:	f1a8 0302 	sub.w	r3, r8, #2
   2638c:	4422      	add	r2, r4
   2638e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26392:	fba0 9305 	umull	r9, r3, r0, r5
   26396:	eba2 020e 	sub.w	r2, r2, lr
   2639a:	429a      	cmp	r2, r3
   2639c:	46ce      	mov	lr, r9
   2639e:	4698      	mov	r8, r3
   263a0:	d302      	bcc.n	263a8 <__udivmoddi4+0x274>
   263a2:	d106      	bne.n	263b2 <__udivmoddi4+0x27e>
   263a4:	454f      	cmp	r7, r9
   263a6:	d204      	bcs.n	263b2 <__udivmoddi4+0x27e>
   263a8:	ebb9 0e05 	subs.w	lr, r9, r5
   263ac:	eb63 0804 	sbc.w	r8, r3, r4
   263b0:	3801      	subs	r0, #1
   263b2:	b186      	cbz	r6, 263d6 <__udivmoddi4+0x2a2>
   263b4:	ebb7 030e 	subs.w	r3, r7, lr
   263b8:	eb62 0708 	sbc.w	r7, r2, r8
   263bc:	fa07 fc0c 	lsl.w	ip, r7, ip
   263c0:	40cb      	lsrs	r3, r1
   263c2:	ea4c 0303 	orr.w	r3, ip, r3
   263c6:	40cf      	lsrs	r7, r1
   263c8:	e9c6 3700 	strd	r3, r7, [r6]
   263cc:	e79c      	b.n	26308 <__udivmoddi4+0x1d4>
   263ce:	4640      	mov	r0, r8
   263d0:	e7c7      	b.n	26362 <__udivmoddi4+0x22e>
   263d2:	4643      	mov	r3, r8
   263d4:	e7db      	b.n	2638e <__udivmoddi4+0x25a>
   263d6:	4631      	mov	r1, r6
   263d8:	e6fd      	b.n	261d6 <__udivmoddi4+0xa2>
   263da:	0000      	movs	r0, r0
   263dc:	0000      	movs	r0, r0
	...

000263e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   263e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   263e2:	4d3f      	ldr	r5, [pc, #252]	; (264e0 <bt_init+0x100>)
   263e4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   263e8:	6899      	ldr	r1, [r3, #8]
   263ea:	f011 0101 	ands.w	r1, r1, #1
   263ee:	d121      	bne.n	26434 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   263f0:	aa01      	add	r2, sp, #4
   263f2:	f640 4003 	movw	r0, #3075	; 0xc03
   263f6:	f004 ffc9 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   263fa:	4604      	mov	r4, r0
   263fc:	2800      	cmp	r0, #0
   263fe:	d16c      	bne.n	264da <bt_init+0xfa>
	uint8_t status = buf->data[0];
   26400:	9b01      	ldr	r3, [sp, #4]
   26402:	689b      	ldr	r3, [r3, #8]
	if (status) {
   26404:	781b      	ldrb	r3, [r3, #0]
   26406:	b993      	cbnz	r3, 2642e <bt_init+0x4e>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26408:	f3bf 8f5b 	dmb	ish
   2640c:	462b      	mov	r3, r5
   2640e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   26412:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   26416:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2641a:	f3bf 8f5b 	dmb	ish
   2641e:	e853 1f00 	ldrex	r1, [r3]
   26422:	e843 2000 	strex	r0, r2, [r3]
   26426:	2800      	cmp	r0, #0
   26428:	d1f9      	bne.n	2641e <bt_init+0x3e>
   2642a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   2642e:	9801      	ldr	r0, [sp, #4]
   26430:	f016 ffae 	bl	3d390 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26434:	aa01      	add	r2, sp, #4
   26436:	2100      	movs	r1, #0
   26438:	f241 0003 	movw	r0, #4099	; 0x1003
   2643c:	f004 ffa6 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   26440:	4604      	mov	r4, r0
   26442:	2800      	cmp	r0, #0
   26444:	d149      	bne.n	264da <bt_init+0xfa>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   26446:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   26448:	4826      	ldr	r0, [pc, #152]	; (264e4 <bt_init+0x104>)
   2644a:	6899      	ldr	r1, [r3, #8]
   2644c:	2208      	movs	r2, #8
   2644e:	3101      	adds	r1, #1
   26450:	f01e fd36 	bl	44ec0 <memcpy>
	net_buf_unref(rsp);
   26454:	9801      	ldr	r0, [sp, #4]
   26456:	f016 ff9b 	bl	3d390 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   2645a:	4621      	mov	r1, r4
   2645c:	aa01      	add	r2, sp, #4
   2645e:	f241 0001 	movw	r0, #4097	; 0x1001
   26462:	f004 ff93 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   26466:	4604      	mov	r4, r0
   26468:	2800      	cmp	r0, #0
   2646a:	d136      	bne.n	264da <bt_init+0xfa>
	read_local_ver_complete(rsp);
   2646c:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   2646e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   26470:	785a      	ldrb	r2, [r3, #1]
   26472:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   26476:	78d9      	ldrb	r1, [r3, #3]
   26478:	789a      	ldrb	r2, [r3, #2]
   2647a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2647e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   26482:	791a      	ldrb	r2, [r3, #4]
   26484:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   26488:	7a19      	ldrb	r1, [r3, #8]
   2648a:	79da      	ldrb	r2, [r3, #7]
   2648c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26490:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   26494:	795a      	ldrb	r2, [r3, #5]
   26496:	799b      	ldrb	r3, [r3, #6]
   26498:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2649c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   264a0:	f016 ff76 	bl	3d390 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   264a4:	4621      	mov	r1, r4
   264a6:	aa01      	add	r2, sp, #4
   264a8:	f241 0002 	movw	r0, #4098	; 0x1002
   264ac:	f004 ff6e 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   264b0:	4604      	mov	r4, r0
   264b2:	b990      	cbnz	r0, 264da <bt_init+0xfa>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   264b4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   264b6:	480c      	ldr	r0, [pc, #48]	; (264e8 <bt_init+0x108>)
   264b8:	6899      	ldr	r1, [r3, #8]
   264ba:	2240      	movs	r2, #64	; 0x40
   264bc:	3101      	adds	r1, #1
   264be:	f01e fcff 	bl	44ec0 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264c2:	4809      	ldr	r0, [pc, #36]	; (264e8 <bt_init+0x108>)
   264c4:	f01e fdb0 	bl	45028 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264c8:	9801      	ldr	r0, [sp, #4]
   264ca:	f016 ff61 	bl	3d390 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264ce:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264d2:	065a      	lsls	r2, r3, #25
   264d4:	d40a      	bmi.n	264ec <bt_init+0x10c>
		return -ENODEV;
   264d6:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   264da:	4620      	mov	r0, r4
   264dc:	b002      	add	sp, #8
   264de:	bd70      	pop	{r4, r5, r6, pc}
   264e0:	20000000 	.word	0x20000000
   264e4:	20000070 	.word	0x20000070
   264e8:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   264ec:	4621      	mov	r1, r4
   264ee:	aa01      	add	r2, sp, #4
   264f0:	f242 0003 	movw	r0, #8195	; 0x2003
   264f4:	f004 ff4a 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   264f8:	4604      	mov	r4, r0
   264fa:	2800      	cmp	r0, #0
   264fc:	d1ed      	bne.n	264da <bt_init+0xfa>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   264fe:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   26500:	48b9      	ldr	r0, [pc, #740]	; (267e8 <bt_init+0x408>)
   26502:	6899      	ldr	r1, [r3, #8]
   26504:	2208      	movs	r2, #8
   26506:	3101      	adds	r1, #1
   26508:	f01e fcda 	bl	44ec0 <memcpy>
	net_buf_unref(rsp);
   2650c:	9801      	ldr	r0, [sp, #4]
   2650e:	f016 ff3f 	bl	3d390 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   26512:	4621      	mov	r1, r4
   26514:	aa01      	add	r2, sp, #4
   26516:	f242 0002 	movw	r0, #8194	; 0x2002
   2651a:	f004 ff37 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   2651e:	4604      	mov	r4, r0
   26520:	2800      	cmp	r0, #0
   26522:	d1da      	bne.n	264da <bt_init+0xfa>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26524:	9b01      	ldr	r3, [sp, #4]
   26526:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26528:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2652c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   26530:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   26532:	b121      	cbz	r1, 2653e <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26534:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   26536:	48ad      	ldr	r0, [pc, #692]	; (267ec <bt_init+0x40c>)
   26538:	4611      	mov	r1, r2
   2653a:	f022 fcb3 	bl	48ea4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   2653e:	9801      	ldr	r0, [sp, #4]
   26540:	f016 ff26 	bl	3d390 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26544:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   26548:	f016 0620 	ands.w	r6, r6, #32
   2654c:	f000 8121 	beq.w	26792 <bt_init+0x3b2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   26550:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26554:	071b      	lsls	r3, r3, #28
   26556:	d512      	bpl.n	2657e <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   26558:	aa01      	add	r2, sp, #4
   2655a:	2100      	movs	r1, #0
   2655c:	f242 001c 	movw	r0, #8220	; 0x201c
   26560:	f004 ff14 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   26564:	4604      	mov	r4, r0
   26566:	2800      	cmp	r0, #0
   26568:	d1b7      	bne.n	264da <bt_init+0xfa>
		le_read_supp_states_complete(rsp);
   2656a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   2656c:	6883      	ldr	r3, [r0, #8]
   2656e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   26572:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   26576:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   2657a:	f016 ff09 	bl	3d390 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   2657e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26582:	069e      	lsls	r6, r3, #26
   26584:	d523      	bpl.n	265ce <bt_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   26586:	f10d 0102 	add.w	r1, sp, #2
   2658a:	4668      	mov	r0, sp
   2658c:	f01e ffb5 	bl	454fa <hci_le_read_max_data_len>
		if (err) {
   26590:	4604      	mov	r4, r0
   26592:	2800      	cmp	r0, #0
   26594:	d1a1      	bne.n	264da <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   26596:	2104      	movs	r1, #4
   26598:	f242 0024 	movw	r0, #8228	; 0x2024
   2659c:	f004 fe9a 	bl	2b2d4 <bt_hci_cmd_create>
		if (!buf) {
   265a0:	4606      	mov	r6, r0
   265a2:	2800      	cmp	r0, #0
   265a4:	f000 80fc 	beq.w	267a0 <bt_init+0x3c0>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   265a8:	2104      	movs	r1, #4
   265aa:	3008      	adds	r0, #8
   265ac:	f021 fc2a 	bl	47e04 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265b0:	f8bd 3000 	ldrh.w	r3, [sp]
   265b4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265ba:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265bc:	4622      	mov	r2, r4
   265be:	4631      	mov	r1, r6
   265c0:	f242 0024 	movw	r0, #8228	; 0x2024
   265c4:	f004 fee2 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   265c8:	4604      	mov	r4, r0
   265ca:	2800      	cmp	r0, #0
   265cc:	d185      	bne.n	264da <bt_init+0xfa>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   265ce:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265d2:	065c      	lsls	r4, r3, #25
   265d4:	d510      	bpl.n	265f8 <bt_init+0x218>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   265d6:	aa01      	add	r2, sp, #4
   265d8:	2100      	movs	r1, #0
   265da:	f242 002a 	movw	r0, #8234	; 0x202a
   265de:	f004 fed5 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   265e2:	4604      	mov	r4, r0
   265e4:	2800      	cmp	r0, #0
   265e6:	f47f af78 	bne.w	264da <bt_init+0xfa>
		le_read_resolving_list_size_complete(rsp);
   265ea:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   265ec:	6883      	ldr	r3, [r0, #8]
   265ee:	785b      	ldrb	r3, [r3, #1]
   265f0:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   265f4:	f016 fecc 	bl	3d390 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   265f8:	2108      	movs	r1, #8
   265fa:	f242 0001 	movw	r0, #8193	; 0x2001
   265fe:	f004 fe69 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   26602:	4604      	mov	r4, r0
   26604:	2800      	cmp	r0, #0
   26606:	f000 80cb 	beq.w	267a0 <bt_init+0x3c0>
   2660a:	2108      	movs	r1, #8
   2660c:	4408      	add	r0, r1
   2660e:	f021 fbf9 	bl	47e04 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   26612:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   26616:	f011 0f40 	tst.w	r1, #64	; 0x40
   2661a:	4602      	mov	r2, r0
   2661c:	f240 2302 	movw	r3, #514	; 0x202
   26620:	bf08      	it	eq
   26622:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   26624:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   26626:	bf4c      	ite	mi
   26628:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   2662c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   26630:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26632:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   26636:	bf48      	it	mi
   26638:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2663c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26640:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   26644:	bf18      	it	ne
   26646:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2664a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2664e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   26650:	bf48      	it	mi
   26652:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26656:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   26658:	bf08      	it	eq
   2665a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   2665e:	2100      	movs	r1, #0
   26660:	f01e fe2e 	bl	452c0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   26664:	4621      	mov	r1, r4
   26666:	2200      	movs	r2, #0
   26668:	f242 0001 	movw	r0, #8193	; 0x2001
   2666c:	f004 fe8e 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   26670:	4604      	mov	r4, r0
   26672:	2800      	cmp	r0, #0
   26674:	f47f af31 	bne.w	264da <bt_init+0xfa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26678:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   2667c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26680:	0698      	lsls	r0, r3, #26
   26682:	f100 80a2 	bmi.w	267ca <bt_init+0x3ea>
	if (bt_dev.le.acl_mtu) {
   26686:	b9d9      	cbnz	r1, 266c0 <bt_init+0x2e0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   26688:	aa01      	add	r2, sp, #4
   2668a:	f241 0005 	movw	r0, #4101	; 0x1005
   2668e:	f004 fe7d 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   26692:	4604      	mov	r4, r0
   26694:	2800      	cmp	r0, #0
   26696:	f47f af20 	bne.w	264da <bt_init+0xfa>
	if (bt_dev.le.acl_mtu) {
   2669a:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   2669e:	b963      	cbnz	r3, 266ba <bt_init+0x2da>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266a0:	9b01      	ldr	r3, [sp, #4]
   266a2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266a4:	785a      	ldrb	r2, [r3, #1]
   266a6:	7899      	ldrb	r1, [r3, #2]
   266a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   266ac:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266b0:	889a      	ldrh	r2, [r3, #4]
   266b2:	484e      	ldr	r0, [pc, #312]	; (267ec <bt_init+0x40c>)
   266b4:	4611      	mov	r1, r2
   266b6:	f022 fbf5 	bl	48ea4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266ba:	9801      	ldr	r0, [sp, #4]
   266bc:	f016 fe68 	bl	3d390 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266c0:	2108      	movs	r1, #8
   266c2:	f640 4001 	movw	r0, #3073	; 0xc01
   266c6:	f004 fe05 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   266ca:	4604      	mov	r4, r0
   266cc:	2800      	cmp	r0, #0
   266ce:	d067      	beq.n	267a0 <bt_init+0x3c0>
   266d0:	2108      	movs	r1, #8
   266d2:	4408      	add	r0, r1
   266d4:	f021 fb96 	bl	47e04 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   266d8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   266dc:	07d9      	lsls	r1, r3, #31
   266de:	4602      	mov	r2, r0
   266e0:	d579      	bpl.n	267d6 <bt_init+0x3f6>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   266e2:	a13f      	add	r1, pc, #252	; (adr r1, 267e0 <bt_init+0x400>)
   266e4:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   266e8:	f01e fdea 	bl	452c0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   266ec:	4621      	mov	r1, r4
   266ee:	2200      	movs	r2, #0
   266f0:	f640 4001 	movw	r0, #3073	; 0xc01
   266f4:	f004 fe4a 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   266f8:	4604      	mov	r4, r0
   266fa:	2800      	cmp	r0, #0
   266fc:	f47f aeed 	bne.w	264da <bt_init+0xfa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   26700:	4601      	mov	r1, r0
   26702:	aa01      	add	r2, sp, #4
   26704:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26708:	f004 fe40 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2670c:	4604      	mov	r4, r0
   2670e:	bb48      	cbnz	r0, 26764 <bt_init+0x384>
	net_buf_unref(rsp);
   26710:	9801      	ldr	r0, [sp, #4]
   26712:	f016 fe3d 	bl	3d390 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   26716:	4621      	mov	r1, r4
   26718:	aa01      	add	r2, sp, #4
   2671a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   2671e:	f004 fe35 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   26722:	4604      	mov	r4, r0
   26724:	b9f0      	cbnz	r0, 26764 <bt_init+0x384>
	rp.cmds = (void *)rsp->data;
   26726:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26728:	4831      	ldr	r0, [pc, #196]	; (267f0 <bt_init+0x410>)
   2672a:	6899      	ldr	r1, [r3, #8]
   2672c:	2202      	movs	r2, #2
   2672e:	3101      	adds	r1, #1
   26730:	f01e fbc6 	bl	44ec0 <memcpy>
	net_buf_unref(rsp);
   26734:	9801      	ldr	r0, [sp, #4]
   26736:	f016 fe2b 	bl	3d390 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   2673a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   2673e:	075b      	lsls	r3, r3, #29
   26740:	d510      	bpl.n	26764 <bt_init+0x384>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   26742:	aa01      	add	r2, sp, #4
   26744:	4621      	mov	r1, r4
   26746:	f64f 4003 	movw	r0, #64515	; 0xfc03
   2674a:	f004 fe1f 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   2674e:	b948      	cbnz	r0, 26764 <bt_init+0x384>
		rp.feat = (void *)rsp->data;
   26750:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   26752:	4828      	ldr	r0, [pc, #160]	; (267f4 <_flash_used+0x3>)
   26754:	6899      	ldr	r1, [r3, #8]
   26756:	2201      	movs	r2, #1
   26758:	4411      	add	r1, r2
   2675a:	f01e fbb1 	bl	44ec0 <memcpy>
		net_buf_unref(rsp);
   2675e:	9801      	ldr	r0, [sp, #4]
   26760:	f016 fe16 	bl	3d390 <net_buf_unref>
	err = bt_id_init();
   26764:	f01f f942 	bl	459ec <bt_id_init>
	if (err) {
   26768:	4604      	mov	r4, r0
   2676a:	2800      	cmp	r0, #0
   2676c:	f47f aeb5 	bne.w	264da <bt_init+0xfa>
		err = bt_conn_init();
   26770:	f006 fc6e 	bl	2d050 <bt_conn_init>
		if (err) {
   26774:	4604      	mov	r4, r0
   26776:	2800      	cmp	r0, #0
   26778:	f47f aeaf 	bne.w	264da <bt_init+0xfa>
		if (!bt_dev.id_count) {
   2677c:	79eb      	ldrb	r3, [r5, #7]
   2677e:	2b00      	cmp	r3, #0
   26780:	f43f aeab 	beq.w	264da <bt_init+0xfa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26784:	2104      	movs	r1, #4
   26786:	481c      	ldr	r0, [pc, #112]	; (267f8 <_flash_used+0x7>)
   26788:	f01e fd1e 	bl	451c8 <atomic_or>
	bt_finalize_init();
   2678c:	f005 f8bc 	bl	2b908 <bt_finalize_init>
	return 0;
   26790:	e6a3      	b.n	264da <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   26792:	2102      	movs	r1, #2
   26794:	f640 406d 	movw	r0, #3181	; 0xc6d
   26798:	f004 fd9c 	bl	2b2d4 <bt_hci_cmd_create>
		if (!buf) {
   2679c:	4604      	mov	r4, r0
   2679e:	b910      	cbnz	r0, 267a6 <bt_init+0x3c6>
		return -ENOBUFS;
   267a0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   267a4:	e699      	b.n	264da <bt_init+0xfa>
   267a6:	2102      	movs	r1, #2
   267a8:	3008      	adds	r0, #8
   267aa:	f021 fb2b 	bl	47e04 <net_buf_simple_add>
		cp_le->le = 0x01;
   267ae:	2301      	movs	r3, #1
   267b0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   267b2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   267b4:	4621      	mov	r1, r4
   267b6:	4632      	mov	r2, r6
   267b8:	f640 406d 	movw	r0, #3181	; 0xc6d
   267bc:	f004 fde6 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   267c0:	4604      	mov	r4, r0
   267c2:	2800      	cmp	r0, #0
   267c4:	f43f aec4 	beq.w	26550 <bt_init+0x170>
   267c8:	e687      	b.n	264da <bt_init+0xfa>
	else if (!bt_dev.le.acl_mtu) {
   267ca:	2900      	cmp	r1, #0
   267cc:	f47f af78 	bne.w	266c0 <bt_init+0x2e0>
		return -EIO;
   267d0:	f06f 0404 	mvn.w	r4, #4
   267d4:	e681      	b.n	264da <bt_init+0xfa>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   267d6:	4809      	ldr	r0, [pc, #36]	; (267fc <_flash_used+0xb>)
   267d8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   267dc:	e784      	b.n	266e8 <bt_init+0x308>
   267de:	bf00      	nop
   267e0:	02008890 	.word	0x02008890
   267e4:	20008000 	.word	0x20008000
   267e8:	200000d0 	.word	0x200000d0
   267ec:	20000100 	.word	0x20000100
   267f0:	200000b9 	.word	0x200000b9
   267f4:	200000b8 	.word	0x200000b8
   267f8:	200000cc 	.word	0x200000cc
   267fc:	02008810 	.word	0x02008810

00026800 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   26800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   26804:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   26808:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   2680a:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   2680c:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   2680e:	42a6      	cmp	r6, r4
{
   26810:	4688      	mov	r8, r1
   26812:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26814:	d818      	bhi.n	26848 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26816:	4d1c      	ldr	r5, [pc, #112]	; (26888 <ull_drift_ticks_get+0x88>)
   26818:	fba3 0105 	umull	r0, r1, r3, r5
   2681c:	a318      	add	r3, pc, #96	; (adr r3, 26880 <ull_drift_ticks_get+0x80>)
   2681e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26822:	f7ff fc6d 	bl	26100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26826:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26828:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2682c:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26830:	a313      	add	r3, pc, #76	; (adr r3, 26880 <ull_drift_ticks_get+0x80>)
   26832:	e9d3 2300 	ldrd	r2, r3, [r3]
   26836:	fba4 0105 	umull	r0, r1, r4, r5
   2683a:	f7ff fc61 	bl	26100 <__aeabi_uldivmod>
   2683e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   26842:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   26844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26848:	4c0f      	ldr	r4, [pc, #60]	; (26888 <ull_drift_ticks_get+0x88>)
   2684a:	a30d      	add	r3, pc, #52	; (adr r3, 26880 <ull_drift_ticks_get+0x80>)
   2684c:	e9d3 2300 	ldrd	r2, r3, [r3]
   26850:	fba6 0104 	umull	r0, r1, r6, r4
   26854:	f7ff fc54 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26858:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   2685c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26860:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26864:	a306      	add	r3, pc, #24	; (adr r3, 26880 <ull_drift_ticks_get+0x80>)
   26866:	e9d3 2300 	ldrd	r2, r3, [r3]
   2686a:	fba1 0104 	umull	r0, r1, r1, r4
   2686e:	f7ff fc47 	bl	26100 <__aeabi_uldivmod>
   26872:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   26876:	6038      	str	r0, [r7, #0]
}
   26878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2687c:	f3af 8000 	nop.w
   26880:	1afd498d 	.word	0x1afd498d
   26884:	00000007 	.word	0x00000007
   26888:	3b9aca00 	.word	0x3b9aca00
   2688c:	00000000 	.word	0x00000000

00026890 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
   26890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
   26894:	4cab      	ldr	r4, [pc, #684]	; (26b44 <ll_adv_enable+0x2b4>)
{
   26896:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
   26898:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
   2689c:	2800      	cmp	r0, #0
   2689e:	f000 8139 	beq.w	26b14 <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   268a2:	f012 0701 	ands.w	r7, r2, #1
   268a6:	f040 81b7 	bne.w	26c18 <ll_adv_enable+0x388>
	ull_filter_adv_update(lll->filter_policy);
   268aa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   268ae:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   268b0:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   268b4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   268b8:	f013 fa5c 	bl	39d74 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   268bc:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   268c0:	0741      	lsls	r1, r0, #29
   268c2:	d42d      	bmi.n	26920 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268c4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268c8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268d4:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268d8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268dc:	f1b8 0f00 	cmp.w	r8, #0
   268e0:	d011      	beq.n	26906 <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   268e2:	4898      	ldr	r0, [pc, #608]	; (26b44 <ll_adv_enable+0x2b4>)
   268e4:	4641      	mov	r1, r8
   268e6:	f00d fe19 	bl	3451c <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   268ea:	f898 3000 	ldrb.w	r3, [r8]
   268ee:	065a      	lsls	r2, r3, #25
   268f0:	d505      	bpl.n	268fe <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268f2:	2106      	movs	r1, #6
   268f4:	f009 f99c 	bl	2fc30 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   268f8:	2800      	cmp	r0, #0
   268fa:	f000 81c9 	beq.w	26c90 <ll_adv_enable+0x400>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   268fe:	4891      	ldr	r0, [pc, #580]	; (26b44 <ll_adv_enable+0x2b4>)
   26900:	4649      	mov	r1, r9
   26902:	f00d fe0b 	bl	3451c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   26906:	f898 3000 	ldrb.w	r3, [r8]
   2690a:	f013 0f0e 	tst.w	r3, #14
   2690e:	f040 80ee 	bne.w	26aee <ll_adv_enable+0x25e>
		if (lll->conn) {
   26912:	6a23      	ldr	r3, [r4, #32]
   26914:	b19b      	cbz	r3, 2693e <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26916:	270c      	movs	r7, #12
}
   26918:	4638      	mov	r0, r7
   2691a:	b00f      	add	sp, #60	; 0x3c
   2691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26920:	463a      	mov	r2, r7
   26922:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   26926:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2692a:	f013 fb89 	bl	3a040 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   2692e:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26930:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26934:	d0c6      	beq.n	268c4 <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
   26936:	4638      	mov	r0, r7
   26938:	f013 fa36 	bl	39da8 <ull_filter_rpa_update>
   2693c:	e7c2      	b.n	268c4 <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
   2693e:	f00c fcaf 	bl	332a0 <ll_rx_link_alloc>
		if (!link) {
   26942:	4682      	mov	sl, r0
   26944:	2800      	cmp	r0, #0
   26946:	f000 81ad 	beq.w	26ca4 <ll_adv_enable+0x414>
		node_rx = ll_rx_alloc();
   2694a:	f00c fcb5 	bl	332b8 <ll_rx_alloc>
		if (!node_rx) {
   2694e:	4683      	mov	fp, r0
   26950:	2800      	cmp	r0, #0
   26952:	f000 81ac 	beq.w	26cae <ll_adv_enable+0x41e>
		conn = ll_conn_acquire();
   26956:	f00e fccf 	bl	352f8 <ll_conn_acquire>
		if (!conn) {
   2695a:	4605      	mov	r5, r0
   2695c:	2800      	cmp	r0, #0
   2695e:	f000 81a3 	beq.w	26ca8 <ll_adv_enable+0x418>
		if (!conn_lll->link_tx_free) {
   26962:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26964:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26968:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   2696a:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
   2696e:	2800      	cmp	r0, #0
   26970:	f000 8194 	beq.w	26c9c <ll_adv_enable+0x40c>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26974:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26978:	f105 0164 	add.w	r1, r5, #100	; 0x64
   2697c:	930b      	str	r3, [sp, #44]	; 0x2c
   2697e:	f009 f963 	bl	2fc48 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26982:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26986:	4b70      	ldr	r3, [pc, #448]	; (26b48 <ll_adv_enable+0x2b8>)
			conn_lll->phy_tx = PHY_1M;
   26988:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
   2698c:	f022 0207 	bic.w	r2, r2, #7
   26990:	f442 7288 	orr.w	r2, r2, #272	; 0x110
   26994:	f042 0201 	orr.w	r2, r2, #1
   26998:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   2699c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   269a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   269a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   269a8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   269ac:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
   269b0:	f022 0207 	bic.w	r2, r2, #7
   269b4:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   269b8:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   269bc:	f022 0207 	bic.w	r2, r2, #7
   269c0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
   269c4:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
   269c8:	f022 0207 	bic.w	r2, r2, #7
   269cc:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   269d0:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
   269d4:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   269d6:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
   269da:	2206      	movs	r2, #6
   269dc:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   269e0:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   269e4:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   269e6:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
   269ea:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
   269ec:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
   269ee:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   269f2:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   269f4:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   269f8:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   269fc:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   26a00:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26a04:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
   26a08:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
   26a0c:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26a10:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26a14:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
   26a18:	f00b ff2a 	bl	32870 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26a1c:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26a20:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26a24:	f022 0203 	bic.w	r2, r2, #3
   26a28:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26a2c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26a30:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26a34:	f022 0218 	bic.w	r2, r2, #24
   26a38:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26a3c:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
   26a40:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26a44:	f022 0207 	bic.w	r2, r2, #7
   26a48:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
   26a4c:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
   26a50:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
   26a54:	f366 1245 	bfi	r2, r6, #5, #1
   26a58:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
   26a5c:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26a60:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
   26a64:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
   26a68:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
   26a6c:	2100      	movs	r1, #0
   26a6e:	2000      	movs	r0, #0
   26a70:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
   26a74:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
   26a78:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
   26a7c:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
   26a80:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26a84:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
   26a88:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26a8c:	f00e ff7a 	bl	35984 <ull_conn_default_tx_octets_get>
   26a90:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26a94:	f00e ff7c 	bl	35990 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26a98:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
   26a9c:	4a2b      	ldr	r2, [pc, #172]	; (26b4c <ll_adv_enable+0x2bc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26a9e:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26aa2:	400a      	ands	r2, r1
   26aa4:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26aa8:	f00e ff78 	bl	3599c <ull_conn_default_phy_tx_get>
   26aac:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
   26ab0:	f360 0202 	bfi	r2, r0, #0, #3
   26ab4:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26ab8:	f00e ff76 	bl	359a8 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   26abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26abe:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26ac0:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26ac4:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26ac8:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   26acc:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26ad0:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26ad4:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26ad8:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
   26adc:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26ade:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26ae0:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
   26ae4:	f014 f9f0 	bl	3aec8 <lll_clock_wait>
		if (err) {
   26ae8:	2800      	cmp	r0, #0
   26aea:	f040 80d3 	bne.w	26c94 <ll_adv_enable+0x404>
	uint8_t ch_map = lll->chan_map;
   26aee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26af2:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   26af4:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26af8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
   26afc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26b00:	f009 fa22 	bl	2ff48 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   26b04:	bb20      	cbnz	r0, 26b50 <ll_adv_enable+0x2c0>
	if (adv->lll.conn) {
   26b06:	6a23      	ldr	r3, [r4, #32]
   26b08:	2b00      	cmp	r3, #0
   26b0a:	f43f af04 	beq.w	26916 <ll_adv_enable+0x86>
		conn_release(adv);
   26b0e:	f00d f9db 	bl	33ec8 <conn_release.constprop.0>
   26b12:	e700      	b.n	26916 <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
   26b14:	f012 0701 	ands.w	r7, r2, #1
   26b18:	f43f aefe 	beq.w	26918 <ll_adv_enable+0x88>
	if (adv->lll.conn) {
   26b1c:	6a23      	ldr	r3, [r4, #32]
   26b1e:	b15b      	cbz	r3, 26b38 <ll_adv_enable+0x2a8>
		adv->lll.conn->periph.cancelled = 1U;
   26b20:	f893 2020 	ldrb.w	r2, [r3, #32]
   26b24:	f042 0202 	orr.w	r2, r2, #2
   26b28:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   26b2c:	6a23      	ldr	r3, [r4, #32]
   26b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
   26b32:	07d8      	lsls	r0, r3, #31
   26b34:	f53f aeef 	bmi.w	26916 <ll_adv_enable+0x86>
}
   26b38:	b00f      	add	sp, #60	; 0x3c
   26b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b3e:	f00d ba05 	b.w	33f4c <disable.part.0>
   26b42:	bf00      	nop
   26b44:	200025d4 	.word	0x200025d4
   26b48:	01480148 	.word	0x01480148
   26b4c:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26b50:	f899 1001 	ldrb.w	r1, [r9, #1]
   26b54:	4602      	mov	r2, r0
   26b56:	4640      	mov	r0, r8
   26b58:	f00d fa9c 	bl	34094 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b5c:	4958      	ldr	r1, [pc, #352]	; (26cc0 <ll_adv_enable+0x430>)
	uint16_t interval = adv->interval;
   26b5e:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
   26b62:	2331      	movs	r3, #49	; 0x31
   26b64:	2500      	movs	r5, #0
   26b66:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b68:	fba0 0101 	umull	r0, r1, r0, r1
   26b6c:	a352      	add	r3, pc, #328	; (adr r3, 26cb8 <ll_adv_enable+0x428>)
   26b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26b72:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
   26b76:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   26b78:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   26b7a:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b7c:	f7ff fac0 	bl	26100 <__aeabi_uldivmod>
   26b80:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   26b82:	f00a faf1 	bl	31168 <ticker_ticks_now_get>
   26b86:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b88:	f1b9 0f00 	cmp.w	r9, #0
   26b8c:	d108      	bne.n	26ba0 <ll_adv_enable+0x310>
   26b8e:	f898 5000 	ldrb.w	r5, [r8]
   26b92:	f005 050f 	and.w	r5, r5, #15
   26b96:	f1a5 0501 	sub.w	r5, r5, #1
   26b9a:	fab5 f585 	clz	r5, r5
   26b9e:	096d      	lsrs	r5, r5, #5
   26ba0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   26ba4:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26ba6:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   26baa:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26bae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   26bb2:	d036      	beq.n	26c22 <ll_adv_enable+0x392>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26bb4:	2000      	movs	r0, #0
   26bb6:	4a43      	ldr	r2, [pc, #268]	; (26cc4 <ll_adv_enable+0x434>)
   26bb8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 26cc8 <ll_adv_enable+0x438>
   26bbc:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   26bbe:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26bc0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   26bc4:	9301      	str	r3, [sp, #4]
   26bc6:	9205      	str	r2, [sp, #20]
   26bc8:	2103      	movs	r1, #3
   26bca:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26bce:	9406      	str	r4, [sp, #24]
   26bd0:	4633      	mov	r3, r6
   26bd2:	9000      	str	r0, [sp, #0]
   26bd4:	f8cd 8020 	str.w	r8, [sp, #32]
   26bd8:	f8cd 901c 	str.w	r9, [sp, #28]
   26bdc:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   26bde:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26be0:	f00a f9f6 	bl	30fd0 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26be4:	4641      	mov	r1, r8
   26be6:	f00c fc11 	bl	3340c <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   26bea:	2800      	cmp	r0, #0
   26bec:	d18b      	bne.n	26b06 <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26bee:	4a37      	ldr	r2, [pc, #220]	; (26ccc <ll_adv_enable+0x43c>)
   26bf0:	9205      	str	r2, [sp, #20]
   26bf2:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
   26bf6:	9200      	str	r2, [sp, #0]
   26bf8:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26bfc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26c00:	f8cd 901c 	str.w	r9, [sp, #28]
   26c04:	f8cd 8020 	str.w	r8, [sp, #32]
   26c08:	9406      	str	r4, [sp, #24]
   26c0a:	4633      	mov	r3, r6
   26c0c:	2201      	movs	r2, #1
   26c0e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26c10:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26c12:	f00a f9dd 	bl	30fd0 <ticker_start>
   26c16:	e02e      	b.n	26c76 <ll_adv_enable+0x3e6>
			return 0;
   26c18:	2700      	movs	r7, #0
}
   26c1a:	4638      	mov	r0, r7
   26c1c:	b00f      	add	sp, #60	; 0x3c
   26c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26c22:	4a2b      	ldr	r2, [pc, #172]	; (26cd0 <ll_adv_enable+0x440>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c24:	482b      	ldr	r0, [pc, #172]	; (26cd4 <ll_adv_enable+0x444>)
		ret = ticker_start_ext(
   26c26:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26c28:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c2c:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
   26c30:	9406      	str	r4, [sp, #24]
   26c32:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26c34:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c36:	2391      	movs	r3, #145	; 0x91
   26c38:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
   26c3c:	4b22      	ldr	r3, [pc, #136]	; (26cc8 <ll_adv_enable+0x438>)
   26c3e:	9307      	str	r3, [sp, #28]
   26c40:	4b20      	ldr	r3, [pc, #128]	; (26cc4 <ll_adv_enable+0x434>)
   26c42:	9305      	str	r3, [sp, #20]
   26c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26c48:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26c4a:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
   26c4e:	9303      	str	r3, [sp, #12]
   26c50:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c54:	a318      	add	r3, pc, #96	; (adr r3, 26cb8 <ll_adv_enable+0x428>)
   26c56:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26c5a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
   26c5e:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c62:	f7ff fa4d 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26c66:	4633      	mov	r3, r6
   26c68:	e9cd 5000 	strd	r5, r0, [sp]
   26c6c:	464a      	mov	r2, r9
   26c6e:	4628      	mov	r0, r5
   26c70:	2103      	movs	r1, #3
   26c72:	f00a f957 	bl	30f24 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26c76:	4641      	mov	r1, r8
   26c78:	f00c fbc8 	bl	3340c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26c7c:	2800      	cmp	r0, #0
   26c7e:	f47f af42 	bne.w	26b06 <ll_adv_enable+0x276>
	adv->is_enabled = 1;
   26c82:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   26c86:	f043 0301 	orr.w	r3, r3, #1
   26c8a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
   26c8e:	e643      	b.n	26918 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
   26c90:	2712      	movs	r7, #18
   26c92:	e641      	b.n	26918 <ll_adv_enable+0x88>
			conn_release(adv);
   26c94:	f00d f918 	bl	33ec8 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26c98:	2703      	movs	r7, #3
   26c9a:	e63d      	b.n	26918 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26c9c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   26ca0:	6768      	str	r0, [r5, #116]	; 0x74
   26ca2:	e667      	b.n	26974 <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26ca4:	2707      	movs	r7, #7
   26ca6:	e637      	b.n	26918 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
   26ca8:	4658      	mov	r0, fp
   26caa:	f00c fb0b 	bl	332c4 <ll_rx_release>
			ll_rx_link_release(link);
   26cae:	4650      	mov	r0, sl
   26cb0:	f00c fafc 	bl	332ac <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26cb4:	2707      	movs	r7, #7
   26cb6:	e62f      	b.n	26918 <ll_adv_enable+0x88>
   26cb8:	1afd498d 	.word	0x1afd498d
   26cbc:	00000007 	.word	0x00000007
   26cc0:	3b9aca00 	.word	0x3b9aca00
   26cc4:	00034105 	.word	0x00034105
   26cc8:	00032911 	.word	0x00032911
   26ccc:	00033c59 	.word	0x00033c59
   26cd0:	20002648 	.word	0x20002648
   26cd4:	84e72a00 	.word	0x84e72a00

00026cd8 <ull_adv_time_update>:
{
   26cd8:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26cda:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26cde:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26ce0:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26ce4:	460d      	mov	r5, r1
   26ce6:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26ce8:	2101      	movs	r1, #1
   26cea:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26cee:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26cf0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26cf4:	f009 f928 	bl	2ff48 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26cf8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26cfa:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26cfc:	4628      	mov	r0, r5
   26cfe:	f00d f9c9 	bl	34094 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d02:	491d      	ldr	r1, [pc, #116]	; (26d78 <ull_adv_time_update+0xa0>)
   26d04:	a31a      	add	r3, pc, #104	; (adr r3, 26d70 <ull_adv_time_update+0x98>)
   26d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   26d0a:	fba0 0101 	umull	r0, r1, r0, r1
   26d0e:	f7ff f9f7 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26d12:	6923      	ldr	r3, [r4, #16]
   26d14:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d16:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26d18:	d220      	bcs.n	26d5c <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26d1a:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26d1c:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d1e:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d20:	4a16      	ldr	r2, [pc, #88]	; (26d7c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d22:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d24:	4b16      	ldr	r3, [pc, #88]	; (26d80 <ull_adv_time_update+0xa8>)
   26d26:	1aa2      	subs	r2, r4, r2
   26d28:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26d2c:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d2e:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d30:	2300      	movs	r3, #0
   26d32:	440a      	add	r2, r1
   26d34:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26d36:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d38:	4912      	ldr	r1, [pc, #72]	; (26d84 <ull_adv_time_update+0xac>)
   26d3a:	9105      	str	r1, [sp, #20]
   26d3c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26d40:	2103      	movs	r1, #3
   26d42:	b2d2      	uxtb	r2, r2
   26d44:	9606      	str	r6, [sp, #24]
   26d46:	9300      	str	r3, [sp, #0]
   26d48:	4618      	mov	r0, r3
   26d4a:	f00a f9b3 	bl	310b4 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26d4e:	4631      	mov	r1, r6
   26d50:	f00c fb5c 	bl	3340c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26d54:	b948      	cbnz	r0, 26d6a <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
   26d56:	6125      	str	r5, [r4, #16]
}
   26d58:	b00a      	add	sp, #40	; 0x28
   26d5a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26d5c:	d902      	bls.n	26d64 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26d5e:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26d60:	2300      	movs	r3, #0
   26d62:	e7dc      	b.n	26d1e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
   26d64:	2000      	movs	r0, #0
}
   26d66:	b00a      	add	sp, #40	; 0x28
   26d68:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26d6a:	200c      	movs	r0, #12
}
   26d6c:	b00a      	add	sp, #40	; 0x28
   26d6e:	bd70      	pop	{r4, r5, r6, pc}
   26d70:	1afd498d 	.word	0x1afd498d
   26d74:	00000007 	.word	0x00000007
   26d78:	3b9aca00 	.word	0x3b9aca00
   26d7c:	200025d4 	.word	0x200025d4
   26d80:	8d3dcb09 	.word	0x8d3dcb09
   26d84:	00032911 	.word	0x00032911

00026d88 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d8c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26d8e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
   26d90:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d92:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d96:	b2b6      	uxth	r6, r6
   26d98:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d9a:	f013 0307 	ands.w	r3, r3, #7
{
   26d9e:	b08b      	sub	sp, #44	; 0x2c
   26da0:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26da2:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26da6:	f040 81a3 	bne.w	270f0 <event_conn_upd_prep+0x368>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26daa:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
   26dae:	eba9 0107 	sub.w	r1, r9, r7
   26db2:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   26db6:	0409      	lsls	r1, r1, #16
   26db8:	f100 820c 	bmi.w	271d4 <event_conn_upd_prep+0x44c>
   26dbc:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26dbe:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   26dc2:	2a00      	cmp	r2, #0
   26dc4:	f2c0 8135 	blt.w	27032 <event_conn_upd_prep+0x2aa>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   26dc8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   26dcc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26dd0:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   26dd4:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
   26dd8:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
   26ddc:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26de0:	4293      	cmp	r3, r2
   26de2:	d006      	beq.n	26df2 <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   26de4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26de8:	f003 030f 	and.w	r3, r3, #15
   26dec:	2b06      	cmp	r3, #6
   26dee:	f000 8247 	beq.w	27280 <event_conn_upd_prep+0x4f8>
	if (conn == conn_upd_curr) {
   26df2:	4bb1      	ldr	r3, [pc, #708]	; (270b8 <event_conn_upd_prep+0x330>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   26df4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
   26df8:	681a      	ldr	r2, [r3, #0]
   26dfa:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   26dfc:	bf04      	itt	eq
   26dfe:	2200      	moveq	r2, #0
   26e00:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   26e02:	2d00      	cmp	r5, #0
   26e04:	f000 8144 	beq.w	27090 <event_conn_upd_prep+0x308>
   26e08:	6828      	ldr	r0, [r5, #0]
   26e0a:	2800      	cmp	r0, #0
   26e0c:	f000 8140 	beq.w	27090 <event_conn_upd_prep+0x308>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   26e10:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   26e14:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   26e18:	6842      	ldr	r2, [r0, #4]
   26e1a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
   26e1e:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
   26e20:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   26e24:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   26e28:	f000 8117 	beq.w	2705a <event_conn_upd_prep+0x2d2>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   26e2c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   26e30:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   26e32:	2318      	movs	r3, #24
   26e34:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
   26e36:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
   26e38:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
   26e3c:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
   26e3e:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
   26e40:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   26e42:	4629      	mov	r1, r5
   26e44:	f00c fa44 	bl	332d0 <ll_rx_put>
		ll_rx_sched();
   26e48:	f00c fa4c 	bl	332e4 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   26e4c:	68a3      	ldr	r3, [r4, #8]
   26e4e:	2b00      	cmp	r3, #0
   26e50:	f2c0 80f7 	blt.w	27042 <event_conn_upd_prep+0x2ba>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   26e54:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e56:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
   26e5a:	fb10 f009 	smulbb	r0, r0, r9
   26e5e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e60:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
   26e64:	fb15 f301 	smulbb	r3, r5, r1
   26e68:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
   26e6a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e6c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
   26e70:	f0c0 80ce 	bcc.w	27010 <event_conn_upd_prep+0x288>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26e74:	fb05 0111 	mls	r1, r5, r1, r0
   26e78:	f240 43e2 	movw	r3, #1250	; 0x4e2
   26e7c:	488f      	ldr	r0, [pc, #572]	; (270bc <event_conn_upd_prep+0x334>)
   26e7e:	b289      	uxth	r1, r1
   26e80:	fb03 f101 	mul.w	r1, r3, r1
   26e84:	fba1 0100 	umull	r0, r1, r1, r0
   26e88:	a389      	add	r3, pc, #548	; (adr r3, 270b0 <event_conn_upd_prep+0x328>)
   26e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   26e8e:	f7ff f937 	bl	26100 <__aeabi_uldivmod>
   26e92:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   26e96:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   26e98:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   26e9a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   26e9e:	1bbe      	subs	r6, r7, r6
   26ea0:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
   26ea2:	f240 47e2 	movw	r7, #1250	; 0x4e2
		} else if (lll->role) {
   26ea6:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
   26ea8:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
   26eaa:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
   26eae:	f2c0 8196 	blt.w	271de <event_conn_upd_prep+0x456>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
   26eb2:	4a83      	ldr	r2, [pc, #524]	; (270c0 <event_conn_upd_prep+0x338>)
   26eb4:	4983      	ldr	r1, [pc, #524]	; (270c4 <event_conn_upd_prep+0x33c>)
   26eb6:	4884      	ldr	r0, [pc, #528]	; (270c8 <event_conn_upd_prep+0x340>)
   26eb8:	f640 439c 	movw	r3, #3228	; 0xc9c
   26ebc:	f01b ff28 	bl	42d10 <printk>
   26ec0:	4040      	eors	r0, r0
   26ec2:	f380 8811 	msr	BASEPRI, r0
   26ec6:	f04f 0003 	mov.w	r0, #3
   26eca:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
   26ecc:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
   26ece:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26ed0:	4a7e      	ldr	r2, [pc, #504]	; (270cc <event_conn_upd_prep+0x344>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26ed2:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26ed6:	497e      	ldr	r1, [pc, #504]	; (270d0 <event_conn_upd_prep+0x348>)
		lll->latency = conn->llcp_cu.latency;
   26ed8:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
   26edc:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26ede:	4432      	add	r2, r6
   26ee0:	fbb2 f2f6 	udiv	r2, r2, r6
   26ee4:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26ee8:	f242 7210 	movw	r2, #10000	; 0x2710
   26eec:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26ef0:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26ef2:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26ef4:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26ef8:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
   26efc:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   26f00:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f02:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26f04:	1d83      	adds	r3, r0, #6
   26f06:	429a      	cmp	r2, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26f08:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f0c:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26f10:	dd04      	ble.n	26f1c <event_conn_upd_prep+0x194>
   26f12:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   26f16:	33fa      	adds	r3, #250	; 0xfa
   26f18:	441a      	add	r2, r3
   26f1a:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   26f1c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26f20:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   26f24:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   26f26:	bf44      	itt	mi
   26f28:	2300      	movmi	r3, #0
   26f2a:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26f2e:	2102      	movs	r1, #2
   26f30:	2001      	movs	r0, #1
   26f32:	f015 ff71 	bl	3ce18 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26f36:	2200      	movs	r2, #0
   26f38:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26f3a:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26f3c:	2001      	movs	r0, #1
   26f3e:	f008 fed3 	bl	2fce8 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   26f42:	4964      	ldr	r1, [pc, #400]	; (270d4 <event_conn_upd_prep+0x34c>)
   26f44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   26f48:	4620      	mov	r0, r4
   26f4a:	f008 fe5d 	bl	2fc08 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   26f4e:	f100 0a03 	add.w	sl, r0, #3
   26f52:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   26f56:	4b60      	ldr	r3, [pc, #384]	; (270d8 <event_conn_upd_prep+0x350>)
   26f58:	9400      	str	r4, [sp, #0]
   26f5a:	4652      	mov	r2, sl
   26f5c:	2101      	movs	r1, #1
   26f5e:	2000      	movs	r0, #0
   26f60:	f00a f8c0 	bl	310e4 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26f64:	f030 0302 	bics.w	r3, r0, #2
   26f68:	d00c      	beq.n	26f84 <event_conn_upd_prep+0x1fc>
   26f6a:	4a55      	ldr	r2, [pc, #340]	; (270c0 <event_conn_upd_prep+0x338>)
   26f6c:	495b      	ldr	r1, [pc, #364]	; (270dc <event_conn_upd_prep+0x354>)
   26f6e:	4856      	ldr	r0, [pc, #344]	; (270c8 <event_conn_upd_prep+0x340>)
   26f70:	f640 43cb 	movw	r3, #3275	; 0xccb
   26f74:	f01b fecc 	bl	42d10 <printk>
   26f78:	4040      	eors	r0, r0
   26f7a:	f380 8811 	msr	BASEPRI, r0
   26f7e:	f04f 0003 	mov.w	r0, #3
   26f82:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   26f84:	4e4d      	ldr	r6, [pc, #308]	; (270bc <event_conn_upd_prep+0x334>)
   26f86:	fbab 6b06 	umull	r6, fp, fp, r6
   26f8a:	a349      	add	r3, pc, #292	; (adr r3, 270b0 <event_conn_upd_prep+0x328>)
   26f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   26f90:	4630      	mov	r0, r6
   26f92:	4659      	mov	r1, fp
   26f94:	f7ff f8b4 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f98:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f9a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f9e:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
   26fa0:	484f      	ldr	r0, [pc, #316]	; (270e0 <event_conn_upd_prep+0x358>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fa2:	6923      	ldr	r3, [r4, #16]
   26fa4:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
   26fa6:	fba5 0100 	umull	r0, r1, r5, r0
   26faa:	2307      	movs	r3, #7
   26fac:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fb0:	4b4c      	ldr	r3, [pc, #304]	; (270e4 <event_conn_upd_prep+0x35c>)
   26fb2:	9307      	str	r3, [sp, #28]
   26fb4:	4b4c      	ldr	r3, [pc, #304]	; (270e8 <event_conn_upd_prep+0x360>)
   26fb6:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
   26fb8:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fba:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
   26fbe:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fc2:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
   26fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26fc8:	2300      	movs	r3, #0
   26fca:	f7ff f899 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fce:	4643      	mov	r3, r8
   26fd0:	e9cd 5001 	strd	r5, r0, [sp, #4]
   26fd4:	9700      	str	r7, [sp, #0]
   26fd6:	4652      	mov	r2, sl
   26fd8:	2101      	movs	r1, #1
   26fda:	2000      	movs	r0, #0
   26fdc:	f009 fff8 	bl	30fd0 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26fe0:	f030 0302 	bics.w	r3, r0, #2
   26fe4:	d00c      	beq.n	27000 <event_conn_upd_prep+0x278>
   26fe6:	4a36      	ldr	r2, [pc, #216]	; (270c0 <event_conn_upd_prep+0x338>)
   26fe8:	493c      	ldr	r1, [pc, #240]	; (270dc <event_conn_upd_prep+0x354>)
   26fea:	4837      	ldr	r0, [pc, #220]	; (270c8 <event_conn_upd_prep+0x340>)
   26fec:	f640 43e5 	movw	r3, #3301	; 0xce5
   26ff0:	f01b fe8e 	bl	42d10 <printk>
   26ff4:	4040      	eors	r0, r0
   26ff6:	f380 8811 	msr	BASEPRI, r0
   26ffa:	f04f 0003 	mov.w	r0, #3
   26ffe:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   27000:	f1b9 0f00 	cmp.w	r9, #0
   27004:	f040 8136 	bne.w	27274 <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   27008:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   2700a:	b00b      	add	sp, #44	; 0x2c
   2700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   27010:	1a1b      	subs	r3, r3, r0
   27012:	492a      	ldr	r1, [pc, #168]	; (270bc <event_conn_upd_prep+0x334>)
   27014:	f240 40e2 	movw	r0, #1250	; 0x4e2
   27018:	fb03 f000 	mul.w	r0, r3, r0
   2701c:	fba0 0101 	umull	r0, r1, r0, r1
   27020:	a323      	add	r3, pc, #140	; (adr r3, 270b0 <event_conn_upd_prep+0x328>)
   27022:	e9d3 2300 	ldrd	r2, r3, [r3]
   27026:	f7ff f86b 	bl	26100 <__aeabi_uldivmod>
   2702a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2702e:	4480      	add	r8, r0
   27030:	e731      	b.n	26e96 <event_conn_upd_prep+0x10e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   27032:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
   27036:	2a00      	cmp	r2, #0
   27038:	f43f aec6 	beq.w	26dc8 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
   2703c:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
   27040:	e6c6      	b.n	26dd0 <event_conn_upd_prep+0x48>
			uint32_t ticks_prepare_to_start =
   27042:	68e1      	ldr	r1, [r4, #12]
   27044:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   27046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2704a:	4291      	cmp	r1, r2
   2704c:	bf2c      	ite	cs
   2704e:	4488      	addcs	r8, r1
   27050:	4490      	addcc	r8, r2
   27052:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   27054:	eba8 0803 	sub.w	r8, r8, r3
   27058:	e6fc      	b.n	26e54 <event_conn_upd_prep+0xcc>
		if ((conn->llcp_cu.interval != lll->interval) ||
   2705a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   2705e:	4594      	cmp	ip, r2
   27060:	f47f aee4 	bne.w	26e2c <event_conn_upd_prep+0xa4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   27064:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   27068:	fb0c fe03 	mul.w	lr, ip, r3
   2706c:	f242 7c10 	movw	ip, #10000	; 0x2710
   27070:	fb0c ec01 	mla	ip, ip, r1, lr
   27074:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   27078:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
   2707c:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
   27080:	fa1f fc8c 	uxth.w	ip, ip
   27084:	45e6      	cmp	lr, ip
   27086:	f47f aed1 	bne.w	26e2c <event_conn_upd_prep+0xa4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   2708a:	2301      	movs	r3, #1
   2708c:	712b      	strb	r3, [r5, #4]
   2708e:	e6d8      	b.n	26e42 <event_conn_upd_prep+0xba>
		LL_ASSERT(rx && rx->hdr.link);
   27090:	4a0b      	ldr	r2, [pc, #44]	; (270c0 <event_conn_upd_prep+0x338>)
   27092:	4916      	ldr	r1, [pc, #88]	; (270ec <event_conn_upd_prep+0x364>)
   27094:	480c      	ldr	r0, [pc, #48]	; (270c8 <event_conn_upd_prep+0x340>)
   27096:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   2709a:	f01b fe39 	bl	42d10 <printk>
   2709e:	4040      	eors	r0, r0
   270a0:	f380 8811 	msr	BASEPRI, r0
   270a4:	f04f 0003 	mov.w	r0, #3
   270a8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   270aa:	6828      	ldr	r0, [r5, #0]
   270ac:	e6b0      	b.n	26e10 <event_conn_upd_prep+0x88>
   270ae:	bf00      	nop
   270b0:	1afd498d 	.word	0x1afd498d
   270b4:	00000007 	.word	0x00000007
   270b8:	20002668 	.word	0x20002668
   270bc:	3b9aca00 	.word	0x3b9aca00
   270c0:	0004a914 	.word	0x0004a914
   270c4:	0004a500 	.word	0x0004a500
   270c8:	0004a4a0 	.word	0x0004a4a0
   270cc:	026259ff 	.word	0x026259ff
   270d0:	01c9c37f 	.word	0x01c9c37f
   270d4:	20001570 	.word	0x20001570
   270d8:	00034b69 	.word	0x00034b69
   270dc:	0004a9f4 	.word	0x0004a9f4
   270e0:	1afd498d 	.word	0x1afd498d
   270e4:	00034b11 	.word	0x00034b11
   270e8:	00039171 	.word	0x00039171
   270ec:	0004a9e0 	.word	0x0004a9e0
		rx = ll_pdu_rx_alloc_peek(1);
   270f0:	2001      	movs	r0, #1
   270f2:	f00c f8fd 	bl	332f0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   270f6:	4606      	mov	r6, r0
   270f8:	2800      	cmp	r0, #0
   270fa:	f000 80cf 	beq.w	2729c <event_conn_upd_prep+0x514>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   270fe:	4874      	ldr	r0, [pc, #464]	; (272d0 <event_conn_upd_prep+0x548>)
   27100:	f008 fd4c 	bl	2fb9c <mem_acquire>
		if (!tx) {
   27104:	4605      	mov	r5, r0
   27106:	2800      	cmp	r0, #0
   27108:	f000 80c8 	beq.w	2729c <event_conn_upd_prep+0x514>
	if (!conn_upd_curr) {
   2710c:	4b71      	ldr	r3, [pc, #452]	; (272d4 <event_conn_upd_prep+0x54c>)
   2710e:	681a      	ldr	r2, [r3, #0]
   27110:	2a00      	cmp	r2, #0
   27112:	f000 80bb 	beq.w	2728c <event_conn_upd_prep+0x504>
		(void)ll_pdu_rx_alloc();
   27116:	f00c f909 	bl	3332c <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2711a:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
   2711c:	6832      	ldr	r2, [r6, #0]
   2711e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   27122:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27124:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
   27128:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   2712c:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2712e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   27130:	230c      	movs	r3, #12
   27132:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   27134:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   27136:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   2713a:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   2713c:	4a66      	ldr	r2, [pc, #408]	; (272d8 <event_conn_upd_prep+0x550>)
   2713e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
					      conn->lll.latency + 6;
   27142:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   27144:	fba2 2303 	umull	r2, r3, r2, r3
   27148:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   2714a:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   2714e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   27152:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   27156:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2715a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   2715e:	f8a5 300d 	strh.w	r3, [r5, #13]
					      conn->lll.latency + 6;
   27162:	3106      	adds	r1, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   27164:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
   27168:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
   2716c:	4449      	add	r1, r9
	    conn->tx_head &&
   2716e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
   27172:	b289      	uxth	r1, r1
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   27174:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
   27178:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2717c:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   27180:	f8a5 1011 	strh.w	r1, [r5, #17]
	if (
   27184:	b1bb      	cbz	r3, 271b6 <event_conn_upd_prep+0x42e>
	    !conn->llcp_enc.pause_tx &&
   27186:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   2718a:	0796      	lsls	r6, r2, #30
   2718c:	d413      	bmi.n	271b6 <event_conn_upd_prep+0x42e>
	    !conn->llcp_phy.pause_tx &&
   2718e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   27192:	07d0      	lsls	r0, r2, #31
   27194:	d40f      	bmi.n	271b6 <event_conn_upd_prep+0x42e>
		if (conn->tx_head == conn->tx_data) {
   27196:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   2719a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   2719c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   271a0:	d07f      	beq.n	272a2 <event_conn_upd_prep+0x51a>
		} else if (!conn->tx_ctrl) {
   271a2:	b962      	cbnz	r2, 271be <event_conn_upd_prep+0x436>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   271a4:	791a      	ldrb	r2, [r3, #4]
   271a6:	f002 0203 	and.w	r2, r2, #3
   271aa:	2a03      	cmp	r2, #3
   271ac:	f000 8085 	beq.w	272ba <event_conn_upd_prep+0x532>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   271b0:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   271b4:	e005      	b.n	271c2 <event_conn_upd_prep+0x43a>
		if (!conn->tx_ctrl) {
   271b6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   271ba:	2a00      	cmp	r2, #0
   271bc:	d068      	beq.n	27290 <event_conn_upd_prep+0x508>
	tx->next = conn->tx_ctrl_last->next;
   271be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   271c2:	681a      	ldr	r2, [r3, #0]
   271c4:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   271c6:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   271c8:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   271ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   271ce:	b90b      	cbnz	r3, 271d4 <event_conn_upd_prep+0x44c>
		conn->tx_data_last = tx;
   271d0:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
   271d4:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   271d8:	b00b      	add	sp, #44	; 0x2c
   271da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lll->periph.window_widening_periodic_us *
   271de:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   271e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   271e2:	fb02 3319 	mls	r3, r2, r9, r3
   271e6:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   271e8:	f013 fec0 	bl	3af6c <lll_clock_ppm_local_get>
   271ec:	4605      	mov	r5, r0
   271ee:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   271f2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   271f6:	f013 febb 	bl	3af70 <lll_clock_ppm_get>
   271fa:	4405      	add	r5, r0
   271fc:	fb06 f505 	mul.w	r5, r6, r5
   27200:	4b36      	ldr	r3, [pc, #216]	; (272dc <event_conn_upd_prep+0x554>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27202:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27206:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   2720a:	f205 253f 	addw	r5, r5, #575	; 0x23f
   2720e:	fba3 3505 	umull	r3, r5, r3, r5
   27212:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27214:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
   27218:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
   2721a:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
   2721c:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27220:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   27222:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27224:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
   27226:	4293      	cmp	r3, r2
   27228:	bf28      	it	cs
   2722a:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
   2722c:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
   2722e:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27232:	4d2b      	ldr	r5, [pc, #172]	; (272e0 <event_conn_upd_prep+0x558>)
			lll->periph.window_widening_prepare_us +=
   27234:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   27238:	2300      	movs	r3, #0
   2723a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2723e:	fba0 0105 	umull	r0, r1, r0, r5
   27242:	a321      	add	r3, pc, #132	; (adr r3, 272c8 <event_conn_upd_prep+0x540>)
   27244:	e9d3 2300 	ldrd	r2, r3, [r3]
   27248:	f7fe ff5a 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2724c:	4922      	ldr	r1, [pc, #136]	; (272d8 <event_conn_upd_prep+0x550>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2724e:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   27252:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   27256:	fba1 3000 	umull	r3, r0, r1, r0
   2725a:	0a80      	lsrs	r0, r0, #10
   2725c:	fb07 f000 	mul.w	r0, r7, r0
   27260:	a319      	add	r3, pc, #100	; (adr r3, 272c8 <event_conn_upd_prep+0x540>)
   27262:	e9d3 2300 	ldrd	r2, r3, [r3]
   27266:	fba0 0105 	umull	r0, r1, r0, r5
   2726a:	f7fe ff49 	bl	26100 <__aeabi_uldivmod>
   2726e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   27272:	e62d      	b.n	26ed0 <event_conn_upd_prep+0x148>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   27274:	2201      	movs	r2, #1
   27276:	2102      	movs	r1, #2
   27278:	4610      	mov	r0, r2
   2727a:	f008 fd35 	bl	2fce8 <mayfly_enable>
   2727e:	e6c3      	b.n	27008 <event_conn_upd_prep+0x280>
			conn->procedure_expire = 0U;
   27280:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27282:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   27286:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   2728a:	e5b2      	b.n	26df2 <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
   2728c:	601c      	str	r4, [r3, #0]
   2728e:	e742      	b.n	27116 <event_conn_upd_prep+0x38e>
			tx->next = conn->tx_head;
   27290:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   27292:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   27296:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   2729a:	e798      	b.n	271ce <event_conn_upd_prep+0x446>
			return -ENOBUFS;
   2729c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   272a0:	e6b3      	b.n	2700a <event_conn_upd_prep+0x282>
			conn->tx_data = conn->tx_data->next;
   272a2:	6819      	ldr	r1, [r3, #0]
   272a4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   272a8:	2a00      	cmp	r2, #0
   272aa:	d188      	bne.n	271be <event_conn_upd_prep+0x436>
			tx->next = conn->tx_head->next;
   272ac:	681a      	ldr	r2, [r3, #0]
   272ae:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   272b0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   272b2:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   272b4:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   272b8:	e789      	b.n	271ce <event_conn_upd_prep+0x446>
	    ((pdu_data_tx->llctrl.opcode !=
   272ba:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   272bc:	2a03      	cmp	r2, #3
   272be:	d0f5      	beq.n	272ac <event_conn_upd_prep+0x524>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   272c0:	2a0a      	cmp	r2, #10
   272c2:	f47f af75 	bne.w	271b0 <event_conn_upd_prep+0x428>
   272c6:	e7f1      	b.n	272ac <event_conn_upd_prep+0x524>
   272c8:	1afd498d 	.word	0x1afd498d
   272cc:	00000007 	.word	0x00000007
   272d0:	200026fc 	.word	0x200026fc
   272d4:	20002668 	.word	0x20002668
   272d8:	d1b71759 	.word	0xd1b71759
   272dc:	431bde83 	.word	0x431bde83
   272e0:	3b9aca00 	.word	0x3b9aca00
   272e4:	00000000 	.word	0x00000000

000272e8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   272e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   272ec:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   272ee:	f8d2 8000 	ldr.w	r8, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   272f2:	681b      	ldr	r3, [r3, #0]
{
   272f4:	b097      	sub	sp, #92	; 0x5c
   272f6:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   272f8:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   272fa:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   272fc:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
   27300:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   27304:	4605      	mov	r5, r0
   27306:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27308:	a814      	add	r0, sp, #80	; 0x50
   2730a:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   2730c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27310:	f01d fdd6 	bl	44ec0 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   27314:	f894 9011 	ldrb.w	r9, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
   27318:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   2731c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   27320:	d05b      	beq.n	273da <ull_periph_setup+0xf2>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   27322:	465a      	mov	r2, fp
   27324:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   27328:	4648      	mov	r0, r9
   2732a:	f012 fa33 	bl	39794 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   2732e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27332:	3302      	adds	r3, #2
   27334:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   27338:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   2733a:	2203      	movs	r2, #3
	link = rx->link;
   2733c:	f851 6b2e 	ldr.w	r6, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   27340:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27344:	f107 0a04 	add.w	sl, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   27348:	f01d fdba 	bl	44ec0 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   2734c:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27350:	2204      	movs	r2, #4
   27352:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   27356:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27358:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   2735a:	f01d fdb1 	bl	44ec0 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   2735e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27360:	2205      	movs	r2, #5
   27362:	f105 013a 	add.w	r1, r5, #58	; 0x3a
   27366:	4618      	mov	r0, r3
   27368:	f01d fdaa 	bl	44ec0 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2736c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2736e:	2105      	movs	r1, #5
   27370:	4618      	mov	r0, r3
   27372:	f008 fde9 	bl	2ff48 <util_ones_count_get>
   27376:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27378:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2737c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   27380:	f360 0305 	bfi	r3, r0, #0, #6
   27384:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27386:	f3c2 0304 	ubfx	r3, r2, #0, #5
   2738a:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   2738c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   2738e:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27390:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27392:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27394:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27398:	d905      	bls.n	273a6 <ull_periph_setup+0xbe>
   2739a:	331b      	adds	r3, #27
   2739c:	f003 031f 	and.w	r3, r3, #31
   273a0:	2b0b      	cmp	r3, #11
   273a2:	d800      	bhi.n	273a6 <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   273a4:	b9f9      	cbnz	r1, 273e6 <ull_periph_setup+0xfe>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   273a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   273a8:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
   273aa:	2200      	movs	r2, #0
   273ac:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
   273ae:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   273b2:	4630      	mov	r0, r6
	lll->periph.initiated = 0U;
   273b4:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
   273b8:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
   273ba:	f887 3020 	strb.w	r3, [r7, #32]
		ll_rx_put(link, rx);
   273be:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
   273c0:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
   273c2:	f00b ff85 	bl	332d0 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   273c6:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   273c8:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
   273ca:	4621      	mov	r1, r4
   273cc:	f00b ff80 	bl	332d0 <ll_rx_put>
	ll_rx_sched();
   273d0:	f00b ff88 	bl	332e4 <ll_rx_sched>
}
   273d4:	b017      	add	sp, #92	; 0x5c
   273d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   273da:	2206      	movs	r2, #6
   273dc:	a914      	add	r1, sp, #80	; 0x50
   273de:	4658      	mov	r0, fp
   273e0:	f01d fd6e 	bl	44ec0 <memcpy>
   273e4:	e7a8      	b.n	27338 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
   273e6:	6823      	ldr	r3, [r4, #0]
   273e8:	2000      	movs	r0, #0
   273ea:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   273ec:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
   273f0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   273f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   273f8:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   273fa:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
   273fe:	0952      	lsrs	r2, r2, #5
   27400:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27404:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
   27406:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27408:	f240 42e2 	movw	r2, #1250	; 0x4e2
   2740c:	fb02 f001 	mul.w	r0, r2, r1
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27410:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27414:	900b      	str	r0, [sp, #44]	; 0x2c
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27416:	f013 fda9 	bl	3af6c <lll_clock_ppm_local_get>
   2741a:	900c      	str	r0, [sp, #48]	; 0x30
   2741c:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
   27420:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27424:	f013 fda4 	bl	3af70 <lll_clock_ppm_get>
   27428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2742a:	49c5      	ldr	r1, [pc, #788]	; (27740 <ull_periph_setup+0x458>)
   2742c:	4403      	add	r3, r0
   2742e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27430:	fb00 f303 	mul.w	r3, r0, r3
   27434:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   27438:	f203 233f 	addw	r3, r3, #575	; 0x23f
   2743c:	fba1 2303 	umull	r2, r3, r1, r3
   27440:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
   27442:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27444:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27448:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   2744a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   2744e:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27452:	0843      	lsrs	r3, r0, #1
   27454:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27456:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27458:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   2745a:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2745c:	4ab9      	ldr	r2, [pc, #740]	; (27744 <ull_periph_setup+0x45c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   2745e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   27462:	469e      	mov	lr, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27464:	4bb8      	ldr	r3, [pc, #736]	; (27748 <ull_periph_setup+0x460>)
   27466:	4684      	mov	ip, r0
   27468:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2746a:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2746c:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27470:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27474:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27478:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   2747c:	fa1f f28e 	uxth.w	r2, lr
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27480:	fb00 c202 	mla	r2, r0, r2, ip
   27484:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27486:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27488:	fbb2 f2fc 	udiv	r2, r2, ip
   2748c:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27490:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27492:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27494:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27498:	dd04      	ble.n	274a4 <ull_periph_setup+0x1bc>
   2749a:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   2749e:	31fa      	adds	r1, #250	; 0xfa
   274a0:	440a      	add	r2, r1
   274a2:	b292      	uxth	r2, r2
   274a4:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   274a8:	4651      	mov	r1, sl
   274aa:	2204      	movs	r2, #4
   274ac:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
   274b0:	f01d fd06 	bl	44ec0 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   274b4:	462b      	mov	r3, r5
   274b6:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   274ba:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   274be:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
   274c0:	910f      	str	r1, [sp, #60]	; 0x3c
   274c2:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   274c4:	f100 8115 	bmi.w	276f2 <ull_periph_setup+0x40a>
	cc->status = 0U;
   274c8:	f44f 7380 	mov.w	r3, #256	; 0x100
   274cc:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   274ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   274d0:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   274d4:	f012 fece 	bl	3a274 <ull_filter_lll_lrpa_used>
   274d8:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   274da:	2206      	movs	r2, #6
   274dc:	f105 002b 	add.w	r0, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   274e0:	2900      	cmp	r1, #0
   274e2:	f000 80eb 	beq.w	276bc <ull_periph_setup+0x3d4>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   274e6:	f105 0124 	add.w	r1, r5, #36	; 0x24
   274ea:	f01d fce9 	bl	44ec0 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   274ee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   274f2:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
   274f6:	f000 80e4 	beq.w	276c2 <ull_periph_setup+0x3da>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   274fa:	a914      	add	r1, sp, #80	; 0x50
   274fc:	2206      	movs	r2, #6
   274fe:	f01d fcdf 	bl	44ec0 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   27502:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27506:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   27508:	4659      	mov	r1, fp
   2750a:	2206      	movs	r2, #6
   2750c:	f105 001f 	add.w	r0, r5, #31
   27510:	f01d fcd6 	bl	44ec0 <memcpy>
	cc->sca = conn->periph.sca;
   27514:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
   27518:	89fa      	ldrh	r2, [r7, #14]
   2751a:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
   2751c:	8a3a      	ldrh	r2, [r7, #16]
   2751e:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
   27520:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
   27524:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
   27528:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
   2752c:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
   2752e:	4640      	mov	r0, r8
   27530:	f00d feee 	bl	35310 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   27534:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
   27536:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
   27538:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
   2753a:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
   2753c:	4630      	mov	r0, r6
   2753e:	f00b fec7 	bl	332d0 <ll_rx_put>
		rx->handle = lll->handle;
   27542:	89bb      	ldrh	r3, [r7, #12]
   27544:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27546:	231b      	movs	r3, #27
   27548:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
   2754a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
   2754c:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
   2754e:	2b00      	cmp	r3, #0
   27550:	f040 80bc 	bne.w	276cc <ull_periph_setup+0x3e4>
			cs->csa = 0x00;
   27554:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   27558:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
   2755a:	4629      	mov	r1, r5
   2755c:	4630      	mov	r0, r6
   2755e:	f00b feb7 	bl	332d0 <ll_rx_put>
	ll_rx_sched();
   27562:	f00b febf 	bl	332e4 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27566:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   2756a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   2756e:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27572:	2101      	movs	r1, #1
   27574:	f000 0007 	and.w	r0, r0, #7
   27578:	f013 fb08 	bl	3ab8c <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   2757c:	442e      	add	r6, r5
   2757e:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
   27582:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27584:	4682      	mov	sl, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27586:	4871      	ldr	r0, [pc, #452]	; (2774c <ull_periph_setup+0x464>)
	conn->ull.ticks_active_to_start = 0U;
   27588:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
   2758c:	2331      	movs	r3, #49	; 0x31
   2758e:	f8c8 3008 	str.w	r3, [r8, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27592:	fba1 0100 	umull	r0, r1, r1, r0
   27596:	a368      	add	r3, pc, #416	; (adr r3, 27738 <ull_periph_setup+0x450>)
   27598:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   2759c:	f8c8 9004 	str.w	r9, [r8, #4]
	conn->ull.ticks_preempt_to_start =
   275a0:	f8c8 900c 	str.w	r9, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   275a4:	f7fe fdac 	bl	26100 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   275a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   275aa:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   275ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
   275ae:	68e5      	ldr	r5, [r4, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   275b0:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   275b2:	f240 43e2 	movw	r3, #1250	; 0x4e2
   275b6:	fb03 5502 	mla	r5, r3, r2, r5
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   275ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
   275be:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
   275c2:	eba5 030a 	sub.w	r3, r5, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   275c6:	464a      	mov	r2, r9
   275c8:	2102      	movs	r1, #2
	conn->ull.ticks_slot =
   275ca:	f8c8 0010 	str.w	r0, [r8, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   275ce:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
   275d0:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   275d2:	f008 fb89 	bl	2fce8 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   275d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   275d8:	4628      	mov	r0, r5
   275da:	f00c ff5b 	bl	34494 <ull_adv_handle_get>
   275de:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   275e0:	4b5b      	ldr	r3, [pc, #364]	; (27750 <ull_periph_setup+0x468>)
   275e2:	9500      	str	r5, [sp, #0]
   275e4:	b2d2      	uxtb	r2, r2
   275e6:	4648      	mov	r0, r9
   275e8:	2101      	movs	r1, #1
   275ea:	f009 fd7b 	bl	310e4 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   275ee:	2801      	cmp	r0, #1
   275f0:	f000 808c 	beq.w	2770c <ull_periph_setup+0x424>
	if (adv->lll.is_hdcd) {
   275f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   275f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   275fa:	07db      	lsls	r3, r3, #31
   275fc:	d471      	bmi.n	276e2 <ull_periph_setup+0x3fa>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   275fe:	4640      	mov	r0, r8
   27600:	f00d fe86 	bl	35310 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27604:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2774c <ull_periph_setup+0x464>
   27608:	fba6 5609 	umull	r5, r6, r6, r9
   2760c:	a34a      	add	r3, pc, #296	; (adr r3, 27738 <ull_periph_setup+0x450>)
   2760e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27612:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27614:	4631      	mov	r1, r6
   27616:	4628      	mov	r0, r5
   27618:	f7fe fd72 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2761c:	68a3      	ldr	r3, [r4, #8]
   2761e:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27622:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27626:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
   2762a:	4b4a      	ldr	r3, [pc, #296]	; (27754 <ull_periph_setup+0x46c>)
   2762c:	9307      	str	r3, [sp, #28]
   2762e:	4b4a      	ldr	r3, [pc, #296]	; (27758 <ull_periph_setup+0x470>)
   27630:	9305      	str	r3, [sp, #20]
   27632:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   27636:	9308      	str	r3, [sp, #32]
   27638:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2763c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   27640:	4846      	ldr	r0, [pc, #280]	; (2775c <ull_periph_setup+0x474>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27642:	f04f 0a00 	mov.w	sl, #0
   27646:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2764a:	fba7 0100 	umull	r0, r1, r7, r0
   2764e:	2307      	movs	r3, #7
   27650:	1a28      	subs	r0, r5, r0
   27652:	fb03 1107 	mla	r1, r3, r7, r1
   27656:	eb66 0101 	sbc.w	r1, r6, r1
   2765a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2765e:	2300      	movs	r3, #0
   27660:	f7fe fd4e 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27666:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2766a:	fba3 0109 	umull	r0, r1, r3, r9
   2766e:	a332      	add	r3, pc, #200	; (adr r3, 27738 <ull_periph_setup+0x450>)
   27670:	e9d3 2300 	ldrd	r2, r3, [r3]
   27674:	f7fe fd44 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27678:	b2e4      	uxtb	r4, r4
   2767a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2767e:	9000      	str	r0, [sp, #0]
   27680:	465b      	mov	r3, fp
   27682:	4622      	mov	r2, r4
   27684:	2101      	movs	r1, #1
   27686:	4650      	mov	r0, sl
   27688:	f009 fca2 	bl	30fd0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2768c:	f030 0302 	bics.w	r3, r0, #2
   27690:	d00c      	beq.n	276ac <ull_periph_setup+0x3c4>
   27692:	4a33      	ldr	r2, [pc, #204]	; (27760 <ull_periph_setup+0x478>)
   27694:	4933      	ldr	r1, [pc, #204]	; (27764 <ull_periph_setup+0x47c>)
   27696:	4834      	ldr	r0, [pc, #208]	; (27768 <ull_periph_setup+0x480>)
   27698:	f240 13c9 	movw	r3, #457	; 0x1c9
   2769c:	f01b fb38 	bl	42d10 <printk>
   276a0:	4040      	eors	r0, r0
   276a2:	f380 8811 	msr	BASEPRI, r0
   276a6:	f04f 0003 	mov.w	r0, #3
   276aa:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   276ac:	2201      	movs	r2, #1
   276ae:	2102      	movs	r1, #2
   276b0:	4610      	mov	r0, r2
   276b2:	f008 fb19 	bl	2fce8 <mayfly_enable>
}
   276b6:	b017      	add	sp, #92	; 0x5c
   276b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   276bc:	f01d fc0b 	bl	44ed6 <memset>
   276c0:	e715      	b.n	274ee <ull_periph_setup+0x206>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   276c2:	2206      	movs	r2, #6
   276c4:	2100      	movs	r1, #0
   276c6:	f01d fc06 	bl	44ed6 <memset>
   276ca:	e71a      	b.n	27502 <ull_periph_setup+0x21a>
			lll->data_chan_sel = 1;
   276cc:	7f7b      	ldrb	r3, [r7, #29]
   276ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   276d2:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   276d4:	4650      	mov	r0, sl
   276d6:	f011 fe69 	bl	393ac <lll_chan_id>
			cs->csa = 0x01;
   276da:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   276dc:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
   276de:	772b      	strb	r3, [r5, #28]
   276e0:	e73b      	b.n	2755a <ull_periph_setup+0x272>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   276e2:	2300      	movs	r3, #0
   276e4:	2201      	movs	r2, #1
   276e6:	9300      	str	r3, [sp, #0]
   276e8:	4618      	mov	r0, r3
   276ea:	4611      	mov	r1, r2
   276ec:	f009 fcfa 	bl	310e4 <ticker_stop>
   276f0:	e785      	b.n	275fe <ull_periph_setup+0x316>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   276f2:	4a1b      	ldr	r2, [pc, #108]	; (27760 <ull_periph_setup+0x478>)
   276f4:	491d      	ldr	r1, [pc, #116]	; (2776c <ull_periph_setup+0x484>)
   276f6:	481c      	ldr	r0, [pc, #112]	; (27768 <ull_periph_setup+0x480>)
   276f8:	23f1      	movs	r3, #241	; 0xf1
   276fa:	f01b fb09 	bl	42d10 <printk>
   276fe:	4040      	eors	r0, r0
   27700:	f380 8811 	msr	BASEPRI, r0
   27704:	f04f 0003 	mov.w	r0, #3
   27708:	df02      	svc	2
   2770a:	e6dd      	b.n	274c8 <ull_periph_setup+0x1e0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   2770c:	f00b febc 	bl	33488 <ull_disable_mark_get>
   27710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27712:	4283      	cmp	r3, r0
   27714:	f43f af6e 	beq.w	275f4 <ull_periph_setup+0x30c>
   27718:	4a11      	ldr	r2, [pc, #68]	; (27760 <ull_periph_setup+0x478>)
   2771a:	4915      	ldr	r1, [pc, #84]	; (27770 <ull_periph_setup+0x488>)
   2771c:	4812      	ldr	r0, [pc, #72]	; (27768 <ull_periph_setup+0x480>)
   2771e:	f240 239f 	movw	r3, #671	; 0x29f
   27722:	f01b faf5 	bl	42d10 <printk>
   27726:	4040      	eors	r0, r0
   27728:	f380 8811 	msr	BASEPRI, r0
   2772c:	f04f 0003 	mov.w	r0, #3
   27730:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   27732:	e75f      	b.n	275f4 <ull_periph_setup+0x30c>
   27734:	f3af 8000 	nop.w
   27738:	1afd498d 	.word	0x1afd498d
   2773c:	00000007 	.word	0x00000007
   27740:	431bde83 	.word	0x431bde83
   27744:	026259ff 	.word	0x026259ff
   27748:	01c9c37f 	.word	0x01c9c37f
   2774c:	3b9aca00 	.word	0x3b9aca00
   27750:	00039135 	.word	0x00039135
   27754:	00039105 	.word	0x00039105
   27758:	00039171 	.word	0x00039171
   2775c:	1afd498d 	.word	0x1afd498d
   27760:	0004ab08 	.word	0x0004ab08
   27764:	0004a9f4 	.word	0x0004a9f4
   27768:	0004a4a0 	.word	0x0004a4a0
   2776c:	0004a588 	.word	0x0004a588
   27770:	0004ab64 	.word	0x0004ab64
   27774:	00000000 	.word	0x00000000

00027778 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   27778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2777c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   2777e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 27858 <nrf_flash_sync_exe+0xe0>
{
   27782:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   27784:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   27788:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   2778c:	f00b fe18 	bl	333c0 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   27790:	4f32      	ldr	r7, [pc, #200]	; (2785c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   27792:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   27796:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   2779a:	f009 fce5 	bl	31168 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   2779e:	f8d8 4000 	ldr.w	r4, [r8]
   277a2:	fba4 5407 	umull	r5, r4, r4, r7
   277a6:	a32a      	add	r3, pc, #168	; (adr r3, 27850 <nrf_flash_sync_exe+0xd8>)
   277a8:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   277ac:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
   277ae:	4621      	mov	r1, r4
   277b0:	4628      	mov	r0, r5
   277b2:	f7fe fca5 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   277b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   277b8:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   277ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
   277be:	9306      	str	r3, [sp, #24]
   277c0:	4b27      	ldr	r3, [pc, #156]	; (27860 <nrf_flash_sync_exe+0xe8>)
   277c2:	9305      	str	r3, [sp, #20]
   277c4:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   277c6:	a322      	add	r3, pc, #136	; (adr r3, 27850 <nrf_flash_sync_exe+0xd8>)
   277c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   277cc:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
   277d0:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   277d4:	f7fe fc94 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   277d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
   277da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   277de:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   277e2:	4820      	ldr	r0, [pc, #128]	; (27864 <nrf_flash_sync_exe+0xec>)
   277e4:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
   277e8:	fba7 0100 	umull	r0, r1, r7, r0
   277ec:	2307      	movs	r3, #7
   277ee:	1a28      	subs	r0, r5, r0
   277f0:	fb03 1107 	mla	r1, r3, r7, r1
   277f4:	eb64 0101 	sbc.w	r1, r4, r1
   277f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   277fc:	2300      	movs	r3, #0
   277fe:	f7fe fc7f 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   27802:	9600      	str	r6, [sp, #0]
   27804:	e9cd 7001 	strd	r7, r0, [sp, #4]
   27808:	464b      	mov	r3, r9
   2780a:	465a      	mov	r2, fp
   2780c:	2103      	movs	r1, #3
   2780e:	4650      	mov	r0, sl
   27810:	f009 fbde 	bl	30fd0 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   27814:	f030 0402 	bics.w	r4, r0, #2
   27818:	d116      	bne.n	27848 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   2781a:	4a13      	ldr	r2, [pc, #76]	; (27868 <nrf_flash_sync_exe+0xf0>)
   2781c:	4813      	ldr	r0, [pc, #76]	; (2786c <nrf_flash_sync_exe+0xf4>)
   2781e:	2300      	movs	r3, #0
   27820:	f01a f8a2 	bl	41968 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   27824:	b168      	cbz	r0, 27842 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   27826:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   2782a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   2782e:	9400      	str	r4, [sp, #0]
   27830:	4623      	mov	r3, r4
   27832:	2103      	movs	r1, #3
   27834:	f009 fc56 	bl	310e4 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   27838:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   2783c:	b00f      	add	sp, #60	; 0x3c
   2783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   27842:	f8d8 000c 	ldr.w	r0, [r8, #12]
   27846:	e7f9      	b.n	2783c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
   27848:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   2784c:	e7f6      	b.n	2783c <nrf_flash_sync_exe+0xc4>
   2784e:	bf00      	nop
   27850:	1afd498d 	.word	0x1afd498d
   27854:	00000007 	.word	0x00000007
   27858:	20003718 	.word	0x20003718
   2785c:	3b9aca00 	.word	0x3b9aca00
   27860:	0003ec99 	.word	0x0003ec99
   27864:	1afd498d 	.word	0x1afd498d
   27868:	000b7b44 	.word	0x000b7b44
   2786c:	20003728 	.word	0x20003728

00027870 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   27870:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   27872:	4d0f      	ldr	r5, [pc, #60]	; (278b0 <nrf_flash_sync_check_time_limit+0x40>)
{
   27874:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   27876:	f009 fc77 	bl	31168 <ticker_ticks_now_get>
   2787a:	68a9      	ldr	r1, [r5, #8]
   2787c:	f009 fc76 	bl	3116c <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27880:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   27882:	fbb0 f4f4 	udiv	r4, r0, r4
   27886:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27888:	480a      	ldr	r0, [pc, #40]	; (278b4 <nrf_flash_sync_check_time_limit+0x44>)
   2788a:	a307      	add	r3, pc, #28	; (adr r3, 278a8 <nrf_flash_sync_check_time_limit+0x38>)
   2788c:	e9d3 2300 	ldrd	r2, r3, [r3]
   27890:	fba1 0100 	umull	r0, r1, r1, r0
   27894:	f7fe fc34 	bl	26100 <__aeabi_uldivmod>
   27898:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   2789c:	4284      	cmp	r4, r0
   2789e:	bf94      	ite	ls
   278a0:	2000      	movls	r0, #0
   278a2:	2001      	movhi	r0, #1
   278a4:	bd38      	pop	{r3, r4, r5, pc}
   278a6:	bf00      	nop
   278a8:	1afd498d 	.word	0x1afd498d
   278ac:	00000007 	.word	0x00000007
   278b0:	20003718 	.word	0x20003718
   278b4:	3b9aca00 	.word	0x3b9aca00

000278b8 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   278b8:	4801      	ldr	r0, [pc, #4]	; (278c0 <activity_expiry_function+0x8>)
   278ba:	f01a b99b 	b.w	41bf4 <k_work_submit>
   278be:	bf00      	nop
   278c0:	20000260 	.word	0x20000260

000278c4 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   278c4:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   278c6:	f021 fd34 	bl	49332 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   278ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   278ce:	fba0 0302 	umull	r0, r3, r0, r2
   278d2:	fb02 3301 	mla	r3, r2, r1, r3
   278d6:	0bc0      	lsrs	r0, r0, #15
   278d8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    activity_last_uptime = k_uptime_get();
   278dc:	4b06      	ldr	r3, [pc, #24]	; (278f8 <activity_init+0x34>)
   278de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   278e2:	6018      	str	r0, [r3, #0]
   278e4:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   278e6:	4805      	ldr	r0, [pc, #20]	; (278fc <activity_init+0x38>)
   278e8:	e9cd 2300 	strd	r2, r3, [sp]
   278ec:	f01a ff26 	bl	4273c <z_impl_k_timer_start>

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
    return 0;
}
   278f0:	2000      	movs	r0, #0
   278f2:	b003      	add	sp, #12
   278f4:	f85d fb04 	ldr.w	pc, [sp], #4
   278f8:	200019f0 	.word	0x200019f0
   278fc:	20000a68 	.word	0x20000a68

00027900 <raise_event>:
int raise_event() {
   27900:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   27902:	4b04      	ldr	r3, [pc, #16]	; (27914 <raise_event+0x14>)
   27904:	7818      	ldrb	r0, [r3, #0]
   27906:	f000 f9cd 	bl	27ca4 <new_zmk_activity_state_changed>
}
   2790a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   2790e:	f01b b83a 	b.w	42986 <zmk_event_manager_raise>
   27912:	bf00      	nop
   27914:	20003b8c 	.word	0x20003b8c

00027918 <set_state>:
    if (activity_state == state)
   27918:	4b04      	ldr	r3, [pc, #16]	; (2792c <set_state+0x14>)
   2791a:	781a      	ldrb	r2, [r3, #0]
   2791c:	4282      	cmp	r2, r0
   2791e:	d002      	beq.n	27926 <set_state+0xe>
    activity_state = state;
   27920:	7018      	strb	r0, [r3, #0]
    return raise_event();
   27922:	f7ff bfed 	b.w	27900 <raise_event>
}
   27926:	2000      	movs	r0, #0
   27928:	4770      	bx	lr
   2792a:	bf00      	nop
   2792c:	20003b8c 	.word	0x20003b8c

00027930 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   27930:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   27932:	f021 fcfe 	bl	49332 <z_impl_k_uptime_ticks>
   27936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2793a:	fba0 0302 	umull	r0, r3, r0, r2
   2793e:	fb02 3301 	mla	r3, r2, r1, r3
   27942:	0bc0      	lsrs	r0, r0, #15
   27944:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    activity_last_uptime = k_uptime_get();
   27948:	4b03      	ldr	r3, [pc, #12]	; (27958 <activity_event_listener+0x28>)
   2794a:	6018      	str	r0, [r3, #0]
}
   2794c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   27950:	2000      	movs	r0, #0
   27952:	f7ff bfe1 	b.w	27918 <set_state>
   27956:	bf00      	nop
   27958:	200019f0 	.word	0x200019f0

0002795c <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   2795c:	b508      	push	{r3, lr}
   2795e:	f021 fce8 	bl	49332 <z_impl_k_uptime_ticks>
   27962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27966:	fba0 0302 	umull	r0, r3, r0, r2
   2796a:	fb02 3301 	mla	r3, r2, r1, r3
   2796e:	0bc0      	lsrs	r0, r0, #15
   27970:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    int32_t inactive_time = current - activity_last_uptime;
   27974:	4b06      	ldr	r3, [pc, #24]	; (27990 <activity_work_handler+0x34>)
   27976:	681b      	ldr	r3, [r3, #0]
   27978:	1ac0      	subs	r0, r0, r3
        if (inactive_time > MAX_IDLE_MS) {
   2797a:	f247 5330 	movw	r3, #30000	; 0x7530
   2797e:	4298      	cmp	r0, r3
   27980:	dd04      	ble.n	2798c <activity_work_handler+0x30>
}
   27982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   27986:	2001      	movs	r0, #1
   27988:	f7ff bfc6 	b.w	27918 <set_state>
}
   2798c:	bd08      	pop	{r3, pc}
   2798e:	bf00      	nop
   27990:	200019f0 	.word	0x200019f0

00027994 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   27994:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   27996:	4c18      	ldr	r4, [pc, #96]	; (279f8 <zmk_kscan_process_msgq+0x64>)
   27998:	b08d      	sub	sp, #52	; 0x34
   2799a:	2200      	movs	r2, #0
   2799c:	2300      	movs	r3, #0
   2799e:	a903      	add	r1, sp, #12
   279a0:	4620      	mov	r0, r4
   279a2:	f019 fe73 	bl	4168c <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   279a6:	b108      	cbz	r0, 279ac <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   279a8:	b00d      	add	sp, #52	; 0x34
   279aa:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   279ac:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   279ae:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   279b2:	f000 f859 	bl	27a68 <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   279b6:	fab5 f585 	clz	r5, r5
   279ba:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   279bc:	23ff      	movs	r3, #255	; 0xff
   279be:	f88d 3018 	strb.w	r3, [sp, #24]
   279c2:	9007      	str	r0, [sp, #28]
   279c4:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   279c8:	f021 fcb3 	bl	49332 <z_impl_k_uptime_ticks>
   279cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   279d0:	fba0 0302 	umull	r0, r3, r0, r2
   279d4:	fb02 3101 	mla	r1, r2, r1, r3
   279d8:	0bc0      	lsrs	r0, r0, #15
   279da:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   279de:	0bc9      	lsrs	r1, r1, #15
   279e0:	e88d 0003 	stmia.w	sp, {r0, r1}
   279e4:	ab06      	add	r3, sp, #24
   279e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   279ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   279ec:	f000 f966 	bl	27cbc <new_zmk_position_state_changed>
   279f0:	f01a ffc9 	bl	42986 <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   279f4:	e7d1      	b.n	2799a <zmk_kscan_process_msgq+0x6>
   279f6:	bf00      	nop
   279f8:	20000bb4 	.word	0x20000bb4

000279fc <zmk_kscan_callback>:
                               bool pressed) {
   279fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   279fe:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   27a02:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   27a06:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   27a08:	2200      	movs	r2, #0
   27a0a:	2300      	movs	r3, #0
   27a0c:	a901      	add	r1, sp, #4
   27a0e:	4804      	ldr	r0, [pc, #16]	; (27a20 <zmk_kscan_callback+0x24>)
   27a10:	f019 fde6 	bl	415e0 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   27a14:	4803      	ldr	r0, [pc, #12]	; (27a24 <zmk_kscan_callback+0x28>)
   27a16:	f01a f8ed 	bl	41bf4 <k_work_submit>
}
   27a1a:	b005      	add	sp, #20
   27a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   27a20:	20000bb4 	.word	0x20000bb4
   27a24:	200019f4 	.word	0x200019f4

00027a28 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   27a28:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   27a2a:	f019 fbaf 	bl	4118c <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   27a2e:	4604      	mov	r4, r0
   27a30:	b178      	cbz	r0, 27a52 <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   27a32:	490a      	ldr	r1, [pc, #40]	; (27a5c <zmk_kscan_init+0x34>)
   27a34:	480a      	ldr	r0, [pc, #40]	; (27a60 <zmk_kscan_init+0x38>)
   27a36:	f021 fab5 	bl	48fa4 <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   27a3a:	68a3      	ldr	r3, [r4, #8]
   27a3c:	4909      	ldr	r1, [pc, #36]	; (27a64 <zmk_kscan_init+0x3c>)
   27a3e:	681b      	ldr	r3, [r3, #0]
   27a40:	4620      	mov	r0, r4
   27a42:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   27a44:	68a3      	ldr	r3, [r4, #8]
   27a46:	689b      	ldr	r3, [r3, #8]
   27a48:	b133      	cbz	r3, 27a58 <zmk_kscan_init+0x30>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   27a4a:	4620      	mov	r0, r4
   27a4c:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   27a4e:	2000      	movs	r0, #0
}
   27a50:	bd10      	pop	{r4, pc}
        return -EINVAL;
   27a52:	f06f 0015 	mvn.w	r0, #21
   27a56:	e7fb      	b.n	27a50 <zmk_kscan_init+0x28>
    return 0;
   27a58:	4618      	mov	r0, r3
   27a5a:	e7f9      	b.n	27a50 <zmk_kscan_init+0x28>
   27a5c:	00027995 	.word	0x00027995
   27a60:	200019f4 	.word	0x200019f4
   27a64:	000279fd 	.word	0x000279fd

00027a68 <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   27a68:	230c      	movs	r3, #12
   27a6a:	fb03 1100 	mla	r1, r3, r0, r1
   27a6e:	3106      	adds	r1, #6
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   27a70:	4b01      	ldr	r3, [pc, #4]	; (27a78 <zmk_matrix_transform_row_column_to_position+0x10>)
   27a72:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   27a76:	4770      	bx	lr
   27a78:	00049c4c 	.word	0x00049c4c

00027a7c <zmk_sensors_init_item>:

    ZMK_EVENT_RAISE(new_zmk_sensor_event((struct zmk_sensor_event){
        .sensor_number = item->sensor_number, .sensor = dev, .timestamp = k_uptime_get()}));
}

static void zmk_sensors_init_item(const char *node, uint8_t i, uint8_t abs_i) {
   27a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a80:	460d      	mov	r5, r1
   27a82:	4616      	mov	r6, r2
   27a84:	f019 fb82 	bl	4118c <z_impl_device_get_binding>
    LOG_DBG("Init %s at index %d with sensor_number %d", node, i, abs_i);

    sensors[i].dev = device_get_binding(node);
   27a88:	4b09      	ldr	r3, [pc, #36]	; (27ab0 <zmk_sensors_init_item+0x34>)
   27a8a:	210c      	movs	r1, #12
   27a8c:	fb01 f205 	mul.w	r2, r1, r5
   27a90:	189f      	adds	r7, r3, r2
    sensors[i].sensor_number = abs_i;
   27a92:	549e      	strb	r6, [r3, r2]
    sensors[i].dev = device_get_binding(node);
   27a94:	6078      	str	r0, [r7, #4]

    if (!sensors[i].dev) {
   27a96:	b140      	cbz	r0, 27aaa <zmk_sensors_init_item+0x2e>
				     sensor_trigger_handler_t handler)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	if (api->trigger_set == NULL) {
   27a98:	6883      	ldr	r3, [r0, #8]
   27a9a:	689b      	ldr	r3, [r3, #8]
        LOG_WRN("Failed to find device for %s", node);
        return;
    }

    sensor_trigger_set(sensors[i].dev, &sensors[i].trigger, zmk_sensors_trigger_handler);
   27a9c:	4639      	mov	r1, r7
   27a9e:	3108      	adds	r1, #8
   27aa0:	b11b      	cbz	r3, 27aaa <zmk_sensors_init_item+0x2e>
}
   27aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return -ENOSYS;
	}

	return api->trigger_set(dev, trig, handler);
   27aa6:	4a03      	ldr	r2, [pc, #12]	; (27ab4 <zmk_sensors_init_item+0x38>)
   27aa8:	4718      	bx	r3
   27aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27aae:	bf00      	nop
   27ab0:	20000270 	.word	0x20000270
   27ab4:	00042937 	.word	0x00042937

00027ab8 <zmk_sensors_init>:
#define _SENSOR_INIT(node) zmk_sensors_init_item(DT_LABEL(node), local_index++, absolute_index++);
#define SENSOR_INIT(idx, _i)                                                                       \
    COND_CODE_1(DT_NODE_HAS_STATUS(ZMK_KEYMAP_SENSORS_BY_IDX(idx), okay),                          \
                (_SENSOR_INIT(ZMK_KEYMAP_SENSORS_BY_IDX(idx))), (absolute_index++;))

static int zmk_sensors_init(const struct device *_arg) {
   27ab8:	b508      	push	{r3, lr}
    int local_index = 0;
    int absolute_index = 0;

    UTIL_LISTIFY(ZMK_KEYMAP_SENSORS_LEN, SENSOR_INIT, 0)
   27aba:	2200      	movs	r2, #0
   27abc:	4611      	mov	r1, r2
   27abe:	4805      	ldr	r0, [pc, #20]	; (27ad4 <zmk_sensors_init+0x1c>)
   27ac0:	f7ff ffdc 	bl	27a7c <zmk_sensors_init_item>
   27ac4:	2201      	movs	r2, #1
   27ac6:	4804      	ldr	r0, [pc, #16]	; (27ad8 <zmk_sensors_init+0x20>)
   27ac8:	4611      	mov	r1, r2
   27aca:	f7ff ffd7 	bl	27a7c <zmk_sensors_init_item>
    return 0;
}
   27ace:	2000      	movs	r0, #0
   27ad0:	bd08      	pop	{r3, pc}
   27ad2:	bf00      	nop
   27ad4:	0004b3ac 	.word	0x0004b3ac
   27ad8:	0004b3b9 	.word	0x0004b3b9

00027adc <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   27adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   27ae0:	4b13      	ldr	r3, [pc, #76]	; (27b30 <zmk_event_manager_handle_from+0x54>)
   27ae2:	4e14      	ldr	r6, [pc, #80]	; (27b34 <zmk_event_manager_handle_from+0x58>)
   27ae4:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   27ae8:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   27aea:	460d      	mov	r5, r1
   27aec:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   27af0:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   27af4:	45a8      	cmp	r8, r5
   27af6:	dc04      	bgt.n	27b02 <zmk_event_manager_handle_from+0x26>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
        if (ev_sub->event_type != event->event) {
            continue;
        }
        ret = ev_sub->listener->callback(event);
        switch (ret) {
   27af8:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   27afa:	4638      	mov	r0, r7
   27afc:	f021 fdc6 	bl	4968c <k_free>
    return ret;
   27b00:	e013      	b.n	27b2a <zmk_event_manager_handle_from+0x4e>
        if (ev_sub->event_type != event->event) {
   27b02:	6832      	ldr	r2, [r6, #0]
   27b04:	683b      	ldr	r3, [r7, #0]
   27b06:	429a      	cmp	r2, r3
   27b08:	d10a      	bne.n	27b20 <zmk_event_manager_handle_from+0x44>
        ret = ev_sub->listener->callback(event);
   27b0a:	6873      	ldr	r3, [r6, #4]
   27b0c:	4638      	mov	r0, r7
   27b0e:	681b      	ldr	r3, [r3, #0]
   27b10:	4798      	blx	r3
        switch (ret) {
   27b12:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   27b14:	4604      	mov	r4, r0
        switch (ret) {
   27b16:	d0ef      	beq.n	27af8 <zmk_event_manager_handle_from+0x1c>
   27b18:	2802      	cmp	r0, #2
   27b1a:	d004      	beq.n	27b26 <zmk_event_manager_handle_from+0x4a>
   27b1c:	2800      	cmp	r0, #0
   27b1e:	d1ec      	bne.n	27afa <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   27b20:	3501      	adds	r5, #1
   27b22:	3608      	adds	r6, #8
   27b24:	e7e6      	b.n	27af4 <zmk_event_manager_handle_from+0x18>
            event->last_listener_index = i;
   27b26:	713d      	strb	r5, [r7, #4]
            return 0;
   27b28:	2400      	movs	r4, #0
}
   27b2a:	4620      	mov	r0, r4
   27b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27b30:	0004ba18 	.word	0x0004ba18
   27b34:	0004ba00 	.word	0x0004ba00

00027b38 <ext_power_generic_init>:

struct settings_handler ext_power_conf = {.name = "ext_power/state",
                                          .h_set = ext_power_settings_set};
#endif

static int ext_power_generic_init(const struct device *dev) {
   27b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct ext_power_generic_data *data = dev->data;
    const struct ext_power_generic_config *config = dev->config;
   27b3c:	6846      	ldr	r6, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   27b3e:	6907      	ldr	r7, [r0, #16]
static int ext_power_generic_init(const struct device *dev) {
   27b40:	4605      	mov	r5, r0

    data->gpio = device_get_binding(config->label);
   27b42:	6830      	ldr	r0, [r6, #0]
   27b44:	f019 fb22 	bl	4118c <z_impl_device_get_binding>
   27b48:	6038      	str	r0, [r7, #0]
    if (data->gpio == NULL) {
   27b4a:	2800      	cmp	r0, #0
   27b4c:	d045      	beq.n	27bda <ext_power_generic_init+0xa2>
        LOG_ERR("Failed to get ext-power control device");
        return -EINVAL;
    }

    if (gpio_pin_configure(data->gpio, config->pin, config->flags | GPIO_OUTPUT)) {
   27b4e:	f896 e005 	ldrb.w	lr, [r6, #5]
   27b52:	7931      	ldrb	r1, [r6, #4]
   27b54:	f44e 7200 	orr.w	r2, lr, #512	; 0x200
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   27b58:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   27b5c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27b60:	2301      	movs	r3, #1
   27b62:	fa03 f401 	lsl.w	r4, r3, r1
   27b66:	f8dc 3000 	ldr.w	r3, [ip]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   27b6a:	f01e 0f01 	tst.w	lr, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27b6e:	bf14      	ite	ne
   27b70:	4323      	orrne	r3, r4
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   27b72:	43a3      	biceq	r3, r4
   27b74:	f8cc 3000 	str.w	r3, [ip]
	}

	return api->pin_configure(port, pin, flags);
   27b78:	f8d8 3000 	ldr.w	r3, [r8]
   27b7c:	4798      	blx	r3
   27b7e:	bb78      	cbnz	r0, 27be0 <ext_power_generic_init+0xa8>
        LOG_ERR("Failed to configure ext-power control pin");
        return -EIO;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   27b80:	f002 f8aa 	bl	29cd8 <settings_subsys_init>

    int err = settings_register(&ext_power_conf);
   27b84:	4818      	ldr	r0, [pc, #96]	; (27be8 <ext_power_generic_init+0xb0>)
   27b86:	f001 ffe9 	bl	29b5c <settings_register>
    if (err) {
   27b8a:	4604      	mov	r4, r0
   27b8c:	bb10      	cbnz	r0, 27bd4 <ext_power_generic_init+0x9c>
        LOG_ERR("Failed to register the ext_power settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ext_power_save_work, ext_power_save_state_work);
   27b8e:	4917      	ldr	r1, [pc, #92]	; (27bec <ext_power_generic_init+0xb4>)
   27b90:	4817      	ldr	r0, [pc, #92]	; (27bf0 <ext_power_generic_init+0xb8>)
   27b92:	f021 fa2d 	bl	48ff0 <k_work_init_delayable>

    // Set default value (on) if settings isn't set
    settings_load_subtree("ext_power");
   27b96:	4817      	ldr	r0, [pc, #92]	; (27bf4 <ext_power_generic_init+0xbc>)
   27b98:	f001 ff8a 	bl	29ab0 <settings_load_subtree>
    if (!data->settings_init) {
   27b9c:	797b      	ldrb	r3, [r7, #5]
   27b9e:	b95b      	cbnz	r3, 27bb8 <ext_power_generic_init+0x80>

        data->status = true;
   27ba0:	2301      	movs	r3, #1
   27ba2:	713b      	strb	r3, [r7, #4]
        k_work_schedule(&ext_power_save_work, K_NO_WAIT);
   27ba4:	2200      	movs	r2, #0
   27ba6:	2300      	movs	r3, #0
   27ba8:	4811      	ldr	r0, [pc, #68]	; (27bf0 <ext_power_generic_init+0xb8>)
   27baa:	f01a f88b 	bl	41cc4 <k_work_schedule>
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   27bae:	68ab      	ldr	r3, [r5, #8]
   27bb0:	681b      	ldr	r3, [r3, #0]
   27bb2:	b10b      	cbz	r3, 27bb8 <ext_power_generic_init+0x80>
        return -ENOTSUP;
    }

    return api->enable(dev);
   27bb4:	4628      	mov	r0, r5
   27bb6:	4798      	blx	r3
#else
    // Default to the ext_power being open when no settings
    ext_power_enable(dev);
#endif

    if (config->init_delay_ms) {
   27bb8:	88f1      	ldrh	r1, [r6, #6]
   27bba:	b159      	cbz	r1, 27bd4 <ext_power_generic_init+0x9c>
   27bbc:	f240 30e7 	movw	r0, #999	; 0x3e7
   27bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27bc4:	2300      	movs	r3, #0
   27bc6:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   27bca:	2100      	movs	r1, #0
   27bcc:	f7fe fa98 	bl	26100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   27bd0:	f01a fb88 	bl	422e4 <z_impl_k_sleep>
        k_msleep(config->init_delay_ms);
    }

    return 0;
}
   27bd4:	4620      	mov	r0, r4
   27bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -EINVAL;
   27bda:	f06f 0415 	mvn.w	r4, #21
   27bde:	e7f9      	b.n	27bd4 <ext_power_generic_init+0x9c>
        return -EIO;
   27be0:	f06f 0404 	mvn.w	r4, #4
   27be4:	e7f6      	b.n	27bd4 <ext_power_generic_init+0x9c>
   27be6:	bf00      	nop
   27be8:	20000288 	.word	0x20000288
   27bec:	00027bf9 	.word	0x00027bf9
   27bf0:	20000de0 	.word	0x20000de0
   27bf4:	0004b3c7 	.word	0x0004b3c7

00027bf8 <ext_power_save_state_work>:
static void ext_power_save_state_work(struct k_work *work) {
   27bf8:	b530      	push	{r4, r5, lr}
   27bfa:	b08b      	sub	sp, #44	; 0x2c
   27bfc:	4c08      	ldr	r4, [pc, #32]	; (27c20 <ext_power_save_state_work+0x28>)
   27bfe:	4620      	mov	r0, r4
   27c00:	f019 fac4 	bl	4118c <z_impl_device_get_binding>
    struct ext_power_generic_data *data = ext_power->data;
   27c04:	6905      	ldr	r5, [r0, #16]
    snprintf(setting_path, 40, "ext_power/state/%s", DT_INST_LABEL(0));
   27c06:	4a07      	ldr	r2, [pc, #28]	; (27c24 <ext_power_save_state_work+0x2c>)
   27c08:	4623      	mov	r3, r4
   27c0a:	2128      	movs	r1, #40	; 0x28
   27c0c:	4668      	mov	r0, sp
   27c0e:	f002 fea5 	bl	2a95c <snprintf>
    settings_save_one(setting_path, &data->status, sizeof(data->status));
   27c12:	2201      	movs	r2, #1
   27c14:	1d29      	adds	r1, r5, #4
   27c16:	4668      	mov	r0, sp
   27c18:	f001 ff10 	bl	29a3c <settings_save_one>
}
   27c1c:	b00b      	add	sp, #44	; 0x2c
   27c1e:	bd30      	pop	{r4, r5, pc}
   27c20:	0004b3d1 	.word	0x0004b3d1
   27c24:	0004b3db 	.word	0x0004b3db

00027c28 <ext_power_save_state>:
int ext_power_save_state() {
   27c28:	b508      	push	{r3, lr}
    int ret = k_work_reschedule(&ext_power_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   27c2a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   27c2e:	2300      	movs	r3, #0
   27c30:	4802      	ldr	r0, [pc, #8]	; (27c3c <ext_power_save_state+0x14>)
   27c32:	f01a f87b 	bl	41d2c <k_work_reschedule>
}
   27c36:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27c3a:	bd08      	pop	{r3, pc}
   27c3c:	20000de0 	.word	0x20000de0

00027c40 <ext_power_settings_set>:
                                  void *cb_arg) {
   27c40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27c44:	460c      	mov	r4, r1
   27c46:	4616      	mov	r6, r2
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   27c48:	4913      	ldr	r1, [pc, #76]	; (27c98 <ext_power_settings_set+0x58>)
   27c4a:	aa01      	add	r2, sp, #4
                                  void *cb_arg) {
   27c4c:	461f      	mov	r7, r3
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   27c4e:	f01b fe49 	bl	438e4 <settings_name_steq>
   27c52:	b1d8      	cbz	r0, 27c8c <ext_power_settings_set+0x4c>
   27c54:	f8dd 8004 	ldr.w	r8, [sp, #4]
   27c58:	f1b8 0f00 	cmp.w	r8, #0
   27c5c:	d116      	bne.n	27c8c <ext_power_settings_set+0x4c>
        if (len != sizeof(data->status)) {
   27c5e:	2c01      	cmp	r4, #1
   27c60:	d117      	bne.n	27c92 <ext_power_settings_set+0x52>
        rc = read_cb(cb_arg, &data->status, sizeof(data->status));
   27c62:	4d0e      	ldr	r5, [pc, #56]	; (27c9c <ext_power_settings_set+0x5c>)
   27c64:	4622      	mov	r2, r4
   27c66:	1d29      	adds	r1, r5, #4
   27c68:	4638      	mov	r0, r7
   27c6a:	47b0      	blx	r6
        if (rc >= 0) {
   27c6c:	2800      	cmp	r0, #0
   27c6e:	db06      	blt.n	27c7e <ext_power_settings_set+0x3e>
            data->settings_init = true;
   27c70:	716c      	strb	r4, [r5, #5]
            if (data->status) {
   27c72:	792c      	ldrb	r4, [r5, #4]
                ext_power_generic_enable(ext_power);
   27c74:	480a      	ldr	r0, [pc, #40]	; (27ca0 <ext_power_settings_set+0x60>)
            if (data->status) {
   27c76:	b12c      	cbz	r4, 27c84 <ext_power_settings_set+0x44>
                ext_power_generic_enable(ext_power);
   27c78:	f01a fe9b 	bl	429b2 <ext_power_generic_enable>
   27c7c:	4640      	mov	r0, r8
}
   27c7e:	b002      	add	sp, #8
   27c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ext_power_generic_disable(ext_power);
   27c84:	f01a fea7 	bl	429d6 <ext_power_generic_disable>
   27c88:	4620      	mov	r0, r4
   27c8a:	e7f8      	b.n	27c7e <ext_power_settings_set+0x3e>
    return -ENOENT;
   27c8c:	f06f 0001 	mvn.w	r0, #1
   27c90:	e7f5      	b.n	27c7e <ext_power_settings_set+0x3e>
            return -EINVAL;
   27c92:	f06f 0015 	mvn.w	r0, #21
   27c96:	e7f2      	b.n	27c7e <ext_power_settings_set+0x3e>
   27c98:	0004b3d1 	.word	0x0004b3d1
   27c9c:	20001a04 	.word	0x20001a04
   27ca0:	00049828 	.word	0x00049828

00027ca4 <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   27ca4:	b510      	push	{r4, lr}
   27ca6:	4604      	mov	r4, r0
   27ca8:	200c      	movs	r0, #12
   27caa:	f021 fcf6 	bl	4969a <k_malloc>
   27cae:	4a02      	ldr	r2, [pc, #8]	; (27cb8 <new_zmk_activity_state_changed+0x14>)
   27cb0:	6002      	str	r2, [r0, #0]
   27cb2:	7204      	strb	r4, [r0, #8]
   27cb4:	bd10      	pop	{r4, pc}
   27cb6:	bf00      	nop
   27cb8:	00049d4c 	.word	0x00049d4c

00027cbc <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   27cbc:	b084      	sub	sp, #16
   27cbe:	b570      	push	{r4, r5, r6, lr}
   27cc0:	ac04      	add	r4, sp, #16
   27cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27cc6:	2020      	movs	r0, #32
   27cc8:	f021 fce7 	bl	4969a <k_malloc>
   27ccc:	4604      	mov	r4, r0
   27cce:	4b08      	ldr	r3, [pc, #32]	; (27cf0 <new_zmk_position_state_changed+0x34>)
   27cd0:	f844 3b08 	str.w	r3, [r4], #8
   27cd4:	ad04      	add	r5, sp, #16
   27cd6:	4606      	mov	r6, r0
   27cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27cdc:	e895 0003 	ldmia.w	r5, {r0, r1}
   27ce0:	e884 0003 	stmia.w	r4, {r0, r1}
   27ce4:	4630      	mov	r0, r6
   27ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27cea:	b004      	add	sp, #16
   27cec:	4770      	bx	lr
   27cee:	bf00      	nop
   27cf0:	00049d50 	.word	0x00049d50

00027cf4 <as_zmk_position_state_changed>:
   27cf4:	6802      	ldr	r2, [r0, #0]
   27cf6:	4b03      	ldr	r3, [pc, #12]	; (27d04 <as_zmk_position_state_changed+0x10>)
   27cf8:	429a      	cmp	r2, r3
   27cfa:	bf0c      	ite	eq
   27cfc:	3008      	addeq	r0, #8
   27cfe:	2000      	movne	r0, #0
   27d00:	4770      	bx	lr
   27d02:	bf00      	nop
   27d04:	00049d50 	.word	0x00049d50

00027d08 <new_zmk_sensor_event>:
 */

#include <kernel.h>
#include <zmk/events/sensor_event.h>

   27d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   27d0a:	466c      	mov	r4, sp
   27d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27d10:	2018      	movs	r0, #24
   27d12:	f021 fcc2 	bl	4969a <k_malloc>
   27d16:	4605      	mov	r5, r0
   27d18:	4b05      	ldr	r3, [pc, #20]	; (27d30 <new_zmk_sensor_event+0x28>)
   27d1a:	f845 3b08 	str.w	r3, [r5], #8
   27d1e:	4606      	mov	r6, r0
   27d20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   27d24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   27d28:	4630      	mov	r0, r6
   27d2a:	b004      	add	sp, #16
   27d2c:	bd70      	pop	{r4, r5, r6, pc}
   27d2e:	bf00      	nop
   27d30:	00049d54 	.word	0x00049d54

00027d34 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   27d34:	b510      	push	{r4, lr}
   27d36:	4604      	mov	r4, r0
   27d38:	200c      	movs	r0, #12
   27d3a:	f021 fcae 	bl	4969a <k_malloc>
   27d3e:	4a02      	ldr	r2, [pc, #8]	; (27d48 <new_zmk_usb_conn_state_changed+0x14>)
   27d40:	6002      	str	r2, [r0, #0]
   27d42:	7204      	strb	r4, [r0, #8]
   27d44:	bd10      	pop	{r4, pc}
   27d46:	bf00      	nop
   27d48:	00049d58 	.word	0x00049d58

00027d4c <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   27d4c:	b082      	sub	sp, #8
   27d4e:	b538      	push	{r3, r4, r5, lr}
   27d50:	a904      	add	r1, sp, #16
   27d52:	e881 000c 	stmia.w	r1, {r2, r3}
   27d56:	4605      	mov	r5, r0
   27d58:	4811      	ldr	r0, [pc, #68]	; (27da0 <on_keymap_binding_pressed+0x54>)
   27d5a:	f019 fa17 	bl	4118c <z_impl_device_get_binding>
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   27d5e:	4604      	mov	r4, r0
   27d60:	b1a0      	cbz	r0, 27d8c <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   27d62:	686b      	ldr	r3, [r5, #4]
   27d64:	2b01      	cmp	r3, #1
   27d66:	d00c      	beq.n	27d82 <on_keymap_binding_pressed+0x36>
   27d68:	2b02      	cmp	r3, #2
   27d6a:	d005      	beq.n	27d78 <on_keymap_binding_pressed+0x2c>
   27d6c:	b9a3      	cbnz	r3, 27d98 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   27d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27d72:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   27d74:	f01a be55 	b.w	42a22 <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   27d78:	f01a fe5a 	bl	42a30 <ext_power_get>
   27d7c:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   27d7e:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   27d80:	dcf5      	bgt.n	27d6e <on_keymap_binding_pressed+0x22>
}
   27d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27d86:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   27d88:	f01a be44 	b.w	42a14 <ext_power_enable>
        return -EIO;
   27d8c:	f06f 0004 	mvn.w	r0, #4
}
   27d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27d94:	b002      	add	sp, #8
   27d96:	4770      	bx	lr
    switch (binding->param1) {
   27d98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27d9c:	e7f8      	b.n	27d90 <on_keymap_binding_pressed+0x44>
   27d9e:	bf00      	nop
   27da0:	0004b3d1 	.word	0x0004b3d1

00027da4 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   27da4:	b082      	sub	sp, #8
   27da6:	b510      	push	{r4, lr}
   27da8:	a902      	add	r1, sp, #8
   27daa:	e881 000c 	stmia.w	r1, {r2, r3}
   27dae:	4604      	mov	r4, r0
   27db0:	480a      	ldr	r0, [pc, #40]	; (27ddc <on_keymap_binding_convert_central_state_dependent_params+0x38>)
   27db2:	f019 f9eb 	bl	4118c <z_impl_device_get_binding>
    if (ext_power == NULL) {
   27db6:	b158      	cbz	r0, 27dd0 <on_keymap_binding_convert_central_state_dependent_params+0x2c>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   27db8:	6863      	ldr	r3, [r4, #4]
   27dba:	2b02      	cmp	r3, #2
   27dbc:	d106      	bne.n	27dcc <on_keymap_binding_convert_central_state_dependent_params+0x28>
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   27dbe:	f01a fe37 	bl	42a30 <ext_power_get>
   27dc2:	2800      	cmp	r0, #0
   27dc4:	bfcc      	ite	gt
   27dc6:	2000      	movgt	r0, #0
   27dc8:	2001      	movle	r0, #1
   27dca:	6060      	str	r0, [r4, #4]
    return 0;
   27dcc:	2000      	movs	r0, #0
   27dce:	e001      	b.n	27dd4 <on_keymap_binding_convert_central_state_dependent_params+0x30>
        return -EIO;
   27dd0:	f06f 0004 	mvn.w	r0, #4
}
   27dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27dd8:	b002      	add	sp, #8
   27dda:	4770      	bx	lr
   27ddc:	0004b3d1 	.word	0x0004b3d1

00027de0 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   27de0:	b510      	push	{r4, lr}
   27de2:	4604      	mov	r4, r0
   27de4:	200c      	movs	r0, #12
   27de6:	f021 fc58 	bl	4969a <k_malloc>
   27dea:	4a02      	ldr	r2, [pc, #8]	; (27df4 <new_zmk_battery_state_changed+0x14>)
   27dec:	6002      	str	r2, [r0, #0]
   27dee:	7204      	strb	r4, [r0, #8]
   27df0:	bd10      	pop	{r4, pc}
   27df2:	bf00      	nop
   27df4:	00049d8c 	.word	0x00049d8c

00027df8 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   27df8:	4801      	ldr	r0, [pc, #4]	; (27e00 <zmk_battery_timer+0x8>)
   27dfa:	f019 befb 	b.w	41bf4 <k_work_submit>
   27dfe:	bf00      	nop
   27e00:	200002a0 	.word	0x200002a0

00027e04 <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   27e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   27e06:	4c0f      	ldr	r4, [pc, #60]	; (27e44 <zmk_battery_update.constprop.0+0x40>)
   27e08:	68a5      	ldr	r5, [r4, #8]
   27e0a:	212c      	movs	r1, #44	; 0x2c
   27e0c:	68eb      	ldr	r3, [r5, #12]
   27e0e:	4620      	mov	r0, r4
   27e10:	4798      	blx	r3
    if (rc != 0) {
   27e12:	b9a0      	cbnz	r0, 27e3e <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   27e14:	212c      	movs	r1, #44	; 0x2c
   27e16:	692b      	ldr	r3, [r5, #16]
   27e18:	466a      	mov	r2, sp
   27e1a:	4620      	mov	r0, r4
   27e1c:	4798      	blx	r3
    if (rc != 0) {
   27e1e:	b970      	cbnz	r0, 27e3e <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   27e20:	4c09      	ldr	r4, [pc, #36]	; (27e48 <zmk_battery_update.constprop.0+0x44>)
   27e22:	9b00      	ldr	r3, [sp, #0]
   27e24:	7822      	ldrb	r2, [r4, #0]
   27e26:	429a      	cmp	r2, r3
   27e28:	d009      	beq.n	27e3e <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   27e2a:	b2d8      	uxtb	r0, r3
   27e2c:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   27e2e:	f000 fcfd 	bl	2882c <bt_bas_set_battery_level>
        if (rc != 0) {
   27e32:	b920      	cbnz	r0, 27e3e <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   27e34:	7820      	ldrb	r0, [r4, #0]
   27e36:	f7ff ffd3 	bl	27de0 <new_zmk_battery_state_changed>
   27e3a:	f01a fda4 	bl	42986 <zmk_event_manager_raise>
}
   27e3e:	b003      	add	sp, #12
   27e40:	bd30      	pop	{r4, r5, pc}
   27e42:	bf00      	nop
   27e44:	00049840 	.word	0x00049840
   27e48:	20003b8d 	.word	0x20003b8d

00027e4c <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   27e4c:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   27e4e:	480b      	ldr	r0, [pc, #44]	; (27e7c <zmk_battery_init+0x30>)
   27e50:	f020 fe7a 	bl	48b48 <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   27e54:	b170      	cbz	r0, 27e74 <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   27e56:	f7ff ffd5 	bl	27e04 <zmk_battery_update.constprop.0>

    if (rc != 0) {
   27e5a:	4604      	mov	r4, r0
   27e5c:	b938      	cbnz	r0, 27e6e <zmk_battery_init+0x22>
   27e5e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   27e62:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   27e64:	4806      	ldr	r0, [pc, #24]	; (27e80 <zmk_battery_init+0x34>)
   27e66:	e9cd 2300 	strd	r2, r3, [sp]
   27e6a:	f01a fc67 	bl	4273c <z_impl_k_timer_start>
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));

    return 0;
}
   27e6e:	4620      	mov	r0, r4
   27e70:	b002      	add	sp, #8
   27e72:	bd10      	pop	{r4, pc}
        return -ENODEV;
   27e74:	f06f 0412 	mvn.w	r4, #18
   27e78:	e7f9      	b.n	27e6e <zmk_battery_init+0x22>
   27e7a:	bf00      	nop
   27e7c:	00049840 	.word	0x00049840
   27e80:	20000aa0 	.word	0x20000aa0

00027e84 <new_zmk_split_peripheral_status_changed>:
 */

#include <kernel.h>
#include <zmk/events/split_peripheral_status_changed.h>

   27e84:	b510      	push	{r4, lr}
   27e86:	4604      	mov	r4, r0
   27e88:	200c      	movs	r0, #12
   27e8a:	f021 fc06 	bl	4969a <k_malloc>
   27e8e:	4a02      	ldr	r2, [pc, #8]	; (27e98 <new_zmk_split_peripheral_status_changed+0x14>)
   27e90:	6002      	str	r2, [r0, #0]
   27e92:	7204      	strb	r4, [r0, #8]
   27e94:	bd10      	pop	{r4, pc}
   27e96:	bf00      	nop
   27e98:	00049d90 	.word	0x00049d90

00027e9c <split_svc_pos_state>:
static uint8_t position_state[POS_STATE_LEN];

static struct zmk_split_run_behavior_payload behavior_run_payload;

static ssize_t split_svc_pos_state(struct bt_conn *conn, const struct bt_gatt_attr *attrs,
                                   void *buf, uint16_t len, uint16_t offset) {
   27e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, &position_state,
   27e9e:	2410      	movs	r4, #16
   27ea0:	9402      	str	r4, [sp, #8]
   27ea2:	4c04      	ldr	r4, [pc, #16]	; (27eb4 <split_svc_pos_state+0x18>)
   27ea4:	9401      	str	r4, [sp, #4]
   27ea6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   27eaa:	9400      	str	r4, [sp, #0]
   27eac:	f01f f9b4 	bl	47218 <bt_gatt_attr_read>
                             sizeof(position_state));
}
   27eb0:	b004      	add	sp, #16
   27eb2:	bd10      	pop	{r4, pc}
   27eb4:	20003ba1 	.word	0x20003ba1

00027eb8 <service_init>:
int zmk_split_bt_position_released(uint8_t position) {
    WRITE_BIT(position_state[position / 8], position % 8, false);
    return send_position_state();
}

int service_init(const struct device *_arg) {
   27eb8:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {
        .name = "Split Peripheral Notification Queue"};
    k_work_queue_start(&service_work_q, service_q_stack, K_THREAD_STACK_SIZEOF(service_q_stack),
   27eba:	4b06      	ldr	r3, [pc, #24]	; (27ed4 <service_init+0x1c>)
   27ebc:	9300      	str	r3, [sp, #0]
   27ebe:	4906      	ldr	r1, [pc, #24]	; (27ed8 <service_init+0x20>)
   27ec0:	4806      	ldr	r0, [pc, #24]	; (27edc <service_init+0x24>)
   27ec2:	2305      	movs	r3, #5
   27ec4:	f44f 7224 	mov.w	r2, #656	; 0x290
   27ec8:	f019 fe9a 	bl	41c00 <k_work_queue_start>
                       CONFIG_ZMK_SPLIT_BLE_PERIPHERAL_PRIORITY, &queue_config);

    return 0;
}
   27ecc:	2000      	movs	r0, #0
   27ece:	b003      	add	sp, #12
   27ed0:	f85d fb04 	ldr.w	pc, [sp], #4
   27ed4:	00049e24 	.word	0x00049e24
   27ed8:	20003c88 	.word	0x20003c88
   27edc:	20000e10 	.word	0x20000e10

00027ee0 <send_position_state_callback>:
void send_position_state_callback(struct k_work *work) {
   27ee0:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   27ee2:	4d0f      	ldr	r5, [pc, #60]	; (27f20 <send_position_state_callback+0x40>)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.attr = attr;
   27ee4:	4e0f      	ldr	r6, [pc, #60]	; (27f24 <send_position_state_callback+0x44>)
   27ee6:	b08a      	sub	sp, #40	; 0x28
   27ee8:	2200      	movs	r2, #0
   27eea:	2300      	movs	r3, #0
   27eec:	4669      	mov	r1, sp
   27eee:	4628      	mov	r0, r5
   27ef0:	f019 fbcc 	bl	4168c <z_impl_k_msgq_get>
    while (k_msgq_get(&position_state_msgq, &state, K_NO_WAIT) == 0) {
   27ef4:	4604      	mov	r4, r0
   27ef6:	b108      	cbz	r0, 27efc <send_position_state_callback+0x1c>
};
   27ef8:	b00a      	add	sp, #40	; 0x28
   27efa:	bd70      	pop	{r4, r5, r6, pc}
	memset(&params, 0, sizeof(params));
   27efc:	4621      	mov	r1, r4
   27efe:	2218      	movs	r2, #24
   27f00:	a804      	add	r0, sp, #16
   27f02:	f01c ffe8 	bl	44ed6 <memset>
	params.data = data;
	params.len = len;
   27f06:	2310      	movs	r3, #16

	return bt_gatt_notify_cb(conn, &params);
   27f08:	eb0d 0103 	add.w	r1, sp, r3
   27f0c:	4620      	mov	r0, r4
	params.attr = attr;
   27f0e:	9605      	str	r6, [sp, #20]
	params.data = data;
   27f10:	f8cd d018 	str.w	sp, [sp, #24]
	params.len = len;
   27f14:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
   27f18:	f006 fbbe 	bl	2e698 <bt_gatt_notify_cb>
   27f1c:	e7e4      	b.n	27ee8 <send_position_state_callback+0x8>
   27f1e:	bf00      	nop
   27f20:	20000b84 	.word	0x20000b84
   27f24:	00049dac 	.word	0x00049dac

00027f28 <send_position_state>:
int send_position_state() {
   27f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
   27f2a:	490e      	ldr	r1, [pc, #56]	; (27f64 <send_position_state+0x3c>)
   27f2c:	480e      	ldr	r0, [pc, #56]	; (27f68 <send_position_state+0x40>)
   27f2e:	f640 42cd 	movw	r2, #3277	; 0xccd
   27f32:	2300      	movs	r3, #0
   27f34:	f019 fb54 	bl	415e0 <z_impl_k_msgq_put>
    if (err) {
   27f38:	4604      	mov	r4, r0
   27f3a:	b170      	cbz	r0, 27f5a <send_position_state+0x32>
        switch (err) {
   27f3c:	f110 0f0b 	cmn.w	r0, #11
   27f40:	d108      	bne.n	27f54 <send_position_state+0x2c>
	return z_impl_k_msgq_get(msgq, data, timeout);
   27f42:	2200      	movs	r2, #0
   27f44:	2300      	movs	r3, #0
   27f46:	4669      	mov	r1, sp
   27f48:	4807      	ldr	r0, [pc, #28]	; (27f68 <send_position_state+0x40>)
   27f4a:	f019 fb9f 	bl	4168c <z_impl_k_msgq_get>
            return send_position_state();
   27f4e:	f7ff ffeb 	bl	27f28 <send_position_state>
   27f52:	4604      	mov	r4, r0
}
   27f54:	4620      	mov	r0, r4
   27f56:	b004      	add	sp, #16
   27f58:	bd10      	pop	{r4, pc}
    k_work_submit_to_queue(&service_work_q, &service_position_notify_work);
   27f5a:	4904      	ldr	r1, [pc, #16]	; (27f6c <send_position_state+0x44>)
   27f5c:	4804      	ldr	r0, [pc, #16]	; (27f70 <send_position_state+0x48>)
   27f5e:	f021 f82a 	bl	48fb6 <k_work_submit_to_queue>
    return 0;
   27f62:	e7f7      	b.n	27f54 <send_position_state+0x2c>
   27f64:	20003ba1 	.word	0x20003ba1
   27f68:	20000b84 	.word	0x20000b84
   27f6c:	200002d8 	.word	0x200002d8
   27f70:	20000e10 	.word	0x20000e10

00027f74 <zmk_split_bt_position_pressed>:
    WRITE_BIT(position_state[position / 8], position % 8, true);
   27f74:	08c2      	lsrs	r2, r0, #3
   27f76:	4905      	ldr	r1, [pc, #20]	; (27f8c <zmk_split_bt_position_pressed+0x18>)
   27f78:	2301      	movs	r3, #1
   27f7a:	f000 0007 	and.w	r0, r0, #7
   27f7e:	fa03 f000 	lsl.w	r0, r3, r0
   27f82:	5c8b      	ldrb	r3, [r1, r2]
   27f84:	4318      	orrs	r0, r3
   27f86:	5488      	strb	r0, [r1, r2]
    return send_position_state();
   27f88:	f7ff bfce 	b.w	27f28 <send_position_state>
   27f8c:	20003ba1 	.word	0x20003ba1

00027f90 <zmk_split_bt_position_released>:
    WRITE_BIT(position_state[position / 8], position % 8, false);
   27f90:	08c2      	lsrs	r2, r0, #3
   27f92:	4905      	ldr	r1, [pc, #20]	; (27fa8 <zmk_split_bt_position_released+0x18>)
   27f94:	f000 0007 	and.w	r0, r0, #7
   27f98:	2301      	movs	r3, #1
   27f9a:	4083      	lsls	r3, r0
   27f9c:	5c88      	ldrb	r0, [r1, r2]
   27f9e:	ea20 0003 	bic.w	r0, r0, r3
   27fa2:	5488      	strb	r0, [r1, r2]
    return send_position_state();
   27fa4:	f7ff bfc0 	b.w	27f28 <send_position_state>
   27fa8:	20003ba1 	.word	0x20003ba1

00027fac <connected>:

static int start_advertising() {
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
};

static void connected(struct bt_conn *conn, uint8_t err) {
   27fac:	b508      	push	{r3, lr}
    is_connected = (err == 0);
   27fae:	fab1 f081 	clz	r0, r1
   27fb2:	4b04      	ldr	r3, [pc, #16]	; (27fc4 <connected+0x18>)
   27fb4:	0940      	lsrs	r0, r0, #5
   27fb6:	7018      	strb	r0, [r3, #0]

    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27fb8:	f7ff ff64 	bl	27e84 <new_zmk_split_peripheral_status_changed>
        (struct zmk_split_peripheral_status_changed){.connected = is_connected}));
}
   27fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27fc0:	f01a bce1 	b.w	42986 <zmk_event_manager_raise>
   27fc4:	20003bb1 	.word	0x20003bb1

00027fc8 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27fc8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   27fca:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27fcc:	b08a      	sub	sp, #40	; 0x28
   27fce:	4604      	mov	r4, r0
   27fd0:	460e      	mov	r6, r1
   27fd2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   27fd4:	2b03      	cmp	r3, #3
   27fd6:	d820      	bhi.n	2801a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   27fd8:	e8df f003 	tbb	[pc, r3]
   27fdc:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   27fe0:	4911      	ldr	r1, [pc, #68]	; (28028 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   27fe2:	4628      	mov	r0, r5
   27fe4:	f01c ff2d 	bl	44e42 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   27fe8:	7863      	ldrb	r3, [r4, #1]
   27fea:	9304      	str	r3, [sp, #16]
   27fec:	78a3      	ldrb	r3, [r4, #2]
   27fee:	9303      	str	r3, [sp, #12]
   27ff0:	78e3      	ldrb	r3, [r4, #3]
   27ff2:	9302      	str	r3, [sp, #8]
   27ff4:	7923      	ldrb	r3, [r4, #4]
   27ff6:	9301      	str	r3, [sp, #4]
   27ff8:	7963      	ldrb	r3, [r4, #5]
   27ffa:	9300      	str	r3, [sp, #0]
   27ffc:	4a0b      	ldr	r2, [pc, #44]	; (2802c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   27ffe:	79a3      	ldrb	r3, [r4, #6]
   28000:	9505      	str	r5, [sp, #20]
   28002:	211e      	movs	r1, #30
   28004:	4630      	mov	r0, r6
   28006:	f01a fe90 	bl	42d2a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   2800a:	b00a      	add	sp, #40	; 0x28
   2800c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   2800e:	4908      	ldr	r1, [pc, #32]	; (28030 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   28010:	e7e7      	b.n	27fe2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   28012:	4908      	ldr	r1, [pc, #32]	; (28034 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   28014:	e7e5      	b.n	27fe2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   28016:	4908      	ldr	r1, [pc, #32]	; (28038 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   28018:	e7e3      	b.n	27fe2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   2801a:	4a08      	ldr	r2, [pc, #32]	; (2803c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   2801c:	210a      	movs	r1, #10
   2801e:	4628      	mov	r0, r5
   28020:	f01a fe83 	bl	42d2a <snprintk>
		break;
   28024:	e7e0      	b.n	27fe8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   28026:	bf00      	nop
   28028:	0004b4e1 	.word	0x0004b4e1
   2802c:	0004b50a 	.word	0x0004b50a
   28030:	0004b4e8 	.word	0x0004b4e8
   28034:	0004b4ef 	.word	0x0004b4ef
   28038:	0004b4f9 	.word	0x0004b4f9
   2803c:	0004b503 	.word	0x0004b503

00028040 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   28040:	b500      	push	{lr}
   28042:	b089      	sub	sp, #36	; 0x24
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   28044:	f01d ffaf 	bl	45fa6 <bt_conn_get_dst>
   28048:	4669      	mov	r1, sp
   2804a:	f7ff ffbd 	bl	27fc8 <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    is_connected = false;
   2804e:	4b05      	ldr	r3, [pc, #20]	; (28064 <disconnected+0x24>)
   28050:	2000      	movs	r0, #0
   28052:	7018      	strb	r0, [r3, #0]

    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   28054:	f7ff ff16 	bl	27e84 <new_zmk_split_peripheral_status_changed>
   28058:	f01a fc95 	bl	42986 <zmk_event_manager_raise>
        (struct zmk_split_peripheral_status_changed){.connected = is_connected}));
}
   2805c:	b009      	add	sp, #36	; 0x24
   2805e:	f85d fb04 	ldr.w	pc, [sp], #4
   28062:	bf00      	nop
   28064:	20003bb1 	.word	0x20003bb1

00028068 <zmk_peripheral_ble_init>:
    .le_param_updated = le_param_updated,
};

bool zmk_split_bt_peripheral_is_connected() { return is_connected; }

static int zmk_peripheral_ble_init(const struct device *_arg) {
   28068:	b570      	push	{r4, r5, r6, lr}
    int err = bt_enable(NULL);
   2806a:	2000      	movs	r0, #0
static int zmk_peripheral_ble_init(const struct device *_arg) {
   2806c:	b088      	sub	sp, #32
    int err = bt_enable(NULL);
   2806e:	f003 fc5d 	bl	2b92c <bt_enable>

    if (err) {
   28072:	4606      	mov	r6, r0
   28074:	b9b8      	cbnz	r0, 280a6 <zmk_peripheral_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   28076:	f001 fe2f 	bl	29cd8 <settings_subsys_init>

    settings_load_subtree("ble");
   2807a:	480c      	ldr	r0, [pc, #48]	; (280ac <zmk_peripheral_ble_init+0x44>)
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   2807c:	4d0c      	ldr	r5, [pc, #48]	; (280b0 <zmk_peripheral_ble_init+0x48>)
    settings_load_subtree("ble");
   2807e:	f001 fd17 	bl	29ab0 <settings_load_subtree>
    settings_load_subtree("bt");
   28082:	480c      	ldr	r0, [pc, #48]	; (280b4 <zmk_peripheral_ble_init+0x4c>)
   28084:	f001 fd14 	bl	29ab0 <settings_load_subtree>
    LOG_WRN("Clearing all existing BLE bond information from the keyboard");

    bt_unpair(BT_ID_DEFAULT, NULL);
#endif

    bt_conn_cb_register(&conn_callbacks);
   28088:	480b      	ldr	r0, [pc, #44]	; (280b8 <zmk_peripheral_ble_init+0x50>)
   2808a:	f004 fe49 	bl	2cd20 <bt_conn_cb_register>
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   2808e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28090:	ac03      	add	r4, sp, #12
   28092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28094:	682b      	ldr	r3, [r5, #0]
   28096:	6023      	str	r3, [r4, #0]
   28098:	4908      	ldr	r1, [pc, #32]	; (280bc <zmk_peripheral_ble_init+0x54>)
   2809a:	9600      	str	r6, [sp, #0]
   2809c:	4633      	mov	r3, r6
   2809e:	2203      	movs	r2, #3
   280a0:	a803      	add	r0, sp, #12
   280a2:	f004 f94d 	bl	2c340 <bt_le_adv_start>

    start_advertising();

    return 0;
}
   280a6:	4630      	mov	r0, r6
   280a8:	b008      	add	sp, #32
   280aa:	bd70      	pop	{r4, r5, r6, pc}
   280ac:	0004b52d 	.word	0x0004b52d
   280b0:	00049ba0 	.word	0x00049ba0
   280b4:	0004b531 	.word	0x0004b531
   280b8:	200002e8 	.word	0x200002e8
   280bc:	00049e2c 	.word	0x00049e2c

000280c0 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   280c0:	4b02      	ldr	r3, [pc, #8]	; (280cc <usb_status_cb+0xc>)
   280c2:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   280c4:	4802      	ldr	r0, [pc, #8]	; (280d0 <usb_status_cb+0x10>)
   280c6:	f019 bd95 	b.w	41bf4 <k_work_submit>
   280ca:	bf00      	nop
   280cc:	20000a21 	.word	0x20000a21
   280d0:	20000308 	.word	0x20000308

000280d4 <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   280d4:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   280d6:	4804      	ldr	r0, [pc, #16]	; (280e8 <zmk_usb_init+0x14>)
   280d8:	f001 f9be 	bl	29458 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   280dc:	2800      	cmp	r0, #0
    }

    return 0;
}
   280de:	bf18      	it	ne
   280e0:	f06f 0015 	mvnne.w	r0, #21
   280e4:	bd08      	pop	{r3, pc}
   280e6:	bf00      	nop
   280e8:	000280c1 	.word	0x000280c1

000280ec <zmk_usb_get_conn_state>:
    switch (usb_status) {
   280ec:	4b08      	ldr	r3, [pc, #32]	; (28110 <zmk_usb_get_conn_state+0x24>)
   280ee:	781b      	ldrb	r3, [r3, #0]
   280f0:	3b03      	subs	r3, #3
   280f2:	2b08      	cmp	r3, #8
   280f4:	d808      	bhi.n	28108 <zmk_usb_get_conn_state+0x1c>
   280f6:	e8df f003 	tbb	[pc, r3]
   280fa:	0509      	.short	0x0509
   280fc:	07070709 	.word	0x07070709
   28100:	0707      	.short	0x0707
   28102:	05          	.byte	0x05
   28103:	00          	.byte	0x00
   28104:	2000      	movs	r0, #0
   28106:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   28108:	2001      	movs	r0, #1
   2810a:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
   2810c:	2002      	movs	r0, #2
}
   2810e:	4770      	bx	lr
   28110:	20000a21 	.word	0x20000a21

00028114 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   28114:	4801      	ldr	r0, [pc, #4]	; (2811c <main+0x8>)
   28116:	f7ff bc87 	b.w	27a28 <zmk_kscan_init>
   2811a:	bf00      	nop
   2811c:	0004b534 	.word	0x0004b534

00028120 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   28120:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   28122:	4c0a      	ldr	r4, [pc, #40]	; (2814c <crc8_ccitt+0x2c>)
   28124:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   28126:	4291      	cmp	r1, r2
   28128:	d100      	bne.n	2812c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   2812a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   2812c:	f811 3b01 	ldrb.w	r3, [r1], #1
   28130:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   28132:	0903      	lsrs	r3, r0, #4
   28134:	5ce3      	ldrb	r3, [r4, r3]
   28136:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   2813a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2813c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   28140:	5ce0      	ldrb	r0, [r4, r3]
   28142:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   28146:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   28148:	e7ed      	b.n	28126 <crc8_ccitt+0x6>
   2814a:	bf00      	nop
   2814c:	0004b53a 	.word	0x0004b53a

00028150 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   28150:	680b      	ldr	r3, [r1, #0]
   28152:	3301      	adds	r3, #1
   28154:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   28156:	4b01      	ldr	r3, [pc, #4]	; (2815c <char_out+0xc>)
   28158:	681b      	ldr	r3, [r3, #0]
   2815a:	4718      	bx	r3
   2815c:	20000318 	.word	0x20000318

00028160 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   28160:	b507      	push	{r0, r1, r2, lr}
   28162:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   28164:	2100      	movs	r1, #0
{
   28166:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   28168:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   2816a:	4803      	ldr	r0, [pc, #12]	; (28178 <vprintk+0x18>)
   2816c:	a901      	add	r1, sp, #4
   2816e:	f000 f8f9 	bl	28364 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   28172:	b003      	add	sp, #12
   28174:	f85d fb04 	ldr.w	pc, [sp], #4
   28178:	00028151 	.word	0x00028151

0002817c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2817c:	b530      	push	{r4, r5, lr}
   2817e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   28180:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   28184:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   28186:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   28188:	a901      	add	r1, sp, #4
   2818a:	4805      	ldr	r0, [pc, #20]	; (281a0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2818c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2818e:	f000 f8e9 	bl	28364 <cbvprintf>

	if (ctx.count < ctx.max) {
   28192:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28196:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   28198:	bfb8      	it	lt
   2819a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2819c:	b005      	add	sp, #20
   2819e:	bd30      	pop	{r4, r5, pc}
   281a0:	00042ceb 	.word	0x00042ceb

000281a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   281a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   281a8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   281ac:	f019 0808 	ands.w	r8, r9, #8
{
   281b0:	4604      	mov	r4, r0
   281b2:	4693      	mov	fp, r2
	if (processing) {
   281b4:	d00d      	beq.n	281d2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   281b6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   281b8:	bf0c      	ite	eq
   281ba:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   281be:	f049 0920 	orrne.w	r9, r9, #32
   281c2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   281c6:	f38b 8811 	msr	BASEPRI, fp
   281ca:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   281ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   281d2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   281d6:	2902      	cmp	r1, #2
   281d8:	d107      	bne.n	281ea <process_event+0x46>
			evt = process_recheck(mgr);
   281da:	4620      	mov	r0, r4
   281dc:	f01a fdcc 	bl	42d78 <process_recheck>
		if (evt == EVT_NOP) {
   281e0:	2800      	cmp	r0, #0
   281e2:	d0f0      	beq.n	281c6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   281e4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   281e6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   281e8:	d14e      	bne.n	28288 <process_event+0xe4>
			res = mgr->last_res;
   281ea:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   281ec:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   281ee:	2f00      	cmp	r7, #0
   281f0:	da15      	bge.n	2821e <process_event+0x7a>
		*clients = mgr->clients;
   281f2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   281f4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   281f8:	e9c4 8800 	strd	r8, r8, [r4]
   281fc:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   28200:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   28202:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   28204:	8b21      	ldrh	r1, [r4, #24]
   28206:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2820a:	45ca      	cmp	sl, r9
   2820c:	d002      	beq.n	28214 <process_event+0x70>
		if (do_monitors
   2820e:	68a3      	ldr	r3, [r4, #8]
   28210:	2b00      	cmp	r3, #0
   28212:	d15a      	bne.n	282ca <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   28214:	b90d      	cbnz	r5, 2821a <process_event+0x76>
		    || (transit != NULL)) {
   28216:	2e00      	cmp	r6, #0
   28218:	d071      	beq.n	282fe <process_event+0x15a>
   2821a:	2300      	movs	r3, #0
   2821c:	e056      	b.n	282cc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2821e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   28222:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   28224:	2a01      	cmp	r2, #1
   28226:	d81e      	bhi.n	28266 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28228:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2822c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   2822e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28230:	b289      	uxth	r1, r1
   28232:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   28236:	d10a      	bne.n	2824e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   28238:	b13d      	cbz	r5, 2824a <process_event+0xa6>
   2823a:	8b63      	ldrh	r3, [r4, #26]
   2823c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   2823e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   28240:	3301      	adds	r3, #1
   28242:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   28244:	2a00      	cmp	r2, #0
   28246:	d1fa      	bne.n	2823e <process_event+0x9a>
   28248:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2824a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2824e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   28250:	4620      	mov	r0, r4
   28252:	f01a fd91 	bl	42d78 <process_recheck>
   28256:	4606      	mov	r6, r0
   28258:	2800      	cmp	r0, #0
   2825a:	d0d3      	beq.n	28204 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2825c:	8b23      	ldrh	r3, [r4, #24]
   2825e:	f043 0320 	orr.w	r3, r3, #32
   28262:	8323      	strh	r3, [r4, #24]
   28264:	e7cd      	b.n	28202 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   28266:	2b04      	cmp	r3, #4
   28268:	d10c      	bne.n	28284 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2826a:	f021 0107 	bic.w	r1, r1, #7
   2826e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   28270:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   28272:	4620      	mov	r0, r4
   28274:	f01a fd80 	bl	42d78 <process_recheck>
   28278:	4605      	mov	r5, r0
   2827a:	2800      	cmp	r0, #0
   2827c:	d0c1      	beq.n	28202 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2827e:	f041 0120 	orr.w	r1, r1, #32
   28282:	8321      	strh	r1, [r4, #24]
   28284:	2500      	movs	r5, #0
   28286:	e7bc      	b.n	28202 <process_event+0x5e>
		} else if (evt == EVT_START) {
   28288:	2803      	cmp	r0, #3
   2828a:	d109      	bne.n	282a0 <process_event+0xfc>
			transit = mgr->transitions->start;
   2828c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2828e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   28292:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28294:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   28298:	8323      	strh	r3, [r4, #24]
}
   2829a:	2500      	movs	r5, #0
		res = 0;
   2829c:	462f      	mov	r7, r5
   2829e:	e7b1      	b.n	28204 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   282a0:	2804      	cmp	r0, #4
   282a2:	d106      	bne.n	282b2 <process_event+0x10e>
			transit = mgr->transitions->stop;
   282a4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   282a6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   282aa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   282ac:	f043 0304 	orr.w	r3, r3, #4
   282b0:	e7f2      	b.n	28298 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   282b2:	2805      	cmp	r0, #5
   282b4:	d106      	bne.n	282c4 <process_event+0x120>
			transit = mgr->transitions->reset;
   282b6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   282b8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   282bc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   282be:	f043 0305 	orr.w	r3, r3, #5
   282c2:	e7e9      	b.n	28298 <process_event+0xf4>
   282c4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   282c6:	462e      	mov	r6, r5
   282c8:	e7e8      	b.n	2829c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   282ca:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   282cc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   282d0:	8321      	strh	r1, [r4, #24]
   282d2:	f38b 8811 	msr	BASEPRI, fp
   282d6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   282da:	b9fb      	cbnz	r3, 2831c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   282dc:	bb85      	cbnz	r5, 28340 <process_event+0x19c>
			if (transit != NULL) {
   282de:	b116      	cbz	r6, 282e6 <process_event+0x142>
				transit(mgr, transition_complete);
   282e0:	491f      	ldr	r1, [pc, #124]	; (28360 <process_event+0x1bc>)
   282e2:	4620      	mov	r0, r4
   282e4:	47b0      	blx	r6
	__asm__ volatile(
   282e6:	f04f 0320 	mov.w	r3, #32
   282ea:	f3ef 8b11 	mrs	fp, BASEPRI
   282ee:	f383 8812 	msr	BASEPRI_MAX, r3
   282f2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   282f6:	8b23      	ldrh	r3, [r4, #24]
   282f8:	f023 0308 	bic.w	r3, r3, #8
   282fc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   282fe:	8b23      	ldrh	r3, [r4, #24]
   28300:	06da      	lsls	r2, r3, #27
   28302:	d525      	bpl.n	28350 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   28304:	f023 0310 	bic.w	r3, r3, #16
   28308:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   2830a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   2830c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   28310:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   28314:	2900      	cmp	r1, #0
   28316:	f47f af5e 	bne.w	281d6 <process_event+0x32>
out:
   2831a:	e754      	b.n	281c6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2831c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2831e:	2900      	cmp	r1, #0
   28320:	d0dc      	beq.n	282dc <process_event+0x138>
	return node->next;
   28322:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   28326:	f8d1 b004 	ldr.w	fp, [r1, #4]
   2832a:	463b      	mov	r3, r7
   2832c:	4652      	mov	r2, sl
   2832e:	4620      	mov	r0, r4
   28330:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   28332:	f1b9 0f00 	cmp.w	r9, #0
   28336:	d0d1      	beq.n	282dc <process_event+0x138>
   28338:	4649      	mov	r1, r9
   2833a:	f8d9 9000 	ldr.w	r9, [r9]
   2833e:	e7f2      	b.n	28326 <process_event+0x182>
   28340:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   28342:	463b      	mov	r3, r7
   28344:	4652      	mov	r2, sl
   28346:	4620      	mov	r0, r4
   28348:	682d      	ldr	r5, [r5, #0]
   2834a:	f01a fd31 	bl	42db0 <notify_one>
   2834e:	e7c5      	b.n	282dc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   28350:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   28354:	bf1e      	ittt	ne
   28356:	f023 0320 	bicne.w	r3, r3, #32
   2835a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   2835c:	2102      	movne	r1, #2
   2835e:	e7d5      	b.n	2830c <process_event+0x168>
   28360:	00042ddd 	.word	0x00042ddd

00028364 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   28364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28368:	b08f      	sub	sp, #60	; 0x3c
   2836a:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   2836c:	1e53      	subs	r3, r2, #1
{
   2836e:	9001      	str	r0, [sp, #4]
   28370:	468a      	mov	sl, r1
	fmt--;
   28372:	9302      	str	r3, [sp, #8]
	size_t count = 0;
   28374:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   28378:	9b02      	ldr	r3, [sp, #8]
   2837a:	7858      	ldrb	r0, [r3, #1]
   2837c:	2825      	cmp	r0, #37	; 0x25
   2837e:	f103 0401 	add.w	r4, r3, #1
   28382:	d121      	bne.n	283c8 <cbvprintf+0x64>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
   28384:	f04f 0c00 	mov.w	ip, #0

	for (fmt++ ; ; fmt++) {
   28388:	4618      	mov	r0, r3
	precision = -1;
   2838a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   2838e:	3002      	adds	r0, #2
	length_mod = 0;
   28390:	4661      	mov	r1, ip
	padding_mode = 0;
   28392:	f8cd c00c 	str.w	ip, [sp, #12]
	min_width = -1;
   28396:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
   28398:	260a      	movs	r6, #10
		switch (*fmt) {
   2839a:	7802      	ldrb	r2, [r0, #0]
   2839c:	9002      	str	r0, [sp, #8]
   2839e:	2a39      	cmp	r2, #57	; 0x39
   283a0:	f100 0001 	add.w	r0, r0, #1
   283a4:	d858      	bhi.n	28458 <cbvprintf+0xf4>
   283a6:	2a1f      	cmp	r2, #31
   283a8:	d818      	bhi.n	283dc <cbvprintf+0x78>
   283aa:	2a00      	cmp	r2, #0
   283ac:	f000 81f6 	beq.w	2879c <cbvprintf+0x438>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   283b0:	9b01      	ldr	r3, [sp, #4]
   283b2:	4651      	mov	r1, sl
   283b4:	2025      	movs	r0, #37	; 0x25
   283b6:	4798      	blx	r3
			OUTC(*fmt);
   283b8:	9b02      	ldr	r3, [sp, #8]
   283ba:	4651      	mov	r1, sl
   283bc:	7818      	ldrb	r0, [r3, #0]
   283be:	9b01      	ldr	r3, [sp, #4]
   283c0:	4798      	blx	r3
   283c2:	f109 0902 	add.w	r9, r9, #2
			goto start;
   283c6:	e7d7      	b.n	28378 <cbvprintf+0x14>
		if (*fmt == '\0') {
   283c8:	2800      	cmp	r0, #0
   283ca:	f000 81e7 	beq.w	2879c <cbvprintf+0x438>
		OUTC(*fmt);
   283ce:	9b01      	ldr	r3, [sp, #4]
   283d0:	4651      	mov	r1, sl
   283d2:	4798      	blx	r3
   283d4:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   283d8:	9402      	str	r4, [sp, #8]
   283da:	e7cd      	b.n	28378 <cbvprintf+0x14>
		switch (*fmt) {
   283dc:	f1a2 0320 	sub.w	r3, r2, #32
   283e0:	2b19      	cmp	r3, #25
   283e2:	d8e5      	bhi.n	283b0 <cbvprintf+0x4c>
   283e4:	f20f 0e04 	addw	lr, pc, #4
   283e8:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
   283ec:	00028455 	.word	0x00028455
   283f0:	000283b1 	.word	0x000283b1
   283f4:	000283b1 	.word	0x000283b1
   283f8:	00028455 	.word	0x00028455
   283fc:	000283b1 	.word	0x000283b1
   28400:	000284d9 	.word	0x000284d9
   28404:	000283b1 	.word	0x000283b1
   28408:	000283b1 	.word	0x000283b1
   2840c:	000283b1 	.word	0x000283b1
   28410:	000283b1 	.word	0x000283b1
   28414:	0002851b 	.word	0x0002851b
   28418:	00028455 	.word	0x00028455
   2841c:	000283b1 	.word	0x000283b1
   28420:	0002852f 	.word	0x0002852f
   28424:	000284e7 	.word	0x000284e7
   28428:	000283b1 	.word	0x000283b1
   2842c:	000284f3 	.word	0x000284f3
   28430:	0002850f 	.word	0x0002850f
   28434:	0002850f 	.word	0x0002850f
   28438:	0002850f 	.word	0x0002850f
   2843c:	0002850f 	.word	0x0002850f
   28440:	0002850f 	.word	0x0002850f
   28444:	0002850f 	.word	0x0002850f
   28448:	0002850f 	.word	0x0002850f
   2844c:	0002850f 	.word	0x0002850f
   28450:	0002850f 	.word	0x0002850f
   28454:	4694      	mov	ip, r2
   28456:	e7a0      	b.n	2839a <cbvprintf+0x36>
   28458:	2a58      	cmp	r2, #88	; 0x58
   2845a:	f000 811b 	beq.w	28694 <cbvprintf+0x330>
   2845e:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
   28462:	fa5f fe83 	uxtb.w	lr, r3
   28466:	f1be 0f17 	cmp.w	lr, #23
   2846a:	d8a1      	bhi.n	283b0 <cbvprintf+0x4c>
   2846c:	2b17      	cmp	r3, #23
   2846e:	d89f      	bhi.n	283b0 <cbvprintf+0x4c>
   28470:	f20f 0e04 	addw	lr, pc, #4
   28474:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
   28478:	000286f7 	.word	0x000286f7
   2847c:	00028555 	.word	0x00028555
   28480:	000283b1 	.word	0x000283b1
   28484:	000283b1 	.word	0x000283b1
   28488:	000283b1 	.word	0x000283b1
   2848c:	00028535 	.word	0x00028535
   28490:	00028555 	.word	0x00028555
   28494:	000283b1 	.word	0x000283b1
   28498:	000283b1 	.word	0x000283b1
   2849c:	00028535 	.word	0x00028535
   284a0:	000283b1 	.word	0x000283b1
   284a4:	000283b1 	.word	0x000283b1
   284a8:	000283b1 	.word	0x000283b1
   284ac:	0002863f 	.word	0x0002863f
   284b0:	000283b1 	.word	0x000283b1
   284b4:	000283b1 	.word	0x000283b1
   284b8:	000286d7 	.word	0x000286d7
   284bc:	000283b1 	.word	0x000283b1
   284c0:	00028555 	.word	0x00028555
   284c4:	000283b1 	.word	0x000283b1
   284c8:	000283b1 	.word	0x000283b1
   284cc:	0002863f 	.word	0x0002863f
   284d0:	000283b1 	.word	0x000283b1
   284d4:	00028535 	.word	0x00028535
			OUTC('%');
   284d8:	9b01      	ldr	r3, [sp, #4]
   284da:	4651      	mov	r1, sl
   284dc:	2025      	movs	r0, #37	; 0x25
   284de:	4798      	blx	r3
   284e0:	f109 0901 	add.w	r9, r9, #1
			goto start;
   284e4:	e748      	b.n	28378 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   284e6:	9b03      	ldr	r3, [sp, #12]
   284e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   284ec:	9303      	str	r3, [sp, #12]
			precision = 0;
   284ee:	2700      	movs	r7, #0
			continue;
   284f0:	e753      	b.n	2839a <cbvprintf+0x36>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   284f2:	2c00      	cmp	r4, #0
   284f4:	da0b      	bge.n	2850e <cbvprintf+0x1aa>
   284f6:	2f00      	cmp	r7, #0
   284f8:	da0b      	bge.n	28512 <cbvprintf+0x1ae>
   284fa:	9b03      	ldr	r3, [sp, #12]
   284fc:	2b00      	cmp	r3, #0
   284fe:	f000 8149 	beq.w	28794 <cbvprintf+0x430>
				min_width = 10 * min_width + *fmt - '0';
   28502:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   28506:	fb06 2404 	mla	r4, r6, r4, r2
   2850a:	3c30      	subs	r4, #48	; 0x30
   2850c:	e745      	b.n	2839a <cbvprintf+0x36>
			if (precision >= 0) {
   2850e:	2f00      	cmp	r7, #0
   28510:	dbf7      	blt.n	28502 <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
   28512:	fb06 2707 	mla	r7, r6, r7, r2
   28516:	3f30      	subs	r7, #48	; 0x30
   28518:	e73f      	b.n	2839a <cbvprintf+0x36>
			if (precision >= 0) {
   2851a:	2f00      	cmp	r7, #0
   2851c:	f855 3b04 	ldr.w	r3, [r5], #4
   28520:	db01      	blt.n	28526 <cbvprintf+0x1c2>
				precision = va_arg(ap, int);
   28522:	461f      	mov	r7, r3
   28524:	e739      	b.n	2839a <cbvprintf+0x36>
				if (min_width < 0) {
   28526:	1e1c      	subs	r4, r3, #0
   28528:	f6bf af37 	bge.w	2839a <cbvprintf+0x36>
					min_width = -min_width;
   2852c:	4264      	negs	r4, r4
		switch (*fmt) {
   2852e:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
   28530:	9303      	str	r3, [sp, #12]
   28532:	e732      	b.n	2839a <cbvprintf+0x36>
			if (*fmt == 'h' && length_mod == 'h') {
   28534:	2a68      	cmp	r2, #104	; 0x68
   28536:	d103      	bne.n	28540 <cbvprintf+0x1dc>
   28538:	2968      	cmp	r1, #104	; 0x68
   2853a:	d106      	bne.n	2854a <cbvprintf+0x1e6>
				length_mod = 'H';
   2853c:	2148      	movs	r1, #72	; 0x48
   2853e:	e72c      	b.n	2839a <cbvprintf+0x36>
			} else if (*fmt == 'l' && length_mod == 'l') {
   28540:	2a6c      	cmp	r2, #108	; 0x6c
   28542:	d102      	bne.n	2854a <cbvprintf+0x1e6>
   28544:	296c      	cmp	r1, #108	; 0x6c
   28546:	f000 8127 	beq.w	28798 <cbvprintf+0x434>
			} else if (length_mod == '\0') {
   2854a:	2900      	cmp	r1, #0
   2854c:	f47f af30 	bne.w	283b0 <cbvprintf+0x4c>
   28550:	4611      	mov	r1, r2
		switch (*fmt) {
   28552:	e722      	b.n	2839a <cbvprintf+0x36>
			if (length_mod == 'z') {
   28554:	297a      	cmp	r1, #122	; 0x7a
   28556:	d107      	bne.n	28568 <cbvprintf+0x204>
			} else if (*fmt == 'u') {
   28558:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
   2855a:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
   2855e:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
   28560:	d162      	bne.n	28628 <cbvprintf+0x2c4>
				d = va_arg(ap, unsigned int);
   28562:	f04f 0800 	mov.w	r8, #0
   28566:	e00d      	b.n	28584 <cbvprintf+0x220>
			} else if (length_mod == 'l') {
   28568:	296c      	cmp	r1, #108	; 0x6c
   2856a:	d0f5      	beq.n	28558 <cbvprintf+0x1f4>
			} else if (length_mod == 'L') {
   2856c:	294c      	cmp	r1, #76	; 0x4c
   2856e:	d1f3      	bne.n	28558 <cbvprintf+0x1f4>
					unsigned long long llu =
   28570:	1deb      	adds	r3, r5, #7
   28572:	f023 0307 	bic.w	r3, r3, #7
   28576:	461e      	mov	r6, r3
				if (*fmt == 'u') {
   28578:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
   2857a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
   2857e:	d107      	bne.n	28590 <cbvprintf+0x22c>
					unsigned long long llu =
   28580:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
   28584:	f1bc 0f20 	cmp.w	ip, #32
   28588:	d151      	bne.n	2862e <cbvprintf+0x2ca>
				prefix = " ";
   2858a:	4b86      	ldr	r3, [pc, #536]	; (287a4 <cbvprintf+0x440>)
				min_width--;
   2858c:	3c01      	subs	r4, #1
   2858e:	e009      	b.n	285a4 <cbvprintf+0x240>
					d = (int_value_type) lld;
   28590:	4605      	mov	r5, r0
   28592:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
   28594:	f1b8 0f00 	cmp.w	r8, #0
   28598:	daf4      	bge.n	28584 <cbvprintf+0x220>
				d = -d;
   2859a:	426d      	negs	r5, r5
				prefix = "-";
   2859c:	4b82      	ldr	r3, [pc, #520]	; (287a8 <cbvprintf+0x444>)
				d = -d;
   2859e:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
   285a2:	3c01      	subs	r4, #1
	prefix = "";
   285a4:	9300      	str	r3, [sp, #0]
	int i = 0;
   285a6:	ab0d      	add	r3, sp, #52	; 0x34
   285a8:	9305      	str	r3, [sp, #20]
   285aa:	f04f 0b00 	mov.w	fp, #0
		unsigned int c = num % base;
   285ae:	4628      	mov	r0, r5
   285b0:	4641      	mov	r1, r8
   285b2:	220a      	movs	r2, #10
   285b4:	2300      	movs	r3, #0
   285b6:	f8cd b010 	str.w	fp, [sp, #16]
   285ba:	f7fd fda1 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   285be:	9b05      	ldr	r3, [sp, #20]
   285c0:	f8cd 801c 	str.w	r8, [sp, #28]
   285c4:	3230      	adds	r2, #48	; 0x30
   285c6:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
   285ca:	4628      	mov	r0, r5
   285cc:	e9cd 3505 	strd	r3, r5, [sp, #20]
   285d0:	4641      	mov	r1, r8
   285d2:	2300      	movs	r3, #0
   285d4:	220a      	movs	r2, #10
   285d6:	f7fd fd93 	bl	26100 <__aeabi_uldivmod>
	} while (num);
   285da:	9b06      	ldr	r3, [sp, #24]
   285dc:	2b0a      	cmp	r3, #10
   285de:	9b07      	ldr	r3, [sp, #28]
   285e0:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   285e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		num /= base;
   285e8:	4605      	mov	r5, r0
   285ea:	4688      	mov	r8, r1
	} while (num);
   285ec:	d2df      	bcs.n	285ae <cbvprintf+0x24a>
	return -i;
   285ee:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
   285f0:	9a04      	ldr	r2, [sp, #16]
	return -i;
   285f2:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   285f6:	ab0e      	add	r3, sp, #56	; 0x38
   285f8:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   285fa:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
   285fc:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   28600:	da04      	bge.n	2860c <cbvprintf+0x2a8>
   28602:	9b03      	ldr	r3, [sp, #12]
   28604:	f013 0f01 	tst.w	r3, #1
   28608:	bf18      	it	ne
   2860a:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   2860c:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
   2860e:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
   28612:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
   28616:	bfd4      	ite	le
   28618:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
   2861c:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
   2861e:	079b      	lsls	r3, r3, #30
   28620:	f100 8081 	bmi.w	28726 <cbvprintf+0x3c2>
   28624:	4627      	mov	r7, r4
   28626:	e077      	b.n	28718 <cbvprintf+0x3b4>
				d = va_arg(ap, int);
   28628:	ea4f 78e5 	mov.w	r8, r5, asr #31
   2862c:	e7b2      	b.n	28594 <cbvprintf+0x230>
			} else if (special == '+') {
   2862e:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
   28632:	bf0a      	itet	eq
   28634:	4b5d      	ldreq	r3, [pc, #372]	; (287ac <cbvprintf+0x448>)
	prefix = "";
   28636:	4b5e      	ldrne	r3, [pc, #376]	; (287b0 <cbvprintf+0x44c>)
				min_width--;
   28638:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2863c:	e7b2      	b.n	285a4 <cbvprintf+0x240>
			if (*fmt == 'p') {
   2863e:	2a70      	cmp	r2, #112	; 0x70
   28640:	d128      	bne.n	28694 <cbvprintf+0x330>
				x = (uintptr_t)va_arg(ap, void *);
   28642:	462e      	mov	r6, r5
   28644:	2300      	movs	r3, #0
   28646:	f856 1b04 	ldr.w	r1, [r6], #4
				if (x == (uint_value_type)0) {
   2864a:	2900      	cmp	r1, #0
   2864c:	d05c      	beq.n	28708 <cbvprintf+0x3a4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2864e:	4859      	ldr	r0, [pc, #356]	; (287b4 <cbvprintf+0x450>)
   28650:	9000      	str	r0, [sp, #0]
				min_width -= 2;
   28652:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   28654:	f002 0260 	and.w	r2, r2, #96	; 0x60
   28658:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
   2865c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
   28660:	2500      	movs	r5, #0
		unsigned int c = num % base;
   28662:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
   28666:	2a09      	cmp	r2, #9
			c += alpha;
   28668:	bf88      	it	hi
   2866a:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
   2866c:	3230      	adds	r2, #48	; 0x30
   2866e:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
   28672:	2910      	cmp	r1, #16
		num /= base;
   28674:	ea4f 1211 	mov.w	r2, r1, lsr #4
   28678:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
   2867c:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
   28680:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   28684:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
	} while (num);
   28688:	d221      	bcs.n	286ce <cbvprintf+0x36a>
			data = buf + sizeof(buf) - data_len;
   2868a:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
   2868c:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
   28690:	441d      	add	r5, r3
   28692:	e7b2      	b.n	285fa <cbvprintf+0x296>
			} else if (length_mod == 'l') {
   28694:	296c      	cmp	r1, #108	; 0x6c
   28696:	d104      	bne.n	286a2 <cbvprintf+0x33e>
				x = va_arg(ap, unsigned int);
   28698:	462e      	mov	r6, r5
   2869a:	2300      	movs	r3, #0
   2869c:	f856 1b04 	ldr.w	r1, [r6], #4
   286a0:	e008      	b.n	286b4 <cbvprintf+0x350>
			} else if (length_mod == 'L') {
   286a2:	294c      	cmp	r1, #76	; 0x4c
   286a4:	d1f8      	bne.n	28698 <cbvprintf+0x334>
				unsigned long long llx =
   286a6:	3507      	adds	r5, #7
   286a8:	f025 0507 	bic.w	r5, r5, #7
   286ac:	462e      	mov	r6, r5
   286ae:	686b      	ldr	r3, [r5, #4]
   286b0:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
   286b4:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
   286b8:	d106      	bne.n	286c8 <cbvprintf+0x364>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   286ba:	4d3f      	ldr	r5, [pc, #252]	; (287b8 <cbvprintf+0x454>)
   286bc:	483d      	ldr	r0, [pc, #244]	; (287b4 <cbvprintf+0x450>)
   286be:	f012 0f20 	tst.w	r2, #32
   286c2:	bf08      	it	eq
   286c4:	4628      	moveq	r0, r5
   286c6:	e7c3      	b.n	28650 <cbvprintf+0x2ec>
	prefix = "";
   286c8:	4839      	ldr	r0, [pc, #228]	; (287b0 <cbvprintf+0x44c>)
   286ca:	9000      	str	r0, [sp, #0]
   286cc:	e7c2      	b.n	28654 <cbvprintf+0x2f0>
		buftop[--i] = c + '0';
   286ce:	4665      	mov	r5, ip
		num /= base;
   286d0:	4611      	mov	r1, r2
   286d2:	4603      	mov	r3, r0
   286d4:	e7c5      	b.n	28662 <cbvprintf+0x2fe>
			data = va_arg(ap, char *);
   286d6:	462e      	mov	r6, r5
   286d8:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
   286dc:	4628      	mov	r0, r5
   286de:	f01c fbba 	bl	44e56 <strlen>
			if (precision >= 0 && data_len > precision) {
   286e2:	2f00      	cmp	r7, #0
			data_len = strlen(data);
   286e4:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   286e6:	db02      	blt.n	286ee <cbvprintf+0x38a>
   286e8:	42b8      	cmp	r0, r7
   286ea:	bfa8      	it	ge
   286ec:	46bb      	movge	fp, r7
   286ee:	4b30      	ldr	r3, [pc, #192]	; (287b0 <cbvprintf+0x44c>)
   286f0:	9300      	str	r3, [sp, #0]
   286f2:	2700      	movs	r7, #0
   286f4:	e78a      	b.n	2860c <cbvprintf+0x2a8>
			int c = va_arg(ap, int);
   286f6:	462e      	mov	r6, r5
			data_len = 1;
   286f8:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
   286fc:	f856 3b04 	ldr.w	r3, [r6], #4
   28700:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
   28704:	ad08      	add	r5, sp, #32
   28706:	e7f2      	b.n	286ee <cbvprintf+0x38a>
					data = "(nil)";
   28708:	4d2c      	ldr	r5, [pc, #176]	; (287bc <cbvprintf+0x458>)
					data_len = 5;
   2870a:	f04f 0b05 	mov.w	fp, #5
   2870e:	e7ee      	b.n	286ee <cbvprintf+0x38a>
			while (--min_width >= 0) {
				OUTC(' ');
   28710:	9b01      	ldr	r3, [sp, #4]
   28712:	4651      	mov	r1, sl
   28714:	2020      	movs	r0, #32
   28716:	4798      	blx	r3
			while (--min_width >= 0) {
   28718:	3f01      	subs	r7, #1
   2871a:	d5f9      	bpl.n	28710 <cbvprintf+0x3ac>
   2871c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   28720:	3c01      	subs	r4, #1
   28722:	4499      	add	r9, r3
   28724:	1ae4      	subs	r4, r4, r3
   28726:	9b00      	ldr	r3, [sp, #0]
   28728:	eba9 0903 	sub.w	r9, r9, r3
   2872c:	e004      	b.n	28738 <cbvprintf+0x3d4>
   2872e:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   28730:	4651      	mov	r1, sl
   28732:	9b01      	ldr	r3, [sp, #4]
   28734:	4798      	blx	r3
   28736:	9b00      	ldr	r3, [sp, #0]
   28738:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
   2873c:	f813 0b01 	ldrb.w	r0, [r3], #1
   28740:	2800      	cmp	r0, #0
   28742:	d1f4      	bne.n	2872e <cbvprintf+0x3ca>
		precision -= data_len;
   28744:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
   28746:	f1b9 0901 	subs.w	r9, r9, #1
   2874a:	d513      	bpl.n	28774 <cbvprintf+0x410>
   2874c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   28750:	46d9      	mov	r9, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
   28752:	f1b9 0901 	subs.w	r9, r9, #1
   28756:	d512      	bpl.n	2877e <cbvprintf+0x41a>
   28758:	f1bb 0f00 	cmp.w	fp, #0
   2875c:	bfa8      	it	ge
   2875e:	44d8      	addge	r8, fp
   28760:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   28762:	3d01      	subs	r5, #1
   28764:	d511      	bpl.n	2878a <cbvprintf+0x426>
   28766:	2c00      	cmp	r4, #0
   28768:	bfa8      	it	ge
   2876a:	44a0      	addge	r8, r4
   2876c:	eb08 0907 	add.w	r9, r8, r7
   28770:	4635      	mov	r5, r6
   28772:	e601      	b.n	28378 <cbvprintf+0x14>
			OUTC('0');
   28774:	9b01      	ldr	r3, [sp, #4]
   28776:	4651      	mov	r1, sl
   28778:	2030      	movs	r0, #48	; 0x30
   2877a:	4798      	blx	r3
   2877c:	e7e3      	b.n	28746 <cbvprintf+0x3e2>
			OUTC(*data++);
   2877e:	f815 0b01 	ldrb.w	r0, [r5], #1
   28782:	9b01      	ldr	r3, [sp, #4]
   28784:	4651      	mov	r1, sl
   28786:	4798      	blx	r3
   28788:	e7e3      	b.n	28752 <cbvprintf+0x3ee>
			OUTC(' ');
   2878a:	9b01      	ldr	r3, [sp, #4]
   2878c:	4651      	mov	r1, sl
   2878e:	2020      	movs	r0, #32
   28790:	4798      	blx	r3
   28792:	e7e6      	b.n	28762 <cbvprintf+0x3fe>
				padding_mode = PAD_ZERO;
   28794:	2301      	movs	r3, #1
   28796:	e6cb      	b.n	28530 <cbvprintf+0x1cc>
				length_mod = 'L';
   28798:	214c      	movs	r1, #76	; 0x4c
   2879a:	e5fe      	b.n	2839a <cbvprintf+0x36>
		}

		goto start;
	}
}
   2879c:	4648      	mov	r0, r9
   2879e:	b00f      	add	sp, #60	; 0x3c
   287a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   287a4:	0004b54c 	.word	0x0004b54c
   287a8:	0004b54a 	.word	0x0004b54a
   287ac:	0004b54e 	.word	0x0004b54e
   287b0:	0004b584 	.word	0x0004b584
   287b4:	0004b553 	.word	0x0004b553
   287b8:	0004b550 	.word	0x0004b550
   287bc:	0004b556 	.word	0x0004b556

000287c0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   287c0:	b508      	push	{r3, lr}
   287c2:	f04f 0220 	mov.w	r2, #32
   287c6:	f3ef 8311 	mrs	r3, BASEPRI
   287ca:	f382 8812 	msr	BASEPRI_MAX, r2
   287ce:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   287d2:	f002 f8f3 	bl	2a9bc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   287d6:	4803      	ldr	r0, [pc, #12]	; (287e4 <sys_reboot+0x24>)
   287d8:	f01a fa9a 	bl	42d10 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   287dc:	f001 fdc4 	bl	2a368 <arch_cpu_idle>
   287e0:	e7fc      	b.n	287dc <sys_reboot+0x1c>
   287e2:	bf00      	nop
   287e4:	0004b55c 	.word	0x0004b55c

000287e8 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   287e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   287ea:	2407      	movs	r4, #7
   287ec:	9402      	str	r4, [sp, #8]
   287ee:	4c04      	ldr	r4, [pc, #16]	; (28800 <read_pnp_id+0x18>)
   287f0:	9401      	str	r4, [sp, #4]
   287f2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   287f6:	9400      	str	r4, [sp, #0]
   287f8:	f01e fd0e 	bl	47218 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   287fc:	b004      	add	sp, #16
   287fe:	bd10      	pop	{r4, pc}
   28800:	20000a22 	.word	0x20000a22

00028804 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   28804:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   28806:	4c08      	ldr	r4, [pc, #32]	; (28828 <read_blvl+0x24>)
{
   28808:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   2880a:	7824      	ldrb	r4, [r4, #0]
   2880c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   28810:	2401      	movs	r4, #1
   28812:	9402      	str	r4, [sp, #8]
   28814:	f10d 0417 	add.w	r4, sp, #23
   28818:	9401      	str	r4, [sp, #4]
   2881a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2881e:	9400      	str	r4, [sp, #0]
   28820:	f01e fcfa 	bl	47218 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   28824:	b006      	add	sp, #24
   28826:	bd10      	pop	{r4, pc}
   28828:	20000a29 	.word	0x20000a29

0002882c <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   2882c:	b500      	push	{lr}
   2882e:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   28830:	2864      	cmp	r0, #100	; 0x64
{
   28832:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   28836:	d819      	bhi.n	2886c <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   28838:	4b0e      	ldr	r3, [pc, #56]	; (28874 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2883a:	2218      	movs	r2, #24
   2883c:	7018      	strb	r0, [r3, #0]
   2883e:	2100      	movs	r1, #0
   28840:	a802      	add	r0, sp, #8
   28842:	f01c fb48 	bl	44ed6 <memset>
	params.attr = attr;
   28846:	4b0c      	ldr	r3, [pc, #48]	; (28878 <bt_bas_set_battery_level+0x4c>)
   28848:	9303      	str	r3, [sp, #12]
	params.data = data;
   2884a:	f10d 0307 	add.w	r3, sp, #7
   2884e:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   28850:	a902      	add	r1, sp, #8
	params.len = len;
   28852:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   28854:	2000      	movs	r0, #0
	params.len = len;
   28856:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2885a:	f005 ff1d 	bl	2e698 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2885e:	f110 0f80 	cmn.w	r0, #128	; 0x80
   28862:	bf08      	it	eq
   28864:	2000      	moveq	r0, #0
}
   28866:	b009      	add	sp, #36	; 0x24
   28868:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2886c:	f06f 0015 	mvn.w	r0, #21
   28870:	e7f9      	b.n	28866 <bt_bas_set_battery_level+0x3a>
   28872:	bf00      	nop
   28874:	20000a29 	.word	0x20000a29
   28878:	00049ee4 	.word	0x00049ee4

0002887c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2887c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28880:	460f      	mov	r7, r1
   28882:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28884:	2108      	movs	r1, #8
   28886:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   28888:	f8df 9050 	ldr.w	r9, [pc, #80]	; 288dc <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2888c:	f01a fdd9 	bl	43442 <nvs_al_size.isra.0>
	*addr -= ate_size;
   28890:	683c      	ldr	r4, [r7, #0]
   28892:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28894:	4680      	mov	r8, r0
	*addr -= ate_size;
   28896:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   28898:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   2889c:	42ac      	cmp	r4, r5
   2889e:	d803      	bhi.n	288a8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   288a0:	2000      	movs	r0, #0
}
   288a2:	b003      	add	sp, #12
   288a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   288a8:	2308      	movs	r3, #8
   288aa:	466a      	mov	r2, sp
   288ac:	4621      	mov	r1, r4
   288ae:	4630      	mov	r0, r6
   288b0:	f01a fd3c 	bl	4332c <nvs_flash_rd>
		if (rc) {
   288b4:	2800      	cmp	r0, #0
   288b6:	d1f4      	bne.n	288a2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   288b8:	4669      	mov	r1, sp
   288ba:	4630      	mov	r0, r6
   288bc:	f01a fdcb 	bl	43456 <nvs_ate_valid>
   288c0:	b140      	cbz	r0, 288d4 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   288c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   288c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   288ca:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   288cc:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   288d0:	4413      	add	r3, r2
   288d2:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   288d4:	eba4 0408 	sub.w	r4, r4, r8
   288d8:	e7e0      	b.n	2889c <nvs_recover_last_ate+0x20>
   288da:	bf00      	nop
   288dc:	ffff0000 	.word	0xffff0000

000288e0 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   288e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   288e4:	4604      	mov	r4, r0
   288e6:	b089      	sub	sp, #36	; 0x24
   288e8:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   288ea:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   288ee:	4638      	mov	r0, r7
   288f0:	f020 fa04 	bl	48cfc <z_impl_k_mutex_init>
   288f4:	4628      	mov	r0, r5
   288f6:	f018 fc49 	bl	4118c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   288fa:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   288fc:	2800      	cmp	r0, #0
   288fe:	f000 811f 	beq.w	28b40 <nvs_init+0x260>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   28902:	6883      	ldr	r3, [r0, #8]
   28904:	68db      	ldr	r3, [r3, #12]
   28906:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   28908:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   2890a:	b928      	cbnz	r0, 28918 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   2890c:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   28910:	4628      	mov	r0, r5
   28912:	b009      	add	sp, #36	; 0x24
   28914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   28918:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   2891a:	6883      	ldr	r3, [r0, #8]
   2891c:	68db      	ldr	r3, [r3, #12]
   2891e:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   28920:	6803      	ldr	r3, [r0, #0]
   28922:	3b01      	subs	r3, #1
   28924:	2b1f      	cmp	r3, #31
   28926:	d8f1      	bhi.n	2890c <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   28928:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2892a:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2892c:	aa05      	add	r2, sp, #20
   2892e:	f01f fc7d 	bl	4822c <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   28932:	2800      	cmp	r0, #0
   28934:	d1ea      	bne.n	2890c <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   28936:	89a5      	ldrh	r5, [r4, #12]
   28938:	2d00      	cmp	r5, #0
   2893a:	d0e7      	beq.n	2890c <nvs_init+0x2c>
   2893c:	9b06      	ldr	r3, [sp, #24]
   2893e:	fbb5 f2f3 	udiv	r2, r5, r3
   28942:	fb03 5512 	mls	r5, r3, r2, r5
   28946:	2d00      	cmp	r5, #0
   28948:	d1e0      	bne.n	2890c <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2894a:	89e3      	ldrh	r3, [r4, #14]
   2894c:	2b01      	cmp	r3, #1
   2894e:	d9dd      	bls.n	2890c <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   28950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   28952:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   28954:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   28958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2895c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28960:	4638      	mov	r0, r7
   28962:	f018 feed 	bl	41740 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28966:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28968:	2108      	movs	r1, #8
   2896a:	f01a fd6a 	bl	43442 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2896e:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28970:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   28972:	89e3      	ldrh	r3, [r4, #14]
   28974:	fa1f fa85 	uxth.w	sl, r5
   28978:	4553      	cmp	r3, sl
   2897a:	d845      	bhi.n	28a08 <nvs_init+0x128>
	if (closed_sectors == fs->sector_count) {
   2897c:	89e3      	ldrh	r3, [r4, #14]
   2897e:	454b      	cmp	r3, r9
   28980:	f000 80d3 	beq.w	28b2a <nvs_init+0x24a>
	if (i == fs->sector_count) {
   28984:	4553      	cmp	r3, sl
   28986:	d10b      	bne.n	289a0 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   28988:	9900      	ldr	r1, [sp, #0]
   2898a:	2308      	movs	r3, #8
   2898c:	4642      	mov	r2, r8
   2898e:	1b89      	subs	r1, r1, r6
   28990:	4620      	mov	r0, r4
   28992:	f01a fd03 	bl	4339c <nvs_flash_cmp_const>
		if (!rc) {
   28996:	b918      	cbnz	r0, 289a0 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   28998:	89e0      	ldrh	r0, [r4, #14]
   2899a:	4669      	mov	r1, sp
   2899c:	f01a fd46 	bl	4342c <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   289a0:	4669      	mov	r1, sp
   289a2:	4620      	mov	r0, r4
   289a4:	f7ff ff6a 	bl	2887c <nvs_recover_last_ate>
	if (rc) {
   289a8:	4605      	mov	r5, r0
   289aa:	2800      	cmp	r0, #0
   289ac:	f040 80bf 	bne.w	28b2e <nvs_init+0x24e>
	fs->ate_wra = addr;
   289b0:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   289b2:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 28b98 <nvs_init+0x2b8>
	fs->ate_wra = addr;
   289b6:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   289b8:	ea03 0309 	and.w	r3, r3, r9
   289bc:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   289be:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   289c2:	4299      	cmp	r1, r3
   289c4:	d30e      	bcc.n	289e4 <nvs_init+0x104>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   289c6:	2308      	movs	r3, #8
   289c8:	aa01      	add	r2, sp, #4
   289ca:	4620      	mov	r0, r4
   289cc:	f01a fcae 	bl	4332c <nvs_flash_rd>
		if (rc) {
   289d0:	b9c0      	cbnz	r0, 28a04 <nvs_init+0x124>
   289d2:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   289d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   289d8:	4590      	cmp	r8, r2
   289da:	f040 80c1 	bne.w	28b60 <nvs_init+0x280>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   289de:	3001      	adds	r0, #1
   289e0:	2808      	cmp	r0, #8
   289e2:	d1f7      	bne.n	289d4 <nvs_init+0xf4>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   289e4:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   289e6:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   289e8:	0c1b      	lsrs	r3, r3, #16
   289ea:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   289ec:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   289ee:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   289f0:	f01a fd1c 	bl	4342c <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   289f4:	89a3      	ldrh	r3, [r4, #12]
   289f6:	9900      	ldr	r1, [sp, #0]
   289f8:	4642      	mov	r2, r8
   289fa:	4620      	mov	r0, r4
   289fc:	f01a fcce 	bl	4339c <nvs_flash_cmp_const>
	if (rc < 0) {
   28a00:	2800      	cmp	r0, #0
   28a02:	da26      	bge.n	28a52 <nvs_init+0x172>
   28a04:	4605      	mov	r5, r0
   28a06:	e092      	b.n	28b2e <nvs_init+0x24e>
		       (uint16_t)(fs->sector_size - ate_size);
   28a08:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   28a0a:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   28a0c:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   28a0e:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   28a12:	4642      	mov	r2, r8
   28a14:	2308      	movs	r3, #8
   28a16:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   28a18:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   28a1a:	f01a fcbf 	bl	4339c <nvs_flash_cmp_const>
		if (rc) {
   28a1e:	b178      	cbz	r0, 28a40 <nvs_init+0x160>
			nvs_sector_advance(fs, &addr);
   28a20:	89e0      	ldrh	r0, [r4, #14]
   28a22:	4669      	mov	r1, sp
   28a24:	f01a fd02 	bl	4342c <nvs_sector_advance.isra.0>
			closed_sectors++;
   28a28:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   28a2c:	9900      	ldr	r1, [sp, #0]
   28a2e:	2308      	movs	r3, #8
   28a30:	4642      	mov	r2, r8
   28a32:	4620      	mov	r0, r4
			closed_sectors++;
   28a34:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   28a38:	f01a fcb0 	bl	4339c <nvs_flash_cmp_const>
			if (!rc) {
   28a3c:	2800      	cmp	r0, #0
   28a3e:	d09d      	beq.n	2897c <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   28a40:	3501      	adds	r5, #1
   28a42:	e796      	b.n	28972 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28a44:	f1ba 0f00 	cmp.w	sl, #0
   28a48:	f000 80a2 	beq.w	28b90 <nvs_init+0x2b0>
				rc = -ESPIPE;
   28a4c:	f06f 051c 	mvn.w	r5, #28
   28a50:	e06d      	b.n	28b2e <nvs_init+0x24e>
	if (rc) {
   28a52:	d045      	beq.n	28ae0 <nvs_init+0x200>
		addr = fs->ate_wra + ate_size;
   28a54:	6863      	ldr	r3, [r4, #4]
   28a56:	4433      	add	r3, r6
   28a58:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   28a5a:	f64f 78ff 	movw	r8, #65535	; 0xffff
   28a5e:	9900      	ldr	r1, [sp, #0]
   28a60:	89a3      	ldrh	r3, [r4, #12]
   28a62:	b28a      	uxth	r2, r1
   28a64:	1b9b      	subs	r3, r3, r6
   28a66:	429a      	cmp	r2, r3
   28a68:	d315      	bcc.n	28a96 <nvs_init+0x1b6>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   28a6a:	6861      	ldr	r1, [r4, #4]
   28a6c:	4620      	mov	r0, r4
   28a6e:	f01a fcba 	bl	433e6 <nvs_flash_erase_sector>
		if (rc) {
   28a72:	2800      	cmp	r0, #0
   28a74:	d1c6      	bne.n	28a04 <nvs_init+0x124>
		fs->ate_wra &= ADDR_SECT_MASK;
   28a76:	6863      	ldr	r3, [r4, #4]
   28a78:	4a47      	ldr	r2, [pc, #284]	; (28b98 <nvs_init+0x2b8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28a7a:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   28a7c:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28a7e:	440b      	add	r3, r1
   28a80:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   28a84:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   28a86:	4013      	ands	r3, r2
   28a88:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   28a8a:	4620      	mov	r0, r4
   28a8c:	f01a fdd8 	bl	43640 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28a90:	2800      	cmp	r0, #0
   28a92:	d040      	beq.n	28b16 <nvs_init+0x236>
   28a94:	e7b6      	b.n	28a04 <nvs_init+0x124>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28a96:	2308      	movs	r3, #8
   28a98:	aa03      	add	r2, sp, #12
   28a9a:	4620      	mov	r0, r4
   28a9c:	f01a fc46 	bl	4332c <nvs_flash_rd>
			if (rc) {
   28aa0:	2800      	cmp	r0, #0
   28aa2:	d1af      	bne.n	28a04 <nvs_init+0x124>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   28aa4:	a903      	add	r1, sp, #12
   28aa6:	4620      	mov	r0, r4
   28aa8:	f01a fcd5 	bl	43456 <nvs_ate_valid>
   28aac:	b138      	cbz	r0, 28abe <nvs_init+0x1de>
   28aae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28ab2:	4543      	cmp	r3, r8
   28ab4:	d103      	bne.n	28abe <nvs_init+0x1de>
			    (gc_done_ate.id == 0xffff) &&
   28ab6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28aba:	2b00      	cmp	r3, #0
   28abc:	d043      	beq.n	28b46 <nvs_init+0x266>
			addr += ate_size;
   28abe:	9b00      	ldr	r3, [sp, #0]
   28ac0:	4433      	add	r3, r6
   28ac2:	9300      	str	r3, [sp, #0]
   28ac4:	e7cb      	b.n	28a5e <nvs_init+0x17e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   28ac6:	1a5b      	subs	r3, r3, r1
   28ac8:	4642      	mov	r2, r8
   28aca:	4620      	mov	r0, r4
   28acc:	f01a fc66 	bl	4339c <nvs_flash_cmp_const>
		if (rc < 0) {
   28ad0:	2800      	cmp	r0, #0
   28ad2:	db97      	blt.n	28a04 <nvs_init+0x124>
		if (!rc) {
   28ad4:	d008      	beq.n	28ae8 <nvs_init+0x208>
		fs->data_wra += fs->flash_parameters->write_block_size;
   28ad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28ad8:	68a3      	ldr	r3, [r4, #8]
   28ada:	6812      	ldr	r2, [r2, #0]
   28adc:	4413      	add	r3, r2
   28ade:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   28ae0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   28ae4:	428b      	cmp	r3, r1
   28ae6:	d8ee      	bhi.n	28ac6 <nvs_init+0x1e6>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28ae8:	6861      	ldr	r1, [r4, #4]
   28aea:	89a3      	ldrh	r3, [r4, #12]
   28aec:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   28af0:	429a      	cmp	r2, r3
   28af2:	d1cd      	bne.n	28a90 <nvs_init+0x1b0>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   28af4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 28b98 <nvs_init+0x2b8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28af8:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   28afa:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28afe:	4293      	cmp	r3, r2
   28b00:	d0c6      	beq.n	28a90 <nvs_init+0x1b0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   28b02:	4620      	mov	r0, r4
   28b04:	f01a fc6f 	bl	433e6 <nvs_flash_erase_sector>
		if (rc) {
   28b08:	2800      	cmp	r0, #0
   28b0a:	f47f af7b 	bne.w	28a04 <nvs_init+0x124>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   28b0e:	6863      	ldr	r3, [r4, #4]
   28b10:	ea03 0308 	and.w	r3, r3, r8
   28b14:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   28b16:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28b18:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   28b1a:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28b1e:	42b3      	cmp	r3, r6
   28b20:	d105      	bne.n	28b2e <nvs_init+0x24e>
		rc = nvs_add_gc_done_ate(fs);
   28b22:	4620      	mov	r0, r4
   28b24:	f01a fd77 	bl	43616 <nvs_add_gc_done_ate>
   28b28:	e76c      	b.n	28a04 <nvs_init+0x124>
		rc = -EDEADLK;
   28b2a:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   28b2e:	4638      	mov	r0, r7
   28b30:	f018 fe7e 	bl	41830 <z_impl_k_mutex_unlock>
	if (rc) {
   28b34:	2d00      	cmp	r5, #0
   28b36:	f47f aeeb 	bne.w	28910 <nvs_init+0x30>
	fs->ready = true;
   28b3a:	2301      	movs	r3, #1
   28b3c:	7423      	strb	r3, [r4, #16]
	return 0;
   28b3e:	e6e7      	b.n	28910 <nvs_init+0x30>
		return -ENXIO;
   28b40:	f06f 0505 	mvn.w	r5, #5
   28b44:	e6e4      	b.n	28910 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28b46:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   28b48:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28b4a:	0c1b      	lsrs	r3, r3, #16
   28b4c:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   28b4e:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28b50:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   28b52:	f01a fc6b 	bl	4342c <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   28b56:	9900      	ldr	r1, [sp, #0]
   28b58:	4620      	mov	r0, r4
   28b5a:	f01a fc44 	bl	433e6 <nvs_flash_erase_sector>
			goto end;
   28b5e:	e797      	b.n	28a90 <nvs_init+0x1b0>
		if (nvs_ate_valid(fs, &last_ate)) {
   28b60:	a901      	add	r1, sp, #4
   28b62:	4620      	mov	r0, r4
   28b64:	f01a fc77 	bl	43456 <nvs_ate_valid>
   28b68:	f8d4 b004 	ldr.w	fp, [r4, #4]
   28b6c:	b180      	cbz	r0, 28b90 <nvs_init+0x2b0>
			fs->data_wra = addr & ADDR_SECT_MASK;
   28b6e:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28b70:	f8bd a008 	ldrh.w	sl, [sp, #8]
   28b74:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   28b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   28b7a:	ea02 0209 	and.w	r2, r2, r9
   28b7e:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28b80:	4451      	add	r1, sl
   28b82:	f01a fc5e 	bl	43442 <nvs_al_size.isra.0>
   28b86:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28b88:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28b8a:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28b8c:	f43f af5a 	beq.w	28a44 <nvs_init+0x164>
		fs->ate_wra -= ate_size;
   28b90:	ebab 0306 	sub.w	r3, fp, r6
   28b94:	6063      	str	r3, [r4, #4]
   28b96:	e712      	b.n	289be <nvs_init+0xde>
   28b98:	ffff0000 	.word	0xffff0000

00028b9c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   28b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ba0:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   28ba2:	7c03      	ldrb	r3, [r0, #16]
{
   28ba4:	b089      	sub	sp, #36	; 0x24
   28ba6:	4604      	mov	r4, r0
   28ba8:	4689      	mov	r9, r1
   28baa:	4690      	mov	r8, r2
	if (!fs->ready) {
   28bac:	2b00      	cmp	r3, #0
   28bae:	f000 80b2 	beq.w	28d16 <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28bb2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   28bb4:	2108      	movs	r1, #8
   28bb6:	4610      	mov	r0, r2
   28bb8:	f01a fc43 	bl	43442 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   28bbc:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28bbe:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   28bc0:	4610      	mov	r0, r2
   28bc2:	f01a fc3e 	bl	43442 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   28bc6:	89a3      	ldrh	r3, [r4, #12]
   28bc8:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   28bcc:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   28bce:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   28bd0:	f200 80a4 	bhi.w	28d1c <nvs_write+0x180>
   28bd4:	b11e      	cbz	r6, 28bde <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   28bd6:	f1b8 0f00 	cmp.w	r8, #0
   28bda:	f000 809f 	beq.w	28d1c <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   28bde:	6863      	ldr	r3, [r4, #4]
   28be0:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28be2:	aa04      	add	r2, sp, #16
   28be4:	a903      	add	r1, sp, #12
   28be6:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   28be8:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28bec:	f01a fc6b 	bl	434c6 <nvs_prev_ate>
		if (rc) {
   28bf0:	4605      	mov	r5, r0
   28bf2:	2800      	cmp	r0, #0
   28bf4:	d15a      	bne.n	28cac <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   28bf6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28bfa:	454b      	cmp	r3, r9
   28bfc:	d005      	beq.n	28c0a <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   28bfe:	6862      	ldr	r2, [r4, #4]
   28c00:	9b03      	ldr	r3, [sp, #12]
   28c02:	429a      	cmp	r2, r3
   28c04:	d1ed      	bne.n	28be2 <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   28c06:	b9de      	cbnz	r6, 28c40 <nvs_write+0xa4>
   28c08:	e050      	b.n	28cac <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   28c0a:	a904      	add	r1, sp, #16
   28c0c:	4620      	mov	r0, r4
   28c0e:	f01a fc22 	bl	43456 <nvs_ate_valid>
   28c12:	2800      	cmp	r0, #0
   28c14:	d0f3      	beq.n	28bfe <nvs_write+0x62>
			if (wlk_ate.len == 0U) {
   28c16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   28c1a:	b186      	cbz	r6, 28c3e <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   28c1c:	429e      	cmp	r6, r3
   28c1e:	d10f      	bne.n	28c40 <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
   28c20:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   28c24:	ea4f 411b 	mov.w	r1, fp, lsr #16
   28c28:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   28c2a:	4401      	add	r1, r0
   28c2c:	4633      	mov	r3, r6
   28c2e:	4642      	mov	r2, r8
   28c30:	4620      	mov	r0, r4
   28c32:	f01a fb89 	bl	43348 <nvs_flash_block_cmp>
			if (rc <= 0) {
   28c36:	2800      	cmp	r0, #0
   28c38:	dc02      	bgt.n	28c40 <nvs_write+0xa4>
   28c3a:	4605      	mov	r5, r0
   28c3c:	e036      	b.n	28cac <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
   28c3e:	b3ab      	cbz	r3, 28cac <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   28c40:	2f00      	cmp	r7, #0
   28c42:	d137      	bne.n	28cb4 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   28c44:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   28c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28c50:	4650      	mov	r0, sl
   28c52:	f018 fd75 	bl	41740 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   28c56:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 28d24 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   28c5a:	89e3      	ldrh	r3, [r4, #14]
   28c5c:	429d      	cmp	r5, r3
   28c5e:	d057      	beq.n	28d10 <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   28c60:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28c64:	18f9      	adds	r1, r7, r3
   28c66:	428a      	cmp	r2, r1
   28c68:	d327      	bcc.n	28cba <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28c6a:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   28c6e:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   28c70:	23ff      	movs	r3, #255	; 0xff
   28c72:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   28c76:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   28c7a:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   28c7e:	f01a fbcc 	bl	4341a <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   28c82:	4632      	mov	r2, r6
   28c84:	4641      	mov	r1, r8
   28c86:	4620      	mov	r0, r4
   28c88:	f01a fca1 	bl	435ce <nvs_flash_data_wrt>
	if (rc) {
   28c8c:	4603      	mov	r3, r0
   28c8e:	b938      	cbnz	r0, 28ca0 <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
   28c90:	a906      	add	r1, sp, #24
   28c92:	4620      	mov	r0, r4
   28c94:	f01a fcae 	bl	435f4 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   28c98:	2800      	cmp	r0, #0
   28c9a:	bf14      	ite	ne
   28c9c:	4603      	movne	r3, r0
   28c9e:	4633      	moveq	r3, r6
   28ca0:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   28ca2:	4650      	mov	r0, sl
   28ca4:	f018 fdc4 	bl	41830 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   28ca8:	9b01      	ldr	r3, [sp, #4]
   28caa:	461d      	mov	r5, r3
}
   28cac:	4628      	mov	r0, r5
   28cae:	b009      	add	sp, #36	; 0x24
   28cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   28cb4:	4457      	add	r7, sl
   28cb6:	b2bf      	uxth	r7, r7
   28cb8:	e7c4      	b.n	28c44 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28cba:	2108      	movs	r1, #8
   28cbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28cbe:	f01a fbc0 	bl	43442 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   28cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28cc6:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   28cca:	2300      	movs	r3, #0
   28ccc:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   28cd0:	1813      	adds	r3, r2, r0
   28cd2:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   28cd6:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   28cd8:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   28cdc:	441a      	add	r2, r3
   28cde:	1a12      	subs	r2, r2, r0
   28ce0:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   28ce2:	a806      	add	r0, sp, #24
   28ce4:	f01a fb99 	bl	4341a <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   28ce8:	a906      	add	r1, sp, #24
   28cea:	4620      	mov	r0, r4
   28cec:	f01a fc82 	bl	435f4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   28cf0:	89e0      	ldrh	r0, [r4, #14]
   28cf2:	1d21      	adds	r1, r4, #4
   28cf4:	f01a fb9a 	bl	4342c <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   28cf8:	6863      	ldr	r3, [r4, #4]
   28cfa:	ea03 030b 	and.w	r3, r3, fp
   28cfe:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   28d00:	4620      	mov	r0, r4
   28d02:	f01a fc9d 	bl	43640 <nvs_gc>
		if (rc) {
   28d06:	4603      	mov	r3, r0
   28d08:	2800      	cmp	r0, #0
   28d0a:	d1c9      	bne.n	28ca0 <nvs_write+0x104>
		gc_count++;
   28d0c:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   28d0e:	e7a4      	b.n	28c5a <nvs_write+0xbe>
			rc = -ENOSPC;
   28d10:	f06f 031b 	mvn.w	r3, #27
   28d14:	e7c4      	b.n	28ca0 <nvs_write+0x104>
		return -EACCES;
   28d16:	f06f 050c 	mvn.w	r5, #12
   28d1a:	e7c7      	b.n	28cac <nvs_write+0x110>
		return -EINVAL;
   28d1c:	f06f 0515 	mvn.w	r5, #21
   28d20:	e7c4      	b.n	28cac <nvs_write+0x110>
   28d22:	bf00      	nop
   28d24:	ffff0000 	.word	0xffff0000

00028d28 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d28:	4b0c      	ldr	r3, [pc, #48]	; (28d5c <class_handler+0x34>)
{
   28d2a:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d2c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d2e:	4e0c      	ldr	r6, [pc, #48]	; (28d60 <class_handler+0x38>)
   28d30:	4b0c      	ldr	r3, [pc, #48]	; (28d64 <class_handler+0x3c>)
   28d32:	42b3      	cmp	r3, r6
   28d34:	d303      	bcc.n	28d3e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   28d36:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28d3a:	bcf0      	pop	{r4, r5, r6, r7}
   28d3c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   28d3e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d40:	42bd      	cmp	r5, r7
   28d42:	d309      	bcc.n	28d58 <class_handler+0x30>
		if (iface->class_handler &&
   28d44:	691c      	ldr	r4, [r3, #16]
   28d46:	b13c      	cbz	r4, 28d58 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28d48:	f895 c002 	ldrb.w	ip, [r5, #2]
   28d4c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   28d4e:	45ac      	cmp	ip, r5
   28d50:	d102      	bne.n	28d58 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   28d52:	4623      	mov	r3, r4
}
   28d54:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   28d56:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d58:	3324      	adds	r3, #36	; 0x24
   28d5a:	e7ea      	b.n	28d32 <class_handler+0xa>
   28d5c:	20001a0c 	.word	0x20001a0c
   28d60:	20000dd9 	.word	0x20000dd9
   28d64:	20000dd9 	.word	0x20000dd9

00028d68 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d6c:	4c13      	ldr	r4, [pc, #76]	; (28dbc <custom_handler+0x54>)
   28d6e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28dc0 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d72:	f8df 9050 	ldr.w	r9, [pc, #80]	; 28dc4 <custom_handler+0x5c>
{
   28d76:	4605      	mov	r5, r0
   28d78:	460e      	mov	r6, r1
   28d7a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d7c:	4544      	cmp	r4, r8
   28d7e:	d303      	bcc.n	28d88 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   28d80:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   28d88:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d8a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   28d8e:	429a      	cmp	r2, r3
   28d90:	d312      	bcc.n	28db8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   28d92:	69a3      	ldr	r3, [r4, #24]
   28d94:	b183      	cbz	r3, 28db8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28d96:	7890      	ldrb	r0, [r2, #2]
   28d98:	7929      	ldrb	r1, [r5, #4]
   28d9a:	4288      	cmp	r0, r1
   28d9c:	d105      	bne.n	28daa <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   28d9e:	463a      	mov	r2, r7
   28da0:	4631      	mov	r1, r6
   28da2:	4628      	mov	r0, r5
}
   28da4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   28da8:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   28daa:	7952      	ldrb	r2, [r2, #5]
   28dac:	2a01      	cmp	r2, #1
   28dae:	d103      	bne.n	28db8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   28db0:	463a      	mov	r2, r7
   28db2:	4631      	mov	r1, r6
   28db4:	4628      	mov	r0, r5
   28db6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28db8:	3424      	adds	r4, #36	; 0x24
   28dba:	e7df      	b.n	28d7c <custom_handler+0x14>
   28dbc:	20000dd9 	.word	0x20000dd9
   28dc0:	20000dd9 	.word	0x20000dd9
   28dc4:	20001a0c 	.word	0x20001a0c

00028dc8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28dcc:	4c0b      	ldr	r4, [pc, #44]	; (28dfc <vendor_handler+0x34>)
   28dce:	f8df 8030 	ldr.w	r8, [pc, #48]	; 28e00 <vendor_handler+0x38>
{
   28dd2:	4605      	mov	r5, r0
   28dd4:	460e      	mov	r6, r1
   28dd6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28dd8:	4544      	cmp	r4, r8
   28dda:	d302      	bcc.n	28de2 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   28ddc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28de0:	e009      	b.n	28df6 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   28de2:	6963      	ldr	r3, [r4, #20]
   28de4:	b90b      	cbnz	r3, 28dea <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28de6:	3424      	adds	r4, #36	; 0x24
   28de8:	e7f6      	b.n	28dd8 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   28dea:	463a      	mov	r2, r7
   28dec:	4631      	mov	r1, r6
   28dee:	4628      	mov	r0, r5
   28df0:	4798      	blx	r3
   28df2:	2800      	cmp	r0, #0
   28df4:	d1f7      	bne.n	28de6 <vendor_handler+0x1e>
}
   28df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28dfa:	bf00      	nop
   28dfc:	20000dd9 	.word	0x20000dd9
   28e00:	20000dd9 	.word	0x20000dd9

00028e04 <set_endpoint>:
{
   28e04:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   28e06:	7883      	ldrb	r3, [r0, #2]
   28e08:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   28e0c:	7903      	ldrb	r3, [r0, #4]
   28e0e:	7942      	ldrb	r2, [r0, #5]
   28e10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28e14:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28e18:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   28e1a:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28e1c:	f003 0303 	and.w	r3, r3, #3
   28e20:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   28e24:	f014 fe8e 	bl	3db44 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   28e28:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28e2c:	d004      	beq.n	28e38 <set_endpoint+0x34>
	} else if (ret) {
   28e2e:	b118      	cbz	r0, 28e38 <set_endpoint+0x34>
		return false;
   28e30:	2000      	movs	r0, #0
}
   28e32:	b003      	add	sp, #12
   28e34:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   28e38:	f89d 0000 	ldrb.w	r0, [sp]
   28e3c:	f014 ff08 	bl	3dc50 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   28e40:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28e44:	d001      	beq.n	28e4a <set_endpoint+0x46>
	} else if (ret) {
   28e46:	2800      	cmp	r0, #0
   28e48:	d1f2      	bne.n	28e30 <set_endpoint+0x2c>
	usb_dev.configured = true;
   28e4a:	4b02      	ldr	r3, [pc, #8]	; (28e54 <set_endpoint+0x50>)
   28e4c:	2001      	movs	r0, #1
   28e4e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   28e52:	e7ee      	b.n	28e32 <set_endpoint+0x2e>
   28e54:	20001a0c 	.word	0x20001a0c

00028e58 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   28e58:	4802      	ldr	r0, [pc, #8]	; (28e64 <usb_reset_alt_setting+0xc>)
   28e5a:	2208      	movs	r2, #8
   28e5c:	2100      	movs	r1, #0
   28e5e:	f01c b83a 	b.w	44ed6 <memset>
   28e62:	bf00      	nop
   28e64:	20001ac7 	.word	0x20001ac7

00028e68 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   28e68:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28e6a:	4b0b      	ldr	r3, [pc, #44]	; (28e98 <is_ep_valid.part.0+0x30>)
   28e6c:	4c0b      	ldr	r4, [pc, #44]	; (28e9c <is_ep_valid.part.0+0x34>)
   28e6e:	42a3      	cmp	r3, r4
   28e70:	d301      	bcc.n	28e76 <is_ep_valid.part.0+0xe>
	return false;
   28e72:	2000      	movs	r0, #0
}
   28e74:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   28e76:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28e78:	7f1e      	ldrb	r6, [r3, #28]
   28e7a:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   28e7c:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28e7e:	b2d5      	uxtb	r5, r2
   28e80:	42ae      	cmp	r6, r5
   28e82:	d801      	bhi.n	28e88 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28e84:	3324      	adds	r3, #36	; 0x24
   28e86:	e7f2      	b.n	28e6e <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   28e88:	3201      	adds	r2, #1
   28e8a:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   28e8e:	4285      	cmp	r5, r0
   28e90:	d1f5      	bne.n	28e7e <is_ep_valid.part.0+0x16>
				return true;
   28e92:	2001      	movs	r0, #1
   28e94:	e7ee      	b.n	28e74 <is_ep_valid.part.0+0xc>
   28e96:	bf00      	nop
   28e98:	20000dd9 	.word	0x20000dd9
   28e9c:	20000dd9 	.word	0x20000dd9

00028ea0 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   28ea0:	4809      	ldr	r0, [pc, #36]	; (28ec8 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   28ea2:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   28ea4:	7803      	ldrb	r3, [r0, #0]
   28ea6:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   28eaa:	330a      	adds	r3, #10
   28eac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   28eb0:	b13b      	cbz	r3, 28ec2 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   28eb2:	f100 0208 	add.w	r2, r0, #8
   28eb6:	f100 0110 	add.w	r1, r0, #16
   28eba:	4798      	blx	r3
   28ebc:	43c0      	mvns	r0, r0
   28ebe:	0fc0      	lsrs	r0, r0, #31
}
   28ec0:	bd08      	pop	{r3, pc}
		return false;
   28ec2:	4618      	mov	r0, r3
   28ec4:	e7fc      	b.n	28ec0 <usb_handle_request.constprop.0+0x20>
   28ec6:	bf00      	nop
   28ec8:	20001a0c 	.word	0x20001a0c

00028ecc <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   28ecc:	2804      	cmp	r0, #4
{
   28ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28ed2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 28f5c <forward_status_cb+0x90>
   28ed6:	4604      	mov	r4, r0
   28ed8:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   28eda:	d10e      	bne.n	28efa <forward_status_cb+0x2e>
		usb_reset_alt_setting();
   28edc:	f7ff ffbc 	bl	28e58 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   28ee0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 28f60 <forward_status_cb+0x94>
   28ee4:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
   28ee8:	b15b      	cbz	r3, 28f02 <forward_status_cb+0x36>
			usb_cancel_transfers();
   28eea:	f000 fd13 	bl	29914 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   28eee:	2c04      	cmp	r4, #4
   28ef0:	d001      	beq.n	28ef6 <forward_status_cb+0x2a>
   28ef2:	2c01      	cmp	r4, #1
   28ef4:	d105      	bne.n	28f02 <forward_status_cb+0x36>
   28ef6:	4d1b      	ldr	r5, [pc, #108]	; (28f64 <forward_status_cb+0x98>)
   28ef8:	e016      	b.n	28f28 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   28efa:	2805      	cmp	r0, #5
   28efc:	d0f0      	beq.n	28ee0 <forward_status_cb+0x14>
   28efe:	2801      	cmp	r0, #1
   28f00:	d0ee      	beq.n	28ee0 <forward_status_cb+0x14>
   28f02:	4d18      	ldr	r5, [pc, #96]	; (28f64 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28f04:	4545      	cmp	r5, r8
   28f06:	d31e      	bcc.n	28f46 <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
   28f08:	4b15      	ldr	r3, [pc, #84]	; (28f60 <forward_status_cb+0x94>)
   28f0a:	6a1b      	ldr	r3, [r3, #32]
   28f0c:	b31b      	cbz	r3, 28f56 <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
   28f0e:	4631      	mov	r1, r6
   28f10:	4620      	mov	r0, r4
}
   28f12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   28f16:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
   28f18:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28f1c:	2700      	movs	r7, #0
   28f1e:	7f2a      	ldrb	r2, [r5, #28]
   28f20:	b2fb      	uxtb	r3, r7
   28f22:	429a      	cmp	r2, r3
   28f24:	d803      	bhi.n	28f2e <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28f26:	3524      	adds	r5, #36	; 0x24
   28f28:	4545      	cmp	r5, r8
   28f2a:	d3f5      	bcc.n	28f18 <forward_status_cb+0x4c>
   28f2c:	e007      	b.n	28f3e <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
   28f2e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
   28f32:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   28f34:	7918      	ldrb	r0, [r3, #4]
   28f36:	f014 feb5 	bl	3dca4 <usb_dc_ep_disable>
			if (ret < 0) {
   28f3a:	2800      	cmp	r0, #0
   28f3c:	daef      	bge.n	28f1e <forward_status_cb+0x52>
				usb_dev.configured = false;
   28f3e:	2300      	movs	r3, #0
   28f40:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
   28f44:	e7dd      	b.n	28f02 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
   28f46:	68eb      	ldr	r3, [r5, #12]
   28f48:	b11b      	cbz	r3, 28f52 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
   28f4a:	4632      	mov	r2, r6
   28f4c:	4621      	mov	r1, r4
   28f4e:	4628      	mov	r0, r5
   28f50:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28f52:	3524      	adds	r5, #36	; 0x24
   28f54:	e7d6      	b.n	28f04 <forward_status_cb+0x38>
}
   28f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28f5a:	bf00      	nop
   28f5c:	20000dd9 	.word	0x20000dd9
   28f60:	20001a0c 	.word	0x20001a0c
   28f64:	20000dd9 	.word	0x20000dd9

00028f68 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   28f6a:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   28f6c:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28f6e:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   28f70:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   28f74:	d007      	beq.n	28f86 <usb_halt_endpoint_req.isra.0+0x1e>
   28f76:	4620      	mov	r0, r4
   28f78:	f7ff ff76 	bl	28e68 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   28f7c:	b188      	cbz	r0, 28fa2 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
   28f7e:	4b0f      	ldr	r3, [pc, #60]	; (28fbc <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28f80:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   28f84:	b168      	cbz	r0, 28fa2 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
   28f86:	4e0d      	ldr	r6, [pc, #52]	; (28fbc <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
   28f88:	4620      	mov	r0, r4
		if (halt) {
   28f8a:	b165      	cbz	r5, 28fa6 <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
   28f8c:	f014 fdfc 	bl	3db88 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   28f90:	69f3      	ldr	r3, [r6, #28]
   28f92:	b90b      	cbnz	r3, 28f98 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
   28f94:	2001      	movs	r0, #1
   28f96:	e004      	b.n	28fa2 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   28f98:	2008      	movs	r0, #8
   28f9a:	f10d 0107 	add.w	r1, sp, #7
   28f9e:	4798      	blx	r3
		return true;
   28fa0:	4628      	mov	r0, r5
}
   28fa2:	b002      	add	sp, #8
   28fa4:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   28fa6:	f014 fe17 	bl	3dbd8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   28faa:	69f3      	ldr	r3, [r6, #28]
   28fac:	2b00      	cmp	r3, #0
   28fae:	d0f1      	beq.n	28f94 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28fb0:	f10d 0107 	add.w	r1, sp, #7
   28fb4:	2009      	movs	r0, #9
   28fb6:	4798      	blx	r3
   28fb8:	e7ec      	b.n	28f94 <usb_halt_endpoint_req.isra.0+0x2c>
   28fba:	bf00      	nop
   28fbc:	20001a0c 	.word	0x20001a0c

00028fc0 <usb_handle_standard_request>:
{
   28fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   28fc4:	4ea8      	ldr	r6, [pc, #672]	; (29268 <usb_handle_standard_request+0x2a8>)
   28fc6:	69b3      	ldr	r3, [r6, #24]
{
   28fc8:	4605      	mov	r5, r0
   28fca:	460f      	mov	r7, r1
   28fcc:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
   28fce:	b963      	cbnz	r3, 28fea <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
   28fd0:	7828      	ldrb	r0, [r5, #0]
   28fd2:	f000 001f 	and.w	r0, r0, #31
   28fd6:	2801      	cmp	r0, #1
   28fd8:	f000 80a6 	beq.w	29128 <usb_handle_standard_request+0x168>
   28fdc:	2802      	cmp	r0, #2
   28fde:	f000 810e 	beq.w	291fe <usb_handle_standard_request+0x23e>
   28fe2:	b138      	cbz	r0, 28ff4 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
   28fe4:	f06f 0015 	mvn.w	r0, #21
   28fe8:	e095      	b.n	29116 <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   28fea:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   28fec:	2800      	cmp	r0, #0
   28fee:	d1ef      	bne.n	28fd0 <usb_handle_standard_request+0x10>
	int rc = 0;
   28ff0:	2000      	movs	r0, #0
   28ff2:	e090      	b.n	29116 <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
   28ff4:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   28ff8:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28ffa:	2a00      	cmp	r2, #0
   28ffc:	da31      	bge.n	29062 <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
   28ffe:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
   29000:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
   29004:	d010      	beq.n	29028 <usb_handle_standard_request+0x68>
   29006:	2b08      	cmp	r3, #8
   29008:	d025      	beq.n	29056 <usb_handle_standard_request+0x96>
   2900a:	2b00      	cmp	r3, #0
   2900c:	d1ea      	bne.n	28fe4 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2900e:	2101      	movs	r1, #1
	data[1] = 0U;
   29010:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   29012:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
   29014:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
   29018:	2900      	cmp	r1, #0
   2901a:	bf18      	it	ne
   2901c:	2302      	movne	r3, #2
   2901e:	f043 0301 	orr.w	r3, r3, #1
   29022:	7013      	strb	r3, [r2, #0]
		*len = 2;
   29024:	2302      	movs	r3, #2
   29026:	e01a      	b.n	2905e <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
   29028:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2902a:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2902c:	1f11      	subs	r1, r2, #4
   2902e:	2901      	cmp	r1, #1
   29030:	d9d8      	bls.n	28fe4 <usb_handle_standard_request+0x24>
   29032:	2a07      	cmp	r2, #7
   29034:	d8d6      	bhi.n	28fe4 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   29036:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
   29038:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
   2903a:	781c      	ldrb	r4, [r3, #0]
   2903c:	2c00      	cmp	r4, #0
   2903e:	d0d1      	beq.n	28fe4 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
   29040:	785d      	ldrb	r5, [r3, #1]
   29042:	4295      	cmp	r5, r2
   29044:	d103      	bne.n	2904e <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
   29046:	4281      	cmp	r1, r0
   29048:	f000 8112 	beq.w	29270 <usb_handle_standard_request+0x2b0>
			cur_index++;
   2904c:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   2904e:	4423      	add	r3, r4
   29050:	e7f3      	b.n	2903a <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
   29052:	781b      	ldrb	r3, [r3, #0]
   29054:	e112      	b.n	2927c <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
   29056:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2905a:	7013      	strb	r3, [r2, #0]
			*len = 1;
   2905c:	2301      	movs	r3, #1
		*len = 2;
   2905e:	603b      	str	r3, [r7, #0]
		return true;
   29060:	e059      	b.n	29116 <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
   29062:	3b01      	subs	r3, #1
   29064:	2b08      	cmp	r3, #8
   29066:	d8bd      	bhi.n	28fe4 <usb_handle_standard_request+0x24>
   29068:	a201      	add	r2, pc, #4	; (adr r2, 29070 <usb_handle_standard_request+0xb0>)
   2906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2906e:	bf00      	nop
   29070:	00029109 	.word	0x00029109
   29074:	00028fe5 	.word	0x00028fe5
   29078:	0002911b 	.word	0x0002911b
   2907c:	00028fe5 	.word	0x00028fe5
   29080:	00029095 	.word	0x00029095
   29084:	00028fe5 	.word	0x00028fe5
   29088:	00028fe5 	.word	0x00028fe5
   2908c:	00028fe5 	.word	0x00028fe5
   29090:	000290a1 	.word	0x000290a1
			return !usb_dc_set_address(setup->wValue);
   29094:	78a8      	ldrb	r0, [r5, #2]
   29096:	f014 fd43 	bl	3db20 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2909a:	2800      	cmp	r0, #0
   2909c:	d0a8      	beq.n	28ff0 <usb_handle_standard_request+0x30>
   2909e:	e7a1      	b.n	28fe4 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
   290a0:	886c      	ldrh	r4, [r5, #2]
   290a2:	b144      	cbz	r4, 290b6 <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
   290a4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   290a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
   290aa:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   290ac:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
   290ae:	783c      	ldrb	r4, [r7, #0]
   290b0:	b96c      	cbnz	r4, 290ce <usb_handle_standard_request+0x10e>
	if (found) {
   290b2:	2800      	cmp	r0, #0
   290b4:	d096      	beq.n	28fe4 <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
   290b6:	f7ff fecf 	bl	28e58 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   290ba:	886b      	ldrh	r3, [r5, #2]
   290bc:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   290c0:	69f3      	ldr	r3, [r6, #28]
   290c2:	2b00      	cmp	r3, #0
   290c4:	d094      	beq.n	28ff0 <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   290c6:	4969      	ldr	r1, [pc, #420]	; (2926c <usb_handle_standard_request+0x2ac>)
   290c8:	2003      	movs	r0, #3
   290ca:	4798      	blx	r3
   290cc:	e790      	b.n	28ff0 <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
   290ce:	787b      	ldrb	r3, [r7, #1]
   290d0:	2b04      	cmp	r3, #4
   290d2:	d00c      	beq.n	290ee <usb_handle_standard_request+0x12e>
   290d4:	2b05      	cmp	r3, #5
   290d6:	d00d      	beq.n	290f4 <usb_handle_standard_request+0x134>
   290d8:	2b02      	cmp	r3, #2
   290da:	d105      	bne.n	290e8 <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
   290dc:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
   290e0:	886a      	ldrh	r2, [r5, #2]
				found = true;
   290e2:	4542      	cmp	r2, r8
   290e4:	bf08      	it	eq
   290e6:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   290e8:	783b      	ldrb	r3, [r7, #0]
   290ea:	441f      	add	r7, r3
   290ec:	e7df      	b.n	290ae <usb_handle_standard_request+0xee>
			cur_alt_setting =
   290ee:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
   290f2:	e7f9      	b.n	290e8 <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
   290f4:	886b      	ldrh	r3, [r5, #2]
   290f6:	4543      	cmp	r3, r8
   290f8:	d1f6      	bne.n	290e8 <usb_handle_standard_request+0x128>
   290fa:	f1b9 0f00 	cmp.w	r9, #0
   290fe:	d1f3      	bne.n	290e8 <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   29100:	4638      	mov	r0, r7
   29102:	f7ff fe7f 	bl	28e04 <set_endpoint>
			break;
   29106:	e7ef      	b.n	290e8 <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   29108:	886b      	ldrh	r3, [r5, #2]
   2910a:	2b01      	cmp	r3, #1
   2910c:	f47f af6a 	bne.w	28fe4 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
   29110:	2000      	movs	r0, #0
   29112:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
   29116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2911a:	886b      	ldrh	r3, [r5, #2]
   2911c:	2b01      	cmp	r3, #1
   2911e:	f47f af61 	bne.w	28fe4 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
   29122:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   29126:	e763      	b.n	28ff0 <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
   29128:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2912c:	2b00      	cmp	r3, #0
   2912e:	f43f af59 	beq.w	28fe4 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   29132:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   29134:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   29138:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2913a:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
   2913c:	781a      	ldrb	r2, [r3, #0]
   2913e:	2a00      	cmp	r2, #0
   29140:	f43f af50 	beq.w	28fe4 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   29144:	7859      	ldrb	r1, [r3, #1]
   29146:	2902      	cmp	r1, #2
   29148:	d104      	bne.n	29154 <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
   2914a:	f893 e004 	ldrb.w	lr, [r3, #4]
   2914e:	4586      	cmp	lr, r0
   29150:	f200 8096 	bhi.w	29280 <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
   29154:	4413      	add	r3, r2
   29156:	e7f1      	b.n	2913c <usb_handle_standard_request+0x17c>
			data[0] = 0U;
   29158:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
   2915a:	7050      	strb	r0, [r2, #1]
			*len = 2;
   2915c:	6039      	str	r1, [r7, #0]
			return true;
   2915e:	e7da      	b.n	29116 <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
   29160:	440c      	add	r4, r1
   29162:	e09b      	b.n	2929c <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   29164:	280b      	cmp	r0, #11
   29166:	f47f af3d 	bne.w	28fe4 <usb_handle_standard_request+0x24>
	bool ret = false;
   2916a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   2916c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   29170:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
   29172:	46b9      	mov	r9, r7
   29174:	e006      	b.n	29184 <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
   29176:	7863      	ldrb	r3, [r4, #1]
   29178:	2b04      	cmp	r3, #4
   2917a:	d00f      	beq.n	2919c <usb_handle_standard_request+0x1dc>
   2917c:	2b05      	cmp	r3, #5
   2917e:	d022      	beq.n	291c6 <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
   29180:	7823      	ldrb	r3, [r4, #0]
   29182:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   29184:	7823      	ldrb	r3, [r4, #0]
   29186:	2b00      	cmp	r3, #0
   29188:	d1f5      	bne.n	29176 <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
   2918a:	69f3      	ldr	r3, [r6, #28]
   2918c:	b113      	cbz	r3, 29194 <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   2918e:	4649      	mov	r1, r9
   29190:	2007      	movs	r0, #7
   29192:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   29194:	2f00      	cmp	r7, #0
   29196:	f47f af2b 	bne.w	28ff0 <usb_handle_standard_request+0x30>
   2919a:	e723      	b.n	28fe4 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2919c:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
   291a0:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   291a2:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
   291a6:	4592      	cmp	sl, r2
   291a8:	4653      	mov	r3, sl
   291aa:	d1e9      	bne.n	29180 <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
   291ac:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
   291ae:	4588      	cmp	r8, r1
   291b0:	fa1f f288 	uxth.w	r2, r8
   291b4:	d1e4      	bne.n	29180 <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   291b6:	2b07      	cmp	r3, #7
   291b8:	d81e      	bhi.n	291f8 <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
   291ba:	4433      	add	r3, r6
		return true;
   291bc:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
   291be:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
   291c2:	2701      	movs	r7, #1
   291c4:	e7dc      	b.n	29180 <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
   291c6:	88ab      	ldrh	r3, [r5, #4]
   291c8:	4553      	cmp	r3, sl
   291ca:	d1d9      	bne.n	29180 <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
   291cc:	78ab      	ldrb	r3, [r5, #2]
   291ce:	4543      	cmp	r3, r8
   291d0:	d00d      	beq.n	291ee <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
   291d2:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   291d4:	4638      	mov	r0, r7
   291d6:	f000 fb7f 	bl	298d8 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   291da:	4638      	mov	r0, r7
   291dc:	f014 fd62 	bl	3dca4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   291e0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   291e4:	d0ed      	beq.n	291c2 <usb_handle_standard_request+0x202>
	} else if (ret) {
   291e6:	fab0 f780 	clz	r7, r0
   291ea:	097f      	lsrs	r7, r7, #5
   291ec:	e7c8      	b.n	29180 <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
   291ee:	4620      	mov	r0, r4
   291f0:	f7ff fe08 	bl	28e04 <set_endpoint>
   291f4:	4607      	mov	r7, r0
   291f6:	e7c3      	b.n	29180 <usb_handle_standard_request+0x1c0>
   291f8:	46a1      	mov	r9, r4
	return false;
   291fa:	2700      	movs	r7, #0
   291fc:	e7c0      	b.n	29180 <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
   291fe:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   29202:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   29204:	2a00      	cmp	r2, #0
   29206:	da19      	bge.n	2923c <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   29208:	2b00      	cmp	r3, #0
   2920a:	f47f aeeb 	bne.w	28fe4 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
   2920e:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
   29210:	0663      	lsls	r3, r4, #25
   29212:	d00a      	beq.n	2922a <usb_handle_standard_request+0x26a>
   29214:	4620      	mov	r0, r4
   29216:	f7ff fe27 	bl	28e68 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2921a:	2800      	cmp	r0, #0
   2921c:	f43f aee2 	beq.w	28fe4 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   29220:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   29224:	2b00      	cmp	r3, #0
   29226:	f43f aedd 	beq.w	28fe4 <usb_handle_standard_request+0x24>
   2922a:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
   2922e:	4620      	mov	r0, r4
   29230:	4629      	mov	r1, r5
   29232:	f014 fcf1 	bl	3dc18 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   29236:	2000      	movs	r0, #0
   29238:	7068      	strb	r0, [r5, #1]
   2923a:	e6f3      	b.n	29024 <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
   2923c:	2b01      	cmp	r3, #1
   2923e:	d008      	beq.n	29252 <usb_handle_standard_request+0x292>
   29240:	2b03      	cmp	r3, #3
   29242:	f47f aecf 	bne.w	28fe4 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   29246:	886b      	ldrh	r3, [r5, #2]
   29248:	2b00      	cmp	r3, #0
   2924a:	f47f aecb 	bne.w	28fe4 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   2924e:	2101      	movs	r1, #1
   29250:	e003      	b.n	2925a <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   29252:	8869      	ldrh	r1, [r5, #2]
   29254:	2900      	cmp	r1, #0
   29256:	f47f aec5 	bne.w	28fe4 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   2925a:	88a8      	ldrh	r0, [r5, #4]
   2925c:	f7ff fe84 	bl	28f68 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   29260:	2800      	cmp	r0, #0
   29262:	f47f aec5 	bne.w	28ff0 <usb_handle_standard_request+0x30>
   29266:	e6bd      	b.n	28fe4 <usb_handle_standard_request+0x24>
   29268:	20001a0c 	.word	0x20001a0c
   2926c:	20001ac6 	.word	0x20001ac6
		if (type == USB_DESC_CONFIGURATION) {
   29270:	2a02      	cmp	r2, #2
		*data = p;
   29272:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
   29276:	f47f aeec 	bne.w	29052 <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
   2927a:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
   2927c:	603b      	str	r3, [r7, #0]
   2927e:	e6b7      	b.n	28ff0 <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
   29280:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
   29284:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   29286:	2b00      	cmp	r3, #0
   29288:	f6bf af6c 	bge.w	29164 <usb_handle_standard_request+0x1a4>
   2928c:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
   29290:	2800      	cmp	r0, #0
   29292:	f43f af61 	beq.w	29158 <usb_handle_standard_request+0x198>
   29296:	280a      	cmp	r0, #10
   29298:	f47f aea4 	bne.w	28fe4 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
   2929c:	7821      	ldrb	r1, [r4, #0]
   2929e:	2900      	cmp	r1, #0
   292a0:	f43f aea0 	beq.w	28fe4 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   292a4:	7863      	ldrb	r3, [r4, #1]
   292a6:	2b04      	cmp	r3, #4
   292a8:	f47f af5a 	bne.w	29160 <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   292ac:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
   292ae:	459c      	cmp	ip, r3
   292b0:	f47f af56 	bne.w	29160 <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   292b4:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   292b6:	bf96      	itet	ls
   292b8:	199b      	addls	r3, r3, r6
	return 0;
   292ba:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   292bc:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   292c0:	7013      	strb	r3, [r2, #0]
				*len = 1;
   292c2:	2301      	movs	r3, #1
   292c4:	e7da      	b.n	2927c <usb_handle_standard_request+0x2bc>
   292c6:	bf00      	nop

000292c8 <usb_data_to_host>:
{
   292c8:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   292ca:	4c13      	ldr	r4, [pc, #76]	; (29318 <usb_data_to_host+0x50>)
   292cc:	7d23      	ldrb	r3, [r4, #20]
   292ce:	b9cb      	cbnz	r3, 29304 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   292d0:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   292d2:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   292d4:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   292d6:	ab01      	add	r3, sp, #4
   292d8:	2080      	movs	r0, #128	; 0x80
   292da:	f01a fac8 	bl	4386e <usb_write>
		usb_dev.data_buf += chunk;
   292de:	9a01      	ldr	r2, [sp, #4]
   292e0:	68a3      	ldr	r3, [r4, #8]
   292e2:	4413      	add	r3, r2
   292e4:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   292e6:	68e3      	ldr	r3, [r4, #12]
   292e8:	1a9b      	subs	r3, r3, r2
   292ea:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   292ec:	b943      	cbnz	r3, 29300 <usb_data_to_host+0x38>
   292ee:	b13a      	cbz	r2, 29300 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   292f0:	6923      	ldr	r3, [r4, #16]
   292f2:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   292f4:	429a      	cmp	r2, r3
   292f6:	dd03      	ble.n	29300 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   292f8:	069b      	lsls	r3, r3, #26
   292fa:	d101      	bne.n	29300 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   292fc:	2301      	movs	r3, #1
   292fe:	7523      	strb	r3, [r4, #20]
}
   29300:	b002      	add	sp, #8
   29302:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   29304:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   29306:	461a      	mov	r2, r3
   29308:	4619      	mov	r1, r3
   2930a:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   2930c:	7523      	strb	r3, [r4, #20]
}
   2930e:	b002      	add	sp, #8
   29310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   29314:	f014 bcec 	b.w	3dcf0 <usb_dc_ep_write>
   29318:	20001a0c 	.word	0x20001a0c

0002931c <usb_handle_control_transfer>:
{
   2931c:	b530      	push	{r4, r5, lr}
   2931e:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   29320:	2300      	movs	r3, #0
{
   29322:	4602      	mov	r2, r0
   29324:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   29326:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   29328:	2800      	cmp	r0, #0
   2932a:	d15f      	bne.n	293ec <usb_handle_control_transfer+0xd0>
   2932c:	2900      	cmp	r1, #0
   2932e:	d13c      	bne.n	293aa <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   29330:	2208      	movs	r2, #8
   29332:	460b      	mov	r3, r1
   29334:	eb0d 0102 	add.w	r1, sp, r2
   29338:	f01e fdd6 	bl	47ee8 <usb_dc_ep_read>
   2933c:	2800      	cmp	r0, #0
   2933e:	da04      	bge.n	2934a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   29340:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   29342:	f014 fc21 	bl	3db88 <usb_dc_ep_set_stall>
}
   29346:	b005      	add	sp, #20
   29348:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2934a:	4c2d      	ldr	r4, [pc, #180]	; (29400 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
   2934c:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
   29350:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
   29354:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   29356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2935a:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2935c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
   29360:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   29362:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   29364:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   29368:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2936c:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
   2936e:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
   29370:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
   29374:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
   29376:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   29378:	d40a      	bmi.n	29390 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2937a:	2b80      	cmp	r3, #128	; 0x80
   2937c:	d904      	bls.n	29388 <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2937e:	2080      	movs	r0, #128	; 0x80
   29380:	f014 fc02 	bl	3db88 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   29384:	2000      	movs	r0, #0
   29386:	e7dc      	b.n	29342 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   29388:	b113      	cbz	r3, 29390 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
   2938a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   2938e:	e7da      	b.n	29346 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   29390:	f7ff fd86 	bl	28ea0 <usb_handle_request.constprop.0>
   29394:	2800      	cmp	r0, #0
   29396:	d0d3      	beq.n	29340 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   29398:	88e2      	ldrh	r2, [r4, #6]
   2939a:	6923      	ldr	r3, [r4, #16]
   2939c:	429a      	cmp	r2, r3
   2939e:	bfd4      	ite	le
   293a0:	60e2      	strle	r2, [r4, #12]
   293a2:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   293a4:	f7ff ff90 	bl	292c8 <usb_data_to_host>
   293a8:	e7cd      	b.n	29346 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   293aa:	4c15      	ldr	r4, [pc, #84]	; (29400 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   293ac:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   293b0:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   293b2:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   293b4:	dc04      	bgt.n	293c0 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   293b6:	f01e fd97 	bl	47ee8 <usb_dc_ep_read>
   293ba:	2800      	cmp	r0, #0
   293bc:	dac3      	bge.n	29346 <usb_handle_control_transfer+0x2a>
   293be:	e7bf      	b.n	29340 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   293c0:	462a      	mov	r2, r5
   293c2:	f01e fd91 	bl	47ee8 <usb_dc_ep_read>
   293c6:	2800      	cmp	r0, #0
   293c8:	dbd9      	blt.n	2937e <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
   293ca:	9901      	ldr	r1, [sp, #4]
   293cc:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   293ce:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
   293d0:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
   293d2:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
   293d4:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   293d6:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   293d8:	2b00      	cmp	r3, #0
   293da:	d1b4      	bne.n	29346 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   293dc:	f104 0338 	add.w	r3, r4, #56	; 0x38
   293e0:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   293e2:	f7ff fd5d 	bl	28ea0 <usb_handle_request.constprop.0>
   293e6:	2800      	cmp	r0, #0
   293e8:	d1dc      	bne.n	293a4 <usb_handle_control_transfer+0x88>
   293ea:	e7a9      	b.n	29340 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   293ec:	2880      	cmp	r0, #128	; 0x80
   293ee:	d1aa      	bne.n	29346 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   293f0:	4b03      	ldr	r3, [pc, #12]	; (29400 <usb_handle_control_transfer+0xe4>)
   293f2:	68da      	ldr	r2, [r3, #12]
   293f4:	2a00      	cmp	r2, #0
   293f6:	d1d5      	bne.n	293a4 <usb_handle_control_transfer+0x88>
   293f8:	7d1b      	ldrb	r3, [r3, #20]
   293fa:	2b00      	cmp	r3, #0
   293fc:	d1d2      	bne.n	293a4 <usb_handle_control_transfer+0x88>
   293fe:	e7a2      	b.n	29346 <usb_handle_control_transfer+0x2a>
   29400:	20001a0c 	.word	0x20001a0c

00029404 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   29404:	4b05      	ldr	r3, [pc, #20]	; (2941c <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   29406:	4a06      	ldr	r2, [pc, #24]	; (29420 <usb_set_config+0x1c>)
   29408:	629a      	str	r2, [r3, #40]	; 0x28
   2940a:	4a06      	ldr	r2, [pc, #24]	; (29424 <usb_set_config+0x20>)
   2940c:	62da      	str	r2, [r3, #44]	; 0x2c
   2940e:	4a06      	ldr	r2, [pc, #24]	; (29428 <usb_set_config+0x24>)
   29410:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   29412:	4a06      	ldr	r2, [pc, #24]	; (2942c <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   29414:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   29416:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   29418:	2000      	movs	r0, #0
   2941a:	4770      	bx	lr
   2941c:	20001a0c 	.word	0x20001a0c
   29420:	00028fc1 	.word	0x00028fc1
   29424:	00028d29 	.word	0x00028d29
   29428:	00028dc9 	.word	0x00028dc9
   2942c:	00028d69 	.word	0x00028d69

00029430 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   29430:	4b08      	ldr	r3, [pc, #32]	; (29454 <usb_device_init+0x24>)
{
   29432:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   29434:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   29438:	b934      	cbnz	r4, 29448 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   2943a:	f000 f9a3 	bl	29784 <usb_get_device_descriptor>
	if (!device_descriptor) {
   2943e:	b130      	cbz	r0, 2944e <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   29440:	f7ff ffe0 	bl	29404 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   29444:	4620      	mov	r0, r4
}
   29446:	bd10      	pop	{r4, pc}
		return -EALREADY;
   29448:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2944c:	e7fb      	b.n	29446 <usb_device_init+0x16>
		return -1;
   2944e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29452:	e7f8      	b.n	29446 <usb_device_init+0x16>
   29454:	20001a0c 	.word	0x20001a0c

00029458 <usb_enable>:
{
   29458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2945c:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2945e:	4d35      	ldr	r5, [pc, #212]	; (29534 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   29460:	4835      	ldr	r0, [pc, #212]	; (29538 <usb_enable+0xe0>)
   29462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2946a:	f018 f969 	bl	41740 <z_impl_k_mutex_lock>
   2946e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   29472:	2e00      	cmp	r6, #0
   29474:	d15b      	bne.n	2952e <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   29476:	4831      	ldr	r0, [pc, #196]	; (2953c <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   29478:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2947a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2947c:	f014 fd4e 	bl	3df1c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   29480:	f014 fb10 	bl	3daa4 <usb_dc_attach>
	if (ret < 0) {
   29484:	1e04      	subs	r4, r0, #0
   29486:	db36      	blt.n	294f6 <usb_enable+0x9e>
	ret = usb_transfer_init();
   29488:	f000 fa6c 	bl	29964 <usb_transfer_init>
	if (ret < 0) {
   2948c:	1e04      	subs	r4, r0, #0
   2948e:	db32      	blt.n	294f6 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   29490:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   29492:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   29494:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   29498:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2949c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   294a0:	f014 fb50 	bl	3db44 <usb_dc_ep_configure>
	if (ret < 0) {
   294a4:	1e04      	subs	r4, r0, #0
   294a6:	db26      	blt.n	294f6 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   294a8:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   294aa:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   294ac:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   294b0:	f014 fb48 	bl	3db44 <usb_dc_ep_configure>
	if (ret < 0) {
   294b4:	1e04      	subs	r4, r0, #0
   294b6:	db1e      	blt.n	294f6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   294b8:	4921      	ldr	r1, [pc, #132]	; (29540 <usb_enable+0xe8>)
   294ba:	4630      	mov	r0, r6
   294bc:	f014 fd1a 	bl	3def4 <usb_dc_ep_set_callback>
	if (ret < 0) {
   294c0:	1e04      	subs	r4, r0, #0
   294c2:	db18      	blt.n	294f6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   294c4:	491e      	ldr	r1, [pc, #120]	; (29540 <usb_enable+0xe8>)
   294c6:	4638      	mov	r0, r7
   294c8:	f014 fd14 	bl	3def4 <usb_dc_ep_set_callback>
	if (ret < 0) {
   294cc:	1e04      	subs	r4, r0, #0
   294ce:	db12      	blt.n	294f6 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   294d0:	4c1c      	ldr	r4, [pc, #112]	; (29544 <usb_enable+0xec>)
   294d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 29548 <usb_enable+0xf0>
   294d6:	4544      	cmp	r4, r8
   294d8:	d314      	bcc.n	29504 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   294da:	2000      	movs	r0, #0
   294dc:	f014 fbb8 	bl	3dc50 <usb_dc_ep_enable>
	if (ret < 0) {
   294e0:	1e04      	subs	r4, r0, #0
   294e2:	db08      	blt.n	294f6 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   294e4:	2080      	movs	r0, #128	; 0x80
   294e6:	f014 fbb3 	bl	3dc50 <usb_dc_ep_enable>
	if (ret < 0) {
   294ea:	1e04      	subs	r4, r0, #0
   294ec:	db03      	blt.n	294f6 <usb_enable+0x9e>
	usb_dev.enabled = true;
   294ee:	2301      	movs	r3, #1
   294f0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   294f4:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   294f6:	4810      	ldr	r0, [pc, #64]	; (29538 <usb_enable+0xe0>)
   294f8:	f018 f99a 	bl	41830 <z_impl_k_mutex_unlock>
}
   294fc:	4620      	mov	r0, r4
   294fe:	b002      	add	sp, #8
   29500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   29504:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   29506:	2600      	movs	r6, #0
   29508:	7f22      	ldrb	r2, [r4, #28]
   2950a:	b2f3      	uxtb	r3, r6
   2950c:	429a      	cmp	r2, r3
   2950e:	d801      	bhi.n	29514 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   29510:	3424      	adds	r4, #36	; 0x24
   29512:	e7e0      	b.n	294d6 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   29514:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   29518:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2951c:	7910      	ldrb	r0, [r2, #4]
   2951e:	f014 fce9 	bl	3def4 <usb_dc_ep_set_callback>
   29522:	3601      	adds	r6, #1
   29524:	2800      	cmp	r0, #0
   29526:	d0ef      	beq.n	29508 <usb_enable+0xb0>
   29528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2952c:	e7e3      	b.n	294f6 <usb_enable+0x9e>
		ret = -EALREADY;
   2952e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   29532:	e7e0      	b.n	294f6 <usb_enable+0x9e>
   29534:	20001a0c 	.word	0x20001a0c
   29538:	20000b70 	.word	0x20000b70
   2953c:	00028ecd 	.word	0x00028ecd
   29540:	0002931d 	.word	0x0002931d
   29544:	20000dd9 	.word	0x20000dd9
   29548:	20000dd9 	.word	0x20000dd9

0002954c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2954c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2954e:	4b1f      	ldr	r3, [pc, #124]	; (295cc <usb_update_sn_string_descriptor+0x80>)
{
   29550:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   29552:	aa05      	add	r2, sp, #20
   29554:	f103 0510 	add.w	r5, r3, #16
   29558:	6818      	ldr	r0, [r3, #0]
   2955a:	6859      	ldr	r1, [r3, #4]
   2955c:	4614      	mov	r4, r2
   2955e:	c403      	stmia	r4!, {r0, r1}
   29560:	3308      	adds	r3, #8
   29562:	42ab      	cmp	r3, r5
   29564:	4622      	mov	r2, r4
   29566:	d1f7      	bne.n	29558 <usb_update_sn_string_descriptor+0xc>
   29568:	781b      	ldrb	r3, [r3, #0]
   2956a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2956c:	2210      	movs	r2, #16
   2956e:	2100      	movs	r1, #0
   29570:	a801      	add	r0, sp, #4
   29572:	f01b fcb0 	bl	44ed6 <memset>
	memset(sn, 0, sizeof(sn));
   29576:	2212      	movs	r2, #18
   29578:	2100      	movs	r1, #0
   2957a:	4815      	ldr	r0, [pc, #84]	; (295d0 <usb_update_sn_string_descriptor+0x84>)
   2957c:	f01b fcab 	bl	44ed6 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   29580:	2110      	movs	r1, #16
   29582:	a801      	add	r0, sp, #4
   29584:	f01e fdb9 	bl	480fa <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   29588:	2800      	cmp	r0, #0
   2958a:	dd1b      	ble.n	295c4 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2958c:	2808      	cmp	r0, #8
   2958e:	bfb8      	it	lt
   29590:	2008      	movlt	r0, #8
   29592:	3808      	subs	r0, #8
   29594:	ab01      	add	r3, sp, #4
   29596:	4a0e      	ldr	r2, [pc, #56]	; (295d0 <usb_update_sn_string_descriptor+0x84>)
   29598:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2959a:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2959c:	f810 3b01 	ldrb.w	r3, [r0], #1
   295a0:	ac0a      	add	r4, sp, #40	; 0x28
   295a2:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   295a6:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   295aa:	f814 4c14 	ldrb.w	r4, [r4, #-20]
   295ae:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   295b0:	ac0a      	add	r4, sp, #40	; 0x28
   295b2:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
   295b4:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   295b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   295ba:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
   295bc:	2908      	cmp	r1, #8
   295be:	f102 0202 	add.w	r2, r2, #2
   295c2:	d1eb      	bne.n	2959c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   295c4:	4802      	ldr	r0, [pc, #8]	; (295d0 <usb_update_sn_string_descriptor+0x84>)
   295c6:	b00b      	add	sp, #44	; 0x2c
   295c8:	bd30      	pop	{r4, r5, pc}
   295ca:	bf00      	nop
   295cc:	0004b5a0 	.word	0x0004b5a0
   295d0:	20003bb2 	.word	0x20003bb2

000295d4 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   295d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295d8:	4604      	mov	r4, r0
   295da:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
   295dc:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   295de:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   295e2:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
   295e4:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   295e6:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
   295e8:	7820      	ldrb	r0, [r4, #0]
   295ea:	b920      	cbnz	r0, 295f6 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
   295ec:	4b61      	ldr	r3, [pc, #388]	; (29774 <usb_fix_descriptor+0x1a0>)
   295ee:	3402      	adds	r4, #2
   295f0:	429c      	cmp	r4, r3
   295f2:	d01f      	beq.n	29634 <usb_fix_descriptor+0x60>
   295f4:	e7f2      	b.n	295dc <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
   295f6:	7863      	ldrb	r3, [r4, #1]
   295f8:	2b05      	cmp	r3, #5
   295fa:	d805      	bhi.n	29608 <usb_fix_descriptor+0x34>
   295fc:	e8df f003 	tbb	[pc, r3]
   29600:	78030478 	.word	0x78030478
   29604:	2007      	.short	0x2007
   29606:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   29608:	7823      	ldrb	r3, [r4, #0]
   2960a:	441c      	add	r4, r3
   2960c:	e7ec      	b.n	295e8 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   2960e:	78e3      	ldrb	r3, [r4, #3]
   29610:	2b00      	cmp	r3, #0
   29612:	d1f9      	bne.n	29608 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
   29614:	78a3      	ldrb	r3, [r4, #2]
   29616:	b183      	cbz	r3, 2963a <usb_fix_descriptor+0x66>
			numof_ifaces++;
   29618:	f109 0901 	add.w	r9, r9, #1
   2961c:	fa5f f989 	uxtb.w	r9, r9
			break;
   29620:	e7f2      	b.n	29608 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
   29622:	6872      	ldr	r2, [r6, #4]
   29624:	4294      	cmp	r4, r2
   29626:	f000 809d 	beq.w	29764 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2962a:	3624      	adds	r6, #36	; 0x24
   2962c:	429e      	cmp	r6, r3
   2962e:	d3f8      	bcc.n	29622 <usb_fix_descriptor+0x4e>
					return -1;
   29630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
   29634:	b005      	add	sp, #20
   29636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2963a:	4e4f      	ldr	r6, [pc, #316]	; (29778 <usb_fix_descriptor+0x1a4>)
   2963c:	4b4f      	ldr	r3, [pc, #316]	; (2977c <usb_fix_descriptor+0x1a8>)
   2963e:	e7f5      	b.n	2962c <usb_fix_descriptor+0x58>
			if (!cfg_data) {
   29640:	2e00      	cmp	r6, #0
   29642:	d0f5      	beq.n	29630 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   29644:	2300      	movs	r3, #0
   29646:	2101      	movs	r1, #1
   29648:	7f32      	ldrb	r2, [r6, #28]
   2964a:	4293      	cmp	r3, r2
   2964c:	d2f0      	bcs.n	29630 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2964e:	6a32      	ldr	r2, [r6, #32]
   29650:	78a7      	ldrb	r7, [r4, #2]
   29652:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   29656:	7910      	ldrb	r0, [r2, #4]
   29658:	4287      	cmp	r7, r0
   2965a:	d001      	beq.n	29660 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2965c:	3301      	adds	r3, #1
   2965e:	e7f3      	b.n	29648 <usb_fix_descriptor+0x74>
   29660:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   29662:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29664:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   29668:	f000 0003 	and.w	r0, r0, #3
   2966c:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29670:	7920      	ldrb	r0, [r4, #4]
   29672:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   29676:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2967a:	f994 0002 	ldrsb.w	r0, [r4, #2]
   2967e:	2800      	cmp	r0, #0
   29680:	fa5f f887 	uxtb.w	r8, r7
   29684:	da28      	bge.n	296d8 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   29686:	f107 0010 	add.w	r0, r7, #16
   2968a:	fa01 f000 	lsl.w	r0, r1, r0
   2968e:	ea10 0f0b 	tst.w	r0, fp
   29692:	d129      	bne.n	296e8 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   29694:	f068 007f 	orn	r0, r8, #127	; 0x7f
   29698:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2969c:	a802      	add	r0, sp, #8
   2969e:	e9cd 3200 	strd	r3, r2, [sp]
   296a2:	f01e fc09 	bl	47eb8 <usb_dc_ep_check_cap>
   296a6:	e9dd 3200 	ldrd	r3, r2, [sp]
   296aa:	2101      	movs	r1, #1
   296ac:	b9e0      	cbnz	r0, 296e8 <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   296ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
   296b2:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   296b4:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   296b8:	bf1c      	itt	ne
   296ba:	f108 0810 	addne.w	r8, r8, #16
   296be:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   296c2:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   296c4:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
   296c6:	bf15      	itete	ne
   296c8:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
   296cc:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   296ce:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
   296d2:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
   296d6:	e797      	b.n	29608 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
   296d8:	fa01 f007 	lsl.w	r0, r1, r7
   296dc:	ea10 0f0b 	tst.w	r0, fp
   296e0:	d102      	bne.n	296e8 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
   296e2:	f88d 8008 	strb.w	r8, [sp, #8]
   296e6:	e7d9      	b.n	2969c <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   296e8:	3701      	adds	r7, #1
   296ea:	2f10      	cmp	r7, #16
   296ec:	d1b9      	bne.n	29662 <usb_fix_descriptor+0x8e>
   296ee:	e7b5      	b.n	2965c <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   296f0:	2d03      	cmp	r5, #3
   296f2:	d11d      	bne.n	29730 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   296f4:	f7ff ff2a 	bl	2954c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   296f8:	4607      	mov	r7, r0
   296fa:	b168      	cbz	r0, 29718 <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
   296fc:	f01b fbab 	bl	44e56 <strlen>
	if (!runtime_sn_len) {
   29700:	4680      	mov	r8, r0
   29702:	b148      	cbz	r0, 29718 <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   29704:	481e      	ldr	r0, [pc, #120]	; (29780 <usb_fix_descriptor+0x1ac>)
   29706:	f01b fba6 	bl	44e56 <strlen>
	if (runtime_sn_len != default_sn_len) {
   2970a:	4580      	cmp	r8, r0
   2970c:	d104      	bne.n	29718 <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2970e:	4642      	mov	r2, r8
   29710:	4639      	mov	r1, r7
   29712:	1ca0      	adds	r0, r4, #2
   29714:	f01b fbd4 	bl	44ec0 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   29718:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2971a:	f06f 0102 	mvn.w	r1, #2
   2971e:	18e2      	adds	r2, r4, r3
   29720:	1b09      	subs	r1, r1, r4
   29722:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   29726:	42d1      	cmn	r1, r2
   29728:	d513      	bpl.n	29752 <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
   2972a:	3501      	adds	r5, #1
   2972c:	b2ed      	uxtb	r5, r5
			break;
   2972e:	e76b      	b.n	29608 <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
   29730:	2d00      	cmp	r5, #0
   29732:	d1f1      	bne.n	29718 <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
   29734:	f1ba 0f00 	cmp.w	sl, #0
   29738:	f43f af7a 	beq.w	29630 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2973c:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   29740:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   29744:	f3c3 2307 	ubfx	r3, r3, #8, #8
   29748:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2974c:	f88a 9004 	strb.w	r9, [sl, #4]
   29750:	e7eb      	b.n	2972a <usb_fix_descriptor+0x156>
		buf[i] = 0U;
   29752:	f04f 0000 	mov.w	r0, #0
   29756:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2975a:	f813 0901 	ldrb.w	r0, [r3], #-1
   2975e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   29762:	e7e0      	b.n	29726 <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
   29764:	68b3      	ldr	r3, [r6, #8]
   29766:	2b00      	cmp	r3, #0
   29768:	f43f af56 	beq.w	29618 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
   2976c:	4649      	mov	r1, r9
   2976e:	4620      	mov	r0, r4
   29770:	4798      	blx	r3
   29772:	e751      	b.n	29618 <usb_fix_descriptor+0x44>
   29774:	20000dd9 	.word	0x20000dd9
   29778:	20000dd9 	.word	0x20000dd9
   2977c:	20000dd9 	.word	0x20000dd9
   29780:	0004b5a0 	.word	0x0004b5a0

00029784 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   29784:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   29786:	4804      	ldr	r0, [pc, #16]	; (29798 <usb_get_device_descriptor+0x14>)
   29788:	f7ff ff24 	bl	295d4 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
   2978c:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
   2978e:	4802      	ldr	r0, [pc, #8]	; (29798 <usb_get_device_descriptor+0x14>)
   29790:	bf18      	it	ne
   29792:	2000      	movne	r0, #0
   29794:	bd08      	pop	{r3, pc}
   29796:	bf00      	nop
   29798:	20000d7c 	.word	0x20000d7c

0002979c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2979c:	b510      	push	{r4, lr}
   2979e:	4b09      	ldr	r3, [pc, #36]	; (297c4 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   297a0:	2100      	movs	r1, #0
   297a2:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   297a4:	781c      	ldrb	r4, [r3, #0]
   297a6:	4284      	cmp	r4, r0
   297a8:	d105      	bne.n	297b6 <usb_ep_get_transfer+0x1a>
   297aa:	685c      	ldr	r4, [r3, #4]
   297ac:	b11c      	cbz	r4, 297b6 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   297ae:	2048      	movs	r0, #72	; 0x48
   297b0:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
   297b4:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   297b6:	3101      	adds	r1, #1
   297b8:	2904      	cmp	r1, #4
   297ba:	f103 0348 	add.w	r3, r3, #72	; 0x48
   297be:	d1f1      	bne.n	297a4 <usb_ep_get_transfer+0x8>
	return NULL;
   297c0:	2000      	movs	r0, #0
   297c2:	e7f7      	b.n	297b4 <usb_ep_get_transfer+0x18>
   297c4:	20001ad0 	.word	0x20001ad0

000297c8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   297c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   297cc:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   297d0:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   297d4:	3310      	adds	r3, #16
{
   297d6:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   297d8:	d110      	bne.n	297fc <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   297da:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   297dc:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   297e0:	0799      	lsls	r1, r3, #30
   297e2:	d53c      	bpl.n	2985e <usb_transfer_work+0x96>
		if (!trans->bsize) {
   297e4:	bb02      	cbnz	r2, 29828 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   297e6:	f013 0304 	ands.w	r3, r3, #4
   297ea:	d104      	bne.n	297f6 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   297ec:	461a      	mov	r2, r3
   297ee:	4619      	mov	r1, r3
   297f0:	4630      	mov	r0, r6
   297f2:	f01a f83c 	bl	4386e <usb_write>
			}
			trans->status = 0;
   297f6:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   297f8:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   297fc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   29800:	3310      	adds	r3, #16
   29802:	d00e      	beq.n	29822 <usb_transfer_work+0x5a>
   29804:	f854 5c20 	ldr.w	r5, [r4, #-32]
   29808:	b15d      	cbz	r5, 29822 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   2980a:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2980e:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   29812:	f01f fa59 	bl	48cc8 <k_is_in_isr>
   29816:	2800      	cmp	r0, #0
   29818:	d04c      	beq.n	298b4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2981a:	482e      	ldr	r0, [pc, #184]	; (298d4 <usb_transfer_work+0x10c>)
   2981c:	4621      	mov	r1, r4
   2981e:	f01f fbca 	bl	48fb6 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   29822:	b002      	add	sp, #8
   29824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   29828:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2982c:	ab01      	add	r3, sp, #4
   2982e:	4630      	mov	r0, r6
   29830:	f01a f81d 	bl	4386e <usb_write>
		if (ret) {
   29834:	b110      	cbz	r0, 2983c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   29836:	f06f 0315 	mvn.w	r3, #21
   2983a:	e7dd      	b.n	297f8 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   2983c:	9a01      	ldr	r2, [sp, #4]
   2983e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   29842:	4413      	add	r3, r2
   29844:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   29848:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2984c:	1a9b      	subs	r3, r3, r2
   2984e:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   29852:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29856:	4413      	add	r3, r2
   29858:	f844 3c24 	str.w	r3, [r4, #-36]
   2985c:	e7ce      	b.n	297fc <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2985e:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   29862:	ab01      	add	r3, sp, #4
   29864:	4630      	mov	r0, r6
   29866:	f014 fabb 	bl	3dde0 <usb_dc_ep_read_wait>
		if (ret) {
   2986a:	2800      	cmp	r0, #0
   2986c:	d1e3      	bne.n	29836 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2986e:	9d01      	ldr	r5, [sp, #4]
   29870:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   29874:	442b      	add	r3, r5
   29876:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2987a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2987e:	1b5b      	subs	r3, r3, r5
   29880:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   29884:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29888:	442b      	add	r3, r5
   2988a:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2988e:	2d00      	cmp	r5, #0
   29890:	d0b1      	beq.n	297f6 <usb_transfer_work+0x2e>
   29892:	4630      	mov	r0, r6
   29894:	f014 fb48 	bl	3df28 <usb_dc_ep_mps>
   29898:	fbb5 f3f0 	udiv	r3, r5, r0
   2989c:	fb03 5510 	mls	r5, r3, r0, r5
   298a0:	2d00      	cmp	r5, #0
   298a2:	d1a8      	bne.n	297f6 <usb_transfer_work+0x2e>
   298a4:	f854 3c28 	ldr.w	r3, [r4, #-40]
   298a8:	2b00      	cmp	r3, #0
   298aa:	d0a4      	beq.n	297f6 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   298ac:	4630      	mov	r0, r6
   298ae:	f014 fadf 	bl	3de70 <usb_dc_ep_read_continue>
   298b2:	e7a3      	b.n	297fc <usb_transfer_work+0x34>
		trans->cb = NULL;
   298b4:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   298b8:	f1a4 0018 	sub.w	r0, r4, #24
   298bc:	f018 f82e 	bl	4191c <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   298c0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   298c4:	338c      	adds	r3, #140	; 0x8c
   298c6:	d0ac      	beq.n	29822 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   298c8:	4642      	mov	r2, r8
   298ca:	4639      	mov	r1, r7
   298cc:	4630      	mov	r0, r6
   298ce:	47a8      	blx	r5
   298d0:	e7a7      	b.n	29822 <usb_transfer_work+0x5a>
   298d2:	bf00      	nop
   298d4:	20001948 	.word	0x20001948

000298d8 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   298d8:	b510      	push	{r4, lr}
   298da:	f04f 0320 	mov.w	r3, #32
   298de:	f3ef 8411 	mrs	r4, BASEPRI
   298e2:	f383 8812 	msr	BASEPRI_MAX, r3
   298e6:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   298ea:	f7ff ff57 	bl	2979c <usb_ep_get_transfer>
	if (!trans) {
   298ee:	b150      	cbz	r0, 29906 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   298f0:	6843      	ldr	r3, [r0, #4]
   298f2:	3310      	adds	r3, #16
   298f4:	d107      	bne.n	29906 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   298f6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   298fa:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   298fc:	f100 0134 	add.w	r1, r0, #52	; 0x34
   29900:	4803      	ldr	r0, [pc, #12]	; (29910 <usb_cancel_transfer+0x38>)
   29902:	f01f fb58 	bl	48fb6 <k_work_submit_to_queue>
	__asm__ volatile(
   29906:	f384 8811 	msr	BASEPRI, r4
   2990a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2990e:	bd10      	pop	{r4, pc}
   29910:	20001948 	.word	0x20001948

00029914 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   29914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29918:	4c10      	ldr	r4, [pc, #64]	; (2995c <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2991a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 29960 <usb_cancel_transfers+0x4c>
{
   2991e:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
   29920:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
   29924:	f04f 0320 	mov.w	r3, #32
   29928:	f3ef 8611 	mrs	r6, BASEPRI
   2992c:	f383 8812 	msr	BASEPRI_MAX, r3
   29930:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   29934:	6863      	ldr	r3, [r4, #4]
   29936:	3310      	adds	r3, #16
   29938:	d105      	bne.n	29946 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2993a:	f104 0134 	add.w	r1, r4, #52	; 0x34
   2993e:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
   29940:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29942:	f01f fb38 	bl	48fb6 <k_work_submit_to_queue>
	__asm__ volatile(
   29946:	f386 8811 	msr	BASEPRI, r6
   2994a:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2994e:	3d01      	subs	r5, #1
   29950:	f104 0448 	add.w	r4, r4, #72	; 0x48
   29954:	d1e6      	bne.n	29924 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   29956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2995a:	bf00      	nop
   2995c:	20001ad0 	.word	0x20001ad0
   29960:	20001948 	.word	0x20001948

00029964 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   29964:	b570      	push	{r4, r5, r6, lr}
   29966:	4c0a      	ldr	r4, [pc, #40]	; (29990 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29968:	4e0a      	ldr	r6, [pc, #40]	; (29994 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2996a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2996c:	4631      	mov	r1, r6
   2996e:	4620      	mov	r0, r4
   29970:	f01f fb18 	bl	48fa4 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   29974:	2201      	movs	r2, #1
   29976:	f1a4 0018 	sub.w	r0, r4, #24
   2997a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2997c:	3501      	adds	r5, #1
   2997e:	f01f fa91 	bl	48ea4 <z_impl_k_sem_init>
   29982:	2d04      	cmp	r5, #4
   29984:	f104 0448 	add.w	r4, r4, #72	; 0x48
   29988:	d1f0      	bne.n	2996c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2998a:	2000      	movs	r0, #0
   2998c:	bd70      	pop	{r4, r5, r6, pc}
   2998e:	bf00      	nop
   29990:	20001b04 	.word	0x20001b04
   29994:	000297c9 	.word	0x000297c9

00029998 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   29998:	4b0c      	ldr	r3, [pc, #48]	; (299cc <flash_area_open+0x34>)
   2999a:	681b      	ldr	r3, [r3, #0]
{
   2999c:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   2999e:	b173      	cbz	r3, 299be <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   299a0:	4a0b      	ldr	r2, [pc, #44]	; (299d0 <flash_area_open+0x38>)
   299a2:	6815      	ldr	r5, [r2, #0]
   299a4:	2200      	movs	r2, #0
   299a6:	42aa      	cmp	r2, r5
   299a8:	db02      	blt.n	299b0 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   299aa:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   299ae:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   299b0:	461c      	mov	r4, r3
   299b2:	f813 6b10 	ldrb.w	r6, [r3], #16
   299b6:	4286      	cmp	r6, r0
   299b8:	d004      	beq.n	299c4 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   299ba:	3201      	adds	r2, #1
   299bc:	e7f3      	b.n	299a6 <flash_area_open+0xe>
		return -EACCES;
   299be:	f06f 000c 	mvn.w	r0, #12
   299c2:	e7f4      	b.n	299ae <flash_area_open+0x16>
	*fap = area;
   299c4:	600c      	str	r4, [r1, #0]
	return 0;
   299c6:	2000      	movs	r0, #0
   299c8:	e7f1      	b.n	299ae <flash_area_open+0x16>
   299ca:	bf00      	nop
   299cc:	20000354 	.word	0x20000354
   299d0:	00049f60 	.word	0x00049f60

000299d4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   299d4:	b570      	push	{r4, r5, r6, lr}
   299d6:	b088      	sub	sp, #32
   299d8:	4605      	mov	r5, r0
   299da:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   299dc:	b2c0      	uxtb	r0, r0
   299de:	4669      	mov	r1, sp
{
   299e0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   299e2:	f7ff ffd9 	bl	29998 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   299e6:	2800      	cmp	r0, #0
   299e8:	db1f      	blt.n	29a2a <flash_area_get_sectors+0x56>
   299ea:	9b00      	ldr	r3, [sp, #0]
   299ec:	b1eb      	cbz	r3, 29a2a <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   299ee:	685a      	ldr	r2, [r3, #4]
   299f0:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   299f2:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   299f4:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   299f6:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   299f8:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   299fa:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   299fe:	2200      	movs	r2, #0
	cb_data->status = 0;
   29a00:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   29a04:	9205      	str	r2, [sp, #20]
   29a06:	f017 fbc1 	bl	4118c <z_impl_device_get_binding>
   29a0a:	4605      	mov	r5, r0
	flash_area_close(fa);
   29a0c:	9800      	ldr	r0, [sp, #0]
   29a0e:	f019 ff46 	bl	4389e <flash_area_close>
	if (flash_dev == NULL) {
   29a12:	b16d      	cbz	r5, 29a30 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   29a14:	4628      	mov	r0, r5
   29a16:	4908      	ldr	r1, [pc, #32]	; (29a38 <flash_area_get_sectors+0x64>)
   29a18:	aa01      	add	r2, sp, #4
   29a1a:	f01e fc0b 	bl	48234 <flash_page_foreach>
	if (cb_data->status == 0) {
   29a1e:	9807      	ldr	r0, [sp, #28]
   29a20:	b908      	cbnz	r0, 29a26 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   29a22:	9b05      	ldr	r3, [sp, #20]
   29a24:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   29a26:	b008      	add	sp, #32
   29a28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29a2a:	f06f 0015 	mvn.w	r0, #21
   29a2e:	e7fa      	b.n	29a26 <flash_area_get_sectors+0x52>
		return -ENODEV;
   29a30:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   29a34:	e7f7      	b.n	29a26 <flash_area_get_sectors+0x52>
   29a36:	bf00      	nop
   29a38:	000438a1 	.word	0x000438a1

00029a3c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   29a3c:	4b10      	ldr	r3, [pc, #64]	; (29a80 <settings_save_one+0x44>)
{
   29a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   29a42:	681c      	ldr	r4, [r3, #0]
{
   29a44:	4605      	mov	r5, r0
   29a46:	460e      	mov	r6, r1
   29a48:	4617      	mov	r7, r2
	if (!cs) {
   29a4a:	b1ac      	cbz	r4, 29a78 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   29a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29a54:	480b      	ldr	r0, [pc, #44]	; (29a84 <settings_save_one+0x48>)
   29a56:	f017 fe73 	bl	41740 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   29a5a:	6863      	ldr	r3, [r4, #4]
   29a5c:	4632      	mov	r2, r6
   29a5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   29a62:	4629      	mov	r1, r5
   29a64:	463b      	mov	r3, r7
   29a66:	4620      	mov	r0, r4
   29a68:	47c0      	blx	r8
   29a6a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29a6c:	4805      	ldr	r0, [pc, #20]	; (29a84 <settings_save_one+0x48>)
   29a6e:	f017 fedf 	bl	41830 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   29a72:	4620      	mov	r0, r4
   29a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   29a78:	f06f 0401 	mvn.w	r4, #1
   29a7c:	e7f9      	b.n	29a72 <settings_save_one+0x36>
   29a7e:	bf00      	nop
   29a80:	20001bf8 	.word	0x20001bf8
   29a84:	20000b5c 	.word	0x20000b5c

00029a88 <settings_src_register>:
	parent->next = child;
   29a88:	2300      	movs	r3, #0
   29a8a:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   29a8c:	4b04      	ldr	r3, [pc, #16]	; (29aa0 <settings_src_register+0x18>)
   29a8e:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   29a90:	b912      	cbnz	r2, 29a98 <settings_src_register+0x10>
	list->head = node;
   29a92:	e9c3 0000 	strd	r0, r0, [r3]
}
   29a96:	4770      	bx	lr
	parent->next = child;
   29a98:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29a9a:	6058      	str	r0, [r3, #4]
}
   29a9c:	4770      	bx	lr
   29a9e:	bf00      	nop
   29aa0:	20001bf0 	.word	0x20001bf0

00029aa4 <settings_dst_register>:
	settings_save_dst = cs;
   29aa4:	4b01      	ldr	r3, [pc, #4]	; (29aac <settings_dst_register+0x8>)
   29aa6:	6018      	str	r0, [r3, #0]
}
   29aa8:	4770      	bx	lr
   29aaa:	bf00      	nop
   29aac:	20001bf8 	.word	0x20001bf8

00029ab0 <settings_load_subtree>:
{
   29ab0:	b530      	push	{r4, r5, lr}
   29ab2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   29ab4:	2300      	movs	r3, #0
{
   29ab6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   29ab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   29abc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   29abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29ac2:	480c      	ldr	r0, [pc, #48]	; (29af4 <settings_load_subtree+0x44>)
   29ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29ac8:	f017 fe3a 	bl	41740 <z_impl_k_mutex_lock>
	return list->head;
   29acc:	4b0a      	ldr	r3, [pc, #40]	; (29af8 <settings_load_subtree+0x48>)
   29ace:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   29ad0:	b134      	cbz	r4, 29ae0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   29ad2:	6863      	ldr	r3, [r4, #4]
   29ad4:	4620      	mov	r0, r4
   29ad6:	681b      	ldr	r3, [r3, #0]
   29ad8:	a901      	add	r1, sp, #4
   29ada:	4798      	blx	r3
	return node->next;
   29adc:	6824      	ldr	r4, [r4, #0]
   29ade:	e7f7      	b.n	29ad0 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   29ae0:	4628      	mov	r0, r5
   29ae2:	f000 f8c1 	bl	29c68 <settings_commit_subtree>
   29ae6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29ae8:	4802      	ldr	r0, [pc, #8]	; (29af4 <settings_load_subtree+0x44>)
   29aea:	f017 fea1 	bl	41830 <z_impl_k_mutex_unlock>
}
   29aee:	4620      	mov	r0, r4
   29af0:	b005      	add	sp, #20
   29af2:	bd30      	pop	{r4, r5, pc}
   29af4:	20000b5c 	.word	0x20000b5c
   29af8:	20001bf0 	.word	0x20001bf0

00029afc <settings_load_subtree_direct>:
{
   29afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   29afe:	e9cd 0101 	strd	r0, r1, [sp, #4]
   29b02:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   29b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29b08:	480a      	ldr	r0, [pc, #40]	; (29b34 <settings_load_subtree_direct+0x38>)
   29b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29b0e:	f017 fe17 	bl	41740 <z_impl_k_mutex_lock>
	return list->head;
   29b12:	4b09      	ldr	r3, [pc, #36]	; (29b38 <settings_load_subtree_direct+0x3c>)
   29b14:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   29b16:	b134      	cbz	r4, 29b26 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   29b18:	6863      	ldr	r3, [r4, #4]
   29b1a:	4620      	mov	r0, r4
   29b1c:	681b      	ldr	r3, [r3, #0]
   29b1e:	a901      	add	r1, sp, #4
   29b20:	4798      	blx	r3
	return node->next;
   29b22:	6824      	ldr	r4, [r4, #0]
   29b24:	e7f7      	b.n	29b16 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   29b26:	4803      	ldr	r0, [pc, #12]	; (29b34 <settings_load_subtree_direct+0x38>)
   29b28:	f017 fe82 	bl	41830 <z_impl_k_mutex_unlock>
}
   29b2c:	2000      	movs	r0, #0
   29b2e:	b004      	add	sp, #16
   29b30:	bd10      	pop	{r4, pc}
   29b32:	bf00      	nop
   29b34:	20000b5c 	.word	0x20000b5c
   29b38:	20001bf0 	.word	0x20001bf0

00029b3c <settings_store_init>:
	list->head = NULL;
   29b3c:	4b02      	ldr	r3, [pc, #8]	; (29b48 <settings_store_init+0xc>)
   29b3e:	2200      	movs	r2, #0
	list->tail = NULL;
   29b40:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   29b44:	4770      	bx	lr
   29b46:	bf00      	nop
   29b48:	20001bf0 	.word	0x20001bf0

00029b4c <settings_init>:
	list->head = NULL;
   29b4c:	4b02      	ldr	r3, [pc, #8]	; (29b58 <settings_init+0xc>)
   29b4e:	2200      	movs	r2, #0
	list->tail = NULL;
   29b50:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   29b54:	f7ff bff2 	b.w	29b3c <settings_store_init>
   29b58:	20001bfc 	.word	0x20001bfc

00029b5c <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   29b5c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b5e:	4c1b      	ldr	r4, [pc, #108]	; (29bcc <settings_register+0x70>)
   29b60:	4e1b      	ldr	r6, [pc, #108]	; (29bd0 <settings_register+0x74>)
{
   29b62:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b64:	42b4      	cmp	r4, r6
   29b66:	d312      	bcc.n	29b8e <settings_register+0x32>
	return list->head;
   29b68:	4e1a      	ldr	r6, [pc, #104]	; (29bd4 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   29b6a:	481b      	ldr	r0, [pc, #108]	; (29bd8 <settings_register+0x7c>)
   29b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29b74:	f017 fde4 	bl	41740 <z_impl_k_mutex_lock>
   29b78:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29b7a:	b17c      	cbz	r4, 29b9c <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   29b7c:	6828      	ldr	r0, [r5, #0]
   29b7e:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29b82:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   29b84:	f01b f96e 	bl	44e64 <strcmp>
   29b88:	b1c8      	cbz	r0, 29bbe <settings_register+0x62>
	return node->next;
   29b8a:	6964      	ldr	r4, [r4, #20]
   29b8c:	e7f5      	b.n	29b7a <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   29b8e:	6821      	ldr	r1, [r4, #0]
   29b90:	6828      	ldr	r0, [r5, #0]
   29b92:	f01b f967 	bl	44e64 <strcmp>
   29b96:	b1a8      	cbz	r0, 29bc4 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b98:	3414      	adds	r4, #20
   29b9a:	e7e3      	b.n	29b64 <settings_register+0x8>
	return list->tail;
   29b9c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   29b9e:	2400      	movs	r4, #0
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   29ba0:	f105 0314 	add.w	r3, r5, #20
   29ba4:	616c      	str	r4, [r5, #20]
Z_GENLIST_APPEND(slist, snode)
   29ba6:	b93a      	cbnz	r2, 29bb8 <settings_register+0x5c>
	list->head = node;
   29ba8:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   29bac:	4614      	mov	r4, r2
	return z_impl_k_mutex_unlock(mutex);
   29bae:	480a      	ldr	r0, [pc, #40]	; (29bd8 <settings_register+0x7c>)
   29bb0:	f017 fe3e 	bl	41830 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   29bb4:	4620      	mov	r0, r4
   29bb6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   29bb8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   29bba:	6073      	str	r3, [r6, #4]
}
   29bbc:	e7f7      	b.n	29bae <settings_register+0x52>
			rc = -EEXIST;
   29bbe:	f06f 0410 	mvn.w	r4, #16
   29bc2:	e7f4      	b.n	29bae <settings_register+0x52>
			return -EEXIST;
   29bc4:	f06f 0410 	mvn.w	r4, #16
   29bc8:	e7f4      	b.n	29bb4 <settings_register+0x58>
   29bca:	bf00      	nop
   29bcc:	00049ab4 	.word	0x00049ab4
   29bd0:	00049b2c 	.word	0x00049b2c
   29bd4:	20001bfc 	.word	0x20001bfc
   29bd8:	20000b5c 	.word	0x20000b5c

00029bdc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   29bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29be0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   29be2:	460e      	mov	r6, r1
   29be4:	b109      	cbz	r1, 29bea <settings_parse_and_lookup+0xe>
		*next = NULL;
   29be6:	2300      	movs	r3, #0
   29be8:	600b      	str	r3, [r1, #0]
   29bea:	4c1c      	ldr	r4, [pc, #112]	; (29c5c <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29bec:	f8df 8070 	ldr.w	r8, [pc, #112]	; 29c60 <settings_parse_and_lookup+0x84>
   29bf0:	2500      	movs	r5, #0
   29bf2:	4544      	cmp	r4, r8
   29bf4:	d310      	bcc.n	29c18 <settings_parse_and_lookup+0x3c>
	return list->head;
   29bf6:	4b1b      	ldr	r3, [pc, #108]	; (29c64 <settings_parse_and_lookup+0x88>)
   29bf8:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29bfa:	b35c      	cbz	r4, 29c54 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29bfc:	aa01      	add	r2, sp, #4
   29bfe:	4638      	mov	r0, r7
   29c00:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29c04:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29c06:	f019 fe6d 	bl	438e4 <settings_name_steq>
   29c0a:	b308      	cbz	r0, 29c50 <settings_parse_and_lookup+0x74>
			continue;
		}
		if (!bestmatch) {
   29c0c:	b9cd      	cbnz	r5, 29c42 <settings_parse_and_lookup+0x66>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   29c0e:	b10e      	cbz	r6, 29c14 <settings_parse_and_lookup+0x38>
				*next = tmpnext;
   29c10:	9b01      	ldr	r3, [sp, #4]
   29c12:	6033      	str	r3, [r6, #0]
   29c14:	4625      	mov	r5, r4
   29c16:	e01b      	b.n	29c50 <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29c18:	6821      	ldr	r1, [r4, #0]
   29c1a:	aa01      	add	r2, sp, #4
   29c1c:	4638      	mov	r0, r7
   29c1e:	f019 fe61 	bl	438e4 <settings_name_steq>
   29c22:	b160      	cbz	r0, 29c3e <settings_parse_and_lookup+0x62>
		if (!bestmatch) {
   29c24:	b925      	cbnz	r5, 29c30 <settings_parse_and_lookup+0x54>
			if (next) {
   29c26:	b10e      	cbz	r6, 29c2c <settings_parse_and_lookup+0x50>
				*next = tmpnext;
   29c28:	9b01      	ldr	r3, [sp, #4]
   29c2a:	6033      	str	r3, [r6, #0]
   29c2c:	4625      	mov	r5, r4
   29c2e:	e006      	b.n	29c3e <settings_parse_and_lookup+0x62>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   29c30:	6829      	ldr	r1, [r5, #0]
   29c32:	6820      	ldr	r0, [r4, #0]
   29c34:	2200      	movs	r2, #0
   29c36:	f019 fe55 	bl	438e4 <settings_name_steq>
   29c3a:	2800      	cmp	r0, #0
   29c3c:	d1f3      	bne.n	29c26 <settings_parse_and_lookup+0x4a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c3e:	3414      	adds	r4, #20
   29c40:	e7d7      	b.n	29bf2 <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   29c42:	6829      	ldr	r1, [r5, #0]
   29c44:	6820      	ldr	r0, [r4, #0]
   29c46:	2200      	movs	r2, #0
   29c48:	f019 fe4c 	bl	438e4 <settings_name_steq>
   29c4c:	2800      	cmp	r0, #0
   29c4e:	d1de      	bne.n	29c0e <settings_parse_and_lookup+0x32>
	return node->next;
   29c50:	6964      	ldr	r4, [r4, #20]
   29c52:	e7d2      	b.n	29bfa <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   29c54:	4628      	mov	r0, r5
   29c56:	b002      	add	sp, #8
   29c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29c5c:	00049ab4 	.word	0x00049ab4
   29c60:	00049b2c 	.word	0x00049b2c
   29c64:	20001bfc 	.word	0x20001bfc

00029c68 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   29c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c6a:	4c18      	ldr	r4, [pc, #96]	; (29ccc <settings_commit_subtree+0x64>)
   29c6c:	4f18      	ldr	r7, [pc, #96]	; (29cd0 <settings_commit_subtree+0x68>)
{
   29c6e:	4606      	mov	r6, r0
	rc = 0;
   29c70:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c72:	42bc      	cmp	r4, r7
   29c74:	d308      	bcc.n	29c88 <settings_commit_subtree+0x20>
	return list->head;
   29c76:	4b17      	ldr	r3, [pc, #92]	; (29cd4 <settings_commit_subtree+0x6c>)
   29c78:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29c7a:	b324      	cbz	r4, 29cc6 <settings_commit_subtree+0x5e>
   29c7c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c7e:	b9ae      	cbnz	r6, 29cac <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   29c80:	68e3      	ldr	r3, [r4, #12]
   29c82:	b9db      	cbnz	r3, 29cbc <settings_commit_subtree+0x54>
	return node->next;
   29c84:	6964      	ldr	r4, [r4, #20]
   29c86:	e7f8      	b.n	29c7a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c88:	b91e      	cbnz	r6, 29c92 <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   29c8a:	68e3      	ldr	r3, [r4, #12]
   29c8c:	b94b      	cbnz	r3, 29ca2 <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c8e:	3414      	adds	r4, #20
   29c90:	e7ef      	b.n	29c72 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c92:	6820      	ldr	r0, [r4, #0]
   29c94:	2200      	movs	r2, #0
   29c96:	4631      	mov	r1, r6
   29c98:	f019 fe24 	bl	438e4 <settings_name_steq>
   29c9c:	2800      	cmp	r0, #0
   29c9e:	d1f4      	bne.n	29c8a <settings_commit_subtree+0x22>
   29ca0:	e7f5      	b.n	29c8e <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   29ca2:	4798      	blx	r3
				rc = rc2;
   29ca4:	2d00      	cmp	r5, #0
   29ca6:	bf08      	it	eq
   29ca8:	4605      	moveq	r5, r0
   29caa:	e7f0      	b.n	29c8e <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29cac:	6820      	ldr	r0, [r4, #0]
   29cae:	2200      	movs	r2, #0
   29cb0:	4631      	mov	r1, r6
   29cb2:	f019 fe17 	bl	438e4 <settings_name_steq>
   29cb6:	2800      	cmp	r0, #0
   29cb8:	d1e2      	bne.n	29c80 <settings_commit_subtree+0x18>
   29cba:	e7e3      	b.n	29c84 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   29cbc:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   29cbe:	2d00      	cmp	r5, #0
   29cc0:	bf08      	it	eq
   29cc2:	4605      	moveq	r5, r0
   29cc4:	e7de      	b.n	29c84 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   29cc6:	4628      	mov	r0, r5
   29cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29cca:	bf00      	nop
   29ccc:	00049ab4 	.word	0x00049ab4
   29cd0:	00049b2c 	.word	0x00049b2c
   29cd4:	20001bfc 	.word	0x20001bfc

00029cd8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   29cd8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   29cda:	4c06      	ldr	r4, [pc, #24]	; (29cf4 <settings_subsys_init+0x1c>)
   29cdc:	7823      	ldrb	r3, [r4, #0]
   29cde:	b93b      	cbnz	r3, 29cf0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   29ce0:	f7ff ff34 	bl	29b4c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   29ce4:	f000 f864 	bl	29db0 <settings_backend_init>

	if (!err) {
   29ce8:	b908      	cbnz	r0, 29cee <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   29cea:	2301      	movs	r3, #1
   29cec:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   29cee:	bd10      	pop	{r4, pc}
		return 0;
   29cf0:	2000      	movs	r0, #0
   29cf2:	e7fc      	b.n	29cee <settings_subsys_init+0x16>
   29cf4:	20003bc4 	.word	0x20003bc4

00029cf8 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   29cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   29cfc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   29cfe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 29dac <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   29d02:	3401      	adds	r4, #1
{
   29d04:	b098      	sub	sp, #96	; 0x60
   29d06:	4680      	mov	r8, r0
   29d08:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   29d0a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29d0c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   29d10:	1e65      	subs	r5, r4, #1
   29d12:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   29d14:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   29d18:	d045      	beq.n	29da6 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29d1a:	234a      	movs	r3, #74	; 0x4a
   29d1c:	aa05      	add	r2, sp, #20
   29d1e:	4629      	mov	r1, r5
   29d20:	4630      	mov	r0, r6
   29d22:	f019 fd9d 	bl	43860 <nvs_read>
   29d26:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   29d2a:	343f      	adds	r4, #63	; 0x3f
   29d2c:	b2a4      	uxth	r4, r4
   29d2e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29d30:	4621      	mov	r1, r4
   29d32:	2301      	movs	r3, #1
   29d34:	f10d 020b 	add.w	r2, sp, #11
   29d38:	4630      	mov	r0, r6
   29d3a:	f019 fd91 	bl	43860 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   29d3e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29d40:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   29d42:	dc03      	bgt.n	29d4c <settings_nvs_load+0x54>
   29d44:	2800      	cmp	r0, #0
   29d46:	dc03      	bgt.n	29d50 <settings_nvs_load+0x58>
{
   29d48:	462c      	mov	r4, r5
   29d4a:	e7e1      	b.n	29d10 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   29d4c:	2800      	cmp	r0, #0
   29d4e:	dc16      	bgt.n	29d7e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   29d50:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   29d54:	42ab      	cmp	r3, r5
   29d56:	d109      	bne.n	29d6c <settings_nvs_load+0x74>
				cf->last_name_id--;
   29d58:	4642      	mov	r2, r8
   29d5a:	1e6b      	subs	r3, r5, #1
   29d5c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   29d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29d64:	2302      	movs	r3, #2
   29d66:	4630      	mov	r0, r6
   29d68:	f7fe ff18 	bl	28b9c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   29d6c:	4629      	mov	r1, r5
   29d6e:	4630      	mov	r0, r6
   29d70:	f019 fd1b 	bl	437aa <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   29d74:	4621      	mov	r1, r4
   29d76:	4630      	mov	r0, r6
   29d78:	f019 fd17 	bl	437aa <nvs_delete>
			continue;
   29d7c:	e7e4      	b.n	29d48 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   29d7e:	ab18      	add	r3, sp, #96	; 0x60
   29d80:	441f      	add	r7, r3
   29d82:	2300      	movs	r3, #0
   29d84:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   29d88:	4652      	mov	r2, sl
   29d8a:	f8cd 9000 	str.w	r9, [sp]
   29d8e:	ab03      	add	r3, sp, #12
   29d90:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   29d92:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   29d94:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   29d98:	f019 fddd 	bl	43956 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   29d9c:	2800      	cmp	r0, #0
   29d9e:	d0d3      	beq.n	29d48 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   29da0:	b018      	add	sp, #96	; 0x60
   29da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29da6:	2000      	movs	r0, #0
	return ret;
   29da8:	e7fa      	b.n	29da0 <settings_nvs_load+0xa8>
   29daa:	bf00      	nop
   29dac:	000439bd 	.word	0x000439bd

00029db0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   29db0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   29db2:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   29db4:	4669      	mov	r1, sp
   29db6:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   29db8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   29dba:	f7ff fded 	bl	29998 <flash_area_open>
	if (rc) {
   29dbe:	4604      	mov	r4, r0
   29dc0:	2800      	cmp	r0, #0
   29dc2:	d136      	bne.n	29e32 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   29dc4:	aa02      	add	r2, sp, #8
   29dc6:	a901      	add	r1, sp, #4
   29dc8:	2002      	movs	r0, #2
   29dca:	f7ff fe03 	bl	299d4 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   29dce:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   29dd2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   29dd4:	d02d      	beq.n	29e32 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   29dd6:	b138      	cbz	r0, 29de8 <settings_backend_init+0x38>
   29dd8:	340c      	adds	r4, #12
   29dda:	d005      	beq.n	29de8 <settings_backend_init+0x38>
		k_panic();
   29ddc:	4040      	eors	r0, r0
   29dde:	f380 8811 	msr	BASEPRI, r0
   29de2:	f04f 0004 	mov.w	r0, #4
   29de6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   29de8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   29dea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   29dee:	d223      	bcs.n	29e38 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   29df0:	9a00      	ldr	r2, [sp, #0]
   29df2:	2300      	movs	r3, #0
   29df4:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   29df6:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   29df8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   29dfa:	4285      	cmp	r5, r0
   29dfc:	b29c      	uxth	r4, r3
   29dfe:	d303      	bcc.n	29e08 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   29e00:	3301      	adds	r3, #1
   29e02:	2b08      	cmp	r3, #8
   29e04:	d1f8      	bne.n	29df8 <settings_backend_init+0x48>
   29e06:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29e08:	4d0d      	ldr	r5, [pc, #52]	; (29e40 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   29e0a:	6853      	ldr	r3, [r2, #4]
   29e0c:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   29e0e:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   29e10:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   29e12:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29e14:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   29e16:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   29e18:	f019 fe67 	bl	43aea <settings_nvs_backend_init>
	if (rc) {
   29e1c:	4604      	mov	r4, r0
   29e1e:	b940      	cbnz	r0, 29e32 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29e20:	4e08      	ldr	r6, [pc, #32]	; (29e44 <settings_backend_init+0x94>)
   29e22:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   29e24:	4628      	mov	r0, r5
   29e26:	f7ff fe2f 	bl	29a88 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   29e2a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29e2c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   29e2e:	f7ff fe39 	bl	29aa4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   29e32:	4620      	mov	r0, r4
   29e34:	b004      	add	sp, #16
   29e36:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   29e38:	f06f 0420 	mvn.w	r4, #32
   29e3c:	e7f9      	b.n	29e32 <settings_backend_init+0x82>
   29e3e:	bf00      	nop
   29e40:	20001c04 	.word	0x20001c04
   29e44:	20000358 	.word	0x20000358

00029e48 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   29e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29e4c:	4605      	mov	r5, r0
	__asm__ volatile(
   29e4e:	f04f 0320 	mov.w	r3, #32
   29e52:	f3ef 8611 	mrs	r6, BASEPRI
   29e56:	f383 8812 	msr	BASEPRI_MAX, r3
   29e5a:	f3bf 8f6f 	isb	sy
	return list->head;
   29e5e:	4b0e      	ldr	r3, [pc, #56]	; (29e98 <pm_state_notify+0x50>)
   29e60:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   29e62:	b19c      	cbz	r4, 29e8c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29e64:	4f0d      	ldr	r7, [pc, #52]	; (29e9c <pm_state_notify+0x54>)
   29e66:	f8df 8038 	ldr.w	r8, [pc, #56]	; 29ea0 <pm_state_notify+0x58>
   29e6a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   29e6e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   29e72:	2d00      	cmp	r5, #0
   29e74:	bf08      	it	eq
   29e76:	4613      	moveq	r3, r2
		if (callback) {
   29e78:	b12b      	cbz	r3, 29e86 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29e7a:	f898 2014 	ldrb.w	r2, [r8, #20]
   29e7e:	fb09 f202 	mul.w	r2, r9, r2
   29e82:	5cb8      	ldrb	r0, [r7, r2]
   29e84:	4798      	blx	r3
	return node->next;
   29e86:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   29e88:	2c00      	cmp	r4, #0
   29e8a:	d1f0      	bne.n	29e6e <pm_state_notify+0x26>
	__asm__ volatile(
   29e8c:	f386 8811 	msr	BASEPRI, r6
   29e90:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   29e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29e98:	20001c44 	.word	0x20001c44
   29e9c:	20001c4c 	.word	0x20001c4c
   29ea0:	20003aec 	.word	0x20003aec

00029ea4 <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29ea4:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   29ea6:	2301      	movs	r3, #1
   29ea8:	f000 001f 	and.w	r0, r0, #31
   29eac:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29eb0:	4b07      	ldr	r3, [pc, #28]	; (29ed0 <atomic_clear_bit.constprop.0+0x2c>)
   29eb2:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29eb6:	43c0      	mvns	r0, r0
   29eb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   29ebc:	e853 2f00 	ldrex	r2, [r3]
   29ec0:	4002      	ands	r2, r0
   29ec2:	e843 2100 	strex	r1, r2, [r3]
   29ec6:	2900      	cmp	r1, #0
   29ec8:	d1f8      	bne.n	29ebc <atomic_clear_bit.constprop.0+0x18>
   29eca:	f3bf 8f5b 	dmb	ish
}
   29ece:	4770      	bx	lr
   29ed0:	20001c58 	.word	0x20001c58

00029ed4 <pm_system_resume>:

void pm_system_resume(void)
{
   29ed4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   29ed6:	4b1d      	ldr	r3, [pc, #116]	; (29f4c <pm_system_resume+0x78>)
   29ed8:	7d1c      	ldrb	r4, [r3, #20]
   29eda:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   29ede:	f004 031f 	and.w	r3, r4, #31
   29ee2:	2201      	movs	r2, #1
   29ee4:	409a      	lsls	r2, r3
   29ee6:	4b1a      	ldr	r3, [pc, #104]	; (29f50 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29ee8:	0961      	lsrs	r1, r4, #5
{
   29eea:	b085      	sub	sp, #20
   29eec:	43d0      	mvns	r0, r2
   29eee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   29ef2:	e853 1f00 	ldrex	r1, [r3]
   29ef6:	ea01 0500 	and.w	r5, r1, r0
   29efa:	e843 5c00 	strex	ip, r5, [r3]
   29efe:	f1bc 0f00 	cmp.w	ip, #0
   29f02:	d1f6      	bne.n	29ef2 <pm_system_resume+0x1e>
   29f04:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   29f08:	4211      	tst	r1, r2
   29f0a:	d017      	beq.n	29f3c <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
   29f0c:	4d11      	ldr	r5, [pc, #68]	; (29f54 <pm_system_resume+0x80>)
   29f0e:	220c      	movs	r2, #12
   29f10:	fb02 5204 	mla	r2, r2, r4, r5
   29f14:	ca07      	ldmia	r2, {r0, r1, r2}
   29f16:	ab01      	add	r3, sp, #4
   29f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   29f1c:	4a0e      	ldr	r2, [pc, #56]	; (29f58 <pm_system_resume+0x84>)
   29f1e:	b17a      	cbz	r2, 29f40 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   29f20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29f24:	f01b f800 	bl	44f28 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   29f28:	2000      	movs	r0, #0
   29f2a:	f7ff ff8d 	bl	29e48 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   29f2e:	230c      	movs	r3, #12
   29f30:	435c      	muls	r4, r3
   29f32:	192a      	adds	r2, r5, r4
   29f34:	2300      	movs	r3, #0
   29f36:	512b      	str	r3, [r5, r4]
   29f38:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   29f3c:	b005      	add	sp, #20
   29f3e:	bd30      	pop	{r4, r5, pc}
   29f40:	f382 8811 	msr	BASEPRI, r2
   29f44:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   29f48:	e7ee      	b.n	29f28 <pm_system_resume+0x54>
   29f4a:	bf00      	nop
   29f4c:	20003aec 	.word	0x20003aec
   29f50:	20001c5c 	.word	0x20001c5c
   29f54:	20001c4c 	.word	0x20001c4c
   29f58:	00044f29 	.word	0x00044f29

00029f5c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   29f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   29f60:	4b35      	ldr	r3, [pc, #212]	; (2a038 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29f62:	4a36      	ldr	r2, [pc, #216]	; (2a03c <pm_system_suspend+0xe0>)
   29f64:	7d1c      	ldrb	r4, [r3, #20]
   29f66:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29f6a:	0963      	lsrs	r3, r4, #5
   29f6c:	ea4f 0983 	mov.w	r9, r3, lsl #2
   29f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29f74:	4d32      	ldr	r5, [pc, #200]	; (2a040 <pm_system_suspend+0xe4>)
   29f76:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29f7a:	f004 081f 	and.w	r8, r4, #31
   29f7e:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   29f82:	f013 0f01 	tst.w	r3, #1
{
   29f86:	b085      	sub	sp, #20
   29f88:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   29f8a:	d10a      	bne.n	29fa2 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   29f8c:	4601      	mov	r1, r0
   29f8e:	4620      	mov	r0, r4
   29f90:	f000 f876 	bl	2a080 <pm_policy_next_state>
		if (info != NULL) {
   29f94:	b128      	cbz	r0, 29fa2 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   29f96:	c807      	ldmia	r0, {r0, r1, r2}
   29f98:	230c      	movs	r3, #12
   29f9a:	fb03 5304 	mla	r3, r3, r4, r5
   29f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   29fa2:	230c      	movs	r3, #12
   29fa4:	4363      	muls	r3, r4
   29fa6:	18ea      	adds	r2, r5, r3
   29fa8:	5cee      	ldrb	r6, [r5, r3]
   29faa:	b936      	cbnz	r6, 29fba <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   29fac:	4620      	mov	r0, r4
   29fae:	f7ff ff79 	bl	29ea4 <atomic_clear_bit.constprop.0>
		ret = false;
   29fb2:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   29fb4:	b005      	add	sp, #20
   29fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   29fba:	1c7b      	adds	r3, r7, #1
   29fbc:	d00f      	beq.n	29fde <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
   29fbe:	f8d2 c008 	ldr.w	ip, [r2, #8]
   29fc2:	4820      	ldr	r0, [pc, #128]	; (2a044 <pm_system_suspend+0xe8>)
   29fc4:	4a20      	ldr	r2, [pc, #128]	; (2a048 <pm_system_suspend+0xec>)
   29fc6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   29fca:	2100      	movs	r1, #0
   29fcc:	2300      	movs	r3, #0
   29fce:	fbec 0106 	umlal	r0, r1, ip, r6
   29fd2:	f7fc f895 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   29fd6:	2101      	movs	r1, #1
   29fd8:	1a38      	subs	r0, r7, r0
   29fda:	f01f f98c 	bl	492f6 <z_set_timeout_expiry>
	k_sched_lock();
   29fde:	f017 ff03 	bl	41de8 <k_sched_lock>
	pm_state_notify(true);
   29fe2:	2001      	movs	r0, #1
   29fe4:	f7ff ff30 	bl	29e48 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29fe8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   29fec:	2301      	movs	r3, #1
   29fee:	fa03 f808 	lsl.w	r8, r3, r8
   29ff2:	4b16      	ldr	r3, [pc, #88]	; (2a04c <pm_system_suspend+0xf0>)
   29ff4:	4499      	add	r9, r3
   29ff6:	e859 3f00 	ldrex	r3, [r9]
   29ffa:	ea43 0308 	orr.w	r3, r3, r8
   29ffe:	e849 3200 	strex	r2, r3, [r9]
   2a002:	2a00      	cmp	r2, #0
   2a004:	d1f7      	bne.n	29ff6 <pm_system_suspend+0x9a>
   2a006:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   2a00a:	230c      	movs	r3, #12
   2a00c:	fb03 5504 	mla	r5, r3, r4, r5
   2a010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2a014:	ab01      	add	r3, sp, #4
   2a016:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   2a01a:	4a0d      	ldr	r2, [pc, #52]	; (2a050 <pm_system_suspend+0xf4>)
   2a01c:	b11a      	cbz	r2, 2a026 <pm_system_suspend+0xca>
		pm_power_state_set(info);
   2a01e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2a022:	f01a ff6e 	bl	44f02 <pm_power_state_set>
	pm_system_resume();
   2a026:	f7ff ff55 	bl	29ed4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2a02a:	4620      	mov	r0, r4
   2a02c:	f7ff ff3a 	bl	29ea4 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   2a030:	f018 f8a8 	bl	42184 <k_sched_unlock>
	bool ret = true;
   2a034:	2001      	movs	r0, #1
   2a036:	e7bd      	b.n	29fb4 <pm_system_suspend+0x58>
   2a038:	20003aec 	.word	0x20003aec
   2a03c:	20001c58 	.word	0x20001c58
   2a040:	20001c4c 	.word	0x20001c4c
   2a044:	000f423f 	.word	0x000f423f
   2a048:	000f4240 	.word	0x000f4240
   2a04c:	20001c5c 	.word	0x20001c5c
   2a050:	00044f03 	.word	0x00044f03

0002a054 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a054:	4b05      	ldr	r3, [pc, #20]	; (2a06c <pm_constraint_get+0x18>)
   2a056:	f3bf 8f5b 	dmb	ish
   2a05a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2a05e:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   2a062:	fab0 f080 	clz	r0, r0
   2a066:	0940      	lsrs	r0, r0, #5
   2a068:	4770      	bx	lr
   2a06a:	bf00      	nop
   2a06c:	20001c60 	.word	0x20001c60

0002a070 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2a070:	b908      	cbnz	r0, 2a076 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2a072:	4b02      	ldr	r3, [pc, #8]	; (2a07c <pm_state_cpu_get_all+0xc>)
   2a074:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2a076:	2000      	movs	r0, #0
   2a078:	4770      	bx	lr
   2a07a:	bf00      	nop
   2a07c:	00049f64 	.word	0x00049f64

0002a080 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a084:	b085      	sub	sp, #20
   2a086:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2a088:	a903      	add	r1, sp, #12
   2a08a:	f7ff fff1 	bl	2a070 <pm_state_cpu_get_all>
   2a08e:	f8df a074 	ldr.w	sl, [pc, #116]	; 2a104 <pm_policy_next_state+0x84>
   2a092:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2a108 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2a096:	1e44      	subs	r4, r0, #1
   2a098:	b224      	sxth	r4, r4
   2a09a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2a09e:	f04f 0900 	mov.w	r9, #0
   2a0a2:	1c63      	adds	r3, r4, #1
   2a0a4:	d104      	bne.n	2a0b0 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   2a0a6:	2500      	movs	r5, #0
}
   2a0a8:	4628      	mov	r0, r5
   2a0aa:	b005      	add	sp, #20
   2a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   2a0b0:	9a03      	ldr	r2, [sp, #12]
   2a0b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2a0b6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
   2a0ba:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   2a0be:	f7ff ffc9 	bl	2a054 <pm_constraint_get>
   2a0c2:	b1e0      	cbz	r0, 2a0fe <pm_policy_next_state+0x7e>
   2a0c4:	6868      	ldr	r0, [r5, #4]
   2a0c6:	f04f 0b00 	mov.w	fp, #0
   2a0ca:	46d4      	mov	ip, sl
   2a0cc:	4659      	mov	r1, fp
   2a0ce:	fbe0 c107 	umlal	ip, r1, r0, r7
   2a0d2:	4642      	mov	r2, r8
   2a0d4:	464b      	mov	r3, r9
   2a0d6:	4660      	mov	r0, ip
   2a0d8:	f7fc f812 	bl	26100 <__aeabi_uldivmod>
   2a0dc:	9001      	str	r0, [sp, #4]
   2a0de:	68a8      	ldr	r0, [r5, #8]
   2a0e0:	46d4      	mov	ip, sl
   2a0e2:	4659      	mov	r1, fp
   2a0e4:	fbe0 c107 	umlal	ip, r1, r0, r7
   2a0e8:	4642      	mov	r2, r8
   2a0ea:	464b      	mov	r3, r9
   2a0ec:	4660      	mov	r0, ip
   2a0ee:	f7fc f807 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   2a0f2:	1c72      	adds	r2, r6, #1
   2a0f4:	d0d8      	beq.n	2a0a8 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
   2a0f6:	9b01      	ldr	r3, [sp, #4]
   2a0f8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   2a0fa:	42b0      	cmp	r0, r6
   2a0fc:	d9d4      	bls.n	2a0a8 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2a0fe:	3c01      	subs	r4, #1
   2a100:	b224      	sxth	r4, r4
   2a102:	e7ce      	b.n	2a0a2 <pm_policy_next_state+0x22>
   2a104:	000f423f 	.word	0x000f423f
   2a108:	000f4240 	.word	0x000f4240

0002a10c <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2a10c:	4b01      	ldr	r3, [pc, #4]	; (2a114 <uECC_get_rng+0x8>)
   2a10e:	6818      	ldr	r0, [r3, #0]
   2a110:	4770      	bx	lr
   2a112:	bf00      	nop
   2a114:	20000368 	.word	0x20000368

0002a118 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2a118:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2a11a:	2208      	movs	r2, #8
{
   2a11c:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2a11e:	f019 feae 	bl	43e7e <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2a122:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2a124:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2a126:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2a128:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2a12a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2a12c:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2a12e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2a130:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2a132:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2a134:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a136:	4613      	mov	r3, r2
   2a138:	466a      	mov	r2, sp
{
   2a13a:	460c      	mov	r4, r1
   2a13c:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   2a13e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a140:	4611      	mov	r1, r2
   2a142:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   2a144:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2a148:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a14a:	f019 fdae 	bl	43caa <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a14e:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a150:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a152:	4630      	mov	r0, r6
   2a154:	f019 fda9 	bl	43caa <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2a158:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2a15a:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   2a15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2a15e:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   2a160:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2a162:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   2a164:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a166:	4405      	add	r5, r0
	tmp[7] = 0;
   2a168:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a16c:	4610      	mov	r0, r2
   2a16e:	4611      	mov	r1, r2
   2a170:	f019 fd9b 	bl	43caa <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a174:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a176:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a178:	4630      	mov	r0, r6
   2a17a:	f019 fd96 	bl	43caa <uECC_vli_add>
   2a17e:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2a180:	6a20      	ldr	r0, [r4, #32]
   2a182:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   2a184:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a186:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   2a188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2a18a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2a18c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2a18e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   2a190:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2a192:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a194:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2a196:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2a19a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a19c:	f019 fd85 	bl	43caa <uECC_vli_add>
   2a1a0:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2a1a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a1a4:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   2a1a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2a1a8:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2a1ac:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   2a1ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a1b0:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   2a1b2:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   2a1b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2a1b8:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2a1bc:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   2a1be:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   2a1c2:	6a20      	ldr	r0, [r4, #32]
   2a1c4:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a1c6:	4630      	mov	r0, r6
   2a1c8:	f019 fd6f 	bl	43caa <uECC_vli_add>
   2a1cc:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2a1ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a1d0:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   2a1d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2a1d4:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   2a1d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2a1d8:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2a1da:	6a20      	ldr	r0, [r4, #32]
   2a1dc:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   2a1de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2a1e0:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a1e2:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2a1e4:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2a1e8:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a1ea:	f019 fe7b 	bl	43ee4 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2a1ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2a1f0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2a1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a1f4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2a1f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a1f8:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2a1fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2a1fc:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2a1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a200:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2a202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a204:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a206:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a208:	2308      	movs	r3, #8
   2a20a:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   2a20c:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a210:	f019 fe68 	bl	43ee4 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2a214:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a216:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2a218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a21a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2a21c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2a21e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2a220:	6a23      	ldr	r3, [r4, #32]
   2a222:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2a224:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a226:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2a228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2a22a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2a22e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2a230:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a232:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a234:	2308      	movs	r3, #8
   2a236:	4630      	mov	r0, r6
   2a238:	f019 fe54 	bl	43ee4 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2a23c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a23e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2a240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2a242:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2a246:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a248:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2a24a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2a24c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2a24e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   2a250:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   2a254:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a256:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a258:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a25a:	2308      	movs	r3, #8
   2a25c:	4630      	mov	r0, r6
   2a25e:	f019 fe41 	bl	43ee4 <uECC_vli_sub>

	if (carry < 0) {
   2a262:	1a2d      	subs	r5, r5, r0
   2a264:	d410      	bmi.n	2a288 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2a266:	4c0d      	ldr	r4, [pc, #52]	; (2a29c <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
   2a268:	b935      	cbnz	r5, 2a278 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2a26a:	2208      	movs	r2, #8
   2a26c:	4631      	mov	r1, r6
   2a26e:	4620      	mov	r0, r4
   2a270:	f019 fe11 	bl	43e96 <uECC_vli_cmp_unsafe>
		while (carry || 
   2a274:	2801      	cmp	r0, #1
   2a276:	d00f      	beq.n	2a298 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2a278:	2308      	movs	r3, #8
   2a27a:	4622      	mov	r2, r4
   2a27c:	4631      	mov	r1, r6
   2a27e:	4630      	mov	r0, r6
   2a280:	f019 fe30 	bl	43ee4 <uECC_vli_sub>
   2a284:	1a2d      	subs	r5, r5, r0
   2a286:	e7ef      	b.n	2a268 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2a288:	4a04      	ldr	r2, [pc, #16]	; (2a29c <vli_mmod_fast_secp256r1+0x184>)
   2a28a:	2308      	movs	r3, #8
   2a28c:	4631      	mov	r1, r6
   2a28e:	4630      	mov	r0, r6
   2a290:	f019 fd0b 	bl	43caa <uECC_vli_add>
		while (carry < 0);
   2a294:	182d      	adds	r5, r5, r0
   2a296:	d4f8      	bmi.n	2a28a <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
   2a298:	b009      	add	sp, #36	; 0x24
   2a29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a29c:	00049f68 	.word	0x00049f68

0002a2a0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2a2a0:	4904      	ldr	r1, [pc, #16]	; (2a2b4 <sub_bytes+0x14>)
   2a2a2:	1e43      	subs	r3, r0, #1
   2a2a4:	300f      	adds	r0, #15
   2a2a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a2aa:	5c8a      	ldrb	r2, [r1, r2]
   2a2ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2a2ae:	4283      	cmp	r3, r0
   2a2b0:	d1f9      	bne.n	2a2a6 <sub_bytes+0x6>
	}
}
   2a2b2:	4770      	bx	lr
   2a2b4:	0004b5c4 	.word	0x0004b5c4

0002a2b8 <tc_aes128_set_encrypt_key>:
{
   2a2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2a2ba:	4e26      	ldr	r6, [pc, #152]	; (2a354 <tc_aes128_set_encrypt_key+0x9c>)
{
   2a2bc:	4607      	mov	r7, r0
   2a2be:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2a2c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2a2c2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2a2c4:	ad01      	add	r5, sp, #4
   2a2c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a2c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a2ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a2cc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2a2d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2a2d4:	4638      	mov	r0, r7
   2a2d6:	2f00      	cmp	r7, #0
   2a2d8:	d038      	beq.n	2a34c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2a2da:	2c00      	cmp	r4, #0
   2a2dc:	d038      	beq.n	2a350 <tc_aes128_set_encrypt_key+0x98>
   2a2de:	1f38      	subs	r0, r7, #4
   2a2e0:	4621      	mov	r1, r4
   2a2e2:	4602      	mov	r2, r0
   2a2e4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a2e6:	784b      	ldrb	r3, [r1, #1]
   2a2e8:	780d      	ldrb	r5, [r1, #0]
   2a2ea:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a2ec:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2a2f0:	78cd      	ldrb	r5, [r1, #3]
   2a2f2:	432b      	orrs	r3, r5
   2a2f4:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2a2f6:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a2f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2a2fc:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a2fe:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2a302:	d1f0      	bne.n	2a2e6 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a304:	4c14      	ldr	r4, [pc, #80]	; (2a358 <tc_aes128_set_encrypt_key+0xa0>)
   2a306:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2a308:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2a30a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2a30c:	d116      	bne.n	2a33c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a30e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a312:	5ca5      	ldrb	r5, [r4, r2]
   2a314:	0e1a      	lsrs	r2, r3, #24
   2a316:	5ca2      	ldrb	r2, [r4, r2]
   2a318:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2a31c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2a320:	b2db      	uxtb	r3, r3
   2a322:	5d65      	ldrb	r5, [r4, r5]
   2a324:	5ce3      	ldrb	r3, [r4, r3]
   2a326:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2a32a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2a32e:	ad0c      	add	r5, sp, #48	; 0x30
   2a330:	f021 0303 	bic.w	r3, r1, #3
   2a334:	442b      	add	r3, r5
   2a336:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2a33a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2a33c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a340:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2a342:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a344:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2a346:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a348:	d1de      	bne.n	2a308 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2a34a:	2001      	movs	r0, #1
}
   2a34c:	b00d      	add	sp, #52	; 0x34
   2a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2a350:	4620      	mov	r0, r4
   2a352:	e7fb      	b.n	2a34c <tc_aes128_set_encrypt_key+0x94>
   2a354:	00049bb4 	.word	0x00049bb4
   2a358:	0004b5c4 	.word	0x0004b5c4

0002a35c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2a35c:	4901      	ldr	r1, [pc, #4]	; (2a364 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2a35e:	2210      	movs	r2, #16
	str	r2, [r1]
   2a360:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2a362:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2a364:	e000ed10 	.word	0xe000ed10

0002a368 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2a368:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2a36a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2a36c:	f380 8811 	msr	BASEPRI, r0
	isb
   2a370:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2a374:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2a378:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2a37a:	b662      	cpsie	i
	isb
   2a37c:	f3bf 8f6f 	isb	sy

	bx	lr
   2a380:	4770      	bx	lr
   2a382:	bf00      	nop

0002a384 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2a384:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2a386:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2a388:	f381 8811 	msr	BASEPRI, r1

	wfe
   2a38c:	bf20      	wfe

	msr	BASEPRI, r0
   2a38e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2a392:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2a394:	4770      	bx	lr
   2a396:	bf00      	nop

0002a398 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2a398:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a39a:	2b00      	cmp	r3, #0
   2a39c:	db08      	blt.n	2a3b0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a39e:	2201      	movs	r2, #1
   2a3a0:	f000 001f 	and.w	r0, r0, #31
   2a3a4:	fa02 f000 	lsl.w	r0, r2, r0
   2a3a8:	095b      	lsrs	r3, r3, #5
   2a3aa:	4a02      	ldr	r2, [pc, #8]	; (2a3b4 <arch_irq_enable+0x1c>)
   2a3ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   2a3b0:	4770      	bx	lr
   2a3b2:	bf00      	nop
   2a3b4:	e000e100 	.word	0xe000e100

0002a3b8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2a3b8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a3ba:	2b00      	cmp	r3, #0
   2a3bc:	db0d      	blt.n	2a3da <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a3be:	2201      	movs	r2, #1
   2a3c0:	095b      	lsrs	r3, r3, #5
   2a3c2:	f000 001f 	and.w	r0, r0, #31
   2a3c6:	fa02 f000 	lsl.w	r0, r2, r0
   2a3ca:	3320      	adds	r3, #32
   2a3cc:	4a03      	ldr	r2, [pc, #12]	; (2a3dc <arch_irq_disable+0x24>)
   2a3ce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2a3d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a3d6:	f3bf 8f6f 	isb	sy
}
   2a3da:	4770      	bx	lr
   2a3dc:	e000e100 	.word	0xe000e100

0002a3e0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2a3e0:	4b05      	ldr	r3, [pc, #20]	; (2a3f8 <arch_irq_is_enabled+0x18>)
   2a3e2:	0942      	lsrs	r2, r0, #5
   2a3e4:	f000 001f 	and.w	r0, r0, #31
   2a3e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2a3ec:	2301      	movs	r3, #1
   2a3ee:	fa03 f000 	lsl.w	r0, r3, r0
}
   2a3f2:	4010      	ands	r0, r2
   2a3f4:	4770      	bx	lr
   2a3f6:	bf00      	nop
   2a3f8:	e000e100 	.word	0xe000e100

0002a3fc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2a3fc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2a3fe:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a400:	bfa8      	it	ge
   2a402:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2a406:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a40a:	bfb8      	it	lt
   2a40c:	4b06      	ldrlt	r3, [pc, #24]	; (2a428 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a40e:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2a412:	bfac      	ite	ge
   2a414:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a418:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a41c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a41e:	bfb4      	ite	lt
   2a420:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a422:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   2a426:	4770      	bx	lr
   2a428:	e000ed14 	.word	0xe000ed14

0002a42c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2a42c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2a42e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2a430:	4b04      	ldr	r3, [pc, #16]	; (2a444 <_arch_isr_direct_pm+0x18>)
   2a432:	699a      	ldr	r2, [r3, #24]
   2a434:	b11a      	cbz	r2, 2a43e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2a436:	2200      	movs	r2, #0
   2a438:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2a43a:	f01e fc50 	bl	48cde <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2a43e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2a440:	bd08      	pop	{r3, pc}
   2a442:	bf00      	nop
   2a444:	20003aec 	.word	0x20003aec

0002a448 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2a448:	bf30      	wfi
    b z_SysNmiOnReset
   2a44a:	f7ff bffd 	b.w	2a448 <z_SysNmiOnReset>
   2a44e:	bf00      	nop

0002a450 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a450:	4a0f      	ldr	r2, [pc, #60]	; (2a490 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2a452:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a454:	4b0f      	ldr	r3, [pc, #60]	; (2a494 <z_arm_prep_c+0x44>)
   2a456:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2a45a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2a45c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a460:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2a464:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2a468:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2a46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2a470:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2a474:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2a478:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2a47c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2a480:	f016 fef8 	bl	41274 <z_bss_zero>
	z_data_copy();
   2a484:	f017 ffc2 	bl	4240c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2a488:	f000 f994 	bl	2a7b4 <z_arm_interrupt_init>
	z_cstart();
   2a48c:	f016 fefc 	bl	41288 <z_cstart>
   2a490:	00026000 	.word	0x00026000
   2a494:	e000ed00 	.word	0xe000ed00

0002a498 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2a498:	4a09      	ldr	r2, [pc, #36]	; (2a4c0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2a49a:	490a      	ldr	r1, [pc, #40]	; (2a4c4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2a49c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2a49e:	6809      	ldr	r1, [r1, #0]
   2a4a0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a4a2:	4909      	ldr	r1, [pc, #36]	; (2a4c8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2a4a4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a4a6:	684b      	ldr	r3, [r1, #4]
   2a4a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a4ac:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2a4ae:	2300      	movs	r3, #0
   2a4b0:	f383 8811 	msr	BASEPRI, r3
   2a4b4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2a4b8:	6893      	ldr	r3, [r2, #8]
}
   2a4ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2a4bc:	4770      	bx	lr
   2a4be:	bf00      	nop
   2a4c0:	20003aec 	.word	0x20003aec
   2a4c4:	0004b384 	.word	0x0004b384
   2a4c8:	e000ed00 	.word	0xe000ed00

0002a4cc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2a4cc:	490f      	ldr	r1, [pc, #60]	; (2a50c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2a4ce:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2a4d0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2a4d4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2a4d6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2a4da:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a4de:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2a4e0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2a4e4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2a4e8:	4f09      	ldr	r7, [pc, #36]	; (2a510 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2a4ea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2a4ee:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2a4f0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2a4f2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2a4f4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2a4f6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2a4f8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2a4fa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2a4fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2a502:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2a506:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2a50a:	4770      	bx	lr
    ldr r1, =_kernel
   2a50c:	20003aec 	.word	0x20003aec
    ldr v4, =_SCS_ICSR
   2a510:	e000ed04 	.word	0xe000ed04

0002a514 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2a514:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2a518:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2a51a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2a51e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2a522:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2a524:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2a528:	2902      	cmp	r1, #2
    beq _oops
   2a52a:	d0ff      	beq.n	2a52c <_oops>

0002a52c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2a52c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2a52e:	f01a fc00 	bl	44d32 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2a532:	bd01      	pop	{r0, pc}

0002a534 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2a534:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2a538:	9b00      	ldr	r3, [sp, #0]
   2a53a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2a53e:	490a      	ldr	r1, [pc, #40]	; (2a568 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2a540:	9b01      	ldr	r3, [sp, #4]
   2a542:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2a546:	9b02      	ldr	r3, [sp, #8]
   2a548:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2a54c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2a550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2a554:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2a558:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2a55c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2a55e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2a560:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2a562:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2a564:	4770      	bx	lr
   2a566:	bf00      	nop
   2a568:	00042f51 	.word	0x00042f51

0002a56c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2a56c:	4b07      	ldr	r3, [pc, #28]	; (2a58c <arch_switch_to_main_thread+0x20>)
   2a56e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2a570:	4610      	mov	r0, r2
   2a572:	f381 8809 	msr	PSP, r1
   2a576:	2100      	movs	r1, #0
   2a578:	b663      	cpsie	if
   2a57a:	f381 8811 	msr	BASEPRI, r1
   2a57e:	f3bf 8f6f 	isb	sy
   2a582:	2200      	movs	r2, #0
   2a584:	2300      	movs	r3, #0
   2a586:	f018 fce3 	bl	42f50 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2a58a:	bf00      	nop
   2a58c:	20003aec 	.word	0x20003aec

0002a590 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2a590:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2a592:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2a594:	4a0b      	ldr	r2, [pc, #44]	; (2a5c4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2a596:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2a598:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2a59a:	bf1e      	ittt	ne
	movne	r1, #0
   2a59c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2a59e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2a5a0:	f01e fb9d 	blne	48cde <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2a5a4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2a5a6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2a5aa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2a5ae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2a5b2:	4905      	ldr	r1, [pc, #20]	; (2a5c8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2a5b4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2a5b6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2a5b8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2a5ba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2a5be:	4903      	ldr	r1, [pc, #12]	; (2a5cc <_isr_wrapper+0x3c>)
	bx r1
   2a5c0:	4708      	bx	r1
   2a5c2:	0000      	.short	0x0000
	ldr r2, =_kernel
   2a5c4:	20003aec 	.word	0x20003aec
	ldr r1, =_sw_isr_table
   2a5c8:	000498e8 	.word	0x000498e8
	ldr r1, =z_arm_int_exit
   2a5cc:	0002a5d1 	.word	0x0002a5d1

0002a5d0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2a5d0:	4b04      	ldr	r3, [pc, #16]	; (2a5e4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2a5d2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2a5d4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2a5d6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2a5d8:	d003      	beq.n	2a5e2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2a5da:	4903      	ldr	r1, [pc, #12]	; (2a5e8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2a5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2a5e0:	600a      	str	r2, [r1, #0]

0002a5e2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2a5e2:	4770      	bx	lr
	ldr r3, =_kernel
   2a5e4:	20003aec 	.word	0x20003aec
	ldr r1, =_SCS_ICSR
   2a5e8:	e000ed04 	.word	0xe000ed04

0002a5ec <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2a5ec:	4b0d      	ldr	r3, [pc, #52]	; (2a624 <bus_fault.constprop.0+0x38>)
   2a5ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2a5f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2a5f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a5f4:	0592      	lsls	r2, r2, #22
   2a5f6:	d508      	bpl.n	2a60a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2a5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2a5fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a5fc:	0412      	lsls	r2, r2, #16
   2a5fe:	d504      	bpl.n	2a60a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2a600:	b118      	cbz	r0, 2a60a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2a602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a604:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2a608:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2a60a:	4b06      	ldr	r3, [pc, #24]	; (2a624 <bus_fault.constprop.0+0x38>)
   2a60c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2a60e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a610:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2a612:	bf58      	it	pl
   2a614:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a616:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2a618:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a61a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   2a61e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a620:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2a622:	4770      	bx	lr
   2a624:	e000ed00 	.word	0xe000ed00

0002a628 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2a628:	4b0e      	ldr	r3, [pc, #56]	; (2a664 <mem_manage_fault.constprop.0+0x3c>)
   2a62a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2a62c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2a62e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a630:	0792      	lsls	r2, r2, #30
   2a632:	d508      	bpl.n	2a646 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2a634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2a636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a638:	0612      	lsls	r2, r2, #24
   2a63a:	d504      	bpl.n	2a646 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2a63c:	b118      	cbz	r0, 2a646 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2a63e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2a644:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2a646:	4b07      	ldr	r3, [pc, #28]	; (2a664 <mem_manage_fault.constprop.0+0x3c>)
   2a648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2a64a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2a64c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a64e:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2a650:	bf58      	it	pl
   2a652:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a656:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a658:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2a65c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a65e:	7008      	strb	r0, [r1, #0]
}
   2a660:	4770      	bx	lr
   2a662:	bf00      	nop
   2a664:	e000ed00 	.word	0xe000ed00

0002a668 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2a668:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a66a:	4b48      	ldr	r3, [pc, #288]	; (2a78c <z_arm_fault+0x124>)
   2a66c:	685b      	ldr	r3, [r3, #4]
{
   2a66e:	b08a      	sub	sp, #40	; 0x28
   2a670:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a672:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2a676:	2500      	movs	r5, #0
   2a678:	f385 8811 	msr	BASEPRI, r5
   2a67c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2a680:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   2a684:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   2a688:	d111      	bne.n	2a6ae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2a68a:	f002 010c 	and.w	r1, r2, #12
   2a68e:	2908      	cmp	r1, #8
   2a690:	d00d      	beq.n	2a6ae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2a692:	0711      	lsls	r1, r2, #28
   2a694:	d401      	bmi.n	2a69a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   2a696:	4606      	mov	r6, r0
			*nested_exc = true;
   2a698:	2501      	movs	r5, #1
	*recoverable = false;
   2a69a:	2200      	movs	r2, #0
	switch (fault) {
   2a69c:	3b03      	subs	r3, #3
	*recoverable = false;
   2a69e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2a6a2:	2b03      	cmp	r3, #3
   2a6a4:	d86a      	bhi.n	2a77c <z_arm_fault+0x114>
   2a6a6:	e8df f003 	tbb	[pc, r3]
   2a6aa:	5404      	.short	0x5404
   2a6ac:	5c58      	.short	0x5c58
		return NULL;
   2a6ae:	462e      	mov	r6, r5
   2a6b0:	e7f3      	b.n	2a69a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2a6b2:	4b36      	ldr	r3, [pc, #216]	; (2a78c <z_arm_fault+0x124>)
   2a6b4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2a6b6:	f014 0402 	ands.w	r4, r4, #2
   2a6ba:	d15f      	bne.n	2a77c <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2a6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a6be:	2a00      	cmp	r2, #0
   2a6c0:	db14      	blt.n	2a6ec <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a6c4:	0052      	lsls	r2, r2, #1
   2a6c6:	d511      	bpl.n	2a6ec <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
   2a6c8:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2a6ca:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2a6ce:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2a6d2:	4291      	cmp	r1, r2
   2a6d4:	d009      	beq.n	2a6ea <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
   2a6d6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2a6da:	b302      	cbz	r2, 2a71e <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
   2a6dc:	f10d 0107 	add.w	r1, sp, #7
   2a6e0:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2a6e2:	f7ff ffa1 	bl	2a628 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   2a6e6:	4604      	mov	r4, r0
		break;
   2a6e8:	e000      	b.n	2a6ec <z_arm_fault+0x84>
			reason = esf->basic.r0;
   2a6ea:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2a6ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a6f0:	b99b      	cbnz	r3, 2a71a <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2a6f2:	2220      	movs	r2, #32
   2a6f4:	4631      	mov	r1, r6
   2a6f6:	a802      	add	r0, sp, #8
   2a6f8:	f01a fbe2 	bl	44ec0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a6fe:	2d00      	cmp	r5, #0
   2a700:	d03e      	beq.n	2a780 <z_arm_fault+0x118>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2a702:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2a706:	b922      	cbnz	r2, 2a712 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2a708:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2a70c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a710:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2a712:	a902      	add	r1, sp, #8
   2a714:	4620      	mov	r0, r4
   2a716:	f01a fb0a 	bl	44d2e <z_arm_fatal_error>
}
   2a71a:	b00a      	add	sp, #40	; 0x28
   2a71c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   2a71e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2a722:	b12a      	cbz	r2, 2a730 <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
   2a724:	f10d 0107 	add.w	r1, sp, #7
   2a728:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2a72a:	f7ff ff5f 	bl	2a5ec <bus_fault.constprop.0>
   2a72e:	e7da      	b.n	2a6e6 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
   2a730:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2a732:	b292      	uxth	r2, r2
   2a734:	2a00      	cmp	r2, #0
   2a736:	d0d9      	beq.n	2a6ec <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2a73a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2a73c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2a73e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2a740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2a742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2a744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a746:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2a74a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2a74e:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
   2a750:	e7cc      	b.n	2a6ec <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   2a752:	f10d 0107 	add.w	r1, sp, #7
   2a756:	2000      	movs	r0, #0
   2a758:	e7c3      	b.n	2a6e2 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   2a75a:	f10d 0107 	add.w	r1, sp, #7
   2a75e:	2000      	movs	r0, #0
   2a760:	e7e3      	b.n	2a72a <z_arm_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a762:	4b0a      	ldr	r3, [pc, #40]	; (2a78c <z_arm_fault+0x124>)
   2a764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2a766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2a768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2a76a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2a76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2a76e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2a770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a772:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2a776:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2a77a:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2a77c:	2400      	movs	r4, #0
   2a77e:	e7b5      	b.n	2a6ec <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a780:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2a784:	f023 0301 	bic.w	r3, r3, #1
   2a788:	e7c2      	b.n	2a710 <z_arm_fault+0xa8>
   2a78a:	bf00      	nop
   2a78c:	e000ed00 	.word	0xe000ed00

0002a790 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2a790:	4a02      	ldr	r2, [pc, #8]	; (2a79c <z_arm_fault_init+0xc>)
   2a792:	6953      	ldr	r3, [r2, #20]
   2a794:	f043 0310 	orr.w	r3, r3, #16
   2a798:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2a79a:	4770      	bx	lr
   2a79c:	e000ed00 	.word	0xe000ed00

0002a7a0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2a7a0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2a7a4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2a7a8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2a7aa:	4672      	mov	r2, lr
	bl z_arm_fault
   2a7ac:	f7ff ff5c 	bl	2a668 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2a7b0:	bd01      	pop	{r0, pc}
   2a7b2:	bf00      	nop

0002a7b4 <z_arm_interrupt_init>:
   2a7b4:	4804      	ldr	r0, [pc, #16]	; (2a7c8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2a7b6:	2300      	movs	r3, #0
   2a7b8:	2120      	movs	r1, #32
   2a7ba:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2a7bc:	3301      	adds	r3, #1
   2a7be:	2b30      	cmp	r3, #48	; 0x30
   2a7c0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2a7c4:	d1f9      	bne.n	2a7ba <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2a7c6:	4770      	bx	lr
   2a7c8:	e000e100 	.word	0xe000e100

0002a7cc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2a7cc:	f01e ff6a 	bl	496a4 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a7d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2a7d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2a7d6:	4808      	ldr	r0, [pc, #32]	; (2a7f8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2a7d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2a7dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2a7de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2a7e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2a7e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2a7e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2a7ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2a7ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2a7f2:	f7ff fe2d 	bl	2a450 <z_arm_prep_c>
   2a7f6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2a7f8:	20005af0 	.word	0x20005af0

0002a7fc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2a7fc:	4b06      	ldr	r3, [pc, #24]	; (2a818 <z_impl_k_thread_abort+0x1c>)
   2a7fe:	689b      	ldr	r3, [r3, #8]
   2a800:	4283      	cmp	r3, r0
   2a802:	d107      	bne.n	2a814 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a804:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2a808:	b123      	cbz	r3, 2a814 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a80a:	4a04      	ldr	r2, [pc, #16]	; (2a81c <z_impl_k_thread_abort+0x20>)
   2a80c:	6853      	ldr	r3, [r2, #4]
   2a80e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a812:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2a814:	f017 bd96 	b.w	42344 <z_thread_abort>
   2a818:	20003aec 	.word	0x20003aec
   2a81c:	e000ed00 	.word	0xe000ed00

0002a820 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2a820:	4b02      	ldr	r3, [pc, #8]	; (2a82c <z_arm_configure_static_mpu_regions+0xc>)
   2a822:	4a03      	ldr	r2, [pc, #12]	; (2a830 <z_arm_configure_static_mpu_regions+0x10>)
   2a824:	4803      	ldr	r0, [pc, #12]	; (2a834 <z_arm_configure_static_mpu_regions+0x14>)
   2a826:	2101      	movs	r1, #1
   2a828:	f000 b85e 	b.w	2a8e8 <arm_core_mpu_configure_static_mpu_regions>
   2a82c:	20040000 	.word	0x20040000
   2a830:	20000000 	.word	0x20000000
   2a834:	0004a014 	.word	0x0004a014

0002a838 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2a838:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2a83a:	4f1f      	ldr	r7, [pc, #124]	; (2a8b8 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2a83c:	2600      	movs	r6, #0
   2a83e:	428e      	cmp	r6, r1
   2a840:	db01      	blt.n	2a846 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2a842:	4610      	mov	r0, r2
   2a844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2a846:	6844      	ldr	r4, [r0, #4]
   2a848:	b39c      	cbz	r4, 2a8b2 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   2a84a:	b153      	cbz	r3, 2a862 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2a84c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2a850:	ea14 0f0c 	tst.w	r4, ip
   2a854:	d118      	bne.n	2a888 <mpu_configure_regions+0x50>
		&&
   2a856:	2c1f      	cmp	r4, #31
   2a858:	d916      	bls.n	2a888 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   2a85a:	6805      	ldr	r5, [r0, #0]
		&&
   2a85c:	ea1c 0f05 	tst.w	ip, r5
   2a860:	d112      	bne.n	2a888 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2a862:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2a864:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a866:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2a86a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   2a86c:	d90f      	bls.n	2a88e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   2a86e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2a872:	d80e      	bhi.n	2a892 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2a874:	3c01      	subs	r4, #1
   2a876:	fab4 f484 	clz	r4, r4
   2a87a:	f1c4 041f 	rsb	r4, r4, #31
   2a87e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2a880:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a882:	ea4c 0404 	orr.w	r4, ip, r4
   2a886:	d906      	bls.n	2a896 <mpu_configure_regions+0x5e>
			return -EINVAL;
   2a888:	f06f 0215 	mvn.w	r2, #21
   2a88c:	e7d9      	b.n	2a842 <mpu_configure_regions+0xa>
		return REGION_32B;
   2a88e:	2408      	movs	r4, #8
   2a890:	e7f6      	b.n	2a880 <mpu_configure_regions+0x48>
		return REGION_4G;
   2a892:	243e      	movs	r4, #62	; 0x3e
   2a894:	e7f4      	b.n	2a880 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a896:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   2a89a:	4315      	orrs	r5, r2
   2a89c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a8a0:	f044 0401 	orr.w	r4, r4, #1
   2a8a4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a8a8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   2a8ac:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a8ae:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   2a8b2:	3601      	adds	r6, #1
   2a8b4:	300c      	adds	r0, #12
   2a8b6:	e7c2      	b.n	2a83e <mpu_configure_regions+0x6>
   2a8b8:	e000ed00 	.word	0xe000ed00

0002a8bc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2a8bc:	4b04      	ldr	r3, [pc, #16]	; (2a8d0 <arm_core_mpu_enable+0x14>)
   2a8be:	2205      	movs	r2, #5
   2a8c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2a8c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a8c8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2a8cc:	4770      	bx	lr
   2a8ce:	bf00      	nop
   2a8d0:	e000ed00 	.word	0xe000ed00

0002a8d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2a8d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2a8d8:	4b02      	ldr	r3, [pc, #8]	; (2a8e4 <arm_core_mpu_disable+0x10>)
   2a8da:	2200      	movs	r2, #0
   2a8dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2a8e0:	4770      	bx	lr
   2a8e2:	bf00      	nop
   2a8e4:	e000ed00 	.word	0xe000ed00

0002a8e8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2a8e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2a8ea:	4c03      	ldr	r4, [pc, #12]	; (2a8f8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2a8ec:	2301      	movs	r3, #1
   2a8ee:	7822      	ldrb	r2, [r4, #0]
   2a8f0:	f7ff ffa2 	bl	2a838 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2a8f4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2a8f6:	bd10      	pop	{r4, pc}
   2a8f8:	20003bc5 	.word	0x20003bc5

0002a8fc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2a8fc:	4914      	ldr	r1, [pc, #80]	; (2a950 <z_arm_mpu_init+0x54>)
   2a8fe:	6808      	ldr	r0, [r1, #0]
   2a900:	2808      	cmp	r0, #8
{
   2a902:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2a904:	d821      	bhi.n	2a94a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2a906:	f7ff ffe5 	bl	2a8d4 <arm_core_mpu_disable>
   2a90a:	4c12      	ldr	r4, [pc, #72]	; (2a954 <z_arm_mpu_init+0x58>)
   2a90c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a90e:	2200      	movs	r2, #0
   2a910:	4290      	cmp	r0, r2
   2a912:	f101 010c 	add.w	r1, r1, #12
   2a916:	d105      	bne.n	2a924 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2a918:	4b0f      	ldr	r3, [pc, #60]	; (2a958 <z_arm_mpu_init+0x5c>)
   2a91a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2a91c:	f7ff ffce 	bl	2a8bc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2a920:	2000      	movs	r0, #0
}
   2a922:	bd10      	pop	{r4, pc}
   2a924:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a928:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2a92c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2a930:	4313      	orrs	r3, r2
   2a932:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a936:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a93e:	f043 0301 	orr.w	r3, r3, #1
   2a942:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a946:	3201      	adds	r2, #1
   2a948:	e7e2      	b.n	2a910 <z_arm_mpu_init+0x14>
		return -1;
   2a94a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a94e:	e7e8      	b.n	2a922 <z_arm_mpu_init+0x26>
   2a950:	0004a020 	.word	0x0004a020
   2a954:	e000ed00 	.word	0xe000ed00
   2a958:	20003bc5 	.word	0x20003bc5

0002a95c <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   2a95c:	b40c      	push	{r2, r3}
   2a95e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   2a960:	b909      	cbnz	r1, 2a966 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   2a962:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   2a966:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   2a96a:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2a96c:	9a06      	ldr	r2, [sp, #24]
   2a96e:	4806      	ldr	r0, [pc, #24]	; (2a988 <snprintf+0x2c>)
	va_start(vargs, format);
   2a970:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2a972:	a902      	add	r1, sp, #8
   2a974:	f7fd fcf6 	bl	28364 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2a978:	9b02      	ldr	r3, [sp, #8]
   2a97a:	2200      	movs	r2, #0
   2a97c:	701a      	strb	r2, [r3, #0]
	return r;
}
   2a97e:	b005      	add	sp, #20
   2a980:	f85d eb04 	ldr.w	lr, [sp], #4
   2a984:	b002      	add	sp, #8
   2a986:	4770      	bx	lr
   2a988:	00044ee9 	.word	0x00044ee9

0002a98c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2a98c:	f04f 0320 	mov.w	r3, #32
   2a990:	f3ef 8211 	mrs	r2, BASEPRI
   2a994:	f383 8812 	msr	BASEPRI_MAX, r3
   2a998:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2a99c:	4906      	ldr	r1, [pc, #24]	; (2a9b8 <nordicsemi_nrf52_init+0x2c>)
   2a99e:	2301      	movs	r3, #1
   2a9a0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2a9a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2a9a8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2a9ac:	f382 8811 	msr	BASEPRI, r2
   2a9b0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2a9b4:	2000      	movs	r0, #0
   2a9b6:	4770      	bx	lr
   2a9b8:	4001e000 	.word	0x4001e000

0002a9bc <sys_arch_reboot>:
    *p_gpregret = val;
   2a9bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a9c0:	b2c0      	uxtb	r0, r0
   2a9c2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2a9c6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2a9ca:	4905      	ldr	r1, [pc, #20]	; (2a9e0 <sys_arch_reboot+0x24>)
   2a9cc:	4b05      	ldr	r3, [pc, #20]	; (2a9e4 <sys_arch_reboot+0x28>)
   2a9ce:	68ca      	ldr	r2, [r1, #12]
   2a9d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2a9d4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2a9d6:	60cb      	str	r3, [r1, #12]
   2a9d8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2a9dc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2a9de:	e7fd      	b.n	2a9dc <sys_arch_reboot+0x20>
   2a9e0:	e000ed00 	.word	0xe000ed00
   2a9e4:	05fa0004 	.word	0x05fa0004

0002a9e8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2a9e8:	b120      	cbz	r0, 2a9f4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2a9ea:	4b03      	ldr	r3, [pc, #12]	; (2a9f8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2a9ec:	0180      	lsls	r0, r0, #6
   2a9ee:	f043 0301 	orr.w	r3, r3, #1
   2a9f2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2a9f4:	4770      	bx	lr
   2a9f6:	bf00      	nop
   2a9f8:	00049c40 	.word	0x00049c40

0002a9fc <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2a9fc:	b570      	push	{r4, r5, r6, lr}
   2a9fe:	4c21      	ldr	r4, [pc, #132]	; (2aa84 <le_gen_dhkey+0x88>)
   2aa00:	f3bf 8f5b 	dmb	ish
   2aa04:	6823      	ldr	r3, [r4, #0]
   2aa06:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2aa0a:	07da      	lsls	r2, r3, #31
{
   2aa0c:	4606      	mov	r6, r0
   2aa0e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2aa10:	d501      	bpl.n	2aa16 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2aa12:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2aa14:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2aa16:	2901      	cmp	r1, #1
   2aa18:	d831      	bhi.n	2aa7e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aa1a:	f3bf 8f5b 	dmb	ish
   2aa1e:	e854 3f00 	ldrex	r3, [r4]
   2aa22:	f043 0202 	orr.w	r2, r3, #2
   2aa26:	e844 2100 	strex	r1, r2, [r4]
   2aa2a:	2900      	cmp	r1, #0
   2aa2c:	d1f7      	bne.n	2aa1e <le_gen_dhkey+0x22>
   2aa2e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2aa32:	079b      	lsls	r3, r3, #30
   2aa34:	d4ed      	bmi.n	2aa12 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2aa36:	4814      	ldr	r0, [pc, #80]	; (2aa88 <le_gen_dhkey+0x8c>)
   2aa38:	4631      	mov	r1, r6
   2aa3a:	f01a faeb 	bl	45014 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2aa3e:	4813      	ldr	r0, [pc, #76]	; (2aa8c <le_gen_dhkey+0x90>)
   2aa40:	f106 0120 	add.w	r1, r6, #32
   2aa44:	f01a fae6 	bl	45014 <sys_memcpy_swap.constprop.0>
   2aa48:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2aa4c:	b175      	cbz	r5, 2aa6c <le_gen_dhkey+0x70>
   2aa4e:	e854 3f00 	ldrex	r3, [r4]
   2aa52:	f043 0304 	orr.w	r3, r3, #4
   2aa56:	e844 3200 	strex	r2, r3, [r4]
   2aa5a:	2a00      	cmp	r2, #0
   2aa5c:	d1f7      	bne.n	2aa4e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2aa5e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2aa62:	480b      	ldr	r0, [pc, #44]	; (2aa90 <le_gen_dhkey+0x94>)
   2aa64:	f016 ff5a 	bl	4191c <z_impl_k_sem_give>
   2aa68:	2000      	movs	r0, #0
   2aa6a:	e7d3      	b.n	2aa14 <le_gen_dhkey+0x18>
   2aa6c:	e854 3f00 	ldrex	r3, [r4]
   2aa70:	f023 0304 	bic.w	r3, r3, #4
   2aa74:	e844 3200 	strex	r2, r3, [r4]
   2aa78:	2a00      	cmp	r2, #0
   2aa7a:	d0f0      	beq.n	2aa5e <le_gen_dhkey+0x62>
   2aa7c:	e7f6      	b.n	2aa6c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2aa7e:	2012      	movs	r0, #18
   2aa80:	e7c8      	b.n	2aa14 <le_gen_dhkey+0x18>
   2aa82:	bf00      	nop
   2aa84:	20001c7c 	.word	0x20001c7c
   2aa88:	20003be6 	.word	0x20003be6
   2aa8c:	20003c06 	.word	0x20003c06
   2aa90:	20000be4 	.word	0x20000be4

0002aa94 <ecc_thread>:
{
   2aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa98:	4f60      	ldr	r7, [pc, #384]	; (2ac1c <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
   2aa9a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 2ac20 <ecc_thread+0x18c>
   2aa9e:	463e      	mov	r6, r7
   2aaa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aaa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aaa8:	4640      	mov	r0, r8
   2aaaa:	f016 ff5d 	bl	41968 <z_impl_k_sem_take>
   2aaae:	f3bf 8f5b 	dmb	ish
   2aab2:	683c      	ldr	r4, [r7, #0]
   2aab4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2aab8:	f014 0401 	ands.w	r4, r4, #1
   2aabc:	d055      	beq.n	2ab6a <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2aabe:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2ac24 <ecc_thread+0x190>
   2aac2:	4c59      	ldr	r4, [pc, #356]	; (2ac28 <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2aac4:	4d59      	ldr	r5, [pc, #356]	; (2ac2c <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2aac6:	485a      	ldr	r0, [pc, #360]	; (2ac30 <ecc_thread+0x19c>)
   2aac8:	464a      	mov	r2, r9
   2aaca:	4621      	mov	r1, r4
   2aacc:	f019 f841 	bl	43b52 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2aad0:	2800      	cmp	r0, #0
   2aad2:	d03e      	beq.n	2ab52 <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2aad4:	2220      	movs	r2, #32
   2aad6:	4629      	mov	r1, r5
   2aad8:	4620      	mov	r0, r4
   2aada:	f01a f9e0 	bl	44e9e <memcmp>
   2aade:	2800      	cmp	r0, #0
   2aae0:	d0f1      	beq.n	2aac6 <ecc_thread+0x32>
	return 0;
   2aae2:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2aae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aaea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aaee:	2001      	movs	r0, #1
   2aaf0:	f000 fa0e 	bl	2af10 <bt_buf_get_rx>
   2aaf4:	f100 0508 	add.w	r5, r0, #8
   2aaf8:	2102      	movs	r1, #2
   2aafa:	4604      	mov	r4, r0
   2aafc:	4628      	mov	r0, r5
   2aafe:	f01d f981 	bl	47e04 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2ab02:	233e      	movs	r3, #62	; 0x3e
   2ab04:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2ab06:	2342      	movs	r3, #66	; 0x42
   2ab08:	7043      	strb	r3, [r0, #1]
   2ab0a:	2101      	movs	r1, #1
   2ab0c:	4628      	mov	r0, r5
   2ab0e:	f01d f979 	bl	47e04 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2ab12:	2308      	movs	r3, #8
   2ab14:	7003      	strb	r3, [r0, #0]
   2ab16:	2141      	movs	r1, #65	; 0x41
   2ab18:	4628      	mov	r0, r5
   2ab1a:	f01d f973 	bl	47e04 <net_buf_simple_add>
   2ab1e:	4605      	mov	r5, r0
	evt->status = status;
   2ab20:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   2ab24:	f1b9 0f00 	cmp.w	r9, #0
   2ab28:	d016      	beq.n	2ab58 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2ab2a:	2240      	movs	r2, #64	; 0x40
   2ab2c:	2100      	movs	r1, #0
   2ab2e:	f01a f9d2 	bl	44ed6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ab32:	f3bf 8f5b 	dmb	ish
   2ab36:	e856 3f00 	ldrex	r3, [r6]
   2ab3a:	f023 0301 	bic.w	r3, r3, #1
   2ab3e:	e846 3200 	strex	r2, r3, [r6]
   2ab42:	2a00      	cmp	r2, #0
   2ab44:	d1f7      	bne.n	2ab36 <ecc_thread+0xa2>
   2ab46:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2ab4a:	4620      	mov	r0, r4
	bt_recv(buf);
   2ab4c:	f000 fe26 	bl	2b79c <bt_recv>
	while (true) {
   2ab50:	e7a6      	b.n	2aaa0 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   2ab52:	f04f 091f 	mov.w	r9, #31
   2ab56:	e7c6      	b.n	2aae6 <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2ab58:	4935      	ldr	r1, [pc, #212]	; (2ac30 <ecc_thread+0x19c>)
   2ab5a:	f01a fa5b 	bl	45014 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2ab5e:	3120      	adds	r1, #32
   2ab60:	f105 0021 	add.w	r0, r5, #33	; 0x21
   2ab64:	f01a fa56 	bl	45014 <sys_memcpy_swap.constprop.0>
   2ab68:	e7e3      	b.n	2ab32 <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab6a:	f3bf 8f5b 	dmb	ish
   2ab6e:	683b      	ldr	r3, [r7, #0]
   2ab70:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2ab74:	079b      	lsls	r3, r3, #30
   2ab76:	d593      	bpl.n	2aaa0 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2ab78:	492a      	ldr	r1, [pc, #168]	; (2ac24 <ecc_thread+0x190>)
   2ab7a:	482d      	ldr	r0, [pc, #180]	; (2ac30 <ecc_thread+0x19c>)
   2ab7c:	f019 fea2 	bl	448c4 <uECC_valid_public_key>
	if (ret < 0) {
   2ab80:	2800      	cmp	r0, #0
   2ab82:	db11      	blt.n	2aba8 <ecc_thread+0x114>
   2ab84:	f3bf 8f5b 	dmb	ish
   2ab88:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
   2ab8a:	4927      	ldr	r1, [pc, #156]	; (2ac28 <ecc_thread+0x194>)
   2ab8c:	4827      	ldr	r0, [pc, #156]	; (2ac2c <ecc_thread+0x198>)
   2ab8e:	f3bf 8f5b 	dmb	ish
   2ab92:	f013 0f04 	tst.w	r3, #4
   2ab96:	f101 0220 	add.w	r2, r1, #32
   2ab9a:	4b22      	ldr	r3, [pc, #136]	; (2ac24 <ecc_thread+0x190>)
   2ab9c:	bf18      	it	ne
   2ab9e:	4601      	movne	r1, r0
   2aba0:	4610      	mov	r0, r2
   2aba2:	f019 f825 	bl	43bf0 <uECC_shared_secret>
   2aba6:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2aba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2abac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2abb0:	2001      	movs	r0, #1
   2abb2:	f000 f9ad 	bl	2af10 <bt_buf_get_rx>
   2abb6:	f100 0908 	add.w	r9, r0, #8
   2abba:	2102      	movs	r1, #2
   2abbc:	4605      	mov	r5, r0
   2abbe:	4648      	mov	r0, r9
   2abc0:	f01d f920 	bl	47e04 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2abc4:	233e      	movs	r3, #62	; 0x3e
   2abc6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2abc8:	2322      	movs	r3, #34	; 0x22
   2abca:	7043      	strb	r3, [r0, #1]
   2abcc:	2101      	movs	r1, #1
   2abce:	4648      	mov	r0, r9
   2abd0:	f01d f918 	bl	47e04 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2abd4:	2309      	movs	r3, #9
   2abd6:	7003      	strb	r3, [r0, #0]
   2abd8:	2121      	movs	r1, #33	; 0x21
   2abda:	4648      	mov	r0, r9
   2abdc:	f01d f912 	bl	47e04 <net_buf_simple_add>
   2abe0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2abe2:	3001      	adds	r0, #1
   2abe4:	b99c      	cbnz	r4, 2ac0e <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2abe6:	221f      	movs	r2, #31
   2abe8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2abea:	21ff      	movs	r1, #255	; 0xff
   2abec:	2220      	movs	r2, #32
   2abee:	f01a f972 	bl	44ed6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2abf2:	f3bf 8f5b 	dmb	ish
   2abf6:	e856 3f00 	ldrex	r3, [r6]
   2abfa:	f023 0302 	bic.w	r3, r3, #2
   2abfe:	e846 3200 	strex	r2, r3, [r6]
   2ac02:	2a00      	cmp	r2, #0
   2ac04:	d1f7      	bne.n	2abf6 <ecc_thread+0x162>
   2ac06:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2ac0a:	4628      	mov	r0, r5
   2ac0c:	e79e      	b.n	2ab4c <ecc_thread+0xb8>
		evt->status = 0U;
   2ac0e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2ac10:	4907      	ldr	r1, [pc, #28]	; (2ac30 <ecc_thread+0x19c>)
		evt->status = 0U;
   2ac12:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2ac14:	f01a f9fe 	bl	45014 <sys_memcpy_swap.constprop.0>
   2ac18:	e7eb      	b.n	2abf2 <ecc_thread+0x15e>
   2ac1a:	bf00      	nop
   2ac1c:	20001c7c 	.word	0x20001c7c
   2ac20:	20000be4 	.word	0x20000be4
   2ac24:	0004a040 	.word	0x0004a040
   2ac28:	20003bc6 	.word	0x20003bc6
   2ac2c:	0004b6da 	.word	0x0004b6da
   2ac30:	20003be6 	.word	0x20003be6

0002ac34 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2ac34:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2ac36:	7d06      	ldrb	r6, [r0, #20]
   2ac38:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2ac3a:	b976      	cbnz	r6, 2ac5a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2ac3c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2ac3e:	881d      	ldrh	r5, [r3, #0]
   2ac40:	f242 0226 	movw	r2, #8230	; 0x2026
   2ac44:	4295      	cmp	r5, r2
   2ac46:	d045      	beq.n	2acd4 <bt_hci_ecc_send+0xa0>
   2ac48:	d80f      	bhi.n	2ac6a <bt_hci_ecc_send+0x36>
   2ac4a:	f242 0201 	movw	r2, #8193	; 0x2001
   2ac4e:	4295      	cmp	r5, r2
   2ac50:	d04f      	beq.n	2acf2 <bt_hci_ecc_send+0xbe>
   2ac52:	f242 0325 	movw	r3, #8229	; 0x2025
   2ac56:	429d      	cmp	r5, r3
   2ac58:	d013      	beq.n	2ac82 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2ac5a:	4b2a      	ldr	r3, [pc, #168]	; (2ad04 <bt_hci_ecc_send+0xd0>)
   2ac5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2ac60:	4620      	mov	r0, r4
   2ac62:	691b      	ldr	r3, [r3, #16]
}
   2ac64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2ac68:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2ac6a:	f242 035e 	movw	r3, #8286	; 0x205e
   2ac6e:	429d      	cmp	r5, r3
   2ac70:	d1f3      	bne.n	2ac5a <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2ac72:	2103      	movs	r1, #3
   2ac74:	3008      	adds	r0, #8
   2ac76:	f01d f8e4 	bl	47e42 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2ac7a:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2ac7c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2ac80:	e02e      	b.n	2ace0 <bt_hci_ecc_send+0xac>
   2ac82:	2103      	movs	r1, #3
   2ac84:	3008      	adds	r0, #8
   2ac86:	f01d f8dc 	bl	47e42 <net_buf_simple_pull>
	net_buf_unref(buf);
   2ac8a:	4620      	mov	r0, r4
   2ac8c:	f012 fb80 	bl	3d390 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ac90:	f3bf 8f5b 	dmb	ish
   2ac94:	4b1c      	ldr	r3, [pc, #112]	; (2ad08 <bt_hci_ecc_send+0xd4>)
   2ac96:	681a      	ldr	r2, [r3, #0]
   2ac98:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2ac9c:	0792      	lsls	r2, r2, #30
   2ac9e:	d507      	bpl.n	2acb0 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2aca0:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2aca2:	4631      	mov	r1, r6
   2aca4:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2aca8:	f01a f990 	bl	44fcc <send_cmd_status>
}
   2acac:	2000      	movs	r0, #0
   2acae:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2acb0:	f3bf 8f5b 	dmb	ish
   2acb4:	e853 2f00 	ldrex	r2, [r3]
   2acb8:	f042 0101 	orr.w	r1, r2, #1
   2acbc:	e843 1000 	strex	r0, r1, [r3]
   2acc0:	2800      	cmp	r0, #0
   2acc2:	d1f7      	bne.n	2acb4 <bt_hci_ecc_send+0x80>
   2acc4:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2acc8:	07d3      	lsls	r3, r2, #31
   2acca:	d4e9      	bmi.n	2aca0 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2accc:	480f      	ldr	r0, [pc, #60]	; (2ad0c <bt_hci_ecc_send+0xd8>)
   2acce:	f016 fe25 	bl	4191c <z_impl_k_sem_give>
}
   2acd2:	e7e6      	b.n	2aca2 <bt_hci_ecc_send+0x6e>
   2acd4:	2103      	movs	r1, #3
   2acd6:	3008      	adds	r0, #8
   2acd8:	f01d f8b3 	bl	47e42 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2acdc:	68a0      	ldr	r0, [r4, #8]
   2acde:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2ace0:	f7ff fe8c 	bl	2a9fc <le_gen_dhkey>
   2ace4:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2ace6:	4620      	mov	r0, r4
   2ace8:	f012 fb52 	bl	3d390 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2acec:	4631      	mov	r1, r6
   2acee:	4628      	mov	r0, r5
   2acf0:	e7da      	b.n	2aca8 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2acf2:	78da      	ldrb	r2, [r3, #3]
   2acf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2acf8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2acfa:	791a      	ldrb	r2, [r3, #4]
   2acfc:	f022 0201 	bic.w	r2, r2, #1
   2ad00:	711a      	strb	r2, [r3, #4]
}
   2ad02:	e7aa      	b.n	2ac5a <bt_hci_ecc_send+0x26>
   2ad04:	20000000 	.word	0x20000000
   2ad08:	20001c7c 	.word	0x20001c7c
   2ad0c:	20000be4 	.word	0x20000be4

0002ad10 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2ad10:	b510      	push	{r4, lr}
   2ad12:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2ad14:	4c0c      	ldr	r4, [pc, #48]	; (2ad48 <bt_hci_ecc_init+0x38>)
   2ad16:	490d      	ldr	r1, [pc, #52]	; (2ad4c <bt_hci_ecc_init+0x3c>)
   2ad18:	2200      	movs	r2, #0
   2ad1a:	2300      	movs	r3, #0
   2ad1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2ad20:	2300      	movs	r3, #0
   2ad22:	220a      	movs	r2, #10
   2ad24:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2ad28:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2ad2c:	9300      	str	r3, [sp, #0]
   2ad2e:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2ad32:	4b07      	ldr	r3, [pc, #28]	; (2ad50 <bt_hci_ecc_init+0x40>)
   2ad34:	4620      	mov	r0, r4
   2ad36:	f016 fbaf 	bl	41498 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2ad3a:	4906      	ldr	r1, [pc, #24]	; (2ad54 <bt_hci_ecc_init+0x44>)
   2ad3c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2ad3e:	b008      	add	sp, #32
   2ad40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ad44:	f01d bfc6 	b.w	48cd4 <z_impl_k_thread_name_set>
   2ad48:	20000eb0 	.word	0x20000eb0
   2ad4c:	20003f18 	.word	0x20003f18
   2ad50:	0002aa95 	.word	0x0002aa95
   2ad54:	0004b6d3 	.word	0x0004b6d3

0002ad58 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2ad58:	4903      	ldr	r1, [pc, #12]	; (2ad68 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2ad5a:	4804      	ldr	r0, [pc, #16]	; (2ad6c <save_id+0x14>)
   2ad5c:	79ca      	ldrb	r2, [r1, #7]
   2ad5e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2ad62:	f7fe be6b 	b.w	29a3c <settings_save_one>
   2ad66:	bf00      	nop
   2ad68:	20000000 	.word	0x20000000
   2ad6c:	0004b6fa 	.word	0x0004b6fa

0002ad70 <set>:
{
   2ad70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ad72:	4616      	mov	r6, r2
   2ad74:	461f      	mov	r7, r3
	if (!name) {
   2ad76:	4604      	mov	r4, r0
   2ad78:	b920      	cbnz	r0, 2ad84 <set+0x14>
		return -ENOENT;
   2ad7a:	f06f 0401 	mvn.w	r4, #1
}
   2ad7e:	4620      	mov	r0, r4
   2ad80:	b003      	add	sp, #12
   2ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2ad84:	a901      	add	r1, sp, #4
   2ad86:	f018 fdd0 	bl	4392a <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2ad8a:	4911      	ldr	r1, [pc, #68]	; (2add0 <set+0x60>)
	len = settings_name_next(name, &next);
   2ad8c:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2ad8e:	4620      	mov	r0, r4
   2ad90:	f01a f874 	bl	44e7c <strncmp>
   2ad94:	4604      	mov	r4, r0
   2ad96:	2800      	cmp	r0, #0
   2ad98:	d1ef      	bne.n	2ad7a <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ad9a:	f3bf 8f5b 	dmb	ish
   2ad9e:	4d0d      	ldr	r5, [pc, #52]	; (2add4 <set+0x64>)
   2ada0:	682b      	ldr	r3, [r5, #0]
   2ada2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2ada6:	075b      	lsls	r3, r3, #29
   2ada8:	d4e9      	bmi.n	2ad7e <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2adaa:	3dcc      	subs	r5, #204	; 0xcc
   2adac:	2207      	movs	r2, #7
   2adae:	4629      	mov	r1, r5
   2adb0:	4638      	mov	r0, r7
   2adb2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2adb4:	2806      	cmp	r0, #6
   2adb6:	d806      	bhi.n	2adc6 <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2adb8:	2207      	movs	r2, #7
   2adba:	4621      	mov	r1, r4
   2adbc:	4628      	mov	r0, r5
   2adbe:	f01a f88a 	bl	44ed6 <memset>
			bt_dev.id_count = 0U;
   2adc2:	71ec      	strb	r4, [r5, #7]
   2adc4:	e7db      	b.n	2ad7e <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2adc6:	2307      	movs	r3, #7
   2adc8:	fbb0 f0f3 	udiv	r0, r0, r3
   2adcc:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2adce:	e7d6      	b.n	2ad7e <set+0xe>
   2add0:	0004b4f6 	.word	0x0004b4f6
   2add4:	200000cc 	.word	0x200000cc

0002add8 <bt_settings_encode_key>:
{
   2add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2addc:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2adde:	799c      	ldrb	r4, [r3, #6]
{
   2ade0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2ade4:	795d      	ldrb	r5, [r3, #5]
   2ade6:	791e      	ldrb	r6, [r3, #4]
   2ade8:	78df      	ldrb	r7, [r3, #3]
   2adea:	f893 c002 	ldrb.w	ip, [r3, #2]
   2adee:	f893 e001 	ldrb.w	lr, [r3, #1]
   2adf2:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2adf4:	f1b8 0f00 	cmp.w	r8, #0
   2adf8:	d00e      	beq.n	2ae18 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2adfa:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2adfe:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2ae02:	4613      	mov	r3, r2
   2ae04:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2ae08:	e9cd 4500 	strd	r4, r5, [sp]
   2ae0c:	4a08      	ldr	r2, [pc, #32]	; (2ae30 <bt_settings_encode_key+0x58>)
   2ae0e:	f017 ff8c 	bl	42d2a <snprintk>
}
   2ae12:	b008      	add	sp, #32
   2ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2ae18:	e9cd e305 	strd	lr, r3, [sp, #20]
   2ae1c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2ae20:	4613      	mov	r3, r2
   2ae22:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2ae26:	4a03      	ldr	r2, [pc, #12]	; (2ae34 <bt_settings_encode_key+0x5c>)
   2ae28:	9400      	str	r4, [sp, #0]
   2ae2a:	f017 ff7e 	bl	42d2a <snprintk>
}
   2ae2e:	e7f0      	b.n	2ae12 <bt_settings_encode_key+0x3a>
   2ae30:	0004b700 	.word	0x0004b700
   2ae34:	0004b724 	.word	0x0004b724

0002ae38 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2ae38:	4801      	ldr	r0, [pc, #4]	; (2ae40 <bt_settings_save_id+0x8>)
   2ae3a:	f016 bedb 	b.w	41bf4 <k_work_submit>
   2ae3e:	bf00      	nop
   2ae40:	2000036c 	.word	0x2000036c

0002ae44 <commit>:
}

static int commit(void)
{
   2ae44:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2ae46:	4c15      	ldr	r4, [pc, #84]	; (2ae9c <commit+0x58>)
   2ae48:	79e3      	ldrb	r3, [r4, #7]
   2ae4a:	b1e3      	cbz	r3, 2ae86 <commit+0x42>
   2ae4c:	f3bf 8f5b 	dmb	ish
   2ae50:	4c13      	ldr	r4, [pc, #76]	; (2aea0 <commit+0x5c>)
   2ae52:	6823      	ldr	r3, [r4, #0]
   2ae54:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ae58:	079b      	lsls	r3, r3, #30
   2ae5a:	d401      	bmi.n	2ae60 <commit+0x1c>
		bt_finalize_init();
   2ae5c:	f000 fd54 	bl	2b908 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ae60:	f3bf 8f5b 	dmb	ish
   2ae64:	e854 0f00 	ldrex	r0, [r4]
   2ae68:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   2ae6c:	e844 3200 	strex	r2, r3, [r4]
   2ae70:	2a00      	cmp	r2, #0
   2ae72:	d1f7      	bne.n	2ae64 <commit+0x20>
   2ae74:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2ae78:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2ae7c:	d00d      	beq.n	2ae9a <commit+0x56>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   2ae7e:	f7ff ffdb 	bl	2ae38 <bt_settings_save_id>
	}

	return 0;
   2ae82:	2000      	movs	r0, #0
   2ae84:	e009      	b.n	2ae9a <commit+0x56>
		err = bt_setup_public_id_addr();
   2ae86:	f000 ffe3 	bl	2be50 <bt_setup_public_id_addr>
		if (err) {
   2ae8a:	b930      	cbnz	r0, 2ae9a <commit+0x56>
	if (!bt_dev.id_count) {
   2ae8c:	79e3      	ldrb	r3, [r4, #7]
   2ae8e:	2b00      	cmp	r3, #0
   2ae90:	d1dc      	bne.n	2ae4c <commit+0x8>
		err = bt_setup_random_id_addr();
   2ae92:	f001 f81d 	bl	2bed0 <bt_setup_random_id_addr>
		if (err) {
   2ae96:	2800      	cmp	r0, #0
   2ae98:	d0d8      	beq.n	2ae4c <commit+0x8>
}
   2ae9a:	bd10      	pop	{r4, pc}
   2ae9c:	20000000 	.word	0x20000000
   2aea0:	200000cc 	.word	0x200000cc

0002aea4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2aea4:	b430      	push	{r4, r5}
   2aea6:	4603      	mov	r3, r0
   2aea8:	4608      	mov	r0, r1
	switch (src->type) {
   2aeaa:	781a      	ldrb	r2, [r3, #0]
   2aeac:	2a01      	cmp	r2, #1
   2aeae:	d013      	beq.n	2aed8 <uuid_to_uuid128+0x34>
   2aeb0:	2a02      	cmp	r2, #2
   2aeb2:	d026      	beq.n	2af02 <uuid_to_uuid128+0x5e>
   2aeb4:	b972      	cbnz	r2, 2aed4 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2aeb6:	4a15      	ldr	r2, [pc, #84]	; (2af0c <uuid_to_uuid128+0x68>)
   2aeb8:	f102 0410 	add.w	r4, r2, #16
   2aebc:	f852 5b04 	ldr.w	r5, [r2], #4
   2aec0:	f841 5b04 	str.w	r5, [r1], #4
   2aec4:	42a2      	cmp	r2, r4
   2aec6:	d1f9      	bne.n	2aebc <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2aec8:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2aeca:	7812      	ldrb	r2, [r2, #0]
   2aecc:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2aece:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2aed0:	0a1b      	lsrs	r3, r3, #8
   2aed2:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2aed4:	bc30      	pop	{r4, r5}
   2aed6:	4770      	bx	lr
		*dst = uuid128_base;
   2aed8:	4a0c      	ldr	r2, [pc, #48]	; (2af0c <uuid_to_uuid128+0x68>)
   2aeda:	f102 0410 	add.w	r4, r2, #16
   2aede:	f852 5b04 	ldr.w	r5, [r2], #4
   2aee2:	f841 5b04 	str.w	r5, [r1], #4
   2aee6:	42a2      	cmp	r2, r4
   2aee8:	d1f9      	bne.n	2aede <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2aeea:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2aeec:	7812      	ldrb	r2, [r2, #0]
   2aeee:	700a      	strb	r2, [r1, #0]
   2aef0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2aef4:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2aef6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2aef8:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2aefa:	0a1b      	lsrs	r3, r3, #8
   2aefc:	7382      	strb	r2, [r0, #14]
   2aefe:	7403      	strb	r3, [r0, #16]
}
   2af00:	e7e8      	b.n	2aed4 <uuid_to_uuid128+0x30>
}
   2af02:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2af04:	2211      	movs	r2, #17
   2af06:	4619      	mov	r1, r3
   2af08:	f019 bfda 	b.w	44ec0 <memcpy>
   2af0c:	0004b745 	.word	0x0004b745

0002af10 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2af10:	b538      	push	{r3, r4, r5, lr}
   2af12:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2af14:	4805      	ldr	r0, [pc, #20]	; (2af2c <bt_buf_get_rx+0x1c>)
   2af16:	f01c ff13 	bl	47d40 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2af1a:	4604      	mov	r4, r0
   2af1c:	b120      	cbz	r0, 2af28 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2af1e:	2100      	movs	r1, #0
   2af20:	3008      	adds	r0, #8
   2af22:	f01c ff2c 	bl	47d7e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2af26:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2af28:	4620      	mov	r0, r4
   2af2a:	bd38      	pop	{r3, r4, r5, pc}
   2af2c:	20000d24 	.word	0x20000d24

0002af30 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2af30:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2af32:	490b      	ldr	r1, [pc, #44]	; (2af60 <bt_buf_get_cmd_complete+0x30>)
{
   2af34:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2af36:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2af3a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2af3c:	b920      	cbnz	r0, 2af48 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2af3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2af42:	2001      	movs	r0, #1
   2af44:	f7ff bfe4 	b.w	2af10 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2af48:	f01c ff2a 	bl	47da0 <net_buf_ref>
   2af4c:	2301      	movs	r3, #1
		buf->len = 0U;
   2af4e:	2100      	movs	r1, #0
   2af50:	7503      	strb	r3, [r0, #20]
   2af52:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2af54:	4604      	mov	r4, r0
   2af56:	3008      	adds	r0, #8
   2af58:	f01c ff11 	bl	47d7e <net_buf_simple_reserve>
}
   2af5c:	4620      	mov	r0, r4
   2af5e:	bd10      	pop	{r4, pc}
   2af60:	20000000 	.word	0x20000000

0002af64 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2af64:	b570      	push	{r4, r5, r6, lr}
   2af66:	4604      	mov	r4, r0
	switch (evt) {
   2af68:	2c0f      	cmp	r4, #15
{
   2af6a:	460d      	mov	r5, r1
   2af6c:	4610      	mov	r0, r2
   2af6e:	4619      	mov	r1, r3
	switch (evt) {
   2af70:	d805      	bhi.n	2af7e <bt_buf_get_evt+0x1a>
   2af72:	2c0d      	cmp	r4, #13
   2af74:	d912      	bls.n	2af9c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2af76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2af7a:	f7ff bfd9 	b.w	2af30 <bt_buf_get_cmd_complete>
	switch (evt) {
   2af7e:	2c13      	cmp	r4, #19
   2af80:	d10c      	bne.n	2af9c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   2af82:	480b      	ldr	r0, [pc, #44]	; (2afb0 <bt_buf_get_evt+0x4c>)
   2af84:	f01c fedc 	bl	47d40 <net_buf_alloc_fixed>
			if (buf) {
   2af88:	4604      	mov	r4, r0
   2af8a:	b128      	cbz	r0, 2af98 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   2af8c:	2100      	movs	r1, #0
   2af8e:	3008      	adds	r0, #8
   2af90:	f01c fef5 	bl	47d7e <net_buf_simple_reserve>
   2af94:	2301      	movs	r3, #1
   2af96:	7523      	strb	r3, [r4, #20]
}
   2af98:	4620      	mov	r0, r4
   2af9a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   2af9c:	4602      	mov	r2, r0
   2af9e:	460b      	mov	r3, r1
		if (discardable) {
   2afa0:	b10d      	cbz	r5, 2afa6 <bt_buf_get_evt+0x42>
   2afa2:	4804      	ldr	r0, [pc, #16]	; (2afb4 <bt_buf_get_evt+0x50>)
   2afa4:	e7ee      	b.n	2af84 <bt_buf_get_evt+0x20>
}
   2afa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2afaa:	2001      	movs	r0, #1
   2afac:	f7ff bfb0 	b.w	2af10 <bt_buf_get_rx>
   2afb0:	20000d50 	.word	0x20000d50
   2afb4:	20000ca0 	.word	0x20000ca0

0002afb8 <hci_disconn_complete_prio>:
{
   2afb8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2afba:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   2afbc:	781a      	ldrb	r2, [r3, #0]
   2afbe:	b972      	cbnz	r2, 2afde <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2afc0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   2afc4:	4620      	mov	r0, r4
   2afc6:	f001 fceb 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   2afca:	4605      	mov	r5, r0
   2afcc:	b940      	cbnz	r0, 2afe0 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   2afce:	4b08      	ldr	r3, [pc, #32]	; (2aff0 <hci_disconn_complete_prio+0x38>)
   2afd0:	881a      	ldrh	r2, [r3, #0]
   2afd2:	b922      	cbnz	r2, 2afde <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2afd4:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2afd8:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   2afdc:	8018      	strh	r0, [r3, #0]
}
   2afde:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2afe0:	2101      	movs	r1, #1
   2afe2:	f001 fce5 	bl	2c9b0 <bt_conn_set_state>
	bt_conn_unref(conn);
   2afe6:	4628      	mov	r0, r5
}
   2afe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2afec:	f01a bf19 	b.w	45e22 <bt_conn_unref>
   2aff0:	20003b2c 	.word	0x20003b2c

0002aff4 <hci_le_meta_event>:
{
   2aff4:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2aff6:	2101      	movs	r1, #1
   2aff8:	4604      	mov	r4, r0
   2affa:	3008      	adds	r0, #8
   2affc:	f01c ff29 	bl	47e52 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2b000:	4621      	mov	r1, r4
   2b002:	4a03      	ldr	r2, [pc, #12]	; (2b010 <hci_le_meta_event+0x1c>)
   2b004:	7800      	ldrb	r0, [r0, #0]
}
   2b006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2b00a:	230a      	movs	r3, #10
   2b00c:	f01a b8af 	b.w	4516e <handle_event>
   2b010:	0004a120 	.word	0x0004a120

0002b014 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2b014:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2b016:	4c0c      	ldr	r4, [pc, #48]	; (2b048 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2b018:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2b01a:	2205      	movs	r2, #5
   2b01c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2b020:	f001 fec0 	bl	2cda4 <bt_conn_lookup_state_le>
		if (!conn) {
   2b024:	b970      	cbnz	r0, 2b044 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2b026:	4b09      	ldr	r3, [pc, #36]	; (2b04c <find_pending_connect.part.0+0x38>)
   2b028:	6818      	ldr	r0, [r3, #0]
   2b02a:	889a      	ldrh	r2, [r3, #4]
   2b02c:	9000      	str	r0, [sp, #0]
   2b02e:	799b      	ldrb	r3, [r3, #6]
   2b030:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2b034:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2b038:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2b03c:	2204      	movs	r2, #4
   2b03e:	4669      	mov	r1, sp
   2b040:	f001 feb0 	bl	2cda4 <bt_conn_lookup_state_le>
}
   2b044:	b002      	add	sp, #8
   2b046:	bd10      	pop	{r4, pc}
   2b048:	20000000 	.word	0x20000000
   2b04c:	00049bee 	.word	0x00049bee

0002b050 <hci_cmd_done>:
{
   2b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b052:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2b054:	7990      	ldrb	r0, [r2, #6]
{
   2b056:	460e      	mov	r6, r1
   2b058:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2b05a:	f012 f8d5 	bl	3d208 <net_buf_pool_get>
   2b05e:	4b2d      	ldr	r3, [pc, #180]	; (2b114 <hci_cmd_done+0xc4>)
   2b060:	4283      	cmp	r3, r0
   2b062:	d155      	bne.n	2b110 <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
   2b064:	4620      	mov	r0, r4
   2b066:	f012 f8d7 	bl	3d218 <net_buf_id>
   2b06a:	4d2b      	ldr	r5, [pc, #172]	; (2b118 <hci_cmd_done+0xc8>)
   2b06c:	230c      	movs	r3, #12
   2b06e:	fb03 5000 	mla	r0, r3, r0, r5
   2b072:	8843      	ldrh	r3, [r0, #2]
   2b074:	42bb      	cmp	r3, r7
   2b076:	d14b      	bne.n	2b110 <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
   2b078:	4f28      	ldr	r7, [pc, #160]	; (2b11c <hci_cmd_done+0xcc>)
   2b07a:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2b07e:	b120      	cbz	r0, 2b08a <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2b080:	f012 f986 	bl	3d390 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2b084:	2300      	movs	r3, #0
   2b086:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2b08a:	4620      	mov	r0, r4
   2b08c:	f012 f8c4 	bl	3d218 <net_buf_id>
   2b090:	270c      	movs	r7, #12
   2b092:	fb07 5000 	mla	r0, r7, r0, r5
   2b096:	6843      	ldr	r3, [r0, #4]
   2b098:	b1a3      	cbz	r3, 2b0c4 <hci_cmd_done+0x74>
   2b09a:	b99e      	cbnz	r6, 2b0c4 <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2b09c:	4620      	mov	r0, r4
   2b09e:	f012 f8bb 	bl	3d218 <net_buf_id>
   2b0a2:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b0a6:	2301      	movs	r3, #1
   2b0a8:	6847      	ldr	r7, [r0, #4]
   2b0aa:	e9d7 2000 	ldrd	r2, r0, [r7]
   2b0ae:	f000 011f 	and.w	r1, r0, #31
   2b0b2:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
   2b0b6:	7a3b      	ldrb	r3, [r7, #8]
   2b0b8:	0940      	lsrs	r0, r0, #5
   2b0ba:	b1d3      	cbz	r3, 2b0f2 <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b0bc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   2b0c0:	f01a f882 	bl	451c8 <atomic_or>
	if (cmd(buf)->sync) {
   2b0c4:	4620      	mov	r0, r4
   2b0c6:	f012 f8a7 	bl	3d218 <net_buf_id>
   2b0ca:	270c      	movs	r7, #12
   2b0cc:	fb07 5000 	mla	r0, r7, r0, r5
   2b0d0:	6883      	ldr	r3, [r0, #8]
   2b0d2:	b1eb      	cbz	r3, 2b110 <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
   2b0d4:	4620      	mov	r0, r4
   2b0d6:	f012 f89f 	bl	3d218 <net_buf_id>
   2b0da:	4378      	muls	r0, r7
   2b0dc:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2b0de:	4620      	mov	r0, r4
   2b0e0:	f012 f89a 	bl	3d218 <net_buf_id>
   2b0e4:	fb07 5500 	mla	r5, r7, r0, r5
   2b0e8:	68a8      	ldr	r0, [r5, #8]
}
   2b0ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2b0ee:	f016 bc15 	b.w	4191c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b0f2:	43cb      	mvns	r3, r1
   2b0f4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   2b0f8:	f3bf 8f5b 	dmb	ish
   2b0fc:	e852 1f00 	ldrex	r1, [r2]
   2b100:	4019      	ands	r1, r3
   2b102:	e842 1000 	strex	r0, r1, [r2]
   2b106:	2800      	cmp	r0, #0
   2b108:	d1f8      	bne.n	2b0fc <hci_cmd_done+0xac>
   2b10a:	f3bf 8f5b 	dmb	ish
   2b10e:	e7d9      	b.n	2b0c4 <hci_cmd_done+0x74>
   2b110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b112:	bf00      	nop
   2b114:	20000cf8 	.word	0x20000cf8
   2b118:	20001c84 	.word	0x20001c84
   2b11c:	20000000 	.word	0x20000000

0002b120 <hci_cmd_status>:
{
   2b120:	b538      	push	{r3, r4, r5, lr}
   2b122:	2104      	movs	r1, #4
   2b124:	4604      	mov	r4, r0
   2b126:	3008      	adds	r0, #8
   2b128:	f01c fe93 	bl	47e52 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2b12c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2b12e:	7801      	ldrb	r1, [r0, #0]
   2b130:	8840      	ldrh	r0, [r0, #2]
   2b132:	4622      	mov	r2, r4
   2b134:	f7ff ff8c 	bl	2b050 <hci_cmd_done>
	if (ncmd) {
   2b138:	b125      	cbz	r5, 2b144 <hci_cmd_status+0x24>
   2b13a:	4803      	ldr	r0, [pc, #12]	; (2b148 <hci_cmd_status+0x28>)
}
   2b13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b140:	f016 bbec 	b.w	4191c <z_impl_k_sem_give>
   2b144:	bd38      	pop	{r3, r4, r5, pc}
   2b146:	bf00      	nop
   2b148:	20000120 	.word	0x20000120

0002b14c <hci_cmd_complete>:
{
   2b14c:	b538      	push	{r3, r4, r5, lr}
   2b14e:	2103      	movs	r1, #3
   2b150:	4604      	mov	r4, r0
   2b152:	3008      	adds	r0, #8
   2b154:	f01c fe7d 	bl	47e52 <net_buf_simple_pull_mem>
	status = buf->data[0];
   2b158:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2b15a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2b15c:	7819      	ldrb	r1, [r3, #0]
   2b15e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2b162:	4622      	mov	r2, r4
   2b164:	f7ff ff74 	bl	2b050 <hci_cmd_done>
	if (ncmd) {
   2b168:	b125      	cbz	r5, 2b174 <hci_cmd_complete+0x28>
   2b16a:	4803      	ldr	r0, [pc, #12]	; (2b178 <hci_cmd_complete+0x2c>)
}
   2b16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b170:	f016 bbd4 	b.w	4191c <z_impl_k_sem_give>
   2b174:	bd38      	pop	{r3, r4, r5, pc}
   2b176:	bf00      	nop
   2b178:	20000120 	.word	0x20000120

0002b17c <hci_tx_thread>:
{
   2b17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2b180:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2b28c <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   2b184:	f8df a108 	ldr.w	sl, [pc, #264]	; 2b290 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   2b188:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2b18c:	4841      	ldr	r0, [pc, #260]	; (2b294 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   2b18e:	f36f 3352 	bfc	r3, #13, #6
   2b192:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2b196:	f001 fbcf 	bl	2c938 <bt_conn_prepare_events>
   2b19a:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2b19c:	483b      	ldr	r0, [pc, #236]	; (2b28c <hci_tx_thread+0x110>)
   2b19e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b1a6:	4629      	mov	r1, r5
   2b1a8:	f017 fb1a 	bl	427e0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2b1ac:	b160      	cbz	r0, 2b1c8 <hci_tx_thread+0x4c>
   2b1ae:	493a      	ldr	r1, [pc, #232]	; (2b298 <hci_tx_thread+0x11c>)
   2b1b0:	483a      	ldr	r0, [pc, #232]	; (2b29c <hci_tx_thread+0x120>)
   2b1b2:	f640 1393 	movw	r3, #2451	; 0x993
   2b1b6:	4652      	mov	r2, sl
   2b1b8:	f017 fdaa 	bl	42d10 <printk>
   2b1bc:	4040      	eors	r0, r0
   2b1be:	f380 8811 	msr	BASEPRI, r0
   2b1c2:	f04f 0003 	mov.w	r0, #3
   2b1c6:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2b1c8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2b2a0 <hci_tx_thread+0x124>
{
   2b1cc:	4e2f      	ldr	r6, [pc, #188]	; (2b28c <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   2b1ce:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   2b1d2:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
   2b1d6:	b915      	cbnz	r5, 2b1de <hci_tx_thread+0x62>
	z_impl_k_yield();
   2b1d8:	f016 fffc 	bl	421d4 <z_impl_k_yield>
	while (1) {
   2b1dc:	e7d4      	b.n	2b188 <hci_tx_thread+0xc>
		switch (ev->state) {
   2b1de:	68f3      	ldr	r3, [r6, #12]
   2b1e0:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2b1e4:	2b04      	cmp	r3, #4
   2b1e6:	d147      	bne.n	2b278 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2b1e8:	7b33      	ldrb	r3, [r6, #12]
   2b1ea:	2b00      	cmp	r3, #0
   2b1ec:	d147      	bne.n	2b27e <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2b1ee:	2200      	movs	r2, #0
   2b1f0:	2300      	movs	r3, #0
   2b1f2:	4648      	mov	r0, r9
   2b1f4:	f01c fda9 	bl	47d4a <net_buf_get>
	BT_ASSERT(buf);
   2b1f8:	4604      	mov	r4, r0
   2b1fa:	b960      	cbnz	r0, 2b216 <hci_tx_thread+0x9a>
   2b1fc:	4929      	ldr	r1, [pc, #164]	; (2b2a4 <hci_tx_thread+0x128>)
   2b1fe:	4827      	ldr	r0, [pc, #156]	; (2b29c <hci_tx_thread+0x120>)
   2b200:	f640 132a 	movw	r3, #2346	; 0x92a
   2b204:	4652      	mov	r2, sl
   2b206:	f017 fd83 	bl	42d10 <printk>
   2b20a:	4040      	eors	r0, r0
   2b20c:	f380 8811 	msr	BASEPRI, r0
   2b210:	f04f 0003 	mov.w	r0, #3
   2b214:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   2b216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b21a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b21e:	4658      	mov	r0, fp
   2b220:	f016 fba2 	bl	41968 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   2b224:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2b228:	b120      	cbz	r0, 2b234 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   2b22a:	f012 f8b1 	bl	3d390 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2b22e:	2300      	movs	r3, #0
   2b230:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2b234:	4620      	mov	r0, r4
   2b236:	f01c fdb3 	bl	47da0 <net_buf_ref>
   2b23a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2b23e:	4620      	mov	r0, r4
   2b240:	f7ff fcf8 	bl	2ac34 <bt_hci_ecc_send>
	if (err) {
   2b244:	b1c0      	cbz	r0, 2b278 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   2b246:	4818      	ldr	r0, [pc, #96]	; (2b2a8 <hci_tx_thread+0x12c>)
   2b248:	f016 fb68 	bl	4191c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2b24c:	4620      	mov	r0, r4
   2b24e:	f011 ffe3 	bl	3d218 <net_buf_id>
   2b252:	4b16      	ldr	r3, [pc, #88]	; (2b2ac <hci_tx_thread+0x130>)
   2b254:	220c      	movs	r2, #12
   2b256:	fb02 3000 	mla	r0, r2, r0, r3
   2b25a:	211f      	movs	r1, #31
   2b25c:	8840      	ldrh	r0, [r0, #2]
   2b25e:	4622      	mov	r2, r4
   2b260:	f7ff fef6 	bl	2b050 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2b264:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2b268:	f012 f892 	bl	3d390 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2b26c:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2b26e:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2b270:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2b274:	f012 f88c 	bl	3d390 <net_buf_unref>
	for (; count; ev++, count--) {
   2b278:	3614      	adds	r6, #20
   2b27a:	3d01      	subs	r5, #1
   2b27c:	e7ab      	b.n	2b1d6 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2b27e:	2b01      	cmp	r3, #1
   2b280:	d1fa      	bne.n	2b278 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   2b282:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2b284:	3838      	subs	r0, #56	; 0x38
   2b286:	f001 fe83 	bl	2cf90 <bt_conn_process_tx>
   2b28a:	e7f5      	b.n	2b278 <hci_tx_thread+0xfc>
   2b28c:	2000037c 	.word	0x2000037c
   2b290:	0004b756 	.word	0x0004b756
   2b294:	20000390 	.word	0x20000390
   2b298:	0004b78a 	.word	0x0004b78a
   2b29c:	0004b793 	.word	0x0004b793
   2b2a0:	2000013c 	.word	0x2000013c
   2b2a4:	0004b7b0 	.word	0x0004b7b0
   2b2a8:	20000120 	.word	0x20000120
   2b2ac:	20001c84 	.word	0x20001c84

0002b2b0 <bt_hci_cmd_state_set_init>:
{
   2b2b0:	b510      	push	{r4, lr}
	state->bit = bit;
   2b2b2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2b2b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2b2ba:	720b      	strb	r3, [r1, #8]
{
   2b2bc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2b2be:	f011 ffab 	bl	3d218 <net_buf_id>
   2b2c2:	4b03      	ldr	r3, [pc, #12]	; (2b2d0 <bt_hci_cmd_state_set_init+0x20>)
   2b2c4:	220c      	movs	r2, #12
   2b2c6:	fb02 3300 	mla	r3, r2, r0, r3
   2b2ca:	605c      	str	r4, [r3, #4]
}
   2b2cc:	bd10      	pop	{r4, pc}
   2b2ce:	bf00      	nop
   2b2d0:	20001c84 	.word	0x20001c84

0002b2d4 <bt_hci_cmd_create>:
{
   2b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2b2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b2e0:	4606      	mov	r6, r0
   2b2e2:	4817      	ldr	r0, [pc, #92]	; (2b340 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2b2e4:	4d17      	ldr	r5, [pc, #92]	; (2b344 <bt_hci_cmd_create+0x70>)
{
   2b2e6:	460f      	mov	r7, r1
   2b2e8:	f01c fd2a 	bl	47d40 <net_buf_alloc_fixed>
   2b2ec:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2b2ee:	f100 0a08 	add.w	sl, r0, #8
   2b2f2:	2100      	movs	r1, #0
   2b2f4:	f04f 0800 	mov.w	r8, #0
   2b2f8:	4650      	mov	r0, sl
   2b2fa:	f01c fd40 	bl	47d7e <net_buf_simple_reserve>
   2b2fe:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2b302:	4620      	mov	r0, r4
   2b304:	f011 ff88 	bl	3d218 <net_buf_id>
   2b308:	f04f 090c 	mov.w	r9, #12
   2b30c:	fb09 5000 	mla	r0, r9, r0, r5
   2b310:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2b312:	4620      	mov	r0, r4
   2b314:	f011 ff80 	bl	3d218 <net_buf_id>
   2b318:	fb09 5000 	mla	r0, r9, r0, r5
   2b31c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2b320:	4620      	mov	r0, r4
   2b322:	f011 ff79 	bl	3d218 <net_buf_id>
   2b326:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2b32a:	2103      	movs	r1, #3
   2b32c:	f8c5 8004 	str.w	r8, [r5, #4]
   2b330:	4650      	mov	r0, sl
   2b332:	f01c fd67 	bl	47e04 <net_buf_simple_add>
	hdr->param_len = param_len;
   2b336:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2b338:	8006      	strh	r6, [r0, #0]
}
   2b33a:	4620      	mov	r0, r4
   2b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b340:	20000cf8 	.word	0x20000cf8
   2b344:	20001c84 	.word	0x20001c84

0002b348 <bt_hci_cmd_send>:
{
   2b348:	b538      	push	{r3, r4, r5, lr}
   2b34a:	4605      	mov	r5, r0
	if (!buf) {
   2b34c:	460c      	mov	r4, r1
   2b34e:	b919      	cbnz	r1, 2b358 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2b350:	f7ff ffc0 	bl	2b2d4 <bt_hci_cmd_create>
		if (!buf) {
   2b354:	4604      	mov	r4, r0
   2b356:	b198      	cbz	r0, 2b380 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2b358:	f640 4335 	movw	r3, #3125	; 0xc35
   2b35c:	429d      	cmp	r5, r3
   2b35e:	d109      	bne.n	2b374 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2b360:	4620      	mov	r0, r4
   2b362:	f7ff fc67 	bl	2ac34 <bt_hci_ecc_send>
		if (err) {
   2b366:	4605      	mov	r5, r0
   2b368:	b110      	cbz	r0, 2b370 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   2b36a:	4620      	mov	r0, r4
   2b36c:	f012 f810 	bl	3d390 <net_buf_unref>
}
   2b370:	4628      	mov	r0, r5
   2b372:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2b374:	4804      	ldr	r0, [pc, #16]	; (2b388 <bt_hci_cmd_send+0x40>)
   2b376:	4621      	mov	r1, r4
   2b378:	f01c fd05 	bl	47d86 <net_buf_put>
	return 0;
   2b37c:	2500      	movs	r5, #0
   2b37e:	e7f7      	b.n	2b370 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2b380:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2b384:	e7f4      	b.n	2b370 <bt_hci_cmd_send+0x28>
   2b386:	bf00      	nop
   2b388:	2000013c 	.word	0x2000013c

0002b38c <bt_hci_cmd_send_sync>:
{
   2b38c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b38e:	4615      	mov	r5, r2
   2b390:	b087      	sub	sp, #28
	if (!buf) {
   2b392:	460c      	mov	r4, r1
   2b394:	b921      	cbnz	r1, 2b3a0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2b396:	f7ff ff9d 	bl	2b2d4 <bt_hci_cmd_create>
		if (!buf) {
   2b39a:	4604      	mov	r4, r0
   2b39c:	2800      	cmp	r0, #0
   2b39e:	d048      	beq.n	2b432 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b3a0:	2201      	movs	r2, #1
   2b3a2:	2100      	movs	r1, #0
   2b3a4:	4668      	mov	r0, sp
   2b3a6:	f01d fd7d 	bl	48ea4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2b3aa:	4620      	mov	r0, r4
   2b3ac:	f011 ff34 	bl	3d218 <net_buf_id>
   2b3b0:	4f21      	ldr	r7, [pc, #132]	; (2b438 <bt_hci_cmd_send_sync+0xac>)
   2b3b2:	230c      	movs	r3, #12
   2b3b4:	fb03 7000 	mla	r0, r3, r0, r7
   2b3b8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2b3bc:	4620      	mov	r0, r4
   2b3be:	f01c fcef 	bl	47da0 <net_buf_ref>
   2b3c2:	4601      	mov	r1, r0
   2b3c4:	481d      	ldr	r0, [pc, #116]	; (2b43c <bt_hci_cmd_send_sync+0xb0>)
   2b3c6:	f01c fcde 	bl	47d86 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2b3ca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2b3ce:	2300      	movs	r3, #0
   2b3d0:	4668      	mov	r0, sp
   2b3d2:	f016 fac9 	bl	41968 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2b3d6:	4606      	mov	r6, r0
   2b3d8:	b180      	cbz	r0, 2b3fc <bt_hci_cmd_send_sync+0x70>
   2b3da:	4a19      	ldr	r2, [pc, #100]	; (2b440 <bt_hci_cmd_send_sync+0xb4>)
   2b3dc:	4919      	ldr	r1, [pc, #100]	; (2b444 <bt_hci_cmd_send_sync+0xb8>)
   2b3de:	481a      	ldr	r0, [pc, #104]	; (2b448 <bt_hci_cmd_send_sync+0xbc>)
   2b3e0:	f240 1331 	movw	r3, #305	; 0x131
   2b3e4:	f017 fc94 	bl	42d10 <printk>
   2b3e8:	4818      	ldr	r0, [pc, #96]	; (2b44c <bt_hci_cmd_send_sync+0xc0>)
   2b3ea:	4631      	mov	r1, r6
   2b3ec:	f017 fc90 	bl	42d10 <printk>
   2b3f0:	4040      	eors	r0, r0
   2b3f2:	f380 8811 	msr	BASEPRI, r0
   2b3f6:	f04f 0003 	mov.w	r0, #3
   2b3fa:	df02      	svc	2
	status = cmd(buf)->status;
   2b3fc:	4620      	mov	r0, r4
   2b3fe:	f011 ff0b 	bl	3d218 <net_buf_id>
   2b402:	230c      	movs	r3, #12
   2b404:	4358      	muls	r0, r3
   2b406:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2b408:	b156      	cbz	r6, 2b420 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2b40a:	4620      	mov	r0, r4
   2b40c:	f011 ffc0 	bl	3d390 <net_buf_unref>
			return -EIO;
   2b410:	2e09      	cmp	r6, #9
   2b412:	bf0c      	ite	eq
   2b414:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   2b418:	f06f 0004 	mvnne.w	r0, #4
}
   2b41c:	b007      	add	sp, #28
   2b41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2b420:	b115      	cbz	r5, 2b428 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2b422:	602c      	str	r4, [r5, #0]
	return 0;
   2b424:	4630      	mov	r0, r6
   2b426:	e7f9      	b.n	2b41c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2b428:	4620      	mov	r0, r4
   2b42a:	f011 ffb1 	bl	3d390 <net_buf_unref>
	return 0;
   2b42e:	4628      	mov	r0, r5
   2b430:	e7f4      	b.n	2b41c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   2b432:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b436:	e7f1      	b.n	2b41c <bt_hci_cmd_send_sync+0x90>
   2b438:	20001c84 	.word	0x20001c84
   2b43c:	2000013c 	.word	0x2000013c
   2b440:	0004b756 	.word	0x0004b756
   2b444:	0004b78a 	.word	0x0004b78a
   2b448:	0004b793 	.word	0x0004b793
   2b44c:	0004b7b4 	.word	0x0004b7b4

0002b450 <bt_get_phy>:
	switch (hci_phy) {
   2b450:	3801      	subs	r0, #1
   2b452:	b2c0      	uxtb	r0, r0
   2b454:	2802      	cmp	r0, #2
   2b456:	bf9a      	itte	ls
   2b458:	4b01      	ldrls	r3, [pc, #4]	; (2b460 <bt_get_phy+0x10>)
   2b45a:	5c18      	ldrbls	r0, [r3, r0]
{
   2b45c:	2000      	movhi	r0, #0
}
   2b45e:	4770      	bx	lr
   2b460:	0004b85d 	.word	0x0004b85d

0002b464 <conn_auto_initiate>:
{
   2b464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2b466:	7b43      	ldrb	r3, [r0, #13]
   2b468:	2b07      	cmp	r3, #7
{
   2b46a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2b46c:	d157      	bne.n	2b51e <conn_auto_initiate+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b46e:	f3bf 8f5b 	dmb	ish
   2b472:	6843      	ldr	r3, [r0, #4]
   2b474:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2b478:	049b      	lsls	r3, r3, #18
   2b47a:	f100 0604 	add.w	r6, r0, #4
   2b47e:	d41b      	bmi.n	2b4b8 <conn_auto_initiate+0x54>
   2b480:	78c3      	ldrb	r3, [r0, #3]
   2b482:	b123      	cbz	r3, 2b48e <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2b484:	4b27      	ldr	r3, [pc, #156]	; (2b524 <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2b486:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2b48a:	071d      	lsls	r5, r3, #28
   2b48c:	d514      	bpl.n	2b4b8 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2b48e:	2102      	movs	r1, #2
   2b490:	f242 0016 	movw	r0, #8214	; 0x2016
   2b494:	f7ff ff1e 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   2b498:	4605      	mov	r5, r0
   2b49a:	b168      	cbz	r0, 2b4b8 <conn_auto_initiate+0x54>
   2b49c:	2102      	movs	r1, #2
   2b49e:	3008      	adds	r0, #8
   2b4a0:	f01c fcb0 	bl	47e04 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b4a4:	8823      	ldrh	r3, [r4, #0]
   2b4a6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2b4a8:	4629      	mov	r1, r5
   2b4aa:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2b4ae:	b004      	add	sp, #16
   2b4b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2b4b4:	f7ff bf48 	b.w	2b348 <bt_hci_cmd_send>
   2b4b8:	f3bf 8f5b 	dmb	ish
   2b4bc:	6863      	ldr	r3, [r4, #4]
   2b4be:	4d19      	ldr	r5, [pc, #100]	; (2b524 <conn_auto_initiate+0xc0>)
   2b4c0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2b4c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2b4c8:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2b4cc:	d111      	bne.n	2b4f2 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2b4ce:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2b4d2:	07d8      	lsls	r0, r3, #31
   2b4d4:	d50d      	bpl.n	2b4f2 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2b4d6:	2302      	movs	r3, #2
   2b4d8:	9100      	str	r1, [sp, #0]
   2b4da:	461a      	mov	r2, r3
   2b4dc:	4620      	mov	r0, r4
   2b4de:	f01a f85c 	bl	4559a <bt_le_set_phy>
		if (!err) {
   2b4e2:	b930      	cbnz	r0, 2b4f2 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b4e4:	2180      	movs	r1, #128	; 0x80
   2b4e6:	4630      	mov	r0, r6
}
   2b4e8:	b004      	add	sp, #16
   2b4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b4ee:	f019 be6b 	b.w	451c8 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2b4f2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2b4f6:	069a      	lsls	r2, r3, #26
   2b4f8:	d511      	bpl.n	2b51e <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2b4fa:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b4fe:	689b      	ldr	r3, [r3, #8]
   2b500:	079b      	lsls	r3, r3, #30
   2b502:	d50c      	bpl.n	2b51e <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2b504:	f10d 010e 	add.w	r1, sp, #14
   2b508:	a803      	add	r0, sp, #12
   2b50a:	f019 fff6 	bl	454fa <hci_le_read_max_data_len>
			if (!err) {
   2b50e:	b930      	cbnz	r0, 2b51e <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
   2b510:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b514:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2b518:	4620      	mov	r0, r4
   2b51a:	f01a f821 	bl	45560 <bt_le_set_data_len>
}
   2b51e:	b004      	add	sp, #16
   2b520:	bd70      	pop	{r4, r5, r6, pc}
   2b522:	bf00      	nop
   2b524:	20000000 	.word	0x20000000

0002b528 <bt_hci_le_enh_conn_complete>:
{
   2b528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b52c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   2b530:	4a6b      	ldr	r2, [pc, #428]	; (2b6e0 <bt_hci_le_enh_conn_complete+0x1b8>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2b532:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   2b536:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   2b538:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   2b53c:	b29b      	uxth	r3, r3
   2b53e:	4299      	cmp	r1, r3
{
   2b540:	4605      	mov	r5, r0
   2b542:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   2b546:	bf08      	it	eq
   2b548:	8016      	strheq	r6, [r2, #0]
{
   2b54a:	b085      	sub	sp, #20
			return true;
   2b54c:	bf08      	it	eq
   2b54e:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   2b550:	f000 faca 	bl	2bae8 <bt_id_pending_keys_update>
	if (evt->status) {
   2b554:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b556:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   2b55a:	b304      	cbz	r4, 2b59e <bt_hci_le_enh_conn_complete+0x76>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b55c:	2c3c      	cmp	r4, #60	; 0x3c
   2b55e:	d159      	bne.n	2b614 <bt_hci_le_enh_conn_complete+0xec>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b560:	f000 fdc4 	bl	2c0ec <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b564:	f3bf 8f5b 	dmb	ish
   2b568:	3010      	adds	r0, #16
   2b56a:	e850 3f00 	ldrex	r3, [r0]
   2b56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2b572:	e840 3200 	strex	r2, r3, [r0]
   2b576:	2a00      	cmp	r2, #0
   2b578:	d1f7      	bne.n	2b56a <bt_hci_le_enh_conn_complete+0x42>
   2b57a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b57e:	2000      	movs	r0, #0
   2b580:	f7ff fd48 	bl	2b014 <find_pending_connect.part.0>
		if (!conn) {
   2b584:	4605      	mov	r5, r0
   2b586:	2800      	cmp	r0, #0
   2b588:	d044      	beq.n	2b614 <bt_hci_le_enh_conn_complete+0xec>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2b58a:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b58c:	2100      	movs	r1, #0
   2b58e:	f001 fa0f 	bl	2c9b0 <bt_conn_set_state>
		bt_conn_unref(conn);
   2b592:	4628      	mov	r0, r5
}
   2b594:	b005      	add	sp, #20
   2b596:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2b59a:	f01a bc42 	b.w	45e22 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b59e:	792b      	ldrb	r3, [r5, #4]
   2b5a0:	3b02      	subs	r3, #2
   2b5a2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2b5a4:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b5a8:	d837      	bhi.n	2b61a <bt_hci_le_enh_conn_complete+0xf2>
	memcpy(dst, src, sizeof(*dst));
   2b5aa:	2207      	movs	r2, #7
   2b5ac:	4649      	mov	r1, r9
   2b5ae:	a802      	add	r0, sp, #8
   2b5b0:	f019 fc86 	bl	44ec0 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2b5b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2b5b8:	2206      	movs	r2, #6
   2b5ba:	3b02      	subs	r3, #2
   2b5bc:	f105 0111 	add.w	r1, r5, #17
   2b5c0:	f10d 0001 	add.w	r0, sp, #1
   2b5c4:	f88d 3008 	strb.w	r3, [sp, #8]
   2b5c8:	f019 fc7a 	bl	44ec0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2b5cc:	2301      	movs	r3, #1
   2b5ce:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b5d2:	78eb      	ldrb	r3, [r5, #3]
   2b5d4:	2b01      	cmp	r3, #1
   2b5d6:	d119      	bne.n	2b60c <bt_hci_le_enh_conn_complete+0xe4>
   2b5d8:	a802      	add	r0, sp, #8
   2b5da:	f7ff fd1b 	bl	2b014 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b5de:	78eb      	ldrb	r3, [r5, #3]
   2b5e0:	2b01      	cmp	r3, #1
   2b5e2:	4604      	mov	r4, r0
   2b5e4:	d111      	bne.n	2b60a <bt_hci_le_enh_conn_complete+0xe2>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b5e6:	f000 fd81 	bl	2c0ec <bt_le_adv_lookup_legacy>
   2b5ea:	f3bf 8f5b 	dmb	ish
   2b5ee:	f100 0310 	add.w	r3, r0, #16
   2b5f2:	e853 2f00 	ldrex	r2, [r3]
   2b5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   2b5fa:	e843 2100 	strex	r1, r2, [r3]
   2b5fe:	2900      	cmp	r1, #0
   2b600:	d1f7      	bne.n	2b5f2 <bt_hci_le_enh_conn_complete+0xca>
   2b602:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2b606:	f01a fb3d 	bl	45c84 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   2b60a:	b9dc      	cbnz	r4, 2b644 <bt_hci_le_enh_conn_complete+0x11c>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2b60c:	211f      	movs	r1, #31
   2b60e:	4640      	mov	r0, r8
   2b610:	f019 ff8b 	bl	4552a <bt_hci_disconnect>
}
   2b614:	b005      	add	sp, #20
   2b616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2b61a:	78eb      	ldrb	r3, [r5, #3]
   2b61c:	2b01      	cmp	r3, #1
   2b61e:	bf04      	itt	eq
   2b620:	4b30      	ldreq	r3, [pc, #192]	; (2b6e4 <bt_hci_le_enh_conn_complete+0x1bc>)
   2b622:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2b626:	4649      	mov	r1, r9
   2b628:	4620      	mov	r0, r4
   2b62a:	f01a f9b3 	bl	45994 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2b62e:	2207      	movs	r2, #7
   2b630:	4601      	mov	r1, r0
   2b632:	a802      	add	r0, sp, #8
   2b634:	f019 fc44 	bl	44ec0 <memcpy>
   2b638:	2207      	movs	r2, #7
   2b63a:	4649      	mov	r1, r9
   2b63c:	4668      	mov	r0, sp
   2b63e:	f019 fc3f 	bl	44ec0 <memcpy>
}
   2b642:	e7c6      	b.n	2b5d2 <bt_hci_le_enh_conn_complete+0xaa>
	conn->handle = handle;
   2b644:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   2b646:	2207      	movs	r2, #7
   2b648:	f820 7b88 	strh.w	r7, [r0], #136
   2b64c:	a902      	add	r1, sp, #8
   2b64e:	f019 fc37 	bl	44ec0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2b652:	7e2a      	ldrb	r2, [r5, #24]
   2b654:	7deb      	ldrb	r3, [r5, #23]
   2b656:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b65a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2b65e:	7eaa      	ldrb	r2, [r5, #26]
   2b660:	7e6b      	ldrb	r3, [r5, #25]
   2b662:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b666:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2b66a:	7f2a      	ldrb	r2, [r5, #28]
   2b66c:	7eeb      	ldrb	r3, [r5, #27]
   2b66e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b672:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2b676:	78eb      	ldrb	r3, [r5, #3]
   2b678:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2b67a:	2200      	movs	r2, #0
   2b67c:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b67e:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2b680:	f240 1201 	movw	r2, #257	; 0x101
   2b684:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b688:	d117      	bne.n	2b6ba <bt_hci_le_enh_conn_complete+0x192>
   2b68a:	2207      	movs	r2, #7
   2b68c:	4669      	mov	r1, sp
   2b68e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2b692:	f019 fc15 	bl	44ec0 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b696:	f000 fd29 	bl	2c0ec <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2b69a:	7a21      	ldrb	r1, [r4, #8]
   2b69c:	4d11      	ldr	r5, [pc, #68]	; (2b6e4 <bt_hci_le_enh_conn_complete+0x1bc>)
   2b69e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   2b6a2:	2207      	movs	r2, #7
   2b6a4:	4429      	add	r1, r5
   2b6a6:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2b6aa:	f019 fc09 	bl	44ec0 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2b6ae:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2b6b2:	065b      	lsls	r3, r3, #25
   2b6b4:	d501      	bpl.n	2b6ba <bt_hci_le_enh_conn_complete+0x192>
			bt_le_adv_resume();
   2b6b6:	f000 fec5 	bl	2c444 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2b6ba:	2107      	movs	r1, #7
   2b6bc:	4620      	mov	r0, r4
   2b6be:	f001 f977 	bl	2c9b0 <bt_conn_set_state>
	if (is_disconnected) {
   2b6c2:	b11e      	cbz	r6, 2b6cc <bt_hci_le_enh_conn_complete+0x1a4>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2b6c4:	2101      	movs	r1, #1
   2b6c6:	4620      	mov	r0, r4
   2b6c8:	f001 f972 	bl	2c9b0 <bt_conn_set_state>
	bt_conn_connected(conn);
   2b6cc:	4620      	mov	r0, r4
   2b6ce:	f01a fbe3 	bl	45e98 <bt_conn_connected>
	conn_auto_initiate(conn);
   2b6d2:	4620      	mov	r0, r4
   2b6d4:	f7ff fec6 	bl	2b464 <conn_auto_initiate>
	bt_conn_unref(conn);
   2b6d8:	4620      	mov	r0, r4
   2b6da:	f01a fba2 	bl	45e22 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b6de:	e799      	b.n	2b614 <bt_hci_le_enh_conn_complete+0xec>
   2b6e0:	20003b2c 	.word	0x20003b2c
   2b6e4:	20000000 	.word	0x20000000

0002b6e8 <bt_security_err_get>:
	switch (hci_err) {
   2b6e8:	2829      	cmp	r0, #41	; 0x29
   2b6ea:	bf9a      	itte	ls
   2b6ec:	4b01      	ldrls	r3, [pc, #4]	; (2b6f4 <bt_security_err_get+0xc>)
   2b6ee:	5c18      	ldrbls	r0, [r3, r0]
{
   2b6f0:	2009      	movhi	r0, #9
}
   2b6f2:	4770      	bx	lr
   2b6f4:	0004b860 	.word	0x0004b860

0002b6f8 <hci_event_prio>:
{
   2b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b6fc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2b6fe:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2b702:	4630      	mov	r0, r6
   2b704:	f01c fbb5 	bl	47e72 <net_buf_simple_headroom>
	state->len = buf->len;
   2b708:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b70c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2b710:	4605      	mov	r5, r0
   2b712:	d80c      	bhi.n	2b72e <hci_event_prio+0x36>
   2b714:	4a1c      	ldr	r2, [pc, #112]	; (2b788 <hci_event_prio+0x90>)
   2b716:	491d      	ldr	r1, [pc, #116]	; (2b78c <hci_event_prio+0x94>)
   2b718:	481d      	ldr	r0, [pc, #116]	; (2b790 <hci_event_prio+0x98>)
   2b71a:	f640 532f 	movw	r3, #3375	; 0xd2f
   2b71e:	f017 faf7 	bl	42d10 <printk>
   2b722:	4040      	eors	r0, r0
   2b724:	f380 8811 	msr	BASEPRI, r0
   2b728:	f04f 0003 	mov.w	r0, #3
   2b72c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b72e:	4630      	mov	r0, r6
   2b730:	2102      	movs	r1, #2
   2b732:	f01c fb8e 	bl	47e52 <net_buf_simple_pull_mem>
   2b736:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b738:	7800      	ldrb	r0, [r0, #0]
   2b73a:	f019 fd06 	bl	4514a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b73e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b740:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b742:	d40c      	bmi.n	2b75e <hci_event_prio+0x66>
   2b744:	4a10      	ldr	r2, [pc, #64]	; (2b788 <hci_event_prio+0x90>)
   2b746:	4913      	ldr	r1, [pc, #76]	; (2b794 <hci_event_prio+0x9c>)
   2b748:	4811      	ldr	r0, [pc, #68]	; (2b790 <hci_event_prio+0x98>)
   2b74a:	f640 5333 	movw	r3, #3379	; 0xd33
   2b74e:	f017 fadf 	bl	42d10 <printk>
   2b752:	4040      	eors	r0, r0
   2b754:	f380 8811 	msr	BASEPRI, r0
   2b758:	f04f 0003 	mov.w	r0, #3
   2b75c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2b75e:	2305      	movs	r3, #5
   2b760:	4a0d      	ldr	r2, [pc, #52]	; (2b798 <hci_event_prio+0xa0>)
   2b762:	7838      	ldrb	r0, [r7, #0]
   2b764:	4621      	mov	r1, r4
   2b766:	f019 fd02 	bl	4516e <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2b76a:	07b3      	lsls	r3, r6, #30
   2b76c:	d507      	bpl.n	2b77e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2b76e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2b770:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2b774:	fa10 f585 	uxtah	r5, r0, r5
   2b778:	60a5      	str	r5, [r4, #8]
}
   2b77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2b77e:	4620      	mov	r0, r4
}
   2b780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2b784:	f011 be04 	b.w	3d390 <net_buf_unref>
   2b788:	0004b756 	.word	0x0004b756
   2b78c:	0004b7d4 	.word	0x0004b7d4
   2b790:	0004b793 	.word	0x0004b793
   2b794:	0004b7ed 	.word	0x0004b7ed
   2b798:	0004a1b0 	.word	0x0004a1b0

0002b79c <bt_recv>:
{
   2b79c:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2b79e:	4d3b      	ldr	r5, [pc, #236]	; (2b88c <bt_recv+0xf0>)
   2b7a0:	682b      	ldr	r3, [r5, #0]
{
   2b7a2:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2b7a4:	b913      	cbnz	r3, 2b7ac <bt_recv+0x10>
	return z_impl_z_current_get();
   2b7a6:	f016 fdb7 	bl	42318 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2b7aa:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2b7ac:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2b7ae:	2b01      	cmp	r3, #1
   2b7b0:	d036      	beq.n	2b820 <bt_recv+0x84>
   2b7b2:	2b03      	cmp	r3, #3
   2b7b4:	d163      	bne.n	2b87e <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b7b6:	89a3      	ldrh	r3, [r4, #12]
   2b7b8:	2b03      	cmp	r3, #3
   2b7ba:	d80c      	bhi.n	2b7d6 <bt_recv+0x3a>
   2b7bc:	4a34      	ldr	r2, [pc, #208]	; (2b890 <bt_recv+0xf4>)
   2b7be:	4935      	ldr	r1, [pc, #212]	; (2b894 <bt_recv+0xf8>)
   2b7c0:	4835      	ldr	r0, [pc, #212]	; (2b898 <bt_recv+0xfc>)
   2b7c2:	f240 13b5 	movw	r3, #437	; 0x1b5
   2b7c6:	f017 faa3 	bl	42d10 <printk>
   2b7ca:	4040      	eors	r0, r0
   2b7cc:	f380 8811 	msr	BASEPRI, r0
   2b7d0:	f04f 0003 	mov.w	r0, #3
   2b7d4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b7d6:	2104      	movs	r1, #4
   2b7d8:	f104 0008 	add.w	r0, r4, #8
   2b7dc:	f01c fb39 	bl	47e52 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b7e0:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2b7e2:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2b7e4:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b7e6:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2b7e8:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2b7ea:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2b7ee:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2b7f0:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2b7f2:	d003      	beq.n	2b7fc <bt_recv+0x60>
	net_buf_unref(buf);
   2b7f4:	4620      	mov	r0, r4
   2b7f6:	f011 fdcb 	bl	3d390 <net_buf_unref>
   2b7fa:	e00f      	b.n	2b81c <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2b7fc:	f001 f8d0 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   2b800:	4605      	mov	r5, r0
   2b802:	2800      	cmp	r0, #0
   2b804:	d0f6      	beq.n	2b7f4 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2b806:	f001 f97b 	bl	2cb00 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2b80a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2b80c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2b80e:	4621      	mov	r1, r4
   2b810:	4628      	mov	r0, r5
   2b812:	f01a fa9e 	bl	45d52 <bt_conn_recv>
	bt_conn_unref(conn);
   2b816:	4628      	mov	r0, r5
   2b818:	f01a fb03 	bl	45e22 <bt_conn_unref>
		return 0;
   2b81c:	2000      	movs	r0, #0
}
   2b81e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b820:	89a3      	ldrh	r3, [r4, #12]
   2b822:	2b01      	cmp	r3, #1
   2b824:	d80c      	bhi.n	2b840 <bt_recv+0xa4>
   2b826:	4a1a      	ldr	r2, [pc, #104]	; (2b890 <bt_recv+0xf4>)
   2b828:	491a      	ldr	r1, [pc, #104]	; (2b894 <bt_recv+0xf8>)
   2b82a:	481b      	ldr	r0, [pc, #108]	; (2b898 <bt_recv+0xfc>)
   2b82c:	f640 1317 	movw	r3, #2327	; 0x917
   2b830:	f017 fa6e 	bl	42d10 <printk>
   2b834:	4040      	eors	r0, r0
   2b836:	f380 8811 	msr	BASEPRI, r0
   2b83a:	f04f 0003 	mov.w	r0, #3
   2b83e:	df02      	svc	2
   2b840:	2102      	movs	r1, #2
   2b842:	f104 0008 	add.w	r0, r4, #8
   2b846:	f01c fb04 	bl	47e52 <net_buf_simple_pull_mem>
   2b84a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2b84c:	7800      	ldrb	r0, [r0, #0]
   2b84e:	f019 fc7c 	bl	4514a <bt_hci_evt_get_flags>
   2b852:	0783      	lsls	r3, r0, #30
   2b854:	d40c      	bmi.n	2b870 <bt_recv+0xd4>
   2b856:	4a0e      	ldr	r2, [pc, #56]	; (2b890 <bt_recv+0xf4>)
   2b858:	4910      	ldr	r1, [pc, #64]	; (2b89c <bt_recv+0x100>)
   2b85a:	480f      	ldr	r0, [pc, #60]	; (2b898 <bt_recv+0xfc>)
   2b85c:	f640 131b 	movw	r3, #2331	; 0x91b
   2b860:	f017 fa56 	bl	42d10 <printk>
   2b864:	4040      	eors	r0, r0
   2b866:	f380 8811 	msr	BASEPRI, r0
   2b86a:	f04f 0003 	mov.w	r0, #3
   2b86e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2b870:	4a0b      	ldr	r2, [pc, #44]	; (2b8a0 <bt_recv+0x104>)
   2b872:	7828      	ldrb	r0, [r5, #0]
   2b874:	2306      	movs	r3, #6
   2b876:	4621      	mov	r1, r4
   2b878:	f019 fc79 	bl	4516e <handle_event>
   2b87c:	e7ba      	b.n	2b7f4 <bt_recv+0x58>
		net_buf_unref(buf);
   2b87e:	4620      	mov	r0, r4
   2b880:	f011 fd86 	bl	3d390 <net_buf_unref>
		return -EINVAL;
   2b884:	f06f 0015 	mvn.w	r0, #21
   2b888:	e7c9      	b.n	2b81e <bt_recv+0x82>
   2b88a:	bf00      	nop
   2b88c:	20001c80 	.word	0x20001c80
   2b890:	0004b756 	.word	0x0004b756
   2b894:	0004b7d4 	.word	0x0004b7d4
   2b898:	0004b793 	.word	0x0004b793
   2b89c:	0004b806 	.word	0x0004b806
   2b8a0:	0004a180 	.word	0x0004a180

0002b8a4 <bt_recv_prio>:
{
   2b8a4:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b8a6:	7d03      	ldrb	r3, [r0, #20]
   2b8a8:	2b01      	cmp	r3, #1
{
   2b8aa:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b8ac:	d00c      	beq.n	2b8c8 <bt_recv_prio+0x24>
   2b8ae:	4a09      	ldr	r2, [pc, #36]	; (2b8d4 <bt_recv_prio+0x30>)
   2b8b0:	4909      	ldr	r1, [pc, #36]	; (2b8d8 <bt_recv_prio+0x34>)
   2b8b2:	480a      	ldr	r0, [pc, #40]	; (2b8dc <bt_recv_prio+0x38>)
   2b8b4:	f640 537c 	movw	r3, #3452	; 0xd7c
   2b8b8:	f017 fa2a 	bl	42d10 <printk>
   2b8bc:	4040      	eors	r0, r0
   2b8be:	f380 8811 	msr	BASEPRI, r0
   2b8c2:	f04f 0003 	mov.w	r0, #3
   2b8c6:	df02      	svc	2
	hci_event_prio(buf);
   2b8c8:	4620      	mov	r0, r4
   2b8ca:	f7ff ff15 	bl	2b6f8 <hci_event_prio>
}
   2b8ce:	2000      	movs	r0, #0
   2b8d0:	bd10      	pop	{r4, pc}
   2b8d2:	bf00      	nop
   2b8d4:	0004b756 	.word	0x0004b756
   2b8d8:	0004b834 	.word	0x0004b834
   2b8dc:	0004b793 	.word	0x0004b793

0002b8e0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2b8e0:	4a08      	ldr	r2, [pc, #32]	; (2b904 <bt_hci_driver_register+0x24>)
{
   2b8e2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2b8e4:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2b8e8:	b930      	cbnz	r0, 2b8f8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2b8ea:	68d9      	ldr	r1, [r3, #12]
   2b8ec:	b139      	cbz	r1, 2b8fe <bt_hci_driver_register+0x1e>
   2b8ee:	6919      	ldr	r1, [r3, #16]
   2b8f0:	b129      	cbz	r1, 2b8fe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2b8f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2b8f6:	4770      	bx	lr
		return -EALREADY;
   2b8f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b8fc:	4770      	bx	lr
		return -EINVAL;
   2b8fe:	f06f 0015 	mvn.w	r0, #21
}
   2b902:	4770      	bx	lr
   2b904:	20000000 	.word	0x20000000

0002b908 <bt_finalize_init>:
   2b908:	4801      	ldr	r0, [pc, #4]	; (2b910 <bt_finalize_init+0x8>)
   2b90a:	2102      	movs	r1, #2
   2b90c:	f019 bc5c 	b.w	451c8 <atomic_or>
   2b910:	200000cc 	.word	0x200000cc

0002b914 <init_work>:

static void init_work(struct k_work *work)
{
   2b914:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2b916:	f7fa fd63 	bl	263e0 <bt_init>
	if (ready_cb) {
   2b91a:	4b03      	ldr	r3, [pc, #12]	; (2b928 <init_work+0x14>)
   2b91c:	681b      	ldr	r3, [r3, #0]
   2b91e:	b113      	cbz	r3, 2b926 <init_work+0x12>
		ready_cb(err);
	}
}
   2b920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2b924:	4718      	bx	r3
}
   2b926:	bd10      	pop	{r4, pc}
   2b928:	20001c9c 	.word	0x20001c9c

0002b92c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2b92c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2b92e:	4d22      	ldr	r5, [pc, #136]	; (2b9b8 <bt_enable+0x8c>)
   2b930:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2b934:	b088      	sub	sp, #32
   2b936:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2b938:	2b00      	cmp	r3, #0
   2b93a:	d037      	beq.n	2b9ac <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b93c:	2101      	movs	r1, #1
   2b93e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2b942:	f019 fc41 	bl	451c8 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2b946:	07c3      	lsls	r3, r0, #31
   2b948:	d433      	bmi.n	2b9b2 <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2b94a:	f019 fba5 	bl	45098 <bt_settings_init>
		if (err) {
   2b94e:	4604      	mov	r4, r0
   2b950:	bb48      	cbnz	r0, 2b9a6 <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2b952:	4b1a      	ldr	r3, [pc, #104]	; (2b9bc <bt_enable+0x90>)
   2b954:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b956:	2200      	movs	r2, #0
   2b958:	2300      	movs	r3, #0
   2b95a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b95e:	f06f 0308 	mvn.w	r3, #8
   2b962:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2b966:	e9cd 0000 	strd	r0, r0, [sp]
   2b96a:	9004      	str	r0, [sp, #16]
   2b96c:	4b14      	ldr	r3, [pc, #80]	; (2b9c0 <bt_enable+0x94>)
   2b96e:	4915      	ldr	r1, [pc, #84]	; (2b9c4 <bt_enable+0x98>)
   2b970:	4815      	ldr	r0, [pc, #84]	; (2b9c8 <bt_enable+0x9c>)
   2b972:	f44f 7220 	mov.w	r2, #640	; 0x280
   2b976:	f015 fd8f 	bl	41498 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2b97a:	4914      	ldr	r1, [pc, #80]	; (2b9cc <bt_enable+0xa0>)
   2b97c:	4812      	ldr	r0, [pc, #72]	; (2b9c8 <bt_enable+0x9c>)
   2b97e:	f01d f9a9 	bl	48cd4 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2b982:	f7ff f9c5 	bl	2ad10 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2b986:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b98a:	68db      	ldr	r3, [r3, #12]
   2b98c:	4798      	blx	r3
	if (err) {
   2b98e:	4604      	mov	r4, r0
   2b990:	b948      	cbnz	r0, 2b9a6 <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2b992:	b926      	cbnz	r6, 2b99e <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2b994:	b008      	add	sp, #32
   2b996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2b99a:	f7fa bd21 	b.w	263e0 <bt_init>
	k_work_submit(&bt_dev.init);
   2b99e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2b9a2:	f016 f927 	bl	41bf4 <k_work_submit>
}
   2b9a6:	4620      	mov	r0, r4
   2b9a8:	b008      	add	sp, #32
   2b9aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b9ac:	f06f 0412 	mvn.w	r4, #18
   2b9b0:	e7f9      	b.n	2b9a6 <bt_enable+0x7a>
		return -EALREADY;
   2b9b2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2b9b6:	e7f6      	b.n	2b9a6 <bt_enable+0x7a>
   2b9b8:	20000000 	.word	0x20000000
   2b9bc:	20001c9c 	.word	0x20001c9c
   2b9c0:	0002b17d 	.word	0x0002b17d
   2b9c4:	20004390 	.word	0x20004390
   2b9c8:	20000f30 	.word	0x20000f30
   2b9cc:	0004b857 	.word	0x0004b857

0002b9d0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2b9d0:	4800      	ldr	r0, [pc, #0]	; (2b9d4 <bt_get_name+0x4>)
   2b9d2:	4770      	bx	lr
   2b9d4:	0004b584 	.word	0x0004b584

0002b9d8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2b9da:	4f0b      	ldr	r7, [pc, #44]	; (2ba08 <id_find+0x30>)
{
   2b9dc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2b9de:	2500      	movs	r5, #0
   2b9e0:	79fb      	ldrb	r3, [r7, #7]
   2b9e2:	b2ec      	uxtb	r4, r5
   2b9e4:	42a3      	cmp	r3, r4
   2b9e6:	d802      	bhi.n	2b9ee <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2b9e8:	f06f 0401 	mvn.w	r4, #1
   2b9ec:	e009      	b.n	2ba02 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2b9ee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   2b9f2:	2207      	movs	r2, #7
   2b9f4:	4439      	add	r1, r7
   2b9f6:	4630      	mov	r0, r6
   2b9f8:	f019 fa51 	bl	44e9e <memcmp>
   2b9fc:	3501      	adds	r5, #1
   2b9fe:	2800      	cmp	r0, #0
   2ba00:	d1ee      	bne.n	2b9e0 <id_find+0x8>
}
   2ba02:	4620      	mov	r0, r4
   2ba04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ba06:	bf00      	nop
   2ba08:	20000000 	.word	0x20000000

0002ba0c <set_random_address>:
{
   2ba0c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2ba0e:	4914      	ldr	r1, [pc, #80]	; (2ba60 <set_random_address+0x54>)
   2ba10:	2206      	movs	r2, #6
   2ba12:	4605      	mov	r5, r0
   2ba14:	f019 fa43 	bl	44e9e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2ba18:	4604      	mov	r4, r0
   2ba1a:	b1e0      	cbz	r0, 2ba56 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2ba1c:	2106      	movs	r1, #6
   2ba1e:	f242 0005 	movw	r0, #8197	; 0x2005
   2ba22:	f7ff fc57 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   2ba26:	4604      	mov	r4, r0
   2ba28:	b1b8      	cbz	r0, 2ba5a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ba2a:	2206      	movs	r2, #6
   2ba2c:	4629      	mov	r1, r5
   2ba2e:	3008      	adds	r0, #8
   2ba30:	f01c f9ee 	bl	47e10 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2ba34:	4621      	mov	r1, r4
   2ba36:	2200      	movs	r2, #0
   2ba38:	f242 0005 	movw	r0, #8197	; 0x2005
   2ba3c:	f7ff fca6 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2ba40:	4604      	mov	r4, r0
   2ba42:	b940      	cbnz	r0, 2ba56 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   2ba44:	2206      	movs	r2, #6
   2ba46:	4806      	ldr	r0, [pc, #24]	; (2ba60 <set_random_address+0x54>)
   2ba48:	4629      	mov	r1, r5
   2ba4a:	f019 fa39 	bl	44ec0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2ba4e:	4b05      	ldr	r3, [pc, #20]	; (2ba64 <set_random_address+0x58>)
   2ba50:	2201      	movs	r2, #1
   2ba52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   2ba56:	4620      	mov	r0, r4
   2ba58:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2ba5a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2ba5e:	e7fa      	b.n	2ba56 <set_random_address+0x4a>
   2ba60:	20000061 	.word	0x20000061
   2ba64:	20000000 	.word	0x20000000

0002ba68 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2ba68:	b530      	push	{r4, r5, lr}
   2ba6a:	4604      	mov	r4, r0
   2ba6c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2ba6e:	460d      	mov	r5, r1
   2ba70:	b1e1      	cbz	r1, 2baac <id_create.constprop.0+0x44>
   2ba72:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2ba74:	2207      	movs	r2, #7
   2ba76:	a902      	add	r1, sp, #8
   2ba78:	4628      	mov	r0, r5
   2ba7a:	9302      	str	r3, [sp, #8]
   2ba7c:	f8cd 300b 	str.w	r3, [sp, #11]
   2ba80:	f019 fa0d 	bl	44e9e <memcmp>
   2ba84:	b190      	cbz	r0, 2baac <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2ba86:	4816      	ldr	r0, [pc, #88]	; (2bae0 <id_create.constprop.0+0x78>)
   2ba88:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2ba8c:	4629      	mov	r1, r5
   2ba8e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2ba90:	f019 fefd 	bl	4588e <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ba94:	4813      	ldr	r0, [pc, #76]	; (2bae4 <id_create.constprop.0+0x7c>)
   2ba96:	f019 fefd 	bl	45894 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2ba9a:	0782      	lsls	r2, r0, #30
   2ba9c:	f3c0 0340 	ubfx	r3, r0, #1, #1
   2baa0:	d51b      	bpl.n	2bada <id_create.constprop.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2baa2:	f7ff f9c9 	bl	2ae38 <bt_settings_save_id>
	}

	return 0;
   2baa6:	2000      	movs	r0, #0
}
   2baa8:	b005      	add	sp, #20
   2baaa:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2baac:	4668      	mov	r0, sp
   2baae:	f019 fb3e 	bl	4512e <bt_addr_le_create_static>
			if (err) {
   2bab2:	2800      	cmp	r0, #0
   2bab4:	d1f8      	bne.n	2baa8 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   2bab6:	4668      	mov	r0, sp
   2bab8:	f7ff ff8e 	bl	2b9d8 <id_find>
   2babc:	2800      	cmp	r0, #0
   2babe:	daf5      	bge.n	2baac <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2bac0:	4807      	ldr	r0, [pc, #28]	; (2bae0 <id_create.constprop.0+0x78>)
   2bac2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2bac6:	4404      	add	r4, r0
   2bac8:	4669      	mov	r1, sp
   2baca:	4620      	mov	r0, r4
   2bacc:	f019 fedf 	bl	4588e <bt_addr_le_copy>
		if (addr) {
   2bad0:	2d00      	cmp	r5, #0
   2bad2:	d0df      	beq.n	2ba94 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2bad4:	4621      	mov	r1, r4
   2bad6:	4628      	mov	r0, r5
   2bad8:	e7da      	b.n	2ba90 <id_create.constprop.0+0x28>
	return 0;
   2bada:	4618      	mov	r0, r3
   2badc:	e7e4      	b.n	2baa8 <id_create.constprop.0+0x40>
   2bade:	bf00      	nop
   2bae0:	20000000 	.word	0x20000000
   2bae4:	200000cc 	.word	0x200000cc

0002bae8 <bt_id_pending_keys_update>:
   2bae8:	4b0a      	ldr	r3, [pc, #40]	; (2bb14 <bt_id_pending_keys_update+0x2c>)
   2baea:	f3bf 8f5b 	dmb	ish
   2baee:	e853 2f00 	ldrex	r2, [r3]
   2baf2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2baf6:	e843 1000 	strex	r0, r1, [r3]
   2bafa:	2800      	cmp	r0, #0
   2bafc:	d1f7      	bne.n	2baee <bt_id_pending_keys_update+0x6>
   2bafe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2bb02:	0493      	lsls	r3, r2, #18
   2bb04:	d504      	bpl.n	2bb10 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2bb06:	4904      	ldr	r1, [pc, #16]	; (2bb18 <bt_id_pending_keys_update+0x30>)
   2bb08:	2200      	movs	r2, #0
   2bb0a:	2002      	movs	r0, #2
   2bb0c:	f003 bf58 	b.w	2f9c0 <bt_keys_foreach>
}
   2bb10:	4770      	bx	lr
   2bb12:	bf00      	nop
   2bb14:	200000cc 	.word	0x200000cc
   2bb18:	000459cd 	.word	0x000459cd

0002bb1c <bt_id_add>:
{
   2bb1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2bb1e:	4c46      	ldr	r4, [pc, #280]	; (2bc38 <bt_id_add+0x11c>)
   2bb20:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2bb24:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2bb28:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2bb2a:	b10a      	cbz	r2, 2bb30 <bt_id_add+0x14>
   2bb2c:	429a      	cmp	r2, r3
   2bb2e:	d208      	bcs.n	2bb42 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   2bb30:	3301      	adds	r3, #1
   2bb32:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2bb36:	7a2b      	ldrb	r3, [r5, #8]
   2bb38:	f043 0304 	orr.w	r3, r3, #4
   2bb3c:	722b      	strb	r3, [r5, #8]
}
   2bb3e:	b003      	add	sp, #12
   2bb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2bb42:	2100      	movs	r1, #0
   2bb44:	2206      	movs	r2, #6
   2bb46:	4608      	mov	r0, r1
   2bb48:	f001 f92c 	bl	2cda4 <bt_conn_lookup_state_le>
	if (conn) {
   2bb4c:	4606      	mov	r6, r0
   2bb4e:	b1a8      	cbz	r0, 2bb7c <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bb50:	f3bf 8f5b 	dmb	ish
   2bb54:	34cc      	adds	r4, #204	; 0xcc
   2bb56:	e854 3f00 	ldrex	r3, [r4]
   2bb5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2bb5e:	e844 3200 	strex	r2, r3, [r4]
   2bb62:	2a00      	cmp	r2, #0
   2bb64:	d1f7      	bne.n	2bb56 <bt_id_add+0x3a>
   2bb66:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2bb6a:	7a2b      	ldrb	r3, [r5, #8]
   2bb6c:	f043 0301 	orr.w	r3, r3, #1
   2bb70:	722b      	strb	r3, [r5, #8]
}
   2bb72:	b003      	add	sp, #12
   2bb74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2bb78:	f01a b953 	b.w	45e22 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2bb7c:	4601      	mov	r1, r0
   2bb7e:	482f      	ldr	r0, [pc, #188]	; (2bc3c <bt_id_add+0x120>)
   2bb80:	f000 faae 	bl	2c0e0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   2bb84:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bb88:	b9b3      	cbnz	r3, 2bbb8 <bt_id_add+0x9c>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2bb8a:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2bb8e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2bb92:	429a      	cmp	r2, r3
   2bb94:	d11f      	bne.n	2bbd6 <bt_id_add+0xba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2bb96:	2200      	movs	r2, #0
   2bb98:	4611      	mov	r1, r2
   2bb9a:	f242 0029 	movw	r0, #8233	; 0x2029
   2bb9e:	f7ff fbf5 	bl	2b38c <bt_hci_cmd_send_sync>
		if (err) {
   2bba2:	b970      	cbnz	r0, 2bbc2 <bt_id_add+0xa6>
		bt_dev.le.rl_entries++;
   2bba4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bba8:	3301      	adds	r3, #1
   2bbaa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2bbae:	7a2b      	ldrb	r3, [r5, #8]
   2bbb0:	f043 0304 	orr.w	r3, r3, #4
   2bbb4:	722b      	strb	r3, [r5, #8]
		goto done;
   2bbb6:	e004      	b.n	2bbc2 <bt_id_add+0xa6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2bbb8:	4630      	mov	r0, r6
   2bbba:	f019 feb7 	bl	4592c <addr_res_enable>
		if (err) {
   2bbbe:	2800      	cmp	r0, #0
   2bbc0:	d0e3      	beq.n	2bb8a <bt_id_add+0x6e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2bbc2:	2001      	movs	r0, #1
   2bbc4:	f019 feb2 	bl	4592c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2bbc8:	481d      	ldr	r0, [pc, #116]	; (2bc40 <bt_id_add+0x124>)
   2bbca:	2100      	movs	r1, #0
}
   2bbcc:	b003      	add	sp, #12
   2bbce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2bbd2:	f000 ba85 	b.w	2c0e0 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2bbd6:	1c6f      	adds	r7, r5, #1
   2bbd8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2bbdc:	4638      	mov	r0, r7
   2bbde:	f019 fe74 	bl	458ca <hci_id_add.constprop.0>
	if (err) {
   2bbe2:	4606      	mov	r6, r0
   2bbe4:	2800      	cmp	r0, #0
   2bbe6:	d1ec      	bne.n	2bbc2 <bt_id_add+0xa6>
	bt_dev.le.rl_entries++;
   2bbe8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bbec:	3301      	adds	r3, #1
   2bbee:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2bbf2:	7a2b      	ldrb	r3, [r5, #8]
   2bbf4:	f043 0304 	orr.w	r3, r3, #4
   2bbf8:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2bbfa:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2bbfe:	075b      	lsls	r3, r3, #29
   2bc00:	d5df      	bpl.n	2bbc2 <bt_id_add+0xa6>
	bt_addr_le_copy(&cp.id_addr, addr);
   2bc02:	4639      	mov	r1, r7
   2bc04:	4668      	mov	r0, sp
   2bc06:	f019 fe42 	bl	4588e <bt_addr_le_copy>
	cp.mode = mode;
   2bc0a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2bc0c:	2108      	movs	r1, #8
   2bc0e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2bc12:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2bc16:	f7ff fb5d 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   2bc1a:	4604      	mov	r4, r0
   2bc1c:	2800      	cmp	r0, #0
   2bc1e:	d0d0      	beq.n	2bbc2 <bt_id_add+0xa6>
   2bc20:	2208      	movs	r2, #8
   2bc22:	4669      	mov	r1, sp
   2bc24:	4410      	add	r0, r2
   2bc26:	f01c f8f3 	bl	47e10 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2bc2a:	4632      	mov	r2, r6
   2bc2c:	4621      	mov	r1, r4
   2bc2e:	f242 004e 	movw	r0, #8270	; 0x204e
   2bc32:	f7ff fbab 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2bc36:	e7c4      	b.n	2bbc2 <bt_id_add+0xa6>
   2bc38:	20000000 	.word	0x20000000
   2bc3c:	0004595d 	.word	0x0004595d
   2bc40:	000458a1 	.word	0x000458a1

0002bc44 <bt_id_del>:
{
   2bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   2bc48:	4c3c      	ldr	r4, [pc, #240]	; (2bd3c <bt_id_del+0xf8>)
   2bc4a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2bc4e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2bc52:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   2bc54:	b112      	cbz	r2, 2bc5c <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2bc56:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2bc58:	4293      	cmp	r3, r2
   2bc5a:	dd08      	ble.n	2bc6e <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2bc5c:	3b01      	subs	r3, #1
   2bc5e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bc62:	7a2b      	ldrb	r3, [r5, #8]
   2bc64:	f023 0304 	bic.w	r3, r3, #4
   2bc68:	722b      	strb	r3, [r5, #8]
}
   2bc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2bc6e:	2100      	movs	r1, #0
   2bc70:	2206      	movs	r2, #6
   2bc72:	4608      	mov	r0, r1
   2bc74:	f001 f896 	bl	2cda4 <bt_conn_lookup_state_le>
	if (conn) {
   2bc78:	4606      	mov	r6, r0
   2bc7a:	b1a0      	cbz	r0, 2bca6 <bt_id_del+0x62>
   2bc7c:	f3bf 8f5b 	dmb	ish
   2bc80:	34cc      	adds	r4, #204	; 0xcc
   2bc82:	e854 3f00 	ldrex	r3, [r4]
   2bc86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2bc8a:	e844 3200 	strex	r2, r3, [r4]
   2bc8e:	2a00      	cmp	r2, #0
   2bc90:	d1f7      	bne.n	2bc82 <bt_id_del+0x3e>
   2bc92:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2bc96:	7a2b      	ldrb	r3, [r5, #8]
   2bc98:	f043 0302 	orr.w	r3, r3, #2
   2bc9c:	722b      	strb	r3, [r5, #8]
}
   2bc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2bca2:	f01a b8be 	b.w	45e22 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2bca6:	4601      	mov	r1, r0
   2bca8:	4825      	ldr	r0, [pc, #148]	; (2bd40 <bt_id_del+0xfc>)
   2bcaa:	f000 fa19 	bl	2c0e0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2bcae:	4630      	mov	r0, r6
   2bcb0:	f019 fe3c 	bl	4592c <addr_res_enable>
	if (err) {
   2bcb4:	4607      	mov	r7, r0
   2bcb6:	b988      	cbnz	r0, 2bcdc <bt_id_del+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2bcb8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bcbc:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2bcc0:	429a      	cmp	r2, r3
   2bcc2:	d217      	bcs.n	2bcf4 <bt_id_del+0xb0>
		bt_dev.le.rl_entries--;
   2bcc4:	3b01      	subs	r3, #1
   2bcc6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bcca:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2bccc:	491d      	ldr	r1, [pc, #116]	; (2bd44 <bt_id_del+0x100>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bcce:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2bcd2:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bcd4:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2bcd6:	2002      	movs	r0, #2
   2bcd8:	f003 fe72 	bl	2f9c0 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2bcdc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bce0:	b113      	cbz	r3, 2bce8 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2bce2:	2001      	movs	r0, #1
   2bce4:	f019 fe22 	bl	4592c <addr_res_enable>
}
   2bce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2bcec:	4816      	ldr	r0, [pc, #88]	; (2bd48 <bt_id_del+0x104>)
   2bcee:	2100      	movs	r1, #0
   2bcf0:	f000 b9f6 	b.w	2c0e0 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2bcf4:	2107      	movs	r1, #7
   2bcf6:	f242 0028 	movw	r0, #8232	; 0x2028
   2bcfa:	f7ff faeb 	bl	2b2d4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2bcfe:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   2bd02:	4606      	mov	r6, r0
   2bd04:	2800      	cmp	r0, #0
   2bd06:	d0e9      	beq.n	2bcdc <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   2bd08:	2107      	movs	r1, #7
   2bd0a:	3008      	adds	r0, #8
   2bd0c:	f01c f87a 	bl	47e04 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2bd10:	4641      	mov	r1, r8
   2bd12:	f019 fdbc 	bl	4588e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2bd16:	463a      	mov	r2, r7
   2bd18:	4631      	mov	r1, r6
   2bd1a:	f242 0028 	movw	r0, #8232	; 0x2028
   2bd1e:	f7ff fb35 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2bd22:	2800      	cmp	r0, #0
   2bd24:	d1da      	bne.n	2bcdc <bt_id_del+0x98>
	bt_dev.le.rl_entries--;
   2bd26:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bd2a:	3b01      	subs	r3, #1
   2bd2c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2bd30:	7a2b      	ldrb	r3, [r5, #8]
   2bd32:	f023 0304 	bic.w	r3, r3, #4
   2bd36:	722b      	strb	r3, [r5, #8]
   2bd38:	e7d0      	b.n	2bcdc <bt_id_del+0x98>
   2bd3a:	bf00      	nop
   2bd3c:	20000000 	.word	0x20000000
   2bd40:	0004595d 	.word	0x0004595d
   2bd44:	0004591b 	.word	0x0004591b
   2bd48:	000458a1 	.word	0x000458a1

0002bd4c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2bd4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bd4e:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2bd50:	4605      	mov	r5, r0
   2bd52:	b918      	cbnz	r0, 2bd5c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2bd54:	b1ec      	cbz	r4, 2bd92 <bt_id_create+0x46>
		return -EINVAL;
   2bd56:	f06f 0015 	mvn.w	r0, #21
   2bd5a:	e018      	b.n	2bd8e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2bd5c:	2300      	movs	r3, #0
   2bd5e:	2207      	movs	r2, #7
   2bd60:	4669      	mov	r1, sp
   2bd62:	9300      	str	r3, [sp, #0]
   2bd64:	f8cd 3003 	str.w	r3, [sp, #3]
   2bd68:	f019 f899 	bl	44e9e <memcmp>
   2bd6c:	2800      	cmp	r0, #0
   2bd6e:	d0f1      	beq.n	2bd54 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2bd70:	782b      	ldrb	r3, [r5, #0]
   2bd72:	2b01      	cmp	r3, #1
   2bd74:	d1ef      	bne.n	2bd56 <bt_id_create+0xa>
   2bd76:	79ab      	ldrb	r3, [r5, #6]
   2bd78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2bd7c:	2bc0      	cmp	r3, #192	; 0xc0
   2bd7e:	d1ea      	bne.n	2bd56 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2bd80:	4628      	mov	r0, r5
   2bd82:	f7ff fe29 	bl	2b9d8 <id_find>
   2bd86:	2800      	cmp	r0, #0
   2bd88:	dbe4      	blt.n	2bd54 <bt_id_create+0x8>
			return -EALREADY;
   2bd8a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2bd8e:	b002      	add	sp, #8
   2bd90:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2bd92:	4e12      	ldr	r6, [pc, #72]	; (2bddc <bt_id_create+0x90>)
   2bd94:	79f3      	ldrb	r3, [r6, #7]
   2bd96:	2b01      	cmp	r3, #1
   2bd98:	d01c      	beq.n	2bdd4 <bt_id_create+0x88>
   2bd9a:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2bd9e:	f019 fd79 	bl	45894 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2bda2:	07c3      	lsls	r3, r0, #31
   2bda4:	d40b      	bmi.n	2bdbe <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2bda6:	2d00      	cmp	r5, #0
   2bda8:	d0d5      	beq.n	2bd56 <bt_id_create+0xa>
   2bdaa:	2207      	movs	r2, #7
   2bdac:	4669      	mov	r1, sp
   2bdae:	4628      	mov	r0, r5
   2bdb0:	9400      	str	r4, [sp, #0]
   2bdb2:	f8cd 4003 	str.w	r4, [sp, #3]
   2bdb6:	f019 f872 	bl	44e9e <memcmp>
   2bdba:	2800      	cmp	r0, #0
   2bdbc:	d0cb      	beq.n	2bd56 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2bdbe:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2bdc0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2bdc2:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2bdc4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2bdc6:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2bdc8:	f7ff fe4e 	bl	2ba68 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2bdcc:	2800      	cmp	r0, #0
   2bdce:	bf08      	it	eq
   2bdd0:	4620      	moveq	r0, r4
   2bdd2:	e7dc      	b.n	2bd8e <bt_id_create+0x42>
		return -ENOMEM;
   2bdd4:	f06f 000b 	mvn.w	r0, #11
   2bdd8:	e7d9      	b.n	2bd8e <bt_id_create+0x42>
   2bdda:	bf00      	nop
   2bddc:	20000000 	.word	0x20000000

0002bde0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2bde0:	b570      	push	{r4, r5, r6, lr}
   2bde2:	b086      	sub	sp, #24
   2bde4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2bde6:	aa01      	add	r2, sp, #4
   2bde8:	2100      	movs	r1, #0
   2bdea:	f241 0009 	movw	r0, #4105	; 0x1009
   2bdee:	f7ff facd 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2bdf2:	4604      	mov	r4, r0
   2bdf4:	b970      	cbnz	r0, 2be14 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2bdf6:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2bdf8:	9002      	str	r0, [sp, #8]
   2bdfa:	689d      	ldr	r5, [r3, #8]
   2bdfc:	f8ad 000c 	strh.w	r0, [sp, #12]
   2be00:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2be02:	2206      	movs	r2, #6
   2be04:	a902      	add	r1, sp, #8
   2be06:	4628      	mov	r0, r5
   2be08:	f019 f849 	bl	44e9e <memcmp>
   2be0c:	b920      	cbnz	r0, 2be18 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2be0e:	9801      	ldr	r0, [sp, #4]
   2be10:	f011 fabe 	bl	3d390 <net_buf_unref>
		return 0U;
   2be14:	2000      	movs	r0, #0
   2be16:	e016      	b.n	2be46 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2be18:	4b0c      	ldr	r3, [pc, #48]	; (2be4c <bt_id_read_public_addr+0x6c>)
   2be1a:	6818      	ldr	r0, [r3, #0]
   2be1c:	9004      	str	r0, [sp, #16]
   2be1e:	889b      	ldrh	r3, [r3, #4]
   2be20:	f8ad 3014 	strh.w	r3, [sp, #20]
   2be24:	2206      	movs	r2, #6
   2be26:	a904      	add	r1, sp, #16
   2be28:	4628      	mov	r0, r5
   2be2a:	f019 f838 	bl	44e9e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2be2e:	2800      	cmp	r0, #0
   2be30:	d0ed      	beq.n	2be0e <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2be32:	2206      	movs	r2, #6
   2be34:	4629      	mov	r1, r5
   2be36:	1c70      	adds	r0, r6, #1
   2be38:	f019 f842 	bl	44ec0 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   2be3c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2be3e:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2be40:	f011 faa6 	bl	3d390 <net_buf_unref>
	return 1U;
   2be44:	2001      	movs	r0, #1
}
   2be46:	b006      	add	sp, #24
   2be48:	bd70      	pop	{r4, r5, r6, pc}
   2be4a:	bf00      	nop
   2be4c:	00049bf5 	.word	0x00049bf5

0002be50 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2be50:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2be52:	4668      	mov	r0, sp
   2be54:	f7ff ffc4 	bl	2bde0 <bt_id_read_public_addr>
   2be58:	4b04      	ldr	r3, [pc, #16]	; (2be6c <bt_setup_public_id_addr+0x1c>)
   2be5a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2be5c:	b118      	cbz	r0, 2be66 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2be5e:	4669      	mov	r1, sp
   2be60:	2000      	movs	r0, #0
   2be62:	f7ff fe01 	bl	2ba68 <id_create.constprop.0>
}
   2be66:	b003      	add	sp, #12
   2be68:	f85d fb04 	ldr.w	pc, [sp], #4
   2be6c:	20000000 	.word	0x20000000

0002be70 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2be70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2be74:	4b15      	ldr	r3, [pc, #84]	; (2becc <bt_read_static_addr+0x5c>)
   2be76:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   2be7a:	f014 0401 	ands.w	r4, r4, #1
{
   2be7e:	4607      	mov	r7, r0
   2be80:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2be82:	d015      	beq.n	2beb0 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2be84:	aa01      	add	r2, sp, #4
   2be86:	2100      	movs	r1, #0
   2be88:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2be8c:	f7ff fa7e 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2be90:	4605      	mov	r5, r0
   2be92:	b9c8      	cbnz	r0, 2bec8 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   2be94:	9b01      	ldr	r3, [sp, #4]
   2be96:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2be98:	785c      	ldrb	r4, [r3, #1]
   2be9a:	42b4      	cmp	r4, r6
   2be9c:	bf28      	it	cs
   2be9e:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2bea0:	f04f 0816 	mov.w	r8, #22
   2bea4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2bea6:	42a5      	cmp	r5, r4
   2bea8:	db06      	blt.n	2beb8 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   2beaa:	9801      	ldr	r0, [sp, #4]
   2beac:	f011 fa70 	bl	3d390 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2beb0:	4620      	mov	r0, r4
   2beb2:	b002      	add	sp, #8
   2beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2beb8:	fb08 7005 	mla	r0, r8, r5, r7
   2bebc:	2216      	movs	r2, #22
   2bebe:	4631      	mov	r1, r6
   2bec0:	f018 fffe 	bl	44ec0 <memcpy>
	for (i = 0; i < cnt; i++) {
   2bec4:	3501      	adds	r5, #1
   2bec6:	e7ee      	b.n	2bea6 <bt_read_static_addr+0x36>
		return 0;
   2bec8:	2400      	movs	r4, #0
   2beca:	e7f1      	b.n	2beb0 <bt_read_static_addr+0x40>
   2becc:	20000000 	.word	0x20000000

0002bed0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2bed2:	4e15      	ldr	r6, [pc, #84]	; (2bf28 <bt_setup_random_id_addr+0x58>)
   2bed4:	79f4      	ldrb	r4, [r6, #7]
{
   2bed6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2bed8:	b9f4      	cbnz	r4, 2bf18 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2beda:	2101      	movs	r1, #1
   2bedc:	a802      	add	r0, sp, #8
   2bede:	f7ff ffc7 	bl	2be70 <bt_read_static_addr>
   2bee2:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2bee4:	b1c0      	cbz	r0, 2bf18 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2bee6:	2716      	movs	r7, #22
   2bee8:	ab02      	add	r3, sp, #8
   2beea:	b2e5      	uxtb	r5, r4
   2beec:	fb07 3105 	mla	r1, r7, r5, r3
   2bef0:	2206      	movs	r2, #6
   2bef2:	f10d 0001 	add.w	r0, sp, #1
   2bef6:	f018 ffe3 	bl	44ec0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2befa:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   2befc:	4669      	mov	r1, sp
   2befe:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2bf00:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2bf04:	f7ff fdb0 	bl	2ba68 <id_create.constprop.0>
				if (err) {
   2bf08:	b920      	cbnz	r0, 2bf14 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2bf0a:	79f2      	ldrb	r2, [r6, #7]
   2bf0c:	3401      	adds	r4, #1
   2bf0e:	b2e3      	uxtb	r3, r4
   2bf10:	429a      	cmp	r2, r3
   2bf12:	d8e9      	bhi.n	2bee8 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   2bf14:	b009      	add	sp, #36	; 0x24
   2bf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   2bf18:	2100      	movs	r1, #0
   2bf1a:	4608      	mov	r0, r1
}
   2bf1c:	b009      	add	sp, #36	; 0x24
   2bf1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2bf22:	f7ff bf13 	b.w	2bd4c <bt_id_create>
   2bf26:	bf00      	nop
   2bf28:	20000000 	.word	0x20000000

0002bf2c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2bf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bf30:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   2bf34:	7805      	ldrb	r5, [r0, #0]
{
   2bf36:	460e      	mov	r6, r1
   2bf38:	4690      	mov	r8, r2
   2bf3a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bf3c:	d026      	beq.n	2bf8c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2bf3e:	4c23      	ldr	r4, [pc, #140]	; (2bfcc <bt_id_set_adv_own_addr+0xa0>)
   2bf40:	b12a      	cbz	r2, 2bf4e <bt_id_set_adv_own_addr+0x22>
   2bf42:	0688      	lsls	r0, r1, #26
   2bf44:	d503      	bpl.n	2bf4e <bt_id_set_adv_own_addr+0x22>
   2bf46:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   2bf4a:	0659      	lsls	r1, r3, #25
   2bf4c:	d53a      	bpl.n	2bfc4 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bf4e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2bf52:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   2bf56:	5ce3      	ldrb	r3, [r4, r3]
   2bf58:	2b01      	cmp	r3, #1
   2bf5a:	d008      	beq.n	2bf6e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2bf5c:	eba9 0505 	sub.w	r5, r9, r5
   2bf60:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bf62:	f1b8 0f00 	cmp.w	r8, #0
   2bf66:	d10c      	bne.n	2bf82 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2bf68:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   2bf6a:	2000      	movs	r0, #0
   2bf6c:	e007      	b.n	2bf7e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bf6e:	2007      	movs	r0, #7
   2bf70:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   2bf74:	4420      	add	r0, r4
   2bf76:	f7ff fd49 	bl	2ba0c <set_random_address>
				if (err) {
   2bf7a:	2800      	cmp	r0, #0
   2bf7c:	d0ee      	beq.n	2bf5c <bt_id_set_adv_own_addr+0x30>
}
   2bf7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bf82:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2bf84:	bf48      	it	mi
   2bf86:	f043 0302 	orrmi.w	r3, r3, #2
   2bf8a:	e7ed      	b.n	2bf68 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2bf8c:	074b      	lsls	r3, r1, #29
   2bf8e:	d515      	bpl.n	2bfbc <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bf90:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2bfcc <bt_id_set_adv_own_addr+0xa0>
   2bf94:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2bf98:	00ee      	lsls	r6, r5, #3
   2bf9a:	f818 3003 	ldrb.w	r3, [r8, r3]
   2bf9e:	2b01      	cmp	r3, #1
   2bfa0:	d10a      	bne.n	2bfb8 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bfa2:	2007      	movs	r0, #7
   2bfa4:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   2bfa8:	4440      	add	r0, r8
   2bfaa:	f7ff fd2f 	bl	2ba0c <set_random_address>
			*own_addr_type = id_addr->type;
   2bfae:	1b75      	subs	r5, r6, r5
   2bfb0:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2bfb4:	703b      	strb	r3, [r7, #0]
		if (err) {
   2bfb6:	e7e2      	b.n	2bf7e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   2bfb8:	4620      	mov	r0, r4
   2bfba:	e7f8      	b.n	2bfae <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   2bfbc:	f019 fcf2 	bl	459a4 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2bfc0:	2301      	movs	r3, #1
   2bfc2:	e7f7      	b.n	2bfb4 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   2bfc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bfc8:	e7d9      	b.n	2bf7e <bt_id_set_adv_own_addr+0x52>
   2bfca:	bf00      	nop
   2bfcc:	20000000 	.word	0x20000000

0002bfd0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bfd0:	6843      	ldr	r3, [r0, #4]
{
   2bfd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bfd4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bfd6:	0558      	lsls	r0, r3, #21
   2bfd8:	d502      	bpl.n	2bfe0 <valid_adv_param+0x10>
		return false;
   2bfda:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   2bfdc:	b003      	add	sp, #12
   2bfde:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bfe0:	6922      	ldr	r2, [r4, #16]
   2bfe2:	b10a      	cbz	r2, 2bfe8 <valid_adv_param+0x18>
   2bfe4:	07d9      	lsls	r1, r3, #31
   2bfe6:	d5f8      	bpl.n	2bfda <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   2bfe8:	4d1a      	ldr	r5, [pc, #104]	; (2c054 <valid_adv_param+0x84>)
   2bfea:	7820      	ldrb	r0, [r4, #0]
   2bfec:	79eb      	ldrb	r3, [r5, #7]
   2bfee:	4283      	cmp	r3, r0
   2bff0:	d9f3      	bls.n	2bfda <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2bff2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2bff6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2bff8:	2207      	movs	r2, #7
   2bffa:	4669      	mov	r1, sp
   2bffc:	4428      	add	r0, r5
   2bffe:	9300      	str	r3, [sp, #0]
   2c000:	f8cd 3003 	str.w	r3, [sp, #3]
   2c004:	f018 ff4b 	bl	44e9e <memcmp>
	if (param->id >= bt_dev.id_count ||
   2c008:	2800      	cmp	r0, #0
   2c00a:	d0e6      	beq.n	2bfda <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2c00c:	6860      	ldr	r0, [r4, #4]
   2c00e:	07c2      	lsls	r2, r0, #31
   2c010:	d406      	bmi.n	2c020 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2c012:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2c016:	2b08      	cmp	r3, #8
   2c018:	d802      	bhi.n	2c020 <valid_adv_param+0x50>
   2c01a:	68a3      	ldr	r3, [r4, #8]
   2c01c:	2b9f      	cmp	r3, #159	; 0x9f
   2c01e:	d9dc      	bls.n	2bfda <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2c020:	f010 0f30 	tst.w	r0, #48	; 0x30
   2c024:	d002      	beq.n	2c02c <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2c026:	6923      	ldr	r3, [r4, #16]
   2c028:	2b00      	cmp	r3, #0
   2c02a:	d0d6      	beq.n	2bfda <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2c02c:	06c3      	lsls	r3, r0, #27
   2c02e:	d401      	bmi.n	2c034 <valid_adv_param+0x64>
   2c030:	6923      	ldr	r3, [r4, #16]
   2c032:	b943      	cbnz	r3, 2c046 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2c034:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2c038:	429a      	cmp	r2, r3
   2c03a:	d8ce      	bhi.n	2bfda <valid_adv_param+0xa>
   2c03c:	2a1f      	cmp	r2, #31
   2c03e:	d9cc      	bls.n	2bfda <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2c040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2c044:	d8c9      	bhi.n	2bfda <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2c046:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2c04a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2c04e:	bf18      	it	ne
   2c050:	2001      	movne	r0, #1
   2c052:	e7c3      	b.n	2bfdc <valid_adv_param+0xc>
   2c054:	20000000 	.word	0x20000000

0002c058 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2c058:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2c05a:	4606      	mov	r6, r0
   2c05c:	4b1e      	ldr	r3, [pc, #120]	; (2c0d8 <le_adv_start_add_conn+0x80>)
   2c05e:	f816 2b09 	ldrb.w	r2, [r6], #9
   2c062:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2c066:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2c068:	2300      	movs	r3, #0
{
   2c06a:	4605      	mov	r5, r0
   2c06c:	2207      	movs	r2, #7
   2c06e:	460f      	mov	r7, r1
   2c070:	4630      	mov	r0, r6
   2c072:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2c074:	9300      	str	r3, [sp, #0]
   2c076:	f8cd 3003 	str.w	r3, [sp, #3]
   2c07a:	f018 ff10 	bl	44e9e <memcmp>
   2c07e:	782a      	ldrb	r2, [r5, #0]
   2c080:	4604      	mov	r4, r0
   2c082:	b9a8      	cbnz	r0, 2c0b0 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2c084:	4b15      	ldr	r3, [pc, #84]	; (2c0dc <le_adv_start_add_conn+0x84>)
   2c086:	6818      	ldr	r0, [r3, #0]
   2c088:	8899      	ldrh	r1, [r3, #4]
   2c08a:	9002      	str	r0, [sp, #8]
   2c08c:	799b      	ldrb	r3, [r3, #6]
   2c08e:	f8ad 100c 	strh.w	r1, [sp, #12]
   2c092:	4610      	mov	r0, r2
   2c094:	a902      	add	r1, sp, #8
   2c096:	f88d 300e 	strb.w	r3, [sp, #14]
   2c09a:	f000 fe49 	bl	2cd30 <bt_conn_add_le>
		if (!conn) {
   2c09e:	4605      	mov	r5, r0
   2c0a0:	b1b8      	cbz	r0, 2c0d2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2c0a2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2c0a4:	f000 fc84 	bl	2c9b0 <bt_conn_set_state>
	*out_conn = conn;
   2c0a8:	603d      	str	r5, [r7, #0]
	return 0;
}
   2c0aa:	4620      	mov	r0, r4
   2c0ac:	b005      	add	sp, #20
   2c0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2c0b0:	4631      	mov	r1, r6
   2c0b2:	4610      	mov	r0, r2
   2c0b4:	f019 ff6f 	bl	45f96 <bt_conn_exists_le>
   2c0b8:	4604      	mov	r4, r0
   2c0ba:	b938      	cbnz	r0, 2c0cc <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2c0bc:	7828      	ldrb	r0, [r5, #0]
   2c0be:	4631      	mov	r1, r6
   2c0c0:	f000 fe36 	bl	2cd30 <bt_conn_add_le>
	if (!conn) {
   2c0c4:	4605      	mov	r5, r0
   2c0c6:	b120      	cbz	r0, 2c0d2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2c0c8:	2105      	movs	r1, #5
   2c0ca:	e7eb      	b.n	2c0a4 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2c0cc:	f06f 0415 	mvn.w	r4, #21
   2c0d0:	e7eb      	b.n	2c0aa <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2c0d2:	f06f 040b 	mvn.w	r4, #11
   2c0d6:	e7e8      	b.n	2c0aa <le_adv_start_add_conn+0x52>
   2c0d8:	20000000 	.word	0x20000000
   2c0dc:	00049bfb 	.word	0x00049bfb

0002c0e0 <bt_le_ext_adv_foreach>:
{
   2c0e0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2c0e2:	4801      	ldr	r0, [pc, #4]	; (2c0e8 <bt_le_ext_adv_foreach+0x8>)
   2c0e4:	4718      	bx	r3
   2c0e6:	bf00      	nop
   2c0e8:	20000018 	.word	0x20000018

0002c0ec <bt_le_adv_lookup_legacy>:
}
   2c0ec:	4800      	ldr	r0, [pc, #0]	; (2c0f0 <bt_le_adv_lookup_legacy+0x4>)
   2c0ee:	4770      	bx	lr
   2c0f0:	20000018 	.word	0x20000018

0002c0f4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c0f8:	690e      	ldr	r6, [r1, #16]
{
   2c0fa:	b08f      	sub	sp, #60	; 0x3c
   2c0fc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2c0fe:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c100:	ebb6 0903 	subs.w	r9, r6, r3
{
   2c104:	4605      	mov	r5, r0
   2c106:	488c      	ldr	r0, [pc, #560]	; (2c338 <bt_le_adv_start_legacy+0x244>)
   2c108:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c10a:	bf18      	it	ne
   2c10c:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   2c110:	9307      	str	r3, [sp, #28]
   2c112:	f019 fc7c 	bl	45a0e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2c116:	0787      	lsls	r7, r0, #30
{
   2c118:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2c11a:	f140 8102 	bpl.w	2c322 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2c11e:	4608      	mov	r0, r1
   2c120:	f7ff ff56 	bl	2bfd0 <valid_adv_param>
   2c124:	b928      	cbnz	r0, 2c132 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   2c126:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2c12a:	4658      	mov	r0, fp
   2c12c:	b00f      	add	sp, #60	; 0x3c
   2c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2c132:	4620      	mov	r0, r4
   2c134:	f019 fc48 	bl	459c8 <bt_id_adv_random_addr_check>
   2c138:	4680      	mov	r8, r0
   2c13a:	2800      	cmp	r0, #0
   2c13c:	d0f3      	beq.n	2c126 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c13e:	f105 0710 	add.w	r7, r5, #16
   2c142:	4638      	mov	r0, r7
   2c144:	f019 fc63 	bl	45a0e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c148:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2c14c:	0640      	lsls	r0, r0, #25
   2c14e:	f100 80eb 	bmi.w	2c328 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   2c152:	220f      	movs	r2, #15
   2c154:	4659      	mov	r1, fp
   2c156:	a80a      	add	r0, sp, #40	; 0x28
   2c158:	f018 febd 	bl	44ed6 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2c15c:	68a3      	ldr	r3, [r4, #8]
   2c15e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2c162:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2c164:	68e3      	ldr	r3, [r4, #12]
   2c166:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2c16a:	f019 fc41 	bl	459f0 <get_adv_channel_map>
	if (adv->id != param->id) {
   2c16e:	782a      	ldrb	r2, [r5, #0]
   2c170:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2c172:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2c176:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2c178:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2c17c:	d004      	beq.n	2c188 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c17e:	486e      	ldr	r0, [pc, #440]	; (2c338 <bt_le_adv_start_legacy+0x244>)
   2c180:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2c184:	f019 fc49 	bl	45a1a <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2c188:	4a6c      	ldr	r2, [pc, #432]	; (2c33c <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   2c18a:	7823      	ldrb	r3, [r4, #0]
   2c18c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2c18e:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2c192:	6861      	ldr	r1, [r4, #4]
   2c194:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2c198:	464a      	mov	r2, r9
   2c19a:	4628      	mov	r0, r5
   2c19c:	f7ff fec6 	bl	2bf2c <bt_id_set_adv_own_addr>
	if (err) {
   2c1a0:	4683      	mov	fp, r0
   2c1a2:	2800      	cmp	r0, #0
   2c1a4:	d1c1      	bne.n	2c12a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2c1a6:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2c1aa:	2e00      	cmp	r6, #0
   2c1ac:	d049      	beq.n	2c242 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   2c1ae:	6921      	ldr	r1, [r4, #16]
   2c1b0:	2207      	movs	r2, #7
   2c1b2:	f018 fe85 	bl	44ec0 <memcpy>
	name_type = get_adv_name_type_param(param);
   2c1b6:	4620      	mov	r0, r4
   2c1b8:	f019 fd2d 	bl	45c16 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2c1bc:	6863      	ldr	r3, [r4, #4]
   2c1be:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   2c1c0:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2c1c2:	d547      	bpl.n	2c254 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   2c1c4:	2e00      	cmp	r6, #0
   2c1c6:	d042      	beq.n	2c24e <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   2c1c8:	f013 0f10 	tst.w	r3, #16
   2c1cc:	bf14      	ite	ne
   2c1ce:	2304      	movne	r3, #4
   2c1d0:	2301      	moveq	r3, #1
   2c1d2:	6921      	ldr	r1, [r4, #16]
   2c1d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2c1d8:	2207      	movs	r2, #7
   2c1da:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2c1de:	f018 fe6f 	bl	44ec0 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c1e2:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2c1e6:	210f      	movs	r1, #15
   2c1e8:	f242 0006 	movw	r0, #8198	; 0x2006
   2c1ec:	f7ff f872 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   2c1f0:	4683      	mov	fp, r0
   2c1f2:	2800      	cmp	r0, #0
   2c1f4:	f000 809b 	beq.w	2c32e <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c1f8:	220f      	movs	r2, #15
   2c1fa:	a90a      	add	r1, sp, #40	; 0x28
   2c1fc:	3008      	adds	r0, #8
   2c1fe:	f01b fe07 	bl	47e10 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2c202:	2200      	movs	r2, #0
   2c204:	4659      	mov	r1, fp
   2c206:	f242 0006 	movw	r0, #8198	; 0x2006
   2c20a:	f7ff f8bf 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2c20e:	2800      	cmp	r0, #0
   2c210:	f040 8090 	bne.w	2c334 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   2c214:	b376      	cbz	r6, 2c274 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2c216:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c218:	07db      	lsls	r3, r3, #31
   2c21a:	d439      	bmi.n	2c290 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c21c:	2101      	movs	r1, #1
   2c21e:	4628      	mov	r0, r5
   2c220:	f019 fd09 	bl	45c36 <bt_le_adv_set_enable_legacy>
	if (err) {
   2c224:	4683      	mov	fp, r0
   2c226:	9807      	ldr	r0, [sp, #28]
   2c228:	f1bb 0f00 	cmp.w	fp, #0
   2c22c:	d073      	beq.n	2c316 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2c22e:	2800      	cmp	r0, #0
   2c230:	f43f af7b 	beq.w	2c12a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c234:	2100      	movs	r1, #0
   2c236:	f000 fbbb 	bl	2c9b0 <bt_conn_set_state>
			bt_conn_unref(conn);
   2c23a:	9807      	ldr	r0, [sp, #28]
   2c23c:	f019 fdf1 	bl	45e22 <bt_conn_unref>
   2c240:	e773      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2c242:	9608      	str	r6, [sp, #32]
   2c244:	2207      	movs	r2, #7
   2c246:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   2c24a:	a908      	add	r1, sp, #32
   2c24c:	e7b1      	b.n	2c1b2 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   2c24e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   2c252:	e7c8      	b.n	2c1e6 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2c254:	059a      	lsls	r2, r3, #22
   2c256:	d403      	bmi.n	2c260 <bt_le_adv_start_legacy+0x16c>
   2c258:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2c25a:	b90b      	cbnz	r3, 2c260 <bt_le_adv_start_legacy+0x16c>
   2c25c:	2802      	cmp	r0, #2
   2c25e:	d103      	bne.n	2c268 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2c260:	2302      	movs	r3, #2
   2c262:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2c266:	e7be      	b.n	2c1e6 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2c268:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c26a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2c26e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2c272:	e7b8      	b.n	2c1e6 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2c274:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c276:	9300      	str	r3, [sp, #0]
   2c278:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2c27c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2c27e:	9905      	ldr	r1, [sp, #20]
   2c280:	4652      	mov	r2, sl
   2c282:	4628      	mov	r0, r5
   2c284:	f019 fc50 	bl	45b28 <le_adv_update.constprop.0>
		if (err) {
   2c288:	4683      	mov	fp, r0
   2c28a:	2800      	cmp	r0, #0
   2c28c:	d0c3      	beq.n	2c216 <bt_le_adv_start_legacy+0x122>
   2c28e:	e74c      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   2c290:	a907      	add	r1, sp, #28
   2c292:	4628      	mov	r0, r5
   2c294:	f7ff fee0 	bl	2c058 <le_adv_start_add_conn>
		if (err) {
   2c298:	4683      	mov	fp, r0
   2c29a:	2800      	cmp	r0, #0
   2c29c:	d0be      	beq.n	2c21c <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   2c29e:	f110 0f0c 	cmn.w	r0, #12
   2c2a2:	f47f af42 	bne.w	2c12a <bt_le_adv_start_legacy+0x36>
   2c2a6:	2e00      	cmp	r6, #0
   2c2a8:	f47f af3f 	bne.w	2c12a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2c2ac:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2c2ae:	0798      	lsls	r0, r3, #30
   2c2b0:	f53f af3b 	bmi.w	2c12a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2c2b4:	6862      	ldr	r2, [r4, #4]
   2c2b6:	f082 0202 	eor.w	r2, r2, #2
   2c2ba:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   2c2be:	f00b 0201 	and.w	r2, fp, #1
   2c2c2:	210d      	movs	r1, #13
   2c2c4:	4638      	mov	r0, r7
   2c2c6:	f019 fc18 	bl	45afa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2c2ca:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2c2ce:	425a      	negs	r2, r3
   2c2d0:	415a      	adcs	r2, r3
   2c2d2:	2107      	movs	r1, #7
   2c2d4:	4638      	mov	r0, r7
   2c2d6:	f019 fc10 	bl	45afa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2c2da:	f1a9 0102 	sub.w	r1, r9, #2
   2c2de:	424a      	negs	r2, r1
   2c2e0:	414a      	adcs	r2, r1
   2c2e2:	4638      	mov	r0, r7
   2c2e4:	2108      	movs	r1, #8
   2c2e6:	f019 fc08 	bl	45afa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2c2ea:	6862      	ldr	r2, [r4, #4]
   2c2ec:	2109      	movs	r1, #9
   2c2ee:	f002 0201 	and.w	r2, r2, #1
   2c2f2:	4638      	mov	r0, r7
   2c2f4:	f019 fc01 	bl	45afa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2c2f8:	4642      	mov	r2, r8
   2c2fa:	210a      	movs	r1, #10
   2c2fc:	4638      	mov	r0, r7
   2c2fe:	f019 fbfc 	bl	45afa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2c302:	6862      	ldr	r2, [r4, #4]
   2c304:	210c      	movs	r1, #12
   2c306:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2c30a:	4638      	mov	r0, r7
   2c30c:	f019 fbf5 	bl	45afa <atomic_set_bit_to>
	return 0;
   2c310:	f04f 0b00 	mov.w	fp, #0
   2c314:	e709      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2c316:	b108      	cbz	r0, 2c31c <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   2c318:	f019 fd83 	bl	45e22 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2c31c:	2e00      	cmp	r6, #0
   2c31e:	d1ce      	bne.n	2c2be <bt_le_adv_start_legacy+0x1ca>
   2c320:	e7c8      	b.n	2c2b4 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   2c322:	f06f 0b0a 	mvn.w	fp, #10
   2c326:	e700      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   2c328:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2c32c:	e6fd      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   2c32e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2c332:	e6fa      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
   2c334:	4683      	mov	fp, r0
   2c336:	e6f8      	b.n	2c12a <bt_le_adv_start_legacy+0x36>
   2c338:	200000cc 	.word	0x200000cc
   2c33c:	20000000 	.word	0x20000000

0002c340 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2c340:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c342:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2c344:	9a06      	ldr	r2, [sp, #24]
{
   2c346:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2c348:	e9cd 3200 	strd	r3, r2, [sp]
   2c34c:	462b      	mov	r3, r5
   2c34e:	460a      	mov	r2, r1
   2c350:	4601      	mov	r1, r0
   2c352:	4811      	ldr	r0, [pc, #68]	; (2c398 <bt_le_adv_start+0x58>)
   2c354:	f7ff fece 	bl	2c0f4 <bt_le_adv_start_legacy>
   2c358:	4621      	mov	r1, r4
   2c35a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2c35c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2c35e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2c362:	429d      	cmp	r5, r3
   2c364:	d102      	bne.n	2c36c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2c366:	4630      	mov	r0, r6
   2c368:	b002      	add	sp, #8
   2c36a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2c36c:	880a      	ldrh	r2, [r1, #0]
   2c36e:	4282      	cmp	r2, r0
   2c370:	d104      	bne.n	2c37c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2c372:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2c374:	b112      	cbz	r2, 2c37c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2c376:	7812      	ldrb	r2, [r2, #0]
   2c378:	07d2      	lsls	r2, r2, #31
   2c37a:	d402      	bmi.n	2c382 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2c37c:	3301      	adds	r3, #1
   2c37e:	3108      	adds	r1, #8
   2c380:	e7ef      	b.n	2c362 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2c382:	4906      	ldr	r1, [pc, #24]	; (2c39c <bt_le_adv_start+0x5c>)
   2c384:	4806      	ldr	r0, [pc, #24]	; (2c3a0 <bt_le_adv_start+0x60>)
   2c386:	f01c fe33 	bl	48ff0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2c38a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c38e:	2300      	movs	r3, #0
   2c390:	4803      	ldr	r0, [pc, #12]	; (2c3a0 <bt_le_adv_start+0x60>)
   2c392:	f015 fccb 	bl	41d2c <k_work_reschedule>
   2c396:	e7e6      	b.n	2c366 <bt_le_adv_start+0x26>
   2c398:	20000018 	.word	0x20000018
   2c39c:	00045c8b 	.word	0x00045c8b
   2c3a0:	20000030 	.word	0x20000030

0002c3a4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2c3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2c3a6:	4822      	ldr	r0, [pc, #136]	; (2c430 <bt_le_adv_stop+0x8c>)
   2c3a8:	f019 fc6c 	bl	45c84 <bt_le_lim_adv_cancel_timeout>
   2c3ac:	4821      	ldr	r0, [pc, #132]	; (2c434 <bt_le_adv_stop+0x90>)
   2c3ae:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c3b2:	f019 fb32 	bl	45a1a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c3b6:	481f      	ldr	r0, [pc, #124]	; (2c434 <bt_le_adv_stop+0x90>)
   2c3b8:	f019 fb29 	bl	45a0e <atomic_get>
   2c3bc:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c3be:	065a      	lsls	r2, r3, #25
   2c3c0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2c3c4:	d531      	bpl.n	2c42a <bt_le_adv_stop+0x86>
   2c3c6:	481b      	ldr	r0, [pc, #108]	; (2c434 <bt_le_adv_stop+0x90>)
   2c3c8:	f019 fb21 	bl	45a0e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c3cc:	0583      	lsls	r3, r0, #22
   2c3ce:	d521      	bpl.n	2c414 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2c3d0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2c3d2:	4819      	ldr	r0, [pc, #100]	; (2c438 <bt_le_adv_stop+0x94>)
   2c3d4:	9300      	str	r3, [sp, #0]
   2c3d6:	2207      	movs	r2, #7
   2c3d8:	4669      	mov	r1, sp
   2c3da:	f8cd 3003 	str.w	r3, [sp, #3]
   2c3de:	f018 fd5e 	bl	44e9e <memcmp>
   2c3e2:	4b16      	ldr	r3, [pc, #88]	; (2c43c <bt_le_adv_stop+0x98>)
   2c3e4:	b9e8      	cbnz	r0, 2c422 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2c3e6:	4a16      	ldr	r2, [pc, #88]	; (2c440 <bt_le_adv_stop+0x9c>)
   2c3e8:	8891      	ldrh	r1, [r2, #4]
   2c3ea:	6810      	ldr	r0, [r2, #0]
   2c3ec:	7992      	ldrb	r2, [r2, #6]
   2c3ee:	f8ad 100c 	strh.w	r1, [sp, #12]
   2c3f2:	f88d 200e 	strb.w	r2, [sp, #14]
   2c3f6:	9002      	str	r0, [sp, #8]
   2c3f8:	2204      	movs	r2, #4
   2c3fa:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c3fc:	7e18      	ldrb	r0, [r3, #24]
   2c3fe:	f000 fcd1 	bl	2cda4 <bt_conn_lookup_state_le>
   2c402:	4604      	mov	r4, r0
	if (conn) {
   2c404:	b130      	cbz	r0, 2c414 <bt_le_adv_stop+0x70>
		conn->err = status;
   2c406:	2100      	movs	r1, #0
   2c408:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c40a:	f000 fad1 	bl	2c9b0 <bt_conn_set_state>
		bt_conn_unref(conn);
   2c40e:	4620      	mov	r0, r4
   2c410:	f019 fd07 	bl	45e22 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c414:	4806      	ldr	r0, [pc, #24]	; (2c430 <bt_le_adv_stop+0x8c>)
   2c416:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2c418:	b004      	add	sp, #16
   2c41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c41e:	f019 bc0a 	b.w	45c36 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c422:	2205      	movs	r2, #5
   2c424:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2c428:	e7e8      	b.n	2c3fc <bt_le_adv_stop+0x58>
}
   2c42a:	b004      	add	sp, #16
   2c42c:	bd10      	pop	{r4, pc}
   2c42e:	bf00      	nop
   2c430:	20000018 	.word	0x20000018
   2c434:	20000028 	.word	0x20000028
   2c438:	20000021 	.word	0x20000021
   2c43c:	20000000 	.word	0x20000000
   2c440:	00049bfb 	.word	0x00049bfb

0002c444 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2c444:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c446:	481e      	ldr	r0, [pc, #120]	; (2c4c0 <bt_le_adv_resume+0x7c>)
   2c448:	4c1d      	ldr	r4, [pc, #116]	; (2c4c0 <bt_le_adv_resume+0x7c>)
   2c44a:	f019 fae0 	bl	45a0e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2c44e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   2c452:	d032      	beq.n	2c4ba <bt_le_adv_resume+0x76>
   2c454:	4620      	mov	r0, r4
   2c456:	f019 fada 	bl	45a0e <atomic_get>
   2c45a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c45c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   2c460:	d42b      	bmi.n	2c4ba <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c462:	4620      	mov	r0, r4
   2c464:	f019 fad3 	bl	45a0e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2c468:	0583      	lsls	r3, r0, #22
   2c46a:	d526      	bpl.n	2c4ba <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2c46c:	a901      	add	r1, sp, #4
   2c46e:	f1a4 0010 	sub.w	r0, r4, #16
   2c472:	f7ff fdf1 	bl	2c058 <le_adv_start_add_conn>
	if (err) {
   2c476:	bb00      	cbnz	r0, 2c4ba <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c478:	2101      	movs	r1, #1
   2c47a:	f1a4 0010 	sub.w	r0, r4, #16
   2c47e:	f019 fbda 	bl	45c36 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   2c482:	b150      	cbz	r0, 2c49a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c484:	4629      	mov	r1, r5
   2c486:	9801      	ldr	r0, [sp, #4]
   2c488:	f000 fa92 	bl	2c9b0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c48c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c490:	4620      	mov	r0, r4
   2c492:	f019 fac2 	bl	45a1a <atomic_and>
	return (old & mask) != 0;
   2c496:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2c49a:	9801      	ldr	r0, [sp, #4]
   2c49c:	f019 fcc1 	bl	45e22 <bt_conn_unref>
	if (persist_paused) {
   2c4a0:	b15d      	cbz	r5, 2c4ba <bt_le_adv_resume+0x76>
   2c4a2:	f3bf 8f5b 	dmb	ish
   2c4a6:	e854 3f00 	ldrex	r3, [r4]
   2c4aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c4ae:	e844 3200 	strex	r2, r3, [r4]
   2c4b2:	2a00      	cmp	r2, #0
   2c4b4:	d1f7      	bne.n	2c4a6 <bt_le_adv_resume+0x62>
   2c4b6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2c4ba:	b003      	add	sp, #12
   2c4bc:	bd30      	pop	{r4, r5, pc}
   2c4be:	bf00      	nop
   2c4c0:	20000028 	.word	0x20000028

0002c4c4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2c4c4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2c4c6:	4904      	ldr	r1, [pc, #16]	; (2c4d8 <bt_pub_key_is_debug+0x14>)
   2c4c8:	2240      	movs	r2, #64	; 0x40
   2c4ca:	f018 fce8 	bl	44e9e <memcmp>
}
   2c4ce:	fab0 f080 	clz	r0, r0
   2c4d2:	0940      	lsrs	r0, r0, #5
   2c4d4:	bd08      	pop	{r3, pc}
   2c4d6:	bf00      	nop
   2c4d8:	0004b88a 	.word	0x0004b88a

0002c4dc <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2c4dc:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2c4de:	4b31      	ldr	r3, [pc, #196]	; (2c5a4 <bt_pub_key_gen+0xc8>)
   2c4e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2c4e4:	f003 0306 	and.w	r3, r3, #6
   2c4e8:	2b06      	cmp	r3, #6
   2c4ea:	d152      	bne.n	2c592 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2c4ec:	2800      	cmp	r0, #0
   2c4ee:	d053      	beq.n	2c598 <bt_pub_key_gen+0xbc>
	return list->head;
   2c4f0:	4e2d      	ldr	r6, [pc, #180]	; (2c5a8 <bt_pub_key_gen+0xcc>)
   2c4f2:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c4f4:	b132      	cbz	r2, 2c504 <bt_pub_key_gen+0x28>
   2c4f6:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2c4f8:	4298      	cmp	r0, r3
   2c4fa:	d050      	beq.n	2c59e <bt_pub_key_gen+0xc2>
	return node->next;
   2c4fc:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c4fe:	b10b      	cbz	r3, 2c504 <bt_pub_key_gen+0x28>
   2c500:	3b04      	subs	r3, #4
   2c502:	e7f9      	b.n	2c4f8 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2c504:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c506:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2c508:	1d03      	adds	r3, r0, #4
	list->head = node;
   2c50a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c50c:	b902      	cbnz	r2, 2c510 <bt_pub_key_gen+0x34>
	list->tail = node;
   2c50e:	6073      	str	r3, [r6, #4]
   2c510:	4c26      	ldr	r4, [pc, #152]	; (2c5ac <bt_pub_key_gen+0xd0>)
   2c512:	f3bf 8f5b 	dmb	ish
   2c516:	e854 2f00 	ldrex	r2, [r4]
   2c51a:	f042 0310 	orr.w	r3, r2, #16
   2c51e:	e844 3100 	strex	r1, r3, [r4]
   2c522:	2900      	cmp	r1, #0
   2c524:	d1f7      	bne.n	2c516 <bt_pub_key_gen+0x3a>
   2c526:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c52a:	f012 0210 	ands.w	r2, r2, #16
   2c52e:	d002      	beq.n	2c536 <bt_pub_key_gen+0x5a>
		return 0;
   2c530:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   2c532:	4628      	mov	r0, r5
   2c534:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c536:	f3bf 8f5b 	dmb	ish
   2c53a:	e854 3f00 	ldrex	r3, [r4]
   2c53e:	f023 0308 	bic.w	r3, r3, #8
   2c542:	e844 3100 	strex	r1, r3, [r4]
   2c546:	2900      	cmp	r1, #0
   2c548:	d1f7      	bne.n	2c53a <bt_pub_key_gen+0x5e>
   2c54a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2c54e:	4611      	mov	r1, r2
   2c550:	f242 0025 	movw	r0, #8229	; 0x2025
   2c554:	f7fe ff1a 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2c558:	4605      	mov	r5, r0
   2c55a:	2800      	cmp	r0, #0
   2c55c:	d0e8      	beq.n	2c530 <bt_pub_key_gen+0x54>
   2c55e:	f3bf 8f5b 	dmb	ish
   2c562:	e854 3f00 	ldrex	r3, [r4]
   2c566:	f023 0310 	bic.w	r3, r3, #16
   2c56a:	e844 3200 	strex	r2, r3, [r4]
   2c56e:	2a00      	cmp	r2, #0
   2c570:	d1f7      	bne.n	2c562 <bt_pub_key_gen+0x86>
   2c572:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c576:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c578:	b13c      	cbz	r4, 2c58a <bt_pub_key_gen+0xae>
			if (cb->func) {
   2c57a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c57e:	3c04      	subs	r4, #4
			if (cb->func) {
   2c580:	b10b      	cbz	r3, 2c586 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2c582:	2000      	movs	r0, #0
   2c584:	4798      	blx	r3
	return node->next;
   2c586:	6864      	ldr	r4, [r4, #4]
   2c588:	e7f6      	b.n	2c578 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2c58a:	2300      	movs	r3, #0
	list->tail = NULL;
   2c58c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2c590:	e7cf      	b.n	2c532 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2c592:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2c596:	e7cc      	b.n	2c532 <bt_pub_key_gen+0x56>
		return -EINVAL;
   2c598:	f06f 0515 	mvn.w	r5, #21
   2c59c:	e7c9      	b.n	2c532 <bt_pub_key_gen+0x56>
			return -EALREADY;
   2c59e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2c5a2:	e7c6      	b.n	2c532 <bt_pub_key_gen+0x56>
   2c5a4:	20000000 	.word	0x20000000
   2c5a8:	20001ca4 	.word	0x20001ca4
   2c5ac:	200000cc 	.word	0x200000cc

0002c5b0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c5b0:	4b05      	ldr	r3, [pc, #20]	; (2c5c8 <bt_pub_key_get+0x18>)
   2c5b2:	f3bf 8f5b 	dmb	ish
   2c5b6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2c5b8:	4804      	ldr	r0, [pc, #16]	; (2c5cc <bt_pub_key_get+0x1c>)
   2c5ba:	f3bf 8f5b 	dmb	ish
		return pub_key;
   2c5be:	f013 0f08 	tst.w	r3, #8
}
   2c5c2:	bf08      	it	eq
   2c5c4:	2000      	moveq	r0, #0
   2c5c6:	4770      	bx	lr
   2c5c8:	200000cc 	.word	0x200000cc
   2c5cc:	20003c26 	.word	0x20003c26

0002c5d0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2c5d2:	4d1f      	ldr	r5, [pc, #124]	; (2c650 <bt_dh_key_gen+0x80>)
   2c5d4:	682b      	ldr	r3, [r5, #0]
   2c5d6:	428b      	cmp	r3, r1
{
   2c5d8:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2c5da:	d032      	beq.n	2c642 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c5dc:	b113      	cbz	r3, 2c5e4 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2c5de:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2c5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5e4:	4b1b      	ldr	r3, [pc, #108]	; (2c654 <bt_dh_key_gen+0x84>)
   2c5e6:	f3bf 8f5b 	dmb	ish
   2c5ea:	681a      	ldr	r2, [r3, #0]
   2c5ec:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c5f0:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2c5f4:	06d2      	lsls	r2, r2, #27
   2c5f6:	d4f2      	bmi.n	2c5de <bt_dh_key_gen+0xe>
   2c5f8:	f3bf 8f5b 	dmb	ish
   2c5fc:	681b      	ldr	r3, [r3, #0]
   2c5fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2c602:	071b      	lsls	r3, r3, #28
   2c604:	d520      	bpl.n	2c648 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2c606:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2c608:	f242 0026 	movw	r0, #8230	; 0x2026
   2c60c:	2140      	movs	r1, #64	; 0x40
   2c60e:	f7fe fe61 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   2c612:	4604      	mov	r4, r0
   2c614:	b190      	cbz	r0, 2c63c <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2c616:	2140      	movs	r1, #64	; 0x40
   2c618:	3008      	adds	r0, #8
   2c61a:	f01b fbf3 	bl	47e04 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2c61e:	2240      	movs	r2, #64	; 0x40
   2c620:	4631      	mov	r1, r6
   2c622:	f018 fc4d 	bl	44ec0 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2c626:	463a      	mov	r2, r7
   2c628:	4621      	mov	r1, r4
   2c62a:	f242 0026 	movw	r0, #8230	; 0x2026
   2c62e:	f7fe fead 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   2c632:	2800      	cmp	r0, #0
   2c634:	d0d5      	beq.n	2c5e2 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2c636:	2300      	movs	r3, #0
   2c638:	602b      	str	r3, [r5, #0]
		return err;
   2c63a:	e7d2      	b.n	2c5e2 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2c63c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c640:	e7f9      	b.n	2c636 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2c642:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2c646:	e7cc      	b.n	2c5e2 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2c648:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2c64c:	e7c9      	b.n	2c5e2 <bt_dh_key_gen+0x12>
   2c64e:	bf00      	nop
   2c650:	20001ca0 	.word	0x20001ca0
   2c654:	200000cc 	.word	0x200000cc

0002c658 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c65a:	4c1b      	ldr	r4, [pc, #108]	; (2c6c8 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2c65c:	6886      	ldr	r6, [r0, #8]
   2c65e:	f3bf 8f5b 	dmb	ish
   2c662:	e854 3f00 	ldrex	r3, [r4]
   2c666:	f023 0310 	bic.w	r3, r3, #16
   2c66a:	e844 3200 	strex	r2, r3, [r4]
   2c66e:	2a00      	cmp	r2, #0
   2c670:	d1f7      	bne.n	2c662 <bt_hci_evt_le_pkey_complete+0xa>
   2c672:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2c676:	7833      	ldrb	r3, [r6, #0]
   2c678:	b983      	cbnz	r3, 2c69c <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2c67a:	4814      	ldr	r0, [pc, #80]	; (2c6cc <bt_hci_evt_le_pkey_complete+0x74>)
   2c67c:	2240      	movs	r2, #64	; 0x40
   2c67e:	1c71      	adds	r1, r6, #1
   2c680:	f018 fc1e 	bl	44ec0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c684:	f3bf 8f5b 	dmb	ish
   2c688:	e854 3f00 	ldrex	r3, [r4]
   2c68c:	f043 0308 	orr.w	r3, r3, #8
   2c690:	e844 3200 	strex	r2, r3, [r4]
   2c694:	2a00      	cmp	r2, #0
   2c696:	d1f7      	bne.n	2c688 <bt_hci_evt_le_pkey_complete+0x30>
   2c698:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c69c:	4d0c      	ldr	r5, [pc, #48]	; (2c6d0 <bt_hci_evt_le_pkey_complete+0x78>)
   2c69e:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c6a0:	b16c      	cbz	r4, 2c6be <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2c6a2:	4f0a      	ldr	r7, [pc, #40]	; (2c6cc <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c6a4:	3c04      	subs	r4, #4
		if (cb->func) {
   2c6a6:	6823      	ldr	r3, [r4, #0]
   2c6a8:	b12b      	cbz	r3, 2c6b6 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2c6aa:	7832      	ldrb	r2, [r6, #0]
   2c6ac:	2a00      	cmp	r2, #0
   2c6ae:	bf0c      	ite	eq
   2c6b0:	4638      	moveq	r0, r7
   2c6b2:	2000      	movne	r0, #0
   2c6b4:	4798      	blx	r3
	return node->next;
   2c6b6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c6b8:	b10c      	cbz	r4, 2c6be <bt_hci_evt_le_pkey_complete+0x66>
   2c6ba:	3c04      	subs	r4, #4
   2c6bc:	e7f3      	b.n	2c6a6 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2c6be:	2300      	movs	r3, #0
	list->tail = NULL;
   2c6c0:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2c6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c6c6:	bf00      	nop
   2c6c8:	200000cc 	.word	0x200000cc
   2c6cc:	20003c26 	.word	0x20003c26
   2c6d0:	20001ca4 	.word	0x20001ca4

0002c6d4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2c6d4:	4905      	ldr	r1, [pc, #20]	; (2c6ec <bt_hci_evt_le_dhkey_complete+0x18>)
   2c6d6:	680b      	ldr	r3, [r1, #0]
   2c6d8:	b133      	cbz	r3, 2c6e8 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2c6da:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2c6dc:	2000      	movs	r0, #0
   2c6de:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2c6e0:	7811      	ldrb	r1, [r2, #0]
   2c6e2:	b901      	cbnz	r1, 2c6e6 <bt_hci_evt_le_dhkey_complete+0x12>
   2c6e4:	1c50      	adds	r0, r2, #1
   2c6e6:	4718      	bx	r3
	}
}
   2c6e8:	4770      	bx	lr
   2c6ea:	bf00      	nop
   2c6ec:	20001ca0 	.word	0x20001ca0

0002c6f0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2c6f0:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2c6f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2c6f6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2c6f8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2c6fa:	4801      	ldr	r0, [pc, #4]	; (2c700 <tx_free+0x10>)
   2c6fc:	f01c bb81 	b.w	48e02 <k_queue_append>
   2c700:	20000c2c 	.word	0x20000c2c

0002c704 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2c704:	4b0e      	ldr	r3, [pc, #56]	; (2c740 <notify_connected+0x3c>)
{
   2c706:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2c708:	681d      	ldr	r5, [r3, #0]
{
   2c70a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2c70c:	b955      	cbnz	r5, 2c724 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c70e:	4d0d      	ldr	r5, [pc, #52]	; (2c744 <notify_connected+0x40>)
   2c710:	4e0d      	ldr	r6, [pc, #52]	; (2c748 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2c712:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c714:	42b5      	cmp	r5, r6
   2c716:	d30c      	bcc.n	2c732 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2c718:	b989      	cbnz	r1, 2c73e <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2c71a:	4620      	mov	r0, r4
	}
}
   2c71c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2c720:	f002 b90e 	b.w	2e940 <bt_gatt_connected>
		if (cb->connected) {
   2c724:	682b      	ldr	r3, [r5, #0]
   2c726:	b113      	cbz	r3, 2c72e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2c728:	7b21      	ldrb	r1, [r4, #12]
   2c72a:	4620      	mov	r0, r4
   2c72c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c72e:	69ed      	ldr	r5, [r5, #28]
   2c730:	e7ec      	b.n	2c70c <notify_connected+0x8>
		if (cb->connected) {
   2c732:	682b      	ldr	r3, [r5, #0]
   2c734:	b10b      	cbz	r3, 2c73a <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2c736:	4620      	mov	r0, r4
   2c738:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c73a:	3520      	adds	r5, #32
   2c73c:	e7e9      	b.n	2c712 <notify_connected+0xe>
}
   2c73e:	bd70      	pop	{r4, r5, r6, pc}
   2c740:	20001cb0 	.word	0x20001cb0
   2c744:	00049a8c 	.word	0x00049a8c
   2c748:	00049a8c 	.word	0x00049a8c

0002c74c <send_frag>:
{
   2c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2c750:	694d      	ldr	r5, [r1, #20]
{
   2c752:	4604      	mov	r4, r0
   2c754:	460e      	mov	r6, r1
   2c756:	4690      	mov	r8, r2
   2c758:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   2c75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c75e:	483e      	ldr	r0, [pc, #248]	; (2c858 <send_frag+0x10c>)
   2c760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c764:	f015 f900 	bl	41968 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2c768:	7b63      	ldrb	r3, [r4, #13]
   2c76a:	2b07      	cmp	r3, #7
   2c76c:	d146      	bne.n	2c7fc <send_frag+0xb0>
	__asm__ volatile(
   2c76e:	f04f 0320 	mov.w	r3, #32
   2c772:	f3ef 8211 	mrs	r2, BASEPRI
   2c776:	f383 8812 	msr	BASEPRI_MAX, r3
   2c77a:	f3bf 8f6f 	isb	sy
	if (tx) {
   2c77e:	69a3      	ldr	r3, [r4, #24]
   2c780:	2d00      	cmp	r5, #0
   2c782:	d04d      	beq.n	2c820 <send_frag+0xd4>
	parent->next = child;
   2c784:	2100      	movs	r1, #0
   2c786:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2c788:	2b00      	cmp	r3, #0
   2c78a:	d146      	bne.n	2c81a <send_frag+0xce>
	list->head = node;
   2c78c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2c790:	f382 8811 	msr	BASEPRI, r2
   2c794:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2c798:	2104      	movs	r1, #4
   2c79a:	f106 0008 	add.w	r0, r6, #8
   2c79e:	f01b fb48 	bl	47e32 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c7a2:	8823      	ldrh	r3, [r4, #0]
   2c7a4:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   2c7a8:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c7ac:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c7ae:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c7b2:	3b04      	subs	r3, #4
   2c7b4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2c7b6:	2302      	movs	r3, #2
   2c7b8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2c7ba:	4630      	mov	r0, r6
   2c7bc:	f019 f825 	bl	4580a <bt_send>
	if (err) {
   2c7c0:	2800      	cmp	r0, #0
   2c7c2:	d047      	beq.n	2c854 <send_frag+0x108>
	__asm__ volatile(
   2c7c4:	f04f 0320 	mov.w	r3, #32
   2c7c8:	f3ef 8011 	mrs	r0, BASEPRI
   2c7cc:	f383 8812 	msr	BASEPRI_MAX, r3
   2c7d0:	f3bf 8f6f 	isb	sy
		if (tx) {
   2c7d4:	2d00      	cmp	r5, #0
   2c7d6:	d037      	beq.n	2c848 <send_frag+0xfc>
	return list->head;
   2c7d8:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c7da:	2200      	movs	r2, #0
   2c7dc:	b153      	cbz	r3, 2c7f4 <send_frag+0xa8>
   2c7de:	429d      	cmp	r5, r3
   2c7e0:	d12f      	bne.n	2c842 <send_frag+0xf6>
	return node->next;
   2c7e2:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   2c7e4:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2c7e6:	bb3a      	cbnz	r2, 2c838 <send_frag+0xec>
   2c7e8:	42a9      	cmp	r1, r5
	list->head = node;
   2c7ea:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2c7ec:	d100      	bne.n	2c7f0 <send_frag+0xa4>
	list->tail = node;
   2c7ee:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   2c7f0:	2300      	movs	r3, #0
   2c7f2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2c7f4:	f380 8811 	msr	BASEPRI, r0
   2c7f8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2c7fc:	4816      	ldr	r0, [pc, #88]	; (2c858 <send_frag+0x10c>)
   2c7fe:	f015 f88d 	bl	4191c <z_impl_k_sem_give>
	if (tx) {
   2c802:	b115      	cbz	r5, 2c80a <send_frag+0xbe>
		tx_free(tx);
   2c804:	4628      	mov	r0, r5
   2c806:	f7ff ff73 	bl	2c6f0 <tx_free>
	if (always_consume) {
   2c80a:	b11f      	cbz	r7, 2c814 <send_frag+0xc8>
		net_buf_unref(buf);
   2c80c:	4630      	mov	r0, r6
   2c80e:	f010 fdbf 	bl	3d390 <net_buf_unref>
	return false;
   2c812:	2700      	movs	r7, #0
}
   2c814:	4638      	mov	r0, r7
   2c816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c81a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c81c:	61a5      	str	r5, [r4, #24]
}
   2c81e:	e7b7      	b.n	2c790 <send_frag+0x44>
		if (tail_tx) {
   2c820:	b133      	cbz	r3, 2c830 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   2c822:	f103 090c 	add.w	r9, r3, #12
   2c826:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2c828:	3301      	adds	r3, #1
   2c82a:	f8c9 3000 	str.w	r3, [r9]
   2c82e:	e7af      	b.n	2c790 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2c830:	69e3      	ldr	r3, [r4, #28]
   2c832:	f104 091c 	add.w	r9, r4, #28
   2c836:	e7f7      	b.n	2c828 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   2c838:	42a9      	cmp	r1, r5
	parent->next = child;
   2c83a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2c83c:	bf08      	it	eq
   2c83e:	61a2      	streq	r2, [r4, #24]
}
   2c840:	e7d6      	b.n	2c7f0 <send_frag+0xa4>
	return node->next;
   2c842:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c844:	681b      	ldr	r3, [r3, #0]
   2c846:	e7c9      	b.n	2c7dc <send_frag+0x90>
			(*pending_no_cb)--;
   2c848:	f8d9 3000 	ldr.w	r3, [r9]
   2c84c:	3b01      	subs	r3, #1
   2c84e:	f8c9 3000 	str.w	r3, [r9]
   2c852:	e7cf      	b.n	2c7f4 <send_frag+0xa8>
	return true;
   2c854:	2701      	movs	r7, #1
   2c856:	e7dd      	b.n	2c814 <send_frag+0xc8>
   2c858:	20000100 	.word	0x20000100

0002c85c <bt_conn_get_pkts>:
}
   2c85c:	4800      	ldr	r0, [pc, #0]	; (2c860 <bt_conn_get_pkts+0x4>)
   2c85e:	4770      	bx	lr
   2c860:	20000100 	.word	0x20000100

0002c864 <bt_conn_new>:
{
   2c864:	b538      	push	{r3, r4, r5, lr}
   2c866:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   2c868:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c86a:	2501      	movs	r5, #1
   2c86c:	428b      	cmp	r3, r1
   2c86e:	d102      	bne.n	2c876 <bt_conn_new+0x12>
		return NULL;
   2c870:	2400      	movs	r4, #0
}
   2c872:	4620      	mov	r0, r4
   2c874:	bd38      	pop	{r3, r4, r5, pc}
   2c876:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   2c87a:	f3bf 8f5b 	dmb	ish
   2c87e:	e852 0f00 	ldrex	r0, [r2]
   2c882:	2800      	cmp	r0, #0
   2c884:	d104      	bne.n	2c890 <bt_conn_new+0x2c>
   2c886:	e842 5c00 	strex	ip, r5, [r2]
   2c88a:	f1bc 0f00 	cmp.w	ip, #0
   2c88e:	d1f6      	bne.n	2c87e <bt_conn_new+0x1a>
   2c890:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2c894:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2c898:	d002      	beq.n	2c8a0 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   2c89a:	3301      	adds	r3, #1
   2c89c:	4604      	mov	r4, r0
   2c89e:	e7e5      	b.n	2c86c <bt_conn_new+0x8>
	if (!conn) {
   2c8a0:	2c00      	cmp	r4, #0
   2c8a2:	d0e6      	beq.n	2c872 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2c8a4:	22bc      	movs	r2, #188	; 0xbc
   2c8a6:	2100      	movs	r1, #0
   2c8a8:	4620      	mov	r0, r4
   2c8aa:	f018 fb14 	bl	44ed6 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2c8ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c8b2:	4904      	ldr	r1, [pc, #16]	; (2c8c4 <bt_conn_new+0x60>)
   2c8b4:	f01c fb9c 	bl	48ff0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2c8b8:	4903      	ldr	r1, [pc, #12]	; (2c8c8 <bt_conn_new+0x64>)
   2c8ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2c8be:	f01c fb71 	bl	48fa4 <k_work_init>
	return conn;
   2c8c2:	e7d6      	b.n	2c872 <bt_conn_new+0xe>
   2c8c4:	0002ce51 	.word	0x0002ce51
   2c8c8:	00045cff 	.word	0x00045cff

0002c8cc <bt_conn_send_cb>:
{
   2c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c8ce:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2c8d0:	7b43      	ldrb	r3, [r0, #13]
   2c8d2:	2b07      	cmp	r3, #7
{
   2c8d4:	4604      	mov	r4, r0
   2c8d6:	460d      	mov	r5, r1
   2c8d8:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2c8da:	d114      	bne.n	2c906 <bt_conn_send_cb+0x3a>
	if (cb) {
   2c8dc:	b312      	cbz	r2, 2c924 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2c8de:	f015 fd1b 	bl	42318 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2c8e2:	4b13      	ldr	r3, [pc, #76]	; (2c930 <bt_conn_send_cb+0x64>)
   2c8e4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2c8e6:	4813      	ldr	r0, [pc, #76]	; (2c934 <bt_conn_send_cb+0x68>)
   2c8e8:	bf07      	ittee	eq
   2c8ea:	2200      	moveq	r2, #0
   2c8ec:	2300      	moveq	r3, #0
   2c8ee:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2c8f2:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2c8f6:	f014 ffdd 	bl	418b4 <z_impl_k_queue_get>
		if (!tx) {
   2c8fa:	b1a8      	cbz	r0, 2c928 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2c8fc:	7b63      	ldrb	r3, [r4, #13]
   2c8fe:	2b07      	cmp	r3, #7
   2c900:	d004      	beq.n	2c90c <bt_conn_send_cb+0x40>
			tx_free(tx);
   2c902:	f7ff fef5 	bl	2c6f0 <tx_free>
		return -ENOTCONN;
   2c906:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c90a:	e00a      	b.n	2c922 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   2c90c:	2300      	movs	r3, #0
		tx->user_data = user_data;
   2c90e:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2c912:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2c914:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   2c916:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2c91a:	4629      	mov	r1, r5
   2c91c:	f01b fa33 	bl	47d86 <net_buf_put>
	return 0;
   2c920:	2000      	movs	r0, #0
}
   2c922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   2c924:	614a      	str	r2, [r1, #20]
   2c926:	e7f6      	b.n	2c916 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   2c928:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c92c:	e7f9      	b.n	2c922 <bt_conn_send_cb+0x56>
   2c92e:	bf00      	nop
   2c930:	20001948 	.word	0x20001948
   2c934:	20000c2c 	.word	0x20000c2c

0002c938 <bt_conn_prepare_events>:
{
   2c938:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   2c93a:	4b16      	ldr	r3, [pc, #88]	; (2c994 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
   2c93c:	4c16      	ldr	r4, [pc, #88]	; (2c998 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
   2c93e:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c940:	2101      	movs	r1, #1
{
   2c942:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
   2c944:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c946:	f01c fe71 	bl	4962c <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   2c94a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2c94e:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
   2c952:	f019 f9ab 	bl	45cac <atomic_get>
   2c956:	b908      	cbnz	r0, 2c95c <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
   2c958:	2001      	movs	r0, #1
}
   2c95a:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2c95c:	7b63      	ldrb	r3, [r4, #13]
   2c95e:	b953      	cbnz	r3, 2c976 <bt_conn_prepare_events+0x3e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c960:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2c964:	1d20      	adds	r0, r4, #4
   2c966:	f019 f992 	bl	45c8e <atomic_and>
   2c96a:	0643      	lsls	r3, r0, #25
   2c96c:	d503      	bpl.n	2c976 <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
   2c96e:	4620      	mov	r0, r4
   2c970:	f019 f9d1 	bl	45d16 <conn_cleanup>
   2c974:	e7f0      	b.n	2c958 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
   2c976:	7b63      	ldrb	r3, [r4, #13]
   2c978:	2b07      	cmp	r3, #7
   2c97a:	d1ed      	bne.n	2c958 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
   2c97c:	4b07      	ldr	r3, [pc, #28]	; (2c99c <bt_conn_prepare_events+0x64>)
   2c97e:	4630      	mov	r0, r6
   2c980:	2200      	movs	r2, #0
   2c982:	2104      	movs	r1, #4
   2c984:	f01c fe52 	bl	4962c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2c988:	2301      	movs	r3, #1
   2c98a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
   2c98e:	2002      	movs	r0, #2
	return ev_count;
   2c990:	e7e3      	b.n	2c95a <bt_conn_prepare_events+0x22>
   2c992:	bf00      	nop
   2c994:	200003b8 	.word	0x200003b8
   2c998:	20000fb0 	.word	0x20000fb0
   2c99c:	20000fe8 	.word	0x20000fe8

0002c9a0 <bt_conn_lookup_handle>:
{
   2c9a0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2c9a2:	2101      	movs	r1, #1
   2c9a4:	4801      	ldr	r0, [pc, #4]	; (2c9ac <bt_conn_lookup_handle+0xc>)
   2c9a6:	f019 ba55 	b.w	45e54 <conn_lookup_handle>
   2c9aa:	bf00      	nop
   2c9ac:	20000fb0 	.word	0x20000fb0

0002c9b0 <bt_conn_set_state>:
{
   2c9b0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2c9b2:	7b45      	ldrb	r5, [r0, #13]
   2c9b4:	428d      	cmp	r5, r1
{
   2c9b6:	4604      	mov	r4, r0
	if (conn->state == state) {
   2c9b8:	f000 809d 	beq.w	2caf6 <bt_conn_set_state+0x146>
	conn->state = state;
   2c9bc:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2c9be:	b925      	cbnz	r5, 2c9ca <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   2c9c0:	7883      	ldrb	r3, [r0, #2]
   2c9c2:	2b08      	cmp	r3, #8
   2c9c4:	d001      	beq.n	2c9ca <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   2c9c6:	f019 fa11 	bl	45dec <bt_conn_ref>
	switch (conn->state) {
   2c9ca:	7b63      	ldrb	r3, [r4, #13]
   2c9cc:	2b01      	cmp	r3, #1
   2c9ce:	d116      	bne.n	2c9fe <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   2c9d0:	4d49      	ldr	r5, [pc, #292]	; (2caf8 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
   2c9d2:	2600      	movs	r6, #0
	__asm__ volatile(
   2c9d4:	f04f 0320 	mov.w	r3, #32
   2c9d8:	f3ef 8211 	mrs	r2, BASEPRI
   2c9dc:	f383 8812 	msr	BASEPRI_MAX, r3
   2c9e0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2c9e4:	69e3      	ldr	r3, [r4, #28]
   2c9e6:	2b00      	cmp	r3, #0
   2c9e8:	d066      	beq.n	2cab8 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
   2c9ea:	3b01      	subs	r3, #1
   2c9ec:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2c9ee:	f382 8811 	msr	BASEPRI, r2
   2c9f2:	f3bf 8f6f 	isb	sy
   2c9f6:	4628      	mov	r0, r5
   2c9f8:	f014 ff90 	bl	4191c <z_impl_k_sem_give>
}
   2c9fc:	e7ea      	b.n	2c9d4 <bt_conn_set_state+0x24>
	switch (conn->state) {
   2c9fe:	2b07      	cmp	r3, #7
   2ca00:	d009      	beq.n	2ca16 <bt_conn_set_state+0x66>
   2ca02:	2b00      	cmp	r3, #0
   2ca04:	d177      	bne.n	2caf6 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2ca06:	78a3      	ldrb	r3, [r4, #2]
   2ca08:	2b04      	cmp	r3, #4
   2ca0a:	d11e      	bne.n	2ca4a <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   2ca0c:	4620      	mov	r0, r4
}
   2ca0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2ca12:	f019 ba06 	b.w	45e22 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2ca16:	78a3      	ldrb	r3, [r4, #2]
   2ca18:	2b04      	cmp	r3, #4
   2ca1a:	d06c      	beq.n	2caf6 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
   2ca1c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2ca20:	f01c f9e3 	bl	48dea <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2ca24:	4835      	ldr	r0, [pc, #212]	; (2cafc <bt_conn_set_state+0x14c>)
   2ca26:	2100      	movs	r1, #0
   2ca28:	f015 ff36 	bl	42898 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2ca2c:	2300      	movs	r3, #0
	list->tail = NULL;
   2ca2e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2ca32:	78e3      	ldrb	r3, [r4, #3]
   2ca34:	2b01      	cmp	r3, #1
   2ca36:	d15e      	bne.n	2caf6 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
   2ca38:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2ca3c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   2ca40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2ca44:	2300      	movs	r3, #0
   2ca46:	f015 b93d 	b.w	41cc4 <k_work_schedule>
		switch (old_state) {
   2ca4a:	3d01      	subs	r5, #1
   2ca4c:	2d05      	cmp	r5, #5
   2ca4e:	d852      	bhi.n	2caf6 <bt_conn_set_state+0x146>
   2ca50:	a301      	add	r3, pc, #4	; (adr r3, 2ca58 <bt_conn_set_state+0xa8>)
   2ca52:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2ca56:	bf00      	nop
   2ca58:	0002ca71 	.word	0x0002ca71
   2ca5c:	0002caab 	.word	0x0002caab
   2ca60:	0002ca0d 	.word	0x0002ca0d
   2ca64:	0002ca0d 	.word	0x0002ca0d
   2ca68:	0002caab 	.word	0x0002caab
   2ca6c:	0002caab 	.word	0x0002caab
			tx_notify(conn);
   2ca70:	4620      	mov	r0, r4
   2ca72:	f019 f921 	bl	45cb8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2ca76:	78a3      	ldrb	r3, [r4, #2]
   2ca78:	2b01      	cmp	r3, #1
   2ca7a:	d103      	bne.n	2ca84 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
   2ca7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2ca80:	f01c fac2 	bl	49008 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ca84:	f3bf 8f5b 	dmb	ish
   2ca88:	3404      	adds	r4, #4
   2ca8a:	e854 3f00 	ldrex	r3, [r4]
   2ca8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ca92:	e844 3200 	strex	r2, r3, [r4]
   2ca96:	2a00      	cmp	r2, #0
   2ca98:	d1f7      	bne.n	2ca8a <bt_conn_set_state+0xda>
   2ca9a:	f3bf 8f5b 	dmb	ish
   2ca9e:	4817      	ldr	r0, [pc, #92]	; (2cafc <bt_conn_set_state+0x14c>)
}
   2caa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2caa4:	2100      	movs	r1, #0
   2caa6:	f015 bef7 	b.w	42898 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2caaa:	7b23      	ldrb	r3, [r4, #12]
   2caac:	2b00      	cmp	r3, #0
   2caae:	d0ad      	beq.n	2ca0c <bt_conn_set_state+0x5c>
				notify_connected(conn);
   2cab0:	4620      	mov	r0, r4
   2cab2:	f7ff fe27 	bl	2c704 <notify_connected>
   2cab6:	e7a9      	b.n	2ca0c <bt_conn_set_state+0x5c>
	return list->head;
   2cab8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2caba:	b128      	cbz	r0, 2cac8 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cabc:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2cabe:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2cac0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cac2:	4288      	cmp	r0, r1
	list->tail = node;
   2cac4:	bf08      	it	eq
   2cac6:	61a3      	streq	r3, [r4, #24]
   2cac8:	f382 8811 	msr	BASEPRI, r2
   2cacc:	f3bf 8f6f 	isb	sy
		if (!node) {
   2cad0:	b188      	cbz	r0, 2caf6 <bt_conn_set_state+0x146>
	__asm__ volatile(
   2cad2:	f04f 0220 	mov.w	r2, #32
   2cad6:	f3ef 8311 	mrs	r3, BASEPRI
   2cada:	f382 8812 	msr	BASEPRI_MAX, r2
   2cade:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2cae2:	68c2      	ldr	r2, [r0, #12]
   2cae4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2cae6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2cae8:	f383 8811 	msr	BASEPRI, r3
   2caec:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2caf0:	f7ff fdfe 	bl	2c6f0 <tx_free>
   2caf4:	e77f      	b.n	2c9f6 <bt_conn_set_state+0x46>
}
   2caf6:	bd70      	pop	{r4, r5, r6, pc}
   2caf8:	20000100 	.word	0x20000100
   2cafc:	200003b8 	.word	0x200003b8

0002cb00 <bt_conn_index>:
		index = conn - acl_conns;
   2cb00:	4b03      	ldr	r3, [pc, #12]	; (2cb10 <bt_conn_index+0x10>)
   2cb02:	1ac0      	subs	r0, r0, r3
   2cb04:	4b03      	ldr	r3, [pc, #12]	; (2cb14 <bt_conn_index+0x14>)
   2cb06:	1180      	asrs	r0, r0, #6
   2cb08:	4358      	muls	r0, r3
}
   2cb0a:	b2c0      	uxtb	r0, r0
   2cb0c:	4770      	bx	lr
   2cb0e:	bf00      	nop
   2cb10:	20000fb0 	.word	0x20000fb0
   2cb14:	aaaaaaab 	.word	0xaaaaaaab

0002cb18 <bt_conn_create_pdu_timeout>:
{
   2cb18:	b538      	push	{r3, r4, r5, lr}
   2cb1a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2cb1c:	4906      	ldr	r1, [pc, #24]	; (2cb38 <bt_conn_create_pdu_timeout+0x20>)
   2cb1e:	2800      	cmp	r0, #0
   2cb20:	bf08      	it	eq
   2cb22:	4608      	moveq	r0, r1
   2cb24:	f01b f90c 	bl	47d40 <net_buf_alloc_fixed>
	if (!buf) {
   2cb28:	4604      	mov	r4, r0
   2cb2a:	b118      	cbz	r0, 2cb34 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2cb2c:	1d29      	adds	r1, r5, #4
   2cb2e:	3008      	adds	r0, #8
   2cb30:	f01b f925 	bl	47d7e <net_buf_simple_reserve>
}
   2cb34:	4620      	mov	r0, r4
   2cb36:	bd38      	pop	{r3, r4, r5, pc}
   2cb38:	20000c74 	.word	0x20000c74

0002cb3c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2cb3e:	1d03      	adds	r3, r0, #4
{
   2cb40:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2cb42:	4618      	mov	r0, r3
   2cb44:	f019 f8b2 	bl	45cac <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2cb48:	0582      	lsls	r2, r0, #22
   2cb4a:	d512      	bpl.n	2cb72 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2cb4c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2cb50:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2cb54:	4291      	cmp	r1, r2
   2cb56:	d80c      	bhi.n	2cb72 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2cb58:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2cb5c:	4291      	cmp	r1, r2
   2cb5e:	d308      	bcc.n	2cb72 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2cb60:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2cb64:	4291      	cmp	r1, r2
   2cb66:	d104      	bne.n	2cb72 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cb68:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2cb6c:	4618      	mov	r0, r3
   2cb6e:	f019 f88e 	bl	45c8e <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2cb72:	4b10      	ldr	r3, [pc, #64]	; (2cbb4 <notify_le_param_updated+0x78>)
   2cb74:	681d      	ldr	r5, [r3, #0]
   2cb76:	b925      	cbnz	r5, 2cb82 <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cb78:	4d0f      	ldr	r5, [pc, #60]	; (2cbb8 <notify_le_param_updated+0x7c>)
   2cb7a:	4f10      	ldr	r7, [pc, #64]	; (2cbbc <notify_le_param_updated+0x80>)
   2cb7c:	42bd      	cmp	r5, r7
   2cb7e:	d30c      	bcc.n	2cb9a <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2cb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2cb82:	68ee      	ldr	r6, [r5, #12]
   2cb84:	b13e      	cbz	r6, 2cb96 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   2cb86:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2cb8a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2cb8e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2cb92:	4620      	mov	r0, r4
   2cb94:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2cb96:	69ed      	ldr	r5, [r5, #28]
   2cb98:	e7ed      	b.n	2cb76 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   2cb9a:	68ee      	ldr	r6, [r5, #12]
   2cb9c:	b13e      	cbz	r6, 2cbae <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   2cb9e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2cba2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2cba6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2cbaa:	4620      	mov	r0, r4
   2cbac:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbae:	3520      	adds	r5, #32
   2cbb0:	e7e4      	b.n	2cb7c <notify_le_param_updated+0x40>
   2cbb2:	bf00      	nop
   2cbb4:	20001cb0 	.word	0x20001cb0
   2cbb8:	00049a8c 	.word	0x00049a8c
   2cbbc:	00049a8c 	.word	0x00049a8c

0002cbc0 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2cbc2:	4b0d      	ldr	r3, [pc, #52]	; (2cbf8 <notify_le_phy_updated+0x38>)
   2cbc4:	681d      	ldr	r5, [r3, #0]
{
   2cbc6:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbc8:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2cbcc:	b935      	cbnz	r5, 2cbdc <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbce:	4d0b      	ldr	r5, [pc, #44]	; (2cbfc <notify_le_phy_updated+0x3c>)
   2cbd0:	4e0b      	ldr	r6, [pc, #44]	; (2cc00 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbd2:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbd6:	42b5      	cmp	r5, r6
   2cbd8:	d307      	bcc.n	2cbea <notify_le_phy_updated+0x2a>
		}
	}
}
   2cbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2cbdc:	69ab      	ldr	r3, [r5, #24]
   2cbde:	b113      	cbz	r3, 2cbe6 <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbe0:	4631      	mov	r1, r6
   2cbe2:	4620      	mov	r0, r4
   2cbe4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2cbe6:	69ed      	ldr	r5, [r5, #28]
   2cbe8:	e7f0      	b.n	2cbcc <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2cbea:	69ab      	ldr	r3, [r5, #24]
   2cbec:	b113      	cbz	r3, 2cbf4 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbee:	4639      	mov	r1, r7
   2cbf0:	4620      	mov	r0, r4
   2cbf2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbf4:	3520      	adds	r5, #32
   2cbf6:	e7ee      	b.n	2cbd6 <notify_le_phy_updated+0x16>
   2cbf8:	20001cb0 	.word	0x20001cb0
   2cbfc:	00049a8c 	.word	0x00049a8c
   2cc00:	00049a8c 	.word	0x00049a8c

0002cc04 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cc08:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2cc0a:	4608      	mov	r0, r1
{
   2cc0c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2cc0e:	f018 fd74 	bl	456fa <bt_le_conn_params_valid>
   2cc12:	4605      	mov	r5, r0
   2cc14:	b918      	cbnz	r0, 2cc1e <le_param_req+0x1a>
		return false;
   2cc16:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2cc18:	4628      	mov	r0, r5
   2cc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc1e:	4b13      	ldr	r3, [pc, #76]	; (2cc6c <le_param_req+0x68>)
   2cc20:	681e      	ldr	r6, [r3, #0]
   2cc22:	b946      	cbnz	r6, 2cc36 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc24:	4e12      	ldr	r6, [pc, #72]	; (2cc70 <le_param_req+0x6c>)
   2cc26:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2cc74 <le_param_req+0x70>
   2cc2a:	4546      	cmp	r6, r8
   2cc2c:	d2f4      	bcs.n	2cc18 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2cc2e:	68b3      	ldr	r3, [r6, #8]
   2cc30:	b983      	cbnz	r3, 2cc54 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc32:	3620      	adds	r6, #32
   2cc34:	e7f9      	b.n	2cc2a <le_param_req+0x26>
		if (!cb->le_param_req) {
   2cc36:	68b3      	ldr	r3, [r6, #8]
   2cc38:	b90b      	cbnz	r3, 2cc3e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc3a:	69f6      	ldr	r6, [r6, #28]
   2cc3c:	e7f1      	b.n	2cc22 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2cc3e:	4621      	mov	r1, r4
   2cc40:	4638      	mov	r0, r7
   2cc42:	4798      	blx	r3
   2cc44:	2800      	cmp	r0, #0
   2cc46:	d0e6      	beq.n	2cc16 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2cc48:	4620      	mov	r0, r4
   2cc4a:	f018 fd56 	bl	456fa <bt_le_conn_params_valid>
   2cc4e:	2800      	cmp	r0, #0
   2cc50:	d1f3      	bne.n	2cc3a <le_param_req+0x36>
   2cc52:	e7e0      	b.n	2cc16 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2cc54:	4621      	mov	r1, r4
   2cc56:	4638      	mov	r0, r7
   2cc58:	4798      	blx	r3
   2cc5a:	2800      	cmp	r0, #0
   2cc5c:	d0db      	beq.n	2cc16 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2cc5e:	4620      	mov	r0, r4
   2cc60:	f018 fd4b 	bl	456fa <bt_le_conn_params_valid>
   2cc64:	2800      	cmp	r0, #0
   2cc66:	d1e4      	bne.n	2cc32 <le_param_req+0x2e>
   2cc68:	e7d5      	b.n	2cc16 <le_param_req+0x12>
   2cc6a:	bf00      	nop
   2cc6c:	20001cb0 	.word	0x20001cb0
   2cc70:	00049a8c 	.word	0x00049a8c
   2cc74:	00049a8c 	.word	0x00049a8c

0002cc78 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cc7c:	78c3      	ldrb	r3, [r0, #3]
{
   2cc7e:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cc80:	b973      	cbnz	r3, 2cca0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2cc82:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2cc86:	4b10      	ldr	r3, [pc, #64]	; (2ccc8 <bt_conn_identity_resolved+0x50>)
   2cc88:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2cc8a:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc8e:	b955      	cbnz	r5, 2cca6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc90:	4d0e      	ldr	r5, [pc, #56]	; (2cccc <bt_conn_identity_resolved+0x54>)
   2cc92:	4f0f      	ldr	r7, [pc, #60]	; (2ccd0 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2cc94:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc98:	42bd      	cmp	r5, r7
   2cc9a:	d30c      	bcc.n	2ccb6 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2cca0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2cca4:	e7ef      	b.n	2cc86 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2cca6:	692b      	ldr	r3, [r5, #16]
   2cca8:	b11b      	cbz	r3, 2ccb2 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ccaa:	463a      	mov	r2, r7
   2ccac:	4631      	mov	r1, r6
   2ccae:	4620      	mov	r0, r4
   2ccb0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ccb2:	69ed      	ldr	r5, [r5, #28]
   2ccb4:	e7eb      	b.n	2cc8e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2ccb6:	692b      	ldr	r3, [r5, #16]
   2ccb8:	b11b      	cbz	r3, 2ccc2 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ccba:	4642      	mov	r2, r8
   2ccbc:	4631      	mov	r1, r6
   2ccbe:	4620      	mov	r0, r4
   2ccc0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ccc2:	3520      	adds	r5, #32
   2ccc4:	e7e8      	b.n	2cc98 <bt_conn_identity_resolved+0x20>
   2ccc6:	bf00      	nop
   2ccc8:	20001cb0 	.word	0x20001cb0
   2cccc:	00049a8c 	.word	0x00049a8c
   2ccd0:	00049a8c 	.word	0x00049a8c

0002ccd4 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2ccd6:	7a43      	ldrb	r3, [r0, #9]
   2ccd8:	7283      	strb	r3, [r0, #10]
{
   2ccda:	4604      	mov	r4, r0
   2ccdc:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2ccde:	f019 f9f7 	bl	460d0 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2cce2:	4b0c      	ldr	r3, [pc, #48]	; (2cd14 <bt_conn_security_changed+0x40>)
   2cce4:	681d      	ldr	r5, [r3, #0]
   2cce6:	b925      	cbnz	r5, 2ccf2 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cce8:	4d0b      	ldr	r5, [pc, #44]	; (2cd18 <bt_conn_security_changed+0x44>)
   2ccea:	4f0c      	ldr	r7, [pc, #48]	; (2cd1c <bt_conn_security_changed+0x48>)
   2ccec:	42bd      	cmp	r5, r7
   2ccee:	d308      	bcc.n	2cd02 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2ccf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2ccf2:	696b      	ldr	r3, [r5, #20]
   2ccf4:	b11b      	cbz	r3, 2ccfe <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2ccf6:	7a61      	ldrb	r1, [r4, #9]
   2ccf8:	4632      	mov	r2, r6
   2ccfa:	4620      	mov	r0, r4
   2ccfc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ccfe:	69ed      	ldr	r5, [r5, #28]
   2cd00:	e7f1      	b.n	2cce6 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2cd02:	696b      	ldr	r3, [r5, #20]
   2cd04:	b11b      	cbz	r3, 2cd0e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2cd06:	7a61      	ldrb	r1, [r4, #9]
   2cd08:	4632      	mov	r2, r6
   2cd0a:	4620      	mov	r0, r4
   2cd0c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cd0e:	3520      	adds	r5, #32
   2cd10:	e7ec      	b.n	2ccec <bt_conn_security_changed+0x18>
   2cd12:	bf00      	nop
   2cd14:	20001cb0 	.word	0x20001cb0
   2cd18:	00049a8c 	.word	0x00049a8c
   2cd1c:	00049a8c 	.word	0x00049a8c

0002cd20 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2cd20:	4b02      	ldr	r3, [pc, #8]	; (2cd2c <bt_conn_cb_register+0xc>)
   2cd22:	681a      	ldr	r2, [r3, #0]
   2cd24:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2cd26:	6018      	str	r0, [r3, #0]
}
   2cd28:	4770      	bx	lr
   2cd2a:	bf00      	nop
   2cd2c:	20001cb0 	.word	0x20001cb0

0002cd30 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2cd30:	b570      	push	{r4, r5, r6, lr}
   2cd32:	4606      	mov	r6, r0
   2cd34:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2cd36:	480a      	ldr	r0, [pc, #40]	; (2cd60 <bt_conn_add_le+0x30>)
   2cd38:	2101      	movs	r1, #1
   2cd3a:	f7ff fd93 	bl	2c864 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2cd3e:	4604      	mov	r4, r0
   2cd40:	b160      	cbz	r0, 2cd5c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2cd42:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2cd44:	2207      	movs	r2, #7
   2cd46:	4629      	mov	r1, r5
   2cd48:	3088      	adds	r0, #136	; 0x88
   2cd4a:	f018 f8b9 	bl	44ec0 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2cd4e:	2301      	movs	r3, #1
   2cd50:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2cd52:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2cd54:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2cd56:	4b03      	ldr	r3, [pc, #12]	; (2cd64 <bt_conn_add_le+0x34>)
   2cd58:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2cd5c:	4620      	mov	r0, r4
   2cd5e:	bd70      	pop	{r4, r5, r6, pc}
   2cd60:	20000fb0 	.word	0x20000fb0
   2cd64:	00280018 	.word	0x00280018

0002cd68 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2cd68:	b570      	push	{r4, r5, r6, lr}
   2cd6a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cd6c:	480c      	ldr	r0, [pc, #48]	; (2cda0 <bt_conn_lookup_addr_le+0x38>)
{
   2cd6e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cd70:	f019 f83c 	bl	45dec <bt_conn_ref>

		if (!conn) {
   2cd74:	4604      	mov	r4, r0
   2cd76:	b128      	cbz	r0, 2cd84 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2cd78:	7883      	ldrb	r3, [r0, #2]
   2cd7a:	2b01      	cmp	r3, #1
   2cd7c:	d004      	beq.n	2cd88 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   2cd7e:	f019 f850 	bl	45e22 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2cd82:	2400      	movs	r4, #0
}
   2cd84:	4620      	mov	r0, r4
   2cd86:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2cd88:	4629      	mov	r1, r5
   2cd8a:	4632      	mov	r2, r6
   2cd8c:	f019 f8e3 	bl	45f56 <bt_conn_is_peer_addr_le>
   2cd90:	4605      	mov	r5, r0
   2cd92:	2800      	cmp	r0, #0
   2cd94:	d1f6      	bne.n	2cd84 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   2cd96:	4620      	mov	r0, r4
   2cd98:	f019 f843 	bl	45e22 <bt_conn_unref>
	return NULL;
   2cd9c:	462c      	mov	r4, r5
			continue;
   2cd9e:	e7f1      	b.n	2cd84 <bt_conn_lookup_addr_le+0x1c>
   2cda0:	20000fb0 	.word	0x20000fb0

0002cda4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cda6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cda8:	480e      	ldr	r0, [pc, #56]	; (2cde4 <bt_conn_lookup_state_le+0x40>)
{
   2cdaa:	460e      	mov	r6, r1
   2cdac:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cdae:	f019 f81d 	bl	45dec <bt_conn_ref>

		if (!conn) {
   2cdb2:	4604      	mov	r4, r0
   2cdb4:	b1a0      	cbz	r0, 2cde0 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2cdb6:	7883      	ldrb	r3, [r0, #2]
   2cdb8:	2b01      	cmp	r3, #1
   2cdba:	d003      	beq.n	2cdc4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2cdbc:	f019 f831 	bl	45e22 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2cdc0:	2400      	movs	r4, #0
			continue;
   2cdc2:	e00d      	b.n	2cde0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2cdc4:	b136      	cbz	r6, 2cdd4 <bt_conn_lookup_state_le+0x30>
   2cdc6:	4632      	mov	r2, r6
   2cdc8:	4629      	mov	r1, r5
   2cdca:	f019 f8c4 	bl	45f56 <bt_conn_is_peer_addr_le>
   2cdce:	b908      	cbnz	r0, 2cdd4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   2cdd0:	4620      	mov	r0, r4
   2cdd2:	e7f3      	b.n	2cdbc <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   2cdd4:	7b63      	ldrb	r3, [r4, #13]
   2cdd6:	42bb      	cmp	r3, r7
   2cdd8:	d1fa      	bne.n	2cdd0 <bt_conn_lookup_state_le+0x2c>
   2cdda:	7a23      	ldrb	r3, [r4, #8]
   2cddc:	42ab      	cmp	r3, r5
   2cdde:	d1f7      	bne.n	2cdd0 <bt_conn_lookup_state_le+0x2c>
}
   2cde0:	4620      	mov	r0, r4
   2cde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cde4:	20000fb0 	.word	0x20000fb0

0002cde8 <send_conn_le_param_update>:
{
   2cde8:	b538      	push	{r3, r4, r5, lr}
   2cdea:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   2cdec:	4608      	mov	r0, r1
{
   2cdee:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2cdf0:	f018 fc83 	bl	456fa <bt_le_conn_params_valid>
   2cdf4:	b338      	cbz	r0, 2ce46 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2cdf6:	4b15      	ldr	r3, [pc, #84]	; (2ce4c <send_conn_le_param_update+0x64>)
   2cdf8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2cdfc:	0799      	lsls	r1, r3, #30
   2cdfe:	d407      	bmi.n	2ce10 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2ce00:	78e3      	ldrb	r3, [r4, #3]
   2ce02:	b173      	cbz	r3, 2ce22 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   2ce04:	4629      	mov	r1, r5
   2ce06:	4620      	mov	r0, r4
}
   2ce08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   2ce0c:	f000 b9aa 	b.w	2d164 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2ce10:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   2ce14:	079a      	lsls	r2, r3, #30
   2ce16:	d5f3      	bpl.n	2ce00 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ce18:	1d20      	adds	r0, r4, #4
   2ce1a:	f018 ff47 	bl	45cac <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2ce1e:	0543      	lsls	r3, r0, #21
   2ce20:	d4ee      	bmi.n	2ce00 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   2ce22:	4629      	mov	r1, r5
   2ce24:	4620      	mov	r0, r4
   2ce26:	f019 f8c0 	bl	45faa <bt_conn_le_conn_update>
		if (rc == 0) {
   2ce2a:	b958      	cbnz	r0, 2ce44 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   2ce2c:	882b      	ldrh	r3, [r5, #0]
   2ce2e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   2ce32:	886b      	ldrh	r3, [r5, #2]
   2ce34:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   2ce38:	88ab      	ldrh	r3, [r5, #4]
   2ce3a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   2ce3e:	88eb      	ldrh	r3, [r5, #6]
   2ce40:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2ce44:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2ce46:	f06f 0015 	mvn.w	r0, #21
   2ce4a:	e7fb      	b.n	2ce44 <send_conn_le_param_update+0x5c>
   2ce4c:	20000000 	.word	0x20000000

0002ce50 <deferred_work>:
{
   2ce50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   2ce52:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   2ce56:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   2ce58:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   2ce5c:	b9fb      	cbnz	r3, 2ce9e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   2ce5e:	4628      	mov	r0, r5
   2ce60:	f019 f925 	bl	460ae <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   2ce64:	4b28      	ldr	r3, [pc, #160]	; (2cf08 <deferred_work+0xb8>)
   2ce66:	681e      	ldr	r6, [r3, #0]
   2ce68:	b94e      	cbnz	r6, 2ce7e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ce6a:	4e28      	ldr	r6, [pc, #160]	; (2cf0c <deferred_work+0xbc>)
   2ce6c:	4f28      	ldr	r7, [pc, #160]	; (2cf10 <deferred_work+0xc0>)
   2ce6e:	42be      	cmp	r6, r7
   2ce70:	d30d      	bcc.n	2ce8e <deferred_work+0x3e>
		bt_conn_unref(conn);
   2ce72:	4628      	mov	r0, r5
}
   2ce74:	b003      	add	sp, #12
   2ce76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2ce7a:	f018 bfd2 	b.w	45e22 <bt_conn_unref>
		if (cb->disconnected) {
   2ce7e:	6873      	ldr	r3, [r6, #4]
   2ce80:	b11b      	cbz	r3, 2ce8a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   2ce82:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2ce86:	4628      	mov	r0, r5
   2ce88:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ce8a:	69f6      	ldr	r6, [r6, #28]
   2ce8c:	e7ec      	b.n	2ce68 <deferred_work+0x18>
		if (cb->disconnected) {
   2ce8e:	6873      	ldr	r3, [r6, #4]
   2ce90:	b11b      	cbz	r3, 2ce9a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   2ce92:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2ce96:	4628      	mov	r0, r5
   2ce98:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ce9a:	3620      	adds	r6, #32
   2ce9c:	e7e7      	b.n	2ce6e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   2ce9e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   2cea2:	2b01      	cmp	r3, #1
   2cea4:	d128      	bne.n	2cef8 <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   2cea6:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ceaa:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2ceae:	4630      	mov	r0, r6
   2ceb0:	f018 feed 	bl	45c8e <atomic_and>
   2ceb4:	0583      	lsls	r3, r0, #22
   2ceb6:	d521      	bpl.n	2cefc <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2ceb8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   2cebc:	f8ad 3000 	strh.w	r3, [sp]
   2cec0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   2cec4:	f8ad 3002 	strh.w	r3, [sp, #2]
   2cec8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   2cecc:	f8ad 3004 	strh.w	r3, [sp, #4]
   2ced0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   2ced4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   2ced8:	4669      	mov	r1, sp
   2ceda:	4628      	mov	r0, r5
   2cedc:	f7ff ff84 	bl	2cde8 <send_conn_le_param_update>
   2cee0:	f3bf 8f5b 	dmb	ish
   2cee4:	e856 3f00 	ldrex	r3, [r6]
   2cee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2ceec:	e846 3200 	strex	r2, r3, [r6]
   2cef0:	2a00      	cmp	r2, #0
   2cef2:	d1f7      	bne.n	2cee4 <deferred_work+0x94>
   2cef4:	f3bf 8f5b 	dmb	ish
}
   2cef8:	b003      	add	sp, #12
   2cefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   2cefc:	4a05      	ldr	r2, [pc, #20]	; (2cf14 <deferred_work+0xc4>)
   2cefe:	6810      	ldr	r0, [r2, #0]
   2cf00:	6851      	ldr	r1, [r2, #4]
   2cf02:	466b      	mov	r3, sp
   2cf04:	c303      	stmia	r3!, {r0, r1}
   2cf06:	e7e7      	b.n	2ced8 <deferred_work+0x88>
   2cf08:	20001cb0 	.word	0x20001cb0
   2cf0c:	00049a8c 	.word	0x00049a8c
   2cf10:	00049a8c 	.word	0x00049a8c
   2cf14:	00049be6 	.word	0x00049be6

0002cf18 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   2cf18:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2cf1a:	4801      	ldr	r0, [pc, #4]	; (2cf20 <bt_conn_create_frag_timeout+0x8>)
   2cf1c:	f7ff bdfc 	b.w	2cb18 <bt_conn_create_pdu_timeout>
   2cf20:	20000ccc 	.word	0x20000ccc

0002cf24 <create_frag>:
{
   2cf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cf28:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   2cf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cf2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cf32:	2000      	movs	r0, #0
{
   2cf34:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   2cf36:	f7ff ffef 	bl	2cf18 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2cf3a:	7b73      	ldrb	r3, [r6, #13]
   2cf3c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   2cf3e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2cf40:	f04f 0600 	mov.w	r6, #0
   2cf44:	d005      	beq.n	2cf52 <create_frag+0x2e>
		net_buf_unref(frag);
   2cf46:	f010 fa23 	bl	3d390 <net_buf_unref>
		return NULL;
   2cf4a:	4635      	mov	r5, r6
}
   2cf4c:	4628      	mov	r0, r5
   2cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   2cf52:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2cf54:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   2cf58:	4e0c      	ldr	r6, [pc, #48]	; (2cf8c <create_frag+0x68>)
   2cf5a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cf5c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   2cf60:	f01a ff8b 	bl	47e7a <net_buf_simple_tailroom>
   2cf64:	4580      	cmp	r8, r0
   2cf66:	d20c      	bcs.n	2cf82 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   2cf68:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cf6c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   2cf70:	4632      	mov	r2, r6
   2cf72:	4638      	mov	r0, r7
   2cf74:	f01a ff4c 	bl	47e10 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2cf78:	4631      	mov	r1, r6
   2cf7a:	4620      	mov	r0, r4
   2cf7c:	f01a ff61 	bl	47e42 <net_buf_simple_pull>
   2cf80:	e7e4      	b.n	2cf4c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   2cf82:	4638      	mov	r0, r7
   2cf84:	f01a ff79 	bl	47e7a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cf88:	b286      	uxth	r6, r0
   2cf8a:	e7ef      	b.n	2cf6c <create_frag+0x48>
   2cf8c:	20000000 	.word	0x20000000

0002cf90 <bt_conn_process_tx>:
{
   2cf90:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cf92:	7b43      	ldrb	r3, [r0, #13]
{
   2cf94:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cf96:	b95b      	cbnz	r3, 2cfb0 <bt_conn_process_tx+0x20>
   2cf98:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2cf9c:	3004      	adds	r0, #4
   2cf9e:	f018 fe76 	bl	45c8e <atomic_and>
   2cfa2:	0643      	lsls	r3, r0, #25
   2cfa4:	d504      	bpl.n	2cfb0 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   2cfa6:	4620      	mov	r0, r4
}
   2cfa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   2cfac:	f018 beb3 	b.w	45d16 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2cfb0:	2200      	movs	r2, #0
   2cfb2:	2300      	movs	r3, #0
   2cfb4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2cfb8:	f01a fec7 	bl	47d4a <net_buf_get>
	BT_ASSERT(buf);
   2cfbc:	4605      	mov	r5, r0
   2cfbe:	b960      	cbnz	r0, 2cfda <bt_conn_process_tx+0x4a>
   2cfc0:	4a1f      	ldr	r2, [pc, #124]	; (2d040 <bt_conn_process_tx+0xb0>)
   2cfc2:	4920      	ldr	r1, [pc, #128]	; (2d044 <bt_conn_process_tx+0xb4>)
   2cfc4:	4820      	ldr	r0, [pc, #128]	; (2d048 <bt_conn_process_tx+0xb8>)
   2cfc6:	f240 23e7 	movw	r3, #743	; 0x2e7
   2cfca:	f015 fea1 	bl	42d10 <printk>
   2cfce:	4040      	eors	r0, r0
   2cfd0:	f380 8811 	msr	BASEPRI, r0
   2cfd4:	f04f 0003 	mov.w	r0, #3
   2cfd8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   2cfda:	4e1c      	ldr	r6, [pc, #112]	; (2d04c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   2cfdc:	89aa      	ldrh	r2, [r5, #12]
   2cfde:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2cfe2:	429a      	cmp	r2, r3
   2cfe4:	d807      	bhi.n	2cff6 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2cfe6:	2300      	movs	r3, #0
   2cfe8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   2cfea:	4629      	mov	r1, r5
   2cfec:	4620      	mov	r0, r4
   2cfee:	f7ff fbad 	bl	2c74c <send_frag>
	if (!send_buf(conn, buf)) {
   2cff2:	b130      	cbz	r0, 2d002 <bt_conn_process_tx+0x72>
}
   2cff4:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   2cff6:	4629      	mov	r1, r5
   2cff8:	4620      	mov	r0, r4
   2cffa:	f7ff ff93 	bl	2cf24 <create_frag>
	if (!frag) {
   2cffe:	4601      	mov	r1, r0
   2d000:	b920      	cbnz	r0, 2d00c <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   2d002:	4628      	mov	r0, r5
}
   2d004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   2d008:	f010 b9c2 	b.w	3d390 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2d00c:	2301      	movs	r3, #1
   2d00e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2d010:	4620      	mov	r0, r4
   2d012:	f7ff fb9b 	bl	2c74c <send_frag>
   2d016:	2800      	cmp	r0, #0
   2d018:	d0f3      	beq.n	2d002 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   2d01a:	89aa      	ldrh	r2, [r5, #12]
   2d01c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2d020:	429a      	cmp	r2, r3
   2d022:	d802      	bhi.n	2d02a <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   2d024:	2300      	movs	r3, #0
   2d026:	2203      	movs	r2, #3
   2d028:	e7df      	b.n	2cfea <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   2d02a:	4629      	mov	r1, r5
   2d02c:	4620      	mov	r0, r4
   2d02e:	f7ff ff79 	bl	2cf24 <create_frag>
		if (!frag) {
   2d032:	4601      	mov	r1, r0
   2d034:	2800      	cmp	r0, #0
   2d036:	d0e4      	beq.n	2d002 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2d038:	2301      	movs	r3, #1
   2d03a:	461a      	mov	r2, r3
   2d03c:	e7e8      	b.n	2d010 <bt_conn_process_tx+0x80>
   2d03e:	bf00      	nop
   2d040:	0004b8ca 	.word	0x0004b8ca
   2d044:	0004b7b0 	.word	0x0004b7b0
   2d048:	0004b793 	.word	0x0004b793
   2d04c:	20000000 	.word	0x20000000

0002d050 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   2d050:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   2d052:	490b      	ldr	r1, [pc, #44]	; (2d080 <bt_conn_init+0x30>)
   2d054:	480b      	ldr	r0, [pc, #44]	; (2d084 <bt_conn_init+0x34>)
   2d056:	f01b fed4 	bl	48e02 <k_queue_append>
   2d05a:	490b      	ldr	r1, [pc, #44]	; (2d088 <bt_conn_init+0x38>)
   2d05c:	4809      	ldr	r0, [pc, #36]	; (2d084 <bt_conn_init+0x34>)
   2d05e:	f01b fed0 	bl	48e02 <k_queue_append>
   2d062:	490a      	ldr	r1, [pc, #40]	; (2d08c <bt_conn_init+0x3c>)
   2d064:	4807      	ldr	r0, [pc, #28]	; (2d084 <bt_conn_init+0x34>)
   2d066:	f01b fecc 	bl	48e02 <k_queue_append>
	}

	bt_att_init();
   2d06a:	f019 fd23 	bl	46ab4 <bt_att_init>

	err = bt_smp_init();
   2d06e:	f002 fc63 	bl	2f938 <bt_smp_init>
	if (err) {
   2d072:	4604      	mov	r4, r0
   2d074:	b908      	cbnz	r0, 2d07a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   2d076:	f019 f8be 	bl	461f6 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   2d07a:	4620      	mov	r0, r4
   2d07c:	bd10      	pop	{r4, pc}
   2d07e:	bf00      	nop
   2d080:	20001cb4 	.word	0x20001cb4
   2d084:	20000c2c 	.word	0x20000c2c
   2d088:	20001cc4 	.word	0x20001cc4
   2d08c:	20001cd4 	.word	0x20001cd4

0002d090 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   2d090:	4b04      	ldr	r3, [pc, #16]	; (2d0a4 <l2cap_accept+0x14>)
   2d092:	6818      	ldr	r0, [r3, #0]
   2d094:	b918      	cbnz	r0, 2d09e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   2d096:	4a04      	ldr	r2, [pc, #16]	; (2d0a8 <l2cap_accept+0x18>)
   2d098:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   2d09a:	600b      	str	r3, [r1, #0]

		return 0;
   2d09c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   2d09e:	f06f 000b 	mvn.w	r0, #11
}
   2d0a2:	4770      	bx	lr
   2d0a4:	20001070 	.word	0x20001070
   2d0a8:	0004a1f8 	.word	0x0004a1f8

0002d0ac <bt_l2cap_connected>:
{
   2d0ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2d0b0:	4e29      	ldr	r6, [pc, #164]	; (2d158 <bt_l2cap_connected+0xac>)
   2d0b2:	4f2a      	ldr	r7, [pc, #168]	; (2d15c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2d0b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2d160 <bt_l2cap_connected+0xb4>
{
   2d0b8:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2d0ba:	42be      	cmp	r6, r7
   2d0bc:	d302      	bcc.n	2d0c4 <bt_l2cap_connected+0x18>
}
   2d0be:	b003      	add	sp, #12
   2d0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   2d0c4:	6873      	ldr	r3, [r6, #4]
   2d0c6:	a901      	add	r1, sp, #4
   2d0c8:	4620      	mov	r0, r4
   2d0ca:	4798      	blx	r3
   2d0cc:	2800      	cmp	r0, #0
   2d0ce:	db3d      	blt.n	2d14c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   2d0d0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   2d0d2:	8833      	ldrh	r3, [r6, #0]
   2d0d4:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   2d0d8:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2d0dc:	4641      	mov	r1, r8
   2d0de:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2d0e2:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2d0e6:	f01b ff83 	bl	48ff0 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d0ea:	f3bf 8f5b 	dmb	ish
   2d0ee:	f105 0368 	add.w	r3, r5, #104	; 0x68
   2d0f2:	2200      	movs	r2, #0
   2d0f4:	e853 1f00 	ldrex	r1, [r3]
   2d0f8:	e843 2000 	strex	r0, r2, [r3]
   2d0fc:	2800      	cmp	r0, #0
   2d0fe:	d1f9      	bne.n	2d0f4 <bt_l2cap_connected+0x48>
   2d100:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   2d104:	60aa      	str	r2, [r5, #8]
	return list->tail;
   2d106:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   2d108:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   2d10c:	bb02      	cbnz	r2, 2d150 <bt_l2cap_connected+0xa4>
	list->head = node;
   2d10e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   2d112:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   2d114:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   2d116:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   2d118:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   2d11c:	681b      	ldr	r3, [r3, #0]
   2d11e:	b103      	cbz	r3, 2d122 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   2d120:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d122:	9b01      	ldr	r3, [sp, #4]
   2d124:	f3bf 8f5b 	dmb	ish
   2d128:	3368      	adds	r3, #104	; 0x68
   2d12a:	e853 2f00 	ldrex	r2, [r3]
   2d12e:	f042 0201 	orr.w	r2, r2, #1
   2d132:	e843 2100 	strex	r1, r2, [r3]
   2d136:	2900      	cmp	r1, #0
   2d138:	d1f7      	bne.n	2d12a <bt_l2cap_connected+0x7e>
   2d13a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   2d13e:	9801      	ldr	r0, [sp, #4]
   2d140:	6843      	ldr	r3, [r0, #4]
   2d142:	699b      	ldr	r3, [r3, #24]
   2d144:	b113      	cbz	r3, 2d14c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   2d146:	f100 0168 	add.w	r1, r0, #104	; 0x68
   2d14a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2d14c:	360c      	adds	r6, #12
   2d14e:	e7b4      	b.n	2d0ba <bt_l2cap_connected+0xe>
	parent->next = child;
   2d150:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2d152:	6563      	str	r3, [r4, #84]	; 0x54
}
   2d154:	e7dd      	b.n	2d112 <bt_l2cap_connected+0x66>
   2d156:	bf00      	nop
   2d158:	00049a68 	.word	0x00049a68
   2d15c:	00049a8c 	.word	0x00049a8c
   2d160:	00046095 	.word	0x00046095

0002d164 <bt_l2cap_update_conn_param>:
{
   2d164:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d166:	460d      	mov	r5, r1
	ident++;
   2d168:	4916      	ldr	r1, [pc, #88]	; (2d1c4 <bt_l2cap_update_conn_param+0x60>)
   2d16a:	780b      	ldrb	r3, [r1, #0]
   2d16c:	3301      	adds	r3, #1
	if (!ident) {
   2d16e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   2d172:	bf08      	it	eq
   2d174:	2301      	moveq	r3, #1
   2d176:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2d178:	7809      	ldrb	r1, [r1, #0]
{
   2d17a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2d17c:	2208      	movs	r2, #8
   2d17e:	2012      	movs	r0, #18
   2d180:	f018 ff3f 	bl	46002 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2d184:	4604      	mov	r4, r0
   2d186:	b1d0      	cbz	r0, 2d1be <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   2d188:	2108      	movs	r1, #8
   2d18a:	4408      	add	r0, r1
   2d18c:	f01a fe3a 	bl	47e04 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2d190:	882b      	ldrh	r3, [r5, #0]
   2d192:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2d194:	886b      	ldrh	r3, [r5, #2]
   2d196:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2d198:	88ab      	ldrh	r3, [r5, #4]
   2d19a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2d19c:	88eb      	ldrh	r3, [r5, #6]
   2d19e:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2d1a0:	2300      	movs	r3, #0
   2d1a2:	9300      	str	r3, [sp, #0]
   2d1a4:	4622      	mov	r2, r4
   2d1a6:	2105      	movs	r1, #5
   2d1a8:	4630      	mov	r0, r6
   2d1aa:	f018 ffa9 	bl	46100 <bt_l2cap_send_cb>
	if (err) {
   2d1ae:	4605      	mov	r5, r0
   2d1b0:	b110      	cbz	r0, 2d1b8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   2d1b2:	4620      	mov	r0, r4
   2d1b4:	f010 f8ec 	bl	3d390 <net_buf_unref>
}
   2d1b8:	4628      	mov	r0, r5
   2d1ba:	b002      	add	sp, #8
   2d1bc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   2d1be:	f06f 050b 	mvn.w	r5, #11
   2d1c2:	e7f9      	b.n	2d1b8 <bt_l2cap_update_conn_param+0x54>
   2d1c4:	20003c66 	.word	0x20003c66

0002d1c8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   2d1c8:	4b02      	ldr	r3, [pc, #8]	; (2d1d4 <att_cfm_sent+0xc>)
   2d1ca:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2d1ce:	f019 b825 	b.w	4621c <att_sent>
   2d1d2:	bf00      	nop
   2d1d4:	00046781 	.word	0x00046781

0002d1d8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   2d1d8:	4b02      	ldr	r3, [pc, #8]	; (2d1e4 <att_rsp_sent+0xc>)
   2d1da:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2d1de:	f019 b81d 	b.w	4621c <att_sent>
   2d1e2:	bf00      	nop
   2d1e4:	00046765 	.word	0x00046765

0002d1e8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   2d1e8:	4b02      	ldr	r3, [pc, #8]	; (2d1f4 <att_req_sent+0xc>)
   2d1ea:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2d1ee:	f019 b815 	b.w	4621c <att_sent>
   2d1f2:	bf00      	nop
   2d1f4:	00046535 	.word	0x00046535

0002d1f8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   2d1f8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2d1fa:	3808      	subs	r0, #8
   2d1fc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   2d1fe:	a901      	add	r1, sp, #4
   2d200:	4802      	ldr	r0, [pc, #8]	; (2d20c <bt_att_released+0x14>)
   2d202:	f01b fd38 	bl	48c76 <k_mem_slab_free>
}
   2d206:	b003      	add	sp, #12
   2d208:	f85d fb04 	ldr.w	pc, [sp], #4
   2d20c:	20000af4 	.word	0x20000af4

0002d210 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   2d210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2d212:	2300      	movs	r3, #0
{
   2d214:	4607      	mov	r7, r0
   2d216:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2d218:	481e      	ldr	r0, [pc, #120]	; (2d294 <bt_att_accept+0x84>)
   2d21a:	2200      	movs	r2, #0
   2d21c:	4669      	mov	r1, sp
   2d21e:	f014 f8dd 	bl	413dc <k_mem_slab_alloc>
   2d222:	4604      	mov	r4, r0
   2d224:	b120      	cbz	r0, 2d230 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   2d226:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   2d22a:	4620      	mov	r0, r4
   2d22c:	b003      	add	sp, #12
   2d22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   2d230:	4601      	mov	r1, r0
   2d232:	222c      	movs	r2, #44	; 0x2c
   2d234:	9800      	ldr	r0, [sp, #0]
   2d236:	f017 fe4e 	bl	44ed6 <memset>
	att->conn = conn;
   2d23a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2d23c:	4816      	ldr	r0, [pc, #88]	; (2d298 <bt_att_accept+0x88>)
	list->tail = NULL;
   2d23e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   2d240:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   2d244:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   2d248:	2200      	movs	r2, #0
   2d24a:	2300      	movs	r3, #0
   2d24c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d24e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2d250:	f014 f8c4 	bl	413dc <k_mem_slab_alloc>
   2d254:	4604      	mov	r4, r0
   2d256:	2800      	cmp	r0, #0
   2d258:	d1e5      	bne.n	2d226 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   2d25a:	4601      	mov	r1, r0
   2d25c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2d260:	9801      	ldr	r0, [sp, #4]
   2d262:	f017 fe38 	bl	44ed6 <memset>
	chan->chan.chan.ops = &ops;
   2d266:	9801      	ldr	r0, [sp, #4]
   2d268:	4b0c      	ldr	r3, [pc, #48]	; (2d29c <bt_att_accept+0x8c>)
   2d26a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   2d26c:	30f8      	adds	r0, #248	; 0xf8
   2d26e:	f01b fdbc 	bl	48dea <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d272:	9b01      	ldr	r3, [sp, #4]
   2d274:	f3bf 8f5b 	dmb	ish
   2d278:	33f0      	adds	r3, #240	; 0xf0
   2d27a:	e853 2f00 	ldrex	r2, [r3]
   2d27e:	e843 4100 	strex	r1, r4, [r3]
   2d282:	2900      	cmp	r1, #0
   2d284:	d1f9      	bne.n	2d27a <bt_att_accept+0x6a>
   2d286:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   2d28a:	9b01      	ldr	r3, [sp, #4]
   2d28c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   2d290:	6033      	str	r3, [r6, #0]
	return 0;
   2d292:	e7ca      	b.n	2d22a <bt_att_accept+0x1a>
   2d294:	20000ad8 	.word	0x20000ad8
   2d298:	20000af4 	.word	0x20000af4
   2d29c:	200003c8 	.word	0x200003c8

0002d2a0 <read_group_cb>:
{
   2d2a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d2a4:	4605      	mov	r5, r0
   2d2a6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d2a8:	f04f 0800 	mov.w	r8, #0
   2d2ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d2b0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2d2b2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d2b4:	f88d 8008 	strb.w	r8, [sp, #8]
   2d2b8:	a902      	add	r1, sp, #8
{
   2d2ba:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d2bc:	f8ad 300a 	strh.w	r3, [sp, #10]
   2d2c0:	f017 feec 	bl	4509c <bt_uuid_cmp>
   2d2c4:	b1a0      	cbz	r0, 2d2f0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2d2c6:	f642 0301 	movw	r3, #10241	; 0x2801
   2d2ca:	6828      	ldr	r0, [r5, #0]
   2d2cc:	f88d 800c 	strb.w	r8, [sp, #12]
   2d2d0:	a903      	add	r1, sp, #12
   2d2d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d2d6:	f017 fee1 	bl	4509c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d2da:	b148      	cbz	r0, 2d2f0 <read_group_cb+0x50>
		if (data->group &&
   2d2dc:	6923      	ldr	r3, [r4, #16]
   2d2de:	b11b      	cbz	r3, 2d2e8 <read_group_cb+0x48>
   2d2e0:	885a      	ldrh	r2, [r3, #2]
   2d2e2:	42b2      	cmp	r2, r6
   2d2e4:	d200      	bcs.n	2d2e8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2d2e6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2d2e8:	2001      	movs	r0, #1
}
   2d2ea:	b004      	add	sp, #16
   2d2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d2f0:	6861      	ldr	r1, [r4, #4]
   2d2f2:	6828      	ldr	r0, [r5, #0]
   2d2f4:	f017 fed2 	bl	4509c <bt_uuid_cmp>
   2d2f8:	b110      	cbz	r0, 2d300 <read_group_cb+0x60>
		data->group = NULL;
   2d2fa:	2300      	movs	r3, #0
   2d2fc:	6123      	str	r3, [r4, #16]
   2d2fe:	e7f3      	b.n	2d2e8 <read_group_cb+0x48>
	if (data->rsp->len &&
   2d300:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2d302:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   2d304:	781a      	ldrb	r2, [r3, #0]
   2d306:	b13a      	cbz	r2, 2d318 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2d308:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   2d30c:	8981      	ldrh	r1, [r0, #12]
   2d30e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2d310:	4293      	cmp	r3, r2
   2d312:	da01      	bge.n	2d318 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   2d314:	2000      	movs	r0, #0
   2d316:	e7e8      	b.n	2d2ea <read_group_cb+0x4a>
   2d318:	2104      	movs	r1, #4
   2d31a:	3008      	adds	r0, #8
   2d31c:	f01a fd72 	bl	47e04 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d320:	4b09      	ldr	r3, [pc, #36]	; (2d348 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2d322:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d324:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2d326:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2d328:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d32a:	4629      	mov	r1, r5
   2d32c:	9300      	str	r3, [sp, #0]
   2d32e:	9401      	str	r4, [sp, #4]
   2d330:	2300      	movs	r3, #0
   2d332:	4638      	mov	r0, r7
   2d334:	f019 f93b 	bl	465ae <att_chan_read>
	if (read < 0) {
   2d338:	2800      	cmp	r0, #0
   2d33a:	dbeb      	blt.n	2d314 <read_group_cb+0x74>
	if (!data->group) {
   2d33c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   2d33e:	3800      	subs	r0, #0
   2d340:	bf18      	it	ne
   2d342:	2001      	movne	r0, #1
   2d344:	e7d1      	b.n	2d2ea <read_group_cb+0x4a>
   2d346:	bf00      	nop
   2d348:	000464e9 	.word	0x000464e9

0002d34c <chan_send>:
{
   2d34c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d350:	688b      	ldr	r3, [r1, #8]
   2d352:	781b      	ldrb	r3, [r3, #0]
   2d354:	2bd2      	cmp	r3, #210	; 0xd2
{
   2d356:	4606      	mov	r6, r0
   2d358:	460c      	mov	r4, r1
   2d35a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d35c:	d10c      	bne.n	2d378 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   2d35e:	6803      	ldr	r3, [r0, #0]
   2d360:	6818      	ldr	r0, [r3, #0]
   2d362:	f01a faea 	bl	4793a <bt_smp_sign>
		if (err) {
   2d366:	4605      	mov	r5, r0
   2d368:	b130      	cbz	r0, 2d378 <chan_send+0x2c>
			net_buf_unref(buf);
   2d36a:	4620      	mov	r0, r4
   2d36c:	f010 f810 	bl	3d390 <net_buf_unref>
}
   2d370:	4628      	mov	r0, r5
   2d372:	b003      	add	sp, #12
   2d374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   2d378:	f104 0008 	add.w	r0, r4, #8
   2d37c:	f01a fd79 	bl	47e72 <net_buf_simple_headroom>
	state->len = buf->len;
   2d380:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2d384:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   2d386:	b957      	cbnz	r7, 2d39e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   2d388:	68a3      	ldr	r3, [r4, #8]
   2d38a:	7818      	ldrb	r0, [r3, #0]
   2d38c:	f018 ff5e 	bl	4624c <att_op_get_type>
   2d390:	3801      	subs	r0, #1
   2d392:	b2c0      	uxtb	r0, r0
   2d394:	2804      	cmp	r0, #4
   2d396:	bf9c      	itt	ls
   2d398:	4b13      	ldrls	r3, [pc, #76]	; (2d3e8 <chan_send+0x9c>)
   2d39a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d39e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   2d3a0:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d3a4:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   2d3a6:	4b11      	ldr	r3, [pc, #68]	; (2d3ec <chan_send+0xa0>)
   2d3a8:	429f      	cmp	r7, r3
   2d3aa:	d018      	beq.n	2d3de <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   2d3ac:	4b10      	ldr	r3, [pc, #64]	; (2d3f0 <chan_send+0xa4>)
   2d3ae:	429f      	cmp	r7, r3
   2d3b0:	d017      	beq.n	2d3e2 <chan_send+0x96>
		return att_sent;
   2d3b2:	4910      	ldr	r1, [pc, #64]	; (2d3f4 <chan_send+0xa8>)
   2d3b4:	4b10      	ldr	r3, [pc, #64]	; (2d3f8 <chan_send+0xac>)
   2d3b6:	4a11      	ldr	r2, [pc, #68]	; (2d3fc <chan_send+0xb0>)
   2d3b8:	428f      	cmp	r7, r1
   2d3ba:	bf18      	it	ne
   2d3bc:	4613      	movne	r3, r2
			       &chan->chan.chan);
   2d3be:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d3c0:	9600      	str	r6, [sp, #0]
   2d3c2:	4622      	mov	r2, r4
   2d3c4:	2104      	movs	r1, #4
   2d3c6:	f018 fe9b 	bl	46100 <bt_l2cap_send_cb>
	if (err) {
   2d3ca:	4605      	mov	r5, r0
   2d3cc:	2800      	cmp	r0, #0
   2d3ce:	d0cf      	beq.n	2d370 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   2d3d0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2d3d2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2d3d6:	fa10 f088 	uxtah	r0, r0, r8
   2d3da:	60a0      	str	r0, [r4, #8]
}
   2d3dc:	e7c8      	b.n	2d370 <chan_send+0x24>
		return att_rsp_sent;
   2d3de:	4b08      	ldr	r3, [pc, #32]	; (2d400 <chan_send+0xb4>)
   2d3e0:	e7ed      	b.n	2d3be <chan_send+0x72>
		return att_cfm_sent;
   2d3e2:	4b08      	ldr	r3, [pc, #32]	; (2d404 <chan_send+0xb8>)
   2d3e4:	e7eb      	b.n	2d3be <chan_send+0x72>
   2d3e6:	bf00      	nop
   2d3e8:	0004a21c 	.word	0x0004a21c
   2d3ec:	00046765 	.word	0x00046765
   2d3f0:	00046781 	.word	0x00046781
   2d3f4:	00046535 	.word	0x00046535
   2d3f8:	0002d1e9 	.word	0x0002d1e9
   2d3fc:	0004621d 	.word	0x0004621d
   2d400:	0002d1d9 	.word	0x0002d1d9
   2d404:	0002d1c9 	.word	0x0002d1c9

0002d408 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2d408:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   2d40a:	4a07      	ldr	r2, [pc, #28]	; (2d428 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2d40c:	4604      	mov	r4, r0
   2d40e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2d410:	f7ff ff9c 	bl	2d34c <chan_send>
	if (err) {
   2d414:	b130      	cbz	r0, 2d424 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   2d416:	4629      	mov	r1, r5
   2d418:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   2d41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2d420:	f01a bcb1 	b.w	47d86 <net_buf_put>
}
   2d424:	bd38      	pop	{r3, r4, r5, pc}
   2d426:	bf00      	nop
   2d428:	00046765 	.word	0x00046765

0002d42c <read_type_cb>:
{
   2d42c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   2d430:	f8d2 8000 	ldr.w	r8, [r2]
{
   2d434:	4606      	mov	r6, r0
   2d436:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d438:	6800      	ldr	r0, [r0, #0]
   2d43a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d43c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   2d440:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d442:	f017 fe2b 	bl	4509c <bt_uuid_cmp>
   2d446:	4607      	mov	r7, r0
   2d448:	2800      	cmp	r0, #0
   2d44a:	d13e      	bne.n	2d4ca <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d44c:	4628      	mov	r0, r5
   2d44e:	2215      	movs	r2, #21
   2d450:	4631      	mov	r1, r6
   2d452:	f019 ff51 	bl	472f8 <bt_gatt_check_perm>
   2d456:	4605      	mov	r5, r0
   2d458:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2d45a:	b148      	cbz	r0, 2d470 <read_type_cb+0x44>
		if (data->rsp->len) {
   2d45c:	68e3      	ldr	r3, [r4, #12]
   2d45e:	781b      	ldrb	r3, [r3, #0]
   2d460:	b923      	cbnz	r3, 2d46c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   2d462:	2500      	movs	r5, #0
}
   2d464:	4628      	mov	r0, r5
   2d466:	b003      	add	sp, #12
   2d468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   2d46c:	7527      	strb	r7, [r4, #20]
   2d46e:	e7f8      	b.n	2d462 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d470:	68a0      	ldr	r0, [r4, #8]
   2d472:	f01a fc99 	bl	47da8 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   2d476:	2102      	movs	r1, #2
   2d478:	3008      	adds	r0, #8
   2d47a:	f01a fcc3 	bl	47e04 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d47e:	4b14      	ldr	r3, [pc, #80]	; (2d4d0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d480:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d482:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   2d484:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d488:	4631      	mov	r1, r6
   2d48a:	9300      	str	r3, [sp, #0]
   2d48c:	9401      	str	r4, [sp, #4]
   2d48e:	462b      	mov	r3, r5
   2d490:	4640      	mov	r0, r8
   2d492:	f019 f88c 	bl	465ae <att_chan_read>
	if (read < 0) {
   2d496:	2800      	cmp	r0, #0
   2d498:	da07      	bge.n	2d4aa <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   2d49a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2d49e:	bf26      	itte	cs
   2d4a0:	4240      	negcs	r0, r0
   2d4a2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2d4a4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   2d4a6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2d4a8:	e7dc      	b.n	2d464 <read_type_cb+0x38>
	if (!data->item) {
   2d4aa:	6923      	ldr	r3, [r4, #16]
   2d4ac:	2b00      	cmp	r3, #0
   2d4ae:	d0d8      	beq.n	2d462 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d4b0:	68a0      	ldr	r0, [r4, #8]
   2d4b2:	f018 feab 	bl	4620c <net_buf_frags_len>
   2d4b6:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d4ba:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d4bc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d4be:	7818      	ldrb	r0, [r3, #0]
   2d4c0:	4285      	cmp	r5, r0
   2d4c2:	bf94      	ite	ls
   2d4c4:	2500      	movls	r5, #0
   2d4c6:	2501      	movhi	r5, #1
   2d4c8:	e7cc      	b.n	2d464 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   2d4ca:	2501      	movs	r5, #1
   2d4cc:	e7ca      	b.n	2d464 <read_type_cb+0x38>
   2d4ce:	bf00      	nop
   2d4d0:	00046229 	.word	0x00046229

0002d4d4 <bt_att_connected>:
{
   2d4d4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2d4d6:	4606      	mov	r6, r0
{
   2d4d8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2d4da:	2104      	movs	r1, #4
   2d4dc:	f856 0908 	ldr.w	r0, [r6], #-8
   2d4e0:	f018 fe58 	bl	46194 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   2d4e4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   2d4e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d4ea:	b91b      	cbnz	r3, 2d4f4 <bt_att_connected+0x20>
   2d4ec:	f105 000c 	add.w	r0, r5, #12
   2d4f0:	f01b fc7b 	bl	48dea <z_impl_k_queue_init>
	parent->next = child;
   2d4f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2d4f6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   2d4fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   2d4fc:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   2d500:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   2d502:	b902      	cbnz	r2, 2d506 <bt_att_connected+0x32>
	list->tail = node;
   2d504:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d506:	f3bf 8f5b 	dmb	ish
   2d50a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   2d50e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   2d512:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d514:	bf58      	it	pl
   2d516:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   2d518:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d51a:	bf5c      	itt	pl
   2d51c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d520:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   2d524:	f018 ffaa 	bl	4647c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d528:	f504 7084 	add.w	r0, r4, #264	; 0x108
   2d52c:	4902      	ldr	r1, [pc, #8]	; (2d538 <bt_att_connected+0x64>)
}
   2d52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d532:	f01b bd5d 	b.w	48ff0 <k_work_init_delayable>
   2d536:	bf00      	nop
   2d538:	00046b45 	.word	0x00046b45

0002d53c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   2d53c:	898b      	ldrh	r3, [r1, #12]
{
   2d53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d542:	4604      	mov	r4, r0
   2d544:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2d546:	2b00      	cmp	r3, #0
   2d548:	d060      	beq.n	2d60c <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d54a:	2101      	movs	r1, #1
   2d54c:	f105 0008 	add.w	r0, r5, #8
   2d550:	f01a fc7f 	bl	47e52 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   2d554:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d558:	4607      	mov	r7, r0
   2d55a:	2b00      	cmp	r3, #0
   2d55c:	d056      	beq.n	2d60c <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
   2d55e:	7801      	ldrb	r1, [r0, #0]
   2d560:	4a2e      	ldr	r2, [pc, #184]	; (2d61c <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d562:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d566:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   2d568:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   2d56c:	4288      	cmp	r0, r1
   2d56e:	d11b      	bne.n	2d5a8 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   2d570:	00d9      	lsls	r1, r3, #3
   2d572:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2d576:	f893 8002 	ldrb.w	r8, [r3, #2]
   2d57a:	f1b8 0f01 	cmp.w	r8, #1
   2d57e:	d023      	beq.n	2d5c8 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
   2d580:	f1b8 0f05 	cmp.w	r8, #5
   2d584:	d131      	bne.n	2d5ea <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d586:	f3bf 8f5b 	dmb	ish
   2d58a:	34e8      	adds	r4, #232	; 0xe8
   2d58c:	e854 3f00 	ldrex	r3, [r4]
   2d590:	f043 0002 	orr.w	r0, r3, #2
   2d594:	e844 0c00 	strex	ip, r0, [r4]
   2d598:	f1bc 0f00 	cmp.w	ip, #0
   2d59c:	d1f6      	bne.n	2d58c <bt_att_recv+0x50>
   2d59e:	f3bf 8f5b 	dmb	ish
   2d5a2:	f013 0f02 	tst.w	r3, #2
   2d5a6:	e01f      	b.n	2d5e8 <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d5a8:	3301      	adds	r3, #1
   2d5aa:	2b0d      	cmp	r3, #13
   2d5ac:	d1dc      	bne.n	2d568 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   2d5ae:	4608      	mov	r0, r1
   2d5b0:	f018 fe4c 	bl	4624c <att_op_get_type>
   2d5b4:	b350      	cbz	r0, 2d60c <bt_att_recv+0xd0>
   2d5b6:	2805      	cmp	r0, #5
   2d5b8:	d028      	beq.n	2d60c <bt_att_recv+0xd0>
	if (!req) {
   2d5ba:	b339      	cbz	r1, 2d60c <bt_att_recv+0xd0>
   2d5bc:	2306      	movs	r3, #6
   2d5be:	2200      	movs	r2, #0
   2d5c0:	4630      	mov	r0, r6
   2d5c2:	f019 f9c3 	bl	4694c <send_err_rsp.part.0>
   2d5c6:	e021      	b.n	2d60c <bt_att_recv+0xd0>
   2d5c8:	34e8      	adds	r4, #232	; 0xe8
   2d5ca:	f3bf 8f5b 	dmb	ish
   2d5ce:	e854 3f00 	ldrex	r3, [r4]
   2d5d2:	f043 0001 	orr.w	r0, r3, #1
   2d5d6:	e844 0c00 	strex	ip, r0, [r4]
   2d5da:	f1bc 0f00 	cmp.w	ip, #0
   2d5de:	d1f6      	bne.n	2d5ce <bt_att_recv+0x92>
   2d5e0:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   2d5e4:	f013 0f01 	tst.w	r3, #1
   2d5e8:	d110      	bne.n	2d60c <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
   2d5ea:	440a      	add	r2, r1
   2d5ec:	89a9      	ldrh	r1, [r5, #12]
   2d5ee:	7853      	ldrb	r3, [r2, #1]
   2d5f0:	4299      	cmp	r1, r3
   2d5f2:	d30e      	bcc.n	2d612 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
   2d5f4:	6853      	ldr	r3, [r2, #4]
   2d5f6:	4629      	mov	r1, r5
   2d5f8:	4630      	mov	r0, r6
   2d5fa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2d5fc:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   2d600:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   2d602:	d103      	bne.n	2d60c <bt_att_recv+0xd0>
   2d604:	b110      	cbz	r0, 2d60c <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2d606:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   2d608:	2900      	cmp	r1, #0
   2d60a:	d1d8      	bne.n	2d5be <bt_att_recv+0x82>
}
   2d60c:	2000      	movs	r0, #0
   2d60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   2d612:	f1b8 0f01 	cmp.w	r8, #1
   2d616:	d1f9      	bne.n	2d60c <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
   2d618:	2304      	movs	r3, #4
   2d61a:	e7f4      	b.n	2d606 <bt_att_recv+0xca>
   2d61c:	0004a230 	.word	0x0004a230

0002d620 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d624:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d626:	6803      	ldr	r3, [r0, #0]
   2d628:	460e      	mov	r6, r1
   2d62a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d62c:	b087      	sub	sp, #28
   2d62e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d630:	bf18      	it	ne
   2d632:	2101      	movne	r1, #1
   2d634:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d636:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d638:	f019 febc 	bl	473b4 <bt_gatt_change_aware>
   2d63c:	2800      	cmp	r0, #0
   2d63e:	d04a      	beq.n	2d6d6 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   2d640:	2f00      	cmp	r7, #0
   2d642:	d04a      	beq.n	2d6da <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   2d644:	2218      	movs	r2, #24
   2d646:	2100      	movs	r1, #0
   2d648:	4668      	mov	r0, sp
   2d64a:	f017 fc44 	bl	44ed6 <memset>
	if (rsp) {
   2d64e:	f1b8 0f00 	cmp.w	r8, #0
   2d652:	d122      	bne.n	2d69a <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   2d654:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d656:	4a22      	ldr	r2, [pc, #136]	; (2d6e0 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   2d658:	681b      	ldr	r3, [r3, #0]
   2d65a:	9300      	str	r3, [sp, #0]
	data.value = value;
   2d65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d65e:	9303      	str	r3, [sp, #12]
	data.len = len;
   2d660:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   2d664:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d668:	2301      	movs	r3, #1
   2d66a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   2d66e:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d672:	466b      	mov	r3, sp
   2d674:	4639      	mov	r1, r7
   2d676:	4638      	mov	r0, r7
	data.req = req;
   2d678:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   2d67c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d680:	f018 fe11 	bl	462a6 <bt_gatt_foreach_attr>
	if (data.err) {
   2d684:	f89d 4014 	ldrb.w	r4, [sp, #20]
   2d688:	b1f4      	cbz	r4, 2d6c8 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   2d68a:	f1b8 0f00 	cmp.w	r8, #0
   2d68e:	d10e      	bne.n	2d6ae <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   2d690:	2400      	movs	r4, #0
}
   2d692:	4620      	mov	r0, r4
   2d694:	b007      	add	sp, #28
   2d696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   2d69a:	2200      	movs	r2, #0
   2d69c:	4641      	mov	r1, r8
   2d69e:	4628      	mov	r0, r5
   2d6a0:	f019 f92f 	bl	46902 <bt_att_chan_create_pdu>
   2d6a4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   2d6a6:	2800      	cmp	r0, #0
   2d6a8:	d1d4      	bne.n	2d654 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   2d6aa:	240e      	movs	r4, #14
   2d6ac:	e7f1      	b.n	2d692 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   2d6ae:	9801      	ldr	r0, [sp, #4]
   2d6b0:	f00f fe6e 	bl	3d390 <net_buf_unref>
	if (!req) {
   2d6b4:	2e00      	cmp	r6, #0
   2d6b6:	d0eb      	beq.n	2d690 <att_write_rsp.constprop.0+0x70>
   2d6b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2d6bc:	463a      	mov	r2, r7
   2d6be:	4631      	mov	r1, r6
   2d6c0:	4628      	mov	r0, r5
   2d6c2:	f019 f943 	bl	4694c <send_err_rsp.part.0>
   2d6c6:	e7e3      	b.n	2d690 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   2d6c8:	9901      	ldr	r1, [sp, #4]
   2d6ca:	2900      	cmp	r1, #0
   2d6cc:	d0e0      	beq.n	2d690 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d6ce:	4628      	mov	r0, r5
   2d6d0:	f7ff fe9a 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
   2d6d4:	e7dd      	b.n	2d692 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d6d6:	2412      	movs	r4, #18
   2d6d8:	e7db      	b.n	2d692 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d6da:	2401      	movs	r4, #1
   2d6dc:	e7d9      	b.n	2d692 <att_write_rsp.constprop.0+0x72>
   2d6de:	bf00      	nop
   2d6e0:	0004654b 	.word	0x0004654b

0002d6e4 <att_read_group_req>:
{
   2d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d6e8:	898c      	ldrh	r4, [r1, #12]
   2d6ea:	3c04      	subs	r4, #4
   2d6ec:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2d6ee:	2c02      	cmp	r4, #2
{
   2d6f0:	4605      	mov	r5, r0
   2d6f2:	b08c      	sub	sp, #48	; 0x30
   2d6f4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d6f6:	d001      	beq.n	2d6fc <att_read_group_req+0x18>
   2d6f8:	2c10      	cmp	r4, #16
   2d6fa:	d16e      	bne.n	2d7da <att_read_group_req+0xf6>
   2d6fc:	2104      	movs	r1, #4
   2d6fe:	3008      	adds	r0, #8
   2d700:	f01a fba7 	bl	47e52 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d704:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d708:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d70a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d70c:	1d01      	adds	r1, r0, #4
   2d70e:	4622      	mov	r2, r4
   2d710:	4640      	mov	r0, r8
   2d712:	f017 fcf1 	bl	450f8 <bt_uuid_create>
   2d716:	2800      	cmp	r0, #0
   2d718:	d061      	beq.n	2d7de <att_read_group_req+0xfa>
	if (!start || !end) {
   2d71a:	2e00      	cmp	r6, #0
   2d71c:	d03a      	beq.n	2d794 <att_read_group_req+0xb0>
   2d71e:	2400      	movs	r4, #0
   2d720:	2f00      	cmp	r7, #0
   2d722:	d036      	beq.n	2d792 <att_read_group_req+0xae>
	if (start > end) {
   2d724:	42be      	cmp	r6, r7
   2d726:	d835      	bhi.n	2d794 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d728:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d72c:	a901      	add	r1, sp, #4
   2d72e:	4640      	mov	r0, r8
   2d730:	f88d 4004 	strb.w	r4, [sp, #4]
   2d734:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d738:	f017 fcb0 	bl	4509c <bt_uuid_cmp>
   2d73c:	2800      	cmp	r0, #0
   2d73e:	d134      	bne.n	2d7aa <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d740:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   2d742:	2214      	movs	r2, #20
   2d744:	2100      	movs	r1, #0
   2d746:	a807      	add	r0, sp, #28
   2d748:	f017 fbc5 	bl	44ed6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   2d74c:	2201      	movs	r2, #1
   2d74e:	2111      	movs	r1, #17
   2d750:	4620      	mov	r0, r4
   2d752:	f019 f93e 	bl	469d2 <bt_att_create_pdu>
   2d756:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   2d758:	2800      	cmp	r0, #0
   2d75a:	d040      	beq.n	2d7de <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   2d75c:	2101      	movs	r1, #1
   2d75e:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d760:	e9cd 5807 	strd	r5, r8, [sp, #28]
   2d764:	f01a fb4e 	bl	47e04 <net_buf_simple_add>
	data.rsp->len = 0U;
   2d768:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d76c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d76e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   2d770:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d774:	4a1b      	ldr	r2, [pc, #108]	; (2d7e4 <att_read_group_req+0x100>)
	data.group = NULL;
   2d776:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d77a:	4639      	mov	r1, r7
   2d77c:	4630      	mov	r0, r6
   2d77e:	f018 fd92 	bl	462a6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   2d782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d784:	781c      	ldrb	r4, [r3, #0]
   2d786:	bb1c      	cbnz	r4, 2d7d0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   2d788:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d78a:	f00f fe01 	bl	3d390 <net_buf_unref>
	if (!req) {
   2d78e:	230a      	movs	r3, #10
   2d790:	e018      	b.n	2d7c4 <att_read_group_req+0xe0>
			*err = 0U;
   2d792:	463e      	mov	r6, r7
	if (!req) {
   2d794:	2301      	movs	r3, #1
   2d796:	4632      	mov	r2, r6
   2d798:	2110      	movs	r1, #16
   2d79a:	4628      	mov	r0, r5
   2d79c:	f019 f8d6 	bl	4694c <send_err_rsp.part.0>
		return 0;
   2d7a0:	2400      	movs	r4, #0
}
   2d7a2:	4620      	mov	r0, r4
   2d7a4:	b00c      	add	sp, #48	; 0x30
   2d7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2d7aa:	f642 0301 	movw	r3, #10241	; 0x2801
   2d7ae:	a907      	add	r1, sp, #28
   2d7b0:	4640      	mov	r0, r8
   2d7b2:	f88d 401c 	strb.w	r4, [sp, #28]
   2d7b6:	f8ad 301e 	strh.w	r3, [sp, #30]
   2d7ba:	f017 fc6f 	bl	4509c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d7be:	2800      	cmp	r0, #0
   2d7c0:	d0be      	beq.n	2d740 <att_read_group_req+0x5c>
	if (!req) {
   2d7c2:	2310      	movs	r3, #16
   2d7c4:	4632      	mov	r2, r6
   2d7c6:	2110      	movs	r1, #16
   2d7c8:	4628      	mov	r0, r5
   2d7ca:	f019 f8bf 	bl	4694c <send_err_rsp.part.0>
		return 0;
   2d7ce:	e7e8      	b.n	2d7a2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d7d0:	9909      	ldr	r1, [sp, #36]	; 0x24
   2d7d2:	4628      	mov	r0, r5
   2d7d4:	f7ff fe18 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d7d8:	e7e2      	b.n	2d7a0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   2d7da:	2404      	movs	r4, #4
   2d7dc:	e7e1      	b.n	2d7a2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   2d7de:	240e      	movs	r4, #14
   2d7e0:	e7df      	b.n	2d7a2 <att_read_group_req+0xbe>
   2d7e2:	bf00      	nop
   2d7e4:	0002d2a1 	.word	0x0002d2a1

0002d7e8 <att_read_mult_req>:
{
   2d7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d7ec:	6886      	ldr	r6, [r0, #8]
{
   2d7ee:	b085      	sub	sp, #20
   2d7f0:	4604      	mov	r4, r0
   2d7f2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d7f4:	4630      	mov	r0, r6
   2d7f6:	2101      	movs	r1, #1
   2d7f8:	f019 fddc 	bl	473b4 <bt_gatt_change_aware>
   2d7fc:	b3b8      	cbz	r0, 2d86e <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   2d7fe:	2210      	movs	r2, #16
   2d800:	2100      	movs	r1, #0
   2d802:	4668      	mov	r0, sp
   2d804:	f017 fb67 	bl	44ed6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   2d808:	2200      	movs	r2, #0
   2d80a:	210f      	movs	r1, #15
   2d80c:	4630      	mov	r0, r6
   2d80e:	f019 f8e0 	bl	469d2 <bt_att_create_pdu>
   2d812:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d814:	b368      	cbz	r0, 2d872 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d816:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2d878 <att_read_mult_req+0x90>
	data.chan = chan;
   2d81a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   2d81c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d820:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2d824:	89ab      	ldrh	r3, [r5, #12]
   2d826:	2b01      	cmp	r3, #1
   2d828:	d804      	bhi.n	2d834 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d82a:	9902      	ldr	r1, [sp, #8]
   2d82c:	4620      	mov	r0, r4
   2d82e:	f7ff fdeb 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
   2d832:	e018      	b.n	2d866 <att_read_mult_req+0x7e>
   2d834:	4638      	mov	r0, r7
   2d836:	f01a fb14 	bl	47e62 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d83a:	466b      	mov	r3, sp
   2d83c:	464a      	mov	r2, r9
   2d83e:	4601      	mov	r1, r0
   2d840:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d842:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d846:	f018 fd2e 	bl	462a6 <bt_gatt_foreach_attr>
		if (data.err) {
   2d84a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d84e:	2b00      	cmp	r3, #0
   2d850:	d0e8      	beq.n	2d824 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   2d852:	9802      	ldr	r0, [sp, #8]
   2d854:	f00f fd9c 	bl	3d390 <net_buf_unref>
	if (!req) {
   2d858:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d85c:	4632      	mov	r2, r6
   2d85e:	210e      	movs	r1, #14
   2d860:	4620      	mov	r0, r4
   2d862:	f019 f873 	bl	4694c <send_err_rsp.part.0>
	return 0;
   2d866:	2000      	movs	r0, #0
}
   2d868:	b005      	add	sp, #20
   2d86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d86e:	2012      	movs	r0, #18
   2d870:	e7fa      	b.n	2d868 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   2d872:	200e      	movs	r0, #14
   2d874:	e7f8      	b.n	2d868 <att_read_mult_req+0x80>
   2d876:	bf00      	nop
   2d878:	0004679d 	.word	0x0004679d

0002d87c <att_read_rsp>:
{
   2d87c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d880:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   2d884:	4605      	mov	r5, r0
   2d886:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d888:	4640      	mov	r0, r8
   2d88a:	2101      	movs	r1, #1
{
   2d88c:	4614      	mov	r4, r2
   2d88e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   2d890:	f019 fd90 	bl	473b4 <bt_gatt_change_aware>
   2d894:	b388      	cbz	r0, 2d8fa <att_read_rsp+0x7e>
	if (!handle) {
   2d896:	b396      	cbz	r6, 2d8fe <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   2d898:	2210      	movs	r2, #16
   2d89a:	2100      	movs	r1, #0
   2d89c:	4668      	mov	r0, sp
   2d89e:	f017 fb1a 	bl	44ed6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   2d8a2:	2200      	movs	r2, #0
   2d8a4:	4621      	mov	r1, r4
   2d8a6:	4640      	mov	r0, r8
   2d8a8:	f019 f893 	bl	469d2 <bt_att_create_pdu>
   2d8ac:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d8ae:	b340      	cbz	r0, 2d902 <att_read_rsp+0x86>
	data.offset = offset;
   2d8b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2d8b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d8b8:	2301      	movs	r3, #1
   2d8ba:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d8be:	4a12      	ldr	r2, [pc, #72]	; (2d908 <att_read_rsp+0x8c>)
	data.chan = chan;
   2d8c0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d8c2:	466b      	mov	r3, sp
   2d8c4:	4631      	mov	r1, r6
   2d8c6:	4630      	mov	r0, r6
   2d8c8:	f018 fced 	bl	462a6 <bt_gatt_foreach_attr>
	if (data.err) {
   2d8cc:	f89d 400c 	ldrb.w	r4, [sp, #12]
   2d8d0:	b174      	cbz	r4, 2d8f0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   2d8d2:	9802      	ldr	r0, [sp, #8]
   2d8d4:	f00f fd5c 	bl	3d390 <net_buf_unref>
	if (!req) {
   2d8d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d8dc:	4632      	mov	r2, r6
   2d8de:	4639      	mov	r1, r7
   2d8e0:	4628      	mov	r0, r5
   2d8e2:	f019 f833 	bl	4694c <send_err_rsp.part.0>
		return 0;
   2d8e6:	2400      	movs	r4, #0
}
   2d8e8:	4620      	mov	r0, r4
   2d8ea:	b004      	add	sp, #16
   2d8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d8f0:	9902      	ldr	r1, [sp, #8]
   2d8f2:	4628      	mov	r0, r5
   2d8f4:	f7ff fd88 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d8f8:	e7f6      	b.n	2d8e8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d8fa:	2412      	movs	r4, #18
   2d8fc:	e7f4      	b.n	2d8e8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d8fe:	2401      	movs	r4, #1
   2d900:	e7f2      	b.n	2d8e8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   2d902:	240e      	movs	r4, #14
   2d904:	e7f0      	b.n	2d8e8 <att_read_rsp+0x6c>
   2d906:	bf00      	nop
   2d908:	0004679d 	.word	0x0004679d

0002d90c <att_read_type_req>:
{
   2d90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d910:	898c      	ldrh	r4, [r1, #12]
   2d912:	3c04      	subs	r4, #4
   2d914:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2d916:	2c02      	cmp	r4, #2
{
   2d918:	4605      	mov	r5, r0
   2d91a:	b08c      	sub	sp, #48	; 0x30
   2d91c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d91e:	d001      	beq.n	2d924 <att_read_type_req+0x18>
   2d920:	2c10      	cmp	r4, #16
   2d922:	d14f      	bne.n	2d9c4 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d924:	2104      	movs	r1, #4
   2d926:	3008      	adds	r0, #8
   2d928:	f01a fa93 	bl	47e52 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d92c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d930:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d932:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d934:	1d01      	adds	r1, r0, #4
   2d936:	4622      	mov	r2, r4
   2d938:	4640      	mov	r0, r8
   2d93a:	f017 fbdd 	bl	450f8 <bt_uuid_create>
   2d93e:	b188      	cbz	r0, 2d964 <att_read_type_req+0x58>
	if (!start || !end) {
   2d940:	b19e      	cbz	r6, 2d96a <att_read_type_req+0x5e>
   2d942:	b18f      	cbz	r7, 2d968 <att_read_type_req+0x5c>
	if (start > end) {
   2d944:	42b7      	cmp	r7, r6
   2d946:	d310      	bcc.n	2d96a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   2d948:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   2d94a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   2d94c:	2100      	movs	r1, #0
   2d94e:	eb0d 0002 	add.w	r0, sp, r2
   2d952:	f017 fac0 	bl	44ed6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   2d956:	2201      	movs	r2, #1
   2d958:	2109      	movs	r1, #9
   2d95a:	4620      	mov	r0, r4
   2d95c:	f019 f839 	bl	469d2 <bt_att_create_pdu>
   2d960:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   2d962:	b968      	cbnz	r0, 2d980 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   2d964:	240e      	movs	r4, #14
   2d966:	e007      	b.n	2d978 <att_read_type_req+0x6c>
			*err = 0U;
   2d968:	463e      	mov	r6, r7
	if (!req) {
   2d96a:	2301      	movs	r3, #1
   2d96c:	4632      	mov	r2, r6
   2d96e:	2108      	movs	r1, #8
   2d970:	4628      	mov	r0, r5
   2d972:	f018 ffeb 	bl	4694c <send_err_rsp.part.0>
		return 0;
   2d976:	2400      	movs	r4, #0
}
   2d978:	4620      	mov	r0, r4
   2d97a:	b00c      	add	sp, #48	; 0x30
   2d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   2d980:	2101      	movs	r1, #1
   2d982:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d984:	e9cd 5806 	strd	r5, r8, [sp, #24]
   2d988:	f01a fa3c 	bl	47e04 <net_buf_simple_add>
	data.rsp->len = 0U;
   2d98c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d990:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d992:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d994:	4a0c      	ldr	r2, [pc, #48]	; (2d9c8 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   2d996:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d99a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d99c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d9a0:	4630      	mov	r0, r6
   2d9a2:	ab06      	add	r3, sp, #24
   2d9a4:	f018 fc7f 	bl	462a6 <bt_gatt_foreach_attr>
	if (data.err) {
   2d9a8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   2d9ac:	b12c      	cbz	r4, 2d9ba <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   2d9ae:	9808      	ldr	r0, [sp, #32]
   2d9b0:	f00f fcee 	bl	3d390 <net_buf_unref>
	if (!req) {
   2d9b4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2d9b8:	e7d8      	b.n	2d96c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d9ba:	9908      	ldr	r1, [sp, #32]
   2d9bc:	4628      	mov	r0, r5
   2d9be:	f7ff fd23 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d9c2:	e7d9      	b.n	2d978 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   2d9c4:	2404      	movs	r4, #4
   2d9c6:	e7d7      	b.n	2d978 <att_read_type_req+0x6c>
   2d9c8:	0002d42d 	.word	0x0002d42d

0002d9cc <att_find_type_req>:
{
   2d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d9d0:	4688      	mov	r8, r1
   2d9d2:	b086      	sub	sp, #24
   2d9d4:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2d9d6:	2106      	movs	r1, #6
   2d9d8:	f108 0008 	add.w	r0, r8, #8
   2d9dc:	f01a fa39 	bl	47e52 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d9e0:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   2d9e2:	b317      	cbz	r7, 2da2a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d9e4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   2d9e8:	f1b9 0f00 	cmp.w	r9, #0
   2d9ec:	d01c      	beq.n	2da28 <att_find_type_req+0x5c>
	if (start > end) {
   2d9ee:	454f      	cmp	r7, r9
   2d9f0:	d81b      	bhi.n	2da2a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   2d9f2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2d9f4:	f8ad 3002 	strh.w	r3, [sp, #2]
   2d9f8:	2400      	movs	r4, #0
   2d9fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d9fe:	a901      	add	r1, sp, #4
   2da00:	4668      	mov	r0, sp
	value = buf->data;
   2da02:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2da06:	f88d 4000 	strb.w	r4, [sp]
   2da0a:	f88d 4004 	strb.w	r4, [sp, #4]
   2da0e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2da12:	f017 fb43 	bl	4509c <bt_uuid_cmp>
   2da16:	4606      	mov	r6, r0
   2da18:	b190      	cbz	r0, 2da40 <att_find_type_req+0x74>
	if (!req) {
   2da1a:	230a      	movs	r3, #10
   2da1c:	463a      	mov	r2, r7
   2da1e:	2106      	movs	r1, #6
   2da20:	4628      	mov	r0, r5
   2da22:	f018 ff93 	bl	4694c <send_err_rsp.part.0>
		return 0;
   2da26:	e007      	b.n	2da38 <att_find_type_req+0x6c>
			*err = 0U;
   2da28:	464f      	mov	r7, r9
	if (!req) {
   2da2a:	2301      	movs	r3, #1
   2da2c:	463a      	mov	r2, r7
   2da2e:	2106      	movs	r1, #6
   2da30:	4628      	mov	r0, r5
   2da32:	f018 ff8b 	bl	4694c <send_err_rsp.part.0>
		return 0;
   2da36:	2400      	movs	r4, #0
}
   2da38:	4620      	mov	r0, r4
   2da3a:	b006      	add	sp, #24
   2da3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2da40:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   2da44:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   2da48:	4601      	mov	r1, r0
   2da4a:	2214      	movs	r2, #20
   2da4c:	a801      	add	r0, sp, #4
   2da4e:	f017 fa42 	bl	44ed6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   2da52:	4632      	mov	r2, r6
   2da54:	2107      	movs	r1, #7
   2da56:	4640      	mov	r0, r8
   2da58:	f018 ffbb 	bl	469d2 <bt_att_create_pdu>
   2da5c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2da5e:	b1d8      	cbz	r0, 2da98 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2da60:	230a      	movs	r3, #10
   2da62:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2da66:	4a0d      	ldr	r2, [pc, #52]	; (2da9c <att_find_type_req+0xd0>)
	data.value_len = value_len;
   2da68:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2da6c:	ab01      	add	r3, sp, #4
   2da6e:	4649      	mov	r1, r9
   2da70:	4638      	mov	r0, r7
	data.value = value;
   2da72:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   2da76:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2da78:	f018 fc15 	bl	462a6 <bt_gatt_foreach_attr>
	if (data.err) {
   2da7c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   2da80:	b12c      	cbz	r4, 2da8e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   2da82:	9802      	ldr	r0, [sp, #8]
   2da84:	f00f fc84 	bl	3d390 <net_buf_unref>
	if (!req) {
   2da88:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2da8c:	e7ce      	b.n	2da2c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2da8e:	9902      	ldr	r1, [sp, #8]
   2da90:	4628      	mov	r0, r5
   2da92:	f7ff fcb9 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2da96:	e7cf      	b.n	2da38 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   2da98:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2da9a:	e7cd      	b.n	2da38 <att_find_type_req+0x6c>
   2da9c:	000462bd 	.word	0x000462bd

0002daa0 <att_find_info_req>:
{
   2daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   2daa2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2daa4:	881e      	ldrh	r6, [r3, #0]
{
   2daa6:	b085      	sub	sp, #20
   2daa8:	4605      	mov	r5, r0
	if (!start || !end) {
   2daaa:	b19e      	cbz	r6, 2dad4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   2daac:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   2daae:	b184      	cbz	r4, 2dad2 <att_find_info_req+0x32>
	if (start > end) {
   2dab0:	42b4      	cmp	r4, r6
   2dab2:	d30f      	bcc.n	2dad4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   2dab4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   2dab6:	2210      	movs	r2, #16
   2dab8:	2100      	movs	r1, #0
   2daba:	4668      	mov	r0, sp
   2dabc:	f017 fa0b 	bl	44ed6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   2dac0:	2200      	movs	r2, #0
   2dac2:	2105      	movs	r1, #5
   2dac4:	4638      	mov	r0, r7
   2dac6:	f018 ff84 	bl	469d2 <bt_att_create_pdu>
   2daca:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   2dacc:	b958      	cbnz	r0, 2dae6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   2dace:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   2dad0:	e007      	b.n	2dae2 <att_find_info_req+0x42>
			*err = 0U;
   2dad2:	4626      	mov	r6, r4
	if (!req) {
   2dad4:	2301      	movs	r3, #1
   2dad6:	4632      	mov	r2, r6
   2dad8:	2104      	movs	r1, #4
   2dada:	4628      	mov	r0, r5
   2dadc:	f018 ff36 	bl	4694c <send_err_rsp.part.0>
	return 0;
   2dae0:	2000      	movs	r0, #0
}
   2dae2:	b005      	add	sp, #20
   2dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2dae6:	4621      	mov	r1, r4
   2dae8:	4a08      	ldr	r2, [pc, #32]	; (2db0c <att_find_info_req+0x6c>)
	data.chan = chan;
   2daea:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2daec:	466b      	mov	r3, sp
   2daee:	4630      	mov	r0, r6
   2daf0:	f018 fbd9 	bl	462a6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   2daf4:	9c02      	ldr	r4, [sp, #8]
   2daf6:	b924      	cbnz	r4, 2db02 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   2daf8:	9801      	ldr	r0, [sp, #4]
   2dafa:	f00f fc49 	bl	3d390 <net_buf_unref>
	if (!req) {
   2dafe:	230a      	movs	r3, #10
   2db00:	e7e9      	b.n	2dad6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2db02:	9901      	ldr	r1, [sp, #4]
   2db04:	4628      	mov	r0, r5
   2db06:	f7ff fc7f 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
   2db0a:	e7e9      	b.n	2dae0 <att_find_info_req+0x40>
   2db0c:	000463e5 	.word	0x000463e5

0002db10 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   2db10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   2db12:	2300      	movs	r3, #0
{
   2db14:	4605      	mov	r5, r0
   2db16:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   2db18:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   2db1a:	f014 fbfd 	bl	42318 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   2db1e:	4b0b      	ldr	r3, [pc, #44]	; (2db4c <bt_att_req_alloc+0x3c>)
   2db20:	681b      	ldr	r3, [r3, #0]
   2db22:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   2db24:	bf04      	itt	eq
   2db26:	2500      	moveq	r5, #0
   2db28:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   2db2a:	a901      	add	r1, sp, #4
   2db2c:	4808      	ldr	r0, [pc, #32]	; (2db50 <bt_att_req_alloc+0x40>)
   2db2e:	462a      	mov	r2, r5
   2db30:	4623      	mov	r3, r4
   2db32:	f013 fc53 	bl	413dc <k_mem_slab_alloc>
   2db36:	4601      	mov	r1, r0
   2db38:	b930      	cbnz	r0, 2db48 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   2db3a:	9801      	ldr	r0, [sp, #4]
   2db3c:	221c      	movs	r2, #28
   2db3e:	f017 f9ca 	bl	44ed6 <memset>

	return req;
   2db42:	9801      	ldr	r0, [sp, #4]
}
   2db44:	b003      	add	sp, #12
   2db46:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2db48:	2000      	movs	r0, #0
   2db4a:	e7fb      	b.n	2db44 <bt_att_req_alloc+0x34>
   2db4c:	20001c80 	.word	0x20001c80
   2db50:	20000b2c 	.word	0x20000b2c

0002db54 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   2db54:	b507      	push	{r0, r1, r2, lr}
   2db56:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   2db58:	6880      	ldr	r0, [r0, #8]
   2db5a:	b120      	cbz	r0, 2db66 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   2db5c:	f00f fc18 	bl	3d390 <net_buf_unref>
		req->buf = NULL;
   2db60:	9b01      	ldr	r3, [sp, #4]
   2db62:	2200      	movs	r2, #0
   2db64:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   2db66:	4803      	ldr	r0, [pc, #12]	; (2db74 <bt_att_req_free+0x20>)
   2db68:	a901      	add	r1, sp, #4
   2db6a:	f01b f884 	bl	48c76 <k_mem_slab_free>
}
   2db6e:	b003      	add	sp, #12
   2db70:	f85d fb04 	ldr.w	pc, [sp], #4
   2db74:	20000b2c 	.word	0x20000b2c

0002db78 <att_handle_rsp>:
{
   2db78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2db7c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   2db7e:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   2db82:	4688      	mov	r8, r1
   2db84:	4691      	mov	r9, r2
   2db86:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   2db88:	f01b fa3e 	bl	49008 <k_work_cancel_delayable>
	if (!chan->req) {
   2db8c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   2db90:	2600      	movs	r6, #0
   2db92:	b1f0      	cbz	r0, 2dbd2 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   2db94:	4b10      	ldr	r3, [pc, #64]	; (2dbd8 <att_handle_rsp+0x60>)
   2db96:	4298      	cmp	r0, r3
   2db98:	d112      	bne.n	2dbc0 <att_handle_rsp+0x48>
		chan->req = NULL;
   2db9a:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   2db9e:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   2dba0:	6820      	ldr	r0, [r4, #0]
   2dba2:	f018 fe62 	bl	4686a <att_req_send_process>
	if (func) {
   2dba6:	b13d      	cbz	r5, 2dbb8 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   2dba8:	6820      	ldr	r0, [r4, #0]
   2dbaa:	f8cd a000 	str.w	sl, [sp]
   2dbae:	6800      	ldr	r0, [r0, #0]
   2dbb0:	464b      	mov	r3, r9
   2dbb2:	4642      	mov	r2, r8
   2dbb4:	4639      	mov	r1, r7
   2dbb6:	47a8      	blx	r5
}
   2dbb8:	2000      	movs	r0, #0
   2dbba:	b002      	add	sp, #8
   2dbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   2dbc0:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   2dbc2:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   2dbc4:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   2dbc8:	f7ff ffc4 	bl	2db54 <bt_att_req_free>
	chan->req = NULL;
   2dbcc:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   2dbd0:	e7e6      	b.n	2dba0 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   2dbd2:	4605      	mov	r5, r0
   2dbd4:	e7e4      	b.n	2dba0 <att_handle_rsp+0x28>
   2dbd6:	bf00      	nop
   2dbd8:	20001ce4 	.word	0x20001ce4

0002dbdc <bt_att_disconnected>:
{
   2dbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   2dbde:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   2dbe2:	b085      	sub	sp, #20
   2dbe4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2dbe6:	2d00      	cmp	r5, #0
   2dbe8:	d04d      	beq.n	2dc86 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2dbea:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   2dbee:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2dbf2:	f018 fd9d 	bl	46730 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2dbf6:	f1a4 0608 	sub.w	r6, r4, #8
   2dbfa:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   2dbfe:	2200      	movs	r2, #0
   2dc00:	2300      	movs	r3, #0
   2dc02:	4638      	mov	r0, r7
   2dc04:	f01a f8a1 	bl	47d4a <net_buf_get>
   2dc08:	4602      	mov	r2, r0
   2dc0a:	bb18      	cbnz	r0, 2dc54 <bt_att_disconnected+0x78>
	if (chan->req) {
   2dc0c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2dc10:	b123      	cbz	r3, 2dc1c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2dc12:	4601      	mov	r1, r0
   2dc14:	230e      	movs	r3, #14
   2dc16:	4630      	mov	r0, r6
   2dc18:	f7ff ffae 	bl	2db78 <att_handle_rsp>
	chan->att = NULL;
   2dc1c:	2300      	movs	r3, #0
   2dc1e:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   2dc22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2dc24:	2b00      	cmp	r3, #0
   2dc26:	d12e      	bne.n	2dc86 <bt_att_disconnected+0xaa>
	att_reset(att);
   2dc28:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   2dc2a:	9803      	ldr	r0, [sp, #12]
   2dc2c:	2200      	movs	r2, #0
   2dc2e:	2300      	movs	r3, #0
   2dc30:	300c      	adds	r0, #12
   2dc32:	f01a f88a 	bl	47d4a <net_buf_get>
   2dc36:	b980      	cbnz	r0, 2dc5a <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   2dc38:	9803      	ldr	r0, [sp, #12]
	return list->head;
   2dc3a:	6845      	ldr	r5, [r0, #4]
   2dc3c:	b985      	cbnz	r5, 2dc60 <bt_att_disconnected+0x84>
	att->conn = NULL;
   2dc3e:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   2dc40:	a903      	add	r1, sp, #12
   2dc42:	4812      	ldr	r0, [pc, #72]	; (2dc8c <bt_att_disconnected+0xb0>)
   2dc44:	f01b f817 	bl	48c76 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   2dc48:	6820      	ldr	r0, [r4, #0]
}
   2dc4a:	b005      	add	sp, #20
   2dc4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   2dc50:	f000 bf38 	b.w	2eac4 <bt_gatt_disconnected>
		net_buf_unref(buf);
   2dc54:	f00f fb9c 	bl	3d390 <net_buf_unref>
   2dc58:	e7d1      	b.n	2dbfe <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   2dc5a:	f00f fb99 	bl	3d390 <net_buf_unref>
   2dc5e:	e7e4      	b.n	2dc2a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dc60:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   2dc62:	686e      	ldr	r6, [r5, #4]
	return node->next;
   2dc64:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2dc66:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dc68:	4295      	cmp	r5, r2
	list->tail = node;
   2dc6a:	bf08      	it	eq
   2dc6c:	6083      	streq	r3, [r0, #8]
   2dc6e:	b136      	cbz	r6, 2dc7e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   2dc70:	69ab      	ldr	r3, [r5, #24]
   2dc72:	9300      	str	r3, [sp, #0]
   2dc74:	2300      	movs	r3, #0
   2dc76:	6800      	ldr	r0, [r0, #0]
   2dc78:	461a      	mov	r2, r3
   2dc7a:	210e      	movs	r1, #14
   2dc7c:	47b0      	blx	r6
		bt_att_req_free(req);
   2dc7e:	4628      	mov	r0, r5
   2dc80:	f7ff ff68 	bl	2db54 <bt_att_req_free>
   2dc84:	e7d8      	b.n	2dc38 <bt_att_disconnected+0x5c>
}
   2dc86:	b005      	add	sp, #20
   2dc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dc8a:	bf00      	nop
   2dc8c:	20000ad8 	.word	0x20000ad8

0002dc90 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   2dc90:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2dc92:	4904      	ldr	r1, [pc, #16]	; (2dca4 <db_hash_set+0x14>)
{
   2dc94:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2dc96:	4618      	mov	r0, r3
   2dc98:	2210      	movs	r2, #16
   2dc9a:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   2dc9c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2dca0:	bd10      	pop	{r4, pc}
   2dca2:	bf00      	nop
   2dca4:	20001168 	.word	0x20001168

0002dca8 <find_cf_cfg>:
{
   2dca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2dcaa:	4d0f      	ldr	r5, [pc, #60]	; (2dce8 <find_cf_cfg+0x40>)
   2dcac:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2dcae:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2dcb0:	462e      	mov	r6, r5
		if (!conn) {
   2dcb2:	1c68      	adds	r0, r5, #1
   2dcb4:	b964      	cbnz	r4, 2dcd0 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   2dcb6:	2207      	movs	r2, #7
   2dcb8:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2dcba:	9400      	str	r4, [sp, #0]
   2dcbc:	f8cd 4003 	str.w	r4, [sp, #3]
   2dcc0:	f017 f8ed 	bl	44e9e <memcmp>
   2dcc4:	b958      	cbnz	r0, 2dcde <find_cf_cfg+0x36>
}
   2dcc6:	4630      	mov	r0, r6
   2dcc8:	b003      	add	sp, #12
   2dcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dccc:	2701      	movs	r7, #1
   2dcce:	e7ef      	b.n	2dcb0 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2dcd0:	4602      	mov	r2, r0
   2dcd2:	7829      	ldrb	r1, [r5, #0]
   2dcd4:	4620      	mov	r0, r4
   2dcd6:	f018 f93e 	bl	45f56 <bt_conn_is_peer_addr_le>
   2dcda:	2800      	cmp	r0, #0
   2dcdc:	d1f3      	bne.n	2dcc6 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2dcde:	3510      	adds	r5, #16
   2dce0:	2f00      	cmp	r7, #0
   2dce2:	d0f3      	beq.n	2dccc <find_cf_cfg+0x24>
	return NULL;
   2dce4:	2600      	movs	r6, #0
   2dce6:	e7ee      	b.n	2dcc6 <find_cf_cfg+0x1e>
   2dce8:	20001d08 	.word	0x20001d08

0002dcec <sc_store>:
{
   2dcec:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   2dcee:	4605      	mov	r5, r0
{
   2dcf0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   2dcf2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2dcf6:	4604      	mov	r4, r0
	if (cfg->id) {
   2dcf8:	b19a      	cbz	r2, 2dd22 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2dcfa:	ae02      	add	r6, sp, #8
   2dcfc:	2104      	movs	r1, #4
   2dcfe:	4630      	mov	r0, r6
   2dd00:	f014 ff53 	bl	42baa <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   2dd04:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   2dd06:	462b      	mov	r3, r5
   2dd08:	a803      	add	r0, sp, #12
   2dd0a:	4a07      	ldr	r2, [pc, #28]	; (2dd28 <sc_store+0x3c>)
   2dd0c:	2124      	movs	r1, #36	; 0x24
   2dd0e:	f7fd f863 	bl	2add8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   2dd12:	2204      	movs	r2, #4
   2dd14:	f104 0108 	add.w	r1, r4, #8
   2dd18:	a803      	add	r0, sp, #12
   2dd1a:	f7fb fe8f 	bl	29a3c <settings_save_one>
}
   2dd1e:	b00c      	add	sp, #48	; 0x30
   2dd20:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   2dd22:	9200      	str	r2, [sp, #0]
   2dd24:	e7ef      	b.n	2dd06 <sc_store+0x1a>
   2dd26:	bf00      	nop
   2dd28:	0004b912 	.word	0x0004b912

0002dd2c <db_hash_commit>:

static int db_hash_commit(void)
{
   2dd2c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2dd2e:	2108      	movs	r1, #8
   2dd30:	4804      	ldr	r0, [pc, #16]	; (2dd44 <db_hash_commit+0x18>)
   2dd32:	f018 ffe5 	bl	46d00 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   2dd36:	2200      	movs	r2, #0
   2dd38:	2300      	movs	r3, #0
   2dd3a:	4803      	ldr	r0, [pc, #12]	; (2dd48 <db_hash_commit+0x1c>)
   2dd3c:	f013 fff6 	bl	41d2c <k_work_reschedule>

	return 0;
}
   2dd40:	2000      	movs	r0, #0
   2dd42:	bd08      	pop	{r3, pc}
   2dd44:	20001258 	.word	0x20001258
   2dd48:	20001178 	.word	0x20001178

0002dd4c <sc_commit>:
{
   2dd4c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2dd4e:	4809      	ldr	r0, [pc, #36]	; (2dd74 <sc_commit+0x28>)
   2dd50:	f06f 0102 	mvn.w	r1, #2
   2dd54:	f019 f83a 	bl	46dcc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2dd58:	4806      	ldr	r0, [pc, #24]	; (2dd74 <sc_commit+0x28>)
   2dd5a:	f018 ff76 	bl	46c4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2dd5e:	07c3      	lsls	r3, r0, #31
   2dd60:	d505      	bpl.n	2dd6e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2dd62:	4805      	ldr	r0, [pc, #20]	; (2dd78 <sc_commit+0x2c>)
   2dd64:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2dd68:	2300      	movs	r3, #0
   2dd6a:	f013 ffdf 	bl	41d2c <k_work_reschedule>
}
   2dd6e:	2000      	movs	r0, #0
   2dd70:	bd08      	pop	{r3, pc}
   2dd72:	bf00      	nop
   2dd74:	20001258 	.word	0x20001258
   2dd78:	20001228 	.word	0x20001228

0002dd7c <find_cf_cfg_by_addr>:
{
   2dd7c:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   2dd7e:	4c0e      	ldr	r4, [pc, #56]	; (2ddb8 <find_cf_cfg_by_addr+0x3c>)
   2dd80:	7823      	ldrb	r3, [r4, #0]
   2dd82:	4283      	cmp	r3, r0
{
   2dd84:	4606      	mov	r6, r0
   2dd86:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   2dd88:	d00a      	beq.n	2dda0 <find_cf_cfg_by_addr+0x24>
   2dd8a:	7c23      	ldrb	r3, [r4, #16]
   2dd8c:	42b3      	cmp	r3, r6
   2dd8e:	d111      	bne.n	2ddb4 <find_cf_cfg_by_addr+0x38>
   2dd90:	490a      	ldr	r1, [pc, #40]	; (2ddbc <find_cf_cfg_by_addr+0x40>)
   2dd92:	2207      	movs	r2, #7
   2dd94:	4628      	mov	r0, r5
   2dd96:	f017 f882 	bl	44e9e <memcmp>
   2dd9a:	b958      	cbnz	r0, 2ddb4 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2dd9c:	2001      	movs	r0, #1
   2dd9e:	e006      	b.n	2ddae <find_cf_cfg_by_addr+0x32>
   2dda0:	2207      	movs	r2, #7
   2dda2:	1c61      	adds	r1, r4, #1
   2dda4:	4628      	mov	r0, r5
   2dda6:	f017 f87a 	bl	44e9e <memcmp>
			if (id == cf_cfg[i].id &&
   2ddaa:	2800      	cmp	r0, #0
   2ddac:	d1ed      	bne.n	2dd8a <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   2ddae:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   2ddb2:	e000      	b.n	2ddb6 <find_cf_cfg_by_addr+0x3a>
	return NULL;
   2ddb4:	2000      	movs	r0, #0
}
   2ddb6:	bd70      	pop	{r4, r5, r6, pc}
   2ddb8:	20001d08 	.word	0x20001d08
   2ddbc:	20001d19 	.word	0x20001d19

0002ddc0 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   2ddc0:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ddc2:	6881      	ldr	r1, [r0, #8]
{
   2ddc4:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ddc6:	4a07      	ldr	r2, [pc, #28]	; (2dde4 <remove_peer_from_attr+0x24>)
   2ddc8:	4291      	cmp	r1, r2
   2ddca:	d109      	bne.n	2dde0 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   2ddcc:	791a      	ldrb	r2, [r3, #4]
   2ddce:	6819      	ldr	r1, [r3, #0]
   2ddd0:	68c0      	ldr	r0, [r0, #12]
   2ddd2:	f019 f912 	bl	46ffa <ccc_find_cfg>
	if (cfg) {
   2ddd6:	b118      	cbz	r0, 2dde0 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   2ddd8:	220a      	movs	r2, #10
   2ddda:	2100      	movs	r1, #0
   2dddc:	f017 f87b 	bl	44ed6 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   2dde0:	2001      	movs	r0, #1
   2dde2:	bd08      	pop	{r3, pc}
   2dde4:	0002dead 	.word	0x0002dead

0002dde8 <ccc_load>:
{
   2dde8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ddea:	4b21      	ldr	r3, [pc, #132]	; (2de70 <ccc_load+0x88>)
{
   2ddec:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ddee:	6882      	ldr	r2, [r0, #8]
   2ddf0:	429a      	cmp	r2, r3
   2ddf2:	d002      	beq.n	2ddfa <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   2ddf4:	2001      	movs	r0, #1
}
   2ddf6:	b002      	add	sp, #8
   2ddf8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   2ddfa:	68a3      	ldr	r3, [r4, #8]
   2ddfc:	68c6      	ldr	r6, [r0, #12]
   2ddfe:	b94b      	cbnz	r3, 2de14 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   2de00:	7922      	ldrb	r2, [r4, #4]
   2de02:	6821      	ldr	r1, [r4, #0]
   2de04:	4630      	mov	r0, r6
   2de06:	f019 f8f8 	bl	46ffa <ccc_find_cfg>
	if (!cfg) {
   2de0a:	2800      	cmp	r0, #0
   2de0c:	d0f2      	beq.n	2ddf4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   2de0e:	f018 ffcf 	bl	46db0 <clear_ccc_cfg>
   2de12:	e7ef      	b.n	2ddf4 <ccc_load+0xc>
	} else if (!load->count) {
   2de14:	68e0      	ldr	r0, [r4, #12]
   2de16:	2800      	cmp	r0, #0
   2de18:	d0ed      	beq.n	2ddf6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   2de1a:	881b      	ldrh	r3, [r3, #0]
   2de1c:	4299      	cmp	r1, r3
   2de1e:	d00a      	beq.n	2de36 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   2de20:	d9e8      	bls.n	2ddf4 <ccc_load+0xc>
	load->count--;
   2de22:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   2de24:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   2de26:	3801      	subs	r0, #1
	load->entry++;
   2de28:	3304      	adds	r3, #4
	load->count--;
   2de2a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2de2c:	3800      	subs	r0, #0
	load->entry++;
   2de2e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2de30:	bf18      	it	ne
   2de32:	2001      	movne	r0, #1
   2de34:	e7df      	b.n	2ddf6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   2de36:	7922      	ldrb	r2, [r4, #4]
   2de38:	6821      	ldr	r1, [r4, #0]
   2de3a:	4630      	mov	r0, r6
   2de3c:	f019 f8dd 	bl	46ffa <ccc_find_cfg>
	if (!cfg) {
   2de40:	4605      	mov	r5, r0
   2de42:	b980      	cbnz	r0, 2de66 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   2de44:	9000      	str	r0, [sp, #0]
   2de46:	4602      	mov	r2, r0
   2de48:	f8cd 0003 	str.w	r0, [sp, #3]
   2de4c:	4669      	mov	r1, sp
   2de4e:	4630      	mov	r0, r6
   2de50:	f019 f8d3 	bl	46ffa <ccc_find_cfg>
		if (!cfg) {
   2de54:	4605      	mov	r5, r0
   2de56:	2800      	cmp	r0, #0
   2de58:	d0e3      	beq.n	2de22 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   2de5a:	6821      	ldr	r1, [r4, #0]
   2de5c:	3001      	adds	r0, #1
   2de5e:	f018 ff5e 	bl	46d1e <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   2de62:	7923      	ldrb	r3, [r4, #4]
   2de64:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   2de66:	68a3      	ldr	r3, [r4, #8]
   2de68:	885b      	ldrh	r3, [r3, #2]
   2de6a:	812b      	strh	r3, [r5, #8]
   2de6c:	e7d9      	b.n	2de22 <ccc_load+0x3a>
   2de6e:	bf00      	nop
   2de70:	0002dead 	.word	0x0002dead

0002de74 <ccc_save>:
{
   2de74:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2de76:	4b0c      	ldr	r3, [pc, #48]	; (2dea8 <ccc_save+0x34>)
{
   2de78:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2de7a:	6882      	ldr	r2, [r0, #8]
   2de7c:	429a      	cmp	r2, r3
{
   2de7e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   2de80:	d10f      	bne.n	2dea2 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   2de82:	7922      	ldrb	r2, [r4, #4]
   2de84:	6821      	ldr	r1, [r4, #0]
   2de86:	68c0      	ldr	r0, [r0, #12]
   2de88:	f019 f8b7 	bl	46ffa <ccc_find_cfg>
	if (!cfg) {
   2de8c:	b148      	cbz	r0, 2dea2 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   2de8e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   2de92:	8901      	ldrh	r1, [r0, #8]
   2de94:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   2de98:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   2de9a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   2de9c:	8151      	strh	r1, [r2, #10]
	save->count++;
   2de9e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   2dea2:	2001      	movs	r0, #1
   2dea4:	bd38      	pop	{r3, r4, r5, pc}
   2dea6:	bf00      	nop
   2dea8:	0002dead 	.word	0x0002dead

0002deac <bt_gatt_attr_write_ccc>:
{
   2deac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2deb0:	4698      	mov	r8, r3
   2deb2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2deb6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   2deba:	4606      	mov	r6, r0
   2debc:	4689      	mov	r9, r1
	if (offset) {
   2debe:	2b00      	cmp	r3, #0
   2dec0:	d15e      	bne.n	2df80 <bt_gatt_attr_write_ccc+0xd4>
	if (!len || len > sizeof(uint16_t)) {
   2dec2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2dec6:	2b01      	cmp	r3, #1
   2dec8:	d85d      	bhi.n	2df86 <bt_gatt_attr_write_ccc+0xda>
		value = *(uint8_t *)buf;
   2deca:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   2decc:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   2ded0:	4651      	mov	r1, sl
   2ded2:	bf14      	ite	ne
   2ded4:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   2ded6:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   2ded8:	f019 f89e 	bl	47018 <find_ccc_cfg>
	if (!cfg) {
   2dedc:	4605      	mov	r5, r0
   2dede:	b980      	cbnz	r0, 2df02 <bt_gatt_attr_write_ccc+0x56>
		if (!value) {
   2dee0:	b917      	cbnz	r7, 2dee8 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   2dee2:	4640      	mov	r0, r8
}
   2dee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2dee8:	4651      	mov	r1, sl
   2deea:	f019 f895 	bl	47018 <find_ccc_cfg>
		if (!cfg) {
   2deee:	4605      	mov	r5, r0
   2def0:	2800      	cmp	r0, #0
   2def2:	d04b      	beq.n	2df8c <bt_gatt_attr_write_ccc+0xe0>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2def4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2def8:	3001      	adds	r0, #1
   2defa:	f018 ff10 	bl	46d1e <bt_addr_le_copy>
		cfg->id = conn->id;
   2defe:	7a33      	ldrb	r3, [r6, #8]
   2df00:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   2df02:	f8da 3010 	ldr.w	r3, [sl, #16]
   2df06:	bb7b      	cbnz	r3, 2df68 <bt_gatt_attr_write_ccc+0xbc>
	if (cfg->value != ccc->value) {
   2df08:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   2df0c:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   2df0e:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   2df10:	42bb      	cmp	r3, r7
   2df12:	d003      	beq.n	2df1c <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   2df14:	4651      	mov	r1, sl
   2df16:	4648      	mov	r0, r9
   2df18:	f018 fe74 	bl	46c04 <gatt_ccc_changed>
	if (value_changed) {
   2df1c:	42bc      	cmp	r4, r7
   2df1e:	d01d      	beq.n	2df5c <bt_gatt_attr_write_ccc+0xb0>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   2df20:	4630      	mov	r0, r6
   2df22:	f7fe fded 	bl	2cb00 <bt_conn_index>
   2df26:	4c1b      	ldr	r4, [pc, #108]	; (2df94 <bt_gatt_attr_write_ccc+0xe8>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2df28:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   2df2c:	429e      	cmp	r6, r3
   2df2e:	d015      	beq.n	2df5c <bt_gatt_attr_write_ccc+0xb0>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2df30:	7a30      	ldrb	r0, [r6, #8]
   2df32:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2df36:	f017 fc6a 	bl	4580e <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2df3a:	b178      	cbz	r0, 2df5c <bt_gatt_attr_write_ccc+0xb0>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2df3c:	4630      	mov	r0, r6
   2df3e:	f7fe fddf 	bl	2cb00 <bt_conn_index>
   2df42:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   2df44:	4630      	mov	r0, r6
   2df46:	f017 ff51 	bl	45dec <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2df4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2df4e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2df52:	2300      	movs	r3, #0
   2df54:	f104 0008 	add.w	r0, r4, #8
   2df58:	f013 fee8 	bl	41d2c <k_work_reschedule>
	if (!value) {
   2df5c:	2f00      	cmp	r7, #0
   2df5e:	d1c0      	bne.n	2dee2 <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   2df60:	4628      	mov	r0, r5
   2df62:	f018 ff25 	bl	46db0 <clear_ccc_cfg>
   2df66:	e7bc      	b.n	2dee2 <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2df68:	463a      	mov	r2, r7
   2df6a:	4649      	mov	r1, r9
   2df6c:	4630      	mov	r0, r6
   2df6e:	4798      	blx	r3
		if (write < 0) {
   2df70:	2800      	cmp	r0, #0
   2df72:	dbb7      	blt.n	2dee4 <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   2df74:	1e44      	subs	r4, r0, #1
   2df76:	2c01      	cmp	r4, #1
   2df78:	d9c6      	bls.n	2df08 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2df7a:	f06f 000d 	mvn.w	r0, #13
   2df7e:	e7b1      	b.n	2dee4 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2df80:	f06f 0006 	mvn.w	r0, #6
   2df84:	e7ae      	b.n	2dee4 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2df86:	f06f 000c 	mvn.w	r0, #12
   2df8a:	e7ab      	b.n	2dee4 <bt_gatt_attr_write_ccc+0x38>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2df8c:	f06f 0010 	mvn.w	r0, #16
   2df90:	e7a8      	b.n	2dee4 <bt_gatt_attr_write_ccc+0x38>
   2df92:	bf00      	nop
   2df94:	200011d0 	.word	0x200011d0

0002df98 <find_sc_cfg>:
{
   2df98:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   2df9a:	4c0e      	ldr	r4, [pc, #56]	; (2dfd4 <find_sc_cfg+0x3c>)
   2df9c:	7823      	ldrb	r3, [r4, #0]
   2df9e:	4283      	cmp	r3, r0
{
   2dfa0:	4605      	mov	r5, r0
   2dfa2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   2dfa4:	d00a      	beq.n	2dfbc <find_sc_cfg+0x24>
   2dfa6:	7b23      	ldrb	r3, [r4, #12]
   2dfa8:	42ab      	cmp	r3, r5
   2dfaa:	d111      	bne.n	2dfd0 <find_sc_cfg+0x38>
   2dfac:	480a      	ldr	r0, [pc, #40]	; (2dfd8 <find_sc_cfg+0x40>)
   2dfae:	2207      	movs	r2, #7
   2dfb0:	4631      	mov	r1, r6
   2dfb2:	f016 ff74 	bl	44e9e <memcmp>
   2dfb6:	b958      	cbnz	r0, 2dfd0 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2dfb8:	2001      	movs	r0, #1
   2dfba:	e005      	b.n	2dfc8 <find_sc_cfg+0x30>
   2dfbc:	2207      	movs	r2, #7
   2dfbe:	1c60      	adds	r0, r4, #1
   2dfc0:	f016 ff6d 	bl	44e9e <memcmp>
		if (id == sc_cfg[i].id &&
   2dfc4:	2800      	cmp	r0, #0
   2dfc6:	d1ee      	bne.n	2dfa6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   2dfc8:	230c      	movs	r3, #12
   2dfca:	fb03 4000 	mla	r0, r3, r0, r4
   2dfce:	e000      	b.n	2dfd2 <find_sc_cfg+0x3a>
	return NULL;
   2dfd0:	2000      	movs	r0, #0
}
   2dfd2:	bd70      	pop	{r4, r5, r6, pc}
   2dfd4:	20003b30 	.word	0x20003b30
   2dfd8:	20003b3d 	.word	0x20003b3d

0002dfdc <bt_gatt_clear_sc>:
{
   2dfdc:	b570      	push	{r4, r5, r6, lr}
   2dfde:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2dfe0:	f7ff ffda 	bl	2df98 <find_sc_cfg>
	if (!cfg) {
   2dfe4:	4604      	mov	r4, r0
   2dfe6:	b1b8      	cbz	r0, 2e018 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   2dfe8:	4605      	mov	r5, r0
   2dfea:	f815 2b01 	ldrb.w	r2, [r5], #1
   2dfee:	b1b2      	cbz	r2, 2e01e <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2dff0:	ae02      	add	r6, sp, #8
   2dff2:	2104      	movs	r1, #4
   2dff4:	4630      	mov	r0, r6
   2dff6:	f014 fdd8 	bl	42baa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   2dffa:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   2dffc:	4a09      	ldr	r2, [pc, #36]	; (2e024 <bt_gatt_clear_sc+0x48>)
   2dffe:	2124      	movs	r1, #36	; 0x24
   2e000:	462b      	mov	r3, r5
   2e002:	a803      	add	r0, sp, #12
   2e004:	f7fc fee8 	bl	2add8 <bt_settings_encode_key>
		err = settings_delete(key);
   2e008:	a803      	add	r0, sp, #12
   2e00a:	f015 fc67 	bl	438dc <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   2e00e:	220c      	movs	r2, #12
   2e010:	2100      	movs	r1, #0
   2e012:	4620      	mov	r0, r4
   2e014:	f016 ff5f 	bl	44ed6 <memset>
}
   2e018:	2000      	movs	r0, #0
   2e01a:	b00c      	add	sp, #48	; 0x30
   2e01c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   2e01e:	9200      	str	r2, [sp, #0]
   2e020:	e7ec      	b.n	2dffc <bt_gatt_clear_sc+0x20>
   2e022:	bf00      	nop
   2e024:	0004b912 	.word	0x0004b912

0002e028 <disconnected_cb>:
{
   2e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e02c:	4b1f      	ldr	r3, [pc, #124]	; (2e0ac <disconnected_cb+0x84>)
{
   2e02e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e030:	6882      	ldr	r2, [r0, #8]
   2e032:	429a      	cmp	r2, r3
{
   2e034:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e036:	d102      	bne.n	2e03e <disconnected_cb+0x16>
	ccc = attr->user_data;
   2e038:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   2e03a:	8963      	ldrh	r3, [r4, #10]
   2e03c:	b9c3      	cbnz	r3, 2e070 <disconnected_cb+0x48>
}
   2e03e:	2001      	movs	r0, #1
   2e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e044:	f105 0888 	add.w	r8, r5, #136	; 0x88
   2e048:	7a28      	ldrb	r0, [r5, #8]
   2e04a:	4641      	mov	r1, r8
   2e04c:	f017 fbdf 	bl	4580e <bt_addr_le_is_bonded>
   2e050:	b948      	cbnz	r0, 2e066 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   2e052:	4b17      	ldr	r3, [pc, #92]	; (2e0b0 <disconnected_cb+0x88>)
   2e054:	429c      	cmp	r4, r3
   2e056:	d102      	bne.n	2e05e <disconnected_cb+0x36>
					sc_clear(conn);
   2e058:	4628      	mov	r0, r5
   2e05a:	f019 f84b 	bl	470f4 <sc_clear>
				clear_ccc_cfg(cfg);
   2e05e:	4620      	mov	r0, r4
   2e060:	f018 fea6 	bl	46db0 <clear_ccc_cfg>
	if (!value_used) {
   2e064:	e019      	b.n	2e09a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2e066:	4641      	mov	r1, r8
   2e068:	4638      	mov	r0, r7
   2e06a:	f018 fe58 	bl	46d1e <bt_addr_le_copy>
	if (!value_used) {
   2e06e:	e014      	b.n	2e09a <disconnected_cb+0x72>
		if (!cfg->value) {
   2e070:	8923      	ldrh	r3, [r4, #8]
   2e072:	b193      	cbz	r3, 2e09a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2e074:	4627      	mov	r7, r4
   2e076:	4628      	mov	r0, r5
   2e078:	f817 1b01 	ldrb.w	r1, [r7], #1
   2e07c:	463a      	mov	r2, r7
   2e07e:	f017 ff6a 	bl	45f56 <bt_conn_is_peer_addr_le>
   2e082:	2800      	cmp	r0, #0
   2e084:	d1de      	bne.n	2e044 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2e086:	7820      	ldrb	r0, [r4, #0]
   2e088:	4639      	mov	r1, r7
   2e08a:	f7fe fe6d 	bl	2cd68 <bt_conn_lookup_addr_le>
			if (tmp) {
   2e08e:	b120      	cbz	r0, 2e09a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   2e090:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   2e092:	f017 fec6 	bl	45e22 <bt_conn_unref>
	if (!value_used) {
   2e096:	2d07      	cmp	r5, #7
   2e098:	d0d1      	beq.n	2e03e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   2e09a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   2e09c:	2100      	movs	r1, #0
   2e09e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   2e0a0:	2b00      	cmp	r3, #0
   2e0a2:	d0cc      	beq.n	2e03e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   2e0a4:	4630      	mov	r0, r6
   2e0a6:	4798      	blx	r3
   2e0a8:	e7c9      	b.n	2e03e <disconnected_cb+0x16>
   2e0aa:	bf00      	nop
   2e0ac:	0002dead 	.word	0x0002dead
   2e0b0:	2000041c 	.word	0x2000041c

0002e0b4 <sc_indicate_rsp>:
{
   2e0b4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e0b6:	f06f 0102 	mvn.w	r1, #2
   2e0ba:	4604      	mov	r4, r0
   2e0bc:	480d      	ldr	r0, [pc, #52]	; (2e0f4 <sc_indicate_rsp+0x40>)
   2e0be:	f018 fe85 	bl	46dcc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e0c2:	480c      	ldr	r0, [pc, #48]	; (2e0f4 <sc_indicate_rsp+0x40>)
   2e0c4:	f018 fdc1 	bl	46c4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2e0c8:	07c2      	lsls	r2, r0, #31
   2e0ca:	d504      	bpl.n	2e0d6 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2e0cc:	480a      	ldr	r0, [pc, #40]	; (2e0f8 <sc_indicate_rsp+0x44>)
   2e0ce:	2200      	movs	r2, #0
   2e0d0:	2300      	movs	r3, #0
   2e0d2:	f013 fe2b 	bl	41d2c <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   2e0d6:	4620      	mov	r0, r4
   2e0d8:	f7ff fde6 	bl	2dca8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e0dc:	b140      	cbz	r0, 2e0f0 <sc_indicate_rsp+0x3c>
   2e0de:	7a03      	ldrb	r3, [r0, #8]
   2e0e0:	07db      	lsls	r3, r3, #31
   2e0e2:	d505      	bpl.n	2e0f0 <sc_indicate_rsp+0x3c>
}
   2e0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e0e8:	2101      	movs	r1, #1
   2e0ea:	300c      	adds	r0, #12
   2e0ec:	f018 be08 	b.w	46d00 <atomic_or>
   2e0f0:	bd10      	pop	{r4, pc}
   2e0f2:	bf00      	nop
   2e0f4:	20001258 	.word	0x20001258
   2e0f8:	20001228 	.word	0x20001228

0002e0fc <bt_gatt_init>:
{
   2e0fc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e0fe:	4b24      	ldr	r3, [pc, #144]	; (2e190 <bt_gatt_init+0x94>)
   2e100:	f3bf 8f5b 	dmb	ish
   2e104:	2201      	movs	r2, #1
   2e106:	e853 1f00 	ldrex	r1, [r3]
   2e10a:	2900      	cmp	r1, #0
   2e10c:	d103      	bne.n	2e116 <bt_gatt_init+0x1a>
   2e10e:	e843 2000 	strex	r0, r2, [r3]
   2e112:	2800      	cmp	r0, #0
   2e114:	d1f7      	bne.n	2e106 <bt_gatt_init+0xa>
   2e116:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   2e11a:	d138      	bne.n	2e18e <bt_gatt_init+0x92>
   2e11c:	f3bf 8f5b 	dmb	ish
   2e120:	4b1c      	ldr	r3, [pc, #112]	; (2e194 <bt_gatt_init+0x98>)
   2e122:	e853 1f00 	ldrex	r1, [r3]
   2e126:	2900      	cmp	r1, #0
   2e128:	d103      	bne.n	2e132 <bt_gatt_init+0x36>
   2e12a:	e843 2000 	strex	r0, r2, [r3]
   2e12e:	2800      	cmp	r0, #0
   2e130:	d1f7      	bne.n	2e122 <bt_gatt_init+0x26>
   2e132:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   2e136:	d108      	bne.n	2e14a <bt_gatt_init+0x4e>
   2e138:	4917      	ldr	r1, [pc, #92]	; (2e198 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2e13a:	4a18      	ldr	r2, [pc, #96]	; (2e19c <bt_gatt_init+0xa0>)
   2e13c:	880b      	ldrh	r3, [r1, #0]
   2e13e:	4c18      	ldr	r4, [pc, #96]	; (2e1a0 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   2e140:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2e142:	42a2      	cmp	r2, r4
   2e144:	d31d      	bcc.n	2e182 <bt_gatt_init+0x86>
   2e146:	b100      	cbz	r0, 2e14a <bt_gatt_init+0x4e>
   2e148:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   2e14a:	4b16      	ldr	r3, [pc, #88]	; (2e1a4 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   2e14c:	4916      	ldr	r1, [pc, #88]	; (2e1a8 <bt_gatt_init+0xac>)
   2e14e:	4817      	ldr	r0, [pc, #92]	; (2e1ac <bt_gatt_init+0xb0>)
   2e150:	2200      	movs	r2, #0
	list->tail = NULL;
   2e152:	e9c3 2200 	strd	r2, r2, [r3]
   2e156:	f01a ff4b 	bl	48ff0 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   2e15a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2e15e:	2300      	movs	r3, #0
   2e160:	4812      	ldr	r0, [pc, #72]	; (2e1ac <bt_gatt_init+0xb0>)
   2e162:	f013 fdaf 	bl	41cc4 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   2e166:	4912      	ldr	r1, [pc, #72]	; (2e1b0 <bt_gatt_init+0xb4>)
   2e168:	4812      	ldr	r0, [pc, #72]	; (2e1b4 <bt_gatt_init+0xb8>)
   2e16a:	f01a ff41 	bl	48ff0 <k_work_init_delayable>
   2e16e:	2102      	movs	r1, #2
   2e170:	4811      	ldr	r0, [pc, #68]	; (2e1b8 <bt_gatt_init+0xbc>)
   2e172:	f018 fdc5 	bl	46d00 <atomic_or>
}
   2e176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   2e17a:	4910      	ldr	r1, [pc, #64]	; (2e1bc <bt_gatt_init+0xc0>)
   2e17c:	4810      	ldr	r0, [pc, #64]	; (2e1c0 <bt_gatt_init+0xc4>)
   2e17e:	f01a bf37 	b.w	48ff0 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   2e182:	6850      	ldr	r0, [r2, #4]
   2e184:	4403      	add	r3, r0
   2e186:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2e188:	3208      	adds	r2, #8
   2e18a:	2001      	movs	r0, #1
   2e18c:	e7d9      	b.n	2e142 <bt_gatt_init+0x46>
}
   2e18e:	bd10      	pop	{r4, pc}
   2e190:	20001d28 	.word	0x20001d28
   2e194:	20001d44 	.word	0x20001d44
   2e198:	20003b2e 	.word	0x20003b2e
   2e19c:	00049a8c 	.word	0x00049a8c
   2e1a0:	00049ab4 	.word	0x00049ab4
   2e1a4:	20001d00 	.word	0x20001d00
   2e1a8:	0002e34d 	.word	0x0002e34d
   2e1ac:	20001178 	.word	0x20001178
   2e1b0:	0002e635 	.word	0x0002e635
   2e1b4:	20001228 	.word	0x20001228
   2e1b8:	20001258 	.word	0x20001258
   2e1bc:	00047403 	.word	0x00047403
   2e1c0:	200011d8 	.word	0x200011d8

0002e1c4 <bt_gatt_attr_get_handle>:
{
   2e1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   2e1c8:	4603      	mov	r3, r0
   2e1ca:	b148      	cbz	r0, 2e1e0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   2e1cc:	8a00      	ldrh	r0, [r0, #16]
   2e1ce:	b938      	cbnz	r0, 2e1e0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e1d0:	4912      	ldr	r1, [pc, #72]	; (2e21c <bt_gatt_attr_get_handle+0x58>)
   2e1d2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 2e220 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   2e1d6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2e1d8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e1dc:	4571      	cmp	r1, lr
   2e1de:	d301      	bcc.n	2e1e4 <bt_gatt_attr_get_handle+0x20>
}
   2e1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2e1e4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   2e1e8:	42bb      	cmp	r3, r7
   2e1ea:	d304      	bcc.n	2e1f6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2e1ec:	fb0c 7206 	mla	r2, ip, r6, r7
   2e1f0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   2e1f2:	4293      	cmp	r3, r2
   2e1f4:	d90e      	bls.n	2e214 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   2e1f6:	19a2      	adds	r2, r4, r6
   2e1f8:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e1fa:	3108      	adds	r1, #8
   2e1fc:	4614      	mov	r4, r2
   2e1fe:	e7ed      	b.n	2e1dc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   2e200:	fb0c 7805 	mla	r8, ip, r5, r7
   2e204:	4543      	cmp	r3, r8
   2e206:	d007      	beq.n	2e218 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   2e208:	3501      	adds	r5, #1
   2e20a:	1962      	adds	r2, r4, r5
   2e20c:	42b5      	cmp	r5, r6
   2e20e:	b292      	uxth	r2, r2
   2e210:	d1f6      	bne.n	2e200 <bt_gatt_attr_get_handle+0x3c>
   2e212:	e7f2      	b.n	2e1fa <bt_gatt_attr_get_handle+0x36>
   2e214:	2500      	movs	r5, #0
   2e216:	e7f8      	b.n	2e20a <bt_gatt_attr_get_handle+0x46>
   2e218:	4610      	mov	r0, r2
   2e21a:	e7e1      	b.n	2e1e0 <bt_gatt_attr_get_handle+0x1c>
   2e21c:	00049a8c 	.word	0x00049a8c
   2e220:	00049ab4 	.word	0x00049ab4

0002e224 <bt_gatt_foreach_attr_type>:
{
   2e224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e228:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   2e22c:	9100      	str	r1, [sp, #0]
   2e22e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   2e230:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e234:	2d00      	cmp	r5, #0
   2e236:	bf08      	it	eq
   2e238:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   2e23a:	4b24      	ldr	r3, [pc, #144]	; (2e2cc <bt_gatt_foreach_attr_type+0xa8>)
   2e23c:	881b      	ldrh	r3, [r3, #0]
   2e23e:	4283      	cmp	r3, r0
{
   2e240:	4607      	mov	r7, r0
   2e242:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   2e244:	d23c      	bcs.n	2e2c0 <bt_gatt_foreach_attr_type+0x9c>
}
   2e246:	b003      	add	sp, #12
   2e248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   2e24c:	6873      	ldr	r3, [r6, #4]
   2e24e:	4423      	add	r3, r4
   2e250:	42bb      	cmp	r3, r7
   2e252:	d232      	bcs.n	2e2ba <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   2e254:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e256:	3608      	adds	r6, #8
   2e258:	4b1d      	ldr	r3, [pc, #116]	; (2e2d0 <bt_gatt_foreach_attr_type+0xac>)
   2e25a:	429e      	cmp	r6, r3
   2e25c:	d3f6      	bcc.n	2e24c <bt_gatt_foreach_attr_type+0x28>
   2e25e:	e7f2      	b.n	2e246 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e260:	5889      	ldr	r1, [r1, r2]
   2e262:	9301      	str	r3, [sp, #4]
   2e264:	4640      	mov	r0, r8
   2e266:	f016 ff19 	bl	4509c <bt_uuid_cmp>
   2e26a:	9b01      	ldr	r3, [sp, #4]
   2e26c:	b190      	cbz	r0, 2e294 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2e26e:	3401      	adds	r4, #1
   2e270:	f10a 0a01 	add.w	sl, sl, #1
   2e274:	b2a4      	uxth	r4, r4
   2e276:	6873      	ldr	r3, [r6, #4]
   2e278:	4553      	cmp	r3, sl
   2e27a:	d9ec      	bls.n	2e256 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   2e27c:	9b00      	ldr	r3, [sp, #0]
   2e27e:	429c      	cmp	r4, r3
   2e280:	d8e1      	bhi.n	2e246 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   2e282:	42bc      	cmp	r4, r7
   2e284:	d3f3      	bcc.n	2e26e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e286:	6831      	ldr	r1, [r6, #0]
   2e288:	fb0b f20a 	mul.w	r2, fp, sl
   2e28c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e28e:	f1b8 0f00 	cmp.w	r8, #0
   2e292:	d1e5      	bne.n	2e260 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   2e294:	f1b9 0f00 	cmp.w	r9, #0
   2e298:	d10b      	bne.n	2e2b2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   2e29a:	3d01      	subs	r5, #1
   2e29c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   2e29e:	4618      	mov	r0, r3
   2e2a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e2a4:	4621      	mov	r1, r4
   2e2a6:	4798      	blx	r3
	if (!*num_matches) {
   2e2a8:	2d00      	cmp	r5, #0
   2e2aa:	d0cc      	beq.n	2e246 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e2ac:	2800      	cmp	r0, #0
   2e2ae:	d1de      	bne.n	2e26e <bt_gatt_foreach_attr_type+0x4a>
   2e2b0:	e7c9      	b.n	2e246 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   2e2b2:	68da      	ldr	r2, [r3, #12]
   2e2b4:	4591      	cmp	r9, r2
   2e2b6:	d1da      	bne.n	2e26e <bt_gatt_foreach_attr_type+0x4a>
   2e2b8:	e7ef      	b.n	2e29a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2e2ba:	f04f 0a00 	mov.w	sl, #0
   2e2be:	e7da      	b.n	2e276 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e2c0:	4e04      	ldr	r6, [pc, #16]	; (2e2d4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   2e2c2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e2c4:	f04f 0b14 	mov.w	fp, #20
   2e2c8:	e7c6      	b.n	2e258 <bt_gatt_foreach_attr_type+0x34>
   2e2ca:	bf00      	nop
   2e2cc:	20003b2e 	.word	0x20003b2e
   2e2d0:	00049ab4 	.word	0x00049ab4
   2e2d4:	00049a8c 	.word	0x00049a8c

0002e2d8 <db_hash_gen>:
{
   2e2d8:	b530      	push	{r4, r5, lr}
   2e2da:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   2e2dc:	2300      	movs	r3, #0
{
   2e2de:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e2e0:	aa1c      	add	r2, sp, #112	; 0x70
   2e2e2:	4669      	mov	r1, sp
   2e2e4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   2e2e6:	e9cd 3300 	strd	r3, r3, [sp]
   2e2ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e2ee:	f016 fc53 	bl	44b98 <tc_cmac_setup>
   2e2f2:	b308      	cbz	r0, 2e338 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   2e2f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e2f8:	2001      	movs	r0, #1
   2e2fa:	4a10      	ldr	r2, [pc, #64]	; (2e33c <db_hash_gen+0x64>)
   2e2fc:	ab04      	add	r3, sp, #16
   2e2fe:	f018 fff0 	bl	472e2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2e302:	480f      	ldr	r0, [pc, #60]	; (2e340 <db_hash_gen+0x68>)
   2e304:	a904      	add	r1, sp, #16
   2e306:	f016 fcdd 	bl	44cc4 <tc_cmac_final>
   2e30a:	b1a8      	cbz	r0, 2e338 <db_hash_gen+0x60>
   2e30c:	4b0c      	ldr	r3, [pc, #48]	; (2e340 <db_hash_gen+0x68>)
   2e30e:	2208      	movs	r2, #8
   2e310:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e314:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e316:	780d      	ldrb	r5, [r1, #0]
   2e318:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   2e31c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e31e:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   2e322:	d1f7      	bne.n	2e314 <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2e324:	b124      	cbz	r4, 2e330 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e326:	4906      	ldr	r1, [pc, #24]	; (2e340 <db_hash_gen+0x68>)
   2e328:	4806      	ldr	r0, [pc, #24]	; (2e344 <db_hash_gen+0x6c>)
   2e32a:	2210      	movs	r2, #16
   2e32c:	f7fb fb86 	bl	29a3c <settings_save_one>
   2e330:	4805      	ldr	r0, [pc, #20]	; (2e348 <db_hash_gen+0x70>)
   2e332:	2104      	movs	r1, #4
   2e334:	f018 fce4 	bl	46d00 <atomic_or>
}
   2e338:	b049      	add	sp, #292	; 0x124
   2e33a:	bd30      	pop	{r4, r5, pc}
   2e33c:	00046c57 	.word	0x00046c57
   2e340:	20001158 	.word	0x20001158
   2e344:	0004b8fa 	.word	0x0004b8fa
   2e348:	20001258 	.word	0x20001258

0002e34c <db_hash_process>:
{
   2e34c:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e34e:	4829      	ldr	r0, [pc, #164]	; (2e3f4 <db_hash_process+0xa8>)
   2e350:	f06f 0108 	mvn.w	r1, #8
   2e354:	f018 fd3a 	bl	46dcc <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   2e358:	0700      	lsls	r0, r0, #28
   2e35a:	d545      	bpl.n	2e3e8 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e35c:	4825      	ldr	r0, [pc, #148]	; (2e3f4 <db_hash_process+0xa8>)
   2e35e:	f018 fc74 	bl	46c4a <atomic_get>
   2e362:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e364:	0759      	lsls	r1, r3, #29
   2e366:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2e36a:	d401      	bmi.n	2e370 <db_hash_process+0x24>
			db_hash_gen(false);
   2e36c:	f7ff ffb4 	bl	2e2d8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   2e370:	4921      	ldr	r1, [pc, #132]	; (2e3f8 <db_hash_process+0xac>)
   2e372:	2210      	movs	r2, #16
   2e374:	1888      	adds	r0, r1, r2
   2e376:	f016 fd92 	bl	44e9e <memcmp>
   2e37a:	b948      	cbnz	r0, 2e390 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   2e37c:	481f      	ldr	r0, [pc, #124]	; (2e3fc <db_hash_process+0xb0>)
   2e37e:	f01a fe43 	bl	49008 <k_work_cancel_delayable>
}
   2e382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e386:	481b      	ldr	r0, [pc, #108]	; (2e3f4 <db_hash_process+0xa8>)
   2e388:	f06f 0101 	mvn.w	r1, #1
   2e38c:	f018 bd1e 	b.w	46dcc <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e390:	4c1b      	ldr	r4, [pc, #108]	; (2e400 <db_hash_process+0xb4>)
   2e392:	2101      	movs	r1, #1
   2e394:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2e398:	f018 fcb2 	bl	46d00 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2e39c:	07c2      	lsls	r2, r0, #31
   2e39e:	d413      	bmi.n	2e3c8 <db_hash_process+0x7c>
		gatt_sc.start = start;
   2e3a0:	4b18      	ldr	r3, [pc, #96]	; (2e404 <db_hash_process+0xb8>)
   2e3a2:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e3a4:	4813      	ldr	r0, [pc, #76]	; (2e3f4 <db_hash_process+0xa8>)
   2e3a6:	f018 fc50 	bl	46c4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   2e3aa:	0783      	lsls	r3, r0, #30
   2e3ac:	d405      	bmi.n	2e3ba <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   2e3ae:	4813      	ldr	r0, [pc, #76]	; (2e3fc <db_hash_process+0xb0>)
   2e3b0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2e3b4:	2300      	movs	r3, #0
   2e3b6:	f013 fcb9 	bl	41d2c <k_work_reschedule>
}
   2e3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e3be:	490e      	ldr	r1, [pc, #56]	; (2e3f8 <db_hash_process+0xac>)
   2e3c0:	4811      	ldr	r0, [pc, #68]	; (2e408 <db_hash_process+0xbc>)
   2e3c2:	2210      	movs	r2, #16
   2e3c4:	f7fb bb3a 	b.w	29a3c <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   2e3c8:	8b23      	ldrh	r3, [r4, #24]
   2e3ca:	8b62      	ldrh	r2, [r4, #26]
   2e3cc:	2b01      	cmp	r3, #1
   2e3ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e3d2:	d805      	bhi.n	2e3e0 <db_hash_process+0x94>
   2e3d4:	429a      	cmp	r2, r3
   2e3d6:	d0f0      	beq.n	2e3ba <db_hash_process+0x6e>
		*end = new_end;
   2e3d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e3dc:	8363      	strh	r3, [r4, #26]
   2e3de:	e7e1      	b.n	2e3a4 <db_hash_process+0x58>
	if (*end < new_end) {
   2e3e0:	429a      	cmp	r2, r3
		*start = new_start;
   2e3e2:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   2e3e4:	d0de      	beq.n	2e3a4 <db_hash_process+0x58>
   2e3e6:	e7f7      	b.n	2e3d8 <db_hash_process+0x8c>
}
   2e3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   2e3ec:	2001      	movs	r0, #1
   2e3ee:	f7ff bf73 	b.w	2e2d8 <db_hash_gen>
   2e3f2:	bf00      	nop
   2e3f4:	20001258 	.word	0x20001258
   2e3f8:	20001158 	.word	0x20001158
   2e3fc:	20001228 	.word	0x20001228
   2e400:	20001208 	.word	0x20001208
   2e404:	ffff0001 	.word	0xffff0001
   2e408:	0004b8fa 	.word	0x0004b8fa

0002e40c <ccc_set_direct>:
{
   2e40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e410:	b0b8      	sub	sp, #224	; 0xe0
   2e412:	460f      	mov	r7, r1
   2e414:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e416:	4922      	ldr	r1, [pc, #136]	; (2e4a0 <ccc_set_direct+0x94>)
   2e418:	983e      	ldr	r0, [sp, #248]	; 0xf8
   2e41a:	466a      	mov	r2, sp
{
   2e41c:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e41e:	f015 fa61 	bl	438e4 <settings_name_steq>
   2e422:	2800      	cmp	r0, #0
   2e424:	d038      	beq.n	2e498 <ccc_set_direct+0x8c>
		return ccc_set(name, len, read_cb, cb_arg);
   2e426:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   2e428:	a901      	add	r1, sp, #4
   2e42a:	4620      	mov	r0, r4
   2e42c:	f015 fa7d 	bl	4392a <settings_name_next>
		if (!name) {
   2e430:	b164      	cbz	r4, 2e44c <ccc_set_direct+0x40>
		} else if (!next) {
   2e432:	9801      	ldr	r0, [sp, #4]
   2e434:	b970      	cbnz	r0, 2e454 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   2e436:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e43a:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   2e43c:	4620      	mov	r0, r4
   2e43e:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e440:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   2e444:	f016 fe04 	bl	45050 <bt_settings_decode_key>
		if (err) {
   2e448:	4604      	mov	r4, r0
   2e44a:	b150      	cbz	r0, 2e462 <ccc_set_direct+0x56>
			return -EINVAL;
   2e44c:	f06f 0015 	mvn.w	r0, #21
   2e450:	4604      	mov	r4, r0
   2e452:	e01a      	b.n	2e48a <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   2e454:	220a      	movs	r2, #10
   2e456:	2100      	movs	r1, #0
   2e458:	f016 fc7a 	bl	44d50 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   2e45c:	2800      	cmp	r0, #0
   2e45e:	d0ea      	beq.n	2e436 <ccc_set_direct+0x2a>
   2e460:	e7f4      	b.n	2e44c <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   2e462:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   2e466:	b1a7      	cbz	r7, 2e492 <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   2e468:	af08      	add	r7, sp, #32
   2e46a:	22c0      	movs	r2, #192	; 0xc0
   2e46c:	4639      	mov	r1, r7
   2e46e:	4630      	mov	r0, r6
   2e470:	47a8      	blx	r5
			if (len < 0) {
   2e472:	2800      	cmp	r0, #0
   2e474:	dbec      	blt.n	2e450 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   2e476:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
   2e478:	9706      	str	r7, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   2e47a:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   2e47c:	4a09      	ldr	r2, [pc, #36]	; (2e4a4 <ccc_set_direct+0x98>)
   2e47e:	ab04      	add	r3, sp, #16
   2e480:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e484:	2001      	movs	r0, #1
   2e486:	f018 ff2c 	bl	472e2 <bt_gatt_foreach_attr>
}
   2e48a:	4620      	mov	r0, r4
   2e48c:	b038      	add	sp, #224	; 0xe0
   2e48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.count = 0;
   2e492:	e9cd 0006 	strd	r0, r0, [sp, #24]
   2e496:	e7f1      	b.n	2e47c <ccc_set_direct+0x70>
			return -EINVAL;
   2e498:	f06f 0415 	mvn.w	r4, #21
   2e49c:	e7f5      	b.n	2e48a <ccc_set_direct+0x7e>
   2e49e:	bf00      	nop
   2e4a0:	0004b902 	.word	0x0004b902
   2e4a4:	0002dde9 	.word	0x0002dde9

0002e4a8 <gatt_indicate>:
{
   2e4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e4ac:	4615      	mov	r5, r2
   2e4ae:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2e4b0:	2214      	movs	r2, #20
   2e4b2:	6869      	ldr	r1, [r5, #4]
{
   2e4b4:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   2e4b6:	f018 ff1f 	bl	472f8 <bt_gatt_check_perm>
   2e4ba:	4607      	mov	r7, r0
   2e4bc:	2800      	cmp	r0, #0
   2e4be:	d13c      	bne.n	2e53a <gatt_indicate+0x92>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e4c0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2e4c4:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   2e4c6:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e4c8:	f7ff fb22 	bl	2db10 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   2e4cc:	3602      	adds	r6, #2
	if (!req) {
   2e4ce:	4604      	mov	r4, r0
   2e4d0:	b920      	cbnz	r0, 2e4dc <gatt_indicate+0x34>
		return -ENOMEM;
   2e4d2:	f06f 050b 	mvn.w	r5, #11
}
   2e4d6:	4628      	mov	r0, r5
   2e4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   2e4dc:	4b18      	ldr	r3, [pc, #96]	; (2e540 <gatt_indicate+0x98>)
	req->len = len;
   2e4de:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   2e4e0:	211d      	movs	r1, #29
   2e4e2:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   2e4e4:	60c7      	str	r7, [r0, #12]
	req->func = func;
   2e4e6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   2e4e8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   2e4ea:	4632      	mov	r2, r6
   2e4ec:	4640      	mov	r0, r8
   2e4ee:	f018 fa70 	bl	469d2 <bt_att_create_pdu>
	if (!buf) {
   2e4f2:	4606      	mov	r6, r0
   2e4f4:	b918      	cbnz	r0, 2e4fe <gatt_indicate+0x56>
		bt_att_req_free(req);
   2e4f6:	4620      	mov	r0, r4
   2e4f8:	f7ff fb2c 	bl	2db54 <bt_att_req_free>
   2e4fc:	e7e9      	b.n	2e4d2 <gatt_indicate+0x2a>
	return net_buf_simple_add(&buf->b, len);
   2e4fe:	f100 0a08 	add.w	sl, r0, #8
   2e502:	2102      	movs	r1, #2
   2e504:	4650      	mov	r0, sl
   2e506:	f019 fc7d 	bl	47e04 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2e50a:	4607      	mov	r7, r0
   2e50c:	8aa9      	ldrh	r1, [r5, #20]
   2e50e:	f827 9b02 	strh.w	r9, [r7], #2
   2e512:	4650      	mov	r0, sl
   2e514:	f019 fc76 	bl	47e04 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2e518:	8aaa      	ldrh	r2, [r5, #20]
   2e51a:	6929      	ldr	r1, [r5, #16]
   2e51c:	4638      	mov	r0, r7
   2e51e:	f016 fccf 	bl	44ec0 <memcpy>
	req->buf = buf;
   2e522:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   2e524:	4621      	mov	r1, r4
   2e526:	4640      	mov	r0, r8
   2e528:	f018 fb57 	bl	46bda <bt_att_req_send>
	if (err) {
   2e52c:	4605      	mov	r5, r0
   2e52e:	2800      	cmp	r0, #0
   2e530:	d0d1      	beq.n	2e4d6 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   2e532:	4620      	mov	r0, r4
   2e534:	f7ff fb0e 	bl	2db54 <bt_att_req_free>
   2e538:	e7cd      	b.n	2e4d6 <gatt_indicate+0x2e>
		return -EPERM;
   2e53a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e53e:	e7ca      	b.n	2e4d6 <gatt_indicate+0x2e>
   2e540:	00046c19 	.word	0x00046c19

0002e544 <bt_gatt_indicate>:
{
   2e544:	b530      	push	{r4, r5, lr}
   2e546:	4604      	mov	r4, r0
   2e548:	b08b      	sub	sp, #44	; 0x2c
   2e54a:	4837      	ldr	r0, [pc, #220]	; (2e628 <bt_gatt_indicate+0xe4>)
   2e54c:	f018 fb7d 	bl	46c4a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e550:	0782      	lsls	r2, r0, #30
{
   2e552:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e554:	d561      	bpl.n	2e61a <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e556:	b114      	cbz	r4, 2e55e <bt_gatt_indicate+0x1a>
   2e558:	7b63      	ldrb	r3, [r4, #13]
   2e55a:	2b07      	cmp	r3, #7
   2e55c:	d160      	bne.n	2e620 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   2e55e:	6868      	ldr	r0, [r5, #4]
   2e560:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e562:	f7ff fe2f 	bl	2e1c4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e566:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e568:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e56c:	b33a      	cbz	r2, 2e5be <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e56e:	a905      	add	r1, sp, #20
   2e570:	9102      	str	r1, [sp, #8]
   2e572:	492e      	ldr	r1, [pc, #184]	; (2e62c <bt_gatt_indicate+0xe8>)
   2e574:	9101      	str	r1, [sp, #4]
   2e576:	2101      	movs	r1, #1
	found->attr = NULL;
   2e578:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e57a:	9100      	str	r1, [sp, #0]
   2e57c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e580:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e582:	f7ff fe4f 	bl	2e224 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e586:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e588:	b91b      	cbnz	r3, 2e592 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   2e58a:	f06f 0001 	mvn.w	r0, #1
}
   2e58e:	b00b      	add	sp, #44	; 0x2c
   2e590:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e592:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e594:	9b05      	ldr	r3, [sp, #20]
   2e596:	6818      	ldr	r0, [r3, #0]
   2e598:	2300      	movs	r3, #0
   2e59a:	f88d 3010 	strb.w	r3, [sp, #16]
   2e59e:	a904      	add	r1, sp, #16
   2e5a0:	f642 0303 	movw	r3, #10243	; 0x2803
   2e5a4:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e5a8:	f016 fd78 	bl	4509c <bt_uuid_cmp>
   2e5ac:	b970      	cbnz	r0, 2e5cc <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e5ae:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   2e5b0:	68c3      	ldr	r3, [r0, #12]
   2e5b2:	799b      	ldrb	r3, [r3, #6]
   2e5b4:	069b      	lsls	r3, r3, #26
   2e5b6:	d405      	bmi.n	2e5c4 <bt_gatt_indicate+0x80>
			return -EINVAL;
   2e5b8:	f06f 0015 	mvn.w	r0, #21
   2e5bc:	e7e7      	b.n	2e58e <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   2e5be:	2800      	cmp	r0, #0
   2e5c0:	d1e8      	bne.n	2e594 <bt_gatt_indicate+0x50>
   2e5c2:	e7e2      	b.n	2e58a <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e5c4:	f018 fe3f 	bl	47246 <bt_gatt_attr_value_handle>
   2e5c8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   2e5cc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e5d0:	b13c      	cbz	r4, 2e5e2 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   2e5d2:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   2e5d4:	4601      	mov	r1, r0
		params->_ref = 1;
   2e5d6:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   2e5d8:	462a      	mov	r2, r5
   2e5da:	4620      	mov	r0, r4
   2e5dc:	f7ff ff64 	bl	2e4a8 <gatt_indicate>
   2e5e0:	e7d5      	b.n	2e58e <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   2e5e2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2e5e6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   2e5e8:	2302      	movs	r3, #2
   2e5ea:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e5ee:	f642 1302 	movw	r3, #10498	; 0x2902
   2e5f2:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e5f6:	ab05      	add	r3, sp, #20
   2e5f8:	9302      	str	r3, [sp, #8]
   2e5fa:	4b0d      	ldr	r3, [pc, #52]	; (2e630 <bt_gatt_indicate+0xec>)
   2e5fc:	9301      	str	r3, [sp, #4]
   2e5fe:	2301      	movs	r3, #1
   2e600:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   2e602:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e604:	4623      	mov	r3, r4
   2e606:	aa04      	add	r2, sp, #16
   2e608:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2e60c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e60e:	f88d 4010 	strb.w	r4, [sp, #16]
   2e612:	f7ff fe07 	bl	2e224 <bt_gatt_foreach_attr_type>
	return data.err;
   2e616:	9807      	ldr	r0, [sp, #28]
   2e618:	e7b9      	b.n	2e58e <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   2e61a:	f06f 000a 	mvn.w	r0, #10
   2e61e:	e7b6      	b.n	2e58e <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   2e620:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e624:	e7b3      	b.n	2e58e <bt_gatt_indicate+0x4a>
   2e626:	bf00      	nop
   2e628:	200000cc 	.word	0x200000cc
   2e62c:	00046c3f 	.word	0x00046c3f
   2e630:	0002e781 	.word	0x0002e781

0002e634 <sc_process>:
{
   2e634:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2e636:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   2e63a:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2e63e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   2e642:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   2e644:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   2e648:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2e64c:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e650:	f06f 0101 	mvn.w	r1, #1
   2e654:	4628      	mov	r0, r5
   2e656:	f018 fbb9 	bl	46dcc <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   2e65a:	4b0d      	ldr	r3, [pc, #52]	; (2e690 <sc_process+0x5c>)
   2e65c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   2e660:	4b0c      	ldr	r3, [pc, #48]	; (2e694 <sc_process+0x60>)
   2e662:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   2e666:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   2e668:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   2e66a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   2e66e:	2304      	movs	r3, #4
	sc->start = 0U;
   2e670:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   2e674:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   2e678:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2e67c:	4631      	mov	r1, r6
   2e67e:	f7ff ff61 	bl	2e544 <bt_gatt_indicate>
   2e682:	b918      	cbnz	r0, 2e68c <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e684:	2102      	movs	r1, #2
   2e686:	4628      	mov	r0, r5
   2e688:	f018 fb3a 	bl	46d00 <atomic_or>
}
   2e68c:	b002      	add	sp, #8
   2e68e:	bd70      	pop	{r4, r5, r6, pc}
   2e690:	0004a2c0 	.word	0x0004a2c0
   2e694:	0002e0b5 	.word	0x0002e0b5

0002e698 <bt_gatt_notify_cb>:
{
   2e698:	b530      	push	{r4, r5, lr}
   2e69a:	4604      	mov	r4, r0
   2e69c:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e69e:	4835      	ldr	r0, [pc, #212]	; (2e774 <bt_gatt_notify_cb+0xdc>)
   2e6a0:	f018 fad3 	bl	46c4a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e6a4:	0782      	lsls	r2, r0, #30
{
   2e6a6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e6a8:	d55d      	bpl.n	2e766 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e6aa:	b114      	cbz	r4, 2e6b2 <bt_gatt_notify_cb+0x1a>
   2e6ac:	7b63      	ldrb	r3, [r4, #13]
   2e6ae:	2b07      	cmp	r3, #7
   2e6b0:	d15c      	bne.n	2e76c <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   2e6b2:	6868      	ldr	r0, [r5, #4]
   2e6b4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e6b6:	f7ff fd85 	bl	2e1c4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e6ba:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e6bc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e6c0:	b33a      	cbz	r2, 2e712 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e6c2:	a905      	add	r1, sp, #20
   2e6c4:	9102      	str	r1, [sp, #8]
   2e6c6:	492c      	ldr	r1, [pc, #176]	; (2e778 <bt_gatt_notify_cb+0xe0>)
   2e6c8:	9101      	str	r1, [sp, #4]
   2e6ca:	2101      	movs	r1, #1
	found->attr = NULL;
   2e6cc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e6ce:	9100      	str	r1, [sp, #0]
   2e6d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e6d4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e6d6:	f7ff fda5 	bl	2e224 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e6da:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e6dc:	b91b      	cbnz	r3, 2e6e6 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   2e6de:	f06f 0001 	mvn.w	r0, #1
}
   2e6e2:	b00b      	add	sp, #44	; 0x2c
   2e6e4:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e6e6:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e6e8:	9b05      	ldr	r3, [sp, #20]
   2e6ea:	6818      	ldr	r0, [r3, #0]
   2e6ec:	2300      	movs	r3, #0
   2e6ee:	f88d 3010 	strb.w	r3, [sp, #16]
   2e6f2:	a904      	add	r1, sp, #16
   2e6f4:	f642 0303 	movw	r3, #10243	; 0x2803
   2e6f8:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e6fc:	f016 fcce 	bl	4509c <bt_uuid_cmp>
   2e700:	b970      	cbnz	r0, 2e720 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e702:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2e704:	68c3      	ldr	r3, [r0, #12]
   2e706:	799b      	ldrb	r3, [r3, #6]
   2e708:	06db      	lsls	r3, r3, #27
   2e70a:	d405      	bmi.n	2e718 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   2e70c:	f06f 0015 	mvn.w	r0, #21
   2e710:	e7e7      	b.n	2e6e2 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   2e712:	2800      	cmp	r0, #0
   2e714:	d1e8      	bne.n	2e6e8 <bt_gatt_notify_cb+0x50>
   2e716:	e7e2      	b.n	2e6de <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e718:	f018 fd95 	bl	47246 <bt_gatt_attr_value_handle>
   2e71c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   2e720:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e724:	b12c      	cbz	r4, 2e732 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   2e726:	4601      	mov	r1, r0
   2e728:	462a      	mov	r2, r5
   2e72a:	4620      	mov	r0, r4
   2e72c:	f018 fe0f 	bl	4734e <gatt_notify>
   2e730:	e7d7      	b.n	2e6e2 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e732:	f642 1202 	movw	r2, #10498	; 0x2902
   2e736:	f8ad 2012 	strh.w	r2, [sp, #18]
   2e73a:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   2e73c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e740:	9202      	str	r2, [sp, #8]
   2e742:	4a0e      	ldr	r2, [pc, #56]	; (2e77c <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   2e744:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2e746:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e748:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   2e74c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e750:	aa04      	add	r2, sp, #16
   2e752:	4623      	mov	r3, r4
   2e754:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   2e758:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e75a:	f88d 4010 	strb.w	r4, [sp, #16]
   2e75e:	f7ff fd61 	bl	2e224 <bt_gatt_foreach_attr_type>
	return data.err;
   2e762:	9807      	ldr	r0, [sp, #28]
   2e764:	e7bd      	b.n	2e6e2 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   2e766:	f06f 000a 	mvn.w	r0, #10
   2e76a:	e7ba      	b.n	2e6e2 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   2e76c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e770:	e7b7      	b.n	2e6e2 <bt_gatt_notify_cb+0x4a>
   2e772:	bf00      	nop
   2e774:	200000cc 	.word	0x200000cc
   2e778:	00046c3f 	.word	0x00046c3f
   2e77c:	0002e781 	.word	0x0002e781

0002e780 <notify_cb>:
{
   2e780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e784:	4b37      	ldr	r3, [pc, #220]	; (2e864 <notify_cb+0xe4>)
{
   2e786:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e788:	6882      	ldr	r2, [r0, #8]
   2e78a:	429a      	cmp	r2, r3
{
   2e78c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e78e:	d113      	bne.n	2e7b8 <notify_cb+0x38>
	ccc = attr->user_data;
   2e790:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2e792:	4b35      	ldr	r3, [pc, #212]	; (2e868 <notify_cb+0xe8>)
   2e794:	429f      	cmp	r7, r3
   2e796:	d014      	beq.n	2e7c2 <notify_cb+0x42>
		if (cfg->value != data->type) {
   2e798:	893a      	ldrh	r2, [r7, #8]
   2e79a:	89a3      	ldrh	r3, [r4, #12]
   2e79c:	429a      	cmp	r2, r3
   2e79e:	d10b      	bne.n	2e7b8 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2e7a0:	4639      	mov	r1, r7
   2e7a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   2e7a6:	f7fe fadf 	bl	2cd68 <bt_conn_lookup_addr_le>
		if (!conn) {
   2e7aa:	4605      	mov	r5, r0
   2e7ac:	b120      	cbz	r0, 2e7b8 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   2e7ae:	7b43      	ldrb	r3, [r0, #13]
   2e7b0:	2b07      	cmp	r3, #7
   2e7b2:	d02e      	beq.n	2e812 <notify_cb+0x92>
			bt_conn_unref(conn);
   2e7b4:	f017 fb35 	bl	45e22 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   2e7b8:	2701      	movs	r7, #1
}
   2e7ba:	4638      	mov	r0, r7
   2e7bc:	b003      	add	sp, #12
   2e7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e7c2:	f04f 0800 	mov.w	r8, #0
   2e7c6:	4d29      	ldr	r5, [pc, #164]	; (2e86c <notify_cb+0xec>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2e7c8:	46c1      	mov	r9, r8
   2e7ca:	2207      	movs	r2, #7
   2e7cc:	4669      	mov	r1, sp
   2e7ce:	4628      	mov	r0, r5
   2e7d0:	f8cd 9000 	str.w	r9, [sp]
   2e7d4:	f8cd 9003 	str.w	r9, [sp, #3]
   2e7d8:	f016 fb61 	bl	44e9e <memcmp>
   2e7dc:	b178      	cbz	r0, 2e7fe <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2e7de:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2e7e2:	2207      	movs	r2, #7
   2e7e4:	4629      	mov	r1, r5
   2e7e6:	f7fe fadd 	bl	2cda4 <bt_conn_lookup_state_le>
			if (!conn) {
   2e7ea:	b978      	cbnz	r0, 2e80c <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   2e7ec:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   2e7ee:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   2e7f2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2e7f4:	4629      	mov	r1, r5
   2e7f6:	8853      	ldrh	r3, [r2, #2]
   2e7f8:	8812      	ldrh	r2, [r2, #0]
   2e7fa:	f018 fc47 	bl	4708c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e7fe:	350c      	adds	r5, #12
   2e800:	f1b8 0f00 	cmp.w	r8, #0
   2e804:	d1c8      	bne.n	2e798 <notify_cb+0x18>
   2e806:	f04f 0801 	mov.w	r8, #1
   2e80a:	e7de      	b.n	2e7ca <notify_cb+0x4a>
			bt_conn_unref(conn);
   2e80c:	f017 fb09 	bl	45e22 <bt_conn_unref>
   2e810:	e7f5      	b.n	2e7fe <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2e812:	697b      	ldr	r3, [r7, #20]
   2e814:	b123      	cbz	r3, 2e820 <notify_cb+0xa0>
   2e816:	4631      	mov	r1, r6
   2e818:	4798      	blx	r3
   2e81a:	b908      	cbnz	r0, 2e820 <notify_cb+0xa0>
			bt_conn_unref(conn);
   2e81c:	4628      	mov	r0, r5
   2e81e:	e7c9      	b.n	2e7b4 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   2e820:	2214      	movs	r2, #20
   2e822:	4631      	mov	r1, r6
   2e824:	4628      	mov	r0, r5
   2e826:	f018 fd67 	bl	472f8 <bt_gatt_check_perm>
   2e82a:	4607      	mov	r7, r0
   2e82c:	2800      	cmp	r0, #0
   2e82e:	d1c3      	bne.n	2e7b8 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e830:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   2e832:	88a1      	ldrh	r1, [r4, #4]
   2e834:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e836:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   2e838:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e83a:	d10f      	bne.n	2e85c <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   2e83c:	f7ff fe34 	bl	2e4a8 <gatt_indicate>
			if (err == 0) {
   2e840:	4606      	mov	r6, r0
   2e842:	b918      	cbnz	r0, 2e84c <notify_cb+0xcc>
				data->ind_params->_ref++;
   2e844:	6922      	ldr	r2, [r4, #16]
   2e846:	7d93      	ldrb	r3, [r2, #22]
   2e848:	3301      	adds	r3, #1
   2e84a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2e84c:	4628      	mov	r0, r5
   2e84e:	f017 fae8 	bl	45e22 <bt_conn_unref>
		if (err < 0) {
   2e852:	2e00      	cmp	r6, #0
   2e854:	dbb1      	blt.n	2e7ba <notify_cb+0x3a>
		data->err = 0;
   2e856:	2300      	movs	r3, #0
   2e858:	60a3      	str	r3, [r4, #8]
   2e85a:	e7ad      	b.n	2e7b8 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2e85c:	f018 fd77 	bl	4734e <gatt_notify>
   2e860:	4606      	mov	r6, r0
   2e862:	e7f3      	b.n	2e84c <notify_cb+0xcc>
   2e864:	0002dead 	.word	0x0002dead
   2e868:	2000041c 	.word	0x2000041c
   2e86c:	20003b31 	.word	0x20003b31

0002e870 <update_ccc>:
{
   2e870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e874:	4b2d      	ldr	r3, [pc, #180]	; (2e92c <update_ccc+0xbc>)
{
   2e876:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e878:	6882      	ldr	r2, [r0, #8]
   2e87a:	429a      	cmp	r2, r3
{
   2e87c:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e87e:	d122      	bne.n	2e8c6 <update_ccc+0x56>
	ccc = attr->user_data;
   2e880:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   2e882:	6834      	ldr	r4, [r6, #0]
		if (!cfg->value ||
   2e884:	893b      	ldrh	r3, [r7, #8]
   2e886:	b1f3      	cbz	r3, 2e8c6 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2e888:	463a      	mov	r2, r7
   2e88a:	4620      	mov	r0, r4
   2e88c:	f812 1b01 	ldrb.w	r1, [r2], #1
   2e890:	f017 fb61 	bl	45f56 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2e894:	b1b8      	cbz	r0, 2e8c6 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2e896:	222a      	movs	r2, #42	; 0x2a
   2e898:	4629      	mov	r1, r5
   2e89a:	4620      	mov	r0, r4
   2e89c:	f018 fd2c 	bl	472f8 <bt_gatt_check_perm>
		if (err) {
   2e8a0:	b1a8      	cbz	r0, 2e8ce <update_ccc+0x5e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2e8a2:	2803      	cmp	r0, #3
   2e8a4:	d00f      	beq.n	2e8c6 <update_ccc+0x56>
				sec = BT_SECURITY_L3;
   2e8a6:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   2e8a8:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   2e8aa:	bf14      	ite	ne
   2e8ac:	f04f 0802 	movne.w	r8, #2
   2e8b0:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   2e8b4:	f017 fb4d 	bl	45f52 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e8b8:	4580      	cmp	r8, r0
   2e8ba:	d908      	bls.n	2e8ce <update_ccc+0x5e>
				if (data->sec < sec) {
   2e8bc:	7933      	ldrb	r3, [r6, #4]
   2e8be:	4543      	cmp	r3, r8
   2e8c0:	d201      	bcs.n	2e8c6 <update_ccc+0x56>
					data->sec = sec;
   2e8c2:	f886 8004 	strb.w	r8, [r6, #4]
}
   2e8c6:	2001      	movs	r0, #1
   2e8c8:	b002      	add	sp, #8
   2e8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   2e8ce:	4639      	mov	r1, r7
   2e8d0:	4628      	mov	r0, r5
   2e8d2:	f018 f997 	bl	46c04 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2e8d6:	4b16      	ldr	r3, [pc, #88]	; (2e930 <update_ccc+0xc0>)
   2e8d8:	429f      	cmp	r7, r3
   2e8da:	d1f4      	bne.n	2e8c6 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e8dc:	7a20      	ldrb	r0, [r4, #8]
   2e8de:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2e8e2:	f7ff fb59 	bl	2df98 <find_sc_cfg>
	if (!cfg) {
   2e8e6:	2800      	cmp	r0, #0
   2e8e8:	d0ed      	beq.n	2e8c6 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   2e8ea:	8902      	ldrh	r2, [r0, #8]
   2e8ec:	8943      	ldrh	r3, [r0, #10]
   2e8ee:	ea53 0102 	orrs.w	r1, r3, r2
   2e8f2:	d0e8      	beq.n	2e8c6 <update_ccc+0x56>
	index = bt_conn_index(conn);
   2e8f4:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   2e8f6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   2e8fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   2e8fe:	f7fe f8ff 	bl	2cb00 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2e902:	490c      	ldr	r1, [pc, #48]	; (2e934 <update_ccc+0xc4>)
   2e904:	4a0c      	ldr	r2, [pc, #48]	; (2e938 <update_ccc+0xc8>)
   2e906:	2318      	movs	r3, #24
   2e908:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e90c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2e90e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   2e910:	4a0a      	ldr	r2, [pc, #40]	; (2e93c <update_ccc+0xcc>)
   2e912:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   2e914:	aa01      	add	r2, sp, #4
   2e916:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e918:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
   2e91c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e91e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2e922:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e924:	4620      	mov	r0, r4
   2e926:	f7ff fe0d 	bl	2e544 <bt_gatt_indicate>
		BT_ERR("SC restore indication failed");
   2e92a:	e7cc      	b.n	2e8c6 <update_ccc+0x56>
   2e92c:	0002dead 	.word	0x0002dead
   2e930:	2000041c 	.word	0x2000041c
   2e934:	20001d2c 	.word	0x20001d2c
   2e938:	0004a2c0 	.word	0x0004a2c0
   2e93c:	000471d9 	.word	0x000471d9

0002e940 <bt_gatt_connected>:
{
   2e940:	b570      	push	{r4, r5, r6, lr}
   2e942:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e944:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2e948:	4604      	mov	r4, r0
	data.conn = conn;
   2e94a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   2e94c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e94e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   2e950:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e954:	4629      	mov	r1, r5
   2e956:	f016 ff5a 	bl	4580e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2e95a:	b190      	cbz	r0, 2e982 <bt_gatt_connected+0x42>
		if (conn->id) {
   2e95c:	7a22      	ldrb	r2, [r4, #8]
   2e95e:	b32a      	cbz	r2, 2e9ac <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2e960:	ae02      	add	r6, sp, #8
   2e962:	2104      	movs	r1, #4
   2e964:	4630      	mov	r0, r6
   2e966:	f014 f920 	bl	42baa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e96a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e96c:	4a10      	ldr	r2, [pc, #64]	; (2e9b0 <bt_gatt_connected+0x70>)
   2e96e:	2124      	movs	r1, #36	; 0x24
   2e970:	a805      	add	r0, sp, #20
   2e972:	462b      	mov	r3, r5
   2e974:	f7fc fa30 	bl	2add8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   2e978:	aa05      	add	r2, sp, #20
   2e97a:	490e      	ldr	r1, [pc, #56]	; (2e9b4 <bt_gatt_connected+0x74>)
   2e97c:	4610      	mov	r0, r2
   2e97e:	f7fb f8bd 	bl	29afc <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e982:	ab03      	add	r3, sp, #12
   2e984:	4a0c      	ldr	r2, [pc, #48]	; (2e9b8 <bt_gatt_connected+0x78>)
   2e986:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e98a:	2001      	movs	r0, #1
   2e98c:	f018 fca9 	bl	472e2 <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e990:	78e3      	ldrb	r3, [r4, #3]
   2e992:	b94b      	cbnz	r3, 2e9a8 <bt_gatt_connected+0x68>
	    bt_conn_get_security(conn) < data.sec) {
   2e994:	4620      	mov	r0, r4
   2e996:	f017 fadc 	bl	45f52 <bt_conn_get_security>
   2e99a:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   2e99e:	4288      	cmp	r0, r1
   2e9a0:	d202      	bcs.n	2e9a8 <bt_gatt_connected+0x68>
		int err = bt_conn_set_security(conn, data.sec);
   2e9a2:	4620      	mov	r0, r4
   2e9a4:	f017 faa5 	bl	45ef2 <bt_conn_set_security>
}
   2e9a8:	b00e      	add	sp, #56	; 0x38
   2e9aa:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e9ac:	9200      	str	r2, [sp, #0]
   2e9ae:	e7dd      	b.n	2e96c <bt_gatt_connected+0x2c>
   2e9b0:	0004b905 	.word	0x0004b905
   2e9b4:	0002e40d 	.word	0x0002e40d
   2e9b8:	0002e871 	.word	0x0002e871

0002e9bc <bt_gatt_att_max_mtu_changed>:
{
   2e9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   2e9be:	4b08      	ldr	r3, [pc, #32]	; (2e9e0 <bt_gatt_att_max_mtu_changed+0x24>)
   2e9c0:	681c      	ldr	r4, [r3, #0]
   2e9c2:	4605      	mov	r5, r0
   2e9c4:	460e      	mov	r6, r1
   2e9c6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2e9c8:	b14c      	cbz	r4, 2e9de <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   2e9ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2e9ce:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   2e9d0:	b11b      	cbz	r3, 2e9da <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   2e9d2:	463a      	mov	r2, r7
   2e9d4:	4631      	mov	r1, r6
   2e9d6:	4628      	mov	r0, r5
   2e9d8:	4798      	blx	r3
	return node->next;
   2e9da:	6864      	ldr	r4, [r4, #4]
   2e9dc:	e7f4      	b.n	2e9c8 <bt_gatt_att_max_mtu_changed+0xc>
}
   2e9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e9e0:	20001d00 	.word	0x20001d00

0002e9e4 <bt_gatt_encrypt_change>:
{
   2e9e4:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e9e6:	4a06      	ldr	r2, [pc, #24]	; (2ea00 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   2e9e8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e9ea:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   2e9ec:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e9ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   2e9f2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e9f6:	f018 fc74 	bl	472e2 <bt_gatt_foreach_attr>
}
   2e9fa:	b003      	add	sp, #12
   2e9fc:	f85d fb04 	ldr.w	pc, [sp], #4
   2ea00:	0002e871 	.word	0x0002e871

0002ea04 <db_hash_read>:
{
   2ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2ea06:	4914      	ldr	r1, [pc, #80]	; (2ea58 <db_hash_read+0x54>)
{
   2ea08:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2ea0c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2ea0e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   2ea12:	461f      	mov	r7, r3
   2ea14:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2ea16:	f01a fb0b 	bl	49030 <k_work_cancel_delayable_sync>
   2ea1a:	4810      	ldr	r0, [pc, #64]	; (2ea5c <db_hash_read+0x58>)
   2ea1c:	f018 f915 	bl	46c4a <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2ea20:	0743      	lsls	r3, r0, #29
   2ea22:	d402      	bmi.n	2ea2a <db_hash_read+0x26>
		db_hash_gen(true);
   2ea24:	2001      	movs	r0, #1
   2ea26:	f7ff fc57 	bl	2e2d8 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   2ea2a:	2101      	movs	r1, #1
   2ea2c:	4620      	mov	r0, r4
   2ea2e:	f018 fcc1 	bl	473b4 <bt_gatt_change_aware>
	if (offset > value_len) {
   2ea32:	2e10      	cmp	r6, #16
   2ea34:	d80c      	bhi.n	2ea50 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   2ea36:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   2ea3a:	4909      	ldr	r1, [pc, #36]	; (2ea60 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   2ea3c:	42bc      	cmp	r4, r7
   2ea3e:	bfa8      	it	ge
   2ea40:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2ea42:	4622      	mov	r2, r4
   2ea44:	4431      	add	r1, r6
   2ea46:	4628      	mov	r0, r5
   2ea48:	f016 fa3a 	bl	44ec0 <memcpy>
}
   2ea4c:	4620      	mov	r0, r4
   2ea4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2ea50:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2ea54:	e7fa      	b.n	2ea4c <db_hash_read+0x48>
   2ea56:	bf00      	nop
   2ea58:	200011a8 	.word	0x200011a8
   2ea5c:	20001258 	.word	0x20001258
   2ea60:	20001158 	.word	0x20001158

0002ea64 <bt_gatt_store_ccc>:
{
   2ea64:	b570      	push	{r4, r5, r6, lr}
   2ea66:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   2ea68:	2300      	movs	r3, #0
{
   2ea6a:	4604      	mov	r4, r0
   2ea6c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   2ea6e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   2ea70:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   2ea74:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   2ea76:	4a11      	ldr	r2, [pc, #68]	; (2eabc <bt_gatt_store_ccc+0x58>)
   2ea78:	ab0d      	add	r3, sp, #52	; 0x34
   2ea7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2ea7e:	2001      	movs	r0, #1
   2ea80:	f018 fc2f 	bl	472e2 <bt_gatt_foreach_attr>
	if (id) {
   2ea84:	b1ac      	cbz	r4, 2eab2 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   2ea86:	ae03      	add	r6, sp, #12
   2ea88:	4622      	mov	r2, r4
   2ea8a:	2104      	movs	r1, #4
   2ea8c:	4630      	mov	r0, r6
   2ea8e:	f014 f88c 	bl	42baa <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   2ea92:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2ea94:	4a0a      	ldr	r2, [pc, #40]	; (2eac0 <bt_gatt_store_ccc+0x5c>)
   2ea96:	462b      	mov	r3, r5
   2ea98:	2124      	movs	r1, #36	; 0x24
   2ea9a:	a804      	add	r0, sp, #16
   2ea9c:	f7fc f99c 	bl	2add8 <bt_settings_encode_key>
	if (save.count) {
   2eaa0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   2eaa2:	b142      	cbz	r2, 2eab6 <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   2eaa4:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   2eaa6:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   2eaa8:	a804      	add	r0, sp, #16
   2eaaa:	f7fa ffc7 	bl	29a3c <settings_save_one>
}
   2eaae:	b040      	add	sp, #256	; 0x100
   2eab0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2eab2:	9400      	str	r4, [sp, #0]
   2eab4:	e7ee      	b.n	2ea94 <bt_gatt_store_ccc+0x30>
		str = NULL;
   2eab6:	4611      	mov	r1, r2
   2eab8:	e7f6      	b.n	2eaa8 <bt_gatt_store_ccc+0x44>
   2eaba:	bf00      	nop
   2eabc:	0002de75 	.word	0x0002de75
   2eac0:	0004b905 	.word	0x0004b905

0002eac4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2eac4:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2eac6:	4603      	mov	r3, r0
   2eac8:	4a3d      	ldr	r2, [pc, #244]	; (2ebc0 <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2eaca:	4e3e      	ldr	r6, [pc, #248]	; (2ebc4 <bt_gatt_disconnected+0x100>)
{
   2eacc:	b08d      	sub	sp, #52	; 0x34
   2eace:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2ead0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2ead4:	2001      	movs	r0, #1
   2ead6:	f018 fc04 	bl	472e2 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   2eada:	4620      	mov	r0, r4
   2eadc:	f7fe f810 	bl	2cb00 <bt_conn_index>
   2eae0:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2eae2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   2eae6:	b120      	cbz	r0, 2eaf2 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   2eae8:	f017 f99b 	bl	45e22 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   2eaec:	2300      	movs	r3, #0
   2eaee:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2eaf2:	4835      	ldr	r0, [pc, #212]	; (2ebc8 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2eaf4:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2eaf8:	f01a fa86 	bl	49008 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2eafc:	7a20      	ldrb	r0, [r4, #8]
   2eafe:	4629      	mov	r1, r5
   2eb00:	f016 fe85 	bl	4580e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2eb04:	b348      	cbz	r0, 2eb5a <bt_gatt_disconnected+0x96>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2eb06:	4629      	mov	r1, r5
   2eb08:	7a20      	ldrb	r0, [r4, #8]
   2eb0a:	f7ff ffab 	bl	2ea64 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   2eb0e:	4620      	mov	r0, r4
   2eb10:	f7ff f8ca 	bl	2dca8 <find_cf_cfg>
	if (!cfg) {
   2eb14:	4606      	mov	r6, r0
   2eb16:	2800      	cmp	r0, #0
   2eb18:	d03f      	beq.n	2eb9a <bt_gatt_disconnected+0xd6>
		if (conn->id) {
   2eb1a:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   2eb1c:	3608      	adds	r6, #8
		if (conn->id) {
   2eb1e:	2a00      	cmp	r2, #0
   2eb20:	d03d      	beq.n	2eb9e <bt_gatt_disconnected+0xda>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2eb22:	af02      	add	r7, sp, #8
   2eb24:	2104      	movs	r1, #4
   2eb26:	4638      	mov	r0, r7
   2eb28:	f014 f83f 	bl	42baa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   2eb2c:	9700      	str	r7, [sp, #0]
   2eb2e:	462b      	mov	r3, r5
   2eb30:	4a26      	ldr	r2, [pc, #152]	; (2ebcc <bt_gatt_disconnected+0x108>)
   2eb32:	2124      	movs	r1, #36	; 0x24
   2eb34:	a803      	add	r0, sp, #12
   2eb36:	f7fc f94f 	bl	2add8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   2eb3a:	7a23      	ldrb	r3, [r4, #8]
   2eb3c:	2701      	movs	r7, #1
   2eb3e:	b93b      	cbnz	r3, 2eb50 <bt_gatt_disconnected+0x8c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   2eb40:	2300      	movs	r3, #0
   2eb42:	9300      	str	r3, [sp, #0]
   2eb44:	4a21      	ldr	r2, [pc, #132]	; (2ebcc <bt_gatt_disconnected+0x108>)
   2eb46:	462b      	mov	r3, r5
   2eb48:	2124      	movs	r1, #36	; 0x24
   2eb4a:	a803      	add	r0, sp, #12
   2eb4c:	f7fc f944 	bl	2add8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   2eb50:	463a      	mov	r2, r7
   2eb52:	4631      	mov	r1, r6
   2eb54:	a803      	add	r0, sp, #12
   2eb56:	f7fa ff71 	bl	29a3c <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2eb5a:	7a20      	ldrb	r0, [r4, #8]
   2eb5c:	4629      	mov	r1, r5
   2eb5e:	f016 fe56 	bl	4580e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2eb62:	b150      	cbz	r0, 2eb7a <bt_gatt_disconnected+0xb6>
		struct addr_with_id addr_with_id = {
   2eb64:	7a23      	ldrb	r3, [r4, #8]
   2eb66:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2eb6a:	4a19      	ldr	r2, [pc, #100]	; (2ebd0 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
   2eb6c:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2eb6e:	ab03      	add	r3, sp, #12
   2eb70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2eb74:	2001      	movs	r0, #1
   2eb76:	f018 fbb4 	bl	472e2 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   2eb7a:	4620      	mov	r0, r4
   2eb7c:	f7ff f894 	bl	2dca8 <find_cf_cfg>
	if (!cfg) {
   2eb80:	4606      	mov	r6, r0
   2eb82:	b1d8      	cbz	r0, 2ebbc <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2eb84:	7a20      	ldrb	r0, [r4, #8]
   2eb86:	4629      	mov	r1, r5
   2eb88:	f016 fe41 	bl	4580e <bt_addr_le_is_bonded>
   2eb8c:	b948      	cbnz	r0, 2eba2 <bt_gatt_disconnected+0xde>
		clear_cf_cfg(cfg);
   2eb8e:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   2eb90:	b00d      	add	sp, #52	; 0x34
   2eb92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   2eb96:	f018 b928 	b.w	46dea <clear_cf_cfg>
		len = 0;
   2eb9a:	4607      	mov	r7, r0
   2eb9c:	e7d0      	b.n	2eb40 <bt_gatt_disconnected+0x7c>
   2eb9e:	2701      	movs	r7, #1
   2eba0:	e7ce      	b.n	2eb40 <bt_gatt_disconnected+0x7c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2eba2:	4629      	mov	r1, r5
   2eba4:	1c70      	adds	r0, r6, #1
   2eba6:	f018 f8ba 	bl	46d1e <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ebaa:	f06f 0102 	mvn.w	r1, #2
   2ebae:	f106 000c 	add.w	r0, r6, #12
}
   2ebb2:	b00d      	add	sp, #52	; 0x34
   2ebb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ebb8:	f018 b908 	b.w	46dcc <atomic_and>
   2ebbc:	b00d      	add	sp, #52	; 0x34
   2ebbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ebc0:	0002e029 	.word	0x0002e029
   2ebc4:	200011d0 	.word	0x200011d0
   2ebc8:	200011d8 	.word	0x200011d8
   2ebcc:	0004b90c 	.word	0x0004b90c
   2ebd0:	0002ddc1 	.word	0x0002ddc1

0002ebd4 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   2ebd4:	4b10      	ldr	r3, [pc, #64]	; (2ec18 <get_io_capa+0x44>)
   2ebd6:	681b      	ldr	r3, [r3, #0]
   2ebd8:	b1bb      	cbz	r3, 2ec0a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   2ebda:	685a      	ldr	r2, [r3, #4]
   2ebdc:	b142      	cbz	r2, 2ebf0 <get_io_capa+0x1c>
   2ebde:	6899      	ldr	r1, [r3, #8]
   2ebe0:	b131      	cbz	r1, 2ebf0 <get_io_capa+0x1c>
   2ebe2:	68d9      	ldr	r1, [r3, #12]
   2ebe4:	b911      	cbnz	r1, 2ebec <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   2ebe6:	490d      	ldr	r1, [pc, #52]	; (2ec1c <get_io_capa+0x48>)
   2ebe8:	7809      	ldrb	r1, [r1, #0]
   2ebea:	b939      	cbnz	r1, 2ebfc <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   2ebec:	2004      	movs	r0, #4
   2ebee:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   2ebf0:	490a      	ldr	r1, [pc, #40]	; (2ec1c <get_io_capa+0x48>)
   2ebf2:	7809      	ldrb	r1, [r1, #0]
   2ebf4:	b111      	cbz	r1, 2ebfc <get_io_capa+0x28>
   2ebf6:	b10a      	cbz	r2, 2ebfc <get_io_capa+0x28>
   2ebf8:	68d9      	ldr	r1, [r3, #12]
   2ebfa:	b941      	cbnz	r1, 2ec0e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   2ebfc:	689b      	ldr	r3, [r3, #8]
   2ebfe:	b943      	cbnz	r3, 2ec12 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   2ec00:	2a00      	cmp	r2, #0
   2ec02:	bf0c      	ite	eq
   2ec04:	2003      	moveq	r0, #3
   2ec06:	2000      	movne	r0, #0
   2ec08:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   2ec0a:	2003      	movs	r0, #3
   2ec0c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   2ec0e:	2001      	movs	r0, #1
   2ec10:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   2ec12:	2002      	movs	r0, #2
	}
}
   2ec14:	4770      	bx	lr
   2ec16:	bf00      	nop
   2ec18:	20001cac 	.word	0x20001cac
   2ec1c:	20003c68 	.word	0x20003c68

0002ec20 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   2ec20:	4b06      	ldr	r3, [pc, #24]	; (2ec3c <bt_smp_accept+0x1c>)
   2ec22:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   2ec26:	b928      	cbnz	r0, 2ec34 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   2ec28:	4a05      	ldr	r2, [pc, #20]	; (2ec40 <bt_smp_accept+0x20>)
   2ec2a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   2ec2e:	33f0      	adds	r3, #240	; 0xf0
   2ec30:	600b      	str	r3, [r1, #0]

		return 0;
   2ec32:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   2ec34:	f06f 000b 	mvn.w	r0, #11
}
   2ec38:	4770      	bx	lr
   2ec3a:	bf00      	nop
   2ec3c:	20001260 	.word	0x20001260
   2ec40:	0004a43c 	.word	0x0004a43c

0002ec44 <get_auth.constprop.0>:
	if (sc_supported) {
   2ec44:	4b0c      	ldr	r3, [pc, #48]	; (2ec78 <get_auth.constprop.0+0x34>)
   2ec46:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   2ec48:	b510      	push	{r4, lr}
	if (sc_supported) {
   2ec4a:	b17b      	cbz	r3, 2ec6c <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   2ec4c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2ec50:	f7ff ffc0 	bl	2ebd4 <get_io_capa>
	if (bondable) {
   2ec54:	4b09      	ldr	r3, [pc, #36]	; (2ec7c <get_auth.constprop.0+0x38>)
   2ec56:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2ec58:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   2ec5a:	bf0c      	ite	eq
   2ec5c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   2ec60:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   2ec64:	b12b      	cbz	r3, 2ec72 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   2ec66:	f044 0001 	orr.w	r0, r4, #1
}
   2ec6a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   2ec6c:	f000 0407 	and.w	r4, r0, #7
   2ec70:	e7ee      	b.n	2ec50 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   2ec72:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   2ec76:	e7f8      	b.n	2ec6a <get_auth.constprop.0+0x26>
   2ec78:	20003c68 	.word	0x20003c68
   2ec7c:	20000a2a 	.word	0x20000a2a

0002ec80 <smp_init>:
{
   2ec80:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2ec82:	22f0      	movs	r2, #240	; 0xf0
{
   2ec84:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2ec86:	2100      	movs	r1, #0
   2ec88:	f016 f925 	bl	44ed6 <memset>
	if (bt_rand(smp->prnd, 16)) {
   2ec8c:	2110      	movs	r1, #16
   2ec8e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   2ec92:	f003 fde5 	bl	32860 <bt_rand>
   2ec96:	4604      	mov	r4, r0
   2ec98:	b948      	cbnz	r0, 2ecae <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   2ec9a:	2105      	movs	r1, #5
   2ec9c:	4628      	mov	r0, r5
   2ec9e:	f018 fca4 	bl	475ea <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   2eca2:	f7fd fc85 	bl	2c5b0 <bt_pub_key_get>
   2eca6:	4b03      	ldr	r3, [pc, #12]	; (2ecb4 <smp_init+0x34>)
   2eca8:	6018      	str	r0, [r3, #0]
}
   2ecaa:	4620      	mov	r0, r4
   2ecac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ecae:	2408      	movs	r4, #8
   2ecb0:	e7fb      	b.n	2ecaa <smp_init+0x2a>
   2ecb2:	bf00      	nop
   2ecb4:	20001d48 	.word	0x20001d48

0002ecb8 <smp_dhkey_generate>:
{
   2ecb8:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2ecba:	1d05      	adds	r5, r0, #4
{
   2ecbc:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2ecbe:	2108      	movs	r1, #8
   2ecc0:	4628      	mov	r0, r5
   2ecc2:	f018 fc92 	bl	475ea <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   2ecc6:	4906      	ldr	r1, [pc, #24]	; (2ece0 <smp_dhkey_generate+0x28>)
   2ecc8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2eccc:	f7fd fc80 	bl	2c5d0 <bt_dh_key_gen>
	if (err) {
   2ecd0:	b120      	cbz	r0, 2ecdc <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2ecd2:	4628      	mov	r0, r5
   2ecd4:	2108      	movs	r1, #8
   2ecd6:	f018 fbc0 	bl	4745a <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   2ecda:	2008      	movs	r0, #8
}
   2ecdc:	bd38      	pop	{r3, r4, r5, pc}
   2ecde:	bf00      	nop
   2ece0:	000479b1 	.word	0x000479b1

0002ece4 <smp_find>:
{
   2ece4:	4601      	mov	r1, r0
   2ece6:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2ece8:	4803      	ldr	r0, [pc, #12]	; (2ecf8 <smp_find+0x14>)
   2ecea:	f018 fc98 	bl	4761e <atomic_test_bit>
	return NULL;
   2ecee:	2800      	cmp	r0, #0
}
   2ecf0:	4802      	ldr	r0, [pc, #8]	; (2ecfc <smp_find+0x18>)
   2ecf2:	bf08      	it	eq
   2ecf4:	2000      	moveq	r0, #0
   2ecf6:	bd08      	pop	{r3, pc}
   2ecf8:	20001264 	.word	0x20001264
   2ecfc:	20001260 	.word	0x20001260

0002ed00 <smp_pairing_random>:
{
   2ed00:	b570      	push	{r4, r5, r6, lr}
   2ed02:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2ed04:	f100 0537 	add.w	r5, r0, #55	; 0x37
   2ed08:	6889      	ldr	r1, [r1, #8]
{
   2ed0a:	b09c      	sub	sp, #112	; 0x70
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2ed0c:	2210      	movs	r2, #16
   2ed0e:	4628      	mov	r0, r5
   2ed10:	f016 f8d6 	bl	44ec0 <memcpy>
	switch (smp->method) {
   2ed14:	7a23      	ldrb	r3, [r4, #8]
   2ed16:	2b05      	cmp	r3, #5
   2ed18:	f200 808b 	bhi.w	2ee32 <smp_pairing_random+0x132>
   2ed1c:	e8df f003 	tbb	[pc, r3]
   2ed20:	034a4a3d 	.word	0x034a4a3d
   2ed24:	8b89      	.short	0x8b89
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2ed26:	4b5c      	ldr	r3, [pc, #368]	; (2ee98 <smp_pairing_random+0x198>)
	sys_memcpy_swap(m, u, 32);
   2ed28:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2ed2a:	681e      	ldr	r6, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   2ed2c:	eb0d 0002 	add.w	r0, sp, r2
   2ed30:	f104 0157 	add.w	r1, r4, #87	; 0x57
   2ed34:	f018 fb7e 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2ed38:	2220      	movs	r2, #32
   2ed3a:	4631      	mov	r1, r6
   2ed3c:	a810      	add	r0, sp, #64	; 0x40
   2ed3e:	f018 fb79 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   2ed42:	2210      	movs	r2, #16
   2ed44:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2ed48:	a818      	add	r0, sp, #96	; 0x60
   2ed4a:	f018 fb73 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2ed4e:	2210      	movs	r2, #16
   2ed50:	eb0d 0002 	add.w	r0, sp, r2
   2ed54:	4629      	mov	r1, r5
   2ed56:	f018 fb6d 	bl	47434 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   2ed5a:	ab04      	add	r3, sp, #16
   2ed5c:	2250      	movs	r2, #80	; 0x50
   2ed5e:	a908      	add	r1, sp, #32
   2ed60:	4618      	mov	r0, r3
   2ed62:	f018 fb89 	bl	47478 <bt_smp_aes_cmac>
	if (err) {
   2ed66:	2800      	cmp	r0, #0
   2ed68:	d163      	bne.n	2ee32 <smp_pairing_random+0x132>
	memcpy(passkey, xs + 12, 4);
   2ed6a:	2204      	movs	r2, #4
   2ed6c:	a907      	add	r1, sp, #28
   2ed6e:	a803      	add	r0, sp, #12
   2ed70:	f016 f8a6 	bl	44ec0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2ed74:	9b03      	ldr	r3, [sp, #12]
   2ed76:	4a49      	ldr	r2, [pc, #292]	; (2ee9c <smp_pairing_random+0x19c>)
   2ed78:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2ed7a:	1d20      	adds	r0, r4, #4
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2ed7c:	fbb3 f1f2 	udiv	r1, r3, r2
   2ed80:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2ed84:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2ed86:	9303      	str	r3, [sp, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2ed88:	f018 fc2f 	bl	475ea <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   2ed8c:	4b44      	ldr	r3, [pc, #272]	; (2eea0 <smp_pairing_random+0x1a0>)
   2ed8e:	9903      	ldr	r1, [sp, #12]
   2ed90:	681b      	ldr	r3, [r3, #0]
   2ed92:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2ed96:	68db      	ldr	r3, [r3, #12]
   2ed98:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2ed9a:	210d      	movs	r1, #13
   2ed9c:	4620      	mov	r0, r4
   2ed9e:	f018 fc24 	bl	475ea <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2eda2:	2110      	movs	r1, #16
   2eda4:	1d20      	adds	r0, r4, #4
   2eda6:	f018 fc20 	bl	475ea <atomic_set_bit>
	return smp_send_pairing_random(smp);
   2edaa:	4620      	mov	r0, r4
   2edac:	f018 fc9f 	bl	476ee <smp_send_pairing_random>
   2edb0:	4605      	mov	r5, r0
   2edb2:	e01a      	b.n	2edea <smp_pairing_random+0xea>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2edb4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   2edb8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2edbc:	4936      	ldr	r1, [pc, #216]	; (2ee98 <smp_pairing_random+0x198>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2edbe:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2edc0:	ae08      	add	r6, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2edc2:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2edc6:	9600      	str	r6, [sp, #0]
   2edc8:	6809      	ldr	r1, [r1, #0]
   2edca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2edce:	462a      	mov	r2, r5
   2edd0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2edd4:	f018 fbe4 	bl	475a0 <smp_f4>
   2edd8:	bb58      	cbnz	r0, 2ee32 <smp_pairing_random+0x132>
	if (memcmp(smp->pcnf, cfm, 16)) {
   2edda:	2210      	movs	r2, #16
   2eddc:	4631      	mov	r1, r6
   2edde:	f104 0017 	add.w	r0, r4, #23
   2ede2:	f016 f85c 	bl	44e9e <memcmp>
   2ede6:	b118      	cbz	r0, 2edf0 <smp_pairing_random+0xf0>
		return BT_SMP_ERR_CONFIRM_FAILED;
   2ede8:	2504      	movs	r5, #4
}
   2edea:	4628      	mov	r0, r5
   2edec:	b01c      	add	sp, #112	; 0x70
   2edee:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->allowed_cmds,
   2edf0:	2103      	movs	r1, #3
   2edf2:	4620      	mov	r0, r4
   2edf4:	f018 fbf9 	bl	475ea <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   2edf8:	f018 fc79 	bl	476ee <smp_send_pairing_random>
		if (err) {
   2edfc:	4605      	mov	r5, r0
   2edfe:	2800      	cmp	r0, #0
   2ee00:	d1f3      	bne.n	2edea <smp_pairing_random+0xea>
		smp->passkey_round++;
   2ee02:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   2ee06:	3301      	adds	r3, #1
   2ee08:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   2ee0a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   2ee0c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   2ee10:	d108      	bne.n	2ee24 <smp_pairing_random+0x124>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2ee12:	4620      	mov	r0, r4
   2ee14:	210d      	movs	r1, #13
   2ee16:	f018 fbe8 	bl	475ea <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ee1a:	2110      	movs	r1, #16
   2ee1c:	1d20      	adds	r0, r4, #4
   2ee1e:	f018 fbe4 	bl	475ea <atomic_set_bit>
			return 0;
   2ee22:	e7e2      	b.n	2edea <smp_pairing_random+0xea>
		if (bt_rand(smp->prnd, 16)) {
   2ee24:	2110      	movs	r1, #16
   2ee26:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2ee2a:	f003 fd19 	bl	32860 <bt_rand>
   2ee2e:	2800      	cmp	r0, #0
   2ee30:	d0db      	beq.n	2edea <smp_pairing_random+0xea>
	switch (smp->method) {
   2ee32:	2508      	movs	r5, #8
   2ee34:	e7d9      	b.n	2edea <smp_pairing_random+0xea>
		if (bt_rand(smp->prnd, 16)) {
   2ee36:	2110      	movs	r1, #16
   2ee38:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2ee3c:	f003 fd10 	bl	32860 <bt_rand>
   2ee40:	2800      	cmp	r0, #0
   2ee42:	d1f6      	bne.n	2ee32 <smp_pairing_random+0x132>
		if (bt_auth && bt_auth->oob_data_request) {
   2ee44:	4e16      	ldr	r6, [pc, #88]	; (2eea0 <smp_pairing_random+0x1a0>)
   2ee46:	6833      	ldr	r3, [r6, #0]
   2ee48:	b1fb      	cbz	r3, 2ee8a <smp_pairing_random+0x18a>
   2ee4a:	691b      	ldr	r3, [r3, #16]
   2ee4c:	b1eb      	cbz	r3, 2ee8a <smp_pairing_random+0x18a>
			struct bt_conn_oob_info info = {
   2ee4e:	4b15      	ldr	r3, [pc, #84]	; (2eea4 <smp_pairing_random+0x1a4>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2ee50:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   2ee52:	881b      	ldrh	r3, [r3, #0]
   2ee54:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2ee58:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2ee5a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2ee5c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2ee60:	d415      	bmi.n	2ee8e <smp_pairing_random+0x18e>
   2ee62:	2b00      	cmp	r3, #0
   2ee64:	bf14      	ite	ne
   2ee66:	2001      	movne	r0, #1
   2ee68:	2003      	moveq	r0, #3
			smp->oobd_local = NULL;
   2ee6a:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   2ee6c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
   2ee70:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   2ee74:	1d20      	adds	r0, r4, #4
   2ee76:	210c      	movs	r1, #12
   2ee78:	f018 fbb7 	bl	475ea <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   2ee7c:	6833      	ldr	r3, [r6, #0]
   2ee7e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2ee82:	691b      	ldr	r3, [r3, #16]
   2ee84:	a908      	add	r1, sp, #32
   2ee86:	4798      	blx	r3
			return 0;
   2ee88:	e7af      	b.n	2edea <smp_pairing_random+0xea>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   2ee8a:	2502      	movs	r5, #2
   2ee8c:	e7ad      	b.n	2edea <smp_pairing_random+0xea>
				     BT_CONN_OOB_BOTH_PEERS :
   2ee8e:	2b00      	cmp	r3, #0
   2ee90:	bf18      	it	ne
   2ee92:	2002      	movne	r0, #2
   2ee94:	e7e9      	b.n	2ee6a <smp_pairing_random+0x16a>
   2ee96:	bf00      	nop
   2ee98:	20001d48 	.word	0x20001d48
   2ee9c:	000f4240 	.word	0x000f4240
   2eea0:	20001cac 	.word	0x20001cac
   2eea4:	00049c02 	.word	0x00049c02

0002eea8 <compute_and_check_and_send_periph_dhcheck>:
{
   2eea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   2eeac:	2210      	movs	r2, #16
{
   2eeae:	b0a3      	sub	sp, #140	; 0x8c
   2eeb0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   2eeb2:	2100      	movs	r1, #0
   2eeb4:	eb0d 0002 	add.w	r0, sp, r2
   2eeb8:	f016 f80d 	bl	44ed6 <memset>
	switch (smp->method) {
   2eebc:	7a23      	ldrb	r3, [r4, #8]
   2eebe:	2b05      	cmp	r3, #5
   2eec0:	d87f      	bhi.n	2efc2 <compute_and_check_and_send_periph_dhcheck+0x11a>
   2eec2:	e8df f003 	tbb	[pc, r3]
   2eec6:	0309      	.short	0x0309
   2eec8:	807e0903 	.word	0x807e0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   2eecc:	2204      	movs	r2, #4
   2eece:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2eed2:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2eed4:	f015 fff4 	bl	44ec0 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   2eed8:	4b62      	ldr	r3, [pc, #392]	; (2f064 <compute_and_check_and_send_periph_dhcheck+0x1bc>)
		   &smp->chan.chan.conn->le.init_addr,
   2eeda:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   2eede:	aa14      	add	r2, sp, #80	; 0x50
   2eee0:	f103 0630 	add.w	r6, r3, #48	; 0x30
   2eee4:	6818      	ldr	r0, [r3, #0]
   2eee6:	6859      	ldr	r1, [r3, #4]
   2eee8:	4615      	mov	r5, r2
   2eeea:	c503      	stmia	r5!, {r0, r1}
   2eeec:	3308      	adds	r3, #8
   2eeee:	42b3      	cmp	r3, r6
   2eef0:	462a      	mov	r2, r5
   2eef2:	d1f7      	bne.n	2eee4 <compute_and_check_and_send_periph_dhcheck+0x3c>
   2eef4:	6818      	ldr	r0, [r3, #0]
   2eef6:	791b      	ldrb	r3, [r3, #4]
   2eef8:	6028      	str	r0, [r5, #0]
   2eefa:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   2eefc:	ad0c      	add	r5, sp, #48	; 0x30
   2eefe:	2220      	movs	r2, #32
   2ef00:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2ef04:	4628      	mov	r0, r5
   2ef06:	f018 fa95 	bl	47434 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   2ef0a:	4857      	ldr	r0, [pc, #348]	; (2f068 <compute_and_check_and_send_periph_dhcheck+0x1c0>)
   2ef0c:	ab08      	add	r3, sp, #32
   2ef0e:	2220      	movs	r2, #32
   2ef10:	4629      	mov	r1, r5
   2ef12:	f018 fab1 	bl	47478 <bt_smp_aes_cmac>
	if (err) {
   2ef16:	2800      	cmp	r0, #0
   2ef18:	d153      	bne.n	2efc2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2ef1a:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   2ef1e:	2210      	movs	r2, #16
   2ef20:	4639      	mov	r1, r7
   2ef22:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2ef26:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   2ef2a:	f018 fa83 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2ef2e:	2210      	movs	r2, #16
   2ef30:	4641      	mov	r1, r8
   2ef32:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   2ef36:	f018 fa7d 	bl	47434 <sys_memcpy_swap>
	m[37] = a1->type;
   2ef3a:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   2ef3e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2ef42:	2206      	movs	r2, #6
   2ef44:	f109 0190 	add.w	r1, r9, #144	; 0x90
   2ef48:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   2ef4c:	f018 fa72 	bl	47434 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   2ef50:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   2ef54:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   2ef58:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2ef5c:	2206      	movs	r2, #6
   2ef5e:	f109 0197 	add.w	r1, r9, #151	; 0x97
   2ef62:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   2ef66:	f018 fa65 	bl	47434 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   2ef6a:	4633      	mov	r3, r6
   2ef6c:	2235      	movs	r2, #53	; 0x35
   2ef6e:	a914      	add	r1, sp, #80	; 0x50
   2ef70:	a808      	add	r0, sp, #32
   2ef72:	f018 fa81 	bl	47478 <bt_smp_aes_cmac>
	if (err) {
   2ef76:	bb20      	cbnz	r0, 2efc2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   2ef78:	4630      	mov	r0, r6
   2ef7a:	f018 fab7 	bl	474ec <sys_mem_swap.constprop.0>
		   smp->tk)) {
   2ef7e:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   2ef82:	2301      	movs	r3, #1
   2ef84:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   2ef88:	2235      	movs	r2, #53	; 0x35
   2ef8a:	464b      	mov	r3, r9
   2ef8c:	a914      	add	r1, sp, #80	; 0x50
   2ef8e:	a808      	add	r0, sp, #32
   2ef90:	f018 fa72 	bl	47478 <bt_smp_aes_cmac>
	if (err) {
   2ef94:	b9a8      	cbnz	r0, 2efc2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   2ef96:	4648      	mov	r0, r9
   2ef98:	f018 faa8 	bl	474ec <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   2ef9c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2efa0:	aa14      	add	r2, sp, #80	; 0x50
   2efa2:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   2efa4:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   2efa8:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2efaa:	9301      	str	r3, [sp, #4]
   2efac:	f104 0311 	add.w	r3, r4, #17
   2efb0:	9202      	str	r2, [sp, #8]
   2efb2:	9300      	str	r3, [sp, #0]
   2efb4:	463a      	mov	r2, r7
   2efb6:	ab04      	add	r3, sp, #16
   2efb8:	4641      	mov	r1, r8
   2efba:	4630      	mov	r0, r6
   2efbc:	f018 faa4 	bl	47508 <smp_f6>
   2efc0:	b148      	cbz	r0, 2efd6 <compute_and_check_and_send_periph_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   2efc2:	2008      	movs	r0, #8
   2efc4:	e046      	b.n	2f054 <compute_and_check_and_send_periph_dhcheck+0x1ac>
		if (smp->oobd_remote) {
   2efc6:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   2efca:	2900      	cmp	r1, #0
   2efcc:	d084      	beq.n	2eed8 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2efce:	2210      	movs	r2, #16
   2efd0:	eb0d 0002 	add.w	r0, sp, r2
   2efd4:	e77e      	b.n	2eed4 <compute_and_check_and_send_periph_dhcheck+0x2c>
	if (smp->method == LE_SC_OOB) {
   2efd6:	7a23      	ldrb	r3, [r4, #8]
   2efd8:	2b05      	cmp	r3, #5
   2efda:	d108      	bne.n	2efee <compute_and_check_and_send_periph_dhcheck+0x146>
		if (smp->oobd_local) {
   2efdc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2efe0:	2210      	movs	r2, #16
   2efe2:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   2efe6:	2900      	cmp	r1, #0
   2efe8:	d037      	beq.n	2f05a <compute_and_check_and_send_periph_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2efea:	f015 ff69 	bl	44ec0 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   2efee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2eff2:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   2eff4:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   2eff8:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2effa:	9301      	str	r3, [sp, #4]
   2effc:	f104 030a 	add.w	r3, r4, #10
   2f000:	9202      	str	r2, [sp, #8]
   2f002:	9300      	str	r3, [sp, #0]
   2f004:	4642      	mov	r2, r8
   2f006:	ab04      	add	r3, sp, #16
   2f008:	4639      	mov	r1, r7
   2f00a:	4630      	mov	r0, r6
   2f00c:	f018 fa7c 	bl	47508 <smp_f6>
   2f010:	2800      	cmp	r0, #0
   2f012:	d1d6      	bne.n	2efc2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   2f014:	4629      	mov	r1, r5
   2f016:	2210      	movs	r2, #16
   2f018:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2f01c:	f015 ff3f 	bl	44e9e <memcmp>
   2f020:	4605      	mov	r5, r0
   2f022:	b9e8      	cbnz	r0, 2f060 <compute_and_check_and_send_periph_dhcheck+0x1b8>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2f024:	210d      	movs	r1, #13
   2f026:	4620      	mov	r0, r4
   2f028:	f018 fb42 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!buf) {
   2f02c:	4606      	mov	r6, r0
   2f02e:	2800      	cmp	r0, #0
   2f030:	d0c7      	beq.n	2efc2 <compute_and_check_and_send_periph_dhcheck+0x11a>
   2f032:	2110      	movs	r1, #16
   2f034:	3008      	adds	r0, #8
   2f036:	f018 fee5 	bl	47e04 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2f03a:	2210      	movs	r2, #16
   2f03c:	a914      	add	r1, sp, #80	; 0x50
   2f03e:	f015 ff3f 	bl	44ec0 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2f042:	4631      	mov	r1, r6
   2f044:	4620      	mov	r0, r4
   2f046:	f018 fa35 	bl	474b4 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2f04a:	1d20      	adds	r0, r4, #4
   2f04c:	2101      	movs	r1, #1
   2f04e:	f018 facc 	bl	475ea <atomic_set_bit>
	return 0;
   2f052:	4628      	mov	r0, r5
}
   2f054:	b023      	add	sp, #140	; 0x8c
   2f056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   2f05a:	f015 ff3c 	bl	44ed6 <memset>
   2f05e:	e7c6      	b.n	2efee <compute_and_check_and_send_periph_dhcheck+0x146>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2f060:	200b      	movs	r0, #11
   2f062:	e7f7      	b.n	2f054 <compute_and_check_and_send_periph_dhcheck+0x1ac>
   2f064:	00049c04 	.word	0x00049c04
   2f068:	0004b94e 	.word	0x0004b94e

0002f06c <smp_send_pairing_confirm>:
{
   2f06c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   2f06e:	7a04      	ldrb	r4, [r0, #8]
   2f070:	2c02      	cmp	r4, #2
{
   2f072:	4605      	mov	r5, r0
	switch (smp->method) {
   2f074:	d823      	bhi.n	2f0be <smp_send_pairing_confirm+0x52>
   2f076:	b144      	cbz	r4, 2f08a <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2f078:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   2f07c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   2f080:	40dc      	lsrs	r4, r3
   2f082:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   2f086:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2f08a:	2103      	movs	r1, #3
   2f08c:	4628      	mov	r0, r5
   2f08e:	f018 fb0f 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!buf) {
   2f092:	4606      	mov	r6, r0
   2f094:	b1a8      	cbz	r0, 2f0c2 <smp_send_pairing_confirm+0x56>
   2f096:	2110      	movs	r1, #16
   2f098:	3008      	adds	r0, #8
   2f09a:	f018 feb3 	bl	47e04 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   2f09e:	9000      	str	r0, [sp, #0]
   2f0a0:	480f      	ldr	r0, [pc, #60]	; (2f0e0 <smp_send_pairing_confirm+0x74>)
   2f0a2:	4623      	mov	r3, r4
   2f0a4:	6800      	ldr	r0, [r0, #0]
   2f0a6:	f105 0227 	add.w	r2, r5, #39	; 0x27
   2f0aa:	f105 0157 	add.w	r1, r5, #87	; 0x57
   2f0ae:	f018 fa77 	bl	475a0 <smp_f4>
   2f0b2:	4604      	mov	r4, r0
   2f0b4:	b148      	cbz	r0, 2f0ca <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2f0b6:	4630      	mov	r0, r6
   2f0b8:	f00e f96a 	bl	3d390 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2f0bc:	e001      	b.n	2f0c2 <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   2f0be:	2c03      	cmp	r4, #3
   2f0c0:	d001      	beq.n	2f0c6 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
   2f0c2:	2008      	movs	r0, #8
   2f0c4:	e00a      	b.n	2f0dc <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
   2f0c6:	2400      	movs	r4, #0
   2f0c8:	e7df      	b.n	2f08a <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   2f0ca:	4631      	mov	r1, r6
   2f0cc:	4628      	mov	r0, r5
   2f0ce:	f018 f9f1 	bl	474b4 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2f0d2:	1d28      	adds	r0, r5, #4
   2f0d4:	4621      	mov	r1, r4
   2f0d6:	f018 f9c0 	bl	4745a <atomic_clear_bit>
	return 0;
   2f0da:	4620      	mov	r0, r4
}
   2f0dc:	b002      	add	sp, #8
   2f0de:	bd70      	pop	{r4, r5, r6, pc}
   2f0e0:	20001d48 	.word	0x20001d48

0002f0e4 <smp_public_key_periph>:
{
   2f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2f0e8:	1d06      	adds	r6, r0, #4
{
   2f0ea:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2f0ec:	210e      	movs	r1, #14
   2f0ee:	4630      	mov	r0, r6
   2f0f0:	f018 fa95 	bl	4761e <atomic_test_bit>
   2f0f4:	b138      	cbz	r0, 2f106 <smp_public_key_periph+0x22>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   2f0f6:	210c      	movs	r1, #12
   2f0f8:	4620      	mov	r0, r4
   2f0fa:	f018 fad9 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2f0fe:	4605      	mov	r5, r0
   2f100:	b958      	cbnz	r0, 2f11a <smp_public_key_periph+0x36>
	switch (smp->method) {
   2f102:	2008      	movs	r0, #8
   2f104:	e03a      	b.n	2f17c <smp_public_key_periph+0x98>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   2f106:	4b45      	ldr	r3, [pc, #276]	; (2f21c <smp_public_key_periph+0x138>)
   2f108:	2220      	movs	r2, #32
   2f10a:	6819      	ldr	r1, [r3, #0]
   2f10c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2f110:	f015 fec5 	bl	44e9e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2f114:	2800      	cmp	r0, #0
   2f116:	d1ee      	bne.n	2f0f6 <smp_public_key_periph+0x12>
   2f118:	e7f3      	b.n	2f102 <smp_public_key_periph+0x1e>
   2f11a:	2140      	movs	r1, #64	; 0x40
   2f11c:	3008      	adds	r0, #8
   2f11e:	f018 fe71 	bl	47e04 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   2f122:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2f21c <smp_public_key_periph+0x138>
   2f126:	2220      	movs	r2, #32
   2f128:	f8d8 1000 	ldr.w	r1, [r8]
   2f12c:	4607      	mov	r7, r0
   2f12e:	f015 fec7 	bl	44ec0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   2f132:	f8d8 1000 	ldr.w	r1, [r8]
   2f136:	2220      	movs	r2, #32
   2f138:	4411      	add	r1, r2
   2f13a:	18b8      	adds	r0, r7, r2
   2f13c:	f015 fec0 	bl	44ec0 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   2f140:	4629      	mov	r1, r5
   2f142:	4620      	mov	r0, r4
   2f144:	f018 f9b6 	bl	474b4 <smp_send.constprop.0>
	switch (smp->method) {
   2f148:	7a23      	ldrb	r3, [r4, #8]
   2f14a:	2b05      	cmp	r3, #5
   2f14c:	d8d9      	bhi.n	2f102 <smp_public_key_periph+0x1e>
   2f14e:	a201      	add	r2, pc, #4	; (adr r2, 2f154 <smp_public_key_periph+0x70>)
   2f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2f154:	0002f16d 	.word	0x0002f16d
   2f158:	0002f1d5 	.word	0x0002f1d5
   2f15c:	0002f181 	.word	0x0002f181
   2f160:	0002f16d 	.word	0x0002f16d
   2f164:	0002f103 	.word	0x0002f103
   2f168:	0002f211 	.word	0x0002f211
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f16c:	2104      	movs	r1, #4
   2f16e:	4620      	mov	r0, r4
   2f170:	f018 fa3b 	bl	475ea <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   2f174:	f7ff ff7a 	bl	2f06c <smp_send_pairing_confirm>
		if (err) {
   2f178:	2800      	cmp	r0, #0
   2f17a:	d03c      	beq.n	2f1f6 <smp_public_key_periph+0x112>
}
   2f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   2f180:	2104      	movs	r1, #4
   2f182:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2f186:	f003 fb6b 	bl	32860 <bt_rand>
   2f18a:	2800      	cmp	r0, #0
   2f18c:	d1b9      	bne.n	2f102 <smp_public_key_periph+0x1e>
		smp->passkey %= 1000000;
   2f18e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   2f192:	4a23      	ldr	r2, [pc, #140]	; (2f220 <smp_public_key_periph+0x13c>)
	if (bt_auth && bt_auth->passkey_display) {
   2f194:	4d23      	ldr	r5, [pc, #140]	; (2f224 <smp_public_key_periph+0x140>)
		smp->passkey %= 1000000;
   2f196:	fbb3 f1f2 	udiv	r1, r3, r2
   2f19a:	fb02 3311 	mls	r3, r2, r1, r3
   2f19e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   2f1a2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   2f1a4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   2f1a8:	b163      	cbz	r3, 2f1c4 <smp_public_key_periph+0xe0>
   2f1aa:	685b      	ldr	r3, [r3, #4]
   2f1ac:	b153      	cbz	r3, 2f1c4 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   2f1ae:	210b      	movs	r1, #11
   2f1b0:	4630      	mov	r0, r6
   2f1b2:	f018 fa1a 	bl	475ea <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   2f1b6:	682b      	ldr	r3, [r5, #0]
   2f1b8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   2f1bc:	685b      	ldr	r3, [r3, #4]
   2f1be:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2f1c2:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2f1c4:	2103      	movs	r1, #3
   2f1c6:	4620      	mov	r0, r4
   2f1c8:	f018 fa0f 	bl	475ea <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2f1cc:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f1ce:	f018 fa0c 	bl	475ea <atomic_set_bit>
		break;
   2f1d2:	e010      	b.n	2f1f6 <smp_public_key_periph+0x112>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2f1d4:	4620      	mov	r0, r4
   2f1d6:	2103      	movs	r1, #3
   2f1d8:	f018 fa07 	bl	475ea <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2f1dc:	210e      	movs	r1, #14
   2f1de:	f018 fa04 	bl	475ea <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f1e2:	4630      	mov	r0, r6
   2f1e4:	210a      	movs	r1, #10
   2f1e6:	f018 fa00 	bl	475ea <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   2f1ea:	4b0e      	ldr	r3, [pc, #56]	; (2f224 <smp_public_key_periph+0x140>)
   2f1ec:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2f1f0:	681b      	ldr	r3, [r3, #0]
   2f1f2:	689b      	ldr	r3, [r3, #8]
   2f1f4:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2f1f6:	4630      	mov	r0, r6
   2f1f8:	2107      	movs	r1, #7
   2f1fa:	f018 f9f6 	bl	475ea <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2f1fe:	2008      	movs	r0, #8
   2f200:	f7ff fd70 	bl	2ece4 <smp_find>
   2f204:	b938      	cbnz	r0, 2f216 <smp_public_key_periph+0x132>
		return smp_dhkey_generate(smp);
   2f206:	4620      	mov	r0, r4
}
   2f208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   2f20c:	f7ff bd54 	b.w	2ecb8 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f210:	2104      	movs	r1, #4
   2f212:	4620      	mov	r0, r4
   2f214:	e7db      	b.n	2f1ce <smp_public_key_periph+0xea>
	return 0;
   2f216:	2000      	movs	r0, #0
   2f218:	e7b0      	b.n	2f17c <smp_public_key_periph+0x98>
   2f21a:	bf00      	nop
   2f21c:	20001d48 	.word	0x20001d48
   2f220:	000f4240 	.word	0x000f4240
   2f224:	20001cac 	.word	0x20001cac

0002f228 <smp_public_key>:
{
   2f228:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   2f22a:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2f22c:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   2f230:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2f232:	2220      	movs	r2, #32
   2f234:	4631      	mov	r1, r6
   2f236:	4628      	mov	r0, r5
   2f238:	f015 fe42 	bl	44ec0 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   2f23c:	2220      	movs	r2, #32
   2f23e:	18b1      	adds	r1, r6, r2
   2f240:	f104 0077 	add.w	r0, r4, #119	; 0x77
   2f244:	f015 fe3c 	bl	44ec0 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   2f248:	4628      	mov	r0, r5
   2f24a:	f7fd f93b 	bl	2c4c4 <bt_pub_key_is_debug>
   2f24e:	b940      	cbnz	r0, 2f262 <smp_public_key+0x3a>
	if (!sc_public_key) {
   2f250:	4b15      	ldr	r3, [pc, #84]	; (2f2a8 <smp_public_key+0x80>)
   2f252:	681d      	ldr	r5, [r3, #0]
   2f254:	bb1d      	cbnz	r5, 2f29e <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   2f256:	1d20      	adds	r0, r4, #4
   2f258:	2106      	movs	r1, #6
   2f25a:	f018 f9c6 	bl	475ea <atomic_set_bit>
		return 0;
   2f25e:	4628      	mov	r0, r5
   2f260:	e01c      	b.n	2f29c <smp_public_key+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   2f262:	210e      	movs	r1, #14
   2f264:	1d20      	adds	r0, r4, #4
   2f266:	f018 f9c0 	bl	475ea <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   2f26a:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   2f26e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f272:	b933      	cbnz	r3, 2f282 <smp_public_key+0x5a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f274:	7a28      	ldrb	r0, [r5, #8]
   2f276:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2f27a:	f000 fb79 	bl	2f970 <bt_keys_get_addr>
   2f27e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   2f282:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f286:	2b00      	cmp	r3, #0
   2f288:	d0e2      	beq.n	2f250 <smp_public_key+0x28>
   2f28a:	89da      	ldrh	r2, [r3, #14]
   2f28c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2f290:	2a00      	cmp	r2, #0
   2f292:	d0dd      	beq.n	2f250 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2f294:	7b5b      	ldrb	r3, [r3, #13]
   2f296:	079b      	lsls	r3, r3, #30
   2f298:	d4da      	bmi.n	2f250 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f29a:	2003      	movs	r0, #3
}
   2f29c:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   2f29e:	4620      	mov	r0, r4
}
   2f2a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   2f2a4:	f7ff bf1e 	b.w	2f0e4 <smp_public_key_periph>
   2f2a8:	20001d48 	.word	0x20001d48

0002f2ac <bt_smp_connected>:
{
   2f2ac:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   2f2ae:	4905      	ldr	r1, [pc, #20]	; (2f2c4 <bt_smp_connected+0x18>)
   2f2b0:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   2f2b4:	30e8      	adds	r0, #232	; 0xe8
   2f2b6:	f019 fe9b 	bl	48ff0 <k_work_init_delayable>
	smp_reset(smp);
   2f2ba:	4620      	mov	r0, r4
}
   2f2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   2f2c0:	f018 ba97 	b.w	477f2 <smp_reset>
   2f2c4:	00047b89 	.word	0x00047b89

0002f2c8 <smp_pairing_req>:
{
   2f2c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   2f2cc:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f2ce:	78eb      	ldrb	r3, [r5, #3]
   2f2d0:	3b07      	subs	r3, #7
   2f2d2:	2b09      	cmp	r3, #9
{
   2f2d4:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f2d6:	d904      	bls.n	2f2e2 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   2f2d8:	2506      	movs	r5, #6
}
   2f2da:	4628      	mov	r0, r5
   2f2dc:	b002      	add	sp, #8
   2f2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   2f2e2:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   2f2e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2f2ea:	b15b      	cbz	r3, 2f304 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f2ec:	1d26      	adds	r6, r4, #4
   2f2ee:	210f      	movs	r1, #15
   2f2f0:	4630      	mov	r0, r6
   2f2f2:	f018 f994 	bl	4761e <atomic_test_bit>
   2f2f6:	b980      	cbnz	r0, 2f31a <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   2f2f8:	4620      	mov	r0, r4
   2f2fa:	f7ff fcc1 	bl	2ec80 <smp_init>
		if (ret) {
   2f2fe:	b160      	cbz	r0, 2f31a <smp_pairing_req+0x52>
			return ret;
   2f300:	b2c5      	uxtb	r5, r0
   2f302:	e7ea      	b.n	2f2da <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f304:	7a38      	ldrb	r0, [r7, #8]
   2f306:	f107 0188 	add.w	r1, r7, #136	; 0x88
   2f30a:	f000 fb31 	bl	2f970 <bt_keys_get_addr>
   2f30e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   2f312:	2800      	cmp	r0, #0
   2f314:	d1ea      	bne.n	2f2ec <smp_pairing_req+0x24>
	switch (sec) {
   2f316:	2508      	movs	r5, #8
   2f318:	e7df      	b.n	2f2da <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f31a:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f31c:	2206      	movs	r2, #6
   2f31e:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f320:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f322:	f104 000a 	add.w	r0, r4, #10
   2f326:	f015 fdcb 	bl	44ec0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   2f32a:	2302      	movs	r3, #2
   2f32c:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   2f32e:	78a8      	ldrb	r0, [r5, #2]
   2f330:	f7ff fc88 	bl	2ec44 <get_auth.constprop.0>
   2f334:	74e0      	strb	r0, [r4, #19]
   2f336:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   2f338:	f7ff fc4c 	bl	2ebd4 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f33c:	4b6f      	ldr	r3, [pc, #444]	; (2f4fc <smp_pairing_req+0x234>)
	rsp->io_capability = get_io_capa();
   2f33e:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f340:	781b      	ldrb	r3, [r3, #0]
   2f342:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   2f344:	2310      	movs	r3, #16
   2f346:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   2f348:	792b      	ldrb	r3, [r5, #4]
   2f34a:	f003 0303 	and.w	r3, r3, #3
   2f34e:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f350:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f352:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f356:	f003 0301 	and.w	r3, r3, #1
   2f35a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f35c:	d00c      	beq.n	2f378 <smp_pairing_req+0xb0>
   2f35e:	78ab      	ldrb	r3, [r5, #2]
   2f360:	071b      	lsls	r3, r3, #28
   2f362:	d509      	bpl.n	2f378 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   2f364:	2105      	movs	r1, #5
   2f366:	4630      	mov	r0, r6
   2f368:	f018 f93f 	bl	475ea <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   2f36c:	7d63      	ldrb	r3, [r4, #21]
   2f36e:	f003 0302 	and.w	r3, r3, #2
   2f372:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   2f374:	2300      	movs	r3, #0
   2f376:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   2f378:	7ce3      	ldrb	r3, [r4, #19]
   2f37a:	0698      	lsls	r0, r3, #26
   2f37c:	d506      	bpl.n	2f38c <smp_pairing_req+0xc4>
   2f37e:	78ab      	ldrb	r3, [r5, #2]
   2f380:	0699      	lsls	r1, r3, #26
   2f382:	d503      	bpl.n	2f38c <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   2f384:	2114      	movs	r1, #20
   2f386:	4630      	mov	r0, r6
   2f388:	f018 f92f 	bl	475ea <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   2f38c:	7da3      	ldrb	r3, [r4, #22]
   2f38e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   2f392:	7d63      	ldrb	r3, [r4, #21]
   2f394:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   2f398:	7ce3      	ldrb	r3, [r4, #19]
   2f39a:	07da      	lsls	r2, r3, #31
   2f39c:	d506      	bpl.n	2f3ac <smp_pairing_req+0xe4>
   2f39e:	78ab      	ldrb	r3, [r5, #2]
   2f3a0:	07db      	lsls	r3, r3, #31
   2f3a2:	d503      	bpl.n	2f3ac <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   2f3a4:	210d      	movs	r1, #13
   2f3a6:	4630      	mov	r0, r6
   2f3a8:	f018 f91f 	bl	475ea <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   2f3ac:	2103      	movs	r1, #3
   2f3ae:	4630      	mov	r0, r6
   2f3b0:	f018 f91b 	bl	475ea <atomic_set_bit>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f3b4:	7b23      	ldrb	r3, [r4, #12]
   2f3b6:	7ce1      	ldrb	r1, [r4, #19]
	smp->method = get_pair_method(smp, req->io_capability);
   2f3b8:	f895 8000 	ldrb.w	r8, [r5]
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f3bc:	ea03 0201 	and.w	r2, r3, r1
   2f3c0:	0710      	lsls	r0, r2, #28
   2f3c2:	d504      	bpl.n	2f3ce <smp_pairing_req+0x106>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2f3c4:	7ae2      	ldrb	r2, [r4, #11]
   2f3c6:	7ca0      	ldrb	r0, [r4, #18]
   2f3c8:	4302      	orrs	r2, r0
   2f3ca:	07d2      	lsls	r2, r2, #31
   2f3cc:	d417      	bmi.n	2f3fe <smp_pairing_req+0x136>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2f3ce:	f1b8 0f04 	cmp.w	r8, #4
   2f3d2:	d816      	bhi.n	2f402 <smp_pairing_req+0x13a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   2f3d4:	430b      	orrs	r3, r1
   2f3d6:	f013 0304 	ands.w	r3, r3, #4
   2f3da:	d007      	beq.n	2f3ec <smp_pairing_req+0x124>
	return gen_method_sc[remote_io][get_io_capa()];
   2f3dc:	f7ff fbfa 	bl	2ebd4 <get_io_capa>
   2f3e0:	4b47      	ldr	r3, [pc, #284]	; (2f500 <smp_pairing_req+0x238>)
   2f3e2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2f3e6:	4498      	add	r8, r3
   2f3e8:	f818 3000 	ldrb.w	r3, [r8, r0]
	smp->method = get_pair_method(smp, req->io_capability);
   2f3ec:	7223      	strb	r3, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   2f3ee:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2f3f2:	4620      	mov	r0, r4
   2f3f4:	f018 f91c 	bl	47630 <update_keys_check>
   2f3f8:	b928      	cbnz	r0, 2f406 <smp_pairing_req+0x13e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f3fa:	2503      	movs	r5, #3
   2f3fc:	e76d      	b.n	2f2da <smp_pairing_req+0x12>
			return LE_SC_OOB;
   2f3fe:	2305      	movs	r3, #5
   2f400:	e7f4      	b.n	2f3ec <smp_pairing_req+0x124>
		return JUST_WORKS;
   2f402:	2300      	movs	r3, #0
   2f404:	e7f2      	b.n	2f3ec <smp_pairing_req+0x124>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2f406:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2f40a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2f40c:	2b03      	cmp	r3, #3
   2f40e:	d056      	beq.n	2f4be <smp_pairing_req+0x1f6>
   2f410:	d844      	bhi.n	2f49c <smp_pairing_req+0x1d4>
   2f412:	3b01      	subs	r3, #1
   2f414:	2b01      	cmp	r3, #1
   2f416:	f63f af7e 	bhi.w	2f316 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f41a:	2105      	movs	r1, #5
   2f41c:	4630      	mov	r0, r6
   2f41e:	f018 f8fe 	bl	4761e <atomic_test_bit>
   2f422:	2800      	cmp	r0, #0
   2f424:	d0e9      	beq.n	2f3fa <smp_pairing_req+0x132>
	if (bt_auth && bt_auth->pairing_accept) {
   2f426:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2f504 <smp_pairing_req+0x23c>
   2f42a:	f8d8 3000 	ldr.w	r3, [r8]
   2f42e:	b1fb      	cbz	r3, 2f470 <smp_pairing_req+0x1a8>
   2f430:	681b      	ldr	r3, [r3, #0]
   2f432:	b1eb      	cbz	r3, 2f470 <smp_pairing_req+0x1a8>
		const struct bt_conn_pairing_feat feat = {
   2f434:	782a      	ldrb	r2, [r5, #0]
   2f436:	f88d 2000 	strb.w	r2, [sp]
   2f43a:	786a      	ldrb	r2, [r5, #1]
   2f43c:	f88d 2001 	strb.w	r2, [sp, #1]
   2f440:	78aa      	ldrb	r2, [r5, #2]
   2f442:	f88d 2002 	strb.w	r2, [sp, #2]
   2f446:	78ea      	ldrb	r2, [r5, #3]
   2f448:	f88d 2003 	strb.w	r2, [sp, #3]
   2f44c:	792a      	ldrb	r2, [r5, #4]
   2f44e:	f88d 2004 	strb.w	r2, [sp, #4]
   2f452:	796a      	ldrb	r2, [r5, #5]
   2f454:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   2f458:	4669      	mov	r1, sp
   2f45a:	4638      	mov	r0, r7
   2f45c:	4798      	blx	r3
	switch (auth_err) {
   2f45e:	3801      	subs	r0, #1
   2f460:	b2c0      	uxtb	r0, r0
   2f462:	2808      	cmp	r0, #8
   2f464:	d804      	bhi.n	2f470 <smp_pairing_req+0x1a8>
   2f466:	4b28      	ldr	r3, [pc, #160]	; (2f508 <smp_pairing_req+0x240>)
   2f468:	5c1d      	ldrb	r5, [r3, r0]
		if (err) {
   2f46a:	2d00      	cmp	r5, #0
   2f46c:	f47f af35 	bne.w	2f2da <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2f470:	7a25      	ldrb	r5, [r4, #8]
   2f472:	bb45      	cbnz	r5, 2f4c6 <smp_pairing_req+0x1fe>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2f474:	210f      	movs	r1, #15
   2f476:	4630      	mov	r0, r6
   2f478:	f018 f8d1 	bl	4761e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2f47c:	bb18      	cbnz	r0, 2f4c6 <smp_pairing_req+0x1fe>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2f47e:	f8d8 3000 	ldr.w	r3, [r8]
   2f482:	b303      	cbz	r3, 2f4c6 <smp_pairing_req+0x1fe>
	    bt_auth && bt_auth->pairing_confirm) {
   2f484:	699b      	ldr	r3, [r3, #24]
   2f486:	b1f3      	cbz	r3, 2f4c6 <smp_pairing_req+0x1fe>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f488:	4630      	mov	r0, r6
   2f48a:	210a      	movs	r1, #10
   2f48c:	f018 f8ad 	bl	475ea <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   2f490:	f8d8 3000 	ldr.w	r3, [r8]
   2f494:	4638      	mov	r0, r7
   2f496:	699b      	ldr	r3, [r3, #24]
   2f498:	4798      	blx	r3
		return 0;
   2f49a:	e71e      	b.n	2f2da <smp_pairing_req+0x12>
	switch (sec) {
   2f49c:	2b04      	cmp	r3, #4
   2f49e:	f47f af3a 	bne.w	2f316 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2f4a2:	7d23      	ldrb	r3, [r4, #20]
   2f4a4:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2f4a6:	4293      	cmp	r3, r2
   2f4a8:	bf28      	it	cs
   2f4aa:	4613      	movcs	r3, r2
   2f4ac:	2b10      	cmp	r3, #16
   2f4ae:	f47f af13 	bne.w	2f2d8 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f4b2:	2105      	movs	r1, #5
   2f4b4:	4630      	mov	r0, r6
   2f4b6:	f018 f8b2 	bl	4761e <atomic_test_bit>
   2f4ba:	2800      	cmp	r0, #0
   2f4bc:	d09d      	beq.n	2f3fa <smp_pairing_req+0x132>
		if (smp->method == JUST_WORKS) {
   2f4be:	7a23      	ldrb	r3, [r4, #8]
   2f4c0:	2b00      	cmp	r3, #0
   2f4c2:	d1aa      	bne.n	2f41a <smp_pairing_req+0x152>
   2f4c4:	e799      	b.n	2f3fa <smp_pairing_req+0x132>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   2f4c6:	210c      	movs	r1, #12
   2f4c8:	4620      	mov	r0, r4
   2f4ca:	f018 f88e 	bl	475ea <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2f4ce:	2102      	movs	r1, #2
   2f4d0:	f018 f8ee 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2f4d4:	4605      	mov	r5, r0
   2f4d6:	2800      	cmp	r0, #0
   2f4d8:	f43f af1d 	beq.w	2f316 <smp_pairing_req+0x4e>
   2f4dc:	2106      	movs	r1, #6
   2f4de:	3008      	adds	r0, #8
   2f4e0:	f018 fc90 	bl	47e04 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2f4e4:	2206      	movs	r2, #6
   2f4e6:	f104 0111 	add.w	r1, r4, #17
   2f4ea:	f015 fce9 	bl	44ec0 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2f4ee:	4629      	mov	r1, r5
   2f4f0:	4620      	mov	r0, r4
   2f4f2:	f017 ffdf 	bl	474b4 <smp_send.constprop.0>
	return 0;
   2f4f6:	2500      	movs	r5, #0
   2f4f8:	e6ef      	b.n	2f2da <smp_pairing_req+0x12>
   2f4fa:	bf00      	nop
   2f4fc:	20003c67 	.word	0x20003c67
   2f500:	0004b935 	.word	0x0004b935
   2f504:	20001cac 	.word	0x20001cac
   2f508:	0004b924 	.word	0x0004b924

0002f50c <bt_smp_start_security>:
{
   2f50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2f510:	78c4      	ldrb	r4, [r0, #3]
   2f512:	2c01      	cmp	r4, #1
{
   2f514:	4605      	mov	r5, r0
	switch (conn->role) {
   2f516:	d005      	beq.n	2f524 <bt_smp_start_security+0x18>
		return -EINVAL;
   2f518:	f06f 0415 	mvn.w	r4, #21
}
   2f51c:	4620      	mov	r0, r4
   2f51e:	b003      	add	sp, #12
   2f520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   2f524:	f017 ff92 	bl	4744c <smp_chan_get>
	if (!smp) {
   2f528:	4606      	mov	r6, r0
   2f52a:	2800      	cmp	r0, #0
   2f52c:	f000 80a4 	beq.w	2f678 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f530:	1d07      	adds	r7, r0, #4
   2f532:	2104      	movs	r1, #4
   2f534:	4638      	mov	r0, r7
   2f536:	f018 f872 	bl	4761e <atomic_test_bit>
   2f53a:	2800      	cmp	r0, #0
   2f53c:	f040 809f 	bne.w	2f67e <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f540:	2103      	movs	r1, #3
   2f542:	4638      	mov	r0, r7
   2f544:	f018 f86b 	bl	4761e <atomic_test_bit>
   2f548:	b110      	cbz	r0, 2f550 <bt_smp_start_security+0x44>
		return -EBUSY;
   2f54a:	f06f 040f 	mvn.w	r4, #15
   2f54e:	e7e5      	b.n	2f51c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f550:	4621      	mov	r1, r4
   2f552:	4638      	mov	r0, r7
   2f554:	f018 f863 	bl	4761e <atomic_test_bit>
   2f558:	2800      	cmp	r0, #0
   2f55a:	d1f6      	bne.n	2f54a <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2f55c:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   2f55e:	2b03      	cmp	r3, #3
   2f560:	d03d      	beq.n	2f5de <bt_smp_start_security+0xd2>
   2f562:	d82c      	bhi.n	2f5be <bt_smp_start_security+0xb2>
   2f564:	3b01      	subs	r3, #1
   2f566:	2b01      	cmp	r3, #1
   2f568:	d946      	bls.n	2f5f8 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2f56a:	210b      	movs	r1, #11
   2f56c:	1d28      	adds	r0, r5, #4
   2f56e:	f018 f856 	bl	4761e <atomic_test_bit>
   2f572:	2800      	cmp	r0, #0
   2f574:	d1d0      	bne.n	2f518 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   2f576:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f57a:	b983      	cbnz	r3, 2f59e <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   2f57c:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2f580:	7a29      	ldrb	r1, [r5, #8]
   2f582:	4622      	mov	r2, r4
   2f584:	2020      	movs	r0, #32
   2f586:	f000 fa33 	bl	2f9f0 <bt_keys_find>
   2f58a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   2f58e:	b930      	cbnz	r0, 2f59e <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2f590:	7a29      	ldrb	r1, [r5, #8]
   2f592:	4622      	mov	r2, r4
   2f594:	2004      	movs	r0, #4
   2f596:	f000 fa2b 	bl	2f9f0 <bt_keys_find>
   2f59a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   2f59e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f5a2:	2b00      	cmp	r3, #0
   2f5a4:	d0b8      	beq.n	2f518 <bt_smp_start_security+0xc>
   2f5a6:	89da      	ldrh	r2, [r3, #14]
   2f5a8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2f5ac:	2a00      	cmp	r2, #0
   2f5ae:	d0b3      	beq.n	2f518 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2f5b0:	7aaa      	ldrb	r2, [r5, #10]
   2f5b2:	2a02      	cmp	r2, #2
   2f5b4:	d920      	bls.n	2f5f8 <bt_smp_start_security+0xec>
   2f5b6:	7b5b      	ldrb	r3, [r3, #13]
   2f5b8:	07db      	lsls	r3, r3, #31
   2f5ba:	d5ad      	bpl.n	2f518 <bt_smp_start_security+0xc>
   2f5bc:	e01c      	b.n	2f5f8 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
   2f5be:	2b04      	cmp	r3, #4
   2f5c0:	d1d3      	bne.n	2f56a <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f5c2:	f7ff fb07 	bl	2ebd4 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f5c6:	2803      	cmp	r0, #3
   2f5c8:	d104      	bne.n	2f5d4 <bt_smp_start_security+0xc8>
   2f5ca:	4b2e      	ldr	r3, [pc, #184]	; (2f684 <bt_smp_start_security+0x178>)
   2f5cc:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f5ce:	b1f3      	cbz	r3, 2f60e <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f5d0:	691c      	ldr	r4, [r3, #16]
   2f5d2:	b10c      	cbz	r4, 2f5d8 <bt_smp_start_security+0xcc>
   2f5d4:	4b2c      	ldr	r3, [pc, #176]	; (2f688 <bt_smp_start_security+0x17c>)
   2f5d6:	781c      	ldrb	r4, [r3, #0]
   2f5d8:	f004 0401 	and.w	r4, r4, #1
   2f5dc:	e00a      	b.n	2f5f4 <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f5de:	f7ff faf9 	bl	2ebd4 <get_io_capa>
   2f5e2:	2803      	cmp	r0, #3
   2f5e4:	d106      	bne.n	2f5f4 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   2f5e6:	4b27      	ldr	r3, [pc, #156]	; (2f684 <bt_smp_start_security+0x178>)
   2f5e8:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f5ea:	b11c      	cbz	r4, 2f5f4 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   2f5ec:	6924      	ldr	r4, [r4, #16]
   2f5ee:	3c00      	subs	r4, #0
   2f5f0:	bf18      	it	ne
   2f5f2:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2f5f4:	2c00      	cmp	r4, #0
   2f5f6:	d0b8      	beq.n	2f56a <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   2f5f8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f5fc:	b14b      	cbz	r3, 2f612 <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
   2f5fe:	4630      	mov	r0, r6
   2f600:	f7ff fb3e 	bl	2ec80 <smp_init>
   2f604:	4604      	mov	r4, r0
   2f606:	b180      	cbz	r0, 2f62a <bt_smp_start_security+0x11e>
		return -ENOBUFS;
   2f608:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f60c:	e786      	b.n	2f51c <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f60e:	2400      	movs	r4, #0
   2f610:	e7e2      	b.n	2f5d8 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f612:	7a28      	ldrb	r0, [r5, #8]
   2f614:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2f618:	f000 f9aa 	bl	2f970 <bt_keys_get_addr>
   2f61c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   2f620:	2800      	cmp	r0, #0
   2f622:	d1ec      	bne.n	2f5fe <bt_smp_start_security+0xf2>
			return -ENOMEM;
   2f624:	f06f 040b 	mvn.w	r4, #11
   2f628:	e778      	b.n	2f51c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2f62a:	210b      	movs	r1, #11
   2f62c:	4630      	mov	r0, r6
   2f62e:	f018 f83f 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2f632:	4680      	mov	r8, r0
   2f634:	2800      	cmp	r0, #0
   2f636:	d0e7      	beq.n	2f608 <bt_smp_start_security+0xfc>
   2f638:	2101      	movs	r1, #1
   2f63a:	3008      	adds	r0, #8
   2f63c:	f018 fbe2 	bl	47e04 <net_buf_simple_add>
   2f640:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2f642:	2009      	movs	r0, #9
   2f644:	f7ff fafe 	bl	2ec44 <get_auth.constprop.0>
   2f648:	4623      	mov	r3, r4
   2f64a:	f889 0000 	strb.w	r0, [r9]
   2f64e:	4642      	mov	r2, r8
   2f650:	9400      	str	r4, [sp, #0]
   2f652:	2106      	movs	r1, #6
   2f654:	4628      	mov	r0, r5
   2f656:	f016 fd53 	bl	46100 <bt_l2cap_send_cb>
	if (err) {
   2f65a:	4604      	mov	r4, r0
   2f65c:	b118      	cbz	r0, 2f666 <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
   2f65e:	4640      	mov	r0, r8
   2f660:	f00d fe96 	bl	3d390 <net_buf_unref>
		return err;
   2f664:	e75a      	b.n	2f51c <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   2f666:	4638      	mov	r0, r7
   2f668:	210f      	movs	r1, #15
   2f66a:	f017 ffbe 	bl	475ea <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2f66e:	2101      	movs	r1, #1
   2f670:	4630      	mov	r0, r6
   2f672:	f017 ffba 	bl	475ea <atomic_set_bit>
	return 0;
   2f676:	e751      	b.n	2f51c <bt_smp_start_security+0x10>
		return -ENOTCONN;
   2f678:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2f67c:	e74e      	b.n	2f51c <bt_smp_start_security+0x10>
		return -EIO;
   2f67e:	f06f 0404 	mvn.w	r4, #4
   2f682:	e74b      	b.n	2f51c <bt_smp_start_security+0x10>
   2f684:	20001cac 	.word	0x20001cac
   2f688:	20003c68 	.word	0x20003c68

0002f68c <smp_pairing_complete>:
{
   2f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2f68e:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   2f692:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2f694:	1d07      	adds	r7, r0, #4
	if (!status) {
   2f696:	b9e9      	cbnz	r1, 2f6d4 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2f698:	210d      	movs	r1, #13
   2f69a:	4638      	mov	r0, r7
   2f69c:	f017 ffbf 	bl	4761e <atomic_test_bit>
		if (bond_flag) {
   2f6a0:	4606      	mov	r6, r0
   2f6a2:	b118      	cbz	r0, 2f6ac <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   2f6a4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2f6a8:	f000 fa28 	bl	2fafc <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   2f6ac:	4b24      	ldr	r3, [pc, #144]	; (2f740 <smp_pairing_complete+0xb4>)
   2f6ae:	681b      	ldr	r3, [r3, #0]
   2f6b0:	b123      	cbz	r3, 2f6bc <smp_pairing_complete+0x30>
   2f6b2:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   2f6b4:	b113      	cbz	r3, 2f6bc <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   2f6b6:	4631      	mov	r1, r6
   2f6b8:	4620      	mov	r0, r4
   2f6ba:	4798      	blx	r3
	smp_reset(smp);
   2f6bc:	4628      	mov	r0, r5
   2f6be:	f018 f898 	bl	477f2 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   2f6c2:	7a62      	ldrb	r2, [r4, #9]
   2f6c4:	7aa3      	ldrb	r3, [r4, #10]
   2f6c6:	429a      	cmp	r2, r3
   2f6c8:	d039      	beq.n	2f73e <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   2f6ca:	4620      	mov	r0, r4
}
   2f6cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   2f6d0:	f7ff bf1c 	b.w	2f50c <bt_smp_start_security>
	switch (smp_err) {
   2f6d4:	3901      	subs	r1, #1
   2f6d6:	b2c9      	uxtb	r1, r1
   2f6d8:	290e      	cmp	r1, #14
   2f6da:	bf9c      	itt	ls
   2f6dc:	4b19      	ldrls	r3, [pc, #100]	; (2f744 <smp_pairing_complete+0xb8>)
   2f6de:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   2f6e0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   2f6e4:	bf88      	it	hi
   2f6e6:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   2f6e8:	b143      	cbz	r3, 2f6fc <smp_pairing_complete+0x70>
   2f6ea:	7b1b      	ldrb	r3, [r3, #12]
   2f6ec:	bb03      	cbnz	r3, 2f730 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   2f6ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2f6f2:	f000 f9db 	bl	2faac <bt_keys_clear>
			conn->le.keys = NULL;
   2f6f6:	2300      	movs	r3, #0
   2f6f8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2f6fc:	2102      	movs	r1, #2
   2f6fe:	4638      	mov	r0, r7
   2f700:	f017 ff8d 	bl	4761e <atomic_test_bit>
   2f704:	b940      	cbnz	r0, 2f718 <smp_pairing_complete+0x8c>
	switch (err) {
   2f706:	2e07      	cmp	r6, #7
   2f708:	bf96      	itet	ls
   2f70a:	4b0f      	ldrls	r3, [pc, #60]	; (2f748 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2f70c:	211f      	movhi	r1, #31
   2f70e:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   2f710:	4632      	mov	r2, r6
   2f712:	4620      	mov	r0, r4
   2f714:	f7fd fade 	bl	2ccd4 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2f718:	2103      	movs	r1, #3
   2f71a:	4638      	mov	r0, r7
   2f71c:	f017 ff7f 	bl	4761e <atomic_test_bit>
   2f720:	2800      	cmp	r0, #0
   2f722:	d0cb      	beq.n	2f6bc <smp_pairing_complete+0x30>
   2f724:	4b06      	ldr	r3, [pc, #24]	; (2f740 <smp_pairing_complete+0xb4>)
   2f726:	681b      	ldr	r3, [r3, #0]
   2f728:	2b00      	cmp	r3, #0
   2f72a:	d0c7      	beq.n	2f6bc <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   2f72c:	6a1b      	ldr	r3, [r3, #32]
   2f72e:	e7c1      	b.n	2f6b4 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   2f730:	2102      	movs	r1, #2
   2f732:	4638      	mov	r0, r7
   2f734:	f017 ff73 	bl	4761e <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   2f738:	2800      	cmp	r0, #0
   2f73a:	d1d8      	bne.n	2f6ee <smp_pairing_complete+0x62>
   2f73c:	e7de      	b.n	2f6fc <smp_pairing_complete+0x70>
}
   2f73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f740:	20001cac 	.word	0x20001cac
   2f744:	0004b915 	.word	0x0004b915
   2f748:	0004b92d 	.word	0x0004b92d

0002f74c <bt_smp_recv>:
{
   2f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   2f74e:	898b      	ldrh	r3, [r1, #12]
{
   2f750:	4607      	mov	r7, r0
   2f752:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2f754:	b393      	cbz	r3, 2f7bc <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f756:	2101      	movs	r1, #1
   2f758:	f105 0008 	add.w	r0, r5, #8
   2f75c:	f018 fb79 	bl	47e52 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f760:	2104      	movs	r1, #4
   2f762:	4606      	mov	r6, r0
   2f764:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   2f768:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   2f76c:	f017 ff57 	bl	4761e <atomic_test_bit>
   2f770:	bb20      	cbnz	r0, 2f7bc <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   2f772:	7831      	ldrb	r1, [r6, #0]
   2f774:	290e      	cmp	r1, #14
   2f776:	d821      	bhi.n	2f7bc <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   2f778:	4f11      	ldr	r7, [pc, #68]	; (2f7c0 <bt_smp_recv+0x74>)
   2f77a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   2f77e:	b923      	cbnz	r3, 2f78a <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   2f780:	2107      	movs	r1, #7
		smp_error(smp, err);
   2f782:	4620      	mov	r0, r4
   2f784:	f018 f8dc 	bl	47940 <smp_error>
   2f788:	e018      	b.n	2f7bc <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   2f78a:	4620      	mov	r0, r4
   2f78c:	f018 f819 	bl	477c2 <atomic_test_and_clear_bit>
   2f790:	7833      	ldrb	r3, [r6, #0]
   2f792:	b918      	cbnz	r0, 2f79c <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   2f794:	2b05      	cmp	r3, #5
   2f796:	d011      	beq.n	2f7bc <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2f798:	2108      	movs	r1, #8
   2f79a:	e7f2      	b.n	2f782 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   2f79c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2f7a0:	89a9      	ldrh	r1, [r5, #12]
   2f7a2:	7912      	ldrb	r2, [r2, #4]
   2f7a4:	4291      	cmp	r1, r2
   2f7a6:	d001      	beq.n	2f7ac <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   2f7a8:	210a      	movs	r1, #10
   2f7aa:	e7ea      	b.n	2f782 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   2f7ac:	4629      	mov	r1, r5
   2f7ae:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   2f7b2:	4620      	mov	r0, r4
   2f7b4:	4798      	blx	r3
	if (err) {
   2f7b6:	4601      	mov	r1, r0
   2f7b8:	2800      	cmp	r0, #0
   2f7ba:	d1e2      	bne.n	2f782 <bt_smp_recv+0x36>
}
   2f7bc:	2000      	movs	r0, #0
   2f7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f7c0:	0004a3c4 	.word	0x0004a3c4

0002f7c4 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   2f7c4:	4b0c      	ldr	r3, [pc, #48]	; (2f7f8 <bt_smp_pkey_ready+0x34>)
{
   2f7c6:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   2f7c8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   2f7ca:	b1a0      	cbz	r0, 2f7f6 <bt_smp_pkey_ready+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f7cc:	4c0b      	ldr	r4, [pc, #44]	; (2f7fc <bt_smp_pkey_ready+0x38>)
	z_impl_k_sem_give(sem);
   2f7ce:	480c      	ldr	r0, [pc, #48]	; (2f800 <bt_smp_pkey_ready+0x3c>)
   2f7d0:	f012 f8a4 	bl	4191c <z_impl_k_sem_give>
   2f7d4:	f3bf 8f5b 	dmb	ish
   2f7d8:	6863      	ldr	r3, [r4, #4]
   2f7da:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   2f7de:	065b      	lsls	r3, r3, #25
   2f7e0:	d509      	bpl.n	2f7f6 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   2f7e2:	4620      	mov	r0, r4
   2f7e4:	f7ff fc7e 	bl	2f0e4 <smp_public_key_periph>
		if (err) {
   2f7e8:	4601      	mov	r1, r0
   2f7ea:	b120      	cbz	r0, 2f7f6 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   2f7ec:	4620      	mov	r0, r4
}
   2f7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   2f7f2:	f018 b8a5 	b.w	47940 <smp_error>
}
   2f7f6:	bd10      	pop	{r4, pc}
   2f7f8:	20001d48 	.word	0x20001d48
   2f7fc:	20001260 	.word	0x20001260
   2f800:	20000bfc 	.word	0x20000bfc

0002f804 <smp_pairing_failed>:
{
   2f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f806:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   2f808:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   2f80c:	688e      	ldr	r6, [r1, #8]
{
   2f80e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f810:	210a      	movs	r1, #10
   2f812:	4628      	mov	r0, r5
   2f814:	f017 ffd5 	bl	477c2 <atomic_test_and_clear_bit>
   2f818:	b140      	cbz	r0, 2f82c <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   2f81a:	4b0b      	ldr	r3, [pc, #44]	; (2f848 <smp_pairing_failed+0x44>)
   2f81c:	681b      	ldr	r3, [r3, #0]
   2f81e:	b963      	cbnz	r3, 2f83a <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   2f820:	4620      	mov	r0, r4
   2f822:	7831      	ldrb	r1, [r6, #0]
   2f824:	f7ff ff32 	bl	2f68c <smp_pairing_complete>
}
   2f828:	2000      	movs	r0, #0
   2f82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   2f82c:	210b      	movs	r1, #11
   2f82e:	4628      	mov	r0, r5
   2f830:	f017 ffc7 	bl	477c2 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f834:	2800      	cmp	r0, #0
   2f836:	d1f0      	bne.n	2f81a <smp_pairing_failed+0x16>
   2f838:	e7f2      	b.n	2f820 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   2f83a:	695b      	ldr	r3, [r3, #20]
   2f83c:	2b00      	cmp	r3, #0
   2f83e:	d0ef      	beq.n	2f820 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   2f840:	4638      	mov	r0, r7
   2f842:	4798      	blx	r3
   2f844:	e7ec      	b.n	2f820 <smp_pairing_failed+0x1c>
   2f846:	bf00      	nop
   2f848:	20001cac 	.word	0x20001cac

0002f84c <bt_smp_encrypt_change>:
{
   2f84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   2f850:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f852:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   2f856:	4604      	mov	r4, r0
   2f858:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f85a:	4630      	mov	r0, r6
   2f85c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   2f85e:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f862:	f017 ffae 	bl	477c2 <atomic_test_and_clear_bit>
   2f866:	2800      	cmp	r0, #0
   2f868:	d059      	beq.n	2f91e <bt_smp_encrypt_change+0xd2>
	if (hci_status) {
   2f86a:	b1cf      	cbz	r7, 2f8a0 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f86c:	2103      	movs	r1, #3
   2f86e:	4630      	mov	r0, r6
   2f870:	f017 fed5 	bl	4761e <atomic_test_bit>
   2f874:	2800      	cmp	r0, #0
   2f876:	d052      	beq.n	2f91e <bt_smp_encrypt_change+0xd2>
			uint8_t smp_err = smp_err_get(
   2f878:	4638      	mov	r0, r7
   2f87a:	f7fb ff35 	bl	2b6e8 <bt_security_err_get>
	switch (auth_err) {
   2f87e:	3801      	subs	r0, #1
   2f880:	b2c0      	uxtb	r0, r0
   2f882:	2808      	cmp	r0, #8
   2f884:	bf9a      	itte	ls
   2f886:	4b2b      	ldrls	r3, [pc, #172]	; (2f934 <bt_smp_encrypt_change+0xe8>)
   2f888:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   2f88a:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2f88c:	2102      	movs	r1, #2
   2f88e:	4630      	mov	r0, r6
   2f890:	f017 feab 	bl	475ea <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   2f894:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   2f896:	4628      	mov	r0, r5
}
   2f898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   2f89c:	f7ff bef6 	b.w	2f68c <smp_pairing_complete>
	if (!conn->encrypt) {
   2f8a0:	f898 300b 	ldrb.w	r3, [r8, #11]
   2f8a4:	2b00      	cmp	r3, #0
   2f8a6:	d03a      	beq.n	2f91e <bt_smp_encrypt_change+0xd2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f8a8:	2103      	movs	r1, #3
   2f8aa:	4630      	mov	r0, r6
   2f8ac:	f017 feb7 	bl	4761e <atomic_test_bit>
   2f8b0:	b920      	cbnz	r0, 2f8bc <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   2f8b2:	4628      	mov	r0, r5
}
   2f8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   2f8b8:	f017 bf9b 	b.w	477f2 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f8bc:	2105      	movs	r1, #5
   2f8be:	4630      	mov	r0, r6
   2f8c0:	f017 fead 	bl	4761e <atomic_test_bit>
   2f8c4:	b1b8      	cbz	r0, 2f8f6 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2f8c6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   2f8ca:	071f      	lsls	r7, r3, #28
   2f8cc:	d507      	bpl.n	2f8de <bt_smp_encrypt_change+0x92>
   2f8ce:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f8d2:	0718      	lsls	r0, r3, #28
   2f8d4:	d503      	bpl.n	2f8de <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   2f8d6:	2111      	movs	r1, #17
   2f8d8:	4630      	mov	r0, r6
   2f8da:	f017 fe86 	bl	475ea <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2f8de:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   2f8e2:	f023 0308 	bic.w	r3, r3, #8
   2f8e6:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2f8ea:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f8ee:	f023 0308 	bic.w	r3, r3, #8
   2f8f2:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2f8f6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f8fa:	07d9      	lsls	r1, r3, #31
   2f8fc:	d511      	bpl.n	2f922 <bt_smp_encrypt_change+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2f8fe:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2f900:	4628      	mov	r0, r5
   2f902:	f017 fe72 	bl	475ea <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2f906:	2102      	movs	r1, #2
   2f908:	4630      	mov	r0, r6
   2f90a:	f017 fe6e 	bl	475ea <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   2f90e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   2f910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   2f914:	b11b      	cbz	r3, 2f91e <bt_smp_encrypt_change+0xd2>
	if (!smp->local_dist && !smp->remote_dist) {
   2f916:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   2f91a:	2900      	cmp	r1, #0
   2f91c:	d0bb      	beq.n	2f896 <bt_smp_encrypt_change+0x4a>
}
   2f91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2f922:	079a      	lsls	r2, r3, #30
   2f924:	d501      	bpl.n	2f92a <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2f926:	2108      	movs	r1, #8
   2f928:	e7ea      	b.n	2f900 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2f92a:	075b      	lsls	r3, r3, #29
   2f92c:	d5eb      	bpl.n	2f906 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2f92e:	210a      	movs	r1, #10
   2f930:	e7e6      	b.n	2f900 <bt_smp_encrypt_change+0xb4>
   2f932:	bf00      	nop
   2f934:	0004b924 	.word	0x0004b924

0002f938 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   2f938:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2f93a:	4b0a      	ldr	r3, [pc, #40]	; (2f964 <bt_smp_init+0x2c>)
   2f93c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f940:	f003 0306 	and.w	r3, r3, #6
   2f944:	2b06      	cmp	r3, #6
   2f946:	4b08      	ldr	r3, [pc, #32]	; (2f968 <bt_smp_init+0x30>)
   2f948:	bf0c      	ite	eq
   2f94a:	2201      	moveq	r2, #1
   2f94c:	2200      	movne	r2, #0
   2f94e:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   2f950:	d104      	bne.n	2f95c <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2f952:	4806      	ldr	r0, [pc, #24]	; (2f96c <bt_smp_init+0x34>)
   2f954:	f7fc fdc2 	bl	2c4dc <bt_pub_key_gen>
	}

	return smp_self_test();
   2f958:	2000      	movs	r0, #0
}
   2f95a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2f95c:	f06f 0001 	mvn.w	r0, #1
   2f960:	e7fb      	b.n	2f95a <bt_smp_init+0x22>
   2f962:	bf00      	nop
   2f964:	20000000 	.word	0x20000000
   2f968:	20003c68 	.word	0x20003c68
   2f96c:	20000434 	.word	0x20000434

0002f970 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2f970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f972:	4d11      	ldr	r5, [pc, #68]	; (2f9b8 <bt_keys_get_addr+0x48>)
   2f974:	782b      	ldrb	r3, [r5, #0]
   2f976:	4283      	cmp	r3, r0
{
   2f978:	4606      	mov	r6, r0
   2f97a:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f97c:	d00b      	beq.n	2f996 <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   2f97e:	2400      	movs	r4, #0
   2f980:	480e      	ldr	r0, [pc, #56]	; (2f9bc <bt_keys_get_addr+0x4c>)
   2f982:	9400      	str	r4, [sp, #0]
   2f984:	2207      	movs	r2, #7
   2f986:	4669      	mov	r1, sp
   2f988:	f8cd 4003 	str.w	r4, [sp, #3]
   2f98c:	f015 fa87 	bl	44e9e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   2f990:	b150      	cbz	r0, 2f9a8 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   2f992:	4620      	mov	r0, r4
   2f994:	e006      	b.n	2f9a4 <bt_keys_get_addr+0x34>
   2f996:	2207      	movs	r2, #7
   2f998:	1c68      	adds	r0, r5, #1
   2f99a:	f015 fa80 	bl	44e9e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f99e:	2800      	cmp	r0, #0
   2f9a0:	d1ed      	bne.n	2f97e <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   2f9a2:	4628      	mov	r0, r5
}
   2f9a4:	b003      	add	sp, #12
   2f9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   2f9a8:	4804      	ldr	r0, [pc, #16]	; (2f9bc <bt_keys_get_addr+0x4c>)
		keys->id = id;
   2f9aa:	702e      	strb	r6, [r5, #0]
   2f9ac:	2207      	movs	r2, #7
   2f9ae:	4639      	mov	r1, r7
   2f9b0:	f015 fa86 	bl	44ec0 <memcpy>
		return keys;
   2f9b4:	4800      	ldr	r0, [pc, #0]	; (2f9b8 <bt_keys_get_addr+0x48>)
}
   2f9b6:	e7f5      	b.n	2f9a4 <bt_keys_get_addr+0x34>
   2f9b8:	20001d4c 	.word	0x20001d4c
   2f9bc:	20001d4d 	.word	0x20001d4d

0002f9c0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   2f9c0:	460b      	mov	r3, r1
   2f9c2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   2f9c4:	4a04      	ldr	r2, [pc, #16]	; (2f9d8 <bt_keys_foreach+0x18>)
{
   2f9c6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   2f9c8:	89d4      	ldrh	r4, [r2, #14]
   2f9ca:	4204      	tst	r4, r0
   2f9cc:	d002      	beq.n	2f9d4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   2f9ce:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   2f9d0:	4610      	mov	r0, r2
   2f9d2:	4718      	bx	r3
}
   2f9d4:	bc10      	pop	{r4}
   2f9d6:	4770      	bx	lr
   2f9d8:	20001d4c 	.word	0x20001d4c

0002f9dc <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   2f9dc:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   2f9de:	4903      	ldr	r1, [pc, #12]	; (2f9ec <keys_commit+0x10>)
   2f9e0:	2200      	movs	r2, #0
   2f9e2:	2002      	movs	r0, #2
   2f9e4:	f7ff ffec 	bl	2f9c0 <bt_keys_foreach>
	}

	return 0;
}
   2f9e8:	2000      	movs	r0, #0
   2f9ea:	bd08      	pop	{r3, pc}
   2f9ec:	00047c8b 	.word	0x00047c8b

0002f9f0 <bt_keys_find>:
{
   2f9f0:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f9f2:	4c09      	ldr	r4, [pc, #36]	; (2fa18 <bt_keys_find+0x28>)
{
   2f9f4:	460b      	mov	r3, r1
   2f9f6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f9f8:	89e2      	ldrh	r2, [r4, #14]
   2f9fa:	4202      	tst	r2, r0
   2f9fc:	d007      	beq.n	2fa0e <bt_keys_find+0x1e>
   2f9fe:	7822      	ldrb	r2, [r4, #0]
   2fa00:	429a      	cmp	r2, r3
   2fa02:	d104      	bne.n	2fa0e <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   2fa04:	2207      	movs	r2, #7
   2fa06:	1c60      	adds	r0, r4, #1
   2fa08:	f015 fa49 	bl	44e9e <memcmp>
   2fa0c:	b108      	cbz	r0, 2fa12 <bt_keys_find+0x22>
	return NULL;
   2fa0e:	2000      	movs	r0, #0
}
   2fa10:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   2fa12:	4620      	mov	r0, r4
   2fa14:	e7fc      	b.n	2fa10 <bt_keys_find+0x20>
   2fa16:	bf00      	nop
   2fa18:	20001d4c 	.word	0x20001d4c

0002fa1c <bt_keys_find_irk>:
{
   2fa1c:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2fa1e:	780b      	ldrb	r3, [r1, #0]
   2fa20:	2b01      	cmp	r3, #1
   2fa22:	4606      	mov	r6, r0
   2fa24:	460d      	mov	r5, r1
   2fa26:	d001      	beq.n	2fa2c <bt_keys_find_irk+0x10>
		return NULL;
   2fa28:	2000      	movs	r0, #0
}
   2fa2a:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   2fa2c:	798b      	ldrb	r3, [r1, #6]
   2fa2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2fa32:	2b40      	cmp	r3, #64	; 0x40
   2fa34:	d1f8      	bne.n	2fa28 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2fa36:	4c12      	ldr	r4, [pc, #72]	; (2fa80 <bt_keys_find_irk+0x64>)
   2fa38:	89e3      	ldrh	r3, [r4, #14]
   2fa3a:	079b      	lsls	r3, r3, #30
   2fa3c:	d5f4      	bpl.n	2fa28 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   2fa3e:	7823      	ldrb	r3, [r4, #0]
   2fa40:	42b3      	cmp	r3, r6
   2fa42:	d10b      	bne.n	2fa5c <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   2fa44:	2206      	movs	r2, #6
   2fa46:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   2fa4a:	1c68      	adds	r0, r5, #1
   2fa4c:	f015 fa27 	bl	44e9e <memcmp>
   2fa50:	b908      	cbnz	r0, 2fa56 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   2fa52:	4620      	mov	r0, r4
   2fa54:	e7e9      	b.n	2fa2a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2fa56:	89e3      	ldrh	r3, [r4, #14]
   2fa58:	079a      	lsls	r2, r3, #30
   2fa5a:	d5e5      	bpl.n	2fa28 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   2fa5c:	7823      	ldrb	r3, [r4, #0]
   2fa5e:	42b3      	cmp	r3, r6
   2fa60:	d1e2      	bne.n	2fa28 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2fa62:	3501      	adds	r5, #1
   2fa64:	4807      	ldr	r0, [pc, #28]	; (2fa84 <bt_keys_find_irk+0x68>)
   2fa66:	4629      	mov	r1, r5
   2fa68:	f015 fa86 	bl	44f78 <bt_rpa_irk_matches>
   2fa6c:	2800      	cmp	r0, #0
   2fa6e:	d0db      	beq.n	2fa28 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   2fa70:	4805      	ldr	r0, [pc, #20]	; (2fa88 <bt_keys_find_irk+0x6c>)
   2fa72:	2206      	movs	r2, #6
   2fa74:	4629      	mov	r1, r5
   2fa76:	f015 fa23 	bl	44ec0 <memcpy>
			return &key_pool[i];
   2fa7a:	4801      	ldr	r0, [pc, #4]	; (2fa80 <bt_keys_find_irk+0x64>)
}
   2fa7c:	e7d5      	b.n	2fa2a <bt_keys_find_irk+0xe>
   2fa7e:	bf00      	nop
   2fa80:	20001d4c 	.word	0x20001d4c
   2fa84:	20001d76 	.word	0x20001d76
   2fa88:	20001d86 	.word	0x20001d86

0002fa8c <bt_keys_find_addr>:
{
   2fa8c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   2fa8e:	4c06      	ldr	r4, [pc, #24]	; (2faa8 <bt_keys_find_addr+0x1c>)
   2fa90:	7823      	ldrb	r3, [r4, #0]
   2fa92:	4283      	cmp	r3, r0
   2fa94:	d104      	bne.n	2faa0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   2fa96:	2207      	movs	r2, #7
   2fa98:	1c60      	adds	r0, r4, #1
   2fa9a:	f015 fa00 	bl	44e9e <memcmp>
   2fa9e:	b108      	cbz	r0, 2faa4 <bt_keys_find_addr+0x18>
	return NULL;
   2faa0:	2000      	movs	r0, #0
}
   2faa2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   2faa4:	4620      	mov	r0, r4
   2faa6:	e7fc      	b.n	2faa2 <bt_keys_find_addr+0x16>
   2faa8:	20001d4c 	.word	0x20001d4c

0002faac <bt_keys_clear>:
{
   2faac:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2faae:	7a03      	ldrb	r3, [r0, #8]
   2fab0:	075b      	lsls	r3, r3, #29
{
   2fab2:	b08c      	sub	sp, #48	; 0x30
   2fab4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2fab6:	d501      	bpl.n	2fabc <bt_keys_clear+0x10>
		bt_id_del(keys);
   2fab8:	f7fc f8c4 	bl	2bc44 <bt_id_del>
		if (keys->id) {
   2fabc:	4625      	mov	r5, r4
   2fabe:	f815 2b01 	ldrb.w	r2, [r5], #1
   2fac2:	b1b2      	cbz	r2, 2faf2 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   2fac4:	ae02      	add	r6, sp, #8
   2fac6:	2104      	movs	r1, #4
   2fac8:	4630      	mov	r0, r6
   2faca:	f013 f86e 	bl	42baa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2face:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   2fad0:	4a09      	ldr	r2, [pc, #36]	; (2faf8 <bt_keys_clear+0x4c>)
   2fad2:	462b      	mov	r3, r5
   2fad4:	2124      	movs	r1, #36	; 0x24
   2fad6:	a803      	add	r0, sp, #12
   2fad8:	f7fb f97e 	bl	2add8 <bt_settings_encode_key>
		settings_delete(key);
   2fadc:	a803      	add	r0, sp, #12
   2fade:	f013 fefd 	bl	438dc <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   2fae2:	2240      	movs	r2, #64	; 0x40
   2fae4:	2100      	movs	r1, #0
   2fae6:	4620      	mov	r0, r4
}
   2fae8:	b00c      	add	sp, #48	; 0x30
   2faea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2faee:	f015 b9f2 	b.w	44ed6 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2faf2:	9200      	str	r2, [sp, #0]
   2faf4:	e7ec      	b.n	2fad0 <bt_keys_clear+0x24>
   2faf6:	bf00      	nop
   2faf8:	0004b961 	.word	0x0004b961

0002fafc <bt_keys_store>:
{
   2fafc:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   2fafe:	4605      	mov	r5, r0
{
   2fb00:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   2fb02:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2fb06:	4604      	mov	r4, r0
	if (keys->id) {
   2fb08:	b19a      	cbz	r2, 2fb32 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   2fb0a:	ae02      	add	r6, sp, #8
   2fb0c:	2104      	movs	r1, #4
   2fb0e:	4630      	mov	r0, r6
   2fb10:	f013 f84b 	bl	42baa <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2fb14:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2fb16:	462b      	mov	r3, r5
   2fb18:	a803      	add	r0, sp, #12
   2fb1a:	4a07      	ldr	r2, [pc, #28]	; (2fb38 <bt_keys_store+0x3c>)
   2fb1c:	2124      	movs	r1, #36	; 0x24
   2fb1e:	f7fb f95b 	bl	2add8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   2fb22:	2234      	movs	r2, #52	; 0x34
   2fb24:	f104 010c 	add.w	r1, r4, #12
   2fb28:	a803      	add	r0, sp, #12
   2fb2a:	f7f9 ff87 	bl	29a3c <settings_save_one>
}
   2fb2e:	b00c      	add	sp, #48	; 0x30
   2fb30:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2fb32:	9200      	str	r2, [sp, #0]
   2fb34:	e7ef      	b.n	2fb16 <bt_keys_store+0x1a>
   2fb36:	bf00      	nop
   2fb38:	0004b961 	.word	0x0004b961

0002fb3c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   2fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fb40:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2fb42:	1dc2      	adds	r2, r0, #7
   2fb44:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2fb48:	1e75      	subs	r5, r6, #1
{
   2fb4a:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2fb4c:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   2fb4e:	6018      	str	r0, [r3, #0]
{
   2fb50:	b082      	sub	sp, #8
   2fb52:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2fb54:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2fb56:	2100      	movs	r1, #0
   2fb58:	2204      	movs	r2, #4
   2fb5a:	fb07 0005 	mla	r0, r7, r5, r0
   2fb5e:	f015 f9ba 	bl	44ed6 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   2fb62:	b1bd      	cbz	r5, 2fb94 <mem_init+0x58>
   2fb64:	3e02      	subs	r6, #2
   2fb66:	b2b6      	uxth	r6, r6
   2fb68:	fb06 7307 	mla	r3, r6, r7, r7
   2fb6c:	fb06 f807 	mul.w	r8, r6, r7
   2fb70:	441c      	add	r4, r3
   2fb72:	eba8 0803 	sub.w	r8, r8, r3
   2fb76:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2fb78:	2204      	movs	r2, #4
   2fb7a:	eb04 0008 	add.w	r0, r4, r8
   2fb7e:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   2fb82:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2fb84:	f015 f99c 	bl	44ec0 <memcpy>
	while (mem_count--) {
   2fb88:	42b5      	cmp	r5, r6
   2fb8a:	eba4 0407 	sub.w	r4, r4, r7
   2fb8e:	f105 0501 	add.w	r5, r5, #1
   2fb92:	d1f1      	bne.n	2fb78 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   2fb94:	b002      	add	sp, #8
   2fb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fb9a:	bf00      	nop

0002fb9c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   2fb9c:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   2fb9e:	6805      	ldr	r5, [r0, #0]
{
   2fba0:	b082      	sub	sp, #8
	if (*mem_head) {
   2fba2:	b195      	cbz	r5, 2fbca <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2fba4:	1deb      	adds	r3, r5, #7
   2fba6:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   2fbaa:	2204      	movs	r2, #4
   2fbac:	4604      	mov	r4, r0
   2fbae:	4629      	mov	r1, r5
   2fbb0:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2fbb4:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   2fbb6:	f015 f983 	bl	44ec0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   2fbba:	9b01      	ldr	r3, [sp, #4]
   2fbbc:	b123      	cbz	r3, 2fbc8 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2fbbe:	1dda      	adds	r2, r3, #7
   2fbc0:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   2fbc4:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2fbc6:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   2fbc8:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   2fbca:	4628      	mov	r0, r5
   2fbcc:	b002      	add	sp, #8
   2fbce:	bd70      	pop	{r4, r5, r6, pc}

0002fbd0 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2fbd0:	680b      	ldr	r3, [r1, #0]
{
   2fbd2:	b570      	push	{r4, r5, r6, lr}
   2fbd4:	460c      	mov	r4, r1
   2fbd6:	4605      	mov	r5, r0
	if (*mem_head) {
   2fbd8:	b183      	cbz	r3, 2fbfc <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2fbda:	3307      	adds	r3, #7
   2fbdc:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   2fbe0:	881e      	ldrh	r6, [r3, #0]
   2fbe2:	3601      	adds	r6, #1
   2fbe4:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   2fbe6:	2204      	movs	r2, #4
   2fbe8:	4621      	mov	r1, r4
   2fbea:	4628      	mov	r0, r5
   2fbec:	f015 f968 	bl	44ec0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   2fbf0:	1deb      	adds	r3, r5, #7
   2fbf2:	f023 0303 	bic.w	r3, r3, #3
   2fbf6:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   2fbf8:	6025      	str	r5, [r4, #0]
}
   2fbfa:	bd70      	pop	{r4, r5, r6, pc}
   2fbfc:	2601      	movs	r6, #1
   2fbfe:	e7f2      	b.n	2fbe6 <mem_release+0x16>

0002fc00 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   2fc00:	fb02 0001 	mla	r0, r2, r1, r0
   2fc04:	4770      	bx	lr
   2fc06:	bf00      	nop

0002fc08 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   2fc08:	1a40      	subs	r0, r0, r1
   2fc0a:	b280      	uxth	r0, r0
}
   2fc0c:	fbb0 f0f2 	udiv	r0, r0, r2
   2fc10:	4770      	bx	lr
   2fc12:	bf00      	nop

0002fc14 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   2fc14:	1e53      	subs	r3, r2, #1
	src += len;
   2fc16:	4411      	add	r1, r2
	while (len--) {
   2fc18:	b29b      	uxth	r3, r3
   2fc1a:	b142      	cbz	r2, 2fc2e <mem_rcopy+0x1a>
   2fc1c:	43db      	mvns	r3, r3
   2fc1e:	3801      	subs	r0, #1
   2fc20:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   2fc22:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   2fc26:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   2fc2a:	4291      	cmp	r1, r2
   2fc2c:	d1f9      	bne.n	2fc22 <mem_rcopy+0xe>
	}
}
   2fc2e:	4770      	bx	lr

0002fc30 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   2fc30:	4401      	add	r1, r0
   2fc32:	e002      	b.n	2fc3a <mem_nz+0xa>
		if (*src++) {
   2fc34:	f810 3b01 	ldrb.w	r3, [r0], #1
   2fc38:	b91b      	cbnz	r3, 2fc42 <mem_nz+0x12>
	while (len--) {
   2fc3a:	4288      	cmp	r0, r1
   2fc3c:	d1fa      	bne.n	2fc34 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   2fc3e:	2000      	movs	r0, #0
   2fc40:	4770      	bx	lr
			return 1;
   2fc42:	2001      	movs	r0, #1
}
   2fc44:	4770      	bx	lr
   2fc46:	bf00      	nop

0002fc48 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   2fc48:	6010      	str	r0, [r2, #0]
   2fc4a:	6008      	str	r0, [r1, #0]

	return link;
}
   2fc4c:	4770      	bx	lr
   2fc4e:	bf00      	nop

0002fc50 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2fc50:	680a      	ldr	r2, [r1, #0]
{
   2fc52:	4603      	mov	r3, r0
	if (*head != *tail) {
   2fc54:	6800      	ldr	r0, [r0, #0]
   2fc56:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   2fc58:	bf05      	ittet	eq
   2fc5a:	2200      	moveq	r2, #0
   2fc5c:	600a      	streq	r2, [r1, #0]
		return NULL;
   2fc5e:	2000      	movne	r0, #0
	*head = *tail = NULL;
   2fc60:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   2fc62:	4770      	bx	lr

0002fc64 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   2fc64:	f8d2 c000 	ldr.w	ip, [r2]
   2fc68:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2fc6c:	f8d2 c000 	ldr.w	ip, [r2]
   2fc70:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   2fc74:	6010      	str	r0, [r2, #0]

	return link;
}
   2fc76:	4770      	bx	lr

0002fc78 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   2fc78:	4288      	cmp	r0, r1
   2fc7a:	d003      	beq.n	2fc84 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   2fc7c:	b11a      	cbz	r2, 2fc86 <memq_peek+0xe>
		*mem = head->mem;
   2fc7e:	6843      	ldr	r3, [r0, #4]
   2fc80:	6013      	str	r3, [r2, #0]
   2fc82:	4770      	bx	lr
		return NULL;
   2fc84:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2fc86:	4770      	bx	lr

0002fc88 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   2fc88:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   2fc8a:	4283      	cmp	r3, r0
   2fc8c:	d009      	beq.n	2fca2 <memq_dequeue+0x1a>
	if (mem) {
   2fc8e:	b12a      	cbz	r2, 2fc9c <memq_dequeue+0x14>
		*mem = head->mem;
   2fc90:	6858      	ldr	r0, [r3, #4]
   2fc92:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2fc94:	681a      	ldr	r2, [r3, #0]
   2fc96:	600a      	str	r2, [r1, #0]

	return old_head;
}
   2fc98:	4618      	mov	r0, r3
   2fc9a:	4770      	bx	lr
	if (old_head == NULL) {
   2fc9c:	2b00      	cmp	r3, #0
   2fc9e:	d1f9      	bne.n	2fc94 <memq_dequeue+0xc>
   2fca0:	e7fa      	b.n	2fc98 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   2fca2:	2300      	movs	r3, #0
   2fca4:	e7f8      	b.n	2fc98 <memq_dequeue+0x10>
   2fca6:	bf00      	nop

0002fca8 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   2fca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fcac:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2fce0 <mayfly_init+0x38>
   2fcb0:	4e0c      	ldr	r6, [pc, #48]	; (2fce4 <mayfly_init+0x3c>)
   2fcb2:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   2fcb4:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   2fcb8:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   2fcba:	1d22      	adds	r2, r4, #4
   2fcbc:	4621      	mov	r1, r4
   2fcbe:	4628      	mov	r0, r5
		while (caller_id--) {
   2fcc0:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   2fcc2:	f7ff ffc1 	bl	2fc48 <memq_init>
		while (caller_id--) {
   2fcc6:	42b4      	cmp	r4, r6
   2fcc8:	f1a5 0508 	sub.w	r5, r5, #8
   2fccc:	d1f5      	bne.n	2fcba <mayfly_init+0x12>
	while (callee_id--) {
   2fcce:	3f04      	subs	r7, #4
   2fcd0:	1d3b      	adds	r3, r7, #4
   2fcd2:	f1a8 0820 	sub.w	r8, r8, #32
   2fcd6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2fcda:	d1eb      	bne.n	2fcb4 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   2fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fce0:	20001e04 	.word	0x20001e04
   2fce4:	20001e94 	.word	0x20001e94

0002fce8 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   2fce8:	b410      	push	{r4}
   2fcea:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   2fcec:	4c15      	ldr	r4, [pc, #84]	; (2fd44 <mayfly_enable+0x5c>)
{
   2fcee:	468c      	mov	ip, r1
	if (enable) {
   2fcf0:	b192      	cbz	r2, 2fd18 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   2fcf2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   2fcf6:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   2fcfa:	0100      	lsls	r0, r0, #4
   2fcfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2fd00:	4421      	add	r1, r4
   2fd02:	7a48      	ldrb	r0, [r1, #9]
   2fd04:	7a0c      	ldrb	r4, [r1, #8]
   2fd06:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   2fd08:	bf04      	itt	eq
   2fd0a:	3001      	addeq	r0, #1
   2fd0c:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   2fd0e:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   2fd10:	4661      	mov	r1, ip
   2fd12:	4618      	mov	r0, r3
   2fd14:	f00d b860 	b.w	3cdd8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   2fd18:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   2fd1c:	0112      	lsls	r2, r2, #4
   2fd1e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2fd22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2fd26:	4423      	add	r3, r4
   2fd28:	7a9c      	ldrb	r4, [r3, #10]
   2fd2a:	7ada      	ldrb	r2, [r3, #11]
   2fd2c:	42a2      	cmp	r2, r4
   2fd2e:	d001      	beq.n	2fd34 <mayfly_enable+0x4c>
}
   2fd30:	bc10      	pop	{r4}
   2fd32:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   2fd34:	3201      	adds	r2, #1
   2fd36:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   2fd38:	4b03      	ldr	r3, [pc, #12]	; (2fd48 <mayfly_enable+0x60>)
   2fd3a:	2201      	movs	r2, #1
   2fd3c:	545a      	strb	r2, [r3, r1]
}
   2fd3e:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   2fd40:	f00d b8a0 	b.w	3ce84 <mayfly_pend>
   2fd44:	20001e10 	.word	0x20001e10
   2fd48:	20001e0c 	.word	0x20001e0c

0002fd4c <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   2fd4c:	b570      	push	{r4, r5, r6, lr}
   2fd4e:	b082      	sub	sp, #8
   2fd50:	4606      	mov	r6, r0
   2fd52:	9101      	str	r1, [sp, #4]
   2fd54:	461c      	mov	r4, r3
   2fd56:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fd58:	b32a      	cbz	r2, 2fda6 <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   2fd5a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   2fd5c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   2fd5e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   2fd60:	f012 0203 	ands.w	r2, r2, #3
   2fd64:	d005      	beq.n	2fd72 <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   2fd66:	2a01      	cmp	r2, #1
   2fd68:	d042      	beq.n	2fdf0 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   2fd6a:	3301      	adds	r3, #1
   2fd6c:	b2db      	uxtb	r3, r3
   2fd6e:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   2fd70:	e00f      	b.n	2fd92 <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   2fd72:	3301      	adds	r3, #1
   2fd74:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2fd76:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   2fd78:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2fd7a:	2304      	movs	r3, #4
   2fd7c:	fb11 3105 	smlabb	r1, r1, r5, r3
   2fd80:	4a1c      	ldr	r2, [pc, #112]	; (2fdf4 <mayfly_enqueue+0xa8>)
   2fd82:	6860      	ldr	r0, [r4, #4]
   2fd84:	230c      	movs	r3, #12
   2fd86:	fb13 1306 	smlabb	r3, r3, r6, r1
   2fd8a:	441a      	add	r2, r3
   2fd8c:	4621      	mov	r1, r4
   2fd8e:	f7ff ff69 	bl	2fc64 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   2fd92:	4b19      	ldr	r3, [pc, #100]	; (2fdf8 <mayfly_enqueue+0xac>)
   2fd94:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   2fd96:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   2fd98:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   2fd9a:	4629      	mov	r1, r5
   2fd9c:	f00d f872 	bl	3ce84 <mayfly_pend>

	return 0;
   2fda0:	2000      	movs	r0, #0
}
   2fda2:	b002      	add	sp, #8
   2fda4:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   2fda6:	f00d f857 	bl	3ce58 <mayfly_prio_is_equal>
   2fdaa:	2800      	cmp	r0, #0
   2fdac:	d0d5      	beq.n	2fd5a <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fdae:	4629      	mov	r1, r5
   2fdb0:	4630      	mov	r0, r6
   2fdb2:	f00d f831 	bl	3ce18 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   2fdb6:	2800      	cmp	r0, #0
   2fdb8:	d0cf      	beq.n	2fd5a <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   2fdba:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   2fdbe:	0112      	lsls	r2, r2, #4
   2fdc0:	490c      	ldr	r1, [pc, #48]	; (2fdf4 <mayfly_enqueue+0xa8>)
   2fdc2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2fdc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2fdca:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fdcc:	7a9a      	ldrb	r2, [r3, #10]
   2fdce:	7adb      	ldrb	r3, [r3, #11]
   2fdd0:	429a      	cmp	r2, r3
   2fdd2:	d1c2      	bne.n	2fd5a <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   2fdd4:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   2fdd6:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   2fdd8:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   2fdda:	0792      	lsls	r2, r2, #30
   2fddc:	d002      	beq.n	2fde4 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   2fdde:	3302      	adds	r3, #2
   2fde0:	b2db      	uxtb	r3, r3
   2fde2:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   2fde4:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   2fde8:	4798      	blx	r3
		return 0;
   2fdea:	2000      	movs	r0, #0
}
   2fdec:	b002      	add	sp, #8
   2fdee:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   2fdf0:	4610      	mov	r0, r2
   2fdf2:	e7d6      	b.n	2fda2 <mayfly_enqueue+0x56>
   2fdf4:	20001e10 	.word	0x20001e10
   2fdf8:	20001e0c 	.word	0x20001e0c

0002fdfc <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   2fdfc:	4a50      	ldr	r2, [pc, #320]	; (2ff40 <mayfly_run+0x144>)
   2fdfe:	5c13      	ldrb	r3, [r2, r0]
   2fe00:	2b00      	cmp	r3, #0
   2fe02:	f000 809b 	beq.w	2ff3c <mayfly_run+0x140>
{
   2fe06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   2fe0a:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fe0c:	4f4d      	ldr	r7, [pc, #308]	; (2ff44 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   2fe0e:	5413      	strb	r3, [r2, r0]
{
   2fe10:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   2fe12:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fe14:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   2fe18:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fe1c:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   2fe20:	9303      	str	r3, [sp, #12]
   2fe22:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fe26:	f10b 0804 	add.w	r8, fp, #4
   2fe2a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   2fe2e:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   2fe32:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   2fe34:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   2fe38:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   2fe3a:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   2fe3c:	f7ff ff1c 	bl	2fc78 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   2fe40:	f107 0624 	add.w	r6, r7, #36	; 0x24
   2fe44:	4683      	mov	fp, r0
   2fe46:	2800      	cmp	r0, #0
   2fe48:	d034      	beq.n	2feb4 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   2fe4a:	9c05      	ldr	r4, [sp, #20]
   2fe4c:	7863      	ldrb	r3, [r4, #1]
   2fe4e:	7825      	ldrb	r5, [r4, #0]
   2fe50:	1aed      	subs	r5, r5, r3
   2fe52:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   2fe56:	2d01      	cmp	r5, #1
   2fe58:	d106      	bne.n	2fe68 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   2fe5a:	3b01      	subs	r3, #1
   2fe5c:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   2fe5e:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   2fe62:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   2fe64:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   2fe66:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   2fe68:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   2fe6a:	1ac3      	subs	r3, r0, r3
   2fe6c:	f003 0303 	and.w	r3, r3, #3
   2fe70:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fe72:	f04f 0200 	mov.w	r2, #0
   2fe76:	4631      	mov	r1, r6
	req = m->_req;
   2fe78:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   2fe7c:	d00f      	beq.n	2fe9e <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fe7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2fe80:	f7ff ff02 	bl	2fc88 <memq_dequeue>
		ack = m->_ack;
   2fe84:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fe88:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   2fe8a:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fe8e:	eba3 030c 	sub.w	r3, r3, ip
   2fe92:	f003 0303 	and.w	r3, r3, #3
   2fe96:	2b01      	cmp	r3, #1
		m->_ack = req;
   2fe98:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fe9c:	d046      	beq.n	2ff2c <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   2fe9e:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   2fea2:	aa05      	add	r2, sp, #20
   2fea4:	f7ff fee8 	bl	2fc78 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   2fea8:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   2feaa:	9000      	str	r0, [sp, #0]
   2feac:	4683      	mov	fp, r0
			if (state == 1U) {
   2feae:	d02b      	beq.n	2ff08 <mayfly_run+0x10c>
		while (link) {
   2feb0:	2800      	cmp	r0, #0
   2feb2:	d1ca      	bne.n	2fe4a <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   2feb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   2feb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   2febc:	429a      	cmp	r2, r3
   2febe:	d003      	beq.n	2fec8 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   2fec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   2fec4:	2301      	movs	r3, #1
   2fec6:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   2fec8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   2fecc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   2fed0:	429a      	cmp	r2, r3
   2fed2:	d003      	beq.n	2fedc <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   2fed4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   2fed8:	2301      	movs	r3, #1
   2feda:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   2fedc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   2fee0:	fa5f f989 	uxtb.w	r9, r9
   2fee4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   2fee8:	f1a7 070c 	sub.w	r7, r7, #12
   2feec:	d1a1      	bne.n	2fe32 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   2feee:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   2fef2:	b1c3      	cbz	r3, 2ff26 <mayfly_run+0x12a>
   2fef4:	9b03      	ldr	r3, [sp, #12]
   2fef6:	b9b3      	cbnz	r3, 2ff26 <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   2fef8:	461a      	mov	r2, r3
   2fefa:	4651      	mov	r1, sl
   2fefc:	4650      	mov	r0, sl
	}
}
   2fefe:	b007      	add	sp, #28
   2ff00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   2ff04:	f00c bf68 	b.w	3cdd8 <mayfly_enable_cb>
				if (caller_id || link) {
   2ff08:	f1b9 0f00 	cmp.w	r9, #0
   2ff0c:	d101      	bne.n	2ff12 <mayfly_run+0x116>
   2ff0e:	2800      	cmp	r0, #0
   2ff10:	d0d0      	beq.n	2feb4 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   2ff12:	f8dd a008 	ldr.w	sl, [sp, #8]
   2ff16:	4a0a      	ldr	r2, [pc, #40]	; (2ff40 <mayfly_run+0x144>)
   2ff18:	2301      	movs	r3, #1
   2ff1a:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   2ff1e:	4651      	mov	r1, sl
   2ff20:	4650      	mov	r0, sl
   2ff22:	f00c ffaf 	bl	3ce84 <mayfly_pend>
}
   2ff26:	b007      	add	sp, #28
   2ff28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2ff2c:	4642      	mov	r2, r8
   2ff2e:	4621      	mov	r1, r4
   2ff30:	4658      	mov	r0, fp
			m->_ack = ack;
   2ff32:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2ff36:	f7ff fe95 	bl	2fc64 <memq_enqueue>
   2ff3a:	e7b0      	b.n	2fe9e <mayfly_run+0xa2>
   2ff3c:	4770      	bx	lr
   2ff3e:	bf00      	nop
   2ff40:	20001e0c 	.word	0x20001e0c
   2ff44:	20001e10 	.word	0x20001e10

0002ff48 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   2ff48:	1e4b      	subs	r3, r1, #1
   2ff4a:	b2db      	uxtb	r3, r3
   2ff4c:	b171      	cbz	r1, 2ff6c <util_ones_count_get+0x24>
   2ff4e:	1e41      	subs	r1, r0, #1
   2ff50:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   2ff54:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   2ff56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   2ff5a:	b123      	cbz	r3, 2ff66 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   2ff5c:	1e5a      	subs	r2, r3, #1
			one_count++;
   2ff5e:	3001      	adds	r0, #1
		while (bite) {
   2ff60:	4013      	ands	r3, r2
			one_count++;
   2ff62:	b2c0      	uxtb	r0, r0
		while (bite) {
   2ff64:	d1fa      	bne.n	2ff5c <util_ones_count_get+0x14>
	while (octets_len--) {
   2ff66:	4561      	cmp	r1, ip
   2ff68:	d1f5      	bne.n	2ff56 <util_ones_count_get+0xe>
   2ff6a:	4770      	bx	lr
	uint8_t one_count = 0U;
   2ff6c:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   2ff6e:	4770      	bx	lr

0002ff70 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   2ff70:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   2ff72:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   2ff74:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   2ff76:	2bff      	cmp	r3, #255	; 0xff
   2ff78:	d014      	beq.n	2ffa4 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   2ff7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   2ff7e:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   2ff80:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   2ff84:	d028      	beq.n	2ffd8 <ticker_dequeue+0x68>
	total = 0U;
   2ff86:	f04f 0c00 	mov.w	ip, #0
   2ff8a:	e001      	b.n	2ff90 <ticker_dequeue+0x20>
		if (current == id) {
   2ff8c:	4299      	cmp	r1, r3
   2ff8e:	d00b      	beq.n	2ffa8 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   2ff90:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   2ff92:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   2ff94:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   2ff96:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   2ff98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   2ff9c:	44a4      	add	ip, r4
		ticker_current = &node[current];
   2ff9e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   2ffa2:	d1f3      	bne.n	2ff8c <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   2ffa4:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   2ffa6:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   2ffa8:	4571      	cmp	r1, lr
   2ffaa:	d018      	beq.n	2ffde <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   2ffac:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   2ffae:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   2ffb0:	fa0f fe8e 	sxth.w	lr, lr
   2ffb4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   2ffb8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   2ffbc:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   2ffc0:	7813      	ldrb	r3, [r2, #0]
   2ffc2:	2bff      	cmp	r3, #255	; 0xff
   2ffc4:	d006      	beq.n	2ffd4 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   2ffc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ffca:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   2ffce:	68ab      	ldr	r3, [r5, #8]
   2ffd0:	4403      	add	r3, r0
   2ffd2:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   2ffd4:	4460      	add	r0, ip
}
   2ffd6:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   2ffd8:	469e      	mov	lr, r3
	total = 0U;
   2ffda:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   2ffde:	7813      	ldrb	r3, [r2, #0]
   2ffe0:	7743      	strb	r3, [r0, #29]
   2ffe2:	e7e4      	b.n	2ffae <ticker_dequeue+0x3e>

0002ffe4 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2ffe4:	eba2 0c01 	sub.w	ip, r2, r1
   2ffe8:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   2ffec:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   2ffee:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   2fff0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2fff2:	d10a      	bne.n	3000a <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2fff4:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2fff8:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   2fffa:	42a3      	cmp	r3, r4
   2fffc:	d914      	bls.n	30028 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   2fffe:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   30000:	2100      	movs	r1, #0
}
   30002:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   30004:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   30006:	6141      	str	r1, [r0, #20]
}
   30008:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3000a:	1a89      	subs	r1, r1, r2
   3000c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   30010:	428b      	cmp	r3, r1
   30012:	d806      	bhi.n	30022 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   30014:	4421      	add	r1, r4
   30016:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   30018:	2300      	movs	r3, #0
}
   3001a:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   3001c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   3001e:	6141      	str	r1, [r0, #20]
}
   30020:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   30022:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   30024:	42a3      	cmp	r3, r4
   30026:	d8ea      	bhi.n	2fffe <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   30028:	1ae1      	subs	r1, r4, r3
   3002a:	e7f5      	b.n	30018 <ticks_to_expire_prep+0x34>

0003002c <ticker_job_list_insert>:
{
   3002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30030:	b087      	sub	sp, #28
   30032:	4603      	mov	r3, r0
	count_user = instance->count_user;
   30034:	7a42      	ldrb	r2, [r0, #9]
{
   30036:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   30038:	6800      	ldr	r0, [r0, #0]
   3003a:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   3003c:	6858      	ldr	r0, [r3, #4]
   3003e:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   30040:	2a00      	cmp	r2, #0
   30042:	f000 80f4 	beq.w	3022e <ticker_job_list_insert+0x202>
   30046:	1e53      	subs	r3, r2, #1
   30048:	b2db      	uxtb	r3, r3
   3004a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   3004e:	460f      	mov	r7, r1
   30050:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   30052:	9b03      	ldr	r3, [sp, #12]
   30054:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   30056:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   30058:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   3005a:	2fff      	cmp	r7, #255	; 0xff
   3005c:	d05e      	beq.n	3011c <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   3005e:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   30062:	9b02      	ldr	r3, [sp, #8]
   30064:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   30068:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   3006a:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   3006e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   30072:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   30074:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   30076:	f04f 09ff 	mov.w	r9, #255	; 0xff
   3007a:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   3007e:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   30082:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   30084:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   30088:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   3008a:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   3008e:	d10f      	bne.n	300b0 <ticker_job_list_insert+0x84>
   30090:	e0c8      	b.n	30224 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   30092:	1a09      	subs	r1, r1, r0
   30094:	d106      	bne.n	300a4 <ticker_job_list_insert+0x78>
   30096:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   3009a:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   3009e:	45e2      	cmp	sl, ip
   300a0:	f200 8086 	bhi.w	301b0 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   300a4:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   300a8:	2bff      	cmp	r3, #255	; 0xff
   300aa:	4691      	mov	r9, r2
   300ac:	d072      	beq.n	30194 <ticker_job_list_insert+0x168>
   300ae:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   300b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   300b4:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   300b8:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   300ba:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   300be:	4288      	cmp	r0, r1
   300c0:	d9e7      	bls.n	30092 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   300c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   300c6:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   300ca:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   300ce:	d166      	bne.n	3019e <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   300d0:	9b01      	ldr	r3, [sp, #4]
   300d2:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   300d6:	2aff      	cmp	r2, #255	; 0xff
   300d8:	d008      	beq.n	300ec <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   300da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   300de:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   300e2:	f8de 3008 	ldr.w	r3, [lr, #8]
   300e6:	1a5b      	subs	r3, r3, r1
   300e8:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   300ec:	78a3      	ldrb	r3, [r4, #2]
   300ee:	3301      	adds	r3, #1
   300f0:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   300f2:	2d00      	cmp	r5, #0
   300f4:	d0b1      	beq.n	3005a <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   300f6:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   300fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   300fc:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   300fe:	2200      	movs	r2, #0
   30100:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   30102:	b113      	cbz	r3, 3010a <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30104:	6b29      	ldr	r1, [r5, #48]	; 0x30
   30106:	4610      	mov	r0, r2
   30108:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   3010a:	6863      	ldr	r3, [r4, #4]
   3010c:	2b00      	cmp	r3, #0
   3010e:	d1a4      	bne.n	3005a <ticker_job_list_insert+0x2e>
					ticker->op_context =
   30110:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   30114:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   30116:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   3011a:	d1a0      	bne.n	3005e <ticker_job_list_insert+0x32>
   3011c:	9b03      	ldr	r3, [sp, #12]
   3011e:	7898      	ldrb	r0, [r3, #2]
   30120:	42b0      	cmp	r0, r6
   30122:	d02f      	beq.n	30184 <ticker_job_list_insert+0x158>
   30124:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   30128:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   3012c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   30130:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   30134:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   30138:	3601      	adds	r6, #1
   3013a:	b2f6      	uxtb	r6, r6
					first = 0U;
   3013c:	42b1      	cmp	r1, r6
   3013e:	bf08      	it	eq
   30140:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   30142:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   30144:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   30148:	d11a      	bne.n	30180 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   3014a:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   3014e:	9902      	ldr	r1, [sp, #8]
   30150:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   30154:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   30158:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   3015c:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   3015e:	7863      	ldrb	r3, [r4, #1]
   30160:	1a5b      	subs	r3, r3, r1
   30162:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   30166:	d025      	beq.n	301b4 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   30168:	f04f 0300 	mov.w	r3, #0
   3016c:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   30170:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30172:	2001      	movs	r0, #1
	user_op->status = status;
   30174:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   30176:	b10b      	cbz	r3, 3017c <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30178:	6b29      	ldr	r1, [r5, #48]	; 0x30
   3017a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   3017c:	f89b 0002 	ldrb.w	r0, [fp, #2]
   30180:	42b0      	cmp	r0, r6
   30182:	d1d1      	bne.n	30128 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   30184:	9a03      	ldr	r2, [sp, #12]
   30186:	9905      	ldr	r1, [sp, #20]
   30188:	4291      	cmp	r1, r2
   3018a:	f1a2 0308 	sub.w	r3, r2, #8
   3018e:	d04e      	beq.n	3022e <ticker_job_list_insert+0x202>
   30190:	9303      	str	r3, [sp, #12]
   30192:	e75e      	b.n	30052 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   30194:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   30198:	f88b 3000 	strb.w	r3, [fp]
   3019c:	461a      	mov	r2, r3
		node[previous].next = id;
   3019e:	fa0f f989 	sxth.w	r9, r9
   301a2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   301a6:	ea4f 1909 	mov.w	r9, r9, lsl #4
   301aa:	f80e 8009 	strb.w	r8, [lr, r9]
   301ae:	e792      	b.n	300d6 <ticker_job_list_insert+0xaa>
   301b0:	4601      	mov	r1, r0
   301b2:	e786      	b.n	300c2 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   301b4:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   301b6:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   301b8:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   301bc:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   301be:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   301c2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   301c6:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   301c8:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   301cc:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   301d0:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   301d4:	d024      	beq.n	30220 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   301d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   301da:	1ad3      	subs	r3, r2, r3
   301dc:	fab3 f383 	clz	r3, r3
   301e0:	095b      	lsrs	r3, r3, #5
   301e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   301e6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   301ea:	429a      	cmp	r2, r3
   301ec:	bf88      	it	hi
   301ee:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   301f0:	69ab      	ldr	r3, [r5, #24]
   301f2:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   301f4:	69eb      	ldr	r3, [r5, #28]
   301f6:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   301f8:	6a2b      	ldr	r3, [r5, #32]
   301fa:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   301fc:	68ab      	ldr	r3, [r5, #8]
   301fe:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   30200:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   30202:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   30204:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   30206:	686a      	ldr	r2, [r5, #4]
   30208:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   3020a:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   3020c:	f7ff feea 	bl	2ffe4 <ticks_to_expire_prep>
	ticker->force = 1U;
   30210:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   30214:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   30218:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   3021c:	70e3      	strb	r3, [r4, #3]
}
   3021e:	e729      	b.n	30074 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   30220:	461a      	mov	r2, r3
   30222:	e7e5      	b.n	301f0 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   30224:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   30228:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   3022c:	e75e      	b.n	300ec <ticker_job_list_insert+0xc0>
}
   3022e:	b007      	add	sp, #28
   30230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030234 <ticker_worker>:
{
   30234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   30238:	7f82      	ldrb	r2, [r0, #30]
{
   3023a:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   3023c:	2301      	movs	r3, #1
	if (instance->job_guard) {
   3023e:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   30240:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   30242:	2a00      	cmp	r2, #0
   30244:	d15b      	bne.n	302fe <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   30246:	7f43      	ldrb	r3, [r0, #29]
   30248:	2bff      	cmp	r3, #255	; 0xff
   3024a:	4681      	mov	r9, r0
   3024c:	d056      	beq.n	302fc <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   3024e:	f00c f911 	bl	3c474 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30252:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   30256:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   3025a:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3025e:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   30260:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30262:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   30266:	f000 813c 	beq.w	304e2 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   3026a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   3026e:	42bb      	cmp	r3, r7
   30270:	bf94      	ite	ls
   30272:	2300      	movls	r3, #0
   30274:	2301      	movhi	r3, #1
   30276:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   30278:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   3027c:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   30280:	f000 8145 	beq.w	3050e <ticker_worker+0x2da>
	ticks_expired = 0U;
   30284:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   30288:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   3028c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   30290:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   30294:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   30298:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   3029a:	42bb      	cmp	r3, r7
   3029c:	d837      	bhi.n	3030e <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   3029e:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   302a0:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   302a4:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   302a6:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   302a8:	7863      	ldrb	r3, [r4, #1]
   302aa:	1a5b      	subs	r3, r3, r1
   302ac:	b2db      	uxtb	r3, r3
   302ae:	2b01      	cmp	r3, #1
   302b0:	d12a      	bne.n	30308 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   302b2:	69a6      	ldr	r6, [r4, #24]
   302b4:	2e00      	cmp	r6, #0
   302b6:	d054      	beq.n	30362 <ticker_worker+0x12e>
   302b8:	9b03      	ldr	r3, [sp, #12]
   302ba:	2b00      	cmp	r3, #0
   302bc:	d04c      	beq.n	30358 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   302be:	8be3      	ldrh	r3, [r4, #30]
   302c0:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   302c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   302c4:	b13b      	cbz	r3, 302d6 <ticker_worker+0xa2>
   302c6:	681a      	ldr	r2, [r3, #0]
   302c8:	b11a      	cbz	r2, 302d2 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   302ca:	7a1a      	ldrb	r2, [r3, #8]
   302cc:	2a00      	cmp	r2, #0
   302ce:	f000 80ef 	beq.w	304b0 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   302d2:	2200      	movs	r2, #0
   302d4:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   302d6:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   302d8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   302dc:	3201      	adds	r2, #1
   302de:	b292      	uxth	r2, r2
   302e0:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   302e2:	b178      	cbz	r0, 30304 <ticker_worker+0xd0>
   302e4:	8ba0      	ldrh	r0, [r4, #28]
   302e6:	4290      	cmp	r0, r2
   302e8:	d20c      	bcs.n	30304 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   302ea:	2b00      	cmp	r3, #0
   302ec:	f000 80fc 	beq.w	304e8 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   302f0:	7a1a      	ldrb	r2, [r3, #8]
   302f2:	2a01      	cmp	r2, #1
   302f4:	d006      	beq.n	30304 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   302f6:	f04f 0c01 	mov.w	ip, #1
   302fa:	e036      	b.n	3036a <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   302fc:	77c2      	strb	r2, [r0, #31]
}
   302fe:	b00f      	add	sp, #60	; 0x3c
   30300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   30304:	3901      	subs	r1, #1
   30306:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   30308:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3030c:	d1be      	bne.n	3028c <ticker_worker+0x58>
   3030e:	f8dd 9010 	ldr.w	r9, [sp, #16]
   30312:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   30314:	f899 300b 	ldrb.w	r3, [r9, #11]
   30318:	f899 200a 	ldrb.w	r2, [r9, #10]
   3031c:	429a      	cmp	r2, r3
   3031e:	d10a      	bne.n	30336 <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   30320:	3201      	adds	r2, #1
   30322:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   30324:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30326:	bf1c      	itt	ne
   30328:	4613      	movne	r3, r2
   3032a:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   3032c:	9a06      	ldr	r2, [sp, #24]
   3032e:	f889 200b 	strb.w	r2, [r9, #11]
   30332:	bf08      	it	eq
   30334:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30336:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   3033a:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   3033e:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   30340:	2200      	movs	r2, #0
   30342:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30346:	464b      	mov	r3, r9
   30348:	2201      	movs	r2, #1
   3034a:	2104      	movs	r1, #4
   3034c:	2003      	movs	r0, #3
   3034e:	46a4      	mov	ip, r4
}
   30350:	b00f      	add	sp, #60	; 0x3c
   30352:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30356:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   30358:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   3035c:	9307      	str	r3, [sp, #28]
   3035e:	3380      	adds	r3, #128	; 0x80
   30360:	d141      	bne.n	303e6 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   30362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30364:	b1f3      	cbz	r3, 303a4 <ticker_worker+0x170>
   30366:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   3036a:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   3036c:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   3036e:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   30370:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   30372:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   30374:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   30376:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   30378:	2d00      	cmp	r5, #0
   3037a:	d0c5      	beq.n	30308 <ticker_worker+0xd4>
					   ticks_expired -
   3037c:	9b04      	ldr	r3, [sp, #16]
   3037e:	6960      	ldr	r0, [r4, #20]
   30380:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   30382:	6a62      	ldr	r2, [r4, #36]	; 0x24
   30384:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   30386:	ebaa 0000 	sub.w	r0, sl, r0
   3038a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   3038c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   30390:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   30392:	f1bc 0f00 	cmp.w	ip, #0
   30396:	d016      	beq.n	303c6 <ticker_worker+0x192>
   30398:	e9cd 3600 	strd	r3, r6, [sp]
   3039c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   303a0:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   303a2:	e7b1      	b.n	30308 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   303a4:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   303a6:	3901      	subs	r1, #1
   303a8:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   303aa:	2d00      	cmp	r5, #0
   303ac:	d0ac      	beq.n	30308 <ticker_worker+0xd4>
			ticks_drift = 0U;
   303ae:	4619      	mov	r1, r3
					   ticks_expired -
   303b0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   303b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   303b4:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   303b6:	ebaa 0003 	sub.w	r0, sl, r3
   303ba:	9b04      	ldr	r3, [sp, #16]
   303bc:	695b      	ldr	r3, [r3, #20]
   303be:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   303c0:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   303c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   303c6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   303ca:	e9cd 3600 	strd	r3, r6, [sp]
   303ce:	4663      	mov	r3, ip
   303d0:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   303d2:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   303d4:	2b00      	cmp	r3, #0
   303d6:	9b03      	ldr	r3, [sp, #12]
   303d8:	bf18      	it	ne
   303da:	2301      	movne	r3, #1
   303dc:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   303de:	2300      	movs	r3, #0
   303e0:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   303e2:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   303e4:	e790      	b.n	30308 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   303e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   303ea:	d0ba      	beq.n	30362 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   303ec:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   303ee:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   303f0:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   303f2:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   303f4:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   303f6:	bf28      	it	cs
   303f8:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   303fa:	fb02 5005 	mla	r0, r2, r5, r5
   303fe:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   30400:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   30402:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   30406:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   30408:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   3040c:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   3040e:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   30410:	46a0      	mov	r8, r4
   30412:	f04f 0c00 	mov.w	ip, #0
   30416:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   30418:	b21b      	sxth	r3, r3
   3041a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3041e:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   30422:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   30424:	f8d2 e008 	ldr.w	lr, [r2, #8]
   30428:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   3042a:	4566      	cmp	r6, ip
   3042c:	d339      	bcc.n	304a2 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   3042e:	6991      	ldr	r1, [r2, #24]
   30430:	b399      	cbz	r1, 3049a <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   30432:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   30434:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   30436:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   3043a:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   3043e:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   30440:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   30442:	bf28      	it	cs
   30444:	1a0d      	subcs	r5, r1, r0
					  0U :
   30446:	f1b9 0f00 	cmp.w	r9, #0
   3044a:	d03e      	beq.n	304ca <ticker_worker+0x296>
   3044c:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   30450:	b3bc      	cbz	r4, 304c2 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   30452:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   30456:	f8dd 9020 	ldr.w	r9, [sp, #32]
   3045a:	45f1      	cmp	r9, lr
   3045c:	bf8c      	ite	hi
   3045e:	f04f 0e01 	movhi.w	lr, #1
   30462:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   30466:	bf34      	ite	cc
   30468:	f04f 0901 	movcc.w	r9, #1
   3046c:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   30470:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   30472:	f892 a003 	ldrb.w	sl, [r2, #3]
   30476:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   3047a:	d30e      	bcc.n	3049a <ticker_worker+0x266>
   3047c:	4592      	cmp	sl, r2
   3047e:	d829      	bhi.n	304d4 <ticker_worker+0x2a0>
			    (next_force ||
   30480:	f117 0f80 	cmn.w	r7, #128	; 0x80
   30484:	d026      	beq.n	304d4 <ticker_worker+0x2a0>
			     next_is_critical ||
   30486:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   30488:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   3048a:	4295      	cmp	r5, r2
   3048c:	dd02      	ble.n	30494 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   3048e:	f1be 0f00 	cmp.w	lr, #0
   30492:	d01f      	beq.n	304d4 <ticker_worker+0x2a0>
   30494:	9a07      	ldr	r2, [sp, #28]
   30496:	42ba      	cmp	r2, r7
   30498:	d019      	beq.n	304ce <ticker_worker+0x29a>
			id_head = ticker_next->next;
   3049a:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   3049e:	2bff      	cmp	r3, #255	; 0xff
   304a0:	d1ba      	bne.n	30418 <ticker_worker+0x1e4>
   304a2:	4644      	mov	r4, r8
   304a4:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   304a8:	990a      	ldr	r1, [sp, #40]	; 0x28
   304aa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   304ae:	e758      	b.n	30362 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   304b0:	8ba2      	ldrh	r2, [r4, #28]
   304b2:	9805      	ldr	r0, [sp, #20]
   304b4:	4282      	cmp	r2, r0
   304b6:	f63f af0c 	bhi.w	302d2 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   304ba:	f04f 0201 	mov.w	r2, #1
   304be:	721a      	strb	r2, [r3, #8]
   304c0:	e709      	b.n	302d6 <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   304c2:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   304c6:	46a1      	mov	r9, r4
   304c8:	e7d2      	b.n	30470 <ticker_worker+0x23c>
					  0U :
   304ca:	46ce      	mov	lr, r9
   304cc:	e7c0      	b.n	30450 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   304ce:	f1b9 0f00 	cmp.w	r9, #0
   304d2:	d0e2      	beq.n	3049a <ticker_worker+0x266>
   304d4:	4644      	mov	r4, r8
   304d6:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   304da:	990a      	ldr	r1, [sp, #40]	; 0x28
   304dc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   304e0:	e6ef      	b.n	302c2 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   304e2:	9b06      	ldr	r3, [sp, #24]
   304e4:	9303      	str	r3, [sp, #12]
   304e6:	e6c7      	b.n	30278 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   304e8:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   304ea:	3901      	subs	r1, #1
   304ec:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   304ee:	2d00      	cmp	r5, #0
   304f0:	f43f af0a 	beq.w	30308 <ticker_worker+0xd4>
			ticks_drift = 0U;
   304f4:	4619      	mov	r1, r3
					   ticks_expired -
   304f6:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   304f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   304fa:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   304fc:	ebaa 0003 	sub.w	r0, sl, r3
   30500:	9b04      	ldr	r3, [sp, #16]
   30502:	695b      	ldr	r3, [r3, #20]
   30504:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   30506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   3050a:	78e3      	ldrb	r3, [r4, #3]
   3050c:	e744      	b.n	30398 <ticker_worker+0x164>
	ticks_expired = 0U;
   3050e:	2300      	movs	r3, #0
   30510:	4619      	mov	r1, r3
   30512:	e6ff      	b.n	30314 <ticker_worker+0xe0>

00030514 <ticker_job>:
	if (instance->worker_trigger) {
   30514:	7fc3      	ldrb	r3, [r0, #31]
   30516:	2b00      	cmp	r3, #0
   30518:	f040 8431 	bne.w	30d7e <ticker_job+0x86a>
{
   3051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   30520:	7f82      	ldrb	r2, [r0, #30]
{
   30522:	b08d      	sub	sp, #52	; 0x34
   30524:	4683      	mov	fp, r0
	if (instance->job_guard) {
   30526:	2a00      	cmp	r2, #0
   30528:	f040 808c 	bne.w	30644 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   3052c:	7a83      	ldrb	r3, [r0, #10]
   3052e:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   30530:	2001      	movs	r0, #1
   30532:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   30536:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   30538:	f8db 0014 	ldr.w	r0, [fp, #20]
   3053c:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   3053e:	f000 8440 	beq.w	30dc2 <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   30542:	3301      	adds	r3, #1
   30544:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   30546:	2b02      	cmp	r3, #2
		idx = 0U;
   30548:	bf08      	it	eq
   3054a:	4613      	moveq	r3, r2
		ticks_elapsed =
   3054c:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   30550:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   30554:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   30558:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   3055a:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   3055c:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   3055e:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   30560:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   30562:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   30566:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   3056a:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   3056e:	f8db 3000 	ldr.w	r3, [fp]
   30572:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   30574:	f8db 3004 	ldr.w	r3, [fp, #4]
   30578:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   3057a:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   3057c:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   3057e:	b2db      	uxtb	r3, r3
   30580:	2a00      	cmp	r2, #0
   30582:	f000 81d5 	beq.w	30930 <ticker_job+0x41c>
		flag_elapsed = 1U;
   30586:	2201      	movs	r2, #1
   30588:	920b      	str	r2, [sp, #44]	; 0x2c
   3058a:	9a05      	ldr	r2, [sp, #20]
   3058c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   30590:	2300      	movs	r3, #0
   30592:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   30594:	23ff      	movs	r3, #255	; 0xff
   30596:	9301      	str	r3, [sp, #4]
   30598:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   3059a:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   3059e:	f89a c003 	ldrb.w	ip, [sl, #3]
   305a2:	f89a 7002 	ldrb.w	r7, [sl, #2]
   305a6:	4567      	cmp	r7, ip
   305a8:	d044      	beq.n	30634 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   305aa:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   305ae:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   305b0:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   305b2:	b2db      	uxtb	r3, r3
				middle = 0U;
   305b4:	429a      	cmp	r2, r3
   305b6:	bf08      	it	eq
   305b8:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   305ba:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   305be:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   305c2:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   305c6:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   305ca:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   305cc:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   305d0:	d942      	bls.n	30658 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   305d2:	2808      	cmp	r0, #8
   305d4:	d842      	bhi.n	3065c <ticker_job+0x148>
			ticker = &node[user_op->id];
   305d6:	7861      	ldrb	r1, [r4, #1]
   305d8:	9a00      	ldr	r2, [sp, #0]
   305da:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   305de:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   305e2:	786a      	ldrb	r2, [r5, #1]
   305e4:	f895 e002 	ldrb.w	lr, [r5, #2]
   305e8:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   305ec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   305f0:	d034      	beq.n	3065c <ticker_job+0x148>
			    (state == 0U) ||
   305f2:	2805      	cmp	r0, #5
   305f4:	d041      	beq.n	3067a <ticker_job+0x166>
			if (state == 1U) {
   305f6:	2a01      	cmp	r2, #1
   305f8:	f040 8118 	bne.w	3082c <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   305fc:	2806      	cmp	r0, #6
   305fe:	d006      	beq.n	3060e <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   30600:	4658      	mov	r0, fp
   30602:	f7ff fcb5 	bl	2ff70 <ticker_dequeue>
			ticker->req = ticker->ack;
   30606:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   30608:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   3060a:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   3060c:	7861      	ldrb	r1, [r4, #1]
   3060e:	f89b 301c 	ldrb.w	r3, [fp, #28]
   30612:	428b      	cmp	r3, r1
   30614:	f000 80d9 	beq.w	307ca <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   30618:	2000      	movs	r0, #0
   3061a:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   3061e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   30620:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   30622:	b10b      	cbz	r3, 30628 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30624:	6b21      	ldr	r1, [r4, #48]	; 0x30
   30626:	4798      	blx	r3
		while (user->middle != user->last) {
   30628:	f89a c003 	ldrb.w	ip, [sl, #3]
   3062c:	f89a 7002 	ldrb.w	r7, [sl, #2]
   30630:	4567      	cmp	r7, ip
   30632:	d1ba      	bne.n	305aa <ticker_job+0x96>
	while (count_user--) {
   30634:	9a05      	ldr	r2, [sp, #20]
   30636:	4552      	cmp	r2, sl
   30638:	f1aa 0308 	sub.w	r3, sl, #8
   3063c:	f000 8107 	beq.w	3084e <ticker_job+0x33a>
   30640:	469a      	mov	sl, r3
   30642:	e7aa      	b.n	3059a <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   30644:	6a44      	ldr	r4, [r0, #36]	; 0x24
   30646:	2104      	movs	r1, #4
   30648:	4603      	mov	r3, r0
   3064a:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   3064c:	2004      	movs	r0, #4
   3064e:	46a4      	mov	ip, r4
}
   30650:	b00d      	add	sp, #52	; 0x34
   30652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30656:	4760      	bx	ip
   30658:	461f      	mov	r7, r3
   3065a:	e7a4      	b.n	305a6 <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3065c:	2200      	movs	r2, #0
   3065e:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   30662:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   30664:	2001      	movs	r0, #1
   30666:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   30668:	2a00      	cmp	r2, #0
   3066a:	d0f5      	beq.n	30658 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3066c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   3066e:	4790      	blx	r2
		while (user->middle != user->last) {
   30670:	f89a c003 	ldrb.w	ip, [sl, #3]
   30674:	f89a 7002 	ldrb.w	r7, [sl, #2]
   30678:	e795      	b.n	305a6 <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   3067a:	6860      	ldr	r0, [r4, #4]
   3067c:	b948      	cbnz	r0, 30692 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   3067e:	68a0      	ldr	r0, [r4, #8]
   30680:	b938      	cbnz	r0, 30692 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   30682:	68e0      	ldr	r0, [r4, #12]
   30684:	b928      	cbnz	r0, 30692 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   30686:	6920      	ldr	r0, [r4, #16]
   30688:	b918      	cbnz	r0, 30692 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   3068a:	6960      	ldr	r0, [r4, #20]
   3068c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   30690:	d0e4      	beq.n	3065c <ticker_job+0x148>
			if (state == 1U) {
   30692:	2a01      	cmp	r2, #1
   30694:	f040 80ca 	bne.w	3082c <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   30698:	4658      	mov	r0, fp
   3069a:	f7ff fc69 	bl	2ff70 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   3069e:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   306a2:	60a8      	str	r0, [r5, #8]
   306a4:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   306a6:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   306a8:	f00b fee4 	bl	3c474 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   306ac:	9b02      	ldr	r3, [sp, #8]
   306ae:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   306b0:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   306b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   306b6:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   306b8:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   306ba:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   306bc:	f240 80af 	bls.w	3081e <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   306c0:	696b      	ldr	r3, [r5, #20]
   306c2:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   306c4:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   306c6:	f8d5 c004 	ldr.w	ip, [r5, #4]
   306ca:	f1bc 0f00 	cmp.w	ip, #0
   306ce:	d051      	beq.n	30774 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   306d0:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   306d2:	2b00      	cmp	r3, #0
   306d4:	d04e      	beq.n	30774 <ticker_job+0x260>
		user_op->params.update.lazy--;
   306d6:	3b01      	subs	r3, #1
   306d8:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   306da:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   306dc:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   306de:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   306e0:	d223      	bcs.n	3072a <ticker_job+0x216>
   306e2:	f10c 0e01 	add.w	lr, ip, #1
   306e6:	f8cd 8018 	str.w	r8, [sp, #24]
   306ea:	940a      	str	r4, [sp, #40]	; 0x28
   306ec:	e018      	b.n	30720 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   306ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
   306f0:	f8df 8228 	ldr.w	r8, [pc, #552]	; 3091c <ticker_job+0x408>
   306f4:	4c8a      	ldr	r4, [pc, #552]	; (30920 <ticker_job+0x40c>)
   306f6:	4488      	add	r8, r1
   306f8:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   306fa:	bf84      	itt	hi
   306fc:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   30700:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   30704:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   30706:	6a2c      	ldr	r4, [r5, #32]
   30708:	bf94      	ite	ls
   3070a:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   3070c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   30710:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   30712:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   30714:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   30716:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30718:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   3071a:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   3071c:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   3071e:	d201      	bcs.n	30724 <ticker_job+0x210>
   30720:	429f      	cmp	r7, r3
   30722:	d3e4      	bcc.n	306ee <ticker_job+0x1da>
   30724:	f8dd 8018 	ldr.w	r8, [sp, #24]
   30728:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3072a:	42bb      	cmp	r3, r7
   3072c:	d221      	bcs.n	30772 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   3072e:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   30732:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   30736:	9006      	str	r0, [sp, #24]
   30738:	940a      	str	r4, [sp, #40]	; 0x28
   3073a:	e005      	b.n	30748 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3073c:	3301      	adds	r3, #1
   3073e:	b29b      	uxth	r3, r3
   30740:	4660      	mov	r0, ip
   30742:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   30744:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30746:	d011      	beq.n	3076c <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   30748:	4874      	ldr	r0, [pc, #464]	; (3091c <ticker_job+0x408>)
   3074a:	4c75      	ldr	r4, [pc, #468]	; (30920 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   3074c:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   3074e:	1808      	adds	r0, r1, r0
   30750:	42a0      	cmp	r0, r4
   30752:	d8f3      	bhi.n	3073c <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30754:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   30756:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30758:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3075c:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   3075e:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30762:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30764:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   30768:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3076a:	d1ed      	bne.n	30748 <ticker_job+0x234>
   3076c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   3076e:	6269      	str	r1, [r5, #36]	; 0x24
   30770:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   30772:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   30774:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   30776:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   30778:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   3077a:	440a      	add	r2, r1
   3077c:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   3077e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   30780:	4403      	add	r3, r0
   30782:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   30784:	b11a      	cbz	r2, 3078e <ticker_job+0x27a>
   30786:	6813      	ldr	r3, [r2, #0]
   30788:	b10b      	cbz	r3, 3078e <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   3078a:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   3078c:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   3078e:	464a      	mov	r2, r9
   30790:	9902      	ldr	r1, [sp, #8]
   30792:	4628      	mov	r0, r5
   30794:	f7ff fc26 	bl	2ffe4 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   30798:	68e2      	ldr	r2, [r4, #12]
   3079a:	69ab      	ldr	r3, [r5, #24]
   3079c:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   3079e:	6922      	ldr	r2, [r4, #16]
   307a0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   307a2:	bf8c      	ite	hi
   307a4:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   307a6:	2300      	movls	r3, #0
   307a8:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   307aa:	7da3      	ldrb	r3, [r4, #22]
   307ac:	b103      	cbz	r3, 307b0 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   307ae:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   307b0:	7de3      	ldrb	r3, [r4, #23]
   307b2:	b113      	cbz	r3, 307ba <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   307b4:	3b01      	subs	r3, #1
   307b6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   307ba:	9b01      	ldr	r3, [sp, #4]
   307bc:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   307be:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   307c0:	7862      	ldrb	r2, [r4, #1]
   307c2:	9201      	str	r2, [sp, #4]
		ticker->req++;
   307c4:	3301      	adds	r3, #1
   307c6:	706b      	strb	r3, [r5, #1]
   307c8:	e726      	b.n	30618 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   307ca:	23ff      	movs	r3, #255	; 0xff
   307cc:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   307d0:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   307d4:	2b06      	cmp	r3, #6
   307d6:	d013      	beq.n	30800 <ticker_job+0x2ec>
   307d8:	2b08      	cmp	r3, #8
   307da:	d011      	beq.n	30800 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   307dc:	f00b fe4a 	bl	3c474 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   307e0:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   307e4:	1a83      	subs	r3, r0, r2
   307e6:	021d      	lsls	r5, r3, #8
   307e8:	d410      	bmi.n	3080c <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   307ea:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   307ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   307f0:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   307f2:	f8db 2018 	ldr.w	r2, [fp, #24]
   307f6:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   307f8:	bf88      	it	hi
   307fa:	f8cb 3018 	strhi.w	r3, [fp, #24]
   307fe:	e70b      	b.n	30618 <ticker_job+0x104>
				ticks_at_yield =
   30800:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   30802:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   30806:	1a83      	subs	r3, r0, r2
   30808:	021d      	lsls	r5, r3, #8
   3080a:	d5ee      	bpl.n	307ea <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3080c:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   3080e:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   30814:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   30816:	bf34      	ite	cc
   30818:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   3081a:	2300      	movcs	r3, #0
   3081c:	e7e9      	b.n	307f2 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   3081e:	696b      	ldr	r3, [r5, #20]
   30820:	1bda      	subs	r2, r3, r7
   30822:	1853      	adds	r3, r2, r1
   30824:	9304      	str	r3, [sp, #16]
   30826:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   30828:	2200      	movs	r2, #0
   3082a:	e74c      	b.n	306c6 <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   3082c:	2104      	movs	r1, #4
   3082e:	465b      	mov	r3, fp
   30830:	2201      	movs	r2, #1
   30832:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   30836:	4608      	mov	r0, r1
   30838:	47a0      	blx	r4
	while (count_user--) {
   3083a:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   3083c:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   30840:	2301      	movs	r3, #1
	while (count_user--) {
   30842:	4552      	cmp	r2, sl
				pending = 1U;
   30844:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   30846:	f1aa 0308 	sub.w	r3, sl, #8
   3084a:	f47f aef9 	bne.w	30640 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   3084e:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   30852:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30854:	1a9b      	subs	r3, r3, r2
   30856:	bf18      	it	ne
   30858:	2301      	movne	r3, #1
   3085a:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   3085c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3085e:	2b00      	cmp	r3, #0
   30860:	d16a      	bne.n	30938 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   30862:	9901      	ldr	r1, [sp, #4]
   30864:	4658      	mov	r0, fp
   30866:	f7ff fbe1 	bl	3002c <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   3086a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   3086e:	9300      	str	r3, [sp, #0]
   30870:	9b00      	ldr	r3, [sp, #0]
   30872:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30874:	4293      	cmp	r3, r2
   30876:	f000 826c 	beq.w	30d52 <ticker_job+0x83e>
	if (!pending) {
   3087a:	9b08      	ldr	r3, [sp, #32]
   3087c:	2b00      	cmp	r3, #0
   3087e:	f000 81e6 	beq.w	30c4e <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   30882:	f89b 301d 	ldrb.w	r3, [fp, #29]
   30886:	9300      	str	r3, [sp, #0]
   30888:	9b00      	ldr	r3, [sp, #0]
   3088a:	2bff      	cmp	r3, #255	; 0xff
   3088c:	f000 82c4 	beq.w	30e18 <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   30890:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30892:	2bff      	cmp	r3, #255	; 0xff
   30894:	f000 82cb 	beq.w	30e2e <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   30898:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   3089a:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   3089e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 30924 <ticker_job+0x410>
   308a2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 30928 <ticker_job+0x414>
   308a6:	4f21      	ldr	r7, [pc, #132]	; (3092c <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   308a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   308ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   308b0:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   308b2:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   308b4:	f00b fdde 	bl	3c474 <cntr_cnt_get>
		cc = instance->ticks_current;
   308b8:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   308bc:	1b03      	subs	r3, r0, r4
   308be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   308c2:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   308c4:	42b3      	cmp	r3, r6
   308c6:	bf2c      	ite	cs
   308c8:	18e4      	addcs	r4, r4, r3
   308ca:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   308cc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   308d0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   308d4:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   308d6:	4620      	mov	r0, r4
   308d8:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   308da:	f00b fdcb 	bl	3c474 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   308de:	eba0 030a 	sub.w	r3, r0, sl
   308e2:	eba4 040a 	sub.w	r4, r4, sl
   308e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   308ea:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   308ec:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   308f0:	42a3      	cmp	r3, r4
		i--;
   308f2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   308f6:	f240 8233 	bls.w	30d60 <ticker_job+0x84c>
		LL_ASSERT(i);
   308fa:	2d00      	cmp	r5, #0
   308fc:	d1da      	bne.n	308b4 <ticker_job+0x3a0>
   308fe:	f640 133e 	movw	r3, #2366	; 0x93e
   30902:	464a      	mov	r2, r9
   30904:	4641      	mov	r1, r8
   30906:	4638      	mov	r0, r7
   30908:	f012 fa02 	bl	42d10 <printk>
   3090c:	4040      	eors	r0, r0
   3090e:	f380 8811 	msr	BASEPRI, r0
   30912:	f04f 0003 	mov.w	r0, #3
   30916:	df02      	svc	2
   30918:	e7cc      	b.n	308b4 <ticker_job+0x3a0>
   3091a:	bf00      	nop
   3091c:	ff172b5a 	.word	0xff172b5a
   30920:	7f172b59 	.word	0x7f172b59
   30924:	0004a460 	.word	0x0004a460
   30928:	0004a50c 	.word	0x0004a50c
   3092c:	0004a4a0 	.word	0x0004a4a0
	pending = 0U;
   30930:	9b06      	ldr	r3, [sp, #24]
   30932:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   30934:	23ff      	movs	r3, #255	; 0xff
   30936:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   30938:	f00b fd9c 	bl	3c474 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3093c:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   3093e:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30942:	1ac3      	subs	r3, r0, r3
   30944:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   30948:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   3094a:	f8db 3000 	ldr.w	r3, [fp]
   3094e:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   30950:	d050      	beq.n	309f4 <ticker_job+0x4e0>
	ticks_expired = 0U;
   30952:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   30954:	f8df 8290 	ldr.w	r8, [pc, #656]	; 30be8 <ticker_job+0x6d4>
   30958:	f8df 9290 	ldr.w	r9, [pc, #656]	; 30bec <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   3095c:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   3095e:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   30960:	9a00      	ldr	r2, [sp, #0]
   30962:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   30966:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   3096a:	011b      	lsls	r3, r3, #4
   3096c:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   3096e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   30970:	429f      	cmp	r7, r3
   30972:	f0c0 8243 	bcc.w	30dfc <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   30976:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   30978:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   3097c:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   30980:	441a      	add	r2, r3
   30982:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   30984:	f8db 2018 	ldr.w	r2, [fp, #24]
   30988:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   3098a:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   3098e:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   30992:	bf25      	ittet	cs
   30994:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   30998:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   3099c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   3099e:	2300      	movcs	r3, #0
   309a0:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   309a4:	78a2      	ldrb	r2, [r4, #2]
   309a6:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   309a8:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   309aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   309ac:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   309ae:	1a9b      	subs	r3, r3, r2
   309b0:	b2db      	uxtb	r3, r3
   309b2:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   309b4:	9b00      	ldr	r3, [sp, #0]
   309b6:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   309ba:	b118      	cbz	r0, 309c4 <ticker_job+0x4b0>
   309bc:	9b05      	ldr	r3, [sp, #20]
   309be:	2b02      	cmp	r3, #2
   309c0:	f000 8135 	beq.w	30c2e <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   309c4:	2300      	movs	r3, #0
   309c6:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   309c8:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   309cc:	2d00      	cmp	r5, #0
   309ce:	f040 80da 	bne.w	30b86 <ticker_job+0x672>
   309d2:	b119      	cbz	r1, 309dc <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   309d4:	7a09      	ldrb	r1, [r1, #8]
   309d6:	2901      	cmp	r1, #1
   309d8:	f000 8111 	beq.w	30bfe <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   309dc:	9b05      	ldr	r3, [sp, #20]
   309de:	b123      	cbz	r3, 309ea <ticker_job+0x4d6>
   309e0:	2b01      	cmp	r3, #1
   309e2:	d045      	beq.n	30a70 <ticker_job+0x55c>
   309e4:	f1be 0f00 	cmp.w	lr, #0
   309e8:	d142      	bne.n	30a70 <ticker_job+0x55c>
			ticker->req = ticker->ack;
   309ea:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   309ec:	f89b 601d 	ldrb.w	r6, [fp, #29]
   309f0:	2eff      	cmp	r6, #255	; 0xff
   309f2:	d1b5      	bne.n	30960 <ticker_job+0x44c>
			flag_compare_update = 1U;
   309f4:	9b06      	ldr	r3, [sp, #24]
   309f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   309f8:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   309fa:	4296      	cmp	r6, r2
   309fc:	bf18      	it	ne
   309fe:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   30a00:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   30a02:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   30a04:	f7ff fb12 	bl	3002c <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   30a08:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   30a0c:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   30a10:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   30a14:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   30a16:	9b00      	ldr	r3, [sp, #0]
   30a18:	2bff      	cmp	r3, #255	; 0xff
   30a1a:	d00f      	beq.n	30a3c <ticker_job+0x528>
   30a1c:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   30a1e:	b233      	sxth	r3, r6
   30a20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30a24:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   30a28:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   30a2a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   30a2c:	b117      	cbz	r7, 30a34 <ticker_job+0x520>
   30a2e:	7a39      	ldrb	r1, [r7, #8]
   30a30:	2901      	cmp	r1, #1
   30a32:	d025      	beq.n	30a80 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   30a34:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   30a38:	2eff      	cmp	r6, #255	; 0xff
   30a3a:	d1f0      	bne.n	30a1e <ticker_job+0x50a>
	return rescheduled;
   30a3c:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   30a40:	2a00      	cmp	r2, #0
   30a42:	f43f af15 	beq.w	30870 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30a46:	9b00      	ldr	r3, [sp, #0]
   30a48:	9909      	ldr	r1, [sp, #36]	; 0x24
   30a4a:	428b      	cmp	r3, r1
   30a4c:	f47f af15 	bne.w	3087a <ticker_job+0x366>
	if (!pending) {
   30a50:	9b08      	ldr	r3, [sp, #32]
   30a52:	2b00      	cmp	r3, #0
   30a54:	f47f af18 	bne.w	30888 <ticker_job+0x374>
	users = &instance->users[0];
   30a58:	f8db 3004 	ldr.w	r3, [fp, #4]
   30a5c:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   30a5e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   30a62:	1e5f      	subs	r7, r3, #1
   30a64:	b2ff      	uxtb	r7, r7
   30a66:	2b00      	cmp	r3, #0
   30a68:	f43f af0e 	beq.w	30888 <ticker_job+0x374>
			flag_compare_update = 1U;
   30a6c:	9206      	str	r2, [sp, #24]
   30a6e:	e0fa      	b.n	30c66 <ticker_job+0x752>
			    ticker->fp_op_func) {
   30a70:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   30a72:	2b00      	cmp	r3, #0
   30a74:	d0b9      	beq.n	309ea <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   30a76:	6a61      	ldr	r1, [r4, #36]	; 0x24
   30a78:	2001      	movs	r0, #1
   30a7a:	4798      	blx	r3
			ticker->req = ticker->ack;
   30a7c:	78a2      	ldrb	r2, [r4, #2]
   30a7e:	e7b4      	b.n	309ea <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   30a80:	9b01      	ldr	r3, [sp, #4]
   30a82:	7f1b      	ldrb	r3, [r3, #28]
   30a84:	2bff      	cmp	r3, #255	; 0xff
   30a86:	d04b      	beq.n	30b20 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   30a88:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   30a8a:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   30a8c:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   30a8e:	4293      	cmp	r3, r2
   30a90:	d946      	bls.n	30b20 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   30a92:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   30a96:	687a      	ldr	r2, [r7, #4]
   30a98:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   30a9a:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   30a9e:	1ad3      	subs	r3, r2, r3
   30aa0:	9302      	str	r3, [sp, #8]
   30aa2:	683b      	ldr	r3, [r7, #0]
   30aa4:	429a      	cmp	r2, r3
   30aa6:	f080 80bd 	bcs.w	30c24 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   30aaa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   30aae:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   30ab2:	f000 80b7 	beq.w	30c24 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   30ab6:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   30aba:	45f0      	cmp	r8, lr
   30abc:	f04f 0300 	mov.w	r3, #0
   30ac0:	d331      	bcc.n	30b26 <ticker_job+0x612>
   30ac2:	46f1      	mov	r9, lr
   30ac4:	465a      	mov	r2, fp
   30ac6:	461c      	mov	r4, r3
   30ac8:	e01c      	b.n	30b04 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   30aca:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   30acc:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   30ace:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   30ad0:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   30ad2:	d909      	bls.n	30ae8 <ticker_job+0x5d4>
				window_end_ticks =
   30ad4:	4543      	cmp	r3, r8
   30ad6:	bf28      	it	cs
   30ad8:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   30ada:	4599      	cmp	r9, r3
   30adc:	d204      	bcs.n	30ae8 <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   30ade:	ebb3 030e 	subs.w	r3, r3, lr
   30ae2:	d001      	beq.n	30ae8 <ticker_job+0x5d4>
   30ae4:	459c      	cmp	ip, r3
   30ae6:	d91e      	bls.n	30b26 <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   30ae8:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   30aea:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   30aee:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   30af2:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   30af4:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   30af8:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   30afa:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   30afe:	d012      	beq.n	30b26 <ticker_job+0x612>
   30b00:	45c8      	cmp	r8, r9
   30b02:	d310      	bcc.n	30b26 <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   30b04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30b08:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   30b0c:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   30b0e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   30b10:	2900      	cmp	r1, #0
   30b12:	d0da      	beq.n	30aca <ticker_job+0x5b6>
   30b14:	7a09      	ldrb	r1, [r1, #8]
   30b16:	2901      	cmp	r1, #1
   30b18:	d1d7      	bne.n	30aca <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   30b1a:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   30b1e:	e7eb      	b.n	30af8 <ticker_job+0x5e4>
		window_start_ticks = 0U;
   30b20:	f04f 0c00 	mov.w	ip, #0
   30b24:	e7b7      	b.n	30a96 <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   30b26:	9a02      	ldr	r2, [sp, #8]
   30b28:	441a      	add	r2, r3
   30b2a:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30b2c:	465c      	mov	r4, fp
   30b2e:	60ab      	str	r3, [r5, #8]
   30b30:	f04f 0eff 	mov.w	lr, #255	; 0xff
   30b34:	e000      	b.n	30b38 <ticker_job+0x624>
   30b36:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   30b38:	b221      	sxth	r1, r4
   30b3a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   30b3e:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   30b42:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   30b44:	f8dc 0008 	ldr.w	r0, [ip, #8]
   30b48:	4298      	cmp	r0, r3
   30b4a:	f080 814d 	bcs.w	30de8 <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   30b4e:	1a1b      	subs	r3, r3, r0
   30b50:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   30b52:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   30b56:	2aff      	cmp	r2, #255	; 0xff
   30b58:	46a6      	mov	lr, r4
   30b5a:	d1ec      	bne.n	30b36 <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   30b5c:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   30b5e:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   30b62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   30b66:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   30b68:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   30b6c:	f81a 3001 	ldrb.w	r3, [sl, r1]
   30b70:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   30b72:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   30b76:	8beb      	ldrh	r3, [r5, #30]
   30b78:	3b01      	subs	r3, #1
   30b7a:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   30b7c:	f04f 0302 	mov.w	r3, #2
   30b80:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   30b82:	2201      	movs	r2, #1
   30b84:	e747      	b.n	30a16 <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   30b86:	b111      	cbz	r1, 30b8e <ticker_job+0x67a>
   30b88:	7a0b      	ldrb	r3, [r1, #8]
   30b8a:	2b01      	cmp	r3, #1
   30b8c:	d037      	beq.n	30bfe <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   30b8e:	f1be 0f00 	cmp.w	lr, #0
   30b92:	d159      	bne.n	30c48 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   30b94:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   30b98:	4672      	mov	r2, lr
				while (count--) {
   30b9a:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   30b9c:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   30ba0:	2100      	movs	r1, #0
   30ba2:	9005      	str	r0, [sp, #20]
   30ba4:	e004      	b.n	30bb0 <ticker_job+0x69c>
   30ba6:	4628      	mov	r0, r5
				while (count--) {
   30ba8:	3a01      	subs	r2, #1
					ticks_to_expire +=
   30baa:	4401      	add	r1, r0
				while (count--) {
   30bac:	1c50      	adds	r0, r2, #1
   30bae:	d00f      	beq.n	30bd0 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   30bb0:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   30bb2:	eb03 0008 	add.w	r0, r3, r8
   30bb6:	4548      	cmp	r0, r9
   30bb8:	d8f5      	bhi.n	30ba6 <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30bba:	9805      	ldr	r0, [sp, #20]
   30bbc:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   30bc0:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30bc2:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   30bc6:	4401      	add	r1, r0
				while (count--) {
   30bc8:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30bca:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   30bce:	d1ef      	bne.n	30bb0 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   30bd0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   30bd4:	6263      	str	r3, [r4, #36]	; 0x24
   30bd6:	2a00      	cmp	r2, #0
   30bd8:	f000 80d2 	beq.w	30d80 <ticker_job+0x86c>
				lazy = 0U;
   30bdc:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   30bde:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   30be0:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   30be2:	83e2      	strh	r2, [r4, #30]
   30be4:	e00d      	b.n	30c02 <ticker_job+0x6ee>
   30be6:	bf00      	nop
   30be8:	ff172b5a 	.word	0xff172b5a
   30bec:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   30bf0:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   30bf4:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   30bf8:	2d00      	cmp	r5, #0
   30bfa:	f43f aeeb 	beq.w	309d4 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   30bfe:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   30c00:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   30c02:	9b07      	ldr	r3, [sp, #28]
   30c04:	9a02      	ldr	r2, [sp, #8]
   30c06:	f8db 1014 	ldr.w	r1, [fp, #20]
   30c0a:	189a      	adds	r2, r3, r2
   30c0c:	4620      	mov	r0, r4
   30c0e:	f7ff f9e9 	bl	2ffe4 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   30c12:	9a00      	ldr	r2, [sp, #0]
   30c14:	9904      	ldr	r1, [sp, #16]
   30c16:	9b01      	ldr	r3, [sp, #4]
   30c18:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   30c1a:	7863      	ldrb	r3, [r4, #1]
   30c1c:	9601      	str	r6, [sp, #4]
   30c1e:	3301      	adds	r3, #1
   30c20:	7063      	strb	r3, [r4, #1]
   30c22:	e6e3      	b.n	309ec <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   30c24:	9b02      	ldr	r3, [sp, #8]
   30c26:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30c28:	2300      	movs	r3, #0
   30c2a:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   30c2c:	e7a3      	b.n	30b76 <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30c2e:	f1be 0f00 	cmp.w	lr, #0
   30c32:	f47f aec7 	bne.w	309c4 <ticker_job+0x4b0>
   30c36:	b111      	cbz	r1, 30c3e <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   30c38:	7a0b      	ldrb	r3, [r1, #8]
   30c3a:	2b01      	cmp	r3, #1
   30c3c:	d0d8      	beq.n	30bf0 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   30c3e:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   30c42:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   30c46:	e6bd      	b.n	309c4 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   30c48:	7062      	strb	r2, [r4, #1]
   30c4a:	2200      	movs	r2, #0
   30c4c:	e7a5      	b.n	30b9a <ticker_job+0x686>
	count_user = instance->count_user;
   30c4e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   30c52:	f8db 2004 	ldr.w	r2, [fp, #4]
   30c56:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   30c58:	1e5f      	subs	r7, r3, #1
   30c5a:	b2ff      	uxtb	r7, r7
   30c5c:	2b00      	cmp	r3, #0
   30c5e:	f43f ae10 	beq.w	30882 <ticker_job+0x36e>
		flag_compare_update = 1U;
   30c62:	2301      	movs	r3, #1
   30c64:	9306      	str	r3, [sp, #24]
   30c66:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   30c68:	2600      	movs	r6, #0
   30c6a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   30c6e:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   30c72:	787b      	ldrb	r3, [r7, #1]
   30c74:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   30c76:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   30c78:	429a      	cmp	r2, r3
   30c7a:	d10c      	bne.n	30c96 <ticker_job+0x782>
   30c7c:	e05b      	b.n	30d36 <ticker_job+0x822>
	switch (uop->op) {
   30c7e:	2b01      	cmp	r3, #1
   30c80:	d053      	beq.n	30d2a <ticker_job+0x816>
			first = user->first + 1;
   30c82:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   30c84:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   30c86:	3301      	adds	r3, #1
   30c88:	b2db      	uxtb	r3, r3
				first = 0U;
   30c8a:	4299      	cmp	r1, r3
   30c8c:	bf08      	it	eq
   30c8e:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   30c90:	429a      	cmp	r2, r3
			user->first = first;
   30c92:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   30c94:	d04f      	beq.n	30d36 <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   30c96:	b21b      	sxth	r3, r3
   30c98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   30c9c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   30ca0:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   30ca4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   30ca8:	2b02      	cmp	r3, #2
   30caa:	d017      	beq.n	30cdc <ticker_job+0x7c8>
   30cac:	2b03      	cmp	r3, #3
   30cae:	d1e6      	bne.n	30c7e <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   30cb0:	7843      	ldrb	r3, [r0, #1]
   30cb2:	f89b 2008 	ldrb.w	r2, [fp, #8]
   30cb6:	429a      	cmp	r2, r3
   30cb8:	d93a      	bls.n	30d30 <ticker_job+0x81c>
			node[uop->id].priority =
   30cba:	f8db 2000 	ldr.w	r2, [fp]
   30cbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30cc2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   30cc6:	7902      	ldrb	r2, [r0, #4]
   30cc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   30ccc:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   30cce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   30cd0:	b113      	cbz	r3, 30cd8 <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   30cd2:	6b01      	ldr	r1, [r0, #48]	; 0x30
   30cd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   30cd6:	4798      	blx	r3
   30cd8:	78fa      	ldrb	r2, [r7, #3]
   30cda:	e7d2      	b.n	30c82 <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   30cdc:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   30ce0:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   30ce4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   30ce8:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   30cec:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   30cf0:	2aff      	cmp	r2, #255	; 0xff
   30cf2:	d003      	beq.n	30cfc <ticker_job+0x7e8>
   30cf4:	f8d1 8000 	ldr.w	r8, [r1]
   30cf8:	4598      	cmp	r8, r3
   30cfa:	d023      	beq.n	30d44 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   30cfc:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   30d00:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   30d02:	f04f 0800 	mov.w	r8, #0
   30d06:	e00a      	b.n	30d1e <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   30d08:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   30d0c:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   30d10:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   30d12:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   30d16:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   30d18:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   30d1a:	b911      	cbnz	r1, 30d22 <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   30d1c:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   30d1e:	2aff      	cmp	r2, #255	; 0xff
   30d20:	d1f2      	bne.n	30d08 <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   30d22:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   30d26:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   30d2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   30d2c:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   30d2e:	e7cf      	b.n	30cd0 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   30d30:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   30d34:	e7cb      	b.n	30cce <ticker_job+0x7ba>
	while (count_user--) {
   30d36:	9a01      	ldr	r2, [sp, #4]
   30d38:	42ba      	cmp	r2, r7
   30d3a:	f1a7 0308 	sub.w	r3, r7, #8
   30d3e:	d00b      	beq.n	30d58 <ticker_job+0x844>
   30d40:	461f      	mov	r7, r3
   30d42:	e796      	b.n	30c72 <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   30d44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30d48:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   30d4a:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   30d4e:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   30d50:	e7e5      	b.n	30d1e <ticker_job+0x80a>
	if (!pending) {
   30d52:	9b08      	ldr	r3, [sp, #32]
   30d54:	2b00      	cmp	r3, #0
   30d56:	d054      	beq.n	30e02 <ticker_job+0x8ee>
	if (flag_compare_update) {
   30d58:	9b06      	ldr	r3, [sp, #24]
   30d5a:	2b00      	cmp	r3, #0
   30d5c:	f47f ad91 	bne.w	30882 <ticker_job+0x36e>
	if (instance->worker_trigger) {
   30d60:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   30d64:	2200      	movs	r2, #0
   30d66:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   30d6a:	b12b      	cbz	r3, 30d78 <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30d6c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   30d70:	465b      	mov	r3, fp
   30d72:	2201      	movs	r2, #1
   30d74:	2103      	movs	r1, #3
   30d76:	e469      	b.n	3064c <ticker_job+0x138>
}
   30d78:	b00d      	add	sp, #52	; 0x34
   30d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d7e:	4770      	bx	lr
					while (ticks_to_expire <
   30d80:	458a      	cmp	sl, r1
   30d82:	f67f af2c 	bls.w	30bde <ticker_job+0x6ca>
   30d86:	1c68      	adds	r0, r5, #1
   30d88:	9405      	str	r4, [sp, #20]
   30d8a:	4604      	mov	r4, r0
   30d8c:	e005      	b.n	30d9a <ticker_job+0x886>
   30d8e:	4628      	mov	r0, r5
						ticks_to_expire +=
   30d90:	4401      	add	r1, r0
						lazy++;
   30d92:	3201      	adds	r2, #1
					while (ticks_to_expire <
   30d94:	458a      	cmp	sl, r1
						lazy++;
   30d96:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   30d98:	d910      	bls.n	30dbc <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   30d9a:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   30d9c:	eb03 0008 	add.w	r0, r3, r8
   30da0:	4548      	cmp	r0, r9
   30da2:	d8f4      	bhi.n	30d8e <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30da4:	4620      	mov	r0, r4
   30da6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   30daa:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30dac:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   30db0:	3201      	adds	r2, #1
					while (ticks_to_expire <
   30db2:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30db4:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   30db8:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   30dba:	d8ee      	bhi.n	30d9a <ticker_job+0x886>
   30dbc:	9c05      	ldr	r4, [sp, #20]
   30dbe:	6263      	str	r3, [r4, #36]	; 0x24
   30dc0:	e70d      	b.n	30bde <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   30dc2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   30dc6:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   30dca:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   30dcc:	f8db 3000 	ldr.w	r3, [fp]
   30dd0:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   30dd2:	f8db 3004 	ldr.w	r3, [fp, #4]
   30dd6:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   30dd8:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   30dda:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   30ddc:	b2db      	uxtb	r3, r3
   30dde:	b3a1      	cbz	r1, 30e4a <ticker_job+0x936>
		flag_elapsed = 0U;
   30de0:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   30de2:	9203      	str	r2, [sp, #12]
   30de4:	f7ff bbd1 	b.w	3058a <ticker_job+0x76>
				node->ticks_to_expire -=
   30de8:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   30dea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   30dee:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   30df2:	f43f aec0 	beq.w	30b76 <ticker_job+0x662>
   30df6:	fa0f f18e 	sxth.w	r1, lr
   30dfa:	e6af      	b.n	30b5c <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   30dfc:	1bdb      	subs	r3, r3, r7
   30dfe:	60a3      	str	r3, [r4, #8]
			break;
   30e00:	e5f8      	b.n	309f4 <ticker_job+0x4e0>
	count_user = instance->count_user;
   30e02:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   30e06:	f8db 2004 	ldr.w	r2, [fp, #4]
   30e0a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   30e0c:	1e5f      	subs	r7, r3, #1
   30e0e:	b2ff      	uxtb	r7, r7
   30e10:	2b00      	cmp	r3, #0
   30e12:	f47f af28 	bne.w	30c66 <ticker_job+0x752>
   30e16:	e79f      	b.n	30d58 <ticker_job+0x844>
		if (cntr_stop() == 0) {
   30e18:	f00b fb06 	bl	3c428 <cntr_stop>
   30e1c:	2800      	cmp	r0, #0
   30e1e:	d19f      	bne.n	30d60 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   30e20:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   30e24:	f00b fb26 	bl	3c474 <cntr_cnt_get>
   30e28:	f8cb 0014 	str.w	r0, [fp, #20]
   30e2c:	e798      	b.n	30d60 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   30e2e:	f00b fb21 	bl	3c474 <cntr_cnt_get>
   30e32:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   30e34:	f00b fae8 	bl	3c408 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   30e38:	f89b 301d 	ldrb.w	r3, [fp, #29]
   30e3c:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   30e3e:	2800      	cmp	r0, #0
   30e40:	f47f ad2a 	bne.w	30898 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   30e44:	f8cb 4014 	str.w	r4, [fp, #20]
   30e48:	e526      	b.n	30898 <ticker_job+0x384>
	insert_head = TICKER_NULL;
   30e4a:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   30e4c:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   30e4e:	9301      	str	r3, [sp, #4]
   30e50:	e507      	b.n	30862 <ticker_job+0x34e>
   30e52:	bf00      	nop

00030e54 <ticker_init>:
{
   30e54:	b4f0      	push	{r4, r5, r6, r7}
   30e56:	9d04      	ldr	r5, [sp, #16]
   30e58:	f89d 7014 	ldrb.w	r7, [sp, #20]
   30e5c:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   30e5e:	2800      	cmp	r0, #0
   30e60:	d137      	bne.n	30ed2 <ticker_init+0x7e>
	instance->count_node = count_node;
   30e62:	4e1d      	ldr	r6, [pc, #116]	; (30ed8 <ticker_init+0x84>)
	while (count_node--) {
   30e64:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   30e68:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   30e6a:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   30e6c:	fa5f fc8c 	uxtb.w	ip, ip
   30e70:	b149      	cbz	r1, 30e86 <ticker_init+0x32>
   30e72:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   30e76:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   30e7a:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   30e7c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   30e80:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   30e84:	d1f9      	bne.n	30e7a <ticker_init+0x26>
	while (count_user--) {
   30e86:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   30e88:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   30e8a:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   30e8c:	b2d2      	uxtb	r2, r2
   30e8e:	b183      	cbz	r3, 30eb2 <ticker_init+0x5e>
   30e90:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   30e94:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   30e96:	4610      	mov	r0, r2
   30e98:	f812 3908 	ldrb.w	r3, [r2], #-8
   30e9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   30ea0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   30ea4:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   30ea6:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   30eaa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   30eae:	b2df      	uxtb	r7, r3
	while (count_user--) {
   30eb0:	d1f0      	bne.n	30e94 <ticker_init+0x40>
	if (count_op) {
   30eb2:	b977      	cbnz	r7, 30ed2 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   30eb4:	9a07      	ldr	r2, [sp, #28]
   30eb6:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   30eb8:	9a08      	ldr	r2, [sp, #32]
   30eba:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   30ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   30ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30ec2:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   30ec4:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   30ec6:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   30eca:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   30ecc:	8177      	strh	r7, [r6, #10]
}
   30ece:	bcf0      	pop	{r4, r5, r6, r7}
   30ed0:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   30ed2:	2001      	movs	r0, #1
}
   30ed4:	bcf0      	pop	{r4, r5, r6, r7}
   30ed6:	4770      	bx	lr
   30ed8:	20001ed0 	.word	0x20001ed0

00030edc <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   30edc:	4b04      	ldr	r3, [pc, #16]	; (30ef0 <ticker_is_initialized+0x14>)
   30ede:	222c      	movs	r2, #44	; 0x2c
   30ee0:	fb02 3300 	mla	r3, r2, r0, r3
   30ee4:	7a18      	ldrb	r0, [r3, #8]
}
   30ee6:	3800      	subs	r0, #0
   30ee8:	bf18      	it	ne
   30eea:	2001      	movne	r0, #1
   30eec:	4770      	bx	lr
   30eee:	bf00      	nop
   30ef0:	20001ed0 	.word	0x20001ed0

00030ef4 <ticker_trigger>:
	if (instance->sched_cb) {
   30ef4:	4b0a      	ldr	r3, [pc, #40]	; (30f20 <ticker_trigger+0x2c>)
   30ef6:	222c      	movs	r2, #44	; 0x2c
   30ef8:	fb02 3200 	mla	r2, r2, r0, r3
{
   30efc:	b410      	push	{r4}
	if (instance->sched_cb) {
   30efe:	6a54      	ldr	r4, [r2, #36]	; 0x24
   30f00:	b15c      	cbz	r4, 30f1a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   30f02:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   30f06:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   30f0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   30f0e:	46a4      	mov	ip, r4
   30f10:	2201      	movs	r2, #1
}
   30f12:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   30f14:	2103      	movs	r1, #3
   30f16:	2002      	movs	r0, #2
   30f18:	4760      	bx	ip
}
   30f1a:	bc10      	pop	{r4}
   30f1c:	4770      	bx	lr
   30f1e:	bf00      	nop
   30f20:	20001ed0 	.word	0x20001ed0

00030f24 <ticker_start_ext>:
{
   30f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   30f28:	4e28      	ldr	r6, [pc, #160]	; (30fcc <ticker_start_ext+0xa8>)
{
   30f2a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   30f2e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   30f30:	252c      	movs	r5, #44	; 0x2c
   30f32:	fb05 6504 	mla	r5, r5, r4, r6
{
   30f36:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   30f38:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   30f3c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   30f40:	6869      	ldr	r1, [r5, #4]
   30f42:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   30f46:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   30f4a:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   30f4e:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   30f52:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   30f54:	f10e 0c01 	add.w	ip, lr, #1
   30f58:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   30f5c:	4564      	cmp	r4, ip
   30f5e:	bf98      	it	ls
   30f60:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   30f64:	4561      	cmp	r1, ip
   30f66:	d02e      	beq.n	30fc6 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   30f68:	6879      	ldr	r1, [r7, #4]
   30f6a:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   30f6e:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   30f72:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   30f76:	f04f 0904 	mov.w	r9, #4
   30f7a:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   30f7e:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   30f80:	9b08      	ldr	r3, [sp, #32]
   30f82:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   30f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30f86:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   30f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30f8a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   30f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30f8e:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   30f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   30f92:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   30f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   30f96:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   30f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30f9a:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   30f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   30fa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30fa2:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   30fa4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   30fa6:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   30fa8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   30faa:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   30fae:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   30fb2:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   30fb6:	4798      	blx	r3
   30fb8:	4633      	mov	r3, r6
   30fba:	4649      	mov	r1, r9
   30fbc:	2200      	movs	r2, #0
   30fbe:	47a8      	blx	r5
	return user_op->status;
   30fc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   30fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   30fc6:	2001      	movs	r0, #1
}
   30fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30fcc:	20001ed0 	.word	0x20001ed0

00030fd0 <ticker_start>:
{
   30fd0:	b510      	push	{r4, lr}
   30fd2:	b08a      	sub	sp, #40	; 0x28
   30fd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30fd6:	9400      	str	r4, [sp, #0]
{
   30fd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30fda:	9401      	str	r4, [sp, #4]
{
   30fdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30fde:	9402      	str	r4, [sp, #8]
{
   30fe0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30fe4:	9403      	str	r4, [sp, #12]
{
   30fe6:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30fe8:	9404      	str	r4, [sp, #16]
{
   30fea:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30fec:	9405      	str	r4, [sp, #20]
{
   30fee:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ff0:	9406      	str	r4, [sp, #24]
{
   30ff2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ff4:	9407      	str	r4, [sp, #28]
{
   30ff6:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ff8:	9408      	str	r4, [sp, #32]
   30ffa:	2400      	movs	r4, #0
   30ffc:	9409      	str	r4, [sp, #36]	; 0x24
   30ffe:	f7ff ff91 	bl	30f24 <ticker_start_ext>
}
   31002:	b00a      	add	sp, #40	; 0x28
   31004:	bd10      	pop	{r4, pc}
   31006:	bf00      	nop

00031008 <ticker_update_ext>:
{
   31008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   3100c:	4d28      	ldr	r5, [pc, #160]	; (310b0 <ticker_update_ext+0xa8>)
{
   3100e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   31012:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   31016:	4604      	mov	r4, r0
   31018:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   3101a:	212c      	movs	r1, #44	; 0x2c
   3101c:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   31020:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   31024:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   31028:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   3102c:	684c      	ldr	r4, [r1, #4]
   3102e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   31032:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   31036:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   3103a:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   3103c:	f10e 0c01 	add.w	ip, lr, #1
   31040:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   31044:	45e1      	cmp	r9, ip
   31046:	bf98      	it	ls
   31048:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   3104c:	4564      	cmp	r4, ip
{
   3104e:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   31052:	d02a      	beq.n	310aa <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   31054:	f8d6 a004 	ldr.w	sl, [r6, #4]
   31058:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   3105c:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   31060:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   31064:	f04f 0b05 	mov.w	fp, #5
   31068:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   3106c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   3106e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31070:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   31072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31074:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   31076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   31078:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   3107a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3107c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   3107e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31080:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   31082:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   31084:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   31086:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   31088:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   3108a:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   3108e:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   31092:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   31096:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   3109a:	4798      	blx	r3
   3109c:	462b      	mov	r3, r5
   3109e:	2200      	movs	r2, #0
   310a0:	2104      	movs	r1, #4
   310a2:	47b0      	blx	r6
	return user_op->status;
   310a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   310a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   310aa:	2001      	movs	r0, #1
}
   310ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310b0:	20001ed0 	.word	0x20001ed0

000310b4 <ticker_update>:
{
   310b4:	b510      	push	{r4, lr}
   310b6:	b088      	sub	sp, #32
   310b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310ba:	9400      	str	r4, [sp, #0]
{
   310bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310be:	9401      	str	r4, [sp, #4]
{
   310c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310c2:	9402      	str	r4, [sp, #8]
{
   310c4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310c8:	9403      	str	r4, [sp, #12]
{
   310ca:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310ce:	9404      	str	r4, [sp, #16]
{
   310d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310d2:	9405      	str	r4, [sp, #20]
{
   310d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   310d6:	9406      	str	r4, [sp, #24]
   310d8:	2400      	movs	r4, #0
   310da:	9407      	str	r4, [sp, #28]
   310dc:	f7ff ff94 	bl	31008 <ticker_update_ext>
}
   310e0:	b008      	add	sp, #32
   310e2:	bd10      	pop	{r4, pc}

000310e4 <ticker_stop>:
{
   310e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   310e8:	4c1e      	ldr	r4, [pc, #120]	; (31164 <ticker_stop+0x80>)
{
   310ea:	4684      	mov	ip, r0
   310ec:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   310ee:	212c      	movs	r1, #44	; 0x2c
   310f0:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   310f4:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   310f8:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   310fc:	684d      	ldr	r5, [r1, #4]
   310fe:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   31102:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   31106:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   3110a:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   3110c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   31110:	f10e 0c01 	add.w	ip, lr, #1
   31114:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   31118:	4567      	cmp	r7, ip
   3111a:	bf98      	it	ls
   3111c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   31120:	4565      	cmp	r5, ip
   31122:	d01c      	beq.n	3115e <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   31124:	6877      	ldr	r7, [r6, #4]
   31126:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   3112a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   3112e:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   31132:	f04f 0807 	mov.w	r8, #7
   31136:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   3113a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   3113c:	9b06      	ldr	r3, [sp, #24]
   3113e:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   31140:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   31142:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   31144:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   31146:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3114a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   3114e:	4798      	blx	r3
   31150:	4623      	mov	r3, r4
   31152:	2200      	movs	r2, #0
   31154:	2104      	movs	r1, #4
   31156:	47b0      	blx	r6
	return user_op->status;
   31158:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   3115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   3115e:	2001      	movs	r0, #1
}
   31160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31164:	20001ed0 	.word	0x20001ed0

00031168 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   31168:	f00b b984 	b.w	3c474 <cntr_cnt_get>

0003116c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3116c:	1a40      	subs	r0, r0, r1
}
   3116e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   31172:	4770      	bx	lr

00031174 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   31174:	b570      	push	{r4, r5, r6, lr}
   31176:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   31178:	2000      	movs	r0, #0
{
   3117a:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   3117c:	f003 f9b2 	bl	344e4 <ull_adv_is_enabled>
   31180:	b978      	cbnz	r0, 311a2 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   31182:	b13c      	cbz	r4, 31194 <ll_addr_set+0x20>
   31184:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   31186:	2206      	movs	r2, #6
   31188:	4631      	mov	r1, r6
   3118a:	4807      	ldr	r0, [pc, #28]	; (311a8 <ll_addr_set+0x34>)
   3118c:	f013 fe98 	bl	44ec0 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   31190:	4628      	mov	r0, r5
}
   31192:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   31194:	2206      	movs	r2, #6
   31196:	4631      	mov	r1, r6
   31198:	4804      	ldr	r0, [pc, #16]	; (311ac <ll_addr_set+0x38>)
   3119a:	f013 fe91 	bl	44ec0 <memcpy>
	return 0;
   3119e:	4620      	mov	r0, r4
}
   311a0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   311a2:	200c      	movs	r0, #12
}
   311a4:	bd70      	pop	{r4, r5, r6, pc}
   311a6:	bf00      	nop
   311a8:	20001f04 	.word	0x20001f04
   311ac:	20001efc 	.word	0x20001efc

000311b0 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   311b0:	2801      	cmp	r0, #1
{
   311b2:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   311b4:	d805      	bhi.n	311c2 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   311b6:	4a04      	ldr	r2, [pc, #16]	; (311c8 <ll_addr_get+0x18>)
   311b8:	4804      	ldr	r0, [pc, #16]	; (311cc <ll_addr_get+0x1c>)
   311ba:	2b00      	cmp	r3, #0
   311bc:	bf18      	it	ne
   311be:	4610      	movne	r0, r2
   311c0:	4770      	bx	lr
		return NULL;
   311c2:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   311c4:	4770      	bx	lr
   311c6:	bf00      	nop
   311c8:	20001f04 	.word	0x20001f04
   311cc:	20001efc 	.word	0x20001efc

000311d0 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   311d0:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   311d2:	b510      	push	{r4, lr}
   311d4:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   311d6:	d80b      	bhi.n	311f0 <ll_addr_read+0x20>
	if (addr_type) {
   311d8:	4608      	mov	r0, r1
		return rnd_addr;
   311da:	4c07      	ldr	r4, [pc, #28]	; (311f8 <ll_addr_read+0x28>)
   311dc:	4907      	ldr	r1, [pc, #28]	; (311fc <ll_addr_read+0x2c>)
   311de:	2b00      	cmp	r3, #0
   311e0:	bf18      	it	ne
   311e2:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   311e4:	2206      	movs	r2, #6
   311e6:	4621      	mov	r1, r4
   311e8:	f013 fe6a 	bl	44ec0 <memcpy>
	}

	return addr;
}
   311ec:	4620      	mov	r0, r4
   311ee:	bd10      	pop	{r4, pc}
		return NULL;
   311f0:	2400      	movs	r4, #0
}
   311f2:	4620      	mov	r0, r4
   311f4:	bd10      	pop	{r4, pc}
   311f6:	bf00      	nop
   311f8:	20001efc 	.word	0x20001efc
   311fc:	20001f04 	.word	0x20001f04

00031200 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   31200:	2802      	cmp	r0, #2
   31202:	d001      	beq.n	31208 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   31204:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   31206:	4770      	bx	lr
{
   31208:	b538      	push	{r3, r4, r5, lr}
   3120a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   3120c:	4608      	mov	r0, r1
   3120e:	461d      	mov	r5, r3
   31210:	f004 f88e 	bl	35330 <ll_connected_get>
			if (!conn) {
   31214:	b118      	cbz	r0, 3121e <ll_tx_pwr_lvl_get+0x1e>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   31216:	2308      	movs	r3, #8
   31218:	702b      	strb	r3, [r5, #0]
	return BT_HCI_ERR_SUCCESS;
   3121a:	2000      	movs	r0, #0
}
   3121c:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3121e:	4620      	mov	r0, r4
}
   31220:	bd38      	pop	{r3, r4, r5, pc}
   31222:	bf00      	nop

00031224 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   31224:	2308      	movs	r3, #8
   31226:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   31228:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   3122a:	4770      	bx	lr

0003122c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   3122c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   3122e:	4802      	ldr	r0, [pc, #8]	; (31238 <hci_driver_init+0xc>)
   31230:	f7fa fb56 	bl	2b8e0 <bt_hci_driver_register>

	return 0;
}
   31234:	2000      	movs	r0, #0
   31236:	bd08      	pop	{r3, pc}
   31238:	0004a524 	.word	0x0004a524

0003123c <hci_driver_send>:
{
   3123c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   3123e:	8983      	ldrh	r3, [r0, #12]
{
   31240:	b083      	sub	sp, #12
	if (!buf->len) {
   31242:	b123      	cbz	r3, 3124e <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   31244:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   31246:	4604      	mov	r4, r0
   31248:	b1c3      	cbz	r3, 3127c <hci_driver_send+0x40>
   3124a:	2b02      	cmp	r3, #2
   3124c:	d004      	beq.n	31258 <hci_driver_send+0x1c>
   3124e:	f06f 0515 	mvn.w	r5, #21
}
   31252:	4628      	mov	r0, r5
   31254:	b003      	add	sp, #12
   31256:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   31258:	a901      	add	r1, sp, #4
   3125a:	f000 ff11 	bl	32080 <hci_acl_handle>
	if (evt) {
   3125e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   31260:	4605      	mov	r5, r0
	if (evt) {
   31262:	b113      	cbz	r3, 3126a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   31264:	4618      	mov	r0, r3
   31266:	f7fa fb1d 	bl	2b8a4 <bt_recv_prio>
	if (!err) {
   3126a:	2d00      	cmp	r5, #0
   3126c:	d1f1      	bne.n	31252 <hci_driver_send+0x16>
		net_buf_unref(buf);
   3126e:	4620      	mov	r0, r4
   31270:	f00c f88e 	bl	3d390 <net_buf_unref>
   31274:	2500      	movs	r5, #0
}
   31276:	4628      	mov	r0, r5
   31278:	b003      	add	sp, #12
   3127a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   3127c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   3127e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   31280:	f000 fa40 	bl	31704 <hci_cmd_handle>
	if (evt) {
   31284:	2800      	cmp	r0, #0
   31286:	d0f2      	beq.n	3126e <hci_driver_send+0x32>
		bt_recv_prio(evt);
   31288:	f7fa fb0c 	bl	2b8a4 <bt_recv_prio>
		if (node_rx) {
   3128c:	9d01      	ldr	r5, [sp, #4]
   3128e:	2d00      	cmp	r5, #0
   31290:	d0ed      	beq.n	3126e <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   31292:	4628      	mov	r0, r5
   31294:	f001 faae 	bl	327f4 <hci_get_class>
   31298:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   3129a:	9901      	ldr	r1, [sp, #4]
   3129c:	4801      	ldr	r0, [pc, #4]	; (312a4 <hci_driver_send+0x68>)
   3129e:	f017 fdb0 	bl	48e02 <k_queue_append>
	if (!err) {
   312a2:	e7e4      	b.n	3126e <hci_driver_send+0x32>
   312a4:	20000c44 	.word	0x20000c44

000312a8 <recv_thread>:
{
   312a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   312aa:	4e41      	ldr	r6, [pc, #260]	; (313b0 <recv_thread+0x108>)
		LL_ASSERT(0);
   312ac:	4f41      	ldr	r7, [pc, #260]	; (313b4 <recv_thread+0x10c>)
{
   312ae:	b083      	sub	sp, #12
   312b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   312b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   312b8:	4630      	mov	r0, r6
   312ba:	f010 fafb 	bl	418b4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   312be:	2800      	cmp	r0, #0
   312c0:	d0f6      	beq.n	312b0 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   312c2:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   312c4:	9001      	str	r0, [sp, #4]
	switch (class) {
   312c6:	2b04      	cmp	r3, #4
   312c8:	d821      	bhi.n	3130e <recv_thread+0x66>
   312ca:	2b00      	cmp	r3, #0
   312cc:	d14b      	bne.n	31366 <recv_thread+0xbe>
		LL_ASSERT(0);
   312ce:	493a      	ldr	r1, [pc, #232]	; (313b8 <recv_thread+0x110>)
   312d0:	483a      	ldr	r0, [pc, #232]	; (313bc <recv_thread+0x114>)
   312d2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   312d6:	463a      	mov	r2, r7
   312d8:	f011 fd1a 	bl	42d10 <printk>
   312dc:	4040      	eors	r0, r0
   312de:	f380 8811 	msr	BASEPRI, r0
   312e2:	f04f 0003 	mov.w	r0, #3
   312e6:	df02      	svc	2
	node_rx->hdr.next = NULL;
   312e8:	9b01      	ldr	r3, [sp, #4]
   312ea:	2200      	movs	r2, #0
   312ec:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   312ee:	a801      	add	r0, sp, #4
   312f0:	f001 ff10 	bl	33114 <ll_rx_mem_release>
   312f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   312f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   312fc:	4630      	mov	r0, r6
   312fe:	f010 fad9 	bl	418b4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   31302:	2800      	cmp	r0, #0
   31304:	d0d4      	beq.n	312b0 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   31306:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   31308:	9001      	str	r0, [sp, #4]
	switch (class) {
   3130a:	2b04      	cmp	r3, #4
   3130c:	d9dd      	bls.n	312ca <recv_thread+0x22>
   3130e:	2b05      	cmp	r3, #5
   31310:	d1dd      	bne.n	312ce <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   31312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3131a:	2003      	movs	r0, #3
   3131c:	f7f9 fdf8 	bl	2af10 <bt_buf_get_rx>
   31320:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   31322:	4621      	mov	r1, r4
   31324:	9801      	ldr	r0, [sp, #4]
   31326:	f000 ff37 	bl	32198 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   3132a:	9b01      	ldr	r3, [sp, #4]
   3132c:	2200      	movs	r2, #0
   3132e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   31330:	a801      	add	r0, sp, #4
   31332:	f001 feef 	bl	33114 <ll_rx_mem_release>
		while (buf) {
   31336:	2c00      	cmp	r4, #0
   31338:	d0ba      	beq.n	312b0 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   3133a:	4620      	mov	r0, r4
   3133c:	f016 fd30 	bl	47da0 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   31340:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   31342:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   31344:	2000      	movs	r0, #0
   31346:	f016 fd51 	bl	47dec <net_buf_frag_del>
			if (frag->len) {
   3134a:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   3134c:	4604      	mov	r4, r0
				bt_recv(frag);
   3134e:	4628      	mov	r0, r5
			if (frag->len) {
   31350:	b133      	cbz	r3, 31360 <recv_thread+0xb8>
				bt_recv(frag);
   31352:	f7fa fa23 	bl	2b79c <bt_recv>
	z_impl_k_yield();
   31356:	f010 ff3d 	bl	421d4 <z_impl_k_yield>
		while (buf) {
   3135a:	2c00      	cmp	r4, #0
   3135c:	d1ed      	bne.n	3133a <recv_thread+0x92>
   3135e:	e7a7      	b.n	312b0 <recv_thread+0x8>
				net_buf_unref(frag);
   31360:	f00c f816 	bl	3d390 <net_buf_unref>
   31364:	e7f7      	b.n	31356 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   31366:	2b02      	cmp	r3, #2
   31368:	d013      	beq.n	31392 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3136a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3136e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31372:	2001      	movs	r0, #1
   31374:	f7f9 fdcc 	bl	2af10 <bt_buf_get_rx>
   31378:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   3137a:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   3137c:	b19c      	cbz	r4, 313a6 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   3137e:	4621      	mov	r1, r4
   31380:	f000 ff44 	bl	3220c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   31384:	9b01      	ldr	r3, [sp, #4]
   31386:	2200      	movs	r2, #0
   31388:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3138a:	a801      	add	r0, sp, #4
   3138c:	f001 fec2 	bl	33114 <ll_rx_mem_release>
		while (buf) {
   31390:	e7d3      	b.n	3133a <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   31392:	2200      	movs	r2, #0
   31394:	2300      	movs	r3, #0
   31396:	2101      	movs	r1, #1
   31398:	2000      	movs	r0, #0
   3139a:	f7f9 fde3 	bl	2af64 <bt_buf_get_evt>
   3139e:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   313a0:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   313a2:	2c00      	cmp	r4, #0
   313a4:	d1eb      	bne.n	3137e <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   313a6:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   313a8:	a801      	add	r0, sp, #4
   313aa:	f001 feb3 	bl	33114 <ll_rx_mem_release>
		while (buf) {
   313ae:	e77f      	b.n	312b0 <recv_thread+0x8>
   313b0:	20000c44 	.word	0x20000c44
   313b4:	0004a4c0 	.word	0x0004a4c0
   313b8:	0004a500 	.word	0x0004a500
   313bc:	0004a4a0 	.word	0x0004a4a0

000313c0 <prio_recv_thread>:
{
   313c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   313c4:	4f2e      	ldr	r7, [pc, #184]	; (31480 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   313c6:	4e2f      	ldr	r6, [pc, #188]	; (31484 <prio_recv_thread+0xc4>)
{
   313c8:	b082      	sub	sp, #8
   313ca:	e00c      	b.n	313e6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   313cc:	f7f9 fdca 	bl	2af64 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   313d0:	4622      	mov	r2, r4
   313d2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   313d6:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   313d8:	f001 f9f4 	bl	327c4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   313dc:	4620      	mov	r0, r4
   313de:	f7fa fa61 	bl	2b8a4 <bt_recv_prio>
	z_impl_k_yield();
   313e2:	f010 fef7 	bl	421d4 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   313e6:	f10d 0102 	add.w	r1, sp, #2
   313ea:	a801      	add	r0, sp, #4
   313ec:	f001 fce0 	bl	32db0 <ll_rx_get>
   313f0:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   313f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   313f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   313fa:	2100      	movs	r1, #0
   313fc:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   313fe:	2c00      	cmp	r4, #0
   31400:	d1e4      	bne.n	313cc <prio_recv_thread+0xc>
		if (node_rx) {
   31402:	9b01      	ldr	r3, [sp, #4]
   31404:	b1b3      	cbz	r3, 31434 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   31406:	f001 fdb5 	bl	32f74 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3140a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3140e:	4640      	mov	r0, r8
   31410:	f001 f9f0 	bl	327f4 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   31414:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   31416:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   3141a:	796b      	ldrb	r3, [r5, #5]
   3141c:	2b03      	cmp	r3, #3
   3141e:	d102      	bne.n	31426 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   31420:	792b      	ldrb	r3, [r5, #4]
   31422:	2b17      	cmp	r3, #23
   31424:	d00e      	beq.n	31444 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   31426:	4629      	mov	r1, r5
   31428:	4630      	mov	r0, r6
   3142a:	f017 fcea 	bl	48e02 <k_queue_append>
		if (iso_received || node_rx) {
   3142e:	9b01      	ldr	r3, [sp, #4]
   31430:	2b00      	cmp	r3, #0
   31432:	d1d8      	bne.n	313e6 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   31434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3143c:	4638      	mov	r0, r7
   3143e:	f010 fa93 	bl	41968 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   31442:	e7d0      	b.n	313e6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31448:	4621      	mov	r1, r4
   3144a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3144e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   31450:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31454:	f7f9 fd86 	bl	2af64 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   31458:	4641      	mov	r1, r8
   3145a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   3145c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   3145e:	f105 001c 	add.w	r0, r5, #28
   31462:	f000 fe71 	bl	32148 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   31466:	4640      	mov	r0, r8
   31468:	f000 fe8e 	bl	32188 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   3146c:	4620      	mov	r0, r4
			if (buf) {
   3146e:	b124      	cbz	r4, 3147a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   31470:	f7fa fa18 	bl	2b8a4 <bt_recv_prio>
					net_buf_unref(buf);
   31474:	4620      	mov	r0, r4
   31476:	f00b ff8b 	bl	3d390 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   3147a:	9d01      	ldr	r5, [sp, #4]
   3147c:	e7d3      	b.n	31426 <prio_recv_thread+0x66>
   3147e:	bf00      	nop
   31480:	20000c14 	.word	0x20000c14
   31484:	20000c44 	.word	0x20000c44

00031488 <hci_driver_open>:
{
   31488:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   3148a:	481a      	ldr	r0, [pc, #104]	; (314f4 <hci_driver_open+0x6c>)
{
   3148c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   3148e:	f002 fab3 	bl	339f8 <ll_init>
	if (err) {
   31492:	4604      	mov	r4, r0
   31494:	bb58      	cbnz	r0, 314ee <hci_driver_open+0x66>
	hci_init(NULL);
   31496:	f001 f9c3 	bl	32820 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   3149a:	2600      	movs	r6, #0
   3149c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3149e:	f06f 0209 	mvn.w	r2, #9
   314a2:	e9cd 2403 	strd	r2, r4, [sp, #12]
   314a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   314aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   314ae:	4b12      	ldr	r3, [pc, #72]	; (314f8 <hci_driver_open+0x70>)
   314b0:	4912      	ldr	r1, [pc, #72]	; (314fc <hci_driver_open+0x74>)
   314b2:	9400      	str	r4, [sp, #0]
   314b4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   314b8:	4811      	ldr	r0, [pc, #68]	; (31500 <hci_driver_open+0x78>)
   314ba:	f00f ffed 	bl	41498 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   314be:	4911      	ldr	r1, [pc, #68]	; (31504 <hci_driver_open+0x7c>)
   314c0:	480f      	ldr	r0, [pc, #60]	; (31500 <hci_driver_open+0x78>)
   314c2:	f017 fc07 	bl	48cd4 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   314c6:	f06f 0207 	mvn.w	r2, #7
   314ca:	e9cd 2403 	strd	r2, r4, [sp, #12]
   314ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
   314d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   314d6:	4b0c      	ldr	r3, [pc, #48]	; (31508 <hci_driver_open+0x80>)
   314d8:	490c      	ldr	r1, [pc, #48]	; (3150c <hci_driver_open+0x84>)
   314da:	9400      	str	r4, [sp, #0]
   314dc:	f640 0298 	movw	r2, #2200	; 0x898
   314e0:	480b      	ldr	r0, [pc, #44]	; (31510 <hci_driver_open+0x88>)
   314e2:	f00f ffd9 	bl	41498 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   314e6:	490b      	ldr	r1, [pc, #44]	; (31514 <hci_driver_open+0x8c>)
   314e8:	4809      	ldr	r0, [pc, #36]	; (31510 <hci_driver_open+0x88>)
   314ea:	f017 fbf3 	bl	48cd4 <z_impl_k_thread_name_set>
}
   314ee:	4620      	mov	r0, r4
   314f0:	b008      	add	sp, #32
   314f2:	bdd0      	pop	{r4, r6, r7, pc}
   314f4:	20000c14 	.word	0x20000c14
   314f8:	000313c1 	.word	0x000313c1
   314fc:	20004758 	.word	0x20004758
   31500:	20001468 	.word	0x20001468
   31504:	0004a504 	.word	0x0004a504
   31508:	000312a9 	.word	0x000312a9
   3150c:	20004918 	.word	0x20004918
   31510:	200014e8 	.word	0x200014e8
   31514:	0004a510 	.word	0x0004a510

00031518 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   31518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3151a:	4c19      	ldr	r4, [pc, #100]	; (31580 <le_remote_feat_complete+0x68>)
   3151c:	6864      	ldr	r4, [r4, #4]
   3151e:	00a4      	lsls	r4, r4, #2
   31520:	d504      	bpl.n	3152c <le_remote_feat_complete+0x14>
   31522:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   31524:	4a17      	ldr	r2, [pc, #92]	; (31584 <le_remote_feat_complete+0x6c>)
   31526:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31528:	0712      	lsls	r2, r2, #28
   3152a:	d400      	bmi.n	3152e <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   3152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   3152e:	f103 0408 	add.w	r4, r3, #8
   31532:	4607      	mov	r7, r0
   31534:	460e      	mov	r6, r1
   31536:	4620      	mov	r0, r4
   31538:	2102      	movs	r1, #2
   3153a:	f016 fc63 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   3153e:	233e      	movs	r3, #62	; 0x3e
   31540:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   31542:	230c      	movs	r3, #12
   31544:	7043      	strb	r3, [r0, #1]
   31546:	2101      	movs	r1, #1
   31548:	4620      	mov	r0, r4
   3154a:	f016 fc5b 	bl	47e04 <net_buf_simple_add>
   3154e:	4603      	mov	r3, r0
	me->subevent = subevt;
   31550:	2204      	movs	r2, #4
   31552:	701a      	strb	r2, [r3, #0]
   31554:	4620      	mov	r0, r4
   31556:	210b      	movs	r1, #11
   31558:	f016 fc54 	bl	47e04 <net_buf_simple_add>
		memcpy(&sep->features[0],
   3155c:	2208      	movs	r2, #8
	sep->status = status;
   3155e:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   31560:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   31564:	b92f      	cbnz	r7, 31572 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   31566:	1d31      	adds	r1, r6, #4
   31568:	3003      	adds	r0, #3
}
   3156a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   3156e:	f013 bca7 	b.w	44ec0 <memcpy>
}
   31572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   31576:	2100      	movs	r1, #0
   31578:	3003      	adds	r0, #3
   3157a:	f013 bcac 	b.w	44ed6 <memset>
   3157e:	bf00      	nop
   31580:	20000158 	.word	0x20000158
   31584:	20000160 	.word	0x20000160

00031588 <hci_vendor_cmd_handle_common>:
{
   31588:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   3158a:	3801      	subs	r0, #1
{
   3158c:	b087      	sub	sp, #28
   3158e:	4615      	mov	r5, r2
	switch (ocf) {
   31590:	2809      	cmp	r0, #9
   31592:	d806      	bhi.n	315a2 <hci_vendor_cmd_handle_common+0x1a>
   31594:	e8df f000 	tbb	[pc, r0]
   31598:	05432609 	.word	0x05432609
   3159c:	6b055705 	.word	0x6b055705
   315a0:	9d88      	.short	0x9d88
   315a2:	f06f 0015 	mvn.w	r0, #21
}
   315a6:	b007      	add	sp, #28
   315a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   315aa:	4b54      	ldr	r3, [pc, #336]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
   315ac:	210d      	movs	r1, #13
   315ae:	8818      	ldrh	r0, [r3, #0]
   315b0:	f014 f949 	bl	45846 <bt_hci_cmd_complete_create>
   315b4:	210d      	movs	r1, #13
   315b6:	6028      	str	r0, [r5, #0]
   315b8:	3008      	adds	r0, #8
   315ba:	f016 fc23 	bl	47e04 <net_buf_simple_add>
   315be:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   315c0:	2202      	movs	r2, #2
	rp->status = 0x00;
   315c2:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   315c4:	2103      	movs	r1, #3
	rp->status = 0x00;
   315c6:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   315c8:	705a      	strb	r2, [r3, #1]
   315ca:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   315cc:	70da      	strb	r2, [r3, #3]
   315ce:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   315d0:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   315d2:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   315d4:	71d8      	strb	r0, [r3, #7]
   315d6:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   315d8:	7258      	strb	r0, [r3, #9]
   315da:	7298      	strb	r0, [r3, #10]
   315dc:	72d8      	strb	r0, [r3, #11]
   315de:	7318      	strb	r0, [r3, #12]
}
   315e0:	b007      	add	sp, #28
   315e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   315e4:	4b45      	ldr	r3, [pc, #276]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
   315e6:	2141      	movs	r1, #65	; 0x41
   315e8:	8818      	ldrh	r0, [r3, #0]
   315ea:	f014 f92c 	bl	45846 <bt_hci_cmd_complete_create>
   315ee:	2141      	movs	r1, #65	; 0x41
   315f0:	6028      	str	r0, [r5, #0]
   315f2:	3008      	adds	r0, #8
   315f4:	f016 fc06 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   315f8:	2400      	movs	r4, #0
   315fa:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   315fc:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   315fe:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31602:	4621      	mov	r1, r4
   31604:	f013 fc67 	bl	44ed6 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   31608:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   3160a:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   3160c:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   31610:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   31614:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   31616:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31618:	70ab      	strb	r3, [r5, #2]
}
   3161a:	b007      	add	sp, #28
   3161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3161e:	4b37      	ldr	r3, [pc, #220]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
   31620:	2109      	movs	r1, #9
   31622:	8818      	ldrh	r0, [r3, #0]
   31624:	f014 f90f 	bl	45846 <bt_hci_cmd_complete_create>
   31628:	2109      	movs	r1, #9
   3162a:	6028      	str	r0, [r5, #0]
   3162c:	3008      	adds	r0, #8
   3162e:	f016 fbe9 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31632:	2400      	movs	r4, #0
   31634:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31638:	2208      	movs	r2, #8
   3163a:	4621      	mov	r1, r4
   3163c:	f013 fc4b 	bl	44ed6 <memset>
	return 0;
   31640:	4620      	mov	r0, r4
}
   31642:	b007      	add	sp, #28
   31644:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   31646:	6889      	ldr	r1, [r1, #8]
   31648:	2000      	movs	r0, #0
   3164a:	f7ff fd93 	bl	31174 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3164e:	4b2b      	ldr	r3, [pc, #172]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
   31650:	2101      	movs	r1, #1
   31652:	8818      	ldrh	r0, [r3, #0]
   31654:	f014 f8f7 	bl	45846 <bt_hci_cmd_complete_create>
   31658:	2101      	movs	r1, #1
   3165a:	4604      	mov	r4, r0
   3165c:	3008      	adds	r0, #8
   3165e:	f016 fbd1 	bl	47e04 <net_buf_simple_add>
   31662:	4603      	mov	r3, r0
	ccst->status = status;
   31664:	2000      	movs	r0, #0
   31666:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   31668:	602c      	str	r4, [r5, #0]
}
   3166a:	b007      	add	sp, #28
   3166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   3166e:	4e24      	ldr	r6, [pc, #144]	; (31700 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31670:	4f22      	ldr	r7, [pc, #136]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   31672:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   31674:	f10d 0c04 	add.w	ip, sp, #4
   31678:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   3167c:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3167e:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   31680:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31684:	2112      	movs	r1, #18
   31686:	f014 f8de 	bl	45846 <bt_hci_cmd_complete_create>
   3168a:	2112      	movs	r1, #18
   3168c:	6028      	str	r0, [r5, #0]
   3168e:	3008      	adds	r0, #8
   31690:	f016 fbb8 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31694:	2400      	movs	r4, #0
   31696:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   3169a:	2211      	movs	r2, #17
   3169c:	a901      	add	r1, sp, #4
   3169e:	f013 fc0f 	bl	44ec0 <memcpy>
	return 0;
   316a2:	4620      	mov	r0, r4
}
   316a4:	b007      	add	sp, #28
   316a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   316a8:	4b14      	ldr	r3, [pc, #80]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
   316aa:	2118      	movs	r1, #24
   316ac:	8818      	ldrh	r0, [r3, #0]
   316ae:	f014 f8ca 	bl	45846 <bt_hci_cmd_complete_create>
   316b2:	2118      	movs	r1, #24
   316b4:	6028      	str	r0, [r5, #0]
   316b6:	3008      	adds	r0, #8
   316b8:	f016 fba4 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   316bc:	2400      	movs	r4, #0
   316be:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   316c0:	2101      	movs	r1, #1
	rp->status = 0x00;
   316c2:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   316c6:	f00b fce3 	bl	3d090 <hci_vendor_read_static_addr>
   316ca:	7068      	strb	r0, [r5, #1]
	return 0;
   316cc:	4620      	mov	r0, r4
}
   316ce:	b007      	add	sp, #28
   316d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   316d2:	4b0a      	ldr	r3, [pc, #40]	; (316fc <hci_vendor_cmd_handle_common+0x174>)
   316d4:	2121      	movs	r1, #33	; 0x21
   316d6:	8818      	ldrh	r0, [r3, #0]
   316d8:	f014 f8b5 	bl	45846 <bt_hci_cmd_complete_create>
   316dc:	2121      	movs	r1, #33	; 0x21
   316de:	6028      	str	r0, [r5, #0]
   316e0:	3008      	adds	r0, #8
   316e2:	f016 fb8f 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   316e6:	4601      	mov	r1, r0
   316e8:	2400      	movs	r4, #0
   316ea:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   316ee:	3001      	adds	r0, #1
   316f0:	f00b fd42 	bl	3d178 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   316f4:	4620      	mov	r0, r4
}
   316f6:	b007      	add	sp, #28
   316f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   316fa:	bf00      	nop
   316fc:	20003b48 	.word	0x20003b48
   31700:	0004a538 	.word	0x0004a538

00031704 <hci_cmd_handle>:
{
   31704:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   31706:	8983      	ldrh	r3, [r0, #12]
{
   31708:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   3170a:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   3170c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   3170e:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   31710:	d92f      	bls.n	31772 <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
   31712:	4604      	mov	r4, r0
   31714:	2103      	movs	r1, #3
   31716:	3008      	adds	r0, #8
   31718:	f016 fb9b 	bl	47e52 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   3171c:	89a2      	ldrh	r2, [r4, #12]
   3171e:	7883      	ldrb	r3, [r0, #2]
   31720:	429a      	cmp	r2, r3
   31722:	d326      	bcc.n	31772 <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   31724:	8802      	ldrh	r2, [r0, #0]
   31726:	4eb6      	ldr	r6, [pc, #728]	; (31a00 <hci_cmd_handle+0x2fc>)
	switch (BT_OGF(_opcode)) {
   31728:	f3c2 2385 	ubfx	r3, r2, #10, #6
   3172c:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   3172e:	8032      	strh	r2, [r6, #0]
   31730:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   31732:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   31736:	d809      	bhi.n	3174c <hci_cmd_handle+0x48>
   31738:	b1a3      	cbz	r3, 31764 <hci_cmd_handle+0x60>
   3173a:	3b01      	subs	r3, #1
   3173c:	2b07      	cmp	r3, #7
   3173e:	d811      	bhi.n	31764 <hci_cmd_handle+0x60>
   31740:	e8df f003 	tbb	[pc, r3]
   31744:	4d2a101b 	.word	0x4d2a101b
   31748:	66101010 	.word	0x66101010
   3174c:	2b3f      	cmp	r3, #63	; 0x3f
   3174e:	d109      	bne.n	31764 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   31750:	4621      	mov	r1, r4
   31752:	aa07      	add	r2, sp, #28
   31754:	4628      	mov	r0, r5
   31756:	f7ff ff17 	bl	31588 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   3175a:	3016      	adds	r0, #22
	return evt;
   3175c:	bf18      	it	ne
   3175e:	9c07      	ldrne	r4, [sp, #28]
	if (err == -EINVAL) {
   31760:	d104      	bne.n	3176c <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
   31762:	8830      	ldrh	r0, [r6, #0]
   31764:	2101      	movs	r1, #1
   31766:	f014 f880 	bl	4586a <bt_hci_cmd_status_create>
   3176a:	4604      	mov	r4, r0
}
   3176c:	4620      	mov	r0, r4
   3176e:	b00d      	add	sp, #52	; 0x34
   31770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   31772:	2400      	movs	r4, #0
}
   31774:	4620      	mov	r0, r4
   31776:	b00d      	add	sp, #52	; 0x34
   31778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   3177a:	2d06      	cmp	r5, #6
   3177c:	f000 8420 	beq.w	31fc0 <hci_cmd_handle+0x8bc>
   31780:	2d1d      	cmp	r5, #29
   31782:	d1ef      	bne.n	31764 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
   31784:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   31786:	8818      	ldrh	r0, [r3, #0]
   31788:	f003 ff60 	bl	3564c <ll_version_ind_send>
   3178c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3178e:	8830      	ldrh	r0, [r6, #0]
   31790:	f014 f86b 	bl	4586a <bt_hci_cmd_status_create>
   31794:	4604      	mov	r4, r0
}
   31796:	e7e9      	b.n	3176c <hci_cmd_handle+0x68>
	switch (ocf) {
   31798:	2d63      	cmp	r5, #99	; 0x63
   3179a:	f000 845a 	beq.w	32052 <hci_cmd_handle+0x94e>
   3179e:	f200 80ed 	bhi.w	3197c <hci_cmd_handle+0x278>
   317a2:	2d03      	cmp	r5, #3
   317a4:	f000 8433 	beq.w	3200e <hci_cmd_handle+0x90a>
   317a8:	2d2d      	cmp	r5, #45	; 0x2d
   317aa:	f040 80d3 	bne.w	31954 <hci_cmd_handle+0x250>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   317ae:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   317b0:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   317b2:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   317b4:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   317b6:	f014 f846 	bl	45846 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   317ba:	2104      	movs	r1, #4
   317bc:	9007      	str	r0, [sp, #28]
   317be:	3008      	adds	r0, #8
   317c0:	f016 fb20 	bl	47e04 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   317c4:	b2b4      	uxth	r4, r6
   317c6:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   317c8:	1cc3      	adds	r3, r0, #3
   317ca:	4621      	mov	r1, r4
   317cc:	463a      	mov	r2, r7
   317ce:	2002      	movs	r0, #2
   317d0:	f7ff fd16 	bl	31200 <ll_tx_pwr_lvl_get>
	rp->status = status;
   317d4:	7028      	strb	r0, [r5, #0]
	return evt;
   317d6:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   317d8:	f8a5 6001 	strh.w	r6, [r5, #1]
}
   317dc:	e7c6      	b.n	3176c <hci_cmd_handle+0x68>
	switch (ocf) {
   317de:	1e6a      	subs	r2, r5, #1
   317e0:	2a08      	cmp	r2, #8
   317e2:	d8bf      	bhi.n	31764 <hci_cmd_handle+0x60>
   317e4:	a301      	add	r3, pc, #4	; (adr r3, 317ec <hci_cmd_handle+0xe8>)
   317e6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   317ea:	bf00      	nop
   317ec:	00031ac5 	.word	0x00031ac5
   317f0:	00031a09 	.word	0x00031a09
   317f4:	000319d7 	.word	0x000319d7
   317f8:	00031765 	.word	0x00031765
   317fc:	00031765 	.word	0x00031765
   31800:	00031765 	.word	0x00031765
   31804:	00031765 	.word	0x00031765
   31808:	00031765 	.word	0x00031765
   3180c:	000319b5 	.word	0x000319b5
	switch (ocf) {
   31810:	1e6a      	subs	r2, r5, #1
   31812:	2a4d      	cmp	r2, #77	; 0x4d
   31814:	d8a6      	bhi.n	31764 <hci_cmd_handle+0x60>
   31816:	a301      	add	r3, pc, #4	; (adr r3, 3181c <hci_cmd_handle+0x118>)
   31818:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   3181c:	00031b1f 	.word	0x00031b1f
   31820:	00031afb 	.word	0x00031afb
   31824:	00031bc7 	.word	0x00031bc7
   31828:	00031765 	.word	0x00031765
   3182c:	00031bbd 	.word	0x00031bbd
   31830:	00031ba1 	.word	0x00031ba1
   31834:	00031b85 	.word	0x00031b85
   31838:	00031b79 	.word	0x00031b79
   3183c:	00031b6d 	.word	0x00031b6d
   31840:	00031b4d 	.word	0x00031b4d
   31844:	00031765 	.word	0x00031765
   31848:	00031765 	.word	0x00031765
   3184c:	00031765 	.word	0x00031765
   31850:	00031765 	.word	0x00031765
   31854:	00031b2b 	.word	0x00031b2b
   31858:	00031fbb 	.word	0x00031fbb
   3185c:	00031fb3 	.word	0x00031fb3
   31860:	00031fab 	.word	0x00031fab
   31864:	00031f83 	.word	0x00031f83
   31868:	00031765 	.word	0x00031765
   3186c:	00031f57 	.word	0x00031f57
   31870:	00031f43 	.word	0x00031f43
   31874:	00031f0f 	.word	0x00031f0f
   31878:	00031eed 	.word	0x00031eed
   3187c:	00031765 	.word	0x00031765
   31880:	00031ee3 	.word	0x00031ee3
   31884:	00031ed3 	.word	0x00031ed3
   31888:	00031e9d 	.word	0x00031e9d
   3188c:	00031765 	.word	0x00031765
   31890:	00031765 	.word	0x00031765
   31894:	00031765 	.word	0x00031765
   31898:	00031e7f 	.word	0x00031e7f
   3189c:	00031e67 	.word	0x00031e67
   318a0:	00031e57 	.word	0x00031e57
   318a4:	00031e21 	.word	0x00031e21
   318a8:	00031e0f 	.word	0x00031e0f
   318ac:	00031765 	.word	0x00031765
   318b0:	00031765 	.word	0x00031765
   318b4:	00031e01 	.word	0x00031e01
   318b8:	00031df9 	.word	0x00031df9
   318bc:	00031df3 	.word	0x00031df3
   318c0:	00031dd1 	.word	0x00031dd1
   318c4:	00031da3 	.word	0x00031da3
   318c8:	00031d75 	.word	0x00031d75
   318cc:	00031d6b 	.word	0x00031d6b
   318d0:	00031d5d 	.word	0x00031d5d
   318d4:	00031d11 	.word	0x00031d11
   318d8:	00031cb7 	.word	0x00031cb7
   318dc:	00031c99 	.word	0x00031c99
   318e0:	00031c3d 	.word	0x00031c3d
   318e4:	00031765 	.word	0x00031765
   318e8:	00031765 	.word	0x00031765
   318ec:	00031765 	.word	0x00031765
   318f0:	00031765 	.word	0x00031765
   318f4:	00031765 	.word	0x00031765
   318f8:	00031765 	.word	0x00031765
   318fc:	00031765 	.word	0x00031765
   31900:	00031765 	.word	0x00031765
   31904:	00031765 	.word	0x00031765
   31908:	00031765 	.word	0x00031765
   3190c:	00031765 	.word	0x00031765
   31910:	00031765 	.word	0x00031765
   31914:	00031765 	.word	0x00031765
   31918:	00031765 	.word	0x00031765
   3191c:	00031765 	.word	0x00031765
   31920:	00031765 	.word	0x00031765
   31924:	00031765 	.word	0x00031765
   31928:	00031765 	.word	0x00031765
   3192c:	00031765 	.word	0x00031765
   31930:	00031765 	.word	0x00031765
   31934:	00031765 	.word	0x00031765
   31938:	00031765 	.word	0x00031765
   3193c:	00031765 	.word	0x00031765
   31940:	00031765 	.word	0x00031765
   31944:	00031c19 	.word	0x00031c19
   31948:	00031765 	.word	0x00031765
   3194c:	00031765 	.word	0x00031765
   31950:	00031c0f 	.word	0x00031c0f
	switch (ocf) {
   31954:	2d01      	cmp	r5, #1
   31956:	f47f af05 	bne.w	31764 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3195a:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   3195c:	4b29      	ldr	r3, [pc, #164]	; (31a04 <hci_cmd_handle+0x300>)
   3195e:	6811      	ldr	r1, [r2, #0]
   31960:	6852      	ldr	r2, [r2, #4]
   31962:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31964:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31966:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31968:	f013 ff6d 	bl	45846 <bt_hci_cmd_complete_create>
   3196c:	2101      	movs	r1, #1
   3196e:	4604      	mov	r4, r0
   31970:	3008      	adds	r0, #8
   31972:	f016 fa47 	bl	47e04 <net_buf_simple_add>
	ccst->status = status;
   31976:	2300      	movs	r3, #0
   31978:	7003      	strb	r3, [r0, #0]
}
   3197a:	e6f7      	b.n	3176c <hci_cmd_handle+0x68>
	switch (ocf) {
   3197c:	2d7b      	cmp	r5, #123	; 0x7b
   3197e:	f000 832b 	beq.w	31fd8 <hci_cmd_handle+0x8d4>
   31982:	2d7c      	cmp	r5, #124	; 0x7c
   31984:	f47f aeee 	bne.w	31764 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   31988:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3198a:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   3198c:	8859      	ldrh	r1, [r3, #2]
   3198e:	b2a8      	uxth	r0, r5
   31990:	f003 ff96 	bl	358c0 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31994:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31996:	2103      	movs	r1, #3
   31998:	8830      	ldrh	r0, [r6, #0]
   3199a:	f013 ff54 	bl	45846 <bt_hci_cmd_complete_create>
   3199e:	2103      	movs	r1, #3
   319a0:	4603      	mov	r3, r0
   319a2:	3008      	adds	r0, #8
   319a4:	9307      	str	r3, [sp, #28]
   319a6:	f016 fa2d 	bl	47e04 <net_buf_simple_add>
	rp->status = status;
   319aa:	7004      	strb	r4, [r0, #0]
	return evt;
   319ac:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   319ae:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   319b2:	e6db      	b.n	3176c <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   319b4:	2107      	movs	r1, #7
   319b6:	f013 ff46 	bl	45846 <bt_hci_cmd_complete_create>
   319ba:	2107      	movs	r1, #7
   319bc:	4603      	mov	r3, r0
   319be:	3008      	adds	r0, #8
   319c0:	9307      	str	r3, [sp, #28]
   319c2:	f016 fa1f 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   319c6:	4601      	mov	r1, r0
   319c8:	2000      	movs	r0, #0
   319ca:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   319ce:	f7ff fbff 	bl	311d0 <ll_addr_read>
	return evt;
   319d2:	9c07      	ldr	r4, [sp, #28]
   319d4:	e6ca      	b.n	3176c <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   319d6:	2109      	movs	r1, #9
   319d8:	f013 ff35 	bl	45846 <bt_hci_cmd_complete_create>
   319dc:	2109      	movs	r1, #9
   319de:	4603      	mov	r3, r0
   319e0:	3008      	adds	r0, #8
   319e2:	9307      	str	r3, [sp, #28]
   319e4:	f016 fa0e 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   319e8:	2100      	movs	r1, #0
   319ea:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   319ec:	2208      	movs	r2, #8
	rp->status = 0x00;
   319ee:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   319f2:	f013 fa70 	bl	44ed6 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   319f6:	2360      	movs	r3, #96	; 0x60
	return evt;
   319f8:	9c07      	ldr	r4, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   319fa:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   319fc:	e6b6      	b.n	3176c <hci_cmd_handle+0x68>
   319fe:	bf00      	nop
   31a00:	20003b48 	.word	0x20003b48
   31a04:	20000158 	.word	0x20000158
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a08:	2141      	movs	r1, #65	; 0x41
   31a0a:	f013 ff1c 	bl	45846 <bt_hci_cmd_complete_create>
   31a0e:	2141      	movs	r1, #65	; 0x41
   31a10:	4603      	mov	r3, r0
   31a12:	3008      	adds	r0, #8
   31a14:	9307      	str	r3, [sp, #28]
   31a16:	f016 f9f5 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31a1a:	2100      	movs	r1, #0
   31a1c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31a1e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   31a20:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31a24:	f013 fa57 	bl	44ed6 <memset>
	rp->commands[15] |= BIT(1);
   31a28:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   31a2a:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   31a2c:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   31a2e:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   31a30:	f043 0302 	orr.w	r3, r3, #2
   31a34:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31a36:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   31a38:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   31a3c:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31a40:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   31a44:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   31a46:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   31a48:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   31a4a:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31a4c:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   31a4e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   31a52:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   31a56:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   31a5a:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   31a5e:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   31a62:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   31a64:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   31a66:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   31a68:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   31a6a:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   31a6c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   31a70:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   31a72:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   31a76:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   31a7a:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   31a7e:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   31a82:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   31a86:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   31a88:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   31a8a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   31a8e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   31a92:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   31a94:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   31a98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   31a9c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   31aa0:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   31aa4:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   31aa8:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   31aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   31ab0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   31ab4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   31ab8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   31abc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   31ac0:	9c07      	ldr	r4, [sp, #28]
   31ac2:	e653      	b.n	3176c <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31ac4:	2109      	movs	r1, #9
   31ac6:	f013 febe 	bl	45846 <bt_hci_cmd_complete_create>
   31aca:	2109      	movs	r1, #9
   31acc:	4603      	mov	r3, r0
   31ace:	3008      	adds	r0, #8
   31ad0:	9307      	str	r3, [sp, #28]
   31ad2:	f016 f997 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31ad6:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   31ad8:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   31ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   31ade:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31ae0:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
   31ae4:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
   31ae6:	7083      	strb	r3, [r0, #2]
   31ae8:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31aea:	2305      	movs	r3, #5
   31aec:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
   31aee:	7101      	strb	r1, [r0, #4]
	return evt;
   31af0:	9c07      	ldr	r4, [sp, #28]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31af2:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   31af4:	71c2      	strb	r2, [r0, #7]
   31af6:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   31af8:	e638      	b.n	3176c <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31afa:	2104      	movs	r1, #4
   31afc:	f013 fea3 	bl	45846 <bt_hci_cmd_complete_create>
   31b00:	2104      	movs	r1, #4
   31b02:	4603      	mov	r3, r0
   31b04:	3008      	adds	r0, #8
   31b06:	9307      	str	r3, [sp, #28]
   31b08:	f016 f97c 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31b0c:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   31b0e:	2103      	movs	r1, #3
	rp->status = 0x00;
   31b10:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   31b12:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   31b14:	70c1      	strb	r1, [r0, #3]
	return evt;
   31b16:	9c07      	ldr	r4, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   31b18:	7042      	strb	r2, [r0, #1]
   31b1a:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   31b1c:	e626      	b.n	3176c <hci_cmd_handle+0x68>
   31b1e:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   31b20:	4bbe      	ldr	r3, [pc, #760]	; (31e1c <hci_cmd_handle+0x718>)
   31b22:	6811      	ldr	r1, [r2, #0]
   31b24:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31b26:	6019      	str	r1, [r3, #0]
   31b28:	e71c      	b.n	31964 <hci_cmd_handle+0x260>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31b2a:	2102      	movs	r1, #2
   31b2c:	f013 fe8b 	bl	45846 <bt_hci_cmd_complete_create>
   31b30:	2102      	movs	r1, #2
   31b32:	4603      	mov	r3, r0
   31b34:	3008      	adds	r0, #8
   31b36:	9307      	str	r3, [sp, #28]
   31b38:	f016 f964 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31b3c:	2300      	movs	r3, #0
   31b3e:	7003      	strb	r3, [r0, #0]
   31b40:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   31b42:	f007 fd21 	bl	39588 <ll_fal_size_get>
   31b46:	7060      	strb	r0, [r4, #1]
	return evt;
   31b48:	9c07      	ldr	r4, [sp, #28]
   31b4a:	e60f      	b.n	3176c <hci_cmd_handle+0x68>
	status = ll_adv_enable(cmd->enable);
   31b4c:	68a3      	ldr	r3, [r4, #8]
   31b4e:	7818      	ldrb	r0, [r3, #0]
   31b50:	f7f4 fe9e 	bl	26890 <ll_adv_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   31b54:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31b56:	2101      	movs	r1, #1
   31b58:	8830      	ldrh	r0, [r6, #0]
   31b5a:	f013 fe74 	bl	45846 <bt_hci_cmd_complete_create>
   31b5e:	2101      	movs	r1, #1
   31b60:	4604      	mov	r4, r0
   31b62:	3008      	adds	r0, #8
   31b64:	f016 f94e 	bl	47e04 <net_buf_simple_add>
	ccst->status = status;
   31b68:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   31b6a:	e5ff      	b.n	3176c <hci_cmd_handle+0x68>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   31b6c:	68a1      	ldr	r1, [r4, #8]
   31b6e:	f811 0b01 	ldrb.w	r0, [r1], #1
   31b72:	f002 fda7 	bl	346c4 <ll_adv_scan_rsp_set>
   31b76:	e7ed      	b.n	31b54 <hci_cmd_handle+0x450>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   31b78:	68a1      	ldr	r1, [r4, #8]
   31b7a:	f811 0b01 	ldrb.w	r0, [r1], #1
   31b7e:	f002 fd57 	bl	34630 <ll_adv_data_set>
   31b82:	e7e7      	b.n	31b54 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31b84:	2102      	movs	r1, #2
   31b86:	f013 fe5e 	bl	45846 <bt_hci_cmd_complete_create>
   31b8a:	2102      	movs	r1, #2
   31b8c:	4603      	mov	r3, r0
   31b8e:	3008      	adds	r0, #8
   31b90:	9307      	str	r3, [sp, #28]
   31b92:	f016 f937 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31b96:	2300      	movs	r3, #0
   31b98:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   31b9a:	7043      	strb	r3, [r0, #1]
	return evt;
   31b9c:	9c07      	ldr	r4, [sp, #28]
   31b9e:	e5e5      	b.n	3176c <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   31ba0:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   31ba2:	7ba5      	ldrb	r5, [r4, #14]
   31ba4:	79a3      	ldrb	r3, [r4, #6]
   31ba6:	7962      	ldrb	r2, [r4, #5]
   31ba8:	7921      	ldrb	r1, [r4, #4]
   31baa:	8820      	ldrh	r0, [r4, #0]
   31bac:	9502      	str	r5, [sp, #8]
   31bae:	7b65      	ldrb	r5, [r4, #13]
   31bb0:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   31bb2:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   31bb4:	9400      	str	r4, [sp, #0]
   31bb6:	f002 fb3f 	bl	34238 <ll_adv_params_set>
   31bba:	e7cb      	b.n	31b54 <hci_cmd_handle+0x450>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   31bbc:	68a1      	ldr	r1, [r4, #8]
   31bbe:	2001      	movs	r0, #1
   31bc0:	f7ff fad8 	bl	31174 <ll_addr_set>
   31bc4:	e7c6      	b.n	31b54 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31bc6:	2109      	movs	r1, #9
   31bc8:	f013 fe3d 	bl	45846 <bt_hci_cmd_complete_create>
   31bcc:	2109      	movs	r1, #9
   31bce:	4603      	mov	r3, r0
   31bd0:	3008      	adds	r0, #8
   31bd2:	9307      	str	r3, [sp, #28]
   31bd4:	f016 f916 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31bd8:	2100      	movs	r1, #0
   31bda:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31bdc:	2208      	movs	r2, #8
	rp->status = 0x00;
   31bde:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31be2:	f013 f978 	bl	44ed6 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   31be6:	f000 fe43 	bl	32870 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   31bea:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   31bec:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   31bf0:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   31bf2:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
   31bf4:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   31bf6:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
   31bf8:	70ac      	strb	r4, [r5, #2]
   31bfa:	f3c1 2007 	ubfx	r0, r1, #8, #8
   31bfe:	712b      	strb	r3, [r5, #4]
   31c00:	0a13      	lsrs	r3, r2, #8
	return evt;
   31c02:	9c07      	ldr	r4, [sp, #28]
	dst[0] = val;
   31c04:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
   31c06:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
   31c08:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
   31c0a:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
   31c0c:	e5ae      	b.n	3176c <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   31c0e:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   31c10:	79c1      	ldrb	r1, [r0, #7]
   31c12:	f007 ffcb 	bl	39bac <ll_priv_mode_set>
   31c16:	e79d      	b.n	31b54 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c18:	2103      	movs	r1, #3
   31c1a:	f013 fe14 	bl	45846 <bt_hci_cmd_complete_create>
   31c1e:	2103      	movs	r1, #3
   31c20:	4603      	mov	r3, r0
   31c22:	3008      	adds	r0, #8
   31c24:	9307      	str	r3, [sp, #28]
   31c26:	f016 f8ed 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31c2a:	4601      	mov	r1, r0
   31c2c:	2300      	movs	r3, #0
   31c2e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   31c32:	3001      	adds	r0, #1
   31c34:	f7ff faf6 	bl	31224 <ll_tx_pwr_get>
	return evt;
   31c38:	9c07      	ldr	r4, [sp, #28]
   31c3a:	e597      	b.n	3176c <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   31c3c:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31c3e:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   31c40:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   31c42:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   31c44:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31c48:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   31c4a:	bf48      	it	mi
   31c4c:	f041 0103 	orrmi.w	r1, r1, #3
   31c50:	7913      	ldrb	r3, [r2, #4]
   31c52:	bf48      	it	mi
   31c54:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   31c56:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   31c58:	bf44      	itt	mi
   31c5a:	f043 0303 	orrmi.w	r3, r3, #3
   31c5e:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   31c60:	ea43 0201 	orr.w	r2, r3, r1
   31c64:	f032 0203 	bics.w	r2, r2, #3
   31c68:	f040 81fc 	bne.w	32064 <hci_cmd_handle+0x960>
	if (!(cmd->tx_phys & 0x07) ||
   31c6c:	074d      	lsls	r5, r1, #29
   31c6e:	f000 81f3 	beq.w	32058 <hci_cmd_handle+0x954>
   31c72:	075a      	lsls	r2, r3, #29
   31c74:	f000 81f0 	beq.w	32058 <hci_cmd_handle+0x954>
	if (phy_opts & 0x03) {
   31c78:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   31c7c:	bf1c      	itt	ne
   31c7e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   31c82:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   31c86:	4638      	mov	r0, r7
   31c88:	f003 fda4 	bl	357d4 <ll_phy_req_send>
   31c8c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31c8e:	8830      	ldrh	r0, [r6, #0]
   31c90:	f013 fdeb 	bl	4586a <bt_hci_cmd_status_create>
   31c94:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   31c96:	e569      	b.n	3176c <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   31c98:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31c9a:	781a      	ldrb	r2, [r3, #0]
   31c9c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   31c9e:	bf4a      	itet	mi
   31ca0:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   31ca2:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   31ca4:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   31ca6:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   31ca8:	bf4a      	itet	mi
   31caa:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   31cac:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   31cae:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   31cb0:	f003 fd86 	bl	357c0 <ll_phy_default_set>
   31cb4:	e74e      	b.n	31b54 <hci_cmd_handle+0x450>
	handle = sys_le16_to_cpu(cmd->handle);
   31cb6:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31cb8:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   31cba:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31cbc:	f013 fdc3 	bl	45846 <bt_hci_cmd_complete_create>
   31cc0:	2105      	movs	r1, #5
   31cc2:	4603      	mov	r3, r0
   31cc4:	3008      	adds	r0, #8
   31cc6:	9307      	str	r3, [sp, #28]
   31cc8:	f016 f89c 	bl	47e04 <net_buf_simple_add>
   31ccc:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   31cce:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   31cd0:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   31cd2:	1ce9      	adds	r1, r5, #3
   31cd4:	f003 fd56 	bl	35784 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   31cd8:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
   31cda:	7028      	strb	r0, [r5, #0]
   31cdc:	2b00      	cmp	r3, #0
   31cde:	fa93 f2a3 	rbit	r2, r3
   31ce2:	792b      	ldrb	r3, [r5, #4]
   31ce4:	fab2 f282 	clz	r2, r2
   31ce8:	bf08      	it	eq
   31cea:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   31cee:	2b00      	cmp	r3, #0
   31cf0:	fa93 f3a3 	rbit	r3, r3
   31cf4:	fab3 f383 	clz	r3, r3
   31cf8:	f102 0201 	add.w	r2, r2, #1
   31cfc:	bf08      	it	eq
   31cfe:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   31d02:	70ea      	strb	r2, [r5, #3]
   31d04:	3301      	adds	r3, #1
	return evt;
   31d06:	9c07      	ldr	r4, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   31d08:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
   31d0a:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
   31d0e:	e52d      	b.n	3176c <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31d10:	2109      	movs	r1, #9
   31d12:	f013 fd98 	bl	45846 <bt_hci_cmd_complete_create>
   31d16:	2109      	movs	r1, #9
   31d18:	4603      	mov	r3, r0
   31d1a:	3008      	adds	r0, #8
   31d1c:	9307      	str	r3, [sp, #28]
   31d1e:	f016 f871 	bl	47e04 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   31d22:	ab08      	add	r3, sp, #32
   31d24:	4605      	mov	r5, r0
   31d26:	f10d 021a 	add.w	r2, sp, #26
   31d2a:	a906      	add	r1, sp, #24
   31d2c:	f10d 0016 	add.w	r0, sp, #22
   31d30:	f003 fd1c 	bl	3576c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31d34:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   31d38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   31d3c:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31d40:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   31d44:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   31d48:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
   31d4c:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   31d4e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   31d52:	702a      	strb	r2, [r5, #0]
	return evt;
   31d54:	9c07      	ldr	r4, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   31d56:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
   31d5a:	e507      	b.n	3176c <hci_cmd_handle+0x68>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   31d5c:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   31d5e:	8818      	ldrh	r0, [r3, #0]
   31d60:	f007 ff1a 	bl	39b98 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31d64:	8830      	ldrh	r0, [r6, #0]
   31d66:	2101      	movs	r1, #1
   31d68:	e5fe      	b.n	31968 <hci_cmd_handle+0x264>
	status = ll_rl_enable(cmd->enable);
   31d6a:	68a3      	ldr	r3, [r4, #8]
   31d6c:	7818      	ldrb	r0, [r3, #0]
   31d6e:	f007 fefd 	bl	39b6c <ll_rl_enable>
   31d72:	e6ef      	b.n	31b54 <hci_cmd_handle+0x450>
	memcpy(dst, src, sizeof(*dst));
   31d74:	2207      	movs	r2, #7
   31d76:	68a1      	ldr	r1, [r4, #8]
   31d78:	a808      	add	r0, sp, #32
   31d7a:	f013 f8a1 	bl	44ec0 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31d7e:	2107      	movs	r1, #7
   31d80:	8830      	ldrh	r0, [r6, #0]
   31d82:	f013 fd60 	bl	45846 <bt_hci_cmd_complete_create>
   31d86:	2107      	movs	r1, #7
   31d88:	4603      	mov	r3, r0
   31d8a:	3008      	adds	r0, #8
   31d8c:	9307      	str	r3, [sp, #28]
   31d8e:	f016 f839 	bl	47e04 <net_buf_simple_add>
   31d92:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   31d94:	1c41      	adds	r1, r0, #1
   31d96:	a808      	add	r0, sp, #32
   31d98:	f007 feb6 	bl	39b08 <ll_rl_lrpa_get>
   31d9c:	7020      	strb	r0, [r4, #0]
	return evt;
   31d9e:	9c07      	ldr	r4, [sp, #28]
   31da0:	e4e4      	b.n	3176c <hci_cmd_handle+0x68>
   31da2:	2207      	movs	r2, #7
   31da4:	68a1      	ldr	r1, [r4, #8]
   31da6:	a808      	add	r0, sp, #32
   31da8:	f013 f88a 	bl	44ec0 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31dac:	2107      	movs	r1, #7
   31dae:	8830      	ldrh	r0, [r6, #0]
   31db0:	f013 fd49 	bl	45846 <bt_hci_cmd_complete_create>
   31db4:	2107      	movs	r1, #7
   31db6:	4603      	mov	r3, r0
   31db8:	3008      	adds	r0, #8
   31dba:	9307      	str	r3, [sp, #28]
   31dbc:	f016 f822 	bl	47e04 <net_buf_simple_add>
   31dc0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   31dc2:	1c41      	adds	r1, r0, #1
   31dc4:	a808      	add	r0, sp, #32
   31dc6:	f007 fe65 	bl	39a94 <ll_rl_crpa_get>
   31dca:	7020      	strb	r0, [r4, #0]
	return evt;
   31dcc:	9c07      	ldr	r4, [sp, #28]
   31dce:	e4cd      	b.n	3176c <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31dd0:	2102      	movs	r1, #2
   31dd2:	f013 fd38 	bl	45846 <bt_hci_cmd_complete_create>
   31dd6:	2102      	movs	r1, #2
   31dd8:	4603      	mov	r3, r0
   31dda:	3008      	adds	r0, #8
   31ddc:	9307      	str	r3, [sp, #28]
   31dde:	f016 f811 	bl	47e04 <net_buf_simple_add>
   31de2:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   31de4:	f007 fd1c 	bl	39820 <ll_rl_size_get>
	rp->status = 0x00;
   31de8:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   31dea:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   31dec:	7023      	strb	r3, [r4, #0]
	return evt;
   31dee:	9c07      	ldr	r4, [sp, #28]
   31df0:	e4bc      	b.n	3176c <hci_cmd_handle+0x68>
	status = ll_rl_clear();
   31df2:	f007 fd17 	bl	39824 <ll_rl_clear>
   31df6:	e6ad      	b.n	31b54 <hci_cmd_handle+0x450>
	status = ll_rl_remove(&cmd->peer_id_addr);
   31df8:	68a0      	ldr	r0, [r4, #8]
   31dfa:	f007 fd51 	bl	398a0 <ll_rl_remove>
   31dfe:	e6a9      	b.n	31b54 <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   31e00:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   31e02:	f100 0217 	add.w	r2, r0, #23
   31e06:	1dc1      	adds	r1, r0, #7
   31e08:	f008 f95a 	bl	3a0c0 <ll_rl_add>
   31e0c:	e6a2      	b.n	31b54 <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   31e0e:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   31e10:	8859      	ldrh	r1, [r3, #2]
   31e12:	8818      	ldrh	r0, [r3, #0]
   31e14:	f003 fca0 	bl	35758 <ll_length_default_set>
   31e18:	e69c      	b.n	31b54 <hci_cmd_handle+0x450>
   31e1a:	bf00      	nop
   31e1c:	20000160 	.word	0x20000160
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31e20:	2105      	movs	r1, #5
   31e22:	f013 fd10 	bl	45846 <bt_hci_cmd_complete_create>
   31e26:	2105      	movs	r1, #5
   31e28:	4603      	mov	r3, r0
   31e2a:	3008      	adds	r0, #8
   31e2c:	9307      	str	r3, [sp, #28]
   31e2e:	f015 ffe9 	bl	47e04 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   31e32:	a908      	add	r1, sp, #32
   31e34:	4605      	mov	r5, r0
   31e36:	f10d 001a 	add.w	r0, sp, #26
   31e3a:	f003 fc81 	bl	35740 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   31e3e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   31e42:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
   31e46:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31e48:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   31e4c:	702a      	strb	r2, [r5, #0]
	return evt;
   31e4e:	9c07      	ldr	r4, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31e50:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
   31e54:	e48a      	b.n	3176c <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   31e56:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31e58:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   31e5a:	889a      	ldrh	r2, [r3, #4]
   31e5c:	8859      	ldrh	r1, [r3, #2]
   31e5e:	b2a8      	uxth	r0, r5
   31e60:	f003 fc1a 	bl	35698 <ll_length_req_send>
   31e64:	e596      	b.n	31994 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   31e66:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31e68:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   31e6a:	7892      	ldrb	r2, [r2, #2]
   31e6c:	2300      	movs	r3, #0
   31e6e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   31e72:	9300      	str	r3, [sp, #0]
   31e74:	2102      	movs	r1, #2
   31e76:	b2a8      	uxth	r0, r5
   31e78:	f003 fac4 	bl	35404 <ll_conn_update>
   31e7c:	e58a      	b.n	31994 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   31e7e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   31e80:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31e82:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   31e84:	8853      	ldrh	r3, [r2, #2]
   31e86:	9102      	str	r1, [sp, #8]
   31e88:	88d1      	ldrh	r1, [r2, #6]
   31e8a:	9101      	str	r1, [sp, #4]
   31e8c:	8891      	ldrh	r1, [r2, #4]
   31e8e:	9100      	str	r1, [sp, #0]
   31e90:	2200      	movs	r2, #0
   31e92:	2102      	movs	r1, #2
   31e94:	b2a8      	uxth	r0, r5
   31e96:	f003 fab5 	bl	35404 <ll_conn_update>
   31e9a:	e57b      	b.n	31994 <hci_cmd_handle+0x290>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31e9c:	2109      	movs	r1, #9
   31e9e:	f013 fcd2 	bl	45846 <bt_hci_cmd_complete_create>
   31ea2:	2109      	movs	r1, #9
   31ea4:	4603      	mov	r3, r0
   31ea6:	3008      	adds	r0, #8
   31ea8:	9307      	str	r3, [sp, #28]
   31eaa:	f015 ffab 	bl	47e04 <net_buf_simple_add>
	dst[0] = val;
   31eae:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   31eb0:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   31eb2:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   31eb4:	2230      	movs	r2, #48	; 0x30
   31eb6:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   31eb8:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   31eba:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   31ebc:	24ec      	movs	r4, #236	; 0xec
   31ebe:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
   31ec0:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   31ec2:	2201      	movs	r2, #1
   31ec4:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   31ec6:	7141      	strb	r1, [r0, #5]
	return evt;
   31ec8:	9c07      	ldr	r4, [sp, #28]
	dst[1] = val >> 8;
   31eca:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   31ecc:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   31ece:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   31ed0:	e44c      	b.n	3176c <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   31ed2:	68a3      	ldr	r3, [r4, #8]
   31ed4:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   31ed6:	2200      	movs	r2, #0
   31ed8:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31eda:	b2a8      	uxth	r0, r5
   31edc:	f007 f9dc 	bl	39298 <ll_start_enc_req_send>
   31ee0:	e558      	b.n	31994 <hci_cmd_handle+0x290>
	handle = sys_le16_to_cpu(cmd->handle);
   31ee2:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31ee4:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   31ee6:	f832 5b02 	ldrh.w	r5, [r2], #2
   31eea:	e7f6      	b.n	31eda <hci_cmd_handle+0x7d6>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31eec:	2109      	movs	r1, #9
   31eee:	f013 fcaa 	bl	45846 <bt_hci_cmd_complete_create>
   31ef2:	2109      	movs	r1, #9
   31ef4:	4603      	mov	r3, r0
   31ef6:	3008      	adds	r0, #8
   31ef8:	9307      	str	r3, [sp, #28]
   31efa:	f015 ff83 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31efe:	2300      	movs	r3, #0
   31f00:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   31f04:	2108      	movs	r1, #8
   31f06:	f008 fcfd 	bl	3a904 <lll_csrand_get>
	return evt;
   31f0a:	9c07      	ldr	r4, [sp, #28]
   31f0c:	e42e      	b.n	3176c <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   31f0e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   31f10:	aa08      	add	r2, sp, #32
   31f12:	2300      	movs	r3, #0
   31f14:	f100 0110 	add.w	r1, r0, #16
   31f18:	f00a fae2 	bl	3c4e0 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31f1c:	2111      	movs	r1, #17
   31f1e:	8830      	ldrh	r0, [r6, #0]
   31f20:	f013 fc91 	bl	45846 <bt_hci_cmd_complete_create>
   31f24:	2111      	movs	r1, #17
   31f26:	4603      	mov	r3, r0
   31f28:	3008      	adds	r0, #8
   31f2a:	9307      	str	r3, [sp, #28]
   31f2c:	f015 ff6a 	bl	47e04 <net_buf_simple_add>
	rp->status = 0x00;
   31f30:	2300      	movs	r3, #0
   31f32:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   31f36:	2210      	movs	r2, #16
   31f38:	a908      	add	r1, sp, #32
   31f3a:	f012 ffc1 	bl	44ec0 <memcpy>
	return evt;
   31f3e:	9c07      	ldr	r4, [sp, #28]
   31f40:	e414      	b.n	3176c <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   31f42:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   31f44:	8818      	ldrh	r0, [r3, #0]
   31f46:	f003 fb5b 	bl	35600 <ll_feature_req_send>
   31f4a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31f4c:	8830      	ldrh	r0, [r6, #0]
   31f4e:	f013 fc8c 	bl	4586a <bt_hci_cmd_status_create>
   31f52:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   31f54:	e40a      	b.n	3176c <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   31f56:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31f58:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   31f5a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31f5c:	f013 fc73 	bl	45846 <bt_hci_cmd_complete_create>
   31f60:	2108      	movs	r1, #8
   31f62:	4603      	mov	r3, r0
   31f64:	4408      	add	r0, r1
   31f66:	9307      	str	r3, [sp, #28]
   31f68:	f015 ff4c 	bl	47e04 <net_buf_simple_add>
   31f6c:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   31f6e:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   31f70:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   31f72:	f003 fadb 	bl	3552c <ll_chm_get>
	rp->status = status;
   31f76:	7028      	strb	r0, [r5, #0]
	return evt;
   31f78:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   31f7a:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
   31f7e:	f7ff bbf5 	b.w	3176c <hci_cmd_handle+0x68>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   31f82:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   31f84:	890a      	ldrh	r2, [r1, #8]
   31f86:	884b      	ldrh	r3, [r1, #2]
   31f88:	8808      	ldrh	r0, [r1, #0]
   31f8a:	9202      	str	r2, [sp, #8]
   31f8c:	88ca      	ldrh	r2, [r1, #6]
   31f8e:	9201      	str	r2, [sp, #4]
   31f90:	8889      	ldrh	r1, [r1, #4]
   31f92:	9100      	str	r1, [sp, #0]
   31f94:	2200      	movs	r2, #0
   31f96:	4611      	mov	r1, r2
   31f98:	f003 fa34 	bl	35404 <ll_conn_update>
   31f9c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31f9e:	8830      	ldrh	r0, [r6, #0]
   31fa0:	f013 fc63 	bl	4586a <bt_hci_cmd_status_create>
   31fa4:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   31fa6:	f7ff bbe1 	b.w	3176c <hci_cmd_handle+0x68>
	status = ll_fal_remove(&cmd->addr);
   31faa:	68a0      	ldr	r0, [r4, #8]
   31fac:	f007 fbac 	bl	39708 <ll_fal_remove>
   31fb0:	e5d0      	b.n	31b54 <hci_cmd_handle+0x450>
	status = ll_fal_add(&cmd->addr);
   31fb2:	68a0      	ldr	r0, [r4, #8]
   31fb4:	f007 fb10 	bl	395d8 <ll_fal_add>
   31fb8:	e5cc      	b.n	31b54 <hci_cmd_handle+0x450>
	status = ll_fal_clear();
   31fba:	f007 fae7 	bl	3958c <ll_fal_clear>
   31fbe:	e5c9      	b.n	31b54 <hci_cmd_handle+0x450>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   31fc0:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   31fc2:	7899      	ldrb	r1, [r3, #2]
   31fc4:	8818      	ldrh	r0, [r3, #0]
   31fc6:	f003 fad1 	bl	3556c <ll_terminate_ind_send>
   31fca:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31fcc:	8830      	ldrh	r0, [r6, #0]
   31fce:	f013 fc4c 	bl	4586a <bt_hci_cmd_status_create>
   31fd2:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   31fd4:	f7ff bbca 	b.w	3176c <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   31fd8:	68a3      	ldr	r3, [r4, #8]
   31fda:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   31fdc:	a908      	add	r1, sp, #32
   31fde:	b2a8      	uxth	r0, r5
   31fe0:	f003 fc4a 	bl	35878 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31fe4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   31fe6:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31fe8:	8830      	ldrh	r0, [r6, #0]
   31fea:	f013 fc2c 	bl	45846 <bt_hci_cmd_complete_create>
   31fee:	2105      	movs	r1, #5
   31ff0:	4603      	mov	r3, r0
   31ff2:	3008      	adds	r0, #8
   31ff4:	9307      	str	r3, [sp, #28]
   31ff6:	f015 ff05 	bl	47e04 <net_buf_simple_add>
	rp->status = status;
   31ffa:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   31ffc:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   32000:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   32004:	9c07      	ldr	r4, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   32006:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   3200a:	f7ff bbaf 	b.w	3176c <hci_cmd_handle+0x68>
	event_mask = DEFAULT_EVENT_MASK;
   3200e:	4b18      	ldr	r3, [pc, #96]	; (32070 <hci_cmd_handle+0x96c>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   32010:	4a18      	ldr	r2, [pc, #96]	; (32074 <hci_cmd_handle+0x970>)
	event_mask = DEFAULT_EVENT_MASK;
   32012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32016:	f641 71ff 	movw	r1, #8191	; 0x1fff
   3201a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3201e:	4b16      	ldr	r3, [pc, #88]	; (32078 <hci_cmd_handle+0x974>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   32020:	2000      	movs	r0, #0
   32022:	2100      	movs	r1, #0
   32024:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   32028:	201f      	movs	r0, #31
   3202a:	2100      	movs	r1, #0
   3202c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   32030:	f001 fd52 	bl	33ad8 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   32034:	2101      	movs	r1, #1
   32036:	8830      	ldrh	r0, [r6, #0]
   32038:	f013 fc05 	bl	45846 <bt_hci_cmd_complete_create>
   3203c:	2101      	movs	r1, #1
   3203e:	4604      	mov	r4, r0
   32040:	3008      	adds	r0, #8
   32042:	f015 fedf 	bl	47e04 <net_buf_simple_add>
	conn_count = 0U;
   32046:	4a0d      	ldr	r2, [pc, #52]	; (3207c <hci_cmd_handle+0x978>)
	ccst->status = status;
   32048:	2300      	movs	r3, #0
   3204a:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   3204c:	6013      	str	r3, [r2, #0]
}
   3204e:	f7ff bb8d 	b.w	3176c <hci_cmd_handle+0x68>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   32052:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   32054:	4b07      	ldr	r3, [pc, #28]	; (32074 <hci_cmd_handle+0x970>)
   32056:	e564      	b.n	31b22 <hci_cmd_handle+0x41e>
	return bt_hci_cmd_status_create(_opcode, status);
   32058:	2112      	movs	r1, #18
   3205a:	f013 fc06 	bl	4586a <bt_hci_cmd_status_create>
   3205e:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   32060:	f7ff bb84 	b.w	3176c <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
   32064:	2111      	movs	r1, #17
   32066:	f013 fc00 	bl	4586a <bt_hci_cmd_status_create>
   3206a:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   3206c:	f7ff bb7e 	b.w	3176c <hci_cmd_handle+0x68>
   32070:	20000158 	.word	0x20000158
   32074:	20001568 	.word	0x20001568
   32078:	20000160 	.word	0x20000160
   3207c:	20001f0c 	.word	0x20001f0c

00032080 <hci_acl_handle>:
{
   32080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   32084:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   32086:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   32088:	2b03      	cmp	r3, #3
	*evt = NULL;
   3208a:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   3208c:	d918      	bls.n	320c0 <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
   3208e:	4605      	mov	r5, r0
   32090:	4688      	mov	r8, r1
   32092:	3008      	adds	r0, #8
   32094:	2104      	movs	r1, #4
   32096:	f015 fedc 	bl	47e52 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   3209a:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   3209c:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   3209e:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   320a2:	42b3      	cmp	r3, r6
   320a4:	d30c      	bcc.n	320c0 <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   320a6:	2e1b      	cmp	r6, #27
   320a8:	d80a      	bhi.n	320c0 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
   320aa:	f003 f953 	bl	35354 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   320ae:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   320b2:	4604      	mov	r4, r0
   320b4:	b318      	cbz	r0, 320fe <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   320b6:	08bb      	lsrs	r3, r7, #2
   320b8:	d102      	bne.n	320c0 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   320ba:	b1d7      	cbz	r7, 320f2 <hci_acl_handle+0x72>
   320bc:	2f01      	cmp	r7, #1
   320be:	d003      	beq.n	320c8 <hci_acl_handle+0x48>
		return -EINVAL;
   320c0:	f06f 0015 	mvn.w	r0, #21
}
   320c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   320c8:	7903      	ldrb	r3, [r0, #4]
   320ca:	f367 0301 	bfi	r3, r7, #0, #2
   320ce:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   320d0:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   320d2:	68a9      	ldr	r1, [r5, #8]
   320d4:	4632      	mov	r2, r6
   320d6:	1de0      	adds	r0, r4, #7
   320d8:	f012 fef2 	bl	44ec0 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   320dc:	4621      	mov	r1, r4
   320de:	f3c9 000b 	ubfx	r0, r9, #0, #12
   320e2:	f003 f943 	bl	3536c <ll_tx_mem_enqueue>
   320e6:	2800      	cmp	r0, #0
   320e8:	d0ec      	beq.n	320c4 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
   320ea:	4620      	mov	r0, r4
   320ec:	f003 f938 	bl	35360 <ll_tx_mem_release>
   320f0:	e7e6      	b.n	320c0 <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   320f2:	7903      	ldrb	r3, [r0, #4]
   320f4:	2202      	movs	r2, #2
   320f6:	f362 0301 	bfi	r3, r2, #0, #2
   320fa:	7103      	strb	r3, [r0, #4]
		break;
   320fc:	e7e8      	b.n	320d0 <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   320fe:	4b11      	ldr	r3, [pc, #68]	; (32144 <hci_acl_handle+0xc4>)
   32100:	681b      	ldr	r3, [r3, #0]
   32102:	019b      	lsls	r3, r3, #6
   32104:	d402      	bmi.n	3210c <hci_acl_handle+0x8c>
		return -ENOBUFS;
   32106:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3210a:	e7db      	b.n	320c4 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3210c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32114:	2001      	movs	r0, #1
   32116:	f7f8 fefb 	bl	2af10 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   3211a:	2102      	movs	r1, #2
   3211c:	f8c8 0000 	str.w	r0, [r8]
   32120:	3008      	adds	r0, #8
   32122:	f015 fe6f 	bl	47e04 <net_buf_simple_add>
	hdr->len = len;
   32126:	2401      	movs	r4, #1
	hdr->evt = evt;
   32128:	221a      	movs	r2, #26
   3212a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   3212c:	7044      	strb	r4, [r0, #1]
   3212e:	f8d8 0000 	ldr.w	r0, [r8]
   32132:	4621      	mov	r1, r4
   32134:	3008      	adds	r0, #8
   32136:	f015 fe65 	bl	47e04 <net_buf_simple_add>
   3213a:	4603      	mov	r3, r0
		return -ENOBUFS;
   3213c:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   32140:	701c      	strb	r4, [r3, #0]
   32142:	e7bf      	b.n	320c4 <hci_acl_handle+0x44>
   32144:	20000158 	.word	0x20000158

00032148 <hci_disconn_complete_encode>:
{
   32148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   3214a:	4b0e      	ldr	r3, [pc, #56]	; (32184 <hci_disconn_complete_encode+0x3c>)
   3214c:	681b      	ldr	r3, [r3, #0]
   3214e:	06db      	lsls	r3, r3, #27
   32150:	d400      	bmi.n	32154 <hci_disconn_complete_encode+0xc>
}
   32152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32154:	f102 0408 	add.w	r4, r2, #8
   32158:	4605      	mov	r5, r0
   3215a:	460e      	mov	r6, r1
   3215c:	4620      	mov	r0, r4
   3215e:	2102      	movs	r1, #2
   32160:	f015 fe50 	bl	47e04 <net_buf_simple_add>
   32164:	4603      	mov	r3, r0
	hdr->len = len;
   32166:	2104      	movs	r1, #4
	hdr->evt = evt;
   32168:	2205      	movs	r2, #5
	hdr->len = len;
   3216a:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   3216c:	701a      	strb	r2, [r3, #0]
   3216e:	4620      	mov	r0, r4
   32170:	f015 fe48 	bl	47e04 <net_buf_simple_add>
   32174:	2700      	movs	r7, #0
	ep->status = 0x00;
   32176:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   32178:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   3217c:	782b      	ldrb	r3, [r5, #0]
   3217e:	70c3      	strb	r3, [r0, #3]
}
   32180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32182:	bf00      	nop
   32184:	20000158 	.word	0x20000158

00032188 <hci_disconn_complete_process>:
	conn_count--;
   32188:	4a02      	ldr	r2, [pc, #8]	; (32194 <hci_disconn_complete_process+0xc>)
   3218a:	6813      	ldr	r3, [r2, #0]
   3218c:	3b01      	subs	r3, #1
   3218e:	6013      	str	r3, [r2, #0]
}
   32190:	4770      	bx	lr
   32192:	bf00      	nop
   32194:	20001f0c 	.word	0x20001f0c

00032198 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   32198:	7f03      	ldrb	r3, [r0, #28]
   3219a:	f003 0303 	and.w	r3, r3, #3
   3219e:	3b01      	subs	r3, #1
   321a0:	2b01      	cmp	r3, #1
{
   321a2:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   321a4:	d90d      	bls.n	321c2 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   321a6:	4a16      	ldr	r2, [pc, #88]	; (32200 <hci_acl_encode+0x68>)
   321a8:	4916      	ldr	r1, [pc, #88]	; (32204 <hci_acl_encode+0x6c>)
   321aa:	4817      	ldr	r0, [pc, #92]	; (32208 <hci_acl_encode+0x70>)
   321ac:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   321b0:	f010 fdae 	bl	42d10 <printk>
   321b4:	4040      	eors	r0, r0
   321b6:	f380 8811 	msr	BASEPRI, r0
   321ba:	f04f 0003 	mov.w	r0, #3
   321be:	df02      	svc	2
		break;
	}
}
   321c0:	bd70      	pop	{r4, r5, r6, pc}
   321c2:	4604      	mov	r4, r0
   321c4:	f101 0508 	add.w	r5, r1, #8
   321c8:	4628      	mov	r0, r5
   321ca:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   321cc:	88e6      	ldrh	r6, [r4, #6]
   321ce:	f015 fe19 	bl	47e04 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   321d2:	7f23      	ldrb	r3, [r4, #28]
   321d4:	f003 0303 	and.w	r3, r3, #3
   321d8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   321da:	bf0c      	ite	eq
   321dc:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   321e0:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   321e4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   321e6:	7f61      	ldrb	r1, [r4, #29]
   321e8:	8041      	strh	r1, [r0, #2]
   321ea:	4628      	mov	r0, r5
   321ec:	f015 fe0a 	bl	47e04 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   321f0:	7f62      	ldrb	r2, [r4, #29]
   321f2:	f104 011f 	add.w	r1, r4, #31
}
   321f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   321fa:	f012 be61 	b.w	44ec0 <memcpy>
   321fe:	bf00      	nop
   32200:	0004a54c 	.word	0x0004a54c
   32204:	0004a500 	.word	0x0004a500
   32208:	0004a4a0 	.word	0x0004a4a0

0003220c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   3220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   32210:	f890 c004 	ldrb.w	ip, [r0, #4]
   32214:	88c6      	ldrh	r6, [r0, #6]
   32216:	f1bc 0f03 	cmp.w	ip, #3
{
   3221a:	b085      	sub	sp, #20
   3221c:	4604      	mov	r4, r0
   3221e:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   32220:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   32224:	d00e      	beq.n	32244 <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
   32226:	f1ac 0c16 	sub.w	ip, ip, #22
   3222a:	f1bc 0f06 	cmp.w	ip, #6
   3222e:	f200 82ac 	bhi.w	3278a <hci_evt_encode+0x57e>
   32232:	e8df f01c 	tbh	[pc, ip, lsl #1]
   32236:	002b      	.short	0x002b
   32238:	008f0087 	.word	0x008f0087
   3223c:	00bd0021 	.word	0x00bd0021
   32240:	00f100d0 	.word	0x00f100d0
	switch (pdu_data->llctrl.opcode) {
   32244:	7fc3      	ldrb	r3, [r0, #31]
   32246:	3b03      	subs	r3, #3
   32248:	2b12      	cmp	r3, #18
   3224a:	f200 811d 	bhi.w	32488 <hci_evt_encode+0x27c>
   3224e:	e8df f013 	tbh	[pc, r3, lsl #1]
   32252:	0160      	.short	0x0160
   32254:	011b011b 	.word	0x011b011b
   32258:	01b6019d 	.word	0x01b6019d
   3225c:	01e9011b 	.word	0x01e9011b
   32260:	011b011b 	.word	0x011b011b
   32264:	01ee011b 	.word	0x01ee011b
   32268:	01c4011b 	.word	0x01c4011b
   3226c:	001a011b 	.word	0x001a011b
   32270:	011b011b 	.word	0x011b011b
   32274:	01290129 	.word	0x01290129
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   32278:	4bbd      	ldr	r3, [pc, #756]	; (32570 <hci_evt_encode+0x364>)
   3227a:	685b      	ldr	r3, [r3, #4]
   3227c:	0418      	lsls	r0, r3, #16
   3227e:	f04f 0400 	mov.w	r4, #0
   32282:	f100 8136 	bmi.w	324f2 <hci_evt_encode+0x2e6>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   32286:	b005      	add	sp, #20
   32288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   3228c:	07f8      	lsls	r0, r7, #31
   3228e:	f100 81f2 	bmi.w	32676 <hci_evt_encode+0x46a>
	status = cc->status;
   32292:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   32294:	2f00      	cmp	r7, #0
   32296:	f000 81e5 	beq.w	32664 <hci_evt_encode+0x458>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3229a:	4bb5      	ldr	r3, [pc, #724]	; (32570 <hci_evt_encode+0x364>)
   3229c:	685b      	ldr	r3, [r3, #4]
   3229e:	0099      	lsls	r1, r3, #2
   322a0:	d5f1      	bpl.n	32286 <hci_evt_encode+0x7a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   322a2:	4bb4      	ldr	r3, [pc, #720]	; (32574 <hci_evt_encode+0x368>)
   322a4:	681b      	ldr	r3, [r3, #0]
   322a6:	f240 2201 	movw	r2, #513	; 0x201
   322aa:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   322ac:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   322b0:	d0e9      	beq.n	32286 <hci_evt_encode+0x7a>
   322b2:	3508      	adds	r5, #8
	if (!status) {
   322b4:	2f00      	cmp	r7, #0
   322b6:	f040 81f6 	bne.w	326a6 <hci_evt_encode+0x49a>
		conn_count++;
   322ba:	4aaf      	ldr	r2, [pc, #700]	; (32578 <hci_evt_encode+0x36c>)
   322bc:	6813      	ldr	r3, [r2, #0]
   322be:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   322c0:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
   322c4:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   322c6:	f1b8 0f00 	cmp.w	r8, #0
   322ca:	f000 8208 	beq.w	326de <hci_evt_encode+0x4d2>
   322ce:	2102      	movs	r1, #2
   322d0:	4628      	mov	r0, r5
   322d2:	f015 fd97 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   322d6:	233e      	movs	r3, #62	; 0x3e
   322d8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   322da:	231f      	movs	r3, #31
   322dc:	7043      	strb	r3, [r0, #1]
   322de:	2101      	movs	r1, #1
   322e0:	4628      	mov	r0, r5
   322e2:	f015 fd8f 	bl	47e04 <net_buf_simple_add>
   322e6:	4603      	mov	r3, r0
	me->subevent = subevt;
   322e8:	220a      	movs	r2, #10
   322ea:	701a      	strb	r2, [r3, #0]
   322ec:	4628      	mov	r0, r5
   322ee:	211e      	movs	r1, #30
   322f0:	f015 fd88 	bl	47e04 <net_buf_simple_add>
		leecc->status = 0x00;
   322f4:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   322f6:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   322fa:	7f63      	ldrb	r3, [r4, #29]
   322fc:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   322fe:	7fa3      	ldrb	r3, [r4, #30]
   32300:	7103      	strb	r3, [r0, #4]
   32302:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   32304:	4649      	mov	r1, r9
   32306:	2206      	movs	r2, #6
   32308:	3005      	adds	r0, #5
   3230a:	f012 fdd9 	bl	44ec0 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   3230e:	2206      	movs	r2, #6
   32310:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   32314:	f105 000b 	add.w	r0, r5, #11
   32318:	f012 fdd2 	bl	44ec0 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   3231c:	2206      	movs	r2, #6
   3231e:	f104 0125 	add.w	r1, r4, #37	; 0x25
   32322:	f105 0011 	add.w	r0, r5, #17
   32326:	f012 fdcb 	bl	44ec0 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   3232a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   3232c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   3232e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   32330:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   32334:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   32338:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   3233c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   32340:	776b      	strb	r3, [r5, #29]
		return;
   32342:	e7a0      	b.n	32286 <hci_evt_encode+0x7a>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   32344:	460a      	mov	r2, r1
   32346:	4638      	mov	r0, r7
   32348:	4631      	mov	r1, r6
}
   3234a:	b005      	add	sp, #20
   3234c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   32350:	f7ff befa 	b.w	32148 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32354:	4b86      	ldr	r3, [pc, #536]	; (32570 <hci_evt_encode+0x364>)
   32356:	685b      	ldr	r3, [r3, #4]
   32358:	009a      	lsls	r2, r3, #2
   3235a:	d594      	bpl.n	32286 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   3235c:	4b85      	ldr	r3, [pc, #532]	; (32574 <hci_evt_encode+0x368>)
   3235e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32360:	075b      	lsls	r3, r3, #29
   32362:	d590      	bpl.n	32286 <hci_evt_encode+0x7a>
   32364:	3508      	adds	r5, #8
   32366:	2102      	movs	r1, #2
   32368:	4628      	mov	r0, r5
   3236a:	f015 fd4b 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   3236e:	233e      	movs	r3, #62	; 0x3e
   32370:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32372:	230a      	movs	r3, #10
   32374:	7043      	strb	r3, [r0, #1]
   32376:	2101      	movs	r1, #1
   32378:	4628      	mov	r0, r5
   3237a:	f015 fd43 	bl	47e04 <net_buf_simple_add>
   3237e:	4603      	mov	r3, r0
	me->subevent = subevt;
   32380:	2203      	movs	r2, #3
   32382:	4628      	mov	r0, r5
   32384:	701a      	strb	r2, [r3, #0]
   32386:	2109      	movs	r1, #9
   32388:	f015 fd3c 	bl	47e04 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3238c:	07ff      	lsls	r7, r7, #31
   3238e:	4605      	mov	r5, r0
   32390:	f100 81ed 	bmi.w	3276e <hci_evt_encode+0x562>
	sep->status = cu->status;
   32394:	7f23      	ldrb	r3, [r4, #28]
   32396:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   32398:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   3239a:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   3239c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   3239e:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   323a2:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   323a6:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   323aa:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   323ae:	e76a      	b.n	32286 <hci_evt_encode+0x7a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   323b0:	4b72      	ldr	r3, [pc, #456]	; (3257c <hci_evt_encode+0x370>)
   323b2:	681b      	ldr	r3, [r3, #0]
   323b4:	0219      	lsls	r1, r3, #8
   323b6:	f57f af66 	bpl.w	32286 <hci_evt_encode+0x7a>
   323ba:	3508      	adds	r5, #8
   323bc:	2102      	movs	r1, #2
   323be:	4628      	mov	r0, r5
   323c0:	f015 fd20 	bl	47e04 <net_buf_simple_add>
	hdr->len = len;
   323c4:	2102      	movs	r1, #2
	hdr->evt = evt;
   323c6:	2357      	movs	r3, #87	; 0x57
   323c8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   323ca:	7041      	strb	r1, [r0, #1]
   323cc:	4628      	mov	r0, r5
   323ce:	f015 fd19 	bl	47e04 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   323d2:	8006      	strh	r6, [r0, #0]
   323d4:	e757      	b.n	32286 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   323d6:	4b66      	ldr	r3, [pc, #408]	; (32570 <hci_evt_encode+0x364>)
   323d8:	685b      	ldr	r3, [r3, #4]
   323da:	009a      	lsls	r2, r3, #2
   323dc:	f57f af53 	bpl.w	32286 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   323e0:	4b64      	ldr	r3, [pc, #400]	; (32574 <hci_evt_encode+0x368>)
   323e2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   323e4:	031b      	lsls	r3, r3, #12
   323e6:	f57f af4e 	bpl.w	32286 <hci_evt_encode+0x7a>
   323ea:	3508      	adds	r5, #8
   323ec:	2102      	movs	r1, #2
   323ee:	4628      	mov	r0, r5
   323f0:	f015 fd08 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   323f4:	233e      	movs	r3, #62	; 0x3e
   323f6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   323f8:	2304      	movs	r3, #4
   323fa:	7043      	strb	r3, [r0, #1]
   323fc:	2101      	movs	r1, #1
   323fe:	4628      	mov	r0, r5
   32400:	f015 fd00 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   32404:	2314      	movs	r3, #20
   32406:	7003      	strb	r3, [r0, #0]
   32408:	2103      	movs	r1, #3
   3240a:	4628      	mov	r0, r5
   3240c:	f015 fcfa 	bl	47e04 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   32410:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   32412:	7f23      	ldrb	r3, [r4, #28]
   32414:	7083      	strb	r3, [r0, #2]
   32416:	e736      	b.n	32286 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32418:	4b55      	ldr	r3, [pc, #340]	; (32570 <hci_evt_encode+0x364>)
   3241a:	685b      	ldr	r3, [r3, #4]
   3241c:	009f      	lsls	r7, r3, #2
   3241e:	f57f af32 	bpl.w	32286 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   32422:	4b54      	ldr	r3, [pc, #336]	; (32574 <hci_evt_encode+0x368>)
   32424:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32426:	0518      	lsls	r0, r3, #20
   32428:	f57f af2d 	bpl.w	32286 <hci_evt_encode+0x7a>
   3242c:	3508      	adds	r5, #8
   3242e:	2102      	movs	r1, #2
   32430:	4628      	mov	r0, r5
   32432:	f015 fce7 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   32436:	233e      	movs	r3, #62	; 0x3e
   32438:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3243a:	2306      	movs	r3, #6
   3243c:	7043      	strb	r3, [r0, #1]
   3243e:	2101      	movs	r1, #1
   32440:	4628      	mov	r0, r5
   32442:	f015 fcdf 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   32446:	230c      	movs	r3, #12
   32448:	7003      	strb	r3, [r0, #0]
   3244a:	2105      	movs	r1, #5
   3244c:	4628      	mov	r0, r5
   3244e:	f015 fcd9 	bl	47e04 <net_buf_simple_add>
	sep->status = pu->status;
   32452:	7f23      	ldrb	r3, [r4, #28]
   32454:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   32456:	f8a0 6001 	strh.w	r6, [r0, #1]
   3245a:	7f62      	ldrb	r2, [r4, #29]
   3245c:	2a00      	cmp	r2, #0
   3245e:	fa92 f3a2 	rbit	r3, r2
   32462:	fab3 f383 	clz	r3, r3
   32466:	bf08      	it	eq
   32468:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   3246c:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   3246e:	70c3      	strb	r3, [r0, #3]
   32470:	7fa2      	ldrb	r2, [r4, #30]
   32472:	fa92 f3a2 	rbit	r3, r2
   32476:	2a00      	cmp	r2, #0
   32478:	fab3 f383 	clz	r3, r3
   3247c:	bf08      	it	eq
   3247e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   32482:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   32484:	7103      	strb	r3, [r0, #4]
   32486:	e6fe      	b.n	32286 <hci_evt_encode+0x7a>
		LL_ASSERT(0);
   32488:	4a3d      	ldr	r2, [pc, #244]	; (32580 <hci_evt_encode+0x374>)
   3248a:	493e      	ldr	r1, [pc, #248]	; (32584 <hci_evt_encode+0x378>)
   3248c:	483e      	ldr	r0, [pc, #248]	; (32588 <hci_evt_encode+0x37c>)
   3248e:	f641 538f 	movw	r3, #7567	; 0x1d8f
   32492:	f010 fc3d 	bl	42d10 <printk>
   32496:	4040      	eors	r0, r0
   32498:	f380 8811 	msr	BASEPRI, r0
   3249c:	f04f 0003 	mov.w	r0, #3
   324a0:	df02      	svc	2
}
   324a2:	e6f0      	b.n	32286 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   324a4:	4b32      	ldr	r3, [pc, #200]	; (32570 <hci_evt_encode+0x364>)
   324a6:	685b      	ldr	r3, [r3, #4]
   324a8:	009a      	lsls	r2, r3, #2
   324aa:	f57f aeec 	bpl.w	32286 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   324ae:	4b31      	ldr	r3, [pc, #196]	; (32574 <hci_evt_encode+0x368>)
   324b0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   324b2:	065b      	lsls	r3, r3, #25
   324b4:	f57f aee7 	bpl.w	32286 <hci_evt_encode+0x7a>
   324b8:	3508      	adds	r5, #8
   324ba:	2102      	movs	r1, #2
   324bc:	4628      	mov	r0, r5
   324be:	f015 fca1 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   324c2:	233e      	movs	r3, #62	; 0x3e
   324c4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   324c6:	230b      	movs	r3, #11
   324c8:	7043      	strb	r3, [r0, #1]
   324ca:	2101      	movs	r1, #1
   324cc:	4628      	mov	r0, r5
   324ce:	f015 fc99 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   324d2:	2307      	movs	r3, #7
   324d4:	7003      	strb	r3, [r0, #0]
   324d6:	210a      	movs	r1, #10
   324d8:	4628      	mov	r0, r5
   324da:	f015 fc93 	bl	47e04 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   324de:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   324e0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   324e2:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   324e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   324e6:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   324e8:	8c23      	ldrh	r3, [r4, #32]
   324ea:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   324ec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   324ee:	8103      	strh	r3, [r0, #8]
   324f0:	e6c9      	b.n	32286 <hci_evt_encode+0x7a>
   324f2:	3508      	adds	r5, #8
   324f4:	2102      	movs	r1, #2
   324f6:	4628      	mov	r0, r5
   324f8:	f015 fc84 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   324fc:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   324fe:	2103      	movs	r1, #3
	hdr->evt = evt;
   32500:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32502:	7041      	strb	r1, [r0, #1]
   32504:	4628      	mov	r0, r5
   32506:	f015 fc7d 	bl	47e04 <net_buf_simple_add>
	ep->status = 0x00;
   3250a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3250c:	f8a0 6001 	strh.w	r6, [r0, #1]
   32510:	e6b9      	b.n	32286 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32512:	4b17      	ldr	r3, [pc, #92]	; (32570 <hci_evt_encode+0x364>)
   32514:	685b      	ldr	r3, [r3, #4]
   32516:	0099      	lsls	r1, r3, #2
   32518:	f57f aeb5 	bpl.w	32286 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   3251c:	4b15      	ldr	r3, [pc, #84]	; (32574 <hci_evt_encode+0x368>)
   3251e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32520:	06da      	lsls	r2, r3, #27
   32522:	f57f aeb0 	bpl.w	32286 <hci_evt_encode+0x7a>
   32526:	3508      	adds	r5, #8
   32528:	2102      	movs	r1, #2
   3252a:	4628      	mov	r0, r5
   3252c:	f015 fc6a 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   32530:	233e      	movs	r3, #62	; 0x3e
   32532:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32534:	230d      	movs	r3, #13
   32536:	7043      	strb	r3, [r0, #1]
   32538:	2101      	movs	r1, #1
   3253a:	4628      	mov	r0, r5
   3253c:	f015 fc62 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   32540:	2305      	movs	r3, #5
   32542:	7003      	strb	r3, [r0, #0]
   32544:	210c      	movs	r1, #12
   32546:	4628      	mov	r0, r5
   32548:	f015 fc5c 	bl	47e04 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   3254c:	f104 0120 	add.w	r1, r4, #32
   32550:	4605      	mov	r5, r0
   32552:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   32554:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   32558:	f012 fcb2 	bl	44ec0 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   3255c:	2202      	movs	r2, #2
   3255e:	f104 0128 	add.w	r1, r4, #40	; 0x28
   32562:	f105 000a 	add.w	r0, r5, #10
}
   32566:	b005      	add	sp, #20
   32568:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   3256c:	f012 bca8 	b.w	44ec0 <memcpy>
   32570:	20000158 	.word	0x20000158
   32574:	20000160 	.word	0x20000160
   32578:	20001f0c 	.word	0x20001f0c
   3257c:	20001568 	.word	0x20001568
   32580:	0004a54c 	.word	0x0004a54c
   32584:	0004a500 	.word	0x0004a500
   32588:	0004a4a0 	.word	0x0004a4a0
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3258c:	4b86      	ldr	r3, [pc, #536]	; (327a8 <hci_evt_encode+0x59c>)
   3258e:	681b      	ldr	r3, [r3, #0]
   32590:	061b      	lsls	r3, r3, #24
   32592:	f04f 0400 	mov.w	r4, #0
   32596:	f57f ae76 	bpl.w	32286 <hci_evt_encode+0x7a>
   3259a:	3508      	adds	r5, #8
   3259c:	2102      	movs	r1, #2
   3259e:	4628      	mov	r0, r5
   325a0:	f015 fc30 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   325a4:	2308      	movs	r3, #8
	hdr->len = len;
   325a6:	2104      	movs	r1, #4
	hdr->evt = evt;
   325a8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   325aa:	7041      	strb	r1, [r0, #1]
   325ac:	4628      	mov	r0, r5
   325ae:	f015 fc29 	bl	47e04 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   325b2:	2301      	movs	r3, #1
	ep->status = err;
   325b4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   325b6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   325ba:	70c3      	strb	r3, [r0, #3]
   325bc:	e663      	b.n	32286 <hci_evt_encode+0x7a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   325be:	f890 3020 	ldrb.w	r3, [r0, #32]
   325c2:	2b0e      	cmp	r3, #14
   325c4:	f47f ae5f 	bne.w	32286 <hci_evt_encode+0x7a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   325c8:	460b      	mov	r3, r1
   325ca:	4632      	mov	r2, r6
   325cc:	2100      	movs	r1, #0
   325ce:	201a      	movs	r0, #26
}
   325d0:	b005      	add	sp, #20
   325d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   325d6:	f7fe bf9f 	b.w	31518 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   325da:	4b73      	ldr	r3, [pc, #460]	; (327a8 <hci_evt_encode+0x59c>)
   325dc:	685b      	ldr	r3, [r3, #4]
   325de:	0098      	lsls	r0, r3, #2
   325e0:	d557      	bpl.n	32692 <hci_evt_encode+0x486>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   325e2:	4b72      	ldr	r3, [pc, #456]	; (327ac <hci_evt_encode+0x5a0>)
   325e4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   325e6:	0699      	lsls	r1, r3, #26
   325e8:	d553      	bpl.n	32692 <hci_evt_encode+0x486>
   325ea:	3508      	adds	r5, #8
   325ec:	2102      	movs	r1, #2
   325ee:	4628      	mov	r0, r5
   325f0:	f015 fc08 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   325f4:	233e      	movs	r3, #62	; 0x3e
   325f6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   325f8:	230b      	movs	r3, #11
   325fa:	7043      	strb	r3, [r0, #1]
   325fc:	2101      	movs	r1, #1
   325fe:	4628      	mov	r0, r5
   32600:	f015 fc00 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   32604:	2306      	movs	r3, #6
   32606:	7003      	strb	r3, [r0, #0]
   32608:	210a      	movs	r1, #10
   3260a:	4628      	mov	r0, r5
   3260c:	f015 fbfa 	bl	47e04 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   32610:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   32612:	8c23      	ldrh	r3, [r4, #32]
   32614:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   32616:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   32618:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   3261a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   3261c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   3261e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   32620:	8103      	strh	r3, [r0, #8]
   32622:	e630      	b.n	32286 <hci_evt_encode+0x7a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   32624:	460b      	mov	r3, r1
   32626:	4632      	mov	r2, r6
   32628:	4639      	mov	r1, r7
   3262a:	2000      	movs	r0, #0
   3262c:	e7d0      	b.n	325d0 <hci_evt_encode+0x3c4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3262e:	4b5e      	ldr	r3, [pc, #376]	; (327a8 <hci_evt_encode+0x59c>)
   32630:	681b      	ldr	r3, [r3, #0]
   32632:	061f      	lsls	r7, r3, #24
   32634:	f57f ae27 	bpl.w	32286 <hci_evt_encode+0x7a>
   32638:	3508      	adds	r5, #8
   3263a:	2102      	movs	r1, #2
   3263c:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   3263e:	f894 4020 	ldrb.w	r4, [r4, #32]
   32642:	f015 fbdf 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   32646:	2308      	movs	r3, #8
	hdr->len = len;
   32648:	2104      	movs	r1, #4
	hdr->evt = evt;
   3264a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3264c:	7041      	strb	r1, [r0, #1]
   3264e:	4628      	mov	r0, r5
   32650:	f015 fbd8 	bl	47e04 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   32654:	fab4 f384 	clz	r3, r4
   32658:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   3265a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3265c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   32660:	70c3      	strb	r3, [r0, #3]
   32662:	e610      	b.n	32286 <hci_evt_encode+0x7a>
		ll_rl_crpa_set(cc->peer_addr_type,
   32664:	7fa0      	ldrb	r0, [r4, #30]
   32666:	f104 0325 	add.w	r3, r4, #37	; 0x25
   3266a:	22ff      	movs	r2, #255	; 0xff
   3266c:	f104 011f 	add.w	r1, r4, #31
   32670:	f007 f9ca 	bl	39a08 <ll_rl_crpa_set>
   32674:	e611      	b.n	3229a <hci_evt_encode+0x8e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   32676:	4a4e      	ldr	r2, [pc, #312]	; (327b0 <hci_evt_encode+0x5a4>)
   32678:	494e      	ldr	r1, [pc, #312]	; (327b4 <hci_evt_encode+0x5a8>)
   3267a:	484f      	ldr	r0, [pc, #316]	; (327b8 <hci_evt_encode+0x5ac>)
   3267c:	f641 23f5 	movw	r3, #6901	; 0x1af5
   32680:	f010 fb46 	bl	42d10 <printk>
   32684:	4040      	eors	r0, r0
   32686:	f380 8811 	msr	BASEPRI, r0
   3268a:	f04f 0003 	mov.w	r0, #3
   3268e:	df02      	svc	2
   32690:	e5ff      	b.n	32292 <hci_evt_encode+0x86>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   32692:	2300      	movs	r3, #0
   32694:	e9cd 3301 	strd	r3, r3, [sp, #4]
   32698:	9300      	str	r3, [sp, #0]
   3269a:	221a      	movs	r2, #26
   3269c:	2102      	movs	r1, #2
   3269e:	4630      	mov	r0, r6
   326a0:	f002 feb0 	bl	35404 <ll_conn_update>
		return;
   326a4:	e5ef      	b.n	32286 <hci_evt_encode+0x7a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   326a6:	f1b8 0f00 	cmp.w	r8, #0
   326aa:	d147      	bne.n	3273c <hci_evt_encode+0x530>
   326ac:	2102      	movs	r1, #2
   326ae:	4628      	mov	r0, r5
   326b0:	f015 fba8 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   326b4:	233e      	movs	r3, #62	; 0x3e
   326b6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   326b8:	2313      	movs	r3, #19
   326ba:	7043      	strb	r3, [r0, #1]
   326bc:	2101      	movs	r1, #1
   326be:	4628      	mov	r0, r5
   326c0:	f015 fba0 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   326c4:	2301      	movs	r3, #1
   326c6:	7003      	strb	r3, [r0, #0]
   326c8:	2112      	movs	r1, #18
   326ca:	4628      	mov	r0, r5
   326cc:	f015 fb9a 	bl	47e04 <net_buf_simple_add>
   326d0:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   326d2:	2212      	movs	r2, #18
   326d4:	4641      	mov	r1, r8
   326d6:	f012 fbfe 	bl	44ed6 <memset>
		lecc->status = status;
   326da:	7027      	strb	r7, [r4, #0]
		return;
   326dc:	e5d3      	b.n	32286 <hci_evt_encode+0x7a>
   326de:	2102      	movs	r1, #2
   326e0:	4628      	mov	r0, r5
   326e2:	f015 fb8f 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   326e6:	233e      	movs	r3, #62	; 0x3e
   326e8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   326ea:	2313      	movs	r3, #19
   326ec:	7043      	strb	r3, [r0, #1]
   326ee:	2101      	movs	r1, #1
   326f0:	4628      	mov	r0, r5
   326f2:	f015 fb87 	bl	47e04 <net_buf_simple_add>
   326f6:	4603      	mov	r3, r0
	me->subevent = subevt;
   326f8:	2201      	movs	r2, #1
   326fa:	701a      	strb	r2, [r3, #0]
   326fc:	4628      	mov	r0, r5
   326fe:	2112      	movs	r1, #18
   32700:	f015 fb80 	bl	47e04 <net_buf_simple_add>
	lecc->status = 0x00;
   32704:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   32706:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   3270a:	7f63      	ldrb	r3, [r4, #29]
   3270c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   3270e:	7fa3      	ldrb	r3, [r4, #30]
   32710:	f003 0301 	and.w	r3, r3, #1
   32714:	4605      	mov	r5, r0
   32716:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   32718:	4649      	mov	r1, r9
   3271a:	2206      	movs	r2, #6
   3271c:	3005      	adds	r0, #5
   3271e:	f012 fbcf 	bl	44ec0 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   32722:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   32724:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   32726:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   32728:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   3272c:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   32730:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   32734:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   32738:	746b      	strb	r3, [r5, #17]
   3273a:	e5a4      	b.n	32286 <hci_evt_encode+0x7a>
   3273c:	2102      	movs	r1, #2
   3273e:	4628      	mov	r0, r5
   32740:	f015 fb60 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   32744:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   32746:	231f      	movs	r3, #31
	hdr->evt = evt;
   32748:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   3274a:	7043      	strb	r3, [r0, #1]
   3274c:	2101      	movs	r1, #1
   3274e:	4628      	mov	r0, r5
   32750:	f015 fb58 	bl	47e04 <net_buf_simple_add>
	me->subevent = subevt;
   32754:	230a      	movs	r3, #10
   32756:	7003      	strb	r3, [r0, #0]
   32758:	211e      	movs	r1, #30
   3275a:	4628      	mov	r0, r5
   3275c:	f015 fb52 	bl	47e04 <net_buf_simple_add>
   32760:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   32762:	221e      	movs	r2, #30
   32764:	2100      	movs	r1, #0
   32766:	f012 fbb6 	bl	44ed6 <memset>
			leecc->status = status;
   3276a:	7027      	strb	r7, [r4, #0]
			return;
   3276c:	e58b      	b.n	32286 <hci_evt_encode+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3276e:	4a10      	ldr	r2, [pc, #64]	; (327b0 <hci_evt_encode+0x5a4>)
   32770:	4912      	ldr	r1, [pc, #72]	; (327bc <hci_evt_encode+0x5b0>)
   32772:	4811      	ldr	r0, [pc, #68]	; (327b8 <hci_evt_encode+0x5ac>)
   32774:	f641 337a 	movw	r3, #7034	; 0x1b7a
   32778:	f010 faca 	bl	42d10 <printk>
   3277c:	4040      	eors	r0, r0
   3277e:	f380 8811 	msr	BASEPRI, r0
   32782:	f04f 0003 	mov.w	r0, #3
   32786:	df02      	svc	2
   32788:	e604      	b.n	32394 <hci_evt_encode+0x188>
		LL_ASSERT(0);
   3278a:	4a09      	ldr	r2, [pc, #36]	; (327b0 <hci_evt_encode+0x5a4>)
   3278c:	490c      	ldr	r1, [pc, #48]	; (327c0 <hci_evt_encode+0x5b4>)
   3278e:	480a      	ldr	r0, [pc, #40]	; (327b8 <hci_evt_encode+0x5ac>)
   32790:	f641 43af 	movw	r3, #7343	; 0x1caf
   32794:	f010 fabc 	bl	42d10 <printk>
   32798:	4040      	eors	r0, r0
   3279a:	f380 8811 	msr	BASEPRI, r0
   3279e:	f04f 0003 	mov.w	r0, #3
   327a2:	df02      	svc	2
		return;
   327a4:	e56f      	b.n	32286 <hci_evt_encode+0x7a>
   327a6:	bf00      	nop
   327a8:	20000158 	.word	0x20000158
   327ac:	20000160 	.word	0x20000160
   327b0:	0004a54c 	.word	0x0004a54c
   327b4:	0004a588 	.word	0x0004a588
   327b8:	0004a4a0 	.word	0x0004a4a0
   327bc:	0004a5c4 	.word	0x0004a5c4
   327c0:	0004a500 	.word	0x0004a500

000327c4 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   327c4:	b570      	push	{r4, r5, r6, lr}
   327c6:	f100 0408 	add.w	r4, r0, #8
   327ca:	460e      	mov	r6, r1
   327cc:	4620      	mov	r0, r4
   327ce:	2102      	movs	r1, #2
   327d0:	4615      	mov	r5, r2
   327d2:	f015 fb17 	bl	47e04 <net_buf_simple_add>
	hdr->evt = evt;
   327d6:	2313      	movs	r3, #19
	hdr->len = len;
   327d8:	2105      	movs	r1, #5
	hdr->evt = evt;
   327da:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   327dc:	7041      	strb	r1, [r0, #1]
   327de:	4620      	mov	r0, r4
   327e0:	f015 fb10 	bl	47e04 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   327e4:	2301      	movs	r3, #1
   327e6:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   327e8:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   327ec:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   327f0:	bd70      	pop	{r4, r5, r6, pc}
   327f2:	bf00      	nop

000327f4 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   327f4:	7903      	ldrb	r3, [r0, #4]
   327f6:	2b03      	cmp	r3, #3
   327f8:	d009      	beq.n	3280e <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   327fa:	2b16      	cmp	r3, #22
   327fc:	d005      	beq.n	3280a <hci_get_class+0x16>
   327fe:	3b17      	subs	r3, #23
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   32800:	2b05      	cmp	r3, #5
   32802:	bf94      	ite	ls
   32804:	2003      	movls	r0, #3
   32806:	2000      	movhi	r0, #0
   32808:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   3280a:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   3280c:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   3280e:	7f03      	ldrb	r3, [r0, #28]
   32810:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   32814:	2b03      	cmp	r3, #3
   32816:	bf0c      	ite	eq
   32818:	2004      	moveq	r0, #4
   3281a:	2005      	movne	r0, #5
   3281c:	4770      	bx	lr
   3281e:	bf00      	nop

00032820 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   32820:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   32822:	4b0b      	ldr	r3, [pc, #44]	; (32850 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   32824:	490b      	ldr	r1, [pc, #44]	; (32854 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   32826:	4a0c      	ldr	r2, [pc, #48]	; (32858 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   32828:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3282c:	f641 75ff 	movw	r5, #8191	; 0x1fff
   32830:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   32834:	2400      	movs	r4, #0
   32836:	2500      	movs	r5, #0
   32838:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   3283c:	4b07      	ldr	r3, [pc, #28]	; (3285c <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3283e:	201f      	movs	r0, #31
   32840:	2100      	movs	r1, #0
   32842:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   32846:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   32848:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   3284a:	601a      	str	r2, [r3, #0]
}
   3284c:	4770      	bx	lr
   3284e:	bf00      	nop
   32850:	20000158 	.word	0x20000158
   32854:	20001568 	.word	0x20001568
   32858:	20000160 	.word	0x20000160
   3285c:	20001f0c 	.word	0x20001f0c

00032860 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   32860:	f008 b850 	b.w	3a904 <lll_csrand_get>

00032864 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   32864:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   32866:	2300      	movs	r3, #0
   32868:	f009 fe3a 	bl	3c4e0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   3286c:	2000      	movs	r0, #0
   3286e:	bd08      	pop	{r3, pc}

00032870 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   32870:	4801      	ldr	r0, [pc, #4]	; (32878 <ll_feat_get+0x8>)
   32872:	2100      	movs	r1, #0
   32874:	4770      	bx	lr
   32876:	bf00      	nop
   32878:	0001417f 	.word	0x0001417f

0003287c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   3287c:	b510      	push	{r4, lr}
   3287e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   32880:	f008 f876 	bl	3a970 <lll_reset>
	LL_ASSERT(!err);
   32884:	b950      	cbnz	r0, 3289c <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   32886:	f008 fc73 	bl	3b170 <lll_adv_reset>
	LL_ASSERT(!err);
   3288a:	b9c0      	cbnz	r0, 328be <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   3288c:	f009 f920 	bl	3bad0 <lll_conn_reset>
	LL_ASSERT(!err);
   32890:	bb30      	cbnz	r0, 328e0 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   32892:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   32894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32898:	f00f b840 	b.w	4191c <z_impl_k_sem_give>
	LL_ASSERT(!err);
   3289c:	4a19      	ldr	r2, [pc, #100]	; (32904 <perform_lll_reset+0x88>)
   3289e:	491a      	ldr	r1, [pc, #104]	; (32908 <perform_lll_reset+0x8c>)
   328a0:	481a      	ldr	r0, [pc, #104]	; (3290c <perform_lll_reset+0x90>)
   328a2:	f640 0324 	movw	r3, #2084	; 0x824
   328a6:	f010 fa33 	bl	42d10 <printk>
   328aa:	4040      	eors	r0, r0
   328ac:	f380 8811 	msr	BASEPRI, r0
   328b0:	f04f 0003 	mov.w	r0, #3
   328b4:	df02      	svc	2
	err = lll_adv_reset();
   328b6:	f008 fc5b 	bl	3b170 <lll_adv_reset>
	LL_ASSERT(!err);
   328ba:	2800      	cmp	r0, #0
   328bc:	d0e6      	beq.n	3288c <perform_lll_reset+0x10>
   328be:	4a11      	ldr	r2, [pc, #68]	; (32904 <perform_lll_reset+0x88>)
   328c0:	4911      	ldr	r1, [pc, #68]	; (32908 <perform_lll_reset+0x8c>)
   328c2:	4812      	ldr	r0, [pc, #72]	; (3290c <perform_lll_reset+0x90>)
   328c4:	f640 0329 	movw	r3, #2089	; 0x829
   328c8:	f010 fa22 	bl	42d10 <printk>
   328cc:	4040      	eors	r0, r0
   328ce:	f380 8811 	msr	BASEPRI, r0
   328d2:	f04f 0003 	mov.w	r0, #3
   328d6:	df02      	svc	2
	err = lll_conn_reset();
   328d8:	f009 f8fa 	bl	3bad0 <lll_conn_reset>
	LL_ASSERT(!err);
   328dc:	2800      	cmp	r0, #0
   328de:	d0d8      	beq.n	32892 <perform_lll_reset+0x16>
   328e0:	4a08      	ldr	r2, [pc, #32]	; (32904 <perform_lll_reset+0x88>)
   328e2:	4909      	ldr	r1, [pc, #36]	; (32908 <perform_lll_reset+0x8c>)
   328e4:	4809      	ldr	r0, [pc, #36]	; (3290c <perform_lll_reset+0x90>)
   328e6:	f640 0335 	movw	r3, #2101	; 0x835
   328ea:	f010 fa11 	bl	42d10 <printk>
   328ee:	4040      	eors	r0, r0
   328f0:	f380 8811 	msr	BASEPRI, r0
   328f4:	f04f 0003 	mov.w	r0, #3
   328f8:	df02      	svc	2
   328fa:	4620      	mov	r0, r4
}
   328fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32900:	f00f b80c 	b.w	4191c <z_impl_k_sem_give>
   32904:	0004a600 	.word	0x0004a600
   32908:	0004a63c 	.word	0x0004a63c
   3290c:	0004a4a0 	.word	0x0004a4a0

00032910 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   32910:	6008      	str	r0, [r1, #0]
   32912:	4801      	ldr	r0, [pc, #4]	; (32918 <ull_ticker_status_give+0x8>)
   32914:	f00f b802 	b.w	4191c <z_impl_k_sem_give>
   32918:	200021c0 	.word	0x200021c0

0003291c <disabled_cb>:
   3291c:	f00e bffe 	b.w	4191c <z_impl_k_sem_give>

00032920 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   32920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32924:	4d2c      	ldr	r5, [pc, #176]	; (329d8 <tx_cmplt_get+0xb8>)
{
   32926:	460c      	mov	r4, r1
   32928:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3292a:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   3292c:	7822      	ldrb	r2, [r4, #0]
   3292e:	782b      	ldrb	r3, [r5, #0]
   32930:	4291      	cmp	r1, r2
   32932:	bf9c      	itt	ls
   32934:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   32936:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   32938:	4591      	cmp	r9, r2
{
   3293a:	4682      	mov	sl, r0
   3293c:	d042      	beq.n	329c4 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   3293e:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   32942:	3201      	adds	r2, #1
   32944:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   32946:	4f25      	ldr	r7, [pc, #148]	; (329dc <tx_cmplt_get+0xbc>)
		i = 0U;
   32948:	4291      	cmp	r1, r2
   3294a:	bf08      	it	eq
   3294c:	2200      	moveq	r2, #0

	*idx = i;
   3294e:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   32950:	5afa      	ldrh	r2, [r7, r3]
   32952:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   32954:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   32956:	443b      	add	r3, r7
   32958:	f04f 0b01 	mov.w	fp, #1
   3295c:	f04f 0802 	mov.w	r8, #2
   32960:	e021      	b.n	329a6 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   32962:	b362      	cbz	r2, 329be <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   32964:	7902      	ldrb	r2, [r0, #4]
   32966:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   3296a:	3a01      	subs	r2, #1
   3296c:	2a01      	cmp	r2, #1
   3296e:	d92d      	bls.n	329cc <tx_cmplt_get+0xac>
   32970:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   32974:	f002 fcf4 	bl	35360 <ll_tx_mem_release>
	if (*idx >= count) {
   32978:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3297a:	7869      	ldrb	r1, [r5, #1]
   3297c:	7828      	ldrb	r0, [r5, #0]
   3297e:	4299      	cmp	r1, r3
   32980:	bf9c      	itt	ls
   32982:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   32984:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   32986:	454b      	cmp	r3, r9
   32988:	d01d      	beq.n	329c6 <tx_cmplt_get+0xa6>
	i = *idx + 1;
   3298a:	1c5a      	adds	r2, r3, #1
   3298c:	b2d2      	uxtb	r2, r2
		i = 0U;
   3298e:	4291      	cmp	r1, r2
   32990:	bf08      	it	eq
   32992:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   32994:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   32998:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   3299a:	5af9      	ldrh	r1, [r7, r3]
   3299c:	f8ba 2000 	ldrh.w	r2, [sl]
   329a0:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   329a2:	443b      	add	r3, r7
   329a4:	d10f      	bne.n	329c6 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   329a6:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   329a8:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   329aa:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   329ae:	d8d8      	bhi.n	32962 <tx_cmplt_get+0x42>
			cmplt++;
   329b0:	3601      	adds	r6, #1
   329b2:	b2f6      	uxtb	r6, r6
   329b4:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   329b8:	2a00      	cmp	r2, #0
   329ba:	d0dd      	beq.n	32978 <tx_cmplt_get+0x58>
   329bc:	e7da      	b.n	32974 <tx_cmplt_get+0x54>
   329be:	f8c3 8004 	str.w	r8, [r3, #4]
   329c2:	e7d9      	b.n	32978 <tx_cmplt_get+0x58>
		return 0;
   329c4:	2600      	movs	r6, #0

	return cmplt;
}
   329c6:	4630      	mov	r0, r6
   329c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   329cc:	3601      	adds	r6, #1
   329ce:	f8c3 b004 	str.w	fp, [r3, #4]
   329d2:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   329d4:	e7ce      	b.n	32974 <tx_cmplt_get+0x54>
   329d6:	bf00      	nop
   329d8:	20000654 	.word	0x20000654
   329dc:	20000658 	.word	0x20000658

000329e0 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   329e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   329e4:	4e3c      	ldr	r6, [pc, #240]	; (32ad8 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   329e6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 32adc <ull_done+0xfc>
   329ea:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 32ae0 <ull_done+0x100>
{
   329ee:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   329f0:	e9d6 0100 	ldrd	r0, r1, [r6]
   329f4:	aa01      	add	r2, sp, #4
   329f6:	f7fd f93f 	bl	2fc78 <memq_peek>
		if (link) {
   329fa:	4604      	mov	r4, r0
   329fc:	2800      	cmp	r0, #0
   329fe:	d03e      	beq.n	32a7e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   32a00:	6870      	ldr	r0, [r6, #4]
   32a02:	2200      	movs	r2, #0
   32a04:	4631      	mov	r1, r6
   32a06:	f7fd f93f 	bl	2fc88 <memq_dequeue>
			rx_demux_event_done(link, done);
   32a0a:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   32a0c:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   32a0e:	b135      	cbz	r5, 32a1e <ull_done+0x3e>
	return hdr->ref;
   32a10:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   32a12:	2b00      	cmp	r3, #0
   32a14:	d052      	beq.n	32abc <ull_done+0xdc>
	return hdr->ref--;
   32a16:	782b      	ldrb	r3, [r5, #0]
   32a18:	3b01      	subs	r3, #1
   32a1a:	b2db      	uxtb	r3, r3
   32a1c:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   32a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
   32a22:	b123      	cbz	r3, 32a2e <ull_done+0x4e>
   32a24:	2b01      	cmp	r3, #1
   32a26:	d13b      	bne.n	32aa0 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   32a28:	4638      	mov	r0, r7
   32a2a:	f005 fed7 	bl	387dc <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   32a2e:	4a2d      	ldr	r2, [pc, #180]	; (32ae4 <ull_done+0x104>)
	last = last + 1;
   32a30:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   32a32:	f892 c001 	ldrb.w	ip, [r2, #1]
   32a36:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   32a38:	3301      	adds	r3, #1
	done->extra.type = 0U;
   32a3a:	2000      	movs	r0, #0
   32a3c:	b2db      	uxtb	r3, r3
		last = 0U;
   32a3e:	459c      	cmp	ip, r3
   32a40:	bf08      	it	eq
   32a42:	4603      	moveq	r3, r0
	if (last == first) {
   32a44:	4299      	cmp	r1, r3
   32a46:	f887 0020 	strb.w	r0, [r7, #32]
   32a4a:	d01b      	beq.n	32a84 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   32a4c:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   32a4e:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32a50:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32a52:	fb00 2101 	mla	r1, r0, r1, r2
   32a56:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   32a58:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   32a5a:	2d00      	cmp	r5, #0
   32a5c:	d0c8      	beq.n	329f0 <ull_done+0x10>
	return hdr->ref;
   32a5e:	782b      	ldrb	r3, [r5, #0]
   32a60:	2b00      	cmp	r3, #0
   32a62:	d1c5      	bne.n	329f0 <ull_done+0x10>
   32a64:	696b      	ldr	r3, [r5, #20]
   32a66:	2b00      	cmp	r3, #0
   32a68:	d0c2      	beq.n	329f0 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   32a6a:	69a8      	ldr	r0, [r5, #24]
   32a6c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   32a6e:	e9d6 0100 	ldrd	r0, r1, [r6]
   32a72:	aa01      	add	r2, sp, #4
   32a74:	f7fd f900 	bl	2fc78 <memq_peek>
		if (link) {
   32a78:	4604      	mov	r4, r0
   32a7a:	2800      	cmp	r0, #0
   32a7c:	d1c0      	bne.n	32a00 <ull_done+0x20>
}
   32a7e:	b003      	add	sp, #12
   32a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   32a84:	4918      	ldr	r1, [pc, #96]	; (32ae8 <ull_done+0x108>)
   32a86:	4819      	ldr	r0, [pc, #100]	; (32aec <ull_done+0x10c>)
   32a88:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   32a8c:	4642      	mov	r2, r8
   32a8e:	f010 f93f 	bl	42d10 <printk>
   32a92:	4040      	eors	r0, r0
   32a94:	f380 8811 	msr	BASEPRI, r0
   32a98:	f04f 0003 	mov.w	r0, #3
   32a9c:	df02      	svc	2
   32a9e:	e7dc      	b.n	32a5a <ull_done+0x7a>
		LL_ASSERT(0);
   32aa0:	4913      	ldr	r1, [pc, #76]	; (32af0 <ull_done+0x110>)
   32aa2:	4812      	ldr	r0, [pc, #72]	; (32aec <ull_done+0x10c>)
   32aa4:	f640 2369 	movw	r3, #2665	; 0xa69
   32aa8:	4642      	mov	r2, r8
   32aaa:	f010 f931 	bl	42d10 <printk>
   32aae:	4040      	eors	r0, r0
   32ab0:	f380 8811 	msr	BASEPRI, r0
   32ab4:	f04f 0003 	mov.w	r0, #3
   32ab8:	df02      	svc	2
		break;
   32aba:	e7b8      	b.n	32a2e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   32abc:	480b      	ldr	r0, [pc, #44]	; (32aec <ull_done+0x10c>)
   32abe:	f640 2312 	movw	r3, #2578	; 0xa12
   32ac2:	4642      	mov	r2, r8
   32ac4:	4649      	mov	r1, r9
   32ac6:	f010 f923 	bl	42d10 <printk>
   32aca:	4040      	eors	r0, r0
   32acc:	f380 8811 	msr	BASEPRI, r0
   32ad0:	f04f 0003 	mov.w	r0, #3
   32ad4:	df02      	svc	2
   32ad6:	e79e      	b.n	32a16 <ull_done+0x36>
   32ad8:	200021ac 	.word	0x200021ac
   32adc:	0004a600 	.word	0x0004a600
   32ae0:	0004a644 	.word	0x0004a644
   32ae4:	20000514 	.word	0x20000514
   32ae8:	0004a65c 	.word	0x0004a65c
   32aec:	0004a4a0 	.word	0x0004a4a0
   32af0:	0004a500 	.word	0x0004a500

00032af4 <rx_alloc>:
{
   32af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   32af8:	4f33      	ldr	r7, [pc, #204]	; (32bc8 <rx_alloc+0xd4>)
   32afa:	783e      	ldrb	r6, [r7, #0]
   32afc:	4286      	cmp	r6, r0
   32afe:	bf28      	it	cs
   32b00:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b02:	b34e      	cbz	r6, 32b58 <rx_alloc+0x64>
   32b04:	4d31      	ldr	r5, [pc, #196]	; (32bcc <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   32b06:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 32bd0 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b0a:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   32b0c:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   32b10:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b12:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   32b14:	3401      	adds	r4, #1
   32b16:	b2e4      	uxtb	r4, r4
		last = 0U;
   32b18:	42a2      	cmp	r2, r4
   32b1a:	bf08      	it	eq
   32b1c:	2400      	moveq	r4, #0
	if (last == first) {
   32b1e:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   32b20:	4640      	mov	r0, r8
   32b22:	d01b      	beq.n	32b5c <rx_alloc+0x68>
   32b24:	f7fd f83a 	bl	2fb9c <mem_acquire>
   32b28:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32b2a:	4648      	mov	r0, r9
		if (!link) {
   32b2c:	f1ba 0f00 	cmp.w	sl, #0
   32b30:	d012      	beq.n	32b58 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   32b32:	f7fd f833 	bl	2fb9c <mem_acquire>
		if (!rx) {
   32b36:	2800      	cmp	r0, #0
   32b38:	d03f      	beq.n	32bba <rx_alloc+0xc6>
		rx->link = link;
   32b3a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32b3e:	78ea      	ldrb	r2, [r5, #3]
   32b40:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32b42:	fb02 5303 	mla	r3, r2, r3, r5
   32b46:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   32b48:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   32b4a:	70ec      	strb	r4, [r5, #3]
		max--;
   32b4c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   32b4e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b50:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   32b54:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b56:	d1db      	bne.n	32b10 <rx_alloc+0x1c>
}
   32b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   32b5c:	783b      	ldrb	r3, [r7, #0]
   32b5e:	2b00      	cmp	r3, #0
   32b60:	d0fa      	beq.n	32b58 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32b62:	4d1c      	ldr	r5, [pc, #112]	; (32bd4 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   32b64:	4e1c      	ldr	r6, [pc, #112]	; (32bd8 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32b66:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   32b68:	f8df 8064 	ldr.w	r8, [pc, #100]	; 32bd0 <rx_alloc+0xdc>
		link->mem = NULL;
   32b6c:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   32b70:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32b72:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   32b74:	3401      	adds	r4, #1
   32b76:	b2e4      	uxtb	r4, r4
		last = 0U;
   32b78:	42a2      	cmp	r2, r4
   32b7a:	bf08      	it	eq
   32b7c:	2400      	moveq	r4, #0
	if (last == first) {
   32b7e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   32b80:	4630      	mov	r0, r6
   32b82:	d0e9      	beq.n	32b58 <rx_alloc+0x64>
   32b84:	f7fd f80a 	bl	2fb9c <mem_acquire>
   32b88:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32b8a:	4640      	mov	r0, r8
		if (!link) {
   32b8c:	f1ba 0f00 	cmp.w	sl, #0
   32b90:	d0e2      	beq.n	32b58 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   32b92:	f7fd f803 	bl	2fb9c <mem_acquire>
		if (!rx) {
   32b96:	b180      	cbz	r0, 32bba <rx_alloc+0xc6>
		link->mem = NULL;
   32b98:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   32b9c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32ba0:	78ea      	ldrb	r2, [r5, #3]
   32ba2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32ba4:	fb02 5303 	mla	r3, r2, r3, r5
   32ba8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   32baa:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   32bac:	70ec      	strb	r4, [r5, #3]
   32bae:	3b01      	subs	r3, #1
   32bb0:	b2db      	uxtb	r3, r3
   32bb2:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   32bb4:	2b00      	cmp	r3, #0
   32bb6:	d1db      	bne.n	32b70 <rx_alloc+0x7c>
   32bb8:	e7ce      	b.n	32b58 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   32bba:	4650      	mov	r0, sl
   32bbc:	4906      	ldr	r1, [pc, #24]	; (32bd8 <rx_alloc+0xe4>)
}
   32bbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   32bc2:	f7fd b805 	b.w	2fbd0 <mem_release>
   32bc6:	bf00      	nop
   32bc8:	20001f74 	.word	0x20001f74
   32bcc:	20000538 	.word	0x20000538
   32bd0:	20001fc4 	.word	0x20001fc4
   32bd4:	2000052c 	.word	0x2000052c
   32bd8:	20001f78 	.word	0x20001f78

00032bdc <rx_demux>:
{
   32bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32be0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 32d90 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   32be4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 32d94 <rx_demux+0x1b8>
		LL_ASSERT(0);
   32be8:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 32d98 <rx_demux+0x1bc>
   32bec:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 32d9c <rx_demux+0x1c0>
{
   32bf0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   32bf2:	e9d8 0100 	ldrd	r0, r1, [r8]
   32bf6:	aa03      	add	r2, sp, #12
   32bf8:	f7fd f83e 	bl	2fc78 <memq_peek>
		if (link) {
   32bfc:	4605      	mov	r5, r0
   32bfe:	2800      	cmp	r0, #0
   32c00:	d035      	beq.n	32c6e <rx_demux+0x92>
			LL_ASSERT(rx);
   32c02:	9b03      	ldr	r3, [sp, #12]
   32c04:	2b00      	cmp	r3, #0
   32c06:	f000 80a6 	beq.w	32d56 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32c0a:	7818      	ldrb	r0, [r3, #0]
   32c0c:	aa04      	add	r2, sp, #16
   32c0e:	a902      	add	r1, sp, #8
   32c10:	f006 f89a 	bl	38d48 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   32c14:	4604      	mov	r4, r0
   32c16:	2800      	cmp	r0, #0
   32c18:	d055      	beq.n	32cc6 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   32c1a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   32c1e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   32c22:	780f      	ldrb	r7, [r1, #0]
   32c24:	f8ad 200a 	strh.w	r2, [sp, #10]
   32c28:	ae05      	add	r6, sp, #20
   32c2a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32c2c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32c30:	f006 f8a4 	bl	38d7c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   32c34:	4621      	mov	r1, r4
   32c36:	9a05      	ldr	r2, [sp, #20]
   32c38:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32c3c:	f006 f8e8 	bl	38e10 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32c40:	4620      	mov	r0, r4
   32c42:	f006 f859 	bl	38cf8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   32c46:	4632      	mov	r2, r6
   32c48:	4629      	mov	r1, r5
   32c4a:	4638      	mov	r0, r7
   32c4c:	f006 f87c 	bl	38d48 <ull_conn_ack_by_last_peek>
	} while (link);
   32c50:	4604      	mov	r4, r0
   32c52:	2800      	cmp	r0, #0
   32c54:	d1ec      	bne.n	32c30 <rx_demux+0x54>
	k_sem_give(sem_recv);
   32c56:	f8d9 0000 	ldr.w	r0, [r9]
   32c5a:	f00e fe5f 	bl	4191c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   32c5e:	e9d8 0100 	ldrd	r0, r1, [r8]
   32c62:	aa03      	add	r2, sp, #12
   32c64:	f7fd f808 	bl	2fc78 <memq_peek>
		if (link) {
   32c68:	4605      	mov	r5, r0
   32c6a:	2800      	cmp	r0, #0
   32c6c:	d1c9      	bne.n	32c02 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   32c6e:	aa04      	add	r2, sp, #16
   32c70:	a902      	add	r1, sp, #8
   32c72:	f10d 0007 	add.w	r0, sp, #7
   32c76:	f006 f84b 	bl	38d10 <ull_conn_ack_peek>
			if (link) {
   32c7a:	4604      	mov	r4, r0
   32c7c:	2800      	cmp	r0, #0
   32c7e:	d067      	beq.n	32d50 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   32c80:	9b04      	ldr	r3, [sp, #16]
   32c82:	9305      	str	r3, [sp, #20]
   32c84:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32c88:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   32c8c:	f8ad 300a 	strh.w	r3, [sp, #10]
   32c90:	ae05      	add	r6, sp, #20
   32c92:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32c96:	f006 f871 	bl	38d7c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   32c9a:	4621      	mov	r1, r4
   32c9c:	9a05      	ldr	r2, [sp, #20]
   32c9e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32ca2:	f006 f8b5 	bl	38e10 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32ca6:	4620      	mov	r0, r4
   32ca8:	f006 f826 	bl	38cf8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   32cac:	4632      	mov	r2, r6
   32cae:	4629      	mov	r1, r5
   32cb0:	4638      	mov	r0, r7
   32cb2:	f006 f849 	bl	38d48 <ull_conn_ack_by_last_peek>
	} while (link);
   32cb6:	4604      	mov	r4, r0
   32cb8:	2800      	cmp	r0, #0
   32cba:	d1ec      	bne.n	32c96 <rx_demux+0xba>
	k_sem_give(sem_recv);
   32cbc:	f8d9 0000 	ldr.w	r0, [r9]
   32cc0:	f00e fe2c 	bl	4191c <z_impl_k_sem_give>
			if (nack) {
   32cc4:	e7cb      	b.n	32c5e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   32cc6:	9b03      	ldr	r3, [sp, #12]
   32cc8:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   32cca:	791b      	ldrb	r3, [r3, #4]
   32ccc:	3b01      	subs	r3, #1
   32cce:	2b16      	cmp	r3, #22
   32cd0:	d80d      	bhi.n	32cee <rx_demux+0x112>
   32cd2:	e8df f003 	tbb	[pc, r3]
   32cd6:	0c1a      	.short	0x0c1a
   32cd8:	0c0c0c38 	.word	0x0c0c0c38
   32cdc:	0c0c0c0c 	.word	0x0c0c0c0c
   32ce0:	0c0c0c0c 	.word	0x0c0c0c0c
   32ce4:	0c0c0c0c 	.word	0x0c0c0c0c
   32ce8:	2d0c0c0c 	.word	0x2d0c0c0c
   32cec:	1a          	.byte	0x1a
   32ced:	00          	.byte	0x00
		LL_ASSERT(0);
   32cee:	482c      	ldr	r0, [pc, #176]	; (32da0 <rx_demux+0x1c4>)
   32cf0:	f640 13ff 	movw	r3, #2559	; 0x9ff
   32cf4:	4652      	mov	r2, sl
   32cf6:	4659      	mov	r1, fp
   32cf8:	f010 f80a 	bl	42d10 <printk>
   32cfc:	4040      	eors	r0, r0
   32cfe:	f380 8811 	msr	BASEPRI, r0
   32d02:	f04f 0003 	mov.w	r0, #3
   32d06:	df02      	svc	2
			if (nack) {
   32d08:	e773      	b.n	32bf2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32d0a:	4921      	ldr	r1, [pc, #132]	; (32d90 <rx_demux+0x1b4>)
   32d0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32d10:	2200      	movs	r2, #0
   32d12:	f7fc ffb9 	bl	2fc88 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32d16:	4b23      	ldr	r3, [pc, #140]	; (32da4 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   32d18:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32d1a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32d1c:	4628      	mov	r0, r5
   32d1e:	4a22      	ldr	r2, [pc, #136]	; (32da8 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32d20:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32d22:	f7fc ff9f 	bl	2fc64 <memq_enqueue>
	k_sem_give(sem_recv);
   32d26:	f8d9 0000 	ldr.w	r0, [r9]
   32d2a:	f00e fdf7 	bl	4191c <z_impl_k_sem_give>
			if (nack) {
   32d2e:	e796      	b.n	32c5e <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32d30:	4917      	ldr	r1, [pc, #92]	; (32d90 <rx_demux+0x1b4>)
   32d32:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32d36:	2200      	movs	r2, #0
   32d38:	f7fc ffa6 	bl	2fc88 <memq_dequeue>
		ull_conn_setup(link, rx);
   32d3c:	9905      	ldr	r1, [sp, #20]
   32d3e:	4628      	mov	r0, r5
   32d40:	f002 fe38 	bl	359b4 <ull_conn_setup>
			if (nack) {
   32d44:	e755      	b.n	32bf2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   32d46:	a905      	add	r1, sp, #20
   32d48:	4628      	mov	r0, r5
   32d4a:	f002 fe5b 	bl	35a04 <ull_conn_rx>
		if (nack) {
   32d4e:	b188      	cbz	r0, 32d74 <rx_demux+0x198>
}
   32d50:	b007      	add	sp, #28
   32d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   32d56:	4915      	ldr	r1, [pc, #84]	; (32dac <rx_demux+0x1d0>)
   32d58:	4811      	ldr	r0, [pc, #68]	; (32da0 <rx_demux+0x1c4>)
   32d5a:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   32d5e:	4652      	mov	r2, sl
   32d60:	f00f ffd6 	bl	42d10 <printk>
   32d64:	4040      	eors	r0, r0
   32d66:	f380 8811 	msr	BASEPRI, r0
   32d6a:	f04f 0003 	mov.w	r0, #3
   32d6e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32d70:	9b03      	ldr	r3, [sp, #12]
   32d72:	e74a      	b.n	32c0a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32d74:	4906      	ldr	r1, [pc, #24]	; (32d90 <rx_demux+0x1b4>)
   32d76:	4602      	mov	r2, r0
   32d78:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32d7c:	f7fc ff84 	bl	2fc88 <memq_dequeue>
		if (rx) {
   32d80:	9905      	ldr	r1, [sp, #20]
   32d82:	2900      	cmp	r1, #0
   32d84:	f43f af35 	beq.w	32bf2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32d88:	4b06      	ldr	r3, [pc, #24]	; (32da4 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32d8a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32d8c:	78db      	ldrb	r3, [r3, #3]
   32d8e:	e7c6      	b.n	32d1e <rx_demux+0x142>
   32d90:	200021b4 	.word	0x200021b4
   32d94:	200021bc 	.word	0x200021bc
   32d98:	0004a600 	.word	0x0004a600
   32d9c:	0004a500 	.word	0x0004a500
   32da0:	0004a4a0 	.word	0x0004a4a0
   32da4:	20000654 	.word	0x20000654
   32da8:	200021a8 	.word	0x200021a8
   32dac:	0004a66c 	.word	0x0004a66c

00032db0 <ll_rx_get>:
{
   32db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32db4:	b085      	sub	sp, #20
   32db6:	e9cd 0100 	strd	r0, r1, [sp]
   32dba:	4c63      	ldr	r4, [pc, #396]	; (32f48 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   32dbc:	4d63      	ldr	r5, [pc, #396]	; (32f4c <ll_rx_get+0x19c>)
   32dbe:	4e64      	ldr	r6, [pc, #400]	; (32f50 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   32dc0:	9a00      	ldr	r2, [sp, #0]
   32dc2:	2300      	movs	r3, #0
   32dc4:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   32dc6:	e9d6 0100 	ldrd	r0, r1, [r6]
   32dca:	aa03      	add	r2, sp, #12
   32dcc:	f7fc ff54 	bl	2fc78 <memq_peek>
	if (link) {
   32dd0:	4680      	mov	r8, r0
   32dd2:	2800      	cmp	r0, #0
   32dd4:	f000 809f 	beq.w	32f16 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32dd8:	9b03      	ldr	r3, [sp, #12]
   32dda:	495e      	ldr	r1, [pc, #376]	; (32f54 <ll_rx_get+0x1a4>)
   32ddc:	781a      	ldrb	r2, [r3, #0]
   32dde:	9801      	ldr	r0, [sp, #4]
   32de0:	f7ff fd9e 	bl	32920 <tx_cmplt_get>
		if (!cmplt) {
   32de4:	2800      	cmp	r0, #0
   32de6:	f040 809b 	bne.w	32f20 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   32dea:	78a3      	ldrb	r3, [r4, #2]
   32dec:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   32df0:	78e2      	ldrb	r2, [r4, #3]
   32df2:	4607      	mov	r7, r0
   32df4:	f10d 0109 	add.w	r1, sp, #9
   32df8:	f10d 000a 	add.w	r0, sp, #10
   32dfc:	f7ff fd90 	bl	32920 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   32e00:	ea47 0200 	orr.w	r2, r7, r0
   32e04:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   32e08:	d1f2      	bne.n	32df0 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   32e0a:	9b03      	ldr	r3, [sp, #12]
   32e0c:	7919      	ldrb	r1, [r3, #4]
   32e0e:	2901      	cmp	r1, #1
   32e10:	f040 8093 	bne.w	32f3a <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   32e14:	494e      	ldr	r1, [pc, #312]	; (32f50 <ll_rx_get+0x1a0>)
   32e16:	6870      	ldr	r0, [r6, #4]
   32e18:	f7fc ff36 	bl	2fc88 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   32e1c:	494e      	ldr	r1, [pc, #312]	; (32f58 <ll_rx_get+0x1a8>)
   32e1e:	4640      	mov	r0, r8
   32e20:	f7fc fed6 	bl	2fbd0 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32e24:	782b      	ldrb	r3, [r5, #0]
   32e26:	2b04      	cmp	r3, #4
   32e28:	d866      	bhi.n	32ef8 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   32e2a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   32e2c:	494b      	ldr	r1, [pc, #300]	; (32f5c <ll_rx_get+0x1ac>)
   32e2e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   32e30:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   32e32:	f7fc fecd 	bl	2fbd0 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32e36:	782b      	ldrb	r3, [r5, #0]
   32e38:	2b00      	cmp	r3, #0
   32e3a:	d0c1      	beq.n	32dc0 <ll_rx_get+0x10>
   32e3c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 32f60 <ll_rx_get+0x1b0>
	last = last + 1;
   32e40:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   32e44:	f898 2001 	ldrb.w	r2, [r8, #1]
   32e48:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   32e4c:	3701      	adds	r7, #1
   32e4e:	b2ff      	uxtb	r7, r7
		last = 0U;
   32e50:	42ba      	cmp	r2, r7
   32e52:	bf08      	it	eq
   32e54:	2700      	moveq	r7, #0
	if (last == first) {
   32e56:	429f      	cmp	r7, r3
   32e58:	d019      	beq.n	32e8e <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   32e5a:	483f      	ldr	r0, [pc, #252]	; (32f58 <ll_rx_get+0x1a8>)
   32e5c:	f7fc fe9e 	bl	2fb9c <mem_acquire>
		if (!link) {
   32e60:	4681      	mov	r9, r0
   32e62:	2800      	cmp	r0, #0
   32e64:	d0ac      	beq.n	32dc0 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   32e66:	483d      	ldr	r0, [pc, #244]	; (32f5c <ll_rx_get+0x1ac>)
   32e68:	f7fc fe98 	bl	2fb9c <mem_acquire>
		if (!rx) {
   32e6c:	2800      	cmp	r0, #0
   32e6e:	d05a      	beq.n	32f26 <ll_rx_get+0x176>
		rx->link = link;
   32e70:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32e74:	f898 2003 	ldrb.w	r2, [r8, #3]
   32e78:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32e7c:	fb02 8303 	mla	r3, r2, r3, r8
   32e80:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   32e82:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   32e84:	f888 7003 	strb.w	r7, [r8, #3]
   32e88:	3b01      	subs	r3, #1
   32e8a:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32e8c:	e798      	b.n	32dc0 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 32f64 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   32e92:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 32f58 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32e96:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   32e9a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 32f5c <ll_rx_get+0x1ac>
	if (last == count) {
   32e9e:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32ea2:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   32ea6:	3701      	adds	r7, #1
   32ea8:	b2ff      	uxtb	r7, r7
		last = 0U;
   32eaa:	42ba      	cmp	r2, r7
   32eac:	bf08      	it	eq
   32eae:	2700      	moveq	r7, #0
	if (last == first) {
   32eb0:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   32eb2:	4648      	mov	r0, r9
   32eb4:	d084      	beq.n	32dc0 <ll_rx_get+0x10>
   32eb6:	f7fc fe71 	bl	2fb9c <mem_acquire>
   32eba:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32ebc:	4650      	mov	r0, sl
		if (!link) {
   32ebe:	f1bb 0f00 	cmp.w	fp, #0
   32ec2:	f43f af7d 	beq.w	32dc0 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   32ec6:	f7fc fe69 	bl	2fb9c <mem_acquire>
		if (!rx) {
   32eca:	2800      	cmp	r0, #0
   32ecc:	d030      	beq.n	32f30 <ll_rx_get+0x180>
		link->mem = NULL;
   32ece:	2300      	movs	r3, #0
   32ed0:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   32ed4:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32ed8:	f898 2003 	ldrb.w	r2, [r8, #3]
   32edc:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32ee0:	fb02 8303 	mla	r3, r2, r3, r8
   32ee4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   32ee6:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   32ee8:	f888 7003 	strb.w	r7, [r8, #3]
   32eec:	3b01      	subs	r3, #1
   32eee:	b2db      	uxtb	r3, r3
   32ef0:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   32ef2:	2b00      	cmp	r3, #0
   32ef4:	d1d3      	bne.n	32e9e <ll_rx_get+0xee>
   32ef6:	e763      	b.n	32dc0 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32ef8:	4a1b      	ldr	r2, [pc, #108]	; (32f68 <ll_rx_get+0x1b8>)
   32efa:	491c      	ldr	r1, [pc, #112]	; (32f6c <ll_rx_get+0x1bc>)
   32efc:	481c      	ldr	r0, [pc, #112]	; (32f70 <ll_rx_get+0x1c0>)
   32efe:	f240 6306 	movw	r3, #1542	; 0x606
   32f02:	f00f ff05 	bl	42d10 <printk>
   32f06:	4040      	eors	r0, r0
   32f08:	f380 8811 	msr	BASEPRI, r0
   32f0c:	f04f 0003 	mov.w	r0, #3
   32f10:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   32f12:	782b      	ldrb	r3, [r5, #0]
   32f14:	e789      	b.n	32e2a <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   32f16:	78e2      	ldrb	r2, [r4, #3]
   32f18:	490e      	ldr	r1, [pc, #56]	; (32f54 <ll_rx_get+0x1a4>)
   32f1a:	9801      	ldr	r0, [sp, #4]
   32f1c:	f7ff fd00 	bl	32920 <tx_cmplt_get>
}
   32f20:	b005      	add	sp, #20
   32f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   32f26:	490c      	ldr	r1, [pc, #48]	; (32f58 <ll_rx_get+0x1a8>)
   32f28:	4648      	mov	r0, r9
   32f2a:	f7fc fe51 	bl	2fbd0 <mem_release>
			return;
   32f2e:	e747      	b.n	32dc0 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   32f30:	4909      	ldr	r1, [pc, #36]	; (32f58 <ll_rx_get+0x1a8>)
   32f32:	4658      	mov	r0, fp
   32f34:	f7fc fe4c 	bl	2fbd0 <mem_release>
			return;
   32f38:	e742      	b.n	32dc0 <ll_rx_get+0x10>
			*node_rx = rx;
   32f3a:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32f3c:	4610      	mov	r0, r2
			*node_rx = rx;
   32f3e:	600b      	str	r3, [r1, #0]
}
   32f40:	b005      	add	sp, #20
   32f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f46:	bf00      	nop
   32f48:	20000654 	.word	0x20000654
   32f4c:	20001f74 	.word	0x20001f74
   32f50:	200021a4 	.word	0x200021a4
   32f54:	20000656 	.word	0x20000656
   32f58:	20001f78 	.word	0x20001f78
   32f5c:	20001fc4 	.word	0x20001fc4
   32f60:	20000538 	.word	0x20000538
   32f64:	2000052c 	.word	0x2000052c
   32f68:	0004a600 	.word	0x0004a600
   32f6c:	0004a670 	.word	0x0004a670
   32f70:	0004a4a0 	.word	0x0004a4a0

00032f74 <ll_rx_dequeue>:
{
   32f74:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32f76:	495d      	ldr	r1, [pc, #372]	; (330ec <ll_rx_dequeue+0x178>)
{
   32f78:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   32f7a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32f7c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   32f7e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32f80:	aa01      	add	r2, sp, #4
   32f82:	f7fc fe81 	bl	2fc88 <memq_dequeue>
	LL_ASSERT(link);
   32f86:	4604      	mov	r4, r0
   32f88:	2800      	cmp	r0, #0
   32f8a:	d063      	beq.n	33054 <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
   32f8c:	4958      	ldr	r1, [pc, #352]	; (330f0 <ll_rx_dequeue+0x17c>)
   32f8e:	4620      	mov	r0, r4
   32f90:	f7fc fe1e 	bl	2fbd0 <mem_release>
	switch (rx->type) {
   32f94:	9a01      	ldr	r2, [sp, #4]
   32f96:	7913      	ldrb	r3, [r2, #4]
   32f98:	2b1c      	cmp	r3, #28
   32f9a:	d810      	bhi.n	32fbe <ll_rx_dequeue+0x4a>
   32f9c:	e8df f003 	tbb	[pc, r3]
   32fa0:	1e0f0f1e 	.word	0x1e0f0f1e
   32fa4:	0f0f0f0f 	.word	0x0f0f0f0f
   32fa8:	0f0f0f0f 	.word	0x0f0f0f0f
   32fac:	0f0f0f0f 	.word	0x0f0f0f0f
   32fb0:	0f0f0f0f 	.word	0x0f0f0f0f
   32fb4:	1e2f0f0f 	.word	0x1e2f0f0f
   32fb8:	1e1e1e1e 	.word	0x1e1e1e1e
   32fbc:	1e          	.byte	0x1e
   32fbd:	00          	.byte	0x00
		LL_ASSERT(0);
   32fbe:	4a4d      	ldr	r2, [pc, #308]	; (330f4 <ll_rx_dequeue+0x180>)
   32fc0:	494d      	ldr	r1, [pc, #308]	; (330f8 <ll_rx_dequeue+0x184>)
   32fc2:	484e      	ldr	r0, [pc, #312]	; (330fc <ll_rx_dequeue+0x188>)
   32fc4:	f240 43c7 	movw	r3, #1223	; 0x4c7
   32fc8:	f00f fea2 	bl	42d10 <printk>
   32fcc:	4040      	eors	r0, r0
   32fce:	f380 8811 	msr	BASEPRI, r0
   32fd2:	f04f 0003 	mov.w	r0, #3
   32fd6:	df02      	svc	2
}
   32fd8:	b002      	add	sp, #8
   32fda:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   32fdc:	2b00      	cmp	r3, #0
   32fde:	d1fb      	bne.n	32fd8 <ll_rx_dequeue+0x64>
   32fe0:	4a44      	ldr	r2, [pc, #272]	; (330f4 <ll_rx_dequeue+0x180>)
   32fe2:	4947      	ldr	r1, [pc, #284]	; (33100 <ll_rx_dequeue+0x18c>)
   32fe4:	4845      	ldr	r0, [pc, #276]	; (330fc <ll_rx_dequeue+0x188>)
   32fe6:	f240 43c3 	movw	r3, #1219	; 0x4c3
   32fea:	f00f fe91 	bl	42d10 <printk>
   32fee:	4040      	eors	r0, r0
   32ff0:	f380 8811 	msr	BASEPRI, r0
   32ff4:	f04f 0003 	mov.w	r0, #3
   32ff8:	df02      	svc	2
}
   32ffa:	b002      	add	sp, #8
   32ffc:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   32ffe:	7f13      	ldrb	r3, [r2, #28]
   33000:	2b3c      	cmp	r3, #60	; 0x3c
   33002:	d035      	beq.n	33070 <ll_rx_dequeue+0xfc>
   33004:	7f53      	ldrb	r3, [r2, #29]
   33006:	b1bb      	cbz	r3, 33038 <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
   33008:	6893      	ldr	r3, [r2, #8]
   3300a:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   3300c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   3300e:	b120      	cbz	r0, 3301a <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   33010:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   33012:	493c      	ldr	r1, [pc, #240]	; (33104 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   33014:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   33016:	f7fc fddb 	bl	2fbd0 <mem_release>
			adv->is_enabled = 0U;
   3301a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3301e:	f36f 0300 	bfc	r3, #0, #1
   33022:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
   33026:	2000      	movs	r0, #0
   33028:	f001 fa5c 	bl	344e4 <ull_adv_is_enabled>
			if (!bm) {
   3302c:	2800      	cmp	r0, #0
   3302e:	d1d3      	bne.n	32fd8 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   33030:	f006 fe82 	bl	39d38 <ull_filter_adv_scan_state_cb>
}
   33034:	b002      	add	sp, #8
   33036:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   33038:	4a2e      	ldr	r2, [pc, #184]	; (330f4 <ll_rx_dequeue+0x180>)
   3303a:	492f      	ldr	r1, [pc, #188]	; (330f8 <ll_rx_dequeue+0x184>)
   3303c:	482f      	ldr	r0, [pc, #188]	; (330fc <ll_rx_dequeue+0x188>)
   3303e:	f240 4354 	movw	r3, #1108	; 0x454
   33042:	f00f fe65 	bl	42d10 <printk>
   33046:	4040      	eors	r0, r0
   33048:	f380 8811 	msr	BASEPRI, r0
   3304c:	f04f 0003 	mov.w	r0, #3
   33050:	df02      	svc	2
   33052:	e7e8      	b.n	33026 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   33054:	4a27      	ldr	r2, [pc, #156]	; (330f4 <ll_rx_dequeue+0x180>)
   33056:	492c      	ldr	r1, [pc, #176]	; (33108 <ll_rx_dequeue+0x194>)
   33058:	4828      	ldr	r0, [pc, #160]	; (330fc <ll_rx_dequeue+0x188>)
   3305a:	f240 33a1 	movw	r3, #929	; 0x3a1
   3305e:	f00f fe57 	bl	42d10 <printk>
   33062:	4040      	eors	r0, r0
   33064:	f380 8811 	msr	BASEPRI, r0
   33068:	f04f 0003 	mov.w	r0, #3
   3306c:	df02      	svc	2
   3306e:	e78d      	b.n	32f8c <ll_rx_dequeue+0x18>
			lll = ftr->param;
   33070:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   33072:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   33076:	b1ed      	cbz	r5, 330b4 <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
   33078:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   3307a:	2200      	movs	r2, #0
   3307c:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   3307e:	b163      	cbz	r3, 3309a <ll_rx_dequeue+0x126>
   33080:	4a1c      	ldr	r2, [pc, #112]	; (330f4 <ll_rx_dequeue+0x180>)
   33082:	4922      	ldr	r1, [pc, #136]	; (3310c <ll_rx_dequeue+0x198>)
   33084:	481d      	ldr	r0, [pc, #116]	; (330fc <ll_rx_dequeue+0x188>)
   33086:	f240 431a 	movw	r3, #1050	; 0x41a
   3308a:	f00f fe41 	bl	42d10 <printk>
   3308e:	4040      	eors	r0, r0
   33090:	f380 8811 	msr	BASEPRI, r0
   33094:	f04f 0003 	mov.w	r0, #3
   33098:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   3309a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   3309e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   330a2:	f7fc fdd5 	bl	2fc50 <memq_deinit>
				LL_ASSERT(link);
   330a6:	4606      	mov	r6, r0
   330a8:	b190      	cbz	r0, 330d0 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
   330aa:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   330ac:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   330ae:	f002 f929 	bl	35304 <ll_conn_release>
   330b2:	e7b2      	b.n	3301a <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   330b4:	4a0f      	ldr	r2, [pc, #60]	; (330f4 <ll_rx_dequeue+0x180>)
   330b6:	4916      	ldr	r1, [pc, #88]	; (33110 <ll_rx_dequeue+0x19c>)
   330b8:	4810      	ldr	r0, [pc, #64]	; (330fc <ll_rx_dequeue+0x188>)
   330ba:	f240 4317 	movw	r3, #1047	; 0x417
   330be:	f00f fe27 	bl	42d10 <printk>
   330c2:	4040      	eors	r0, r0
   330c4:	f380 8811 	msr	BASEPRI, r0
   330c8:	f04f 0003 	mov.w	r0, #3
   330cc:	df02      	svc	2
   330ce:	e7d3      	b.n	33078 <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
   330d0:	4a08      	ldr	r2, [pc, #32]	; (330f4 <ll_rx_dequeue+0x180>)
   330d2:	490d      	ldr	r1, [pc, #52]	; (33108 <ll_rx_dequeue+0x194>)
   330d4:	4809      	ldr	r0, [pc, #36]	; (330fc <ll_rx_dequeue+0x188>)
   330d6:	f240 431d 	movw	r3, #1053	; 0x41d
   330da:	f00f fe19 	bl	42d10 <printk>
   330de:	4040      	eors	r0, r0
   330e0:	f380 8811 	msr	BASEPRI, r0
   330e4:	f04f 0003 	mov.w	r0, #3
   330e8:	df02      	svc	2
   330ea:	e7de      	b.n	330aa <ll_rx_dequeue+0x136>
   330ec:	200021a4 	.word	0x200021a4
   330f0:	20001f78 	.word	0x20001f78
   330f4:	0004a600 	.word	0x0004a600
   330f8:	0004a500 	.word	0x0004a500
   330fc:	0004a4a0 	.word	0x0004a4a0
   33100:	0004a6d0 	.word	0x0004a6d0
   33104:	20001fc4 	.word	0x20001fc4
   33108:	0004a96c 	.word	0x0004a96c
   3310c:	0004a6b8 	.word	0x0004a6b8
   33110:	0004a6ac 	.word	0x0004a6ac

00033114 <ll_rx_mem_release>:
{
   33114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   33118:	6804      	ldr	r4, [r0, #0]
{
   3311a:	4680      	mov	r8, r0
	while (rx) {
   3311c:	b344      	cbz	r4, 33170 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   3311e:	4f56      	ldr	r7, [pc, #344]	; (33278 <ll_rx_mem_release+0x164>)
   33120:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3327c <ll_rx_mem_release+0x168>
   33124:	4e56      	ldr	r6, [pc, #344]	; (33280 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
   33126:	4625      	mov	r5, r4
   33128:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   3312a:	792b      	ldrb	r3, [r5, #4]
   3312c:	2b1c      	cmp	r3, #28
   3312e:	d810      	bhi.n	33152 <ll_rx_mem_release+0x3e>
   33130:	e8df f003 	tbb	[pc, r3]
   33134:	380f0f38 	.word	0x380f0f38
   33138:	0f0f0f0f 	.word	0x0f0f0f0f
   3313c:	0f0f0f0f 	.word	0x0f0f0f0f
   33140:	0f0f0f0f 	.word	0x0f0f0f0f
   33144:	0f0f0f0f 	.word	0x0f0f0f0f
   33148:	56260f0f 	.word	0x56260f0f
   3314c:	38383838 	.word	0x38383838
   33150:	38          	.byte	0x38
   33151:	00          	.byte	0x00
			LL_ASSERT(0);
   33152:	f240 53fa 	movw	r3, #1530	; 0x5fa
   33156:	463a      	mov	r2, r7
   33158:	4649      	mov	r1, r9
   3315a:	4630      	mov	r0, r6
   3315c:	f00f fdd8 	bl	42d10 <printk>
   33160:	4040      	eors	r0, r0
   33162:	f380 8811 	msr	BASEPRI, r0
   33166:	f04f 0003 	mov.w	r0, #3
   3316a:	df02      	svc	2
	while (rx) {
   3316c:	2c00      	cmp	r4, #0
   3316e:	d1da      	bne.n	33126 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   33170:	2300      	movs	r3, #0
   33172:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   33176:	20ff      	movs	r0, #255	; 0xff
}
   33178:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   3317c:	f7ff bcba 	b.w	32af4 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   33180:	7f2b      	ldrb	r3, [r5, #28]
   33182:	2b3c      	cmp	r3, #60	; 0x3c
   33184:	d062      	beq.n	3324c <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   33186:	b1db      	cbz	r3, 331c0 <ll_rx_mem_release+0xac>
   33188:	493e      	ldr	r1, [pc, #248]	; (33284 <ll_rx_mem_release+0x170>)
   3318a:	f240 532b 	movw	r3, #1323	; 0x52b
   3318e:	463a      	mov	r2, r7
   33190:	4630      	mov	r0, r6
   33192:	f00f fdbd 	bl	42d10 <printk>
   33196:	4040      	eors	r0, r0
   33198:	f380 8811 	msr	BASEPRI, r0
   3319c:	f04f 0003 	mov.w	r0, #3
   331a0:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   331a2:	792b      	ldrb	r3, [r5, #4]
   331a4:	b963      	cbnz	r3, 331c0 <ll_rx_mem_release+0xac>
   331a6:	4938      	ldr	r1, [pc, #224]	; (33288 <ll_rx_mem_release+0x174>)
   331a8:	f240 537d 	movw	r3, #1405	; 0x57d
   331ac:	463a      	mov	r2, r7
   331ae:	4630      	mov	r0, r6
   331b0:	f00f fdae 	bl	42d10 <printk>
   331b4:	4040      	eors	r0, r0
   331b6:	f380 8811 	msr	BASEPRI, r0
   331ba:	f04f 0003 	mov.w	r0, #3
   331be:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   331c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3328c <ll_rx_mem_release+0x178>
   331c4:	f89a 3000 	ldrb.w	r3, [sl]
   331c8:	2b04      	cmp	r3, #4
   331ca:	d82f      	bhi.n	3322c <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   331cc:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   331ce:	4930      	ldr	r1, [pc, #192]	; (33290 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
   331d0:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   331d4:	4628      	mov	r0, r5
   331d6:	f7fc fcfb 	bl	2fbd0 <mem_release>
	while (rx) {
   331da:	2c00      	cmp	r4, #0
   331dc:	d1a3      	bne.n	33126 <ll_rx_mem_release+0x12>
   331de:	e7c7      	b.n	33170 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   331e0:	88e8      	ldrh	r0, [r5, #6]
   331e2:	2800      	cmp	r0, #0
   331e4:	d1c2      	bne.n	3316c <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   331e6:	f002 f89b 	bl	35320 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   331ea:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   331ec:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   331ee:	b163      	cbz	r3, 3320a <ll_rx_mem_release+0xf6>
   331f0:	4928      	ldr	r1, [pc, #160]	; (33294 <ll_rx_mem_release+0x180>)
   331f2:	f240 53ec 	movw	r3, #1516	; 0x5ec
   331f6:	463a      	mov	r2, r7
   331f8:	4630      	mov	r0, r6
   331fa:	f00f fd89 	bl	42d10 <printk>
   331fe:	4040      	eors	r0, r0
   33200:	f380 8811 	msr	BASEPRI, r0
   33204:	f04f 0003 	mov.w	r0, #3
   33208:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   3320a:	f105 0168 	add.w	r1, r5, #104	; 0x68
   3320e:	f105 0064 	add.w	r0, r5, #100	; 0x64
   33212:	f7fc fd1d 	bl	2fc50 <memq_deinit>
				LL_ASSERT(link);
   33216:	4682      	mov	sl, r0
   33218:	b300      	cbz	r0, 3325c <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
   3321a:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   3321e:	4628      	mov	r0, r5
   33220:	f002 f870 	bl	35304 <ll_conn_release>
	while (rx) {
   33224:	2c00      	cmp	r4, #0
   33226:	f47f af7e 	bne.w	33126 <ll_rx_mem_release+0x12>
   3322a:	e7a1      	b.n	33170 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   3322c:	491a      	ldr	r1, [pc, #104]	; (33298 <ll_rx_mem_release+0x184>)
   3322e:	f240 6306 	movw	r3, #1542	; 0x606
   33232:	463a      	mov	r2, r7
   33234:	4630      	mov	r0, r6
   33236:	f00f fd6b 	bl	42d10 <printk>
   3323a:	4040      	eors	r0, r0
   3323c:	f380 8811 	msr	BASEPRI, r0
   33240:	f04f 0003 	mov.w	r0, #3
   33244:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   33246:	f89a 3000 	ldrb.w	r3, [sl]
   3324a:	e7bf      	b.n	331cc <ll_rx_mem_release+0xb8>
				mem_release(rx_free, &mem_pdu_rx.free);
   3324c:	4910      	ldr	r1, [pc, #64]	; (33290 <ll_rx_mem_release+0x17c>)
   3324e:	4628      	mov	r0, r5
   33250:	f7fc fcbe 	bl	2fbd0 <mem_release>
	while (rx) {
   33254:	2c00      	cmp	r4, #0
   33256:	f47f af66 	bne.w	33126 <ll_rx_mem_release+0x12>
   3325a:	e789      	b.n	33170 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   3325c:	490f      	ldr	r1, [pc, #60]	; (3329c <ll_rx_mem_release+0x188>)
   3325e:	f240 53ef 	movw	r3, #1519	; 0x5ef
   33262:	463a      	mov	r2, r7
   33264:	4630      	mov	r0, r6
   33266:	f00f fd53 	bl	42d10 <printk>
   3326a:	4040      	eors	r0, r0
   3326c:	f380 8811 	msr	BASEPRI, r0
   33270:	f04f 0003 	mov.w	r0, #3
   33274:	df02      	svc	2
   33276:	e7d0      	b.n	3321a <ll_rx_mem_release+0x106>
   33278:	0004a600 	.word	0x0004a600
   3327c:	0004a500 	.word	0x0004a500
   33280:	0004a4a0 	.word	0x0004a4a0
   33284:	0004a6f0 	.word	0x0004a6f0
   33288:	0004a6fc 	.word	0x0004a6fc
   3328c:	20001f74 	.word	0x20001f74
   33290:	20001fc4 	.word	0x20001fc4
   33294:	0004a720 	.word	0x0004a720
   33298:	0004a670 	.word	0x0004a670
   3329c:	0004a96c 	.word	0x0004a96c

000332a0 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   332a0:	4801      	ldr	r0, [pc, #4]	; (332a8 <ll_rx_link_alloc+0x8>)
   332a2:	f7fc bc7b 	b.w	2fb9c <mem_acquire>
   332a6:	bf00      	nop
   332a8:	20001f78 	.word	0x20001f78

000332ac <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   332ac:	4901      	ldr	r1, [pc, #4]	; (332b4 <ll_rx_link_release+0x8>)
   332ae:	f7fc bc8f 	b.w	2fbd0 <mem_release>
   332b2:	bf00      	nop
   332b4:	20001f78 	.word	0x20001f78

000332b8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   332b8:	4801      	ldr	r0, [pc, #4]	; (332c0 <ll_rx_alloc+0x8>)
   332ba:	f7fc bc6f 	b.w	2fb9c <mem_acquire>
   332be:	bf00      	nop
   332c0:	20001fc4 	.word	0x20001fc4

000332c4 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   332c4:	4901      	ldr	r1, [pc, #4]	; (332cc <ll_rx_release+0x8>)
   332c6:	f7fc bc83 	b.w	2fbd0 <mem_release>
   332ca:	bf00      	nop
   332cc:	20001fc4 	.word	0x20001fc4

000332d0 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   332d0:	4b02      	ldr	r3, [pc, #8]	; (332dc <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   332d2:	4a03      	ldr	r2, [pc, #12]	; (332e0 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   332d4:	78db      	ldrb	r3, [r3, #3]
   332d6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   332d8:	f7fc bcc4 	b.w	2fc64 <memq_enqueue>
   332dc:	20000654 	.word	0x20000654
   332e0:	200021a8 	.word	0x200021a8

000332e4 <ll_rx_sched>:
	k_sem_give(sem_recv);
   332e4:	4b01      	ldr	r3, [pc, #4]	; (332ec <ll_rx_sched+0x8>)
   332e6:	6818      	ldr	r0, [r3, #0]
   332e8:	f00e bb18 	b.w	4191c <z_impl_k_sem_give>
   332ec:	200021bc 	.word	0x200021bc

000332f0 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   332f0:	4b0d      	ldr	r3, [pc, #52]	; (33328 <ll_pdu_rx_alloc_peek+0x38>)
   332f2:	7899      	ldrb	r1, [r3, #2]
   332f4:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   332f6:	4291      	cmp	r1, r2
   332f8:	d80a      	bhi.n	33310 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   332fa:	eba2 0c01 	sub.w	ip, r2, r1
   332fe:	fa5f fc8c 	uxtb.w	ip, ip
   33302:	4560      	cmp	r0, ip
   33304:	d802      	bhi.n	3330c <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   33306:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   33308:	7818      	ldrb	r0, [r3, #0]
   3330a:	d109      	bne.n	33320 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   3330c:	2000      	movs	r0, #0
}
   3330e:	4770      	bx	lr
		return count - first + last;
   33310:	f893 c001 	ldrb.w	ip, [r3, #1]
   33314:	4462      	add	r2, ip
   33316:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   33318:	b2d2      	uxtb	r2, r2
   3331a:	4290      	cmp	r0, r2
   3331c:	d8f6      	bhi.n	3330c <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   3331e:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   33320:	fb01 3300 	mla	r3, r1, r0, r3
   33324:	6858      	ldr	r0, [r3, #4]
   33326:	4770      	bx	lr
   33328:	2000052c 	.word	0x2000052c

0003332c <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   3332c:	4b09      	ldr	r3, [pc, #36]	; (33354 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   3332e:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   33330:	78da      	ldrb	r2, [r3, #3]
   33332:	7818      	ldrb	r0, [r3, #0]
   33334:	f893 c001 	ldrb.w	ip, [r3, #1]
   33338:	428a      	cmp	r2, r1
   3333a:	d009      	beq.n	33350 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   3333c:	1c4a      	adds	r2, r1, #1
   3333e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   33340:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   33344:	4594      	cmp	ip, r2
   33346:	bf08      	it	eq
   33348:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3334a:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   3334c:	709a      	strb	r2, [r3, #2]

	return mem;
   3334e:	4770      	bx	lr
		return NULL;
   33350:	2000      	movs	r0, #0
}
   33352:	4770      	bx	lr
   33354:	2000052c 	.word	0x2000052c

00033358 <ll_tx_ack_put>:
{
   33358:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   3335a:	4a15      	ldr	r2, [pc, #84]	; (333b0 <ll_tx_ack_put+0x58>)
   3335c:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   33360:	7854      	ldrb	r4, [r2, #1]
   33362:	f892 e002 	ldrb.w	lr, [r2, #2]
   33366:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   33368:	f10c 0301 	add.w	r3, ip, #1
   3336c:	b2db      	uxtb	r3, r3
		last = 0U;
   3336e:	429c      	cmp	r4, r3
   33370:	bf08      	it	eq
   33372:	2300      	moveq	r3, #0
	if (last == first) {
   33374:	459e      	cmp	lr, r3
   33376:	d00a      	beq.n	3338e <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   33378:	fb1c fc05 	smulbb	ip, ip, r5
   3337c:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   33380:	f82e 000c 	strh.w	r0, [lr, ip]
   33384:	44f4      	add	ip, lr
	tx->node = node_tx;
   33386:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3338a:	70d3      	strb	r3, [r2, #3]
}
   3338c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   3338e:	4a09      	ldr	r2, [pc, #36]	; (333b4 <ll_tx_ack_put+0x5c>)
   33390:	4909      	ldr	r1, [pc, #36]	; (333b8 <ll_tx_ack_put+0x60>)
   33392:	480a      	ldr	r0, [pc, #40]	; (333bc <ll_tx_ack_put+0x64>)
   33394:	f240 634e 	movw	r3, #1614	; 0x64e
   33398:	f00f fcba 	bl	42d10 <printk>
   3339c:	4040      	eors	r0, r0
   3339e:	f380 8811 	msr	BASEPRI, r0
   333a2:	f04f 0003 	mov.w	r0, #3
   333a6:	df02      	svc	2
	tx->handle = handle;
   333a8:	2300      	movs	r3, #0
   333aa:	801b      	strh	r3, [r3, #0]
   333ac:	deff      	udf	#255	; 0xff
   333ae:	bf00      	nop
   333b0:	20000654 	.word	0x20000654
   333b4:	0004a600 	.word	0x0004a600
   333b8:	0004a960 	.word	0x0004a960
   333bc:	0004a4a0 	.word	0x0004a4a0

000333c0 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   333c0:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   333c2:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   333c4:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   333c6:	700b      	strb	r3, [r1, #0]
}
   333c8:	4770      	bx	lr
   333ca:	bf00      	nop

000333cc <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   333cc:	2200      	movs	r2, #0
{
   333ce:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   333d0:	4611      	mov	r1, r2
   333d2:	4b0a      	ldr	r3, [pc, #40]	; (333fc <ll_radio_state_abort+0x30>)
   333d4:	2001      	movs	r0, #1
   333d6:	f7fc fcb9 	bl	2fd4c <mayfly_enqueue>
	LL_ASSERT(!ret);
   333da:	b900      	cbnz	r0, 333de <ll_radio_state_abort+0x12>
}
   333dc:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   333de:	4a08      	ldr	r2, [pc, #32]	; (33400 <ll_radio_state_abort+0x34>)
   333e0:	4908      	ldr	r1, [pc, #32]	; (33404 <ll_radio_state_abort+0x38>)
   333e2:	4809      	ldr	r0, [pc, #36]	; (33408 <ll_radio_state_abort+0x3c>)
   333e4:	f240 6366 	movw	r3, #1638	; 0x666
   333e8:	f00f fc92 	bl	42d10 <printk>
   333ec:	4040      	eors	r0, r0
   333ee:	f380 8811 	msr	BASEPRI, r0
   333f2:	f04f 0003 	mov.w	r0, #3
   333f6:	df02      	svc	2
}
   333f8:	bd08      	pop	{r3, pc}
   333fa:	bf00      	nop
   333fc:	200006c8 	.word	0x200006c8
   33400:	0004a600 	.word	0x0004a600
   33404:	0004a738 	.word	0x0004a738
   33408:	0004a4a0 	.word	0x0004a4a0

0003340c <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3340c:	f030 0302 	bics.w	r3, r0, #2
{
   33410:	b510      	push	{r4, lr}
   33412:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   33414:	d002      	beq.n	3341c <ull_ticker_status_take+0x10>
   33416:	680b      	ldr	r3, [r1, #0]
   33418:	2b02      	cmp	r3, #2
   3341a:	d008      	beq.n	3342e <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   3341c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33424:	4809      	ldr	r0, [pc, #36]	; (3344c <ull_ticker_status_take+0x40>)
   33426:	f00e fa9f 	bl	41968 <z_impl_k_sem_take>
	return *ret_cb;
   3342a:	6820      	ldr	r0, [r4, #0]
}
   3342c:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3342e:	4a08      	ldr	r2, [pc, #32]	; (33450 <ull_ticker_status_take+0x44>)
   33430:	4908      	ldr	r1, [pc, #32]	; (33454 <ull_ticker_status_take+0x48>)
   33432:	4809      	ldr	r0, [pc, #36]	; (33458 <ull_ticker_status_take+0x4c>)
   33434:	f240 6382 	movw	r3, #1666	; 0x682
   33438:	f00f fc6a 	bl	42d10 <printk>
   3343c:	4040      	eors	r0, r0
   3343e:	f380 8811 	msr	BASEPRI, r0
   33442:	f04f 0003 	mov.w	r0, #3
   33446:	df02      	svc	2
   33448:	e7e8      	b.n	3341c <ull_ticker_status_take+0x10>
   3344a:	bf00      	nop
   3344c:	200021c0 	.word	0x200021c0
   33450:	0004a600 	.word	0x0004a600
   33454:	0004a740 	.word	0x0004a740
   33458:	0004a4a0 	.word	0x0004a4a0

0003345c <ull_disable_mark>:
	if (!*m) {
   3345c:	4a03      	ldr	r2, [pc, #12]	; (3346c <ull_disable_mark+0x10>)
{
   3345e:	4603      	mov	r3, r0
	if (!*m) {
   33460:	6810      	ldr	r0, [r2, #0]
   33462:	b100      	cbz	r0, 33466 <ull_disable_mark+0xa>
}
   33464:	4770      	bx	lr
		*m = param;
   33466:	6013      	str	r3, [r2, #0]
   33468:	4618      	mov	r0, r3
}
   3346a:	4770      	bx	lr
   3346c:	20001f40 	.word	0x20001f40

00033470 <ull_disable_unmark>:
	if (*m && *m == param) {
   33470:	4a04      	ldr	r2, [pc, #16]	; (33484 <ull_disable_unmark+0x14>)
   33472:	6813      	ldr	r3, [r2, #0]
   33474:	b123      	cbz	r3, 33480 <ull_disable_unmark+0x10>
   33476:	4298      	cmp	r0, r3
		*m = NULL;
   33478:	bf06      	itte	eq
   3347a:	2100      	moveq	r1, #0
   3347c:	6011      	streq	r1, [r2, #0]
	return NULL;
   3347e:	2300      	movne	r3, #0
}
   33480:	4618      	mov	r0, r3
   33482:	4770      	bx	lr
   33484:	20001f40 	.word	0x20001f40

00033488 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   33488:	4b01      	ldr	r3, [pc, #4]	; (33490 <ull_disable_mark_get+0x8>)
}
   3348a:	6818      	ldr	r0, [r3, #0]
   3348c:	4770      	bx	lr
   3348e:	bf00      	nop
   33490:	20001f40 	.word	0x20001f40

00033494 <ull_update_mark>:
	if (!*m) {
   33494:	4a03      	ldr	r2, [pc, #12]	; (334a4 <ull_update_mark+0x10>)
{
   33496:	4603      	mov	r3, r0
	if (!*m) {
   33498:	6810      	ldr	r0, [r2, #0]
   3349a:	b100      	cbz	r0, 3349e <ull_update_mark+0xa>
}
   3349c:	4770      	bx	lr
		*m = param;
   3349e:	6013      	str	r3, [r2, #0]
   334a0:	4618      	mov	r0, r3
}
   334a2:	4770      	bx	lr
   334a4:	20001f44 	.word	0x20001f44

000334a8 <ull_update_unmark>:
	if (*m && *m == param) {
   334a8:	4a04      	ldr	r2, [pc, #16]	; (334bc <ull_update_unmark+0x14>)
   334aa:	6813      	ldr	r3, [r2, #0]
   334ac:	b123      	cbz	r3, 334b8 <ull_update_unmark+0x10>
   334ae:	4298      	cmp	r0, r3
		*m = NULL;
   334b0:	bf06      	itte	eq
   334b2:	2100      	moveq	r1, #0
   334b4:	6011      	streq	r1, [r2, #0]
	return NULL;
   334b6:	2300      	movne	r3, #0
}
   334b8:	4618      	mov	r0, r3
   334ba:	4770      	bx	lr
   334bc:	20001f44 	.word	0x20001f44

000334c0 <ull_update_mark_get>:
	return mark_get(mark_update);
   334c0:	4b01      	ldr	r3, [pc, #4]	; (334c8 <ull_update_mark_get+0x8>)
}
   334c2:	6818      	ldr	r0, [r3, #0]
   334c4:	4770      	bx	lr
   334c6:	bf00      	nop
   334c8:	20001f44 	.word	0x20001f44

000334cc <ull_disable>:
{
   334cc:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   334ce:	6805      	ldr	r5, [r0, #0]
   334d0:	782b      	ldrb	r3, [r5, #0]
{
   334d2:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   334d4:	b353      	cbz	r3, 3352c <ull_disable+0x60>
	compiler_barrier();
   334d6:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   334d8:	2201      	movs	r2, #1
   334da:	2100      	movs	r1, #0
   334dc:	4668      	mov	r0, sp
   334de:	f015 fce1 	bl	48ea4 <z_impl_k_sem_init>
   334e2:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   334e4:	4a13      	ldr	r2, [pc, #76]	; (33534 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   334e6:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   334ea:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   334ec:	b1f3      	cbz	r3, 3352c <ull_disable+0x60>
	mfy.param = lll;
   334ee:	4b12      	ldr	r3, [pc, #72]	; (33538 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   334f0:	2200      	movs	r2, #0
   334f2:	4611      	mov	r1, r2
   334f4:	2003      	movs	r0, #3
	mfy.param = lll;
   334f6:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   334f8:	f7fc fc28 	bl	2fd4c <mayfly_enqueue>
	LL_ASSERT(!ret);
   334fc:	b940      	cbnz	r0, 33510 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   334fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33506:	4668      	mov	r0, sp
   33508:	f00e fa2e 	bl	41968 <z_impl_k_sem_take>
}
   3350c:	b007      	add	sp, #28
   3350e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   33510:	4a0a      	ldr	r2, [pc, #40]	; (3353c <ull_disable+0x70>)
   33512:	490b      	ldr	r1, [pc, #44]	; (33540 <ull_disable+0x74>)
   33514:	480b      	ldr	r0, [pc, #44]	; (33544 <ull_disable+0x78>)
   33516:	f240 63ff 	movw	r3, #1791	; 0x6ff
   3351a:	f00f fbf9 	bl	42d10 <printk>
   3351e:	4040      	eors	r0, r0
   33520:	f380 8811 	msr	BASEPRI, r0
   33524:	f04f 0003 	mov.w	r0, #3
   33528:	df02      	svc	2
   3352a:	e7e8      	b.n	334fe <ull_disable+0x32>
		return -EALREADY;
   3352c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   33530:	e7ec      	b.n	3350c <ull_disable+0x40>
   33532:	bf00      	nop
   33534:	0003291d 	.word	0x0003291d
   33538:	200006b8 	.word	0x200006b8
   3353c:	0004a600 	.word	0x0004a600
   33540:	0004a738 	.word	0x0004a738
   33544:	0004a4a0 	.word	0x0004a4a0

00033548 <ull_ticker_stop_with_mark>:
{
   33548:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   3354a:	4e20      	ldr	r6, [pc, #128]	; (335cc <ull_ticker_stop_with_mark+0x84>)
   3354c:	6833      	ldr	r3, [r6, #0]
{
   3354e:	b085      	sub	sp, #20
   33550:	460c      	mov	r4, r1
   33552:	4617      	mov	r7, r2
	if (!*m) {
   33554:	b353      	cbz	r3, 335ac <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   33556:	4299      	cmp	r1, r3
   33558:	d113      	bne.n	33582 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3355a:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   3355c:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3355e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   33560:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33562:	9500      	str	r5, [sp, #0]
   33564:	4b1a      	ldr	r3, [pc, #104]	; (335d0 <ull_ticker_stop_with_mark+0x88>)
   33566:	2103      	movs	r1, #3
   33568:	2000      	movs	r0, #0
   3356a:	f7fd fdbb 	bl	310e4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   3356e:	4629      	mov	r1, r5
   33570:	f7ff ff4c 	bl	3340c <ull_ticker_status_take>
	if (ret) {
   33574:	4605      	mov	r5, r0
   33576:	b140      	cbz	r0, 3358a <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   33578:	6833      	ldr	r3, [r6, #0]
   3357a:	b10b      	cbz	r3, 33580 <ull_ticker_stop_with_mark+0x38>
   3357c:	429c      	cmp	r4, r3
   3357e:	d017      	beq.n	335b0 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   33580:	b304      	cbz	r4, 335c4 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   33582:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   33586:	b005      	add	sp, #20
   33588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   3358a:	4638      	mov	r0, r7
   3358c:	f7ff ff9e 	bl	334cc <ull_disable>
	if (*m && *m == param) {
   33590:	6833      	ldr	r3, [r6, #0]
   33592:	b10b      	cbz	r3, 33598 <ull_ticker_stop_with_mark+0x50>
   33594:	429c      	cmp	r4, r3
   33596:	d011      	beq.n	335bc <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   33598:	2c00      	cmp	r4, #0
   3359a:	d1f2      	bne.n	33582 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   3359c:	2800      	cmp	r0, #0
   3359e:	d0f2      	beq.n	33586 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   335a0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   335a4:	bf08      	it	eq
   335a6:	2000      	moveq	r0, #0
}
   335a8:	b005      	add	sp, #20
   335aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   335ac:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   335ae:	e7d4      	b.n	3355a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   335b0:	2300      	movs	r3, #0
		return -EALREADY;
   335b2:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   335b6:	6033      	str	r3, [r6, #0]
}
   335b8:	b005      	add	sp, #20
   335ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   335bc:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   335be:	2800      	cmp	r0, #0
   335c0:	d0e1      	beq.n	33586 <ull_ticker_stop_with_mark+0x3e>
   335c2:	e7ed      	b.n	335a0 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   335c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   335c8:	e7dd      	b.n	33586 <ull_ticker_stop_with_mark+0x3e>
   335ca:	bf00      	nop
   335cc:	20001f40 	.word	0x20001f40
   335d0:	00032911 	.word	0x00032911

000335d4 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   335d4:	4b0d      	ldr	r3, [pc, #52]	; (3360c <ull_pdu_rx_alloc_peek+0x38>)
   335d6:	7899      	ldrb	r1, [r3, #2]
   335d8:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   335da:	4291      	cmp	r1, r2
   335dc:	d80a      	bhi.n	335f4 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   335de:	eba2 0c01 	sub.w	ip, r2, r1
   335e2:	fa5f fc8c 	uxtb.w	ip, ip
   335e6:	4560      	cmp	r0, ip
   335e8:	d802      	bhi.n	335f0 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   335ea:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   335ec:	7818      	ldrb	r0, [r3, #0]
   335ee:	d109      	bne.n	33604 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   335f0:	2000      	movs	r0, #0
}
   335f2:	4770      	bx	lr
		return count - first + last;
   335f4:	f893 c001 	ldrb.w	ip, [r3, #1]
   335f8:	4462      	add	r2, ip
   335fa:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   335fc:	b2d2      	uxtb	r2, r2
   335fe:	4290      	cmp	r0, r2
   33600:	d8f6      	bhi.n	335f0 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   33602:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   33604:	fb01 3300 	mla	r3, r1, r0, r3
   33608:	6858      	ldr	r0, [r3, #4]
   3360a:	4770      	bx	lr
   3360c:	20000538 	.word	0x20000538

00033610 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   33610:	4b09      	ldr	r3, [pc, #36]	; (33638 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   33612:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   33614:	78da      	ldrb	r2, [r3, #3]
   33616:	7818      	ldrb	r0, [r3, #0]
   33618:	f893 c001 	ldrb.w	ip, [r3, #1]
   3361c:	428a      	cmp	r2, r1
   3361e:	d009      	beq.n	33634 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   33620:	1c4a      	adds	r2, r1, #1
   33622:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   33624:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   33628:	4594      	cmp	ip, r2
   3362a:	bf08      	it	eq
   3362c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3362e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   33630:	709a      	strb	r2, [r3, #2]
	return mem;
   33632:	4770      	bx	lr
		return NULL;
   33634:	2000      	movs	r0, #0
}
   33636:	4770      	bx	lr
   33638:	20000538 	.word	0x20000538

0003363c <ull_rx_put>:
{
   3363c:	b538      	push	{r3, r4, r5, lr}
   3363e:	460c      	mov	r4, r1
   33640:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   33642:	f005 fb5f 	bl	38d04 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   33646:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   33648:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   3364a:	4a03      	ldr	r2, [pc, #12]	; (33658 <ull_rx_put+0x1c>)
   3364c:	4628      	mov	r0, r5
}
   3364e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   33652:	f7fc bb07 	b.w	2fc64 <memq_enqueue>
   33656:	bf00      	nop
   33658:	200021b8 	.word	0x200021b8

0003365c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   3365c:	2201      	movs	r2, #1
   3365e:	4b02      	ldr	r3, [pc, #8]	; (33668 <ull_rx_sched+0xc>)
   33660:	4611      	mov	r1, r2
   33662:	2000      	movs	r0, #0
   33664:	f7fc bb72 	b.w	2fd4c <mayfly_enqueue>
   33668:	200006a8 	.word	0x200006a8

0003366c <ull_prepare_enqueue>:
{
   3366c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33670:	4e15      	ldr	r6, [pc, #84]	; (336c8 <ull_prepare_enqueue+0x5c>)
{
   33672:	f89d a020 	ldrb.w	sl, [sp, #32]
   33676:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33678:	78f3      	ldrb	r3, [r6, #3]
{
   3367a:	460f      	mov	r7, r1
	last = last + 1;
   3367c:	1c5d      	adds	r5, r3, #1
   3367e:	4611      	mov	r1, r2
	if (last == count) {
   33680:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   33682:	b2ed      	uxtb	r5, r5
		last = 0U;
   33684:	42aa      	cmp	r2, r5
   33686:	bf08      	it	eq
   33688:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   3368a:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   3368c:	42aa      	cmp	r2, r5
{
   3368e:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33690:	7830      	ldrb	r0, [r6, #0]
   33692:	d015      	beq.n	336c0 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   33694:	1d34      	adds	r4, r6, #4
   33696:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   3369a:	2210      	movs	r2, #16
   3369c:	4620      	mov	r0, r4
   3369e:	f011 fc0f 	bl	44ec0 <memcpy>
	e->is_resume = is_resume;
   336a2:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   336a4:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   336a6:	f00a 0a01 	and.w	sl, sl, #1
   336aa:	f023 0303 	bic.w	r3, r3, #3
   336ae:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   336b2:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   336b6:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   336b8:	70f5      	strb	r5, [r6, #3]
}
   336ba:	4620      	mov	r0, r4
   336bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   336c0:	2400      	movs	r4, #0
}
   336c2:	4620      	mov	r0, r4
   336c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   336c8:	20000550 	.word	0x20000550

000336cc <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   336cc:	4b05      	ldr	r3, [pc, #20]	; (336e4 <ull_prepare_dequeue_get+0x18>)
   336ce:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   336d0:	78da      	ldrb	r2, [r3, #3]
   336d2:	7819      	ldrb	r1, [r3, #0]
   336d4:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   336d6:	bf1a      	itte	ne
   336d8:	3304      	addne	r3, #4
   336da:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   336de:	2000      	moveq	r0, #0
}
   336e0:	4770      	bx	lr
   336e2:	bf00      	nop
   336e4:	20000550 	.word	0x20000550

000336e8 <ull_prepare_dequeue_iter>:
{
   336e8:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   336ea:	4b0d      	ldr	r3, [pc, #52]	; (33720 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   336ec:	7802      	ldrb	r2, [r0, #0]
   336ee:	7859      	ldrb	r1, [r3, #1]
   336f0:	f893 c003 	ldrb.w	ip, [r3, #3]
   336f4:	f893 e000 	ldrb.w	lr, [r3]
   336f8:	4291      	cmp	r1, r2
   336fa:	bf9c      	itt	ls
   336fc:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   336fe:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   33700:	4594      	cmp	ip, r2
   33702:	d00a      	beq.n	3371a <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   33704:	1c53      	adds	r3, r2, #1
   33706:	b2db      	uxtb	r3, r3
		i = 0U;
   33708:	4299      	cmp	r1, r3
   3370a:	bf08      	it	eq
   3370c:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   3370e:	4905      	ldr	r1, [pc, #20]	; (33724 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   33710:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   33712:	fb02 100e 	mla	r0, r2, lr, r1
}
   33716:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   3371a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   3371c:	e7fb      	b.n	33716 <ull_prepare_dequeue_iter+0x2e>
   3371e:	bf00      	nop
   33720:	20000550 	.word	0x20000550
   33724:	20000554 	.word	0x20000554

00033728 <ull_prepare_dequeue>:
{
   33728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   3372c:	4c23      	ldr	r4, [pc, #140]	; (337bc <ull_prepare_dequeue+0x94>)
   3372e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   33730:	78e1      	ldrb	r1, [r4, #3]
   33732:	7823      	ldrb	r3, [r4, #0]
   33734:	4291      	cmp	r1, r2
   33736:	d027      	beq.n	33788 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   33738:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   3373a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 337c0 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   3373e:	f8df b084 	ldr.w	fp, [pc, #132]	; 337c4 <ull_prepare_dequeue+0x9c>
   33742:	f8df a084 	ldr.w	sl, [pc, #132]	; 337c8 <ull_prepare_dequeue+0xa0>
   33746:	4680      	mov	r8, r0
   33748:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   3374c:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   3374e:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   33750:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   33754:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   33758:	d518      	bpl.n	3378c <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   3375a:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   3375c:	78e1      	ldrb	r1, [r4, #3]
   3375e:	7820      	ldrb	r0, [r4, #0]
   33760:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   33764:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   33766:	4291      	cmp	r1, r2
	_first += 1U;
   33768:	b2db      	uxtb	r3, r3
	if (_first == last) {
   3376a:	d00d      	beq.n	33788 <ull_prepare_dequeue+0x60>
		_first = 0U;
   3376c:	459c      	cmp	ip, r3
   3376e:	bf08      	it	eq
   33770:	2300      	moveq	r3, #0
	if (first == last) {
   33772:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   33774:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   33776:	d007      	beq.n	33788 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   33778:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   3377c:	2d00      	cmp	r5, #0
   3377e:	d1e5      	bne.n	3374c <ull_prepare_dequeue+0x24>
   33780:	b116      	cbz	r6, 33788 <ull_prepare_dequeue+0x60>
   33782:	7f03      	ldrb	r3, [r0, #28]
   33784:	07db      	lsls	r3, r3, #31
   33786:	d5e1      	bpl.n	3374c <ull_prepare_dequeue+0x24>
}
   33788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   3378c:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   33790:	4b0b      	ldr	r3, [pc, #44]	; (337c0 <ull_prepare_dequeue+0x98>)
   33792:	462a      	mov	r2, r5
   33794:	4629      	mov	r1, r5
   33796:	4640      	mov	r0, r8
   33798:	f7fc fad8 	bl	2fd4c <mayfly_enqueue>
			LL_ASSERT(!ret);
   3379c:	2800      	cmp	r0, #0
   3379e:	d0dc      	beq.n	3375a <ull_prepare_dequeue+0x32>
   337a0:	480a      	ldr	r0, [pc, #40]	; (337cc <ull_prepare_dequeue+0xa4>)
   337a2:	f240 7376 	movw	r3, #1910	; 0x776
   337a6:	465a      	mov	r2, fp
   337a8:	4651      	mov	r1, sl
   337aa:	f00f fab1 	bl	42d10 <printk>
   337ae:	4040      	eors	r0, r0
   337b0:	f380 8811 	msr	BASEPRI, r0
   337b4:	f04f 0003 	mov.w	r0, #3
   337b8:	df02      	svc	2
   337ba:	e7ce      	b.n	3375a <ull_prepare_dequeue+0x32>
   337bc:	20000550 	.word	0x20000550
   337c0:	20000678 	.word	0x20000678
   337c4:	0004a600 	.word	0x0004a600
   337c8:	0004a738 	.word	0x0004a738
   337cc:	0004a4a0 	.word	0x0004a4a0

000337d0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   337d0:	4b06      	ldr	r3, [pc, #24]	; (337ec <ull_event_done_extra_get+0x1c>)
   337d2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   337d4:	78d9      	ldrb	r1, [r3, #3]
   337d6:	7818      	ldrb	r0, [r3, #0]
   337d8:	4291      	cmp	r1, r2
   337da:	d005      	beq.n	337e8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   337dc:	fb02 3300 	mla	r3, r2, r0, r3
   337e0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   337e2:	b110      	cbz	r0, 337ea <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   337e4:	3020      	adds	r0, #32
   337e6:	4770      	bx	lr
		return NULL;
   337e8:	2000      	movs	r0, #0
}
   337ea:	4770      	bx	lr
   337ec:	20000514 	.word	0x20000514

000337f0 <ull_event_done>:
{
   337f0:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   337f2:	4a13      	ldr	r2, [pc, #76]	; (33840 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   337f4:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   337f6:	78d4      	ldrb	r4, [r2, #3]
   337f8:	7811      	ldrb	r1, [r2, #0]
   337fa:	429c      	cmp	r4, r3
{
   337fc:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   337fe:	7850      	ldrb	r0, [r2, #1]
   33800:	d01b      	beq.n	3383a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   33802:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   33806:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   33808:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   3380a:	b2db      	uxtb	r3, r3
		_first = 0U;
   3380c:	4298      	cmp	r0, r3
   3380e:	bf08      	it	eq
   33810:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   33812:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   33814:	b17c      	cbz	r4, 33836 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   33816:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   33818:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   3381a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   3381c:	4a09      	ldr	r2, [pc, #36]	; (33844 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   3381e:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   33820:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   33822:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   33824:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   33826:	f7fc fa1d 	bl	2fc64 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   3382a:	2201      	movs	r2, #1
   3382c:	4b06      	ldr	r3, [pc, #24]	; (33848 <ull_event_done+0x58>)
   3382e:	4611      	mov	r1, r2
   33830:	4628      	mov	r0, r5
   33832:	f7fc fa8b 	bl	2fd4c <mayfly_enqueue>
}
   33836:	4620      	mov	r0, r4
   33838:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   3383a:	2400      	movs	r4, #0
   3383c:	e7fb      	b.n	33836 <ull_event_done+0x46>
   3383e:	bf00      	nop
   33840:	20000514 	.word	0x20000514
   33844:	200021b0 	.word	0x200021b0
   33848:	20000698 	.word	0x20000698

0003384c <ull_rxfifo_alloc>:
{
   3384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33850:	b083      	sub	sp, #12
   33852:	461d      	mov	r5, r3
   33854:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   33856:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   3385a:	e9cd 0400 	strd	r0, r4, [sp]
   3385e:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   33862:	b33b      	cbz	r3, 338b4 <ull_rxfifo_alloc+0x68>
   33864:	1e5c      	subs	r4, r3, #1
   33866:	f895 b000 	ldrb.w	fp, [r5]
   3386a:	4688      	mov	r8, r1
   3386c:	4617      	mov	r7, r2
   3386e:	b2e4      	uxtb	r4, r4
	last = last + 1;
   33870:	f10b 0301 	add.w	r3, fp, #1
   33874:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   33878:	45d8      	cmp	r8, fp
   3387a:	bf08      	it	eq
   3387c:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   33880:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   33882:	4648      	mov	r0, r9
   33884:	d016      	beq.n	338b4 <ull_rxfifo_alloc+0x68>
   33886:	f7fc f989 	bl	2fb9c <mem_acquire>
   3388a:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   3388c:	4650      	mov	r0, sl
		if (!link) {
   3388e:	b18e      	cbz	r6, 338b4 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   33890:	f7fc f984 	bl	2fb9c <mem_acquire>
		if (!rx) {
   33894:	b188      	cbz	r0, 338ba <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   33896:	2300      	movs	r3, #0
   33898:	6073      	str	r3, [r6, #4]
		rx->link = link;
   3389a:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3389c:	782a      	ldrb	r2, [r5, #0]
   3389e:	9b00      	ldr	r3, [sp, #0]
   338a0:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   338a4:	9b01      	ldr	r3, [sp, #4]
   338a6:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   338a8:	3c01      	subs	r4, #1
   338aa:	b2e4      	uxtb	r4, r4
   338ac:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   338ae:	f885 b000 	strb.w	fp, [r5]
   338b2:	d1dd      	bne.n	33870 <ull_rxfifo_alloc+0x24>
}
   338b4:	b003      	add	sp, #12
   338b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   338ba:	4649      	mov	r1, r9
   338bc:	4630      	mov	r0, r6
}
   338be:	b003      	add	sp, #12
   338c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   338c4:	f7fc b984 	b.w	2fbd0 <mem_release>

000338c8 <init_reset>:
{
   338c8:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   338ca:	4c3f      	ldr	r4, [pc, #252]	; (339c8 <init_reset+0x100>)
   338cc:	4d3f      	ldr	r5, [pc, #252]	; (339cc <init_reset+0x104>)
   338ce:	79a2      	ldrb	r2, [r4, #6]
   338d0:	88a1      	ldrh	r1, [r4, #4]
   338d2:	4e3f      	ldr	r6, [pc, #252]	; (339d0 <init_reset+0x108>)
   338d4:	2000      	movs	r0, #0
{
   338d6:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   338d8:	4623      	mov	r3, r4
   338da:	8068      	strh	r0, [r5, #2]
   338dc:	f104 0008 	add.w	r0, r4, #8
   338e0:	f7fc f92c 	bl	2fb3c <mem_init>
   338e4:	79e3      	ldrb	r3, [r4, #7]
   338e6:	79a2      	ldrb	r2, [r4, #6]
   338e8:	1d30      	adds	r0, r6, #4
   338ea:	441a      	add	r2, r3
   338ec:	2108      	movs	r1, #8
   338ee:	4633      	mov	r3, r6
   338f0:	f7fc f924 	bl	2fb3c <mem_init>
   338f4:	9602      	str	r6, [sp, #8]
   338f6:	462e      	mov	r6, r5
   338f8:	79a3      	ldrb	r3, [r4, #6]
   338fa:	f816 0b04 	ldrb.w	r0, [r6], #4
   338fe:	78aa      	ldrb	r2, [r5, #2]
   33900:	7869      	ldrb	r1, [r5, #1]
   33902:	9303      	str	r3, [sp, #12]
   33904:	e9cd 6400 	strd	r6, r4, [sp]
   33908:	1ceb      	adds	r3, r5, #3
   3390a:	f7ff ff9f 	bl	3384c <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   3390e:	4b31      	ldr	r3, [pc, #196]	; (339d4 <init_reset+0x10c>)
   33910:	2207      	movs	r2, #7
   33912:	1d18      	adds	r0, r3, #4
   33914:	2144      	movs	r1, #68	; 0x44
   33916:	f7fc f911 	bl	2fb3c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   3391a:	4b2f      	ldr	r3, [pc, #188]	; (339d8 <init_reset+0x110>)
   3391c:	2209      	movs	r2, #9
   3391e:	1d18      	adds	r0, r3, #4
   33920:	2108      	movs	r1, #8
   33922:	f7fc f90b 	bl	2fb3c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   33926:	482c      	ldr	r0, [pc, #176]	; (339d8 <init_reset+0x110>)
   33928:	f7fc f938 	bl	2fb9c <mem_acquire>
	LL_ASSERT(link);
   3392c:	4604      	mov	r4, r0
   3392e:	b308      	cbz	r0, 33974 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   33930:	4a2a      	ldr	r2, [pc, #168]	; (339dc <init_reset+0x114>)
   33932:	4620      	mov	r0, r4
   33934:	1f11      	subs	r1, r2, #4
   33936:	f7fc f987 	bl	2fc48 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   3393a:	4825      	ldr	r0, [pc, #148]	; (339d0 <init_reset+0x108>)
   3393c:	f7fc f92e 	bl	2fb9c <mem_acquire>
	LL_ASSERT(link);
   33940:	4604      	mov	r4, r0
   33942:	b328      	cbz	r0, 33990 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   33944:	4a26      	ldr	r2, [pc, #152]	; (339e0 <init_reset+0x118>)
   33946:	4620      	mov	r0, r4
   33948:	1f11      	subs	r1, r2, #4
   3394a:	f7fc f97d 	bl	2fc48 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   3394e:	4822      	ldr	r0, [pc, #136]	; (339d8 <init_reset+0x110>)
   33950:	f7fc f924 	bl	2fb9c <mem_acquire>
	LL_ASSERT(link);
   33954:	4604      	mov	r4, r0
   33956:	b348      	cbz	r0, 339ac <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   33958:	4a22      	ldr	r2, [pc, #136]	; (339e4 <init_reset+0x11c>)
   3395a:	4620      	mov	r0, r4
   3395c:	1f11      	subs	r1, r2, #4
   3395e:	f7fc f973 	bl	2fc48 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   33962:	4b21      	ldr	r3, [pc, #132]	; (339e8 <init_reset+0x120>)
   33964:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
   33966:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   33968:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   3396a:	f7ff f8c3 	bl	32af4 <rx_alloc>
}
   3396e:	2000      	movs	r0, #0
   33970:	b004      	add	sp, #16
   33972:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   33974:	4a1d      	ldr	r2, [pc, #116]	; (339ec <init_reset+0x124>)
   33976:	491e      	ldr	r1, [pc, #120]	; (339f0 <init_reset+0x128>)
   33978:	481e      	ldr	r0, [pc, #120]	; (339f4 <init_reset+0x12c>)
   3397a:	f640 0302 	movw	r3, #2050	; 0x802
   3397e:	f00f f9c7 	bl	42d10 <printk>
   33982:	4040      	eors	r0, r0
   33984:	f380 8811 	msr	BASEPRI, r0
   33988:	f04f 0003 	mov.w	r0, #3
   3398c:	df02      	svc	2
   3398e:	e7cf      	b.n	33930 <init_reset+0x68>
	LL_ASSERT(link);
   33990:	4a16      	ldr	r2, [pc, #88]	; (339ec <init_reset+0x124>)
   33992:	4917      	ldr	r1, [pc, #92]	; (339f0 <init_reset+0x128>)
   33994:	4817      	ldr	r0, [pc, #92]	; (339f4 <init_reset+0x12c>)
   33996:	f640 030a 	movw	r3, #2058	; 0x80a
   3399a:	f00f f9b9 	bl	42d10 <printk>
   3399e:	4040      	eors	r0, r0
   339a0:	f380 8811 	msr	BASEPRI, r0
   339a4:	f04f 0003 	mov.w	r0, #3
   339a8:	df02      	svc	2
   339aa:	e7cb      	b.n	33944 <init_reset+0x7c>
	LL_ASSERT(link);
   339ac:	4a0f      	ldr	r2, [pc, #60]	; (339ec <init_reset+0x124>)
   339ae:	4910      	ldr	r1, [pc, #64]	; (339f0 <init_reset+0x128>)
   339b0:	4810      	ldr	r0, [pc, #64]	; (339f4 <init_reset+0x12c>)
   339b2:	f640 0312 	movw	r3, #2066	; 0x812
   339b6:	f00f f9ab 	bl	42d10 <printk>
   339ba:	4040      	eors	r0, r0
   339bc:	f380 8811 	msr	BASEPRI, r0
   339c0:	f04f 0003 	mov.w	r0, #3
   339c4:	df02      	svc	2
   339c6:	e7c7      	b.n	33958 <init_reset+0x90>
   339c8:	2000043c 	.word	0x2000043c
   339cc:	20000514 	.word	0x20000514
   339d0:	20001f48 	.word	0x20001f48
   339d4:	20001fc4 	.word	0x20001fc4
   339d8:	20001f78 	.word	0x20001f78
   339dc:	200021b8 	.word	0x200021b8
   339e0:	200021b0 	.word	0x200021b0
   339e4:	200021a8 	.word	0x200021a8
   339e8:	20001f74 	.word	0x20001f74
   339ec:	0004a600 	.word	0x0004a600
   339f0:	0004a96c 	.word	0x0004a96c
   339f4:	0004a4a0 	.word	0x0004a4a0

000339f8 <ll_init>:
{
   339f8:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   339fa:	4b2c      	ldr	r3, [pc, #176]	; (33aac <ll_init+0xb4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   339fc:	4d2c      	ldr	r5, [pc, #176]	; (33ab0 <ll_init+0xb8>)
	sem_recv = sem_rx;
   339fe:	6018      	str	r0, [r3, #0]
{
   33a00:	b087      	sub	sp, #28
	cntr_init();
   33a02:	f008 fcf3 	bl	3c3ec <cntr_init>
	mayfly_init();
   33a06:	f7fc f94f 	bl	2fca8 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33a0a:	492a      	ldr	r1, [pc, #168]	; (33ab4 <ll_init+0xbc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33a0c:	4a2a      	ldr	r2, [pc, #168]	; (33ab8 <ll_init+0xc0>)
   33a0e:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   33a10:	f04f 0c05 	mov.w	ip, #5
   33a14:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33a18:	4c28      	ldr	r4, [pc, #160]	; (33abc <ll_init+0xc4>)
   33a1a:	9204      	str	r2, [sp, #16]
   33a1c:	4a28      	ldr	r2, [pc, #160]	; (33ac0 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   33a1e:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33a20:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33a24:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33a26:	240d      	movs	r4, #13
   33a28:	e9cd 1400 	strd	r1, r4, [sp]
   33a2c:	4a25      	ldr	r2, [pc, #148]	; (33ac4 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   33a2e:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   33a30:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33a32:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33a34:	2000      	movs	r0, #0
   33a36:	2106      	movs	r1, #6
   33a38:	f7fd fa0c 	bl	30e54 <ticker_init>
	LL_ASSERT(!err);
   33a3c:	bb40      	cbnz	r0, 33a90 <ll_init+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
   33a3e:	2201      	movs	r2, #1
   33a40:	2100      	movs	r1, #0
   33a42:	4821      	ldr	r0, [pc, #132]	; (33ac8 <ll_init+0xd0>)
   33a44:	f015 fa2e 	bl	48ea4 <z_impl_k_sem_init>
	err = lll_init();
   33a48:	f006 ff28 	bl	3a89c <lll_init>
	if (err) {
   33a4c:	4604      	mov	r4, r0
   33a4e:	b110      	cbz	r0, 33a56 <ll_init+0x5e>
}
   33a50:	4620      	mov	r0, r4
   33a52:	b007      	add	sp, #28
   33a54:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   33a56:	f7ff ff37 	bl	338c8 <init_reset>
	if (err) {
   33a5a:	4604      	mov	r4, r0
   33a5c:	2800      	cmp	r0, #0
   33a5e:	d1f7      	bne.n	33a50 <ll_init+0x58>
	err = lll_adv_init();
   33a60:	f007 fb6e 	bl	3b140 <lll_adv_init>
	if (err) {
   33a64:	4604      	mov	r4, r0
   33a66:	2800      	cmp	r0, #0
   33a68:	d1f2      	bne.n	33a50 <ll_init+0x58>
	err = ull_adv_init();
   33a6a:	f000 fcd1 	bl	34410 <ull_adv_init>
	if (err) {
   33a6e:	4604      	mov	r4, r0
   33a70:	2800      	cmp	r0, #0
   33a72:	d1ed      	bne.n	33a50 <ll_init+0x58>
	err = lll_conn_init();
   33a74:	f008 f820 	bl	3bab8 <lll_conn_init>
	if (err) {
   33a78:	4604      	mov	r4, r0
   33a7a:	2800      	cmp	r0, #0
   33a7c:	d1e8      	bne.n	33a50 <ll_init+0x58>
	err = ull_conn_init();
   33a7e:	f001 ff41 	bl	35904 <ull_conn_init>
	if (err) {
   33a82:	4604      	mov	r4, r0
   33a84:	2800      	cmp	r0, #0
   33a86:	d1e3      	bne.n	33a50 <ll_init+0x58>
		ull_filter_reset(true);
   33a88:	2001      	movs	r0, #1
   33a8a:	f006 f8d5 	bl	39c38 <ull_filter_reset>
	return  0;
   33a8e:	e7df      	b.n	33a50 <ll_init+0x58>
	LL_ASSERT(!err);
   33a90:	4a0e      	ldr	r2, [pc, #56]	; (33acc <ll_init+0xd4>)
   33a92:	490f      	ldr	r1, [pc, #60]	; (33ad0 <ll_init+0xd8>)
   33a94:	480f      	ldr	r0, [pc, #60]	; (33ad4 <ll_init+0xdc>)
   33a96:	f240 230d 	movw	r3, #525	; 0x20d
   33a9a:	f00f f939 	bl	42d10 <printk>
   33a9e:	4040      	eors	r0, r0
   33aa0:	f380 8811 	msr	BASEPRI, r0
   33aa4:	f04f 0003 	mov.w	r0, #3
   33aa8:	df02      	svc	2
   33aaa:	e7c8      	b.n	33a3e <ll_init+0x46>
   33aac:	200021bc 	.word	0x200021bc
   33ab0:	0003d089 	.word	0x0003d089
   33ab4:	2000259c 	.word	0x2000259c
   33ab8:	0003cf39 	.word	0x0003cf39
   33abc:	0003ced5 	.word	0x0003ced5
   33ac0:	200022f8 	.word	0x200022f8
   33ac4:	200021d8 	.word	0x200021d8
   33ac8:	200021c0 	.word	0x200021c0
   33acc:	0004a600 	.word	0x0004a600
   33ad0:	0004a63c 	.word	0x0004a63c
   33ad4:	0004a4a0 	.word	0x0004a4a0

00033ad8 <ll_reset>:
{
   33ad8:	b510      	push	{r4, lr}
   33ada:	b086      	sub	sp, #24
	err = ull_adv_reset();
   33adc:	f000 fca8 	bl	34430 <ull_adv_reset>
	LL_ASSERT(!err);
   33ae0:	bb70      	cbnz	r0, 33b40 <ll_reset+0x68>
	err = ull_conn_reset();
   33ae2:	f001 ff11 	bl	35908 <ull_conn_reset>
	LL_ASSERT(!err);
   33ae6:	2800      	cmp	r0, #0
   33ae8:	d13b      	bne.n	33b62 <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
   33aea:	4b3a      	ldr	r3, [pc, #232]	; (33bd4 <ll_reset+0xfc>)
   33aec:	2400      	movs	r4, #0
   33aee:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   33af0:	4620      	mov	r0, r4
   33af2:	f006 f8a1 	bl	39c38 <ull_filter_reset>
	MFIFO_INIT(prep);
   33af6:	4938      	ldr	r1, [pc, #224]	; (33bd8 <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
   33af8:	4a38      	ldr	r2, [pc, #224]	; (33bdc <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
   33afa:	4b39      	ldr	r3, [pc, #228]	; (33be0 <ll_reset+0x108>)
	MFIFO_INIT(prep);
   33afc:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   33afe:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   33b00:	805c      	strh	r4, [r3, #2]
   33b02:	2201      	movs	r2, #1
   33b04:	4621      	mov	r1, r4
   33b06:	4668      	mov	r0, sp
   33b08:	f015 f9cc 	bl	48ea4 <z_impl_k_sem_init>
		mfy.param = &sem;
   33b0c:	4b35      	ldr	r3, [pc, #212]	; (33be4 <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   33b0e:	4622      	mov	r2, r4
   33b10:	4621      	mov	r1, r4
   33b12:	2003      	movs	r0, #3
		mfy.param = &sem;
   33b14:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   33b18:	f7fc f918 	bl	2fd4c <mayfly_enqueue>
		LL_ASSERT(!retval);
   33b1c:	2800      	cmp	r0, #0
   33b1e:	d14b      	bne.n	33bb8 <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
   33b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33b28:	4668      	mov	r0, sp
   33b2a:	f00d ff1d 	bl	41968 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   33b2e:	f000 fc99 	bl	34464 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   33b32:	2800      	cmp	r0, #0
   33b34:	d132      	bne.n	33b9c <ll_reset+0xc4>
	err = init_reset();
   33b36:	f7ff fec7 	bl	338c8 <init_reset>
	LL_ASSERT(!err);
   33b3a:	bb00      	cbnz	r0, 33b7e <ll_reset+0xa6>
}
   33b3c:	b006      	add	sp, #24
   33b3e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   33b40:	4a29      	ldr	r2, [pc, #164]	; (33be8 <ll_reset+0x110>)
   33b42:	492a      	ldr	r1, [pc, #168]	; (33bec <ll_reset+0x114>)
   33b44:	482a      	ldr	r0, [pc, #168]	; (33bf0 <ll_reset+0x118>)
   33b46:	f240 23ad 	movw	r3, #685	; 0x2ad
   33b4a:	f00f f8e1 	bl	42d10 <printk>
   33b4e:	4040      	eors	r0, r0
   33b50:	f380 8811 	msr	BASEPRI, r0
   33b54:	f04f 0003 	mov.w	r0, #3
   33b58:	df02      	svc	2
	err = ull_conn_reset();
   33b5a:	f001 fed5 	bl	35908 <ull_conn_reset>
	LL_ASSERT(!err);
   33b5e:	2800      	cmp	r0, #0
   33b60:	d0c3      	beq.n	33aea <ll_reset+0x12>
   33b62:	4a21      	ldr	r2, [pc, #132]	; (33be8 <ll_reset+0x110>)
   33b64:	4921      	ldr	r1, [pc, #132]	; (33bec <ll_reset+0x114>)
   33b66:	4822      	ldr	r0, [pc, #136]	; (33bf0 <ll_reset+0x118>)
   33b68:	f240 23de 	movw	r3, #734	; 0x2de
   33b6c:	f00f f8d0 	bl	42d10 <printk>
   33b70:	4040      	eors	r0, r0
   33b72:	f380 8811 	msr	BASEPRI, r0
   33b76:	f04f 0003 	mov.w	r0, #3
   33b7a:	df02      	svc	2
   33b7c:	e7b5      	b.n	33aea <ll_reset+0x12>
	LL_ASSERT(!err);
   33b7e:	4a1a      	ldr	r2, [pc, #104]	; (33be8 <ll_reset+0x110>)
   33b80:	491a      	ldr	r1, [pc, #104]	; (33bec <ll_reset+0x114>)
   33b82:	481b      	ldr	r0, [pc, #108]	; (33bf0 <ll_reset+0x118>)
   33b84:	f240 3327 	movw	r3, #807	; 0x327
   33b88:	f00f f8c2 	bl	42d10 <printk>
   33b8c:	4040      	eors	r0, r0
   33b8e:	f380 8811 	msr	BASEPRI, r0
   33b92:	f04f 0003 	mov.w	r0, #3
   33b96:	df02      	svc	2
}
   33b98:	b006      	add	sp, #24
   33b9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   33b9c:	4a12      	ldr	r2, [pc, #72]	; (33be8 <ll_reset+0x110>)
   33b9e:	4913      	ldr	r1, [pc, #76]	; (33bec <ll_reset+0x114>)
   33ba0:	4813      	ldr	r0, [pc, #76]	; (33bf0 <ll_reset+0x118>)
   33ba2:	f240 331a 	movw	r3, #794	; 0x31a
   33ba6:	f00f f8b3 	bl	42d10 <printk>
   33baa:	4040      	eors	r0, r0
   33bac:	f380 8811 	msr	BASEPRI, r0
   33bb0:	f04f 0003 	mov.w	r0, #3
   33bb4:	df02      	svc	2
   33bb6:	e7be      	b.n	33b36 <ll_reset+0x5e>
		LL_ASSERT(!retval);
   33bb8:	4a0b      	ldr	r2, [pc, #44]	; (33be8 <ll_reset+0x110>)
   33bba:	490e      	ldr	r1, [pc, #56]	; (33bf4 <ll_reset+0x11c>)
   33bbc:	480c      	ldr	r0, [pc, #48]	; (33bf0 <ll_reset+0x118>)
   33bbe:	f240 330d 	movw	r3, #781	; 0x30d
   33bc2:	f00f f8a5 	bl	42d10 <printk>
   33bc6:	4040      	eors	r0, r0
   33bc8:	f380 8811 	msr	BASEPRI, r0
   33bcc:	f04f 0003 	mov.w	r0, #3
   33bd0:	df02      	svc	2
   33bd2:	e7a5      	b.n	33b20 <ll_reset+0x48>
   33bd4:	20000654 	.word	0x20000654
   33bd8:	20000550 	.word	0x20000550
   33bdc:	20000538 	.word	0x20000538
   33be0:	2000052c 	.word	0x2000052c
   33be4:	20000688 	.word	0x20000688
   33be8:	0004a600 	.word	0x0004a600
   33bec:	0004a63c 	.word	0x0004a63c
   33bf0:	0004a4a0 	.word	0x0004a4a0
   33bf4:	0004a760 	.word	0x0004a760

00033bf8 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   33bf8:	b510      	push	{r4, lr}
   33bfa:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   33bfc:	2400      	movs	r4, #0
   33bfe:	e9cd 4400 	strd	r4, r4, [sp]
   33c02:	9b04      	ldr	r3, [sp, #16]
   33c04:	f007 f85e 	bl	3acc4 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   33c08:	b002      	add	sp, #8
   33c0a:	bd10      	pop	{r4, pc}

00033c0c <lll_resume>:

void lll_resume(void *param)
{
   33c0c:	b510      	push	{r4, lr}
   33c0e:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   33c10:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   33c12:	691a      	ldr	r2, [r3, #16]
   33c14:	6999      	ldr	r1, [r3, #24]
   33c16:	2401      	movs	r4, #1
{
   33c18:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   33c1a:	4020      	ands	r0, r4
   33c1c:	e9cd 0400 	strd	r0, r4, [sp]
   33c20:	6958      	ldr	r0, [r3, #20]
   33c22:	f007 f84f 	bl	3acc4 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   33c26:	b108      	cbz	r0, 33c2c <lll_resume+0x20>
   33c28:	3077      	adds	r0, #119	; 0x77
   33c2a:	d101      	bne.n	33c30 <lll_resume+0x24>
}
   33c2c:	b002      	add	sp, #8
   33c2e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   33c30:	4a06      	ldr	r2, [pc, #24]	; (33c4c <lll_resume+0x40>)
   33c32:	4907      	ldr	r1, [pc, #28]	; (33c50 <lll_resume+0x44>)
   33c34:	4807      	ldr	r0, [pc, #28]	; (33c54 <lll_resume+0x48>)
   33c36:	234f      	movs	r3, #79	; 0x4f
   33c38:	f00f f86a 	bl	42d10 <printk>
   33c3c:	4040      	eors	r0, r0
   33c3e:	f380 8811 	msr	BASEPRI, r0
   33c42:	f04f 0003 	mov.w	r0, #3
   33c46:	df02      	svc	2
}
   33c48:	b002      	add	sp, #8
   33c4a:	bd10      	pop	{r4, pc}
   33c4c:	0004a768 	.word	0x0004a768
   33c50:	0004a7ac 	.word	0x0004a7ac
   33c54:	0004a4a0 	.word	0x0004a4a0

00033c58 <ticker_stop_cb>:
{
   33c58:	b530      	push	{r4, r5, lr}
   33c5a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33c5c:	4b19      	ldr	r3, [pc, #100]	; (33cc4 <ticker_stop_cb+0x6c>)
{
   33c5e:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33c60:	4a19      	ldr	r2, [pc, #100]	; (33cc8 <ticker_stop_cb+0x70>)
   33c62:	1aeb      	subs	r3, r5, r3
   33c64:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33c68:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   33c6c:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33c70:	d119      	bne.n	33ca6 <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   33c72:	1ca2      	adds	r2, r4, #2
   33c74:	4b15      	ldr	r3, [pc, #84]	; (33ccc <ticker_stop_cb+0x74>)
   33c76:	9500      	str	r5, [sp, #0]
   33c78:	b2d2      	uxtb	r2, r2
   33c7a:	2101      	movs	r1, #1
   33c7c:	2000      	movs	r0, #0
   33c7e:	f7fd fa31 	bl	310e4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   33c82:	f030 0302 	bics.w	r3, r0, #2
   33c86:	d00c      	beq.n	33ca2 <ticker_stop_cb+0x4a>
   33c88:	4a11      	ldr	r2, [pc, #68]	; (33cd0 <ticker_stop_cb+0x78>)
   33c8a:	4912      	ldr	r1, [pc, #72]	; (33cd4 <ticker_stop_cb+0x7c>)
   33c8c:	4812      	ldr	r0, [pc, #72]	; (33cd8 <ticker_stop_cb+0x80>)
   33c8e:	f640 03d2 	movw	r3, #2258	; 0x8d2
   33c92:	f00f f83d 	bl	42d10 <printk>
   33c96:	4040      	eors	r0, r0
   33c98:	f380 8811 	msr	BASEPRI, r0
   33c9c:	f04f 0003 	mov.w	r0, #3
   33ca0:	df02      	svc	2
}
   33ca2:	b003      	add	sp, #12
   33ca4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33ca6:	4a0a      	ldr	r2, [pc, #40]	; (33cd0 <ticker_stop_cb+0x78>)
   33ca8:	490c      	ldr	r1, [pc, #48]	; (33cdc <ticker_stop_cb+0x84>)
   33caa:	480b      	ldr	r0, [pc, #44]	; (33cd8 <ticker_stop_cb+0x80>)
   33cac:	f640 03cd 	movw	r3, #2253	; 0x8cd
   33cb0:	f00f f82e 	bl	42d10 <printk>
   33cb4:	4040      	eors	r0, r0
   33cb6:	f380 8811 	msr	BASEPRI, r0
   33cba:	f04f 0003 	mov.w	r0, #3
   33cbe:	df02      	svc	2
   33cc0:	e7d7      	b.n	33c72 <ticker_stop_cb+0x1a>
   33cc2:	bf00      	nop
   33cc4:	200025d4 	.word	0x200025d4
   33cc8:	8d3dcb09 	.word	0x8d3dcb09
   33ccc:	00033d75 	.word	0x00033d75
   33cd0:	0004a7c0 	.word	0x0004a7c0
   33cd4:	0004a80c 	.word	0x0004a80c
   33cd8:	0004a4a0 	.word	0x0004a4a0
   33cdc:	0004a800 	.word	0x0004a800

00033ce0 <disabled_cb>:
{
   33ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   33ce2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   33ce4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   33ce6:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   33ce8:	b1d7      	cbz	r7, 33d20 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   33cea:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   33cec:	2300      	movs	r3, #0
   33cee:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   33cf0:	b34c      	cbz	r4, 33d46 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   33cf2:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   33cf4:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   33cf6:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   33cf8:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   33cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33cfe:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   33d00:	221e      	movs	r2, #30
   33d02:	f104 001c 	add.w	r0, r4, #28
   33d06:	f011 f8e6 	bl	44ed6 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   33d0a:	233c      	movs	r3, #60	; 0x3c
   33d0c:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   33d0e:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   33d10:	4621      	mov	r1, r4
   33d12:	4638      	mov	r0, r7
   33d14:	f7ff fadc 	bl	332d0 <ll_rx_put>
}
   33d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   33d1c:	f7ff bae2 	b.w	332e4 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   33d20:	4a10      	ldr	r2, [pc, #64]	; (33d64 <disabled_cb+0x84>)
   33d22:	4911      	ldr	r1, [pc, #68]	; (33d68 <disabled_cb+0x88>)
   33d24:	4811      	ldr	r0, [pc, #68]	; (33d6c <disabled_cb+0x8c>)
   33d26:	f640 131a 	movw	r3, #2330	; 0x91a
   33d2a:	f00e fff1 	bl	42d10 <printk>
   33d2e:	4040      	eors	r0, r0
   33d30:	f380 8811 	msr	BASEPRI, r0
   33d34:	f04f 0003 	mov.w	r0, #3
   33d38:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   33d3a:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   33d3c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   33d3e:	2300      	movs	r3, #0
   33d40:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   33d42:	2c00      	cmp	r4, #0
   33d44:	d1d5      	bne.n	33cf2 <disabled_cb+0x12>
   33d46:	4a07      	ldr	r2, [pc, #28]	; (33d64 <disabled_cb+0x84>)
   33d48:	4909      	ldr	r1, [pc, #36]	; (33d70 <disabled_cb+0x90>)
   33d4a:	4808      	ldr	r0, [pc, #32]	; (33d6c <disabled_cb+0x8c>)
   33d4c:	f640 131e 	movw	r3, #2334	; 0x91e
   33d50:	f00e ffde 	bl	42d10 <printk>
   33d54:	4040      	eors	r0, r0
   33d56:	f380 8811 	msr	BASEPRI, r0
   33d5a:	f04f 0003 	mov.w	r0, #3
   33d5e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   33d60:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   33d62:	e7c6      	b.n	33cf2 <disabled_cb+0x12>
   33d64:	0004a7c0 	.word	0x0004a7c0
   33d68:	0004a828 	.word	0x0004a828
   33d6c:	0004a4a0 	.word	0x0004a4a0
   33d70:	0004a83c 	.word	0x0004a83c

00033d74 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   33d74:	b100      	cbz	r0, 33d78 <ticker_stop_op_cb+0x4>
   33d76:	4770      	bx	lr
	mfy.param = param;
   33d78:	4b0c      	ldr	r3, [pc, #48]	; (33dac <ticker_stop_op_cb+0x38>)
{
   33d7a:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33d7c:	4602      	mov	r2, r0
   33d7e:	460c      	mov	r4, r1
   33d80:	2002      	movs	r0, #2
   33d82:	2101      	movs	r1, #1
	mfy.param = param;
   33d84:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33d86:	f7fb ffe1 	bl	2fd4c <mayfly_enqueue>
	LL_ASSERT(!ret);
   33d8a:	b900      	cbnz	r0, 33d8e <ticker_stop_op_cb+0x1a>
}
   33d8c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   33d8e:	4a08      	ldr	r2, [pc, #32]	; (33db0 <ticker_stop_op_cb+0x3c>)
   33d90:	4908      	ldr	r1, [pc, #32]	; (33db4 <ticker_stop_op_cb+0x40>)
   33d92:	4809      	ldr	r0, [pc, #36]	; (33db8 <ticker_stop_op_cb+0x44>)
   33d94:	f640 03ee 	movw	r3, #2286	; 0x8ee
   33d98:	f00e ffba 	bl	42d10 <printk>
   33d9c:	4040      	eors	r0, r0
   33d9e:	f380 8811 	msr	BASEPRI, r0
   33da2:	f04f 0003 	mov.w	r0, #3
   33da6:	df02      	svc	2
}
   33da8:	bd10      	pop	{r4, pc}
   33daa:	bf00      	nop
   33dac:	200006f8 	.word	0x200006f8
   33db0:	0004a7c0 	.word	0x0004a7c0
   33db4:	0004a738 	.word	0x0004a738
   33db8:	0004a4a0 	.word	0x0004a4a0

00033dbc <adv_disable>:
{
   33dbc:	b538      	push	{r3, r4, r5, lr}
   33dbe:	4604      	mov	r4, r0
   33dc0:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   33dc4:	b353      	cbz	r3, 33e1c <adv_disable+0x60>
		mfy.param = &adv->lll;
   33dc6:	4d17      	ldr	r5, [pc, #92]	; (33e24 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   33dc8:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   33dca:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   33dcc:	b16b      	cbz	r3, 33dea <adv_disable+0x2e>
   33dce:	4a16      	ldr	r2, [pc, #88]	; (33e28 <adv_disable+0x6c>)
   33dd0:	4916      	ldr	r1, [pc, #88]	; (33e2c <adv_disable+0x70>)
   33dd2:	4817      	ldr	r0, [pc, #92]	; (33e30 <adv_disable+0x74>)
   33dd4:	f640 1303 	movw	r3, #2307	; 0x903
   33dd8:	f00e ff9a 	bl	42d10 <printk>
   33ddc:	4040      	eors	r0, r0
   33dde:	f380 8811 	msr	BASEPRI, r0
   33de2:	f04f 0003 	mov.w	r0, #3
   33de6:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   33de8:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   33dea:	4912      	ldr	r1, [pc, #72]	; (33e34 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33dec:	4b0d      	ldr	r3, [pc, #52]	; (33e24 <adv_disable+0x68>)
   33dee:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   33df0:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33df4:	4611      	mov	r1, r2
   33df6:	2001      	movs	r0, #1
   33df8:	f7fb ffa8 	bl	2fd4c <mayfly_enqueue>
		LL_ASSERT(!ret);
   33dfc:	b900      	cbnz	r0, 33e00 <adv_disable+0x44>
}
   33dfe:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   33e00:	4a09      	ldr	r2, [pc, #36]	; (33e28 <adv_disable+0x6c>)
   33e02:	490d      	ldr	r1, [pc, #52]	; (33e38 <adv_disable+0x7c>)
   33e04:	480a      	ldr	r0, [pc, #40]	; (33e30 <adv_disable+0x74>)
   33e06:	f640 130a 	movw	r3, #2314	; 0x90a
   33e0a:	f00e ff81 	bl	42d10 <printk>
   33e0e:	4040      	eors	r0, r0
   33e10:	f380 8811 	msr	BASEPRI, r0
   33e14:	f04f 0003 	mov.w	r0, #3
   33e18:	df02      	svc	2
}
   33e1a:	bd38      	pop	{r3, r4, r5, pc}
   33e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   33e20:	f7ff bf5e 	b.w	33ce0 <disabled_cb>
   33e24:	200006e8 	.word	0x200006e8
   33e28:	0004a7c0 	.word	0x0004a7c0
   33e2c:	0004a854 	.word	0x0004a854
   33e30:	0004a4a0 	.word	0x0004a4a0
   33e34:	00033ce1 	.word	0x00033ce1
   33e38:	0004a738 	.word	0x0004a738

00033e3c <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33e3c:	b900      	cbnz	r0, 33e40 <ticker_update_op_cb+0x4>
   33e3e:	4770      	bx	lr
{
   33e40:	b510      	push	{r4, lr}
   33e42:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33e44:	f7ff fb20 	bl	33488 <ull_disable_mark_get>
   33e48:	4284      	cmp	r4, r0
   33e4a:	d00c      	beq.n	33e66 <ticker_update_op_cb+0x2a>
   33e4c:	4a06      	ldr	r2, [pc, #24]	; (33e68 <ticker_update_op_cb+0x2c>)
   33e4e:	4907      	ldr	r1, [pc, #28]	; (33e6c <ticker_update_op_cb+0x30>)
   33e50:	4807      	ldr	r0, [pc, #28]	; (33e70 <ticker_update_op_cb+0x34>)
   33e52:	f640 03bf 	movw	r3, #2239	; 0x8bf
   33e56:	f00e ff5b 	bl	42d10 <printk>
   33e5a:	4040      	eors	r0, r0
   33e5c:	f380 8811 	msr	BASEPRI, r0
   33e60:	f04f 0003 	mov.w	r0, #3
   33e64:	df02      	svc	2
}
   33e66:	bd10      	pop	{r4, pc}
   33e68:	0004a7c0 	.word	0x0004a7c0
   33e6c:	0004a868 	.word	0x0004a868
   33e70:	0004a4a0 	.word	0x0004a4a0

00033e74 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   33e74:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33e76:	4b13      	ldr	r3, [pc, #76]	; (33ec4 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33e78:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   33e7a:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33e7e:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   33e82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33e86:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   33e8a:	f022 0202 	bic.w	r2, r2, #2
   33e8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   33e90:	f042 020e 	orr.w	r2, r2, #14
   33e94:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   33e96:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   33e98:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33e9a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33e9e:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33ea2:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33ea6:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   33eaa:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   33eac:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   33eae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   33eb2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   33eb6:	2204      	movs	r2, #4
   33eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   33eba:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   33ebc:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   33ebe:	f85d fb04 	ldr.w	pc, [sp], #4
   33ec2:	bf00      	nop
   33ec4:	200025d4 	.word	0x200025d4

00033ec8 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   33ec8:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   33eca:	4c1b      	ldr	r4, [pc, #108]	; (33f38 <conn_release.constprop.0+0x70>)
   33ecc:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   33ece:	6dab      	ldr	r3, [r5, #88]	; 0x58
   33ed0:	b163      	cbz	r3, 33eec <conn_release.constprop.0+0x24>
   33ed2:	4a1a      	ldr	r2, [pc, #104]	; (33f3c <conn_release.constprop.0+0x74>)
   33ed4:	491a      	ldr	r1, [pc, #104]	; (33f40 <conn_release.constprop.0+0x78>)
   33ed6:	481b      	ldr	r0, [pc, #108]	; (33f44 <conn_release.constprop.0+0x7c>)
   33ed8:	f640 1348 	movw	r3, #2376	; 0x948
   33edc:	f00e ff18 	bl	42d10 <printk>
   33ee0:	4040      	eors	r0, r0
   33ee2:	f380 8811 	msr	BASEPRI, r0
   33ee6:	f04f 0003 	mov.w	r0, #3
   33eea:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   33eec:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   33ef0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   33ef4:	f7fb feac 	bl	2fc50 <memq_deinit>
	LL_ASSERT(link);
   33ef8:	4606      	mov	r6, r0
   33efa:	b170      	cbz	r0, 33f1a <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   33efc:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   33efe:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   33f00:	f001 fa00 	bl	35304 <ll_conn_release>
	adv->lll.conn = NULL;
   33f04:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   33f06:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   33f08:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   33f0a:	f7ff f9db 	bl	332c4 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   33f0e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   33f10:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   33f12:	f7ff f9cb 	bl	332ac <ll_rx_link_release>
	adv->link_cc_free = NULL;
   33f16:	6625      	str	r5, [r4, #96]	; 0x60
}
   33f18:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   33f1a:	4a08      	ldr	r2, [pc, #32]	; (33f3c <conn_release.constprop.0+0x74>)
   33f1c:	490a      	ldr	r1, [pc, #40]	; (33f48 <conn_release.constprop.0+0x80>)
   33f1e:	4809      	ldr	r0, [pc, #36]	; (33f44 <conn_release.constprop.0+0x7c>)
   33f20:	f640 134a 	movw	r3, #2378	; 0x94a
   33f24:	f00e fef4 	bl	42d10 <printk>
   33f28:	4040      	eors	r0, r0
   33f2a:	f380 8811 	msr	BASEPRI, r0
   33f2e:	f04f 0003 	mov.w	r0, #3
   33f32:	df02      	svc	2
   33f34:	e7e2      	b.n	33efc <conn_release.constprop.0+0x34>
   33f36:	bf00      	nop
   33f38:	200025d4 	.word	0x200025d4
   33f3c:	0004a7c0 	.word	0x0004a7c0
   33f40:	0004a898 	.word	0x0004a898
   33f44:	0004a4a0 	.word	0x0004a4a0
   33f48:	0004a96c 	.word	0x0004a96c

00033f4c <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   33f4c:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   33f4e:	4c4a      	ldr	r4, [pc, #296]	; (34078 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   33f50:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   33f52:	4620      	mov	r0, r4
   33f54:	f7ff fa82 	bl	3345c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   33f58:	4284      	cmp	r4, r0
   33f5a:	d00c      	beq.n	33f76 <disable.part.0+0x2a>
   33f5c:	4a47      	ldr	r2, [pc, #284]	; (3407c <disable.part.0+0x130>)
   33f5e:	4948      	ldr	r1, [pc, #288]	; (34080 <disable.part.0+0x134>)
   33f60:	4848      	ldr	r0, [pc, #288]	; (34084 <disable.part.0+0x138>)
   33f62:	f640 13ff 	movw	r3, #2559	; 0x9ff
   33f66:	f00e fed3 	bl	42d10 <printk>
   33f6a:	4040      	eors	r0, r0
   33f6c:	f380 8811 	msr	BASEPRI, r0
   33f70:	f04f 0003 	mov.w	r0, #3
   33f74:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   33f76:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   33f7a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   33f7c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   33f7e:	d50d      	bpl.n	33f9c <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   33f80:	2102      	movs	r1, #2
   33f82:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   33f84:	4b40      	ldr	r3, [pc, #256]	; (34088 <disable.part.0+0x13c>)
   33f86:	9500      	str	r5, [sp, #0]
   33f88:	2103      	movs	r1, #3
   33f8a:	2201      	movs	r2, #1
   33f8c:	2000      	movs	r0, #0
   33f8e:	f7fd f8a9 	bl	310e4 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   33f92:	4629      	mov	r1, r5
   33f94:	f7ff fa3a 	bl	3340c <ull_ticker_status_take>
		if (ret) {
   33f98:	2800      	cmp	r0, #0
   33f9a:	d158      	bne.n	3404e <disable.part.0+0x102>
	ret_cb = TICKER_STATUS_BUSY;
   33f9c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33f9e:	2103      	movs	r1, #3
   33fa0:	4b39      	ldr	r3, [pc, #228]	; (34088 <disable.part.0+0x13c>)
   33fa2:	9500      	str	r5, [sp, #0]
   33fa4:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   33fa6:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33fa8:	f7fd f89c 	bl	310e4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   33fac:	4629      	mov	r1, r5
   33fae:	f7ff fa2d 	bl	3340c <ull_ticker_status_take>
	if (ret) {
   33fb2:	bb20      	cbnz	r0, 33ffe <disable.part.0+0xb2>
	err = ull_disable(&adv->lll);
   33fb4:	4835      	ldr	r0, [pc, #212]	; (3408c <disable.part.0+0x140>)
   33fb6:	f7ff fa89 	bl	334cc <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   33fba:	b108      	cbz	r0, 33fc0 <disable.part.0+0x74>
   33fbc:	3078      	adds	r0, #120	; 0x78
   33fbe:	d133      	bne.n	34028 <disable.part.0+0xdc>
	mark = ull_disable_unmark(adv);
   33fc0:	482d      	ldr	r0, [pc, #180]	; (34078 <disable.part.0+0x12c>)
   33fc2:	f7ff fa55 	bl	33470 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   33fc6:	4284      	cmp	r4, r0
   33fc8:	d00c      	beq.n	33fe4 <disable.part.0+0x98>
   33fca:	4a2c      	ldr	r2, [pc, #176]	; (3407c <disable.part.0+0x130>)
   33fcc:	492c      	ldr	r1, [pc, #176]	; (34080 <disable.part.0+0x134>)
   33fce:	482d      	ldr	r0, [pc, #180]	; (34084 <disable.part.0+0x138>)
   33fd0:	f640 2321 	movw	r3, #2593	; 0xa21
   33fd4:	f00e fe9c 	bl	42d10 <printk>
   33fd8:	4040      	eors	r0, r0
   33fda:	f380 8811 	msr	BASEPRI, r0
   33fde:	f04f 0003 	mov.w	r0, #3
   33fe2:	df02      	svc	2
	if (adv->lll.conn) {
   33fe4:	6a23      	ldr	r3, [r4, #32]
   33fe6:	b10b      	cbz	r3, 33fec <disable.part.0+0xa0>
		conn_release(adv);
   33fe8:	f7ff ff6e 	bl	33ec8 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   33fec:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	return 0;
   33ff0:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   33ff2:	f36f 0300 	bfc	r3, #0, #1
   33ff6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
   33ffa:	b005      	add	sp, #20
   33ffc:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   33ffe:	481e      	ldr	r0, [pc, #120]	; (34078 <disable.part.0+0x12c>)
   34000:	f7ff fa36 	bl	33470 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   34004:	4284      	cmp	r4, r0
   34006:	d034      	beq.n	34072 <disable.part.0+0x126>
   34008:	4a1c      	ldr	r2, [pc, #112]	; (3407c <disable.part.0+0x130>)
   3400a:	491d      	ldr	r1, [pc, #116]	; (34080 <disable.part.0+0x134>)
   3400c:	481d      	ldr	r0, [pc, #116]	; (34084 <disable.part.0+0x138>)
   3400e:	f640 2318 	movw	r3, #2584	; 0xa18
   34012:	f00e fe7d 	bl	42d10 <printk>
   34016:	4040      	eors	r0, r0
   34018:	f380 8811 	msr	BASEPRI, r0
   3401c:	f04f 0003 	mov.w	r0, #3
   34020:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   34022:	200c      	movs	r0, #12
}
   34024:	b005      	add	sp, #20
   34026:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   34028:	4a14      	ldr	r2, [pc, #80]	; (3407c <disable.part.0+0x130>)
   3402a:	4919      	ldr	r1, [pc, #100]	; (34090 <disable.part.0+0x144>)
   3402c:	4815      	ldr	r0, [pc, #84]	; (34084 <disable.part.0+0x138>)
   3402e:	f640 231e 	movw	r3, #2590	; 0xa1e
   34032:	f00e fe6d 	bl	42d10 <printk>
   34036:	4040      	eors	r0, r0
   34038:	f380 8811 	msr	BASEPRI, r0
   3403c:	f04f 0003 	mov.w	r0, #3
   34040:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   34042:	480d      	ldr	r0, [pc, #52]	; (34078 <disable.part.0+0x12c>)
   34044:	f7ff fa14 	bl	33470 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   34048:	4284      	cmp	r4, r0
   3404a:	d1be      	bne.n	33fca <disable.part.0+0x7e>
   3404c:	e7ca      	b.n	33fe4 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   3404e:	480a      	ldr	r0, [pc, #40]	; (34078 <disable.part.0+0x12c>)
   34050:	f7ff fa0e 	bl	33470 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   34054:	4284      	cmp	r4, r0
   34056:	d00c      	beq.n	34072 <disable.part.0+0x126>
   34058:	4a08      	ldr	r2, [pc, #32]	; (3407c <disable.part.0+0x130>)
   3405a:	4909      	ldr	r1, [pc, #36]	; (34080 <disable.part.0+0x134>)
   3405c:	4809      	ldr	r0, [pc, #36]	; (34084 <disable.part.0+0x138>)
   3405e:	f640 230a 	movw	r3, #2570	; 0xa0a
   34062:	f00e fe55 	bl	42d10 <printk>
   34066:	4040      	eors	r0, r0
   34068:	f380 8811 	msr	BASEPRI, r0
   3406c:	f04f 0003 	mov.w	r0, #3
   34070:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   34072:	200c      	movs	r0, #12
}
   34074:	b005      	add	sp, #20
   34076:	bd30      	pop	{r4, r5, pc}
   34078:	200025d4 	.word	0x200025d4
   3407c:	0004a7c0 	.word	0x0004a7c0
   34080:	0004a8ac 	.word	0x0004a8ac
   34084:	0004a4a0 	.word	0x0004a4a0
   34088:	00032911 	.word	0x00032911
   3408c:	200025f0 	.word	0x200025f0
   34090:	0004a8b8 	.word	0x0004a8b8

00034094 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   34094:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   34096:	7804      	ldrb	r4, [r0, #0]
   34098:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   3409c:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   3409e:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   340a0:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   340a4:	d01f      	beq.n	340e6 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   340a6:	2c01      	cmp	r4, #1
   340a8:	d009      	beq.n	340be <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   340aa:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   340ac:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   340ae:	b18c      	cbz	r4, 340d4 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   340b0:	2c06      	cmp	r4, #6
   340b2:	d00f      	beq.n	340d4 <adv_time_get.constprop.0.isra.0+0x40>
   340b4:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   340b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   340bc:	e003      	b.n	340c6 <adv_time_get.constprop.0.isra.0+0x32>
   340be:	f44f 6387 	mov.w	r3, #1080	; 0x438
   340c2:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   340c6:	fb0c 3302 	mla	r3, ip, r2, r3
   340ca:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   340ce:	4018      	ands	r0, r3
}
   340d0:	bc10      	pop	{r4}
   340d2:	4770      	bx	lr
				adv_size += pdu->len;
   340d4:	7843      	ldrb	r3, [r0, #1]
   340d6:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   340d8:	00db      	lsls	r3, r3, #3
   340da:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   340de:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   340e2:	440b      	add	r3, r1
   340e4:	e7ef      	b.n	340c6 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   340e6:	7840      	ldrb	r0, [r0, #1]
}
   340e8:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   340ea:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   340ee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   340f2:	3010      	adds	r0, #16
   340f4:	005b      	lsls	r3, r3, #1
   340f6:	00c1      	lsls	r1, r0, #3
   340f8:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   340fc:	fb01 0002 	mla	r0, r1, r2, r0
   34100:	b280      	uxth	r0, r0
}
   34102:	4770      	bx	lr

00034104 <ticker_cb>:
{
   34104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34108:	461d      	mov	r5, r3
   3410a:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   3410c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34110:	429d      	cmp	r5, r3
{
   34112:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   34116:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   34118:	d018      	beq.n	3414c <ticker_cb+0x48>
	return ++hdr->ref;
   3411a:	7823      	ldrb	r3, [r4, #0]
   3411c:	3301      	adds	r3, #1
   3411e:	b2db      	uxtb	r3, r3
   34120:	4607      	mov	r7, r0
   34122:	4616      	mov	r6, r2
   34124:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   34126:	2b00      	cmp	r3, #0
   34128:	d061      	beq.n	341ee <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   3412a:	4938      	ldr	r1, [pc, #224]	; (3420c <ticker_cb+0x108>)
		mfy.param = &p;
   3412c:	4b38      	ldr	r3, [pc, #224]	; (34210 <ticker_cb+0x10c>)
		p.lazy = lazy;
   3412e:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   34130:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34134:	2200      	movs	r2, #0
		p.param = lll;
   34136:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   34138:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   3413c:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   34140:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34142:	2001      	movs	r0, #1
   34144:	4611      	mov	r1, r2
   34146:	f7fb fe01 	bl	2fd4c <mayfly_enqueue>
		LL_ASSERT(!ret);
   3414a:	b938      	cbnz	r0, 3415c <ticker_cb+0x58>
	if (!lll->is_hdcd)
   3414c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   34150:	f010 0501 	ands.w	r5, r0, #1
   34154:	d014      	beq.n	34180 <ticker_cb+0x7c>
}
   34156:	b00a      	add	sp, #40	; 0x28
   34158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   3415c:	4a2d      	ldr	r2, [pc, #180]	; (34214 <ticker_cb+0x110>)
   3415e:	492e      	ldr	r1, [pc, #184]	; (34218 <ticker_cb+0x114>)
   34160:	482e      	ldr	r0, [pc, #184]	; (3421c <ticker_cb+0x118>)
   34162:	f640 0392 	movw	r3, #2194	; 0x892
   34166:	f00e fdd3 	bl	42d10 <printk>
   3416a:	4040      	eors	r0, r0
   3416c:	f380 8811 	msr	BASEPRI, r0
   34170:	f04f 0003 	mov.w	r0, #3
   34174:	df02      	svc	2
	if (!lll->is_hdcd)
   34176:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   3417a:	f010 0501 	ands.w	r5, r0, #1
   3417e:	d1ea      	bne.n	34156 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   34180:	2104      	movs	r1, #4
   34182:	a809      	add	r0, sp, #36	; 0x24
   34184:	f006 fbe0 	bl	3a948 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   34188:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3418a:	4a25      	ldr	r2, [pc, #148]	; (34220 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3418c:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   3418e:	fba2 1203 	umull	r1, r2, r2, r3
   34192:	1a99      	subs	r1, r3, r2
   34194:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   34198:	0a12      	lsrs	r2, r2, #8
   3419a:	f240 1147 	movw	r1, #327	; 0x147
   3419e:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   341a2:	4a20      	ldr	r2, [pc, #128]	; (34224 <ticker_cb+0x120>)
   341a4:	4920      	ldr	r1, [pc, #128]	; (34228 <ticker_cb+0x124>)
   341a6:	1aa2      	subs	r2, r4, r2
   341a8:	fba1 1202 	umull	r1, r2, r1, r2
   341ac:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   341ae:	491f      	ldr	r1, [pc, #124]	; (3422c <ticker_cb+0x128>)
   341b0:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   341b2:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   341b4:	e9cd 5104 	strd	r5, r1, [sp, #16]
   341b8:	e9cd 5502 	strd	r5, r5, [sp, #8]
   341bc:	e9cd 5500 	strd	r5, r5, [sp]
   341c0:	b2d2      	uxtb	r2, r2
   341c2:	2101      	movs	r1, #1
   341c4:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   341c6:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   341c8:	f7fc ff74 	bl	310b4 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   341cc:	f030 0302 	bics.w	r3, r0, #2
   341d0:	d0c1      	beq.n	34156 <ticker_cb+0x52>
   341d2:	4a10      	ldr	r2, [pc, #64]	; (34214 <ticker_cb+0x110>)
   341d4:	4916      	ldr	r1, [pc, #88]	; (34230 <ticker_cb+0x12c>)
   341d6:	4811      	ldr	r0, [pc, #68]	; (3421c <ticker_cb+0x118>)
   341d8:	f240 732c 	movw	r3, #1836	; 0x72c
   341dc:	f00e fd98 	bl	42d10 <printk>
   341e0:	4040      	eors	r0, r0
   341e2:	f380 8811 	msr	BASEPRI, r0
   341e6:	f04f 0003 	mov.w	r0, #3
   341ea:	df02      	svc	2
}
   341ec:	e7b3      	b.n	34156 <ticker_cb+0x52>
		LL_ASSERT(ref);
   341ee:	4a09      	ldr	r2, [pc, #36]	; (34214 <ticker_cb+0x110>)
   341f0:	4910      	ldr	r1, [pc, #64]	; (34234 <ticker_cb+0x130>)
   341f2:	480a      	ldr	r0, [pc, #40]	; (3421c <ticker_cb+0x118>)
   341f4:	f640 0385 	movw	r3, #2181	; 0x885
   341f8:	f00e fd8a 	bl	42d10 <printk>
   341fc:	4040      	eors	r0, r0
   341fe:	f380 8811 	msr	BASEPRI, r0
   34202:	f04f 0003 	mov.w	r0, #3
   34206:	df02      	svc	2
   34208:	e78f      	b.n	3412a <ticker_cb+0x26>
   3420a:	bf00      	nop
   3420c:	20002654 	.word	0x20002654
   34210:	200006d8 	.word	0x200006d8
   34214:	0004a7c0 	.word	0x0004a7c0
   34218:	0004a738 	.word	0x0004a738
   3421c:	0004a4a0 	.word	0x0004a4a0
   34220:	90d4f121 	.word	0x90d4f121
   34224:	200025d4 	.word	0x200025d4
   34228:	8d3dcb09 	.word	0x8d3dcb09
   3422c:	00033e3d 	.word	0x00033e3d
   34230:	0004a80c 	.word	0x0004a80c
   34234:	0004a8d0 	.word	0x0004a8d0

00034238 <ll_adv_params_set>:
{
   34238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   3423c:	4c6d      	ldr	r4, [pc, #436]	; (343f4 <ll_adv_params_set+0x1bc>)
{
   3423e:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   34240:	4b6d      	ldr	r3, [pc, #436]	; (343f8 <ll_adv_params_set+0x1c0>)
	if (!adv || adv->is_enabled) {
   34242:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   34246:	4680      	mov	r8, r0
   34248:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3424a:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   3424e:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   34250:	f016 0601 	ands.w	r6, r6, #1
{
   34254:	4615      	mov	r5, r2
   34256:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   3425a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3425e:	9000      	str	r0, [sp, #0]
   34260:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   34264:	f040 8089 	bne.w	3437a <ll_adv_params_set+0x142>
	adv->lll.chan_map = chan_map;
   34268:	f00c 0c07 	and.w	ip, ip, #7
   3426c:	f002 0203 	and.w	r2, r2, #3
   34270:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   34274:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   34278:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   3427c:	f1be 0f01 	cmp.w	lr, #1
   34280:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   34284:	bf08      	it	eq
   34286:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   3428a:	ab02      	add	r3, sp, #8
   3428c:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   34290:	449e      	add	lr, r3
   34292:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   34296:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   34298:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   3429c:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   342a0:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   342a4:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   342a8:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   342ac:	f029 011f 	bic.w	r1, r9, #31
   342b0:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   342b4:	ea4c 0c02 	orr.w	ip, ip, r2
   342b8:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   342bc:	bf0c      	ite	eq
   342be:	2201      	moveq	r2, #1
   342c0:	2200      	movne	r2, #0
   342c2:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   342c6:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   342ca:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   342ce:	f003 030f 	and.w	r3, r3, #15
   342d2:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   342d4:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   342d8:	d046      	beq.n	34368 <ll_adv_params_set+0x130>
	adv->own_addr_type = own_addr_type;
   342da:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   342de:	f365 0342 	bfi	r3, r5, #1, #2
   342e2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   342e6:	b2da      	uxtb	r2, r3
   342e8:	075b      	lsls	r3, r3, #29
   342ea:	d508      	bpl.n	342fe <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
   342ec:	f367 02c3 	bfi	r2, r7, #3, #1
   342f0:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   342f4:	4841      	ldr	r0, [pc, #260]	; (343fc <ll_adv_params_set+0x1c4>)
   342f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   342f8:	2206      	movs	r2, #6
   342fa:	f010 fde1 	bl	44ec0 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   342fe:	f898 3000 	ldrb.w	r3, [r8]
   34302:	f003 020f 	and.w	r2, r3, #15
   34306:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   34308:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3430c:	d03a      	beq.n	34384 <ll_adv_params_set+0x14c>
	} else if (pdu->len == 0) {
   3430e:	f898 2001 	ldrb.w	r2, [r8, #1]
   34312:	b1fa      	cbz	r2, 34354 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   34314:	f1b9 0f01 	cmp.w	r9, #1
   34318:	d04f      	beq.n	343ba <ll_adv_params_set+0x182>
		pdu->tx_addr = own_addr_type & 0x1;
   3431a:	f898 3000 	ldrb.w	r3, [r8]
   3431e:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   34322:	f36f 13c7 	bfc	r3, #7, #1
   34326:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3432a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   3432e:	61e4      	str	r4, [r4, #28]
   34330:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   34334:	01ad      	lsls	r5, r5, #6
   34336:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   34338:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   3433c:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3433e:	f045 0504 	orr.w	r5, r5, #4
   34342:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   34344:	b912      	cbnz	r2, 3434c <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
   34346:	2106      	movs	r1, #6
   34348:	7059      	strb	r1, [r3, #1]
	return 0;
   3434a:	4616      	mov	r6, r2
}
   3434c:	4630      	mov	r0, r6
   3434e:	b002      	add	sp, #8
   34350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   34354:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   34358:	f362 13c7 	bfi	r3, r2, #7, #1
   3435c:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   34360:	2306      	movs	r3, #6
   34362:	f888 3001 	strb.w	r3, [r8, #1]
   34366:	e7e0      	b.n	3432a <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   34368:	f1b9 0f01 	cmp.w	r9, #1
   3436c:	d0b5      	beq.n	342da <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
   3436e:	f898 2001 	ldrb.w	r2, [r8, #1]
   34372:	b9b2      	cbnz	r2, 343a2 <ll_adv_params_set+0x16a>
			adv->ad_data_backup.len = 0U;
   34374:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   34378:	e7af      	b.n	342da <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3437a:	260c      	movs	r6, #12
}
   3437c:	4630      	mov	r0, r6
   3437e:	b002      	add	sp, #8
   34380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   34384:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   34386:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   3438a:	f367 13c7 	bfi	r3, r7, #7, #1
   3438e:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   34392:	990a      	ldr	r1, [sp, #40]	; 0x28
   34394:	2206      	movs	r2, #6
   34396:	f010 fd93 	bl	44ec0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   3439a:	230c      	movs	r3, #12
   3439c:	f888 3001 	strb.w	r3, [r8, #1]
   343a0:	e7c3      	b.n	3432a <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
   343a2:	2a05      	cmp	r2, #5
   343a4:	d916      	bls.n	343d4 <ll_adv_params_set+0x19c>
			adv->ad_data_backup.len = pdu->len -
   343a6:	3a06      	subs	r2, #6
   343a8:	b2d2      	uxtb	r2, r2
   343aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   343ae:	f108 0108 	add.w	r1, r8, #8
   343b2:	4813      	ldr	r0, [pc, #76]	; (34400 <ll_adv_params_set+0x1c8>)
   343b4:	f010 fd84 	bl	44ec0 <memcpy>
   343b8:	e78f      	b.n	342da <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   343ba:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   343be:	4910      	ldr	r1, [pc, #64]	; (34400 <ll_adv_params_set+0x1c8>)
   343c0:	f108 0008 	add.w	r0, r8, #8
   343c4:	f010 fd7c 	bl	44ec0 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   343c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   343cc:	3306      	adds	r3, #6
   343ce:	f888 3001 	strb.w	r3, [r8, #1]
   343d2:	e7a2      	b.n	3431a <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
   343d4:	4a0b      	ldr	r2, [pc, #44]	; (34404 <ll_adv_params_set+0x1cc>)
   343d6:	490c      	ldr	r1, [pc, #48]	; (34408 <ll_adv_params_set+0x1d0>)
   343d8:	480c      	ldr	r0, [pc, #48]	; (3440c <ll_adv_params_set+0x1d4>)
   343da:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   343de:	f00e fc97 	bl	42d10 <printk>
   343e2:	4040      	eors	r0, r0
   343e4:	f380 8811 	msr	BASEPRI, r0
   343e8:	f04f 0003 	mov.w	r0, #3
   343ec:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   343ee:	f898 2001 	ldrb.w	r2, [r8, #1]
   343f2:	e7d8      	b.n	343a6 <ll_adv_params_set+0x16e>
   343f4:	200025d4 	.word	0x200025d4
   343f8:	00049be0 	.word	0x00049be0
   343fc:	2000263f 	.word	0x2000263f
   34400:	20002615 	.word	0x20002615
   34404:	0004a7c0 	.word	0x0004a7c0
   34408:	0004a8d4 	.word	0x0004a8d4
   3440c:	0004a4a0 	.word	0x0004a4a0

00034410 <ull_adv_init>:
{
   34410:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   34412:	4c06      	ldr	r4, [pc, #24]	; (3442c <ull_adv_init+0x1c>)
   34414:	f104 0028 	add.w	r0, r4, #40	; 0x28
   34418:	f006 fec2 	bl	3b1a0 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   3441c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   34420:	f006 febe 	bl	3b1a0 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   34424:	f7ff fd26 	bl	33e74 <init_set.constprop.0>
}
   34428:	2000      	movs	r0, #0
   3442a:	bd10      	pop	{r4, pc}
   3442c:	200025d4 	.word	0x200025d4

00034430 <ull_adv_reset>:
{
   34430:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   34432:	4b0b      	ldr	r3, [pc, #44]	; (34460 <ull_adv_reset+0x30>)
   34434:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   34438:	07d2      	lsls	r2, r2, #31
   3443a:	d50e      	bpl.n	3445a <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   3443c:	6a1a      	ldr	r2, [r3, #32]
   3443e:	b152      	cbz	r2, 34456 <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   34440:	f892 1020 	ldrb.w	r1, [r2, #32]
   34444:	f041 0102 	orr.w	r1, r1, #2
   34448:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   3444c:	6a1b      	ldr	r3, [r3, #32]
   3444e:	f893 3020 	ldrb.w	r3, [r3, #32]
   34452:	07db      	lsls	r3, r3, #31
   34454:	d401      	bmi.n	3445a <ull_adv_reset+0x2a>
   34456:	f7ff fd79 	bl	33f4c <disable.part.0>
}
   3445a:	2000      	movs	r0, #0
   3445c:	bd08      	pop	{r3, pc}
   3445e:	bf00      	nop
   34460:	200025d4 	.word	0x200025d4

00034464 <ull_adv_reset_finalize>:
{
   34464:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   34466:	4c0a      	ldr	r4, [pc, #40]	; (34490 <ull_adv_reset_finalize+0x2c>)
   34468:	f104 0528 	add.w	r5, r4, #40	; 0x28
   3446c:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   3446e:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   34470:	f006 fea6 	bl	3b1c0 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   34474:	4620      	mov	r0, r4
   34476:	f006 fea3 	bl	3b1c0 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   3447a:	4628      	mov	r0, r5
   3447c:	f006 fe90 	bl	3b1a0 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   34480:	4620      	mov	r0, r4
   34482:	f006 fe8d 	bl	3b1a0 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   34486:	f7ff fcf5 	bl	33e74 <init_set.constprop.0>
}
   3448a:	2000      	movs	r0, #0
   3448c:	bd38      	pop	{r3, r4, r5, pc}
   3448e:	bf00      	nop
   34490:	200025d4 	.word	0x200025d4

00034494 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   34494:	4a03      	ldr	r2, [pc, #12]	; (344a4 <ull_adv_handle_get+0x10>)
   34496:	4b04      	ldr	r3, [pc, #16]	; (344a8 <ull_adv_handle_get+0x14>)
   34498:	1a80      	subs	r0, r0, r2
   3449a:	fba3 3000 	umull	r3, r0, r3, r0
}
   3449e:	f3c0 108f 	ubfx	r0, r0, #6, #16
   344a2:	4770      	bx	lr
   344a4:	200025d4 	.word	0x200025d4
   344a8:	8d3dcb09 	.word	0x8d3dcb09

000344ac <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   344ac:	4a04      	ldr	r2, [pc, #16]	; (344c0 <ull_adv_lll_handle_get+0x14>)
   344ae:	6800      	ldr	r0, [r0, #0]
   344b0:	4b04      	ldr	r3, [pc, #16]	; (344c4 <ull_adv_lll_handle_get+0x18>)
   344b2:	1a80      	subs	r0, r0, r2
   344b4:	fba3 3000 	umull	r3, r0, r3, r0
}
   344b8:	f3c0 108f 	ubfx	r0, r0, #6, #16
   344bc:	4770      	bx	lr
   344be:	bf00      	nop
   344c0:	200025d4 	.word	0x200025d4
   344c4:	8d3dcb09 	.word	0x8d3dcb09

000344c8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   344c8:	b938      	cbnz	r0, 344da <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   344ca:	4805      	ldr	r0, [pc, #20]	; (344e0 <ull_adv_is_enabled_get+0x18>)
   344cc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   344d0:	f013 0f01 	tst.w	r3, #1
   344d4:	bf08      	it	eq
   344d6:	2000      	moveq	r0, #0
   344d8:	4770      	bx	lr
		return NULL;
   344da:	2000      	movs	r0, #0
}
   344dc:	4770      	bx	lr
   344de:	bf00      	nop
   344e0:	200025d4 	.word	0x200025d4

000344e4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   344e4:	b928      	cbnz	r0, 344f2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   344e6:	4b04      	ldr	r3, [pc, #16]	; (344f8 <ull_adv_is_enabled+0x14>)
   344e8:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   344ec:	f000 0001 	and.w	r0, r0, #1
   344f0:	4770      	bx	lr
   344f2:	2000      	movs	r0, #0
}
   344f4:	4770      	bx	lr
   344f6:	bf00      	nop
   344f8:	200025d4 	.word	0x200025d4

000344fc <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   344fc:	b950      	cbnz	r0, 34514 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   344fe:	4b06      	ldr	r3, [pc, #24]	; (34518 <ull_adv_filter_pol_get+0x1c>)
   34500:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   34504:	f010 0001 	ands.w	r0, r0, #1
   34508:	d005      	beq.n	34516 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   3450a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   3450e:	f000 0003 	and.w	r0, r0, #3
   34512:	4770      	bx	lr
		return 0;
   34514:	2000      	movs	r0, #0
}
   34516:	4770      	bx	lr
   34518:	200025d4 	.word	0x200025d4

0003451c <ull_adv_pdu_update_addrs>:
{
   3451c:	b570      	push	{r4, r5, r6, lr}
   3451e:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   34520:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   34524:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   34526:	f005 fd4b 	bl	39fc0 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   3452a:	b310      	cbz	r0, 34572 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   3452c:	7823      	ldrb	r3, [r4, #0]
   3452e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   34532:	4601      	mov	r1, r0
   34534:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   34536:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   34538:	2206      	movs	r2, #6
   3453a:	4630      	mov	r0, r6
   3453c:	f010 fcc0 	bl	44ec0 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   34540:	7823      	ldrb	r3, [r4, #0]
   34542:	f003 030f 	and.w	r3, r3, #15
   34546:	2b01      	cmp	r3, #1
   34548:	d001      	beq.n	3454e <ull_adv_pdu_update_addrs+0x32>
}
   3454a:	4630      	mov	r0, r6
   3454c:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   3454e:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   34552:	f005 fd63 	bl	3a01c <ull_filter_tgta_get>
	if (rx_addr) {
   34556:	4601      	mov	r1, r0
   34558:	2800      	cmp	r0, #0
   3455a:	d0f6      	beq.n	3454a <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   3455c:	7823      	ldrb	r3, [r4, #0]
   3455e:	4620      	mov	r0, r4
   34560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   34564:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   34568:	2206      	movs	r2, #6
   3456a:	f010 fca9 	bl	44ec0 <memcpy>
}
   3456e:	4630      	mov	r0, r6
   34570:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   34572:	7820      	ldrb	r0, [r4, #0]
   34574:	f3c0 1080 	ubfx	r0, r0, #6, #1
   34578:	f7fc fe1a 	bl	311b0 <ll_addr_get>
   3457c:	4601      	mov	r1, r0
	if (rpa) {
   3457e:	e7da      	b.n	34536 <ull_adv_pdu_update_addrs+0x1a>

00034580 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   34580:	291f      	cmp	r1, #31
   34582:	d849      	bhi.n	34618 <ull_adv_data_set+0x98>
{
   34584:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   34586:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3458a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3458e:	b083      	sub	sp, #12
   34590:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   34592:	7833      	ldrb	r3, [r6, #0]
   34594:	f003 030f 	and.w	r3, r3, #15
   34598:	2b01      	cmp	r3, #1
   3459a:	460d      	mov	r5, r1
   3459c:	4604      	mov	r4, r0
   3459e:	4617      	mov	r7, r2
   345a0:	d03c      	beq.n	3461c <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   345a2:	f10d 0107 	add.w	r1, sp, #7
   345a6:	3028      	adds	r0, #40	; 0x28
   345a8:	f006 fe8a 	bl	3b2c0 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   345ac:	4631      	mov	r1, r6
   345ae:	4606      	mov	r6, r0
   345b0:	f811 2b02 	ldrb.w	r2, [r1], #2
   345b4:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   345b8:	f3c2 0303 	ubfx	r3, r2, #0, #4
   345bc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   345c0:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   345c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   345c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
   345cc:	4630      	mov	r0, r6
   345ce:	4313      	orrs	r3, r2
   345d0:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   345d4:	2206      	movs	r2, #6
   345d6:	f010 fc73 	bl	44ec0 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   345da:	462a      	mov	r2, r5
   345dc:	4639      	mov	r1, r7
   345de:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   345e2:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   345e4:	f010 fc6c 	bl	44ec0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   345e8:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   345ea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   345ee:	07db      	lsls	r3, r3, #31
   345f0:	d406      	bmi.n	34600 <ull_adv_data_set+0x80>
	pdu->last = idx;
   345f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   345f6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   345fa:	2000      	movs	r0, #0
}
   345fc:	b003      	add	sp, #12
   345fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   34600:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   34604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   34608:	4631      	mov	r1, r6
   3460a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3460c:	4620      	mov	r0, r4
   3460e:	f7f2 fb63 	bl	26cd8 <ull_adv_time_update>
		if (err) {
   34612:	2800      	cmp	r0, #0
   34614:	d0ed      	beq.n	345f2 <ull_adv_data_set+0x72>
   34616:	e7f1      	b.n	345fc <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   34618:	2012      	movs	r0, #18
}
   3461a:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   3461c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   34620:	460a      	mov	r2, r1
   34622:	3041      	adds	r0, #65	; 0x41
   34624:	4639      	mov	r1, r7
   34626:	f010 fc4b 	bl	44ec0 <memcpy>
		return 0;
   3462a:	2000      	movs	r0, #0
}
   3462c:	b003      	add	sp, #12
   3462e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034630 <ll_adv_data_set>:
{
   34630:	4603      	mov	r3, r0
   34632:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   34634:	4801      	ldr	r0, [pc, #4]	; (3463c <ll_adv_data_set+0xc>)
   34636:	4619      	mov	r1, r3
   34638:	f7ff bfa2 	b.w	34580 <ull_adv_data_set>
   3463c:	200025d4 	.word	0x200025d4

00034640 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   34640:	b5f0      	push	{r4, r5, r6, r7, lr}
   34642:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   34646:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3464a:	b083      	sub	sp, #12
   3464c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   3464e:	460e      	mov	r6, r1
   34650:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   34652:	f10d 0107 	add.w	r1, sp, #7
   34656:	3034      	adds	r0, #52	; 0x34
   34658:	4617      	mov	r7, r2
   3465a:	f006 fe31 	bl	3b2c0 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   3465e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   34660:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   34662:	f811 3b02 	ldrb.w	r3, [r1], #2
   34666:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3466a:	019b      	lsls	r3, r3, #6
   3466c:	f043 0304 	orr.w	r3, r3, #4
   34670:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   34672:	1db3      	adds	r3, r6, #6
   34674:	7043      	strb	r3, [r0, #1]
   34676:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   34678:	3002      	adds	r0, #2
   3467a:	f010 fc21 	bl	44ec0 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   3467e:	4632      	mov	r2, r6
   34680:	4639      	mov	r1, r7
   34682:	f105 0008 	add.w	r0, r5, #8
   34686:	f010 fc1b 	bl	44ec0 <memcpy>
	if (adv->is_enabled) {
   3468a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3468e:	07db      	lsls	r3, r3, #31
   34690:	d50a      	bpl.n	346a8 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   34692:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   34696:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3469a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   3469c:	780b      	ldrb	r3, [r1, #0]
   3469e:	f013 030f 	ands.w	r3, r3, #15
   346a2:	d008      	beq.n	346b6 <ull_scan_rsp_set.part.0+0x76>
   346a4:	2b06      	cmp	r3, #6
   346a6:	d006      	beq.n	346b6 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
   346a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   346ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   346b0:	2000      	movs	r0, #0
}
   346b2:	b003      	add	sp, #12
   346b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   346b6:	462a      	mov	r2, r5
   346b8:	4620      	mov	r0, r4
   346ba:	f7f2 fb0d 	bl	26cd8 <ull_adv_time_update>
			if (err) {
   346be:	2800      	cmp	r0, #0
   346c0:	d0f2      	beq.n	346a8 <ull_scan_rsp_set.part.0+0x68>
   346c2:	e7f6      	b.n	346b2 <ull_scan_rsp_set.part.0+0x72>

000346c4 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   346c4:	281f      	cmp	r0, #31
{
   346c6:	4603      	mov	r3, r0
   346c8:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   346ca:	d803      	bhi.n	346d4 <ll_adv_scan_rsp_set+0x10>
   346cc:	4802      	ldr	r0, [pc, #8]	; (346d8 <ll_adv_scan_rsp_set+0x14>)
   346ce:	4619      	mov	r1, r3
   346d0:	f7ff bfb6 	b.w	34640 <ull_scan_rsp_set.part.0>
}
   346d4:	2012      	movs	r0, #18
   346d6:	4770      	bx	lr
   346d8:	200025d4 	.word	0x200025d4

000346dc <init_reset>:
{
   346dc:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   346de:	4b15      	ldr	r3, [pc, #84]	; (34734 <init_reset+0x58>)
   346e0:	4815      	ldr	r0, [pc, #84]	; (34738 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   346e2:	4c16      	ldr	r4, [pc, #88]	; (3473c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   346e4:	2201      	movs	r2, #1
   346e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   346ea:	f7fb fa27 	bl	2fb3c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   346ee:	4b14      	ldr	r3, [pc, #80]	; (34740 <init_reset+0x64>)
   346f0:	2203      	movs	r2, #3
   346f2:	1d18      	adds	r0, r3, #4
   346f4:	2124      	movs	r1, #36	; 0x24
   346f6:	f7fb fa21 	bl	2fb3c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   346fa:	4b12      	ldr	r3, [pc, #72]	; (34744 <init_reset+0x68>)
   346fc:	2204      	movs	r2, #4
   346fe:	1898      	adds	r0, r3, r2
   34700:	212c      	movs	r1, #44	; 0x2c
   34702:	f7fb fa1b 	bl	2fb3c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   34706:	4b10      	ldr	r3, [pc, #64]	; (34748 <init_reset+0x6c>)
   34708:	2207      	movs	r2, #7
   3470a:	1d18      	adds	r0, r3, #4
   3470c:	2108      	movs	r1, #8
   3470e:	f7fb fa15 	bl	2fb3c <mem_init>
	default_phy_tx |= PHY_2M;
   34712:	490e      	ldr	r1, [pc, #56]	; (3474c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   34714:	4a0e      	ldr	r2, [pc, #56]	; (34750 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   34716:	480f      	ldr	r0, [pc, #60]	; (34754 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   34718:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   3471a:	f04f 0c1b 	mov.w	ip, #27
   3471e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   34722:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   34724:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   34728:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3472a:	f8a0 c000 	strh.w	ip, [r0]
}
   3472e:	2000      	movs	r0, #0
   34730:	bd10      	pop	{r4, pc}
   34732:	bf00      	nop
   34734:	20002664 	.word	0x20002664
   34738:	20001570 	.word	0x20001570
   3473c:	20003b4a 	.word	0x20003b4a
   34740:	2000268c 	.word	0x2000268c
   34744:	200026fc 	.word	0x200026fc
   34748:	200027b0 	.word	0x200027b0
   3474c:	20003c6a 	.word	0x20003c6a
   34750:	20003c69 	.word	0x20003c69
   34754:	20003b4c 	.word	0x20003b4c

00034758 <ctrl_tx_pause_enqueue>:
{
   34758:	b538      	push	{r3, r4, r5, lr}
   3475a:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   3475c:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   34760:	460d      	mov	r5, r1
	if (
   34762:	b11b      	cbz	r3, 3476c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   34764:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   34768:	0789      	lsls	r1, r1, #30
   3476a:	d50c      	bpl.n	34786 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   3476c:	b340      	cbz	r0, 347c0 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   3476e:	2a00      	cmp	r2, #0
   34770:	d130      	bne.n	347d4 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   34772:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34776:	681a      	ldr	r2, [r3, #0]
   34778:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   3477a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   3477c:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   3477e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34782:	b1d3      	cbz	r3, 347ba <ctrl_tx_pause_enqueue+0x62>
}
   34784:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   34786:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   3478a:	07c9      	lsls	r1, r1, #31
   3478c:	d4ee      	bmi.n	3476c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   3478e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   34792:	428b      	cmp	r3, r1
   34794:	d02c      	beq.n	347f0 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   34796:	2800      	cmp	r0, #0
   34798:	d036      	beq.n	34808 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   3479a:	2a00      	cmp	r2, #0
   3479c:	d0e9      	beq.n	34772 <ctrl_tx_pause_enqueue+0x1a>
   3479e:	4a22      	ldr	r2, [pc, #136]	; (34828 <ctrl_tx_pause_enqueue+0xd0>)
   347a0:	4922      	ldr	r1, [pc, #136]	; (3482c <ctrl_tx_pause_enqueue+0xd4>)
   347a2:	4823      	ldr	r0, [pc, #140]	; (34830 <ctrl_tx_pause_enqueue+0xd8>)
   347a4:	f640 236e 	movw	r3, #2670	; 0xa6e
   347a8:	f00e fab2 	bl	42d10 <printk>
   347ac:	4040      	eors	r0, r0
   347ae:	f380 8811 	msr	BASEPRI, r0
   347b2:	f04f 0003 	mov.w	r0, #3
   347b6:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   347b8:	e7db      	b.n	34772 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   347ba:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   347be:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   347c0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   347c2:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   347c6:	2a00      	cmp	r2, #0
   347c8:	d1db      	bne.n	34782 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   347ca:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   347ce:	2b00      	cmp	r3, #0
   347d0:	d1d8      	bne.n	34784 <ctrl_tx_pause_enqueue+0x2c>
   347d2:	e7f2      	b.n	347ba <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   347d4:	4a14      	ldr	r2, [pc, #80]	; (34828 <ctrl_tx_pause_enqueue+0xd0>)
   347d6:	4915      	ldr	r1, [pc, #84]	; (3482c <ctrl_tx_pause_enqueue+0xd4>)
   347d8:	4815      	ldr	r0, [pc, #84]	; (34830 <ctrl_tx_pause_enqueue+0xd8>)
   347da:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   347de:	f00e fa97 	bl	42d10 <printk>
   347e2:	4040      	eors	r0, r0
   347e4:	f380 8811 	msr	BASEPRI, r0
   347e8:	f04f 0003 	mov.w	r0, #3
   347ec:	df02      	svc	2
   347ee:	e7c0      	b.n	34772 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   347f0:	6819      	ldr	r1, [r3, #0]
   347f2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   347f6:	2800      	cmp	r0, #0
   347f8:	d1cf      	bne.n	3479a <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   347fa:	6819      	ldr	r1, [r3, #0]
   347fc:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   347fe:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   34800:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   34802:	2a00      	cmp	r2, #0
   34804:	d0e1      	beq.n	347ca <ctrl_tx_pause_enqueue+0x72>
   34806:	e7bc      	b.n	34782 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34808:	7919      	ldrb	r1, [r3, #4]
   3480a:	f001 0103 	and.w	r1, r1, #3
   3480e:	2903      	cmp	r1, #3
   34810:	d004      	beq.n	3481c <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34812:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   34816:	2a00      	cmp	r2, #0
   34818:	d0ab      	beq.n	34772 <ctrl_tx_pause_enqueue+0x1a>
   3481a:	e7c0      	b.n	3479e <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   3481c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3481e:	2903      	cmp	r1, #3
   34820:	d0eb      	beq.n	347fa <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34822:	290a      	cmp	r1, #10
   34824:	d1f5      	bne.n	34812 <ctrl_tx_pause_enqueue+0xba>
   34826:	e7e8      	b.n	347fa <ctrl_tx_pause_enqueue+0xa2>
   34828:	0004a914 	.word	0x0004a914
   3482c:	0004a954 	.word	0x0004a954
   34830:	0004a4a0 	.word	0x0004a4a0

00034834 <tx_lll_flush>:
{
   34834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   34838:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3483c:	4934      	ldr	r1, [pc, #208]	; (34910 <tx_lll_flush+0xdc>)
{
   3483e:	b083      	sub	sp, #12
   34840:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   34842:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   34846:	4640      	mov	r0, r8
   34848:	f7fb f9de 	bl	2fc08 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   3484c:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   34850:	4629      	mov	r1, r5
   34852:	f007 f93f 	bl	3bad4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   34856:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   34858:	aa01      	add	r2, sp, #4
   3485a:	4631      	mov	r1, r6
   3485c:	f7fb fa14 	bl	2fc88 <memq_dequeue>
	while (link) {
   34860:	b328      	cbz	r0, 348ae <tx_lll_flush+0x7a>
   34862:	4c2c      	ldr	r4, [pc, #176]	; (34914 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   34864:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   34868:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3486c:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   3486e:	f894 c001 	ldrb.w	ip, [r4, #1]
   34872:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   34874:	1c53      	adds	r3, r2, #1
   34876:	b2db      	uxtb	r3, r3
		last = 0U;
   34878:	459c      	cmp	ip, r3
   3487a:	bf08      	it	eq
   3487c:	2300      	moveq	r3, #0
	if (last == first) {
   3487e:	4299      	cmp	r1, r3
   34880:	f894 c000 	ldrb.w	ip, [r4]
   34884:	d033      	beq.n	348ee <tx_lll_flush+0xba>
		lll_tx->node = tx;
   34886:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   34888:	fb12 f20c 	smulbb	r2, r2, ip
   3488c:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   34890:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   34894:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   34896:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   3489a:	6002      	str	r2, [r0, #0]
		tx->next = link;
   3489c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   3489e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   348a0:	70e3      	strb	r3, [r4, #3]
   348a2:	aa01      	add	r2, sp, #4
   348a4:	4631      	mov	r1, r6
   348a6:	f7fb f9ef 	bl	2fc88 <memq_dequeue>
	while (link) {
   348aa:	2800      	cmp	r0, #0
   348ac:	d1de      	bne.n	3486c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   348ae:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   348b2:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   348b6:	b150      	cbz	r0, 348ce <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   348b8:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   348ba:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   348bc:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   348c0:	f7fe febc 	bl	3363c <ull_rx_put>
	ull_rx_sched();
   348c4:	f7fe feca 	bl	3365c <ull_rx_sched>
}
   348c8:	b003      	add	sp, #12
   348ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   348ce:	4a12      	ldr	r2, [pc, #72]	; (34918 <tx_lll_flush+0xe4>)
   348d0:	4912      	ldr	r1, [pc, #72]	; (3491c <tx_lll_flush+0xe8>)
   348d2:	4813      	ldr	r0, [pc, #76]	; (34920 <tx_lll_flush+0xec>)
   348d4:	f640 13da 	movw	r3, #2522	; 0x9da
   348d8:	f00e fa1a 	bl	42d10 <printk>
   348dc:	4040      	eors	r0, r0
   348de:	f380 8811 	msr	BASEPRI, r0
   348e2:	f04f 0003 	mov.w	r0, #3
   348e6:	df02      	svc	2
	link = rx->hdr.link;
   348e8:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   348ec:	e7e4      	b.n	348b8 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   348ee:	4a0a      	ldr	r2, [pc, #40]	; (34918 <tx_lll_flush+0xe4>)
   348f0:	490c      	ldr	r1, [pc, #48]	; (34924 <tx_lll_flush+0xf0>)
   348f2:	480b      	ldr	r0, [pc, #44]	; (34920 <tx_lll_flush+0xec>)
   348f4:	f640 13c6 	movw	r3, #2502	; 0x9c6
   348f8:	f00e fa0a 	bl	42d10 <printk>
   348fc:	4040      	eors	r0, r0
   348fe:	f380 8811 	msr	BASEPRI, r0
   34902:	f04f 0003 	mov.w	r0, #3
   34906:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   34908:	2300      	movs	r3, #0
   3490a:	801b      	strh	r3, [r3, #0]
   3490c:	deff      	udf	#255	; 0xff
   3490e:	bf00      	nop
   34910:	20001570 	.word	0x20001570
   34914:	20000708 	.word	0x20000708
   34918:	0004a914 	.word	0x0004a914
   3491c:	0004a964 	.word	0x0004a964
   34920:	0004a4a0 	.word	0x0004a4a0
   34924:	0004a95c 	.word	0x0004a95c

00034928 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   34928:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   3492c:	f012 0202 	ands.w	r2, r2, #2
   34930:	d00a      	beq.n	34948 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   34932:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   34936:	b1d3      	cbz	r3, 3496e <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   34938:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   3493c:	681a      	ldr	r2, [r3, #0]
   3493e:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   34940:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   34942:	680b      	ldr	r3, [r1, #0]
   34944:	b1d3      	cbz	r3, 3497c <ctrl_tx_sec_enqueue+0x54>
   34946:	4770      	bx	lr
		if (conn->tx_head) {
   34948:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   3494c:	b1cb      	cbz	r3, 34982 <ctrl_tx_sec_enqueue+0x5a>
{
   3494e:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   34950:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   34954:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   34958:	45e6      	cmp	lr, ip
   3495a:	d004      	beq.n	34966 <ctrl_tx_sec_enqueue+0x3e>
   3495c:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   34960:	f1bc 0f03 	cmp.w	ip, #3
   34964:	d010      	beq.n	34988 <ctrl_tx_sec_enqueue+0x60>
}
   34966:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   3496a:	f7ff bef5 	b.w	34758 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   3496e:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   34972:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   34974:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   34978:	2b00      	cmp	r3, #0
   3497a:	d1e4      	bne.n	34946 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   3497c:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   34980:	4770      	bx	lr
	bool pause = false;
   34982:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   34984:	f7ff bee8 	b.w	34758 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   34988:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   3498c:	f00c 0c03 	and.w	ip, ip, #3
   34990:	f1bc 0f03 	cmp.w	ip, #3
   34994:	d1e7      	bne.n	34966 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   34996:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   34998:	2a03      	cmp	r2, #3
   3499a:	d005      	beq.n	349a8 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3499c:	f1a2 020a 	sub.w	r2, r2, #10
   349a0:	fab2 f282 	clz	r2, r2
   349a4:	0952      	lsrs	r2, r2, #5
   349a6:	e7de      	b.n	34966 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   349a8:	2201      	movs	r2, #1
   349aa:	e7dc      	b.n	34966 <ctrl_tx_sec_enqueue+0x3e>

000349ac <ticker_stop_op_cb>:
{
   349ac:	b510      	push	{r4, lr}
   349ae:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   349b0:	b9b0      	cbnz	r0, 349e0 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   349b2:	4b12      	ldr	r3, [pc, #72]	; (349fc <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   349b4:	2200      	movs	r2, #0
   349b6:	2101      	movs	r1, #1
   349b8:	2002      	movs	r0, #2
	mfy.param = param;
   349ba:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   349bc:	f7fb f9c6 	bl	2fd4c <mayfly_enqueue>
	LL_ASSERT(!ret);
   349c0:	b900      	cbnz	r0, 349c4 <ticker_stop_op_cb+0x18>
}
   349c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   349c4:	4a0e      	ldr	r2, [pc, #56]	; (34a00 <ticker_stop_op_cb+0x54>)
   349c6:	490f      	ldr	r1, [pc, #60]	; (34a04 <ticker_stop_op_cb+0x58>)
   349c8:	480f      	ldr	r0, [pc, #60]	; (34a08 <ticker_stop_op_cb+0x5c>)
   349ca:	f44f 6318 	mov.w	r3, #2432	; 0x980
   349ce:	f00e f99f 	bl	42d10 <printk>
   349d2:	4040      	eors	r0, r0
   349d4:	f380 8811 	msr	BASEPRI, r0
   349d8:	f04f 0003 	mov.w	r0, #3
   349dc:	df02      	svc	2
}
   349de:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   349e0:	4a07      	ldr	r2, [pc, #28]	; (34a00 <ticker_stop_op_cb+0x54>)
   349e2:	490a      	ldr	r1, [pc, #40]	; (34a0c <ticker_stop_op_cb+0x60>)
   349e4:	4808      	ldr	r0, [pc, #32]	; (34a08 <ticker_stop_op_cb+0x5c>)
   349e6:	f640 137a 	movw	r3, #2426	; 0x97a
   349ea:	f00e f991 	bl	42d10 <printk>
   349ee:	4040      	eors	r0, r0
   349f0:	f380 8811 	msr	BASEPRI, r0
   349f4:	f04f 0003 	mov.w	r0, #3
   349f8:	df02      	svc	2
   349fa:	e7da      	b.n	349b2 <ticker_stop_op_cb+0x6>
   349fc:	20000790 	.word	0x20000790
   34a00:	0004a914 	.word	0x0004a914
   34a04:	0004a738 	.word	0x0004a738
   34a08:	0004a4a0 	.word	0x0004a4a0
   34a0c:	0004a974 	.word	0x0004a974

00034a10 <disabled_cb>:
{
   34a10:	b508      	push	{r3, lr}
	mfy.param = param;
   34a12:	4b0b      	ldr	r3, [pc, #44]	; (34a40 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34a14:	2200      	movs	r2, #0
	mfy.param = param;
   34a16:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34a18:	4611      	mov	r1, r2
   34a1a:	2001      	movs	r0, #1
   34a1c:	f7fb f996 	bl	2fd4c <mayfly_enqueue>
	LL_ASSERT(!ret);
   34a20:	b900      	cbnz	r0, 34a24 <disabled_cb+0x14>
}
   34a22:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   34a24:	4a07      	ldr	r2, [pc, #28]	; (34a44 <disabled_cb+0x34>)
   34a26:	4908      	ldr	r1, [pc, #32]	; (34a48 <disabled_cb+0x38>)
   34a28:	4808      	ldr	r0, [pc, #32]	; (34a4c <disabled_cb+0x3c>)
   34a2a:	f640 13ac 	movw	r3, #2476	; 0x9ac
   34a2e:	f00e f96f 	bl	42d10 <printk>
   34a32:	4040      	eors	r0, r0
   34a34:	f380 8811 	msr	BASEPRI, r0
   34a38:	f04f 0003 	mov.w	r0, #3
   34a3c:	df02      	svc	2
}
   34a3e:	bd08      	pop	{r3, pc}
   34a40:	20000770 	.word	0x20000770
   34a44:	0004a914 	.word	0x0004a914
   34a48:	0004a738 	.word	0x0004a738
   34a4c:	0004a4a0 	.word	0x0004a4a0

00034a50 <conn_disable>:
{
   34a50:	b538      	push	{r3, r4, r5, lr}
   34a52:	4604      	mov	r4, r0
	return hdr->ref;
   34a54:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   34a58:	b353      	cbz	r3, 34ab0 <conn_disable+0x60>
		mfy.param = &conn->lll;
   34a5a:	4d17      	ldr	r5, [pc, #92]	; (34ab8 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   34a5c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   34a5e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   34a60:	b16b      	cbz	r3, 34a7e <conn_disable+0x2e>
   34a62:	4a16      	ldr	r2, [pc, #88]	; (34abc <conn_disable+0x6c>)
   34a64:	4916      	ldr	r1, [pc, #88]	; (34ac0 <conn_disable+0x70>)
   34a66:	4817      	ldr	r0, [pc, #92]	; (34ac4 <conn_disable+0x74>)
   34a68:	f640 1395 	movw	r3, #2453	; 0x995
   34a6c:	f00e f950 	bl	42d10 <printk>
   34a70:	4040      	eors	r0, r0
   34a72:	f380 8811 	msr	BASEPRI, r0
   34a76:	f04f 0003 	mov.w	r0, #3
   34a7a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   34a7c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   34a7e:	4912      	ldr	r1, [pc, #72]	; (34ac8 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34a80:	4b0d      	ldr	r3, [pc, #52]	; (34ab8 <conn_disable+0x68>)
   34a82:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   34a84:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34a88:	4611      	mov	r1, r2
   34a8a:	2001      	movs	r0, #1
   34a8c:	f7fb f95e 	bl	2fd4c <mayfly_enqueue>
		LL_ASSERT(!ret);
   34a90:	b900      	cbnz	r0, 34a94 <conn_disable+0x44>
}
   34a92:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   34a94:	4a09      	ldr	r2, [pc, #36]	; (34abc <conn_disable+0x6c>)
   34a96:	490d      	ldr	r1, [pc, #52]	; (34acc <conn_disable+0x7c>)
   34a98:	480a      	ldr	r0, [pc, #40]	; (34ac4 <conn_disable+0x74>)
   34a9a:	f640 139c 	movw	r3, #2460	; 0x99c
   34a9e:	f00e f937 	bl	42d10 <printk>
   34aa2:	4040      	eors	r0, r0
   34aa4:	f380 8811 	msr	BASEPRI, r0
   34aa8:	f04f 0003 	mov.w	r0, #3
   34aac:	df02      	svc	2
}
   34aae:	bd38      	pop	{r3, r4, r5, pc}
   34ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   34ab4:	f7ff bfac 	b.w	34a10 <disabled_cb>
   34ab8:	20000780 	.word	0x20000780
   34abc:	0004a914 	.word	0x0004a914
   34ac0:	0004a854 	.word	0x0004a854
   34ac4:	0004a4a0 	.word	0x0004a4a0
   34ac8:	00034a11 	.word	0x00034a11
   34acc:	0004a738 	.word	0x0004a738

00034ad0 <conn_setup_adv_scan_disabled_cb>:
{
   34ad0:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   34ad2:	6883      	ldr	r3, [r0, #8]
   34ad4:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   34ad6:	7f53      	ldrb	r3, [r2, #29]
   34ad8:	09db      	lsrs	r3, r3, #7
   34ada:	d10d      	bne.n	34af8 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   34adc:	4a09      	ldr	r2, [pc, #36]	; (34b04 <conn_setup_adv_scan_disabled_cb+0x34>)
   34ade:	490a      	ldr	r1, [pc, #40]	; (34b08 <conn_setup_adv_scan_disabled_cb+0x38>)
   34ae0:	480a      	ldr	r0, [pc, #40]	; (34b0c <conn_setup_adv_scan_disabled_cb+0x3c>)
   34ae2:	f640 03d5 	movw	r3, #2261	; 0x8d5
   34ae6:	f00e f913 	bl	42d10 <printk>
   34aea:	4040      	eors	r0, r0
   34aec:	f380 8811 	msr	BASEPRI, r0
   34af0:	f04f 0003 	mov.w	r0, #3
   34af4:	df02      	svc	2
}
   34af6:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   34af8:	4601      	mov	r1, r0
}
   34afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   34afe:	3108      	adds	r1, #8
   34b00:	f7f2 bbf2 	b.w	272e8 <ull_periph_setup>
   34b04:	0004a914 	.word	0x0004a914
   34b08:	0004a500 	.word	0x0004a500
   34b0c:	0004a4a0 	.word	0x0004a4a0

00034b10 <ticker_start_conn_op_cb>:
{
   34b10:	b510      	push	{r4, lr}
   34b12:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34b14:	b990      	cbnz	r0, 34b3c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   34b16:	4620      	mov	r0, r4
   34b18:	f7fe fcc6 	bl	334a8 <ull_update_unmark>
	LL_ASSERT(p == param);
   34b1c:	4284      	cmp	r4, r0
   34b1e:	d00c      	beq.n	34b3a <ticker_start_conn_op_cb+0x2a>
   34b20:	4a0d      	ldr	r2, [pc, #52]	; (34b58 <ticker_start_conn_op_cb+0x48>)
   34b22:	490e      	ldr	r1, [pc, #56]	; (34b5c <ticker_start_conn_op_cb+0x4c>)
   34b24:	480e      	ldr	r0, [pc, #56]	; (34b60 <ticker_start_conn_op_cb+0x50>)
   34b26:	f640 03b7 	movw	r3, #2231	; 0x8b7
   34b2a:	f00e f8f1 	bl	42d10 <printk>
   34b2e:	4040      	eors	r0, r0
   34b30:	f380 8811 	msr	BASEPRI, r0
   34b34:	f04f 0003 	mov.w	r0, #3
   34b38:	df02      	svc	2
}
   34b3a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34b3c:	4a06      	ldr	r2, [pc, #24]	; (34b58 <ticker_start_conn_op_cb+0x48>)
   34b3e:	4909      	ldr	r1, [pc, #36]	; (34b64 <ticker_start_conn_op_cb+0x54>)
   34b40:	4807      	ldr	r0, [pc, #28]	; (34b60 <ticker_start_conn_op_cb+0x50>)
   34b42:	f640 03b4 	movw	r3, #2228	; 0x8b4
   34b46:	f00e f8e3 	bl	42d10 <printk>
   34b4a:	4040      	eors	r0, r0
   34b4c:	f380 8811 	msr	BASEPRI, r0
   34b50:	f04f 0003 	mov.w	r0, #3
   34b54:	df02      	svc	2
   34b56:	e7de      	b.n	34b16 <ticker_start_conn_op_cb+0x6>
   34b58:	0004a914 	.word	0x0004a914
   34b5c:	0004a980 	.word	0x0004a980
   34b60:	0004a4a0 	.word	0x0004a4a0
   34b64:	0004a974 	.word	0x0004a974

00034b68 <ticker_stop_conn_op_cb>:
{
   34b68:	b510      	push	{r4, lr}
   34b6a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34b6c:	b990      	cbnz	r0, 34b94 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   34b6e:	4620      	mov	r0, r4
   34b70:	f7fe fc90 	bl	33494 <ull_update_mark>
	LL_ASSERT(p == param);
   34b74:	4284      	cmp	r4, r0
   34b76:	d00c      	beq.n	34b92 <ticker_stop_conn_op_cb+0x2a>
   34b78:	4a0d      	ldr	r2, [pc, #52]	; (34bb0 <ticker_stop_conn_op_cb+0x48>)
   34b7a:	490e      	ldr	r1, [pc, #56]	; (34bb4 <ticker_stop_conn_op_cb+0x4c>)
   34b7c:	480e      	ldr	r0, [pc, #56]	; (34bb8 <ticker_stop_conn_op_cb+0x50>)
   34b7e:	f640 03ad 	movw	r3, #2221	; 0x8ad
   34b82:	f00e f8c5 	bl	42d10 <printk>
   34b86:	4040      	eors	r0, r0
   34b88:	f380 8811 	msr	BASEPRI, r0
   34b8c:	f04f 0003 	mov.w	r0, #3
   34b90:	df02      	svc	2
}
   34b92:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34b94:	4a06      	ldr	r2, [pc, #24]	; (34bb0 <ticker_stop_conn_op_cb+0x48>)
   34b96:	4909      	ldr	r1, [pc, #36]	; (34bbc <ticker_stop_conn_op_cb+0x54>)
   34b98:	4807      	ldr	r0, [pc, #28]	; (34bb8 <ticker_stop_conn_op_cb+0x50>)
   34b9a:	f640 03aa 	movw	r3, #2218	; 0x8aa
   34b9e:	f00e f8b7 	bl	42d10 <printk>
   34ba2:	4040      	eors	r0, r0
   34ba4:	f380 8811 	msr	BASEPRI, r0
   34ba8:	f04f 0003 	mov.w	r0, #3
   34bac:	df02      	svc	2
   34bae:	e7de      	b.n	34b6e <ticker_stop_conn_op_cb+0x6>
   34bb0:	0004a914 	.word	0x0004a914
   34bb4:	0004a980 	.word	0x0004a980
   34bb8:	0004a4a0 	.word	0x0004a4a0
   34bbc:	0004a974 	.word	0x0004a974

00034bc0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   34bc0:	b900      	cbnz	r0, 34bc4 <ticker_update_conn_op_cb+0x4>
   34bc2:	4770      	bx	lr
{
   34bc4:	b510      	push	{r4, lr}
   34bc6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   34bc8:	f7fe fc7a 	bl	334c0 <ull_update_mark_get>
   34bcc:	4284      	cmp	r4, r0
   34bce:	d010      	beq.n	34bf2 <ticker_update_conn_op_cb+0x32>
   34bd0:	f7fe fc5a 	bl	33488 <ull_disable_mark_get>
   34bd4:	4284      	cmp	r4, r0
   34bd6:	d00c      	beq.n	34bf2 <ticker_update_conn_op_cb+0x32>
   34bd8:	4a06      	ldr	r2, [pc, #24]	; (34bf4 <ticker_update_conn_op_cb+0x34>)
   34bda:	4907      	ldr	r1, [pc, #28]	; (34bf8 <ticker_update_conn_op_cb+0x38>)
   34bdc:	4807      	ldr	r0, [pc, #28]	; (34bfc <ticker_update_conn_op_cb+0x3c>)
   34bde:	f640 03a1 	movw	r3, #2209	; 0x8a1
   34be2:	f00e f895 	bl	42d10 <printk>
   34be6:	4040      	eors	r0, r0
   34be8:	f380 8811 	msr	BASEPRI, r0
   34bec:	f04f 0003 	mov.w	r0, #3
   34bf0:	df02      	svc	2
}
   34bf2:	bd10      	pop	{r4, pc}
   34bf4:	0004a914 	.word	0x0004a914
   34bf8:	0004a98c 	.word	0x0004a98c
   34bfc:	0004a4a0 	.word	0x0004a4a0

00034c00 <tx_ull_dequeue>:
{
   34c00:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c02:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
   34c06:	4603      	mov	r3, r0
   34c08:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c0a:	b164      	cbz	r4, 34c26 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   34c0c:	4294      	cmp	r4, r2
   34c0e:	d021      	beq.n	34c54 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c10:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   34c14:	428a      	cmp	r2, r1
   34c16:	d00b      	beq.n	34c30 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   34c18:	6811      	ldr	r1, [r2, #0]
   34c1a:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   34c1e:	2200      	movs	r2, #0
}
   34c20:	bc10      	pop	{r4}
		tx->next = NULL;
   34c22:	6002      	str	r2, [r0, #0]
}
   34c24:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c26:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   34c2a:	4291      	cmp	r1, r2
   34c2c:	d104      	bne.n	34c38 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   34c2e:	b18a      	cbz	r2, 34c54 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   34c30:	6809      	ldr	r1, [r1, #0]
   34c32:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   34c36:	e7ef      	b.n	34c18 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34c38:	7911      	ldrb	r1, [r2, #4]
   34c3a:	f001 0103 	and.w	r1, r1, #3
   34c3e:	2903      	cmp	r1, #3
   34c40:	d013      	beq.n	34c6a <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   34c42:	6812      	ldr	r2, [r2, #0]
   34c44:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   34c48:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   34c4a:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   34c4e:	bc10      	pop	{r4}
		tx->next = tx;
   34c50:	6000      	str	r0, [r0, #0]
}
   34c52:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34c54:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   34c58:	6812      	ldr	r2, [r2, #0]
   34c5a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34c5e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   34c60:	bf18      	it	ne
   34c62:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34c66:	d1f2      	bne.n	34c4e <tx_ull_dequeue+0x4e>
   34c68:	e7ee      	b.n	34c48 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   34c6a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34c6c:	2903      	cmp	r1, #3
   34c6e:	d0d3      	beq.n	34c18 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34c70:	290a      	cmp	r1, #10
   34c72:	d1e6      	bne.n	34c42 <tx_ull_dequeue+0x42>
   34c74:	e7d0      	b.n	34c18 <tx_ull_dequeue+0x18>
   34c76:	bf00      	nop

00034c78 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   34c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34c7a:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   34c7c:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   34c80:	0787      	lsls	r7, r0, #30
{
   34c82:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   34c84:	d433      	bmi.n	34cee <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34c86:	482e      	ldr	r0, [pc, #184]	; (34d40 <reject_ext_ind_send+0xc8>)
   34c88:	4617      	mov	r7, r2
   34c8a:	461e      	mov	r6, r3
   34c8c:	f7fa ff86 	bl	2fb9c <mem_acquire>
	if (!tx) {
   34c90:	2800      	cmp	r0, #0
   34c92:	d038      	beq.n	34d06 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   34c94:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   34c98:	f043 0302 	orr.w	r3, r3, #2
   34c9c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   34ca0:	2303      	movs	r3, #3
   34ca2:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34ca4:	2211      	movs	r2, #17
	    conn->tx_head &&
   34ca6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34caa:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34cac:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   34cae:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   34cb2:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34cb4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   34cb8:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34cba:	7102      	strb	r2, [r0, #4]
	if (
   34cbc:	b1db      	cbz	r3, 34cf6 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   34cbe:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   34cc2:	0796      	lsls	r6, r2, #30
   34cc4:	d417      	bmi.n	34cf6 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   34cc6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   34cca:	07d2      	lsls	r2, r2, #31
   34ccc:	d413      	bmi.n	34cf6 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   34cce:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   34cd2:	4293      	cmp	r3, r2
   34cd4:	d022      	beq.n	34d1c <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   34cd6:	b1c9      	cbz	r1, 34d0c <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   34cd8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34cdc:	681a      	ldr	r2, [r3, #0]
   34cde:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34ce0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34ce2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34ce4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34ce8:	b90b      	cbnz	r3, 34cee <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   34cea:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34cee:	2301      	movs	r3, #1
   34cf0:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   34cf2:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   34cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   34cf6:	2900      	cmp	r1, #0
   34cf8:	d1ee      	bne.n	34cd8 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   34cfa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   34cfc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   34d00:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   34d04:	e7f0      	b.n	34ce8 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   34d06:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   34d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34d0c:	791a      	ldrb	r2, [r3, #4]
   34d0e:	f002 0203 	and.w	r2, r2, #3
   34d12:	2a03      	cmp	r2, #3
   34d14:	d00e      	beq.n	34d34 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34d16:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   34d1a:	e7df      	b.n	34cdc <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   34d1c:	681a      	ldr	r2, [r3, #0]
   34d1e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34d22:	2900      	cmp	r1, #0
   34d24:	d1d8      	bne.n	34cd8 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   34d26:	681a      	ldr	r2, [r3, #0]
   34d28:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   34d2a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34d2c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   34d2e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   34d32:	e7d9      	b.n	34ce8 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   34d34:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34d36:	2a03      	cmp	r2, #3
   34d38:	d0f5      	beq.n	34d26 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34d3a:	2a0a      	cmp	r2, #10
   34d3c:	d1eb      	bne.n	34d16 <reject_ext_ind_send+0x9e>
   34d3e:	e7f2      	b.n	34d26 <reject_ext_ind_send+0xae>
   34d40:	200026fc 	.word	0x200026fc

00034d44 <event_len_prep>:
{
   34d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   34d46:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   34d4a:	f003 0207 	and.w	r2, r3, #7
{
   34d4e:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   34d50:	2a06      	cmp	r2, #6
   34d52:	f200 80d4 	bhi.w	34efe <event_len_prep+0x1ba>
   34d56:	e8df f002 	tbb	[pc, r2]
   34d5a:	4704      	.short	0x4704
   34d5c:	48484747 	.word	0x48484747
   34d60:	47          	.byte	0x47
   34d61:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34d62:	486e      	ldr	r0, [pc, #440]	; (34f1c <event_len_prep+0x1d8>)
   34d64:	f7fa ff1a 	bl	2fb9c <mem_acquire>
		if (!tx) {
   34d68:	2800      	cmp	r0, #0
   34d6a:	d03d      	beq.n	34de8 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34d6c:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34d70:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   34d74:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34d78:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34d7c:	2301      	movs	r3, #1
   34d7e:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   34d82:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34d86:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   34d8a:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   34d8c:	72c3      	strb	r3, [r0, #11]
   34d8e:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34d90:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   34d92:	2309      	movs	r3, #9
   34d94:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   34d96:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34d98:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34d9a:	2214      	movs	r2, #20
	    conn->tx_head &&
   34d9c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34da0:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34da2:	2100      	movs	r1, #0
   34da4:	221b      	movs	r2, #27
   34da6:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   34da8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34dac:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34dae:	7902      	ldrb	r2, [r0, #4]
   34db0:	f042 0203 	orr.w	r2, r2, #3
   34db4:	7102      	strb	r2, [r0, #4]
	if (
   34db6:	b13b      	cbz	r3, 34dc8 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   34db8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   34dbc:	0795      	lsls	r5, r2, #30
   34dbe:	d403      	bmi.n	34dc8 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   34dc0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   34dc4:	07d2      	lsls	r2, r2, #31
   34dc6:	d573      	bpl.n	34eb0 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   34dc8:	2900      	cmp	r1, #0
   34dca:	d07f      	beq.n	34ecc <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   34dcc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34dd0:	681a      	ldr	r2, [r3, #0]
   34dd2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34dd4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34dd6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34dd8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34ddc:	2b00      	cmp	r3, #0
   34dde:	d056      	beq.n	34e8e <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   34de0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   34de4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   34de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34dea:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34dee:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   34df2:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   34df6:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   34dfa:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34dfe:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34e02:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   34e04:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34e08:	d024      	beq.n	34e54 <event_len_prep+0x110>
			conn->llcp_length.state =
   34e0a:	2206      	movs	r2, #6
   34e0c:	f362 0302 	bfi	r3, r2, #0, #3
   34e10:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   34e14:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34e18:	b335      	cbz	r5, 34e68 <event_len_prep+0x124>
   34e1a:	6828      	ldr	r0, [r5, #0]
   34e1c:	b320      	cbz	r0, 34e68 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34e1e:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   34e20:	6842      	ldr	r2, [r0, #4]
   34e22:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34e26:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   34e2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34e2c:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   34e2e:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   34e30:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   34e32:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34e34:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34e36:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34e38:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34e3a:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   34e3e:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34e40:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   34e42:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34e44:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34e46:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   34e48:	f7fe fa42 	bl	332d0 <ll_rx_put>
}
   34e4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   34e50:	f7fe ba48 	b.w	332e4 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   34e54:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   34e58:	b9e2      	cbnz	r2, 34e94 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   34e5a:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   34e5e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   34e62:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   34e66:	e7d5      	b.n	34e14 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   34e68:	4a2d      	ldr	r2, [pc, #180]	; (34f20 <event_len_prep+0x1dc>)
   34e6a:	492e      	ldr	r1, [pc, #184]	; (34f24 <event_len_prep+0x1e0>)
   34e6c:	482e      	ldr	r0, [pc, #184]	; (34f28 <event_len_prep+0x1e4>)
   34e6e:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   34e72:	f00d ff4d 	bl	42d10 <printk>
   34e76:	4040      	eors	r0, r0
   34e78:	f380 8811 	msr	BASEPRI, r0
   34e7c:	f04f 0003 	mov.w	r0, #3
   34e80:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   34e82:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34e84:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34e88:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   34e8c:	e7c7      	b.n	34e1e <event_len_prep+0xda>
		conn->tx_data_last = tx;
   34e8e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   34e92:	e7a5      	b.n	34de0 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   34e94:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   34e98:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34e9a:	f362 0302 	bfi	r3, r2, #0, #3
   34e9e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   34ea2:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   34ea6:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   34eaa:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34eae:	e7b1      	b.n	34e14 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   34eb0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   34eb4:	4293      	cmp	r3, r2
   34eb6:	d00f      	beq.n	34ed8 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   34eb8:	2900      	cmp	r1, #0
   34eba:	d187      	bne.n	34dcc <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34ebc:	791a      	ldrb	r2, [r3, #4]
   34ebe:	f002 0203 	and.w	r2, r2, #3
   34ec2:	2a03      	cmp	r2, #3
   34ec4:	d015      	beq.n	34ef2 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34ec6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   34eca:	e781      	b.n	34dd0 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   34ecc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   34ece:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   34ed2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   34ed6:	e781      	b.n	34ddc <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   34ed8:	681a      	ldr	r2, [r3, #0]
   34eda:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34ede:	2900      	cmp	r1, #0
   34ee0:	f47f af74 	bne.w	34dcc <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   34ee4:	681a      	ldr	r2, [r3, #0]
   34ee6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   34ee8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34eea:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   34eec:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   34ef0:	e774      	b.n	34ddc <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   34ef2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34ef4:	2a03      	cmp	r2, #3
   34ef6:	d0f5      	beq.n	34ee4 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34ef8:	2a0a      	cmp	r2, #10
   34efa:	d1e4      	bne.n	34ec6 <event_len_prep+0x182>
   34efc:	e7f2      	b.n	34ee4 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   34efe:	4a08      	ldr	r2, [pc, #32]	; (34f20 <event_len_prep+0x1dc>)
   34f00:	490a      	ldr	r1, [pc, #40]	; (34f2c <event_len_prep+0x1e8>)
   34f02:	4809      	ldr	r0, [pc, #36]	; (34f28 <event_len_prep+0x1e4>)
   34f04:	f241 03ea 	movw	r3, #4330	; 0x10ea
   34f08:	f00d ff02 	bl	42d10 <printk>
   34f0c:	4040      	eors	r0, r0
   34f0e:	f380 8811 	msr	BASEPRI, r0
   34f12:	f04f 0003 	mov.w	r0, #3
   34f16:	df02      	svc	2
}
   34f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34f1a:	bf00      	nop
   34f1c:	200026fc 	.word	0x200026fc
   34f20:	0004a914 	.word	0x0004a914
   34f24:	0004a9e0 	.word	0x0004a9e0
   34f28:	0004a4a0 	.word	0x0004a4a0
   34f2c:	0004a500 	.word	0x0004a500

00034f30 <event_phy_upd_ind_prep>:
{
   34f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   34f34:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   34f38:	f013 0601 	ands.w	r6, r3, #1
{
   34f3c:	4604      	mov	r4, r0
   34f3e:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   34f40:	f040 8092 	bne.w	35068 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   34f44:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   34f48:	1a69      	subs	r1, r5, r1
   34f4a:	0409      	lsls	r1, r1, #16
   34f4c:	f100 8093 	bmi.w	35076 <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   34f50:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   34f54:	2900      	cmp	r1, #0
   34f56:	f2c0 8110 	blt.w	3517a <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
   34f5a:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   34f5e:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   34f60:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   34f64:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   34f68:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   34f6c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   34f70:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   34f74:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   34f78:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   34f7c:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   34f80:	d17b      	bne.n	3507a <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
   34f82:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   34f86:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   34f8a:	d008      	beq.n	34f9e <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   34f8c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   34f90:	095b      	lsrs	r3, r3, #5
   34f92:	f363 0102 	bfi	r1, r3, #0, #3
   34f96:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   34f9a:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   34f9e:	2d00      	cmp	r5, #0
   34fa0:	f000 80cb 	beq.w	3513a <event_phy_upd_ind_prep+0x20a>
   34fa4:	6828      	ldr	r0, [r5, #0]
   34fa6:	2800      	cmp	r0, #0
   34fa8:	f000 80c7 	beq.w	3513a <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34fac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   34fb0:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   34fb4:	f8d0 c004 	ldr.w	ip, [r0, #4]
   34fb8:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34fbc:	0792      	lsls	r2, r2, #30
   34fbe:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   34fc2:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34fc6:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   34fca:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34fce:	d402      	bmi.n	34fd6 <event_phy_upd_ind_prep+0xa6>
   34fd0:	4599      	cmp	r9, r3
   34fd2:	f000 80ee 	beq.w	351b2 <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
   34fd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   34fd8:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   34fda:	231c      	movs	r3, #28
   34fdc:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   34fde:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   34fe0:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   34fe4:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   34fe8:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   34fea:	4629      	mov	r1, r5
   34fec:	f7fe f970 	bl	332d0 <ll_rx_put>
		rx = conn->llcp_rx;
   34ff0:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34ff4:	2d00      	cmp	r5, #0
   34ff6:	f000 80b1 	beq.w	3515c <event_phy_upd_ind_prep+0x22c>
   34ffa:	6828      	ldr	r0, [r5, #0]
   34ffc:	2800      	cmp	r0, #0
   34ffe:	f000 80ad 	beq.w	3515c <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
   35002:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   35006:	6842      	ldr	r2, [r0, #4]
   35008:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   3500c:	42b3      	cmp	r3, r6
   3500e:	d30a      	bcc.n	35026 <event_phy_upd_ind_prep+0xf6>
   35010:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   35014:	d807      	bhi.n	35026 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   35016:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   3501a:	42bb      	cmp	r3, r7
   3501c:	d303      	bcc.n	35026 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   3501e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   35022:	f240 80ff 	bls.w	35224 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
   35026:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   3502a:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3502e:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   35030:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   35032:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   35034:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   35038:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3503c:	2109      	movs	r1, #9
   3503e:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   35040:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   35044:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   35046:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   3504a:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   3504c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   35050:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   35052:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   35054:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   35056:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   35058:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3505a:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   3505c:	f7fe f938 	bl	332d0 <ll_rx_put>
}
   35060:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   35064:	f7fe b93e 	b.w	332e4 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   35068:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   3506c:	2200      	movs	r2, #0
   3506e:	f7fa fe03 	bl	2fc78 <memq_peek>
   35072:	4606      	mov	r6, r0
   35074:	b150      	cbz	r0, 3508c <event_phy_upd_ind_prep+0x15c>
}
   35076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   3507a:	f3c3 0082 	ubfx	r0, r3, #2, #3
   3507e:	f360 0102 	bfi	r1, r0, #0, #3
   35082:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   35086:	f44f 76a4 	mov.w	r6, #328	; 0x148
   3508a:	e77c      	b.n	34f86 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   3508c:	2002      	movs	r0, #2
   3508e:	f7fe f92f 	bl	332f0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   35092:	4680      	mov	r8, r0
   35094:	2800      	cmp	r0, #0
   35096:	d0ee      	beq.n	35076 <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35098:	4893      	ldr	r0, [pc, #588]	; (352e8 <event_phy_upd_ind_prep+0x3b8>)
   3509a:	f7fa fd7f 	bl	2fb9c <mem_acquire>
		if (!tx) {
   3509e:	4607      	mov	r7, r0
   350a0:	2800      	cmp	r0, #0
   350a2:	d0e8      	beq.n	35076 <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
   350a4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   350a8:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   350ac:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   350b0:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   350b4:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   350b8:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   350bc:	b2db      	uxtb	r3, r3
   350be:	f040 8093 	bne.w	351e8 <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
   350c2:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   350c6:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   350ca:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   350cc:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   350d0:	f100 80ba 	bmi.w	35248 <event_phy_upd_ind_prep+0x318>
   350d4:	4633      	mov	r3, r6
   350d6:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   350d8:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   350da:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   350dc:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
   350de:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   350e0:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
   350e2:	2218      	movs	r2, #24
	    conn->tx_head &&
   350e4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
   350e8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
   350ec:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   350ee:	793a      	ldrb	r2, [r7, #4]
   350f0:	f042 0203 	orr.w	r2, r2, #3
   350f4:	713a      	strb	r2, [r7, #4]
	if (
   350f6:	2b00      	cmp	r3, #0
   350f8:	f000 809d 	beq.w	35236 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
   350fc:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   35100:	0795      	lsls	r5, r2, #30
   35102:	f100 8098 	bmi.w	35236 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
   35106:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   3510a:	07d0      	lsls	r0, r2, #31
   3510c:	f100 8093 	bmi.w	35236 <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
   35110:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   35114:	4293      	cmp	r3, r2
   35116:	f000 80cb 	beq.w	352b0 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
   3511a:	2900      	cmp	r1, #0
   3511c:	f000 80d5 	beq.w	352ca <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
   35120:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   35124:	681a      	ldr	r2, [r3, #0]
   35126:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   35128:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3512a:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3512c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35130:	2b00      	cmp	r3, #0
   35132:	d1a0      	bne.n	35076 <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
   35134:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   35138:	e79d      	b.n	35076 <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
   3513a:	4a6c      	ldr	r2, [pc, #432]	; (352ec <event_phy_upd_ind_prep+0x3bc>)
   3513c:	496c      	ldr	r1, [pc, #432]	; (352f0 <event_phy_upd_ind_prep+0x3c0>)
   3513e:	486d      	ldr	r0, [pc, #436]	; (352f4 <event_phy_upd_ind_prep+0x3c4>)
   35140:	f241 231a 	movw	r3, #4634	; 0x121a
   35144:	f00d fde4 	bl	42d10 <printk>
   35148:	4040      	eors	r0, r0
   3514a:	f380 8811 	msr	BASEPRI, r0
   3514e:	f04f 0003 	mov.w	r0, #3
   35152:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   35154:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   35156:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   3515a:	e727      	b.n	34fac <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   3515c:	4a63      	ldr	r2, [pc, #396]	; (352ec <event_phy_upd_ind_prep+0x3bc>)
   3515e:	4964      	ldr	r1, [pc, #400]	; (352f0 <event_phy_upd_ind_prep+0x3c0>)
   35160:	4864      	ldr	r0, [pc, #400]	; (352f4 <event_phy_upd_ind_prep+0x3c4>)
   35162:	f241 2349 	movw	r3, #4681	; 0x1249
   35166:	f00d fdd3 	bl	42d10 <printk>
   3516a:	4040      	eors	r0, r0
   3516c:	f380 8811 	msr	BASEPRI, r0
   35170:	f04f 0003 	mov.w	r0, #3
   35174:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   35176:	6828      	ldr	r0, [r5, #0]
   35178:	e743      	b.n	35002 <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
   3517a:	f7fe f8d7 	bl	3332c <ll_pdu_rx_alloc>
			if (!rx) {
   3517e:	4605      	mov	r5, r0
   35180:	2800      	cmp	r0, #0
   35182:	f43f af78 	beq.w	35076 <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
   35186:	6803      	ldr	r3, [r0, #0]
   35188:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   3518c:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3518e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   35192:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   35196:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   35198:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   3519c:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3519e:	f6bf aedf 	bge.w	34f60 <event_phy_upd_ind_prep+0x30>
   351a2:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   351a6:	2900      	cmp	r1, #0
   351a8:	f43f aeda 	beq.w	34f60 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   351ac:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   351b0:	e6da      	b.n	34f68 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   351b2:	4588      	cmp	r8, r1
   351b4:	f47f af0f 	bne.w	34fd6 <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   351b8:	2301      	movs	r3, #1
   351ba:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   351bc:	4629      	mov	r1, r5
   351be:	f7fe f887 	bl	332d0 <ll_rx_put>
				rx = conn->llcp_rx;
   351c2:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   351c6:	2d00      	cmp	r5, #0
   351c8:	d063      	beq.n	35292 <event_phy_upd_ind_prep+0x362>
   351ca:	6828      	ldr	r0, [r5, #0]
   351cc:	2800      	cmp	r0, #0
   351ce:	d060      	beq.n	35292 <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
   351d0:	6842      	ldr	r2, [r0, #4]
   351d2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   351d6:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   351d8:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   351da:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   351dc:	f7fe f878 	bl	332d0 <ll_rx_put>
}
   351e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   351e4:	f7fe b87e 	b.w	332e4 <ll_rx_sched>
							 lll->latency +
   351e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   351ea:	1da9      	adds	r1, r5, #6
   351ec:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   351ee:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   351f2:	f7fe f89b 	bl	3332c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   351f6:	f8d8 3000 	ldr.w	r3, [r8]
   351fa:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   351fe:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   35200:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   35204:	f7fe f892 	bl	3332c <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   35208:	6803      	ldr	r3, [r0, #0]
   3520a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   3520e:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   35210:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   35214:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   35218:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3521c:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   35220:	095b      	lsrs	r3, r3, #5
   35222:	e759      	b.n	350d8 <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35224:	2301      	movs	r3, #1
   35226:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   35228:	4629      	mov	r1, r5
   3522a:	f7fe f851 	bl	332d0 <ll_rx_put>
}
   3522e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   35232:	f7fe b857 	b.w	332e4 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   35236:	2900      	cmp	r1, #0
   35238:	f47f af72 	bne.w	35120 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
   3523c:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3523e:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   35242:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   35246:	e773      	b.n	35130 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
   35248:	f7fe f870 	bl	3332c <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   3524c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3524e:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35252:	231c      	movs	r3, #28
				upd->status = 0U;
   35254:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35258:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   3525c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   35260:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   35264:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35268:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   3526c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   35270:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35274:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   35278:	4641      	mov	r1, r8
   3527a:	f7fe f829 	bl	332d0 <ll_rx_put>
				ll_rx_sched();
   3527e:	f7fe f831 	bl	332e4 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   35282:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   35286:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3528a:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3528e:	095b      	lsrs	r3, r3, #5
   35290:	e722      	b.n	350d8 <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
   35292:	4a16      	ldr	r2, [pc, #88]	; (352ec <event_phy_upd_ind_prep+0x3bc>)
   35294:	4916      	ldr	r1, [pc, #88]	; (352f0 <event_phy_upd_ind_prep+0x3c0>)
   35296:	4817      	ldr	r0, [pc, #92]	; (352f4 <event_phy_upd_ind_prep+0x3c4>)
   35298:	f241 232c 	movw	r3, #4652	; 0x122c
   3529c:	f00d fd38 	bl	42d10 <printk>
   352a0:	4040      	eors	r0, r0
   352a2:	f380 8811 	msr	BASEPRI, r0
   352a6:	f04f 0003 	mov.w	r0, #3
   352aa:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   352ac:	6828      	ldr	r0, [r5, #0]
   352ae:	e78f      	b.n	351d0 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
   352b0:	681a      	ldr	r2, [r3, #0]
   352b2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   352b6:	2900      	cmp	r1, #0
   352b8:	f47f af32 	bne.w	35120 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
   352bc:	681a      	ldr	r2, [r3, #0]
   352be:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   352c0:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   352c2:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   352c4:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   352c8:	e732      	b.n	35130 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   352ca:	791a      	ldrb	r2, [r3, #4]
   352cc:	f002 0203 	and.w	r2, r2, #3
   352d0:	2a03      	cmp	r2, #3
   352d2:	d002      	beq.n	352da <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   352d4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   352d8:	e722      	b.n	35120 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
   352da:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   352dc:	2a03      	cmp	r2, #3
   352de:	d0ed      	beq.n	352bc <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   352e0:	2a0a      	cmp	r2, #10
   352e2:	d1f7      	bne.n	352d4 <event_phy_upd_ind_prep+0x3a4>
   352e4:	e7ea      	b.n	352bc <event_phy_upd_ind_prep+0x38c>
   352e6:	bf00      	nop
   352e8:	200026fc 	.word	0x200026fc
   352ec:	0004a914 	.word	0x0004a914
   352f0:	0004a9e0 	.word	0x0004a9e0
   352f4:	0004a4a0 	.word	0x0004a4a0

000352f8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   352f8:	4801      	ldr	r0, [pc, #4]	; (35300 <ll_conn_acquire+0x8>)
   352fa:	f7fa bc4f 	b.w	2fb9c <mem_acquire>
   352fe:	bf00      	nop
   35300:	20002664 	.word	0x20002664

00035304 <ll_conn_release>:
	mem_release(conn, &conn_free);
   35304:	4901      	ldr	r1, [pc, #4]	; (3530c <ll_conn_release+0x8>)
   35306:	f7fa bc63 	b.w	2fbd0 <mem_release>
   3530a:	bf00      	nop
   3530c:	20002664 	.word	0x20002664

00035310 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   35310:	4902      	ldr	r1, [pc, #8]	; (3531c <ll_conn_handle_get+0xc>)
   35312:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   35316:	f7fa bc77 	b.w	2fc08 <mem_index_get>
   3531a:	bf00      	nop
   3531c:	20001570 	.word	0x20001570

00035320 <ll_conn_get>:
{
   35320:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35322:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35326:	4801      	ldr	r0, [pc, #4]	; (3532c <ll_conn_get+0xc>)
   35328:	f7fa bc6a 	b.w	2fc00 <mem_get>
   3532c:	20001570 	.word	0x20001570

00035330 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35330:	b958      	cbnz	r0, 3534a <ll_connected_get+0x1a>
{
   35332:	b508      	push	{r3, lr}
   35334:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35336:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3533a:	4805      	ldr	r0, [pc, #20]	; (35350 <ll_connected_get+0x20>)
   3533c:	f7fa fc60 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   35340:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35342:	b903      	cbnz	r3, 35346 <ll_connected_get+0x16>
}
   35344:	bd08      	pop	{r3, pc}
		return NULL;
   35346:	2000      	movs	r0, #0
}
   35348:	bd08      	pop	{r3, pc}
		return NULL;
   3534a:	2000      	movs	r0, #0
}
   3534c:	4770      	bx	lr
   3534e:	bf00      	nop
   35350:	20001570 	.word	0x20001570

00035354 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   35354:	4801      	ldr	r0, [pc, #4]	; (3535c <ll_tx_mem_acquire+0x8>)
   35356:	f7fa bc21 	b.w	2fb9c <mem_acquire>
   3535a:	bf00      	nop
   3535c:	2000268c 	.word	0x2000268c

00035360 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   35360:	4901      	ldr	r1, [pc, #4]	; (35368 <ll_tx_mem_release+0x8>)
   35362:	f7fa bc35 	b.w	2fbd0 <mem_release>
   35366:	bf00      	nop
   35368:	2000268c 	.word	0x2000268c

0003536c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3536c:	2800      	cmp	r0, #0
   3536e:	d13f      	bne.n	353f0 <ll_tx_mem_enqueue+0x84>
{
   35370:	b570      	push	{r4, r5, r6, lr}
   35372:	4602      	mov	r2, r0
   35374:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35376:	4820      	ldr	r0, [pc, #128]	; (353f8 <ll_tx_mem_enqueue+0x8c>)
   35378:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3537c:	f7fa fc40 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   35380:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35382:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   35384:	bb72      	cbnz	r2, 353e4 <ll_tx_mem_enqueue+0x78>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   35386:	4c1d      	ldr	r4, [pc, #116]	; (353fc <ll_tx_mem_enqueue+0x90>)
   35388:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   3538c:	7861      	ldrb	r1, [r4, #1]
   3538e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   35390:	f10c 0301 	add.w	r3, ip, #1
   35394:	b2db      	uxtb	r3, r3
		last = 0U;
   35396:	4299      	cmp	r1, r3
   35398:	bf08      	it	eq
   3539a:	2300      	moveq	r3, #0
   3539c:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
   3539e:	4299      	cmp	r1, r3
   353a0:	d023      	beq.n	353ea <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   353a2:	fb1c fc00 	smulbb	ip, ip, r0
   353a6:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
   353a8:	f820 200c 	strh.w	r2, [r0, ip]
   353ac:	4484      	add	ip, r0
	lll_tx->node = tx;
   353ae:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   353b2:	70e3      	strb	r3, [r4, #3]
   353b4:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   353b6:	b92b      	cbnz	r3, 353c4 <ll_tx_mem_enqueue+0x58>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   353b8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   353bc:	2b00      	cmp	r3, #0
   353be:	db0b      	blt.n	353d8 <ll_tx_mem_enqueue+0x6c>
	return 0;
   353c0:	2000      	movs	r0, #0
}
   353c2:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   353c4:	4b0e      	ldr	r3, [pc, #56]	; (35400 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   353c6:	2101      	movs	r1, #1
   353c8:	2003      	movs	r0, #3
		mfy.param = conn;
   353ca:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   353cc:	f7fa fcbe 	bl	2fd4c <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   353d0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   353d4:	2b00      	cmp	r3, #0
   353d6:	daf3      	bge.n	353c0 <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
   353d8:	4628      	mov	r0, r5
   353da:	2100      	movs	r1, #0
   353dc:	f003 ff24 	bl	39228 <ull_periph_latency_cancel>
	return 0;
   353e0:	2000      	movs	r0, #0
}
   353e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   353e4:	f06f 0015 	mvn.w	r0, #21
}
   353e8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   353ea:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   353ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   353f0:	f06f 0015 	mvn.w	r0, #21
}
   353f4:	4770      	bx	lr
   353f6:	bf00      	nop
   353f8:	20001570 	.word	0x20001570
   353fc:	2000074c 	.word	0x2000074c
   35400:	200007a0 	.word	0x200007a0

00035404 <ll_conn_update>:
{
   35404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35408:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   3540c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   35410:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   35414:	2800      	cmp	r0, #0
   35416:	d155      	bne.n	354c4 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35418:	460c      	mov	r4, r1
   3541a:	4615      	mov	r5, r2
   3541c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35420:	4602      	mov	r2, r0
   35422:	4841      	ldr	r0, [pc, #260]	; (35528 <ll_conn_update+0x124>)
   35424:	461e      	mov	r6, r3
   35426:	f7fa fbeb 	bl	2fc00 <mem_get>
   3542a:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   3542c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3542e:	2800      	cmp	r0, #0
   35430:	d148      	bne.n	354c4 <ll_conn_update+0xc0>
	if (!cmd) {
   35432:	bb3c      	cbnz	r4, 35484 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   35434:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   35438:	0699      	lsls	r1, r3, #26
   3543a:	d44a      	bmi.n	354d2 <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   3543c:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   35440:	07da      	lsls	r2, r3, #31
   35442:	d442      	bmi.n	354ca <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   35444:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   35448:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   3544c:	4293      	cmp	r3, r2
   3544e:	d136      	bne.n	354be <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   35450:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35454:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   35458:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   3545c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   35460:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   35462:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35466:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   35468:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   3546c:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   35470:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   35474:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   35478:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3547c:	db4e      	blt.n	3551c <ll_conn_update+0x118>
	return 0;
   3547e:	2000      	movs	r0, #0
}
   35480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   35484:	3c01      	subs	r4, #1
		if (cmd) {
   35486:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   3548a:	d0db      	beq.n	35444 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   3548c:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
   35490:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
   35494:	429a      	cmp	r2, r3
   35496:	d012      	beq.n	354be <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   35498:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   3549c:	f003 020f 	and.w	r2, r3, #15
   354a0:	2a03      	cmp	r2, #3
   354a2:	d10c      	bne.n	354be <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   354a4:	f004 040f 	and.w	r4, r4, #15
   354a8:	f023 031f 	bic.w	r3, r3, #31
   354ac:	f044 0410 	orr.w	r4, r4, #16
   354b0:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   354b2:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   354b6:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   354ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   354be:	200c      	movs	r0, #12
}
   354c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   354c4:	2002      	movs	r0, #2
}
   354c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   354ca:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   354ce:	079b      	lsls	r3, r3, #30
   354d0:	d4b8      	bmi.n	35444 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   354d2:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   354d6:	2b00      	cmp	r3, #0
   354d8:	db1e      	blt.n	35518 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   354da:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   354de:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   354e2:	4293      	cmp	r3, r2
   354e4:	d1eb      	bne.n	354be <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   354e6:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   354ea:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   354ee:	3301      	adds	r3, #1
   354f0:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   354f4:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   354f8:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   354fa:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   354fe:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   35500:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   35504:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   35508:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3550c:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   35510:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   35514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   35518:	201a      	movs	r0, #26
   3551a:	e7d1      	b.n	354c0 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   3551c:	4660      	mov	r0, ip
   3551e:	2100      	movs	r1, #0
   35520:	f003 fe82 	bl	39228 <ull_periph_latency_cancel>
	return 0;
   35524:	2000      	movs	r0, #0
   35526:	e7cb      	b.n	354c0 <ll_conn_update+0xbc>
   35528:	20001570 	.word	0x20001570

0003552c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3552c:	b9d0      	cbnz	r0, 35564 <ll_chm_get+0x38>
{
   3552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35530:	4602      	mov	r2, r0
   35532:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35534:	480c      	ldr	r0, [pc, #48]	; (35568 <ll_chm_get+0x3c>)
   35536:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3553a:	f7fa fb61 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   3553e:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35540:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   35542:	b96e      	cbnz	r6, 35560 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   35544:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   35548:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   3554c:	2205      	movs	r2, #5
   3554e:	4639      	mov	r1, r7
   35550:	4628      	mov	r0, r5
   35552:	f00f fcb5 	bl	44ec0 <memcpy>
	} while (conn->chm_updated);
   35556:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   3555a:	2800      	cmp	r0, #0
   3555c:	d1f4      	bne.n	35548 <ll_chm_get+0x1c>
}
   3555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35560:	2002      	movs	r0, #2
}
   35562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35564:	2002      	movs	r0, #2
}
   35566:	4770      	bx	lr
   35568:	20001570 	.word	0x20001570

0003556c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3556c:	2800      	cmp	r0, #0
   3556e:	d13e      	bne.n	355ee <ll_terminate_ind_send+0x82>
{
   35570:	b510      	push	{r4, lr}
   35572:	4602      	mov	r2, r0
   35574:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35576:	4821      	ldr	r0, [pc, #132]	; (355fc <ll_terminate_ind_send+0x90>)
   35578:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3557c:	f7fa fb40 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   35580:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35582:	bb93      	cbnz	r3, 355ea <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   35584:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   35588:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   3558c:	429a      	cmp	r2, r3
   3558e:	d12a      	bne.n	355e6 <ll_terminate_ind_send+0x7a>
	switch (reason) {
   35590:	2c29      	cmp	r4, #41	; 0x29
   35592:	d819      	bhi.n	355c8 <ll_terminate_ind_send+0x5c>
   35594:	2c04      	cmp	r4, #4
   35596:	d919      	bls.n	355cc <ll_terminate_ind_send+0x60>
   35598:	1f62      	subs	r2, r4, #5
   3559a:	2a24      	cmp	r2, #36	; 0x24
   3559c:	d816      	bhi.n	355cc <ll_terminate_ind_send+0x60>
   3559e:	e8df f002 	tbb	[pc, r2]
   355a2:	1517      	.short	0x1517
   355a4:	15151515 	.word	0x15151515
   355a8:	15151515 	.word	0x15151515
   355ac:	15151515 	.word	0x15151515
   355b0:	15171717 	.word	0x15171717
   355b4:	17151515 	.word	0x17151515
   355b8:	15151515 	.word	0x15151515
   355bc:	15151515 	.word	0x15151515
   355c0:	15151515 	.word	0x15151515
   355c4:	1515      	.short	0x1515
   355c6:	17          	.byte	0x17
   355c7:	00          	.byte	0x00
   355c8:	2c3b      	cmp	r4, #59	; 0x3b
   355ca:	d001      	beq.n	355d0 <ll_terminate_ind_send+0x64>
   355cc:	2012      	movs	r0, #18
}
   355ce:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   355d0:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   355d4:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   355d8:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   355da:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   355dc:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   355e0:	db07      	blt.n	355f2 <ll_terminate_ind_send+0x86>
	return 0;
   355e2:	2000      	movs	r0, #0
}
   355e4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   355e6:	200c      	movs	r0, #12
}
   355e8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   355ea:	2002      	movs	r0, #2
}
   355ec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   355ee:	2002      	movs	r0, #2
}
   355f0:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   355f2:	2100      	movs	r1, #0
   355f4:	f003 fe18 	bl	39228 <ull_periph_latency_cancel>
	return 0;
   355f8:	2000      	movs	r0, #0
}
   355fa:	bd10      	pop	{r4, pc}
   355fc:	20001570 	.word	0x20001570

00035600 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35600:	bb00      	cbnz	r0, 35644 <ll_feature_req_send+0x44>
{
   35602:	b510      	push	{r4, lr}
   35604:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35606:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3560a:	480f      	ldr	r0, [pc, #60]	; (35648 <ll_feature_req_send+0x48>)
   3560c:	f7fa faf8 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   35610:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   35612:	b984      	cbnz	r4, 35636 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   35614:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   35618:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   3561c:	428a      	cmp	r2, r1
   3561e:	d108      	bne.n	35632 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35620:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   35624:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35626:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   35628:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3562c:	db05      	blt.n	3563a <ll_feature_req_send+0x3a>
	return 0;
   3562e:	4620      	mov	r0, r4
}
   35630:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   35632:	200c      	movs	r0, #12
}
   35634:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35636:	2002      	movs	r0, #2
}
   35638:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3563a:	4621      	mov	r1, r4
   3563c:	f003 fdf4 	bl	39228 <ull_periph_latency_cancel>
	return 0;
   35640:	4620      	mov	r0, r4
}
   35642:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35644:	2002      	movs	r0, #2
}
   35646:	4770      	bx	lr
   35648:	20001570 	.word	0x20001570

0003564c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3564c:	bb00      	cbnz	r0, 35690 <ll_version_ind_send+0x44>
{
   3564e:	b510      	push	{r4, lr}
   35650:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35652:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35656:	480f      	ldr	r0, [pc, #60]	; (35694 <ll_version_ind_send+0x48>)
   35658:	f7fa fad2 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   3565c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   3565e:	b984      	cbnz	r4, 35682 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   35660:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   35664:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   35668:	428a      	cmp	r2, r1
   3566a:	d108      	bne.n	3567e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3566c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   35670:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35672:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   35674:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35678:	db05      	blt.n	35686 <ll_version_ind_send+0x3a>
	return 0;
   3567a:	4620      	mov	r0, r4
}
   3567c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3567e:	200c      	movs	r0, #12
}
   35680:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35682:	2002      	movs	r0, #2
}
   35684:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   35686:	4621      	mov	r1, r4
   35688:	f003 fdce 	bl	39228 <ull_periph_latency_cancel>
	return 0;
   3568c:	4620      	mov	r0, r4
}
   3568e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35690:	2002      	movs	r0, #2
}
   35692:	4770      	bx	lr
   35694:	20001570 	.word	0x20001570

00035698 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35698:	2800      	cmp	r0, #0
   3569a:	d14c      	bne.n	35736 <ll_length_req_send+0x9e>
{
   3569c:	b538      	push	{r3, r4, r5, lr}
   3569e:	460d      	mov	r5, r1
   356a0:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   356a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   356a6:	4602      	mov	r2, r0
   356a8:	4824      	ldr	r0, [pc, #144]	; (3573c <ll_length_req_send+0xa4>)
   356aa:	f7fa faa9 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   356ae:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   356b0:	bbc3      	cbnz	r3, 35724 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   356b2:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   356b6:	071a      	lsls	r2, r3, #28
   356b8:	d432      	bmi.n	35720 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   356ba:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   356be:	07d1      	lsls	r1, r2, #31
   356c0:	d503      	bpl.n	356ca <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   356c2:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   356c6:	0692      	lsls	r2, r2, #26
   356c8:	d52a      	bpl.n	35720 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   356ca:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   356ce:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   356d2:	428a      	cmp	r2, r1
   356d4:	d011      	beq.n	356fa <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   356d6:	f003 0307 	and.w	r3, r3, #7
   356da:	2b03      	cmp	r3, #3
   356dc:	d004      	beq.n	356e8 <ll_length_req_send+0x50>
   356de:	3303      	adds	r3, #3
   356e0:	f003 0307 	and.w	r3, r3, #7
   356e4:	2b01      	cmp	r3, #1
   356e6:	d824      	bhi.n	35732 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   356e8:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   356ec:	bb0b      	cbnz	r3, 35732 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   356ee:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   356f2:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   356f6:	4618      	mov	r0, r3
}
   356f8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   356fa:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   356fe:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   35702:	f36f 0302 	bfc	r3, #0, #3
   35706:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3570a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   3570e:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   35712:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35714:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   35716:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3571a:	db05      	blt.n	35728 <ll_length_req_send+0x90>
	return 0;
   3571c:	2000      	movs	r0, #0
}
   3571e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   35720:	201a      	movs	r0, #26
}
   35722:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35724:	2002      	movs	r0, #2
}
   35726:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   35728:	2100      	movs	r1, #0
   3572a:	f003 fd7d 	bl	39228 <ull_periph_latency_cancel>
	return 0;
   3572e:	2000      	movs	r0, #0
}
   35730:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   35732:	200c      	movs	r0, #12
}
   35734:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35736:	2002      	movs	r0, #2
}
   35738:	4770      	bx	lr
   3573a:	bf00      	nop
   3573c:	20001570 	.word	0x20001570

00035740 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   35740:	4a03      	ldr	r2, [pc, #12]	; (35750 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   35742:	4b04      	ldr	r3, [pc, #16]	; (35754 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   35744:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   35746:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   35748:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   3574a:	800b      	strh	r3, [r1, #0]
}
   3574c:	4770      	bx	lr
   3574e:	bf00      	nop
   35750:	20003b4a 	.word	0x20003b4a
   35754:	20003b4c 	.word	0x20003b4c

00035758 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   35758:	4a02      	ldr	r2, [pc, #8]	; (35764 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   3575a:	4b03      	ldr	r3, [pc, #12]	; (35768 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   3575c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   3575e:	8019      	strh	r1, [r3, #0]
}
   35760:	2000      	movs	r0, #0
   35762:	4770      	bx	lr
   35764:	20003b4a 	.word	0x20003b4a
   35768:	20003b4c 	.word	0x20003b4c

0003576c <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3576c:	f04f 0c1b 	mov.w	ip, #27
   35770:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35774:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   35778:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3577c:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3577e:	8018      	strh	r0, [r3, #0]
}
   35780:	4770      	bx	lr
   35782:	bf00      	nop

00035784 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35784:	b9c0      	cbnz	r0, 357b8 <ll_phy_get+0x34>
{
   35786:	b538      	push	{r3, r4, r5, lr}
   35788:	460d      	mov	r5, r1
   3578a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3578c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35790:	4602      	mov	r2, r0
   35792:	480a      	ldr	r0, [pc, #40]	; (357bc <ll_phy_get+0x38>)
   35794:	f7fa fa34 	bl	2fc00 <mem_get>
   35798:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3579a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3579c:	b950      	cbnz	r0, 357b4 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   3579e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   357a2:	f3c2 0202 	ubfx	r2, r2, #0, #3
   357a6:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   357a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   357ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
   357b0:	7023      	strb	r3, [r4, #0]
}
   357b2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   357b4:	2002      	movs	r0, #2
}
   357b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   357b8:	2002      	movs	r0, #2
}
   357ba:	4770      	bx	lr
   357bc:	20001570 	.word	0x20001570

000357c0 <ll_phy_default_set>:
	default_phy_tx = tx;
   357c0:	4a02      	ldr	r2, [pc, #8]	; (357cc <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   357c2:	4b03      	ldr	r3, [pc, #12]	; (357d0 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   357c4:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   357c6:	7019      	strb	r1, [r3, #0]
}
   357c8:	2000      	movs	r0, #0
   357ca:	4770      	bx	lr
   357cc:	20003c6a 	.word	0x20003c6a
   357d0:	20003c69 	.word	0x20003c69

000357d4 <ll_phy_req_send>:
{
   357d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   357d6:	2800      	cmp	r0, #0
   357d8:	d143      	bne.n	35862 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   357da:	460c      	mov	r4, r1
   357dc:	4616      	mov	r6, r2
   357de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   357e2:	4602      	mov	r2, r0
   357e4:	4823      	ldr	r0, [pc, #140]	; (35874 <ll_phy_req_send+0xa0>)
   357e6:	461f      	mov	r7, r3
   357e8:	f7fa fa0a 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   357ec:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   357ee:	bbc3      	cbnz	r3, 35862 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   357f0:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   357f4:	f015 0508 	ands.w	r5, r5, #8
   357f8:	d130      	bne.n	3585c <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   357fa:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   357fe:	07db      	lsls	r3, r3, #31
   35800:	d504      	bpl.n	3580c <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   35802:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   35806:	f413 6f10 	tst.w	r3, #2304	; 0x900
   3580a:	d027      	beq.n	3585c <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   3580c:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   35810:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   35814:	4299      	cmp	r1, r3
   35816:	d11e      	bne.n	35856 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   35818:	f004 0407 	and.w	r4, r4, #7
   3581c:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   35820:	00a4      	lsls	r4, r4, #2
   35822:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   35826:	f007 0307 	and.w	r3, r7, #7
   3582a:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   3582e:	f006 0601 	and.w	r6, r6, #1
   35832:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   35836:	f022 0207 	bic.w	r2, r2, #7
   3583a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   3583e:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35840:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   35844:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   35848:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3584a:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   3584c:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35850:	db0a      	blt.n	35868 <ll_phy_req_send+0x94>
}
   35852:	4628      	mov	r0, r5
   35854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   35856:	250c      	movs	r5, #12
}
   35858:	4628      	mov	r0, r5
   3585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3585c:	251a      	movs	r5, #26
}
   3585e:	4628      	mov	r0, r5
   35860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35862:	2502      	movs	r5, #2
}
   35864:	4628      	mov	r0, r5
   35866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   35868:	2100      	movs	r1, #0
   3586a:	f003 fcdd 	bl	39228 <ull_periph_latency_cancel>
}
   3586e:	4628      	mov	r0, r5
   35870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35872:	bf00      	nop
   35874:	20001570 	.word	0x20001570

00035878 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35878:	b9d8      	cbnz	r0, 358b2 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3587a:	4602      	mov	r2, r0
{
   3587c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3587e:	480e      	ldr	r0, [pc, #56]	; (358b8 <ll_apto_get+0x40>)
   35880:	460c      	mov	r4, r1
   35882:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35886:	f7fa f9bb 	bl	2fc00 <mem_get>
   3588a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   3588c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3588e:	b970      	cbnz	r0, 358ae <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   35890:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   35894:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   35896:	fb02 f303 	mul.w	r3, r2, r3
   3589a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   3589e:	4a07      	ldr	r2, [pc, #28]	; (358bc <ll_apto_get+0x44>)
   358a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   358a4:	fba2 2303 	umull	r2, r3, r2, r3
   358a8:	099b      	lsrs	r3, r3, #6
   358aa:	8023      	strh	r3, [r4, #0]
}
   358ac:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   358ae:	2002      	movs	r0, #2
}
   358b0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   358b2:	2002      	movs	r0, #2
}
   358b4:	4770      	bx	lr
   358b6:	bf00      	nop
   358b8:	20001570 	.word	0x20001570
   358bc:	10624dd3 	.word	0x10624dd3

000358c0 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   358c0:	b9e0      	cbnz	r0, 358fc <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   358c2:	4602      	mov	r2, r0
{
   358c4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   358c6:	480e      	ldr	r0, [pc, #56]	; (35900 <ll_apto_set+0x40>)
   358c8:	460c      	mov	r4, r1
   358ca:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   358ce:	f7fa f997 	bl	2fc00 <mem_get>
   358d2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   358d4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   358d6:	b978      	cbnz	r0, 358f8 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   358d8:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   358dc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   358e0:	fb03 fc0c 	mul.w	ip, r3, ip
   358e4:	f242 7310 	movw	r3, #10000	; 0x2710
   358e8:	fb03 c304 	mla	r3, r3, r4, ip
   358ec:	3b01      	subs	r3, #1
   358ee:	fbb3 f3fc 	udiv	r3, r3, ip
   358f2:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   358f6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   358f8:	2002      	movs	r0, #2
}
   358fa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   358fc:	2002      	movs	r0, #2
}
   358fe:	4770      	bx	lr
   35900:	20001570 	.word	0x20001570

00035904 <ull_conn_init>:
	err = init_reset();
   35904:	f7fe beea 	b.w	346dc <init_reset>

00035908 <ull_conn_reset>:
{
   35908:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3590a:	2200      	movs	r2, #0
   3590c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35910:	4815      	ldr	r0, [pc, #84]	; (35968 <ull_conn_reset+0x60>)
   35912:	f7fa f975 	bl	2fc00 <mem_get>
   35916:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   35918:	f100 021c 	add.w	r2, r0, #28
   3591c:	4601      	mov	r1, r0
   3591e:	2003      	movs	r0, #3
   35920:	f7fd fe12 	bl	33548 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   35924:	b108      	cbz	r0, 3592a <ull_conn_reset+0x22>
   35926:	3078      	adds	r0, #120	; 0x78
   35928:	d10f      	bne.n	3594a <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
   3592a:	4810      	ldr	r0, [pc, #64]	; (3596c <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
   3592c:	4910      	ldr	r1, [pc, #64]	; (35970 <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
   3592e:	4a11      	ldr	r2, [pc, #68]	; (35974 <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
   35930:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   35932:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   35936:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   35938:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   3593a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3593e:	6763      	str	r3, [r4, #116]	; 0x74
}
   35940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   35944:	6013      	str	r3, [r2, #0]
	err = init_reset();
   35946:	f7fe bec9 	b.w	346dc <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3594a:	4a0b      	ldr	r2, [pc, #44]	; (35978 <ull_conn_reset+0x70>)
   3594c:	490b      	ldr	r1, [pc, #44]	; (3597c <ull_conn_reset+0x74>)
   3594e:	480c      	ldr	r0, [pc, #48]	; (35980 <ull_conn_reset+0x78>)
   35950:	f640 03e3 	movw	r3, #2275	; 0x8e3
   35954:	f00d f9dc 	bl	42d10 <printk>
   35958:	4040      	eors	r0, r0
   3595a:	f380 8811 	msr	BASEPRI, r0
   3595e:	f04f 0003 	mov.w	r0, #3
   35962:	df02      	svc	2
   35964:	e7e1      	b.n	3592a <ull_conn_reset+0x22>
   35966:	bf00      	nop
   35968:	20001570 	.word	0x20001570
   3596c:	2000074c 	.word	0x2000074c
   35970:	20000708 	.word	0x20000708
   35974:	20002668 	.word	0x20002668
   35978:	0004a914 	.word	0x0004a914
   3597c:	0004aa24 	.word	0x0004aa24
   35980:	0004a4a0 	.word	0x0004a4a0

00035984 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   35984:	4b01      	ldr	r3, [pc, #4]	; (3598c <ull_conn_default_tx_octets_get+0x8>)
}
   35986:	8818      	ldrh	r0, [r3, #0]
   35988:	4770      	bx	lr
   3598a:	bf00      	nop
   3598c:	20003b4a 	.word	0x20003b4a

00035990 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   35990:	4b01      	ldr	r3, [pc, #4]	; (35998 <ull_conn_default_tx_time_get+0x8>)
}
   35992:	8818      	ldrh	r0, [r3, #0]
   35994:	4770      	bx	lr
   35996:	bf00      	nop
   35998:	20003b4c 	.word	0x20003b4c

0003599c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3599c:	4b01      	ldr	r3, [pc, #4]	; (359a4 <ull_conn_default_phy_tx_get+0x8>)
}
   3599e:	7818      	ldrb	r0, [r3, #0]
   359a0:	4770      	bx	lr
   359a2:	bf00      	nop
   359a4:	20003c6a 	.word	0x20003c6a

000359a8 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   359a8:	4b01      	ldr	r3, [pc, #4]	; (359b0 <ull_conn_default_phy_rx_get+0x8>)
}
   359aa:	7818      	ldrb	r0, [r3, #0]
   359ac:	4770      	bx	lr
   359ae:	bf00      	nop
   359b0:	20003c69 	.word	0x20003c69

000359b4 <ull_conn_setup>:
{
   359b4:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   359b6:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   359b8:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   359ba:	681d      	ldr	r5, [r3, #0]
   359bc:	782b      	ldrb	r3, [r5, #0]
{
   359be:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   359c0:	b193      	cbz	r3, 359e8 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   359c2:	696b      	ldr	r3, [r5, #20]
   359c4:	b163      	cbz	r3, 359e0 <ull_conn_setup+0x2c>
   359c6:	4a0b      	ldr	r2, [pc, #44]	; (359f4 <ull_conn_setup+0x40>)
   359c8:	490b      	ldr	r1, [pc, #44]	; (359f8 <ull_conn_setup+0x44>)
   359ca:	480c      	ldr	r0, [pc, #48]	; (359fc <ull_conn_setup+0x48>)
   359cc:	f240 33ed 	movw	r3, #1005	; 0x3ed
   359d0:	f00d f99e 	bl	42d10 <printk>
   359d4:	4040      	eors	r0, r0
   359d6:	f380 8811 	msr	BASEPRI, r0
   359da:	f04f 0003 	mov.w	r0, #3
   359de:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   359e0:	4b07      	ldr	r3, [pc, #28]	; (35a00 <ull_conn_setup+0x4c>)
   359e2:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   359e6:	bd38      	pop	{r3, r4, r5, pc}
   359e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   359ec:	4608      	mov	r0, r1
   359ee:	f7ff b86f 	b.w	34ad0 <conn_setup_adv_scan_disabled_cb>
   359f2:	bf00      	nop
   359f4:	0004a914 	.word	0x0004a914
   359f8:	0004a854 	.word	0x0004a854
   359fc:	0004a4a0 	.word	0x0004a4a0
   35a00:	00034ad1 	.word	0x00034ad1

00035a04 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   35a04:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   35a06:	88da      	ldrh	r2, [r3, #6]
   35a08:	2a00      	cmp	r2, #0
   35a0a:	f040 80cd 	bne.w	35ba8 <ull_conn_rx+0x1a4>
{
   35a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a12:	460e      	mov	r6, r1
   35a14:	b085      	sub	sp, #20
   35a16:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35a18:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35a1c:	48bb      	ldr	r0, [pc, #748]	; (35d0c <ull_conn_rx+0x308>)
   35a1e:	f7fa f8ef 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   35a22:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35a24:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   35a26:	2b00      	cmp	r3, #0
   35a28:	f040 80b7 	bne.w	35b9a <ull_conn_rx+0x196>
	pdu_rx = (void *)(*rx)->pdu;
   35a2c:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35a2e:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   35a32:	7f29      	ldrb	r1, [r5, #28]
   35a34:	f001 0103 	and.w	r1, r1, #3
   35a38:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35a3a:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   35a3e:	d128      	bne.n	35a92 <ull_conn_rx+0x8e>
	opcode = pdu_rx->llctrl.opcode;
   35a40:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   35a44:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35a48:	b3c8      	cbz	r0, 35abe <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   35a4a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35a4e:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   35a50:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   35a54:	f2c0 80ac 	blt.w	35bb0 <ull_conn_rx+0x1ac>
	return (!conn->lll.role &&
   35a58:	2900      	cmp	r1, #0
   35a5a:	f040 80fd 	bne.w	35c58 <ull_conn_rx+0x254>
		((!conn->llcp_enc.refresh &&
   35a5e:	f1b8 0f02 	cmp.w	r8, #2
   35a62:	f000 810d 	beq.w	35c80 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   35a66:	f1b8 0f05 	cmp.w	r8, #5
   35a6a:	d04a      	beq.n	35b02 <ull_conn_rx+0xfe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   35a6c:	f1b8 0f06 	cmp.w	r8, #6
   35a70:	f000 836a 	beq.w	36148 <ull_conn_rx+0x744>
   35a74:	f1b8 0f0d 	cmp.w	r8, #13
   35a78:	f000 81da 	beq.w	35e30 <ull_conn_rx+0x42c>
   35a7c:	f1b8 0f11 	cmp.w	r8, #17
   35a80:	f000 826c 	beq.w	35f5c <ull_conn_rx+0x558>
		conn->llcp_terminate.reason_final =
   35a84:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35a86:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   35a88:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   35a8c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35a8e:	712b      	strb	r3, [r5, #4]
		return 0;
   35a90:	e007      	b.n	35aa2 <ull_conn_rx+0x9e>
	switch (pdu_rx->ll_id) {
   35a92:	b949      	cbnz	r1, 35aa8 <ull_conn_rx+0xa4>
		if (conn->llcp_enc.pause_rx) {
   35a94:	b110      	cbz	r0, 35a9c <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
   35a96:	233d      	movs	r3, #61	; 0x3d
   35a98:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35a9c:	2301      	movs	r3, #1
   35a9e:	712b      	strb	r3, [r5, #4]
	return 0;
   35aa0:	2000      	movs	r0, #0
}
   35aa2:	b005      	add	sp, #20
   35aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   35aa8:	2800      	cmp	r0, #0
   35aaa:	d0f9      	beq.n	35aa0 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_final =
   35aac:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35aae:	2201      	movs	r2, #1
	return 0;
   35ab0:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
   35ab2:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35ab6:	712a      	strb	r2, [r5, #4]
}
   35ab8:	b005      	add	sp, #20
   35aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   35abe:	f1b8 0f18 	cmp.w	r8, #24
   35ac2:	d81e      	bhi.n	35b02 <ull_conn_rx+0xfe>
   35ac4:	e8df f018 	tbh	[pc, r8, lsl #1]
   35ac8:	02800126 	.word	0x02800126
   35acc:	001900dc 	.word	0x001900dc
   35ad0:	001d001d 	.word	0x001d001d
   35ad4:	03e80340 	.word	0x03e80340
   35ad8:	0303036b 	.word	0x0303036b
   35adc:	047a02ba 	.word	0x047a02ba
   35ae0:	01b401f7 	.word	0x01b401f7
   35ae4:	019f001d 	.word	0x019f001d
   35ae8:	024a001d 	.word	0x024a001d
   35aec:	01950226 	.word	0x01950226
   35af0:	00e800e8 	.word	0x00e800e8
   35af4:	001d044b 	.word	0x001d044b
   35af8:	040e      	.short	0x040e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   35afa:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35afe:	2b00      	cmp	r3, #0
   35b00:	db63      	blt.n	35bca <ull_conn_rx+0x1c6>
	if (conn->common.txn_lock) {
   35b02:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35b06:	0798      	lsls	r0, r3, #30
   35b08:	d4c8      	bmi.n	35a9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35b0a:	4881      	ldr	r0, [pc, #516]	; (35d10 <ull_conn_rx+0x30c>)
   35b0c:	f7fa f846 	bl	2fb9c <mem_acquire>
	if (!tx) {
   35b10:	2800      	cmp	r0, #0
   35b12:	f000 851f 	beq.w	36554 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   35b16:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35b1a:	f043 0302 	orr.w	r3, r3, #2
   35b1e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   35b22:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   35b24:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   35b28:	f043 0303 	orr.w	r3, r3, #3
   35b2c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   35b2e:	2302      	movs	r3, #2
   35b30:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   35b32:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   35b36:	2307      	movs	r3, #7
   35b38:	71c3      	strb	r3, [r0, #7]
	if (
   35b3a:	b1f2      	cbz	r2, 35b7a <ull_conn_rx+0x176>
	    !conn->llcp_enc.pause_tx &&
   35b3c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   35b40:	0799      	lsls	r1, r3, #30
   35b42:	d41a      	bmi.n	35b7a <ull_conn_rx+0x176>
	    !conn->llcp_phy.pause_tx &&
   35b44:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   35b48:	07db      	lsls	r3, r3, #31
   35b4a:	d416      	bmi.n	35b7a <ull_conn_rx+0x176>
		if (conn->tx_head == conn->tx_data) {
   35b4c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   35b50:	429a      	cmp	r2, r3
   35b52:	f000 8508 	beq.w	36566 <ull_conn_rx+0xb62>
		} else if (!conn->tx_ctrl) {
   35b56:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   35b5a:	2b00      	cmp	r3, #0
   35b5c:	f000 8556 	beq.w	3660c <ull_conn_rx+0xc08>
	tx->next = conn->tx_ctrl_last->next;
   35b60:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   35b64:	6813      	ldr	r3, [r2, #0]
   35b66:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   35b68:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   35b6a:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   35b6c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35b70:	2a00      	cmp	r2, #0
   35b72:	d193      	bne.n	35a9c <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
   35b74:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35b78:	e790      	b.n	35a9c <ull_conn_rx+0x98>
		if (!conn->tx_ctrl) {
   35b7a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   35b7e:	2b00      	cmp	r3, #0
   35b80:	f000 84de 	beq.w	36540 <ull_conn_rx+0xb3c>
	tx->next = conn->tx_ctrl_last->next;
   35b84:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   35b88:	681a      	ldr	r2, [r3, #0]
   35b8a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   35b8c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   35b8e:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   35b90:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35b94:	2a00      	cmp	r2, #0
   35b96:	d181      	bne.n	35a9c <ull_conn_rx+0x98>
   35b98:	e7ec      	b.n	35b74 <ull_conn_rx+0x170>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35b9a:	6833      	ldr	r3, [r6, #0]
   35b9c:	2201      	movs	r2, #1
		return 0;
   35b9e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35ba0:	711a      	strb	r2, [r3, #4]
}
   35ba2:	b005      	add	sp, #20
   35ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35ba8:	2201      	movs	r2, #1
   35baa:	711a      	strb	r2, [r3, #4]
		return 0;
   35bac:	2000      	movs	r0, #0
}
   35bae:	4770      	bx	lr
	       (conn->lll.role &&
   35bb0:	2900      	cmp	r1, #0
   35bb2:	d05d      	beq.n	35c70 <ull_conn_rx+0x26c>
		 (conn->llcp_enc.refresh &&
   35bb4:	f1b8 0f02 	cmp.w	r8, #2
   35bb8:	d062      	beq.n	35c80 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   35bba:	f1b8 0f0b 	cmp.w	r8, #11
   35bbe:	f000 84e5 	beq.w	3658c <ull_conn_rx+0xb88>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   35bc2:	f1b8 0f03 	cmp.w	r8, #3
   35bc6:	f47f af51 	bne.w	35a6c <ull_conn_rx+0x68>
		if (!conn->lll.role ||
   35bca:	7f6b      	ldrb	r3, [r5, #29]
   35bcc:	2b17      	cmp	r3, #23
   35bce:	d198      	bne.n	35b02 <ull_conn_rx+0xfe>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   35bd0:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35bd4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35bd8:	1a9b      	subs	r3, r3, r2
   35bda:	f003 0303 	and.w	r3, r3, #3
   35bde:	2b02      	cmp	r3, #2
   35be0:	f001 8190 	beq.w	36f04 <ull_conn_rx+0x1500>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   35be4:	2208      	movs	r2, #8
   35be6:	f105 0120 	add.w	r1, r5, #32
   35bea:	f204 1069 	addw	r0, r4, #361	; 0x169
   35bee:	f00f f967 	bl	44ec0 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   35bf2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35bf6:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   35bfa:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   35bfe:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   35c02:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35c06:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   35c08:	2301      	movs	r3, #1
   35c0a:	f363 0201 	bfi	r2, r3, #0, #2
   35c0e:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35c12:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   35c14:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   35c18:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   35c1a:	3b02      	subs	r3, #2
   35c1c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   35c20:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   35c22:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   35c26:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   35c2a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   35c2e:	f00f f947 	bl	44ec0 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   35c32:	2204      	movs	r2, #4
   35c34:	f105 0132 	add.w	r1, r5, #50	; 0x32
   35c38:	f104 0094 	add.w	r0, r4, #148	; 0x94
   35c3c:	f00f f940 	bl	44ec0 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   35c40:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   35c44:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   35c48:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   35c4c:	f043 0301 	orr.w	r3, r3, #1
   35c50:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   35c54:	2000      	movs	r0, #0

		break;
   35c56:	e724      	b.n	35aa2 <ull_conn_rx+0x9e>
		 (conn->llcp_enc.refresh &&
   35c58:	f1b8 0f02 	cmp.w	r8, #2
   35c5c:	d010      	beq.n	35c80 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   35c5e:	f1b8 0f0b 	cmp.w	r8, #11
   35c62:	f000 847b 	beq.w	3655c <ull_conn_rx+0xb58>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   35c66:	f1b8 0f04 	cmp.w	r8, #4
   35c6a:	f47f aefc 	bne.w	35a66 <ull_conn_rx+0x62>
   35c6e:	e748      	b.n	35b02 <ull_conn_rx+0xfe>
		((!conn->llcp_enc.refresh &&
   35c70:	f1b8 0f07 	cmp.w	r8, #7
   35c74:	f000 8310 	beq.w	36298 <ull_conn_rx+0x894>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   35c78:	f1b8 0f02 	cmp.w	r8, #2
   35c7c:	f47f aef6 	bne.w	35a6c <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   35c80:	7f6b      	ldrb	r3, [r5, #29]
   35c82:	2b02      	cmp	r3, #2
   35c84:	f47f af3d 	bne.w	35b02 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_final =
   35c88:	f895 2020 	ldrb.w	r2, [r5, #32]
   35c8c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35c90:	2301      	movs	r3, #1
	int nack = 0;
   35c92:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35c94:	712b      	strb	r3, [r5, #4]
}
   35c96:	e704      	b.n	35aa2 <ull_conn_rx+0x9e>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   35c98:	7f6b      	ldrb	r3, [r5, #29]
   35c9a:	2b09      	cmp	r3, #9
   35c9c:	f47f af31 	bne.w	35b02 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   35ca0:	f1b8 0f14 	cmp.w	r8, #20
   35ca4:	f000 84bc 	beq.w	36620 <ull_conn_rx+0xc1c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   35ca8:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   35cac:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   35cb0:	4293      	cmp	r3, r2
   35cb2:	f001 804e 	beq.w	36d52 <ull_conn_rx+0x134e>
	eff_rx_octets = conn->lll.max_rx_octets;
   35cb6:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   35cba:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   35cbe:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   35cc2:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   35cc6:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   35cca:	2300      	movs	r3, #0
	       tx) ||
   35ccc:	f001 0107 	and.w	r1, r1, #7
   35cd0:	2902      	cmp	r1, #2
   35cd2:	f000 84c5 	beq.w	36660 <ull_conn_rx+0xc5c>
   35cd6:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   35cda:	f1b8 0f15 	cmp.w	r8, #21
   35cde:	f43f aedf 	beq.w	35aa0 <ull_conn_rx+0x9c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   35ce2:	4618      	mov	r0, r3
   35ce4:	490a      	ldr	r1, [pc, #40]	; (35d10 <ull_conn_rx+0x30c>)
   35ce6:	f7f9 ff73 	bl	2fbd0 <mem_release>
			if (conn->llcp_length.state ==
   35cea:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   35cee:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35cf2:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   35cf6:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   35cfa:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   35cfc:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35d00:	f47f aece 	bne.w	35aa0 <ull_conn_rx+0x9c>
				return -EBUSY;
   35d04:	f06f 000f 	mvn.w	r0, #15
   35d08:	e6cb      	b.n	35aa2 <ull_conn_rx+0x9e>
   35d0a:	bf00      	nop
   35d0c:	20001570 	.word	0x20001570
   35d10:	200026fc 	.word	0x200026fc
		if (!conn->lll.role ||
   35d14:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35d18:	2b00      	cmp	r3, #0
   35d1a:	f6bf aef2 	bge.w	35b02 <ull_conn_rx+0xfe>
   35d1e:	7f6b      	ldrb	r3, [r5, #29]
   35d20:	2b0c      	cmp	r3, #12
   35d22:	f47f aeee 	bne.w	35b02 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   35d26:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   35d2a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   35d2c:	1ad3      	subs	r3, r2, r3
   35d2e:	041b      	lsls	r3, r3, #16
   35d30:	f100 8748 	bmi.w	36bc4 <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   35d34:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35d38:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   35d3c:	1a5b      	subs	r3, r3, r1
   35d3e:	f003 0303 	and.w	r3, r3, #3
   35d42:	2b02      	cmp	r3, #2
   35d44:	f000 87c8 	beq.w	36cd8 <ull_conn_rx+0x12d4>
	if (!conn_upd_curr) {
   35d48:	4bba      	ldr	r3, [pc, #744]	; (36034 <ull_conn_rx+0x630>)
   35d4a:	6819      	ldr	r1, [r3, #0]
   35d4c:	2900      	cmp	r1, #0
   35d4e:	f000 87ed 	beq.w	36d2c <ull_conn_rx+0x1328>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   35d52:	f895 3020 	ldrb.w	r3, [r5, #32]
   35d56:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   35d5a:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   35d5e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   35d62:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   35d66:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   35d6a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   35d6e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   35d72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   35d76:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   35d7a:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   35d7e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   35d82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   35d86:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   35d8a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   35d8e:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   35d92:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   35d96:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   35d9a:	f023 030f 	bic.w	r3, r3, #15
   35d9e:	f043 0308 	orr.w	r3, r3, #8
   35da2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   35da6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   35daa:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   35dae:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   35db2:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   35db4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   35db8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   35dbc:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   35dbe:	6832      	ldr	r2, [r6, #0]
   35dc0:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   35dc2:	6832      	ldr	r2, [r6, #0]
   35dc4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   35dc8:	2300      	movs	r3, #0
   35dca:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   35dcc:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   35dd0:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   35dd4:	4293      	cmp	r3, r2
   35dd6:	d007      	beq.n	35de8 <ull_conn_rx+0x3e4>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   35dd8:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   35ddc:	f003 030e 	and.w	r3, r3, #14
   35de0:	2b04      	cmp	r3, #4
   35de2:	d101      	bne.n	35de8 <ull_conn_rx+0x3e4>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   35de4:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   35de8:	2300      	movs	r3, #0
   35dea:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   35dee:	4618      	mov	r0, r3
		break;
   35df0:	e657      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   35df2:	7f6a      	ldrb	r2, [r5, #29]
   35df4:	2a01      	cmp	r2, #1
   35df6:	f47f ae84 	bne.w	35b02 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   35dfa:	2300      	movs	r3, #0
   35dfc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   35e00:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35e02:	712a      	strb	r2, [r5, #4]
		break;
   35e04:	e64d      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   35e06:	7f6b      	ldrb	r3, [r5, #29]
   35e08:	2b18      	cmp	r3, #24
   35e0a:	f47f ae7a 	bne.w	35b02 <ull_conn_rx+0xfe>
	return conn_upd_curr && (conn_upd_curr != conn);
   35e0e:	4889      	ldr	r0, [pc, #548]	; (36034 <ull_conn_rx+0x630>)
   35e10:	6803      	ldr	r3, [r0, #0]
   35e12:	2b00      	cmp	r3, #0
   35e14:	f000 83c6 	beq.w	365a4 <ull_conn_rx+0xba0>
   35e18:	429c      	cmp	r4, r3
   35e1a:	f000 83c3 	beq.w	365a4 <ull_conn_rx+0xba0>
			nack = reject_ext_ind_send(conn, *rx,
   35e1e:	2320      	movs	r3, #32
   35e20:	220f      	movs	r2, #15
   35e22:	4629      	mov	r1, r5
   35e24:	4620      	mov	r0, r4
}
   35e26:	b005      	add	sp, #20
   35e28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   35e2c:	f7fe bf24 	b.w	34c78 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   35e30:	7f6b      	ldrb	r3, [r5, #29]
   35e32:	2b02      	cmp	r3, #2
   35e34:	f47f ae65 	bne.w	35b02 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   35e38:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   35e3c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   35e40:	4293      	cmp	r3, r2
   35e42:	d004      	beq.n	35e4e <ull_conn_rx+0x44a>
   35e44:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   35e48:	2b03      	cmp	r3, #3
   35e4a:	f000 86a5 	beq.w	36b98 <ull_conn_rx+0x1194>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   35e4e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   35e52:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   35e56:	4293      	cmp	r3, r2
   35e58:	f000 84ef 	beq.w	3683a <ull_conn_rx+0xe36>
		rej_ext_ind->error_code = rej_ind->error_code;
   35e5c:	f895 1020 	ldrb.w	r1, [r5, #32]
   35e60:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   35e64:	2923      	cmp	r1, #35	; 0x23
   35e66:	d012      	beq.n	35e8e <ull_conn_rx+0x48a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   35e68:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   35e6c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35e70:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   35e74:	f36f 0200 	bfc	r2, #0, #1
   35e78:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   35e7c:	2200      	movs	r2, #0
   35e7e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35e82:	f3c3 0202 	ubfx	r2, r3, #0, #3
   35e86:	f362 1306 	bfi	r3, r2, #4, #3
   35e8a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   35e8e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   35e92:	075e      	lsls	r6, r3, #29
   35e94:	f57f ae02 	bpl.w	35a9c <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35e98:	231c      	movs	r3, #28
   35e9a:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   35e9c:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   35e9e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   35ea2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35ea6:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   35ea8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   35eac:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   35eb0:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   35eb2:	77ab      	strb	r3, [r5, #30]
	if (err) {
   35eb4:	e5f5      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   35eb6:	7f6e      	ldrb	r6, [r5, #29]
   35eb8:	2e06      	cmp	r6, #6
   35eba:	f47f ae22 	bne.w	35b02 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   35ebe:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   35ec2:	07df      	lsls	r7, r3, #31
   35ec4:	f140 85ae 	bpl.w	36a24 <ull_conn_rx+0x1020>
	} else if (!conn->llcp_version.rx) {
   35ec8:	f013 0302 	ands.w	r3, r3, #2
   35ecc:	f47f ade6 	bne.w	35a9c <ull_conn_rx+0x98>
		conn->llcp_version.ack = conn->llcp_version.req;
   35ed0:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   35ed4:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   35ed8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   35edc:	f895 3020 	ldrb.w	r3, [r5, #32]
   35ee0:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   35ee4:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   35ee8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   35eec:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   35ef0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   35ef4:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   35ef8:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   35efc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   35f00:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   35f04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   35f08:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   35f0c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   35f10:	2000      	movs	r0, #0
   35f12:	e5c6      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   35f14:	7f6f      	ldrb	r7, [r5, #29]
   35f16:	2f01      	cmp	r7, #1
   35f18:	f47f adf3 	bne.w	35b02 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
   35f1c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35f20:	f013 0602 	ands.w	r6, r3, #2
   35f24:	f040 85a9 	bne.w	36a7a <ull_conn_rx+0x1076>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35f28:	4843      	ldr	r0, [pc, #268]	; (36038 <ull_conn_rx+0x634>)
   35f2a:	f7f9 fe37 	bl	2fb9c <mem_acquire>
	if (!tx) {
   35f2e:	4601      	mov	r1, r0
   35f30:	2800      	cmp	r0, #0
   35f32:	f000 830f 	beq.w	36554 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   35f36:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35f3a:	f043 0302 	orr.w	r3, r3, #2
   35f3e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35f42:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   35f44:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35f46:	f043 0303 	orr.w	r3, r3, #3
   35f4a:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   35f4c:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   35f4e:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   35f50:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   35f52:	f7fe fce9 	bl	34928 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35f56:	712f      	strb	r7, [r5, #4]
	return 0;
   35f58:	4630      	mov	r0, r6
   35f5a:	e5a2      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   35f5c:	7f6b      	ldrb	r3, [r5, #29]
   35f5e:	2b03      	cmp	r3, #3
   35f60:	f47f adcf 	bne.w	35b02 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   35f64:	f895 3020 	ldrb.w	r3, [r5, #32]
   35f68:	3b03      	subs	r3, #3
   35f6a:	2b13      	cmp	r3, #19
   35f6c:	f63f ad96 	bhi.w	35a9c <ull_conn_rx+0x98>
   35f70:	a201      	add	r2, pc, #4	; (adr r2, 35f78 <ull_conn_rx+0x574>)
   35f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   35f76:	bf00      	nop
   35f78:	000364b3 	.word	0x000364b3
   35f7c:	00035a9d 	.word	0x00035a9d
   35f80:	00035a9d 	.word	0x00035a9d
   35f84:	00035a9d 	.word	0x00035a9d
   35f88:	00035a9d 	.word	0x00035a9d
   35f8c:	00035a9d 	.word	0x00035a9d
   35f90:	00035a9d 	.word	0x00035a9d
   35f94:	00035a9d 	.word	0x00035a9d
   35f98:	00035a9d 	.word	0x00035a9d
   35f9c:	00035a9d 	.word	0x00035a9d
   35fa0:	00035a9d 	.word	0x00035a9d
   35fa4:	00035a9d 	.word	0x00035a9d
   35fa8:	00036439 	.word	0x00036439
   35fac:	00035a9d 	.word	0x00035a9d
   35fb0:	00035a9d 	.word	0x00035a9d
   35fb4:	00035a9d 	.word	0x00035a9d
   35fb8:	00035a9d 	.word	0x00035a9d
   35fbc:	000363fb 	.word	0x000363fb
   35fc0:	00035a9d 	.word	0x00035a9d
   35fc4:	000364f3 	.word	0x000364f3
		if (!conn->lll.role ||
   35fc8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35fcc:	2b00      	cmp	r3, #0
   35fce:	f6bf ad98 	bge.w	35b02 <ull_conn_rx+0xfe>
   35fd2:	7f6b      	ldrb	r3, [r5, #29]
   35fd4:	2b08      	cmp	r3, #8
   35fd6:	f47f ad94 	bne.w	35b02 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   35fda:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   35fde:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   35fe0:	1af3      	subs	r3, r6, r3
   35fe2:	041f      	lsls	r7, r3, #16
   35fe4:	f100 85ee 	bmi.w	36bc4 <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   35fe8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35fec:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35ff0:	1a9b      	subs	r3, r3, r2
   35ff2:	f003 0303 	and.w	r3, r3, #3
   35ff6:	2b02      	cmp	r3, #2
   35ff8:	f000 866e 	beq.w	36cd8 <ull_conn_rx+0x12d4>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   35ffc:	2205      	movs	r2, #5
   35ffe:	f105 0120 	add.w	r1, r5, #32
   36002:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   36006:	f00e ff5b 	bl	44ec0 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   3600a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   3600e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   36012:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   36016:	f36f 0200 	bfc	r2, #0, #1
   3601a:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   3601e:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   36020:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36022:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   36024:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   36028:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   3602c:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3602e:	712a      	strb	r2, [r5, #4]
		if (err) {
   36030:	e537      	b.n	35aa2 <ull_conn_rx+0x9e>
   36032:	bf00      	nop
   36034:	20002668 	.word	0x20002668
   36038:	200026fc 	.word	0x200026fc
		if (!conn->lll.role ||
   3603c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   36040:	2b00      	cmp	r3, #0
   36042:	f6bf ad5e 	bge.w	35b02 <ull_conn_rx+0xfe>
   36046:	7f6e      	ldrb	r6, [r5, #29]
   36048:	2e01      	cmp	r6, #1
   3604a:	f47f ad5a 	bne.w	35b02 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3604e:	48d9      	ldr	r0, [pc, #868]	; (363b4 <ull_conn_rx+0x9b0>)
   36050:	f7f9 fda4 	bl	2fb9c <mem_acquire>
		if (!tx) {
   36054:	2800      	cmp	r0, #0
   36056:	f000 827d 	beq.w	36554 <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
   3605a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   3605e:	f023 0305 	bic.w	r3, r3, #5
   36062:	f043 0305 	orr.w	r3, r3, #5
   36066:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   3606a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3606e:	f36f 03c3 	bfc	r3, #3, #1
   36072:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36076:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   36078:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3607a:	f043 0303 	orr.w	r3, r3, #3
   3607e:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   36080:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   36084:	220b      	movs	r2, #11
   36086:	71c2      	strb	r2, [r0, #7]
	if (
   36088:	2b00      	cmp	r3, #0
   3608a:	f000 82b4 	beq.w	365f6 <ull_conn_rx+0xbf2>
	    !conn->llcp_enc.pause_tx &&
   3608e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   36092:	0791      	lsls	r1, r2, #30
   36094:	f100 82af 	bmi.w	365f6 <ull_conn_rx+0xbf2>
	    !conn->llcp_phy.pause_tx &&
   36098:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   3609c:	07d2      	lsls	r2, r2, #31
   3609e:	f100 82aa 	bmi.w	365f6 <ull_conn_rx+0xbf2>
		if (conn->tx_head == conn->tx_data) {
   360a2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   360a6:	4293      	cmp	r3, r2
   360a8:	f000 8756 	beq.w	36f58 <ull_conn_rx+0x1554>
		} else if (!conn->tx_ctrl) {
   360ac:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   360b0:	2a00      	cmp	r2, #0
   360b2:	f000 8769 	beq.w	36f88 <ull_conn_rx+0x1584>
	tx->next = conn->tx_ctrl_last->next;
   360b6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   360ba:	681a      	ldr	r2, [r3, #0]
   360bc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   360be:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   360c0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   360c4:	6803      	ldr	r3, [r0, #0]
   360c6:	2b00      	cmp	r3, #0
   360c8:	f47f ace8 	bne.w	35a9c <ull_conn_rx+0x98>
   360cc:	e552      	b.n	35b74 <ull_conn_rx+0x170>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   360ce:	7f6b      	ldrb	r3, [r5, #29]
   360d0:	2b09      	cmp	r3, #9
   360d2:	f47f ad16 	bne.w	35b02 <ull_conn_rx+0xfe>
   360d6:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   360d8:	49b7      	ldr	r1, [pc, #732]	; (363b8 <ull_conn_rx+0x9b4>)
   360da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   360dc:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   360de:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   360e2:	400a      	ands	r2, r1
   360e4:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   360e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   360ec:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   360f0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   360f4:	4013      	ands	r3, r2
   360f6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   360fa:	6a2e      	ldr	r6, [r5, #32]
   360fc:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   360fe:	f7fc fbb7 	bl	32870 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   36102:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   36106:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   3610a:	4aab      	ldr	r2, [pc, #684]	; (363b8 <ull_conn_rx+0x9b4>)
	conn->llcp_feature.features_peer =
   3610c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   36110:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   36114:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   36116:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   3611a:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   3611c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   36120:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   36124:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   36128:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   3612c:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   36130:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   36132:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   36136:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   36138:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   3613c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   36140:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   36144:	4618      	mov	r0, r3
}
   36146:	e4ac      	b.n	35aa2 <ull_conn_rx+0x9e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   36148:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3614c:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   36150:	4299      	cmp	r1, r3
   36152:	f43f acd6 	beq.w	35b02 <ull_conn_rx+0xfe>
   36156:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   3615a:	2903      	cmp	r1, #3
   3615c:	f47f acd1 	bne.w	35b02 <ull_conn_rx+0xfe>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   36160:	7f69      	ldrb	r1, [r5, #29]
   36162:	2901      	cmp	r1, #1
   36164:	f47f accd 	bne.w	35b02 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   36168:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3616c:	2900      	cmp	r1, #0
   3616e:	f2c0 84e3 	blt.w	36b38 <ull_conn_rx+0x1134>
			conn->llcp_enc.pause_rx = 0U;
   36172:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   36176:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   3617a:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   3617c:	f022 0203 	bic.w	r2, r2, #3
   36180:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   36184:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   36188:	0750      	lsls	r0, r2, #29
   3618a:	f57f ac89 	bpl.w	35aa0 <ull_conn_rx+0x9c>
			conn->llcp_enc.refresh = 0U;
   3618e:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   36192:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   36194:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
   36198:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3619a:	712b      	strb	r3, [r5, #4]
   3619c:	e481      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (!conn->lll.role ||
   3619e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   361a2:	2b00      	cmp	r3, #0
   361a4:	f6bf acad 	bge.w	35b02 <ull_conn_rx+0xfe>
   361a8:	f895 901d 	ldrb.w	r9, [r5, #29]
   361ac:	f1b9 0f09 	cmp.w	r9, #9
   361b0:	f47f aca7 	bne.w	35b02 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
   361b4:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   361b8:	f010 0602 	ands.w	r6, r0, #2
   361bc:	f47f ac6e 	bne.w	35a9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   361c0:	487c      	ldr	r0, [pc, #496]	; (363b4 <ull_conn_rx+0x9b0>)
   361c2:	f7f9 fceb 	bl	2fb9c <mem_acquire>
	if (!tx) {
   361c6:	4607      	mov	r7, r0
   361c8:	2800      	cmp	r0, #0
   361ca:	f000 81c3 	beq.w	36554 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   361ce:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   361d2:	4979      	ldr	r1, [pc, #484]	; (363b8 <ull_conn_rx+0x9b4>)
	conn->common.txn_lock = 1U;
   361d4:	f043 0302 	orr.w	r3, r3, #2
   361d8:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   361dc:	6a2a      	ldr	r2, [r5, #32]
   361de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   361e0:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   361e2:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   361e6:	400a      	ands	r2, r1
   361e8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   361ec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   361f0:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   361f4:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   361f8:	4013      	ands	r3, r2
   361fa:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   361fe:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   36202:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   36206:	f7fc fb33 	bl	32870 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3620a:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3620e:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   36212:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   36216:	4b68      	ldr	r3, [pc, #416]	; (363b8 <ull_conn_rx+0x9b4>)
   36218:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   3621c:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   3621e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   36222:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   36226:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3622a:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   3622e:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   36232:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   36236:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   3623a:	f043 0301 	orr.w	r3, r3, #1
   3623e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36242:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   36244:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36248:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   3624c:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3624e:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   36250:	18b8      	adds	r0, r7, r2
   36252:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   36254:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   36258:	f00e fe3d 	bl	44ed6 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   3625c:	f7fc fb08 	bl	32870 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   36260:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[0] = val;
   36264:	7339      	strb	r1, [r7, #12]
   36266:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   36268:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3626c:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   36270:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   36272:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   36274:	723b      	strb	r3, [r7, #8]
   36276:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   36278:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3627c:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   3627e:	4620      	mov	r0, r4
   36280:	727b      	strb	r3, [r7, #9]
   36282:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   36284:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   36286:	73fe      	strb	r6, [r7, #15]
   36288:	72fa      	strb	r2, [r7, #11]
   3628a:	4639      	mov	r1, r7
   3628c:	f7fe fb4c 	bl	34928 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36290:	2301      	movs	r3, #1
   36292:	712b      	strb	r3, [r5, #4]
	return 0;
   36294:	4630      	mov	r0, r6
   36296:	e404      	b.n	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   36298:	7f6b      	ldrb	r3, [r5, #29]
   3629a:	2b02      	cmp	r3, #2
   3629c:	f47f ac31 	bne.w	35b02 <ull_conn_rx+0xfe>
			    conn->llcp_conn_param.req) &&
   362a0:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   362a4:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   362a8:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   362ac:	4291      	cmp	r1, r2
   362ae:	d002      	beq.n	362b6 <ull_conn_rx+0x8b2>
			    conn->llcp_conn_param.req) &&
   362b0:	2b0f      	cmp	r3, #15
   362b2:	f000 836c 	beq.w	3698e <ull_conn_rx+0xf8a>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   362b6:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   362ba:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   362be:	4291      	cmp	r1, r2
   362c0:	d002      	beq.n	362c8 <ull_conn_rx+0x8c4>
   362c2:	2b14      	cmp	r3, #20
   362c4:	f000 83e0 	beq.w	36a88 <ull_conn_rx+0x1084>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   362c8:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   362cc:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   362d0:	4291      	cmp	r1, r2
   362d2:	d002      	beq.n	362da <ull_conn_rx+0x8d6>
   362d4:	2b16      	cmp	r3, #22
   362d6:	f000 843b 	beq.w	36b50 <ull_conn_rx+0x114c>
			switch (llctrl->unknown_rsp.type) {
   362da:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   362dc:	bf04      	itt	eq
   362de:	2301      	moveq	r3, #1
   362e0:	712b      	strbeq	r3, [r5, #4]
				break;
   362e2:	e581      	b.n	35de8 <ull_conn_rx+0x3e4>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   362e4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   362e8:	2b00      	cmp	r3, #0
   362ea:	f6bf ac0a 	bge.w	35b02 <ull_conn_rx+0xfe>
   362ee:	7f6b      	ldrb	r3, [r5, #29]
   362f0:	2b05      	cmp	r3, #5
   362f2:	f47f ac06 	bne.w	35b02 <ull_conn_rx+0xfe>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   362f6:	f895 2020 	ldrb.w	r2, [r5, #32]
   362fa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   362fe:	4313      	orrs	r3, r2
   36300:	f013 0307 	ands.w	r3, r3, #7
   36304:	f040 8470 	bne.w	36be8 <ull_conn_rx+0x11e4>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   36308:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3630c:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   36310:	428a      	cmp	r2, r1
   36312:	f43f abc3 	beq.w	35a9c <ull_conn_rx+0x98>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   36316:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3631a:	f002 0203 	and.w	r2, r2, #3
   3631e:	2a02      	cmp	r2, #2
   36320:	f47f abbc 	bne.w	35a9c <ull_conn_rx+0x98>
		conn->llcp_phy.pause_tx = 0U;
   36324:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36328:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3632c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   36330:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   36334:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36338:	4608      	mov	r0, r1
   3633a:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3633e:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   36342:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36346:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   3634a:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   3634e:	f040 85e6 	bne.w	36f1e <ull_conn_rx+0x151a>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36352:	6833      	ldr	r3, [r6, #0]
   36354:	2101      	movs	r1, #1
   36356:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   36358:	4610      	mov	r0, r2
   3635a:	f7ff bba2 	b.w	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3635e:	7f6b      	ldrb	r3, [r5, #29]
   36360:	2b03      	cmp	r3, #3
   36362:	f47f abce 	bne.w	35b02 <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   36366:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3636a:	2b00      	cmp	r3, #0
   3636c:	f2c0 828c 	blt.w	36888 <ull_conn_rx+0xe84>
			if ((conn->llcp_phy.ack !=
   36370:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   36374:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   36378:	4281      	cmp	r1, r0
   3637a:	d007      	beq.n	3638c <ull_conn_rx+0x988>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3637c:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   36380:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   36384:	3a01      	subs	r2, #1
   36386:	2a02      	cmp	r2, #2
   36388:	f240 83de 	bls.w	36b48 <ull_conn_rx+0x1144>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3638c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36390:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   36394:	1a9b      	subs	r3, r3, r2
   36396:	f003 0303 	and.w	r3, r3, #3
   3639a:	2b02      	cmp	r3, #2
   3639c:	f000 8367 	beq.w	36a6e <ull_conn_rx+0x106a>
				     LLCP_ENCRYPTION)) ||
   363a0:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   363a4:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   363a8:	429a      	cmp	r2, r3
   363aa:	f000 8382 	beq.w	36ab2 <ull_conn_rx+0x10ae>
				nack = reject_ext_ind_send(conn, *rx,
   363ae:	232a      	movs	r3, #42	; 0x2a
   363b0:	2216      	movs	r2, #22
   363b2:	e536      	b.n	35e22 <ull_conn_rx+0x41e>
   363b4:	200026fc 	.word	0x200026fc
   363b8:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   363bc:	7f6b      	ldrb	r3, [r5, #29]
   363be:	2b01      	cmp	r3, #1
   363c0:	f47f ab9f 	bne.w	35b02 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   363c4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   363c8:	2b00      	cmp	r3, #0
   363ca:	f2c0 80e3 	blt.w	36594 <ull_conn_rx+0xb90>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   363ce:	48d0      	ldr	r0, [pc, #832]	; (36710 <ull_conn_rx+0xd0c>)
   363d0:	f7f9 fbe4 	bl	2fb9c <mem_acquire>
		if (!tx) {
   363d4:	2800      	cmp	r0, #0
   363d6:	f000 80bd 	beq.w	36554 <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
   363da:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   363de:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   363e2:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   363e6:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   363ea:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   363ee:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   363f0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   363f4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   363f6:	7142      	strb	r2, [r0, #5]
   363f8:	e63f      	b.n	3607a <ull_conn_rx+0x676>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   363fa:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   363fe:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   36402:	4293      	cmp	r3, r2
   36404:	f43f ab4a 	beq.w	35a9c <ull_conn_rx+0x98>
	conn->procedure_expire = 0U;
   36408:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3640a:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   3640c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   36410:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   36414:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   36416:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3641a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3641e:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   36420:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   36422:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   36426:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   36428:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   3642c:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3642e:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   36430:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   36432:	4618      	mov	r0, r3
   36434:	f7ff bb35 	b.w	35aa2 <ull_conn_rx+0x9e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   36438:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   3643c:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   36440:	429a      	cmp	r2, r3
   36442:	f43f ab2b 	beq.w	35a9c <ull_conn_rx+0x98>
	if (!lll->role && (rej_ext_ind->error_code ==
   36446:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   3644a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   3644e:	2900      	cmp	r1, #0
   36450:	f2c0 8591 	blt.w	36f76 <ull_conn_rx+0x1572>
   36454:	2a1a      	cmp	r2, #26
   36456:	f000 8620 	beq.w	3709a <ull_conn_rx+0x1696>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3645a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   3645e:	f002 010f 	and.w	r1, r2, #15
   36462:	2904      	cmp	r1, #4
   36464:	d106      	bne.n	36474 <ull_conn_rx+0xa70>
	conn_upd_curr = NULL;
   36466:	49ab      	ldr	r1, [pc, #684]	; (36714 <ull_conn_rx+0xd10>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   36468:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   3646c:	2300      	movs	r3, #0
   3646e:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
   36470:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   36474:	06d2      	lsls	r2, r2, #27
   36476:	f57f ab11 	bpl.w	35a9c <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3647a:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3647c:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36480:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36482:	f040 8472 	bne.w	36d6a <ull_conn_rx+0x1366>
	cu->status = rej_ext_ind->error_code;
   36486:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3648a:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   3648c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   3648e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   36492:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   36494:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   36496:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   36498:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   3649c:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   364a0:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   364a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   364a6:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   364aa:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   364ac:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   364ae:	f7ff baf8 	b.w	35aa2 <ull_conn_rx+0x9e>
		if ((conn->llcp_ack != conn->llcp_req) &&
   364b2:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   364b6:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   364ba:	428b      	cmp	r3, r1
   364bc:	f43f aaee 	beq.w	35a9c <ull_conn_rx+0x98>
   364c0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   364c4:	2b03      	cmp	r3, #3
   364c6:	f47f aae9 	bne.w	35a9c <ull_conn_rx+0x98>
	conn->llcp_enc.pause_rx = 0U;
   364ca:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   364ce:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   364d2:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   364d4:	f022 0203 	bic.w	r2, r2, #3
   364d8:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   364dc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   364e0:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   364e4:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   364e8:	210d      	movs	r1, #13
   364ea:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   364ec:	4618      	mov	r0, r3
   364ee:	f7ff bad8 	b.w	35aa2 <ull_conn_rx+0x9e>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   364f2:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   364f6:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   364fa:	428b      	cmp	r3, r1
   364fc:	f43f aace 	beq.w	35a9c <ull_conn_rx+0x98>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36500:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   36504:	2a23      	cmp	r2, #35	; 0x23
   36506:	d012      	beq.n	3652e <ull_conn_rx+0xb2a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36508:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   3650c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36510:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   36514:	f36f 0100 	bfc	r1, #0, #1
   36518:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   3651c:	2100      	movs	r1, #0
   3651e:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36522:	f3c3 0102 	ubfx	r1, r3, #0, #3
   36526:	f361 1306 	bfi	r3, r1, #4, #3
   3652a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3652e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   36532:	0759      	lsls	r1, r3, #29
   36534:	f57f aab2 	bpl.w	35a9c <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36538:	231c      	movs	r3, #28
   3653a:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   3653c:	772a      	strb	r2, [r5, #28]
   3653e:	e4ae      	b.n	35e9e <ull_conn_rx+0x49a>
			tx->next = conn->tx_head;
   36540:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   36542:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   36546:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3654a:	2a00      	cmp	r2, #0
   3654c:	f47f aaa6 	bne.w	35a9c <ull_conn_rx+0x98>
   36550:	f7ff bb10 	b.w	35b74 <ull_conn_rx+0x170>
		*err = -ENOBUFS;
   36554:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36558:	f7ff baa3 	b.w	35aa2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3655c:	7f6b      	ldrb	r3, [r5, #29]
   3655e:	2b01      	cmp	r3, #1
   36560:	f47f aacf 	bne.w	35b02 <ull_conn_rx+0xfe>
   36564:	e733      	b.n	363ce <ull_conn_rx+0x9ca>
			conn->tx_data = conn->tx_data->next;
   36566:	6813      	ldr	r3, [r2, #0]
   36568:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3656c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   36570:	2b00      	cmp	r3, #0
   36572:	f47f aaf5 	bne.w	35b60 <ull_conn_rx+0x15c>
			tx->next = conn->tx_head->next;
   36576:	6813      	ldr	r3, [r2, #0]
   36578:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3657a:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3657c:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   3657e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   36582:	2a00      	cmp	r2, #0
   36584:	f47f aa8a 	bne.w	35a9c <ull_conn_rx+0x98>
   36588:	f7ff baf4 	b.w	35b74 <ull_conn_rx+0x170>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3658c:	7f6b      	ldrb	r3, [r5, #29]
   3658e:	2b01      	cmp	r3, #1
   36590:	f47f aab7 	bne.w	35b02 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   36594:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   36598:	f36f 1304 	bfc	r3, #4, #1
   3659c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   365a0:	f7ff ba7c 	b.w	35a9c <ull_conn_rx+0x98>
		if (!conn->lll.role) {
   365a4:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   365a8:	f894 6184 	ldrb.w	r6, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
   365ac:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   365b0:	2f00      	cmp	r7, #0
   365b2:	f2c0 80b1 	blt.w	36718 <ull_conn_rx+0xd14>
			if ((conn->llcp_conn_param.req !=
   365b6:	42b1      	cmp	r1, r6
   365b8:	d00a      	beq.n	365d0 <ull_conn_rx+0xbcc>
			    ((conn->llcp_conn_param.state ==
   365ba:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   365be:	f016 0f0b 	tst.w	r6, #11
   365c2:	f000 825e 	beq.w	36a82 <ull_conn_rx+0x107e>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   365c6:	f006 060f 	and.w	r6, r6, #15
   365ca:	2e06      	cmp	r6, #6
   365cc:	f000 8259 	beq.w	36a82 <ull_conn_rx+0x107e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   365d0:	f894 60e4 	ldrb.w	r6, [r4, #228]	; 0xe4
   365d4:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   365d8:	1bf6      	subs	r6, r6, r7
   365da:	f006 0603 	and.w	r6, r6, #3
   365de:	2e02      	cmp	r6, #2
   365e0:	f000 83d2 	beq.w	36d88 <ull_conn_rx+0x1384>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   365e4:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   365e8:	f894 61bd 	ldrb.w	r6, [r4, #445]	; 0x1bd
   365ec:	42b7      	cmp	r7, r6
   365ee:	f000 83e5 	beq.w	36dbc <ull_conn_rx+0x13b8>
				nack = reject_ext_ind_send(conn, *rx,
   365f2:	232a      	movs	r3, #42	; 0x2a
   365f4:	e414      	b.n	35e20 <ull_conn_rx+0x41c>
		if (!conn->tx_ctrl) {
   365f6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   365fa:	2a00      	cmp	r2, #0
   365fc:	f47f ad5b 	bne.w	360b6 <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head;
   36600:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   36602:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   36606:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   3660a:	e55b      	b.n	360c4 <ull_conn_rx+0x6c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3660c:	7913      	ldrb	r3, [r2, #4]
   3660e:	f003 0303 	and.w	r3, r3, #3
   36612:	2b03      	cmp	r3, #3
   36614:	f000 82ce 	beq.w	36bb4 <ull_conn_rx+0x11b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   36618:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   3661c:	f7ff baa2 	b.w	35b64 <ull_conn_rx+0x160>
	if (conn->common.txn_lock) {
   36620:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   36624:	079b      	lsls	r3, r3, #30
   36626:	f53f aa39 	bmi.w	35a9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3662a:	4839      	ldr	r0, [pc, #228]	; (36710 <ull_conn_rx+0xd0c>)
   3662c:	f7f9 fab6 	bl	2fb9c <mem_acquire>
	if (!tx) {
   36630:	4603      	mov	r3, r0
   36632:	2800      	cmp	r0, #0
   36634:	d08e      	beq.n	36554 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   36636:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3663a:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   3663e:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   36642:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   36646:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3664a:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   3664e:	f042 0202 	orr.w	r2, r2, #2
   36652:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   36656:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   3665a:	428a      	cmp	r2, r1
   3665c:	f040 855b 	bne.w	37116 <ull_conn_rx+0x1712>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   36660:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36662:	291a      	cmp	r1, #26
   36664:	f240 8223 	bls.w	36aae <ull_conn_rx+0x10aa>
			eff_tx_octets = MIN(max_rx_octets,
   36668:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   3666c:	4281      	cmp	r1, r0
   3666e:	bf28      	it	cs
   36670:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36672:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   36674:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   36678:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3667a:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   3667c:	bf34      	ite	cc
   3667e:	46de      	movcc	lr, fp
   36680:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   36684:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   36688:	bf34      	ite	cc
   3668a:	4640      	movcc	r0, r8
   3668c:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   36690:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   36694:	bf34      	ite	cc
   36696:	46cc      	movcc	ip, r9
   36698:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3669c:	45de      	cmp	lr, fp
   3669e:	f000 831f 	beq.w	36ce0 <ull_conn_rx+0x12dc>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   366a2:	3a01      	subs	r2, #1
   366a4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   366a8:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   366ac:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   366b0:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   366b4:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   366b8:	2b00      	cmp	r3, #0
   366ba:	f000 836b 	beq.w	36d94 <ull_conn_rx+0x1390>
				conn->llcp_length.state =
   366be:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   366c2:	2505      	movs	r5, #5
   366c4:	f365 0202 	bfi	r2, r5, #0, #3
   366c8:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   366cc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   366d0:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   366d2:	6832      	ldr	r2, [r6, #0]
   366d4:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   366d6:	6832      	ldr	r2, [r6, #0]
   366d8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   366dc:	2200      	movs	r2, #0
   366de:	6032      	str	r2, [r6, #0]
	if (tx) {
   366e0:	2b00      	cmp	r3, #0
   366e2:	f43f a9dd 	beq.w	35aa0 <ull_conn_rx+0x9c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   366e6:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   366e8:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   366ea:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   366ee:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   366f0:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   366f2:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   366f4:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   366f6:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   366f8:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   366fc:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   36700:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   36702:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   36704:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   36706:	f7fe f90f 	bl	34928 <ctrl_tx_sec_enqueue>
	return 0;
   3670a:	2000      	movs	r0, #0
}
   3670c:	f7ff b9c9 	b.w	35aa2 <ull_conn_rx+0x9e>
   36710:	200026fc 	.word	0x200026fc
   36714:	20002668 	.word	0x20002668
		} else if ((conn->llcp_conn_param.req ==
   36718:	42b1      	cmp	r1, r6
   3671a:	d005      	beq.n	36728 <ull_conn_rx+0xd24>
			    conn->llcp_conn_param.ack) ||
   3671c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36720:	f012 0f0b 	tst.w	r2, #11
   36724:	f47f a9ba 	bne.w	35a9c <ull_conn_rx+0x98>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   36728:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   3672c:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36730:	2a05      	cmp	r2, #5
   36732:	f240 80a6 	bls.w	36882 <ull_conn_rx+0xe7e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   36736:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   3673a:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3673e:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   36742:	f200 809e 	bhi.w	36882 <ull_conn_rx+0xe7e>
			    (interval_max > 3200) ||
   36746:	42b2      	cmp	r2, r6
   36748:	f200 809b 	bhi.w	36882 <ull_conn_rx+0xe7e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3674c:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   36750:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   36754:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   36758:	f080 8093 	bcs.w	36882 <ull_conn_rx+0xe7e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3675c:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   36760:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   36764:	f1a2 070a 	sub.w	r7, r2, #10
   36768:	f640 4b76 	movw	fp, #3190	; 0xc76
   3676c:	b2bf      	uxth	r7, r7
   3676e:	455f      	cmp	r7, fp
   36770:	f200 8087 	bhi.w	36882 <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
   36774:	f10c 0701 	add.w	r7, ip, #1
   36778:	b2bf      	uxth	r7, r7
   3677a:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   3677e:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   36782:	d27e      	bcs.n	36882 <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
   36784:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   36788:	455e      	cmp	r6, fp
   3678a:	d37a      	bcc.n	36882 <ull_conn_rx+0xe7e>
			conn->llcp_conn_param.interval_min = interval_min;
   3678c:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   36790:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   36794:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   36798:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   3679c:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   367a0:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   367a4:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   367a8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   367ac:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   367b0:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   367b4:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   367b8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   367bc:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   367c0:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   367c4:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   367c8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   367cc:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   367d0:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   367d4:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   367d8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   367dc:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   367e0:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   367e4:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   367e8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   367ec:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   367f0:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   367f4:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   367f8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   367fc:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   36800:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   36804:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   36808:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   3680c:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   36810:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   36812:	42be      	cmp	r6, r7
   36814:	f000 840b 	beq.w	3702e <ull_conn_rx+0x162a>
				conn->llcp_conn_param.state =
   36818:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   3681c:	2503      	movs	r5, #3
   3681e:	f365 0203 	bfi	r2, r5, #0, #4
   36822:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   36826:	3901      	subs	r1, #1
   36828:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   3682c:	2b00      	cmp	r3, #0
   3682e:	f47f a937 	bne.w	35aa0 <ull_conn_rx+0x9c>
		conn_upd_curr = conn;
   36832:	6004      	str	r4, [r0, #0]
	int nack = 0;
   36834:	4618      	mov	r0, r3
   36836:	f7ff b934 	b.w	35aa2 <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3683a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   3683e:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   36842:	4293      	cmp	r3, r2
   36844:	f43f add9 	beq.w	363fa <ull_conn_rx+0x9f6>
		rej_ext_ind->error_code = rej_ind->error_code;
   36848:	f895 3020 	ldrb.w	r3, [r5, #32]
   3684c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   36850:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   36854:	2900      	cmp	r1, #0
   36856:	f2c0 82a9 	blt.w	36dac <ull_conn_rx+0x13a8>
   3685a:	2b1a      	cmp	r3, #26
   3685c:	f000 841d 	beq.w	3709a <ull_conn_rx+0x1696>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   36860:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36864:	f003 010f 	and.w	r1, r3, #15
   36868:	2904      	cmp	r1, #4
   3686a:	d106      	bne.n	3687a <ull_conn_rx+0xe76>
	conn_upd_curr = NULL;
   3686c:	49d9      	ldr	r1, [pc, #868]	; (36bd4 <ull_conn_rx+0x11d0>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3686e:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   36872:	2200      	movs	r2, #0
   36874:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   36876:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3687a:	06d8      	lsls	r0, r3, #27
   3687c:	f57f a90e 	bpl.w	35a9c <ull_conn_rx+0x98>
   36880:	e5fb      	b.n	3647a <ull_conn_rx+0xa76>
				nack = reject_ext_ind_send(conn, *rx,
   36882:	231e      	movs	r3, #30
   36884:	f7ff bacc 	b.w	35e20 <ull_conn_rx+0x41c>
	if (conn->common.txn_lock) {
   36888:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   3688c:	f017 0702 	ands.w	r7, r7, #2
   36890:	f47f a904 	bne.w	35a9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36894:	48d0      	ldr	r0, [pc, #832]	; (36bd8 <ull_conn_rx+0x11d4>)
   36896:	f7f9 f981 	bl	2fb9c <mem_acquire>
	if (!tx) {
   3689a:	4602      	mov	r2, r0
   3689c:	2800      	cmp	r0, #0
   3689e:	f43f ae59 	beq.w	36554 <ull_conn_rx+0xb50>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   368a2:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   368a6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   368aa:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   368ae:	2002      	movs	r0, #2
   368b0:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   368b4:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   368b8:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   368bc:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   368c0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
   368c4:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   368c8:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   368ca:	f3c3 0602 	ubfx	r6, r3, #0, #3
   368ce:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   368d2:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   368d6:	d114      	bne.n	36902 <ull_conn_rx+0xefe>
		conn->llcp_phy.ack--;
   368d8:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   368da:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   368de:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   368e2:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   368e6:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   368ea:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   368ee:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   368f2:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   368f6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   368fa:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   368fe:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   36902:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   36906:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   3690a:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   3690e:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   36912:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   36916:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   3691a:	009b      	lsls	r3, r3, #2
   3691c:	f001 0103 	and.w	r1, r1, #3
   36920:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   36924:	430b      	orrs	r3, r1
   36926:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3692a:	2303      	movs	r3, #3
   3692c:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3692e:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36930:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   36932:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   36936:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   36938:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3693a:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3693e:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   36940:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36944:	7110      	strb	r0, [r2, #4]
	if (
   36946:	2b00      	cmp	r3, #0
   36948:	f000 80a8 	beq.w	36a9c <ull_conn_rx+0x1098>
	    !conn->llcp_enc.pause_tx &&
   3694c:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   36950:	0786      	lsls	r6, r0, #30
   36952:	f100 80a3 	bmi.w	36a9c <ull_conn_rx+0x1098>
	    !conn->llcp_phy.pause_tx &&
   36956:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   3695a:	07c0      	lsls	r0, r0, #31
   3695c:	f100 809e 	bmi.w	36a9c <ull_conn_rx+0x1098>
		if (conn->tx_head == conn->tx_data) {
   36960:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   36964:	4283      	cmp	r3, r0
   36966:	f000 8334 	beq.w	36fd2 <ull_conn_rx+0x15ce>
		} else if (!conn->tx_ctrl) {
   3696a:	2900      	cmp	r1, #0
   3696c:	f000 8375 	beq.w	3705a <ull_conn_rx+0x1656>
	tx->next = conn->tx_ctrl_last->next;
   36970:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   36974:	6819      	ldr	r1, [r3, #0]
   36976:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   36978:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   3697a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3697e:	6813      	ldr	r3, [r2, #0]
   36980:	2b00      	cmp	r3, #0
   36982:	f47f a88b 	bne.w	35a9c <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
   36986:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3698a:	f7ff b887 	b.w	35a9c <ull_conn_rx+0x98>
			conn->llcp_conn_param.disabled = 1U;
   3698e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36992:	f043 0320 	orr.w	r3, r3, #32
   36996:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   3699a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3699e:	2b00      	cmp	r3, #0
   369a0:	f2c0 81c7 	blt.w	36d32 <ull_conn_rx+0x132e>
				LL_ASSERT(conn->llcp_cu.req ==
   369a4:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   369a8:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   369ac:	429a      	cmp	r2, r3
   369ae:	d00e      	beq.n	369ce <ull_conn_rx+0xfca>
   369b0:	4a8a      	ldr	r2, [pc, #552]	; (36bdc <ull_conn_rx+0x11d8>)
   369b2:	498b      	ldr	r1, [pc, #556]	; (36be0 <ull_conn_rx+0x11dc>)
   369b4:	488b      	ldr	r0, [pc, #556]	; (36be4 <ull_conn_rx+0x11e0>)
   369b6:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   369ba:	f00c f9a9 	bl	42d10 <printk>
   369be:	4040      	eors	r0, r0
   369c0:	f380 8811 	msr	BASEPRI, r0
   369c4:	f04f 0003 	mov.w	r0, #3
   369c8:	df02      	svc	2
   369ca:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   369ce:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   369d2:	2106      	movs	r1, #6
   369d4:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   369d8:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   369da:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   369dc:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   369e0:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   369e4:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   369e6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   369ea:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   369ee:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   369f2:	00db      	lsls	r3, r3, #3
   369f4:	f022 020f 	bic.w	r2, r2, #15
   369f8:	430b      	orrs	r3, r1
   369fa:	4313      	orrs	r3, r2
   369fc:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   36a00:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   36a04:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   36a08:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   36a0c:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   36a0e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   36a12:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   36a16:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   36a1a:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36a1e:	7129      	strb	r1, [r5, #4]
				break;
   36a20:	f7ff b83f 	b.w	35aa2 <ull_conn_rx+0x9e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36a24:	486c      	ldr	r0, [pc, #432]	; (36bd8 <ull_conn_rx+0x11d4>)
   36a26:	f7f9 f8b9 	bl	2fb9c <mem_acquire>
		if (!tx) {
   36a2a:	4601      	mov	r1, r0
   36a2c:	2800      	cmp	r0, #0
   36a2e:	f43f ad91 	beq.w	36554 <ull_conn_rx+0xb50>
		conn->llcp_version.tx = 1U;
   36a32:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   36a36:	f043 0301 	orr.w	r3, r3, #1
   36a3a:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36a3e:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   36a40:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   36a42:	220c      	movs	r2, #12
   36a44:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   36a46:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36a48:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36a4c:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36a50:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36a52:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   36a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36a58:	2205      	movs	r2, #5
		v->sub_version_number =
   36a5a:	72c3      	strb	r3, [r0, #11]
   36a5c:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36a5e:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   36a60:	4620      	mov	r0, r4
   36a62:	f7fd ff61 	bl	34928 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36a66:	2301      	movs	r3, #1
   36a68:	712b      	strb	r3, [r5, #4]
   36a6a:	f7ff ba37 	b.w	35edc <ull_conn_rx+0x4d8>
				      0x03) == 0x02) &&
   36a6e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36a72:	2b03      	cmp	r3, #3
   36a74:	f47f ac9b 	bne.w	363ae <ull_conn_rx+0x9aa>
   36a78:	e492      	b.n	363a0 <ull_conn_rx+0x99c>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36a7a:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   36a7c:	2000      	movs	r0, #0
   36a7e:	f7ff b810 	b.w	35aa2 <ull_conn_rx+0x9e>
				nack = reject_ext_ind_send(conn, *rx,
   36a82:	2323      	movs	r3, #35	; 0x23
   36a84:	f7ff b9cc 	b.w	35e20 <ull_conn_rx+0x41c>
			conn->llcp_length.disabled = 1U;
   36a88:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   36a8c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   36a90:	f043 0308 	orr.w	r3, r3, #8
   36a94:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   36a98:	f7ff b9a6 	b.w	35de8 <ull_conn_rx+0x3e4>
		if (!conn->tx_ctrl) {
   36a9c:	2900      	cmp	r1, #0
   36a9e:	f47f af67 	bne.w	36970 <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head;
   36aa2:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   36aa4:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   36aa8:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   36aac:	e767      	b.n	3697e <ull_conn_rx+0xf7a>
   36aae:	4651      	mov	r1, sl
   36ab0:	e5df      	b.n	36672 <ull_conn_rx+0xc6e>
				conn->llcp_phy.state =
   36ab2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   36ab6:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   36ab8:	f043 0303 	orr.w	r3, r3, #3
   36abc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   36ac0:	d111      	bne.n	36ae6 <ull_conn_rx+0x10e2>
					conn->llcp_phy.tx =
   36ac2:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   36ac6:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   36aca:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   36acc:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   36ad0:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   36ad4:	f240 43fc 	movw	r3, #1276	; 0x4fc
   36ad8:	f022 0204 	bic.w	r2, r2, #4
   36adc:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   36ae0:	4313      	orrs	r3, r2
   36ae2:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   36ae6:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   36aea:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   36aee:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   36af2:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   36af6:	f003 0203 	and.w	r2, r3, #3
   36afa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   36afe:	4003      	ands	r3, r0
   36b00:	009b      	lsls	r3, r3, #2
   36b02:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   36b06:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36b08:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   36b0c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36b10:	d002      	beq.n	36b18 <ull_conn_rx+0x1114>
   36b12:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   36b16:	d105      	bne.n	36b24 <ull_conn_rx+0x1120>
					conn->llcp_phy.tx = 0;
   36b18:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   36b1c:	f003 0303 	and.w	r3, r3, #3
   36b20:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   36b24:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36b28:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   36b2a:	4313      	orrs	r3, r2
   36b2c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   36b30:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36b32:	712a      	strb	r2, [r5, #4]
   36b34:	f7fe bfb5 	b.w	35aa2 <ull_conn_rx+0x9e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   36b38:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   36b3c:	f36f 0301 	bfc	r3, #0, #2
   36b40:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   36b44:	f7ff bb20 	b.w	36188 <ull_conn_rx+0x784>
				nack = reject_ext_ind_send(conn, *rx,
   36b48:	2323      	movs	r3, #35	; 0x23
   36b4a:	2216      	movs	r2, #22
   36b4c:	f7ff b969 	b.w	35e22 <ull_conn_rx+0x41e>
			lll->phy_tx_time = lll->phy_tx;
   36b50:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   36b54:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   36b58:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   36b5c:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   36b60:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   36b62:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   36b66:	f361 1206 	bfi	r2, r1, #4, #3
   36b6a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   36b6e:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   36b72:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   36b76:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36b7a:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   36b7c:	f000 80ec 	beq.w	36d58 <ull_conn_rx+0x1354>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36b80:	221c      	movs	r2, #28
   36b82:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   36b84:	2300      	movs	r3, #0
   36b86:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   36b88:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   36b8a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   36b8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   36b92:	77ab      	strb	r3, [r5, #30]
   36b94:	f7ff b928 	b.w	35de8 <ull_conn_rx+0x3e4>
	conn->llcp_enc.pause_rx = 0U;
   36b98:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   36b9c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   36ba0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   36ba2:	f021 0103 	bic.w	r1, r1, #3
   36ba6:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   36baa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   36bae:	4618      	mov	r0, r3
   36bb0:	f7fe bf77 	b.w	35aa2 <ull_conn_rx+0x9e>
	    ((pdu_data_tx->llctrl.opcode !=
   36bb4:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36bb6:	2b03      	cmp	r3, #3
   36bb8:	f43f acdd 	beq.w	36576 <ull_conn_rx+0xb72>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   36bbc:	2b0a      	cmp	r3, #10
   36bbe:	f47f ad2b 	bne.w	36618 <ull_conn_rx+0xc14>
   36bc2:	e4d8      	b.n	36576 <ull_conn_rx+0xb72>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36bc4:	2301      	movs	r3, #1
   36bc6:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   36bc8:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   36bca:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   36bce:	2000      	movs	r0, #0
   36bd0:	f7fe bf67 	b.w	35aa2 <ull_conn_rx+0x9e>
   36bd4:	20002668 	.word	0x20002668
   36bd8:	200026fc 	.word	0x200026fc
   36bdc:	0004a914 	.word	0x0004a914
   36be0:	0004aa60 	.word	0x0004aa60
   36be4:	0004a4a0 	.word	0x0004a4a0
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36be8:	2101      	movs	r1, #1
   36bea:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   36bee:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36bf2:	f7f9 f9a9 	bl	2ff48 <util_ones_count_get>
   36bf6:	2801      	cmp	r0, #1
   36bf8:	f200 80b2 	bhi.w	36d60 <ull_conn_rx+0x135c>
	phy = ind->p_to_c_phy;
   36bfc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   36c00:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36c04:	f10d 000f 	add.w	r0, sp, #15
   36c08:	2101      	movs	r1, #1
   36c0a:	f7f9 f99d 	bl	2ff48 <util_ones_count_get>
   36c0e:	2801      	cmp	r0, #1
   36c10:	f200 80a6 	bhi.w	36d60 <ull_conn_rx+0x135c>
	instant = sys_le16_to_cpu(ind->instant);
   36c14:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   36c16:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   36c18:	1ad3      	subs	r3, r2, r3
   36c1a:	041b      	lsls	r3, r3, #16
   36c1c:	f100 8288 	bmi.w	37130 <ull_conn_rx+0x172c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36c20:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   36c24:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36c28:	1a5b      	subs	r3, r3, r1
   36c2a:	f003 0303 	and.w	r3, r3, #3
   36c2e:	2b02      	cmp	r3, #2
   36c30:	f000 8279 	beq.w	37126 <ull_conn_rx+0x1722>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36c34:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   36c38:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   36c3c:	4283      	cmp	r3, r0
   36c3e:	d018      	beq.n	36c72 <ull_conn_rx+0x126e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   36c40:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36c44:	f003 0303 	and.w	r3, r3, #3
   36c48:	2b02      	cmp	r3, #2
   36c4a:	d112      	bne.n	36c72 <ull_conn_rx+0x126e>
		conn->llcp_phy.pause_tx = 0U;
   36c4c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36c50:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   36c54:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36c58:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   36c5c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36c60:	f3c3 0380 	ubfx	r3, r3, #2, #1
   36c64:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   36c68:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36c6a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   36c6e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   36c72:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   36c76:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   36c7a:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   36c7e:	009b      	lsls	r3, r3, #2
   36c80:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   36c84:	f003 031c 	and.w	r3, r3, #28
   36c88:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   36c8c:	f002 0202 	and.w	r2, r2, #2
   36c90:	4313      	orrs	r3, r2
   36c92:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   36c96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   36c9a:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   36c9c:	6833      	ldr	r3, [r6, #0]
   36c9e:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   36ca0:	6832      	ldr	r2, [r6, #0]
   36ca2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   36ca6:	2300      	movs	r3, #0
   36ca8:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   36caa:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   36cae:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   36cb0:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   36cb2:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   36cb6:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   36cba:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   36cbe:	f43e aef0 	beq.w	35aa2 <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   36cc2:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   36cc6:	f3c2 0282 	ubfx	r2, r2, #2, #3
   36cca:	f362 1106 	bfi	r1, r2, #4, #3
   36cce:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   36cd2:	4618      	mov	r0, r3
   36cd4:	f7fe bee5 	b.w	35aa2 <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36cd8:	2301      	movs	r3, #1
   36cda:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   36cdc:	232a      	movs	r3, #42	; 0x2a
   36cde:	e774      	b.n	36bca <ull_conn_rx+0x11c6>
			conn->procedure_expire = 0U;
   36ce0:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36ce2:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
   36ce4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   36ce8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36cec:	f000 8129 	beq.w	36f42 <ull_conn_rx+0x153e>
			conn->lll.max_rx_time = eff_rx_time;
   36cf0:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   36cf4:	2b00      	cmp	r3, #0
   36cf6:	f000 811f 	beq.w	36f38 <ull_conn_rx+0x1534>
					(conn->llcp_length.req - 1);
   36cfa:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   36cfc:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   36d00:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   36d04:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   36d08:	2603      	movs	r6, #3
   36d0a:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   36d0e:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   36d12:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   36d16:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   36d1a:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   36d1e:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   36d22:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   36d24:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   36d28:	84e8      	strh	r0, [r5, #38]	; 0x26
   36d2a:	e4d9      	b.n	366e0 <ull_conn_rx+0xcdc>
		conn_upd_curr = conn;
   36d2c:	601c      	str	r4, [r3, #0]
   36d2e:	f7ff b810 	b.w	35d52 <ull_conn_rx+0x34e>
	conn_upd_curr = NULL;
   36d32:	4bce      	ldr	r3, [pc, #824]	; (3706c <ull_conn_rx+0x1668>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   36d34:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   36d38:	2200      	movs	r2, #0
   36d3a:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   36d3c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36d40:	f013 0310 	ands.w	r3, r3, #16
   36d44:	f040 80c5 	bne.w	36ed2 <ull_conn_rx+0x14ce>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36d48:	2201      	movs	r2, #1
   36d4a:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   36d4c:	4618      	mov	r0, r3
				break;
   36d4e:	f7fe bea8 	b.w	35aa2 <ull_conn_rx+0x9e>
	struct node_tx *tx = NULL;
   36d52:	2300      	movs	r3, #0
   36d54:	f7fe bfc1 	b.w	35cda <ull_conn_rx+0x2d6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36d58:	2201      	movs	r2, #1
   36d5a:	711a      	strb	r2, [r3, #4]
   36d5c:	f7ff b844 	b.w	35de8 <ull_conn_rx+0x3e4>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36d60:	6833      	ldr	r3, [r6, #0]
   36d62:	2201      	movs	r2, #1
   36d64:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   36d66:	231e      	movs	r3, #30
   36d68:	e72f      	b.n	36bca <ull_conn_rx+0x11c6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36d6a:	4ac1      	ldr	r2, [pc, #772]	; (37070 <ull_conn_rx+0x166c>)
   36d6c:	49c1      	ldr	r1, [pc, #772]	; (37074 <ull_conn_rx+0x1670>)
   36d6e:	48c2      	ldr	r0, [pc, #776]	; (37078 <ull_conn_rx+0x1674>)
   36d70:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   36d74:	f00b ffcc 	bl	42d10 <printk>
   36d78:	4040      	eors	r0, r0
   36d7a:	f380 8811 	msr	BASEPRI, r0
   36d7e:	f04f 0003 	mov.w	r0, #3
   36d82:	df02      	svc	2
   36d84:	f7ff bb7f 	b.w	36486 <ull_conn_rx+0xa82>
				      0x03) == 0x02) &&
   36d88:	f894 60e6 	ldrb.w	r6, [r4, #230]	; 0xe6
   36d8c:	2e03      	cmp	r6, #3
   36d8e:	f47f ac30 	bne.w	365f2 <ull_conn_rx+0xbee>
   36d92:	e427      	b.n	365e4 <ull_conn_rx+0xbe0>
				conn->llcp_length.state =
   36d94:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   36d98:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   36d9c:	2504      	movs	r5, #4
   36d9e:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   36da2:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   36da6:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   36daa:	e48f      	b.n	366cc <ull_conn_rx+0xcc8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36dac:	2b23      	cmp	r3, #35	; 0x23
   36dae:	f43f ad57 	beq.w	36860 <ull_conn_rx+0xe5c>
			conn->periph.ticks_to_offset =
   36db2:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   36db6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   36dba:	e551      	b.n	36860 <ull_conn_rx+0xe5c>
				uint16_t interval_min =
   36dbc:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   36dc0:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36dc4:	2e05      	cmp	r6, #5
   36dc6:	f67f ad5c 	bls.w	36882 <ull_conn_rx+0xe7e>
				uint16_t interval_max =
   36dca:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   36dce:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36dd2:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   36dd6:	f63f ad54 	bhi.w	36882 <ull_conn_rx+0xe7e>
				    (interval_max > 3200) ||
   36dda:	4576      	cmp	r6, lr
   36ddc:	f63f ad51 	bhi.w	36882 <ull_conn_rx+0xe7e>
				uint16_t latency =
   36de0:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   36de2:	f8ad 6006 	strh.w	r6, [sp, #6]
   36de6:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   36de8:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   36dec:	f4bf ad49 	bcs.w	36882 <ull_conn_rx+0xe7e>
				uint16_t timeout =
   36df0:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   36df2:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   36df6:	f1ac 0a0a 	sub.w	sl, ip, #10
   36dfa:	f640 4b76 	movw	fp, #3190	; 0xc76
   36dfe:	fa1f fa8a 	uxth.w	sl, sl
   36e02:	45da      	cmp	sl, fp
   36e04:	f63f ad3d 	bhi.w	36882 <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   36e08:	f106 0a01 	add.w	sl, r6, #1
   36e0c:	fa1f fa8a 	uxth.w	sl, sl
   36e10:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   36e14:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   36e18:	f4bf ad33 	bcs.w	36882 <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   36e1c:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   36e20:	45de      	cmp	lr, fp
   36e22:	f4ff ad2e 	bcc.w	36882 <ull_conn_rx+0xe7e>
				conn->llcp_conn_param.interval_max =
   36e26:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
   36e2a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   36e2e:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.latency =	latency;
   36e32:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   36e36:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   36e3a:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   36e3e:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   36e42:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   36e46:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   36e4a:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   36e4e:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   36e52:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   36e56:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   36e5a:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   36e5e:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   36e62:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   36e66:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   36e6a:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   36e6e:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   36e72:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   36e76:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   36e7a:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   36e7e:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   36e82:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   36e86:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   36e8a:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   36e8e:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   36e92:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   36e96:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   36e9a:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   36e9e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   36ea2:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   36ea6:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   36eaa:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   36eae:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   36eb0:	45be      	cmp	lr, r7
   36eb2:	f000 809a 	beq.w	36fea <ull_conn_rx+0x15e6>
					if (conn->llcp_enc.pause_tx) {
   36eb6:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   36eba:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   36ebe:	f43f acad 	beq.w	3681c <ull_conn_rx+0xe18>
						conn->llcp_conn_param.state =
   36ec2:	2602      	movs	r6, #2
   36ec4:	f366 0203 	bfi	r2, r6, #0, #4
   36ec8:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   36ecc:	2201      	movs	r2, #1
   36ece:	712a      	strb	r2, [r5, #4]
   36ed0:	e4a9      	b.n	36826 <ull_conn_rx+0xe22>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36ed2:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36ed4:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36ed8:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36eda:	d15e      	bne.n	36f9a <ull_conn_rx+0x1596>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   36edc:	231a      	movs	r3, #26
   36ede:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   36ee0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   36ee2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   36ee6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   36ee8:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   36eea:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   36eee:	227d      	movs	r2, #125	; 0x7d
   36ef0:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   36ef4:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   36ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36efa:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   36efe:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   36f00:	f7fe bf72 	b.w	35de8 <ull_conn_rx+0x3e4>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36f04:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   36f08:	3202      	adds	r2, #2
   36f0a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36f0e:	2b00      	cmp	r3, #0
   36f10:	d151      	bne.n	36fb6 <ull_conn_rx+0x15b2>
			conn->periph.llcp_type = conn->llcp_type;
   36f12:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36f16:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   36f1a:	f7fe be63 	b.w	35be4 <ull_conn_rx+0x1e0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36f1e:	6832      	ldr	r2, [r6, #0]
   36f20:	201c      	movs	r0, #28
   36f22:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   36f24:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   36f26:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   36f28:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   36f2c:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   36f2e:	f3c2 0302 	ubfx	r3, r2, #0, #3
   36f32:	77ab      	strb	r3, [r5, #30]
		if (err) {
   36f34:	f7fe bdb5 	b.w	35aa2 <ull_conn_rx+0x9e>
				conn->lll.max_tx_octets = eff_tx_octets;
   36f38:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   36f3c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   36f40:	e6ed      	b.n	36d1e <ull_conn_rx+0x131a>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36f42:	4540      	cmp	r0, r8
   36f44:	f47f aed4 	bne.w	36cf0 <ull_conn_rx+0x12ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   36f48:	45cc      	cmp	ip, r9
   36f4a:	f47f aed1 	bne.w	36cf0 <ull_conn_rx+0x12ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36f4e:	6832      	ldr	r2, [r6, #0]
   36f50:	2501      	movs	r5, #1
   36f52:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   36f54:	f7ff bbc4 	b.w	366e0 <ull_conn_rx+0xcdc>
			conn->tx_data = conn->tx_data->next;
   36f58:	681a      	ldr	r2, [r3, #0]
   36f5a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36f5e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   36f62:	2a00      	cmp	r2, #0
   36f64:	f47f a8a7 	bne.w	360b6 <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head->next;
   36f68:	681a      	ldr	r2, [r3, #0]
   36f6a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   36f6c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   36f6e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   36f72:	f7ff b8a7 	b.w	360c4 <ull_conn_rx+0x6c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36f76:	2a23      	cmp	r2, #35	; 0x23
   36f78:	f43f aa6f 	beq.w	3645a <ull_conn_rx+0xa56>
			conn->periph.ticks_to_offset =
   36f7c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   36f80:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   36f84:	f7ff ba69 	b.w	3645a <ull_conn_rx+0xa56>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36f88:	791a      	ldrb	r2, [r3, #4]
   36f8a:	f002 0203 	and.w	r2, r2, #3
   36f8e:	2a03      	cmp	r2, #3
   36f90:	d076      	beq.n	37080 <ull_conn_rx+0x167c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   36f92:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   36f96:	f7ff b88e 	b.w	360b6 <ull_conn_rx+0x6b2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36f9a:	4a35      	ldr	r2, [pc, #212]	; (37070 <ull_conn_rx+0x166c>)
   36f9c:	4935      	ldr	r1, [pc, #212]	; (37074 <ull_conn_rx+0x1670>)
   36f9e:	4836      	ldr	r0, [pc, #216]	; (37078 <ull_conn_rx+0x1674>)
   36fa0:	f641 4322 	movw	r3, #7202	; 0x1c22
   36fa4:	f00b feb4 	bl	42d10 <printk>
   36fa8:	4040      	eors	r0, r0
   36faa:	f380 8811 	msr	BASEPRI, r0
   36fae:	f04f 0003 	mov.w	r0, #3
   36fb2:	df02      	svc	2
   36fb4:	e792      	b.n	36edc <ull_conn_rx+0x14d8>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36fb6:	4a2e      	ldr	r2, [pc, #184]	; (37070 <ull_conn_rx+0x166c>)
   36fb8:	4930      	ldr	r1, [pc, #192]	; (3707c <ull_conn_rx+0x1678>)
   36fba:	482f      	ldr	r0, [pc, #188]	; (37078 <ull_conn_rx+0x1674>)
   36fbc:	f641 13ad 	movw	r3, #6573	; 0x19ad
   36fc0:	f00b fea6 	bl	42d10 <printk>
   36fc4:	4040      	eors	r0, r0
   36fc6:	f380 8811 	msr	BASEPRI, r0
   36fca:	f04f 0003 	mov.w	r0, #3
   36fce:	df02      	svc	2
   36fd0:	e79f      	b.n	36f12 <ull_conn_rx+0x150e>
			conn->tx_data = conn->tx_data->next;
   36fd2:	6818      	ldr	r0, [r3, #0]
   36fd4:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36fd8:	2900      	cmp	r1, #0
   36fda:	f47f acc9 	bne.w	36970 <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head->next;
   36fde:	6819      	ldr	r1, [r3, #0]
   36fe0:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   36fe2:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   36fe4:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   36fe8:	e4c9      	b.n	3697e <ull_conn_rx+0xf7a>
				     lll->interval) ||
   36fea:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   36fee:	45b6      	cmp	lr, r6
   36ff0:	f47f af61 	bne.w	36eb6 <ull_conn_rx+0x14b2>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   36ff4:	f240 46e2 	movw	r6, #1250	; 0x4e2
   36ff8:	fb06 f707 	mul.w	r7, r6, r7
   36ffc:	f242 7610 	movw	r6, #10000	; 0x2710
   37000:	fb06 760c 	mla	r6, r6, ip, r7
   37004:	3e01      	subs	r6, #1
   37006:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   3700a:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   3700e:	b2b6      	uxth	r6, r6
   37010:	42b7      	cmp	r7, r6
   37012:	f47f af50 	bne.w	36eb6 <ull_conn_rx+0x14b2>
				conn->llcp_conn_param.state =
   37016:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   3701a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3701e:	f042 0201 	orr.w	r2, r2, #1
   37022:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   37026:	2201      	movs	r2, #1
   37028:	712a      	strb	r2, [r5, #4]
   3702a:	f7ff bbfc 	b.w	36826 <ull_conn_rx+0xe22>
			     lll->interval) ||
   3702e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   37030:	4567      	cmp	r7, ip
   37032:	f47f abf1 	bne.w	36818 <ull_conn_rx+0xe14>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   37036:	f240 47e2 	movw	r7, #1250	; 0x4e2
   3703a:	fb07 f606 	mul.w	r6, r7, r6
   3703e:	f242 7710 	movw	r7, #10000	; 0x2710
   37042:	fb07 6202 	mla	r2, r7, r2, r6
   37046:	3a01      	subs	r2, #1
   37048:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3704c:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   37050:	b292      	uxth	r2, r2
   37052:	4296      	cmp	r6, r2
   37054:	f47f abe0 	bne.w	36818 <ull_conn_rx+0xe14>
   37058:	e7dd      	b.n	37016 <ull_conn_rx+0x1612>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3705a:	7919      	ldrb	r1, [r3, #4]
   3705c:	f001 0103 	and.w	r1, r1, #3
   37060:	2903      	cmp	r1, #3
   37062:	d014      	beq.n	3708e <ull_conn_rx+0x168a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   37064:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   37068:	e482      	b.n	36970 <ull_conn_rx+0xf6c>
   3706a:	bf00      	nop
   3706c:	20002668 	.word	0x20002668
   37070:	0004a914 	.word	0x0004a914
   37074:	0004a5c4 	.word	0x0004a5c4
   37078:	0004a4a0 	.word	0x0004a4a0
   3707c:	0004aa3c 	.word	0x0004aa3c
	    ((pdu_data_tx->llctrl.opcode !=
   37080:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37082:	2a03      	cmp	r2, #3
   37084:	f43f af70 	beq.w	36f68 <ull_conn_rx+0x1564>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   37088:	2a0a      	cmp	r2, #10
   3708a:	d182      	bne.n	36f92 <ull_conn_rx+0x158e>
   3708c:	e76c      	b.n	36f68 <ull_conn_rx+0x1564>
	    ((pdu_data_tx->llctrl.opcode !=
   3708e:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37090:	2903      	cmp	r1, #3
   37092:	d0a4      	beq.n	36fde <ull_conn_rx+0x15da>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   37094:	290a      	cmp	r1, #10
   37096:	d1e5      	bne.n	37064 <ull_conn_rx+0x1660>
   37098:	e7a1      	b.n	36fde <ull_conn_rx+0x15da>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   3709a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   3709e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   370a2:	429a      	cmp	r2, r3
   370a4:	d00e      	beq.n	370c4 <ull_conn_rx+0x16c0>
   370a6:	4a25      	ldr	r2, [pc, #148]	; (3713c <ull_conn_rx+0x1738>)
   370a8:	4925      	ldr	r1, [pc, #148]	; (37140 <ull_conn_rx+0x173c>)
   370aa:	4826      	ldr	r0, [pc, #152]	; (37144 <ull_conn_rx+0x1740>)
   370ac:	f241 43af 	movw	r3, #5295	; 0x14af
   370b0:	f00b fe2e 	bl	42d10 <printk>
   370b4:	4040      	eors	r0, r0
   370b6:	f380 8811 	msr	BASEPRI, r0
   370ba:	f04f 0003 	mov.w	r0, #3
   370be:	df02      	svc	2
   370c0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   370c4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   370c8:	2106      	movs	r1, #6
   370ca:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   370ce:	3b01      	subs	r3, #1
   370d0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   370d4:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   370d8:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   370dc:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   370e0:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   370e2:	00db      	lsls	r3, r3, #3
   370e4:	430b      	orrs	r3, r1
   370e6:	f022 020f 	bic.w	r2, r2, #15
   370ea:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   370ec:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   370f0:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   370f4:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   370f8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   370fc:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   370fe:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   37102:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   37106:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3710a:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3710e:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   37112:	f7fe bcc3 	b.w	35a9c <ull_conn_rx+0x98>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   37116:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3711a:	f011 0f06 	tst.w	r1, #6
   3711e:	f43f aa9f 	beq.w	36660 <ull_conn_rx+0xc5c>
   37122:	f7fe bdd3 	b.w	35ccc <ull_conn_rx+0x2c8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   37126:	6833      	ldr	r3, [r6, #0]
   37128:	2201      	movs	r2, #1
   3712a:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3712c:	232a      	movs	r3, #42	; 0x2a
   3712e:	e54c      	b.n	36bca <ull_conn_rx+0x11c6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   37130:	6833      	ldr	r3, [r6, #0]
   37132:	2201      	movs	r2, #1
   37134:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   37136:	2328      	movs	r3, #40	; 0x28
   37138:	e547      	b.n	36bca <ull_conn_rx+0x11c6>
   3713a:	bf00      	nop
   3713c:	0004a914 	.word	0x0004a914
   37140:	0004aa60 	.word	0x0004aa60
   37144:	0004a4a0 	.word	0x0004a4a0

00037148 <ull_conn_llcp>:
{
   37148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3714c:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   3714e:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   37152:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37156:	4298      	cmp	r0, r3
{
   37158:	460d      	mov	r5, r1
   3715a:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   3715c:	d030      	beq.n	371c0 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3715e:	1a1b      	subs	r3, r3, r0
   37160:	f003 0303 	and.w	r3, r3, #3
   37164:	2b02      	cmp	r3, #2
   37166:	d010      	beq.n	3718a <ull_conn_llcp+0x42>
   37168:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3716c:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3716e:	f1bc 0f00 	cmp.w	ip, #0
   37172:	db4e      	blt.n	37212 <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   37174:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   37178:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   3717c:	1a9b      	subs	r3, r3, r2
   3717e:	b2db      	uxtb	r3, r3
   37180:	2b01      	cmp	r3, #1
   37182:	d05f      	beq.n	37244 <ull_conn_llcp+0xfc>
	return 0;
   37184:	2000      	movs	r0, #0
}
   37186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3718a:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   3718e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   37192:	429a      	cmp	r2, r3
   37194:	d006      	beq.n	371a4 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   37196:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   3719a:	f003 0306 	and.w	r3, r3, #6
   3719e:	2b04      	cmp	r3, #4
   371a0:	f000 81f4 	beq.w	3758c <ull_conn_llcp+0x444>
		switch (conn->llcp_type) {
   371a4:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   371a8:	1e7b      	subs	r3, r7, #1
   371aa:	2b05      	cmp	r3, #5
   371ac:	f200 81d8 	bhi.w	37560 <ull_conn_llcp+0x418>
   371b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   371b4:	01720024 	.word	0x01720024
   371b8:	01d600eb 	.word	0x01d600eb
   371bc:	00a500b0 	.word	0x00a500b0
   371c0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   371c4:	2a00      	cmp	r2, #0
   371c6:	4694      	mov	ip, r2
   371c8:	f2c0 81da 	blt.w	37580 <ull_conn_llcp+0x438>
	    !conn->llcp_enc.pause_rx) {
   371cc:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   371d0:	f017 0801 	ands.w	r8, r7, #1
   371d4:	d1cb      	bne.n	3716e <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   371d6:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   371da:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   371de:	45ce      	cmp	lr, r9
   371e0:	f000 8304 	beq.w	377ec <ull_conn_llcp+0x6a4>
			conn->llcp_type = LLCP_CONN_UPD;
   371e4:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   371e6:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   371e8:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   371ec:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   371f0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   371f4:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   371f8:	429a      	cmp	r2, r3
   371fa:	d1cc      	bne.n	37196 <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   371fc:	462a      	mov	r2, r5
   371fe:	4631      	mov	r1, r6
   37200:	4620      	mov	r0, r4
   37202:	f7ef fdc1 	bl	26d88 <event_conn_upd_prep>
   37206:	2800      	cmp	r0, #0
   37208:	f040 81b7 	bne.w	3757a <ull_conn_llcp+0x432>
				return -ECANCELED;
   3720c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   37210:	e7b9      	b.n	37186 <ull_conn_llcp+0x3e>
   37212:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37216:	2900      	cmp	r1, #0
   37218:	d0ac      	beq.n	37174 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   3721a:	2902      	cmp	r1, #2
   3721c:	f000 816e 	beq.w	374fc <ull_conn_llcp+0x3b4>
   37220:	2906      	cmp	r1, #6
   37222:	d05a      	beq.n	372da <ull_conn_llcp+0x192>
   37224:	2901      	cmp	r1, #1
   37226:	d061      	beq.n	372ec <ull_conn_llcp+0x1a4>
			LL_ASSERT(0);
   37228:	4ac9      	ldr	r2, [pc, #804]	; (37550 <ull_conn_llcp+0x408>)
   3722a:	49ca      	ldr	r1, [pc, #808]	; (37554 <ull_conn_llcp+0x40c>)
   3722c:	48ca      	ldr	r0, [pc, #808]	; (37558 <ull_conn_llcp+0x410>)
   3722e:	f240 5312 	movw	r3, #1298	; 0x512
   37232:	f00b fd6d 	bl	42d10 <printk>
   37236:	4040      	eors	r0, r0
   37238:	f380 8811 	msr	BASEPRI, r0
   3723c:	f04f 0003 	mov.w	r0, #3
   37240:	df02      	svc	2
			break;
   37242:	e797      	b.n	37174 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37244:	48c5      	ldr	r0, [pc, #788]	; (3755c <ull_conn_llcp+0x414>)
   37246:	f7f8 fca9 	bl	2fb9c <mem_acquire>
		if (tx) {
   3724a:	2800      	cmp	r0, #0
   3724c:	d038      	beq.n	372c0 <ull_conn_llcp+0x178>
			conn->llcp_terminate.ack--;
   3724e:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   37252:	3b01      	subs	r3, #1
   37254:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   37258:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3725a:	2202      	movs	r2, #2
   3725c:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3725e:	f043 0303 	orr.w	r3, r3, #3
   37262:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   37264:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   37266:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   3726a:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   3726e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   37272:	7202      	strb	r2, [r0, #8]
	if (
   37274:	b1b3      	cbz	r3, 372a4 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   37276:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   3727a:	0795      	lsls	r5, r2, #30
   3727c:	d412      	bmi.n	372a4 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   3727e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37282:	07d2      	lsls	r2, r2, #31
   37284:	d40e      	bmi.n	372a4 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   37286:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   3728a:	4293      	cmp	r3, r2
   3728c:	f000 8568 	beq.w	37d60 <ull_conn_llcp+0xc18>
		} else if (!conn->tx_ctrl) {
   37290:	b959      	cbnz	r1, 372aa <ull_conn_llcp+0x162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37292:	791a      	ldrb	r2, [r3, #4]
   37294:	f002 0203 	and.w	r2, r2, #3
   37298:	2a03      	cmp	r2, #3
   3729a:	f000 8705 	beq.w	380a8 <ull_conn_llcp+0xf60>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3729e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   372a2:	e004      	b.n	372ae <ull_conn_llcp+0x166>
		if (!conn->tx_ctrl) {
   372a4:	2900      	cmp	r1, #0
   372a6:	f000 82f5 	beq.w	37894 <ull_conn_llcp+0x74c>
	tx->next = conn->tx_ctrl_last->next;
   372aa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   372ae:	681a      	ldr	r2, [r3, #0]
   372b0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   372b2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   372b4:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   372b6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   372ba:	2b00      	cmp	r3, #0
   372bc:	f000 816a 	beq.w	37594 <ull_conn_llcp+0x44c>
		if (!conn->procedure_expire) {
   372c0:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   372c4:	2800      	cmp	r0, #0
   372c6:	f47f af5d 	bne.w	37184 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   372ca:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   372ce:	2b01      	cmp	r3, #1
   372d0:	f240 82dc 	bls.w	3788c <ull_conn_llcp+0x744>
			conn->procedure_expire = conn->supervision_reload;
   372d4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   372d8:	e754      	b.n	37184 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   372da:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   372dc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   372de:	440a      	add	r2, r1
   372e0:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   372e2:	4620      	mov	r0, r4
   372e4:	b291      	uxth	r1, r2
   372e6:	f7fd fe23 	bl	34f30 <event_phy_upd_ind_prep>
		break;
   372ea:	e743      	b.n	37174 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   372ec:	462a      	mov	r2, r5
   372ee:	4631      	mov	r1, r6
   372f0:	4620      	mov	r0, r4
   372f2:	f7ef fd49 	bl	26d88 <event_conn_upd_prep>
   372f6:	2800      	cmp	r0, #0
   372f8:	f47f af3c 	bne.w	37174 <ull_conn_llcp+0x2c>
   372fc:	e786      	b.n	3720c <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   372fe:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   37300:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   37302:	4419      	add	r1, r3
   37304:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   37306:	b289      	uxth	r1, r1
   37308:	4620      	mov	r0, r4
   3730a:	f7fd fe11 	bl	34f30 <event_phy_upd_ind_prep>
		break;
   3730e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37312:	e72c      	b.n	3716e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37314:	4891      	ldr	r0, [pc, #580]	; (3755c <ull_conn_llcp+0x414>)
   37316:	f7f8 fc41 	bl	2fb9c <mem_acquire>
	if (tx) {
   3731a:	2800      	cmp	r0, #0
   3731c:	f000 812d 	beq.w	3757a <ull_conn_llcp+0x432>
		conn->llcp_ack = conn->llcp_req;
   37320:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37324:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37328:	7903      	ldrb	r3, [r0, #4]
   3732a:	f043 0303 	orr.w	r3, r3, #3
   3732e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   37330:	2301      	movs	r3, #1
   37332:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   37334:	2312      	movs	r3, #18
   37336:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   37338:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   3733c:	2b00      	cmp	r3, #0
   3733e:	f000 82b2 	beq.w	378a6 <ull_conn_llcp+0x75e>
	    !conn->llcp_enc.pause_tx &&
   37342:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   37346:	078f      	lsls	r7, r1, #30
   37348:	f100 82ad 	bmi.w	378a6 <ull_conn_llcp+0x75e>
	    !conn->llcp_phy.pause_tx &&
   3734c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   37350:	07c9      	lsls	r1, r1, #31
   37352:	f100 82a8 	bmi.w	378a6 <ull_conn_llcp+0x75e>
		if (conn->tx_head == conn->tx_data) {
   37356:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3735a:	428b      	cmp	r3, r1
   3735c:	f000 8681 	beq.w	38062 <ull_conn_llcp+0xf1a>
		} else if (!conn->tx_ctrl) {
   37360:	2a00      	cmp	r2, #0
   37362:	f000 86ac 	beq.w	380be <ull_conn_llcp+0xf76>
	tx->next = conn->tx_ctrl_last->next;
   37366:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3736a:	681a      	ldr	r2, [r3, #0]
   3736c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3736e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37370:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   37372:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37376:	2b00      	cmp	r3, #0
   37378:	f000 83e2 	beq.w	37b40 <ull_conn_llcp+0x9f8>
		conn->procedure_expire = conn->procedure_reload;
   3737c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   37380:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37384:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   37388:	e6f1      	b.n	3716e <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   3738a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3738e:	f013 0803 	ands.w	r8, r3, #3
   37392:	f000 8151 	beq.w	37638 <ull_conn_llcp+0x4f0>
		if (lll->role &&
   37396:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3739a:	2b00      	cmp	r3, #0
   3739c:	f6bf aeea 	bge.w	37174 <ull_conn_llcp+0x2c>
   373a0:	f1b8 0f01 	cmp.w	r8, #1
   373a4:	f47f af35 	bne.w	37212 <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   373a8:	486c      	ldr	r0, [pc, #432]	; (3755c <ull_conn_llcp+0x414>)
   373aa:	f7f8 fbf7 	bl	2fb9c <mem_acquire>
	if (!tx) {
   373ae:	4607      	mov	r7, r0
   373b0:	2800      	cmp	r0, #0
   373b2:	f000 80e2 	beq.w	3757a <ull_conn_llcp+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373b6:	7903      	ldrb	r3, [r0, #4]
   373b8:	f043 0303 	orr.w	r3, r3, #3
   373bc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   373be:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   373c2:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   373c4:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   373c8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   373ca:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   373ce:	210c      	movs	r1, #12
   373d0:	4640      	mov	r0, r8
   373d2:	f003 faa5 	bl	3a920 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   373d6:	4641      	mov	r1, r8
   373d8:	2208      	movs	r2, #8
   373da:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   373de:	f00d fd6f 	bl	44ec0 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   373e2:	464a      	mov	r2, r9
   373e4:	f107 0110 	add.w	r1, r7, #16
   373e8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   373ec:	f00d fd68 	bl	44ec0 <memcpy>
	    conn->tx_head &&
   373f0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   373f4:	2b00      	cmp	r3, #0
   373f6:	f000 84a7 	beq.w	37d48 <ull_conn_llcp+0xc00>
	    !conn->llcp_enc.pause_tx &&
   373fa:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   373fe:	0791      	lsls	r1, r2, #30
   37400:	f100 84a2 	bmi.w	37d48 <ull_conn_llcp+0xc00>
	    !conn->llcp_phy.pause_tx &&
   37404:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37408:	07d2      	lsls	r2, r2, #31
   3740a:	f100 849d 	bmi.w	37d48 <ull_conn_llcp+0xc00>
		if (conn->tx_head == conn->tx_data) {
   3740e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37412:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37416:	428b      	cmp	r3, r1
   37418:	f000 8682 	beq.w	38120 <ull_conn_llcp+0xfd8>
		} else if (!conn->tx_ctrl) {
   3741c:	2a00      	cmp	r2, #0
   3741e:	f000 874a 	beq.w	382b6 <ull_conn_llcp+0x116e>
	tx->next = conn->tx_ctrl_last->next;
   37422:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37426:	681a      	ldr	r2, [r3, #0]
   37428:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3742a:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3742c:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3742e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37432:	2b00      	cmp	r3, #0
   37434:	f000 85a6 	beq.w	37f84 <ull_conn_llcp+0xe3c>
			rx = ll_pdu_rx_alloc();
   37438:	f7fb ff78 	bl	3332c <ll_pdu_rx_alloc>
			if (!rx) {
   3743c:	4607      	mov	r7, r0
   3743e:	2800      	cmp	r0, #0
   37440:	f000 809b 	beq.w	3757a <ull_conn_llcp+0x432>
			rx->hdr.handle = conn->lll.handle;
   37444:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   37446:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37448:	2303      	movs	r3, #3
   3744a:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3744c:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3744e:	7f3b      	ldrb	r3, [r7, #28]
   37450:	f043 0303 	orr.w	r3, r3, #3
   37454:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   37456:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   37458:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3745a:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3745c:	f204 1169 	addw	r1, r4, #361	; 0x169
   37460:	f107 0020 	add.w	r0, r7, #32
   37464:	f00d fd2c 	bl	44ec0 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   37468:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   3746c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   37470:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   37474:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   37478:	6838      	ldr	r0, [r7, #0]
   3747a:	4639      	mov	r1, r7
   3747c:	f7fb ff28 	bl	332d0 <ll_rx_put>
			ll_rx_sched();
   37480:	f7fb ff30 	bl	332e4 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   37484:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   37488:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3748c:	2202      	movs	r2, #2
   3748e:	f362 0301 	bfi	r3, r2, #0, #2
   37492:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   37496:	e66a      	b.n	3716e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   37498:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   3749a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3749c:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3749e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   374a2:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   374a4:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   374a8:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   374aa:	d176      	bne.n	3759a <ull_conn_llcp+0x452>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   374ac:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   374b0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   374b4:	1afb      	subs	r3, r7, r3
   374b6:	0418      	lsls	r0, r3, #16
   374b8:	f53f ae59 	bmi.w	3716e <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   374bc:	f1bc 0f00 	cmp.w	ip, #0
   374c0:	f2c0 8336 	blt.w	37b30 <ull_conn_llcp+0x9e8>
			conn->llcp_ack = conn->llcp_req;
   374c4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   374c8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   374cc:	f104 0734 	add.w	r7, r4, #52	; 0x34
   374d0:	2205      	movs	r2, #5
   374d2:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   374d6:	4638      	mov	r0, r7
   374d8:	f00d fcf2 	bl	44ec0 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   374dc:	2105      	movs	r1, #5
   374de:	4638      	mov	r0, r7
   374e0:	f7f8 fd32 	bl	2ff48 <util_ones_count_get>
		lll->data_chan_count =
   374e4:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   374e8:	2301      	movs	r3, #1
		lll->data_chan_count =
   374ea:	f360 0c05 	bfi	ip, r0, #0, #6
   374ee:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   374f2:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   374f6:	fa4f fc8c 	sxtb.w	ip, ip
   374fa:	e638      	b.n	3716e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   374fc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   374fe:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   37500:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   37504:	440a      	add	r2, r1
   37506:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   37508:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   3750c:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   3750e:	f040 8122 	bne.w	37756 <ull_conn_llcp+0x60e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   37512:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   37516:	1ab6      	subs	r6, r6, r2
   37518:	0436      	lsls	r6, r6, #16
   3751a:	f53f ae2b 	bmi.w	37174 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   3751e:	f104 0534 	add.w	r5, r4, #52	; 0x34
   37522:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
   37524:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   37528:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   3752c:	4628      	mov	r0, r5
   3752e:	f00d fcc7 	bl	44ec0 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   37532:	2105      	movs	r1, #5
   37534:	4628      	mov	r0, r5
   37536:	f7f8 fd07 	bl	2ff48 <util_ones_count_get>
		lll->data_chan_count =
   3753a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3753e:	2201      	movs	r2, #1
		lll->data_chan_count =
   37540:	f360 0305 	bfi	r3, r0, #0, #6
   37544:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   37548:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   3754c:	e612      	b.n	37174 <ull_conn_llcp+0x2c>
   3754e:	bf00      	nop
   37550:	0004a914 	.word	0x0004a914
   37554:	0004a500 	.word	0x0004a500
   37558:	0004a4a0 	.word	0x0004a4a0
   3755c:	200026fc 	.word	0x200026fc
			LL_ASSERT(0);
   37560:	4ad5      	ldr	r2, [pc, #852]	; (378b8 <ull_conn_llcp+0x770>)
   37562:	49d6      	ldr	r1, [pc, #856]	; (378bc <ull_conn_llcp+0x774>)
   37564:	48d6      	ldr	r0, [pc, #856]	; (378c0 <ull_conn_llcp+0x778>)
   37566:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3756a:	f00b fbd1 	bl	42d10 <printk>
   3756e:	4040      	eors	r0, r0
   37570:	f380 8811 	msr	BASEPRI, r0
   37574:	f04f 0003 	mov.w	r0, #3
   37578:	df02      	svc	2
			break;
   3757a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3757e:	e5f6      	b.n	3716e <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   37580:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   37584:	2900      	cmp	r1, #0
   37586:	f47f ae48 	bne.w	3721a <ull_conn_llcp+0xd2>
   3758a:	e61f      	b.n	371cc <ull_conn_llcp+0x84>
				event_len_prep(conn);
   3758c:	4620      	mov	r0, r4
   3758e:	f7fd fbd9 	bl	34d44 <event_len_prep>
   37592:	e607      	b.n	371a4 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   37594:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   37598:	e692      	b.n	372c0 <ull_conn_llcp+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3759a:	48ca      	ldr	r0, [pc, #808]	; (378c4 <ull_conn_llcp+0x77c>)
   3759c:	f7f8 fafe 	bl	2fb9c <mem_acquire>
		if (tx) {
   375a0:	4680      	mov	r8, r0
   375a2:	2800      	cmp	r0, #0
   375a4:	d0e9      	beq.n	3757a <ull_conn_llcp+0x432>
						      conn->lll.latency + 6;
   375a6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   375a8:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   375ac:	3306      	adds	r3, #6
   375ae:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   375b0:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   375b4:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   375b6:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   375ba:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   375be:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   375c2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   375c4:	2308      	movs	r3, #8
   375c6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   375c8:	2301      	movs	r3, #1
   375ca:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   375cc:	2205      	movs	r2, #5
   375ce:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   375d2:	3008      	adds	r0, #8
   375d4:	f00d fc74 	bl	44ec0 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   375d8:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   375dc:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   375e0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   375e4:	2b00      	cmp	r3, #0
   375e6:	f000 82ae 	beq.w	37b46 <ull_conn_llcp+0x9fe>
	    !conn->llcp_enc.pause_tx &&
   375ea:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   375ee:	0792      	lsls	r2, r2, #30
   375f0:	f100 82a9 	bmi.w	37b46 <ull_conn_llcp+0x9fe>
	    !conn->llcp_phy.pause_tx &&
   375f4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   375f8:	07d7      	lsls	r7, r2, #31
   375fa:	f100 82a4 	bmi.w	37b46 <ull_conn_llcp+0x9fe>
		if (conn->tx_head == conn->tx_data) {
   375fe:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37602:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37606:	428b      	cmp	r3, r1
   37608:	f000 8563 	beq.w	380d2 <ull_conn_llcp+0xf8a>
		} else if (!conn->tx_ctrl) {
   3760c:	2a00      	cmp	r2, #0
   3760e:	f000 8607 	beq.w	38220 <ull_conn_llcp+0x10d8>
	tx->next = conn->tx_ctrl_last->next;
   37612:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37616:	681a      	ldr	r2, [r3, #0]
   37618:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3761c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37620:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   37624:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37628:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3762c:	2b00      	cmp	r3, #0
   3762e:	f47f ad9e 	bne.w	3716e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   37632:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   37636:	e59a      	b.n	3716e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37638:	48a2      	ldr	r0, [pc, #648]	; (378c4 <ull_conn_llcp+0x77c>)
   3763a:	f7f8 faaf 	bl	2fb9c <mem_acquire>
	if (!tx) {
   3763e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37642:	4681      	mov	r9, r0
   37644:	2800      	cmp	r0, #0
   37646:	f43f ad92 	beq.w	3716e <ull_conn_llcp+0x26>
	if (!lll->role) {
   3764a:	f1bc 0f00 	cmp.w	ip, #0
   3764e:	f280 82ff 	bge.w	37c50 <ull_conn_llcp+0xb08>
	else if (!lll->enc_rx) {
   37652:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   37656:	071a      	lsls	r2, r3, #28
   37658:	f100 83fb 	bmi.w	37e52 <ull_conn_llcp+0xd0a>
		if (conn->llcp.encryption.error_code) {
   3765c:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   37660:	f1b8 0f00 	cmp.w	r8, #0
   37664:	f040 8492 	bne.w	37f8c <ull_conn_llcp+0xe44>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   37668:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3766c:	463b      	mov	r3, r7
   3766e:	4642      	mov	r2, r8
   37670:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   37674:	f204 1071 	addw	r0, r4, #369	; 0x171
   37678:	f004 ff32 	bl	3c4e0 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   3767c:	4639      	mov	r1, r7
   3767e:	2210      	movs	r2, #16
   37680:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   37684:	f00d fc1c 	bl	44ec0 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   37688:	2208      	movs	r2, #8
   3768a:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3768e:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   37692:	f00d fc15 	bl	44ec0 <memcpy>
			lll->ccm_rx.direction = 1U;
   37696:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   3769a:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3769e:	f043 0301 	orr.w	r3, r3, #1
   376a2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   376a6:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   376aa:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   376ae:	f368 0300 	bfi	r3, r8, #0, #1
   376b2:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   376b6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   376ba:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   376be:	f043 0308 	orr.w	r3, r3, #8
   376c2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   376c6:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   376ca:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   376ce:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   376d2:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   376d6:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   376da:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   376de:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   376e2:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   376e6:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   376ea:	2301      	movs	r3, #1
   376ec:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   376f0:	2305      	movs	r3, #5
   376f2:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   376f6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   376fa:	2b00      	cmp	r3, #0
   376fc:	f000 8357 	beq.w	37dae <ull_conn_llcp+0xc66>
	    !conn->llcp_enc.pause_tx &&
   37700:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37704:	0797      	lsls	r7, r2, #30
   37706:	f100 8352 	bmi.w	37dae <ull_conn_llcp+0xc66>
	    !conn->llcp_phy.pause_tx &&
   3770a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   3770e:	07d0      	lsls	r0, r2, #31
   37710:	f100 834d 	bmi.w	37dae <ull_conn_llcp+0xc66>
		if (conn->tx_head == conn->tx_data) {
   37714:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37718:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   3771c:	428b      	cmp	r3, r1
   3771e:	f000 85db 	beq.w	382d8 <ull_conn_llcp+0x1190>
		} else if (!conn->tx_ctrl) {
   37722:	2a00      	cmp	r2, #0
   37724:	f000 86d3 	beq.w	384ce <ull_conn_llcp+0x1386>
	tx->next = conn->tx_ctrl_last->next;
   37728:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3772c:	681a      	ldr	r2, [r3, #0]
   3772e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37732:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   37736:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3773a:	f8d9 3000 	ldr.w	r3, [r9]
   3773e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37742:	2b00      	cmp	r3, #0
   37744:	f000 82f3 	beq.w	37d2e <ull_conn_llcp+0xbe6>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   37748:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3774c:	f043 0303 	orr.w	r3, r3, #3
   37750:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   37754:	e50b      	b.n	3716e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37756:	485b      	ldr	r0, [pc, #364]	; (378c4 <ull_conn_llcp+0x77c>)
   37758:	f7f8 fa20 	bl	2fb9c <mem_acquire>
		if (tx) {
   3775c:	4605      	mov	r5, r0
   3775e:	2800      	cmp	r0, #0
   37760:	f43f ad08 	beq.w	37174 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   37764:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   37766:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3776a:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   3776c:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
   3776e:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   37772:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
   37774:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   37778:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3777c:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37780:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
   37782:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37784:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37786:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   37788:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3778a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   3778e:	2205      	movs	r2, #5
   37790:	3008      	adds	r0, #8
   37792:	f00d fb95 	bl	44ec0 <memcpy>
	    conn->tx_head &&
   37796:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3779a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   3779e:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   377a2:	2b00      	cmp	r3, #0
   377a4:	f000 81db 	beq.w	37b5e <ull_conn_llcp+0xa16>
	    !conn->llcp_enc.pause_tx &&
   377a8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   377ac:	0792      	lsls	r2, r2, #30
   377ae:	f100 81d6 	bmi.w	37b5e <ull_conn_llcp+0xa16>
	    !conn->llcp_phy.pause_tx &&
   377b2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   377b6:	07d7      	lsls	r7, r2, #31
   377b8:	f100 81d1 	bmi.w	37b5e <ull_conn_llcp+0xa16>
		if (conn->tx_head == conn->tx_data) {
   377bc:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   377c0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   377c4:	428b      	cmp	r3, r1
   377c6:	f000 8495 	beq.w	380f4 <ull_conn_llcp+0xfac>
		} else if (!conn->tx_ctrl) {
   377ca:	2a00      	cmp	r2, #0
   377cc:	f000 85a1 	beq.w	38312 <ull_conn_llcp+0x11ca>
	tx->next = conn->tx_ctrl_last->next;
   377d0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   377d4:	681a      	ldr	r2, [r3, #0]
   377d6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   377d8:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   377da:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   377dc:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   377e0:	2b00      	cmp	r3, #0
   377e2:	f47f acc7 	bne.w	37174 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   377e6:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   377ea:	e4c3      	b.n	37174 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   377ec:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   377f0:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   377f4:	4571      	cmp	r1, lr
   377f6:	d067      	beq.n	378c8 <ull_conn_llcp+0x780>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   377f8:	eba1 010e 	sub.w	r1, r1, lr
   377fc:	07c8      	lsls	r0, r1, #31
   377fe:	f57f acb6 	bpl.w	3716e <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   37802:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   37806:	f013 0701 	ands.w	r7, r3, #1
   3780a:	f000 81b3 	beq.w	37b74 <ull_conn_llcp+0xa2c>
		rx = ll_pdu_rx_alloc();
   3780e:	f7fb fd8d 	bl	3332c <ll_pdu_rx_alloc>
		if (!rx) {
   37812:	4607      	mov	r7, r0
   37814:	2800      	cmp	r0, #0
   37816:	f000 8185 	beq.w	37b24 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3781a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   3781e:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37822:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   37824:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   37826:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37828:	f043 0303 	orr.w	r3, r3, #3
   3782c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3782e:	2309      	movs	r3, #9
   37830:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   37832:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37834:	2303      	movs	r3, #3
   37836:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   37838:	4641      	mov	r1, r8
   3783a:	2208      	movs	r2, #8
   3783c:	3020      	adds	r0, #32
   3783e:	f00d fb4a 	bl	44ed6 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   37842:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   37846:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   37848:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   3784c:	f3c2 2207 	ubfx	r2, r2, #8, #8
   37850:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   37854:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   37856:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   3785a:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   3785e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   37862:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   37864:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   37868:	0a12      	lsrs	r2, r2, #8
   3786a:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   3786e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   37872:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   37876:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   37878:	6808      	ldr	r0, [r1, #0]
   3787a:	f7fb fd29 	bl	332d0 <ll_rx_put>
	ll_rx_sched();
   3787e:	f7fb fd31 	bl	332e4 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37882:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37886:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   3788a:	e468      	b.n	3715e <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   3788c:	3301      	adds	r3, #1
   3788e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   37892:	e478      	b.n	37186 <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   37894:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   37896:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   3789a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3789e:	2b00      	cmp	r3, #0
   378a0:	f47f ad0e 	bne.w	372c0 <ull_conn_llcp+0x178>
   378a4:	e676      	b.n	37594 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   378a6:	2a00      	cmp	r2, #0
   378a8:	f47f ad5d 	bne.w	37366 <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head;
   378ac:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   378ae:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   378b2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   378b6:	e55e      	b.n	37376 <ull_conn_llcp+0x22e>
   378b8:	0004a914 	.word	0x0004a914
   378bc:	0004a500 	.word	0x0004a500
   378c0:	0004a4a0 	.word	0x0004a4a0
   378c4:	200026fc 	.word	0x200026fc
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   378c8:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   378cc:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   378d0:	4571      	cmp	r1, lr
   378d2:	d02f      	beq.n	37934 <ull_conn_llcp+0x7ec>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   378d4:	eba1 010e 	sub.w	r1, r1, lr
   378d8:	07cf      	lsls	r7, r1, #31
   378da:	f57f ac48 	bpl.w	3716e <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   378de:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   378e2:	07d8      	lsls	r0, r3, #31
   378e4:	f140 82f9 	bpl.w	37eda <ull_conn_llcp+0xd92>
	} else if (conn->llcp_version.rx) {
   378e8:	079b      	lsls	r3, r3, #30
   378ea:	f140 82e3 	bpl.w	37eb4 <ull_conn_llcp+0xd6c>
		rx = ll_pdu_rx_alloc();
   378ee:	f7fb fd1d 	bl	3332c <ll_pdu_rx_alloc>
		if (!rx) {
   378f2:	4601      	mov	r1, r0
   378f4:	2800      	cmp	r0, #0
   378f6:	f000 8115 	beq.w	37b24 <ull_conn_llcp+0x9dc>
		conn->llcp_version.ack = conn->llcp_version.req;
   378fa:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   378fe:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   37902:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   37904:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37906:	2303      	movs	r3, #3
   37908:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3790a:	7f03      	ldrb	r3, [r0, #28]
   3790c:	f043 0303 	orr.w	r3, r3, #3
   37910:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   37912:	2306      	movs	r3, #6
   37914:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   37916:	230c      	movs	r3, #12
   37918:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   3791a:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   3791e:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   37922:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   37926:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   3792a:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   3792e:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   37932:	e7a1      	b.n	37878 <ull_conn_llcp+0x730>
		} else if (conn->llcp_conn_param.ack !=
   37934:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   37938:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   3793c:	458e      	cmp	lr, r1
   3793e:	f000 81f9 	beq.w	37d34 <ull_conn_llcp+0xbec>
	return conn_upd_curr && (conn_upd_curr != conn);
   37942:	f8df 8304 	ldr.w	r8, [pc, #772]	; 37c48 <ull_conn_llcp+0xb00>
   37946:	f8d8 1000 	ldr.w	r1, [r8]
   3794a:	2900      	cmp	r1, #0
   3794c:	f000 8365 	beq.w	3801a <ull_conn_llcp+0xed2>
   37950:	428c      	cmp	r4, r1
   37952:	f47f ac0c 	bne.w	3716e <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   37956:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   3795a:	f001 010f 	and.w	r1, r1, #15
   3795e:	2906      	cmp	r1, #6
   37960:	f200 8671 	bhi.w	38646 <ull_conn_llcp+0x14fe>
   37964:	f20f 0e04 	addw	lr, pc, #4
   37968:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   3796c:	00037a5f 	.word	0x00037a5f
   37970:	000379d9 	.word	0x000379d9
   37974:	00037989 	.word	0x00037989
   37978:	0003715f 	.word	0x0003715f
   3797c:	0003715f 	.word	0x0003715f
   37980:	0003715f 	.word	0x0003715f
   37984:	0003715f 	.word	0x0003715f
	if (conn->llcp_enc.pause_tx) {
   37988:	07bb      	lsls	r3, r7, #30
   3798a:	f53f abf0 	bmi.w	3716e <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   3798e:	f7fb fccd 	bl	3332c <ll_pdu_rx_alloc>
	if (!rx) {
   37992:	4601      	mov	r1, r0
   37994:	2800      	cmp	r0, #0
   37996:	f000 80c5 	beq.w	37b24 <ull_conn_llcp+0x9dc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3799a:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3799e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   379a0:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   379a2:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   379a6:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   379aa:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   379ac:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   379b0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   379b2:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   379b4:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   379b6:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   379b8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   379bc:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   379be:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   379c2:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   379c4:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   379c8:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   379ca:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   379ce:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   379d0:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   379d2:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   379d4:	77cb      	strb	r3, [r1, #31]
   379d6:	e74f      	b.n	37878 <ull_conn_llcp+0x730>
	if (conn->llcp_conn_param.status) {
   379d8:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   379dc:	2b00      	cmp	r3, #0
   379de:	f040 83b8 	bne.w	38152 <ull_conn_llcp+0x100a>
	if (!conn->lll.role) {
   379e2:	2a00      	cmp	r2, #0
   379e4:	f2c0 84e2 	blt.w	383ac <ull_conn_llcp+0x1264>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   379e8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   379ec:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   379f0:	2106      	movs	r1, #6
   379f2:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   379f6:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   379fa:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   379fe:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   37a00:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   37a04:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   37a08:	2900      	cmp	r1, #0
   37a0a:	f000 8571 	beq.w	384f0 <ull_conn_llcp+0x13a8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   37a0e:	fbb2 f3f1 	udiv	r3, r2, r1
   37a12:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   37a16:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   37a1a:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   37a1c:	4299      	cmp	r1, r3
   37a1e:	bf98      	it	ls
   37a20:	461a      	movls	r2, r3
   37a22:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   37a26:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37a2a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   37a2e:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   37a32:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   37a36:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37a3a:	00db      	lsls	r3, r3, #3
   37a3c:	f022 020f 	bic.w	r2, r2, #15
   37a40:	f043 0302 	orr.w	r3, r3, #2
   37a44:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   37a46:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   37a4a:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   37a4e:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37a52:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   37a56:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37a5a:	f7ff bb8b 	b.w	37174 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37a5e:	487b      	ldr	r0, [pc, #492]	; (37c4c <ull_conn_llcp+0xb04>)
			event_counter = lll->event_counter +
   37a60:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   37a62:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37a66:	f7f8 f899 	bl	2fb9c <mem_acquire>
	if (!tx) {
   37a6a:	4602      	mov	r2, r0
   37a6c:	2800      	cmp	r0, #0
   37a6e:	d059      	beq.n	37b24 <ull_conn_llcp+0x9dc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37a70:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   37a72:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37a76:	f043 0303 	orr.w	r3, r3, #3
   37a7a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   37a7c:	2318      	movs	r3, #24
   37a7e:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   37a80:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   37a84:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   37a86:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   37a8a:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   37a8c:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   37a8e:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   37a92:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   37a94:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   37a98:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   37a9c:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   37a9e:	74d3      	strb	r3, [r2, #19]
   37aa0:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   37aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   37aa6:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   37aa8:	7553      	strb	r3, [r2, #21]
   37aaa:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   37aac:	75d3      	strb	r3, [r2, #23]
   37aae:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   37ab0:	7653      	strb	r3, [r2, #25]
   37ab2:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   37ab4:	76d3      	strb	r3, [r2, #27]
   37ab6:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   37ab8:	7753      	strb	r3, [r2, #29]
   37aba:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
   37abc:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   37abe:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37ac2:	200f      	movs	r0, #15
   37ac4:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   37ac6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   37aca:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   37ace:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   37ad2:	2104      	movs	r1, #4
   37ad4:	f361 0303 	bfi	r3, r1, #0, #4
   37ad8:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   37adc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37ae0:	2b00      	cmp	r3, #0
   37ae2:	f000 832b 	beq.w	3813c <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
   37ae6:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   37aea:	078f      	lsls	r7, r1, #30
   37aec:	f100 8326 	bmi.w	3813c <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
   37af0:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   37af4:	07c8      	lsls	r0, r1, #31
   37af6:	f100 8321 	bmi.w	3813c <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
   37afa:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   37afe:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   37b00:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37b04:	f000 8501 	beq.w	3850a <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
   37b08:	2900      	cmp	r1, #0
   37b0a:	f000 857b 	beq.w	38604 <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
   37b0e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37b12:	6819      	ldr	r1, [r3, #0]
   37b14:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   37b16:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   37b18:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37b1c:	6813      	ldr	r3, [r2, #0]
   37b1e:	2b00      	cmp	r3, #0
   37b20:	f000 8376 	beq.w	38210 <ull_conn_llcp+0x10c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37b24:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37b28:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   37b2c:	f7ff bb17 	b.w	3715e <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37b30:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   37b34:	2b00      	cmp	r3, #0
   37b36:	f43f acc5 	beq.w	374c4 <ull_conn_llcp+0x37c>
			conn->periph.llcp_type = LLCP_NONE;
   37b3a:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   37b3e:	e4c5      	b.n	374cc <ull_conn_llcp+0x384>
		conn->tx_data_last = tx;
   37b40:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   37b44:	e41a      	b.n	3737c <ull_conn_llcp+0x234>
		if (!conn->tx_ctrl) {
   37b46:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37b4a:	2a00      	cmp	r2, #0
   37b4c:	f47f ad61 	bne.w	37612 <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head;
   37b50:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37b54:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b58:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   37b5c:	e564      	b.n	37628 <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
   37b5e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37b62:	2a00      	cmp	r2, #0
   37b64:	f47f ae34 	bne.w	377d0 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head;
   37b68:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   37b6a:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   37b72:	e635      	b.n	377e0 <ull_conn_llcp+0x698>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37b74:	4835      	ldr	r0, [pc, #212]	; (37c4c <ull_conn_llcp+0xb04>)
   37b76:	f7f8 f811 	bl	2fb9c <mem_acquire>
	if (tx) {
   37b7a:	4680      	mov	r8, r0
   37b7c:	2800      	cmp	r0, #0
   37b7e:	d0d1      	beq.n	37b24 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack--;
   37b80:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   37b84:	3b01      	subs	r3, #1
   37b86:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   37b8a:	2309      	movs	r3, #9
   37b8c:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   37b8e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   37b92:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37b94:	7903      	ldrb	r3, [r0, #4]
   37b96:	f043 0303 	orr.w	r3, r3, #3
   37b9a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   37b9c:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   37ba0:	bfac      	ite	ge
   37ba2:	2308      	movge	r3, #8
   37ba4:	230e      	movlt	r3, #14
   37ba6:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   37ba8:	4639      	mov	r1, r7
   37baa:	4410      	add	r0, r2
   37bac:	f00d f993 	bl	44ed6 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   37bb0:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   37bb4:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   37bb6:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   37bba:	f3c2 2207 	ubfx	r2, r2, #8, #8
   37bbe:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   37bc2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   37bc4:	f888 300c 	strb.w	r3, [r8, #12]
   37bc8:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   37bcc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   37bd0:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   37bd4:	0a09      	lsrs	r1, r1, #8
   37bd6:	0a12      	lsrs	r2, r2, #8
   37bd8:	f888 100b 	strb.w	r1, [r8, #11]
   37bdc:	f888 300d 	strb.w	r3, [r8, #13]
   37be0:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   37be4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37be8:	2b00      	cmp	r3, #0
   37bea:	f000 80d4 	beq.w	37d96 <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
   37bee:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37bf2:	0791      	lsls	r1, r2, #30
   37bf4:	f100 80cf 	bmi.w	37d96 <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
   37bf8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37bfc:	07d2      	lsls	r2, r2, #31
   37bfe:	f100 80ca 	bmi.w	37d96 <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
   37c02:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37c06:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37c0a:	428b      	cmp	r3, r1
   37c0c:	f000 82f0 	beq.w	381f0 <ull_conn_llcp+0x10a8>
		} else if (!conn->tx_ctrl) {
   37c10:	2a00      	cmp	r2, #0
   37c12:	f000 83b4 	beq.w	3837e <ull_conn_llcp+0x1236>
	tx->next = conn->tx_ctrl_last->next;
   37c16:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37c1a:	681a      	ldr	r2, [r3, #0]
   37c1c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   37c20:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37c24:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   37c28:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37c2c:	2b00      	cmp	r3, #0
   37c2e:	f000 8226 	beq.w	3807e <ull_conn_llcp+0xf36>
		conn->procedure_expire = conn->procedure_reload;
   37c32:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37c36:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37c3a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   37c3e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   37c42:	f7ff ba8c 	b.w	3715e <ull_conn_llcp+0x16>
   37c46:	bf00      	nop
   37c48:	20002668 	.word	0x20002668
   37c4c:	200026fc 	.word	0x200026fc
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   37c50:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   37c54:	463b      	mov	r3, r7
   37c56:	4642      	mov	r2, r8
   37c58:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   37c5c:	f204 1071 	addw	r0, r4, #369	; 0x171
   37c60:	f004 fc3e 	bl	3c4e0 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   37c64:	4639      	mov	r1, r7
   37c66:	2210      	movs	r2, #16
   37c68:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   37c6c:	f00d f928 	bl	44ec0 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   37c70:	2208      	movs	r2, #8
   37c72:	f104 0194 	add.w	r1, r4, #148	; 0x94
   37c76:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   37c7a:	f00d f921 	bl	44ec0 <memcpy>
		lll->enc_rx = 1;
   37c7e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   37c82:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   37c86:	f023 0318 	bic.w	r3, r3, #24
   37c8a:	f043 0318 	orr.w	r3, r3, #24
   37c8e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   37c92:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   37c96:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   37c9a:	f368 0300 	bfi	r3, r8, #0, #1
   37c9e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   37ca2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   37ca6:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   37caa:	f043 0301 	orr.w	r3, r3, #1
   37cae:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37cb2:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   37cb4:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   37cb8:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   37cbc:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   37cc0:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   37cc4:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   37cc8:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37ccc:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37cd0:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   37cd4:	2306      	movs	r3, #6
   37cd6:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   37cda:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37cde:	f042 0203 	orr.w	r2, r2, #3
   37ce2:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   37ce6:	2b00      	cmp	r3, #0
   37ce8:	d04a      	beq.n	37d80 <ull_conn_llcp+0xc38>
	    !conn->llcp_enc.pause_tx &&
   37cea:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37cee:	0790      	lsls	r0, r2, #30
   37cf0:	d446      	bmi.n	37d80 <ull_conn_llcp+0xc38>
	    !conn->llcp_phy.pause_tx &&
   37cf2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37cf6:	07d1      	lsls	r1, r2, #31
   37cf8:	d442      	bmi.n	37d80 <ull_conn_llcp+0xc38>
		if (conn->tx_head == conn->tx_data) {
   37cfa:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37cfe:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37d00:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37d04:	f000 8264 	beq.w	381d0 <ull_conn_llcp+0x1088>
		} else if (!conn->tx_ctrl) {
   37d08:	2a00      	cmp	r2, #0
   37d0a:	f000 83b9 	beq.w	38480 <ull_conn_llcp+0x1338>
	tx->next = conn->tx_ctrl_last->next;
   37d0e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37d12:	681a      	ldr	r2, [r3, #0]
   37d14:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37d18:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37d1c:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   37d20:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37d24:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37d28:	2b00      	cmp	r3, #0
   37d2a:	f47f ad0d 	bne.w	37748 <ull_conn_llcp+0x600>
		conn->tx_data_last = tx;
   37d2e:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   37d32:	e509      	b.n	37748 <ull_conn_llcp+0x600>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37d34:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   37d38:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   37d3c:	4299      	cmp	r1, r3
   37d3e:	d042      	beq.n	37dc6 <ull_conn_llcp+0xc7e>
			event_len_prep(conn);
   37d40:	4620      	mov	r0, r4
   37d42:	f7fc ffff 	bl	34d44 <event_len_prep>
   37d46:	e6ed      	b.n	37b24 <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
   37d48:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37d4c:	2a00      	cmp	r2, #0
   37d4e:	f47f ab68 	bne.w	37422 <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head;
   37d52:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   37d54:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37d58:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   37d5c:	f7ff bb69 	b.w	37432 <ull_conn_llcp+0x2ea>
			conn->tx_data = conn->tx_data->next;
   37d60:	681a      	ldr	r2, [r3, #0]
   37d62:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37d66:	2900      	cmp	r1, #0
   37d68:	f47f aa9f 	bne.w	372aa <ull_conn_llcp+0x162>
			tx->next = conn->tx_head->next;
   37d6c:	681a      	ldr	r2, [r3, #0]
   37d6e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   37d70:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37d72:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   37d74:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   37d78:	2b00      	cmp	r3, #0
   37d7a:	f47f aaa1 	bne.w	372c0 <ull_conn_llcp+0x178>
   37d7e:	e409      	b.n	37594 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   37d80:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37d84:	2a00      	cmp	r2, #0
   37d86:	d1c2      	bne.n	37d0e <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
   37d88:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37d8c:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37d90:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   37d94:	e7c6      	b.n	37d24 <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
   37d96:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37d9a:	2a00      	cmp	r2, #0
   37d9c:	f47f af3b 	bne.w	37c16 <ull_conn_llcp+0xace>
			tx->next = conn->tx_head;
   37da0:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37da4:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37da8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   37dac:	e73e      	b.n	37c2c <ull_conn_llcp+0xae4>
		if (!conn->tx_ctrl) {
   37dae:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37db2:	2a00      	cmp	r2, #0
   37db4:	f47f acb8 	bne.w	37728 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head;
   37db8:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37dbc:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37dc0:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   37dc4:	e4b9      	b.n	3773a <ull_conn_llcp+0x5f2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   37dc6:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   37dca:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   37dce:	428b      	cmp	r3, r1
   37dd0:	f43f a9cd 	beq.w	3716e <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   37dd4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   37dd8:	f003 0703 	and.w	r7, r3, #3
   37ddc:	2f03      	cmp	r7, #3
   37dde:	f000 8229 	beq.w	38234 <ull_conn_llcp+0x10ec>
   37de2:	2f00      	cmp	r7, #0
   37de4:	f47f a9c2 	bne.w	3716c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37de8:	48c9      	ldr	r0, [pc, #804]	; (38110 <ull_conn_llcp+0xfc8>)
   37dea:	f7f7 fed7 	bl	2fb9c <mem_acquire>
		if (!tx) {
   37dee:	4601      	mov	r1, r0
   37df0:	2800      	cmp	r0, #0
   37df2:	f43f ae97 	beq.w	37b24 <ull_conn_llcp+0x9dc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37df6:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37dfa:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37dfe:	2201      	movs	r2, #1
   37e00:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37e04:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37e08:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37e0c:	f3c3 0782 	ubfx	r7, r3, #2, #3
   37e10:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37e14:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   37e18:	f3c0 0040 	ubfx	r0, r0, #1, #1
   37e1c:	f360 07c3 	bfi	r7, r0, #3, #1
   37e20:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   37e24:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37e28:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   37e2a:	f367 02c5 	bfi	r2, r7, #3, #3
   37e2e:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37e32:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   37e36:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37e38:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   37e3c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37e3e:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37e40:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   37e42:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   37e44:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37e46:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37e48:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37e4a:	4620      	mov	r0, r4
   37e4c:	f7fc fc84 	bl	34758 <ctrl_tx_pause_enqueue>
   37e50:	e6ef      	b.n	37c32 <ull_conn_llcp+0xaea>
	conn->lll.enc_tx = 1;
   37e52:	f043 0310 	orr.w	r3, r3, #16
   37e56:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37e5a:	2301      	movs	r3, #1
   37e5c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37e5e:	7903      	ldrb	r3, [r0, #4]
   37e60:	f043 0303 	orr.w	r3, r3, #3
   37e64:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   37e66:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   37e6a:	2206      	movs	r2, #6
   37e6c:	71c2      	strb	r2, [r0, #7]
	if (
   37e6e:	2b00      	cmp	r3, #0
   37e70:	d07d      	beq.n	37f6e <ull_conn_llcp+0xe26>
	    !conn->llcp_enc.pause_tx &&
   37e72:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37e76:	0791      	lsls	r1, r2, #30
   37e78:	d479      	bmi.n	37f6e <ull_conn_llcp+0xe26>
	    !conn->llcp_phy.pause_tx &&
   37e7a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37e7e:	07d2      	lsls	r2, r2, #31
   37e80:	d475      	bmi.n	37f6e <ull_conn_llcp+0xe26>
		if (conn->tx_head == conn->tx_data) {
   37e82:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37e86:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37e88:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37e8c:	f000 8233 	beq.w	382f6 <ull_conn_llcp+0x11ae>
		} else if (!conn->tx_ctrl) {
   37e90:	2a00      	cmp	r2, #0
   37e92:	f000 8325 	beq.w	384e0 <ull_conn_llcp+0x1398>
	tx->next = conn->tx_ctrl_last->next;
   37e96:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37e9a:	681a      	ldr	r2, [r3, #0]
   37e9c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37ea0:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   37ea4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37ea8:	f8d9 3000 	ldr.w	r3, [r9]
   37eac:	2b00      	cmp	r3, #0
   37eae:	f47f ac4b 	bne.w	37748 <ull_conn_llcp+0x600>
   37eb2:	e73c      	b.n	37d2e <ull_conn_llcp+0xbe6>
		LL_ASSERT(0);
   37eb4:	4a97      	ldr	r2, [pc, #604]	; (38114 <ull_conn_llcp+0xfcc>)
   37eb6:	4998      	ldr	r1, [pc, #608]	; (38118 <ull_conn_llcp+0xfd0>)
   37eb8:	f640 63a1 	movw	r3, #3745	; 0xea1
		LL_ASSERT(0);
   37ebc:	4897      	ldr	r0, [pc, #604]	; (3811c <ull_conn_llcp+0xfd4>)
   37ebe:	f00a ff27 	bl	42d10 <printk>
   37ec2:	4040      	eors	r0, r0
   37ec4:	f380 8811 	msr	BASEPRI, r0
   37ec8:	f04f 0003 	mov.w	r0, #3
   37ecc:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37ece:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37ed2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   37ed6:	f7ff b942 	b.w	3715e <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37eda:	488d      	ldr	r0, [pc, #564]	; (38110 <ull_conn_llcp+0xfc8>)
   37edc:	f7f7 fe5e 	bl	2fb9c <mem_acquire>
		if (tx) {
   37ee0:	2800      	cmp	r0, #0
   37ee2:	f43f ae1f 	beq.w	37b24 <ull_conn_llcp+0x9dc>
			conn->llcp_version.ack--;
   37ee6:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   37eea:	3b01      	subs	r3, #1
   37eec:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   37ef0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   37ef4:	f043 0301 	orr.w	r3, r3, #1
   37ef8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   37efc:	7903      	ldrb	r3, [r0, #4]
   37efe:	f043 0303 	orr.w	r3, r3, #3
   37f02:	7103      	strb	r3, [r0, #4]
			pdu->len =
   37f04:	2306      	movs	r3, #6
   37f06:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   37f08:	230c      	movs	r3, #12
   37f0a:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   37f0c:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   37f0e:	f06f 030e 	mvn.w	r3, #14
   37f12:	7243      	strb	r3, [r0, #9]
   37f14:	2305      	movs	r3, #5
   37f16:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   37f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37f1c:	72c3      	strb	r3, [r0, #11]
   37f1e:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   37f20:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37f24:	2b00      	cmp	r3, #0
   37f26:	f000 80b4 	beq.w	38092 <ull_conn_llcp+0xf4a>
	    !conn->llcp_enc.pause_tx &&
   37f2a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37f2e:	0791      	lsls	r1, r2, #30
   37f30:	f100 80af 	bmi.w	38092 <ull_conn_llcp+0xf4a>
	    !conn->llcp_phy.pause_tx &&
   37f34:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37f38:	07d2      	lsls	r2, r2, #31
   37f3a:	f100 80aa 	bmi.w	38092 <ull_conn_llcp+0xf4a>
		if (conn->tx_head == conn->tx_data) {
   37f3e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37f42:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37f44:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37f48:	f000 82b5 	beq.w	384b6 <ull_conn_llcp+0x136e>
		} else if (!conn->tx_ctrl) {
   37f4c:	2a00      	cmp	r2, #0
   37f4e:	f000 82d3 	beq.w	384f8 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   37f52:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37f56:	681a      	ldr	r2, [r3, #0]
   37f58:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   37f5a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   37f5c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37f60:	6803      	ldr	r3, [r0, #0]
   37f62:	2b00      	cmp	r3, #0
   37f64:	f47f ae65 	bne.w	37c32 <ull_conn_llcp+0xaea>
		conn->tx_data_last = tx;
   37f68:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   37f6c:	e661      	b.n	37c32 <ull_conn_llcp+0xaea>
		if (!conn->tx_ctrl) {
   37f6e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37f72:	2a00      	cmp	r2, #0
   37f74:	d18f      	bne.n	37e96 <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head;
   37f76:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37f7a:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37f7e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   37f82:	e791      	b.n	37ea8 <ull_conn_llcp+0xd60>
		conn->tx_data_last = tx;
   37f84:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   37f88:	f7ff ba56 	b.w	37438 <ull_conn_llcp+0x2f0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   37f8c:	7903      	ldrb	r3, [r0, #4]
   37f8e:	f043 0303 	orr.w	r3, r3, #3
   37f92:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   37f94:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   37f98:	07db      	lsls	r3, r3, #31
   37f9a:	d573      	bpl.n	38084 <ull_conn_llcp+0xf3c>
	    (conn->llcp_feature.features_conn &
   37f9c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   37fa0:	0758      	lsls	r0, r3, #29
   37fa2:	d56f      	bpl.n	38084 <ull_conn_llcp+0xf3c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   37fa4:	2311      	movs	r3, #17
   37fa6:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37faa:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   37fac:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37fb0:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   37fb4:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   37fb8:	2300      	movs	r3, #0
   37fba:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   37fbe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37fc2:	2b00      	cmp	r3, #0
   37fc4:	d042      	beq.n	3804c <ull_conn_llcp+0xf04>
	    !conn->llcp_enc.pause_tx &&
   37fc6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37fca:	0791      	lsls	r1, r2, #30
   37fcc:	d43e      	bmi.n	3804c <ull_conn_llcp+0xf04>
	    !conn->llcp_phy.pause_tx &&
   37fce:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37fd2:	07d2      	lsls	r2, r2, #31
   37fd4:	d43a      	bmi.n	3804c <ull_conn_llcp+0xf04>
		if (conn->tx_head == conn->tx_data) {
   37fd6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37fda:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37fdc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37fe0:	f000 81d6 	beq.w	38390 <ull_conn_llcp+0x1248>
		} else if (!conn->tx_ctrl) {
   37fe4:	2a00      	cmp	r2, #0
   37fe6:	f000 82c3 	beq.w	38570 <ull_conn_llcp+0x1428>
	tx->next = conn->tx_ctrl_last->next;
   37fea:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37fee:	681a      	ldr	r2, [r3, #0]
   37ff0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37ff4:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   37ff8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37ffc:	f8d9 3000 	ldr.w	r3, [r9]
   38000:	2b00      	cmp	r3, #0
   38002:	d059      	beq.n	380b8 <ull_conn_llcp+0xf70>
			conn->llcp_ack = conn->llcp_req;
   38004:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   38008:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3800c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   38010:	2900      	cmp	r1, #0
   38012:	f43f a8af 	beq.w	37174 <ull_conn_llcp+0x2c>
   38016:	f7ff b900 	b.w	3721a <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   3801a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   3801e:	f003 030f 	and.w	r3, r3, #15
   38022:	2b06      	cmp	r3, #6
   38024:	f200 830f 	bhi.w	38646 <ull_conn_llcp+0x14fe>
   38028:	a101      	add	r1, pc, #4	; (adr r1, 38030 <ull_conn_llcp+0xee8>)
   3802a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3802e:	bf00      	nop
   38030:	00037a5f 	.word	0x00037a5f
   38034:	000379d9 	.word	0x000379d9
   38038:	00037989 	.word	0x00037989
   3803c:	0003716f 	.word	0x0003716f
   38040:	0003716f 	.word	0x0003716f
   38044:	0003716f 	.word	0x0003716f
   38048:	0003716f 	.word	0x0003716f
		if (!conn->tx_ctrl) {
   3804c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   38050:	2a00      	cmp	r2, #0
   38052:	d1ca      	bne.n	37fea <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head;
   38054:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   38058:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   3805c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   38060:	e7cc      	b.n	37ffc <ull_conn_llcp+0xeb4>
			conn->tx_data = conn->tx_data->next;
   38062:	6819      	ldr	r1, [r3, #0]
   38064:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38068:	2a00      	cmp	r2, #0
   3806a:	f47f a97c 	bne.w	37366 <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head->next;
   3806e:	681a      	ldr	r2, [r3, #0]
   38070:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   38072:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   38074:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   38076:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   3807a:	f7ff b97c 	b.w	37376 <ull_conn_llcp+0x22e>
		conn->tx_data_last = tx;
   3807e:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   38082:	e5d6      	b.n	37c32 <ull_conn_llcp+0xaea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   38084:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   38086:	f889 8008 	strb.w	r8, [r9, #8]
   3808a:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3808c:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   38090:	e790      	b.n	37fb4 <ull_conn_llcp+0xe6c>
		if (!conn->tx_ctrl) {
   38092:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   38096:	2a00      	cmp	r2, #0
   38098:	f47f af5b 	bne.w	37f52 <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head;
   3809c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3809e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   380a2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   380a6:	e75b      	b.n	37f60 <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
   380a8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380aa:	2a03      	cmp	r2, #3
   380ac:	f43f ae5e 	beq.w	37d6c <ull_conn_llcp+0xc24>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   380b0:	2a0a      	cmp	r2, #10
   380b2:	f47f a8f4 	bne.w	3729e <ull_conn_llcp+0x156>
   380b6:	e659      	b.n	37d6c <ull_conn_llcp+0xc24>
		conn->tx_data_last = tx;
   380b8:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   380bc:	e7a2      	b.n	38004 <ull_conn_llcp+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380be:	791a      	ldrb	r2, [r3, #4]
   380c0:	f002 0203 	and.w	r2, r2, #3
   380c4:	2a03      	cmp	r2, #3
   380c6:	f000 80ff 	beq.w	382c8 <ull_conn_llcp+0x1180>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   380ca:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   380ce:	f7ff b94a 	b.w	37366 <ull_conn_llcp+0x21e>
			conn->tx_data = conn->tx_data->next;
   380d2:	6819      	ldr	r1, [r3, #0]
   380d4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   380d8:	2a00      	cmp	r2, #0
   380da:	f47f aa9a 	bne.w	37612 <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head->next;
   380de:	681a      	ldr	r2, [r3, #0]
   380e0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   380e4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   380e8:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   380ec:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   380f0:	f7ff ba9a 	b.w	37628 <ull_conn_llcp+0x4e0>
			conn->tx_data = conn->tx_data->next;
   380f4:	6819      	ldr	r1, [r3, #0]
   380f6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   380fa:	2a00      	cmp	r2, #0
   380fc:	f47f ab68 	bne.w	377d0 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head->next;
   38100:	681a      	ldr	r2, [r3, #0]
   38102:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   38104:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   38106:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   38108:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   3810c:	f7ff bb68 	b.w	377e0 <ull_conn_llcp+0x698>
   38110:	200026fc 	.word	0x200026fc
   38114:	0004a914 	.word	0x0004a914
   38118:	0004a500 	.word	0x0004a500
   3811c:	0004a4a0 	.word	0x0004a4a0
			conn->tx_data = conn->tx_data->next;
   38120:	6819      	ldr	r1, [r3, #0]
   38122:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38126:	2a00      	cmp	r2, #0
   38128:	f47f a97b 	bne.w	37422 <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head->next;
   3812c:	681a      	ldr	r2, [r3, #0]
   3812e:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   38130:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   38132:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   38134:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   38138:	f7ff b97b 	b.w	37432 <ull_conn_llcp+0x2ea>
		if (!conn->tx_ctrl) {
   3813c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   38140:	2900      	cmp	r1, #0
   38142:	f47f ace4 	bne.w	37b0e <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head;
   38146:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   38148:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   3814c:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   38150:	e4e4      	b.n	37b1c <ull_conn_llcp+0x9d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   38152:	48ca      	ldr	r0, [pc, #808]	; (3847c <ull_conn_llcp+0x1334>)
   38154:	f7f7 fd22 	bl	2fb9c <mem_acquire>
		if (!tx) {
   38158:	2800      	cmp	r0, #0
   3815a:	f43f ace3 	beq.w	37b24 <ull_conn_llcp+0x9dc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3815e:	7902      	ldrb	r2, [r0, #4]
   38160:	f042 0203 	orr.w	r2, r2, #3
   38164:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   38166:	2211      	movs	r2, #17
   38168:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3816a:	2203      	movs	r2, #3
   3816c:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3816e:	220f      	movs	r2, #15
   38170:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   38172:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   38176:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   38178:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   3817c:	2a00      	cmp	r2, #0
   3817e:	f000 80df 	beq.w	38340 <ull_conn_llcp+0x11f8>
	    !conn->llcp_enc.pause_tx &&
   38182:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   38186:	0789      	lsls	r1, r1, #30
   38188:	f100 80da 	bmi.w	38340 <ull_conn_llcp+0x11f8>
	    !conn->llcp_phy.pause_tx &&
   3818c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   38190:	07cb      	lsls	r3, r1, #31
   38192:	f100 80d5 	bmi.w	38340 <ull_conn_llcp+0x11f8>
		if (conn->tx_head == conn->tx_data) {
   38196:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3819a:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3819c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   381a0:	f000 81cb 	beq.w	3853a <ull_conn_llcp+0x13f2>
		} else if (!conn->tx_ctrl) {
   381a4:	2900      	cmp	r1, #0
   381a6:	f000 81c0 	beq.w	3852a <ull_conn_llcp+0x13e2>
	tx->next = conn->tx_ctrl_last->next;
   381aa:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   381ae:	6811      	ldr	r1, [r2, #0]
   381b0:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   381b2:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   381b4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   381b8:	6802      	ldr	r2, [r0, #0]
   381ba:	2a00      	cmp	r2, #0
   381bc:	f000 81b2 	beq.w	38524 <ull_conn_llcp+0x13dc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   381c0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   381c4:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   381c8:	2300      	movs	r3, #0
   381ca:	f8c8 3000 	str.w	r3, [r8]
   381ce:	e4a9      	b.n	37b24 <ull_conn_llcp+0x9dc>
			conn->tx_data = conn->tx_data->next;
   381d0:	6819      	ldr	r1, [r3, #0]
   381d2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   381d6:	2a00      	cmp	r2, #0
   381d8:	f47f ad99 	bne.w	37d0e <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
   381dc:	681a      	ldr	r2, [r3, #0]
   381de:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   381e2:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   381e6:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   381ea:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   381ee:	e599      	b.n	37d24 <ull_conn_llcp+0xbdc>
			conn->tx_data = conn->tx_data->next;
   381f0:	6819      	ldr	r1, [r3, #0]
   381f2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   381f6:	2a00      	cmp	r2, #0
   381f8:	f47f ad0d 	bne.w	37c16 <ull_conn_llcp+0xace>
			tx->next = conn->tx_head->next;
   381fc:	681a      	ldr	r2, [r3, #0]
   381fe:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   38202:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   38206:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3820a:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   3820e:	e50d      	b.n	37c2c <ull_conn_llcp+0xae4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38210:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38214:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   38218:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   3821c:	f7fe bf9f 	b.w	3715e <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38220:	791a      	ldrb	r2, [r3, #4]
   38222:	f002 0203 	and.w	r2, r2, #3
   38226:	2a03      	cmp	r2, #3
   38228:	f000 813d 	beq.w	384a6 <ull_conn_llcp+0x135e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3822c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38230:	f7ff b9ef 	b.w	37612 <ull_conn_llcp+0x4ca>
		if (conn->llcp_phy.tx & PHY_2M) {
   38234:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   38236:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   3823a:	f3c3 0282 	ubfx	r2, r3, #2, #3
   3823e:	f140 8093 	bpl.w	38368 <ull_conn_llcp+0x1220>
			conn->llcp_phy.tx = PHY_2M;
   38242:	2202      	movs	r2, #2
   38244:	f362 0384 	bfi	r3, r2, #2, #3
   38248:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   3824c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   38250:	065f      	lsls	r7, r3, #25
   38252:	ea4f 1253 	mov.w	r2, r3, lsr #5
   38256:	d57e      	bpl.n	38356 <ull_conn_llcp+0x120e>
			conn->llcp_phy.rx = PHY_2M;
   38258:	2202      	movs	r2, #2
   3825a:	f362 1347 	bfi	r3, r2, #5, #3
   3825e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   38262:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   38264:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   38268:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3826c:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   38270:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   38274:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   38278:	f3c2 0182 	ubfx	r1, r2, #2, #3
   3827c:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   38280:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   38284:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   38288:	428f      	cmp	r7, r1
   3828a:	bf08      	it	eq
   3828c:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   3828e:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   38290:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   38294:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   38298:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   3829c:	bf08      	it	eq
   3829e:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   382a0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   382a4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   382a8:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   382aa:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   382ae:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   382b2:	f7fe bf77 	b.w	371a4 <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382b6:	791a      	ldrb	r2, [r3, #4]
   382b8:	f002 0203 	and.w	r2, r2, #3
   382bc:	2a03      	cmp	r2, #3
   382be:	d031      	beq.n	38324 <ull_conn_llcp+0x11dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   382c0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   382c4:	f7ff b8ad 	b.w	37422 <ull_conn_llcp+0x2da>
	    ((pdu_data_tx->llctrl.opcode !=
   382c8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382ca:	2a03      	cmp	r2, #3
   382cc:	f43f aecf 	beq.w	3806e <ull_conn_llcp+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   382d0:	2a0a      	cmp	r2, #10
   382d2:	f47f aefa 	bne.w	380ca <ull_conn_llcp+0xf82>
   382d6:	e6ca      	b.n	3806e <ull_conn_llcp+0xf26>
			conn->tx_data = conn->tx_data->next;
   382d8:	6819      	ldr	r1, [r3, #0]
   382da:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   382de:	2a00      	cmp	r2, #0
   382e0:	f47f aa22 	bne.w	37728 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head->next;
   382e4:	681a      	ldr	r2, [r3, #0]
   382e6:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   382ea:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   382ee:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   382f2:	f7ff ba22 	b.w	3773a <ull_conn_llcp+0x5f2>
			conn->tx_data = conn->tx_data->next;
   382f6:	6819      	ldr	r1, [r3, #0]
   382f8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   382fc:	2a00      	cmp	r2, #0
   382fe:	f47f adca 	bne.w	37e96 <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head->next;
   38302:	681a      	ldr	r2, [r3, #0]
   38304:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   38308:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   3830c:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   38310:	e5ca      	b.n	37ea8 <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38312:	791a      	ldrb	r2, [r3, #4]
   38314:	f002 0203 	and.w	r2, r2, #3
   38318:	2a03      	cmp	r2, #3
   3831a:	d00a      	beq.n	38332 <ull_conn_llcp+0x11ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3831c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38320:	f7ff ba56 	b.w	377d0 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   38324:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38326:	2a03      	cmp	r2, #3
   38328:	f43f af00 	beq.w	3812c <ull_conn_llcp+0xfe4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3832c:	2a0a      	cmp	r2, #10
   3832e:	d1c7      	bne.n	382c0 <ull_conn_llcp+0x1178>
   38330:	e6fc      	b.n	3812c <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
   38332:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38334:	2a03      	cmp	r2, #3
   38336:	f43f aee3 	beq.w	38100 <ull_conn_llcp+0xfb8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3833a:	2a0a      	cmp	r2, #10
   3833c:	d1ee      	bne.n	3831c <ull_conn_llcp+0x11d4>
   3833e:	e6df      	b.n	38100 <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
   38340:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   38344:	2900      	cmp	r1, #0
   38346:	f47f af30 	bne.w	381aa <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head;
   3834a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3834c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   38350:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   38354:	e730      	b.n	381b8 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   38356:	07d1      	lsls	r1, r2, #31
   38358:	f140 80fb 	bpl.w	38552 <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   3835c:	2201      	movs	r2, #1
   3835e:	f362 1347 	bfi	r3, r2, #5, #3
   38362:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   38366:	e77c      	b.n	38262 <ull_conn_llcp+0x111a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   38368:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   3836a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3836e:	f140 8152 	bpl.w	38616 <ull_conn_llcp+0x14ce>
			conn->llcp_phy.tx = PHY_1M;
   38372:	2201      	movs	r2, #1
   38374:	f362 0384 	bfi	r3, r2, #2, #3
   38378:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   3837c:	e766      	b.n	3824c <ull_conn_llcp+0x1104>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3837e:	791a      	ldrb	r2, [r3, #4]
   38380:	f002 0203 	and.w	r2, r2, #3
   38384:	2a03      	cmp	r2, #3
   38386:	f000 80fb 	beq.w	38580 <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3838a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   3838e:	e442      	b.n	37c16 <ull_conn_llcp+0xace>
			conn->tx_data = conn->tx_data->next;
   38390:	6819      	ldr	r1, [r3, #0]
   38392:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38396:	2a00      	cmp	r2, #0
   38398:	f47f ae27 	bne.w	37fea <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head->next;
   3839c:	681a      	ldr	r2, [r3, #0]
   3839e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   383a2:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   383a6:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   383aa:	e627      	b.n	37ffc <ull_conn_llcp+0xeb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   383ac:	4833      	ldr	r0, [pc, #204]	; (3847c <ull_conn_llcp+0x1334>)
   383ae:	f7f7 fbf5 	bl	2fb9c <mem_acquire>
	if (!tx) {
   383b2:	2800      	cmp	r0, #0
   383b4:	f43f abb6 	beq.w	37b24 <ull_conn_llcp+0x9dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   383b8:	7902      	ldrb	r2, [r0, #4]
   383ba:	f042 0203 	orr.w	r2, r2, #3
   383be:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   383c0:	2218      	movs	r2, #24
   383c2:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   383c4:	2210      	movs	r2, #16
   383c6:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   383c8:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   383cc:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   383ce:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   383d2:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   383d4:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   383d8:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   383da:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   383de:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   383e0:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   383e4:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   383e6:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   383ea:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   383ee:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   383f2:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   383f6:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   383fa:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   383fe:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   38402:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   38406:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   3840a:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   3840e:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   38412:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   38416:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   3841a:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   3841e:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   38422:	2a00      	cmp	r2, #0
   38424:	d035      	beq.n	38492 <ull_conn_llcp+0x134a>
	    !conn->llcp_enc.pause_tx &&
   38426:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   3842a:	078f      	lsls	r7, r1, #30
   3842c:	d431      	bmi.n	38492 <ull_conn_llcp+0x134a>
	    !conn->llcp_phy.pause_tx &&
   3842e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   38432:	07c9      	lsls	r1, r1, #31
   38434:	d42d      	bmi.n	38492 <ull_conn_llcp+0x134a>
		if (conn->tx_head == conn->tx_data) {
   38436:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3843a:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3843c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   38440:	f000 80c6 	beq.w	385d0 <ull_conn_llcp+0x1488>
		} else if (!conn->tx_ctrl) {
   38444:	2900      	cmp	r1, #0
   38446:	f000 80bb 	beq.w	385c0 <ull_conn_llcp+0x1478>
	tx->next = conn->tx_ctrl_last->next;
   3844a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   3844e:	6811      	ldr	r1, [r2, #0]
   38450:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   38452:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   38454:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   38458:	6802      	ldr	r2, [r0, #0]
   3845a:	2a00      	cmp	r2, #0
   3845c:	f000 80ad 	beq.w	385ba <ull_conn_llcp+0x1472>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   38460:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38464:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   38468:	2305      	movs	r3, #5
   3846a:	f363 0203 	bfi	r2, r3, #0, #4
   3846e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38472:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38476:	f7fe be72 	b.w	3715e <ull_conn_llcp+0x16>
   3847a:	bf00      	nop
   3847c:	200026fc 	.word	0x200026fc
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38480:	791a      	ldrb	r2, [r3, #4]
   38482:	f002 0203 	and.w	r2, r2, #3
   38486:	2a03      	cmp	r2, #3
   38488:	f000 80ae 	beq.w	385e8 <ull_conn_llcp+0x14a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3848c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38490:	e43d      	b.n	37d0e <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
   38492:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   38496:	2900      	cmp	r1, #0
   38498:	d1d7      	bne.n	3844a <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
   3849a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3849c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   384a0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   384a4:	e7d8      	b.n	38458 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   384a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   384a8:	2a03      	cmp	r2, #3
   384aa:	f43f ae18 	beq.w	380de <ull_conn_llcp+0xf96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   384ae:	2a0a      	cmp	r2, #10
   384b0:	f47f aebc 	bne.w	3822c <ull_conn_llcp+0x10e4>
   384b4:	e613      	b.n	380de <ull_conn_llcp+0xf96>
			conn->tx_data = conn->tx_data->next;
   384b6:	6819      	ldr	r1, [r3, #0]
   384b8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   384bc:	2a00      	cmp	r2, #0
   384be:	f47f ad48 	bne.w	37f52 <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head->next;
   384c2:	681a      	ldr	r2, [r3, #0]
   384c4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   384c6:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   384c8:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   384cc:	e548      	b.n	37f60 <ull_conn_llcp+0xe18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   384ce:	791a      	ldrb	r2, [r3, #4]
   384d0:	f002 0203 	and.w	r2, r2, #3
   384d4:	2a03      	cmp	r2, #3
   384d6:	d062      	beq.n	3859e <ull_conn_llcp+0x1456>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   384d8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   384dc:	f7ff b924 	b.w	37728 <ull_conn_llcp+0x5e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   384e0:	791a      	ldrb	r2, [r3, #4]
   384e2:	f002 0203 	and.w	r2, r2, #3
   384e6:	2a03      	cmp	r2, #3
   384e8:	d060      	beq.n	385ac <ull_conn_llcp+0x1464>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   384ea:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   384ee:	e4d2      	b.n	37e96 <ull_conn_llcp+0xd4e>
			conn->llcp_cu.interval = interval_max;
   384f0:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   384f4:	f7ff ba97 	b.w	37a26 <ull_conn_llcp+0x8de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   384f8:	791a      	ldrb	r2, [r3, #4]
   384fa:	f002 0203 	and.w	r2, r2, #3
   384fe:	2a03      	cmp	r2, #3
   38500:	f000 8099 	beq.w	38636 <ull_conn_llcp+0x14ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38504:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38508:	e523      	b.n	37f52 <ull_conn_llcp+0xe0a>
			conn->tx_data = conn->tx_data->next;
   3850a:	6818      	ldr	r0, [r3, #0]
   3850c:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38510:	2900      	cmp	r1, #0
   38512:	f47f aafc 	bne.w	37b0e <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head->next;
   38516:	6819      	ldr	r1, [r3, #0]
   38518:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   3851a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   3851c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   38520:	f7ff bafc 	b.w	37b1c <ull_conn_llcp+0x9d4>
		conn->tx_data_last = tx;
   38524:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   38528:	e64a      	b.n	381c0 <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3852a:	7911      	ldrb	r1, [r2, #4]
   3852c:	f001 0103 	and.w	r1, r1, #3
   38530:	2903      	cmp	r1, #3
   38532:	d017      	beq.n	38564 <ull_conn_llcp+0x141c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38534:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   38538:	e637      	b.n	381aa <ull_conn_llcp+0x1062>
			conn->tx_data = conn->tx_data->next;
   3853a:	6813      	ldr	r3, [r2, #0]
   3853c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38540:	2900      	cmp	r1, #0
   38542:	f47f ae32 	bne.w	381aa <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head->next;
   38546:	6811      	ldr	r1, [r2, #0]
   38548:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3854a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   3854c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   38550:	e632      	b.n	381b8 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   38552:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   38556:	bf18      	it	ne
   38558:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   3855a:	f362 1347 	bfi	r3, r2, #5, #3
   3855e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   38562:	e67e      	b.n	38262 <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
   38564:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38566:	2903      	cmp	r1, #3
   38568:	d0ed      	beq.n	38546 <ull_conn_llcp+0x13fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3856a:	290a      	cmp	r1, #10
   3856c:	d1e2      	bne.n	38534 <ull_conn_llcp+0x13ec>
   3856e:	e7ea      	b.n	38546 <ull_conn_llcp+0x13fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38570:	791a      	ldrb	r2, [r3, #4]
   38572:	f002 0203 	and.w	r2, r2, #3
   38576:	2a03      	cmp	r2, #3
   38578:	d00a      	beq.n	38590 <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3857a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   3857e:	e534      	b.n	37fea <ull_conn_llcp+0xea2>
	    ((pdu_data_tx->llctrl.opcode !=
   38580:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38582:	2a03      	cmp	r2, #3
   38584:	f43f ae3a 	beq.w	381fc <ull_conn_llcp+0x10b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38588:	2a0a      	cmp	r2, #10
   3858a:	f47f aefe 	bne.w	3838a <ull_conn_llcp+0x1242>
   3858e:	e635      	b.n	381fc <ull_conn_llcp+0x10b4>
	    ((pdu_data_tx->llctrl.opcode !=
   38590:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38592:	2a03      	cmp	r2, #3
   38594:	f43f af02 	beq.w	3839c <ull_conn_llcp+0x1254>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38598:	2a0a      	cmp	r2, #10
   3859a:	d1ee      	bne.n	3857a <ull_conn_llcp+0x1432>
   3859c:	e6fe      	b.n	3839c <ull_conn_llcp+0x1254>
	    ((pdu_data_tx->llctrl.opcode !=
   3859e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385a0:	2a03      	cmp	r2, #3
   385a2:	f43f ae9f 	beq.w	382e4 <ull_conn_llcp+0x119c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   385a6:	2a0a      	cmp	r2, #10
   385a8:	d196      	bne.n	384d8 <ull_conn_llcp+0x1390>
   385aa:	e69b      	b.n	382e4 <ull_conn_llcp+0x119c>
	    ((pdu_data_tx->llctrl.opcode !=
   385ac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385ae:	2a03      	cmp	r2, #3
   385b0:	f43f aea7 	beq.w	38302 <ull_conn_llcp+0x11ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   385b4:	2a0a      	cmp	r2, #10
   385b6:	d198      	bne.n	384ea <ull_conn_llcp+0x13a2>
   385b8:	e6a3      	b.n	38302 <ull_conn_llcp+0x11ba>
		conn->tx_data_last = tx;
   385ba:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   385be:	e74f      	b.n	38460 <ull_conn_llcp+0x1318>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385c0:	7911      	ldrb	r1, [r2, #4]
   385c2:	f001 0103 	and.w	r1, r1, #3
   385c6:	2903      	cmp	r1, #3
   385c8:	d016      	beq.n	385f8 <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   385ca:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   385ce:	e73c      	b.n	3844a <ull_conn_llcp+0x1302>
			conn->tx_data = conn->tx_data->next;
   385d0:	6813      	ldr	r3, [r2, #0]
   385d2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   385d6:	2900      	cmp	r1, #0
   385d8:	f47f af37 	bne.w	3844a <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
   385dc:	6811      	ldr	r1, [r2, #0]
   385de:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   385e0:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   385e2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   385e6:	e737      	b.n	38458 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   385e8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385ea:	2a03      	cmp	r2, #3
   385ec:	f43f adf6 	beq.w	381dc <ull_conn_llcp+0x1094>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   385f0:	2a0a      	cmp	r2, #10
   385f2:	f47f af4b 	bne.w	3848c <ull_conn_llcp+0x1344>
   385f6:	e5f1      	b.n	381dc <ull_conn_llcp+0x1094>
	    ((pdu_data_tx->llctrl.opcode !=
   385f8:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385fa:	2903      	cmp	r1, #3
   385fc:	d0ee      	beq.n	385dc <ull_conn_llcp+0x1494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   385fe:	290a      	cmp	r1, #10
   38600:	d1e3      	bne.n	385ca <ull_conn_llcp+0x1482>
   38602:	e7eb      	b.n	385dc <ull_conn_llcp+0x1494>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38604:	7919      	ldrb	r1, [r3, #4]
   38606:	f001 0103 	and.w	r1, r1, #3
   3860a:	2903      	cmp	r1, #3
   3860c:	d00c      	beq.n	38628 <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3860e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38612:	f7ff ba7c 	b.w	37b0e <ull_conn_llcp+0x9c6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   38616:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   3861a:	bf18      	it	ne
   3861c:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   3861e:	f362 0384 	bfi	r3, r2, #2, #3
   38622:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   38626:	e611      	b.n	3824c <ull_conn_llcp+0x1104>
	    ((pdu_data_tx->llctrl.opcode !=
   38628:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3862a:	2903      	cmp	r1, #3
   3862c:	f43f af73 	beq.w	38516 <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38630:	290a      	cmp	r1, #10
   38632:	d1ec      	bne.n	3860e <ull_conn_llcp+0x14c6>
   38634:	e76f      	b.n	38516 <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
   38636:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38638:	2a03      	cmp	r2, #3
   3863a:	f43f af42 	beq.w	384c2 <ull_conn_llcp+0x137a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3863e:	2a0a      	cmp	r2, #10
   38640:	f47f af60 	bne.w	38504 <ull_conn_llcp+0x13bc>
   38644:	e73d      	b.n	384c2 <ull_conn_llcp+0x137a>
		LL_ASSERT(0);
   38646:	4a02      	ldr	r2, [pc, #8]	; (38650 <ull_conn_llcp+0x1508>)
   38648:	4902      	ldr	r1, [pc, #8]	; (38654 <ull_conn_llcp+0x150c>)
   3864a:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3864e:	e435      	b.n	37ebc <ull_conn_llcp+0xd74>
   38650:	0004a914 	.word	0x0004a914
   38654:	0004a500 	.word	0x0004a500

00038658 <ull_conn_tx_demux>:
{
   38658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3865c:	4c24      	ldr	r4, [pc, #144]	; (386f0 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3865e:	4f25      	ldr	r7, [pc, #148]	; (386f4 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38660:	78e2      	ldrb	r2, [r4, #3]
{
   38662:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   38664:	1d26      	adds	r6, r4, #4
   38666:	e021      	b.n	386ac <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38668:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3866c:	4638      	mov	r0, r7
   3866e:	f7f7 fac7 	bl	2fc00 <mem_get>
	if (conn->lll.handle != handle) {
   38672:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   38674:	bb2a      	cbnz	r2, 386c2 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   38676:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   3867a:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   3867e:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   38680:	b351      	cbz	r1, 386d8 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   38682:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   38686:	b102      	cbz	r2, 3868a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   38688:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3868a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   3868e:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   38690:	78a3      	ldrb	r3, [r4, #2]
   38692:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   38694:	429a      	cmp	r2, r3
   38696:	d005      	beq.n	386a4 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   38698:	3301      	adds	r3, #1
   3869a:	b2db      	uxtb	r3, r3
		_first = 0U;
   3869c:	4299      	cmp	r1, r3
   3869e:	bf08      	it	eq
   386a0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   386a2:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   386a4:	3d01      	subs	r5, #1
   386a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   386aa:	d01e      	beq.n	386ea <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   386ac:	78a3      	ldrb	r3, [r4, #2]
   386ae:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   386b0:	4293      	cmp	r3, r2
   386b2:	d01a      	beq.n	386ea <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   386b4:	fb13 f301 	smulbb	r3, r3, r1
   386b8:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   386bc:	5af2      	ldrh	r2, [r6, r3]
   386be:	2a00      	cmp	r2, #0
   386c0:	d0d2      	beq.n	38668 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   386c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   386c6:	790b      	ldrb	r3, [r1, #4]
   386c8:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   386cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   386d0:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   386d2:	f7fa fe41 	bl	33358 <ll_tx_ack_put>
   386d6:	e7da      	b.n	3868e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   386d8:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   386dc:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   386e0:	2a00      	cmp	r2, #0
   386e2:	d1ce      	bne.n	38682 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   386e4:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   386e8:	e7cf      	b.n	3868a <ull_conn_tx_demux+0x32>
}
   386ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   386ee:	bf00      	nop
   386f0:	2000074c 	.word	0x2000074c
   386f4:	20001570 	.word	0x20001570

000386f8 <conn_cleanup_finalize>:
{
   386f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   386fc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   38700:	b082      	sub	sp, #8
   38702:	4606      	mov	r6, r0
	while (rx) {
   38704:	b144      	cbz	r4, 38718 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   38706:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   38708:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   3870a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   3870c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3870e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   38710:	f7fa fdde 	bl	332d0 <ll_rx_put>
	while (rx) {
   38714:	2c00      	cmp	r4, #0
   38716:	d1f7      	bne.n	38708 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   38718:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   3871c:	b381      	cbz	r1, 38780 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   3871e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 387c4 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   38722:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 387c8 <conn_cleanup_finalize+0xd0>
   38726:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 387cc <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3872a:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3872e:	e007      	b.n	38740 <conn_cleanup_finalize+0x48>
   38730:	4629      	mov	r1, r5
   38732:	463a      	mov	r2, r7
   38734:	4620      	mov	r0, r4
   38736:	f7f7 fa95 	bl	2fc64 <memq_enqueue>
	while (conn->tx_head) {
   3873a:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   3873e:	b1f9      	cbz	r1, 38780 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38740:	4630      	mov	r0, r6
   38742:	f7fc fa5d 	bl	34c00 <tx_ull_dequeue>
   38746:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   38748:	4640      	mov	r0, r8
   3874a:	f7f7 fa27 	bl	2fb9c <mem_acquire>
		LL_ASSERT(link);
   3874e:	4604      	mov	r4, r0
   38750:	2800      	cmp	r0, #0
   38752:	d1ed      	bne.n	38730 <conn_cleanup_finalize+0x38>
   38754:	481e      	ldr	r0, [pc, #120]	; (387d0 <conn_cleanup_finalize+0xd8>)
   38756:	f640 135e 	movw	r3, #2398	; 0x95e
   3875a:	4652      	mov	r2, sl
   3875c:	4649      	mov	r1, r9
   3875e:	f00a fad7 	bl	42d10 <printk>
   38762:	4040      	eors	r0, r0
   38764:	f380 8811 	msr	BASEPRI, r0
   38768:	f04f 0003 	mov.w	r0, #3
   3876c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3876e:	4629      	mov	r1, r5
   38770:	463a      	mov	r2, r7
   38772:	4620      	mov	r0, r4
   38774:	f7f7 fa76 	bl	2fc64 <memq_enqueue>
	while (conn->tx_head) {
   38778:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   3877c:	2900      	cmp	r1, #0
   3877e:	d1df      	bne.n	38740 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38780:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   38782:	4b14      	ldr	r3, [pc, #80]	; (387d4 <conn_cleanup_finalize+0xdc>)
   38784:	9600      	str	r6, [sp, #0]
   38786:	3203      	adds	r2, #3
   38788:	b2d2      	uxtb	r2, r2
   3878a:	2101      	movs	r1, #1
   3878c:	2000      	movs	r0, #0
   3878e:	f7f8 fca9 	bl	310e4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38792:	f030 0302 	bics.w	r3, r0, #2
   38796:	d00c      	beq.n	387b2 <conn_cleanup_finalize+0xba>
   38798:	4a0b      	ldr	r2, [pc, #44]	; (387c8 <conn_cleanup_finalize+0xd0>)
   3879a:	490f      	ldr	r1, [pc, #60]	; (387d8 <conn_cleanup_finalize+0xe0>)
   3879c:	480c      	ldr	r0, [pc, #48]	; (387d0 <conn_cleanup_finalize+0xd8>)
   3879e:	f640 1323 	movw	r3, #2339	; 0x923
   387a2:	f00a fab5 	bl	42d10 <printk>
   387a6:	4040      	eors	r0, r0
   387a8:	f380 8811 	msr	BASEPRI, r0
   387ac:	f04f 0003 	mov.w	r0, #3
   387b0:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   387b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   387b6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   387b8:	8533      	strh	r3, [r6, #40]	; 0x28
}
   387ba:	b002      	add	sp, #8
   387bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   387c0:	f7ff bf4a 	b.w	38658 <ull_conn_tx_demux>
   387c4:	200027b0 	.word	0x200027b0
   387c8:	0004a914 	.word	0x0004a914
   387cc:	0004a96c 	.word	0x0004a96c
   387d0:	0004a4a0 	.word	0x0004a4a0
   387d4:	000349ad 	.word	0x000349ad
   387d8:	0004a9f4 	.word	0x0004a9f4

000387dc <ull_conn_done>:
{
   387dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   387e0:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   387e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   387e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   387e8:	429a      	cmp	r2, r3
{
   387ea:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   387ec:	f000 808f 	beq.w	3890e <ull_conn_done+0x132>
	switch (done->extra.mic_state) {
   387f0:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   387f4:	2b01      	cmp	r3, #1
   387f6:	4605      	mov	r5, r0
   387f8:	f000 80e5 	beq.w	389c6 <ull_conn_done+0x1ea>
   387fc:	2b02      	cmp	r3, #2
   387fe:	f000 80cc 	beq.w	3899a <ull_conn_done+0x1be>
   38802:	2b00      	cmp	r3, #0
   38804:	f000 80af 	beq.w	38966 <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   38808:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   3880c:	2e00      	cmp	r6, #0
   3880e:	f040 80c7 	bne.w	389a0 <ull_conn_done+0x1c4>
	latency_event = lll->latency_event;
   38812:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   38816:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   38818:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   3881c:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
   38820:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   38822:	2b00      	cmp	r3, #0
   38824:	d076      	beq.n	38914 <ull_conn_done+0x138>
		} else if (lll->role) {
   38826:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3882a:	2b00      	cmp	r3, #0
   3882c:	f2c0 8111 	blt.w	38a52 <ull_conn_done+0x276>
	if (done->extra.crc_valid) {
   38830:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   38834:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   38836:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   38838:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3883c:	f140 80c9 	bpl.w	389d2 <ull_conn_done+0x1f6>
		conn->supervision_expire = 0U;
   38840:	2300      	movs	r3, #0
   38842:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   38846:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3884a:	b12b      	cbz	r3, 38858 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
   3884c:	42bb      	cmp	r3, r7
   3884e:	f240 8127 	bls.w	38aa0 <ull_conn_done+0x2c4>
			conn->procedure_expire -= elapsed_event;
   38852:	1bdb      	subs	r3, r3, r7
   38854:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   38858:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3885c:	b12b      	cbz	r3, 3886a <ull_conn_done+0x8e>
		if (conn->apto_expire > elapsed_event) {
   3885e:	42bb      	cmp	r3, r7
   38860:	f240 80e3 	bls.w	38a2a <ull_conn_done+0x24e>
			conn->apto_expire -= elapsed_event;
   38864:	1bdb      	subs	r3, r3, r7
   38866:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   3886a:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   3886e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38872:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   38876:	b15a      	cbz	r2, 38890 <ull_conn_done+0xb4>
		if (conn->appto_expire > elapsed_event) {
   38878:	42ba      	cmp	r2, r7
   3887a:	f200 80ba 	bhi.w	389f2 <ull_conn_done+0x216>
			if ((conn->procedure_expire == 0U) &&
   3887e:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   38882:	2000      	movs	r0, #0
   38884:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   38888:	b912      	cbnz	r2, 38890 <ull_conn_done+0xb4>
   3888a:	4299      	cmp	r1, r3
   3888c:	f000 8124 	beq.w	38ad8 <ull_conn_done+0x2fc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38890:	1a5b      	subs	r3, r3, r1
   38892:	f003 0303 	and.w	r3, r3, #3
   38896:	2b02      	cmp	r3, #2
   38898:	f000 80b4 	beq.w	38a04 <ull_conn_done+0x228>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3889c:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   388a0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   388a4:	429a      	cmp	r2, r3
   388a6:	f000 80d2 	beq.w	38a4e <ull_conn_done+0x272>
		lll->latency_event = 0U;
   388aa:	2200      	movs	r2, #0
   388ac:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   388ae:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   388b2:	b916      	cbnz	r6, 388ba <ull_conn_done+0xde>
   388b4:	4590      	cmp	r8, r2
   388b6:	f000 80b2 	beq.w	38a1e <ull_conn_done+0x242>
		lazy = lll->latency_event + 1U;
   388ba:	3201      	adds	r2, #1
   388bc:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   388be:	b913      	cbnz	r3, 388c6 <ull_conn_done+0xea>
   388c0:	2d00      	cmp	r5, #0
   388c2:	f000 808f 	beq.w	389e4 <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   388c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   388c8:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   388ca:	9500      	str	r5, [sp, #0]
   388cc:	2000      	movs	r0, #0
   388ce:	4d99      	ldr	r5, [pc, #612]	; (38b34 <ull_conn_done+0x358>)
   388d0:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   388d2:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   388d4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   388d8:	9604      	str	r6, [sp, #16]
   388da:	9406      	str	r4, [sp, #24]
   388dc:	b2d2      	uxtb	r2, r2
   388de:	2101      	movs	r1, #1
   388e0:	9505      	str	r5, [sp, #20]
   388e2:	f7f8 fbe7 	bl	310b4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   388e6:	f030 0302 	bics.w	r3, r0, #2
   388ea:	d010      	beq.n	3890e <ull_conn_done+0x132>
   388ec:	f7fa fdcc 	bl	33488 <ull_disable_mark_get>
   388f0:	4284      	cmp	r4, r0
   388f2:	d00c      	beq.n	3890e <ull_conn_done+0x132>
   388f4:	4a90      	ldr	r2, [pc, #576]	; (38b38 <ull_conn_done+0x35c>)
   388f6:	4991      	ldr	r1, [pc, #580]	; (38b3c <ull_conn_done+0x360>)
   388f8:	4891      	ldr	r0, [pc, #580]	; (38b40 <ull_conn_done+0x364>)
   388fa:	f240 63cd 	movw	r3, #1741	; 0x6cd
   388fe:	f00a fa07 	bl	42d10 <printk>
   38902:	4040      	eors	r0, r0
   38904:	f380 8811 	msr	BASEPRI, r0
   38908:	f04f 0003 	mov.w	r0, #3
   3890c:	df02      	svc	2
}
   3890e:	b00a      	add	sp, #40	; 0x28
   38910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   38914:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   38918:	f013 0301 	ands.w	r3, r3, #1
   3891c:	d190      	bne.n	38840 <ull_conn_done+0x64>
	else if (conn->connect_expire) {
   3891e:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   38922:	2900      	cmp	r1, #0
   38924:	d055      	beq.n	389d2 <ull_conn_done+0x1f6>
		if (conn->connect_expire > elapsed_event) {
   38926:	42b9      	cmp	r1, r7
   38928:	f240 80dd 	bls.w	38ae6 <ull_conn_done+0x30a>
			conn->connect_expire -= elapsed_event;
   3892c:	1bc9      	subs	r1, r1, r7
	if (conn->supervision_expire) {
   3892e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   38932:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   38936:	2b00      	cmp	r3, #0
   38938:	d085      	beq.n	38846 <ull_conn_done+0x6a>
		if (conn->supervision_expire > elapsed_event) {
   3893a:	429f      	cmp	r7, r3
   3893c:	f080 809b 	bcs.w	38a76 <ull_conn_done+0x29a>
			conn->supervision_expire -= elapsed_event;
   38940:	1bdb      	subs	r3, r3, r7
   38942:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   38944:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   38946:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   38948:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   3894c:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   3894e:	d908      	bls.n	38962 <ull_conn_done+0x186>
			else if (lll->role) {
   38950:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38954:	4293      	cmp	r3, r2
   38956:	f6bf af76 	bge.w	38846 <ull_conn_done+0x6a>
				if (latency_event) {
   3895a:	f1b8 0f00 	cmp.w	r8, #0
   3895e:	f000 80ad 	beq.w	38abc <ull_conn_done+0x2e0>
				force = 1U;
   38962:	2601      	movs	r6, #1
   38964:	e76f      	b.n	38846 <ull_conn_done+0x6a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   38966:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3896a:	0718      	lsls	r0, r3, #28
   3896c:	d551      	bpl.n	38a12 <ull_conn_done+0x236>
					    (lll->latency + 6)) ?
   3896e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   38970:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   38974:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   38976:	4299      	cmp	r1, r3
   38978:	bfc4      	itt	gt
   3897a:	1f8b      	subgt	r3, r1, #6
   3897c:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   3897e:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   38982:	bfcc      	ite	gt
   38984:	b29b      	uxthgt	r3, r3
   38986:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   38988:	4298      	cmp	r0, r3
   3898a:	d06e      	beq.n	38a6a <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
   3898c:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   38990:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   38994:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   38998:	e736      	b.n	38808 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_final =
   3899a:	263d      	movs	r6, #61	; 0x3d
   3899c:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
   389a0:	4b68      	ldr	r3, [pc, #416]	; (38b44 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   389a2:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   389a6:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   389a8:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   389ac:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
   389ae:	bf04      	itt	eq
   389b0:	2100      	moveq	r1, #0
   389b2:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
   389b4:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   389b6:	2317      	movs	r3, #23
   389b8:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   389bc:	b00a      	add	sp, #40	; 0x28
   389be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
   389c2:	f7ff be99 	b.w	386f8 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
   389c6:	2300      	movs	r3, #0
   389c8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   389cc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   389d0:	e71a      	b.n	38808 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   389d2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   389d6:	2b00      	cmp	r3, #0
   389d8:	d1af      	bne.n	3893a <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
   389da:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   389de:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   389e2:	e7a8      	b.n	38936 <ull_conn_done+0x15a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   389e4:	2900      	cmp	r1, #0
   389e6:	f47f af6e 	bne.w	388c6 <ull_conn_done+0xea>
   389ea:	2e00      	cmp	r6, #0
   389ec:	f47f af6b 	bne.w	388c6 <ull_conn_done+0xea>
   389f0:	e78d      	b.n	3890e <ull_conn_done+0x132>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   389f2:	1a5b      	subs	r3, r3, r1
   389f4:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   389f8:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   389fa:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   389fc:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38a00:	f47f af4c 	bne.w	3889c <ull_conn_done+0xc0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   38a04:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38a08:	3b01      	subs	r3, #1
   38a0a:	2b01      	cmp	r3, #1
   38a0c:	f63f af46 	bhi.w	3889c <ull_conn_done+0xc0>
   38a10:	e74b      	b.n	388aa <ull_conn_done+0xce>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   38a12:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   38a16:	07d9      	lsls	r1, r3, #31
   38a18:	f57f aef6 	bpl.w	38808 <ull_conn_done+0x2c>
   38a1c:	e7a7      	b.n	3896e <ull_conn_done+0x192>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   38a1e:	b913      	cbnz	r3, 38a26 <ull_conn_done+0x24a>
   38a20:	2d00      	cmp	r5, #0
   38a22:	f43f af74 	beq.w	3890e <ull_conn_done+0x132>
	lazy = 0U;
   38a26:	4631      	mov	r1, r6
   38a28:	e74d      	b.n	388c6 <ull_conn_done+0xea>
			rx = ll_pdu_rx_alloc();
   38a2a:	f7fa fc7f 	bl	3332c <ll_pdu_rx_alloc>
			if (rx) {
   38a2e:	4601      	mov	r1, r0
   38a30:	2800      	cmp	r0, #0
   38a32:	d03f      	beq.n	38ab4 <ull_conn_done+0x2d8>
				rx->handle = lll->handle;
   38a34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   38a36:	2200      	movs	r2, #0
   38a38:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   38a3c:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   38a3e:	231a      	movs	r3, #26
   38a40:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   38a42:	6800      	ldr	r0, [r0, #0]
   38a44:	f7fa fc44 	bl	332d0 <ll_rx_put>
				ll_rx_sched();
   38a48:	f7fa fc4c 	bl	332e4 <ll_rx_sched>
   38a4c:	e70d      	b.n	3886a <ull_conn_done+0x8e>
	if ((force) || (latency_event != lll->latency_event)) {
   38a4e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   38a50:	e72d      	b.n	388ae <ull_conn_done+0xd2>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   38a52:	aa08      	add	r2, sp, #32
   38a54:	a909      	add	r1, sp, #36	; 0x24
   38a56:	4628      	mov	r0, r5
   38a58:	f7ed fed2 	bl	26800 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   38a5c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   38a60:	2b00      	cmp	r3, #0
   38a62:	d051      	beq.n	38b08 <ull_conn_done+0x32c>
				lll->latency_event = 0;
   38a64:	2300      	movs	r3, #0
   38a66:	8623      	strh	r3, [r4, #48]	; 0x30
   38a68:	e6e2      	b.n	38830 <ull_conn_done+0x54>
			if (conn->apto_expire == 0U) {
   38a6a:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   38a6e:	2800      	cmp	r0, #0
   38a70:	f47f aeca 	bne.w	38808 <ull_conn_done+0x2c>
   38a74:	e78c      	b.n	38990 <ull_conn_done+0x1b4>
	if (conn == conn_upd_curr) {
   38a76:	4b33      	ldr	r3, [pc, #204]	; (38b44 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   38a78:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   38a7a:	681a      	ldr	r2, [r3, #0]
   38a7c:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   38a7e:	bf04      	itt	eq
   38a80:	2200      	moveq	r2, #0
   38a82:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   38a84:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   38a86:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   38a88:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   38a8c:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   38a90:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   38a94:	4620      	mov	r0, r4
   38a96:	f7ff fe2f 	bl	386f8 <conn_cleanup_finalize>
}
   38a9a:	b00a      	add	sp, #40	; 0x28
   38a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn == conn_upd_curr) {
   38aa0:	4b28      	ldr	r3, [pc, #160]	; (38b44 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   38aa2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   38aa4:	681a      	ldr	r2, [r3, #0]
   38aa6:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   38aa8:	bf04      	itt	eq
   38aaa:	2200      	moveq	r2, #0
   38aac:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   38aae:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   38ab0:	2322      	movs	r3, #34	; 0x22
   38ab2:	e7e9      	b.n	38a88 <ull_conn_done+0x2ac>
				conn->apto_expire = 1U;
   38ab4:	2301      	movs	r3, #1
   38ab6:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   38aba:	e6d6      	b.n	3886a <ull_conn_done+0x8e>
					force = conn->periph.force & 0x01;
   38abc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   38ac0:	085a      	lsrs	r2, r3, #1
					if (force) {
   38ac2:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   38ac6:	bf17      	itett	ne
   38ac8:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   38acc:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
   38ad0:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
   38ad4:	461e      	movne	r6, r3
   38ad6:	e6b6      	b.n	38846 <ull_conn_done+0x6a>
				conn->llcp_type = LLCP_PING;
   38ad8:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   38ada:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   38adc:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   38ae0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38ae4:	e6da      	b.n	3889c <ull_conn_done+0xc0>
	if (conn == conn_upd_curr) {
   38ae6:	4917      	ldr	r1, [pc, #92]	; (38b44 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   38ae8:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   38aec:	6808      	ldr	r0, [r1, #0]
   38aee:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   38af0:	bf08      	it	eq
   38af2:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   38af4:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
   38af6:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   38af8:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   38afc:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   38b00:	4620      	mov	r0, r4
   38b02:	f7ff fdf9 	bl	386f8 <conn_cleanup_finalize>
}
   38b06:	e702      	b.n	3890e <ull_conn_done+0x132>
				ull_conn_tx_demux(UINT8_MAX);
   38b08:	20ff      	movs	r0, #255	; 0xff
   38b0a:	f7ff fda5 	bl	38658 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   38b0e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   38b12:	2b00      	cmp	r3, #0
   38b14:	d1a6      	bne.n	38a64 <ull_conn_done+0x288>
   38b16:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   38b1a:	4632      	mov	r2, r6
   38b1c:	f7f7 f8ac 	bl	2fc78 <memq_peek>
   38b20:	2800      	cmp	r0, #0
   38b22:	d19f      	bne.n	38a64 <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
   38b24:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   38b28:	075a      	lsls	r2, r3, #29
				lll->latency_event = lll->latency;
   38b2a:	bf44      	itt	mi
   38b2c:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   38b2e:	8623      	strhmi	r3, [r4, #48]	; 0x30
   38b30:	e67e      	b.n	38830 <ull_conn_done+0x54>
   38b32:	bf00      	nop
   38b34:	00034bc1 	.word	0x00034bc1
   38b38:	0004a914 	.word	0x0004a914
   38b3c:	0004aa88 	.word	0x0004aa88
   38b40:	0004a4a0 	.word	0x0004a4a0
   38b44:	20002668 	.word	0x20002668

00038b48 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   38b48:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   38b4c:	2b00      	cmp	r3, #0
   38b4e:	f000 80be 	beq.w	38cce <ull_conn_tx_lll_enqueue+0x186>
   38b52:	3901      	subs	r1, #1
{
   38b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   38b58:	f8df 8174 	ldr.w	r8, [pc, #372]	; 38cd0 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   38b5c:	f8df a174 	ldr.w	sl, [pc, #372]	; 38cd4 <ull_conn_tx_lll_enqueue+0x18c>
   38b60:	f8df 9174 	ldr.w	r9, [pc, #372]	; 38cd8 <ull_conn_tx_lll_enqueue+0x190>
   38b64:	4604      	mov	r4, r0
   38b66:	b2cd      	uxtb	r5, r1
   38b68:	e010      	b.n	38b8c <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   38b6a:	4640      	mov	r0, r8
   38b6c:	f7f7 f816 	bl	2fb9c <mem_acquire>
		LL_ASSERT(link);
   38b70:	4607      	mov	r7, r0
   38b72:	b3b0      	cbz	r0, 38be2 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   38b74:	f104 0268 	add.w	r2, r4, #104	; 0x68
   38b78:	4631      	mov	r1, r6
   38b7a:	4638      	mov	r0, r7
   38b7c:	f7f7 f872 	bl	2fc64 <memq_enqueue>
	while (conn->tx_head &&
   38b80:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   38b84:	3d01      	subs	r5, #1
   38b86:	b2ed      	uxtb	r5, r5
   38b88:	2b00      	cmp	r3, #0
   38b8a:	d05c      	beq.n	38c46 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   38b8c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   38b90:	07d1      	lsls	r1, r2, #31
   38b92:	d403      	bmi.n	38b9c <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   38b94:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   38b98:	0792      	lsls	r2, r2, #30
   38b9a:	d53a      	bpl.n	38c12 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38b9c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   38ba0:	4293      	cmp	r3, r2
   38ba2:	d150      	bne.n	38c46 <ull_conn_tx_lll_enqueue+0xfe>
   38ba4:	2dff      	cmp	r5, #255	; 0xff
   38ba6:	d04e      	beq.n	38c46 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38ba8:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   38bac:	4620      	mov	r0, r4
   38bae:	f7fc f827 	bl	34c00 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38bb2:	7903      	ldrb	r3, [r0, #4]
   38bb4:	f003 0303 	and.w	r3, r3, #3
   38bb8:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38bba:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38bbc:	d1d5      	bne.n	38b6a <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   38bbe:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   38bc0:	2b0b      	cmp	r3, #11
   38bc2:	d042      	beq.n	38c4a <ull_conn_tx_lll_enqueue+0x102>
   38bc4:	d81b      	bhi.n	38bfe <ull_conn_tx_lll_enqueue+0xb6>
   38bc6:	2b04      	cmp	r3, #4
   38bc8:	d1cf      	bne.n	38b6a <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   38bca:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   38bce:	f043 0302 	orr.w	r3, r3, #2
   38bd2:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   38bd6:	4640      	mov	r0, r8
   38bd8:	f7f6 ffe0 	bl	2fb9c <mem_acquire>
		LL_ASSERT(link);
   38bdc:	4607      	mov	r7, r0
   38bde:	2800      	cmp	r0, #0
   38be0:	d1c8      	bne.n	38b74 <ull_conn_tx_lll_enqueue+0x2c>
   38be2:	483e      	ldr	r0, [pc, #248]	; (38cdc <ull_conn_tx_lll_enqueue+0x194>)
   38be4:	f240 7326 	movw	r3, #1830	; 0x726
   38be8:	4652      	mov	r2, sl
   38bea:	4649      	mov	r1, r9
   38bec:	f00a f890 	bl	42d10 <printk>
   38bf0:	4040      	eors	r0, r0
   38bf2:	f380 8811 	msr	BASEPRI, r0
   38bf6:	f04f 0003 	mov.w	r0, #3
   38bfa:	df02      	svc	2
   38bfc:	e7ba      	b.n	38b74 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   38bfe:	3b16      	subs	r3, #22
   38c00:	2b01      	cmp	r3, #1
   38c02:	d8b2      	bhi.n	38b6a <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   38c04:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   38c08:	f043 0301 	orr.w	r3, r3, #1
   38c0c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   38c10:	e7ab      	b.n	38b6a <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38c12:	791a      	ldrb	r2, [r3, #4]
   38c14:	f002 0203 	and.w	r2, r2, #3
   38c18:	2a03      	cmp	r2, #3
   38c1a:	d1c3      	bne.n	38ba4 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   38c1c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38c1e:	2a03      	cmp	r2, #3
   38c20:	d001      	beq.n	38c26 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   38c22:	2a0a      	cmp	r2, #10
   38c24:	d1be      	bne.n	38ba4 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   38c26:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   38c2a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   38c2e:	428a      	cmp	r2, r1
   38c30:	d010      	beq.n	38c54 <ull_conn_tx_lll_enqueue+0x10c>
   38c32:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   38c36:	2a03      	cmp	r2, #3
   38c38:	d0b4      	beq.n	38ba4 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   38c3a:	681a      	ldr	r2, [r3, #0]
   38c3c:	b11a      	cbz	r2, 38c46 <ull_conn_tx_lll_enqueue+0xfe>
   38c3e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   38c42:	428a      	cmp	r2, r1
   38c44:	d032      	beq.n	38cac <ull_conn_tx_lll_enqueue+0x164>
}
   38c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   38c4a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38c4e:	2b00      	cmp	r3, #0
   38c50:	da8b      	bge.n	38b6a <ull_conn_tx_lll_enqueue+0x22>
   38c52:	e7ba      	b.n	38bca <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   38c54:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   38c58:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   38c5c:	4288      	cmp	r0, r1
   38c5e:	d1ec      	bne.n	38c3a <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   38c60:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   38c64:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   38c68:	4288      	cmp	r0, r1
   38c6a:	d1e6      	bne.n	38c3a <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   38c6c:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   38c70:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   38c74:	4288      	cmp	r0, r1
   38c76:	d1e0      	bne.n	38c3a <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   38c78:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   38c7c:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   38c80:	4288      	cmp	r0, r1
   38c82:	d1da      	bne.n	38c3a <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   38c84:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   38c88:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   38c8c:	4288      	cmp	r0, r1
   38c8e:	d1d4      	bne.n	38c3a <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38c90:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   38c94:	3a02      	subs	r2, #2
   38c96:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38c9a:	2201      	movs	r2, #1
   38c9c:	f362 0301 	bfi	r3, r2, #0, #2
   38ca0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   38ca4:	2303      	movs	r3, #3
   38ca6:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   38caa:	e77b      	b.n	38ba4 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   38cac:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   38cb0:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   38cb4:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   38cb8:	6810      	ldr	r0, [r2, #0]
   38cba:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   38cbc:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   38cbe:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   38cc2:	2900      	cmp	r1, #0
   38cc4:	f47f af6e 	bne.w	38ba4 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   38cc8:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   38ccc:	e76a      	b.n	38ba4 <ull_conn_tx_lll_enqueue+0x5c>
   38cce:	4770      	bx	lr
   38cd0:	200027b0 	.word	0x200027b0
   38cd4:	0004a914 	.word	0x0004a914
   38cd8:	0004a96c 	.word	0x0004a96c
   38cdc:	0004a4a0 	.word	0x0004a4a0

00038ce0 <tx_demux>:
{
   38ce0:	b510      	push	{r4, lr}
   38ce2:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   38ce4:	2001      	movs	r0, #1
   38ce6:	f7ff fcb7 	bl	38658 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   38cea:	4620      	mov	r0, r4
   38cec:	2101      	movs	r1, #1
}
   38cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   38cf2:	f7ff bf29 	b.w	38b48 <ull_conn_tx_lll_enqueue>
   38cf6:	bf00      	nop

00038cf8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   38cf8:	4901      	ldr	r1, [pc, #4]	; (38d00 <ull_conn_link_tx_release+0x8>)
   38cfa:	f7f6 bf69 	b.w	2fbd0 <mem_release>
   38cfe:	bf00      	nop
   38d00:	200027b0 	.word	0x200027b0

00038d04 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   38d04:	4b01      	ldr	r3, [pc, #4]	; (38d0c <ull_conn_ack_last_idx_get+0x8>)
}
   38d06:	78d8      	ldrb	r0, [r3, #3]
   38d08:	4770      	bx	lr
   38d0a:	bf00      	nop
   38d0c:	20000708 	.word	0x20000708

00038d10 <ull_conn_ack_peek>:
{
   38d10:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   38d12:	4b0c      	ldr	r3, [pc, #48]	; (38d44 <ull_conn_ack_peek+0x34>)
   38d14:	f893 c002 	ldrb.w	ip, [r3, #2]
   38d18:	f893 e003 	ldrb.w	lr, [r3, #3]
   38d1c:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   38d1e:	45f4      	cmp	ip, lr
   38d20:	d00d      	beq.n	38d3e <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   38d22:	fb1c fc04 	smulbb	ip, ip, r4
   38d26:	3304      	adds	r3, #4
   38d28:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   38d2c:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   38d30:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   38d34:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   38d36:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   38d38:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38d3a:	6818      	ldr	r0, [r3, #0]
}
   38d3c:	bd10      	pop	{r4, pc}
		return NULL;
   38d3e:	2000      	movs	r0, #0
}
   38d40:	bd10      	pop	{r4, pc}
   38d42:	bf00      	nop
   38d44:	20000708 	.word	0x20000708

00038d48 <ull_conn_ack_by_last_peek>:
{
   38d48:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   38d4a:	4b0b      	ldr	r3, [pc, #44]	; (38d78 <ull_conn_ack_by_last_peek+0x30>)
   38d4c:	f893 c002 	ldrb.w	ip, [r3, #2]
   38d50:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   38d54:	4584      	cmp	ip, r0
   38d56:	d00d      	beq.n	38d74 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   38d58:	3304      	adds	r3, #4
   38d5a:	fb1c fc0e 	smulbb	ip, ip, lr
   38d5e:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   38d62:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   38d66:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   38d6a:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   38d6c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38d6e:	6818      	ldr	r0, [r3, #0]
}
   38d70:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   38d74:	2000      	movs	r0, #0
   38d76:	e7fb      	b.n	38d70 <ull_conn_ack_by_last_peek+0x28>
   38d78:	20000708 	.word	0x20000708

00038d7c <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   38d7c:	4b09      	ldr	r3, [pc, #36]	; (38da4 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   38d7e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   38d80:	78da      	ldrb	r2, [r3, #3]
   38d82:	7818      	ldrb	r0, [r3, #0]
   38d84:	f893 c001 	ldrb.w	ip, [r3, #1]
   38d88:	428a      	cmp	r2, r1
   38d8a:	d009      	beq.n	38da0 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   38d8c:	1c4a      	adds	r2, r1, #1
   38d8e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   38d90:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   38d94:	4594      	cmp	ip, r2
   38d96:	bf08      	it	eq
   38d98:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   38d9a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   38d9c:	709a      	strb	r2, [r3, #2]
	return mem;
   38d9e:	4770      	bx	lr
		return NULL;
   38da0:	2000      	movs	r0, #0
}
   38da2:	4770      	bx	lr
   38da4:	20000708 	.word	0x20000708

00038da8 <ull_conn_lll_ack_enqueue>:
{
   38da8:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   38daa:	4a15      	ldr	r2, [pc, #84]	; (38e00 <ull_conn_lll_ack_enqueue+0x58>)
   38dac:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   38db0:	7854      	ldrb	r4, [r2, #1]
   38db2:	f892 e002 	ldrb.w	lr, [r2, #2]
   38db6:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   38db8:	f10c 0301 	add.w	r3, ip, #1
   38dbc:	b2db      	uxtb	r3, r3
		last = 0U;
   38dbe:	429c      	cmp	r4, r3
   38dc0:	bf08      	it	eq
   38dc2:	2300      	moveq	r3, #0
	if (last == first) {
   38dc4:	459e      	cmp	lr, r3
   38dc6:	d00a      	beq.n	38dde <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38dc8:	fb1c fc05 	smulbb	ip, ip, r5
   38dcc:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   38dd0:	f82e 000c 	strh.w	r0, [lr, ip]
   38dd4:	44f4      	add	ip, lr
	lll_tx->node = tx;
   38dd6:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   38dda:	70d3      	strb	r3, [r2, #3]
}
   38ddc:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   38dde:	4a09      	ldr	r2, [pc, #36]	; (38e04 <ull_conn_lll_ack_enqueue+0x5c>)
   38de0:	4909      	ldr	r1, [pc, #36]	; (38e08 <ull_conn_lll_ack_enqueue+0x60>)
   38de2:	480a      	ldr	r0, [pc, #40]	; (38e0c <ull_conn_lll_ack_enqueue+0x64>)
   38de4:	f240 7376 	movw	r3, #1910	; 0x776
   38de8:	f009 ff92 	bl	42d10 <printk>
   38dec:	4040      	eors	r0, r0
   38dee:	f380 8811 	msr	BASEPRI, r0
   38df2:	f04f 0003 	mov.w	r0, #3
   38df6:	df02      	svc	2
	lll_tx->handle = handle;
   38df8:	2300      	movs	r3, #0
   38dfa:	801b      	strh	r3, [r3, #0]
   38dfc:	deff      	udf	#255	; 0xff
   38dfe:	bf00      	nop
   38e00:	20000708 	.word	0x20000708
   38e04:	0004a914 	.word	0x0004a914
   38e08:	0004a95c 	.word	0x0004a95c
   38e0c:	0004a4a0 	.word	0x0004a4a0

00038e10 <ull_conn_tx_ack>:
{
   38e10:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   38e12:	7953      	ldrb	r3, [r2, #5]
{
   38e14:	b082      	sub	sp, #8
   38e16:	4614      	mov	r4, r2
   38e18:	4605      	mov	r5, r0
   38e1a:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   38e1c:	b37b      	cbz	r3, 38e7e <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38e1e:	7923      	ldrb	r3, [r4, #4]
   38e20:	f003 0203 	and.w	r2, r3, #3
   38e24:	2a03      	cmp	r2, #3
   38e26:	d00d      	beq.n	38e44 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   38e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38e2c:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   38e2e:	bf04      	itt	eq
   38e30:	f36f 0301 	bfceq	r3, #0, #2
   38e34:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   38e36:	4621      	mov	r1, r4
   38e38:	4628      	mov	r0, r5
}
   38e3a:	b002      	add	sp, #8
   38e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38e40:	f7fa ba8a 	b.w	33358 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   38e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38e48:	429d      	cmp	r5, r3
   38e4a:	d126      	bne.n	38e9a <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   38e4c:	6833      	ldr	r3, [r6, #0]
   38e4e:	429c      	cmp	r4, r3
   38e50:	d03e      	beq.n	38ed0 <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
   38e52:	2b00      	cmp	r3, #0
   38e54:	d0ef      	beq.n	38e36 <ull_conn_tx_ack+0x26>
   38e56:	4a85      	ldr	r2, [pc, #532]	; (3906c <ull_conn_tx_ack+0x25c>)
   38e58:	4985      	ldr	r1, [pc, #532]	; (39070 <ull_conn_tx_ack+0x260>)
   38e5a:	4886      	ldr	r0, [pc, #536]	; (39074 <ull_conn_tx_ack+0x264>)
   38e5c:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   38e60:	f009 ff56 	bl	42d10 <printk>
   38e64:	4040      	eors	r0, r0
   38e66:	f380 8811 	msr	BASEPRI, r0
   38e6a:	f04f 0003 	mov.w	r0, #3
   38e6e:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   38e70:	4621      	mov	r1, r4
   38e72:	4628      	mov	r0, r5
}
   38e74:	b002      	add	sp, #8
   38e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38e7a:	f7fa ba6d 	b.w	33358 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   38e7e:	4a7b      	ldr	r2, [pc, #492]	; (3906c <ull_conn_tx_ack+0x25c>)
   38e80:	497d      	ldr	r1, [pc, #500]	; (39078 <ull_conn_tx_ack+0x268>)
   38e82:	487c      	ldr	r0, [pc, #496]	; (39074 <ull_conn_tx_ack+0x264>)
   38e84:	f240 7383 	movw	r3, #1923	; 0x783
   38e88:	f009 ff42 	bl	42d10 <printk>
   38e8c:	4040      	eors	r0, r0
   38e8e:	f380 8811 	msr	BASEPRI, r0
   38e92:	f04f 0003 	mov.w	r0, #3
   38e96:	df02      	svc	2
   38e98:	e7c1      	b.n	38e1e <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38e9a:	462a      	mov	r2, r5
   38e9c:	4877      	ldr	r0, [pc, #476]	; (3907c <ull_conn_tx_ack+0x26c>)
   38e9e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   38ea2:	f7f6 fead 	bl	2fc00 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   38ea6:	79e2      	ldrb	r2, [r4, #7]
   38ea8:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38eaa:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   38eac:	2a15      	cmp	r2, #21
   38eae:	d80c      	bhi.n	38eca <ull_conn_tx_ack+0xba>
   38eb0:	e8df f002 	tbb	[pc, r2]
   38eb4:	261f0b4e 	.word	0x261f0b4e
   38eb8:	180b185a 	.word	0x180b185a
   38ebc:	2d0b1f0b 	.word	0x2d0b1f0b
   38ec0:	150b0b0b 	.word	0x150b0b0b
   38ec4:	8e42180b 	.word	0x8e42180b
   38ec8:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
   38eca:	6833      	ldr	r3, [r6, #0]
   38ecc:	42a3      	cmp	r3, r4
   38ece:	d1c0      	bne.n	38e52 <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38ed0:	496b      	ldr	r1, [pc, #428]	; (39080 <ull_conn_tx_ack+0x270>)
   38ed2:	4620      	mov	r0, r4
}
   38ed4:	b002      	add	sp, #8
   38ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38eda:	f7f6 be79 	b.w	2fbd0 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   38ede:	7a22      	ldrb	r2, [r4, #8]
   38ee0:	2a03      	cmp	r2, #3
   38ee2:	d014      	beq.n	38f0e <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   38ee4:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   38ee8:	f36f 0241 	bfc	r2, #1, #1
   38eec:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   38ef0:	e7ac      	b.n	38e4c <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   38ef2:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38ef6:	f042 0202 	orr.w	r2, r2, #2
   38efa:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   38efe:	e7a5      	b.n	38e4c <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   38f00:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   38f04:	f042 0203 	orr.w	r2, r2, #3
   38f08:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   38f0c:	e79e      	b.n	38e4c <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   38f0e:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   38f12:	f022 0203 	bic.w	r2, r2, #3
   38f16:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   38f1a:	2200      	movs	r2, #0
   38f1c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   38f20:	e794      	b.n	38e4c <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   38f22:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38f26:	2a00      	cmp	r2, #0
   38f28:	db7f      	blt.n	3902a <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
   38f2a:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   38f2e:	f36f 0200 	bfc	r2, #0, #1
   38f32:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   38f36:	e789      	b.n	38e4c <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   38f38:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   38f3c:	f002 0107 	and.w	r1, r2, #7
   38f40:	2901      	cmp	r1, #1
   38f42:	d183      	bne.n	38e4c <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   38f44:	2102      	movs	r1, #2
   38f46:	f361 0202 	bfi	r2, r1, #0, #3
   38f4a:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
   38f4e:	e77d      	b.n	38e4c <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   38f50:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   38f52:	2a13      	cmp	r2, #19
   38f54:	bf08      	it	eq
   38f56:	2216      	moveq	r2, #22
   38f58:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   38f5c:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   38f60:	3a01      	subs	r2, #1
   38f62:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   38f66:	e771      	b.n	38e4c <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   38f68:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38f6c:	2a00      	cmp	r2, #0
   38f6e:	dac7      	bge.n	38f00 <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   38f70:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38f74:	f022 0203 	bic.w	r2, r2, #3
   38f78:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   38f7c:	2200      	movs	r2, #0
   38f7e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   38f82:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   38f86:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   38f8a:	e75f      	b.n	38e4c <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   38f8c:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   38f90:	2102      	movs	r1, #2
   38f92:	f361 0201 	bfi	r2, r1, #0, #2
   38f96:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   38f9a:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38f9e:	2a00      	cmp	r2, #0
   38fa0:	dac3      	bge.n	38f2a <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38fa2:	4a38      	ldr	r2, [pc, #224]	; (39084 <ull_conn_tx_ack+0x274>)
   38fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
   38fa8:	aa02      	add	r2, sp, #8
   38faa:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   38fae:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   38fb2:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   38fb6:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   38fba:	f002 0207 	and.w	r2, r2, #7
   38fbe:	a802      	add	r0, sp, #8
   38fc0:	4402      	add	r2, r0
   38fc2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   38fc6:	f362 1106 	bfi	r1, r2, #4, #3
   38fca:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   38fce:	e7ac      	b.n	38f2a <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   38fd0:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   38fd4:	f36f 0241 	bfc	r2, #1, #1
   38fd8:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   38fdc:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   38fe0:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   38fe4:	4282      	cmp	r2, r0
   38fe6:	f43f af31 	beq.w	38e4c <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   38fea:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   38fee:	f001 0207 	and.w	r2, r1, #7
   38ff2:	2a03      	cmp	r2, #3
   38ff4:	d005      	beq.n	39002 <ull_conn_tx_ack+0x1f2>
   38ff6:	3203      	adds	r2, #3
   38ff8:	f002 0207 	and.w	r2, r2, #7
   38ffc:	2a01      	cmp	r2, #1
   38ffe:	f63f af64 	bhi.w	38eca <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   39002:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   39006:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   3900a:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   3900e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   39012:	f001 0207 	and.w	r2, r1, #7
   39016:	2a05      	cmp	r2, #5
   39018:	d022      	beq.n	39060 <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
   3901a:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   3901e:	b98a      	cbnz	r2, 39044 <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
   39020:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   39024:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   39028:	e710      	b.n	38e4c <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   3902a:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3902e:	4a15      	ldr	r2, [pc, #84]	; (39084 <ull_conn_tx_ack+0x274>)
				conn->common.txn_lock = 0U;
   39030:	f36f 0141 	bfc	r1, #1, #1
   39034:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   39038:	e892 0003 	ldmia.w	r2, {r0, r1}
   3903c:	aa02      	add	r2, sp, #8
   3903e:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   39042:	e7b4      	b.n	38fae <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
   39044:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   39048:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3904a:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   3904e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   39052:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39056:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   3905a:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   3905e:	e6f5      	b.n	38e4c <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   39060:	2204      	movs	r2, #4
   39062:	f362 0102 	bfi	r1, r2, #0, #3
   39066:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   3906a:	e6ef      	b.n	38e4c <ull_conn_tx_ack+0x3c>
   3906c:	0004a914 	.word	0x0004a914
   39070:	0004aaf0 	.word	0x0004aaf0
   39074:	0004a4a0 	.word	0x0004a4a0
   39078:	0004aae4 	.word	0x0004aae4
   3907c:	20001570 	.word	0x20001570
   39080:	200026fc 	.word	0x200026fc
   39084:	0004aafc 	.word	0x0004aafc

00039088 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   39088:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3908c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   39090:	f3c2 1202 	ubfx	r2, r2, #4, #3
   39094:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   39096:	bf14      	ite	ne
   39098:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3909a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   3909c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   390a0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   390a2:	bf14      	ite	ne
   390a4:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   390a6:	3b0b      	subeq	r3, #11
   390a8:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   390aa:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   390ac:	bf44      	itt	mi
   390ae:	3b04      	submi	r3, #4
   390b0:	b29b      	uxthmi	r3, r3
}
   390b2:	4298      	cmp	r0, r3
   390b4:	bf28      	it	cs
   390b6:	4618      	movcs	r0, r3
   390b8:	4770      	bx	lr
   390ba:	bf00      	nop

000390bc <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   390bc:	b510      	push	{r4, lr}
   390be:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   390c0:	b930      	cbnz	r0, 390d0 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   390c2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   390c6:	f36f 0382 	bfc	r3, #2, #1
   390ca:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   390ce:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   390d0:	4a09      	ldr	r2, [pc, #36]	; (390f8 <ticker_update_latency_cancel_op_cb+0x3c>)
   390d2:	490a      	ldr	r1, [pc, #40]	; (390fc <ticker_update_latency_cancel_op_cb+0x40>)
   390d4:	480a      	ldr	r0, [pc, #40]	; (39100 <ticker_update_latency_cancel_op_cb+0x44>)
   390d6:	f240 23af 	movw	r3, #687	; 0x2af
   390da:	f009 fe19 	bl	42d10 <printk>
   390de:	4040      	eors	r0, r0
   390e0:	f380 8811 	msr	BASEPRI, r0
   390e4:	f04f 0003 	mov.w	r0, #3
   390e8:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   390ea:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   390ee:	f36f 0382 	bfc	r3, #2, #1
   390f2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   390f6:	bd10      	pop	{r4, pc}
   390f8:	0004ab08 	.word	0x0004ab08
   390fc:	0004ab50 	.word	0x0004ab50
   39100:	0004a4a0 	.word	0x0004a4a0

00039104 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39104:	b900      	cbnz	r0, 39108 <ticker_op_cb+0x4>
   39106:	4770      	bx	lr
{
   39108:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3910a:	4a07      	ldr	r2, [pc, #28]	; (39128 <ticker_op_cb+0x24>)
   3910c:	4907      	ldr	r1, [pc, #28]	; (3912c <ticker_op_cb+0x28>)
   3910e:	4808      	ldr	r0, [pc, #32]	; (39130 <ticker_op_cb+0x2c>)
   39110:	f240 23a7 	movw	r3, #679	; 0x2a7
   39114:	f009 fdfc 	bl	42d10 <printk>
   39118:	4040      	eors	r0, r0
   3911a:	f380 8811 	msr	BASEPRI, r0
   3911e:	f04f 0003 	mov.w	r0, #3
   39122:	df02      	svc	2
}
   39124:	bd08      	pop	{r3, pc}
   39126:	bf00      	nop
   39128:	0004ab08 	.word	0x0004ab08
   3912c:	0004a974 	.word	0x0004a974
   39130:	0004a4a0 	.word	0x0004a4a0

00039134 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   39134:	2801      	cmp	r0, #1
   39136:	d000      	beq.n	3913a <ticker_op_stop_adv_cb+0x6>
   39138:	4770      	bx	lr
{
   3913a:	b510      	push	{r4, lr}
   3913c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3913e:	f7fa f9a3 	bl	33488 <ull_disable_mark_get>
   39142:	4284      	cmp	r4, r0
   39144:	d00c      	beq.n	39160 <ticker_op_stop_adv_cb+0x2c>
   39146:	4a07      	ldr	r2, [pc, #28]	; (39164 <ticker_op_stop_adv_cb+0x30>)
   39148:	4907      	ldr	r1, [pc, #28]	; (39168 <ticker_op_stop_adv_cb+0x34>)
   3914a:	4808      	ldr	r0, [pc, #32]	; (3916c <ticker_op_stop_adv_cb+0x38>)
   3914c:	f240 239f 	movw	r3, #671	; 0x29f
   39150:	f009 fdde 	bl	42d10 <printk>
   39154:	4040      	eors	r0, r0
   39156:	f380 8811 	msr	BASEPRI, r0
   3915a:	f04f 0003 	mov.w	r0, #3
   3915e:	df02      	svc	2
}
   39160:	bd10      	pop	{r4, pc}
   39162:	bf00      	nop
   39164:	0004ab08 	.word	0x0004ab08
   39168:	0004ab64 	.word	0x0004ab64
   3916c:	0004a4a0 	.word	0x0004a4a0

00039170 <ull_periph_ticker_cb>:
{
   39170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39174:	9c07      	ldr	r4, [sp, #28]
   39176:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3917a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3917c:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3917e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   39182:	4299      	cmp	r1, r3
   39184:	d026      	beq.n	391d4 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   39186:	4606      	mov	r6, r0
   39188:	4617      	mov	r7, r2
   3918a:	4601      	mov	r1, r0
   3918c:	462a      	mov	r2, r5
   3918e:	4620      	mov	r0, r4
   39190:	f7fd ffda 	bl	37148 <ull_conn_llcp>
		if (ret) {
   39194:	b9f0      	cbnz	r0, 391d4 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   39196:	7823      	ldrb	r3, [r4, #0]
   39198:	3301      	adds	r3, #1
   3919a:	b2db      	uxtb	r3, r3
   3919c:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3919e:	b34b      	cbz	r3, 391f4 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   391a0:	491b      	ldr	r1, [pc, #108]	; (39210 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   391a2:	4b1c      	ldr	r3, [pc, #112]	; (39214 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   391a4:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   391a6:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   391aa:	2200      	movs	r2, #0
	p.param = &conn->lll;
   391ac:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   391ae:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   391b2:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   391b6:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   391b8:	2001      	movs	r0, #1
   391ba:	4611      	mov	r1, r2
   391bc:	f7f6 fdc6 	bl	2fd4c <mayfly_enqueue>
	LL_ASSERT(!err);
   391c0:	b950      	cbnz	r0, 391d8 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   391c2:	20ff      	movs	r0, #255	; 0xff
   391c4:	f7ff fa48 	bl	38658 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   391c8:	4620      	mov	r0, r4
   391ca:	21ff      	movs	r1, #255	; 0xff
}
   391cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   391d0:	f7ff bcba 	b.w	38b48 <ull_conn_tx_lll_enqueue>
}
   391d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   391d8:	4a0f      	ldr	r2, [pc, #60]	; (39218 <ull_periph_ticker_cb+0xa8>)
   391da:	4910      	ldr	r1, [pc, #64]	; (3921c <ull_periph_ticker_cb+0xac>)
   391dc:	4810      	ldr	r0, [pc, #64]	; (39220 <ull_periph_ticker_cb+0xb0>)
   391de:	f240 232a 	movw	r3, #554	; 0x22a
   391e2:	f009 fd95 	bl	42d10 <printk>
   391e6:	4040      	eors	r0, r0
   391e8:	f380 8811 	msr	BASEPRI, r0
   391ec:	f04f 0003 	mov.w	r0, #3
   391f0:	df02      	svc	2
   391f2:	e7e6      	b.n	391c2 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   391f4:	4a08      	ldr	r2, [pc, #32]	; (39218 <ull_periph_ticker_cb+0xa8>)
   391f6:	490b      	ldr	r1, [pc, #44]	; (39224 <ull_periph_ticker_cb+0xb4>)
   391f8:	4809      	ldr	r0, [pc, #36]	; (39220 <ull_periph_ticker_cb+0xb0>)
   391fa:	f240 231d 	movw	r3, #541	; 0x21d
   391fe:	f009 fd87 	bl	42d10 <printk>
   39202:	4040      	eors	r0, r0
   39204:	f380 8811 	msr	BASEPRI, r0
   39208:	f04f 0003 	mov.w	r0, #3
   3920c:	df02      	svc	2
   3920e:	e7c7      	b.n	391a0 <ull_periph_ticker_cb+0x30>
   39210:	200027f4 	.word	0x200027f4
   39214:	200007b0 	.word	0x200007b0
   39218:	0004ab08 	.word	0x0004ab08
   3921c:	0004a63c 	.word	0x0004a63c
   39220:	0004a4a0 	.word	0x0004a4a0
   39224:	0004a8d0 	.word	0x0004a8d0

00039228 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   39228:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3922a:	b123      	cbz	r3, 39236 <ull_periph_latency_cancel+0xe>
   3922c:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   39230:	f012 0304 	ands.w	r3, r2, #4
   39234:	d000      	beq.n	39238 <ull_periph_latency_cancel+0x10>
   39236:	4770      	bx	lr
{
   39238:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   3923a:	f042 0204 	orr.w	r2, r2, #4
{
   3923e:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   39240:	4c11      	ldr	r4, [pc, #68]	; (39288 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   39242:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   39246:	3103      	adds	r1, #3
   39248:	2201      	movs	r2, #1
   3924a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   3924e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   39252:	e9cd 3300 	strd	r3, r3, [sp]
   39256:	9006      	str	r0, [sp, #24]
   39258:	b2ca      	uxtb	r2, r1
   3925a:	4618      	mov	r0, r3
   3925c:	2103      	movs	r1, #3
   3925e:	f7f7 ff29 	bl	310b4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   39262:	f030 0302 	bics.w	r3, r0, #2
   39266:	d00c      	beq.n	39282 <ull_periph_latency_cancel+0x5a>
   39268:	4a08      	ldr	r2, [pc, #32]	; (3928c <ull_periph_latency_cancel+0x64>)
   3926a:	4909      	ldr	r1, [pc, #36]	; (39290 <ull_periph_latency_cancel+0x68>)
   3926c:	4809      	ldr	r0, [pc, #36]	; (39294 <ull_periph_latency_cancel+0x6c>)
   3926e:	f240 13e3 	movw	r3, #483	; 0x1e3
   39272:	f009 fd4d 	bl	42d10 <printk>
   39276:	4040      	eors	r0, r0
   39278:	f380 8811 	msr	BASEPRI, r0
   3927c:	f04f 0003 	mov.w	r0, #3
   39280:	df02      	svc	2
}
   39282:	b008      	add	sp, #32
   39284:	bd10      	pop	{r4, pc}
   39286:	bf00      	nop
   39288:	000390bd 	.word	0x000390bd
   3928c:	0004ab08 	.word	0x0004ab08
   39290:	0004a9f4 	.word	0x0004a9f4
   39294:	0004a4a0 	.word	0x0004a4a0

00039298 <ll_start_enc_req_send>:
{
   39298:	b570      	push	{r4, r5, r6, lr}
   3929a:	460e      	mov	r6, r1
   3929c:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   3929e:	f7fc f847 	bl	35330 <ll_connected_get>
	if (!conn) {
   392a2:	2800      	cmp	r0, #0
   392a4:	d040      	beq.n	39328 <ll_start_enc_req_send+0x90>
	if (error_code) {
   392a6:	4604      	mov	r4, r0
   392a8:	b95e      	cbnz	r6, 392c2 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   392aa:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   392ae:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   392b2:	429a      	cmp	r2, r3
   392b4:	d003      	beq.n	392be <ll_start_enc_req_send+0x26>
   392b6:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   392ba:	2b03      	cmp	r3, #3
   392bc:	d026      	beq.n	3930c <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   392be:	200c      	movs	r0, #12
}
   392c0:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   392c2:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   392c6:	f010 0004 	ands.w	r0, r0, #4
   392ca:	d112      	bne.n	392f2 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   392cc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   392d0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   392d4:	429a      	cmp	r2, r3
   392d6:	d0f2      	beq.n	392be <ll_start_enc_req_send+0x26>
   392d8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   392dc:	2b03      	cmp	r3, #3
   392de:	d1ee      	bne.n	392be <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   392e0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   392e4:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   392e8:	f360 0301 	bfi	r3, r0, #0, #2
   392ec:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   392f0:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   392f2:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   392f6:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   392fa:	4293      	cmp	r3, r2
   392fc:	d1df      	bne.n	392be <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   392fe:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   39300:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   39304:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   39308:	2000      	movs	r0, #0
}
   3930a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3930c:	2210      	movs	r2, #16
   3930e:	4629      	mov	r1, r5
   39310:	f200 1071 	addw	r0, r0, #369	; 0x171
   39314:	f00b fdd4 	bl	44ec0 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   39318:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   3931c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   39320:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   39324:	4630      	mov	r0, r6
}
   39326:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39328:	2002      	movs	r0, #2
}
   3932a:	bd70      	pop	{r4, r5, r6, pc}

0003932c <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3932c:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3932e:	fb02 1c01 	mla	ip, r2, r1, r1
   39332:	7802      	ldrb	r2, [r0, #0]
   39334:	491c      	ldr	r1, [pc, #112]	; (393a8 <lll_chan_sel_1+0x7c>)
{
   39336:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3933a:	4494      	add	ip, r2
   3933c:	fb81 210c 	smull	r2, r1, r1, ip
   39340:	4461      	add	r1, ip
   39342:	1149      	asrs	r1, r1, #5
   39344:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   39348:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   3934c:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3934e:	ebac 0101 	sub.w	r1, ip, r1
   39352:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   39354:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39356:	08c4      	lsrs	r4, r0, #3
   39358:	f001 0107 	and.w	r1, r1, #7
   3935c:	f813 c004 	ldrb.w	ip, [r3, r4]
   39360:	fa4c f101 	asr.w	r1, ip, r1
   39364:	f011 0101 	ands.w	r1, r1, #1
   39368:	d11d      	bne.n	393a6 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   3936a:	fbb0 f2f5 	udiv	r2, r0, r5
   3936e:	fb05 0212 	mls	r2, r5, r2, r0
   39372:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   39374:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   39378:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   3937a:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   3937c:	f100 0c08 	add.w	ip, r0, #8
   39380:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   39384:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   39388:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   3938c:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   39390:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   39394:	d002      	beq.n	3939c <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   39396:	b132      	cbz	r2, 393a6 <lll_chan_sel_1+0x7a>
				chan_index--;
   39398:	3a01      	subs	r2, #1
   3939a:	b2d2      	uxtb	r2, r2
			chan_next++;
   3939c:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   3939e:	4584      	cmp	ip, r0
   393a0:	d1f2      	bne.n	39388 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   393a2:	45a6      	cmp	lr, r4
   393a4:	d1ea      	bne.n	3937c <lll_chan_sel_1+0x50>
}
   393a6:	bd30      	pop	{r4, r5, pc}
   393a8:	dd67c8a7 	.word	0xdd67c8a7

000393ac <lll_chan_id>:
	return aa_ms ^ aa_ls;
   393ac:	8842      	ldrh	r2, [r0, #2]
   393ae:	8800      	ldrh	r0, [r0, #0]
}
   393b0:	4050      	eors	r0, r2
   393b2:	4770      	bx	lr

000393b4 <lll_chan_sel_2>:
{
   393b4:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   393b6:	4d2f      	ldr	r5, [pc, #188]	; (39474 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   393b8:	4c2f      	ldr	r4, [pc, #188]	; (39478 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   393ba:	4048      	eors	r0, r1
   393bc:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   393c0:	0a07      	lsrs	r7, r0, #8
   393c2:	b2c0      	uxtb	r0, r0
   393c4:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   393c8:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   393cc:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   393d0:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   393d4:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   393d8:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   393dc:	433e      	orrs	r6, r7
   393de:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   393e2:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   393e6:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   393ea:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   393ee:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   393f2:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   393f4:	f3c0 4007 	ubfx	r0, r0, #16, #8
   393f8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   393fc:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   39400:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   39404:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   39406:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3940a:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3940c:	d1d8      	bne.n	393c0 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   3940e:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   39410:	481a      	ldr	r0, [pc, #104]	; (3947c <lll_chan_sel_2+0xc8>)
   39412:	fba0 4001 	umull	r4, r0, r0, r1
   39416:	1a0c      	subs	r4, r1, r0
   39418:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3941c:	0940      	lsrs	r0, r0, #5
   3941e:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   39422:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   39426:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39428:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3942c:	f000 0507 	and.w	r5, r0, #7
   39430:	5d14      	ldrb	r4, [r2, r4]
   39432:	412c      	asrs	r4, r5
   39434:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   39436:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39438:	d41a      	bmi.n	39470 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3943a:	fb01 f303 	mul.w	r3, r1, r3
   3943e:	1e56      	subs	r6, r2, #1
   39440:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   39444:	3204      	adds	r2, #4
	chan_next = 0U;
   39446:	4660      	mov	r0, ip
		bite = *chan_map;
   39448:	f100 0508 	add.w	r5, r0, #8
   3944c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   39450:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   39452:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   39456:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   3945a:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   3945e:	d002      	beq.n	39466 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   39460:	b133      	cbz	r3, 39470 <lll_chan_sel_2+0xbc>
				chan_index--;
   39462:	3b01      	subs	r3, #1
   39464:	b2db      	uxtb	r3, r3
			chan_next++;
   39466:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   39468:	42a8      	cmp	r0, r5
   3946a:	d1f2      	bne.n	39452 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   3946c:	42b2      	cmp	r2, r6
   3946e:	d1eb      	bne.n	39448 <lll_chan_sel_2+0x94>
}
   39470:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39472:	bf00      	nop
   39474:	00022110 	.word	0x00022110
   39478:	00088440 	.word	0x00088440
   3947c:	bacf914d 	.word	0xbacf914d

00039480 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   39480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39484:	4d18      	ldr	r5, [pc, #96]	; (394e8 <rl_update+0x68>)
   39486:	4e19      	ldr	r6, [pc, #100]	; (394ec <rl_update+0x6c>)
   39488:	2400      	movs	r4, #0
   3948a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   3948e:	1eaf      	subs	r7, r5, #2
   39490:	f04f 0801 	mov.w	r8, #1
   39494:	e006      	b.n	394a4 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39496:	3401      	adds	r4, #1
   39498:	2c08      	cmp	r4, #8
   3949a:	f105 0506 	add.w	r5, r5, #6
   3949e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   394a2:	d01e      	beq.n	394e2 <rl_update+0x62>
		if (rl[i].taken) {
   394a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   394a8:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   394ac:	07da      	lsls	r2, r3, #31
   394ae:	d5f2      	bpl.n	39496 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   394b0:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   394b2:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   394b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   394b8:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   394bc:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   394be:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   394c2:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   394c4:	4631      	mov	r1, r6
   394c6:	4628      	mov	r0, r5
   394c8:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   394ca:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   394cc:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   394d0:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   394d2:	f00b fcf5 	bl	44ec0 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   394d6:	2c08      	cmp	r4, #8
   394d8:	f105 0506 	add.w	r5, r5, #6
   394dc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   394e0:	d1e0      	bne.n	394a4 <rl_update+0x24>
}
   394e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   394e6:	bf00      	nop
   394e8:	20002a72 	.word	0x20002a72
   394ec:	20002931 	.word	0x20002931

000394f0 <fal_update>:
{
   394f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   394f4:	4e20      	ldr	r6, [pc, #128]	; (39578 <fal_update+0x88>)
   394f6:	4d21      	ldr	r5, [pc, #132]	; (3957c <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   394f8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 39580 <fal_update+0x90>
   394fc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 39584 <fal_update+0x94>
{
   39500:	2400      	movs	r4, #0
   39502:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   39506:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   39508:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3950c:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   39510:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   39514:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   39516:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3951a:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   3951c:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   39520:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   39524:	d021      	beq.n	3956a <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   39526:	f898 3000 	ldrb.w	r3, [r8]
   3952a:	b163      	cbz	r3, 39546 <fal_update+0x56>
		j = fal[i].rl_idx;
   3952c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   39530:	2b07      	cmp	r3, #7
   39532:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   39536:	d806      	bhi.n	39546 <fal_update+0x56>
   39538:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   3953c:	f013 0f04 	tst.w	r3, #4
   39540:	d001      	beq.n	39546 <fal_update+0x56>
   39542:	06db      	lsls	r3, r3, #27
   39544:	d511      	bpl.n	3956a <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   39546:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3954a:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3954e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   39552:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   39556:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3955a:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3955e:	40a3      	lsls	r3, r4
   39560:	ea4e 0303 	orr.w	r3, lr, r3
   39564:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   39566:	f00b fcab 	bl	44ec0 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   3956a:	3401      	adds	r4, #1
   3956c:	2c08      	cmp	r4, #8
   3956e:	f105 0508 	add.w	r5, r5, #8
   39572:	d1c9      	bne.n	39508 <fal_update+0x18>
}
   39574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39578:	20002846 	.word	0x20002846
   3957c:	20002806 	.word	0x20002806
   39580:	20003c6c 	.word	0x20003c6c
   39584:	20002930 	.word	0x20002930

00039588 <ll_fal_size_get>:
}
   39588:	2008      	movs	r0, #8
   3958a:	4770      	bx	lr

0003958c <ll_fal_clear>:
{
   3958c:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   3958e:	2000      	movs	r0, #0
   39590:	f7fa ffb4 	bl	344fc <ull_adv_filter_pol_get>
   39594:	b9c8      	cbnz	r0, 395ca <ll_fal_clear+0x3e>
   39596:	4a0e      	ldr	r2, [pc, #56]	; (395d0 <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   39598:	4c0e      	ldr	r4, [pc, #56]	; (395d4 <ll_fal_clear+0x48>)
		uint8_t j = fal[i].rl_idx;
   3959a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   3959e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   395a0:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   395a2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   395a6:	d805      	bhi.n	395b4 <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   395a8:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   395ac:	f36f 1345 	bfc	r3, #5, #1
   395b0:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   395b4:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   395b8:	f36f 0300 	bfc	r3, #0, #1
   395bc:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   395c0:	3001      	adds	r0, #1
   395c2:	2808      	cmp	r0, #8
   395c4:	d1e9      	bne.n	3959a <ll_fal_clear+0xe>
	return 0;
   395c6:	2000      	movs	r0, #0
}
   395c8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   395ca:	200c      	movs	r0, #12
}
   395cc:	bd10      	pop	{r4, pc}
   395ce:	bf00      	nop
   395d0:	20002804 	.word	0x20002804
   395d4:	20002930 	.word	0x20002930

000395d8 <ll_fal_add>:
{
   395d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   395dc:	4681      	mov	r9, r0
   395de:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   395e0:	2000      	movs	r0, #0
   395e2:	f7fa ff8b 	bl	344fc <ull_adv_filter_pol_get>
   395e6:	2800      	cmp	r0, #0
   395e8:	d16d      	bne.n	396c6 <ll_fal_add+0xee>
	if (addr->type == ADDR_TYPE_ANON) {
   395ea:	f899 a000 	ldrb.w	sl, [r9]
   395ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   395f2:	4605      	mov	r5, r0
   395f4:	d064      	beq.n	396c0 <ll_fal_add+0xe8>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   395f6:	4e42      	ldr	r6, [pc, #264]	; (39700 <ll_fal_add+0x128>)
   395f8:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   395fc:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   39600:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   39604:	4604      	mov	r4, r0
   39606:	1eb7      	subs	r7, r6, #2
   39608:	e009      	b.n	3961e <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   3960a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3960e:	d101      	bne.n	39614 <ll_fal_add+0x3c>
			*free_idx = i;
   39610:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
   39614:	3401      	adds	r4, #1
   39616:	2c08      	cmp	r4, #8
   39618:	f106 0608 	add.w	r6, r6, #8
   3961c:	d017      	beq.n	3964e <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3961e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   39622:	07d8      	lsls	r0, r3, #31
   39624:	f3c3 0240 	ubfx	r2, r3, #1, #1
   39628:	d5ef      	bpl.n	3960a <ll_fal_add+0x32>
   3962a:	4552      	cmp	r2, sl
   3962c:	d1f2      	bne.n	39614 <ll_fal_add+0x3c>
   3962e:	2206      	movs	r2, #6
   39630:	4630      	mov	r0, r6
   39632:	4659      	mov	r1, fp
   39634:	f00b fc33 	bl	44e9e <memcmp>
   39638:	2800      	cmp	r0, #0
   3963a:	d041      	beq.n	396c0 <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   3963c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   39640:	07d9      	lsls	r1, r3, #31
   39642:	d5e2      	bpl.n	3960a <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
   39644:	3401      	adds	r4, #1
   39646:	2c08      	cmp	r4, #8
   39648:	f106 0608 	add.w	r6, r6, #8
   3964c:	d1e7      	bne.n	3961e <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   3964e:	f1b8 0f07 	cmp.w	r8, #7
   39652:	d850      	bhi.n	396f6 <ll_fal_add+0x11e>
	fal[i].id_addr_type = id_addr->type & 0x1;
   39654:	f899 2000 	ldrb.w	r2, [r9]
   39658:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   3965c:	4e29      	ldr	r6, [pc, #164]	; (39704 <ll_fal_add+0x12c>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3965e:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   39660:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   39664:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   39668:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   3966c:	4438      	add	r0, r7
   3966e:	2206      	movs	r2, #6
   39670:	4659      	mov	r1, fp
   39672:	f00b fc25 	bl	44ec0 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39676:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3967a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3967e:	f003 0301 	and.w	r3, r3, #1
   39682:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   39686:	fa5f fa85 	uxtb.w	sl, r5
   3968a:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   3968e:	f3c2 1180 	ubfx	r1, r2, #6, #1
   39692:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39694:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39698:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   3969c:	d501      	bpl.n	396a2 <ll_fal_add+0xca>
   3969e:	4299      	cmp	r1, r3
   396a0:	d015      	beq.n	396ce <ll_fal_add+0xf6>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   396a2:	2d08      	cmp	r5, #8
   396a4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   396a8:	d1eb      	bne.n	39682 <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   396aa:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   396ae:	22ff      	movs	r2, #255	; 0xff
   396b0:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   396b2:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   396b6:	f043 0301 	orr.w	r3, r3, #1
   396ba:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   396be:	2000      	movs	r0, #0
}
   396c0:	b003      	add	sp, #12
   396c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   396c6:	200c      	movs	r0, #12
}
   396c8:	b003      	add	sp, #12
   396ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   396ce:	4630      	mov	r0, r6
   396d0:	2206      	movs	r2, #6
   396d2:	4659      	mov	r1, fp
   396d4:	9301      	str	r3, [sp, #4]
   396d6:	f00b fbe2 	bl	44e9e <memcmp>
   396da:	9b01      	ldr	r3, [sp, #4]
   396dc:	2800      	cmp	r0, #0
   396de:	d1e0      	bne.n	396a2 <ll_fal_add+0xca>
		rl[j].fal = 1U;
   396e0:	f819 3004 	ldrb.w	r3, [r9, r4]
   396e4:	f043 0320 	orr.w	r3, r3, #32
   396e8:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   396ec:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   396f0:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   396f4:	e7dd      	b.n	396b2 <ll_fal_add+0xda>
   396f6:	2007      	movs	r0, #7
}
   396f8:	b003      	add	sp, #12
   396fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   396fe:	bf00      	nop
   39700:	20002806 	.word	0x20002806
   39704:	20002931 	.word	0x20002931

00039708 <ll_fal_remove>:
{
   39708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3970c:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   3970e:	2000      	movs	r0, #0
   39710:	f7fa fef4 	bl	344fc <ull_adv_filter_pol_get>
   39714:	bbb8      	cbnz	r0, 39786 <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   39716:	783e      	ldrb	r6, [r7, #0]
   39718:	2eff      	cmp	r6, #255	; 0xff
   3971a:	4604      	mov	r4, r0
   3971c:	d013      	beq.n	39746 <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3971e:	4d1b      	ldr	r5, [pc, #108]	; (3978c <ll_fal_remove+0x84>)
   39720:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   39722:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39726:	f006 0601 	and.w	r6, r6, #1
   3972a:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   3972e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   39732:	07db      	lsls	r3, r3, #31
   39734:	d501      	bpl.n	3973a <ll_fal_remove+0x32>
   39736:	42b2      	cmp	r2, r6
   39738:	d007      	beq.n	3974a <ll_fal_remove+0x42>
	for (i = 0; i < FAL_SIZE; i++) {
   3973a:	3401      	adds	r4, #1
   3973c:	2c08      	cmp	r4, #8
   3973e:	f105 0508 	add.w	r5, r5, #8
   39742:	d1f2      	bne.n	3972a <ll_fal_remove+0x22>
   39744:	2002      	movs	r0, #2
}
   39746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3974a:	2206      	movs	r2, #6
   3974c:	4628      	mov	r0, r5
   3974e:	4639      	mov	r1, r7
   39750:	f00b fba5 	bl	44e9e <memcmp>
   39754:	2800      	cmp	r0, #0
   39756:	d1f0      	bne.n	3973a <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   39758:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   3975c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3975e:	2b07      	cmp	r3, #7
   39760:	d808      	bhi.n	39774 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   39762:	4a0b      	ldr	r2, [pc, #44]	; (39790 <ll_fal_remove+0x88>)
   39764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   39768:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3976c:	f360 1145 	bfi	r1, r0, #5, #1
   39770:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   39774:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   39778:	f36f 0300 	bfc	r3, #0, #1
   3977c:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   39780:	2000      	movs	r0, #0
}
   39782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39786:	200c      	movs	r0, #12
}
   39788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3978c:	20002806 	.word	0x20002806
   39790:	20002930 	.word	0x20002930

00039794 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   39794:	2807      	cmp	r0, #7
{
   39796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3979a:	4604      	mov	r4, r0
   3979c:	460e      	mov	r6, r1
   3979e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   397a0:	d817      	bhi.n	397d2 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   397a2:	4d1a      	ldr	r5, [pc, #104]	; (3980c <ll_rl_id_addr_get+0x78>)
   397a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   397a8:	00a7      	lsls	r7, r4, #2
   397aa:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   397ae:	07db      	lsls	r3, r3, #31
   397b0:	d51d      	bpl.n	397ee <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   397b2:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   397b4:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   397b6:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   397ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   397be:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   397c2:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   397c4:	4640      	mov	r0, r8
   397c6:	2206      	movs	r2, #6
}
   397c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   397cc:	3101      	adds	r1, #1
   397ce:	f00b bb77 	b.w	44ec0 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   397d2:	4a0f      	ldr	r2, [pc, #60]	; (39810 <ll_rl_id_addr_get+0x7c>)
   397d4:	490f      	ldr	r1, [pc, #60]	; (39814 <ll_rl_id_addr_get+0x80>)
   397d6:	4810      	ldr	r0, [pc, #64]	; (39818 <ll_rl_id_addr_get+0x84>)
   397d8:	f44f 7389 	mov.w	r3, #274	; 0x112
   397dc:	f009 fa98 	bl	42d10 <printk>
   397e0:	4040      	eors	r0, r0
   397e2:	f380 8811 	msr	BASEPRI, r0
   397e6:	f04f 0003 	mov.w	r0, #3
   397ea:	df02      	svc	2
   397ec:	e7d9      	b.n	397a2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   397ee:	4a08      	ldr	r2, [pc, #32]	; (39810 <ll_rl_id_addr_get+0x7c>)
   397f0:	490a      	ldr	r1, [pc, #40]	; (3981c <ll_rl_id_addr_get+0x88>)
   397f2:	4809      	ldr	r0, [pc, #36]	; (39818 <ll_rl_id_addr_get+0x84>)
   397f4:	f240 1313 	movw	r3, #275	; 0x113
   397f8:	f009 fa8a 	bl	42d10 <printk>
   397fc:	4040      	eors	r0, r0
   397fe:	f380 8811 	msr	BASEPRI, r0
   39802:	f04f 0003 	mov.w	r0, #3
   39806:	df02      	svc	2
   39808:	e7d3      	b.n	397b2 <ll_rl_id_addr_get+0x1e>
   3980a:	bf00      	nop
   3980c:	20002930 	.word	0x20002930
   39810:	0004ab94 	.word	0x0004ab94
   39814:	0004abd8 	.word	0x0004abd8
   39818:	0004a4a0 	.word	0x0004a4a0
   3981c:	0004abe4 	.word	0x0004abe4

00039820 <ll_rl_size_get>:
   39820:	2008      	movs	r0, #8
   39822:	4770      	bx	lr

00039824 <ll_rl_clear>:
{
   39824:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39826:	2000      	movs	r0, #0
   39828:	f7fa fe5c 	bl	344e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   3982c:	bb88      	cbnz	r0, 39892 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   3982e:	4b1a      	ldr	r3, [pc, #104]	; (39898 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   39830:	4c1a      	ldr	r4, [pc, #104]	; (3989c <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   39832:	7819      	ldrb	r1, [r3, #0]
   39834:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   39838:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   3983a:	f360 0100 	bfi	r1, r0, #0, #1
   3983e:	f360 0200 	bfi	r2, r0, #0, #1
   39842:	7019      	strb	r1, [r3, #0]
   39844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   39848:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   3984c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   39850:	f360 0100 	bfi	r1, r0, #0, #1
   39854:	f360 0200 	bfi	r2, r0, #0, #1
   39858:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   3985c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   39860:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   39864:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   39868:	f360 0100 	bfi	r1, r0, #0, #1
   3986c:	f360 0200 	bfi	r2, r0, #0, #1
   39870:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   39874:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   39878:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   3987c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   39880:	f360 0100 	bfi	r1, r0, #0, #1
   39884:	f360 0200 	bfi	r2, r0, #0, #1
   39888:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   3988c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   39890:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39892:	200c      	movs	r0, #12
}
   39894:	bd10      	pop	{r4, pc}
   39896:	bf00      	nop
   39898:	20002930 	.word	0x20002930
   3989c:	20003c6b 	.word	0x20003c6b

000398a0 <ll_rl_remove>:
{
   398a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   398a4:	4681      	mov	r9, r0
   398a6:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   398a8:	2000      	movs	r0, #0
   398aa:	f7fa fe1b 	bl	344e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   398ae:	2800      	cmp	r0, #0
   398b0:	d149      	bne.n	39946 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   398b2:	46ca      	mov	sl, r9
   398b4:	4e4e      	ldr	r6, [pc, #312]	; (399f0 <ll_rl_remove+0x150>)
   398b6:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   398ba:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   398bc:	f008 0801 	and.w	r8, r8, #1
   398c0:	1e75      	subs	r5, r6, #1
   398c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   398c6:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   398ca:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   398ce:	f3c2 1380 	ubfx	r3, r2, #6, #1
   398d2:	07d2      	lsls	r2, r2, #31
   398d4:	ea4f 0784 	mov.w	r7, r4, lsl #2
   398d8:	d501      	bpl.n	398de <ll_rl_remove+0x3e>
   398da:	4543      	cmp	r3, r8
   398dc:	d008      	beq.n	398f0 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   398de:	3401      	adds	r4, #1
   398e0:	2c08      	cmp	r4, #8
   398e2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   398e6:	d1ec      	bne.n	398c2 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   398e8:	2002      	movs	r0, #2
}
   398ea:	b003      	add	sp, #12
   398ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   398f0:	4630      	mov	r0, r6
   398f2:	2206      	movs	r2, #6
   398f4:	4651      	mov	r1, sl
   398f6:	f00b fad2 	bl	44e9e <memcmp>
   398fa:	4603      	mov	r3, r0
   398fc:	2800      	cmp	r0, #0
   398fe:	d1ee      	bne.n	398de <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   39900:	f89b 2000 	ldrb.w	r2, [fp]
   39904:	0752      	lsls	r2, r2, #29
   39906:	d430      	bmi.n	3996a <ll_rl_remove+0xca>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   39908:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < FAL_SIZE; i++) {
   3990c:	4e39      	ldr	r6, [pc, #228]	; (399f4 <ll_rl_remove+0x154>)
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3990e:	f009 0901 	and.w	r9, r9, #1
   39912:	f1a6 0802 	sub.w	r8, r6, #2
   39916:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   3991a:	07d0      	lsls	r0, r2, #31
   3991c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   39920:	d501      	bpl.n	39926 <ll_rl_remove+0x86>
   39922:	4549      	cmp	r1, r9
   39924:	d013      	beq.n	3994e <ll_rl_remove+0xae>
	for (i = 0; i < FAL_SIZE; i++) {
   39926:	3301      	adds	r3, #1
   39928:	2b08      	cmp	r3, #8
   3992a:	f106 0608 	add.w	r6, r6, #8
   3992e:	d1f2      	bne.n	39916 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   39930:	443c      	add	r4, r7
		return 0;
   39932:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   39934:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   39938:	f36f 0300 	bfc	r3, #0, #1
   3993c:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   39940:	b003      	add	sp, #12
   39942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39946:	200c      	movs	r0, #12
}
   39948:	b003      	add	sp, #12
   3994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3994e:	2206      	movs	r2, #6
   39950:	4630      	mov	r0, r6
   39952:	4651      	mov	r1, sl
   39954:	9301      	str	r3, [sp, #4]
   39956:	f00b faa2 	bl	44e9e <memcmp>
   3995a:	9b01      	ldr	r3, [sp, #4]
   3995c:	2800      	cmp	r0, #0
   3995e:	d1e2      	bne.n	39926 <ll_rl_remove+0x86>
			fal[j].rl_idx = FILTER_IDX_NONE;
   39960:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   39964:	22ff      	movs	r2, #255	; 0xff
   39966:	705a      	strb	r2, [r3, #1]
   39968:	e7e2      	b.n	39930 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3996a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 399f8 <ll_rl_remove+0x158>
   3996e:	f898 6000 	ldrb.w	r6, [r8]
   39972:	3e01      	subs	r6, #1
			if (pj && pi != pj) {
   39974:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   39978:	d003      	beq.n	39982 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3997a:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   3997e:	45b3      	cmp	fp, r6
   39980:	d102      	bne.n	39988 <ll_rl_remove+0xe8>
			peer_irk_count--;
   39982:	f888 6000 	strb.w	r6, [r8]
   39986:	e7bf      	b.n	39908 <ll_rl_remove+0x68>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   39988:	481c      	ldr	r0, [pc, #112]	; (399fc <ll_rl_remove+0x15c>)
   3998a:	9301      	str	r3, [sp, #4]
   3998c:	2210      	movs	r2, #16
   3998e:	eb00 1106 	add.w	r1, r0, r6, lsl #4
   39992:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   39996:	f00b fa93 	bl	44ec0 <memcpy>
   3999a:	9b01      	ldr	r3, [sp, #4]
   3999c:	f8df c060 	ldr.w	ip, [pc, #96]	; 39a00 <ll_rl_remove+0x160>
   399a0:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   399a2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   399a6:	fa5f fe82 	uxtb.w	lr, r2
   399aa:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   399ae:	f010 0f01 	tst.w	r0, #1
   399b2:	f102 0201 	add.w	r2, r2, #1
   399b6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   399ba:	d005      	beq.n	399c8 <ll_rl_remove+0x128>
   399bc:	0740      	lsls	r0, r0, #29
   399be:	d503      	bpl.n	399c8 <ll_rl_remove+0x128>
   399c0:	f89c 0017 	ldrb.w	r0, [ip, #23]
   399c4:	42b0      	cmp	r0, r6
   399c6:	d008      	beq.n	399da <ll_rl_remove+0x13a>
				for (k = 0U;
   399c8:	2a08      	cmp	r2, #8
   399ca:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   399ce:	d1e8      	bne.n	399a2 <ll_rl_remove+0x102>
			peer_irk_count--;
   399d0:	f898 6000 	ldrb.w	r6, [r8]
   399d4:	3e01      	subs	r6, #1
   399d6:	b2f6      	uxtb	r6, r6
   399d8:	e7d3      	b.n	39982 <ll_rl_remove+0xe2>
   399da:	f898 6000 	ldrb.w	r6, [r8]
						peer_irk_rl_ids[pi] = k;
   399de:	4a09      	ldr	r2, [pc, #36]	; (39a04 <ll_rl_remove+0x164>)
						rl[k].pirk_idx = pi;
   399e0:	f881 b017 	strb.w	fp, [r1, #23]
			peer_irk_count--;
   399e4:	3e01      	subs	r6, #1
						peer_irk_rl_ids[pi] = k;
   399e6:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   399ea:	b2f6      	uxtb	r6, r6
						break;
   399ec:	e7c9      	b.n	39982 <ll_rl_remove+0xe2>
   399ee:	bf00      	nop
   399f0:	20002931 	.word	0x20002931
   399f4:	20002806 	.word	0x20002806
   399f8:	20003c6b 	.word	0x20003c6b
   399fc:	200028b0 	.word	0x200028b0
   39a00:	20002930 	.word	0x20002930
   39a04:	200028a8 	.word	0x200028a8

00039a08 <ll_rl_crpa_set>:
{
   39a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   39a0c:	795c      	ldrb	r4, [r3, #5]
   39a0e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   39a12:	2c40      	cmp	r4, #64	; 0x40
   39a14:	d001      	beq.n	39a1a <ll_rl_crpa_set+0x12>
}
   39a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   39a1a:	461e      	mov	r6, r3
   39a1c:	460f      	mov	r7, r1
   39a1e:	b301      	cbz	r1, 39a62 <ll_rl_crpa_set+0x5a>
   39a20:	f8df 9068 	ldr.w	r9, [pc, #104]	; 39a8c <ll_rl_crpa_set+0x84>
   39a24:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39a26:	f000 0a01 	and.w	sl, r0, #1
   39a2a:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   39a2e:	e003      	b.n	39a38 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39a30:	2c08      	cmp	r4, #8
   39a32:	f109 0928 	add.w	r9, r9, #40	; 0x28
   39a36:	d0ee      	beq.n	39a16 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39a38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39a3c:	4625      	mov	r5, r4
   39a3e:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   39a42:	f3c2 1380 	ubfx	r3, r2, #6, #1
   39a46:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39a48:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39a4c:	d5f0      	bpl.n	39a30 <ll_rl_crpa_set+0x28>
   39a4e:	4553      	cmp	r3, sl
   39a50:	d1ee      	bne.n	39a30 <ll_rl_crpa_set+0x28>
   39a52:	4648      	mov	r0, r9
   39a54:	2206      	movs	r2, #6
   39a56:	4639      	mov	r1, r7
   39a58:	f00b fa21 	bl	44e9e <memcmp>
   39a5c:	2800      	cmp	r0, #0
   39a5e:	d1e7      	bne.n	39a30 <ll_rl_crpa_set+0x28>
   39a60:	e004      	b.n	39a6c <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   39a62:	2a07      	cmp	r2, #7
   39a64:	d8d7      	bhi.n	39a16 <ll_rl_crpa_set+0xe>
   39a66:	f8df 8028 	ldr.w	r8, [pc, #40]	; 39a90 <ll_rl_crpa_set+0x88>
   39a6a:	4615      	mov	r5, r2
   39a6c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   39a70:	00e8      	lsls	r0, r5, #3
   39a72:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   39a76:	07db      	lsls	r3, r3, #31
   39a78:	d5cd      	bpl.n	39a16 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   39a7a:	3018      	adds	r0, #24
   39a7c:	4631      	mov	r1, r6
   39a7e:	4440      	add	r0, r8
   39a80:	2206      	movs	r2, #6
}
   39a82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   39a86:	f00b ba1b 	b.w	44ec0 <memcpy>
   39a8a:	bf00      	nop
   39a8c:	20002931 	.word	0x20002931
   39a90:	20002930 	.word	0x20002930

00039a94 <ll_rl_crpa_get>:
{
   39a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39a98:	4682      	mov	sl, r0
   39a9a:	4e1a      	ldr	r6, [pc, #104]	; (39b04 <ll_rl_crpa_get+0x70>)
   39a9c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   39aa0:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39aa2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39aa4:	f008 0801 	and.w	r8, r8, #1
   39aa8:	1e77      	subs	r7, r6, #1
   39aaa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   39aae:	00d5      	lsls	r5, r2, #3
   39ab0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   39ab4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39ab8:	07db      	lsls	r3, r3, #31
   39aba:	f104 0401 	add.w	r4, r4, #1
   39abe:	d501      	bpl.n	39ac4 <ll_rl_crpa_get+0x30>
   39ac0:	4542      	cmp	r2, r8
   39ac2:	d006      	beq.n	39ad2 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39ac4:	2c08      	cmp	r4, #8
   39ac6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39aca:	d1ee      	bne.n	39aaa <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39acc:	2002      	movs	r0, #2
}
   39ace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39ad2:	4630      	mov	r0, r6
   39ad4:	2206      	movs	r2, #6
   39ad6:	4651      	mov	r1, sl
   39ad8:	f00b f9e1 	bl	44e9e <memcmp>
   39adc:	4683      	mov	fp, r0
   39ade:	2800      	cmp	r0, #0
   39ae0:	d1f0      	bne.n	39ac4 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   39ae2:	f105 0218 	add.w	r2, r5, #24
   39ae6:	4417      	add	r7, r2
   39ae8:	2106      	movs	r1, #6
   39aea:	4638      	mov	r0, r7
   39aec:	f7f6 f8a0 	bl	2fc30 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   39af0:	2800      	cmp	r0, #0
   39af2:	d0eb      	beq.n	39acc <ll_rl_crpa_get+0x38>
   39af4:	2206      	movs	r2, #6
   39af6:	4639      	mov	r1, r7
   39af8:	4648      	mov	r0, r9
   39afa:	f00b f9e1 	bl	44ec0 <memcpy>
		return 0;
   39afe:	4658      	mov	r0, fp
}
   39b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b04:	20002931 	.word	0x20002931

00039b08 <ll_rl_lrpa_get>:
{
   39b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39b0c:	4681      	mov	r9, r0
   39b0e:	4e16      	ldr	r6, [pc, #88]	; (39b68 <ll_rl_lrpa_get+0x60>)
   39b10:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   39b14:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39b16:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39b18:	f008 0801 	and.w	r8, r8, #1
   39b1c:	1e77      	subs	r7, r6, #1
   39b1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   39b22:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   39b26:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   39b2a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39b2e:	07db      	lsls	r3, r3, #31
   39b30:	f104 0401 	add.w	r4, r4, #1
   39b34:	d501      	bpl.n	39b3a <ll_rl_lrpa_get+0x32>
   39b36:	4542      	cmp	r2, r8
   39b38:	d006      	beq.n	39b48 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39b3a:	2c08      	cmp	r4, #8
   39b3c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39b40:	d1ed      	bne.n	39b1e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39b42:	2002      	movs	r0, #2
}
   39b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39b48:	4630      	mov	r0, r6
   39b4a:	2206      	movs	r2, #6
   39b4c:	4649      	mov	r1, r9
   39b4e:	f00b f9a6 	bl	44e9e <memcmp>
   39b52:	4683      	mov	fp, r0
   39b54:	2800      	cmp	r0, #0
   39b56:	d1f0      	bne.n	39b3a <ll_rl_lrpa_get+0x32>
   39b58:	6a69      	ldr	r1, [r5, #36]	; 0x24
   39b5a:	2206      	movs	r2, #6
   39b5c:	4650      	mov	r0, sl
   39b5e:	f00b f9af 	bl	44ec0 <memcpy>
		return 0;
   39b62:	4658      	mov	r0, fp
}
   39b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b68:	20002931 	.word	0x20002931

00039b6c <ll_rl_enable>:
{
   39b6c:	b510      	push	{r4, lr}
   39b6e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39b70:	2000      	movs	r0, #0
   39b72:	f7fa fcb7 	bl	344e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39b76:	b958      	cbnz	r0, 39b90 <ll_rl_enable+0x24>
	switch (enable) {
   39b78:	b134      	cbz	r4, 39b88 <ll_rl_enable+0x1c>
   39b7a:	2c01      	cmp	r4, #1
   39b7c:	d001      	beq.n	39b82 <ll_rl_enable+0x16>
   39b7e:	2012      	movs	r0, #18
}
   39b80:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   39b82:	4b04      	ldr	r3, [pc, #16]	; (39b94 <ll_rl_enable+0x28>)
   39b84:	701c      	strb	r4, [r3, #0]
}
   39b86:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   39b88:	4b02      	ldr	r3, [pc, #8]	; (39b94 <ll_rl_enable+0x28>)
   39b8a:	701c      	strb	r4, [r3, #0]
	return 0;
   39b8c:	4620      	mov	r0, r4
}
   39b8e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39b90:	200c      	movs	r0, #12
}
   39b92:	bd10      	pop	{r4, pc}
   39b94:	20003c6c 	.word	0x20003c6c

00039b98 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   39b98:	4b03      	ldr	r3, [pc, #12]	; (39ba8 <ll_rl_timeout_set+0x10>)
   39b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39b9e:	fb02 f000 	mul.w	r0, r2, r0
   39ba2:	6018      	str	r0, [r3, #0]
}
   39ba4:	4770      	bx	lr
   39ba6:	bf00      	nop
   39ba8:	20002aa4 	.word	0x20002aa4

00039bac <ll_priv_mode_set>:
{
   39bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39bb0:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39bb2:	2000      	movs	r0, #0
{
   39bb4:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39bb6:	f7fa fc95 	bl	344e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39bba:	bb68      	cbnz	r0, 39c18 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39bbc:	4e1d      	ldr	r6, [pc, #116]	; (39c34 <ll_priv_mode_set+0x88>)
   39bbe:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39bc2:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39bc4:	f009 0901 	and.w	r9, r9, #1
   39bc8:	1e77      	subs	r7, r6, #1
   39bca:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   39bce:	00d5      	lsls	r5, r2, #3
   39bd0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   39bd4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39bd8:	07db      	lsls	r3, r3, #31
   39bda:	f104 0401 	add.w	r4, r4, #1
   39bde:	d501      	bpl.n	39be4 <ll_priv_mode_set+0x38>
   39be0:	454a      	cmp	r2, r9
   39be2:	d006      	beq.n	39bf2 <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39be4:	2c08      	cmp	r4, #8
   39be6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39bea:	d1ee      	bne.n	39bca <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39bec:	2002      	movs	r0, #2
}
   39bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39bf2:	4630      	mov	r0, r6
   39bf4:	2206      	movs	r2, #6
   39bf6:	4651      	mov	r1, sl
   39bf8:	f00b f951 	bl	44e9e <memcmp>
   39bfc:	2800      	cmp	r0, #0
   39bfe:	d1f1      	bne.n	39be4 <ll_priv_mode_set+0x38>
		switch (mode) {
   39c00:	f1b8 0f00 	cmp.w	r8, #0
   39c04:	d00e      	beq.n	39c24 <ll_priv_mode_set+0x78>
   39c06:	f1b8 0f01 	cmp.w	r8, #1
   39c0a:	d108      	bne.n	39c1e <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   39c0c:	5d7b      	ldrb	r3, [r7, r5]
   39c0e:	f043 0310 	orr.w	r3, r3, #16
   39c12:	557b      	strb	r3, [r7, r5]
}
   39c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39c18:	200c      	movs	r0, #12
}
   39c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   39c1e:	2012      	movs	r0, #18
}
   39c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   39c24:	5d7b      	ldrb	r3, [r7, r5]
   39c26:	f368 1304 	bfi	r3, r8, #4, #1
   39c2a:	557b      	strb	r3, [r7, r5]
	return 0;
   39c2c:	4640      	mov	r0, r8
}
   39c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39c32:	bf00      	nop
   39c34:	20002931 	.word	0x20002931

00039c38 <ull_filter_reset>:
{
   39c38:	b4d0      	push	{r4, r6, r7}
   39c3a:	4930      	ldr	r1, [pc, #192]	; (39cfc <ull_filter_reset+0xc4>)
   39c3c:	4c30      	ldr	r4, [pc, #192]	; (39d00 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   39c3e:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   39c40:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   39c44:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   39c46:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   39c48:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   39c4c:	d805      	bhi.n	39c5a <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   39c4e:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   39c52:	f36f 1245 	bfc	r2, #5, #1
   39c56:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   39c5a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   39c5e:	f36f 0200 	bfc	r2, #0, #1
   39c62:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   39c66:	3301      	adds	r3, #1
   39c68:	2b08      	cmp	r3, #8
   39c6a:	d1e9      	bne.n	39c40 <ull_filter_reset+0x8>
	rl_enable = 0U;
   39c6c:	4a25      	ldr	r2, [pc, #148]	; (39d04 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   39c6e:	4c26      	ldr	r4, [pc, #152]	; (39d08 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   39c70:	2300      	movs	r3, #0
   39c72:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   39c74:	780a      	ldrb	r2, [r1, #0]
   39c76:	f363 0200 	bfi	r2, r3, #0, #1
   39c7a:	700a      	strb	r2, [r1, #0]
   39c7c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   39c80:	f363 0200 	bfi	r2, r3, #0, #1
   39c84:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   39c88:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   39c8c:	f363 0200 	bfi	r2, r3, #0, #1
   39c90:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   39c94:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   39c98:	f363 0200 	bfi	r2, r3, #0, #1
   39c9c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   39ca0:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   39ca4:	f363 0200 	bfi	r2, r3, #0, #1
   39ca8:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   39cac:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   39cb0:	f363 0200 	bfi	r2, r3, #0, #1
   39cb4:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   39cb8:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   39cbc:	f363 0200 	bfi	r2, r3, #0, #1
   39cc0:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   39cc4:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   39cc8:	f363 0200 	bfi	r2, r3, #0, #1
   39ccc:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   39cd0:	4a0e      	ldr	r2, [pc, #56]	; (39d0c <ull_filter_reset+0xd4>)
   39cd2:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   39cd4:	4b0e      	ldr	r3, [pc, #56]	; (39d10 <ull_filter_reset+0xd8>)
   39cd6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   39cda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   39cde:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   39ce2:	4b0c      	ldr	r3, [pc, #48]	; (39d14 <ull_filter_reset+0xdc>)
   39ce4:	6023      	str	r3, [r4, #0]
	if (init) {
   39ce6:	b120      	cbz	r0, 39cf2 <ull_filter_reset+0xba>
}
   39ce8:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   39cea:	490b      	ldr	r1, [pc, #44]	; (39d18 <ull_filter_reset+0xe0>)
   39cec:	480b      	ldr	r0, [pc, #44]	; (39d1c <ull_filter_reset+0xe4>)
   39cee:	f00f b97f 	b.w	48ff0 <k_work_init_delayable>
}
   39cf2:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   39cf4:	4809      	ldr	r0, [pc, #36]	; (39d1c <ull_filter_reset+0xe4>)
   39cf6:	f00f b987 	b.w	49008 <k_work_cancel_delayable>
   39cfa:	bf00      	nop
   39cfc:	20002930 	.word	0x20002930
   39d00:	20002804 	.word	0x20002804
   39d04:	20003c6c 	.word	0x20003c6c
   39d08:	20002aa4 	.word	0x20002aa4
   39d0c:	20003c6b 	.word	0x20003c6b
   39d10:	20001750 	.word	0x20001750
   39d14:	000dbba0 	.word	0x000dbba0
   39d18:	00039f85 	.word	0x00039f85
   39d1c:	20001758 	.word	0x20001758

00039d20 <ull_filter_lll_get>:
		return &fal_filter;
   39d20:	4a03      	ldr	r2, [pc, #12]	; (39d30 <ull_filter_lll_get+0x10>)
   39d22:	4b04      	ldr	r3, [pc, #16]	; (39d34 <ull_filter_lll_get+0x14>)
}
   39d24:	2800      	cmp	r0, #0
   39d26:	bf0c      	ite	eq
   39d28:	4610      	moveq	r0, r2
   39d2a:	4618      	movne	r0, r3
   39d2c:	4770      	bx	lr
   39d2e:	bf00      	nop
   39d30:	20002a70 	.word	0x20002a70
   39d34:	20002844 	.word	0x20002844

00039d38 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   39d38:	b1a8      	cbz	r0, 39d66 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39d3a:	4a0c      	ldr	r2, [pc, #48]	; (39d6c <ull_filter_adv_scan_state_cb+0x34>)
			return ((t * to_hz + off) / from_hz);
   39d3c:	6812      	ldr	r2, [r2, #0]
{
   39d3e:	b510      	push	{r4, lr}
   39d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39d44:	f240 30e7 	movw	r0, #999	; 0x3e7
   39d48:	2100      	movs	r1, #0
   39d4a:	fbe2 0103 	umlal	r0, r1, r2, r3
   39d4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39d52:	2300      	movs	r3, #0
   39d54:	f7ec f9d4 	bl	26100 <__aeabi_uldivmod>
}
   39d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39d5c:	4602      	mov	r2, r0
   39d5e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39d60:	4803      	ldr	r0, [pc, #12]	; (39d70 <ull_filter_adv_scan_state_cb+0x38>)
   39d62:	f007 bfaf 	b.w	41cc4 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   39d66:	4802      	ldr	r0, [pc, #8]	; (39d70 <ull_filter_adv_scan_state_cb+0x38>)
   39d68:	f00f b94e 	b.w	49008 <k_work_cancel_delayable>
   39d6c:	20002aa4 	.word	0x20002aa4
   39d70:	20001758 	.word	0x20001758

00039d74 <ull_filter_adv_update>:
{
   39d74:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   39d76:	4b09      	ldr	r3, [pc, #36]	; (39d9c <ull_filter_adv_update+0x28>)
   39d78:	2200      	movs	r2, #0
   39d7a:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   39d7c:	b930      	cbnz	r0, 39d8c <ull_filter_adv_update+0x18>
	if (rl_enable &&
   39d7e:	4b08      	ldr	r3, [pc, #32]	; (39da0 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   39d80:	4a08      	ldr	r2, [pc, #32]	; (39da4 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   39d82:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   39d84:	2100      	movs	r1, #0
   39d86:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   39d88:	b91b      	cbnz	r3, 39d92 <ull_filter_adv_update+0x1e>
}
   39d8a:	bd08      	pop	{r3, pc}
		fal_update();
   39d8c:	f7ff fbb0 	bl	394f0 <fal_update>
   39d90:	e7f5      	b.n	39d7e <ull_filter_adv_update+0xa>
}
   39d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   39d96:	f7ff bb73 	b.w	39480 <rl_update>
   39d9a:	bf00      	nop
   39d9c:	20002844 	.word	0x20002844
   39da0:	20003c6c 	.word	0x20003c6c
   39da4:	20002a70 	.word	0x20002a70

00039da8 <ull_filter_rpa_update>:
{
   39da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39dac:	4683      	mov	fp, r0
   39dae:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   39db0:	f00f fabf 	bl	49332 <z_impl_k_uptime_ticks>
   39db4:	014b      	lsls	r3, r1, #5
   39db6:	0142      	lsls	r2, r0, #5
   39db8:	1a12      	subs	r2, r2, r0
   39dba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   39dbe:	eb63 0301 	sbc.w	r3, r3, r1
   39dc2:	009b      	lsls	r3, r3, #2
   39dc4:	ea4f 0982 	mov.w	r9, r2, lsl #2
   39dc8:	eb19 0900 	adds.w	r9, r9, r0
   39dcc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   39dd0:	eb41 0103 	adc.w	r1, r1, r3
   39dd4:	00cb      	lsls	r3, r1, #3
   39dd6:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   39dda:	0bd9      	lsrs	r1, r3, #15
   39ddc:	f3c9 3910 	ubfx	r9, r9, #12, #17
   39de0:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   39de4:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   39de6:	f1bb 0f00 	cmp.w	fp, #0
   39dea:	d117      	bne.n	39e1c <ull_filter_rpa_update+0x74>
   39dec:	4a5d      	ldr	r2, [pc, #372]	; (39f64 <ull_filter_rpa_update+0x1bc>)
   39dee:	e9d2 3200 	ldrd	r3, r2, [r2]
   39df2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   39df6:	bf08      	it	eq
   39df8:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   39dfc:	d00e      	beq.n	39e1c <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   39dfe:	ebb9 0303 	subs.w	r3, r9, r3
   39e02:	eb61 0202 	sbc.w	r2, r1, r2
   39e06:	4958      	ldr	r1, [pc, #352]	; (39f68 <ull_filter_rpa_update+0x1c0>)
   39e08:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   39e0a:	428b      	cmp	r3, r1
   39e0c:	f172 0300 	sbcs.w	r3, r2, #0
   39e10:	bfac      	ite	ge
   39e12:	f04f 0a01 	movge.w	sl, #1
   39e16:	f04f 0a00 	movlt.w	sl, #0
   39e1a:	e001      	b.n	39e20 <ull_filter_rpa_update+0x78>
   39e1c:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39e20:	4e52      	ldr	r6, [pc, #328]	; (39f6c <ull_filter_rpa_update+0x1c4>)
   39e22:	f8df 814c 	ldr.w	r8, [pc, #332]	; 39f70 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   39e26:	2400      	movs	r4, #0
   39e28:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   39e2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39e30:	00a5      	lsls	r5, r4, #2
   39e32:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39e36:	07da      	lsls	r2, r3, #31
   39e38:	d515      	bpl.n	39e66 <ull_filter_rpa_update+0xbe>
   39e3a:	f1ba 0f00 	cmp.w	sl, #0
   39e3e:	d101      	bne.n	39e44 <ull_filter_rpa_update+0x9c>
   39e40:	0798      	lsls	r0, r3, #30
   39e42:	d410      	bmi.n	39e66 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   39e44:	192b      	adds	r3, r5, r4
   39e46:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39e4a:	0759      	lsls	r1, r3, #29
   39e4c:	d432      	bmi.n	39eb4 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   39e4e:	192b      	adds	r3, r5, r4
   39e50:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39e54:	071a      	lsls	r2, r3, #28
   39e56:	d41b      	bmi.n	39e90 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   39e58:	4425      	add	r5, r4
   39e5a:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   39e5e:	f043 0302 	orr.w	r3, r3, #2
   39e62:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39e66:	3401      	adds	r4, #1
   39e68:	2c08      	cmp	r4, #8
   39e6a:	f108 0806 	add.w	r8, r8, #6
   39e6e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39e72:	d1db      	bne.n	39e2c <ull_filter_rpa_update+0x84>
	if (all) {
   39e74:	f1ba 0f00 	cmp.w	sl, #0
   39e78:	d004      	beq.n	39e84 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   39e7a:	4b3a      	ldr	r3, [pc, #232]	; (39f64 <ull_filter_rpa_update+0x1bc>)
   39e7c:	9a01      	ldr	r2, [sp, #4]
   39e7e:	f8c3 9000 	str.w	r9, [r3]
   39e82:	605a      	str	r2, [r3, #4]
	if (timeout) {
   39e84:	f1bb 0f00 	cmp.w	fp, #0
   39e88:	d138      	bne.n	39efc <ull_filter_rpa_update+0x154>
}
   39e8a:	b007      	add	sp, #28
   39e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   39e90:	a902      	add	r1, sp, #8
   39e92:	f1a6 0017 	sub.w	r0, r6, #23
   39e96:	f00b f882 	bl	44f9e <bt_rpa_create>
				LL_ASSERT(!err);
   39e9a:	2800      	cmp	r0, #0
   39e9c:	d154      	bne.n	39f48 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   39e9e:	ab02      	add	r3, sp, #8
   39ea0:	f8c6 3006 	str.w	r3, [r6, #6]
   39ea4:	4619      	mov	r1, r3
   39ea6:	2206      	movs	r2, #6
   39ea8:	4640      	mov	r0, r8
   39eaa:	f00b f809 	bl	44ec0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   39eae:	f8c6 8006 	str.w	r8, [r6, #6]
   39eb2:	e7d1      	b.n	39e58 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   39eb4:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   39eb8:	4a2e      	ldr	r2, [pc, #184]	; (39f74 <ull_filter_rpa_update+0x1cc>)
   39eba:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   39ebe:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   39ec0:	f10d 0307 	add.w	r3, sp, #7
   39ec4:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   39ec8:	f812 1901 	ldrb.w	r1, [r2], #-1
   39ecc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   39ed0:	4283      	cmp	r3, r0
   39ed2:	d1f9      	bne.n	39ec8 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   39ed4:	4631      	mov	r1, r6
   39ed6:	a802      	add	r0, sp, #8
   39ed8:	f00b f861 	bl	44f9e <bt_rpa_create>
				LL_ASSERT(!err);
   39edc:	2800      	cmp	r0, #0
   39ede:	d0b6      	beq.n	39e4e <ull_filter_rpa_update+0xa6>
   39ee0:	4a25      	ldr	r2, [pc, #148]	; (39f78 <ull_filter_rpa_update+0x1d0>)
   39ee2:	4926      	ldr	r1, [pc, #152]	; (39f7c <ull_filter_rpa_update+0x1d4>)
   39ee4:	4826      	ldr	r0, [pc, #152]	; (39f80 <ull_filter_rpa_update+0x1d8>)
   39ee6:	f240 23eb 	movw	r3, #747	; 0x2eb
   39eea:	f008 ff11 	bl	42d10 <printk>
   39eee:	4040      	eors	r0, r0
   39ef0:	f380 8811 	msr	BASEPRI, r0
   39ef4:	f04f 0003 	mov.w	r0, #3
   39ef8:	df02      	svc	2
   39efa:	e7a8      	b.n	39e4e <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   39efc:	2000      	movs	r0, #0
   39efe:	f7fa fae3 	bl	344c8 <ull_adv_is_enabled_get>
		if (adv) {
   39f02:	4604      	mov	r4, r0
   39f04:	2800      	cmp	r0, #0
   39f06:	d0c0      	beq.n	39e8a <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   39f08:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   39f0c:	075b      	lsls	r3, r3, #29
   39f0e:	d5bc      	bpl.n	39e8a <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   39f10:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   39f14:	2b07      	cmp	r3, #7
   39f16:	d8b8      	bhi.n	39e8a <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39f18:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   39f1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   39f20:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39f22:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   39f24:	3028      	adds	r0, #40	; 0x28
   39f26:	f001 f9cb 	bl	3b2c0 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   39f2a:	7872      	ldrb	r2, [r6, #1]
   39f2c:	4605      	mov	r5, r0
   39f2e:	3202      	adds	r2, #2
   39f30:	4631      	mov	r1, r6
   39f32:	f00a ffc5 	bl	44ec0 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   39f36:	4629      	mov	r1, r5
   39f38:	4620      	mov	r0, r4
   39f3a:	f7fa faef 	bl	3451c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   39f3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   39f42:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   39f46:	e7a0      	b.n	39e8a <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   39f48:	4a0b      	ldr	r2, [pc, #44]	; (39f78 <ull_filter_rpa_update+0x1d0>)
   39f4a:	490c      	ldr	r1, [pc, #48]	; (39f7c <ull_filter_rpa_update+0x1d4>)
   39f4c:	480c      	ldr	r0, [pc, #48]	; (39f80 <ull_filter_rpa_update+0x1d8>)
   39f4e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   39f52:	f008 fedd 	bl	42d10 <printk>
   39f56:	4040      	eors	r0, r0
   39f58:	f380 8811 	msr	BASEPRI, r0
   39f5c:	f04f 0003 	mov.w	r0, #3
   39f60:	df02      	svc	2
   39f62:	e79c      	b.n	39e9e <ull_filter_rpa_update+0xf6>
   39f64:	20001750 	.word	0x20001750
   39f68:	20002aa4 	.word	0x20002aa4
   39f6c:	2000294e 	.word	0x2000294e
   39f70:	20002878 	.word	0x20002878
   39f74:	200028b0 	.word	0x200028b0
   39f78:	0004ab94 	.word	0x0004ab94
   39f7c:	0004a63c 	.word	0x0004a63c
   39f80:	0004a4a0 	.word	0x0004a4a0

00039f84 <rpa_timeout>:
{
   39f84:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   39f86:	2001      	movs	r0, #1
   39f88:	f7ff ff0e 	bl	39da8 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39f8c:	4a0a      	ldr	r2, [pc, #40]	; (39fb8 <rpa_timeout+0x34>)
   39f8e:	6812      	ldr	r2, [r2, #0]
   39f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39f94:	f240 30e7 	movw	r0, #999	; 0x3e7
   39f98:	2100      	movs	r1, #0
   39f9a:	fbe2 0103 	umlal	r0, r1, r2, r3
   39f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39fa2:	2300      	movs	r3, #0
   39fa4:	f7ec f8ac 	bl	26100 <__aeabi_uldivmod>
}
   39fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39fac:	4602      	mov	r2, r0
   39fae:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39fb0:	4802      	ldr	r0, [pc, #8]	; (39fbc <rpa_timeout+0x38>)
   39fb2:	f007 be87 	b.w	41cc4 <k_work_schedule>
   39fb6:	bf00      	nop
   39fb8:	20002aa4 	.word	0x20002aa4
   39fbc:	20001758 	.word	0x20001758

00039fc0 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   39fc0:	2807      	cmp	r0, #7
   39fc2:	d813      	bhi.n	39fec <ull_filter_adva_get+0x2c>
{
   39fc4:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   39fc6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   39fca:	4d10      	ldr	r5, [pc, #64]	; (3a00c <ull_filter_adva_get+0x4c>)
   39fcc:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   39fd0:	071a      	lsls	r2, r3, #28
   39fd2:	4604      	mov	r4, r0
   39fd4:	ea4f 0680 	mov.w	r6, r0, lsl #2
   39fd8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   39fdc:	d505      	bpl.n	39fea <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   39fde:	079b      	lsls	r3, r3, #30
   39fe0:	d506      	bpl.n	39ff0 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   39fe2:	4434      	add	r4, r6
   39fe4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   39fe8:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   39fea:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   39fec:	2000      	movs	r0, #0
}
   39fee:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   39ff0:	4a07      	ldr	r2, [pc, #28]	; (3a010 <ull_filter_adva_get+0x50>)
   39ff2:	4908      	ldr	r1, [pc, #32]	; (3a014 <ull_filter_adva_get+0x54>)
   39ff4:	4808      	ldr	r0, [pc, #32]	; (3a018 <ull_filter_adva_get+0x58>)
   39ff6:	f44f 7347 	mov.w	r3, #796	; 0x31c
   39ffa:	f008 fe89 	bl	42d10 <printk>
   39ffe:	4040      	eors	r0, r0
   3a000:	f380 8811 	msr	BASEPRI, r0
   3a004:	f04f 0003 	mov.w	r0, #3
   3a008:	df02      	svc	2
   3a00a:	e7ea      	b.n	39fe2 <ull_filter_adva_get+0x22>
   3a00c:	20002930 	.word	0x20002930
   3a010:	0004ab94 	.word	0x0004ab94
   3a014:	0004abf8 	.word	0x0004abf8
   3a018:	0004a4a0 	.word	0x0004a4a0

0003a01c <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   3a01c:	2807      	cmp	r0, #7
   3a01e:	d80b      	bhi.n	3a038 <ull_filter_tgta_get+0x1c>
   3a020:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3a024:	4a05      	ldr	r2, [pc, #20]	; (3a03c <ull_filter_tgta_get+0x20>)
   3a026:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3a02a:	074b      	lsls	r3, r1, #29
   3a02c:	d504      	bpl.n	3a038 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   3a02e:	2328      	movs	r3, #40	; 0x28
   3a030:	fb03 2000 	mla	r0, r3, r0, r2
   3a034:	301e      	adds	r0, #30
   3a036:	4770      	bx	lr
	return NULL;
   3a038:	2000      	movs	r0, #0
   3a03a:	4770      	bx	lr
   3a03c:	20002930 	.word	0x20002930

0003a040 <ull_filter_rl_find>:
{
   3a040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a044:	468b      	mov	fp, r1
	if (free_idx) {
   3a046:	4617      	mov	r7, r2
   3a048:	b10a      	cbz	r2, 3a04e <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   3a04a:	23ff      	movs	r3, #255	; 0xff
   3a04c:	7013      	strb	r3, [r2, #0]
   3a04e:	4d1b      	ldr	r5, [pc, #108]	; (3a0bc <ull_filter_rl_find+0x7c>)
{
   3a050:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3a052:	f000 0a01 	and.w	sl, r0, #1
   3a056:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   3a05a:	e006      	b.n	3a06a <ull_filter_rl_find+0x2a>
   3a05c:	4552      	cmp	r2, sl
   3a05e:	d01f      	beq.n	3a0a0 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3a060:	3401      	adds	r4, #1
   3a062:	2c08      	cmp	r4, #8
   3a064:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3a068:	d015      	beq.n	3a096 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3a06a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   3a06e:	fa5f f884 	uxtb.w	r8, r4
   3a072:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3a076:	07d9      	lsls	r1, r3, #31
   3a078:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3a07c:	d4ee      	bmi.n	3a05c <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   3a07e:	2f00      	cmp	r7, #0
   3a080:	d0ee      	beq.n	3a060 <ull_filter_rl_find+0x20>
   3a082:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3a084:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   3a086:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   3a088:	bf08      	it	eq
   3a08a:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3a08e:	2c08      	cmp	r4, #8
   3a090:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3a094:	d1e9      	bne.n	3a06a <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   3a096:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   3a09a:	4640      	mov	r0, r8
   3a09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3a0a0:	4628      	mov	r0, r5
   3a0a2:	2206      	movs	r2, #6
   3a0a4:	4659      	mov	r1, fp
   3a0a6:	f00a fefa 	bl	44e9e <memcmp>
   3a0aa:	2800      	cmp	r0, #0
   3a0ac:	d0f5      	beq.n	3a09a <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   3a0ae:	2f00      	cmp	r7, #0
   3a0b0:	d0d6      	beq.n	3a060 <ull_filter_rl_find+0x20>
   3a0b2:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3a0b6:	07db      	lsls	r3, r3, #31
   3a0b8:	d4d2      	bmi.n	3a060 <ull_filter_rl_find+0x20>
   3a0ba:	e7e2      	b.n	3a082 <ull_filter_rl_find+0x42>
   3a0bc:	20002931 	.word	0x20002931

0003a0c0 <ll_rl_add>:
{
   3a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a0c4:	4680      	mov	r8, r0
   3a0c6:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3a0c8:	2000      	movs	r0, #0
{
   3a0ca:	460e      	mov	r6, r1
   3a0cc:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3a0ce:	f7fa fa09 	bl	344e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   3a0d2:	2800      	cmp	r0, #0
   3a0d4:	d17d      	bne.n	3a1d2 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   3a0d6:	46c2      	mov	sl, r8
   3a0d8:	4604      	mov	r4, r0
   3a0da:	f81a 0b01 	ldrb.w	r0, [sl], #1
   3a0de:	f10d 020f 	add.w	r2, sp, #15
   3a0e2:	4651      	mov	r1, sl
   3a0e4:	f7ff ffac 	bl	3a040 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   3a0e8:	2807      	cmp	r0, #7
   3a0ea:	f240 80b5 	bls.w	3a258 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   3a0ee:	f89d 700f 	ldrb.w	r7, [sp, #15]
   3a0f2:	2f07      	cmp	r7, #7
   3a0f4:	f200 8084 	bhi.w	3a200 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   3a0f8:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   3a0fc:	4d58      	ldr	r5, [pc, #352]	; (3a260 <ll_rl_add+0x1a0>)
   3a0fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   3a102:	1c58      	adds	r0, r3, #1
   3a104:	2206      	movs	r2, #6
   3a106:	4651      	mov	r1, sl
   3a108:	4428      	add	r0, r5
   3a10a:	9300      	str	r3, [sp, #0]
   3a10c:	f00a fed8 	bl	44ec0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   3a110:	f898 3000 	ldrb.w	r3, [r8]
   3a114:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   3a118:	465a      	mov	r2, fp
   3a11a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   3a11e:	f363 1186 	bfi	r1, r3, #6, #1
   3a122:	f805 100b 	strb.w	r1, [r5, fp]
   3a126:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3a12a:	2110      	movs	r1, #16
   3a12c:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   3a12e:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3a130:	f7f5 fd7e 	bl	2fc30 <mem_nz>
   3a134:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3a138:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3a13a:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3a13e:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3a140:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3a144:	f7f5 fd74 	bl	2fc30 <mem_nz>
   3a148:	f815 200b 	ldrb.w	r2, [r5, fp]
   3a14c:	f000 0001 	and.w	r0, r0, #1
   3a150:	f360 02c3 	bfi	r2, r0, #3, #1
   3a154:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   3a158:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   3a15a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   3a15e:	d453      	bmi.n	3a208 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   3a160:	2800      	cmp	r0, #0
   3a162:	d16b      	bne.n	3a23c <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   3a164:	9800      	ldr	r0, [sp, #0]
   3a166:	4e3f      	ldr	r6, [pc, #252]	; (3a264 <ll_rl_add+0x1a4>)
   3a168:	3018      	adds	r0, #24
   3a16a:	2206      	movs	r2, #6
   3a16c:	2100      	movs	r1, #0
   3a16e:	4428      	add	r0, r5
   3a170:	f00a feb1 	bl	44ed6 <memset>
	rl[i].dev = 0U;
   3a174:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   3a178:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   3a17c:	f021 0112 	bic.w	r1, r1, #18
   3a180:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3a184:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   3a188:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3a18c:	f009 0901 	and.w	r9, r9, #1
   3a190:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   3a194:	07d3      	lsls	r3, r2, #31
   3a196:	f3c2 0140 	ubfx	r1, r2, #1, #1
   3a19a:	d501      	bpl.n	3a1a0 <ll_rl_add+0xe0>
   3a19c:	4549      	cmp	r1, r9
   3a19e:	d01c      	beq.n	3a1da <ll_rl_add+0x11a>
	for (i = 0; i < FAL_SIZE; i++) {
   3a1a0:	3401      	adds	r4, #1
   3a1a2:	2c08      	cmp	r4, #8
   3a1a4:	f106 0608 	add.w	r6, r6, #8
   3a1a8:	d1f2      	bne.n	3a190 <ll_rl_add+0xd0>
		rl[i].fal = 0U;
   3a1aa:	eb0b 0207 	add.w	r2, fp, r7
   3a1ae:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   3a1b2:	f36f 1145 	bfc	r1, #5, #1
   3a1b6:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   3a1ba:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   3a1be:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   3a1c0:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   3a1c4:	f042 0201 	orr.w	r2, r2, #1
   3a1c8:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   3a1cc:	b005      	add	sp, #20
   3a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a1d2:	200c      	movs	r0, #12
}
   3a1d4:	b005      	add	sp, #20
   3a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3a1da:	2206      	movs	r2, #6
   3a1dc:	4630      	mov	r0, r6
   3a1de:	4651      	mov	r1, sl
   3a1e0:	f00a fe5d 	bl	44e9e <memcmp>
   3a1e4:	2800      	cmp	r0, #0
   3a1e6:	d1db      	bne.n	3a1a0 <ll_rl_add+0xe0>
		rl[i].fal = 1U;
   3a1e8:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   3a1ec:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   3a1f0:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   3a1f4:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   3a1f6:	f041 0120 	orr.w	r1, r1, #32
   3a1fa:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   3a1fe:	e7dc      	b.n	3a1ba <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   3a200:	2007      	movs	r0, #7
}
   3a202:	b005      	add	sp, #20
   3a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   3a208:	4b17      	ldr	r3, [pc, #92]	; (3a268 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   3a20a:	4a18      	ldr	r2, [pc, #96]	; (3a26c <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   3a20c:	7819      	ldrb	r1, [r3, #0]
   3a20e:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   3a212:	5457      	strb	r7, [r2, r1]
   3a214:	4a16      	ldr	r2, [pc, #88]	; (3a270 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   3a216:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   3a21a:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   3a21e:	3101      	adds	r1, #1
	psrc += length - 1;
   3a220:	f106 020f 	add.w	r2, r6, #15
   3a224:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   3a226:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   3a22a:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   3a22c:	f812 1901 	ldrb.w	r1, [r2], #-1
   3a230:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   3a234:	42b2      	cmp	r2, r6
   3a236:	d1f9      	bne.n	3a22c <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   3a238:	2800      	cmp	r0, #0
   3a23a:	d093      	beq.n	3a164 <ll_rl_add+0xa4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   3a23c:	9b00      	ldr	r3, [sp, #0]
   3a23e:	1dd8      	adds	r0, r3, #7
   3a240:	4649      	mov	r1, r9
   3a242:	2210      	movs	r2, #16
   3a244:	4428      	add	r0, r5
   3a246:	f00a fe3b 	bl	44ec0 <memcpy>
		rl[i].local_rpa = NULL;
   3a24a:	eb0b 0207 	add.w	r2, fp, r7
   3a24e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   3a252:	2100      	movs	r1, #0
   3a254:	6251      	str	r1, [r2, #36]	; 0x24
   3a256:	e785      	b.n	3a164 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   3a258:	2012      	movs	r0, #18
}
   3a25a:	b005      	add	sp, #20
   3a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a260:	20002930 	.word	0x20002930
   3a264:	20002806 	.word	0x20002806
   3a268:	20003c6b 	.word	0x20003c6b
   3a26c:	200028a8 	.word	0x200028a8
   3a270:	200028b0 	.word	0x200028b0

0003a274 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   3a274:	2807      	cmp	r0, #7
   3a276:	d807      	bhi.n	3a288 <ull_filter_lll_lrpa_used+0x14>
   3a278:	4b04      	ldr	r3, [pc, #16]	; (3a28c <ull_filter_lll_lrpa_used+0x18>)
   3a27a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3a27e:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   3a282:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   3a286:	4770      	bx	lr
   3a288:	2000      	movs	r0, #0
}
   3a28a:	4770      	bx	lr
   3a28c:	20002930 	.word	0x20002930

0003a290 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   3a290:	4b02      	ldr	r3, [pc, #8]	; (3a29c <ull_filter_lll_irks_get+0xc>)
   3a292:	781b      	ldrb	r3, [r3, #0]
   3a294:	7003      	strb	r3, [r0, #0]
}
   3a296:	4802      	ldr	r0, [pc, #8]	; (3a2a0 <ull_filter_lll_irks_get+0x10>)
   3a298:	4770      	bx	lr
   3a29a:	bf00      	nop
   3a29c:	20003c6b 	.word	0x20003c6b
   3a2a0:	200028b0 	.word	0x200028b0

0003a2a4 <ull_filter_lll_rl_irk_idx>:
{
   3a2a4:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a2a6:	4b20      	ldr	r3, [pc, #128]	; (3a328 <ull_filter_lll_rl_irk_idx+0x84>)
   3a2a8:	781b      	ldrb	r3, [r3, #0]
   3a2aa:	4283      	cmp	r3, r0
{
   3a2ac:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a2ae:	d90c      	bls.n	3a2ca <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   3a2b0:	4b1e      	ldr	r3, [pc, #120]	; (3a32c <ull_filter_lll_rl_irk_idx+0x88>)
   3a2b2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3a2b4:	2c07      	cmp	r4, #7
   3a2b6:	d819      	bhi.n	3a2ec <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   3a2b8:	4b1d      	ldr	r3, [pc, #116]	; (3a330 <ull_filter_lll_rl_irk_idx+0x8c>)
   3a2ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3a2be:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3a2c2:	07db      	lsls	r3, r3, #31
   3a2c4:	d520      	bpl.n	3a308 <ull_filter_lll_rl_irk_idx+0x64>
}
   3a2c6:	4620      	mov	r0, r4
   3a2c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a2ca:	4a1a      	ldr	r2, [pc, #104]	; (3a334 <ull_filter_lll_rl_irk_idx+0x90>)
   3a2cc:	491a      	ldr	r1, [pc, #104]	; (3a338 <ull_filter_lll_rl_irk_idx+0x94>)
   3a2ce:	481b      	ldr	r0, [pc, #108]	; (3a33c <ull_filter_lll_rl_irk_idx+0x98>)
   3a2d0:	f240 336d 	movw	r3, #877	; 0x36d
   3a2d4:	f008 fd1c 	bl	42d10 <printk>
   3a2d8:	4040      	eors	r0, r0
   3a2da:	f380 8811 	msr	BASEPRI, r0
   3a2de:	f04f 0003 	mov.w	r0, #3
   3a2e2:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   3a2e4:	4b11      	ldr	r3, [pc, #68]	; (3a32c <ull_filter_lll_rl_irk_idx+0x88>)
   3a2e6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3a2e8:	2c07      	cmp	r4, #7
   3a2ea:	d9e5      	bls.n	3a2b8 <ull_filter_lll_rl_irk_idx+0x14>
   3a2ec:	4a11      	ldr	r2, [pc, #68]	; (3a334 <ull_filter_lll_rl_irk_idx+0x90>)
   3a2ee:	4914      	ldr	r1, [pc, #80]	; (3a340 <ull_filter_lll_rl_irk_idx+0x9c>)
   3a2f0:	4812      	ldr	r0, [pc, #72]	; (3a33c <ull_filter_lll_rl_irk_idx+0x98>)
   3a2f2:	f240 336f 	movw	r3, #879	; 0x36f
   3a2f6:	f008 fd0b 	bl	42d10 <printk>
   3a2fa:	4040      	eors	r0, r0
   3a2fc:	f380 8811 	msr	BASEPRI, r0
   3a300:	f04f 0003 	mov.w	r0, #3
   3a304:	df02      	svc	2
   3a306:	e7d7      	b.n	3a2b8 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   3a308:	4a0a      	ldr	r2, [pc, #40]	; (3a334 <ull_filter_lll_rl_irk_idx+0x90>)
   3a30a:	490e      	ldr	r1, [pc, #56]	; (3a344 <ull_filter_lll_rl_irk_idx+0xa0>)
   3a30c:	480b      	ldr	r0, [pc, #44]	; (3a33c <ull_filter_lll_rl_irk_idx+0x98>)
   3a30e:	f44f 735c 	mov.w	r3, #880	; 0x370
   3a312:	f008 fcfd 	bl	42d10 <printk>
   3a316:	4040      	eors	r0, r0
   3a318:	f380 8811 	msr	BASEPRI, r0
   3a31c:	f04f 0003 	mov.w	r0, #3
   3a320:	df02      	svc	2
}
   3a322:	4620      	mov	r0, r4
   3a324:	bd10      	pop	{r4, pc}
   3a326:	bf00      	nop
   3a328:	20003c6b 	.word	0x20003c6b
   3a32c:	200028a8 	.word	0x200028a8
   3a330:	20002930 	.word	0x20002930
   3a334:	0004ab94 	.word	0x0004ab94
   3a338:	0004ad80 	.word	0x0004ad80
   3a33c:	0004a4a0 	.word	0x0004a4a0
   3a340:	0004ada0 	.word	0x0004ada0
   3a344:	0004ad74 	.word	0x0004ad74

0003a348 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   3a348:	2807      	cmp	r0, #7
   3a34a:	d823      	bhi.n	3a394 <ull_filter_lll_irk_in_fal+0x4c>
{
   3a34c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   3a34e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3a352:	4e11      	ldr	r6, [pc, #68]	; (3a398 <ull_filter_lll_irk_in_fal+0x50>)
   3a354:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3a358:	07db      	lsls	r3, r3, #31
   3a35a:	4604      	mov	r4, r0
   3a35c:	ea4f 0580 	mov.w	r5, r0, lsl #2
   3a360:	d505      	bpl.n	3a36e <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   3a362:	442c      	add	r4, r5
   3a364:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   3a368:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3a36c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3a36e:	4a0b      	ldr	r2, [pc, #44]	; (3a39c <ull_filter_lll_irk_in_fal+0x54>)
   3a370:	490b      	ldr	r1, [pc, #44]	; (3a3a0 <ull_filter_lll_irk_in_fal+0x58>)
   3a372:	480c      	ldr	r0, [pc, #48]	; (3a3a4 <ull_filter_lll_irk_in_fal+0x5c>)
   3a374:	f240 337b 	movw	r3, #891	; 0x37b
   3a378:	f008 fcca 	bl	42d10 <printk>
   3a37c:	4040      	eors	r0, r0
   3a37e:	f380 8811 	msr	BASEPRI, r0
   3a382:	f04f 0003 	mov.w	r0, #3
   3a386:	df02      	svc	2
	return rl[rl_idx].fal;
   3a388:	442c      	add	r4, r5
   3a38a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   3a38e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3a392:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3a394:	2000      	movs	r0, #0
}
   3a396:	4770      	bx	lr
   3a398:	20002930 	.word	0x20002930
   3a39c:	0004ab94 	.word	0x0004ab94
   3a3a0:	0004abe4 	.word	0x0004abe4
   3a3a4:	0004a4a0 	.word	0x0004a4a0

0003a3a8 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   3a3a8:	7813      	ldrb	r3, [r2, #0]
   3a3aa:	2bff      	cmp	r3, #255	; 0xff
   3a3ac:	d11b      	bne.n	3a3e6 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   3a3ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a3b2:	4d19      	ldr	r5, [pc, #100]	; (3a418 <ull_filter_lll_rl_addr_allowed+0x70>)
   3a3b4:	4604      	mov	r4, r0
   3a3b6:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   3a3b8:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3a3ba:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3a3be:	b2df      	uxtb	r7, r3
   3a3c0:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   3a3c4:	f01c 0001 	ands.w	r0, ip, #1
   3a3c8:	ea4f 0683 	mov.w	r6, r3, lsl #2
   3a3cc:	d003      	beq.n	3a3d6 <ull_filter_lll_rl_addr_allowed+0x2e>
   3a3ce:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   3a3d2:	45a4      	cmp	ip, r4
   3a3d4:	d009      	beq.n	3a3ea <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3a3d6:	3301      	adds	r3, #1
   3a3d8:	2b08      	cmp	r3, #8
   3a3da:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   3a3de:	d1ec      	bne.n	3a3ba <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   3a3e0:	2001      	movs	r0, #1
}
   3a3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   3a3e6:	2001      	movs	r0, #1
}
   3a3e8:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a3ea:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3a3ee:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a3f0:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   3a3f4:	f81c af01 	ldrb.w	sl, [ip, #1]!
   3a3f8:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   3a3fc:	45ca      	cmp	sl, r9
   3a3fe:	d1ea      	bne.n	3a3d6 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a400:	45dc      	cmp	ip, fp
   3a402:	d1f7      	bne.n	3a3f4 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   3a404:	4433      	add	r3, r6
				*rl_idx = i;
   3a406:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   3a408:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3a40c:	075a      	lsls	r2, r3, #29
   3a40e:	d5e8      	bpl.n	3a3e2 <ull_filter_lll_rl_addr_allowed+0x3a>
   3a410:	f3c3 1000 	ubfx	r0, r3, #4, #1
   3a414:	e7e5      	b.n	3a3e2 <ull_filter_lll_rl_addr_allowed+0x3a>
   3a416:	bf00      	nop
   3a418:	20002930 	.word	0x20002930

0003a41c <ull_filter_lll_rl_enabled>:
	return rl_enable;
   3a41c:	4b02      	ldr	r3, [pc, #8]	; (3a428 <ull_filter_lll_rl_enabled+0xc>)
   3a41e:	7818      	ldrb	r0, [r3, #0]
}
   3a420:	3800      	subs	r0, #0
   3a422:	bf18      	it	ne
   3a424:	2001      	movne	r0, #1
   3a426:	4770      	bx	lr
   3a428:	20003c6c 	.word	0x20003c6c

0003a42c <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3a42c:	4668      	mov	r0, sp
   3a42e:	f020 0107 	bic.w	r1, r0, #7
   3a432:	468d      	mov	sp, r1
   3a434:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3a436:	f002 f875 	bl	3c524 <isr_radio>

	ISR_DIRECT_PM();
   3a43a:	f7ef fff7 	bl	2a42c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3a43e:	f7f0 f8c7 	bl	2a5d0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3a442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3a446:	4685      	mov	sp, r0
   3a448:	4770      	bx	lr
   3a44a:	bf00      	nop

0003a44c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   3a44c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   3a44e:	4b09      	ldr	r3, [pc, #36]	; (3a474 <rtc0_nrf5_isr+0x28>)
   3a450:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3a454:	b93a      	cbnz	r2, 3a466 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   3a456:	2001      	movs	r0, #1
   3a458:	f7f5 fcd0 	bl	2fdfc <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   3a45c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   3a460:	2002      	movs	r0, #2
   3a462:	f7f5 bccb 	b.w	2fdfc <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   3a466:	2000      	movs	r0, #0
   3a468:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   3a46c:	f7f6 fd42 	bl	30ef4 <ticker_trigger>
   3a470:	e7f1      	b.n	3a456 <rtc0_nrf5_isr+0xa>
   3a472:	bf00      	nop
   3a474:	4000b000 	.word	0x4000b000

0003a478 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   3a478:	2000      	movs	r0, #0
   3a47a:	f7f5 bcbf 	b.w	2fdfc <mayfly_run>
   3a47e:	bf00      	nop

0003a480 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   3a480:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3a482:	4b0e      	ldr	r3, [pc, #56]	; (3a4bc <ticker_stop_op_cb+0x3c>)
   3a484:	4c0e      	ldr	r4, [pc, #56]	; (3a4c0 <ticker_stop_op_cb+0x40>)
   3a486:	781a      	ldrb	r2, [r3, #0]
   3a488:	7823      	ldrb	r3, [r4, #0]
   3a48a:	429a      	cmp	r2, r3
   3a48c:	d006      	beq.n	3a49c <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   3a48e:	490d      	ldr	r1, [pc, #52]	; (3a4c4 <ticker_stop_op_cb+0x44>)
   3a490:	4a0d      	ldr	r2, [pc, #52]	; (3a4c8 <ticker_stop_op_cb+0x48>)
   3a492:	7809      	ldrb	r1, [r1, #0]
   3a494:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   3a496:	3301      	adds	r3, #1
   3a498:	7023      	strb	r3, [r4, #0]
}
   3a49a:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3a49c:	4a0b      	ldr	r2, [pc, #44]	; (3a4cc <ticker_stop_op_cb+0x4c>)
   3a49e:	490c      	ldr	r1, [pc, #48]	; (3a4d0 <ticker_stop_op_cb+0x50>)
   3a4a0:	480c      	ldr	r0, [pc, #48]	; (3a4d4 <ticker_stop_op_cb+0x54>)
   3a4a2:	f240 3301 	movw	r3, #769	; 0x301
   3a4a6:	f008 fc33 	bl	42d10 <printk>
   3a4aa:	4040      	eors	r0, r0
   3a4ac:	f380 8811 	msr	BASEPRI, r0
   3a4b0:	f04f 0003 	mov.w	r0, #3
   3a4b4:	df02      	svc	2
	preempt_stop_ack++;
   3a4b6:	7823      	ldrb	r3, [r4, #0]
   3a4b8:	e7e9      	b.n	3a48e <ticker_stop_op_cb+0xe>
   3a4ba:	bf00      	nop
   3a4bc:	20003c72 	.word	0x20003c72
   3a4c0:	20003c71 	.word	0x20003c71
   3a4c4:	20003c6d 	.word	0x20003c6d
   3a4c8:	20003c6e 	.word	0x20003c6e
   3a4cc:	0004ada8 	.word	0x0004ada8
   3a4d0:	0004adf0 	.word	0x0004adf0
   3a4d4:	0004a4a0 	.word	0x0004a4a0

0003a4d8 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   3a4d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3a4da:	b9f8      	cbnz	r0, 3a51c <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3a4dc:	4b1e      	ldr	r3, [pc, #120]	; (3a558 <ticker_start_op_cb+0x80>)
   3a4de:	4d1f      	ldr	r5, [pc, #124]	; (3a55c <ticker_start_op_cb+0x84>)
   3a4e0:	781a      	ldrb	r2, [r3, #0]
   3a4e2:	782b      	ldrb	r3, [r5, #0]
   3a4e4:	429a      	cmp	r2, r3
   3a4e6:	d027      	beq.n	3a538 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   3a4e8:	4a1d      	ldr	r2, [pc, #116]	; (3a560 <ticker_start_op_cb+0x88>)
   3a4ea:	4c1e      	ldr	r4, [pc, #120]	; (3a564 <ticker_start_op_cb+0x8c>)
   3a4ec:	7812      	ldrb	r2, [r2, #0]
   3a4ee:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   3a4f0:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   3a4f2:	4291      	cmp	r1, r2
	preempt_start_ack++;
   3a4f4:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   3a4f6:	b2d3      	uxtb	r3, r2
   3a4f8:	d00d      	beq.n	3a516 <ticker_start_op_cb+0x3e>
   3a4fa:	4a1b      	ldr	r2, [pc, #108]	; (3a568 <ticker_start_op_cb+0x90>)
   3a4fc:	491b      	ldr	r1, [pc, #108]	; (3a56c <ticker_start_op_cb+0x94>)
   3a4fe:	481c      	ldr	r0, [pc, #112]	; (3a570 <ticker_start_op_cb+0x98>)
   3a500:	f240 330f 	movw	r3, #783	; 0x30f
   3a504:	f008 fc04 	bl	42d10 <printk>
   3a508:	4040      	eors	r0, r0
   3a50a:	f380 8811 	msr	BASEPRI, r0
   3a50e:	f04f 0003 	mov.w	r0, #3
   3a512:	df02      	svc	2
	preempt_req++;
   3a514:	7823      	ldrb	r3, [r4, #0]
   3a516:	3301      	adds	r3, #1
   3a518:	7023      	strb	r3, [r4, #0]
}
   3a51a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3a51c:	4a12      	ldr	r2, [pc, #72]	; (3a568 <ticker_start_op_cb+0x90>)
   3a51e:	4915      	ldr	r1, [pc, #84]	; (3a574 <ticker_start_op_cb+0x9c>)
   3a520:	4813      	ldr	r0, [pc, #76]	; (3a570 <ticker_start_op_cb+0x98>)
   3a522:	f240 330a 	movw	r3, #778	; 0x30a
   3a526:	f008 fbf3 	bl	42d10 <printk>
   3a52a:	4040      	eors	r0, r0
   3a52c:	f380 8811 	msr	BASEPRI, r0
   3a530:	f04f 0003 	mov.w	r0, #3
   3a534:	df02      	svc	2
   3a536:	e7d1      	b.n	3a4dc <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3a538:	4a0b      	ldr	r2, [pc, #44]	; (3a568 <ticker_start_op_cb+0x90>)
   3a53a:	490f      	ldr	r1, [pc, #60]	; (3a578 <ticker_start_op_cb+0xa0>)
   3a53c:	480c      	ldr	r0, [pc, #48]	; (3a570 <ticker_start_op_cb+0x98>)
   3a53e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   3a542:	f008 fbe5 	bl	42d10 <printk>
   3a546:	4040      	eors	r0, r0
   3a548:	f380 8811 	msr	BASEPRI, r0
   3a54c:	f04f 0003 	mov.w	r0, #3
   3a550:	df02      	svc	2
	preempt_start_ack++;
   3a552:	782b      	ldrb	r3, [r5, #0]
   3a554:	e7c8      	b.n	3a4e8 <ticker_start_op_cb+0x10>
   3a556:	bf00      	nop
   3a558:	20003c70 	.word	0x20003c70
   3a55c:	20003c6f 	.word	0x20003c6f
   3a560:	20003c6d 	.word	0x20003c6d
   3a564:	20003c6e 	.word	0x20003c6e
   3a568:	0004ada8 	.word	0x0004ada8
   3a56c:	0004ae40 	.word	0x0004ae40
   3a570:	0004a4a0 	.word	0x0004a4a0
   3a574:	0004a974 	.word	0x0004a974
   3a578:	0004ae18 	.word	0x0004ae18

0003a57c <isr_race>:
	radio_status_reset();
   3a57c:	f002 b8e6 	b.w	3c74c <radio_status_reset>

0003a580 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   3a580:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   3a582:	4a18      	ldr	r2, [pc, #96]	; (3a5e4 <preempt_ticker_cb+0x64>)
   3a584:	4c18      	ldr	r4, [pc, #96]	; (3a5e8 <preempt_ticker_cb+0x68>)
   3a586:	7812      	ldrb	r2, [r2, #0]
   3a588:	7823      	ldrb	r3, [r4, #0]
   3a58a:	429a      	cmp	r2, r3
   3a58c:	d01b      	beq.n	3a5c6 <preempt_ticker_cb+0x46>
	preempt_ack++;
   3a58e:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   3a590:	4b16      	ldr	r3, [pc, #88]	; (3a5ec <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   3a592:	3101      	adds	r1, #1
   3a594:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3a596:	2200      	movs	r2, #0
	preempt_ack++;
   3a598:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   3a59a:	9903      	ldr	r1, [sp, #12]
   3a59c:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3a59e:	2001      	movs	r0, #1
   3a5a0:	4611      	mov	r1, r2
   3a5a2:	f7f5 fbd3 	bl	2fd4c <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   3a5a6:	b900      	cbnz	r0, 3a5aa <preempt_ticker_cb+0x2a>
}
   3a5a8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   3a5aa:	4a11      	ldr	r2, [pc, #68]	; (3a5f0 <preempt_ticker_cb+0x70>)
   3a5ac:	4911      	ldr	r1, [pc, #68]	; (3a5f4 <preempt_ticker_cb+0x74>)
   3a5ae:	4812      	ldr	r0, [pc, #72]	; (3a5f8 <preempt_ticker_cb+0x78>)
   3a5b0:	f240 3376 	movw	r3, #886	; 0x376
   3a5b4:	f008 fbac 	bl	42d10 <printk>
   3a5b8:	4040      	eors	r0, r0
   3a5ba:	f380 8811 	msr	BASEPRI, r0
   3a5be:	f04f 0003 	mov.w	r0, #3
   3a5c2:	df02      	svc	2
}
   3a5c4:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   3a5c6:	4a0a      	ldr	r2, [pc, #40]	; (3a5f0 <preempt_ticker_cb+0x70>)
   3a5c8:	490c      	ldr	r1, [pc, #48]	; (3a5fc <preempt_ticker_cb+0x7c>)
   3a5ca:	480b      	ldr	r0, [pc, #44]	; (3a5f8 <preempt_ticker_cb+0x78>)
   3a5cc:	f44f 735c 	mov.w	r3, #880	; 0x370
   3a5d0:	f008 fb9e 	bl	42d10 <printk>
   3a5d4:	4040      	eors	r0, r0
   3a5d6:	f380 8811 	msr	BASEPRI, r0
   3a5da:	f04f 0003 	mov.w	r0, #3
   3a5de:	df02      	svc	2
   3a5e0:	e7d5      	b.n	3a58e <preempt_ticker_cb+0xe>
   3a5e2:	bf00      	nop
   3a5e4:	20003c6e 	.word	0x20003c6e
   3a5e8:	20003c6d 	.word	0x20003c6d
   3a5ec:	200007c0 	.word	0x200007c0
   3a5f0:	0004ada8 	.word	0x0004ada8
   3a5f4:	0004a738 	.word	0x0004a738
   3a5f8:	0004a4a0 	.word	0x0004a4a0
   3a5fc:	0004ae5c 	.word	0x0004ae5c

0003a600 <preempt_ticker_stop>:
{
   3a600:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a602:	4917      	ldr	r1, [pc, #92]	; (3a660 <preempt_ticker_stop+0x60>)
   3a604:	4a17      	ldr	r2, [pc, #92]	; (3a664 <preempt_ticker_stop+0x64>)
   3a606:	780b      	ldrb	r3, [r1, #0]
   3a608:	7812      	ldrb	r2, [r2, #0]
   3a60a:	429a      	cmp	r2, r3
{
   3a60c:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a60e:	d122      	bne.n	3a656 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   3a610:	4b15      	ldr	r3, [pc, #84]	; (3a668 <preempt_ticker_stop+0x68>)
   3a612:	4a16      	ldr	r2, [pc, #88]	; (3a66c <preempt_ticker_stop+0x6c>)
   3a614:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a616:	7812      	ldrb	r2, [r2, #0]
   3a618:	429a      	cmp	r2, r3
   3a61a:	d01c      	beq.n	3a656 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   3a61c:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a61e:	4b14      	ldr	r3, [pc, #80]	; (3a670 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   3a620:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a622:	2200      	movs	r2, #0
	preempt_stop_req++;
   3a624:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a626:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   3a628:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a62a:	4611      	mov	r1, r2
   3a62c:	4610      	mov	r0, r2
   3a62e:	f7f6 fd59 	bl	310e4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3a632:	4604      	mov	r4, r0
   3a634:	b178      	cbz	r0, 3a656 <preempt_ticker_stop+0x56>
   3a636:	2802      	cmp	r0, #2
   3a638:	d00e      	beq.n	3a658 <preempt_ticker_stop+0x58>
   3a63a:	4a0e      	ldr	r2, [pc, #56]	; (3a674 <preempt_ticker_stop+0x74>)
   3a63c:	490e      	ldr	r1, [pc, #56]	; (3a678 <preempt_ticker_stop+0x78>)
   3a63e:	480f      	ldr	r0, [pc, #60]	; (3a67c <preempt_ticker_stop+0x7c>)
   3a640:	f240 3362 	movw	r3, #866	; 0x362
   3a644:	f008 fb64 	bl	42d10 <printk>
   3a648:	4040      	eors	r0, r0
   3a64a:	f380 8811 	msr	BASEPRI, r0
   3a64e:	f04f 0003 	mov.w	r0, #3
   3a652:	df02      	svc	2
   3a654:	e000      	b.n	3a658 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   3a656:	2400      	movs	r4, #0
}
   3a658:	4620      	mov	r0, r4
   3a65a:	b002      	add	sp, #8
   3a65c:	bd10      	pop	{r4, pc}
   3a65e:	bf00      	nop
   3a660:	20003c72 	.word	0x20003c72
   3a664:	20003c71 	.word	0x20003c71
   3a668:	20003c6d 	.word	0x20003c6d
   3a66c:	20003c6e 	.word	0x20003c6e
   3a670:	0003a481 	.word	0x0003a481
   3a674:	0004ada8 	.word	0x0004ada8
   3a678:	0004a80c 	.word	0x0004a80c
   3a67c:	0004a4a0 	.word	0x0004a4a0

0003a680 <preempt_ticker_start>:
{
   3a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   3a684:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   3a686:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   3a68a:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3a68c:	4b2a      	ldr	r3, [pc, #168]	; (3a738 <preempt_ticker_start+0xb8>)
   3a68e:	4f2b      	ldr	r7, [pc, #172]	; (3a73c <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   3a690:	68d6      	ldr	r6, [r2, #12]
{
   3a692:	460d      	mov	r5, r1
   3a694:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   3a696:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   3a698:	6890      	ldr	r0, [r2, #8]
   3a69a:	6853      	ldr	r3, [r2, #4]
   3a69c:	4298      	cmp	r0, r3
   3a69e:	bf2c      	ite	cs
   3a6a0:	ebc6 0600 	rsbcs	r6, r6, r0
   3a6a4:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   3a6a8:	783b      	ldrb	r3, [r7, #0]
   3a6aa:	4299      	cmp	r1, r3
{
   3a6ac:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   3a6ae:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   3a6b2:	d033      	beq.n	3a71c <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   3a6b4:	2c00      	cmp	r4, #0
   3a6b6:	d03a      	beq.n	3a72e <preempt_ticker_start+0xae>
   3a6b8:	7f23      	ldrb	r3, [r4, #28]
   3a6ba:	079b      	lsls	r3, r3, #30
   3a6bc:	d437      	bmi.n	3a72e <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   3a6be:	f8df a080 	ldr.w	sl, [pc, #128]	; 3a740 <preempt_ticker_start+0xc0>
   3a6c2:	f8da 0000 	ldr.w	r0, [sl]
   3a6c6:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   3a6ca:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   3a6ce:	d022      	beq.n	3a716 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   3a6d0:	f7ff ff96 	bl	3a600 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   3a6d4:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3a6d6:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   3a6d8:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   3a6dc:	f043 0302 	orr.w	r3, r3, #2
   3a6e0:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3a6e2:	4620      	mov	r0, r4
   3a6e4:	69a3      	ldr	r3, [r4, #24]
   3a6e6:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a6e8:	4b16      	ldr	r3, [pc, #88]	; (3a744 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   3a6ea:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a6ec:	9600      	str	r6, [sp, #0]
   3a6ee:	e9cd 3507 	strd	r3, r5, [sp, #28]
   3a6f2:	4b15      	ldr	r3, [pc, #84]	; (3a748 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   3a6f4:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a6f8:	2200      	movs	r2, #0
	preempt_start_req++;
   3a6fa:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a6fc:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   3a700:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a702:	e9cd 2203 	strd	r2, r2, [sp, #12]
   3a706:	e9cd 2201 	strd	r2, r2, [sp, #4]
   3a70a:	4643      	mov	r3, r8
   3a70c:	4611      	mov	r1, r2
   3a70e:	4610      	mov	r0, r2
	preempt_start_req++;
   3a710:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a712:	f7f6 fc5d 	bl	30fd0 <ticker_start>
}
   3a716:	b00a      	add	sp, #40	; 0x28
   3a718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   3a71c:	4b0b      	ldr	r3, [pc, #44]	; (3a74c <preempt_ticker_start+0xcc>)
   3a71e:	4a0c      	ldr	r2, [pc, #48]	; (3a750 <preempt_ticker_start+0xd0>)
   3a720:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3a722:	7812      	ldrb	r2, [r2, #0]
   3a724:	429a      	cmp	r2, r3
   3a726:	d1c5      	bne.n	3a6b4 <preempt_ticker_start+0x34>
   3a728:	f8df a014 	ldr.w	sl, [pc, #20]	; 3a740 <preempt_ticker_start+0xc0>
   3a72c:	e7dc      	b.n	3a6e8 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   3a72e:	2000      	movs	r0, #0
}
   3a730:	b00a      	add	sp, #40	; 0x28
   3a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a736:	bf00      	nop
   3a738:	20003c6f 	.word	0x20003c6f
   3a73c:	20003c70 	.word	0x20003c70
   3a740:	20002ac0 	.word	0x20002ac0
   3a744:	0003a4d9 	.word	0x0003a4d9
   3a748:	0003a581 	.word	0x0003a581
   3a74c:	20003c6d 	.word	0x20003c6d
   3a750:	20003c6e 	.word	0x20003c6e

0003a754 <preempt>:

static void preempt(void *param)
{
   3a754:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   3a756:	4e4b      	ldr	r6, [pc, #300]	; (3a884 <preempt+0x130>)
   3a758:	68b3      	ldr	r3, [r6, #8]
{
   3a75a:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   3a75c:	b1b3      	cbz	r3, 3a78c <preempt+0x38>
   3a75e:	6833      	ldr	r3, [r6, #0]
   3a760:	b1a3      	cbz	r3, 3a78c <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   3a762:	23ff      	movs	r3, #255	; 0xff
   3a764:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   3a766:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   3a76a:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   3a76e:	f7f8 ffbb 	bl	336e8 <ull_prepare_dequeue_iter>
	if (!next) {
   3a772:	4601      	mov	r1, r0
   3a774:	b150      	cbz	r0, 3a78c <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   3a776:	7f0b      	ldrb	r3, [r1, #28]
   3a778:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   3a77c:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   3a780:	d006      	beq.n	3a790 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   3a782:	f7f8 ffb1 	bl	336e8 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   3a786:	4601      	mov	r1, r0
   3a788:	2800      	cmp	r0, #0
   3a78a:	d1f4      	bne.n	3a776 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   3a78c:	b009      	add	sp, #36	; 0x24
   3a78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   3a790:	428d      	cmp	r5, r1
   3a792:	d126      	bne.n	3a7e2 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   3a794:	6873      	ldr	r3, [r6, #4]
   3a796:	6831      	ldr	r1, [r6, #0]
   3a798:	68e8      	ldr	r0, [r5, #12]
   3a79a:	aa03      	add	r2, sp, #12
   3a79c:	4798      	blx	r3
	if (!err) {
   3a79e:	4607      	mov	r7, r0
   3a7a0:	b1b0      	cbz	r0, 3a7d0 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   3a7a2:	68b3      	ldr	r3, [r6, #8]
   3a7a4:	6831      	ldr	r1, [r6, #0]
   3a7a6:	4620      	mov	r0, r4
   3a7a8:	4798      	blx	r3
	if (err == -EAGAIN) {
   3a7aa:	f117 0f0b 	cmn.w	r7, #11
   3a7ae:	d02c      	beq.n	3a80a <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   3a7b0:	378c      	adds	r7, #140	; 0x8c
   3a7b2:	d0eb      	beq.n	3a78c <preempt+0x38>
   3a7b4:	4a34      	ldr	r2, [pc, #208]	; (3a888 <preempt+0x134>)
   3a7b6:	4935      	ldr	r1, [pc, #212]	; (3a88c <preempt+0x138>)
   3a7b8:	4835      	ldr	r0, [pc, #212]	; (3a890 <preempt+0x13c>)
   3a7ba:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   3a7be:	f008 faa7 	bl	42d10 <printk>
   3a7c2:	4040      	eors	r0, r0
   3a7c4:	f380 8811 	msr	BASEPRI, r0
   3a7c8:	f04f 0003 	mov.w	r0, #3
   3a7cc:	df02      	svc	2
   3a7ce:	e7dd      	b.n	3a78c <preempt+0x38>
		next->is_aborted = 1;
   3a7d0:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3a7d2:	69aa      	ldr	r2, [r5, #24]
   3a7d4:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   3a7d6:	f043 0302 	orr.w	r3, r3, #2
   3a7da:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3a7dc:	4628      	mov	r0, r5
   3a7de:	4790      	blx	r2
		return;
   3a7e0:	e7d4      	b.n	3a78c <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   3a7e2:	4620      	mov	r0, r4
   3a7e4:	f7ff ff4c 	bl	3a680 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3a7e8:	f030 0302 	bics.w	r3, r0, #2
   3a7ec:	d0ce      	beq.n	3a78c <preempt+0x38>
   3a7ee:	4a26      	ldr	r2, [pc, #152]	; (3a888 <preempt+0x134>)
   3a7f0:	4928      	ldr	r1, [pc, #160]	; (3a894 <preempt+0x140>)
   3a7f2:	4827      	ldr	r0, [pc, #156]	; (3a890 <preempt+0x13c>)
   3a7f4:	f44f 7367 	mov.w	r3, #924	; 0x39c
   3a7f8:	f008 fa8a 	bl	42d10 <printk>
   3a7fc:	4040      	eors	r0, r0
   3a7fe:	f380 8811 	msr	BASEPRI, r0
   3a802:	f04f 0003 	mov.w	r0, #3
   3a806:	df02      	svc	2
   3a808:	e7c0      	b.n	3a78c <preempt+0x38>
		iter_idx = UINT8_MAX;
   3a80a:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3a80c:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   3a810:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3a814:	f7f8 ff68 	bl	336e8 <ull_prepare_dequeue_iter>
		while (iter) {
   3a818:	b928      	cbnz	r0, 3a826 <preempt+0xd2>
   3a81a:	e013      	b.n	3a844 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   3a81c:	f10d 000b 	add.w	r0, sp, #11
   3a820:	f7f8 ff62 	bl	336e8 <ull_prepare_dequeue_iter>
		while (iter) {
   3a824:	b170      	cbz	r0, 3a844 <preempt+0xf0>
			if (!iter->is_aborted &&
   3a826:	7f03      	ldrb	r3, [r0, #28]
   3a828:	079a      	lsls	r2, r3, #30
   3a82a:	d4f7      	bmi.n	3a81c <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   3a82c:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   3a82e:	6831      	ldr	r1, [r6, #0]
   3a830:	4291      	cmp	r1, r2
   3a832:	d1f3      	bne.n	3a81c <preempt+0xc8>
				iter->is_aborted = 1;
   3a834:	f043 0302 	orr.w	r3, r3, #2
   3a838:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   3a83a:	6983      	ldr	r3, [r0, #24]
   3a83c:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   3a83e:	f88d 400b 	strb.w	r4, [sp, #11]
   3a842:	e7eb      	b.n	3a81c <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   3a844:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   3a846:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   3a848:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a84a:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   3a84c:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a850:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   3a852:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   3a854:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a856:	9b03      	ldr	r3, [sp, #12]
   3a858:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   3a85c:	aa04      	add	r2, sp, #16
   3a85e:	f7f8 ff05 	bl	3366c <ull_prepare_enqueue>
		LL_ASSERT(iter);
   3a862:	2800      	cmp	r0, #0
   3a864:	d192      	bne.n	3a78c <preempt+0x38>
   3a866:	4a08      	ldr	r2, [pc, #32]	; (3a888 <preempt+0x134>)
   3a868:	490b      	ldr	r1, [pc, #44]	; (3a898 <preempt+0x144>)
   3a86a:	4809      	ldr	r0, [pc, #36]	; (3a890 <preempt+0x13c>)
   3a86c:	f240 33ce 	movw	r3, #974	; 0x3ce
   3a870:	f008 fa4e 	bl	42d10 <printk>
   3a874:	4040      	eors	r0, r0
   3a876:	f380 8811 	msr	BASEPRI, r0
   3a87a:	f04f 0003 	mov.w	r0, #3
   3a87e:	df02      	svc	2
   3a880:	e784      	b.n	3a78c <preempt+0x38>
   3a882:	bf00      	nop
   3a884:	20002aac 	.word	0x20002aac
   3a888:	0004ada8 	.word	0x0004ada8
   3a88c:	0004ae80 	.word	0x0004ae80
   3a890:	0004a4a0 	.word	0x0004a4a0
   3a894:	0004a80c 	.word	0x0004a80c
   3a898:	0004ae78 	.word	0x0004ae78

0003a89c <lll_init>:
{
   3a89c:	b510      	push	{r4, lr}
   3a89e:	4816      	ldr	r0, [pc, #88]	; (3a8f8 <lll_init+0x5c>)
   3a8a0:	f006 fc74 	bl	4118c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   3a8a4:	4b15      	ldr	r3, [pc, #84]	; (3a8fc <lll_init+0x60>)
   3a8a6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   3a8a8:	b310      	cbz	r0, 3a8f0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   3a8aa:	4b15      	ldr	r3, [pc, #84]	; (3a900 <lll_init+0x64>)
   3a8ac:	2400      	movs	r4, #0
   3a8ae:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   3a8b0:	f000 fafa 	bl	3aea8 <lll_clock_init>
	if (err < 0) {
   3a8b4:	2800      	cmp	r0, #0
   3a8b6:	db1a      	blt.n	3a8ee <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   3a8b8:	4621      	mov	r1, r4
   3a8ba:	2001      	movs	r0, #1
   3a8bc:	4622      	mov	r2, r4
   3a8be:	f7ef fd9d 	bl	2a3fc <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   3a8c2:	4622      	mov	r2, r4
   3a8c4:	200b      	movs	r0, #11
   3a8c6:	2101      	movs	r1, #1
   3a8c8:	f7ef fd98 	bl	2a3fc <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   3a8cc:	4622      	mov	r2, r4
   3a8ce:	4621      	mov	r1, r4
   3a8d0:	2018      	movs	r0, #24
   3a8d2:	f7ef fd93 	bl	2a3fc <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   3a8d6:	2001      	movs	r0, #1
   3a8d8:	f7ef fd5e 	bl	2a398 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   3a8dc:	200b      	movs	r0, #11
   3a8de:	f7ef fd5b 	bl	2a398 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   3a8e2:	2018      	movs	r0, #24
   3a8e4:	f7ef fd58 	bl	2a398 <arch_irq_enable>
	radio_setup();
   3a8e8:	f001 fe4c 	bl	3c584 <radio_setup>
	return 0;
   3a8ec:	4620      	mov	r0, r4
}
   3a8ee:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3a8f0:	f06f 0012 	mvn.w	r0, #18
}
   3a8f4:	bd10      	pop	{r4, pc}
   3a8f6:	bf00      	nop
   3a8f8:	0004ae8c 	.word	0x0004ae8c
   3a8fc:	20002aa8 	.word	0x20002aa8
   3a900:	20002aac 	.word	0x20002aac

0003a904 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   3a904:	4a05      	ldr	r2, [pc, #20]	; (3a91c <lll_csrand_get+0x18>)
{
   3a906:	b410      	push	{r4}
   3a908:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   3a90a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   3a90c:	6884      	ldr	r4, [r0, #8]
   3a90e:	6824      	ldr	r4, [r4, #0]
   3a910:	b28a      	uxth	r2, r1
   3a912:	4619      	mov	r1, r3
   3a914:	4623      	mov	r3, r4
}
   3a916:	bc10      	pop	{r4}
   3a918:	4718      	bx	r3
   3a91a:	bf00      	nop
   3a91c:	20002aa8 	.word	0x20002aa8

0003a920 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3a920:	4b08      	ldr	r3, [pc, #32]	; (3a944 <lll_csrand_isr_get+0x24>)
{
   3a922:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3a924:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   3a926:	68ab      	ldr	r3, [r5, #8]
   3a928:	685c      	ldr	r4, [r3, #4]
   3a92a:	b13c      	cbz	r4, 3a93c <lll_csrand_isr_get+0x1c>
   3a92c:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   3a92e:	46a4      	mov	ip, r4
   3a930:	4601      	mov	r1, r0
   3a932:	b292      	uxth	r2, r2
   3a934:	4628      	mov	r0, r5
   3a936:	2300      	movs	r3, #0
}
   3a938:	bc30      	pop	{r4, r5}
   3a93a:	4760      	bx	ip
   3a93c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a940:	bc30      	pop	{r4, r5}
   3a942:	4770      	bx	lr
   3a944:	20002aa8 	.word	0x20002aa8

0003a948 <lll_rand_isr_get>:
   3a948:	4b08      	ldr	r3, [pc, #32]	; (3a96c <lll_rand_isr_get+0x24>)
   3a94a:	b430      	push	{r4, r5}
   3a94c:	681d      	ldr	r5, [r3, #0]
   3a94e:	68ab      	ldr	r3, [r5, #8]
   3a950:	685c      	ldr	r4, [r3, #4]
   3a952:	b13c      	cbz	r4, 3a964 <lll_rand_isr_get+0x1c>
   3a954:	460a      	mov	r2, r1
   3a956:	46a4      	mov	ip, r4
   3a958:	4601      	mov	r1, r0
   3a95a:	b292      	uxth	r2, r2
   3a95c:	4628      	mov	r0, r5
   3a95e:	2300      	movs	r3, #0
   3a960:	bc30      	pop	{r4, r5}
   3a962:	4760      	bx	ip
   3a964:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a968:	bc30      	pop	{r4, r5}
   3a96a:	4770      	bx	lr
   3a96c:	20002aa8 	.word	0x20002aa8

0003a970 <lll_reset>:
}
   3a970:	2000      	movs	r0, #0
   3a972:	4770      	bx	lr

0003a974 <lll_disable>:
{
   3a974:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   3a976:	4604      	mov	r4, r0
{
   3a978:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   3a97a:	b378      	cbz	r0, 3a9dc <lll_disable+0x68>
   3a97c:	4b23      	ldr	r3, [pc, #140]	; (3aa0c <lll_disable+0x98>)
   3a97e:	681a      	ldr	r2, [r3, #0]
   3a980:	4282      	cmp	r2, r0
   3a982:	d025      	beq.n	3a9d0 <lll_disable+0x5c>
		idx = UINT8_MAX;
   3a984:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   3a986:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   3a98a:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   3a98e:	f7f8 feab 	bl	336e8 <ull_prepare_dequeue_iter>
		while (next) {
   3a992:	b938      	cbnz	r0, 3a9a4 <lll_disable+0x30>
   3a994:	e01a      	b.n	3a9cc <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   3a996:	428c      	cmp	r4, r1
   3a998:	d00a      	beq.n	3a9b0 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   3a99a:	f10d 0007 	add.w	r0, sp, #7
   3a99e:	f7f8 fea3 	bl	336e8 <ull_prepare_dequeue_iter>
		while (next) {
   3a9a2:	b198      	cbz	r0, 3a9cc <lll_disable+0x58>
			if (!next->is_aborted &&
   3a9a4:	7f03      	ldrb	r3, [r0, #28]
   3a9a6:	079b      	lsls	r3, r3, #30
   3a9a8:	d4f7      	bmi.n	3a99a <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   3a9aa:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   3a9ac:	2c00      	cmp	r4, #0
   3a9ae:	d1f2      	bne.n	3a996 <lll_disable+0x22>
				next->is_aborted = 1;
   3a9b0:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3a9b2:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   3a9b4:	f043 0302 	orr.w	r3, r3, #2
   3a9b8:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3a9ba:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   3a9bc:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   3a9c0:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   3a9c4:	f7f8 fe90 	bl	336e8 <ull_prepare_dequeue_iter>
		while (next) {
   3a9c8:	2800      	cmp	r0, #0
   3a9ca:	d1eb      	bne.n	3a9a4 <lll_disable+0x30>
}
   3a9cc:	b003      	add	sp, #12
   3a9ce:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   3a9d0:	689b      	ldr	r3, [r3, #8]
   3a9d2:	b16b      	cbz	r3, 3a9f0 <lll_disable+0x7c>
   3a9d4:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   3a9d6:	2000      	movs	r0, #0
   3a9d8:	4798      	blx	r3
   3a9da:	e7d3      	b.n	3a984 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   3a9dc:	4a0b      	ldr	r2, [pc, #44]	; (3aa0c <lll_disable+0x98>)
   3a9de:	6893      	ldr	r3, [r2, #8]
   3a9e0:	2b00      	cmp	r3, #0
   3a9e2:	d0cf      	beq.n	3a984 <lll_disable+0x10>
   3a9e4:	6811      	ldr	r1, [r2, #0]
   3a9e6:	2900      	cmp	r1, #0
   3a9e8:	d0cc      	beq.n	3a984 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   3a9ea:	2000      	movs	r0, #0
   3a9ec:	4798      	blx	r3
   3a9ee:	e7c9      	b.n	3a984 <lll_disable+0x10>
			LL_ASSERT(!param);
   3a9f0:	4a07      	ldr	r2, [pc, #28]	; (3aa10 <lll_disable+0x9c>)
   3a9f2:	4908      	ldr	r1, [pc, #32]	; (3aa14 <lll_disable+0xa0>)
   3a9f4:	4808      	ldr	r0, [pc, #32]	; (3aa18 <lll_disable+0xa4>)
   3a9f6:	23fd      	movs	r3, #253	; 0xfd
   3a9f8:	f008 f98a 	bl	42d10 <printk>
   3a9fc:	4040      	eors	r0, r0
   3a9fe:	f380 8811 	msr	BASEPRI, r0
   3aa02:	f04f 0003 	mov.w	r0, #3
   3aa06:	df02      	svc	2
   3aa08:	e7bc      	b.n	3a984 <lll_disable+0x10>
   3aa0a:	bf00      	nop
   3aa0c:	20002aac 	.word	0x20002aac
   3aa10:	0004ada8 	.word	0x0004ada8
   3aa14:	0004ae90 	.word	0x0004ae90
   3aa18:	0004a4a0 	.word	0x0004a4a0

0003aa1c <lll_prepare_done>:
}
   3aa1c:	2000      	movs	r0, #0
   3aa1e:	4770      	bx	lr

0003aa20 <lll_done>:
{
   3aa20:	b538      	push	{r3, r4, r5, lr}
   3aa22:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   3aa24:	f7f8 fe52 	bl	336cc <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   3aa28:	b154      	cbz	r4, 3aa40 <lll_done+0x20>
   3aa2a:	b310      	cbz	r0, 3aa72 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   3aa2c:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   3aa2e:	2000      	movs	r0, #0
   3aa30:	f7f8 fe7a 	bl	33728 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   3aa34:	4620      	mov	r0, r4
   3aa36:	f7f8 fedb 	bl	337f0 <ull_event_done>
	LL_ASSERT(evdone);
   3aa3a:	b158      	cbz	r0, 3aa54 <lll_done+0x34>
}
   3aa3c:	2000      	movs	r0, #0
   3aa3e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   3aa40:	4d1a      	ldr	r5, [pc, #104]	; (3aaac <lll_done+0x8c>)
   3aa42:	68ab      	ldr	r3, [r5, #8]
   3aa44:	b31b      	cbz	r3, 3aa8e <lll_done+0x6e>
		param = event.curr.param;
   3aa46:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   3aa48:	2300      	movs	r3, #0
   3aa4a:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   3aa4c:	602b      	str	r3, [r5, #0]
		if (param) {
   3aa4e:	2c00      	cmp	r4, #0
   3aa50:	d1ec      	bne.n	3aa2c <lll_done+0xc>
   3aa52:	e7ec      	b.n	3aa2e <lll_done+0xe>
	LL_ASSERT(evdone);
   3aa54:	4a16      	ldr	r2, [pc, #88]	; (3aab0 <lll_done+0x90>)
   3aa56:	4917      	ldr	r1, [pc, #92]	; (3aab4 <lll_done+0x94>)
   3aa58:	4817      	ldr	r0, [pc, #92]	; (3aab8 <lll_done+0x98>)
   3aa5a:	f240 136d 	movw	r3, #365	; 0x16d
   3aa5e:	f008 f957 	bl	42d10 <printk>
   3aa62:	4040      	eors	r0, r0
   3aa64:	f380 8811 	msr	BASEPRI, r0
   3aa68:	f04f 0003 	mov.w	r0, #3
   3aa6c:	df02      	svc	2
}
   3aa6e:	2000      	movs	r0, #0
   3aa70:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   3aa72:	4a0f      	ldr	r2, [pc, #60]	; (3aab0 <lll_done+0x90>)
   3aa74:	4911      	ldr	r1, [pc, #68]	; (3aabc <lll_done+0x9c>)
   3aa76:	4810      	ldr	r0, [pc, #64]	; (3aab8 <lll_done+0x98>)
   3aa78:	f240 1337 	movw	r3, #311	; 0x137
   3aa7c:	f008 f948 	bl	42d10 <printk>
   3aa80:	4040      	eors	r0, r0
   3aa82:	f380 8811 	msr	BASEPRI, r0
   3aa86:	f04f 0003 	mov.w	r0, #3
   3aa8a:	df02      	svc	2
   3aa8c:	e7ce      	b.n	3aa2c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   3aa8e:	4a08      	ldr	r2, [pc, #32]	; (3aab0 <lll_done+0x90>)
   3aa90:	490b      	ldr	r1, [pc, #44]	; (3aac0 <lll_done+0xa0>)
   3aa92:	4809      	ldr	r0, [pc, #36]	; (3aab8 <lll_done+0x98>)
   3aa94:	f240 133d 	movw	r3, #317	; 0x13d
   3aa98:	f008 f93a 	bl	42d10 <printk>
   3aa9c:	4040      	eors	r0, r0
   3aa9e:	f380 8811 	msr	BASEPRI, r0
   3aaa2:	f04f 0003 	mov.w	r0, #3
   3aaa6:	df02      	svc	2
   3aaa8:	e7cd      	b.n	3aa46 <lll_done+0x26>
   3aaaa:	bf00      	nop
   3aaac:	20002aac 	.word	0x20002aac
   3aab0:	0004ada8 	.word	0x0004ada8
   3aab4:	0004aebc 	.word	0x0004aebc
   3aab8:	0004a4a0 	.word	0x0004a4a0
   3aabc:	0004ae98 	.word	0x0004ae98
   3aac0:	0004aea8 	.word	0x0004aea8

0003aac4 <lll_is_abort_cb>:
}
   3aac4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3aac8:	4770      	bx	lr
   3aaca:	bf00      	nop

0003aacc <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   3aacc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   3aad0:	2a00      	cmp	r2, #0
   3aad2:	db04      	blt.n	3aade <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   3aad4:	429a      	cmp	r2, r3
   3aad6:	bf38      	it	cc
   3aad8:	461a      	movcc	r2, r3
   3aada:	4610      	mov	r0, r2
}
   3aadc:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   3aade:	68c0      	ldr	r0, [r0, #12]
   3aae0:	4298      	cmp	r0, r3
   3aae2:	bf38      	it	cc
   3aae4:	4618      	movcc	r0, r3
   3aae6:	4770      	bx	lr

0003aae8 <lll_preempt_calc>:
{
   3aae8:	b510      	push	{r4, lr}
   3aaea:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   3aaec:	f7f6 fb3c 	bl	31168 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   3aaf0:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   3aaf2:	0203      	lsls	r3, r0, #8
   3aaf4:	d405      	bmi.n	3ab02 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   3aaf6:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   3aaf8:	2809      	cmp	r0, #9
   3aafa:	bf94      	ite	ls
   3aafc:	2000      	movls	r0, #0
   3aafe:	2001      	movhi	r0, #1
}
   3ab00:	bd10      	pop	{r4, pc}
		return 0;
   3ab02:	2000      	movs	r0, #0
}
   3ab04:	bd10      	pop	{r4, pc}
   3ab06:	bf00      	nop

0003ab08 <lll_chan_set>:
	switch (chan) {
   3ab08:	2826      	cmp	r0, #38	; 0x26
{
   3ab0a:	b510      	push	{r4, lr}
   3ab0c:	4604      	mov	r4, r0
	switch (chan) {
   3ab0e:	d01c      	beq.n	3ab4a <lll_chan_set+0x42>
   3ab10:	2827      	cmp	r0, #39	; 0x27
   3ab12:	d012      	beq.n	3ab3a <lll_chan_set+0x32>
   3ab14:	2825      	cmp	r0, #37	; 0x25
   3ab16:	d008      	beq.n	3ab2a <lll_chan_set+0x22>
		if (chan < 11) {
   3ab18:	280a      	cmp	r0, #10
   3ab1a:	d91e      	bls.n	3ab5a <lll_chan_set+0x52>
		} else if (chan < 40) {
   3ab1c:	2827      	cmp	r0, #39	; 0x27
   3ab1e:	d821      	bhi.n	3ab64 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   3ab20:	3003      	adds	r0, #3
   3ab22:	0040      	lsls	r0, r0, #1
   3ab24:	f001 fd8a 	bl	3c63c <radio_freq_chan_set>
   3ab28:	e002      	b.n	3ab30 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   3ab2a:	2002      	movs	r0, #2
   3ab2c:	f001 fd86 	bl	3c63c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3ab30:	4620      	mov	r0, r4
}
   3ab32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3ab36:	f001 bd87 	b.w	3c648 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   3ab3a:	2050      	movs	r0, #80	; 0x50
   3ab3c:	f001 fd7e 	bl	3c63c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3ab40:	4620      	mov	r0, r4
}
   3ab42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3ab46:	f001 bd7f 	b.w	3c648 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   3ab4a:	201a      	movs	r0, #26
   3ab4c:	f001 fd76 	bl	3c63c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3ab50:	4620      	mov	r0, r4
}
   3ab52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3ab56:	f001 bd77 	b.w	3c648 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   3ab5a:	3002      	adds	r0, #2
   3ab5c:	0040      	lsls	r0, r0, #1
   3ab5e:	f001 fd6d 	bl	3c63c <radio_freq_chan_set>
   3ab62:	e7e5      	b.n	3ab30 <lll_chan_set+0x28>
			LL_ASSERT(0);
   3ab64:	4a06      	ldr	r2, [pc, #24]	; (3ab80 <lll_chan_set+0x78>)
   3ab66:	4907      	ldr	r1, [pc, #28]	; (3ab84 <lll_chan_set+0x7c>)
   3ab68:	4807      	ldr	r0, [pc, #28]	; (3ab88 <lll_chan_set+0x80>)
   3ab6a:	f240 13df 	movw	r3, #479	; 0x1df
   3ab6e:	f008 f8cf 	bl	42d10 <printk>
   3ab72:	4040      	eors	r0, r0
   3ab74:	f380 8811 	msr	BASEPRI, r0
   3ab78:	f04f 0003 	mov.w	r0, #3
   3ab7c:	df02      	svc	2
   3ab7e:	e7d7      	b.n	3ab30 <lll_chan_set+0x28>
   3ab80:	0004ada8 	.word	0x0004ada8
   3ab84:	0004a500 	.word	0x0004a500
   3ab88:	0004a4a0 	.word	0x0004a4a0

0003ab8c <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   3ab8c:	f001 bdbc 	b.w	3c708 <radio_rx_ready_delay_get>

0003ab90 <lll_isr_tx_status_reset>:
{
   3ab90:	b508      	push	{r3, lr}
	radio_status_reset();
   3ab92:	f001 fddb 	bl	3c74c <radio_status_reset>
}
   3ab96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   3ab9a:	f001 bf29 	b.w	3c9f0 <radio_tmr_status_reset>
   3ab9e:	bf00      	nop

0003aba0 <lll_isr_rx_status_reset>:
{
   3aba0:	b508      	push	{r3, lr}
	radio_status_reset();
   3aba2:	f001 fdd3 	bl	3c74c <radio_status_reset>
	radio_tmr_status_reset();
   3aba6:	f001 ff23 	bl	3c9f0 <radio_tmr_status_reset>
}
   3abaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   3abae:	f001 becb 	b.w	3c948 <radio_rssi_status_reset>
   3abb2:	bf00      	nop

0003abb4 <lll_isr_status_reset>:
{
   3abb4:	b508      	push	{r3, lr}
	radio_status_reset();
   3abb6:	f001 fdc9 	bl	3c74c <radio_status_reset>
	radio_tmr_status_reset();
   3abba:	f001 ff19 	bl	3c9f0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   3abbe:	f001 feff 	bl	3c9c0 <radio_filter_status_reset>
	radio_ar_status_reset();
   3abc2:	f002 f8df 	bl	3cd84 <radio_ar_status_reset>
}
   3abc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   3abca:	f001 bebd 	b.w	3c948 <radio_rssi_status_reset>
   3abce:	bf00      	nop

0003abd0 <lll_isr_cleanup>:
{
   3abd0:	b508      	push	{r3, lr}
   3abd2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   3abd4:	4815      	ldr	r0, [pc, #84]	; (3ac2c <lll_isr_cleanup+0x5c>)
   3abd6:	f001 fcb5 	bl	3c544 <radio_isr_set>
	if (!radio_is_idle()) {
   3abda:	f001 fdd7 	bl	3c78c <radio_is_idle>
   3abde:	b150      	cbz	r0, 3abf6 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   3abe0:	f001 ffaa 	bl	3cb38 <radio_tmr_stop>
	err = lll_hfclock_off();
   3abe4:	f000 f9a4 	bl	3af30 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3abe8:	2800      	cmp	r0, #0
   3abea:	db0c      	blt.n	3ac06 <lll_isr_cleanup+0x36>
}
   3abec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3abf0:	2000      	movs	r0, #0
   3abf2:	f7ff bf15 	b.w	3aa20 <lll_done>
		radio_disable();
   3abf6:	f001 fd95 	bl	3c724 <radio_disable>
	radio_tmr_stop();
   3abfa:	f001 ff9d 	bl	3cb38 <radio_tmr_stop>
	err = lll_hfclock_off();
   3abfe:	f000 f997 	bl	3af30 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3ac02:	2800      	cmp	r0, #0
   3ac04:	daf2      	bge.n	3abec <lll_isr_cleanup+0x1c>
   3ac06:	4a0a      	ldr	r2, [pc, #40]	; (3ac30 <lll_isr_cleanup+0x60>)
   3ac08:	490a      	ldr	r1, [pc, #40]	; (3ac34 <lll_isr_cleanup+0x64>)
   3ac0a:	480b      	ldr	r0, [pc, #44]	; (3ac38 <lll_isr_cleanup+0x68>)
   3ac0c:	f240 2342 	movw	r3, #578	; 0x242
   3ac10:	f008 f87e 	bl	42d10 <printk>
   3ac14:	4040      	eors	r0, r0
   3ac16:	f380 8811 	msr	BASEPRI, r0
   3ac1a:	f04f 0003 	mov.w	r0, #3
   3ac1e:	df02      	svc	2
	lll_done(NULL);
   3ac20:	2000      	movs	r0, #0
}
   3ac22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3ac26:	f7ff befb 	b.w	3aa20 <lll_done>
   3ac2a:	bf00      	nop
   3ac2c:	0003a57d 	.word	0x0003a57d
   3ac30:	0004ada8 	.word	0x0004ada8
   3ac34:	0004aec4 	.word	0x0004aec4
   3ac38:	0004a4a0 	.word	0x0004a4a0

0003ac3c <lll_isr_abort>:
{
   3ac3c:	b510      	push	{r4, lr}
   3ac3e:	4604      	mov	r4, r0
	radio_status_reset();
   3ac40:	f001 fd84 	bl	3c74c <radio_status_reset>
	radio_tmr_status_reset();
   3ac44:	f001 fed4 	bl	3c9f0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   3ac48:	f001 feba 	bl	3c9c0 <radio_filter_status_reset>
	radio_ar_status_reset();
   3ac4c:	f002 f89a 	bl	3cd84 <radio_ar_status_reset>
	radio_rssi_status_reset();
   3ac50:	f001 fe7a 	bl	3c948 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   3ac54:	4620      	mov	r0, r4
}
   3ac56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3ac5a:	f7ff bfb9 	b.w	3abd0 <lll_isr_cleanup>
   3ac5e:	bf00      	nop

0003ac60 <lll_isr_early_abort>:
{
   3ac60:	b508      	push	{r3, lr}
   3ac62:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   3ac64:	4813      	ldr	r0, [pc, #76]	; (3acb4 <lll_isr_early_abort+0x54>)
   3ac66:	f001 fc6d 	bl	3c544 <radio_isr_set>
	if (!radio_is_idle()) {
   3ac6a:	f001 fd8f 	bl	3c78c <radio_is_idle>
   3ac6e:	b140      	cbz	r0, 3ac82 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   3ac70:	f000 f95e 	bl	3af30 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3ac74:	2800      	cmp	r0, #0
   3ac76:	db0a      	blt.n	3ac8e <lll_isr_early_abort+0x2e>
}
   3ac78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3ac7c:	2000      	movs	r0, #0
   3ac7e:	f7ff becf 	b.w	3aa20 <lll_done>
		radio_disable();
   3ac82:	f001 fd4f 	bl	3c724 <radio_disable>
	err = lll_hfclock_off();
   3ac86:	f000 f953 	bl	3af30 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3ac8a:	2800      	cmp	r0, #0
   3ac8c:	daf4      	bge.n	3ac78 <lll_isr_early_abort+0x18>
   3ac8e:	4a0a      	ldr	r2, [pc, #40]	; (3acb8 <lll_isr_early_abort+0x58>)
   3ac90:	490a      	ldr	r1, [pc, #40]	; (3acbc <lll_isr_early_abort+0x5c>)
   3ac92:	480b      	ldr	r0, [pc, #44]	; (3acc0 <lll_isr_early_abort+0x60>)
   3ac94:	f240 2351 	movw	r3, #593	; 0x251
   3ac98:	f008 f83a 	bl	42d10 <printk>
   3ac9c:	4040      	eors	r0, r0
   3ac9e:	f380 8811 	msr	BASEPRI, r0
   3aca2:	f04f 0003 	mov.w	r0, #3
   3aca6:	df02      	svc	2
	lll_done(NULL);
   3aca8:	2000      	movs	r0, #0
}
   3acaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3acae:	f7ff beb7 	b.w	3aa20 <lll_done>
   3acb2:	bf00      	nop
   3acb4:	0003a57d 	.word	0x0003a57d
   3acb8:	0004ada8 	.word	0x0004ada8
   3acbc:	0004aec4 	.word	0x0004aec4
   3acc0:	0004a4a0 	.word	0x0004a4a0

0003acc4 <lll_prepare_resolve>:
{
   3acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3acc8:	b084      	sub	sp, #16
   3acca:	4606      	mov	r6, r0
   3accc:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   3acce:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   3acd2:	23ff      	movs	r3, #255	; 0xff
{
   3acd4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   3acd8:	f88d 300f 	strb.w	r3, [sp, #15]
{
   3acdc:	460f      	mov	r7, r1
   3acde:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   3ace0:	f7f8 fd02 	bl	336e8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   3ace4:	4604      	mov	r4, r0
   3ace6:	b920      	cbnz	r0, 3acf2 <lll_prepare_resolve+0x2e>
   3ace8:	e032      	b.n	3ad50 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   3acea:	f7f8 fcfd 	bl	336e8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   3acee:	4604      	mov	r4, r0
   3acf0:	b370      	cbz	r0, 3ad50 <lll_prepare_resolve+0x8c>
   3acf2:	f894 c01c 	ldrb.w	ip, [r4, #28]
   3acf6:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   3acfa:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   3acfe:	d1f4      	bne.n	3acea <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   3ad00:	f8df a130 	ldr.w	sl, [pc, #304]	; 3ae34 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   3ad04:	f8da 3008 	ldr.w	r3, [sl, #8]
   3ad08:	bb4b      	cbnz	r3, 3ad5e <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   3ad0a:	f1b9 0f00 	cmp.w	r9, #0
   3ad0e:	d048      	beq.n	3ada2 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   3ad10:	f8cd 9000 	str.w	r9, [sp]
   3ad14:	4643      	mov	r3, r8
   3ad16:	462a      	mov	r2, r5
   3ad18:	4639      	mov	r1, r7
   3ad1a:	4630      	mov	r0, r6
   3ad1c:	f7f8 fca6 	bl	3366c <ull_prepare_enqueue>
		LL_ASSERT(next);
   3ad20:	b980      	cbnz	r0, 3ad44 <lll_prepare_resolve+0x80>
   3ad22:	4a45      	ldr	r2, [pc, #276]	; (3ae38 <lll_prepare_resolve+0x174>)
   3ad24:	4945      	ldr	r1, [pc, #276]	; (3ae3c <lll_prepare_resolve+0x178>)
   3ad26:	4846      	ldr	r0, [pc, #280]	; (3ae40 <lll_prepare_resolve+0x17c>)
   3ad28:	f240 238d 	movw	r3, #653	; 0x28d
   3ad2c:	f007 fff0 	bl	42d10 <printk>
   3ad30:	4040      	eors	r0, r0
   3ad32:	f380 8811 	msr	BASEPRI, r0
   3ad36:	f04f 0003 	mov.w	r0, #3
   3ad3a:	df02      	svc	2
   3ad3c:	2000      	movs	r0, #0
		if (is_resume) {
   3ad3e:	f1b9 0f00 	cmp.w	r9, #0
   3ad42:	d019      	beq.n	3ad78 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   3ad44:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   3ad48:	4620      	mov	r0, r4
   3ad4a:	b004      	add	sp, #16
   3ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   3ad50:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 3ae34 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   3ad54:	f8da 3008 	ldr.w	r3, [sl, #8]
   3ad58:	2b00      	cmp	r3, #0
   3ad5a:	d031      	beq.n	3adc0 <lll_prepare_resolve+0xfc>
   3ad5c:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   3ad5e:	f8cd 9000 	str.w	r9, [sp]
   3ad62:	4643      	mov	r3, r8
   3ad64:	462a      	mov	r2, r5
   3ad66:	4639      	mov	r1, r7
   3ad68:	4630      	mov	r0, r6
   3ad6a:	f7f8 fc7f 	bl	3366c <ull_prepare_enqueue>
		LL_ASSERT(next);
   3ad6e:	2800      	cmp	r0, #0
   3ad70:	d0d7      	beq.n	3ad22 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   3ad72:	f1b9 0f00 	cmp.w	r9, #0
   3ad76:	d1e5      	bne.n	3ad44 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   3ad78:	4601      	mov	r1, r0
   3ad7a:	4620      	mov	r0, r4
   3ad7c:	f7ff fc80 	bl	3a680 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3ad80:	f030 0302 	bics.w	r3, r0, #2
   3ad84:	d0de      	beq.n	3ad44 <lll_prepare_resolve+0x80>
   3ad86:	4a2c      	ldr	r2, [pc, #176]	; (3ae38 <lll_prepare_resolve+0x174>)
   3ad88:	492e      	ldr	r1, [pc, #184]	; (3ae44 <lll_prepare_resolve+0x180>)
   3ad8a:	482d      	ldr	r0, [pc, #180]	; (3ae40 <lll_prepare_resolve+0x17c>)
   3ad8c:	f44f 7326 	mov.w	r3, #664	; 0x298
   3ad90:	f007 ffbe 	bl	42d10 <printk>
   3ad94:	4040      	eors	r0, r0
   3ad96:	f380 8811 	msr	BASEPRI, r0
   3ad9a:	f04f 0003 	mov.w	r0, #3
   3ad9e:	df02      	svc	2
   3ada0:	e7d0      	b.n	3ad44 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   3ada2:	42ac      	cmp	r4, r5
   3ada4:	d00c      	beq.n	3adc0 <lll_prepare_resolve+0xfc>
   3ada6:	4a24      	ldr	r2, [pc, #144]	; (3ae38 <lll_prepare_resolve+0x174>)
   3ada8:	4927      	ldr	r1, [pc, #156]	; (3ae48 <lll_prepare_resolve+0x184>)
   3adaa:	4825      	ldr	r0, [pc, #148]	; (3ae40 <lll_prepare_resolve+0x17c>)
   3adac:	f240 23be 	movw	r3, #702	; 0x2be
   3adb0:	f007 ffae 	bl	42d10 <printk>
   3adb4:	4040      	eors	r0, r0
   3adb6:	f380 8811 	msr	BASEPRI, r0
   3adba:	f04f 0003 	mov.w	r0, #3
   3adbe:	df02      	svc	2
	event.curr.param = prepare_param->param;
   3adc0:	68eb      	ldr	r3, [r5, #12]
   3adc2:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   3adc6:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   3adca:	4628      	mov	r0, r5
   3adcc:	47c0      	blx	r8
   3adce:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   3add0:	f7ff fc16 	bl	3a600 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3add4:	f030 0302 	bics.w	r3, r0, #2
   3add8:	d11e      	bne.n	3ae18 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   3adda:	f10d 000f 	add.w	r0, sp, #15
   3adde:	f7f8 fc83 	bl	336e8 <ull_prepare_dequeue_iter>
		if (!p) {
   3ade2:	2800      	cmp	r0, #0
   3ade4:	d0b0      	beq.n	3ad48 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   3ade6:	7f03      	ldrb	r3, [r0, #28]
   3ade8:	f013 0303 	ands.w	r3, r3, #3
   3adec:	d1f5      	bne.n	3adda <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   3adee:	4601      	mov	r1, r0
   3adf0:	4618      	mov	r0, r3
   3adf2:	f7ff fc45 	bl	3a680 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3adf6:	f030 0302 	bics.w	r3, r0, #2
   3adfa:	d0a5      	beq.n	3ad48 <lll_prepare_resolve+0x84>
   3adfc:	4a0e      	ldr	r2, [pc, #56]	; (3ae38 <lll_prepare_resolve+0x174>)
   3adfe:	4911      	ldr	r1, [pc, #68]	; (3ae44 <lll_prepare_resolve+0x180>)
   3ae00:	480f      	ldr	r0, [pc, #60]	; (3ae40 <lll_prepare_resolve+0x17c>)
   3ae02:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   3ae06:	f007 ff83 	bl	42d10 <printk>
   3ae0a:	4040      	eors	r0, r0
   3ae0c:	f380 8811 	msr	BASEPRI, r0
   3ae10:	f04f 0003 	mov.w	r0, #3
   3ae14:	df02      	svc	2
   3ae16:	e797      	b.n	3ad48 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3ae18:	4a07      	ldr	r2, [pc, #28]	; (3ae38 <lll_prepare_resolve+0x174>)
   3ae1a:	490a      	ldr	r1, [pc, #40]	; (3ae44 <lll_prepare_resolve+0x180>)
   3ae1c:	4808      	ldr	r0, [pc, #32]	; (3ae40 <lll_prepare_resolve+0x17c>)
   3ae1e:	f240 23cb 	movw	r3, #715	; 0x2cb
   3ae22:	f007 ff75 	bl	42d10 <printk>
   3ae26:	4040      	eors	r0, r0
   3ae28:	f380 8811 	msr	BASEPRI, r0
   3ae2c:	f04f 0003 	mov.w	r0, #3
   3ae30:	df02      	svc	2
   3ae32:	e7d2      	b.n	3adda <lll_prepare_resolve+0x116>
   3ae34:	20002aac 	.word	0x20002aac
   3ae38:	0004ada8 	.word	0x0004ada8
   3ae3c:	0004aed0 	.word	0x0004aed0
   3ae40:	0004a4a0 	.word	0x0004a4a0
   3ae44:	0004a80c 	.word	0x0004a80c
   3ae48:	0004aed8 	.word	0x0004aed8

0003ae4c <clock_ready>:
	z_impl_k_sem_give(sem);
   3ae4c:	f101 0010 	add.w	r0, r1, #16
   3ae50:	f006 bd64 	b.w	4191c <z_impl_k_sem_give>

0003ae54 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   3ae54:	b570      	push	{r4, r5, r6, lr}
   3ae56:	4605      	mov	r5, r0
   3ae58:	b08a      	sub	sp, #40	; 0x28
   3ae5a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   3ae5c:	2201      	movs	r2, #1
   3ae5e:	2100      	movs	r1, #0
   3ae60:	a804      	add	r0, sp, #16
   3ae62:	f00e f81f 	bl	48ea4 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   3ae66:	4b0f      	ldr	r3, [pc, #60]	; (3aea4 <blocking_on+0x50>)
   3ae68:	9301      	str	r3, [sp, #4]
   3ae6a:	2600      	movs	r6, #0
   3ae6c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   3ae6e:	4669      	mov	r1, sp
   3ae70:	4628      	mov	r0, r5
   3ae72:	9603      	str	r6, [sp, #12]
   3ae74:	9302      	str	r3, [sp, #8]
   3ae76:	f007 ffe1 	bl	42e3c <onoff_request>
	if (err < 0) {
   3ae7a:	2800      	cmp	r0, #0
   3ae7c:	db10      	blt.n	3aea0 <blocking_on+0x4c>
   3ae7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3ae82:	4631      	mov	r1, r6
   3ae84:	f240 30e7 	movw	r0, #999	; 0x3e7
   3ae88:	fbe4 0103 	umlal	r0, r1, r4, r3
   3ae8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3ae90:	2300      	movs	r3, #0
   3ae92:	f7eb f935 	bl	26100 <__aeabi_uldivmod>
   3ae96:	4602      	mov	r2, r0
   3ae98:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   3ae9a:	a804      	add	r0, sp, #16
   3ae9c:	f006 fd64 	bl	41968 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   3aea0:	b00a      	add	sp, #40	; 0x28
   3aea2:	bd70      	pop	{r4, r5, r6, pc}
   3aea4:	0003ae4d 	.word	0x0003ae4d

0003aea8 <lll_clock_init>:

int lll_clock_init(void)
{
   3aea8:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3aeaa:	2001      	movs	r0, #1
   3aeac:	f003 fb2a 	bl	3e504 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   3aeb0:	4904      	ldr	r1, [pc, #16]	; (3aec4 <lll_clock_init+0x1c>)
   3aeb2:	2300      	movs	r3, #0
   3aeb4:	2401      	movs	r4, #1
   3aeb6:	608c      	str	r4, [r1, #8]
   3aeb8:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   3aeba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3aebe:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   3aec0:	f007 bfbc 	b.w	42e3c <onoff_request>
   3aec4:	20002ac8 	.word	0x20002ac8

0003aec8 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   3aec8:	4b0c      	ldr	r3, [pc, #48]	; (3aefc <lll_clock_wait+0x34>)
   3aeca:	781a      	ldrb	r2, [r3, #0]
   3aecc:	b10a      	cbz	r2, 3aed2 <lll_clock_wait+0xa>
		return 0;
   3aece:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   3aed0:	4770      	bx	lr
{
   3aed2:	b510      	push	{r4, lr}
	done = true;
   3aed4:	2001      	movs	r0, #1
   3aed6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3aed8:	f003 fb14 	bl	3e504 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3aedc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3aee0:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3aee2:	f7ff ffb7 	bl	3ae54 <blocking_on>
	if (err) {
   3aee6:	b938      	cbnz	r0, 3aef8 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   3aee8:	4620      	mov	r0, r4
   3aeea:	f007 fff0 	bl	42ece <onoff_release>
	if (err != ONOFF_STATE_ON) {
   3aeee:	2802      	cmp	r0, #2
		return 0;
   3aef0:	bf0c      	ite	eq
   3aef2:	2000      	moveq	r0, #0
		return -EIO;
   3aef4:	f06f 0004 	mvnne.w	r0, #4
}
   3aef8:	bd10      	pop	{r4, pc}
   3aefa:	bf00      	nop
   3aefc:	20003c73 	.word	0x20003c73

0003af00 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   3af00:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3af02:	4b0a      	ldr	r3, [pc, #40]	; (3af2c <lll_hfclock_on+0x2c>)
   3af04:	f3bf 8f5b 	dmb	ish
   3af08:	e853 2f00 	ldrex	r2, [r3]
   3af0c:	1c51      	adds	r1, r2, #1
   3af0e:	e843 1000 	strex	r0, r1, [r3]
   3af12:	2800      	cmp	r0, #0
   3af14:	d1f8      	bne.n	3af08 <lll_hfclock_on+0x8>
   3af16:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   3af1a:	2a00      	cmp	r2, #0
   3af1c:	dd01      	ble.n	3af22 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   3af1e:	2000      	movs	r0, #0
   3af20:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   3af22:	f003 faf7 	bl	3e514 <z_nrf_clock_bt_ctlr_hf_request>
}
   3af26:	2000      	movs	r0, #0
   3af28:	bd08      	pop	{r3, pc}
   3af2a:	bf00      	nop
   3af2c:	20002ac4 	.word	0x20002ac4

0003af30 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   3af30:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   3af32:	4b0d      	ldr	r3, [pc, #52]	; (3af68 <lll_hfclock_off+0x38>)
   3af34:	681a      	ldr	r2, [r3, #0]
   3af36:	2a00      	cmp	r2, #0
   3af38:	dd12      	ble.n	3af60 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3af3a:	f3bf 8f5b 	dmb	ish
   3af3e:	e853 2f00 	ldrex	r2, [r3]
   3af42:	1e51      	subs	r1, r2, #1
   3af44:	e843 1000 	strex	r0, r1, [r3]
   3af48:	2800      	cmp	r0, #0
   3af4a:	d1f8      	bne.n	3af3e <lll_hfclock_off+0xe>
   3af4c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   3af50:	2a01      	cmp	r2, #1
   3af52:	dd01      	ble.n	3af58 <lll_hfclock_off+0x28>
		return 0;
   3af54:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   3af56:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   3af58:	f003 faf2 	bl	3e540 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   3af5c:	2000      	movs	r0, #0
}
   3af5e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   3af60:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   3af64:	bd08      	pop	{r3, pc}
   3af66:	bf00      	nop
   3af68:	20002ac4 	.word	0x20002ac4

0003af6c <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   3af6c:	2032      	movs	r0, #50	; 0x32
   3af6e:	4770      	bx	lr

0003af70 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   3af70:	4b01      	ldr	r3, [pc, #4]	; (3af78 <lll_clock_ppm_get+0x8>)
}
   3af72:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   3af76:	4770      	bx	lr
   3af78:	0004af04 	.word	0x0004af04

0003af7c <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   3af7c:	b510      	push	{r4, lr}
   3af7e:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   3af80:	f7ff fe18 	bl	3abb4 <lll_isr_status_reset>

	radio_filter_disable();
   3af84:	f001 fd12 	bl	3c9ac <radio_filter_disable>

	lll_isr_cleanup(param);
   3af88:	4620      	mov	r0, r4
}
   3af8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3af8e:	f7ff be1f 	b.w	3abd0 <lll_isr_cleanup>
   3af92:	bf00      	nop

0003af94 <isr_tx>:
{
   3af94:	b530      	push	{r4, r5, lr}
   3af96:	b083      	sub	sp, #12
   3af98:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   3af9a:	f7ff fdf9 	bl	3ab90 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3af9e:	2096      	movs	r0, #150	; 0x96
   3afa0:	f001 fd36 	bl	3ca10 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   3afa4:	2300      	movs	r3, #0
   3afa6:	4618      	mov	r0, r3
   3afa8:	461a      	mov	r2, r3
   3afaa:	4619      	mov	r1, r3
   3afac:	f001 fc5e 	bl	3c86c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   3afb0:	2001      	movs	r0, #1
   3afb2:	f7f8 fb0f 	bl	335d4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3afb6:	4604      	mov	r4, r0
   3afb8:	2800      	cmp	r0, #0
   3afba:	d043      	beq.n	3b044 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   3afbc:	f104 001c 	add.w	r0, r4, #28
   3afc0:	f001 fb94 	bl	3c6ec <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   3afc4:	f001 fbce 	bl	3c764 <radio_is_ready>
   3afc8:	b9e0      	cbnz	r0, 3b004 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   3afca:	4825      	ldr	r0, [pc, #148]	; (3b060 <isr_tx+0xcc>)
   3afcc:	4629      	mov	r1, r5
   3afce:	f001 fab9 	bl	3c544 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   3afd2:	f7ff fa23 	bl	3a41c <ull_filter_lll_rl_enabled>
   3afd6:	bb50      	cbnz	r0, 3b02e <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3afd8:	f001 fe02 	bl	3cbe0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3afdc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3afde:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3afe0:	4608      	mov	r0, r1
   3afe2:	f001 fb93 	bl	3c70c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3afe6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3afe8:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3afea:	4608      	mov	r0, r1
   3afec:	f001 fb8a 	bl	3c704 <radio_tx_chain_delay_get>
   3aff0:	442c      	add	r4, r5
   3aff2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   3aff4:	1a20      	subs	r0, r4, r0
   3aff6:	f001 fdab 	bl	3cb50 <radio_tmr_hcto_configure>
}
   3affa:	b003      	add	sp, #12
   3affc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   3b000:	f001 bde0 	b.w	3cbc4 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   3b004:	4a17      	ldr	r2, [pc, #92]	; (3b064 <isr_tx+0xd0>)
   3b006:	4918      	ldr	r1, [pc, #96]	; (3b068 <isr_tx+0xd4>)
   3b008:	4818      	ldr	r0, [pc, #96]	; (3b06c <isr_tx+0xd8>)
   3b00a:	f240 4345 	movw	r3, #1093	; 0x445
   3b00e:	f007 fe7f 	bl	42d10 <printk>
   3b012:	4040      	eors	r0, r0
   3b014:	f380 8811 	msr	BASEPRI, r0
   3b018:	f04f 0003 	mov.w	r0, #3
   3b01c:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   3b01e:	4810      	ldr	r0, [pc, #64]	; (3b060 <isr_tx+0xcc>)
   3b020:	4629      	mov	r1, r5
   3b022:	f001 fa8f 	bl	3c544 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   3b026:	f7ff f9f9 	bl	3a41c <ull_filter_lll_rl_enabled>
   3b02a:	2800      	cmp	r0, #0
   3b02c:	d0d4      	beq.n	3afd8 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   3b02e:	f10d 0007 	add.w	r0, sp, #7
   3b032:	f7ff f92d 	bl	3a290 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   3b036:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   3b038:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   3b03a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3b03e:	f001 fe67 	bl	3cd10 <radio_ar_configure>
   3b042:	e7c9      	b.n	3afd8 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   3b044:	4a07      	ldr	r2, [pc, #28]	; (3b064 <isr_tx+0xd0>)
   3b046:	490a      	ldr	r1, [pc, #40]	; (3b070 <isr_tx+0xdc>)
   3b048:	4808      	ldr	r0, [pc, #32]	; (3b06c <isr_tx+0xd8>)
   3b04a:	f240 4341 	movw	r3, #1089	; 0x441
   3b04e:	f007 fe5f 	bl	42d10 <printk>
   3b052:	4040      	eors	r0, r0
   3b054:	f380 8811 	msr	BASEPRI, r0
   3b058:	f04f 0003 	mov.w	r0, #3
   3b05c:	df02      	svc	2
   3b05e:	e7ad      	b.n	3afbc <isr_tx+0x28>
   3b060:	0003b7e5 	.word	0x0003b7e5
   3b064:	0004af14 	.word	0x0004af14
   3b068:	0004af68 	.word	0x0004af68
   3b06c:	0004a4a0 	.word	0x0004a4a0
   3b070:	0004af60 	.word	0x0004af60

0003b074 <is_abort_cb>:
	if (next != curr) {
   3b074:	4281      	cmp	r1, r0
{
   3b076:	b508      	push	{r3, lr}
	if (next != curr) {
   3b078:	d00e      	beq.n	3b098 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   3b07a:	7a0b      	ldrb	r3, [r1, #8]
   3b07c:	07db      	lsls	r3, r3, #31
   3b07e:	d402      	bmi.n	3b086 <is_abort_cb+0x12>
			return -ECANCELED;
   3b080:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   3b084:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   3b086:	4b13      	ldr	r3, [pc, #76]	; (3b0d4 <is_abort_cb+0x60>)
   3b088:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   3b08a:	f7ff ff39 	bl	3af00 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   3b08e:	2800      	cmp	r0, #0
   3b090:	db0f      	blt.n	3b0b2 <is_abort_cb+0x3e>
   3b092:	f06f 000a 	mvn.w	r0, #10
}
   3b096:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   3b098:	7b0b      	ldrb	r3, [r1, #12]
   3b09a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3b09e:	690b      	ldr	r3, [r1, #16]
   3b0a0:	781b      	ldrb	r3, [r3, #0]
   3b0a2:	f003 030f 	and.w	r3, r3, #15
		return 0;
   3b0a6:	2b01      	cmp	r3, #1
   3b0a8:	bf14      	ite	ne
   3b0aa:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   3b0ae:	2000      	moveq	r0, #0
}
   3b0b0:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   3b0b2:	4a09      	ldr	r2, [pc, #36]	; (3b0d8 <is_abort_cb+0x64>)
   3b0b4:	4909      	ldr	r1, [pc, #36]	; (3b0dc <is_abort_cb+0x68>)
   3b0b6:	480a      	ldr	r0, [pc, #40]	; (3b0e0 <is_abort_cb+0x6c>)
   3b0b8:	f240 33fa 	movw	r3, #1018	; 0x3fa
   3b0bc:	f007 fe28 	bl	42d10 <printk>
   3b0c0:	4040      	eors	r0, r0
   3b0c2:	f380 8811 	msr	BASEPRI, r0
   3b0c6:	f04f 0003 	mov.w	r0, #3
   3b0ca:	df02      	svc	2
   3b0cc:	f06f 000a 	mvn.w	r0, #10
}
   3b0d0:	bd08      	pop	{r3, pc}
   3b0d2:	bf00      	nop
   3b0d4:	0003b601 	.word	0x0003b601
   3b0d8:	0004af14 	.word	0x0004af14
   3b0dc:	0004aec4 	.word	0x0004aec4
   3b0e0:	0004a4a0 	.word	0x0004a4a0

0003b0e4 <abort_cb>:
{
   3b0e4:	b510      	push	{r4, lr}
	if (!prepare_param) {
   3b0e6:	b1d8      	cbz	r0, 3b120 <abort_cb+0x3c>
	err = lll_hfclock_off();
   3b0e8:	460c      	mov	r4, r1
   3b0ea:	f7ff ff21 	bl	3af30 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3b0ee:	2800      	cmp	r0, #0
   3b0f0:	db04      	blt.n	3b0fc <abort_cb+0x18>
	lll_done(param);
   3b0f2:	4620      	mov	r0, r4
}
   3b0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3b0f8:	f7ff bc92 	b.w	3aa20 <lll_done>
	LL_ASSERT(err >= 0);
   3b0fc:	4a0c      	ldr	r2, [pc, #48]	; (3b130 <abort_cb+0x4c>)
   3b0fe:	490d      	ldr	r1, [pc, #52]	; (3b134 <abort_cb+0x50>)
   3b100:	480d      	ldr	r0, [pc, #52]	; (3b138 <abort_cb+0x54>)
   3b102:	f44f 6384 	mov.w	r3, #1056	; 0x420
   3b106:	f007 fe03 	bl	42d10 <printk>
   3b10a:	4040      	eors	r0, r0
   3b10c:	f380 8811 	msr	BASEPRI, r0
   3b110:	f04f 0003 	mov.w	r0, #3
   3b114:	df02      	svc	2
	lll_done(param);
   3b116:	4620      	mov	r0, r4
}
   3b118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3b11c:	f7ff bc80 	b.w	3aa20 <lll_done>
		radio_isr_set(isr_abort, param);
   3b120:	4806      	ldr	r0, [pc, #24]	; (3b13c <abort_cb+0x58>)
   3b122:	f001 fa0f 	bl	3c544 <radio_isr_set>
}
   3b126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   3b12a:	f001 bafb 	b.w	3c724 <radio_disable>
   3b12e:	bf00      	nop
   3b130:	0004af14 	.word	0x0004af14
   3b134:	0004aec4 	.word	0x0004aec4
   3b138:	0004a4a0 	.word	0x0004a4a0
   3b13c:	0003af7d 	.word	0x0003af7d

0003b140 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3b140:	4b08      	ldr	r3, [pc, #32]	; (3b164 <lll_adv_init+0x24>)
   3b142:	2204      	movs	r2, #4
{
   3b144:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3b146:	1898      	adds	r0, r3, r2
   3b148:	2128      	movs	r1, #40	; 0x28
   3b14a:	f7f4 fcf7 	bl	2fb3c <mem_init>
	MFIFO_INIT(pdu_free);
   3b14e:	4b06      	ldr	r3, [pc, #24]	; (3b168 <lll_adv_init+0x28>)
   3b150:	2400      	movs	r4, #0
   3b152:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   3b154:	2202      	movs	r2, #2
   3b156:	4621      	mov	r1, r4
   3b158:	4804      	ldr	r0, [pc, #16]	; (3b16c <lll_adv_init+0x2c>)
   3b15a:	f00d fea3 	bl	48ea4 <z_impl_k_sem_init>
}
   3b15e:	4620      	mov	r0, r4
   3b160:	bd10      	pop	{r4, pc}
   3b162:	bf00      	nop
   3b164:	20002ad8 	.word	0x20002ad8
   3b168:	200007d0 	.word	0x200007d0
   3b16c:	20002b7c 	.word	0x20002b7c

0003b170 <lll_adv_reset>:
   3b170:	4b08      	ldr	r3, [pc, #32]	; (3b194 <lll_adv_reset+0x24>)
   3b172:	2204      	movs	r2, #4
   3b174:	b510      	push	{r4, lr}
   3b176:	1898      	adds	r0, r3, r2
   3b178:	2128      	movs	r1, #40	; 0x28
   3b17a:	f7f4 fcdf 	bl	2fb3c <mem_init>
   3b17e:	4b06      	ldr	r3, [pc, #24]	; (3b198 <lll_adv_reset+0x28>)
   3b180:	2400      	movs	r4, #0
   3b182:	805c      	strh	r4, [r3, #2]
   3b184:	2202      	movs	r2, #2
   3b186:	4621      	mov	r1, r4
   3b188:	4804      	ldr	r0, [pc, #16]	; (3b19c <lll_adv_reset+0x2c>)
   3b18a:	f00d fe8b 	bl	48ea4 <z_impl_k_sem_init>
   3b18e:	4620      	mov	r0, r4
   3b190:	bd10      	pop	{r4, pc}
   3b192:	bf00      	nop
   3b194:	20002ad8 	.word	0x20002ad8
   3b198:	200007d0 	.word	0x200007d0
   3b19c:	20002b7c 	.word	0x20002b7c

0003b1a0 <lll_adv_data_init>:
{
   3b1a0:	b510      	push	{r4, lr}
   3b1a2:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   3b1a4:	4805      	ldr	r0, [pc, #20]	; (3b1bc <lll_adv_data_init+0x1c>)
   3b1a6:	f7f4 fcf9 	bl	2fb9c <mem_acquire>
	if (!p) {
   3b1aa:	b120      	cbz	r0, 3b1b6 <lll_adv_data_init+0x16>
   3b1ac:	4603      	mov	r3, r0
	p->len = 0U;
   3b1ae:	2000      	movs	r0, #0
   3b1b0:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   3b1b2:	6063      	str	r3, [r4, #4]
}
   3b1b4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3b1b6:	f06f 000b 	mvn.w	r0, #11
}
   3b1ba:	bd10      	pop	{r4, pc}
   3b1bc:	20002ad8 	.word	0x20002ad8

0003b1c0 <lll_adv_data_reset>:
{
   3b1c0:	4603      	mov	r3, r0
	pdu->first = 0U;
   3b1c2:	2000      	movs	r0, #0
   3b1c4:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   3b1c6:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   3b1c8:	6098      	str	r0, [r3, #8]
}
   3b1ca:	4770      	bx	lr

0003b1cc <lll_adv_pdu_alloc_pdu_adv>:
{
   3b1cc:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   3b1ce:	4c35      	ldr	r4, [pc, #212]	; (3b2a4 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   3b1d0:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   3b1d2:	78e1      	ldrb	r1, [r4, #3]
   3b1d4:	7823      	ldrb	r3, [r4, #0]
   3b1d6:	4291      	cmp	r1, r2
   3b1d8:	d003      	beq.n	3b1e2 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   3b1da:	fb02 4303 	mla	r3, r2, r3, r4
   3b1de:	685d      	ldr	r5, [r3, #4]
	if (p) {
   3b1e0:	b935      	cbnz	r5, 3b1f0 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   3b1e2:	4831      	ldr	r0, [pc, #196]	; (3b2a8 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   3b1e4:	f7f4 fcda 	bl	2fb9c <mem_acquire>
	if (p) {
   3b1e8:	4605      	mov	r5, r0
   3b1ea:	b1a0      	cbz	r0, 3b216 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   3b1ec:	4628      	mov	r0, r5
   3b1ee:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   3b1f0:	482e      	ldr	r0, [pc, #184]	; (3b2ac <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3b1f2:	2200      	movs	r2, #0
   3b1f4:	2300      	movs	r3, #0
   3b1f6:	f006 fbb7 	bl	41968 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   3b1fa:	bb40      	cbnz	r0, 3b24e <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   3b1fc:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   3b1fe:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   3b200:	7861      	ldrb	r1, [r4, #1]
   3b202:	429a      	cmp	r2, r3
   3b204:	d0f2      	beq.n	3b1ec <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   3b206:	3301      	adds	r3, #1
   3b208:	b2db      	uxtb	r3, r3
		_first = 0U;
   3b20a:	4299      	cmp	r1, r3
   3b20c:	bf08      	it	eq
   3b20e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3b210:	70a3      	strb	r3, [r4, #2]
}
   3b212:	4628      	mov	r0, r5
   3b214:	bd38      	pop	{r3, r4, r5, pc}
   3b216:	4825      	ldr	r0, [pc, #148]	; (3b2ac <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3b218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3b21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b220:	f006 fba2 	bl	41968 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   3b224:	2800      	cmp	r0, #0
   3b226:	d12e      	bne.n	3b286 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   3b228:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   3b22a:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   3b22c:	7822      	ldrb	r2, [r4, #0]
   3b22e:	7860      	ldrb	r0, [r4, #1]
   3b230:	4299      	cmp	r1, r3
   3b232:	d01a      	beq.n	3b26a <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   3b234:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   3b238:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   3b23a:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   3b23c:	b2db      	uxtb	r3, r3
		_first = 0U;
   3b23e:	4298      	cmp	r0, r3
   3b240:	bf08      	it	eq
   3b242:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3b244:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   3b246:	b182      	cbz	r2, 3b26a <lll_adv_pdu_alloc_pdu_adv+0x9e>
   3b248:	4615      	mov	r5, r2
}
   3b24a:	4628      	mov	r0, r5
   3b24c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   3b24e:	4a18      	ldr	r2, [pc, #96]	; (3b2b0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   3b250:	4918      	ldr	r1, [pc, #96]	; (3b2b4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3b252:	4819      	ldr	r0, [pc, #100]	; (3b2b8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   3b254:	f240 1397 	movw	r3, #407	; 0x197
   3b258:	f007 fd5a 	bl	42d10 <printk>
   3b25c:	4040      	eors	r0, r0
   3b25e:	f380 8811 	msr	BASEPRI, r0
   3b262:	f04f 0003 	mov.w	r0, #3
   3b266:	df02      	svc	2
   3b268:	e7c8      	b.n	3b1fc <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   3b26a:	4a11      	ldr	r2, [pc, #68]	; (3b2b0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   3b26c:	4913      	ldr	r1, [pc, #76]	; (3b2bc <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   3b26e:	4812      	ldr	r0, [pc, #72]	; (3b2b8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   3b270:	f240 13ad 	movw	r3, #429	; 0x1ad
   3b274:	f007 fd4c 	bl	42d10 <printk>
   3b278:	4040      	eors	r0, r0
   3b27a:	f380 8811 	msr	BASEPRI, r0
   3b27e:	f04f 0003 	mov.w	r0, #3
   3b282:	df02      	svc	2
   3b284:	e7b2      	b.n	3b1ec <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   3b286:	4a0a      	ldr	r2, [pc, #40]	; (3b2b0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   3b288:	490a      	ldr	r1, [pc, #40]	; (3b2b4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3b28a:	480b      	ldr	r0, [pc, #44]	; (3b2b8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   3b28c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   3b290:	f007 fd3e 	bl	42d10 <printk>
   3b294:	4040      	eors	r0, r0
   3b296:	f380 8811 	msr	BASEPRI, r0
   3b29a:	f04f 0003 	mov.w	r0, #3
   3b29e:	df02      	svc	2
   3b2a0:	e7c2      	b.n	3b228 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   3b2a2:	bf00      	nop
   3b2a4:	200007d0 	.word	0x200007d0
   3b2a8:	20002ad8 	.word	0x20002ad8
   3b2ac:	20002b7c 	.word	0x20002b7c
   3b2b0:	0004af14 	.word	0x0004af14
   3b2b4:	0004a63c 	.word	0x0004a63c
   3b2b8:	0004a4a0 	.word	0x0004a4a0
   3b2bc:	0004af7c 	.word	0x0004af7c

0003b2c0 <lll_adv_pdu_alloc>:
{
   3b2c0:	b510      	push	{r4, lr}
	first = pdu->first;
   3b2c2:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   3b2c4:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   3b2c6:	429a      	cmp	r2, r3
   3b2c8:	d014      	beq.n	3b2f4 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   3b2ca:	b2d4      	uxtb	r4, r2
   3b2cc:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   3b2ce:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   3b2d0:	4294      	cmp	r4, r2
   3b2d2:	d004      	beq.n	3b2de <lll_adv_pdu_alloc+0x1e>
			last++;
   3b2d4:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   3b2d6:	7043      	strb	r3, [r0, #1]
			last++;
   3b2d8:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   3b2da:	2b02      	cmp	r3, #2
   3b2dc:	d00e      	beq.n	3b2fc <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   3b2de:	461c      	mov	r4, r3
	*idx = last;
   3b2e0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   3b2e4:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   3b2e6:	6860      	ldr	r0, [r4, #4]
	if (p) {
   3b2e8:	b100      	cbz	r0, 3b2ec <lll_adv_pdu_alloc+0x2c>
}
   3b2ea:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   3b2ec:	f7ff ff6e 	bl	3b1cc <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   3b2f0:	6060      	str	r0, [r4, #4]
}
   3b2f2:	bd10      	pop	{r4, pc}
		last++;
   3b2f4:	3301      	adds	r3, #1
   3b2f6:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   3b2f8:	2b02      	cmp	r3, #2
   3b2fa:	d1f0      	bne.n	3b2de <lll_adv_pdu_alloc+0x1e>
{
   3b2fc:	2400      	movs	r4, #0
			last = 0U;
   3b2fe:	4623      	mov	r3, r4
   3b300:	e7ee      	b.n	3b2e0 <lll_adv_pdu_alloc+0x20>
   3b302:	bf00      	nop

0003b304 <lll_adv_pdu_latest_get>:
{
   3b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b306:	4604      	mov	r4, r0
	first = pdu->first;
   3b308:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   3b30a:	7840      	ldrb	r0, [r0, #1]
   3b30c:	4298      	cmp	r0, r3
   3b30e:	d028      	beq.n	3b362 <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   3b310:	4a16      	ldr	r2, [pc, #88]	; (3b36c <lll_adv_pdu_latest_get+0x68>)
   3b312:	460e      	mov	r6, r1
   3b314:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   3b316:	f892 c001 	ldrb.w	ip, [r2, #1]
   3b31a:	b2dd      	uxtb	r5, r3
	last = last + 1;
   3b31c:	1c4b      	adds	r3, r1, #1
   3b31e:	b2db      	uxtb	r3, r3
		last = 0U;
   3b320:	459c      	cmp	ip, r3
   3b322:	bf08      	it	eq
   3b324:	2300      	moveq	r3, #0
   3b326:	f892 c002 	ldrb.w	ip, [r2, #2]
   3b32a:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   3b32e:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   3b330:	6878      	ldr	r0, [r7, #4]
   3b332:	d009      	beq.n	3b348 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3b334:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3b338:	fb0c 2101 	mla	r1, ip, r1, r2
   3b33c:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   3b33e:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   3b340:	480b      	ldr	r0, [pc, #44]	; (3b370 <lll_adv_pdu_latest_get+0x6c>)
   3b342:	f006 faeb 	bl	4191c <z_impl_k_sem_give>
			p = next;
   3b346:	2000      	movs	r0, #0
		first += 1U;
   3b348:	1c6b      	adds	r3, r5, #1
   3b34a:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   3b34c:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   3b34e:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   3b350:	bf04      	itt	eq
   3b352:	2000      	moveq	r0, #0
			first = 0U;
   3b354:	4603      	moveq	r3, r0
		*is_modified = 1U;
   3b356:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   3b35a:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   3b35c:	bf18      	it	ne
   3b35e:	4618      	movne	r0, r3
		*is_modified = 1U;
   3b360:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   3b362:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   3b366:	6860      	ldr	r0, [r4, #4]
   3b368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b36a:	bf00      	nop
   3b36c:	200007d0 	.word	0x200007d0
   3b370:	20002b7c 	.word	0x20002b7c

0003b374 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   3b374:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b376:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   3b378:	f3c3 1302 	ubfx	r3, r3, #4, #3
   3b37c:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b37e:	4604      	mov	r4, r0
   3b380:	fa93 f0a3 	rbit	r0, r3
   3b384:	fab0 f080 	clz	r0, r0
   3b388:	bf08      	it	eq
   3b38a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   3b38e:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b390:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   3b392:	d043      	beq.n	3b41c <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b394:	7a21      	ldrb	r1, [r4, #8]
   3b396:	1e5a      	subs	r2, r3, #1
   3b398:	4013      	ands	r3, r2
   3b39a:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   3b39e:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b3a2:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   3b3a4:	f7ff fbb0 	bl	3ab08 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   3b3a8:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   3b3aa:	f10d 0107 	add.w	r1, sp, #7
   3b3ae:	f104 000c 	add.w	r0, r4, #12
   3b3b2:	f88d 3007 	strb.w	r3, [sp, #7]
   3b3b6:	f7ff ffa5 	bl	3b304 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   3b3ba:	4605      	mov	r5, r0
   3b3bc:	2800      	cmp	r0, #0
   3b3be:	d03e      	beq.n	3b43e <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   3b3c0:	4628      	mov	r0, r5
   3b3c2:	f001 f999 	bl	3c6f8 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   3b3c6:	782b      	ldrb	r3, [r5, #0]
   3b3c8:	f003 030f 	and.w	r3, r3, #15
   3b3cc:	2b02      	cmp	r3, #2
   3b3ce:	d01d      	beq.n	3b40c <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   3b3d0:	f10d 0107 	add.w	r1, sp, #7
   3b3d4:	f104 0018 	add.w	r0, r4, #24
   3b3d8:	f7ff ff94 	bl	3b304 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   3b3dc:	4606      	mov	r6, r0
   3b3de:	2800      	cmp	r0, #0
   3b3e0:	d03b      	beq.n	3b45a <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   3b3e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3b3e6:	b95b      	cbnz	r3, 3b400 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   3b3e8:	4621      	mov	r1, r4
   3b3ea:	4823      	ldr	r0, [pc, #140]	; (3b478 <chan_prepare.isra.0+0x104>)
   3b3ec:	f001 f8aa 	bl	3c544 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   3b3f0:	2096      	movs	r0, #150	; 0x96
   3b3f2:	f001 fb0d 	bl	3ca10 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   3b3f6:	2000      	movs	r0, #0
   3b3f8:	f001 f9f0 	bl	3c7dc <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   3b3fc:	b002      	add	sp, #8
   3b3fe:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   3b400:	2206      	movs	r2, #6
   3b402:	1ca9      	adds	r1, r5, #2
   3b404:	1cb0      	adds	r0, r6, #2
   3b406:	f009 fd5b 	bl	44ec0 <memcpy>
   3b40a:	e7ed      	b.n	3b3e8 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   3b40c:	481b      	ldr	r0, [pc, #108]	; (3b47c <chan_prepare.isra.0+0x108>)
   3b40e:	4621      	mov	r1, r4
   3b410:	f001 f898 	bl	3c544 <radio_isr_set>
		radio_switch_complete_and_disable();
   3b414:	f001 fa8a 	bl	3c92c <radio_switch_complete_and_disable>
}
   3b418:	b002      	add	sp, #8
   3b41a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   3b41c:	4a18      	ldr	r2, [pc, #96]	; (3b480 <chan_prepare.isra.0+0x10c>)
   3b41e:	4919      	ldr	r1, [pc, #100]	; (3b484 <chan_prepare.isra.0+0x110>)
   3b420:	4819      	ldr	r0, [pc, #100]	; (3b488 <chan_prepare.isra.0+0x114>)
   3b422:	f240 5337 	movw	r3, #1335	; 0x537
   3b426:	f007 fc73 	bl	42d10 <printk>
   3b42a:	4040      	eors	r0, r0
   3b42c:	f380 8811 	msr	BASEPRI, r0
   3b430:	f04f 0003 	mov.w	r0, #3
   3b434:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b436:	7a23      	ldrb	r3, [r4, #8]
   3b438:	f3c3 1302 	ubfx	r3, r3, #4, #3
   3b43c:	e7aa      	b.n	3b394 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   3b43e:	4a10      	ldr	r2, [pc, #64]	; (3b480 <chan_prepare.isra.0+0x10c>)
   3b440:	4912      	ldr	r1, [pc, #72]	; (3b48c <chan_prepare.isra.0+0x118>)
   3b442:	4811      	ldr	r0, [pc, #68]	; (3b488 <chan_prepare.isra.0+0x114>)
   3b444:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   3b448:	f007 fc62 	bl	42d10 <printk>
   3b44c:	4040      	eors	r0, r0
   3b44e:	f380 8811 	msr	BASEPRI, r0
   3b452:	f04f 0003 	mov.w	r0, #3
   3b456:	df02      	svc	2
   3b458:	e7b2      	b.n	3b3c0 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   3b45a:	4a09      	ldr	r2, [pc, #36]	; (3b480 <chan_prepare.isra.0+0x10c>)
   3b45c:	490c      	ldr	r1, [pc, #48]	; (3b490 <chan_prepare.isra.0+0x11c>)
   3b45e:	480a      	ldr	r0, [pc, #40]	; (3b488 <chan_prepare.isra.0+0x114>)
   3b460:	f240 534a 	movw	r3, #1354	; 0x54a
   3b464:	f007 fc54 	bl	42d10 <printk>
   3b468:	4040      	eors	r0, r0
   3b46a:	f380 8811 	msr	BASEPRI, r0
   3b46e:	f04f 0003 	mov.w	r0, #3
   3b472:	df02      	svc	2
   3b474:	e7b5      	b.n	3b3e2 <chan_prepare.isra.0+0x6e>
   3b476:	bf00      	nop
   3b478:	0003af95 	.word	0x0003af95
   3b47c:	0003b495 	.word	0x0003b495
   3b480:	0004af14 	.word	0x0004af14
   3b484:	0004af80 	.word	0x0004af80
   3b488:	0004a4a0 	.word	0x0004a4a0
   3b48c:	0004af88 	.word	0x0004af88
   3b490:	0004af8c 	.word	0x0004af8c

0003b494 <isr_done>:
{
   3b494:	b510      	push	{r4, lr}
   3b496:	4604      	mov	r4, r0
	lll_isr_status_reset();
   3b498:	f7ff fb8c 	bl	3abb4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   3b49c:	7a23      	ldrb	r3, [r4, #8]
   3b49e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   3b4a2:	2a01      	cmp	r2, #1
   3b4a4:	d105      	bne.n	3b4b2 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   3b4a6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3b4aa:	f362 1306 	bfi	r3, r2, #4, #3
   3b4ae:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   3b4b0:	b2db      	uxtb	r3, r3
   3b4b2:	f013 0f70 	tst.w	r3, #112	; 0x70
   3b4b6:	d005      	beq.n	3b4c4 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   3b4b8:	6863      	ldr	r3, [r4, #4]
   3b4ba:	b153      	cbz	r3, 3b4d2 <isr_done+0x3e>
   3b4bc:	f893 3020 	ldrb.w	r3, [r3, #32]
   3b4c0:	079b      	lsls	r3, r3, #30
   3b4c2:	d506      	bpl.n	3b4d2 <isr_done+0x3e>
	radio_filter_disable();
   3b4c4:	f001 fa72 	bl	3c9ac <radio_filter_disable>
	lll_isr_cleanup(param);
   3b4c8:	4620      	mov	r0, r4
}
   3b4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3b4ce:	f7ff bb7f 	b.w	3abd0 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   3b4d2:	4620      	mov	r0, r4
   3b4d4:	f7ff ff4e 	bl	3b374 <chan_prepare.isra.0>
		radio_tx_enable();
   3b4d8:	f001 f91e 	bl	3c718 <radio_tx_enable>
}
   3b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   3b4e0:	f001 bb70 	b.w	3cbc4 <radio_tmr_end_capture>

0003b4e4 <prepare_cb>:
{
   3b4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   3b4e6:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   3b4e8:	6863      	ldr	r3, [r4, #4]
{
   3b4ea:	b083      	sub	sp, #12
   3b4ec:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   3b4ee:	2b00      	cmp	r3, #0
   3b4f0:	d16d      	bne.n	3b5ce <prepare_cb+0xea>
	radio_reset();
   3b4f2:	f001 f869 	bl	3c5c8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3b4f6:	2008      	movs	r0, #8
   3b4f8:	f001 f89a 	bl	3c630 <radio_tx_power_set>
	radio_phy_set(0, 0);
   3b4fc:	2100      	movs	r1, #0
   3b4fe:	4608      	mov	r0, r1
   3b500:	f001 f886 	bl	3c610 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   3b504:	2200      	movs	r2, #0
   3b506:	2125      	movs	r1, #37	; 0x25
   3b508:	2008      	movs	r0, #8
   3b50a:	f001 f8c7 	bl	3c69c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   3b50e:	4b35      	ldr	r3, [pc, #212]	; (3b5e4 <prepare_cb+0x100>)
   3b510:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   3b512:	a801      	add	r0, sp, #4
   3b514:	f001 f8aa 	bl	3c66c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3b518:	4933      	ldr	r1, [pc, #204]	; (3b5e8 <prepare_cb+0x104>)
   3b51a:	f240 605b 	movw	r0, #1627	; 0x65b
   3b51e:	f001 f93f 	bl	3c7a0 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   3b522:	7a23      	ldrb	r3, [r4, #8]
   3b524:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3b528:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   3b52c:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   3b52e:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   3b530:	f7ff ff20 	bl	3b374 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   3b534:	f7fe ff72 	bl	3a41c <ull_filter_lll_rl_enabled>
   3b538:	bb98      	cbnz	r0, 3b5a2 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   3b53a:	7a63      	ldrb	r3, [r4, #9]
   3b53c:	079b      	lsls	r3, r3, #30
   3b53e:	d127      	bne.n	3b590 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   3b540:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3b542:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3b544:	4638      	mov	r0, r7
   3b546:	f7ff fac1 	bl	3aacc <lll_event_offset_get>
   3b54a:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   3b54c:	686a      	ldr	r2, [r5, #4]
   3b54e:	f106 0109 	add.w	r1, r6, #9
   3b552:	2001      	movs	r0, #1
   3b554:	f001 fa68 	bl	3ca28 <radio_tmr_start>
	radio_tmr_end_capture();
   3b558:	f001 fb34 	bl	3cbc4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   3b55c:	4620      	mov	r0, r4
   3b55e:	f7f8 ffa5 	bl	344ac <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   3b562:	1c81      	adds	r1, r0, #2
   3b564:	4632      	mov	r2, r6
   3b566:	b2c9      	uxtb	r1, r1
   3b568:	4638      	mov	r0, r7
   3b56a:	f7ff fabd 	bl	3aae8 <lll_preempt_calc>
   3b56e:	b930      	cbnz	r0, 3b57e <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   3b570:	4620      	mov	r0, r4
   3b572:	f7ff fa53 	bl	3aa1c <lll_prepare_done>
		LL_ASSERT(!ret);
   3b576:	b9d0      	cbnz	r0, 3b5ae <prepare_cb+0xca>
}
   3b578:	2000      	movs	r0, #0
   3b57a:	b003      	add	sp, #12
   3b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   3b57e:	481b      	ldr	r0, [pc, #108]	; (3b5ec <prepare_cb+0x108>)
   3b580:	4621      	mov	r1, r4
   3b582:	f000 ffdf 	bl	3c544 <radio_isr_set>
		radio_disable();
   3b586:	f001 f8cd 	bl	3c724 <radio_disable>
}
   3b58a:	2000      	movs	r0, #0
   3b58c:	b003      	add	sp, #12
   3b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   3b590:	2001      	movs	r0, #1
   3b592:	f7fe fbc5 	bl	39d20 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   3b596:	7841      	ldrb	r1, [r0, #1]
   3b598:	1c82      	adds	r2, r0, #2
   3b59a:	7800      	ldrb	r0, [r0, #0]
   3b59c:	f001 f9e6 	bl	3c96c <radio_filter_configure>
   3b5a0:	e7ce      	b.n	3b540 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   3b5a2:	7a60      	ldrb	r0, [r4, #9]
   3b5a4:	f010 0003 	ands.w	r0, r0, #3
   3b5a8:	bf18      	it	ne
   3b5aa:	2001      	movne	r0, #1
   3b5ac:	e7f1      	b.n	3b592 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   3b5ae:	4a10      	ldr	r2, [pc, #64]	; (3b5f0 <prepare_cb+0x10c>)
   3b5b0:	4910      	ldr	r1, [pc, #64]	; (3b5f4 <prepare_cb+0x110>)
   3b5b2:	4811      	ldr	r0, [pc, #68]	; (3b5f8 <prepare_cb+0x114>)
   3b5b4:	f240 33d1 	movw	r3, #977	; 0x3d1
   3b5b8:	f007 fbaa 	bl	42d10 <printk>
   3b5bc:	4040      	eors	r0, r0
   3b5be:	f380 8811 	msr	BASEPRI, r0
   3b5c2:	f04f 0003 	mov.w	r0, #3
   3b5c6:	df02      	svc	2
}
   3b5c8:	2000      	movs	r0, #0
   3b5ca:	b003      	add	sp, #12
   3b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   3b5ce:	f893 3020 	ldrb.w	r3, [r3, #32]
   3b5d2:	079a      	lsls	r2, r3, #30
   3b5d4:	d08d      	beq.n	3b4f2 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   3b5d6:	4809      	ldr	r0, [pc, #36]	; (3b5fc <prepare_cb+0x118>)
   3b5d8:	4621      	mov	r1, r4
   3b5da:	f000 ffb3 	bl	3c544 <radio_isr_set>
		radio_disable();
   3b5de:	f001 f8a1 	bl	3c724 <radio_disable>
		return 0;
   3b5e2:	e7c9      	b.n	3b578 <prepare_cb+0x94>
   3b5e4:	8e89bed6 	.word	0x8e89bed6
   3b5e8:	00555555 	.word	0x00555555
   3b5ec:	0003af7d 	.word	0x0003af7d
   3b5f0:	0004af14 	.word	0x0004af14
   3b5f4:	0004a738 	.word	0x0004a738
   3b5f8:	0004a4a0 	.word	0x0004a4a0
   3b5fc:	0003ac61 	.word	0x0003ac61

0003b600 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   3b600:	68c3      	ldr	r3, [r0, #12]
{
   3b602:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   3b604:	681e      	ldr	r6, [r3, #0]
{
   3b606:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3b608:	f7f5 fdae 	bl	31168 <ticker_ticks_now_get>
   3b60c:	4605      	mov	r5, r0
   3b60e:	4630      	mov	r0, r6
   3b610:	f7ff fa5c 	bl	3aacc <lll_event_offset_get>
	p->remainder = 0;
   3b614:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3b616:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   3b618:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   3b61c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   3b61e:	4620      	mov	r0, r4
}
   3b620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   3b624:	f7ff bf5e 	b.w	3b4e4 <prepare_cb>

0003b628 <lll_adv_prepare>:
{
   3b628:	b510      	push	{r4, lr}
   3b62a:	b082      	sub	sp, #8
   3b62c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3b62e:	f7ff fc67 	bl	3af00 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3b632:	2800      	cmp	r0, #0
   3b634:	db1a      	blt.n	3b66c <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   3b636:	4a14      	ldr	r2, [pc, #80]	; (3b688 <lll_adv_prepare+0x60>)
   3b638:	4914      	ldr	r1, [pc, #80]	; (3b68c <lll_adv_prepare+0x64>)
   3b63a:	4815      	ldr	r0, [pc, #84]	; (3b690 <lll_adv_prepare+0x68>)
   3b63c:	9400      	str	r4, [sp, #0]
   3b63e:	2300      	movs	r3, #0
   3b640:	f7f8 fada 	bl	33bf8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b644:	b108      	cbz	r0, 3b64a <lll_adv_prepare+0x22>
   3b646:	3077      	adds	r0, #119	; 0x77
   3b648:	d101      	bne.n	3b64e <lll_adv_prepare+0x26>
}
   3b64a:	b002      	add	sp, #8
   3b64c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b64e:	4a11      	ldr	r2, [pc, #68]	; (3b694 <lll_adv_prepare+0x6c>)
   3b650:	4911      	ldr	r1, [pc, #68]	; (3b698 <lll_adv_prepare+0x70>)
   3b652:	4812      	ldr	r0, [pc, #72]	; (3b69c <lll_adv_prepare+0x74>)
   3b654:	f240 239d 	movw	r3, #669	; 0x29d
   3b658:	f007 fb5a 	bl	42d10 <printk>
   3b65c:	4040      	eors	r0, r0
   3b65e:	f380 8811 	msr	BASEPRI, r0
   3b662:	f04f 0003 	mov.w	r0, #3
   3b666:	df02      	svc	2
}
   3b668:	b002      	add	sp, #8
   3b66a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3b66c:	4a09      	ldr	r2, [pc, #36]	; (3b694 <lll_adv_prepare+0x6c>)
   3b66e:	490c      	ldr	r1, [pc, #48]	; (3b6a0 <lll_adv_prepare+0x78>)
   3b670:	480a      	ldr	r0, [pc, #40]	; (3b69c <lll_adv_prepare+0x74>)
   3b672:	f240 239a 	movw	r3, #666	; 0x29a
   3b676:	f007 fb4b 	bl	42d10 <printk>
   3b67a:	4040      	eors	r0, r0
   3b67c:	f380 8811 	msr	BASEPRI, r0
   3b680:	f04f 0003 	mov.w	r0, #3
   3b684:	df02      	svc	2
   3b686:	e7d6      	b.n	3b636 <lll_adv_prepare+0xe>
   3b688:	0003b4e5 	.word	0x0003b4e5
   3b68c:	0003b0e5 	.word	0x0003b0e5
   3b690:	0003b075 	.word	0x0003b075
   3b694:	0004af14 	.word	0x0004af14
   3b698:	0004af98 	.word	0x0004af98
   3b69c:	0004a4a0 	.word	0x0004a4a0
   3b6a0:	0004aec4 	.word	0x0004aec4

0003b6a4 <lll_adv_scan_req_check>:
{
   3b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   3b6a8:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   3b6ac:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b6b0:	f01c 0f01 	tst.w	ip, #1
{
   3b6b4:	460f      	mov	r7, r1
   3b6b6:	4616      	mov	r6, r2
   3b6b8:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b6ba:	d009      	beq.n	3b6d0 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b6bc:	f1b8 0f00 	cmp.w	r8, #0
   3b6c0:	d016      	beq.n	3b6f0 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   3b6c2:	783b      	ldrb	r3, [r7, #0]
   3b6c4:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   3b6c8:	d019      	beq.n	3b6fe <lll_adv_scan_req_check+0x5a>
{
   3b6ca:	2000      	movs	r0, #0
}
   3b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b6d0:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   3b6d2:	f811 0b02 	ldrb.w	r0, [r1], #2
   3b6d6:	9a07      	ldr	r2, [sp, #28]
   3b6d8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b6dc:	f7fe fe64 	bl	3a3a8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   3b6e0:	2800      	cmp	r0, #0
   3b6e2:	d1ee      	bne.n	3b6c2 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b6e4:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   3b6e6:	07db      	lsls	r3, r3, #31
   3b6e8:	d5ef      	bpl.n	3b6ca <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b6ea:	f1b8 0f00 	cmp.w	r8, #0
   3b6ee:	d1e8      	bne.n	3b6c2 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b6f0:	9b07      	ldr	r3, [sp, #28]
   3b6f2:	7818      	ldrb	r0, [r3, #0]
   3b6f4:	f7fe fe28 	bl	3a348 <ull_filter_lll_irk_in_fal>
   3b6f8:	2800      	cmp	r0, #0
   3b6fa:	d1e2      	bne.n	3b6c2 <lll_adv_scan_req_check+0x1e>
   3b6fc:	e7e5      	b.n	3b6ca <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b6fe:	2206      	movs	r2, #6
   3b700:	f107 0108 	add.w	r1, r7, #8
   3b704:	4628      	mov	r0, r5
   3b706:	f009 fbca 	bl	44e9e <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b70a:	fab0 f080 	clz	r0, r0
   3b70e:	0940      	lsrs	r0, r0, #5
}
   3b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003b714 <lll_adv_connect_ind_check>:
{
   3b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b718:	461f      	mov	r7, r3
	if (tgt_addr) {
   3b71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   3b71c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   3b720:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   3b724:	4605      	mov	r5, r0
   3b726:	460c      	mov	r4, r1
   3b728:	4690      	mov	r8, r2
	if (tgt_addr) {
   3b72a:	b9fb      	cbnz	r3, 3b76c <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   3b72c:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b72e:	079a      	lsls	r2, r3, #30
   3b730:	d507      	bpl.n	3b742 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b732:	b1a6      	cbz	r6, 3b75e <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   3b734:	7823      	ldrb	r3, [r4, #0]
   3b736:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   3b73a:	d03a      	beq.n	3b7b2 <lll_adv_connect_ind_check+0x9e>
   3b73c:	2000      	movs	r0, #0
}
   3b73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   3b742:	f811 0b02 	ldrb.w	r0, [r1], #2
   3b746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3b748:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b74c:	f7fe fe2c 	bl	3a3a8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   3b750:	2800      	cmp	r0, #0
   3b752:	d1ef      	bne.n	3b734 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b754:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   3b756:	079b      	lsls	r3, r3, #30
   3b758:	d5f0      	bpl.n	3b73c <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b75a:	2e00      	cmp	r6, #0
   3b75c:	d1ea      	bne.n	3b734 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3b760:	7818      	ldrb	r0, [r3, #0]
   3b762:	f7fe fdf1 	bl	3a348 <ull_filter_lll_irk_in_fal>
   3b766:	2800      	cmp	r0, #0
   3b768:	d1e4      	bne.n	3b734 <lll_adv_connect_ind_check+0x20>
   3b76a:	e7e7      	b.n	3b73c <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   3b76c:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   3b76e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3b770:	f81a 0b02 	ldrb.w	r0, [sl], #2
   3b774:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b778:	4651      	mov	r1, sl
   3b77a:	f7fe fe15 	bl	3a3a8 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   3b77e:	2800      	cmp	r0, #0
   3b780:	d0dc      	beq.n	3b73c <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   3b782:	7823      	ldrb	r3, [r4, #0]
   3b784:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   3b788:	d1d8      	bne.n	3b73c <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   3b78a:	4638      	mov	r0, r7
   3b78c:	2206      	movs	r2, #6
   3b78e:	f104 0108 	add.w	r1, r4, #8
   3b792:	f009 fb84 	bl	44e9e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   3b796:	2800      	cmp	r0, #0
   3b798:	d1d0      	bne.n	3b73c <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   3b79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3b79c:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   3b79e:	28ff      	cmp	r0, #255	; 0xff
   3b7a0:	d011      	beq.n	3b7c6 <lll_adv_connect_ind_check+0xb2>
   3b7a2:	7aab      	ldrb	r3, [r5, #10]
   3b7a4:	2bff      	cmp	r3, #255	; 0xff
   3b7a6:	d00e      	beq.n	3b7c6 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   3b7a8:	1ac0      	subs	r0, r0, r3
   3b7aa:	fab0 f080 	clz	r0, r0
   3b7ae:	0940      	lsrs	r0, r0, #5
   3b7b0:	e7c5      	b.n	3b73e <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   3b7b2:	2206      	movs	r2, #6
   3b7b4:	f104 0108 	add.w	r1, r4, #8
   3b7b8:	4638      	mov	r0, r7
   3b7ba:	f009 fb70 	bl	44e9e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   3b7be:	fab0 f080 	clz	r0, r0
   3b7c2:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b7c4:	e7bb      	b.n	3b73e <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   3b7c6:	7823      	ldrb	r3, [r4, #0]
   3b7c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3b7cc:	454b      	cmp	r3, r9
   3b7ce:	d1b5      	bne.n	3b73c <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   3b7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b7d2:	2206      	movs	r2, #6
   3b7d4:	4651      	mov	r1, sl
   3b7d6:	f009 fb62 	bl	44e9e <memcmp>
	return (rx_addr == ci->tx_addr) &&
   3b7da:	fab0 f080 	clz	r0, r0
   3b7de:	0940      	lsrs	r0, r0, #5
   3b7e0:	e7ad      	b.n	3b73e <lll_adv_connect_ind_check+0x2a>
   3b7e2:	bf00      	nop

0003b7e4 <isr_rx>:
{
   3b7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b7e8:	b08b      	sub	sp, #44	; 0x2c
   3b7ea:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3b7ec:	f000 ffc4 	bl	3c778 <radio_is_done>
	if (trx_done) {
   3b7f0:	b2c0      	uxtb	r0, r0
   3b7f2:	b950      	cbnz	r0, 3b80a <isr_rx+0x26>
	lll_isr_status_reset();
   3b7f4:	f7ff f9de 	bl	3abb4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   3b7f8:	487c      	ldr	r0, [pc, #496]	; (3b9ec <isr_rx+0x208>)
   3b7fa:	4621      	mov	r1, r4
   3b7fc:	f000 fea2 	bl	3c544 <radio_isr_set>
}
   3b800:	b00b      	add	sp, #44	; 0x2c
   3b802:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   3b806:	f000 bf8d 	b.w	3c724 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3b80a:	f000 ffd5 	bl	3c7b8 <radio_crc_is_valid>
   3b80e:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   3b810:	f001 f8de 	bl	3c9d0 <radio_filter_has_match>
   3b814:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   3b816:	f001 f8e5 	bl	3c9e4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   3b81a:	f001 fac9 	bl	3cdb0 <radio_ar_has_match>
   3b81e:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   3b820:	f001 faaa 	bl	3cd78 <radio_ar_match_get>
	if (crc_ok) {
   3b824:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   3b826:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   3b828:	f001 f896 	bl	3c958 <radio_rssi_is_ready>
	lll_isr_status_reset();
   3b82c:	f7ff f9c2 	bl	3abb4 <lll_isr_status_reset>
	if (crc_ok) {
   3b830:	2d00      	cmp	r5, #0
   3b832:	d0e1      	beq.n	3b7f8 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b834:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   3b838:	d17a      	bne.n	3b930 <isr_rx+0x14c>
   3b83a:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b83c:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b83e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b842:	f7f7 fec7 	bl	335d4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3b846:	4605      	mov	r5, r0
   3b848:	2800      	cmp	r0, #0
   3b84a:	f000 80a2 	beq.w	3b992 <isr_rx+0x1ae>
   3b84e:	7b23      	ldrb	r3, [r4, #12]
   3b850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   3b854:	f105 011c 	add.w	r1, r5, #28
   3b858:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   3b85a:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   3b85c:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   3b860:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   3b864:	f000 0c0f 	and.w	ip, r0, #15
   3b868:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   3b86c:	bf08      	it	eq
   3b86e:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   3b872:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   3b876:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b87a:	7f28      	ldrb	r0, [r5, #28]
   3b87c:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   3b880:	bf18      	it	ne
   3b882:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b886:	2803      	cmp	r0, #3
   3b888:	d05a      	beq.n	3b940 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3b88a:	2805      	cmp	r0, #5
   3b88c:	d1b4      	bne.n	3b7f8 <isr_rx+0x14>
   3b88e:	7f68      	ldrb	r0, [r5, #29]
   3b890:	2822      	cmp	r0, #34	; 0x22
   3b892:	d1b1      	bne.n	3b7f8 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b894:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   3b896:	2800      	cmp	r0, #0
   3b898:	d0ae      	beq.n	3b7f8 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b89a:	f890 0020 	ldrb.w	r0, [r0, #32]
   3b89e:	0780      	lsls	r0, r0, #30
   3b8a0:	d4aa      	bmi.n	3b7f8 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   3b8a2:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   3b8a6:	9003      	str	r0, [sp, #12]
   3b8a8:	e9cd 8901 	strd	r8, r9, [sp, #4]
   3b8ac:	9700      	str	r7, [sp, #0]
   3b8ae:	4620      	mov	r0, r4
   3b8b0:	f7ff ff30 	bl	3b714 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b8b4:	2800      	cmp	r0, #0
   3b8b6:	d09f      	beq.n	3b7f8 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   3b8b8:	2004      	movs	r0, #4
   3b8ba:	f7f7 fe8b 	bl	335d4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   3b8be:	2800      	cmp	r0, #0
   3b8c0:	d09a      	beq.n	3b7f8 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   3b8c2:	484b      	ldr	r0, [pc, #300]	; (3b9f0 <isr_rx+0x20c>)
   3b8c4:	4621      	mov	r1, r4
   3b8c6:	f000 fe3d 	bl	3c544 <radio_isr_set>
		radio_disable();
   3b8ca:	f000 ff2b 	bl	3c724 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   3b8ce:	f000 ff49 	bl	3c764 <radio_is_ready>
   3b8d2:	2800      	cmp	r0, #0
   3b8d4:	d14f      	bne.n	3b976 <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   3b8d6:	6862      	ldr	r2, [r4, #4]
   3b8d8:	f892 3020 	ldrb.w	r3, [r2, #32]
   3b8dc:	f043 0301 	orr.w	r3, r3, #1
   3b8e0:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   3b8e4:	f7f7 fe94 	bl	33610 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3b8e8:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   3b8ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3b8ee:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   3b8f0:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   3b8f2:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   3b8f4:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   3b8f6:	f001 f919 	bl	3cb2c <radio_tmr_start_get>
   3b8fa:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   3b8fc:	f001 f96a 	bl	3cbd4 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   3b900:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   3b902:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   3b904:	4608      	mov	r0, r1
   3b906:	f000 ff01 	bl	3c70c <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   3b90a:	1a24      	subs	r4, r4, r0
   3b90c:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   3b90e:	b1ae      	cbz	r6, 3b93c <isr_rx+0x158>
   3b910:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   3b914:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   3b916:	f7f7 fe7b 	bl	33610 <ull_pdu_rx_alloc>
   3b91a:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   3b91c:	4629      	mov	r1, r5
   3b91e:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   3b920:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   3b922:	f7f7 fe8b 	bl	3363c <ull_rx_put>
		ull_rx_sched();
   3b926:	f7f7 fe99 	bl	3365c <ull_rx_sched>
}
   3b92a:	b00b      	add	sp, #44	; 0x2c
   3b92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b930:	fa5f f088 	uxtb.w	r0, r8
   3b934:	f7fe fcb6 	bl	3a2a4 <ull_filter_lll_rl_irk_idx>
   3b938:	4603      	mov	r3, r0
   3b93a:	e77f      	b.n	3b83c <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   3b93c:	23ff      	movs	r3, #255	; 0xff
   3b93e:	e7e9      	b.n	3b914 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b940:	7f68      	ldrb	r0, [r5, #29]
   3b942:	280c      	cmp	r0, #12
   3b944:	f47f af58 	bne.w	3b7f8 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   3b948:	f1b8 0f00 	cmp.w	r8, #0
   3b94c:	f47f af54 	bne.w	3b7f8 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   3b950:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   3b954:	9001      	str	r0, [sp, #4]
   3b956:	f8cd 9000 	str.w	r9, [sp]
   3b95a:	4620      	mov	r0, r4
   3b95c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3b960:	9105      	str	r1, [sp, #20]
   3b962:	f7ff fe9f 	bl	3b6a4 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   3b966:	bb10      	cbnz	r0, 3b9ae <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3b968:	7f28      	ldrb	r0, [r5, #28]
   3b96a:	9b07      	ldr	r3, [sp, #28]
   3b96c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   3b970:	f000 000f 	and.w	r0, r0, #15
   3b974:	e789      	b.n	3b88a <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   3b976:	4a1f      	ldr	r2, [pc, #124]	; (3b9f4 <isr_rx+0x210>)
   3b978:	491f      	ldr	r1, [pc, #124]	; (3b9f8 <isr_rx+0x214>)
   3b97a:	4820      	ldr	r0, [pc, #128]	; (3b9fc <isr_rx+0x218>)
   3b97c:	f240 53da 	movw	r3, #1498	; 0x5da
   3b980:	f007 f9c6 	bl	42d10 <printk>
   3b984:	4040      	eors	r0, r0
   3b986:	f380 8811 	msr	BASEPRI, r0
   3b98a:	f04f 0003 	mov.w	r0, #3
   3b98e:	df02      	svc	2
   3b990:	e7a1      	b.n	3b8d6 <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   3b992:	4a18      	ldr	r2, [pc, #96]	; (3b9f4 <isr_rx+0x210>)
   3b994:	491a      	ldr	r1, [pc, #104]	; (3ba00 <isr_rx+0x21c>)
   3b996:	4819      	ldr	r0, [pc, #100]	; (3b9fc <isr_rx+0x218>)
   3b998:	f240 537a 	movw	r3, #1402	; 0x57a
   3b99c:	f007 f9b8 	bl	42d10 <printk>
   3b9a0:	4040      	eors	r0, r0
   3b9a2:	f380 8811 	msr	BASEPRI, r0
   3b9a6:	f04f 0003 	mov.w	r0, #3
   3b9aa:	df02      	svc	2
   3b9ac:	e74f      	b.n	3b84e <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   3b9ae:	4621      	mov	r1, r4
   3b9b0:	480e      	ldr	r0, [pc, #56]	; (3b9ec <isr_rx+0x208>)
   3b9b2:	f000 fdc7 	bl	3c544 <radio_isr_set>
		radio_switch_complete_and_disable();
   3b9b6:	f000 ffb9 	bl	3c92c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   3b9ba:	7e23      	ldrb	r3, [r4, #24]
   3b9bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   3b9c0:	69e0      	ldr	r0, [r4, #28]
   3b9c2:	f000 fe99 	bl	3c6f8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   3b9c6:	f000 fecd 	bl	3c764 <radio_is_ready>
   3b9ca:	2800      	cmp	r0, #0
   3b9cc:	d0ad      	beq.n	3b92a <isr_rx+0x146>
   3b9ce:	4a09      	ldr	r2, [pc, #36]	; (3b9f4 <isr_rx+0x210>)
   3b9d0:	4909      	ldr	r1, [pc, #36]	; (3b9f8 <isr_rx+0x214>)
   3b9d2:	480a      	ldr	r0, [pc, #40]	; (3b9fc <isr_rx+0x218>)
   3b9d4:	f240 5393 	movw	r3, #1427	; 0x593
   3b9d8:	f007 f99a 	bl	42d10 <printk>
   3b9dc:	4040      	eors	r0, r0
   3b9de:	f380 8811 	msr	BASEPRI, r0
   3b9e2:	f04f 0003 	mov.w	r0, #3
   3b9e6:	df02      	svc	2
		if (!err) {
   3b9e8:	e79f      	b.n	3b92a <isr_rx+0x146>
   3b9ea:	bf00      	nop
   3b9ec:	0003b495 	.word	0x0003b495
   3b9f0:	0003af7d 	.word	0x0003af7d
   3b9f4:	0004af14 	.word	0x0004af14
   3b9f8:	0004af68 	.word	0x0004af68
   3b9fc:	0004a4a0 	.word	0x0004a4a0
   3ba00:	0004af60 	.word	0x0004af60

0003ba04 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   3ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ba06:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   3ba08:	f7ff f8d4 	bl	3abb4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   3ba0c:	f7f7 fee0 	bl	337d0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   3ba10:	4604      	mov	r4, r0
   3ba12:	2800      	cmp	r0, #0
   3ba14:	d036      	beq.n	3ba84 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   3ba16:	4922      	ldr	r1, [pc, #136]	; (3baa0 <isr_done+0x9c>)
   3ba18:	79a2      	ldrb	r2, [r4, #6]
   3ba1a:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   3ba1c:	4b21      	ldr	r3, [pc, #132]	; (3baa4 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   3ba1e:	f360 0200 	bfi	r2, r0, #0, #1
   3ba22:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   3ba24:	4a20      	ldr	r2, [pc, #128]	; (3baa8 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   3ba26:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   3ba28:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   3ba2a:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   3ba2c:	2101      	movs	r1, #1
   3ba2e:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   3ba30:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   3ba32:	b11b      	cbz	r3, 3ba3c <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   3ba34:	f995 301d 	ldrsb.w	r3, [r5, #29]
   3ba38:	2b00      	cmp	r3, #0
   3ba3a:	db04      	blt.n	3ba46 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   3ba3c:	4628      	mov	r0, r5
}
   3ba3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3ba42:	f7ff b8c5 	b.w	3abd0 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   3ba46:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   3ba4a:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   3ba4e:	2b02      	cmp	r3, #2
   3ba50:	d016      	beq.n	3ba80 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   3ba52:	2b04      	cmp	r3, #4
   3ba54:	bf14      	ite	ne
   3ba56:	2728      	movne	r7, #40	; 0x28
   3ba58:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3ba5c:	f001 f8a6 	bl	3cbac <radio_tmr_aa_restore>
   3ba60:	4606      	mov	r6, r0
   3ba62:	f001 f8a9 	bl	3cbb8 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   3ba66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   3ba68:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3ba6a:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   3ba6c:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   3ba70:	2300      	movs	r3, #0
   3ba72:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   3ba74:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   3ba76:	4628      	mov	r0, r5
}
   3ba78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3ba7c:	f7ff b8a8 	b.w	3abd0 <lll_isr_cleanup>
	switch (phy) {
   3ba80:	2718      	movs	r7, #24
   3ba82:	e7eb      	b.n	3ba5c <isr_done+0x58>
	LL_ASSERT(e);
   3ba84:	4a09      	ldr	r2, [pc, #36]	; (3baac <isr_done+0xa8>)
   3ba86:	490a      	ldr	r1, [pc, #40]	; (3bab0 <isr_done+0xac>)
   3ba88:	480a      	ldr	r0, [pc, #40]	; (3bab4 <isr_done+0xb0>)
   3ba8a:	f240 3317 	movw	r3, #791	; 0x317
   3ba8e:	f007 f93f 	bl	42d10 <printk>
   3ba92:	4040      	eors	r0, r0
   3ba94:	f380 8811 	msr	BASEPRI, r0
   3ba98:	f04f 0003 	mov.w	r0, #3
   3ba9c:	df02      	svc	2
   3ba9e:	e7ba      	b.n	3ba16 <isr_done+0x12>
   3baa0:	20003c75 	.word	0x20003c75
   3baa4:	20003b4e 	.word	0x20003b4e
   3baa8:	20003c76 	.word	0x20003c76
   3baac:	0004afac 	.word	0x0004afac
   3bab0:	0004a838 	.word	0x0004a838
   3bab4:	0004a4a0 	.word	0x0004a4a0

0003bab8 <lll_conn_init>:
{
   3bab8:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   3baba:	f000 fe87 	bl	3c7cc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3babe:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   3bac0:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3bac2:	2101      	movs	r1, #1
   3bac4:	f361 0201 	bfi	r2, r1, #0, #2
}
   3bac8:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3baca:	701a      	strb	r2, [r3, #0]
}
   3bacc:	bd08      	pop	{r3, pc}
   3bace:	bf00      	nop

0003bad0 <lll_conn_reset>:
}
   3bad0:	2000      	movs	r0, #0
   3bad2:	4770      	bx	lr

0003bad4 <lll_conn_flush>:
}
   3bad4:	4770      	bx	lr
   3bad6:	bf00      	nop

0003bad8 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   3bad8:	4805      	ldr	r0, [pc, #20]	; (3baf0 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   3bada:	4906      	ldr	r1, [pc, #24]	; (3baf4 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   3badc:	4a06      	ldr	r2, [pc, #24]	; (3baf8 <lll_conn_prepare_reset+0x20>)
{
   3bade:	b410      	push	{r4}
	trx_cnt = 0U;
   3bae0:	2300      	movs	r3, #0
   3bae2:	4c06      	ldr	r4, [pc, #24]	; (3bafc <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   3bae4:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   3bae6:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   3bae8:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   3baea:	8023      	strh	r3, [r4, #0]
}
   3baec:	bc10      	pop	{r4}
   3baee:	4770      	bx	lr
   3baf0:	20003c75 	.word	0x20003c75
   3baf4:	20003c74 	.word	0x20003c74
   3baf8:	20003c76 	.word	0x20003c76
   3bafc:	20003b4e 	.word	0x20003b4e

0003bb00 <lll_conn_abort_cb>:
{
   3bb00:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   3bb02:	b1e8      	cbz	r0, 3bb40 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   3bb04:	460d      	mov	r5, r1
   3bb06:	4604      	mov	r4, r0
   3bb08:	f7ff fa12 	bl	3af30 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3bb0c:	2800      	cmp	r0, #0
   3bb0e:	db0a      	blt.n	3bb26 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   3bb10:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   3bb12:	8923      	ldrh	r3, [r4, #8]
   3bb14:	8a51      	ldrh	r1, [r2, #18]
   3bb16:	3301      	adds	r3, #1
   3bb18:	440b      	add	r3, r1
   3bb1a:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   3bb1c:	4628      	mov	r0, r5
}
   3bb1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   3bb22:	f7fe bf7d 	b.w	3aa20 <lll_done>
	LL_ASSERT(err >= 0);
   3bb26:	4a0a      	ldr	r2, [pc, #40]	; (3bb50 <lll_conn_abort_cb+0x50>)
   3bb28:	490a      	ldr	r1, [pc, #40]	; (3bb54 <lll_conn_abort_cb+0x54>)
   3bb2a:	480b      	ldr	r0, [pc, #44]	; (3bb58 <lll_conn_abort_cb+0x58>)
   3bb2c:	23aa      	movs	r3, #170	; 0xaa
   3bb2e:	f007 f8ef 	bl	42d10 <printk>
   3bb32:	4040      	eors	r0, r0
   3bb34:	f380 8811 	msr	BASEPRI, r0
   3bb38:	f04f 0003 	mov.w	r0, #3
   3bb3c:	df02      	svc	2
   3bb3e:	e7e7      	b.n	3bb10 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   3bb40:	4806      	ldr	r0, [pc, #24]	; (3bb5c <lll_conn_abort_cb+0x5c>)
   3bb42:	f000 fcff 	bl	3c544 <radio_isr_set>
}
   3bb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   3bb4a:	f000 bdeb 	b.w	3c724 <radio_disable>
   3bb4e:	bf00      	nop
   3bb50:	0004afac 	.word	0x0004afac
   3bb54:	0004aec4 	.word	0x0004aec4
   3bb58:	0004a4a0 	.word	0x0004a4a0
   3bb5c:	0003ba05 	.word	0x0003ba05

0003bb60 <lll_conn_rx_pkt_set>:
{
   3bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bb62:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   3bb64:	2001      	movs	r0, #1
   3bb66:	f7f7 fd35 	bl	335d4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3bb6a:	4604      	mov	r4, r0
   3bb6c:	b348      	cbz	r0, 3bbc2 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   3bb6e:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   3bb72:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   3bb74:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   3bb78:	2100      	movs	r1, #0
   3bb7a:	4630      	mov	r0, r6
   3bb7c:	f000 fd48 	bl	3c610 <radio_phy_set>
	} else if (lll->enc_rx) {
   3bb80:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3bb84:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   3bb86:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3bb88:	b2f9      	uxtb	r1, r7
   3bb8a:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   3bb8e:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   3bb92:	d50e      	bpl.n	3bbb2 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3bb94:	3104      	adds	r1, #4
   3bb96:	b2c9      	uxtb	r1, r1
   3bb98:	2008      	movs	r0, #8
   3bb9a:	f000 fd7f 	bl	3c69c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3bb9e:	4622      	mov	r2, r4
   3bba0:	4631      	mov	r1, r6
   3bba2:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   3bba6:	f001 f821 	bl	3cbec <radio_ccm_rx_pkt_set>
}
   3bbaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3bbae:	f000 bd9d 	b.w	3c6ec <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   3bbb2:	2008      	movs	r0, #8
   3bbb4:	f000 fd72 	bl	3c69c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   3bbb8:	4620      	mov	r0, r4
}
   3bbba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   3bbbe:	f000 bd95 	b.w	3c6ec <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   3bbc2:	4a07      	ldr	r2, [pc, #28]	; (3bbe0 <lll_conn_rx_pkt_set+0x80>)
   3bbc4:	4907      	ldr	r1, [pc, #28]	; (3bbe4 <lll_conn_rx_pkt_set+0x84>)
   3bbc6:	4808      	ldr	r0, [pc, #32]	; (3bbe8 <lll_conn_rx_pkt_set+0x88>)
   3bbc8:	f240 235a 	movw	r3, #602	; 0x25a
   3bbcc:	f007 f8a0 	bl	42d10 <printk>
   3bbd0:	4040      	eors	r0, r0
   3bbd2:	f380 8811 	msr	BASEPRI, r0
   3bbd6:	f04f 0003 	mov.w	r0, #3
   3bbda:	df02      	svc	2
   3bbdc:	e7c7      	b.n	3bb6e <lll_conn_rx_pkt_set+0xe>
   3bbde:	bf00      	nop
   3bbe0:	0004afac 	.word	0x0004afac
   3bbe4:	0004af60 	.word	0x0004af60
   3bbe8:	0004a4a0 	.word	0x0004a4a0

0003bbec <lll_conn_isr_tx>:
{
   3bbec:	b538      	push	{r3, r4, r5, lr}
   3bbee:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   3bbf0:	f7fe ffce 	bl	3ab90 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3bbf4:	2096      	movs	r0, #150	; 0x96
   3bbf6:	f000 ff0b 	bl	3ca10 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3bbfa:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3bbfe:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3bc02:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3bc06:	f000 0007 	and.w	r0, r0, #7
   3bc0a:	f002 0207 	and.w	r2, r2, #7
   3bc0e:	2100      	movs	r1, #0
   3bc10:	f000 fe2c 	bl	3c86c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   3bc14:	4620      	mov	r0, r4
   3bc16:	f7ff ffa3 	bl	3bb60 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3bc1a:	f000 fda3 	bl	3c764 <radio_is_ready>
   3bc1e:	bb58      	cbnz	r0, 3bc78 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   3bc20:	f000 ffde 	bl	3cbe0 <radio_tmr_tifs_base_get>
   3bc24:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3bc26:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3bc2a:	2101      	movs	r1, #1
   3bc2c:	f000 0007 	and.w	r0, r0, #7
   3bc30:	f000 fd6c 	bl	3c70c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   3bc34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3bc38:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3bc3c:	4405      	add	r5, r0
   3bc3e:	2b02      	cmp	r3, #2
   3bc40:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   3bc44:	d016      	beq.n	3bc74 <lll_conn_isr_tx+0x88>
		return 376;
   3bc46:	2b04      	cmp	r3, #4
   3bc48:	bf14      	ite	ne
   3bc4a:	2328      	movne	r3, #40	; 0x28
   3bc4c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3bc50:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   3bc54:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   3bc58:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   3bc5c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3bc5e:	f000 fd51 	bl	3c704 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   3bc62:	1a28      	subs	r0, r5, r0
   3bc64:	f000 ff74 	bl	3cb50 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   3bc68:	4621      	mov	r1, r4
   3bc6a:	480a      	ldr	r0, [pc, #40]	; (3bc94 <lll_conn_isr_tx+0xa8>)
}
   3bc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   3bc70:	f000 bc68 	b.w	3c544 <radio_isr_set>
	switch (phy) {
   3bc74:	2318      	movs	r3, #24
   3bc76:	e7eb      	b.n	3bc50 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   3bc78:	4a07      	ldr	r2, [pc, #28]	; (3bc98 <lll_conn_isr_tx+0xac>)
   3bc7a:	4908      	ldr	r1, [pc, #32]	; (3bc9c <lll_conn_isr_tx+0xb0>)
   3bc7c:	4808      	ldr	r0, [pc, #32]	; (3bca0 <lll_conn_isr_tx+0xb4>)
   3bc7e:	f240 2313 	movw	r3, #531	; 0x213
   3bc82:	f007 f845 	bl	42d10 <printk>
   3bc86:	4040      	eors	r0, r0
   3bc88:	f380 8811 	msr	BASEPRI, r0
   3bc8c:	f04f 0003 	mov.w	r0, #3
   3bc90:	df02      	svc	2
   3bc92:	e7c5      	b.n	3bc20 <lll_conn_isr_tx+0x34>
   3bc94:	0003bddd 	.word	0x0003bddd
   3bc98:	0004afac 	.word	0x0004afac
   3bc9c:	0004af68 	.word	0x0004af68
   3bca0:	0004a4a0 	.word	0x0004a4a0

0003bca4 <lll_conn_tx_pkt_set>:
{
   3bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bca6:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   3bca8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   3bcac:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   3bcae:	f001 0407 	and.w	r4, r1, #7
{
   3bcb2:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   3bcb4:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   3bcb8:	4620      	mov	r0, r4
   3bcba:	f000 fca9 	bl	3c610 <radio_phy_set>
	} else if (lll->enc_tx) {
   3bcbe:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3bcc2:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   3bcc4:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3bcc6:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3bcca:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   3bccc:	d50d      	bpl.n	3bcea <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3bcce:	3104      	adds	r1, #4
   3bcd0:	b2c9      	uxtb	r1, r1
   3bcd2:	2008      	movs	r0, #8
   3bcd4:	f000 fce2 	bl	3c69c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3bcd8:	4639      	mov	r1, r7
   3bcda:	f105 0080 	add.w	r0, r5, #128	; 0x80
   3bcde:	f000 ffc3 	bl	3cc68 <radio_ccm_tx_pkt_set>
}
   3bce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3bce6:	f000 bd07 	b.w	3c6f8 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   3bcea:	2008      	movs	r0, #8
   3bcec:	f000 fcd6 	bl	3c69c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   3bcf0:	4638      	mov	r0, r7
}
   3bcf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   3bcf6:	f000 bcff 	b.w	3c6f8 <radio_pkt_tx_set>
   3bcfa:	bf00      	nop

0003bcfc <lll_conn_pdu_tx_prep>:
{
   3bcfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3bd00:	4604      	mov	r4, r0
   3bd02:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3bd04:	aa01      	add	r2, sp, #4
   3bd06:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   3bd08:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3bd0a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   3bd0c:	f7f3 ffb4 	bl	2fc78 <memq_peek>
	if (lll->empty || !link) {
   3bd10:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bd14:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3bd16:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   3bd18:	d432      	bmi.n	3bd80 <lll_conn_pdu_tx_prep+0x84>
   3bd1a:	2800      	cmp	r0, #0
   3bd1c:	d04e      	beq.n	3bdbc <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3bd1e:	9b01      	ldr	r3, [sp, #4]
   3bd20:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   3bd24:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   3bd28:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3bd2c:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   3bd30:	b913      	cbnz	r3, 3bd38 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   3bd32:	786b      	ldrb	r3, [r5, #1]
   3bd34:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   3bd38:	b137      	cbz	r7, 3bd48 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3bd3a:	f818 2007 	ldrb.w	r2, [r8, r7]
   3bd3e:	2101      	movs	r1, #1
   3bd40:	f361 0201 	bfi	r2, r1, #0, #2
   3bd44:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   3bd48:	1bdb      	subs	r3, r3, r7
   3bd4a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   3bd4c:	4620      	mov	r0, r4
   3bd4e:	f7fd f99b 	bl	39088 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   3bd52:	786b      	ldrb	r3, [r5, #1]
   3bd54:	4283      	cmp	r3, r0
   3bd56:	d924      	bls.n	3bda2 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   3bd58:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   3bd5a:	f818 3007 	ldrb.w	r3, [r8, r7]
   3bd5e:	f043 0310 	orr.w	r3, r3, #16
   3bd62:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   3bd66:	f818 3007 	ldrb.w	r3, [r8, r7]
   3bd6a:	f36f 1347 	bfc	r3, #5, #3
   3bd6e:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   3bd72:	2300      	movs	r3, #0
   3bd74:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   3bd76:	f8c9 5000 	str.w	r5, [r9]
}
   3bd7a:	b003      	add	sp, #12
   3bd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   3bd80:	f043 0304 	orr.w	r3, r3, #4
   3bd84:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3bd88:	f000 fd20 	bl	3c7cc <radio_pkt_empty_get>
   3bd8c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   3bd8e:	b1e6      	cbz	r6, 3bdca <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   3bd90:	7803      	ldrb	r3, [r0, #0]
   3bd92:	f043 0310 	orr.w	r3, r3, #16
   3bd96:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   3bd98:	f8c9 5000 	str.w	r5, [r9]
}
   3bd9c:	b003      	add	sp, #12
   3bd9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   3bda2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   3bda4:	6832      	ldr	r2, [r6, #0]
   3bda6:	429a      	cmp	r2, r3
			p->md = 1U;
   3bda8:	f818 3007 	ldrb.w	r3, [r8, r7]
   3bdac:	bf14      	ite	ne
   3bdae:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   3bdb2:	f36f 1304 	bfceq	r3, #4, #1
   3bdb6:	f808 3007 	strb.w	r3, [r8, r7]
   3bdba:	e7d4      	b.n	3bd66 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   3bdbc:	f043 0304 	orr.w	r3, r3, #4
   3bdc0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3bdc4:	f000 fd02 	bl	3c7cc <radio_pkt_empty_get>
   3bdc8:	4605      	mov	r5, r0
			p->md = 0U;
   3bdca:	782b      	ldrb	r3, [r5, #0]
   3bdcc:	f36f 1304 	bfc	r3, #4, #1
   3bdd0:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   3bdd2:	f8c9 5000 	str.w	r5, [r9]
}
   3bdd6:	b003      	add	sp, #12
   3bdd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0003bddc <lll_conn_isr_rx>:
{
   3bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bdde:	b083      	sub	sp, #12
   3bde0:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3bde2:	f000 fcc9 	bl	3c778 <radio_is_done>
	if (trx_done) {
   3bde6:	b2c0      	uxtb	r0, r0
   3bde8:	b950      	cbnz	r0, 3be00 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   3bdea:	f7fe fed9 	bl	3aba0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   3bdee:	48ae      	ldr	r0, [pc, #696]	; (3c0a8 <lll_conn_isr_rx+0x2cc>)
   3bdf0:	4621      	mov	r1, r4
   3bdf2:	f000 fba7 	bl	3c544 <radio_isr_set>
}
   3bdf6:	b003      	add	sp, #12
   3bdf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   3bdfc:	f000 bc92 	b.w	3c724 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3be00:	f000 fcda 	bl	3c7b8 <radio_crc_is_valid>
   3be04:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   3be06:	f000 fda7 	bl	3c958 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   3be0a:	f7fe fec9 	bl	3aba0 <lll_isr_rx_status_reset>
	trx_cnt++;
   3be0e:	4aa7      	ldr	r2, [pc, #668]	; (3c0ac <lll_conn_isr_rx+0x2d0>)
   3be10:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3be12:	2001      	movs	r0, #1
	trx_cnt++;
   3be14:	4403      	add	r3, r0
   3be16:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3be18:	f7f7 fbdc 	bl	335d4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3be1c:	4606      	mov	r6, r0
   3be1e:	2800      	cmp	r0, #0
   3be20:	f000 80bf 	beq.w	3bfa2 <lll_conn_isr_rx+0x1c6>
	if (crc_ok) {
   3be24:	2d00      	cmp	r5, #0
   3be26:	d155      	bne.n	3bed4 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   3be28:	4ba1      	ldr	r3, [pc, #644]	; (3c0b0 <lll_conn_isr_rx+0x2d4>)
   3be2a:	781f      	ldrb	r7, [r3, #0]
   3be2c:	2f00      	cmp	r7, #0
   3be2e:	f040 80a7 	bne.w	3bf80 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   3be32:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3be34:	a901      	add	r1, sp, #4
   3be36:	4620      	mov	r0, r4
		crc_expire--;
   3be38:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3be3a:	f7ff ff5f 	bl	3bcfc <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   3be3e:	2096      	movs	r0, #150	; 0x96
   3be40:	f000 fde6 	bl	3ca10 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   3be44:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3be48:	f000 0007 	and.w	r0, r0, #7
   3be4c:	f000 fcc6 	bl	3c7dc <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   3be50:	4898      	ldr	r0, [pc, #608]	; (3c0b4 <lll_conn_isr_rx+0x2d8>)
   3be52:	4621      	mov	r1, r4
   3be54:	f000 fb76 	bl	3c544 <radio_isr_set>
		radio_tmr_end_capture();
   3be58:	f000 feb4 	bl	3cbc4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   3be5c:	9901      	ldr	r1, [sp, #4]
   3be5e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   3be62:	780b      	ldrb	r3, [r1, #0]
   3be64:	f023 000c 	bic.w	r0, r3, #12
   3be68:	f3c2 0340 	ubfx	r3, r2, #1, #1
   3be6c:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   3be6e:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   3be72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   3be76:	4303      	orrs	r3, r0
   3be78:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   3be7a:	4620      	mov	r0, r4
   3be7c:	f7ff ff12 	bl	3bca4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3be80:	f000 fc70 	bl	3c764 <radio_is_ready>
   3be84:	2800      	cmp	r0, #0
   3be86:	f040 80bb 	bne.w	3c000 <lll_conn_isr_rx+0x224>
	if (!radio_tmr_aa_restore()) {
   3be8a:	f000 fe8f 	bl	3cbac <radio_tmr_aa_restore>
   3be8e:	b170      	cbz	r0, 3beae <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   3be90:	b19d      	cbz	r5, 3beba <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   3be92:	89a0      	ldrh	r0, [r4, #12]
   3be94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3be98:	4298      	cmp	r0, r3
   3be9a:	f000 80bf 	beq.w	3c01c <lll_conn_isr_rx+0x240>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3be9e:	4629      	mov	r1, r5
   3bea0:	f7fc ff82 	bl	38da8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   3bea4:	b95f      	cbnz	r7, 3bebe <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   3bea6:	f7f7 fbd9 	bl	3365c <ull_rx_sched>
}
   3beaa:	b003      	add	sp, #12
   3beac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   3beae:	f000 fe71 	bl	3cb94 <radio_tmr_aa_get>
   3beb2:	f000 fe75 	bl	3cba0 <radio_tmr_aa_save>
	if (tx_release) {
   3beb6:	2d00      	cmp	r5, #0
   3beb8:	d1eb      	bne.n	3be92 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   3beba:	2f00      	cmp	r7, #0
   3bebc:	d0f5      	beq.n	3beaa <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   3bebe:	f7f7 fba7 	bl	33610 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3bec2:	2303      	movs	r3, #3
   3bec4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   3bec6:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3bec8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   3beca:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3becc:	4631      	mov	r1, r6
   3bece:	f7f7 fbb5 	bl	3363c <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   3bed2:	e7e8      	b.n	3bea6 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   3bed4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bed8:	7f32      	ldrb	r2, [r6, #28]
   3beda:	f003 0101 	and.w	r1, r3, #1
   3bede:	f3c2 0080 	ubfx	r0, r2, #2, #1
   3bee2:	4288      	cmp	r0, r1
   3bee4:	d06d      	beq.n	3bfc2 <lll_conn_isr_rx+0x1e6>
		if (lll->role) {
   3bee6:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   3beea:	f081 0101 	eor.w	r1, r1, #1
   3beee:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   3bef2:	2a00      	cmp	r2, #0
		lll->sn++;
   3bef4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   3bef8:	da05      	bge.n	3bf06 <lll_conn_isr_rx+0x12a>
			lll->periph.latency_enabled = 1;
   3befa:	f894 3020 	ldrb.w	r3, [r4, #32]
   3befe:	f043 0304 	orr.w	r3, r3, #4
   3bf02:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   3bf06:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bf0a:	075a      	lsls	r2, r3, #29
   3bf0c:	f100 8095 	bmi.w	3c03a <lll_conn_isr_rx+0x25e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   3bf10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3bf14:	aa01      	add	r2, sp, #4
   3bf16:	f7f3 feaf 	bl	2fc78 <memq_peek>
		if (link) {
   3bf1a:	4605      	mov	r5, r0
   3bf1c:	2800      	cmp	r0, #0
   3bf1e:	f000 80bf 	beq.w	3c0a0 <lll_conn_isr_rx+0x2c4>
					       lll->packet_tx_head_offset);
   3bf22:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   3bf26:	9b01      	ldr	r3, [sp, #4]
   3bf28:	4413      	add	r3, r2
   3bf2a:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   3bf2c:	b171      	cbz	r1, 3bf4c <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   3bf2e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bf32:	06df      	lsls	r7, r3, #27
   3bf34:	d50a      	bpl.n	3bf4c <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   3bf36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   3bf3a:	3301      	adds	r3, #1
   3bf3c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   3bf40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3bf44:	f143 0300 	adc.w	r3, r3, #0
   3bf48:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   3bf4c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   3bf50:	440a      	add	r2, r1
   3bf52:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   3bf54:	429a      	cmp	r2, r3
   3bf56:	d37b      	bcc.n	3c050 <lll_conn_isr_rx+0x274>
			} else if (offset == lll->packet_tx_head_len) {
   3bf58:	f000 8095 	beq.w	3c086 <lll_conn_isr_rx+0x2aa>
				LL_ASSERT(0);
   3bf5c:	4a56      	ldr	r2, [pc, #344]	; (3c0b8 <lll_conn_isr_rx+0x2dc>)
   3bf5e:	4957      	ldr	r1, [pc, #348]	; (3c0bc <lll_conn_isr_rx+0x2e0>)
   3bf60:	4857      	ldr	r0, [pc, #348]	; (3c0c0 <lll_conn_isr_rx+0x2e4>)
   3bf62:	f240 33a3 	movw	r3, #931	; 0x3a3
   3bf66:	f006 fed3 	bl	42d10 <printk>
   3bf6a:	4040      	eors	r0, r0
   3bf6c:	f380 8811 	msr	BASEPRI, r0
   3bf70:	f04f 0003 	mov.w	r0, #3
   3bf74:	df02      	svc	2
	tx_release = NULL;
   3bf76:	2500      	movs	r5, #0
   3bf78:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bf7c:	7f32      	ldrb	r2, [r6, #28]
   3bf7e:	e021      	b.n	3bfc4 <lll_conn_isr_rx+0x1e8>
		crc_expire--;
   3bf80:	3f01      	subs	r7, #1
   3bf82:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bf84:	a901      	add	r1, sp, #4
   3bf86:	4620      	mov	r0, r4
		crc_expire--;
   3bf88:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bf8a:	f7ff feb7 	bl	3bcfc <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bf8e:	2f00      	cmp	r7, #0
   3bf90:	f040 80eb 	bne.w	3c16a <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   3bf94:	4844      	ldr	r0, [pc, #272]	; (3c0a8 <lll_conn_isr_rx+0x2cc>)
   3bf96:	4621      	mov	r1, r4
   3bf98:	f000 fad4 	bl	3c544 <radio_isr_set>
			radio_switch_complete_and_disable();
   3bf9c:	f000 fcc6 	bl	3c92c <radio_switch_complete_and_disable>
   3bfa0:	e75c      	b.n	3be5c <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   3bfa2:	4a45      	ldr	r2, [pc, #276]	; (3c0b8 <lll_conn_isr_rx+0x2dc>)
   3bfa4:	4947      	ldr	r1, [pc, #284]	; (3c0c4 <lll_conn_isr_rx+0x2e8>)
   3bfa6:	4846      	ldr	r0, [pc, #280]	; (3c0c0 <lll_conn_isr_rx+0x2e4>)
   3bfa8:	23f2      	movs	r3, #242	; 0xf2
   3bfaa:	f006 feb1 	bl	42d10 <printk>
   3bfae:	4040      	eors	r0, r0
   3bfb0:	f380 8811 	msr	BASEPRI, r0
   3bfb4:	f04f 0003 	mov.w	r0, #3
   3bfb8:	df02      	svc	2
	if (crc_ok) {
   3bfba:	2d00      	cmp	r5, #0
   3bfbc:	f43f af34 	beq.w	3be28 <lll_conn_isr_rx+0x4c>
   3bfc0:	e788      	b.n	3bed4 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   3bfc2:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   3bfc4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   3bfc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3bfcc:	429a      	cmp	r2, r3
   3bfce:	d046      	beq.n	3c05e <lll_conn_isr_rx+0x282>
	is_rx_enqueue = 0U;
   3bfd0:	2700      	movs	r7, #0
		crc_expire = 0U;
   3bfd2:	4a37      	ldr	r2, [pc, #220]	; (3c0b0 <lll_conn_isr_rx+0x2d4>)
		crc_valid = 1U;
   3bfd4:	4b3c      	ldr	r3, [pc, #240]	; (3c0c8 <lll_conn_isr_rx+0x2ec>)
		crc_expire = 0U;
   3bfd6:	2100      	movs	r1, #0
   3bfd8:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bfda:	4620      	mov	r0, r4
		crc_valid = 1U;
   3bfdc:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bfde:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   3bfe0:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bfe2:	f7ff fe8b 	bl	3bcfc <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bfe6:	7f33      	ldrb	r3, [r6, #28]
   3bfe8:	06d9      	lsls	r1, r3, #27
   3bfea:	f53f af28 	bmi.w	3be3e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   3bfee:	9b01      	ldr	r3, [sp, #4]
   3bff0:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bff2:	06d2      	lsls	r2, r2, #27
   3bff4:	f53f af23 	bmi.w	3be3e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   3bff8:	785b      	ldrb	r3, [r3, #1]
   3bffa:	2b00      	cmp	r3, #0
   3bffc:	d0ca      	beq.n	3bf94 <lll_conn_isr_rx+0x1b8>
   3bffe:	e71e      	b.n	3be3e <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   3c000:	4a2d      	ldr	r2, [pc, #180]	; (3c0b8 <lll_conn_isr_rx+0x2dc>)
   3c002:	4932      	ldr	r1, [pc, #200]	; (3c0cc <lll_conn_isr_rx+0x2f0>)
   3c004:	482e      	ldr	r0, [pc, #184]	; (3c0c0 <lll_conn_isr_rx+0x2e4>)
   3c006:	f240 1369 	movw	r3, #361	; 0x169
   3c00a:	f006 fe81 	bl	42d10 <printk>
   3c00e:	4040      	eors	r0, r0
   3c010:	f380 8811 	msr	BASEPRI, r0
   3c014:	f04f 0003 	mov.w	r0, #3
   3c018:	df02      	svc	2
   3c01a:	e736      	b.n	3be8a <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   3c01c:	4a26      	ldr	r2, [pc, #152]	; (3c0b8 <lll_conn_isr_rx+0x2dc>)
   3c01e:	492c      	ldr	r1, [pc, #176]	; (3c0d0 <lll_conn_isr_rx+0x2f4>)
   3c020:	4827      	ldr	r0, [pc, #156]	; (3c0c0 <lll_conn_isr_rx+0x2e4>)
   3c022:	f44f 73bc 	mov.w	r3, #376	; 0x178
   3c026:	f006 fe73 	bl	42d10 <printk>
   3c02a:	4040      	eors	r0, r0
   3c02c:	f380 8811 	msr	BASEPRI, r0
   3c030:	f04f 0003 	mov.w	r0, #3
   3c034:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3c036:	89a0      	ldrh	r0, [r4, #12]
   3c038:	e731      	b.n	3be9e <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   3c03a:	f36f 0382 	bfc	r3, #2, #1
   3c03e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   3c042:	f000 fbc3 	bl	3c7cc <radio_pkt_empty_get>
	tx_release = NULL;
   3c046:	2500      	movs	r5, #0
   3c048:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c04c:	7f32      	ldrb	r2, [r6, #28]
   3c04e:	e7b9      	b.n	3bfc4 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   3c050:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   3c054:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c058:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   3c05a:	2500      	movs	r5, #0
   3c05c:	e7b2      	b.n	3bfc4 <lll_conn_isr_rx+0x1e8>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   3c05e:	2003      	movs	r0, #3
   3c060:	f7f7 fab8 	bl	335d4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   3c064:	2800      	cmp	r0, #0
   3c066:	d0b3      	beq.n	3bfd0 <lll_conn_isr_rx+0x1f4>
		lll->nesn++;
   3c068:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c06c:	f083 0302 	eor.w	r3, r3, #2
   3c070:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   3c074:	7f73      	ldrb	r3, [r6, #29]
   3c076:	2b00      	cmp	r3, #0
   3c078:	d0aa      	beq.n	3bfd0 <lll_conn_isr_rx+0x1f4>
			if (lll->enc_rx) {
   3c07a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c07e:	0718      	lsls	r0, r3, #28
   3c080:	d428      	bmi.n	3c0d4 <lll_conn_isr_rx+0x2f8>
			*is_rx_enqueue = 1U;
   3c082:	2701      	movs	r7, #1
   3c084:	e7a5      	b.n	3bfd2 <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_len = 0;
   3c086:	2200      	movs	r2, #0
   3c088:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   3c08c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   3c08e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   3c092:	f7f3 fdf9 	bl	2fc88 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   3c096:	9b01      	ldr	r3, [sp, #4]
   3c098:	681a      	ldr	r2, [r3, #0]
   3c09a:	602a      	str	r2, [r5, #0]
				tx->next = link;
   3c09c:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   3c09e:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   3c0a0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c0a4:	7f32      	ldrb	r2, [r6, #28]
   3c0a6:	e78d      	b.n	3bfc4 <lll_conn_isr_rx+0x1e8>
   3c0a8:	0003ba05 	.word	0x0003ba05
   3c0ac:	20003b4e 	.word	0x20003b4e
   3c0b0:	20003c74 	.word	0x20003c74
   3c0b4:	0003bbed 	.word	0x0003bbed
   3c0b8:	0004afac 	.word	0x0004afac
   3c0bc:	0004a500 	.word	0x0004a500
   3c0c0:	0004a4a0 	.word	0x0004a4a0
   3c0c4:	0004af60 	.word	0x0004af60
   3c0c8:	20003c75 	.word	0x20003c75
   3c0cc:	0004af68 	.word	0x0004af68
   3c0d0:	0004b000 	.word	0x0004b000
				done = radio_ccm_is_done();
   3c0d4:	f000 fdf0 	bl	3ccb8 <radio_ccm_is_done>
				LL_ASSERT(done);
   3c0d8:	b3c8      	cbz	r0, 3c14e <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   3c0da:	f000 fe0f 	bl	3ccfc <radio_ccm_mic_is_valid>
				if (mic_failure &&
   3c0de:	bb30      	cbnz	r0, 3c12e <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   3c0e0:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   3c0e4:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   3c0e8:	4313      	orrs	r3, r2
   3c0ea:	d104      	bne.n	3c0f6 <lll_conn_isr_rx+0x31a>
				    (pdu_data_rx->ll_id ==
   3c0ec:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   3c0ee:	f003 0303 	and.w	r3, r3, #3
   3c0f2:	2b03      	cmp	r3, #3
   3c0f4:	d004      	beq.n	3c100 <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   3c0f6:	4b1e      	ldr	r3, [pc, #120]	; (3c170 <lll_conn_isr_rx+0x394>)
   3c0f8:	2202      	movs	r2, #2
   3c0fa:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   3c0fc:	2700      	movs	r7, #0
   3c0fe:	e6c4      	b.n	3be8a <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   3c100:	f000 fb68 	bl	3c7d4 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   3c104:	7843      	ldrb	r3, [r0, #1]
   3c106:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   3c108:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   3c10a:	d8f4      	bhi.n	3c0f6 <lll_conn_isr_rx+0x31a>
						memcpy(pdu_data_rx,
   3c10c:	3303      	adds	r3, #3
   3c10e:	b2da      	uxtb	r2, r3
   3c110:	f106 001c 	add.w	r0, r6, #28
   3c114:	f008 fed4 	bl	44ec0 <memcpy>
						lll->ccm_rx.counter--;
   3c118:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3c11c:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   3c120:	3b01      	subs	r3, #1
   3c122:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3c126:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   3c12a:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   3c12e:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   3c132:	4a0f      	ldr	r2, [pc, #60]	; (3c170 <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   3c134:	3301      	adds	r3, #1
   3c136:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3c13a:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   3c13e:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   3c142:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   3c146:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   3c148:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   3c14a:	7017      	strb	r7, [r2, #0]
		if (err) {
   3c14c:	e741      	b.n	3bfd2 <lll_conn_isr_rx+0x1f6>
				LL_ASSERT(done);
   3c14e:	4a09      	ldr	r2, [pc, #36]	; (3c174 <lll_conn_isr_rx+0x398>)
   3c150:	4909      	ldr	r1, [pc, #36]	; (3c178 <lll_conn_isr_rx+0x39c>)
   3c152:	480a      	ldr	r0, [pc, #40]	; (3c17c <lll_conn_isr_rx+0x3a0>)
   3c154:	f240 33be 	movw	r3, #958	; 0x3be
   3c158:	f006 fdda 	bl	42d10 <printk>
   3c15c:	4040      	eors	r0, r0
   3c15e:	f380 8811 	msr	BASEPRI, r0
   3c162:	f04f 0003 	mov.w	r0, #3
   3c166:	df02      	svc	2
   3c168:	e7b7      	b.n	3c0da <lll_conn_isr_rx+0x2fe>
	is_rx_enqueue = 0U;
   3c16a:	462f      	mov	r7, r5
   3c16c:	e667      	b.n	3be3e <lll_conn_isr_rx+0x62>
   3c16e:	bf00      	nop
   3c170:	20003c76 	.word	0x20003c76
   3c174:	0004afac 	.word	0x0004afac
   3c178:	0004aff8 	.word	0x0004aff8
   3c17c:	0004a4a0 	.word	0x0004a4a0

0003c180 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   3c180:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   3c182:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   3c184:	89a2      	ldrh	r2, [r4, #12]
   3c186:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3c18a:	429a      	cmp	r2, r3
{
   3c18c:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   3c18e:	f000 80d0 	beq.w	3c332 <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   3c192:	4605      	mov	r5, r0
   3c194:	f7ff fca0 	bl	3bad8 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   3c198:	892b      	ldrh	r3, [r5, #8]
   3c19a:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   3c19c:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3c19e:	441a      	add	r2, r3
   3c1a0:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   3c1a2:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   3c1a4:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3c1a6:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   3c1a8:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   3c1aa:	1c41      	adds	r1, r0, #1
   3c1ac:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   3c1ae:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   3c1b0:	f04f 0100 	mov.w	r1, #0
   3c1b4:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3c1b6:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   3c1ba:	f100 808d 	bmi.w	3c2d8 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   3c1be:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   3c1c2:	460b      	mov	r3, r1
   3c1c4:	7fa1      	ldrb	r1, [r4, #30]
   3c1c6:	9000      	str	r0, [sp, #0]
   3c1c8:	f104 001f 	add.w	r0, r4, #31
   3c1cc:	f7fd f8ae 	bl	3932c <lll_chan_sel_1>
   3c1d0:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   3c1d2:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   3c1d6:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   3c1d8:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   3c1dc:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   3c1de:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   3c1e0:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   3c1e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   3c1e4:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   3c1e6:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   3c1e8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   3c1ec:	428b      	cmp	r3, r1
   3c1ee:	bf28      	it	cs
   3c1f0:	460b      	movcs	r3, r1
	if (!lll->empty) {
   3c1f2:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   3c1f6:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   3c1f8:	f000 808d 	beq.w	3c316 <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   3c1fc:	f000 f9e4 	bl	3c5c8 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3c200:	2008      	movs	r0, #8
   3c202:	f000 fa15 	bl	3c630 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   3c206:	4620      	mov	r0, r4
   3c208:	f7ff fcaa 	bl	3bb60 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   3c20c:	1d20      	adds	r0, r4, #4
   3c20e:	f000 fa2d 	bl	3c66c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   3c212:	8923      	ldrh	r3, [r4, #8]
   3c214:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3c216:	f240 605b 	movw	r0, #1627	; 0x65b
   3c21a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   3c21e:	f000 fabf 	bl	3c7a0 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   3c222:	4630      	mov	r0, r6
   3c224:	f7fe fc70 	bl	3ab08 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   3c228:	4621      	mov	r1, r4
   3c22a:	4846      	ldr	r0, [pc, #280]	; (3c344 <prepare_cb+0x1c4>)
   3c22c:	f000 f98a 	bl	3c544 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   3c230:	2096      	movs	r0, #150	; 0x96
   3c232:	f000 fbed 	bl	3ca10 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3c236:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3c23a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3c23e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3c242:	2100      	movs	r1, #0
   3c244:	f002 0207 	and.w	r2, r2, #7
   3c248:	f000 0007 	and.w	r0, r0, #7
   3c24c:	f000 fb0e 	bl	3c86c <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   3c250:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3c252:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3c254:	4638      	mov	r0, r7
   3c256:	f7fe fc39 	bl	3aacc <lll_event_offset_get>
   3c25a:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   3c25c:	686a      	ldr	r2, [r5, #4]
   3c25e:	f106 0109 	add.w	r1, r6, #9
   3c262:	2000      	movs	r0, #0
   3c264:	f000 fbe0 	bl	3ca28 <radio_tmr_start>
   3c268:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   3c26a:	f000 fc7f 	bl	3cb6c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   3c26e:	2000      	movs	r0, #0
   3c270:	f000 fc96 	bl	3cba0 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3c274:	6b23      	ldr	r3, [r4, #48]	; 0x30
   3c276:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   3c27a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c27c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c280:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3c284:	2101      	movs	r1, #1
   3c286:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   3c28a:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c28c:	f000 fa3c 	bl	3c708 <radio_rx_ready_delay_get>
   3c290:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   3c292:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3c296:	f000 0007 	and.w	r0, r0, #7
   3c29a:	2802      	cmp	r0, #2
   3c29c:	d039      	beq.n	3c312 <prepare_cb+0x192>
		return 40;
   3c29e:	2804      	cmp	r0, #4
   3c2a0:	bf0c      	ite	eq
   3c2a2:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   3c2a6:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3c2a8:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   3c2aa:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3c2ac:	f000 fa2e 	bl	3c70c <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   3c2b0:	4428      	add	r0, r5
   3c2b2:	f000 fc4d 	bl	3cb50 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   3c2b6:	89a1      	ldrh	r1, [r4, #12]
   3c2b8:	3103      	adds	r1, #3
   3c2ba:	4632      	mov	r2, r6
   3c2bc:	b2c9      	uxtb	r1, r1
   3c2be:	4638      	mov	r0, r7
   3c2c0:	f7fe fc12 	bl	3aae8 <lll_preempt_calc>
   3c2c4:	b180      	cbz	r0, 3c2e8 <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   3c2c6:	4820      	ldr	r0, [pc, #128]	; (3c348 <prepare_cb+0x1c8>)
   3c2c8:	4621      	mov	r1, r4
   3c2ca:	f000 f93b 	bl	3c544 <radio_isr_set>
		radio_disable();
   3c2ce:	f000 fa29 	bl	3c724 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   3c2d2:	2000      	movs	r0, #0
   3c2d4:	b003      	add	sp, #12
   3c2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3c2d8:	460a      	mov	r2, r1
   3c2da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3c2de:	8be1      	ldrh	r1, [r4, #30]
   3c2e0:	f7fd f868 	bl	393b4 <lll_chan_sel_2>
   3c2e4:	4606      	mov	r6, r0
   3c2e6:	e774      	b.n	3c1d2 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   3c2e8:	4620      	mov	r0, r4
   3c2ea:	f7fe fb97 	bl	3aa1c <lll_prepare_done>
		LL_ASSERT(!ret);
   3c2ee:	2800      	cmp	r0, #0
   3c2f0:	d0ef      	beq.n	3c2d2 <prepare_cb+0x152>
   3c2f2:	4a16      	ldr	r2, [pc, #88]	; (3c34c <prepare_cb+0x1cc>)
   3c2f4:	4916      	ldr	r1, [pc, #88]	; (3c350 <prepare_cb+0x1d0>)
   3c2f6:	4817      	ldr	r0, [pc, #92]	; (3c354 <prepare_cb+0x1d4>)
   3c2f8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   3c2fc:	f006 fd08 	bl	42d10 <printk>
   3c300:	4040      	eors	r0, r0
   3c302:	f380 8811 	msr	BASEPRI, r0
   3c306:	f04f 0003 	mov.w	r0, #3
   3c30a:	df02      	svc	2
}
   3c30c:	2000      	movs	r0, #0
   3c30e:	b003      	add	sp, #12
   3c310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   3c312:	2318      	movs	r3, #24
   3c314:	e7c8      	b.n	3c2a8 <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   3c316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3c31a:	f7f3 fcad 	bl	2fc78 <memq_peek>
		if (!link) {
   3c31e:	2800      	cmp	r0, #0
   3c320:	f47f af6c 	bne.w	3c1fc <prepare_cb+0x7c>
			lll->empty = 1U;
   3c324:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c328:	f043 0304 	orr.w	r3, r3, #4
   3c32c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   3c330:	e764      	b.n	3c1fc <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   3c332:	4809      	ldr	r0, [pc, #36]	; (3c358 <prepare_cb+0x1d8>)
   3c334:	4621      	mov	r1, r4
   3c336:	f000 f905 	bl	3c544 <radio_isr_set>
		radio_disable();
   3c33a:	f000 f9f3 	bl	3c724 <radio_disable>
}
   3c33e:	2000      	movs	r0, #0
   3c340:	b003      	add	sp, #12
   3c342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3c344:	0003bddd 	.word	0x0003bddd
   3c348:	0003ac3d 	.word	0x0003ac3d
   3c34c:	0004b018 	.word	0x0004b018
   3c350:	0004a738 	.word	0x0004a738
   3c354:	0004a4a0 	.word	0x0004a4a0
   3c358:	0003ac61 	.word	0x0003ac61

0003c35c <lll_periph_prepare>:
{
   3c35c:	b510      	push	{r4, lr}
   3c35e:	b082      	sub	sp, #8
   3c360:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3c362:	f7fe fdcd 	bl	3af00 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3c366:	2800      	cmp	r0, #0
   3c368:	db25      	blt.n	3c3b6 <lll_periph_prepare+0x5a>
	lll = p->param;
   3c36a:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3c36c:	8920      	ldrh	r0, [r4, #8]
   3c36e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   3c370:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3c372:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   3c376:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   3c378:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   3c37a:	4283      	cmp	r3, r0
   3c37c:	bf28      	it	cs
   3c37e:	4603      	movcs	r3, r0
   3c380:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   3c382:	4a13      	ldr	r2, [pc, #76]	; (3c3d0 <lll_periph_prepare+0x74>)
   3c384:	4913      	ldr	r1, [pc, #76]	; (3c3d4 <lll_periph_prepare+0x78>)
   3c386:	4814      	ldr	r0, [pc, #80]	; (3c3d8 <lll_periph_prepare+0x7c>)
   3c388:	9400      	str	r4, [sp, #0]
   3c38a:	2300      	movs	r3, #0
   3c38c:	f7f7 fc34 	bl	33bf8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3c390:	b108      	cbz	r0, 3c396 <lll_periph_prepare+0x3a>
   3c392:	3077      	adds	r0, #119	; 0x77
   3c394:	d101      	bne.n	3c39a <lll_periph_prepare+0x3e>
}
   3c396:	b002      	add	sp, #8
   3c398:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3c39a:	4a10      	ldr	r2, [pc, #64]	; (3c3dc <lll_periph_prepare+0x80>)
   3c39c:	4910      	ldr	r1, [pc, #64]	; (3c3e0 <lll_periph_prepare+0x84>)
   3c39e:	4811      	ldr	r0, [pc, #68]	; (3c3e4 <lll_periph_prepare+0x88>)
   3c3a0:	235e      	movs	r3, #94	; 0x5e
   3c3a2:	f006 fcb5 	bl	42d10 <printk>
   3c3a6:	4040      	eors	r0, r0
   3c3a8:	f380 8811 	msr	BASEPRI, r0
   3c3ac:	f04f 0003 	mov.w	r0, #3
   3c3b0:	df02      	svc	2
}
   3c3b2:	b002      	add	sp, #8
   3c3b4:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3c3b6:	4a09      	ldr	r2, [pc, #36]	; (3c3dc <lll_periph_prepare+0x80>)
   3c3b8:	490b      	ldr	r1, [pc, #44]	; (3c3e8 <lll_periph_prepare+0x8c>)
   3c3ba:	480a      	ldr	r0, [pc, #40]	; (3c3e4 <lll_periph_prepare+0x88>)
   3c3bc:	234d      	movs	r3, #77	; 0x4d
   3c3be:	f006 fca7 	bl	42d10 <printk>
   3c3c2:	4040      	eors	r0, r0
   3c3c4:	f380 8811 	msr	BASEPRI, r0
   3c3c8:	f04f 0003 	mov.w	r0, #3
   3c3cc:	df02      	svc	2
   3c3ce:	e7cc      	b.n	3c36a <lll_periph_prepare+0xe>
   3c3d0:	0003c181 	.word	0x0003c181
   3c3d4:	0003bb01 	.word	0x0003bb01
   3c3d8:	0003aac5 	.word	0x0003aac5
   3c3dc:	0004b018 	.word	0x0004b018
   3c3e0:	0004af98 	.word	0x0004af98
   3c3e4:	0004a4a0 	.word	0x0004a4a0
   3c3e8:	0004aec4 	.word	0x0004aec4

0003c3ec <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   3c3ec:	4b05      	ldr	r3, [pc, #20]	; (3c404 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   3c3ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3c3f2:	2100      	movs	r1, #0
   3c3f4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   3c3f8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   3c3fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   3c400:	4770      	bx	lr
   3c402:	bf00      	nop
   3c404:	4000b000 	.word	0x4000b000

0003c408 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   3c408:	4b05      	ldr	r3, [pc, #20]	; (3c420 <cntr_start+0x18>)
   3c40a:	7818      	ldrb	r0, [r3, #0]
   3c40c:	1c42      	adds	r2, r0, #1
   3c40e:	701a      	strb	r2, [r3, #0]
   3c410:	b918      	cbnz	r0, 3c41a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3c412:	4b04      	ldr	r3, [pc, #16]	; (3c424 <cntr_start+0x1c>)
   3c414:	2201      	movs	r2, #1
   3c416:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   3c418:	4770      	bx	lr
		return 1;
   3c41a:	2001      	movs	r0, #1
}
   3c41c:	4770      	bx	lr
   3c41e:	bf00      	nop
   3c420:	20003c77 	.word	0x20003c77
   3c424:	4000b000 	.word	0x4000b000

0003c428 <cntr_stop>:

uint32_t cntr_stop(void)
{
   3c428:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   3c42a:	4c0d      	ldr	r4, [pc, #52]	; (3c460 <cntr_stop+0x38>)
   3c42c:	7820      	ldrb	r0, [r4, #0]
   3c42e:	b148      	cbz	r0, 3c444 <cntr_stop+0x1c>

	if (--_refcount) {
   3c430:	3801      	subs	r0, #1
   3c432:	b2c0      	uxtb	r0, r0
   3c434:	7020      	strb	r0, [r4, #0]
   3c436:	b918      	cbnz	r0, 3c440 <cntr_stop+0x18>
   3c438:	4b0a      	ldr	r3, [pc, #40]	; (3c464 <cntr_stop+0x3c>)
   3c43a:	2201      	movs	r2, #1
   3c43c:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   3c43e:	bd10      	pop	{r4, pc}
		return 1;
   3c440:	2001      	movs	r0, #1
}
   3c442:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   3c444:	4a08      	ldr	r2, [pc, #32]	; (3c468 <cntr_stop+0x40>)
   3c446:	4909      	ldr	r1, [pc, #36]	; (3c46c <cntr_stop+0x44>)
   3c448:	4809      	ldr	r0, [pc, #36]	; (3c470 <cntr_stop+0x48>)
   3c44a:	232d      	movs	r3, #45	; 0x2d
   3c44c:	f006 fc60 	bl	42d10 <printk>
   3c450:	4040      	eors	r0, r0
   3c452:	f380 8811 	msr	BASEPRI, r0
   3c456:	f04f 0003 	mov.w	r0, #3
   3c45a:	df02      	svc	2
	if (--_refcount) {
   3c45c:	7820      	ldrb	r0, [r4, #0]
   3c45e:	e7e7      	b.n	3c430 <cntr_stop+0x8>
   3c460:	20003c77 	.word	0x20003c77
   3c464:	4000b000 	.word	0x4000b000
   3c468:	0004b06c 	.word	0x0004b06c
   3c46c:	0004b0b8 	.word	0x0004b0b8
   3c470:	0004a4a0 	.word	0x0004a4a0

0003c474 <cntr_cnt_get>:
     return p_reg->COUNTER;
   3c474:	4b01      	ldr	r3, [pc, #4]	; (3c47c <cntr_cnt_get+0x8>)
   3c476:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   3c47a:	4770      	bx	lr
   3c47c:	4000b000 	.word	0x4000b000

0003c480 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   3c480:	4b02      	ldr	r3, [pc, #8]	; (3c48c <cntr_cmp_set+0xc>)
   3c482:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   3c486:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   3c48a:	4770      	bx	lr
   3c48c:	4000b000 	.word	0x4000b000

0003c490 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c490:	4b12      	ldr	r3, [pc, #72]	; (3c4dc <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   3c492:	b430      	push	{r4, r5}
   3c494:	2101      	movs	r1, #1
   3c496:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   3c498:	2000      	movs	r0, #0
   3c49a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   3c49c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   3c4a0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   3c4a4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3c4a8:	6019      	str	r1, [r3, #0]
}
   3c4aa:	e005      	b.n	3c4b8 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c4ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3c4b0:	b932      	cbnz	r2, 3c4c0 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   3c4b2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c4b6:	b11a      	cbz	r2, 3c4c0 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3c4b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   3c4bc:	2a00      	cmp	r2, #0
   3c4be:	d0f5      	beq.n	3c4ac <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c4c0:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   3c4c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3c4c6:	2a00      	cmp	r2, #0
   3c4c8:	d1e7      	bne.n	3c49a <do_ecb+0xa>
   3c4ca:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   3c4ce:	2d00      	cmp	r5, #0
   3c4d0:	d0e3      	beq.n	3c49a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   3c4d2:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   3c4d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   3c4d8:	4770      	bx	lr
   3c4da:	bf00      	nop
   3c4dc:	4000e000 	.word	0x4000e000

0003c4e0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   3c4e0:	b570      	push	{r4, r5, r6, lr}
   3c4e2:	b08c      	sub	sp, #48	; 0x30
   3c4e4:	460e      	mov	r6, r1
   3c4e6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3c4e8:	4601      	mov	r1, r0
   3c4ea:	2210      	movs	r2, #16
   3c4ec:	4668      	mov	r0, sp
{
   3c4ee:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3c4f0:	f7f3 fb90 	bl	2fc14 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   3c4f4:	2210      	movs	r2, #16
   3c4f6:	eb0d 0002 	add.w	r0, sp, r2
   3c4fa:	4631      	mov	r1, r6
   3c4fc:	f7f3 fb8a 	bl	2fc14 <mem_rcopy>

	do_ecb(&ecb);
   3c500:	4668      	mov	r0, sp
   3c502:	f7ff ffc5 	bl	3c490 <do_ecb>

	if (cipher_text_le) {
   3c506:	b125      	cbz	r5, 3c512 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   3c508:	2210      	movs	r2, #16
   3c50a:	a908      	add	r1, sp, #32
   3c50c:	4628      	mov	r0, r5
   3c50e:	f7f3 fb81 	bl	2fc14 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   3c512:	b124      	cbz	r4, 3c51e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   3c514:	2210      	movs	r2, #16
   3c516:	a908      	add	r1, sp, #32
   3c518:	4620      	mov	r0, r4
   3c51a:	f008 fcd1 	bl	44ec0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   3c51e:	b00c      	add	sp, #48	; 0x30
   3c520:	bd70      	pop	{r4, r5, r6, pc}
   3c522:	bf00      	nop

0003c524 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   3c524:	4b04      	ldr	r3, [pc, #16]	; (3c538 <isr_radio+0x14>)
   3c526:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   3c52a:	b123      	cbz	r3, 3c536 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   3c52c:	4a03      	ldr	r2, [pc, #12]	; (3c53c <isr_radio+0x18>)
   3c52e:	4b04      	ldr	r3, [pc, #16]	; (3c540 <isr_radio+0x1c>)
   3c530:	6810      	ldr	r0, [r2, #0]
   3c532:	681b      	ldr	r3, [r3, #0]
   3c534:	4718      	bx	r3
}
   3c536:	4770      	bx	lr
   3c538:	40001000 	.word	0x40001000
   3c53c:	20002db0 	.word	0x20002db0
   3c540:	20002dac 	.word	0x20002dac

0003c544 <radio_isr_set>:
{
   3c544:	b538      	push	{r3, r4, r5, lr}
   3c546:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   3c548:	2001      	movs	r0, #1
{
   3c54a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   3c54c:	f7ed ff34 	bl	2a3b8 <arch_irq_disable>
	isr_cb = cb;
   3c550:	4b08      	ldr	r3, [pc, #32]	; (3c574 <radio_isr_set+0x30>)
	isr_cb_param = param;
   3c552:	4a09      	ldr	r2, [pc, #36]	; (3c578 <radio_isr_set+0x34>)
	isr_cb = cb;
   3c554:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3c556:	4909      	ldr	r1, [pc, #36]	; (3c57c <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3c558:	4b09      	ldr	r3, [pc, #36]	; (3c580 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   3c55a:	6015      	str	r5, [r2, #0]
   3c55c:	2010      	movs	r0, #16
   3c55e:	2202      	movs	r2, #2
   3c560:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   3c564:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   3c568:	2001      	movs	r0, #1
}
   3c56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   3c56e:	f7ed bf13 	b.w	2a398 <arch_irq_enable>
   3c572:	bf00      	nop
   3c574:	20002dac 	.word	0x20002dac
   3c578:	20002db0 	.word	0x20002db0
   3c57c:	40001000 	.word	0x40001000
   3c580:	e000e100 	.word	0xe000e100

0003c584 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3c584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3c588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3c58c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3c58e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   3c592:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3c596:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   3c59a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   3c59e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   3c5a2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   3c5a6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   3c5aa:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   3c5ae:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   3c5b2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   3c5b6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   3c5ba:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   3c5be:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   3c5c2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   3c5c6:	4770      	bx	lr

0003c5c8 <radio_reset>:
{
   3c5c8:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   3c5ca:	2001      	movs	r0, #1
   3c5cc:	f7ed fef4 	bl	2a3b8 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   3c5d0:	4a0d      	ldr	r2, [pc, #52]	; (3c608 <radio_reset+0x40>)
   3c5d2:	2100      	movs	r1, #0
   3c5d4:	2301      	movs	r3, #1
   3c5d6:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   3c5da:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   3c5de:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3c5e2:	490a      	ldr	r1, [pc, #40]	; (3c60c <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   3c5e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3c5e8:	f023 0301 	bic.w	r3, r3, #1
   3c5ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3c5f0:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3c5f4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   3c5f8:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3c5fc:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3c600:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   3c604:	bd10      	pop	{r4, pc}
   3c606:	bf00      	nop
   3c608:	40001000 	.word	0x40001000
   3c60c:	4001f000 	.word	0x4001f000

0003c610 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   3c610:	4b06      	ldr	r3, [pc, #24]	; (3c62c <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   3c612:	2802      	cmp	r0, #2
   3c614:	bf14      	ite	ne
   3c616:	2203      	movne	r2, #3
   3c618:	2204      	moveq	r2, #4
   3c61a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   3c61e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   3c622:	f042 0201 	orr.w	r2, r2, #1
   3c626:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   3c62a:	4770      	bx	lr
   3c62c:	40001000 	.word	0x40001000

0003c630 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   3c630:	4b01      	ldr	r3, [pc, #4]	; (3c638 <radio_tx_power_set+0x8>)
   3c632:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   3c636:	4770      	bx	lr
   3c638:	40001000 	.word	0x40001000

0003c63c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   3c63c:	4b01      	ldr	r3, [pc, #4]	; (3c644 <radio_freq_chan_set+0x8>)
   3c63e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   3c642:	4770      	bx	lr
   3c644:	40001000 	.word	0x40001000

0003c648 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   3c648:	4b07      	ldr	r3, [pc, #28]	; (3c668 <radio_whiten_iv_set+0x20>)
   3c64a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   3c64e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c652:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   3c656:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   3c65a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c65e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   3c662:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   3c666:	4770      	bx	lr
   3c668:	40001000 	.word	0x40001000

0003c66c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   3c66c:	4a0a      	ldr	r2, [pc, #40]	; (3c698 <radio_aa_set+0x2c>)
   3c66e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   3c670:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   3c672:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   3c676:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   3c67a:	78c3      	ldrb	r3, [r0, #3]
   3c67c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   3c680:	7843      	ldrb	r3, [r0, #1]
   3c682:	f890 c002 	ldrb.w	ip, [r0, #2]
   3c686:	7801      	ldrb	r1, [r0, #0]
   3c688:	041b      	lsls	r3, r3, #16
   3c68a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   3c68e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   3c692:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   3c696:	4770      	bx	lr
   3c698:	40001000 	.word	0x40001000

0003c69c <radio_pkt_configure>:
	switch (phy) {
   3c69c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   3c6a0:	2b02      	cmp	r3, #2
   3c6a2:	bf14      	ite	ne
   3c6a4:	f04f 0c00 	movne.w	ip, #0
   3c6a8:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   3c6ac:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   3c6ae:	bf48      	it	mi
   3c6b0:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   3c6b4:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   3c6b8:	4b0a      	ldr	r3, [pc, #40]	; (3c6e4 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   3c6ba:	4a0b      	ldr	r2, [pc, #44]	; (3c6e8 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   3c6bc:	ea40 000c 	orr.w	r0, r0, ip
   3c6c0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   3c6c4:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   3c6c8:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   3c6cc:	4002      	ands	r2, r0
   3c6ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   3c6d2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c6d6:	4311      	orrs	r1, r2
   3c6d8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   3c6dc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   3c6e0:	4770      	bx	lr
   3c6e2:	bf00      	nop
   3c6e4:	40001000 	.word	0x40001000
   3c6e8:	fef80000 	.word	0xfef80000

0003c6ec <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   3c6ec:	4b01      	ldr	r3, [pc, #4]	; (3c6f4 <radio_pkt_rx_set+0x8>)
   3c6ee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   3c6f2:	4770      	bx	lr
   3c6f4:	40001000 	.word	0x40001000

0003c6f8 <radio_pkt_tx_set>:
   3c6f8:	4b01      	ldr	r3, [pc, #4]	; (3c700 <radio_pkt_tx_set+0x8>)
   3c6fa:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   3c6fe:	4770      	bx	lr
   3c700:	40001000 	.word	0x40001000

0003c704 <radio_tx_chain_delay_get>:
}
   3c704:	2001      	movs	r0, #1
   3c706:	4770      	bx	lr

0003c708 <radio_rx_ready_delay_get>:
}
   3c708:	2029      	movs	r0, #41	; 0x29
   3c70a:	4770      	bx	lr

0003c70c <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   3c70c:	2802      	cmp	r0, #2
}
   3c70e:	bf14      	ite	ne
   3c710:	200a      	movne	r0, #10
   3c712:	2005      	moveq	r0, #5
   3c714:	4770      	bx	lr
   3c716:	bf00      	nop

0003c718 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c718:	4b01      	ldr	r3, [pc, #4]	; (3c720 <radio_tx_enable+0x8>)
   3c71a:	2201      	movs	r2, #1
   3c71c:	601a      	str	r2, [r3, #0]
}
   3c71e:	4770      	bx	lr
   3c720:	40001000 	.word	0x40001000

0003c724 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   3c724:	4a07      	ldr	r2, [pc, #28]	; (3c744 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   3c726:	4908      	ldr	r1, [pc, #32]	; (3c748 <radio_disable+0x24>)
{
   3c728:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3c72a:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   3c72c:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   3c730:	2000      	movs	r0, #0
   3c732:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3c736:	6053      	str	r3, [r2, #4]
}
   3c738:	bc10      	pop	{r4}
   3c73a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   3c73c:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3c740:	610b      	str	r3, [r1, #16]
}
   3c742:	4770      	bx	lr
   3c744:	4001f000 	.word	0x4001f000
   3c748:	40001000 	.word	0x40001000

0003c74c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   3c74c:	4b04      	ldr	r3, [pc, #16]	; (3c760 <radio_status_reset+0x14>)
   3c74e:	2200      	movs	r2, #0
   3c750:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   3c754:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   3c758:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   3c75c:	4770      	bx	lr
   3c75e:	bf00      	nop
   3c760:	40001000 	.word	0x40001000

0003c764 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   3c764:	4b03      	ldr	r3, [pc, #12]	; (3c774 <radio_is_ready+0x10>)
   3c766:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   3c76a:	3800      	subs	r0, #0
   3c76c:	bf18      	it	ne
   3c76e:	2001      	movne	r0, #1
   3c770:	4770      	bx	lr
   3c772:	bf00      	nop
   3c774:	40001000 	.word	0x40001000

0003c778 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   3c778:	4b03      	ldr	r3, [pc, #12]	; (3c788 <radio_is_done+0x10>)
   3c77a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   3c77e:	3800      	subs	r0, #0
   3c780:	bf18      	it	ne
   3c782:	2001      	movne	r0, #1
   3c784:	4770      	bx	lr
   3c786:	bf00      	nop
   3c788:	40001000 	.word	0x40001000

0003c78c <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   3c78c:	4b03      	ldr	r3, [pc, #12]	; (3c79c <radio_is_idle+0x10>)
   3c78e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   3c792:	fab0 f080 	clz	r0, r0
   3c796:	0940      	lsrs	r0, r0, #5
   3c798:	4770      	bx	lr
   3c79a:	bf00      	nop
   3c79c:	40001000 	.word	0x40001000

0003c7a0 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   3c7a0:	4b04      	ldr	r3, [pc, #16]	; (3c7b4 <radio_crc_configure+0x14>)
   3c7a2:	f240 1203 	movw	r2, #259	; 0x103
   3c7a6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   3c7aa:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   3c7ae:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   3c7b2:	4770      	bx	lr
   3c7b4:	40001000 	.word	0x40001000

0003c7b8 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   3c7b8:	4b03      	ldr	r3, [pc, #12]	; (3c7c8 <radio_crc_is_valid+0x10>)
   3c7ba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3c7be:	3800      	subs	r0, #0
   3c7c0:	bf18      	it	ne
   3c7c2:	2001      	movne	r0, #1
   3c7c4:	4770      	bx	lr
   3c7c6:	bf00      	nop
   3c7c8:	40001000 	.word	0x40001000

0003c7cc <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   3c7cc:	4800      	ldr	r0, [pc, #0]	; (3c7d0 <radio_pkt_empty_get+0x4>)
   3c7ce:	4770      	bx	lr
   3c7d0:	20002ca4 	.word	0x20002ca4

0003c7d4 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   3c7d4:	4800      	ldr	r0, [pc, #0]	; (3c7d8 <radio_pkt_scratch_get+0x4>)
   3c7d6:	4770      	bx	lr
   3c7d8:	20002ca8 	.word	0x20002ca8

0003c7dc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c7dc:	4b1d      	ldr	r3, [pc, #116]	; (3c854 <radio_switch_complete_and_rx+0x78>)
{
   3c7de:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c7e0:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c7e2:	4d1d      	ldr	r5, [pc, #116]	; (3c858 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c7e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c7e8:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c7ea:	4e1c      	ldr	r6, [pc, #112]	; (3c85c <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c7ec:	4c1c      	ldr	r4, [pc, #112]	; (3c860 <radio_switch_complete_and_rx+0x84>)
   3c7ee:	4f1d      	ldr	r7, [pc, #116]	; (3c864 <radio_switch_complete_and_rx+0x88>)
   3c7f0:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   3c7f4:	f102 030c 	add.w	r3, r2, #12
   3c7f8:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c7fa:	00d0      	lsls	r0, r2, #3
   3c7fc:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c7fe:	0091      	lsls	r1, r2, #2
   3c800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c804:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   3c808:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3c80c:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c810:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3c814:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   3c818:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c81c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c820:	4811      	ldr	r0, [pc, #68]	; (3c868 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c822:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c826:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3c82a:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   3c82e:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3c830:	bf8a      	itet	hi
   3c832:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   3c836:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3c838:	3b2d      	subhi	r3, #45	; 0x2d
   3c83a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3c83e:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   3c840:	4b06      	ldr	r3, [pc, #24]	; (3c85c <radio_switch_complete_and_rx+0x80>)
   3c842:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3c846:	f002 0201 	and.w	r2, r2, #1
   3c84a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   3c84e:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c850:	bcf0      	pop	{r4, r5, r6, r7}
   3c852:	4770      	bx	lr
   3c854:	40001000 	.word	0x40001000
   3c858:	20003c78 	.word	0x20003c78
   3c85c:	4001f000 	.word	0x4001f000
   3c860:	40009140 	.word	0x40009140
   3c864:	4000110c 	.word	0x4000110c
   3c868:	40001004 	.word	0x40001004

0003c86c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   3c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c870:	4e28      	ldr	r6, [pc, #160]	; (3c914 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c872:	4c29      	ldr	r4, [pc, #164]	; (3c918 <radio_switch_complete_and_tx+0xac>)
   3c874:	4f29      	ldr	r7, [pc, #164]	; (3c91c <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c876:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 3c920 <radio_switch_complete_and_tx+0xb4>
   3c87a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3c924 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c87e:	2303      	movs	r3, #3
   3c880:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c884:	7821      	ldrb	r1, [r4, #0]
   3c886:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   3c88a:	f101 030c 	add.w	r3, r1, #12
   3c88e:	b2db      	uxtb	r3, r3
   3c890:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c892:	00cd      	lsls	r5, r1, #3
   3c894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3c898:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3c89c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c8a0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c8a4:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c8a8:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c8ac:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   3c8b0:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c8b4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   3c8b8:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   3c8bc:	2a02      	cmp	r2, #2
   3c8be:	bf08      	it	eq
   3c8c0:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c8c2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   3c8c6:	f242 42b8 	movw	r2, #9400	; 0x24b8
   3c8ca:	f241 3588 	movw	r5, #5000	; 0x1388
   3c8ce:	2802      	cmp	r0, #2
   3c8d0:	bf08      	it	eq
   3c8d2:	462a      	moveq	r2, r5
   3c8d4:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   3c8d8:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   3c8dc:	4413      	add	r3, r2
   3c8de:	4a12      	ldr	r2, [pc, #72]	; (3c928 <radio_switch_complete_and_tx+0xbc>)
   3c8e0:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3c8e4:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   3c8e8:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   3c8ec:	bf85      	ittet	hi
   3c8ee:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3c8f0:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   3c8f4:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3c8f6:	1a1b      	subhi	r3, r3, r0
   3c8f8:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3c8fc:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   3c8fe:	4b08      	ldr	r3, [pc, #32]	; (3c920 <radio_switch_complete_and_tx+0xb4>)
   3c900:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3c904:	f001 0101 	and.w	r1, r1, #1
   3c908:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3c90c:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c912:	bf00      	nop
   3c914:	40001000 	.word	0x40001000
   3c918:	20003c78 	.word	0x20003c78
   3c91c:	40009140 	.word	0x40009140
   3c920:	4001f000 	.word	0x4001f000
   3c924:	4000110c 	.word	0x4000110c
   3c928:	10624dd3 	.word	0x10624dd3

0003c92c <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   3c92c:	4904      	ldr	r1, [pc, #16]	; (3c940 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   3c92e:	4b05      	ldr	r3, [pc, #20]	; (3c944 <radio_switch_complete_and_disable+0x18>)
   3c930:	2003      	movs	r0, #3
   3c932:	f44f 6210 	mov.w	r2, #2304	; 0x900
   3c936:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3c93a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c93e:	4770      	bx	lr
   3c940:	40001000 	.word	0x40001000
   3c944:	4001f000 	.word	0x4001f000

0003c948 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   3c948:	4b02      	ldr	r3, [pc, #8]	; (3c954 <radio_rssi_status_reset+0xc>)
   3c94a:	2200      	movs	r2, #0
   3c94c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   3c950:	4770      	bx	lr
   3c952:	bf00      	nop
   3c954:	40001000 	.word	0x40001000

0003c958 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   3c958:	4b03      	ldr	r3, [pc, #12]	; (3c968 <radio_rssi_is_ready+0x10>)
   3c95a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   3c95e:	3800      	subs	r0, #0
   3c960:	bf18      	it	ne
   3c962:	2001      	movne	r0, #1
   3c964:	4770      	bx	lr
   3c966:	bf00      	nop
   3c968:	40001000 	.word	0x40001000

0003c96c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   3c96c:	b410      	push	{r4}
   3c96e:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   3c972:	ea4f 038c 	mov.w	r3, ip, lsl #2
   3c976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3c97a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   3c97e:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   3c980:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   3c984:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   3c988:	8894      	ldrh	r4, [r2, #4]
   3c98a:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   3c98e:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   3c992:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   3c996:	d1ec      	bne.n	3c972 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   3c998:	4b03      	ldr	r3, [pc, #12]	; (3c9a8 <radio_filter_configure+0x3c>)
}
   3c99a:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   3c99c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   3c9a0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   3c9a4:	4770      	bx	lr
   3c9a6:	bf00      	nop
   3c9a8:	40001000 	.word	0x40001000

0003c9ac <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   3c9ac:	4a03      	ldr	r2, [pc, #12]	; (3c9bc <radio_filter_disable+0x10>)
   3c9ae:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   3c9b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3c9b6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   3c9ba:	4770      	bx	lr
   3c9bc:	40001000 	.word	0x40001000

0003c9c0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   3c9c0:	4b02      	ldr	r3, [pc, #8]	; (3c9cc <radio_filter_status_reset+0xc>)
   3c9c2:	2200      	movs	r2, #0
   3c9c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   3c9c8:	4770      	bx	lr
   3c9ca:	bf00      	nop
   3c9cc:	40001000 	.word	0x40001000

0003c9d0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   3c9d0:	4b03      	ldr	r3, [pc, #12]	; (3c9e0 <radio_filter_has_match+0x10>)
   3c9d2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   3c9d6:	3800      	subs	r0, #0
   3c9d8:	bf18      	it	ne
   3c9da:	2001      	movne	r0, #1
   3c9dc:	4770      	bx	lr
   3c9de:	bf00      	nop
   3c9e0:	40001000 	.word	0x40001000

0003c9e4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   3c9e4:	4b01      	ldr	r3, [pc, #4]	; (3c9ec <radio_filter_match_get+0x8>)
   3c9e6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   3c9ea:	4770      	bx	lr
   3c9ec:	40001000 	.word	0x40001000

0003c9f0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   3c9f0:	4904      	ldr	r1, [pc, #16]	; (3ca04 <radio_tmr_status_reset+0x14>)
   3c9f2:	4b05      	ldr	r3, [pc, #20]	; (3ca08 <radio_tmr_status_reset+0x18>)
   3c9f4:	4a05      	ldr	r2, [pc, #20]	; (3ca0c <radio_tmr_status_reset+0x1c>)
   3c9f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   3c9fa:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   3c9fe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   3ca02:	4770      	bx	lr
   3ca04:	4000b000 	.word	0x4000b000
   3ca08:	4001f000 	.word	0x4001f000
   3ca0c:	0e7000c0 	.word	0x0e7000c0

0003ca10 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   3ca10:	4b03      	ldr	r3, [pc, #12]	; (3ca20 <radio_tmr_tifs_set+0x10>)
   3ca12:	4a04      	ldr	r2, [pc, #16]	; (3ca24 <radio_tmr_tifs_set+0x14>)
   3ca14:	781b      	ldrb	r3, [r3, #0]
   3ca16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   3ca1a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3ca1e:	4770      	bx	lr
   3ca20:	20003c78 	.word	0x20003c78
   3ca24:	40009000 	.word	0x40009000

0003ca28 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   3ca28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   3ca2c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   3ca30:	4d31      	ldr	r5, [pc, #196]	; (3caf8 <radio_tmr_start+0xd0>)
   3ca32:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   3ca36:	42ab      	cmp	r3, r5
{
   3ca38:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   3ca3a:	d906      	bls.n	3ca4a <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   3ca3c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   3ca40:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   3ca44:	3901      	subs	r1, #1
		remainder += 30517578UL;
   3ca46:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ca4a:	4b2c      	ldr	r3, [pc, #176]	; (3cafc <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   3ca4c:	482c      	ldr	r0, [pc, #176]	; (3cb00 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   3ca4e:	4d2d      	ldr	r5, [pc, #180]	; (3cb04 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3ca50:	4e2d      	ldr	r6, [pc, #180]	; (3cb08 <radio_tmr_start+0xe0>)
   3ca52:	2701      	movs	r7, #1
   3ca54:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   3ca56:	2700      	movs	r7, #0
   3ca58:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   3ca5c:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   3ca60:	2704      	movs	r7, #4
   3ca62:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   3ca66:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   3ca68:	2702      	movs	r7, #2
   3ca6a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   3ca6e:	4a27      	ldr	r2, [pc, #156]	; (3cb0c <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   3ca70:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   3ca74:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   3ca78:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   3ca7c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   3ca80:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3ca82:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3ca86:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   3ca8a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   3ca8e:	bb64      	cbnz	r4, 3caea <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   3ca90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   3ca94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   3ca98:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   3ca9c:	4b1b      	ldr	r3, [pc, #108]	; (3cb0c <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ca9e:	4a1c      	ldr	r2, [pc, #112]	; (3cb10 <radio_tmr_start+0xe8>)
   3caa0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   3caa4:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   3caa6:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3caa8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3cb14 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3caac:	f8df e068 	ldr.w	lr, [pc, #104]	; 3cb18 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cab0:	f8df c068 	ldr.w	ip, [pc, #104]	; 3cb1c <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cab4:	4f1a      	ldr	r7, [pc, #104]	; (3cb20 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cab6:	4e1b      	ldr	r6, [pc, #108]	; (3cb24 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cab8:	4d1b      	ldr	r5, [pc, #108]	; (3cb28 <radio_tmr_start+0x100>)
   3caba:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   3cabc:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   3cac0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   3cac4:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   3cac8:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   3cacc:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cace:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cad2:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cad6:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cada:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cade:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cae2:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   3cae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   3caea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   3caee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   3caf2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   3caf6:	e7d1      	b.n	3ca9c <radio_tmr_start+0x74>
   3caf8:	7ff0bdbf 	.word	0x7ff0bdbf
   3cafc:	40008000 	.word	0x40008000
   3cb00:	431bde83 	.word	0x431bde83
   3cb04:	4000b000 	.word	0x4000b000
   3cb08:	4000b148 	.word	0x4000b148
   3cb0c:	4001f000 	.word	0x4001f000
   3cb10:	40009000 	.word	0x40009000
   3cb14:	4000110c 	.word	0x4000110c
   3cb18:	4000900c 	.word	0x4000900c
   3cb1c:	40009140 	.word	0x40009140
   3cb20:	4001f004 	.word	0x4001f004
   3cb24:	40009144 	.word	0x40009144
   3cb28:	4001f00c 	.word	0x4001f00c

0003cb2c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   3cb2c:	4b01      	ldr	r3, [pc, #4]	; (3cb34 <radio_tmr_start_get+0x8>)
   3cb2e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   3cb32:	4770      	bx	lr
   3cb34:	4000b000 	.word	0x4000b000

0003cb38 <radio_tmr_stop>:
   3cb38:	4903      	ldr	r1, [pc, #12]	; (3cb48 <radio_tmr_stop+0x10>)
   3cb3a:	4a04      	ldr	r2, [pc, #16]	; (3cb4c <radio_tmr_stop+0x14>)
   3cb3c:	2301      	movs	r3, #1
   3cb3e:	604b      	str	r3, [r1, #4]
   3cb40:	610b      	str	r3, [r1, #16]
   3cb42:	6053      	str	r3, [r2, #4]
   3cb44:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3cb46:	4770      	bx	lr
   3cb48:	40008000 	.word	0x40008000
   3cb4c:	40009000 	.word	0x40009000

0003cb50 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   3cb50:	4904      	ldr	r1, [pc, #16]	; (3cb64 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   3cb52:	4b05      	ldr	r3, [pc, #20]	; (3cb68 <radio_tmr_hcto_configure+0x18>)
   3cb54:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   3cb58:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   3cb5c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   3cb60:	4770      	bx	lr
   3cb62:	bf00      	nop
   3cb64:	40008000 	.word	0x40008000
   3cb68:	4001f000 	.word	0x4001f000

0003cb6c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cb6c:	4b05      	ldr	r3, [pc, #20]	; (3cb84 <radio_tmr_aa_capture+0x18>)
   3cb6e:	4806      	ldr	r0, [pc, #24]	; (3cb88 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cb70:	4906      	ldr	r1, [pc, #24]	; (3cb8c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   3cb72:	4a07      	ldr	r2, [pc, #28]	; (3cb90 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3cb74:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3cb78:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   3cb7c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   3cb80:	4770      	bx	lr
   3cb82:	bf00      	nop
   3cb84:	4001f000 	.word	0x4001f000
   3cb88:	40001100 	.word	0x40001100
   3cb8c:	40008040 	.word	0x40008040
   3cb90:	04000080 	.word	0x04000080

0003cb94 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   3cb94:	4b01      	ldr	r3, [pc, #4]	; (3cb9c <radio_tmr_aa_get+0x8>)
   3cb96:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   3cb9a:	4770      	bx	lr
   3cb9c:	40008000 	.word	0x40008000

0003cba0 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   3cba0:	4b01      	ldr	r3, [pc, #4]	; (3cba8 <radio_tmr_aa_save+0x8>)
   3cba2:	6018      	str	r0, [r3, #0]
}
   3cba4:	4770      	bx	lr
   3cba6:	bf00      	nop
   3cba8:	20002db4 	.word	0x20002db4

0003cbac <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   3cbac:	4b01      	ldr	r3, [pc, #4]	; (3cbb4 <radio_tmr_aa_restore+0x8>)
}
   3cbae:	6818      	ldr	r0, [r3, #0]
   3cbb0:	4770      	bx	lr
   3cbb2:	bf00      	nop
   3cbb4:	20002db4 	.word	0x20002db4

0003cbb8 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   3cbb8:	4b01      	ldr	r3, [pc, #4]	; (3cbc0 <radio_tmr_ready_get+0x8>)
   3cbba:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   3cbbe:	4770      	bx	lr
   3cbc0:	40008000 	.word	0x40008000

0003cbc4 <radio_tmr_end_capture>:
   3cbc4:	4b02      	ldr	r3, [pc, #8]	; (3cbd0 <radio_tmr_end_capture+0xc>)
   3cbc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   3cbca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   3cbce:	4770      	bx	lr
   3cbd0:	4001f000 	.word	0x4001f000

0003cbd4 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   3cbd4:	4b01      	ldr	r3, [pc, #4]	; (3cbdc <radio_tmr_end_get+0x8>)
   3cbd6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   3cbda:	4770      	bx	lr
   3cbdc:	40008000 	.word	0x40008000

0003cbe0 <radio_tmr_tifs_base_get>:
   3cbe0:	4b01      	ldr	r3, [pc, #4]	; (3cbe8 <radio_tmr_tifs_base_get+0x8>)
   3cbe2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   3cbe6:	4770      	bx	lr
   3cbe8:	40008000 	.word	0x40008000

0003cbec <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3cbec:	4b17      	ldr	r3, [pc, #92]	; (3cc4c <radio_ccm_rx_pkt_set+0x60>)
{
   3cbee:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3cbf0:	2400      	movs	r4, #0
{
   3cbf2:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3cbf4:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3cbf6:	4816      	ldr	r0, [pc, #88]	; (3cc50 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3cbf8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3cbfc:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3cc00:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   3cc04:	4e13      	ldr	r6, [pc, #76]	; (3cc54 <radio_ccm_rx_pkt_set+0x68>)
   3cc06:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   3cc08:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   3cc0c:	4812      	ldr	r0, [pc, #72]	; (3cc58 <radio_ccm_rx_pkt_set+0x6c>)
   3cc0e:	2902      	cmp	r1, #2
   3cc10:	bf08      	it	eq
   3cc12:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   3cc14:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3cc18:	4810      	ldr	r0, [pc, #64]	; (3cc5c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3cc1a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3cc1e:	4910      	ldr	r1, [pc, #64]	; (3cc60 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3cc20:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   3cc24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   3cc28:	4a0e      	ldr	r2, [pc, #56]	; (3cc64 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3cc2a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   3cc2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   3cc32:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3cc36:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3cc3a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   3cc3e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cc42:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3cc44:	bc70      	pop	{r4, r5, r6}
   3cc46:	601a      	str	r2, [r3, #0]
   3cc48:	4770      	bx	lr
   3cc4a:	bf00      	nop
   3cc4c:	4000f000 	.word	0x4000f000
   3cc50:	40001000 	.word	0x40001000
   3cc54:	01010001 	.word	0x01010001
   3cc58:	01000001 	.word	0x01000001
   3cc5c:	20002ca8 	.word	0x20002ca8
   3cc60:	20002b98 	.word	0x20002b98
   3cc64:	4001f000 	.word	0x4001f000

0003cc68 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3cc68:	4b0f      	ldr	r3, [pc, #60]	; (3cca8 <radio_ccm_tx_pkt_set+0x40>)
{
   3cc6a:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3cc6c:	2200      	movs	r2, #0
{
   3cc6e:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3cc70:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3cc72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3cc76:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   3cc7a:	480c      	ldr	r0, [pc, #48]	; (3ccac <radio_ccm_tx_pkt_set+0x44>)
   3cc7c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3cc80:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3cc84:	480a      	ldr	r0, [pc, #40]	; (3ccb0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   3cc86:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3cc8a:	4c0a      	ldr	r4, [pc, #40]	; (3ccb4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3cc8c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3cc90:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3cc92:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3cc96:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3cc9a:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3cc9c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3cca0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3cca4:	6019      	str	r1, [r3, #0]
}
   3cca6:	4770      	bx	lr
   3cca8:	4000f000 	.word	0x4000f000
   3ccac:	01010000 	.word	0x01010000
   3ccb0:	20002ca8 	.word	0x20002ca8
   3ccb4:	20002b98 	.word	0x20002b98

0003ccb8 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3ccb8:	4a0e      	ldr	r2, [pc, #56]	; (3ccf4 <radio_ccm_is_done+0x3c>)
   3ccba:	2302      	movs	r3, #2
   3ccbc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3ccc0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3ccc4:	b933      	cbnz	r3, 3ccd4 <radio_ccm_is_done+0x1c>
		__WFE();
   3ccc6:	bf20      	wfe
		__SEV();
   3ccc8:	bf40      	sev
		__WFE();
   3ccca:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3cccc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3ccd0:	2b00      	cmp	r3, #0
   3ccd2:	d0f8      	beq.n	3ccc6 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   3ccd4:	4b07      	ldr	r3, [pc, #28]	; (3ccf4 <radio_ccm_is_done+0x3c>)
   3ccd6:	4a08      	ldr	r2, [pc, #32]	; (3ccf8 <radio_ccm_is_done+0x40>)
   3ccd8:	2002      	movs	r0, #2
   3ccda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3ccde:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   3cce2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   3cce6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   3ccea:	fab0 f080 	clz	r0, r0
   3ccee:	0940      	lsrs	r0, r0, #5
   3ccf0:	4770      	bx	lr
   3ccf2:	bf00      	nop
   3ccf4:	4000f000 	.word	0x4000f000
   3ccf8:	e000e100 	.word	0xe000e100

0003ccfc <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   3ccfc:	4b03      	ldr	r3, [pc, #12]	; (3cd0c <radio_ccm_mic_is_valid+0x10>)
   3ccfe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3cd02:	3800      	subs	r0, #0
   3cd04:	bf18      	it	ne
   3cd06:	2001      	movne	r0, #1
   3cd08:	4770      	bx	lr
   3cd0a:	bf00      	nop
   3cd0c:	4000f000 	.word	0x4000f000

0003cd10 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cd10:	4a15      	ldr	r2, [pc, #84]	; (3cd68 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   3cd12:	4b16      	ldr	r3, [pc, #88]	; (3cd6c <radio_ar_configure+0x5c>)
{
   3cd14:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cd16:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   3cd1a:	4e15      	ldr	r6, [pc, #84]	; (3cd70 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   3cd1c:	2703      	movs	r7, #3
   3cd1e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   3cd22:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   3cd24:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cd28:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   3cd2a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   3cd2e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   3cd30:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   3cd34:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   3cd38:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   3cd3c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   3cd40:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   3cd44:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   3cd48:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   3cd4c:	4909      	ldr	r1, [pc, #36]	; (3cd74 <radio_ar_configure+0x64>)
   3cd4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3cd52:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   3cd56:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   3cd5a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   3cd5e:	bcf0      	pop	{r4, r5, r6, r7}
   3cd60:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   3cd64:	4770      	bx	lr
   3cd66:	bf00      	nop
   3cd68:	40001000 	.word	0x40001000
   3cd6c:	4000f000 	.word	0x4000f000
   3cd70:	20002b94 	.word	0x20002b94
   3cd74:	4001f000 	.word	0x4001f000

0003cd78 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   3cd78:	4b01      	ldr	r3, [pc, #4]	; (3cd80 <radio_ar_match_get+0x8>)
   3cd7a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3cd7e:	4770      	bx	lr
   3cd80:	4000f000 	.word	0x4000f000

0003cd84 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   3cd84:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   3cd86:	4807      	ldr	r0, [pc, #28]	; (3cda4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   3cd88:	4c07      	ldr	r4, [pc, #28]	; (3cda8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   3cd8a:	4a08      	ldr	r2, [pc, #32]	; (3cdac <radio_ar_status_reset+0x28>)
   3cd8c:	2300      	movs	r3, #0
   3cd8e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   3cd92:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   3cd96:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   3cd9a:	bc10      	pop	{r4}
   3cd9c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   3cda0:	4770      	bx	lr
   3cda2:	bf00      	nop
   3cda4:	4000f000 	.word	0x4000f000
   3cda8:	40001000 	.word	0x40001000
   3cdac:	4001f000 	.word	0x4001f000

0003cdb0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   3cdb0:	4b08      	ldr	r3, [pc, #32]	; (3cdd4 <radio_ar_has_match+0x24>)
   3cdb2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   3cdb6:	b160      	cbz	r0, 3cdd2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   3cdb8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   3cdbc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   3cdc0:	b138      	cbz	r0, 3cdd2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   3cdc2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   3cdc6:	b120      	cbz	r0, 3cdd2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   3cdc8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   3cdcc:	fab0 f080 	clz	r0, r0
   3cdd0:	0940      	lsrs	r0, r0, #5
}
   3cdd2:	4770      	bx	lr
   3cdd4:	40001000 	.word	0x40001000

0003cdd8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3cdd8:	2902      	cmp	r1, #2
{
   3cdda:	b510      	push	{r4, lr}
   3cddc:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3cdde:	d00b      	beq.n	3cdf8 <mayfly_enable_cb+0x20>
   3cde0:	4a0a      	ldr	r2, [pc, #40]	; (3ce0c <mayfly_enable_cb+0x34>)
   3cde2:	490b      	ldr	r1, [pc, #44]	; (3ce10 <mayfly_enable_cb+0x38>)
   3cde4:	480b      	ldr	r0, [pc, #44]	; (3ce14 <mayfly_enable_cb+0x3c>)
   3cde6:	231e      	movs	r3, #30
   3cde8:	f005 ff92 	bl	42d10 <printk>
   3cdec:	4040      	eors	r0, r0
   3cdee:	f380 8811 	msr	BASEPRI, r0
   3cdf2:	f04f 0003 	mov.w	r0, #3
   3cdf6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   3cdf8:	200b      	movs	r0, #11
	if (enable) {
   3cdfa:	b11c      	cbz	r4, 3ce04 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   3cdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   3ce00:	f7ed baca 	b.w	2a398 <arch_irq_enable>
}
   3ce04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   3ce08:	f7ed bad6 	b.w	2a3b8 <arch_irq_disable>
   3ce0c:	0004b0c4 	.word	0x0004b0c4
   3ce10:	0004b114 	.word	0x0004b114
   3ce14:	0004a4a0 	.word	0x0004a4a0

0003ce18 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3ce18:	b129      	cbz	r1, 3ce26 <mayfly_is_enabled+0xe>
   3ce1a:	3901      	subs	r1, #1
   3ce1c:	2901      	cmp	r1, #1
   3ce1e:	d805      	bhi.n	3ce2c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   3ce20:	200b      	movs	r0, #11
   3ce22:	f7ed badd 	b.w	2a3e0 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   3ce26:	2018      	movs	r0, #24
   3ce28:	f7ed bada 	b.w	2a3e0 <arch_irq_is_enabled>
{
   3ce2c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   3ce2e:	4a07      	ldr	r2, [pc, #28]	; (3ce4c <mayfly_is_enabled+0x34>)
   3ce30:	4907      	ldr	r1, [pc, #28]	; (3ce50 <mayfly_is_enabled+0x38>)
   3ce32:	4808      	ldr	r0, [pc, #32]	; (3ce54 <mayfly_is_enabled+0x3c>)
   3ce34:	2336      	movs	r3, #54	; 0x36
   3ce36:	f005 ff6b 	bl	42d10 <printk>
   3ce3a:	4040      	eors	r0, r0
   3ce3c:	f380 8811 	msr	BASEPRI, r0
   3ce40:	f04f 0003 	mov.w	r0, #3
   3ce44:	df02      	svc	2
		break;
	}

	return 0;
}
   3ce46:	2000      	movs	r0, #0
   3ce48:	bd08      	pop	{r3, pc}
   3ce4a:	bf00      	nop
   3ce4c:	0004b0c4 	.word	0x0004b0c4
   3ce50:	0004a500 	.word	0x0004a500
   3ce54:	0004a4a0 	.word	0x0004a4a0

0003ce58 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3ce58:	4288      	cmp	r0, r1
   3ce5a:	d00b      	beq.n	3ce74 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   3ce5c:	2801      	cmp	r0, #1
   3ce5e:	d003      	beq.n	3ce68 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3ce60:	2802      	cmp	r0, #2
   3ce62:	d009      	beq.n	3ce78 <mayfly_prio_is_equal+0x20>
   3ce64:	2000      	movs	r0, #0
#endif
	       0;
}
   3ce66:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   3ce68:	f1a1 0002 	sub.w	r0, r1, #2
   3ce6c:	fab0 f080 	clz	r0, r0
   3ce70:	0940      	lsrs	r0, r0, #5
   3ce72:	4770      	bx	lr
   3ce74:	2001      	movs	r0, #1
   3ce76:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   3ce78:	f1a1 0001 	sub.w	r0, r1, #1
   3ce7c:	fab0 f080 	clz	r0, r0
   3ce80:	0940      	lsrs	r0, r0, #5
   3ce82:	4770      	bx	lr

0003ce84 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3ce84:	2901      	cmp	r1, #1
{
   3ce86:	b508      	push	{r3, lr}
	switch (callee_id) {
   3ce88:	d00f      	beq.n	3ceaa <mayfly_pend+0x26>
   3ce8a:	2902      	cmp	r1, #2
   3ce8c:	d00d      	beq.n	3ceaa <mayfly_pend+0x26>
   3ce8e:	b191      	cbz	r1, 3ceb6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   3ce90:	4a0c      	ldr	r2, [pc, #48]	; (3cec4 <mayfly_pend+0x40>)
   3ce92:	490d      	ldr	r1, [pc, #52]	; (3cec8 <mayfly_pend+0x44>)
   3ce94:	480d      	ldr	r0, [pc, #52]	; (3cecc <mayfly_pend+0x48>)
   3ce96:	2367      	movs	r3, #103	; 0x67
   3ce98:	f005 ff3a 	bl	42d10 <printk>
   3ce9c:	4040      	eors	r0, r0
   3ce9e:	f380 8811 	msr	BASEPRI, r0
   3cea2:	f04f 0003 	mov.w	r0, #3
   3cea6:	df02      	svc	2
		break;
	}
}
   3cea8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3ceaa:	4b09      	ldr	r3, [pc, #36]	; (3ced0 <mayfly_pend+0x4c>)
   3ceac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3ceb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3ceb4:	bd08      	pop	{r3, pc}
   3ceb6:	4b06      	ldr	r3, [pc, #24]	; (3ced0 <mayfly_pend+0x4c>)
   3ceb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   3cebc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3cec0:	bd08      	pop	{r3, pc}
   3cec2:	bf00      	nop
   3cec4:	0004b0c4 	.word	0x0004b0c4
   3cec8:	0004a500 	.word	0x0004a500
   3cecc:	0004a4a0 	.word	0x0004a4a0
   3ced0:	e000e100 	.word	0xe000e100

0003ced4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3ced4:	2803      	cmp	r0, #3
{
   3ced6:	b510      	push	{r4, lr}
   3ced8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3ceda:	d804      	bhi.n	3cee6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   3cedc:	4b11      	ldr	r3, [pc, #68]	; (3cf24 <hal_ticker_instance0_caller_id_get+0x50>)
   3cede:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3cee0:	b18c      	cbz	r4, 3cf06 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   3cee2:	4620      	mov	r0, r4
   3cee4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cee6:	4a10      	ldr	r2, [pc, #64]	; (3cf28 <hal_ticker_instance0_caller_id_get+0x54>)
   3cee8:	4910      	ldr	r1, [pc, #64]	; (3cf2c <hal_ticker_instance0_caller_id_get+0x58>)
   3ceea:	4811      	ldr	r0, [pc, #68]	; (3cf30 <hal_ticker_instance0_caller_id_get+0x5c>)
   3ceec:	232b      	movs	r3, #43	; 0x2b
   3ceee:	f005 ff0f 	bl	42d10 <printk>
   3cef2:	4040      	eors	r0, r0
   3cef4:	f380 8811 	msr	BASEPRI, r0
   3cef8:	f04f 0003 	mov.w	r0, #3
   3cefc:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   3cefe:	4b09      	ldr	r3, [pc, #36]	; (3cf24 <hal_ticker_instance0_caller_id_get+0x50>)
   3cf00:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3cf02:	2c00      	cmp	r4, #0
   3cf04:	d1ed      	bne.n	3cee2 <hal_ticker_instance0_caller_id_get+0xe>
   3cf06:	4a08      	ldr	r2, [pc, #32]	; (3cf28 <hal_ticker_instance0_caller_id_get+0x54>)
   3cf08:	490a      	ldr	r1, [pc, #40]	; (3cf34 <hal_ticker_instance0_caller_id_get+0x60>)
   3cf0a:	4809      	ldr	r0, [pc, #36]	; (3cf30 <hal_ticker_instance0_caller_id_get+0x5c>)
   3cf0c:	232e      	movs	r3, #46	; 0x2e
   3cf0e:	f005 feff 	bl	42d10 <printk>
   3cf12:	4040      	eors	r0, r0
   3cf14:	f380 8811 	msr	BASEPRI, r0
   3cf18:	f04f 0003 	mov.w	r0, #3
   3cf1c:	df02      	svc	2
}
   3cf1e:	4620      	mov	r0, r4
   3cf20:	bd10      	pop	{r4, pc}
   3cf22:	bf00      	nop
   3cf24:	0004b1a4 	.word	0x0004b1a4
   3cf28:	0004b124 	.word	0x0004b124
   3cf2c:	0004b174 	.word	0x0004b174
   3cf30:	0004a4a0 	.word	0x0004a4a0
   3cf34:	0004b194 	.word	0x0004b194

0003cf38 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   3cf38:	3801      	subs	r0, #1
{
   3cf3a:	b510      	push	{r4, lr}
   3cf3c:	461c      	mov	r4, r3
	switch (caller_id) {
   3cf3e:	2804      	cmp	r0, #4
   3cf40:	f200 8082 	bhi.w	3d048 <hal_ticker_instance0_sched+0x110>
   3cf44:	e8df f000 	tbb	[pc, r0]
   3cf48:	3f302112 	.word	0x3f302112
   3cf4c:	03          	.byte	0x03
   3cf4d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   3cf4e:	2904      	cmp	r1, #4
   3cf50:	d04a      	beq.n	3cfe8 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   3cf52:	4a44      	ldr	r2, [pc, #272]	; (3d064 <hal_ticker_instance0_sched+0x12c>)
   3cf54:	4944      	ldr	r1, [pc, #272]	; (3d068 <hal_ticker_instance0_sched+0x130>)
   3cf56:	4845      	ldr	r0, [pc, #276]	; (3d06c <hal_ticker_instance0_sched+0x134>)
   3cf58:	23ba      	movs	r3, #186	; 0xba
   3cf5a:	f005 fed9 	bl	42d10 <printk>
   3cf5e:	4040      	eors	r0, r0
   3cf60:	f380 8811 	msr	BASEPRI, r0
   3cf64:	f04f 0003 	mov.w	r0, #3
   3cf68:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   3cf6a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cf6c:	2904      	cmp	r1, #4
   3cf6e:	d043      	beq.n	3cff8 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   3cf70:	4a3c      	ldr	r2, [pc, #240]	; (3d064 <hal_ticker_instance0_sched+0x12c>)
   3cf72:	493d      	ldr	r1, [pc, #244]	; (3d068 <hal_ticker_instance0_sched+0x130>)
   3cf74:	483d      	ldr	r0, [pc, #244]	; (3d06c <hal_ticker_instance0_sched+0x134>)
   3cf76:	234e      	movs	r3, #78	; 0x4e
   3cf78:	f005 feca 	bl	42d10 <printk>
   3cf7c:	4040      	eors	r0, r0
   3cf7e:	f380 8811 	msr	BASEPRI, r0
   3cf82:	f04f 0003 	mov.w	r0, #3
   3cf86:	df02      	svc	2
}
   3cf88:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cf8a:	2903      	cmp	r1, #3
   3cf8c:	d03c      	beq.n	3d008 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   3cf8e:	4a35      	ldr	r2, [pc, #212]	; (3d064 <hal_ticker_instance0_sched+0x12c>)
   3cf90:	4935      	ldr	r1, [pc, #212]	; (3d068 <hal_ticker_instance0_sched+0x130>)
   3cf92:	4836      	ldr	r0, [pc, #216]	; (3d06c <hal_ticker_instance0_sched+0x134>)
   3cf94:	2365      	movs	r3, #101	; 0x65
   3cf96:	f005 febb 	bl	42d10 <printk>
   3cf9a:	4040      	eors	r0, r0
   3cf9c:	f380 8811 	msr	BASEPRI, r0
   3cfa0:	f04f 0003 	mov.w	r0, #3
   3cfa4:	df02      	svc	2
}
   3cfa6:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cfa8:	2904      	cmp	r1, #4
   3cfaa:	d035      	beq.n	3d018 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   3cfac:	4a2d      	ldr	r2, [pc, #180]	; (3d064 <hal_ticker_instance0_sched+0x12c>)
   3cfae:	492e      	ldr	r1, [pc, #184]	; (3d068 <hal_ticker_instance0_sched+0x130>)
   3cfb0:	482e      	ldr	r0, [pc, #184]	; (3d06c <hal_ticker_instance0_sched+0x134>)
   3cfb2:	237c      	movs	r3, #124	; 0x7c
   3cfb4:	f005 feac 	bl	42d10 <printk>
   3cfb8:	4040      	eors	r0, r0
   3cfba:	f380 8811 	msr	BASEPRI, r0
   3cfbe:	f04f 0003 	mov.w	r0, #3
   3cfc2:	df02      	svc	2
}
   3cfc4:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cfc6:	2903      	cmp	r1, #3
   3cfc8:	d036      	beq.n	3d038 <hal_ticker_instance0_sched+0x100>
   3cfca:	2904      	cmp	r1, #4
   3cfcc:	d02c      	beq.n	3d028 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   3cfce:	4a25      	ldr	r2, [pc, #148]	; (3d064 <hal_ticker_instance0_sched+0x12c>)
   3cfd0:	4925      	ldr	r1, [pc, #148]	; (3d068 <hal_ticker_instance0_sched+0x130>)
   3cfd2:	4826      	ldr	r0, [pc, #152]	; (3d06c <hal_ticker_instance0_sched+0x134>)
   3cfd4:	23a2      	movs	r3, #162	; 0xa2
   3cfd6:	f005 fe9b 	bl	42d10 <printk>
   3cfda:	4040      	eors	r0, r0
   3cfdc:	f380 8811 	msr	BASEPRI, r0
   3cfe0:	f04f 0003 	mov.w	r0, #3
   3cfe4:	df02      	svc	2
}
   3cfe6:	bd10      	pop	{r4, pc}
			m.param = instance;
   3cfe8:	4b21      	ldr	r3, [pc, #132]	; (3d070 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cfea:	2102      	movs	r1, #2
			m.param = instance;
   3cfec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cfee:	2003      	movs	r0, #3
}
   3cff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cff4:	f7f2 beaa 	b.w	2fd4c <mayfly_enqueue>
			m.param = instance;
   3cff8:	4b1e      	ldr	r3, [pc, #120]	; (3d074 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cffa:	2102      	movs	r1, #2
			m.param = instance;
   3cffc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cffe:	2000      	movs	r0, #0
}
   3d000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3d004:	f7f2 bea2 	b.w	2fd4c <mayfly_enqueue>
			m.param = instance;
   3d008:	4b1b      	ldr	r3, [pc, #108]	; (3d078 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3d00a:	2101      	movs	r1, #1
			m.param = instance;
   3d00c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3d00e:	4608      	mov	r0, r1
}
   3d010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3d014:	f7f2 be9a 	b.w	2fd4c <mayfly_enqueue>
			m.param = instance;
   3d018:	4b18      	ldr	r3, [pc, #96]	; (3d07c <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3d01a:	2102      	movs	r1, #2
			m.param = instance;
   3d01c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3d01e:	2001      	movs	r0, #1
}
   3d020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3d024:	f7f2 be92 	b.w	2fd4c <mayfly_enqueue>
			m.param = instance;
   3d028:	4b15      	ldr	r3, [pc, #84]	; (3d080 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3d02a:	2102      	movs	r1, #2
			m.param = instance;
   3d02c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3d02e:	4608      	mov	r0, r1
}
   3d030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3d034:	f7f2 be8a 	b.w	2fd4c <mayfly_enqueue>
			m.param = instance;
   3d038:	4b12      	ldr	r3, [pc, #72]	; (3d084 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3d03a:	2101      	movs	r1, #1
			m.param = instance;
   3d03c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3d03e:	2002      	movs	r0, #2
}
   3d040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3d044:	f7f2 be82 	b.w	2fd4c <mayfly_enqueue>
		LL_ASSERT(0);
   3d048:	4a06      	ldr	r2, [pc, #24]	; (3d064 <hal_ticker_instance0_sched+0x12c>)
   3d04a:	4907      	ldr	r1, [pc, #28]	; (3d068 <hal_ticker_instance0_sched+0x130>)
   3d04c:	4807      	ldr	r0, [pc, #28]	; (3d06c <hal_ticker_instance0_sched+0x134>)
   3d04e:	23c0      	movs	r3, #192	; 0xc0
   3d050:	f005 fe5e 	bl	42d10 <printk>
   3d054:	4040      	eors	r0, r0
   3d056:	f380 8811 	msr	BASEPRI, r0
   3d05a:	f04f 0003 	mov.w	r0, #3
   3d05e:	df02      	svc	2
}
   3d060:	bd10      	pop	{r4, pc}
   3d062:	bf00      	nop
   3d064:	0004b124 	.word	0x0004b124
   3d068:	0004a500 	.word	0x0004a500
   3d06c:	0004a4a0 	.word	0x0004a4a0
   3d070:	20000800 	.word	0x20000800
   3d074:	200007f0 	.word	0x200007f0
   3d078:	200007e0 	.word	0x200007e0
   3d07c:	20000830 	.word	0x20000830
   3d080:	20000810 	.word	0x20000810
   3d084:	20000820 	.word	0x20000820

0003d088 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   3d088:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   3d08a:	2000      	movs	r0, #0
   3d08c:	f7ff b9f8 	b.w	3c480 <cntr_cmp_set>

0003d090 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   3d090:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3d092:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3d096:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   3d09a:	3201      	adds	r2, #1
   3d09c:	d008      	beq.n	3d0b0 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   3d09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   3d0a2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3d0a6:	f013 0301 	ands.w	r3, r3, #1
   3d0aa:	d10a      	bne.n	3d0c2 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   3d0ac:	4618      	mov	r0, r3
}
   3d0ae:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3d0b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   3d0b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3d0b8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3d0ba:	4293      	cmp	r3, r2
   3d0bc:	d1ef      	bne.n	3d09e <hci_vendor_read_static_addr+0xe>
	return 0;
   3d0be:	2000      	movs	r0, #0
}
   3d0c0:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   3d0c2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   3d0c6:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   3d0c8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   3d0ca:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   3d0ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3d0d2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   3d0d4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   3d0d6:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   3d0da:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   3d0de:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   3d0e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   3d0e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   3d0e8:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3d0ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   3d0ee:	3301      	adds	r3, #1
   3d0f0:	d03b      	beq.n	3d16a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3d0f2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3d0f6:	3301      	adds	r3, #1
   3d0f8:	d037      	beq.n	3d16a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3d0fa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3d0fe:	3301      	adds	r3, #1
   3d100:	d033      	beq.n	3d16a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   3d102:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3d106:	3301      	adds	r3, #1
   3d108:	d02f      	beq.n	3d16a <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   3d10a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   3d10e:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   3d110:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   3d112:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   3d116:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   3d11a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   3d11c:	f880 c009 	strb.w	ip, [r0, #9]
   3d120:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   3d122:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   3d126:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   3d128:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   3d12a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   3d12e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   3d132:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   3d134:	f880 c00d 	strb.w	ip, [r0, #13]
   3d138:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   3d13a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   3d13e:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   3d140:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   3d142:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   3d146:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   3d14a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   3d14c:	73c3      	strb	r3, [r0, #15]
   3d14e:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   3d152:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   3d156:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   3d158:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   3d15a:	0a11      	lsrs	r1, r2, #8
   3d15c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3d160:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   3d162:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   3d164:	7541      	strb	r1, [r0, #21]
		return 1;
   3d166:	2001      	movs	r0, #1
}
   3d168:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   3d16a:	2210      	movs	r2, #16
   3d16c:	2100      	movs	r1, #0
   3d16e:	3006      	adds	r0, #6
   3d170:	f007 feb1 	bl	44ed6 <memset>
		return 1;
   3d174:	2001      	movs	r0, #1
}
   3d176:	bd08      	pop	{r3, pc}

0003d178 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   3d178:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   3d17a:	2210      	movs	r2, #16
{
   3d17c:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   3d17e:	2100      	movs	r1, #0
   3d180:	f007 fea9 	bl	44ed6 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3d184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3d188:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   3d18c:	3201      	adds	r2, #1
   3d18e:	d034      	beq.n	3d1fa <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3d190:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3d194:	3201      	adds	r2, #1
   3d196:	d030      	beq.n	3d1fa <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3d198:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3d19c:	3201      	adds	r2, #1
   3d19e:	d02c      	beq.n	3d1fa <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   3d1a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3d1a4:	3201      	adds	r2, #1
   3d1a6:	d028      	beq.n	3d1fa <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   3d1a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   3d1ac:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   3d1ae:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3d1b0:	0a08      	lsrs	r0, r1, #8
   3d1b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   3d1b6:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   3d1b8:	70e0      	strb	r0, [r4, #3]
   3d1ba:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   3d1bc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   3d1c0:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   3d1c2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3d1c4:	0a08      	lsrs	r0, r1, #8
   3d1c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   3d1ca:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   3d1cc:	71e0      	strb	r0, [r4, #7]
   3d1ce:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   3d1d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   3d1d4:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   3d1d6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3d1d8:	0a08      	lsrs	r0, r1, #8
   3d1da:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3d1de:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   3d1e0:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   3d1e2:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   3d1e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   3d1e8:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   3d1ea:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   3d1ec:	0a11      	lsrs	r1, r2, #8
   3d1ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3d1f2:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   3d1f4:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   3d1f6:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   3d1f8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   3d1fa:	4620      	mov	r0, r4
   3d1fc:	2210      	movs	r2, #16
}
   3d1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   3d202:	2100      	movs	r1, #0
   3d204:	f007 be67 	b.w	44ed6 <memset>

0003d208 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   3d208:	4b02      	ldr	r3, [pc, #8]	; (3d214 <net_buf_pool_get+0xc>)
   3d20a:	222c      	movs	r2, #44	; 0x2c
   3d20c:	fb02 3000 	mla	r0, r2, r0, r3
   3d210:	4770      	bx	lr
   3d212:	bf00      	nop
   3d214:	20000c74 	.word	0x20000c74

0003d218 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d218:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3d21a:	4b06      	ldr	r3, [pc, #24]	; (3d234 <net_buf_id+0x1c>)
   3d21c:	212c      	movs	r1, #44	; 0x2c
   3d21e:	fb01 3302 	mla	r3, r1, r2, r3
   3d222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d224:	7f1b      	ldrb	r3, [r3, #28]
   3d226:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3d228:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d22a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   3d22e:	fbb0 f0f3 	udiv	r0, r0, r3
   3d232:	4770      	bx	lr
   3d234:	20000c74 	.word	0x20000c74

0003d238 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   3d238:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3d23a:	4b0a      	ldr	r3, [pc, #40]	; (3d264 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d23c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3d23e:	242c      	movs	r4, #44	; 0x2c
   3d240:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   3d244:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d248:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3d24a:	6823      	ldr	r3, [r4, #0]
   3d24c:	429a      	cmp	r2, r3
   3d24e:	bf94      	ite	ls
   3d250:	600a      	strls	r2, [r1, #0]
   3d252:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3d254:	f7ff ffe0 	bl	3d218 <net_buf_id>
   3d258:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   3d25c:	fb02 3000 	mla	r0, r2, r0, r3
   3d260:	bd10      	pop	{r4, pc}
   3d262:	bf00      	nop
   3d264:	20000c74 	.word	0x20000c74

0003d268 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   3d268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d26c:	4605      	mov	r5, r0
   3d26e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3d270:	4610      	mov	r0, r2
   3d272:	4619      	mov	r1, r3
{
   3d274:	4691      	mov	r9, r2
   3d276:	4698      	mov	r8, r3
   3d278:	4617      	mov	r7, r2
   3d27a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3d27c:	f00c f85f 	bl	4933e <sys_clock_timeout_end_calc>
   3d280:	4682      	mov	sl, r0
   3d282:	468b      	mov	fp, r1
	__asm__ volatile(
   3d284:	f04f 0320 	mov.w	r3, #32
   3d288:	f3ef 8111 	mrs	r1, BASEPRI
   3d28c:	f383 8812 	msr	BASEPRI_MAX, r3
   3d290:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   3d294:	8b6b      	ldrh	r3, [r5, #26]
   3d296:	2b00      	cmp	r3, #0
   3d298:	d05a      	beq.n	3d350 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   3d29a:	8b2a      	ldrh	r2, [r5, #24]
   3d29c:	429a      	cmp	r2, r3
   3d29e:	d93e      	bls.n	3d31e <net_buf_alloc_len+0xb6>
   3d2a0:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   3d2a2:	2200      	movs	r2, #0
   3d2a4:	2300      	movs	r3, #0
   3d2a6:	4628      	mov	r0, r5
   3d2a8:	f004 fb04 	bl	418b4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   3d2ac:	9900      	ldr	r1, [sp, #0]
   3d2ae:	4604      	mov	r4, r0
   3d2b0:	2800      	cmp	r0, #0
   3d2b2:	d034      	beq.n	3d31e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   3d2b4:	f381 8811 	msr	BASEPRI, r1
   3d2b8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   3d2bc:	9b01      	ldr	r3, [sp, #4]
   3d2be:	2b00      	cmp	r3, #0
   3d2c0:	d056      	beq.n	3d370 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   3d2c2:	ea58 0309 	orrs.w	r3, r8, r9
   3d2c6:	d00f      	beq.n	3d2e8 <net_buf_alloc_len+0x80>
   3d2c8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3d2cc:	bf08      	it	eq
   3d2ce:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   3d2d2:	d009      	beq.n	3d2e8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   3d2d4:	f005 f9d4 	bl	42680 <sys_clock_tick_get>
   3d2d8:	ebba 0700 	subs.w	r7, sl, r0
   3d2dc:	eb6b 0601 	sbc.w	r6, fp, r1
   3d2e0:	2e00      	cmp	r6, #0
   3d2e2:	bfbc      	itt	lt
   3d2e4:	2700      	movlt	r7, #0
   3d2e6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d2e8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   3d2ea:	f8df 809c 	ldr.w	r8, [pc, #156]	; 3d388 <net_buf_alloc_len+0x120>
   3d2ee:	f04f 092c 	mov.w	r9, #44	; 0x2c
   3d2f2:	fb09 8303 	mla	r3, r9, r3, r8
   3d2f6:	463a      	mov	r2, r7
   3d2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d2fa:	681b      	ldr	r3, [r3, #0]
   3d2fc:	a901      	add	r1, sp, #4
   3d2fe:	681d      	ldr	r5, [r3, #0]
   3d300:	4620      	mov	r0, r4
   3d302:	4633      	mov	r3, r6
   3d304:	47a8      	blx	r5
   3d306:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   3d308:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   3d30a:	2800      	cmp	r0, #0
   3d30c:	d131      	bne.n	3d372 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   3d30e:	79a0      	ldrb	r0, [r4, #6]
   3d310:	4621      	mov	r1, r4
   3d312:	fb00 8009 	mla	r0, r0, r9, r8
   3d316:	f00b fd7f 	bl	48e18 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   3d31a:	462c      	mov	r4, r5
}
   3d31c:	e024      	b.n	3d368 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   3d31e:	8b68      	ldrh	r0, [r5, #26]
   3d320:	1e43      	subs	r3, r0, #1
   3d322:	836b      	strh	r3, [r5, #26]
   3d324:	f381 8811 	msr	BASEPRI, r1
   3d328:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d32c:	7f2a      	ldrb	r2, [r5, #28]
   3d32e:	f102 0417 	add.w	r4, r2, #23
   3d332:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3d336:	8b2c      	ldrh	r4, [r5, #24]
   3d338:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3d33a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   3d33c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   3d340:	4811      	ldr	r0, [pc, #68]	; (3d388 <net_buf_alloc_len+0x120>)
   3d342:	4b12      	ldr	r3, [pc, #72]	; (3d38c <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   3d344:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   3d346:	1a2d      	subs	r5, r5, r0
   3d348:	10ad      	asrs	r5, r5, #2
   3d34a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   3d34c:	71a5      	strb	r5, [r4, #6]
		goto success;
   3d34e:	e7b5      	b.n	3d2bc <net_buf_alloc_len+0x54>
   3d350:	f381 8811 	msr	BASEPRI, r1
   3d354:	f3bf 8f6f 	isb	sy
   3d358:	464a      	mov	r2, r9
   3d35a:	4643      	mov	r3, r8
   3d35c:	4628      	mov	r0, r5
   3d35e:	f004 faa9 	bl	418b4 <z_impl_k_queue_get>
	if (!buf) {
   3d362:	4604      	mov	r4, r0
   3d364:	2800      	cmp	r0, #0
   3d366:	d1a9      	bne.n	3d2bc <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   3d368:	4620      	mov	r0, r4
   3d36a:	b003      	add	sp, #12
   3d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   3d370:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   3d372:	2300      	movs	r3, #0
	buf->ref   = 1U;
   3d374:	2201      	movs	r2, #1
	buf->frags = NULL;
   3d376:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   3d378:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   3d37a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   3d37c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   3d37e:	6923      	ldr	r3, [r4, #16]
   3d380:	81e2      	strh	r2, [r4, #14]
   3d382:	60a3      	str	r3, [r4, #8]
	return buf;
   3d384:	e7f0      	b.n	3d368 <net_buf_alloc_len+0x100>
   3d386:	bf00      	nop
   3d388:	20000c74 	.word	0x20000c74
   3d38c:	ba2e8ba3 	.word	0xba2e8ba3

0003d390 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   3d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d394:	4d16      	ldr	r5, [pc, #88]	; (3d3f0 <net_buf_unref+0x60>)
   3d396:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   3d398:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   3d39a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   3d39c:	b90c      	cbnz	r4, 3d3a2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   3d39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   3d3a2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   3d3a4:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   3d3a8:	3b01      	subs	r3, #1
   3d3aa:	b2db      	uxtb	r3, r3
   3d3ac:	7123      	strb	r3, [r4, #4]
   3d3ae:	2b00      	cmp	r3, #0
   3d3b0:	d1f5      	bne.n	3d39e <net_buf_unref+0xe>
		if (buf->__buf) {
   3d3b2:	6921      	ldr	r1, [r4, #16]
   3d3b4:	b159      	cbz	r1, 3d3ce <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3d3b6:	7963      	ldrb	r3, [r4, #5]
   3d3b8:	079b      	lsls	r3, r3, #30
   3d3ba:	d407      	bmi.n	3d3cc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d3bc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   3d3be:	fb07 5303 	mla	r3, r7, r3, r5
   3d3c2:	4620      	mov	r0, r4
   3d3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d3c6:	681b      	ldr	r3, [r3, #0]
   3d3c8:	689b      	ldr	r3, [r3, #8]
   3d3ca:	4798      	blx	r3
			buf->__buf = NULL;
   3d3cc:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   3d3ce:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   3d3d0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   3d3d2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   3d3d6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   3d3d8:	6a1b      	ldr	r3, [r3, #32]
   3d3da:	b11b      	cbz	r3, 3d3e4 <net_buf_unref+0x54>
			pool->destroy(buf);
   3d3dc:	4620      	mov	r0, r4
   3d3de:	4798      	blx	r3
{
   3d3e0:	4644      	mov	r4, r8
   3d3e2:	e7db      	b.n	3d39c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   3d3e4:	4621      	mov	r1, r4
   3d3e6:	fb00 5007 	mla	r0, r0, r7, r5
   3d3ea:	f00b fd15 	bl	48e18 <k_queue_prepend>
}
   3d3ee:	e7f7      	b.n	3d3e0 <net_buf_unref+0x50>
   3d3f0:	20000c74 	.word	0x20000c74

0003d3f4 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   3d3f4:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3d3f8:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d3fa:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3d3fc:	d004      	beq.n	3d408 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   3d3fe:	f010 0f78 	tst.w	r0, #120	; 0x78
   3d402:	d001      	beq.n	3d408 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   3d404:	2000      	movs	r0, #0
   3d406:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d408:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3d40a:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d40e:	f000 0008 	and.w	r0, r0, #8
   3d412:	da05      	bge.n	3d420 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d414:	b958      	cbnz	r0, 3d42e <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   3d416:	4808      	ldr	r0, [pc, #32]	; (3d438 <endpoint_ctx+0x44>)
   3d418:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3d41c:	304c      	adds	r0, #76	; 0x4c
   3d41e:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d420:	b938      	cbnz	r0, 3d432 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   3d422:	4805      	ldr	r0, [pc, #20]	; (3d438 <endpoint_ctx+0x44>)
   3d424:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3d428:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   3d42c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   3d42e:	4803      	ldr	r0, [pc, #12]	; (3d43c <endpoint_ctx+0x48>)
   3d430:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   3d432:	4803      	ldr	r0, [pc, #12]	; (3d440 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   3d434:	4770      	bx	lr
   3d436:	bf00      	nop
   3d438:	200033e8 	.word	0x200033e8
   3d43c:	20003534 	.word	0x20003534
   3d440:	20003654 	.word	0x20003654

0003d444 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   3d444:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   3d446:	4801      	ldr	r0, [pc, #4]	; (3d44c <usbd_evt_put+0x8>)
   3d448:	f00b bcdb 	b.w	48e02 <k_queue_append>
   3d44c:	20000c5c 	.word	0x20000c5c

0003d450 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   3d450:	4901      	ldr	r1, [pc, #4]	; (3d458 <usbd_work_schedule+0x8>)
   3d452:	4802      	ldr	r0, [pc, #8]	; (3d45c <usbd_work_schedule+0xc>)
   3d454:	f00b bdaf 	b.w	48fb6 <k_work_submit_to_queue>
   3d458:	20003410 	.word	0x20003410
   3d45c:	20001788 	.word	0x20001788

0003d460 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   3d460:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   3d462:	480b      	ldr	r0, [pc, #44]	; (3d490 <usb_init+0x30>)
   3d464:	f002 fd5c 	bl	3ff20 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   3d468:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   3d46a:	480a      	ldr	r0, [pc, #40]	; (3d494 <usb_init+0x34>)
   3d46c:	f002 fd9e 	bl	3ffac <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   3d470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d474:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3d478:	4907      	ldr	r1, [pc, #28]	; (3d498 <usb_init+0x38>)
   3d47a:	4808      	ldr	r0, [pc, #32]	; (3d49c <usb_init+0x3c>)
   3d47c:	9400      	str	r4, [sp, #0]
   3d47e:	f004 fbbf 	bl	41c00 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   3d482:	4907      	ldr	r1, [pc, #28]	; (3d4a0 <usb_init+0x40>)
   3d484:	4807      	ldr	r0, [pc, #28]	; (3d4a4 <usb_init+0x44>)
   3d486:	f00b fd8d 	bl	48fa4 <k_work_init>

	return 0;
}
   3d48a:	4620      	mov	r0, r4
   3d48c:	b002      	add	sp, #8
   3d48e:	bd10      	pop	{r4, pc}
   3d490:	0004b969 	.word	0x0004b969
   3d494:	0004b1b4 	.word	0x0004b1b4
   3d498:	200051b0 	.word	0x200051b0
   3d49c:	20001788 	.word	0x20001788
   3d4a0:	0003d7bd 	.word	0x0003d7bd
   3d4a4:	20003410 	.word	0x20003410

0003d4a8 <usbd_evt_get>:
   3d4a8:	4802      	ldr	r0, [pc, #8]	; (3d4b4 <usbd_evt_get+0xc>)
   3d4aa:	2200      	movs	r2, #0
   3d4ac:	2300      	movs	r3, #0
   3d4ae:	f004 ba01 	b.w	418b4 <z_impl_k_queue_get>
   3d4b2:	bf00      	nop
   3d4b4:	20000c5c 	.word	0x20000c5c

0003d4b8 <usbd_evt_flush>:
{
   3d4b8:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d4ba:	4c05      	ldr	r4, [pc, #20]	; (3d4d0 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   3d4bc:	f7ff fff4 	bl	3d4a8 <usbd_evt_get>
		if (ev) {
   3d4c0:	b120      	cbz	r0, 3d4cc <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d4c2:	1d01      	adds	r1, r0, #4
   3d4c4:	4620      	mov	r0, r4
   3d4c6:	f00b fbd6 	bl	48c76 <k_mem_slab_free>
	} while (ev != NULL);
   3d4ca:	e7f7      	b.n	3d4bc <usbd_evt_flush+0x4>
}
   3d4cc:	bd10      	pop	{r4, pc}
   3d4ce:	bf00      	nop
   3d4d0:	20000b10 	.word	0x20000b10

0003d4d4 <usbd_evt_alloc>:
{
   3d4d4:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   3d4d6:	2300      	movs	r3, #0
   3d4d8:	480e      	ldr	r0, [pc, #56]	; (3d514 <usbd_evt_alloc+0x40>)
   3d4da:	2200      	movs	r2, #0
   3d4dc:	a901      	add	r1, sp, #4
   3d4de:	f003 ff7d 	bl	413dc <k_mem_slab_alloc>
   3d4e2:	b190      	cbz	r0, 3d50a <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   3d4e4:	f7ff ffe8 	bl	3d4b8 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   3d4e8:	480a      	ldr	r0, [pc, #40]	; (3d514 <usbd_evt_alloc+0x40>)
   3d4ea:	2200      	movs	r2, #0
   3d4ec:	2300      	movs	r3, #0
   3d4ee:	a901      	add	r1, sp, #4
   3d4f0:	f003 ff74 	bl	413dc <k_mem_slab_alloc>
   3d4f4:	b938      	cbnz	r0, 3d506 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   3d4f6:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3d4f8:	2304      	movs	r3, #4
		ev->block = block;
   3d4fa:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3d4fc:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   3d4fe:	f7ff ffa1 	bl	3d444 <usbd_evt_put>
		usbd_work_schedule();
   3d502:	f7ff ffa5 	bl	3d450 <usbd_work_schedule>
		return NULL;
   3d506:	2000      	movs	r0, #0
   3d508:	e001      	b.n	3d50e <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   3d50a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   3d50c:	6040      	str	r0, [r0, #4]
}
   3d50e:	b003      	add	sp, #12
   3d510:	f85d fb04 	ldr.w	pc, [sp], #4
   3d514:	20000b10 	.word	0x20000b10

0003d518 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d518:	7881      	ldrb	r1, [r0, #2]
{
   3d51a:	b570      	push	{r4, r5, r6, lr}
   3d51c:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d51e:	4608      	mov	r0, r1
   3d520:	f7ff ff68 	bl	3d3f4 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d524:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   3d526:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d528:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d52a:	d512      	bpl.n	3d552 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   3d52c:	2d00      	cmp	r5, #0
   3d52e:	d143      	bne.n	3d5b8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3d530:	f7ff ffd0 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3d534:	4603      	mov	r3, r0
   3d536:	2800      	cmp	r0, #0
   3d538:	d03e      	beq.n	3d5b8 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   3d53a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3d53c:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3d53e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3d540:	2203      	movs	r2, #3
   3d542:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d544:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   3d546:	f7ff ff7d 	bl	3d444 <usbd_evt_put>
}
   3d54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   3d54e:	f7ff bf7f 	b.w	3d450 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3d552:	b14d      	cbz	r5, 3d568 <usbd_event_transfer_data+0x50>
   3d554:	2d01      	cmp	r5, #1
   3d556:	d12f      	bne.n	3d5b8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3d558:	f7ff ffbc 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3d55c:	4603      	mov	r3, r0
   3d55e:	b358      	cbz	r0, 3d5b8 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   3d560:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3d562:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d564:	7305      	strb	r5, [r0, #12]
   3d566:	e7ed      	b.n	3d544 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d568:	f7ff ffb4 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3d56c:	b320      	cbz	r0, 3d5b8 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   3d56e:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   3d570:	4b12      	ldr	r3, [pc, #72]	; (3d5bc <usbd_event_transfer_data+0xa4>)
   3d572:	f012 0f80 	tst.w	r2, #128	; 0x80
   3d576:	f002 0108 	and.w	r1, r2, #8
   3d57a:	d011      	beq.n	3d5a0 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3d57c:	b141      	cbz	r1, 3d590 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   3d57e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   3d582:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   3d584:	2301      	movs	r3, #1
   3d586:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3d588:	2302      	movs	r3, #2
   3d58a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d58c:	6084      	str	r4, [r0, #8]
   3d58e:	e7da      	b.n	3d546 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   3d590:	f002 020f 	and.w	r2, r2, #15
   3d594:	2114      	movs	r1, #20
   3d596:	fb01 3302 	mla	r3, r1, r2, r3
   3d59a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   3d59e:	e7f0      	b.n	3d582 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3d5a0:	b111      	cbz	r1, 3d5a8 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   3d5a2:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   3d5a6:	e7ec      	b.n	3d582 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   3d5a8:	f002 020f 	and.w	r2, r2, #15
   3d5ac:	2114      	movs	r1, #20
   3d5ae:	fb01 3302 	mla	r3, r1, r2, r3
   3d5b2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   3d5b6:	e7e4      	b.n	3d582 <usbd_event_transfer_data+0x6a>
}
   3d5b8:	bd70      	pop	{r4, r5, r6, pc}
   3d5ba:	bf00      	nop
   3d5bc:	40027000 	.word	0x40027000

0003d5c0 <usb_dc_power_event_handler>:
	switch (event) {
   3d5c0:	2802      	cmp	r0, #2
{
   3d5c2:	b510      	push	{r4, lr}
   3d5c4:	d811      	bhi.n	3d5ea <usb_dc_power_event_handler+0x2a>
   3d5c6:	4b09      	ldr	r3, [pc, #36]	; (3d5ec <usb_dc_power_event_handler+0x2c>)
   3d5c8:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   3d5ca:	f7ff ff83 	bl	3d4d4 <usbd_evt_alloc>
	if (!ev) {
   3d5ce:	b160      	cbz	r0, 3d5ea <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   3d5d0:	2200      	movs	r2, #0
   3d5d2:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   3d5d4:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   3d5d6:	f7ff ff35 	bl	3d444 <usbd_evt_put>
	if (usbd_ctx.attached) {
   3d5da:	4b05      	ldr	r3, [pc, #20]	; (3d5f0 <usb_dc_power_event_handler+0x30>)
   3d5dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3d5e0:	b11b      	cbz	r3, 3d5ea <usb_dc_power_event_handler+0x2a>
}
   3d5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   3d5e6:	f7ff bf33 	b.w	3d450 <usbd_work_schedule>
}
   3d5ea:	bd10      	pop	{r4, pc}
   3d5ec:	0004b966 	.word	0x0004b966
   3d5f0:	200033e8 	.word	0x200033e8

0003d5f4 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   3d5f4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3d5f6:	490f      	ldr	r1, [pc, #60]	; (3d634 <hfxo_stop.constprop.0.isra.0+0x40>)
   3d5f8:	f3bf 8f5b 	dmb	ish
   3d5fc:	f101 0320 	add.w	r3, r1, #32
   3d600:	2200      	movs	r2, #0
   3d602:	e853 0f00 	ldrex	r0, [r3]
   3d606:	2801      	cmp	r0, #1
   3d608:	d103      	bne.n	3d612 <hfxo_stop.constprop.0.isra.0+0x1e>
   3d60a:	e843 2400 	strex	r4, r2, [r3]
   3d60e:	2c00      	cmp	r4, #0
   3d610:	d1f7      	bne.n	3d602 <hfxo_stop.constprop.0.isra.0+0xe>
   3d612:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   3d616:	d10b      	bne.n	3d630 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3d618:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   3d61a:	310c      	adds	r1, #12
   3d61c:	4620      	mov	r0, r4
   3d61e:	f005 fc7b 	bl	42f18 <onoff_cancel>

	if (rv == -EALREADY) {
   3d622:	3078      	adds	r0, #120	; 0x78
   3d624:	d104      	bne.n	3d630 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   3d626:	4620      	mov	r0, r4
}
   3d628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d62c:	f005 bc4f 	b.w	42ece <onoff_release>
   3d630:	bd10      	pop	{r4, pc}
   3d632:	bf00      	nop
   3d634:	200033e8 	.word	0x200033e8

0003d638 <usbd_event_handler>:
{
   3d638:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d63a:	4606      	mov	r6, r0
   3d63c:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   3d63e:	2214      	movs	r2, #20
   3d640:	2100      	movs	r1, #0
   3d642:	a803      	add	r0, sp, #12
   3d644:	f007 fc47 	bl	44ed6 <memset>
	switch (p_event->type) {
   3d648:	7833      	ldrb	r3, [r6, #0]
   3d64a:	3b01      	subs	r3, #1
   3d64c:	2b05      	cmp	r3, #5
   3d64e:	d821      	bhi.n	3d694 <usbd_event_handler+0x5c>
   3d650:	e8df f003 	tbb	[pc, r3]
   3d654:	1414037a 	.word	0x1414037a
   3d658:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   3d65a:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   3d65c:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   3d660:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   3d662:	f7ff ff37 	bl	3d4d4 <usbd_evt_alloc>
		if (!ev) {
   3d666:	4603      	mov	r3, r0
   3d668:	b1a0      	cbz	r0, 3d694 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   3d66a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   3d66c:	f100 0208 	add.w	r2, r0, #8
   3d670:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   3d674:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   3d678:	4618      	mov	r0, r3
   3d67a:	e01d      	b.n	3d6b8 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   3d67c:	2304      	movs	r3, #4
   3d67e:	e7ed      	b.n	3d65c <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3d680:	78b1      	ldrb	r1, [r6, #2]
   3d682:	4608      	mov	r0, r1
   3d684:	f7ff feb6 	bl	3d3f4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   3d688:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3d68a:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   3d68c:	b123      	cbz	r3, 3d698 <usbd_event_handler+0x60>
   3d68e:	3b01      	subs	r3, #1
   3d690:	2b02      	cmp	r3, #2
   3d692:	d943      	bls.n	3d71c <usbd_event_handler+0xe4>
}
   3d694:	b009      	add	sp, #36	; 0x24
   3d696:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d698:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   3d69a:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d69c:	d513      	bpl.n	3d6c6 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   3d69e:	2d00      	cmp	r5, #0
   3d6a0:	d1f8      	bne.n	3d694 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d6a2:	f7ff ff17 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3d6a6:	4603      	mov	r3, r0
   3d6a8:	2800      	cmp	r0, #0
   3d6aa:	d0f3      	beq.n	3d694 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3d6ac:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3d6ae:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3d6b0:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3d6b2:	2203      	movs	r2, #3
   3d6b4:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d6b6:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   3d6b8:	f7ff fec4 	bl	3d444 <usbd_evt_put>
}
   3d6bc:	b009      	add	sp, #36	; 0x24
   3d6be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   3d6c2:	f7ff bec5 	b.w	3d450 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3d6c6:	b155      	cbz	r5, 3d6de <usbd_event_handler+0xa6>
   3d6c8:	2d01      	cmp	r5, #1
   3d6ca:	d1e3      	bne.n	3d694 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d6cc:	f7ff ff02 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3d6d0:	4603      	mov	r3, r0
   3d6d2:	2800      	cmp	r0, #0
   3d6d4:	d0de      	beq.n	3d694 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   3d6d6:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3d6d8:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d6da:	7305      	strb	r5, [r0, #12]
   3d6dc:	e7eb      	b.n	3d6b6 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   3d6de:	f7ff fef9 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3d6e2:	4607      	mov	r7, r0
   3d6e4:	2800      	cmp	r0, #0
   3d6e6:	d0d5      	beq.n	3d694 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3d6e8:	2301      	movs	r3, #1
   3d6ea:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3d6ec:	2302      	movs	r3, #2
   3d6ee:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d6f0:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   3d6f2:	f104 010c 	add.w	r1, r4, #12
   3d6f6:	78b0      	ldrb	r0, [r6, #2]
   3d6f8:	f00a ff0b 	bl	48512 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   3d6fc:	4a13      	ldr	r2, [pc, #76]	; (3d74c <usbd_event_handler+0x114>)
   3d6fe:	68e1      	ldr	r1, [r4, #12]
   3d700:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   3d704:	428b      	cmp	r3, r1
   3d706:	d906      	bls.n	3d716 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   3d708:	1a5b      	subs	r3, r3, r1
   3d70a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   3d70e:	f003 f9a7 	bl	40a60 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   3d712:	4638      	mov	r0, r7
   3d714:	e7d0      	b.n	3d6b8 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   3d716:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   3d71a:	e7fa      	b.n	3d712 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   3d71c:	4630      	mov	r0, r6
}
   3d71e:	b009      	add	sp, #36	; 0x24
   3d720:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   3d724:	f7ff bef8 	b.w	3d518 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   3d728:	a801      	add	r0, sp, #4
   3d72a:	f003 f973 	bl	40a14 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   3d72e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   3d732:	2b05      	cmp	r3, #5
   3d734:	d104      	bne.n	3d740 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   3d736:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3d73a:	f013 0f60 	tst.w	r3, #96	; 0x60
   3d73e:	d0a9      	beq.n	3d694 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   3d740:	4b03      	ldr	r3, [pc, #12]	; (3d750 <usbd_event_handler+0x118>)
   3d742:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   3d744:	2401      	movs	r4, #1
   3d746:	e78c      	b.n	3d662 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   3d748:	2402      	movs	r4, #2
   3d74a:	e78a      	b.n	3d662 <usbd_event_handler+0x2a>
   3d74c:	200033e8 	.word	0x200033e8
   3d750:	20003554 	.word	0x20003554

0003d754 <eps_ctx_init>:
{
   3d754:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d756:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3d758:	f064 007f 	orn	r0, r4, #127	; 0x7f
   3d75c:	b2c0      	uxtb	r0, r0
   3d75e:	f7ff fe49 	bl	3d3f4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d762:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3d764:	f00a fb91 	bl	47e8a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d768:	2c08      	cmp	r4, #8
   3d76a:	d1f5      	bne.n	3d758 <eps_ctx_init+0x4>
   3d76c:	4d0f      	ldr	r5, [pc, #60]	; (3d7ac <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d76e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3d770:	b2e0      	uxtb	r0, r4
   3d772:	f7ff fe3f 	bl	3d3f4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   3d776:	6903      	ldr	r3, [r0, #16]
   3d778:	b903      	cbnz	r3, 3d77c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   3d77a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d77c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3d77e:	f00a fb84 	bl	47e8a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d782:	2c08      	cmp	r4, #8
   3d784:	f105 0540 	add.w	r5, r5, #64	; 0x40
   3d788:	d1f2      	bne.n	3d770 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   3d78a:	4c09      	ldr	r4, [pc, #36]	; (3d7b0 <eps_ctx_init+0x5c>)
   3d78c:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   3d790:	f00a fb7b 	bl	47e8a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   3d794:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   3d798:	b913      	cbnz	r3, 3d7a0 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   3d79a:	4b06      	ldr	r3, [pc, #24]	; (3d7b4 <eps_ctx_init+0x60>)
   3d79c:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   3d7a0:	4805      	ldr	r0, [pc, #20]	; (3d7b8 <eps_ctx_init+0x64>)
   3d7a2:	f00a fb72 	bl	47e8a <ep_ctx_reset>
}
   3d7a6:	2000      	movs	r0, #0
   3d7a8:	bd38      	pop	{r3, r4, r5, pc}
   3d7aa:	bf00      	nop
   3d7ac:	200031e8 	.word	0x200031e8
   3d7b0:	200033e8 	.word	0x200033e8
   3d7b4:	20002de8 	.word	0x20002de8
   3d7b8:	20003654 	.word	0x20003654

0003d7bc <usbd_work_handler>:
{
   3d7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   3d7c0:	4ca8      	ldr	r4, [pc, #672]	; (3da64 <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d7c2:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 3da68 <usbd_work_handler+0x2ac>
{
   3d7c6:	b085      	sub	sp, #20
   3d7c8:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   3d7ca:	f7ff fe6d 	bl	3d4a8 <usbd_evt_get>
   3d7ce:	b910      	cbnz	r0, 3d7d6 <usbd_work_handler+0x1a>
}
   3d7d0:	b005      	add	sp, #20
   3d7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   3d7d6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3d7da:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d7dc:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3d7e0:	b93b      	cbnz	r3, 3d7f2 <usbd_work_handler+0x36>
   3d7e2:	2a00      	cmp	r2, #0
   3d7e4:	f000 8086 	beq.w	3d8f4 <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d7e8:	4649      	mov	r1, r9
   3d7ea:	4640      	mov	r0, r8
   3d7ec:	f00b fa43 	bl	48c76 <k_mem_slab_free>
}
   3d7f0:	e7eb      	b.n	3d7ca <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   3d7f2:	2a04      	cmp	r2, #4
   3d7f4:	d8f8      	bhi.n	3d7e8 <usbd_work_handler+0x2c>
   3d7f6:	e8df f012 	tbh	[pc, r2, lsl #1]
   3d7fa:	007d      	.short	0x007d
   3d7fc:	01030005 	.word	0x01030005
   3d800:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   3d804:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   3d806:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   3d808:	2b03      	cmp	r3, #3
   3d80a:	d8ed      	bhi.n	3d7e8 <usbd_work_handler+0x2c>
   3d80c:	e8df f003 	tbb	[pc, r3]
   3d810:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   3d814:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   3d816:	2208      	movs	r2, #8
   3d818:	2100      	movs	r1, #0
   3d81a:	4630      	mov	r0, r6
   3d81c:	f007 fb5b 	bl	44ed6 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   3d820:	4b92      	ldr	r3, [pc, #584]	; (3da6c <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d822:	4893      	ldr	r0, [pc, #588]	; (3da70 <usbd_work_handler+0x2b4>)
   3d824:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   3d828:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   3d82a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   3d82e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   3d830:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   3d834:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   3d838:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   3d83c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   3d83e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   3d842:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   3d846:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   3d84a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   3d84c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   3d850:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   3d854:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3d858:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   3d85a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d85c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3d85e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d860:	f007 fb2e 	bl	44ec0 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   3d864:	682b      	ldr	r3, [r5, #0]
   3d866:	7a68      	ldrb	r0, [r5, #9]
   3d868:	2100      	movs	r1, #0
   3d86a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   3d86c:	f996 3000 	ldrsb.w	r3, [r6]
   3d870:	2b00      	cmp	r3, #0
   3d872:	db06      	blt.n	3d882 <usbd_work_handler+0xc6>
   3d874:	88f3      	ldrh	r3, [r6, #6]
   3d876:	b123      	cbz	r3, 3d882 <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   3d878:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   3d87c:	f003 f8f0 	bl	40a60 <nrfx_usbd_setup_data_clear>
   3d880:	e7b2      	b.n	3d7e8 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   3d882:	2300      	movs	r3, #0
   3d884:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   3d888:	e7ae      	b.n	3d7e8 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   3d88a:	7f6b      	ldrb	r3, [r5, #29]
   3d88c:	2b00      	cmp	r3, #0
   3d88e:	d0ab      	beq.n	3d7e8 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   3d890:	7f2b      	ldrb	r3, [r5, #28]
   3d892:	2b00      	cmp	r3, #0
   3d894:	d0a8      	beq.n	3d7e8 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   3d896:	2600      	movs	r6, #0
   3d898:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d89e:	4875      	ldr	r0, [pc, #468]	; (3da74 <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   3d8a0:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d8a6:	f00a fb03 	bl	47eb0 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   3d8aa:	696b      	ldr	r3, [r5, #20]
   3d8ac:	9301      	str	r3, [sp, #4]
   3d8ae:	686b      	ldr	r3, [r5, #4]
   3d8b0:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   3d8b4:	a901      	add	r1, sp, #4
   3d8b6:	7a68      	ldrb	r0, [r5, #9]
   3d8b8:	f002 fedc 	bl	40674 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   3d8bc:	486d      	ldr	r0, [pc, #436]	; (3da74 <usbd_work_handler+0x2b8>)
   3d8be:	f00a faf9 	bl	47eb4 <k_mutex_unlock.isra.0>
   3d8c2:	e791      	b.n	3d7e8 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d8c4:	682b      	ldr	r3, [r5, #0]
   3d8c6:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d8c8:	7a68      	ldrb	r0, [r5, #9]
   3d8ca:	4798      	blx	r3
		break;
   3d8cc:	e78c      	b.n	3d7e8 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   3d8ce:	7aab      	ldrb	r3, [r5, #10]
   3d8d0:	b96b      	cbnz	r3, 3d8ee <usbd_work_handler+0x132>
   3d8d2:	7feb      	ldrb	r3, [r5, #31]
   3d8d4:	b95b      	cbnz	r3, 3d8ee <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d8d6:	4867      	ldr	r0, [pc, #412]	; (3da74 <usbd_work_handler+0x2b8>)
   3d8d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d8e0:	f00a fae6 	bl	47eb0 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   3d8e4:	f003 f8ec 	bl	40ac0 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   3d8e8:	4862      	ldr	r0, [pc, #392]	; (3da74 <usbd_work_handler+0x2b8>)
   3d8ea:	f00a fae3 	bl	47eb4 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d8ee:	682b      	ldr	r3, [r5, #0]
   3d8f0:	2102      	movs	r1, #2
   3d8f2:	e7e9      	b.n	3d8c8 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   3d8f4:	7a02      	ldrb	r2, [r0, #8]
   3d8f6:	2a04      	cmp	r2, #4
   3d8f8:	f63f af76 	bhi.w	3d7e8 <usbd_work_handler+0x2c>
   3d8fc:	e8df f002 	tbb	[pc, r2]
   3d900:	6925035b 	.word	0x6925035b
   3d904:	75          	.byte	0x75
   3d905:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   3d906:	f002 fe65 	bl	405d4 <nrfx_usbd_is_enabled>
   3d90a:	4605      	mov	r5, r0
   3d90c:	2800      	cmp	r0, #0
   3d90e:	f47f af6b 	bne.w	3d7e8 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   3d912:	f002 fda3 	bl	4045c <nrfx_usbd_enable>
   3d916:	f3bf 8f5b 	dmb	ish
   3d91a:	4957      	ldr	r1, [pc, #348]	; (3da78 <usbd_work_handler+0x2bc>)
   3d91c:	2301      	movs	r3, #1
   3d91e:	e851 2f00 	ldrex	r2, [r1]
   3d922:	2a00      	cmp	r2, #0
   3d924:	d103      	bne.n	3d92e <usbd_work_handler+0x172>
   3d926:	e841 3000 	strex	r0, r3, [r1]
   3d92a:	2800      	cmp	r0, #0
   3d92c:	d1f7      	bne.n	3d91e <usbd_work_handler+0x162>
   3d92e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   3d932:	f47f af59 	bne.w	3d7e8 <usbd_work_handler+0x2c>
   3d936:	f841 5c10 	str.w	r5, [r1, #-16]
   3d93a:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3d93e:	69e0      	ldr	r0, [r4, #28]
   3d940:	6163      	str	r3, [r4, #20]
   3d942:	3914      	subs	r1, #20
   3d944:	f005 fa7a 	bl	42e3c <onoff_request>
   3d948:	e74e      	b.n	3d7e8 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   3d94a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3d94c:	f065 007f 	orn	r0, r5, #127	; 0x7f
   3d950:	b2c0      	uxtb	r0, r0
   3d952:	f7ff fd4f 	bl	3d3f4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3d956:	7a03      	ldrb	r3, [r0, #8]
   3d958:	b113      	cbz	r3, 3d960 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d95a:	7a40      	ldrb	r0, [r0, #9]
   3d95c:	f003 fa9c 	bl	40e98 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   3d960:	3501      	adds	r5, #1
   3d962:	2d08      	cmp	r5, #8
   3d964:	d1f2      	bne.n	3d94c <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   3d966:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   3d96a:	b11b      	cbz	r3, 3d974 <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d96c:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   3d970:	f003 fa92 	bl	40e98 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   3d974:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3d976:	b2e8      	uxtb	r0, r5
   3d978:	f7ff fd3c 	bl	3d3f4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3d97c:	7a03      	ldrb	r3, [r0, #8]
   3d97e:	b113      	cbz	r3, 3d986 <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d980:	7a40      	ldrb	r0, [r0, #9]
   3d982:	f003 fa89 	bl	40e98 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   3d986:	3501      	adds	r5, #1
   3d988:	2d08      	cmp	r5, #8
   3d98a:	d1f4      	bne.n	3d976 <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   3d98c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3d990:	b11b      	cbz	r3, 3d99a <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d992:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   3d996:	f003 fa7f 	bl	40e98 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   3d99a:	2001      	movs	r0, #1
   3d99c:	f002 fdfc 	bl	40598 <nrfx_usbd_start>
		ctx->ready = true;
   3d9a0:	2301      	movs	r3, #1
   3d9a2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   3d9a6:	6823      	ldr	r3, [r4, #0]
   3d9a8:	2b00      	cmp	r3, #0
   3d9aa:	f43f af1d 	beq.w	3d7e8 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   3d9ae:	2100      	movs	r1, #0
   3d9b0:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   3d9b2:	4798      	blx	r3
   3d9b4:	e718      	b.n	3d7e8 <usbd_work_handler+0x2c>
		ctx->ready = false;
   3d9b6:	2500      	movs	r5, #0
   3d9b8:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   3d9bc:	f003 f9f8 	bl	40db0 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   3d9c0:	f7ff fe18 	bl	3d5f4 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   3d9c4:	6823      	ldr	r3, [r4, #0]
   3d9c6:	2b00      	cmp	r3, #0
   3d9c8:	f43f af0e 	beq.w	3d7e8 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   3d9cc:	4629      	mov	r1, r5
   3d9ce:	2004      	movs	r0, #4
   3d9d0:	e7ef      	b.n	3d9b2 <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   3d9d2:	2b00      	cmp	r3, #0
   3d9d4:	f43f af08 	beq.w	3d7e8 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   3d9d8:	f003 fa02 	bl	40de0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   3d9dc:	6823      	ldr	r3, [r4, #0]
   3d9de:	2b00      	cmp	r3, #0
   3d9e0:	f43f af02 	beq.w	3d7e8 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   3d9e4:	2100      	movs	r1, #0
   3d9e6:	2005      	movs	r0, #5
   3d9e8:	e7e3      	b.n	3d9b2 <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   3d9ea:	6822      	ldr	r2, [r4, #0]
   3d9ec:	2a00      	cmp	r2, #0
   3d9ee:	f43f aefb 	beq.w	3d7e8 <usbd_work_handler+0x2c>
   3d9f2:	2b00      	cmp	r3, #0
   3d9f4:	f43f aef8 	beq.w	3d7e8 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   3d9f8:	2100      	movs	r1, #0
   3d9fa:	2006      	movs	r0, #6
   3d9fc:	4790      	blx	r2
   3d9fe:	e6f3      	b.n	3d7e8 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3da00:	f107 0510 	add.w	r5, r7, #16
   3da04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3da08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3da0c:	4628      	mov	r0, r5
   3da0e:	f00a fa4f 	bl	47eb0 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   3da12:	f7ff fe9f 	bl	3d754 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   3da16:	4628      	mov	r0, r5
   3da18:	f00a fa4c 	bl	47eb4 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   3da1c:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3da20:	2b00      	cmp	r3, #0
   3da22:	f43f aee1 	beq.w	3d7e8 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   3da26:	2100      	movs	r1, #0
   3da28:	2001      	movs	r0, #1
   3da2a:	e7c2      	b.n	3d9b2 <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   3da2c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3da30:	b17b      	cbz	r3, 3da52 <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   3da32:	2501      	movs	r5, #1
   3da34:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   3da38:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   3da3c:	f7ff fd4a 	bl	3d4d4 <usbd_evt_alloc>
		if (!ev) {
   3da40:	b138      	cbz	r0, 3da52 <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   3da42:	4a0e      	ldr	r2, [pc, #56]	; (3da7c <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   3da44:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3da46:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   3da48:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   3da4a:	f7ff fcfb 	bl	3d444 <usbd_evt_put>
		usbd_work_schedule();
   3da4e:	f7ff fcff 	bl	3d450 <usbd_work_schedule>
			if (ctx->status_cb) {
   3da52:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3da56:	2b00      	cmp	r3, #0
   3da58:	f43f aec6 	beq.w	3d7e8 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   3da5c:	2100      	movs	r1, #0
   3da5e:	200a      	movs	r0, #10
   3da60:	e7a7      	b.n	3d9b2 <usbd_work_handler+0x1f6>
   3da62:	bf00      	nop
   3da64:	200033e8 	.word	0x200033e8
   3da68:	20000b10 	.word	0x20000b10
   3da6c:	40027000 	.word	0x40027000
   3da70:	200033ec 	.word	0x200033ec
   3da74:	20003420 	.word	0x20003420
   3da78:	20003408 	.word	0x20003408
   3da7c:	20003654 	.word	0x20003654
	nrfx_power_usbevt_disable();
   3da80:	f00a fcb4 	bl	483ec <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   3da84:	f003 f994 	bl	40db0 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   3da88:	f002 fcde 	bl	40448 <nrfx_usbd_uninit>
	usbd_evt_flush();
   3da8c:	f7ff fd14 	bl	3d4b8 <usbd_evt_flush>
	ret = eps_ctx_init();
   3da90:	f7ff fe60 	bl	3d754 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   3da94:	f00a fca3 	bl	483de <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   3da98:	4801      	ldr	r0, [pc, #4]	; (3daa0 <usbd_work_handler+0x2e4>)
   3da9a:	f002 fda5 	bl	405e8 <nrfx_usbd_init>
}
   3da9e:	e6a3      	b.n	3d7e8 <usbd_work_handler+0x2c>
   3daa0:	0003d639 	.word	0x0003d639

0003daa4 <usb_dc_attach>:
{
   3daa4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   3daa6:	4d1a      	ldr	r5, [pc, #104]	; (3db10 <usb_dc_attach+0x6c>)
   3daa8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   3daac:	bb5c      	cbnz	r4, 3db06 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   3daae:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3dab2:	f00b f923 	bl	48cfc <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   3dab6:	4620      	mov	r0, r4
   3dab8:	f000 fd24 	bl	3e504 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3dabc:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   3dabe:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3dac0:	2101      	movs	r1, #1
   3dac2:	2027      	movs	r0, #39	; 0x27
   3dac4:	f7ec fc9a 	bl	2a3fc <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   3dac8:	4812      	ldr	r0, [pc, #72]	; (3db14 <usb_dc_attach+0x70>)
   3daca:	f002 fd8d 	bl	405e8 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   3dace:	4b12      	ldr	r3, [pc, #72]	; (3db18 <usb_dc_attach+0x74>)
   3dad0:	4298      	cmp	r0, r3
   3dad2:	d11a      	bne.n	3db0a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   3dad4:	f00a fc83 	bl	483de <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   3dad8:	f7ff fe3c 	bl	3d754 <eps_ctx_init>
	if (ret == 0) {
   3dadc:	4604      	mov	r4, r0
   3dade:	b910      	cbnz	r0, 3dae6 <usb_dc_attach+0x42>
		ctx->attached = true;
   3dae0:	2301      	movs	r3, #1
   3dae2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   3dae6:	4b0d      	ldr	r3, [pc, #52]	; (3db1c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   3dae8:	681b      	ldr	r3, [r3, #0]
   3daea:	b10b      	cbz	r3, 3daf0 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   3daec:	f7ff fcb0 	bl	3d450 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   3daf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3daf4:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   3daf8:	07db      	lsls	r3, r3, #31
   3dafa:	d502      	bpl.n	3db02 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   3dafc:	2000      	movs	r0, #0
   3dafe:	f7ff fd5f 	bl	3d5c0 <usb_dc_power_event_handler>
}
   3db02:	4620      	mov	r0, r4
   3db04:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   3db06:	2400      	movs	r4, #0
   3db08:	e7fb      	b.n	3db02 <usb_dc_attach+0x5e>
		return -EIO;
   3db0a:	f06f 0404 	mvn.w	r4, #4
   3db0e:	e7f8      	b.n	3db02 <usb_dc_attach+0x5e>
   3db10:	200033e8 	.word	0x200033e8
   3db14:	0003d639 	.word	0x0003d639
   3db18:	0bad0000 	.word	0x0bad0000
   3db1c:	20000c5c 	.word	0x20000c5c

0003db20 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   3db20:	4b07      	ldr	r3, [pc, #28]	; (3db40 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   3db22:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   3db26:	b13a      	cbz	r2, 3db38 <usb_dc_set_address+0x18>
   3db28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   3db2c:	2b00      	cmp	r3, #0
   3db2e:	bf0c      	ite	eq
   3db30:	f06f 0012 	mvneq.w	r0, #18
   3db34:	2000      	movne	r0, #0
   3db36:	4770      	bx	lr
		return -ENODEV;
   3db38:	f06f 0012 	mvn.w	r0, #18
}
   3db3c:	4770      	bx	lr
   3db3e:	bf00      	nop
   3db40:	200033e8 	.word	0x200033e8

0003db44 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   3db44:	4b0f      	ldr	r3, [pc, #60]	; (3db84 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   3db46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   3db4a:	b510      	push	{r4, lr}
   3db4c:	4601      	mov	r1, r0
	if (!dev_attached()) {
   3db4e:	b1b3      	cbz	r3, 3db7e <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   3db50:	7804      	ldrb	r4, [r0, #0]
   3db52:	4620      	mov	r0, r4
   3db54:	f7ff fc4e 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3db58:	b910      	cbnz	r0, 3db60 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   3db5a:	f06f 0015 	mvn.w	r0, #21
}
   3db5e:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   3db60:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   3db62:	790b      	ldrb	r3, [r1, #4]
   3db64:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   3db66:	8849      	ldrh	r1, [r1, #2]
   3db68:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   3db6a:	0723      	lsls	r3, r4, #28
   3db6c:	d402      	bmi.n	3db74 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   3db6e:	1e4b      	subs	r3, r1, #1
   3db70:	420b      	tst	r3, r1
   3db72:	d1f2      	bne.n	3db5a <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   3db74:	4620      	mov	r0, r4
   3db76:	f00a fcc7 	bl	48508 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   3db7a:	2000      	movs	r0, #0
   3db7c:	e7ef      	b.n	3db5e <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   3db7e:	f06f 0012 	mvn.w	r0, #18
   3db82:	e7ec      	b.n	3db5e <usb_dc_ep_configure+0x1a>
   3db84:	200033e8 	.word	0x200033e8

0003db88 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   3db88:	4b12      	ldr	r3, [pc, #72]	; (3dbd4 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   3db8a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3db8e:	b510      	push	{r4, lr}
   3db90:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   3db92:	b1ca      	cbz	r2, 3dbc8 <usb_dc_ep_set_stall+0x40>
   3db94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3db98:	b1b3      	cbz	r3, 3dbc8 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   3db9a:	f7ff fc2b 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3db9e:	4604      	mov	r4, r0
   3dba0:	b1a8      	cbz	r0, 3dbce <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   3dba2:	7a83      	ldrb	r3, [r0, #10]
   3dba4:	2b01      	cmp	r3, #1
   3dba6:	d012      	beq.n	3dbce <usb_dc_ep_set_stall+0x46>
   3dba8:	d907      	bls.n	3dbba <usb_dc_ep_set_stall+0x32>
   3dbaa:	3b02      	subs	r3, #2
   3dbac:	2b01      	cmp	r3, #1
   3dbae:	d907      	bls.n	3dbc0 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   3dbb0:	6963      	ldr	r3, [r4, #20]
   3dbb2:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   3dbb4:	2000      	movs	r0, #0
   3dbb6:	60e0      	str	r0, [r4, #12]
}
   3dbb8:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   3dbba:	f002 ff89 	bl	40ad0 <nrfx_usbd_setup_stall>
		break;
   3dbbe:	e7f7      	b.n	3dbb0 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   3dbc0:	4608      	mov	r0, r1
   3dbc2:	f002 fef9 	bl	409b8 <nrfx_usbd_ep_stall>
		break;
   3dbc6:	e7f3      	b.n	3dbb0 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   3dbc8:	f06f 0012 	mvn.w	r0, #18
   3dbcc:	e7f4      	b.n	3dbb8 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   3dbce:	f06f 0015 	mvn.w	r0, #21
   3dbd2:	e7f1      	b.n	3dbb8 <usb_dc_ep_set_stall+0x30>
   3dbd4:	200033e8 	.word	0x200033e8

0003dbd8 <usb_dc_ep_clear_stall>:
{
   3dbd8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3dbda:	4b0e      	ldr	r3, [pc, #56]	; (3dc14 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   3dbdc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3dbe0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   3dbe2:	b182      	cbz	r2, 3dc06 <usb_dc_ep_clear_stall+0x2e>
   3dbe4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3dbe8:	b16b      	cbz	r3, 3dc06 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   3dbea:	f7ff fc03 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3dbee:	b168      	cbz	r0, 3dc0c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   3dbf0:	f015 0408 	ands.w	r4, r5, #8
   3dbf4:	d10a      	bne.n	3dc0c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3dbf6:	4628      	mov	r0, r5
   3dbf8:	f002 ff00 	bl	409fc <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3dbfc:	4628      	mov	r0, r5
   3dbfe:	f003 f99d 	bl	40f3c <nrfx_usbd_ep_stall_clear>
	return 0;
   3dc02:	4620      	mov	r0, r4
}
   3dc04:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3dc06:	f06f 0012 	mvn.w	r0, #18
   3dc0a:	e7fb      	b.n	3dc04 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   3dc0c:	f06f 0015 	mvn.w	r0, #21
   3dc10:	e7f8      	b.n	3dc04 <usb_dc_ep_clear_stall+0x2c>
   3dc12:	bf00      	nop
   3dc14:	200033e8 	.word	0x200033e8

0003dc18 <usb_dc_ep_is_stalled>:
{
   3dc18:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3dc1a:	4b0c      	ldr	r3, [pc, #48]	; (3dc4c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   3dc1c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3dc20:	4605      	mov	r5, r0
   3dc22:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   3dc24:	b162      	cbz	r2, 3dc40 <usb_dc_ep_is_stalled+0x28>
   3dc26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3dc2a:	b14b      	cbz	r3, 3dc40 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   3dc2c:	f7ff fbe2 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3dc30:	b148      	cbz	r0, 3dc46 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   3dc32:	b141      	cbz	r1, 3dc46 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   3dc34:	4628      	mov	r0, r5
   3dc36:	f002 fec7 	bl	409c8 <nrfx_usbd_ep_stall_check>
   3dc3a:	7020      	strb	r0, [r4, #0]
	return 0;
   3dc3c:	2000      	movs	r0, #0
}
   3dc3e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3dc40:	f06f 0012 	mvn.w	r0, #18
   3dc44:	e7fb      	b.n	3dc3e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   3dc46:	f06f 0015 	mvn.w	r0, #21
   3dc4a:	e7f8      	b.n	3dc3e <usb_dc_ep_is_stalled+0x26>
   3dc4c:	200033e8 	.word	0x200033e8

0003dc50 <usb_dc_ep_enable>:
{
   3dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   3dc52:	4f13      	ldr	r7, [pc, #76]	; (3dca0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   3dc54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   3dc58:	4604      	mov	r4, r0
	if (!dev_attached()) {
   3dc5a:	b1bb      	cbz	r3, 3dc8c <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   3dc5c:	f7ff fbca 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3dc60:	4605      	mov	r5, r0
   3dc62:	b1b0      	cbz	r0, 3dc92 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   3dc64:	0723      	lsls	r3, r4, #28
   3dc66:	d405      	bmi.n	3dc74 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3dc68:	4620      	mov	r0, r4
   3dc6a:	f002 fec7 	bl	409fc <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3dc6e:	4620      	mov	r0, r4
   3dc70:	f003 f964 	bl	40f3c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   3dc74:	7a2e      	ldrb	r6, [r5, #8]
   3dc76:	b97e      	cbnz	r6, 3dc98 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   3dc78:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   3dc7c:	2301      	movs	r3, #1
   3dc7e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   3dc80:	b118      	cbz	r0, 3dc8a <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   3dc82:	4620      	mov	r0, r4
   3dc84:	f003 f908 	bl	40e98 <nrfx_usbd_ep_enable>
	return 0;
   3dc88:	4630      	mov	r0, r6
}
   3dc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   3dc8c:	f06f 0012 	mvn.w	r0, #18
   3dc90:	e7fb      	b.n	3dc8a <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   3dc92:	f06f 0015 	mvn.w	r0, #21
   3dc96:	e7f8      	b.n	3dc8a <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   3dc98:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3dc9c:	e7f5      	b.n	3dc8a <usb_dc_ep_enable+0x3a>
   3dc9e:	bf00      	nop
   3dca0:	200033e8 	.word	0x200033e8

0003dca4 <usb_dc_ep_disable>:
{
   3dca4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3dca6:	4b11      	ldr	r3, [pc, #68]	; (3dcec <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   3dca8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3dcac:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   3dcae:	b19a      	cbz	r2, 3dcd8 <usb_dc_ep_disable+0x34>
   3dcb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3dcb4:	b183      	cbz	r3, 3dcd8 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   3dcb6:	f7ff fb9d 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3dcba:	4605      	mov	r5, r0
   3dcbc:	b178      	cbz	r0, 3dcde <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   3dcbe:	7a03      	ldrb	r3, [r0, #8]
   3dcc0:	b183      	cbz	r3, 3dce4 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3dcc2:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   3dcc4:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3dcc6:	f003 f8bb 	bl	40e40 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   3dcca:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   3dccc:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   3dcce:	f00a f8dc 	bl	47e8a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   3dcd2:	722c      	strb	r4, [r5, #8]
	return 0;
   3dcd4:	4620      	mov	r0, r4
}
   3dcd6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3dcd8:	f06f 0012 	mvn.w	r0, #18
   3dcdc:	e7fb      	b.n	3dcd6 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   3dcde:	f06f 0015 	mvn.w	r0, #21
   3dce2:	e7f8      	b.n	3dcd6 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   3dce4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3dce8:	e7f5      	b.n	3dcd6 <usb_dc_ep_disable+0x32>
   3dcea:	bf00      	nop
   3dcec:	200033e8 	.word	0x200033e8

0003dcf0 <usb_dc_ep_write>:
{
   3dcf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   3dcf4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3ddd4 <usb_dc_ep_write+0xe4>
{
   3dcf8:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   3dcfa:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   3dcfe:	b085      	sub	sp, #20
   3dd00:	4607      	mov	r7, r0
   3dd02:	4689      	mov	r9, r1
   3dd04:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   3dd06:	2b00      	cmp	r3, #0
   3dd08:	d05d      	beq.n	3ddc6 <usb_dc_ep_write+0xd6>
   3dd0a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   3dd0e:	2b00      	cmp	r3, #0
   3dd10:	d059      	beq.n	3ddc6 <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   3dd12:	0603      	lsls	r3, r0, #24
   3dd14:	d55a      	bpl.n	3ddcc <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   3dd16:	f7ff fb6d 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3dd1a:	4605      	mov	r5, r0
   3dd1c:	2800      	cmp	r0, #0
   3dd1e:	d055      	beq.n	3ddcc <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   3dd20:	7a03      	ldrb	r3, [r0, #8]
   3dd22:	2b00      	cmp	r3, #0
   3dd24:	d052      	beq.n	3ddcc <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3dd26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dd2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dd2e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3dd32:	f00a f8bd 	bl	47eb0 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   3dd36:	7fab      	ldrb	r3, [r5, #30]
   3dd38:	b14b      	cbz	r3, 3dd4e <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   3dd3a:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3dd3e:	f00a f8b9 	bl	47eb4 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   3dd42:	f06f 040a 	mvn.w	r4, #10
}
   3dd46:	4620      	mov	r0, r4
   3dd48:	b005      	add	sp, #20
   3dd4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   3dd4e:	b916      	cbnz	r6, 3dd56 <usb_dc_ep_write+0x66>
   3dd50:	7feb      	ldrb	r3, [r5, #31]
   3dd52:	b103      	cbz	r3, 3dd56 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   3dd54:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3dd56:	7aab      	ldrb	r3, [r5, #10]
   3dd58:	b9bb      	cbnz	r3, 3dd8a <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3dd5a:	b15e      	cbz	r6, 3dd74 <usb_dc_ep_write+0x84>
   3dd5c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   3dd60:	42b3      	cmp	r3, r6
   3dd62:	d907      	bls.n	3dd74 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   3dd64:	686a      	ldr	r2, [r5, #4]
   3dd66:	fbb6 f3f2 	udiv	r3, r6, r2
   3dd6a:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3dd6e:	b90b      	cbnz	r3, 3dd74 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   3dd70:	2301      	movs	r3, #1
   3dd72:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   3dd74:	f002 feb4 	bl	40ae0 <nrfx_usbd_last_setup_dir_get>
   3dd78:	42b8      	cmp	r0, r7
   3dd7a:	d006      	beq.n	3dd8a <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   3dd7c:	f002 fea0 	bl	40ac0 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   3dd80:	4815      	ldr	r0, [pc, #84]	; (3ddd8 <usb_dc_ep_write+0xe8>)
   3dd82:	f00a f897 	bl	47eb4 <k_mutex_unlock.isra.0>
		return 0;
   3dd86:	2400      	movs	r4, #0
   3dd88:	e7dd      	b.n	3dd46 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   3dd8a:	2301      	movs	r3, #1
   3dd8c:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3dd8e:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3dd92:	a901      	add	r1, sp, #4
   3dd94:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3dd96:	e9cd 9601 	strd	r9, r6, [sp, #4]
   3dd9a:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3dd9e:	f002 fc69 	bl	40674 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   3dda2:	4b0e      	ldr	r3, [pc, #56]	; (3dddc <usb_dc_ep_write+0xec>)
   3dda4:	4298      	cmp	r0, r3
   3dda6:	d007      	beq.n	3ddb8 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   3dda8:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   3ddac:	b10c      	cbz	r4, 3ddb2 <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   3ddae:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   3ddb2:	f06f 0404 	mvn.w	r4, #4
   3ddb6:	e002      	b.n	3ddbe <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   3ddb8:	b10c      	cbz	r4, 3ddbe <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   3ddba:	6026      	str	r6, [r4, #0]
	int result = 0;
   3ddbc:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   3ddbe:	4806      	ldr	r0, [pc, #24]	; (3ddd8 <usb_dc_ep_write+0xe8>)
   3ddc0:	f00a f878 	bl	47eb4 <k_mutex_unlock.isra.0>
	return result;
   3ddc4:	e7bf      	b.n	3dd46 <usb_dc_ep_write+0x56>
		return -ENODEV;
   3ddc6:	f06f 0412 	mvn.w	r4, #18
   3ddca:	e7bc      	b.n	3dd46 <usb_dc_ep_write+0x56>
		return -EINVAL;
   3ddcc:	f06f 0415 	mvn.w	r4, #21
   3ddd0:	e7b9      	b.n	3dd46 <usb_dc_ep_write+0x56>
   3ddd2:	bf00      	nop
   3ddd4:	200033e8 	.word	0x200033e8
   3ddd8:	20003420 	.word	0x20003420
   3dddc:	0bad0000 	.word	0x0bad0000

0003dde0 <usb_dc_ep_read_wait>:
{
   3dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3dde4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   3dde6:	4b20      	ldr	r3, [pc, #128]	; (3de68 <usb_dc_ep_read_wait+0x88>)
{
   3dde8:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   3ddea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3ddee:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   3ddf0:	2a00      	cmp	r2, #0
   3ddf2:	d033      	beq.n	3de5c <usb_dc_ep_read_wait+0x7c>
   3ddf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3ddf8:	b383      	cbz	r3, 3de5c <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3ddfa:	0603      	lsls	r3, r0, #24
   3ddfc:	d431      	bmi.n	3de62 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   3ddfe:	b901      	cbnz	r1, 3de02 <usb_dc_ep_read_wait+0x22>
   3de00:	bb7f      	cbnz	r7, 3de62 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   3de02:	f7ff faf7 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3de06:	4604      	mov	r4, r0
   3de08:	b358      	cbz	r0, 3de62 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   3de0a:	7a03      	ldrb	r3, [r0, #8]
   3de0c:	b34b      	cbz	r3, 3de62 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3de0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3de12:	4816      	ldr	r0, [pc, #88]	; (3de6c <usb_dc_ep_read_wait+0x8c>)
   3de14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3de18:	f00a f84a 	bl	47eb0 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   3de1c:	68e3      	ldr	r3, [r4, #12]
   3de1e:	429f      	cmp	r7, r3
   3de20:	46b8      	mov	r8, r7
   3de22:	bf28      	it	cs
   3de24:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   3de26:	b946      	cbnz	r6, 3de3a <usb_dc_ep_read_wait+0x5a>
   3de28:	b93f      	cbnz	r7, 3de3a <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   3de2a:	b105      	cbz	r5, 3de2e <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   3de2c:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   3de2e:	480f      	ldr	r0, [pc, #60]	; (3de6c <usb_dc_ep_read_wait+0x8c>)
   3de30:	f00a f840 	bl	47eb4 <k_mutex_unlock.isra.0>
		return 0;
   3de34:	2000      	movs	r0, #0
}
   3de36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   3de3a:	69a1      	ldr	r1, [r4, #24]
   3de3c:	4642      	mov	r2, r8
   3de3e:	4630      	mov	r0, r6
   3de40:	f007 f83e 	bl	44ec0 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   3de44:	69a3      	ldr	r3, [r4, #24]
   3de46:	4443      	add	r3, r8
   3de48:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   3de4a:	68e3      	ldr	r3, [r4, #12]
   3de4c:	eba3 0308 	sub.w	r3, r3, r8
   3de50:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   3de52:	2d00      	cmp	r5, #0
   3de54:	d0eb      	beq.n	3de2e <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   3de56:	f8c5 8000 	str.w	r8, [r5]
   3de5a:	e7e8      	b.n	3de2e <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   3de5c:	f06f 0012 	mvn.w	r0, #18
   3de60:	e7e9      	b.n	3de36 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   3de62:	f06f 0015 	mvn.w	r0, #21
   3de66:	e7e6      	b.n	3de36 <usb_dc_ep_read_wait+0x56>
   3de68:	200033e8 	.word	0x200033e8
   3de6c:	20003420 	.word	0x20003420

0003de70 <usb_dc_ep_read_continue>:
{
   3de70:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   3de72:	4d1e      	ldr	r5, [pc, #120]	; (3deec <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   3de74:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   3de78:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   3de7a:	b382      	cbz	r2, 3dede <usb_dc_ep_read_continue+0x6e>
   3de7c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   3de80:	b36a      	cbz	r2, 3dede <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3de82:	061b      	lsls	r3, r3, #24
   3de84:	d42e      	bmi.n	3dee4 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   3de86:	f7ff fab5 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3de8a:	4604      	mov	r4, r0
   3de8c:	b350      	cbz	r0, 3dee4 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   3de8e:	7a03      	ldrb	r3, [r0, #8]
   3de90:	b343      	cbz	r3, 3dee4 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3de92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3de96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3de9a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3de9e:	f00a f807 	bl	47eb0 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   3dea2:	68e3      	ldr	r3, [r4, #12]
   3dea4:	b9b3      	cbnz	r3, 3ded4 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   3dea6:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3dea8:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   3deaa:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3deac:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   3deae:	7f63      	ldrb	r3, [r4, #29]
   3deb0:	b183      	cbz	r3, 3ded4 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   3deb2:	f7ff fb0f 	bl	3d4d4 <usbd_evt_alloc>
			if (!ev) {
   3deb6:	b930      	cbnz	r0, 3dec6 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   3deb8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3debc:	f009 fffa 	bl	47eb4 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   3dec0:	f06f 000b 	mvn.w	r0, #11
}
   3dec4:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   3dec6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   3dec8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3deca:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   3decc:	f7ff faba 	bl	3d444 <usbd_evt_put>
			usbd_work_schedule();
   3ded0:	f7ff fabe 	bl	3d450 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   3ded4:	4806      	ldr	r0, [pc, #24]	; (3def0 <usb_dc_ep_read_continue+0x80>)
   3ded6:	f009 ffed 	bl	47eb4 <k_mutex_unlock.isra.0>
	return 0;
   3deda:	2000      	movs	r0, #0
   3dedc:	e7f2      	b.n	3dec4 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   3dede:	f06f 0012 	mvn.w	r0, #18
   3dee2:	e7ef      	b.n	3dec4 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   3dee4:	f06f 0015 	mvn.w	r0, #21
   3dee8:	e7ec      	b.n	3dec4 <usb_dc_ep_read_continue+0x54>
   3deea:	bf00      	nop
   3deec:	200033e8 	.word	0x200033e8
   3def0:	20003420 	.word	0x20003420

0003def4 <usb_dc_ep_set_callback>:
{
   3def4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   3def6:	4b08      	ldr	r3, [pc, #32]	; (3df18 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   3def8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3defc:	b12b      	cbz	r3, 3df0a <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   3defe:	f7ff fa79 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3df02:	b128      	cbz	r0, 3df10 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   3df04:	6001      	str	r1, [r0, #0]
	return 0;
   3df06:	2000      	movs	r0, #0
}
   3df08:	bd08      	pop	{r3, pc}
		return -ENODEV;
   3df0a:	f06f 0012 	mvn.w	r0, #18
   3df0e:	e7fb      	b.n	3df08 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   3df10:	f06f 0015 	mvn.w	r0, #21
   3df14:	e7f8      	b.n	3df08 <usb_dc_ep_set_callback+0x14>
   3df16:	bf00      	nop
   3df18:	200033e8 	.word	0x200033e8

0003df1c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   3df1c:	4b01      	ldr	r3, [pc, #4]	; (3df24 <usb_dc_set_status_callback+0x8>)
   3df1e:	6018      	str	r0, [r3, #0]
}
   3df20:	4770      	bx	lr
   3df22:	bf00      	nop
   3df24:	200033e8 	.word	0x200033e8

0003df28 <usb_dc_ep_mps>:
{
   3df28:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   3df2a:	4b07      	ldr	r3, [pc, #28]	; (3df48 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   3df2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3df30:	b123      	cbz	r3, 3df3c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   3df32:	f7ff fa5f 	bl	3d3f4 <endpoint_ctx>
	if (!ep_ctx) {
   3df36:	b120      	cbz	r0, 3df42 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   3df38:	6840      	ldr	r0, [r0, #4]
}
   3df3a:	bd08      	pop	{r3, pc}
		return -ENODEV;
   3df3c:	f06f 0012 	mvn.w	r0, #18
   3df40:	e7fb      	b.n	3df3a <usb_dc_ep_mps+0x12>
		return -EINVAL;
   3df42:	f06f 0015 	mvn.w	r0, #21
   3df46:	e7f8      	b.n	3df3a <usb_dc_ep_mps+0x12>
   3df48:	200033e8 	.word	0x200033e8

0003df4c <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   3df4c:	2811      	cmp	r0, #17
   3df4e:	d80e      	bhi.n	3df6e <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   3df50:	4a08      	ldr	r2, [pc, #32]	; (3df74 <adc_gain_invert+0x28>)
   3df52:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   3df56:	b153      	cbz	r3, 3df6e <adc_gain_invert+0x22>
   3df58:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   3df5c:	7842      	ldrb	r2, [r0, #1]
   3df5e:	b132      	cbz	r2, 3df6e <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   3df60:	6808      	ldr	r0, [r1, #0]
   3df62:	4343      	muls	r3, r0
			rv = 0;
   3df64:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   3df66:	fb93 f3f2 	sdiv	r3, r3, r2
   3df6a:	600b      	str	r3, [r1, #0]
			rv = 0;
   3df6c:	4770      	bx	lr
	int rv = -EINVAL;
   3df6e:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   3df72:	4770      	bx	lr
   3df74:	0004b96a 	.word	0x0004b96a

0003df78 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   3df78:	7908      	ldrb	r0, [r1, #4]
{
   3df7a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   3df7c:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   3df80:	2c07      	cmp	r4, #7
   3df82:	d81f      	bhi.n	3dfc4 <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   3df84:	780b      	ldrb	r3, [r1, #0]
   3df86:	2b09      	cmp	r3, #9
   3df88:	d81c      	bhi.n	3dfc4 <adc_nrfx_channel_setup+0x4c>
   3df8a:	e8df f003 	tbb	[pc, r3]
   3df8e:	0606      	.short	0x0606
   3df90:	1b060606 	.word	0x1b060606
   3df94:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   3df98:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   3df9a:	784a      	ldrb	r2, [r1, #1]
   3df9c:	2a03      	cmp	r2, #3
   3df9e:	d018      	beq.n	3dfd2 <adc_nrfx_channel_setup+0x5a>
   3dfa0:	2a04      	cmp	r2, #4
   3dfa2:	d10f      	bne.n	3dfc4 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   3dfa4:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   3dfa6:	884a      	ldrh	r2, [r1, #2]
   3dfa8:	f244 060a 	movw	r6, #16394	; 0x400a
   3dfac:	42b2      	cmp	r2, r6
   3dfae:	d044      	beq.n	3e03a <adc_nrfx_channel_setup+0xc2>
   3dfb0:	d811      	bhi.n	3dfd6 <adc_nrfx_channel_setup+0x5e>
   3dfb2:	f244 0603 	movw	r6, #16387	; 0x4003
   3dfb6:	42b2      	cmp	r2, r6
   3dfb8:	d03b      	beq.n	3e032 <adc_nrfx_channel_setup+0xba>
   3dfba:	f244 0605 	movw	r6, #16389	; 0x4005
   3dfbe:	42b2      	cmp	r2, r6
   3dfc0:	d039      	beq.n	3e036 <adc_nrfx_channel_setup+0xbe>
   3dfc2:	b3d2      	cbz	r2, 3e03a <adc_nrfx_channel_setup+0xc2>
   3dfc4:	f06f 0015 	mvn.w	r0, #21
   3dfc8:	e032      	b.n	3e030 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   3dfca:	2306      	movs	r3, #6
		break;
   3dfcc:	e7e5      	b.n	3df9a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   3dfce:	2307      	movs	r3, #7
		break;
   3dfd0:	e7e3      	b.n	3df9a <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   3dfd2:	2501      	movs	r5, #1
   3dfd4:	e7e7      	b.n	3dfa6 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   3dfd6:	f244 0614 	movw	r6, #16404	; 0x4014
   3dfda:	42b2      	cmp	r2, r6
   3dfdc:	d02f      	beq.n	3e03e <adc_nrfx_channel_setup+0xc6>
   3dfde:	f244 0628 	movw	r6, #16424	; 0x4028
   3dfe2:	42b2      	cmp	r2, r6
   3dfe4:	d02d      	beq.n	3e042 <adc_nrfx_channel_setup+0xca>
   3dfe6:	f244 060f 	movw	r6, #16399	; 0x400f
   3dfea:	42b2      	cmp	r2, r6
   3dfec:	d1ea      	bne.n	3dfc4 <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   3dfee:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3dff0:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   3dff4:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3dff6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   3dffa:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   3dffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   3e002:	0122      	lsls	r2, r4, #4
   3e004:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3e008:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   3e00c:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   3e00e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   3e012:	0123      	lsls	r3, r4, #4
   3e014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3e018:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   3e01c:	798a      	ldrb	r2, [r1, #6]
   3e01e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   3e022:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   3e026:	4b08      	ldr	r3, [pc, #32]	; (3e048 <adc_nrfx_channel_setup+0xd0>)
   3e028:	441c      	add	r4, r3
   3e02a:	794b      	ldrb	r3, [r1, #5]
   3e02c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0

	return 0;
}
   3e030:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   3e032:	2200      	movs	r2, #0
   3e034:	e7dc      	b.n	3dff0 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   3e036:	2201      	movs	r2, #1
   3e038:	e7da      	b.n	3dff0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   3e03a:	2202      	movs	r2, #2
   3e03c:	e7d8      	b.n	3dff0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   3e03e:	2204      	movs	r2, #4
   3e040:	e7d6      	b.n	3dff0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   3e042:	2205      	movs	r2, #5
   3e044:	e7d4      	b.n	3dff0 <adc_nrfx_channel_setup+0x78>
   3e046:	bf00      	nop
   3e048:	20000168 	.word	0x20000168

0003e04c <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   3e04c:	4b04      	ldr	r3, [pc, #16]	; (3e060 <adc_context_start_sampling.isra.0+0x14>)
   3e04e:	2201      	movs	r2, #1
   3e050:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   3e054:	b108      	cbz	r0, 3e05a <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e056:	60da      	str	r2, [r3, #12]
}
   3e058:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e05a:	601a      	str	r2, [r3, #0]
   3e05c:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   3e05e:	4770      	bx	lr
   3e060:	40007000 	.word	0x40007000

0003e064 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   3e064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e066:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   3e068:	485e      	ldr	r0, [pc, #376]	; (3e1e4 <adc_nrfx_read+0x180>)
   3e06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e072:	f003 fc79 	bl	41968 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   3e076:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   3e078:	b910      	cbnz	r0, 3e080 <adc_nrfx_read+0x1c>
	switch (sequence->resolution) {
   3e07a:	f06f 0415 	mvn.w	r4, #21
   3e07e:	e099      	b.n	3e1b4 <adc_nrfx_read+0x150>
	if (!selected_channels ||
   3e080:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   3e084:	d1f9      	bne.n	3e07a <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   3e086:	4c58      	ldr	r4, [pc, #352]	; (3e1e8 <adc_nrfx_read+0x184>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   3e088:	4f58      	ldr	r7, [pc, #352]	; (3e1ec <adc_nrfx_read+0x188>)
	active_channels = 0U;
   3e08a:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   3e08c:	fa20 f103 	lsr.w	r1, r0, r3
   3e090:	f011 0101 	ands.w	r1, r1, #1
   3e094:	d032      	beq.n	3e0fc <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   3e096:	18f9      	adds	r1, r7, r3
   3e098:	f891 c0a0 	ldrb.w	ip, [r1, #160]	; 0xa0
   3e09c:	f1bc 0f00 	cmp.w	ip, #0
   3e0a0:	d0eb      	beq.n	3e07a <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   3e0a2:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   3e0a6:	7c6e      	ldrb	r6, [r5, #17]
   3e0a8:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   3e0ac:	3e00      	subs	r6, #0
   3e0ae:	bf18      	it	ne
   3e0b0:	2601      	movne	r6, #1
   3e0b2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   3e0b6:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   3e0ba:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   3e0be:	f103 0151 	add.w	r1, r3, #81	; 0x51
   3e0c2:	0109      	lsls	r1, r1, #4
			++active_channels;
   3e0c4:	3201      	adds	r2, #1
   3e0c6:	f844 c001 	str.w	ip, [r4, r1]
   3e0ca:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   3e0cc:	3301      	adds	r3, #1
   3e0ce:	2b08      	cmp	r3, #8
   3e0d0:	d1dc      	bne.n	3e08c <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   3e0d2:	7c2b      	ldrb	r3, [r5, #16]
   3e0d4:	3b08      	subs	r3, #8
   3e0d6:	2b06      	cmp	r3, #6
   3e0d8:	d8cf      	bhi.n	3e07a <adc_nrfx_read+0x16>
   3e0da:	a101      	add	r1, pc, #4	; (adr r1, 3e0e0 <adc_nrfx_read+0x7c>)
   3e0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3e0e0:	0003e1c9 	.word	0x0003e1c9
   3e0e4:	0003e07b 	.word	0x0003e07b
   3e0e8:	0003e107 	.word	0x0003e107
   3e0ec:	0003e07b 	.word	0x0003e07b
   3e0f0:	0003e1c1 	.word	0x0003e1c1
   3e0f4:	0003e07b 	.word	0x0003e07b
   3e0f8:	0003e1c5 	.word	0x0003e1c5
   3e0fc:	f103 0651 	add.w	r6, r3, #81	; 0x51
   3e100:	0136      	lsls	r6, r6, #4
   3e102:	51a1      	str	r1, [r4, r6]
}
   3e104:	e7e2      	b.n	3e0cc <adc_nrfx_read+0x68>
   3e106:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   3e108:	4937      	ldr	r1, [pc, #220]	; (3e1e8 <adc_nrfx_read+0x184>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3e10a:	2a01      	cmp	r2, #1
   3e10c:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   3e110:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3e112:	d95b      	bls.n	3e1cc <adc_nrfx_read+0x168>
   3e114:	2b00      	cmp	r3, #0
   3e116:	d1b0      	bne.n	3e07a <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   3e118:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   3e11c:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   3e11e:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   3e120:	b111      	cbz	r1, 3e128 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   3e122:	8989      	ldrh	r1, [r1, #12]
   3e124:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   3e128:	68e9      	ldr	r1, [r5, #12]
   3e12a:	4299      	cmp	r1, r3
   3e12c:	d356      	bcc.n	3e1dc <adc_nrfx_read+0x178>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3e12e:	4b2e      	ldr	r3, [pc, #184]	; (3e1e8 <adc_nrfx_read+0x184>)
   3e130:	68a9      	ldr	r1, [r5, #8]
   3e132:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   3e136:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   3e138:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   3e13c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3e13e:	4c2b      	ldr	r4, [pc, #172]	; (3e1ec <adc_nrfx_read+0x188>)
   3e140:	f104 0674 	add.w	r6, r4, #116	; 0x74
   3e144:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3e146:	683b      	ldr	r3, [r7, #0]
   3e148:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   3e14a:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   3e14c:	2600      	movs	r6, #0
   3e14e:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   3e150:	4627      	mov	r7, r4
   3e152:	2b00      	cmp	r3, #0
   3e154:	d03d      	beq.n	3e1d2 <adc_nrfx_read+0x16e>
		ctx->options = *sequence->options;
   3e156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   3e158:	f104 0588 	add.w	r5, r4, #136	; 0x88
   3e15c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   3e160:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   3e162:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   3e166:	b3a0      	cbz	r0, 3e1d2 <adc_nrfx_read+0x16e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3e168:	f3bf 8f5b 	dmb	ish
   3e16c:	e857 3f00 	ldrex	r3, [r7]
   3e170:	e847 6200 	strex	r2, r6, [r7]
   3e174:	2a00      	cmp	r2, #0
   3e176:	d1f9      	bne.n	3e16c <adc_nrfx_read+0x108>
   3e178:	f3bf 8f5b 	dmb	ish
   3e17c:	481c      	ldr	r0, [pc, #112]	; (3e1f0 <adc_nrfx_read+0x18c>)
   3e17e:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
   3e182:	4a1c      	ldr	r2, [pc, #112]	; (3e1f4 <adc_nrfx_read+0x190>)
   3e184:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3e188:	4631      	mov	r1, r6
   3e18a:	2300      	movs	r3, #0
   3e18c:	fbe7 0105 	umlal	r0, r1, r7, r5
   3e190:	f7e7 ffb6 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   3e194:	2200      	movs	r2, #0
   3e196:	e9cd 0100 	strd	r0, r1, [sp]
   3e19a:	2300      	movs	r3, #0
   3e19c:	f104 0008 	add.w	r0, r4, #8
   3e1a0:	f004 facc 	bl	4273c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   3e1a4:	4814      	ldr	r0, [pc, #80]	; (3e1f8 <adc_nrfx_read+0x194>)
   3e1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e1ae:	f003 fbdb 	bl	41968 <z_impl_k_sem_take>
	return ctx->status;
   3e1b2:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   3e1b4:	480b      	ldr	r0, [pc, #44]	; (3e1e4 <adc_nrfx_read+0x180>)
   3e1b6:	f003 fbb1 	bl	4191c <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   3e1ba:	4620      	mov	r0, r4
   3e1bc:	b003      	add	sp, #12
   3e1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   3e1c0:	2302      	movs	r3, #2
		break;
   3e1c2:	e7a1      	b.n	3e108 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   3e1c4:	2303      	movs	r3, #3
		break;
   3e1c6:	e79f      	b.n	3e108 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   3e1c8:	2300      	movs	r3, #0
   3e1ca:	e79d      	b.n	3e108 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   3e1cc:	2b08      	cmp	r3, #8
   3e1ce:	d9a3      	bls.n	3e118 <adc_nrfx_read+0xb4>
   3e1d0:	e753      	b.n	3e07a <adc_nrfx_read+0x16>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   3e1d2:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   3e1d6:	f7ff ff39 	bl	3e04c <adc_context_start_sampling.isra.0>
   3e1da:	e7e3      	b.n	3e1a4 <adc_nrfx_read+0x140>
		return -ENOMEM;
   3e1dc:	f06f 040b 	mvn.w	r4, #11
   3e1e0:	e7e8      	b.n	3e1b4 <adc_nrfx_read+0x150>
   3e1e2:	bf00      	nop
   3e1e4:	200001a8 	.word	0x200001a8
   3e1e8:	40007000 	.word	0x40007000
   3e1ec:	20000168 	.word	0x20000168
   3e1f0:	000f423f 	.word	0x000f423f
   3e1f4:	000f4240 	.word	0x000f4240
   3e1f8:	200001c0 	.word	0x200001c0

0003e1fc <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e1fc:	4b0e      	ldr	r3, [pc, #56]	; (3e238 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   3e1fe:	b510      	push	{r4, lr}
   3e200:	2400      	movs	r4, #0
   3e202:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   3e206:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3e20a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   3e20e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   3e212:	2212      	movs	r2, #18
   3e214:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   3e218:	2007      	movs	r0, #7
   3e21a:	f7ec f8bd 	bl	2a398 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e21e:	4622      	mov	r2, r4
   3e220:	2101      	movs	r1, #1
   3e222:	2007      	movs	r0, #7
   3e224:	f7ec f8ea 	bl	2a3fc <z_arm_irq_priority_set>
	return sem->count;
   3e228:	4804      	ldr	r0, [pc, #16]	; (3e23c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   3e22a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3e22c:	b913      	cbnz	r3, 3e234 <init_saadc+0x38>
   3e22e:	3040      	adds	r0, #64	; 0x40
   3e230:	f003 fb74 	bl	4191c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   3e234:	2000      	movs	r0, #0
   3e236:	bd10      	pop	{r4, pc}
   3e238:	40007000 	.word	0x40007000
   3e23c:	20000168 	.word	0x20000168

0003e240 <saadc_irq_handler>:
{
   3e240:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e242:	4b30      	ldr	r3, [pc, #192]	; (3e304 <saadc_irq_handler+0xc4>)
   3e244:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   3e248:	2a00      	cmp	r2, #0
   3e24a:	d04d      	beq.n	3e2e8 <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e24c:	2200      	movs	r2, #0
   3e24e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   3e252:	4c2d      	ldr	r4, [pc, #180]	; (3e308 <saadc_irq_handler+0xc8>)
   3e254:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e258:	2101      	movs	r1, #1
   3e25a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   3e25c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   3e260:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3e262:	4625      	mov	r5, r4
   3e264:	b3db      	cbz	r3, 3e2de <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   3e266:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   3e26a:	b143      	cbz	r3, 3e27e <saadc_irq_handler+0x3e>
			action = callback(dev,
   3e26c:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   3e270:	f104 0174 	add.w	r1, r4, #116	; 0x74
   3e274:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   3e276:	2801      	cmp	r0, #1
   3e278:	d014      	beq.n	3e2a4 <saadc_irq_handler+0x64>
   3e27a:	2802      	cmp	r0, #2
   3e27c:	d029      	beq.n	3e2d2 <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   3e27e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   3e282:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   3e286:	429a      	cmp	r2, r3
   3e288:	d923      	bls.n	3e2d2 <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   3e28a:	3301      	adds	r3, #1
   3e28c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   3e290:	4b1c      	ldr	r3, [pc, #112]	; (3e304 <saadc_irq_handler+0xc4>)
   3e292:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   3e296:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   3e29a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   3e29c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3e2a0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   3e2a4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3e2a8:	b92b      	cbnz	r3, 3e2b6 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   3e2aa:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   3e2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3e2b2:	f7ff becb 	b.w	3e04c <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3e2b6:	f3bf 8f5b 	dmb	ish
   3e2ba:	e855 3f00 	ldrex	r3, [r5]
   3e2be:	1e5a      	subs	r2, r3, #1
   3e2c0:	e845 2100 	strex	r1, r2, [r5]
   3e2c4:	2900      	cmp	r1, #0
   3e2c6:	d1f8      	bne.n	3e2ba <saadc_irq_handler+0x7a>
   3e2c8:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   3e2cc:	2b01      	cmp	r3, #1
   3e2ce:	dcec      	bgt.n	3e2aa <saadc_irq_handler+0x6a>
   3e2d0:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   3e2d2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3e2d6:	b113      	cbz	r3, 3e2de <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   3e2d8:	480c      	ldr	r0, [pc, #48]	; (3e30c <saadc_irq_handler+0xcc>)
   3e2da:	f00b f85b 	bl	49394 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   3e2de:	480c      	ldr	r0, [pc, #48]	; (3e310 <saadc_irq_handler+0xd0>)
   3e2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3e2e4:	f003 bb1a 	b.w	4191c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e2e8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   3e2ec:	2900      	cmp	r1, #0
   3e2ee:	d0ef      	beq.n	3e2d0 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e2f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3e2f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e2f8:	2201      	movs	r2, #1
   3e2fa:	609a      	str	r2, [r3, #8]
   3e2fc:	601a      	str	r2, [r3, #0]
   3e2fe:	605a      	str	r2, [r3, #4]
}
   3e300:	e7e6      	b.n	3e2d0 <saadc_irq_handler+0x90>
   3e302:	bf00      	nop
   3e304:	40007000 	.word	0x40007000
   3e308:	20000168 	.word	0x20000168
   3e30c:	20000170 	.word	0x20000170
   3e310:	200001c0 	.word	0x200001c0

0003e314 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   3e314:	4b08      	ldr	r3, [pc, #32]	; (3e338 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3e316:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3e318:	1ac3      	subs	r3, r0, r3
{
   3e31a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e31c:	4907      	ldr	r1, [pc, #28]	; (3e33c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   3e31e:	109b      	asrs	r3, r3, #2
{
   3e320:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e322:	4359      	muls	r1, r3
   3e324:	4806      	ldr	r0, [pc, #24]	; (3e340 <onoff_stop+0x2c>)
   3e326:	2240      	movs	r2, #64	; 0x40
   3e328:	f009 fe20 	bl	47f6c <stop>
	notify(mgr, res);
   3e32c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e32e:	4601      	mov	r1, r0
	notify(mgr, res);
   3e330:	4620      	mov	r0, r4
}
   3e332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   3e336:	4718      	bx	r3
   3e338:	20003688 	.word	0x20003688
   3e33c:	b6db6db7 	.word	0xb6db6db7
   3e340:	00049798 	.word	0x00049798

0003e344 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3e344:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3e346:	4c0c      	ldr	r4, [pc, #48]	; (3e378 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e348:	4a0c      	ldr	r2, [pc, #48]	; (3e37c <onoff_start+0x38>)
   3e34a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   3e34c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e34e:	9300      	str	r3, [sp, #0]
{
   3e350:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e352:	460b      	mov	r3, r1
   3e354:	490a      	ldr	r1, [pc, #40]	; (3e380 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   3e356:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e358:	4361      	muls	r1, r4
{
   3e35a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e35c:	4809      	ldr	r0, [pc, #36]	; (3e384 <onoff_start+0x40>)
   3e35e:	f009 fe31 	bl	47fc4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   3e362:	1e01      	subs	r1, r0, #0
   3e364:	da05      	bge.n	3e372 <onoff_start+0x2e>
		notify(mgr, err);
   3e366:	4630      	mov	r0, r6
   3e368:	462b      	mov	r3, r5
	}
}
   3e36a:	b002      	add	sp, #8
   3e36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   3e370:	4718      	bx	r3
}
   3e372:	b002      	add	sp, #8
   3e374:	bd70      	pop	{r4, r5, r6, pc}
   3e376:	bf00      	nop
   3e378:	20003688 	.word	0x20003688
   3e37c:	00048035 	.word	0x00048035
   3e380:	b6db6db7 	.word	0xb6db6db7
   3e384:	00049798 	.word	0x00049798

0003e388 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e388:	2200      	movs	r2, #0
{
   3e38a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e38c:	2101      	movs	r1, #1
{
   3e38e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e390:	4610      	mov	r0, r2
   3e392:	f7ec f833 	bl	2a3fc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   3e396:	2000      	movs	r0, #0
   3e398:	f7eb fffe 	bl	2a398 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   3e39c:	480f      	ldr	r0, [pc, #60]	; (3e3dc <clk_init+0x54>)
   3e39e:	f001 f997 	bl	3f6d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   3e3a2:	4b0f      	ldr	r3, [pc, #60]	; (3e3e0 <clk_init+0x58>)
   3e3a4:	4298      	cmp	r0, r3
   3e3a6:	d115      	bne.n	3e3d4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   3e3a8:	f001 f9a2 	bl	3f6f0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   3e3ac:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e3ae:	490d      	ldr	r1, [pc, #52]	; (3e3e4 <clk_init+0x5c>)
   3e3b0:	4630      	mov	r0, r6
   3e3b2:	f004 fd30 	bl	42e16 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   3e3b6:	2800      	cmp	r0, #0
   3e3b8:	db0b      	blt.n	3e3d2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   3e3ba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e3bc:	4909      	ldr	r1, [pc, #36]	; (3e3e4 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3e3be:	2501      	movs	r5, #1
   3e3c0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e3c2:	f104 001c 	add.w	r0, r4, #28
   3e3c6:	f004 fd26 	bl	42e16 <onoff_manager_init>
		if (err < 0) {
   3e3ca:	2800      	cmp	r0, #0
   3e3cc:	db01      	blt.n	3e3d2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3e3ce:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   3e3d0:	2000      	movs	r0, #0
}
   3e3d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   3e3d4:	f06f 0004 	mvn.w	r0, #4
   3e3d8:	e7fb      	b.n	3e3d2 <clk_init+0x4a>
   3e3da:	bf00      	nop
   3e3dc:	0003e41d 	.word	0x0003e41d
   3e3e0:	0bad0000 	.word	0x0bad0000
   3e3e4:	0004b1ec 	.word	0x0004b1ec

0003e3e8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   3e3e8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   3e3ea:	230c      	movs	r3, #12
   3e3ec:	4809      	ldr	r0, [pc, #36]	; (3e414 <clkstarted_handle.constprop.0+0x2c>)
   3e3ee:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   3e3f0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   3e3f2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   3e3f4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   3e3f8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   3e3fa:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   3e3fc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   3e3fe:	4418      	add	r0, r3
   3e400:	f009 fda1 	bl	47f46 <set_on_state>
	if (callback) {
   3e404:	b12d      	cbz	r5, 3e412 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3e406:	4632      	mov	r2, r6
   3e408:	462b      	mov	r3, r5
   3e40a:	4803      	ldr	r0, [pc, #12]	; (3e418 <clkstarted_handle.constprop.0+0x30>)
}
   3e40c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   3e410:	4718      	bx	r3
}
   3e412:	bd70      	pop	{r4, r5, r6, pc}
   3e414:	20003688 	.word	0x20003688
   3e418:	00049798 	.word	0x00049798

0003e41c <clock_event_handler>:
	switch (event) {
   3e41c:	b110      	cbz	r0, 3e424 <clock_event_handler+0x8>
   3e41e:	2801      	cmp	r0, #1
   3e420:	d004      	beq.n	3e42c <clock_event_handler+0x10>
   3e422:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   3e424:	4b03      	ldr	r3, [pc, #12]	; (3e434 <clock_event_handler+0x18>)
   3e426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3e428:	075b      	lsls	r3, r3, #29
   3e42a:	d101      	bne.n	3e430 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3e42c:	f7ff bfdc 	b.w	3e3e8 <clkstarted_handle.constprop.0>
}
   3e430:	4770      	bx	lr
   3e432:	bf00      	nop
   3e434:	20003688 	.word	0x20003688

0003e438 <generic_hfclk_start>:
{
   3e438:	b508      	push	{r3, lr}
	__asm__ volatile(
   3e43a:	f04f 0320 	mov.w	r3, #32
   3e43e:	f3ef 8111 	mrs	r1, BASEPRI
   3e442:	f383 8812 	msr	BASEPRI_MAX, r3
   3e446:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   3e44a:	4a12      	ldr	r2, [pc, #72]	; (3e494 <generic_hfclk_start+0x5c>)
   3e44c:	6813      	ldr	r3, [r2, #0]
   3e44e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   3e452:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   3e456:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   3e458:	d00c      	beq.n	3e474 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3e45a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e45e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e462:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   3e466:	f013 0301 	ands.w	r3, r3, #1
   3e46a:	d003      	beq.n	3e474 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   3e46c:	480a      	ldr	r0, [pc, #40]	; (3e498 <generic_hfclk_start+0x60>)
   3e46e:	f009 fd6a 	bl	47f46 <set_on_state>
			already_started = true;
   3e472:	2301      	movs	r3, #1
	__asm__ volatile(
   3e474:	f381 8811 	msr	BASEPRI, r1
   3e478:	f3bf 8f6f 	isb	sy
	if (already_started) {
   3e47c:	b123      	cbz	r3, 3e488 <generic_hfclk_start+0x50>
}
   3e47e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   3e482:	2000      	movs	r0, #0
   3e484:	f7ff bfb0 	b.w	3e3e8 <clkstarted_handle.constprop.0>
}
   3e488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3e48c:	2001      	movs	r0, #1
   3e48e:	f009 bf0a 	b.w	482a6 <nrfx_clock_start>
   3e492:	bf00      	nop
   3e494:	200036d8 	.word	0x200036d8
   3e498:	200036c8 	.word	0x200036c8

0003e49c <api_blocking_start>:
{
   3e49c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e49e:	2200      	movs	r2, #0
   3e4a0:	2301      	movs	r3, #1
   3e4a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3e4a6:	ab04      	add	r3, sp, #16
   3e4a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e4ac:	4a09      	ldr	r2, [pc, #36]	; (3e4d4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e4ae:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e4b2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e4b4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e4b8:	f009 fdb5 	bl	48026 <api_start>
	if (err < 0) {
   3e4bc:	2800      	cmp	r0, #0
   3e4be:	db05      	blt.n	3e4cc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   3e4c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   3e4c4:	2300      	movs	r3, #0
   3e4c6:	4668      	mov	r0, sp
   3e4c8:	f003 fa4e 	bl	41968 <z_impl_k_sem_take>
}
   3e4cc:	b007      	add	sp, #28
   3e4ce:	f85d fb04 	ldr.w	pc, [sp], #4
   3e4d2:	bf00      	nop
   3e4d4:	00048053 	.word	0x00048053

0003e4d8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e4d8:	4b09      	ldr	r3, [pc, #36]	; (3e500 <generic_hfclk_stop+0x28>)
   3e4da:	f3bf 8f5b 	dmb	ish
   3e4de:	e853 2f00 	ldrex	r2, [r3]
   3e4e2:	f022 0102 	bic.w	r1, r2, #2
   3e4e6:	e843 1000 	strex	r0, r1, [r3]
   3e4ea:	2800      	cmp	r0, #0
   3e4ec:	d1f7      	bne.n	3e4de <generic_hfclk_stop+0x6>
   3e4ee:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   3e4f2:	07d3      	lsls	r3, r2, #31
   3e4f4:	d402      	bmi.n	3e4fc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3e4f6:	2001      	movs	r0, #1
   3e4f8:	f001 b908 	b.w	3f70c <nrfx_clock_stop>
}
   3e4fc:	4770      	bx	lr
   3e4fe:	bf00      	nop
   3e500:	200036d8 	.word	0x200036d8

0003e504 <z_nrf_clock_control_get_onoff>:
}
   3e504:	4a02      	ldr	r2, [pc, #8]	; (3e510 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   3e506:	b2c3      	uxtb	r3, r0
}
   3e508:	201c      	movs	r0, #28
   3e50a:	fb03 2000 	mla	r0, r3, r0, r2
   3e50e:	4770      	bx	lr
   3e510:	20003688 	.word	0x20003688

0003e514 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e514:	4b09      	ldr	r3, [pc, #36]	; (3e53c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   3e516:	f3bf 8f5b 	dmb	ish
   3e51a:	e853 2f00 	ldrex	r2, [r3]
   3e51e:	f042 0101 	orr.w	r1, r2, #1
   3e522:	e843 1000 	strex	r0, r1, [r3]
   3e526:	2800      	cmp	r0, #0
   3e528:	d1f7      	bne.n	3e51a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   3e52a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   3e52e:	0793      	lsls	r3, r2, #30
   3e530:	d402      	bmi.n	3e538 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3e532:	2001      	movs	r0, #1
   3e534:	f009 beb7 	b.w	482a6 <nrfx_clock_start>
}
   3e538:	4770      	bx	lr
   3e53a:	bf00      	nop
   3e53c:	200036d8 	.word	0x200036d8

0003e540 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e540:	4b09      	ldr	r3, [pc, #36]	; (3e568 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   3e542:	f3bf 8f5b 	dmb	ish
   3e546:	e853 2f00 	ldrex	r2, [r3]
   3e54a:	f022 0101 	bic.w	r1, r2, #1
   3e54e:	e843 1000 	strex	r0, r1, [r3]
   3e552:	2800      	cmp	r0, #0
   3e554:	d1f7      	bne.n	3e546 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   3e556:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   3e55a:	0793      	lsls	r3, r2, #30
   3e55c:	d402      	bmi.n	3e564 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3e55e:	2001      	movs	r0, #1
   3e560:	f001 b8d4 	b.w	3f70c <nrfx_clock_stop>
}
   3e564:	4770      	bx	lr
   3e566:	bf00      	nop
   3e568:	200036d8 	.word	0x200036d8

0003e56c <z_nrf_clock_control_lf_on>:
{
   3e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3e570:	4939      	ldr	r1, [pc, #228]	; (3e658 <z_nrf_clock_control_lf_on+0xec>)
   3e572:	f3bf 8f5b 	dmb	ish
   3e576:	4607      	mov	r7, r0
   3e578:	2201      	movs	r2, #1
   3e57a:	e851 3f00 	ldrex	r3, [r1]
   3e57e:	e841 2000 	strex	r0, r2, [r1]
   3e582:	2800      	cmp	r0, #0
   3e584:	d1f9      	bne.n	3e57a <z_nrf_clock_control_lf_on+0xe>
   3e586:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   3e58a:	b933      	cbnz	r3, 3e59a <z_nrf_clock_control_lf_on+0x2e>
   3e58c:	4933      	ldr	r1, [pc, #204]	; (3e65c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   3e58e:	4834      	ldr	r0, [pc, #208]	; (3e660 <z_nrf_clock_control_lf_on+0xf4>)
   3e590:	604b      	str	r3, [r1, #4]
   3e592:	60cb      	str	r3, [r1, #12]
   3e594:	608a      	str	r2, [r1, #8]
   3e596:	f004 fc51 	bl	42e3c <onoff_request>
	switch (start_mode) {
   3e59a:	1e7b      	subs	r3, r7, #1
   3e59c:	2b01      	cmp	r3, #1
   3e59e:	d82f      	bhi.n	3e600 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   3e5a0:	2f01      	cmp	r7, #1
   3e5a2:	d107      	bne.n	3e5b4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   3e5a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e5a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   3e5ac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   3e5b0:	2b01      	cmp	r3, #1
   3e5b2:	d025      	beq.n	3e600 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3e5b4:	f00a fb88 	bl	48cc8 <k_is_in_isr>
   3e5b8:	4604      	mov	r4, r0
   3e5ba:	b918      	cbnz	r0, 3e5c4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   3e5bc:	4b29      	ldr	r3, [pc, #164]	; (3e664 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   3e5be:	781b      	ldrb	r3, [r3, #0]
   3e5c0:	2b00      	cmp	r3, #0
   3e5c2:	d141      	bne.n	3e648 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   3e5c4:	f04f 0320 	mov.w	r3, #32
   3e5c8:	f3ef 8611 	mrs	r6, BASEPRI
   3e5cc:	f383 8812 	msr	BASEPRI_MAX, r3
   3e5d0:	f3bf 8f6f 	isb	sy
   3e5d4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e5d6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3e668 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3e5da:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   3e5de:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3e5e2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   3e5e6:	03d2      	lsls	r2, r2, #15
   3e5e8:	d50c      	bpl.n	3e604 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   3e5ea:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   3e5ee:	2b01      	cmp	r3, #1
   3e5f0:	d001      	beq.n	3e5f6 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   3e5f2:	2f01      	cmp	r7, #1
   3e5f4:	d106      	bne.n	3e604 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   3e5f6:	b30c      	cbz	r4, 3e63c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   3e5f8:	f386 8811 	msr	BASEPRI, r6
   3e5fc:	f3bf 8f6f 	isb	sy
}
   3e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   3e604:	b1ac      	cbz	r4, 3e632 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   3e606:	4630      	mov	r0, r6
   3e608:	f7eb febc 	bl	2a384 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   3e60c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   3e610:	2b00      	cmp	r3, #0
   3e612:	d1e4      	bne.n	3e5de <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3e614:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   3e618:	2a00      	cmp	r2, #0
   3e61a:	d0e0      	beq.n	3e5de <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e61c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   3e620:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e624:	2301      	movs	r3, #1
   3e626:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   3e62a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e62e:	60ab      	str	r3, [r5, #8]
}
   3e630:	e7d5      	b.n	3e5de <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   3e632:	2100      	movs	r1, #0
   3e634:	2021      	movs	r0, #33	; 0x21
   3e636:	f003 fe55 	bl	422e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3e63a:	e7e7      	b.n	3e60c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   3e63c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e640:	2202      	movs	r2, #2
   3e642:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e646:	e7db      	b.n	3e600 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   3e648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e64c:	2202      	movs	r2, #2
   3e64e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   3e652:	4606      	mov	r6, r0
}
   3e654:	e7bf      	b.n	3e5d6 <z_nrf_clock_control_lf_on+0x6a>
   3e656:	bf00      	nop
   3e658:	200036dc 	.word	0x200036dc
   3e65c:	20003678 	.word	0x20003678
   3e660:	200036a4 	.word	0x200036a4
   3e664:	20003c80 	.word	0x20003c80
   3e668:	e000e100 	.word	0xe000e100

0003e66c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   3e66c:	b530      	push	{r4, r5, lr}
	return port->config;
   3e66e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3e670:	7b04      	ldrb	r4, [r0, #12]
   3e672:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   3e676:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3e67a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   3e67e:	b085      	sub	sp, #20
   3e680:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   3e684:	d104      	bne.n	3e690 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   3e686:	4628      	mov	r0, r5
   3e688:	f001 faee 	bl	3fc68 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   3e68c:	2000      	movs	r0, #0
   3e68e:	e032      	b.n	3e6f6 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   3e690:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e694:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   3e698:	d12f      	bne.n	3e6fa <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3e69a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   3e69e:	bf0c      	ite	eq
   3e6a0:	2304      	moveq	r3, #4
   3e6a2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e6a4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   3e6a8:	6883      	ldr	r3, [r0, #8]
   3e6aa:	fa23 f101 	lsr.w	r1, r3, r1
   3e6ae:	07c9      	lsls	r1, r1, #31
   3e6b0:	d42f      	bmi.n	3e712 <gpio_nrfx_pin_interrupt_configure+0xa6>
   3e6b2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   3e6b6:	d12c      	bne.n	3e712 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   3e6b8:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   3e6ba:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   3e6bc:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   3e6c0:	4a1c      	ldr	r2, [pc, #112]	; (3e734 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3e6c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   3e6c6:	bf18      	it	ne
   3e6c8:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3e6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   3e6d0:	07db      	lsls	r3, r3, #31
   3e6d2:	d41e      	bmi.n	3e712 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3e6d4:	f10d 0407 	add.w	r4, sp, #7
   3e6d8:	4621      	mov	r1, r4
   3e6da:	4628      	mov	r0, r5
   3e6dc:	f001 fa28 	bl	3fb30 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   3e6e0:	4b15      	ldr	r3, [pc, #84]	; (3e738 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   3e6e2:	4298      	cmp	r0, r3
   3e6e4:	d114      	bne.n	3e710 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   3e6e6:	4620      	mov	r0, r4
   3e6e8:	f001 fa70 	bl	3fbcc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   3e6ec:	4b13      	ldr	r3, [pc, #76]	; (3e73c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3e6ee:	4298      	cmp	r0, r3
   3e6f0:	d00e      	beq.n	3e710 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   3e6f2:	f06f 000b 	mvn.w	r0, #11
}
   3e6f6:	b005      	add	sp, #20
   3e6f8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3e6fa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   3e6fe:	d005      	beq.n	3e70c <gpio_nrfx_pin_interrupt_configure+0xa0>
   3e700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   3e704:	bf0c      	ite	eq
   3e706:	2302      	moveq	r3, #2
   3e708:	2301      	movne	r3, #1
   3e70a:	e7cb      	b.n	3e6a4 <gpio_nrfx_pin_interrupt_configure+0x38>
   3e70c:	2303      	movs	r3, #3
   3e70e:	e7c9      	b.n	3e6a4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   3e710:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e712:	2300      	movs	r3, #0
   3e714:	4619      	mov	r1, r3
   3e716:	aa02      	add	r2, sp, #8
   3e718:	4628      	mov	r0, r5
   3e71a:	f001 f8e3 	bl	3f8e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3e71e:	4b07      	ldr	r3, [pc, #28]	; (3e73c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3e720:	4298      	cmp	r0, r3
   3e722:	d104      	bne.n	3e72e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   3e724:	2101      	movs	r1, #1
   3e726:	4628      	mov	r0, r5
   3e728:	f001 fa56 	bl	3fbd8 <nrfx_gpiote_trigger_enable>
   3e72c:	e7ae      	b.n	3e68c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   3e72e:	f06f 0004 	mvn.w	r0, #4
   3e732:	e7e0      	b.n	3e6f6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   3e734:	50000300 	.word	0x50000300
   3e738:	0bad0004 	.word	0x0bad0004
   3e73c:	0bad0000 	.word	0x0bad0000

0003e740 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   3e740:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   3e742:	f001 fa33 	bl	3fbac <nrfx_gpiote_is_init>
   3e746:	4604      	mov	r4, r0
   3e748:	b968      	cbnz	r0, 3e766 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   3e74a:	f001 fa07 	bl	3fb5c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   3e74e:	4b08      	ldr	r3, [pc, #32]	; (3e770 <gpio_nrfx_init+0x30>)
   3e750:	4298      	cmp	r0, r3
   3e752:	d10a      	bne.n	3e76a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   3e754:	4807      	ldr	r0, [pc, #28]	; (3e774 <gpio_nrfx_init+0x34>)
   3e756:	4621      	mov	r1, r4
   3e758:	f001 f9e4 	bl	3fb24 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   3e75c:	4622      	mov	r2, r4
   3e75e:	2105      	movs	r1, #5
   3e760:	2006      	movs	r0, #6
   3e762:	f7eb fe4b 	bl	2a3fc <z_arm_irq_priority_set>
		return 0;
   3e766:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   3e768:	bd10      	pop	{r4, pc}
		return -EIO;
   3e76a:	f06f 0004 	mvn.w	r0, #4
   3e76e:	e7fb      	b.n	3e768 <gpio_nrfx_init+0x28>
   3e770:	0bad0000 	.word	0x0bad0000
   3e774:	0003e779 	.word	0x0003e779

0003e778 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e778:	0942      	lsrs	r2, r0, #5
{
   3e77a:	b570      	push	{r4, r5, r6, lr}
   3e77c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e77e:	d002      	beq.n	3e786 <nrfx_gpio_handler+0xe>
   3e780:	2a01      	cmp	r2, #1
   3e782:	d015      	beq.n	3e7b0 <nrfx_gpio_handler+0x38>
}
   3e784:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e786:	4e0b      	ldr	r6, [pc, #44]	; (3e7b4 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   3e788:	6932      	ldr	r2, [r6, #16]
   3e78a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3e78c:	2900      	cmp	r1, #0
   3e78e:	d0f9      	beq.n	3e784 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   3e790:	f003 031f 	and.w	r3, r3, #31
   3e794:	2501      	movs	r5, #1
   3e796:	680c      	ldr	r4, [r1, #0]
   3e798:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   3e79a:	688a      	ldr	r2, [r1, #8]
   3e79c:	402a      	ands	r2, r5
   3e79e:	d002      	beq.n	3e7a6 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   3e7a0:	684b      	ldr	r3, [r1, #4]
   3e7a2:	4630      	mov	r0, r6
   3e7a4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3e7a6:	2c00      	cmp	r4, #0
   3e7a8:	d0ec      	beq.n	3e784 <nrfx_gpio_handler+0xc>
   3e7aa:	4621      	mov	r1, r4
   3e7ac:	6824      	ldr	r4, [r4, #0]
   3e7ae:	e7f4      	b.n	3e79a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e7b0:	4e01      	ldr	r6, [pc, #4]	; (3e7b8 <nrfx_gpio_handler+0x40>)
   3e7b2:	e7e9      	b.n	3e788 <nrfx_gpio_handler+0x10>
   3e7b4:	000497b0 	.word	0x000497b0
   3e7b8:	000497c8 	.word	0x000497c8

0003e7bc <gpio_nrfx_pin_configure>:
{
   3e7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   3e7c0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3e7c2:	7b3b      	ldrb	r3, [r7, #12]
   3e7c4:	f001 051f 	and.w	r5, r1, #31
{
   3e7c8:	b085      	sub	sp, #20
   3e7ca:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3e7cc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   3e7d0:	4614      	mov	r4, r2
   3e7d2:	b9ca      	cbnz	r2, 3e808 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e7d4:	a902      	add	r1, sp, #8
   3e7d6:	4628      	mov	r0, r5
   3e7d8:	f001 f9aa 	bl	3fb30 <nrfx_gpiote_channel_get>
   3e7dc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   3e7de:	4628      	mov	r0, r5
   3e7e0:	f001 fa6a 	bl	3fcb8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   3e7e4:	4b48      	ldr	r3, [pc, #288]	; (3e908 <gpio_nrfx_pin_configure+0x14c>)
   3e7e6:	4298      	cmp	r0, r3
   3e7e8:	d004      	beq.n	3e7f4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   3e7ea:	f06f 0004 	mvn.w	r0, #4
}
   3e7ee:	b005      	add	sp, #20
   3e7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   3e7f4:	4284      	cmp	r4, r0
   3e7f6:	d105      	bne.n	3e804 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   3e7f8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   3e7fc:	f001 f9e0 	bl	3fbc0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   3e800:	42a0      	cmp	r0, r4
   3e802:	d1f2      	bne.n	3e7ea <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e804:	2000      	movs	r0, #0
   3e806:	e7f2      	b.n	3e7ee <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e808:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e80c:	f10d 0103 	add.w	r1, sp, #3
   3e810:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e812:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e816:	f001 f98b 	bl	3fb30 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e81a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e81c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e81e:	aa02      	add	r2, sp, #8
   3e820:	4649      	mov	r1, r9
   3e822:	4628      	mov	r0, r5
   3e824:	f001 f85e 	bl	3f8e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3e828:	4b37      	ldr	r3, [pc, #220]	; (3e908 <gpio_nrfx_pin_configure+0x14c>)
   3e82a:	4298      	cmp	r0, r3
   3e82c:	d002      	beq.n	3e834 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e82e:	f06f 0015 	mvn.w	r0, #21
   3e832:	e7dc      	b.n	3e7ee <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   3e834:	4580      	cmp	r8, r0
   3e836:	d103      	bne.n	3e840 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   3e838:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e83c:	f001 f9c0 	bl	3fbc0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   3e840:	05a3      	lsls	r3, r4, #22
   3e842:	d54e      	bpl.n	3e8e2 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e844:	4b31      	ldr	r3, [pc, #196]	; (3e90c <gpio_nrfx_pin_configure+0x150>)
   3e846:	4a32      	ldr	r2, [pc, #200]	; (3e910 <gpio_nrfx_pin_configure+0x154>)
   3e848:	4023      	ands	r3, r4
   3e84a:	4293      	cmp	r3, r2
   3e84c:	d03a      	beq.n	3e8c4 <gpio_nrfx_pin_configure+0x108>
   3e84e:	d80c      	bhi.n	3e86a <gpio_nrfx_pin_configure+0xae>
   3e850:	2b06      	cmp	r3, #6
   3e852:	d014      	beq.n	3e87e <gpio_nrfx_pin_configure+0xc2>
   3e854:	d804      	bhi.n	3e860 <gpio_nrfx_pin_configure+0xa4>
   3e856:	b193      	cbz	r3, 3e87e <gpio_nrfx_pin_configure+0xc2>
   3e858:	2b02      	cmp	r3, #2
   3e85a:	d1e8      	bne.n	3e82e <gpio_nrfx_pin_configure+0x72>
   3e85c:	2304      	movs	r3, #4
   3e85e:	e00e      	b.n	3e87e <gpio_nrfx_pin_configure+0xc2>
   3e860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3e864:	d1e3      	bne.n	3e82e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   3e866:	2301      	movs	r3, #1
   3e868:	e009      	b.n	3e87e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e86a:	4a2a      	ldr	r2, [pc, #168]	; (3e914 <gpio_nrfx_pin_configure+0x158>)
   3e86c:	4293      	cmp	r3, r2
   3e86e:	d02b      	beq.n	3e8c8 <gpio_nrfx_pin_configure+0x10c>
   3e870:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   3e874:	d02a      	beq.n	3e8cc <gpio_nrfx_pin_configure+0x110>
   3e876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   3e87a:	d1d8      	bne.n	3e82e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   3e87c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   3e87e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   3e882:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   3e886:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   3e88a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   3e88c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   3e890:	bf54      	ite	pl
   3e892:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3e896:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3e898:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   3e89a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3e89e:	d517      	bpl.n	3e8d0 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   3e8a0:	687b      	ldr	r3, [r7, #4]
   3e8a2:	2101      	movs	r1, #1
   3e8a4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   3e8a8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   3e8ac:	2200      	movs	r2, #0
   3e8ae:	a901      	add	r1, sp, #4
   3e8b0:	4628      	mov	r0, r5
   3e8b2:	f001 f8c5 	bl	3fa40 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e8b6:	4b14      	ldr	r3, [pc, #80]	; (3e908 <gpio_nrfx_pin_configure+0x14c>)
   3e8b8:	4298      	cmp	r0, r3
   3e8ba:	bf14      	ite	ne
   3e8bc:	f06f 0015 	mvnne.w	r0, #21
   3e8c0:	2000      	moveq	r0, #0
   3e8c2:	e794      	b.n	3e7ee <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   3e8c4:	2307      	movs	r3, #7
   3e8c6:	e7da      	b.n	3e87e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   3e8c8:	2305      	movs	r3, #5
   3e8ca:	e7d8      	b.n	3e87e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   3e8cc:	2303      	movs	r3, #3
   3e8ce:	e7d6      	b.n	3e87e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   3e8d0:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   3e8d2:	bf41      	itttt	mi
   3e8d4:	687b      	ldrmi	r3, [r7, #4]
   3e8d6:	2101      	movmi	r1, #1
   3e8d8:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   3e8dc:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   3e8e0:	e7e4      	b.n	3e8ac <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   3e8e2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e8e4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   3e8e8:	bf54      	ite	pl
   3e8ea:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   3e8ee:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e8f0:	461a      	mov	r2, r3
   3e8f2:	a901      	add	r1, sp, #4
   3e8f4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   3e8f6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e8fa:	f000 fff3 	bl	3f8e4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e8fe:	4b02      	ldr	r3, [pc, #8]	; (3e908 <gpio_nrfx_pin_configure+0x14c>)
   3e900:	4298      	cmp	r0, r3
   3e902:	f43f af7f 	beq.w	3e804 <gpio_nrfx_pin_configure+0x48>
   3e906:	e792      	b.n	3e82e <gpio_nrfx_pin_configure+0x72>
   3e908:	0bad0000 	.word	0x0bad0000
   3e90c:	00f00006 	.word	0x00f00006
   3e910:	00100006 	.word	0x00100006
   3e914:	00400002 	.word	0x00400002

0003e918 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   3e918:	4b02      	ldr	r3, [pc, #8]	; (3e924 <flash_nrf_pages_layout+0xc>)
   3e91a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   3e91c:	2301      	movs	r3, #1
   3e91e:	6013      	str	r3, [r2, #0]
}
   3e920:	4770      	bx	lr
   3e922:	bf00      	nop
   3e924:	200036f8 	.word	0x200036f8

0003e928 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   3e928:	4800      	ldr	r0, [pc, #0]	; (3e92c <flash_nrf_get_parameters+0x4>)
   3e92a:	4770      	bx	lr
   3e92c:	0004b250 	.word	0x0004b250

0003e930 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   3e930:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3e932:	2201      	movs	r2, #1
   3e934:	4611      	mov	r1, r2
   3e936:	4807      	ldr	r0, [pc, #28]	; (3e954 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3e938:	4c07      	ldr	r4, [pc, #28]	; (3e958 <nrf_flash_init+0x28>)
   3e93a:	f00a fab3 	bl	48ea4 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   3e93e:	f000 f9c3 	bl	3ecc8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3e942:	f009 fd3c 	bl	483be <nrfx_nvmc_flash_page_count_get>
   3e946:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   3e948:	f009 fd35 	bl	483b6 <nrfx_nvmc_flash_page_size_get>
   3e94c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   3e94e:	2000      	movs	r0, #0
   3e950:	bd10      	pop	{r4, pc}
   3e952:	bf00      	nop
   3e954:	20003700 	.word	0x20003700
   3e958:	200036f8 	.word	0x200036f8

0003e95c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   3e95c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e960:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   3e964:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3e968:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e96c:	f023 031f 	bic.w	r3, r3, #31
   3e970:	430b      	orrs	r3, r1
    pofcon |=
   3e972:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3e976:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   3e97a:	4b02      	ldr	r3, [pc, #8]	; (3e984 <restore_pofwarn.part.0+0x28>)
   3e97c:	2200      	movs	r2, #0
   3e97e:	701a      	strb	r2, [r3, #0]
	}
}
   3e980:	4770      	bx	lr
   3e982:	bf00      	nop
   3e984:	20003c79 	.word	0x20003c79

0003e988 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3e988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3e98c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3e990:	2b08      	cmp	r3, #8
   3e992:	d122      	bne.n	3e9da <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   3e994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e998:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   3e99c:	f011 0001 	ands.w	r0, r1, #1
   3e9a0:	d01c      	beq.n	3e9dc <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   3e9a2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3e9a6:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e9aa:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   3e9ae:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   3e9b0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e9b4:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   3e9b8:	b158      	cbz	r0, 3e9d2 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   3e9ba:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e9be:	f023 031f 	bic.w	r3, r3, #31
   3e9c2:	430b      	orrs	r3, r1
    pofcon |=
   3e9c4:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3e9c8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   3e9cc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3e9d0:	4770      	bx	lr
		pofcon_enabled = enabled;
   3e9d2:	4b03      	ldr	r3, [pc, #12]	; (3e9e0 <suspend_pofwarn+0x58>)
   3e9d4:	2201      	movs	r2, #1
   3e9d6:	701a      	strb	r2, [r3, #0]
   3e9d8:	4770      	bx	lr
		return 0;
   3e9da:	2000      	movs	r0, #0
}
   3e9dc:	4770      	bx	lr
   3e9de:	bf00      	nop
   3e9e0:	20003c79 	.word	0x20003c79

0003e9e4 <erase_op>:
{
   3e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e9e6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e9e8:	f009 fce5 	bl	483b6 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   3e9ec:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e9ee:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   3e9f0:	b10b      	cbz	r3, 3e9f6 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   3e9f2:	f000 f97b 	bl	3ecec <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3e9f6:	4f13      	ldr	r7, [pc, #76]	; (3ea44 <erase_op+0x60>)
{
   3e9f8:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   3e9fa:	f7ff ffc5 	bl	3e988 <suspend_pofwarn>
   3e9fe:	b9e8      	cbnz	r0, 3ea3c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3ea00:	6860      	ldr	r0, [r4, #4]
   3ea02:	f001 fa5f 	bl	3fec4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3ea06:	68a3      	ldr	r3, [r4, #8]
   3ea08:	1b5b      	subs	r3, r3, r5
   3ea0a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3ea0c:	6863      	ldr	r3, [r4, #4]
   3ea0e:	442b      	add	r3, r5
   3ea10:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   3ea12:	783b      	ldrb	r3, [r7, #0]
   3ea14:	b10b      	cbz	r3, 3ea1a <erase_op+0x36>
   3ea16:	f7ff ffa1 	bl	3e95c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   3ea1a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3ea1c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   3ea1e:	b93b      	cbnz	r3, 3ea30 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   3ea20:	68a3      	ldr	r3, [r4, #8]
   3ea22:	2b00      	cmp	r3, #0
   3ea24:	d1e9      	bne.n	3e9fa <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   3ea26:	68a0      	ldr	r0, [r4, #8]
   3ea28:	3800      	subs	r0, #0
   3ea2a:	bf18      	it	ne
   3ea2c:	2001      	movne	r0, #1
}
   3ea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   3ea30:	4630      	mov	r0, r6
   3ea32:	f7e8 ff1d 	bl	27870 <nrf_flash_sync_check_time_limit>
   3ea36:	2800      	cmp	r0, #0
   3ea38:	d0f2      	beq.n	3ea20 <erase_op+0x3c>
   3ea3a:	e7f4      	b.n	3ea26 <erase_op+0x42>
			return -ECANCELED;
   3ea3c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3ea40:	e7f5      	b.n	3ea2e <erase_op+0x4a>
   3ea42:	bf00      	nop
   3ea44:	20003c79 	.word	0x20003c79

0003ea48 <flash_nrf_erase>:
{
   3ea48:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ea4a:	b087      	sub	sp, #28
   3ea4c:	460e      	mov	r6, r1
   3ea4e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3ea50:	f009 fcb1 	bl	483b6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   3ea54:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3ea56:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   3ea58:	4630      	mov	r0, r6
   3ea5a:	f009 fb85 	bl	48168 <is_regular_addr_valid>
   3ea5e:	b3c8      	cbz	r0, 3ead4 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   3ea60:	fbb6 f3f7 	udiv	r3, r6, r7
   3ea64:	fb07 6313 	mls	r3, r7, r3, r6
   3ea68:	bba3      	cbnz	r3, 3ead4 <flash_nrf_erase+0x8c>
   3ea6a:	fbb5 f4f7 	udiv	r4, r5, r7
   3ea6e:	fb07 5414 	mls	r4, r7, r4, r5
   3ea72:	bb7c      	cbnz	r4, 3ead4 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   3ea74:	42bd      	cmp	r5, r7
   3ea76:	d322      	bcc.n	3eabe <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   3ea78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ea7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ea80:	4816      	ldr	r0, [pc, #88]	; (3eadc <flash_nrf_erase+0x94>)
   3ea82:	f002 ff71 	bl	41968 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3ea86:	f009 fb96 	bl	481b6 <nrf_flash_sync_is_required>
   3ea8a:	ab02      	add	r3, sp, #8
   3ea8c:	4601      	mov	r1, r0
	struct flash_context context = {
   3ea8e:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   3ea90:	b1c0      	cbz	r0, 3eac4 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   3ea92:	4621      	mov	r1, r4
   3ea94:	4618      	mov	r0, r3
   3ea96:	f006 fa1e 	bl	44ed6 <memset>
   3ea9a:	2201      	movs	r2, #1
   3ea9c:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3eaa0:	4a0f      	ldr	r2, [pc, #60]	; (3eae0 <flash_nrf_erase+0x98>)
   3eaa2:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3eaa6:	480f      	ldr	r0, [pc, #60]	; (3eae4 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   3eaa8:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3eaac:	f000 f916 	bl	3ecdc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3eab0:	4668      	mov	r0, sp
   3eab2:	f7e8 fe61 	bl	27778 <nrf_flash_sync_exe>
	return	erase_op(&context);
   3eab6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3eab8:	4808      	ldr	r0, [pc, #32]	; (3eadc <flash_nrf_erase+0x94>)
   3eaba:	f002 ff2f 	bl	4191c <z_impl_k_sem_give>
}
   3eabe:	4620      	mov	r0, r4
   3eac0:	b007      	add	sp, #28
   3eac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   3eac4:	4618      	mov	r0, r3
   3eac6:	f006 fa06 	bl	44ed6 <memset>
   3eaca:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   3eace:	f7ff ff89 	bl	3e9e4 <erase_op>
   3ead2:	e7f0      	b.n	3eab6 <flash_nrf_erase+0x6e>
		return -EINVAL;
   3ead4:	f06f 0415 	mvn.w	r4, #21
   3ead8:	e7f1      	b.n	3eabe <flash_nrf_erase+0x76>
   3eada:	bf00      	nop
   3eadc:	20003700 	.word	0x20003700
   3eae0:	0003e9e5 	.word	0x0003e9e5
   3eae4:	00015e64 	.word	0x00015e64

0003eae8 <write_op>:
{
   3eae8:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   3eaea:	7b03      	ldrb	r3, [r0, #12]
{
   3eaec:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   3eaee:	b10b      	cbz	r3, 3eaf4 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   3eaf0:	f000 f8fc 	bl	3ecec <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3eaf4:	4e19      	ldr	r6, [pc, #100]	; (3eb5c <write_op+0x74>)
{
   3eaf6:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   3eaf8:	68a3      	ldr	r3, [r4, #8]
   3eafa:	2b03      	cmp	r3, #3
   3eafc:	d806      	bhi.n	3eb0c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3eafe:	4a18      	ldr	r2, [pc, #96]	; (3eb60 <write_op+0x78>)
   3eb00:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3eb04:	07db      	lsls	r3, r3, #31
   3eb06:	d5fb      	bpl.n	3eb00 <write_op+0x18>
	return FLASH_OP_DONE;
   3eb08:	2000      	movs	r0, #0
}
   3eb0a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   3eb0c:	f7ff ff3c 	bl	3e988 <suspend_pofwarn>
   3eb10:	bb08      	cbnz	r0, 3eb56 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3eb12:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3eb14:	6860      	ldr	r0, [r4, #4]
   3eb16:	6819      	ldr	r1, [r3, #0]
   3eb18:	f001 f9f4 	bl	3ff04 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   3eb1c:	7833      	ldrb	r3, [r6, #0]
   3eb1e:	b10b      	cbz	r3, 3eb24 <write_op+0x3c>
   3eb20:	f7ff ff1c 	bl	3e95c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   3eb24:	6863      	ldr	r3, [r4, #4]
   3eb26:	3304      	adds	r3, #4
   3eb28:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   3eb2a:	6823      	ldr	r3, [r4, #0]
   3eb2c:	3304      	adds	r3, #4
   3eb2e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   3eb30:	68a3      	ldr	r3, [r4, #8]
   3eb32:	3b04      	subs	r3, #4
   3eb34:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   3eb36:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3eb38:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   3eb3a:	2b00      	cmp	r3, #0
   3eb3c:	d0dc      	beq.n	3eaf8 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   3eb3e:	4628      	mov	r0, r5
   3eb40:	f7e8 fe96 	bl	27870 <nrf_flash_sync_check_time_limit>
   3eb44:	2800      	cmp	r0, #0
   3eb46:	d0d7      	beq.n	3eaf8 <write_op+0x10>
   3eb48:	4a05      	ldr	r2, [pc, #20]	; (3eb60 <write_op+0x78>)
   3eb4a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3eb4e:	07d9      	lsls	r1, r3, #31
   3eb50:	d5fb      	bpl.n	3eb4a <write_op+0x62>
				return FLASH_OP_ONGOING;
   3eb52:	2001      	movs	r0, #1
   3eb54:	e7d9      	b.n	3eb0a <write_op+0x22>
			return -ECANCELED;
   3eb56:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3eb5a:	e7d6      	b.n	3eb0a <write_op+0x22>
   3eb5c:	20003c79 	.word	0x20003c79
   3eb60:	4001e000 	.word	0x4001e000

0003eb64 <flash_nrf_write>:
{
   3eb64:	b570      	push	{r4, r5, r6, lr}
   3eb66:	460d      	mov	r5, r1
   3eb68:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   3eb6a:	4619      	mov	r1, r3
   3eb6c:	4628      	mov	r0, r5
{
   3eb6e:	4616      	mov	r6, r2
   3eb70:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3eb72:	f009 faf9 	bl	48168 <is_regular_addr_valid>
   3eb76:	b360      	cbz	r0, 3ebd2 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   3eb78:	ea45 0304 	orr.w	r3, r5, r4
   3eb7c:	079b      	lsls	r3, r3, #30
   3eb7e:	d128      	bne.n	3ebd2 <flash_nrf_write+0x6e>
	if (!len) {
   3eb80:	b1fc      	cbz	r4, 3ebc2 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   3eb82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3eb86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3eb8a:	4813      	ldr	r0, [pc, #76]	; (3ebd8 <flash_nrf_write+0x74>)
   3eb8c:	f002 feec 	bl	41968 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3eb90:	f009 fb11 	bl	481b6 <nrf_flash_sync_is_required>
   3eb94:	4603      	mov	r3, r0
	struct flash_context context = {
   3eb96:	e9cd 6502 	strd	r6, r5, [sp, #8]
   3eb9a:	a802      	add	r0, sp, #8
   3eb9c:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   3eb9e:	b19b      	cbz	r3, 3ebc8 <flash_nrf_write+0x64>
	struct flash_context context = {
   3eba0:	2301      	movs	r3, #1
   3eba2:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3eba6:	4b0d      	ldr	r3, [pc, #52]	; (3ebdc <flash_nrf_write+0x78>)
   3eba8:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   3ebac:	f641 504c 	movw	r0, #7500	; 0x1d4c
   3ebb0:	f000 f894 	bl	3ecdc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3ebb4:	4668      	mov	r0, sp
   3ebb6:	f7e8 fddf 	bl	27778 <nrf_flash_sync_exe>
	return write_op(&context);
   3ebba:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3ebbc:	4806      	ldr	r0, [pc, #24]	; (3ebd8 <flash_nrf_write+0x74>)
   3ebbe:	f002 fead 	bl	4191c <z_impl_k_sem_give>
}
   3ebc2:	4620      	mov	r0, r4
   3ebc4:	b006      	add	sp, #24
   3ebc6:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   3ebc8:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   3ebcc:	f7ff ff8c 	bl	3eae8 <write_op>
   3ebd0:	e7f3      	b.n	3ebba <flash_nrf_write+0x56>
		return -EINVAL;
   3ebd2:	f06f 0415 	mvn.w	r4, #21
   3ebd6:	e7f4      	b.n	3ebc2 <flash_nrf_write+0x5e>
   3ebd8:	20003700 	.word	0x20003700
   3ebdc:	0003eae9 	.word	0x0003eae9

0003ebe0 <time_slot_callback_work>:
{
   3ebe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3ebe2:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   3ebe4:	e9d3 2000 	ldrd	r2, r0, [r3]
   3ebe8:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   3ebea:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   3ebec:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   3ebee:	d013      	beq.n	3ec18 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3ebf0:	f10d 010f 	add.w	r1, sp, #15
   3ebf4:	f10d 000e 	add.w	r0, sp, #14
   3ebf8:	f7f4 fbe2 	bl	333c0 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3ebfc:	2300      	movs	r3, #0
   3ebfe:	9300      	str	r3, [sp, #0]
   3ec00:	4619      	mov	r1, r3
   3ec02:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3ec06:	f89d 000e 	ldrb.w	r0, [sp, #14]
   3ec0a:	f7f2 fa6b 	bl	310e4 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   3ec0e:	4b03      	ldr	r3, [pc, #12]	; (3ec1c <time_slot_callback_work+0x3c>)
   3ec10:	60dc      	str	r4, [r3, #12]
   3ec12:	4803      	ldr	r0, [pc, #12]	; (3ec20 <time_slot_callback_work+0x40>)
   3ec14:	f002 fe82 	bl	4191c <z_impl_k_sem_give>
}
   3ec18:	b004      	add	sp, #16
   3ec1a:	bd10      	pop	{r4, pc}
   3ec1c:	20003718 	.word	0x20003718
   3ec20:	20003728 	.word	0x20003728

0003ec24 <time_slot_delay>:
{
   3ec24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3ec28:	b08d      	sub	sp, #52	; 0x34
   3ec2a:	4606      	mov	r6, r0
   3ec2c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3ec2e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   3ec32:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   3ec36:	4690      	mov	r8, r2
   3ec38:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3ec3a:	f7f4 fbc1 	bl	333c0 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   3ec3e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   3ec42:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3ec46:	9700      	str	r7, [sp, #0]
   3ec48:	2400      	movs	r4, #0
   3ec4a:	3501      	adds	r5, #1
   3ec4c:	4633      	mov	r3, r6
   3ec4e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   3ec52:	e9cd 8905 	strd	r8, r9, [sp, #20]
   3ec56:	e9cd 4403 	strd	r4, r4, [sp, #12]
   3ec5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3ec5e:	b2ea      	uxtb	r2, r5
   3ec60:	2101      	movs	r1, #1
   3ec62:	f7f2 f9b5 	bl	30fd0 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   3ec66:	f030 0302 	bics.w	r3, r0, #2
   3ec6a:	d00d      	beq.n	3ec88 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   3ec6c:	4b08      	ldr	r3, [pc, #32]	; (3ec90 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3ec6e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   3ec72:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3ec74:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3ec78:	9400      	str	r4, [sp, #0]
   3ec7a:	4623      	mov	r3, r4
   3ec7c:	4621      	mov	r1, r4
   3ec7e:	f7f2 fa31 	bl	310e4 <ticker_stop>
   3ec82:	4804      	ldr	r0, [pc, #16]	; (3ec94 <time_slot_delay+0x70>)
   3ec84:	f002 fe4a 	bl	4191c <z_impl_k_sem_give>
}
   3ec88:	b00d      	add	sp, #52	; 0x34
   3ec8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3ec8e:	bf00      	nop
   3ec90:	20003718 	.word	0x20003718
   3ec94:	20003728 	.word	0x20003728

0003ec98 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   3ec98:	9b01      	ldr	r3, [sp, #4]
   3ec9a:	4a02      	ldr	r2, [pc, #8]	; (3eca4 <time_slot_callback_prepare+0xc>)
   3ec9c:	2131      	movs	r1, #49	; 0x31
   3ec9e:	f7ff bfc1 	b.w	3ec24 <time_slot_delay>
   3eca2:	bf00      	nop
   3eca4:	0003eca9 	.word	0x0003eca9

0003eca8 <time_slot_callback_abort>:
{
   3eca8:	b570      	push	{r4, r5, r6, lr}
   3ecaa:	9d05      	ldr	r5, [sp, #20]
   3ecac:	4604      	mov	r4, r0
	ll_radio_state_abort();
   3ecae:	f7f4 fb8d 	bl	333cc <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   3ecb2:	462b      	mov	r3, r5
   3ecb4:	4620      	mov	r0, r4
   3ecb6:	4a03      	ldr	r2, [pc, #12]	; (3ecc4 <time_slot_callback_abort+0x1c>)
}
   3ecb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   3ecbc:	2106      	movs	r1, #6
   3ecbe:	f7ff bfb1 	b.w	3ec24 <time_slot_delay>
   3ecc2:	bf00      	nop
   3ecc4:	0003ebe1 	.word	0x0003ebe1

0003ecc8 <nrf_flash_sync_init>:
{
   3ecc8:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3ecca:	2201      	movs	r2, #1
   3eccc:	2100      	movs	r1, #0
   3ecce:	4802      	ldr	r0, [pc, #8]	; (3ecd8 <nrf_flash_sync_init+0x10>)
   3ecd0:	f00a f8e8 	bl	48ea4 <z_impl_k_sem_init>
}
   3ecd4:	2000      	movs	r0, #0
   3ecd6:	bd08      	pop	{r3, pc}
   3ecd8:	20003728 	.word	0x20003728

0003ecdc <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   3ecdc:	4b02      	ldr	r3, [pc, #8]	; (3ece8 <nrf_flash_sync_set_context+0xc>)
   3ecde:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   3ece2:	e9c3 2000 	strd	r2, r0, [r3]
}
   3ece6:	4770      	bx	lr
   3ece8:	20003718 	.word	0x20003718

0003ecec <nrf_flash_sync_get_timestamp_begin>:
{
   3ecec:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   3ecee:	f7f2 fa3b 	bl	31168 <ticker_ticks_now_get>
   3ecf2:	4b01      	ldr	r3, [pc, #4]	; (3ecf8 <nrf_flash_sync_get_timestamp_begin+0xc>)
   3ecf4:	6098      	str	r0, [r3, #8]
}
   3ecf6:	bd08      	pop	{r3, pc}
   3ecf8:	20003718 	.word	0x20003718

0003ecfc <random_byte_get>:
	__asm__ volatile(
   3ecfc:	f04f 0320 	mov.w	r3, #32
   3ed00:	f3ef 8211 	mrs	r2, BASEPRI
   3ed04:	f383 8812 	msr	BASEPRI_MAX, r3
   3ed08:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3ed0c:	4b09      	ldr	r3, [pc, #36]	; (3ed34 <random_byte_get+0x38>)
   3ed0e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   3ed12:	b161      	cbz	r1, 3ed2e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ed14:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   3ed16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ed1a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3ed1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   3ed22:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   3ed24:	f382 8811 	msr	BASEPRI, r2
   3ed28:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   3ed2c:	4770      	bx	lr
	int retval = -EAGAIN;
   3ed2e:	f06f 000a 	mvn.w	r0, #10
   3ed32:	e7f7      	b.n	3ed24 <random_byte_get+0x28>
   3ed34:	4000d000 	.word	0x4000d000

0003ed38 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   3ed38:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ed3a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   3ed3c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   3ed3e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   3ed40:	f04f 0020 	mov.w	r0, #32
   3ed44:	f3ef 8e11 	mrs	lr, BASEPRI
   3ed48:	f380 8812 	msr	BASEPRI_MAX, r0
   3ed4c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   3ed50:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   3ed52:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   3ed56:	1ba4      	subs	r4, r4, r6
   3ed58:	403c      	ands	r4, r7
	if (available < len) {
   3ed5a:	42a2      	cmp	r2, r4
		len = available;
   3ed5c:	bf88      	it	hi
   3ed5e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   3ed60:	18b0      	adds	r0, r6, r2
   3ed62:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   3ed64:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   3ed66:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   3ed68:	f38e 8811 	msr	BASEPRI, lr
   3ed6c:	f3bf 8f6f 	isb	sy
   3ed70:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   3ed72:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   3ed74:	4290      	cmp	r0, r2
   3ed76:	d119      	bne.n	3edac <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   3ed78:	4566      	cmp	r6, ip
   3ed7a:	d10d      	bne.n	3ed98 <rng_pool_get+0x60>
	__asm__ volatile(
   3ed7c:	f04f 0520 	mov.w	r5, #32
   3ed80:	f3ef 8011 	mrs	r0, BASEPRI
   3ed84:	f385 8812 	msr	BASEPRI_MAX, r5
   3ed88:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   3ed8c:	781d      	ldrb	r5, [r3, #0]
   3ed8e:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   3ed90:	f380 8811 	msr	BASEPRI, r0
   3ed94:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   3ed98:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   3ed9a:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   3ed9c:	b290      	uxth	r0, r2
	available = available - len;
   3ed9e:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   3eda0:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3eda2:	bf22      	ittt	cs
   3eda4:	4b06      	ldrcs	r3, [pc, #24]	; (3edc0 <rng_pool_get+0x88>)
   3eda6:	2201      	movcs	r2, #1
   3eda8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   3edaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   3edac:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   3edb0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   3edb2:	f89e e005 	ldrb.w	lr, [lr, #5]
   3edb6:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   3edba:	403d      	ands	r5, r7
   3edbc:	e7da      	b.n	3ed74 <rng_pool_get+0x3c>
   3edbe:	bf00      	nop
   3edc0:	4000d000 	.word	0x4000d000

0003edc4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3edc4:	43db      	mvns	r3, r3
{
   3edc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3edca:	f013 0501 	ands.w	r5, r3, #1
{
   3edce:	460e      	mov	r6, r1
   3edd0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3edd2:	d004      	beq.n	3edde <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   3edd4:	4821      	ldr	r0, [pc, #132]	; (3ee5c <entropy_nrf5_get_entropy_isr+0x98>)
   3edd6:	f7ff ffaf 	bl	3ed38 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   3edda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   3edde:	b3a2      	cbz	r2, 3ee4a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   3ede0:	f04f 0320 	mov.w	r3, #32
   3ede4:	f3ef 8811 	mrs	r8, BASEPRI
   3ede8:	f383 8812 	msr	BASEPRI_MAX, r3
   3edec:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   3edf0:	200d      	movs	r0, #13
   3edf2:	f7eb faf5 	bl	2a3e0 <arch_irq_is_enabled>
   3edf6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   3edf8:	200d      	movs	r0, #13
   3edfa:	f7eb fadd 	bl	2a3b8 <arch_irq_disable>
	__asm__ volatile(
   3edfe:	f388 8811 	msr	BASEPRI, r8
   3ee02:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ee06:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3ee60 <entropy_nrf5_get_entropy_isr+0x9c>
   3ee0a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 3ee64 <entropy_nrf5_get_entropy_isr+0xa0>
   3ee0e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   3ee12:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   3ee16:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3ee1a:	2301      	movs	r3, #1
   3ee1c:	f8c8 3000 	str.w	r3, [r8]
   3ee20:	4625      	mov	r5, r4
   3ee22:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3ee26:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   3ee2a:	b183      	cbz	r3, 3ee4e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   3ee2c:	f7ff ff66 	bl	3ecfc <random_byte_get>
			if (byte < 0) {
   3ee30:	1e03      	subs	r3, r0, #0
   3ee32:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   3ee36:	dbf6      	blt.n	3ee26 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   3ee38:	3d01      	subs	r5, #1
   3ee3a:	b2ad      	uxth	r5, r5
   3ee3c:	5573      	strb	r3, [r6, r5]
		} while (len);
   3ee3e:	2d00      	cmp	r5, #0
   3ee40:	d1f1      	bne.n	3ee26 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   3ee42:	b117      	cbz	r7, 3ee4a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   3ee44:	200d      	movs	r0, #13
   3ee46:	f7eb faa7 	bl	2a398 <arch_irq_enable>
	return cnt;
   3ee4a:	4620      	mov	r0, r4
   3ee4c:	e7c5      	b.n	3edda <entropy_nrf5_get_entropy_isr+0x16>
   3ee4e:	f3bf 8f4f 	dsb	sy
				__WFE();
   3ee52:	bf20      	wfe
				__SEV();
   3ee54:	bf40      	sev
				__WFE();
   3ee56:	bf20      	wfe
   3ee58:	e7e5      	b.n	3ee26 <entropy_nrf5_get_entropy_isr+0x62>
   3ee5a:	bf00      	nop
   3ee5c:	20003770 	.word	0x20003770
   3ee60:	4000d000 	.word	0x4000d000
   3ee64:	e000e100 	.word	0xe000e100

0003ee68 <entropy_nrf5_get_entropy>:
{
   3ee68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   3ee6c:	4f13      	ldr	r7, [pc, #76]	; (3eebc <entropy_nrf5_get_entropy+0x54>)
   3ee6e:	460d      	mov	r5, r1
   3ee70:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3ee72:	f107 0845 	add.w	r8, r7, #69	; 0x45
   3ee76:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   3ee7a:	b914      	cbnz	r4, 3ee82 <entropy_nrf5_get_entropy+0x1a>
}
   3ee7c:	4620      	mov	r0, r4
   3ee7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3ee82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ee86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ee8a:	4638      	mov	r0, r7
   3ee8c:	f002 fd6c 	bl	41968 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3ee90:	4622      	mov	r2, r4
   3ee92:	4629      	mov	r1, r5
   3ee94:	4640      	mov	r0, r8
   3ee96:	f7ff ff4f 	bl	3ed38 <rng_pool_get>
   3ee9a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   3ee9c:	4638      	mov	r0, r7
   3ee9e:	f002 fd3d 	bl	4191c <z_impl_k_sem_give>
		if (bytes == 0U) {
   3eea2:	b93e      	cbnz	r6, 3eeb4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   3eea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3eea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3eeac:	4648      	mov	r0, r9
   3eeae:	f002 fd5b 	bl	41968 <z_impl_k_sem_take>
			continue;
   3eeb2:	e7e2      	b.n	3ee7a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   3eeb4:	1ba4      	subs	r4, r4, r6
   3eeb6:	b2a4      	uxth	r4, r4
		buf += bytes;
   3eeb8:	4435      	add	r5, r6
   3eeba:	e7de      	b.n	3ee7a <entropy_nrf5_get_entropy+0x12>
   3eebc:	20003740 	.word	0x20003740

0003eec0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   3eec0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3eec2:	4c19      	ldr	r4, [pc, #100]	; (3ef28 <entropy_nrf5_init+0x68>)
   3eec4:	2201      	movs	r2, #1
   3eec6:	4611      	mov	r1, r2
   3eec8:	4620      	mov	r0, r4
   3eeca:	f009 ffeb 	bl	48ea4 <z_impl_k_sem_init>
   3eece:	2201      	movs	r2, #1
   3eed0:	2100      	movs	r1, #0
   3eed2:	f104 0018 	add.w	r0, r4, #24
   3eed6:	f009 ffe5 	bl	48ea4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   3eeda:	f240 4307 	movw	r3, #1031	; 0x407
   3eede:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   3eee2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   3eee6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   3eee8:	230c      	movs	r3, #12
   3eeea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   3eeee:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   3eef0:	4b0e      	ldr	r3, [pc, #56]	; (3ef2c <entropy_nrf5_init+0x6c>)
   3eef2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   3eef6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   3eefa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   3eefe:	f042 0201 	orr.w	r2, r2, #1
   3ef02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   3ef06:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ef08:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   3ef0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   3ef10:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   3ef14:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3ef16:	6019      	str	r1, [r3, #0]
   3ef18:	200d      	movs	r0, #13
   3ef1a:	f7eb fa6f 	bl	2a3fc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   3ef1e:	200d      	movs	r0, #13
   3ef20:	f7eb fa3a 	bl	2a398 <arch_irq_enable>

	return 0;
}
   3ef24:	4628      	mov	r0, r5
   3ef26:	bd38      	pop	{r3, r4, r5, pc}
   3ef28:	20003740 	.word	0x20003740
   3ef2c:	4000d000 	.word	0x4000d000

0003ef30 <isr>:
{
   3ef30:	b510      	push	{r4, lr}
	byte = random_byte_get();
   3ef32:	f7ff fee3 	bl	3ecfc <random_byte_get>
	if (byte < 0) {
   3ef36:	2800      	cmp	r0, #0
   3ef38:	db20      	blt.n	3ef7c <isr+0x4c>
	uint8_t last  = rngp->last;
   3ef3a:	4b17      	ldr	r3, [pc, #92]	; (3ef98 <isr+0x68>)
   3ef3c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   3ef40:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   3ef44:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   3ef48:	1a51      	subs	r1, r2, r1
   3ef4a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   3ef4e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   3ef50:	d10d      	bne.n	3ef6e <isr+0x3e>
	uint8_t last  = rngp->last;
   3ef52:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   3ef56:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   3ef5a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   3ef5e:	1a51      	subs	r1, r2, r1
   3ef60:	ea34 0101 	bics.w	r1, r4, r1
   3ef64:	d10b      	bne.n	3ef7e <isr+0x4e>
   3ef66:	4b0d      	ldr	r3, [pc, #52]	; (3ef9c <isr+0x6c>)
   3ef68:	2201      	movs	r2, #1
   3ef6a:	605a      	str	r2, [r3, #4]
}
   3ef6c:	e00e      	b.n	3ef8c <isr+0x5c>
	rngp->buffer[last] = byte;
   3ef6e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   3ef70:	3201      	adds	r2, #1
   3ef72:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   3ef74:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   3ef78:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   3ef7c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   3ef7e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   3ef80:	3201      	adds	r2, #1
   3ef82:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   3ef84:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   3ef88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   3ef8c:	4804      	ldr	r0, [pc, #16]	; (3efa0 <isr+0x70>)
}
   3ef8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ef92:	f002 bcc3 	b.w	4191c <z_impl_k_sem_give>
   3ef96:	bf00      	nop
   3ef98:	20003740 	.word	0x20003740
   3ef9c:	4000d000 	.word	0x4000d000
   3efa0:	20003758 	.word	0x20003758

0003efa4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   3efa4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   3efa6:	2301      	movs	r3, #1
   3efa8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3efaa:	4a11      	ldr	r2, [pc, #68]	; (3eff0 <compare_int_lock+0x4c>)
   3efac:	f3bf 8f5b 	dmb	ish
   3efb0:	43dc      	mvns	r4, r3
   3efb2:	e852 1f00 	ldrex	r1, [r2]
   3efb6:	ea01 0c04 	and.w	ip, r1, r4
   3efba:	e842 ce00 	strex	lr, ip, [r2]
   3efbe:	f1be 0f00 	cmp.w	lr, #0
   3efc2:	d1f6      	bne.n	3efb2 <compare_int_lock+0xe>
   3efc4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3efc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3efcc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   3efd0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3efd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   3efd8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   3efdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3efe0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   3efe4:	420b      	tst	r3, r1
}
   3efe6:	bf14      	ite	ne
   3efe8:	2001      	movne	r0, #1
   3efea:	2000      	moveq	r0, #0
   3efec:	bd10      	pop	{r4, pc}
   3efee:	bf00      	nop
   3eff0:	20003798 	.word	0x20003798

0003eff4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3eff4:	4919      	ldr	r1, [pc, #100]	; (3f05c <sys_clock_timeout_handler+0x68>)
{
   3eff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3eff8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   3effa:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3effe:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   3f000:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   3f004:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3f008:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   3f00a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   3f00e:	d222      	bcs.n	3f056 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   3f010:	4b13      	ldr	r3, [pc, #76]	; (3f060 <sys_clock_timeout_handler+0x6c>)
   3f012:	681b      	ldr	r3, [r3, #0]
   3f014:	0a1a      	lsrs	r2, r3, #8
   3f016:	061b      	lsls	r3, r3, #24
   3f018:	195e      	adds	r6, r3, r5
   3f01a:	4b12      	ldr	r3, [pc, #72]	; (3f064 <sys_clock_timeout_handler+0x70>)
   3f01c:	f142 0700 	adc.w	r7, r2, #0
   3f020:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   3f024:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   3f026:	f003 facf 	bl	425c8 <sys_clock_announce>
    return p_reg->CC[ch];
   3f02a:	00a3      	lsls	r3, r4, #2
   3f02c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f030:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   3f034:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   3f038:	42aa      	cmp	r2, r5
   3f03a:	d10b      	bne.n	3f054 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   3f03c:	b91e      	cbnz	r6, 3f046 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   3f03e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3f042:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   3f046:	4b08      	ldr	r3, [pc, #32]	; (3f068 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3f048:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   3f04c:	fa00 f404 	lsl.w	r4, r0, r4
   3f050:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   3f054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   3f056:	2600      	movs	r6, #0
   3f058:	e7e5      	b.n	3f026 <sys_clock_timeout_handler+0x32>
   3f05a:	bf00      	nop
   3f05c:	20001840 	.word	0x20001840
   3f060:	2000379c 	.word	0x2000379c
   3f064:	20001828 	.word	0x20001828
   3f068:	40011000 	.word	0x40011000

0003f06c <compare_int_unlock>:
	if (key) {
   3f06c:	b319      	cbz	r1, 3f0b6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3f06e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   3f072:	2301      	movs	r3, #1
   3f074:	4a10      	ldr	r2, [pc, #64]	; (3f0b8 <compare_int_unlock+0x4c>)
   3f076:	4083      	lsls	r3, r0
   3f078:	e852 1f00 	ldrex	r1, [r2]
   3f07c:	4319      	orrs	r1, r3
   3f07e:	e842 1c00 	strex	ip, r1, [r2]
   3f082:	f1bc 0f00 	cmp.w	ip, #0
   3f086:	d1f7      	bne.n	3f078 <compare_int_unlock+0xc>
   3f088:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   3f08c:	4a0b      	ldr	r2, [pc, #44]	; (3f0bc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3f08e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3f092:	4083      	lsls	r3, r0
   3f094:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3f098:	4b09      	ldr	r3, [pc, #36]	; (3f0c0 <compare_int_unlock+0x54>)
   3f09a:	f3bf 8f5b 	dmb	ish
   3f09e:	681b      	ldr	r3, [r3, #0]
   3f0a0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   3f0a4:	fa23 f000 	lsr.w	r0, r3, r0
   3f0a8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3f0aa:	bf42      	ittt	mi
   3f0ac:	4b05      	ldrmi	r3, [pc, #20]	; (3f0c4 <compare_int_unlock+0x58>)
   3f0ae:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   3f0b2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   3f0b6:	4770      	bx	lr
   3f0b8:	20003798 	.word	0x20003798
   3f0bc:	40011000 	.word	0x40011000
   3f0c0:	20003794 	.word	0x20003794
   3f0c4:	e000e100 	.word	0xe000e100

0003f0c8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   3f0c8:	4b0d      	ldr	r3, [pc, #52]	; (3f100 <z_nrf_rtc_timer_read+0x38>)
   3f0ca:	6818      	ldr	r0, [r3, #0]
   3f0cc:	0a01      	lsrs	r1, r0, #8
   3f0ce:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   3f0d0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   3f0d4:	4b0b      	ldr	r3, [pc, #44]	; (3f104 <z_nrf_rtc_timer_read+0x3c>)
   3f0d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   3f0da:	1818      	adds	r0, r3, r0
   3f0dc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   3f0e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3f0e4:	d20a      	bcs.n	3f0fc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   3f0e6:	4b08      	ldr	r3, [pc, #32]	; (3f108 <z_nrf_rtc_timer_read+0x40>)
   3f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   3f0ec:	4290      	cmp	r0, r2
   3f0ee:	eb71 0303 	sbcs.w	r3, r1, r3
   3f0f2:	d203      	bcs.n	3f0fc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   3f0f4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   3f0f8:	f141 0100 	adc.w	r1, r1, #0
}
   3f0fc:	4770      	bx	lr
   3f0fe:	bf00      	nop
   3f100:	2000379c 	.word	0x2000379c
   3f104:	40011000 	.word	0x40011000
   3f108:	20001828 	.word	0x20001828

0003f10c <compare_set>:
{
   3f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f110:	b085      	sub	sp, #20
   3f112:	4616      	mov	r6, r2
   3f114:	4698      	mov	r8, r3
   3f116:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   3f118:	f7ff ff44 	bl	3efa4 <compare_int_lock>
   3f11c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   3f11e:	f7ff ffd3 	bl	3f0c8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   3f122:	42b0      	cmp	r0, r6
   3f124:	eb71 0308 	sbcs.w	r3, r1, r8
   3f128:	d278      	bcs.n	3f21c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   3f12a:	4b46      	ldr	r3, [pc, #280]	; (3f244 <__kernel_ram_size+0x24>)
   3f12c:	1a30      	subs	r0, r6, r0
   3f12e:	eb68 0101 	sbc.w	r1, r8, r1
   3f132:	4298      	cmp	r0, r3
   3f134:	f171 0300 	sbcs.w	r3, r1, #0
   3f138:	f080 8081 	bcs.w	3f23e <__kernel_ram_size+0x1e>
		if (target_time != cc_data[chan].target_time) {
   3f13c:	4b42      	ldr	r3, [pc, #264]	; (3f248 <__kernel_ram_size+0x28>)
   3f13e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   3f142:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   3f146:	45d8      	cmp	r8, fp
   3f148:	bf08      	it	eq
   3f14a:	4556      	cmpeq	r6, sl
   3f14c:	d051      	beq.n	3f1f2 <compare_set+0xe6>
   3f14e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   3f152:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3f156:	f105 0750 	add.w	r7, r5, #80	; 0x50
   3f15a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   3f15e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3f160:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   3f164:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f168:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   3f16a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   3f16e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3f172:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   3f174:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   3f178:	4b34      	ldr	r3, [pc, #208]	; (3f24c <__kernel_ram_size+0x2c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f17a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   3f17e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   3f180:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   3f184:	1a40      	subs	r0, r0, r1
   3f186:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3f18a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   3f18e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   3f190:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   3f194:	d107      	bne.n	3f1a6 <compare_set+0x9a>
   3f196:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   3f19a:	2013      	movs	r0, #19
   3f19c:	f00a f8cb 	bl	49336 <z_impl_k_busy_wait>
   3f1a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   3f1a4:	4b29      	ldr	r3, [pc, #164]	; (3f24c <__kernel_ram_size+0x2c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3f1a6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   3f1aa:	eba4 000c 	sub.w	r0, r4, ip
   3f1ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   3f1b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3f1b6:	bf88      	it	hi
   3f1b8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f1ba:	2000      	movs	r0, #0
   3f1bc:	6038      	str	r0, [r7, #0]
   3f1be:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   3f1c0:	9801      	ldr	r0, [sp, #4]
   3f1c2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3f1c6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   3f1ca:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   3f1ce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   3f1d2:	4281      	cmp	r1, r0
   3f1d4:	d006      	beq.n	3f1e4 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   3f1d6:	1a20      	subs	r0, r4, r0
   3f1d8:	3802      	subs	r0, #2
   3f1da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   3f1de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3f1e2:	d819      	bhi.n	3f218 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   3f1e4:	1aa4      	subs	r4, r4, r2
   3f1e6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   3f1ea:	eb14 0a06 	adds.w	sl, r4, r6
   3f1ee:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   3f1f2:	4915      	ldr	r1, [pc, #84]	; (3f248 <__kernel_ram_size+0x28>)
	cc_data[chan].callback = handler;
   3f1f4:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   3f1f6:	012b      	lsls	r3, r5, #4
   3f1f8:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   3f1fc:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   3f200:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   3f202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3f204:	6053      	str	r3, [r2, #4]
	return ret;
   3f206:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   3f208:	4628      	mov	r0, r5
   3f20a:	9900      	ldr	r1, [sp, #0]
   3f20c:	f7ff ff2e 	bl	3f06c <compare_int_unlock>
}
   3f210:	4620      	mov	r0, r4
   3f212:	b005      	add	sp, #20
   3f214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f218:	4620      	mov	r0, r4
   3f21a:	e7b1      	b.n	3f180 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   3f21c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3f21e:	4a0c      	ldr	r2, [pc, #48]	; (3f250 <__kernel_ram_size+0x30>)
   3f220:	f3bf 8f5b 	dmb	ish
   3f224:	40ab      	lsls	r3, r5
   3f226:	e852 1f00 	ldrex	r1, [r2]
   3f22a:	4319      	orrs	r1, r3
   3f22c:	e842 1000 	strex	r0, r1, [r2]
   3f230:	2800      	cmp	r0, #0
   3f232:	d1f8      	bne.n	3f226 <__kernel_ram_size+0x6>
   3f234:	f3bf 8f5b 	dmb	ish
   3f238:	46b2      	mov	sl, r6
   3f23a:	46c3      	mov	fp, r8
   3f23c:	e7d9      	b.n	3f1f2 <compare_set+0xe6>
			return -EINVAL;
   3f23e:	f06f 0415 	mvn.w	r4, #21
   3f242:	e7e1      	b.n	3f208 <compare_set+0xfc>
   3f244:	01000001 	.word	0x01000001
   3f248:	20001830 	.word	0x20001830
   3f24c:	40011000 	.word	0x40011000
   3f250:	20003794 	.word	0x20003794

0003f254 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   3f254:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f256:	4b19      	ldr	r3, [pc, #100]	; (3f2bc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   3f258:	4d19      	ldr	r5, [pc, #100]	; (3f2c0 <sys_clock_driver_init+0x6c>)
   3f25a:	2400      	movs	r4, #0
   3f25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3f260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3f264:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   3f268:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   3f26c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3f270:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3f274:	4b13      	ldr	r3, [pc, #76]	; (3f2c4 <sys_clock_driver_init+0x70>)
   3f276:	2602      	movs	r6, #2
   3f278:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   3f27c:	2101      	movs	r1, #1
   3f27e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   3f282:	2011      	movs	r0, #17
   3f284:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   3f288:	4622      	mov	r2, r4
   3f28a:	f7eb f8b7 	bl	2a3fc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   3f28e:	2011      	movs	r0, #17
   3f290:	f7eb f882 	bl	2a398 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   3f294:	4a0c      	ldr	r2, [pc, #48]	; (3f2c8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3f296:	2301      	movs	r3, #1
   3f298:	60ab      	str	r3, [r5, #8]
   3f29a:	602b      	str	r3, [r5, #0]
   3f29c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   3f29e:	4b0b      	ldr	r3, [pc, #44]	; (3f2cc <sys_clock_driver_init+0x78>)
   3f2a0:	4a0b      	ldr	r2, [pc, #44]	; (3f2d0 <sys_clock_driver_init+0x7c>)
   3f2a2:	9300      	str	r3, [sp, #0]
   3f2a4:	9401      	str	r4, [sp, #4]
   3f2a6:	2300      	movs	r3, #0
   3f2a8:	4620      	mov	r0, r4
   3f2aa:	f7ff ff2f 	bl	3f10c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   3f2ae:	4630      	mov	r0, r6
   3f2b0:	f7ff f95c 	bl	3e56c <z_nrf_clock_control_lf_on>

	return 0;
}
   3f2b4:	4620      	mov	r0, r4
   3f2b6:	b002      	add	sp, #8
   3f2b8:	bd70      	pop	{r4, r5, r6, pc}
   3f2ba:	bf00      	nop
   3f2bc:	20001830 	.word	0x20001830
   3f2c0:	40011000 	.word	0x40011000
   3f2c4:	e000e100 	.word	0xe000e100
   3f2c8:	20003798 	.word	0x20003798
   3f2cc:	0003eff5 	.word	0x0003eff5
   3f2d0:	007fffff 	.word	0x007fffff

0003f2d4 <rtc_nrf_isr>:
{
   3f2d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   3f2d8:	4c35      	ldr	r4, [pc, #212]	; (3f3b0 <rtc_nrf_isr+0xdc>)
   3f2da:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   3f2de:	079a      	lsls	r2, r3, #30
   3f2e0:	d50b      	bpl.n	3f2fa <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f2e2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3f2e6:	b143      	cbz	r3, 3f2fa <rtc_nrf_isr+0x26>
		overflow_cnt++;
   3f2e8:	4a32      	ldr	r2, [pc, #200]	; (3f3b4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f2ea:	2300      	movs	r3, #0
   3f2ec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3f2f0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3f2f4:	6813      	ldr	r3, [r2, #0]
   3f2f6:	3301      	adds	r3, #1
   3f2f8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   3f2fa:	f04f 0320 	mov.w	r3, #32
   3f2fe:	f3ef 8211 	mrs	r2, BASEPRI
   3f302:	f383 8812 	msr	BASEPRI_MAX, r3
   3f306:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   3f30a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   3f30e:	03db      	lsls	r3, r3, #15
   3f310:	d512      	bpl.n	3f338 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3f312:	f3bf 8f5b 	dmb	ish
   3f316:	4b28      	ldr	r3, [pc, #160]	; (3f3b8 <rtc_nrf_isr+0xe4>)
   3f318:	e853 1f00 	ldrex	r1, [r3]
   3f31c:	f021 0001 	bic.w	r0, r1, #1
   3f320:	e843 0600 	strex	r6, r0, [r3]
   3f324:	2e00      	cmp	r6, #0
   3f326:	d1f7      	bne.n	3f318 <rtc_nrf_isr+0x44>
   3f328:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3f32c:	2900      	cmp	r1, #0
   3f32e:	d136      	bne.n	3f39e <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f330:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   3f334:	2b00      	cmp	r3, #0
   3f336:	d132      	bne.n	3f39e <rtc_nrf_isr+0xca>
{
   3f338:	2300      	movs	r3, #0
	__asm__ volatile(
   3f33a:	f382 8811 	msr	BASEPRI, r2
   3f33e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   3f342:	b34b      	cbz	r3, 3f398 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   3f344:	f7ff fec0 	bl	3f0c8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   3f348:	f04f 0320 	mov.w	r3, #32
   3f34c:	f3ef 8c11 	mrs	ip, BASEPRI
   3f350:	f383 8812 	msr	BASEPRI_MAX, r3
   3f354:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   3f358:	4b18      	ldr	r3, [pc, #96]	; (3f3bc <rtc_nrf_isr+0xe8>)
   3f35a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   3f35e:	42b0      	cmp	r0, r6
   3f360:	eb71 0207 	sbcs.w	r2, r1, r7
   3f364:	f04f 0200 	mov.w	r2, #0
   3f368:	d320      	bcc.n	3f3ac <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f36a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   3f36e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   3f372:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f376:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   3f37a:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   3f37c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3f380:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   3f384:	f38c 8811 	msr	BASEPRI, ip
   3f388:	f3bf 8f6f 	isb	sy
		if (handler) {
   3f38c:	b121      	cbz	r1, 3f398 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   3f38e:	9500      	str	r5, [sp, #0]
   3f390:	4632      	mov	r2, r6
   3f392:	463b      	mov	r3, r7
   3f394:	2000      	movs	r0, #0
   3f396:	4788      	blx	r1
}
   3f398:	b003      	add	sp, #12
   3f39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f39e:	2300      	movs	r3, #0
   3f3a0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   3f3a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3f3a8:	2301      	movs	r3, #1
}
   3f3aa:	e7c6      	b.n	3f33a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   3f3ac:	4611      	mov	r1, r2
   3f3ae:	e7e9      	b.n	3f384 <rtc_nrf_isr+0xb0>
   3f3b0:	40011000 	.word	0x40011000
   3f3b4:	2000379c 	.word	0x2000379c
   3f3b8:	20003794 	.word	0x20003794
   3f3bc:	20001830 	.word	0x20001830

0003f3c0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f3c0:	1c43      	adds	r3, r0, #1
{
   3f3c2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f3c4:	d021      	beq.n	3f40a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3f3c6:	2801      	cmp	r0, #1
   3f3c8:	dd21      	ble.n	3f40e <sys_clock_set_timeout+0x4e>
   3f3ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3f3ce:	da20      	bge.n	3f412 <sys_clock_set_timeout+0x52>
   3f3d0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   3f3d2:	f7ff fe79 	bl	3f0c8 <z_nrf_rtc_timer_read>
   3f3d6:	4b10      	ldr	r3, [pc, #64]	; (3f418 <sys_clock_set_timeout+0x58>)
   3f3d8:	e9d3 1300 	ldrd	r1, r3, [r3]
   3f3dc:	1a40      	subs	r0, r0, r1
		ticks = 0;
   3f3de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3f3e2:	bf28      	it	cs
   3f3e4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   3f3e6:	3001      	adds	r0, #1
   3f3e8:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   3f3ea:	480c      	ldr	r0, [pc, #48]	; (3f41c <sys_clock_set_timeout+0x5c>)
   3f3ec:	4282      	cmp	r2, r0
   3f3ee:	bf28      	it	cs
   3f3f0:	4602      	movcs	r2, r0
   3f3f2:	1852      	adds	r2, r2, r1
   3f3f4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   3f3f8:	4909      	ldr	r1, [pc, #36]	; (3f420 <sys_clock_set_timeout+0x60>)
   3f3fa:	9001      	str	r0, [sp, #4]
   3f3fc:	9100      	str	r1, [sp, #0]
   3f3fe:	f143 0300 	adc.w	r3, r3, #0
   3f402:	f7ff fe83 	bl	3f10c <compare_set>
}
   3f406:	b002      	add	sp, #8
   3f408:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f40a:	4804      	ldr	r0, [pc, #16]	; (3f41c <sys_clock_set_timeout+0x5c>)
   3f40c:	e7e0      	b.n	3f3d0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3f40e:	2400      	movs	r4, #0
   3f410:	e7df      	b.n	3f3d2 <sys_clock_set_timeout+0x12>
   3f412:	4c02      	ldr	r4, [pc, #8]	; (3f41c <sys_clock_set_timeout+0x5c>)
   3f414:	e7dd      	b.n	3f3d2 <sys_clock_set_timeout+0x12>
   3f416:	bf00      	nop
   3f418:	20001840 	.word	0x20001840
   3f41c:	007fffff 	.word	0x007fffff
   3f420:	0003eff5 	.word	0x0003eff5

0003f424 <sys_clock_elapsed>:
{
   3f424:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   3f426:	f7ff fe4f 	bl	3f0c8 <z_nrf_rtc_timer_read>
   3f42a:	4b02      	ldr	r3, [pc, #8]	; (3f434 <sys_clock_elapsed+0x10>)
   3f42c:	681b      	ldr	r3, [r3, #0]
}
   3f42e:	1ac0      	subs	r0, r0, r3
   3f430:	bd08      	pop	{r3, pc}
   3f432:	bf00      	nop
   3f434:	20001840 	.word	0x20001840

0003f438 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f43c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f440:	2a08      	cmp	r2, #8
   3f442:	d106      	bne.n	3f452 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f444:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3f448:	2b05      	cmp	r3, #5
   3f44a:	d802      	bhi.n	3f452 <nrf52_errata_103+0x1a>
   3f44c:	4a02      	ldr	r2, [pc, #8]	; (3f458 <nrf52_errata_103+0x20>)
   3f44e:	5cd0      	ldrb	r0, [r2, r3]
   3f450:	4770      	bx	lr
        return false;
   3f452:	2000      	movs	r0, #0
}
   3f454:	4770      	bx	lr
   3f456:	bf00      	nop
   3f458:	0004b9ab 	.word	0x0004b9ab

0003f45c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   3f45c:	4a02      	ldr	r2, [pc, #8]	; (3f468 <nvmc_wait+0xc>)
   3f45e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   3f462:	2b00      	cmp	r3, #0
   3f464:	d0fb      	beq.n	3f45e <nvmc_wait+0x2>
}
   3f466:	4770      	bx	lr
   3f468:	4001e000 	.word	0x4001e000

0003f46c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   3f46c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   3f46e:	f008 ff0e 	bl	4828e <nrf52_errata_136>
   3f472:	b140      	cbz	r0, 3f486 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   3f474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f478:	2200      	movs	r2, #0
   3f47a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   3f47e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   3f482:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   3f486:	f008 ff02 	bl	4828e <nrf52_errata_136>
   3f48a:	2800      	cmp	r0, #0
   3f48c:	d046      	beq.n	3f51c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   3f48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   3f492:	4b60      	ldr	r3, [pc, #384]	; (3f614 <SystemInit+0x1a8>)
   3f494:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   3f498:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   3f49c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   3f4a0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   3f4a4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   3f4a8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   3f4ac:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   3f4b0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   3f4b4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   3f4b8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   3f4bc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   3f4c0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   3f4c4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   3f4c8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   3f4cc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   3f4d0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   3f4d4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   3f4d8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   3f4dc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   3f4e0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   3f4e4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   3f4e8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   3f4ec:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   3f4f0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   3f4f4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   3f4f8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   3f4fc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   3f500:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   3f504:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   3f508:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   3f50c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   3f510:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   3f514:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   3f518:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   3f51c:	f7ff ff8c 	bl	3f438 <nrf52_errata_103>
   3f520:	b118      	cbz	r0, 3f52a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   3f522:	4b3d      	ldr	r3, [pc, #244]	; (3f618 <SystemInit+0x1ac>)
   3f524:	4a3d      	ldr	r2, [pc, #244]	; (3f61c <SystemInit+0x1b0>)
   3f526:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   3f52a:	f7ff ff85 	bl	3f438 <nrf52_errata_103>
   3f52e:	b118      	cbz	r0, 3f538 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   3f530:	4b3b      	ldr	r3, [pc, #236]	; (3f620 <SystemInit+0x1b4>)
   3f532:	22fb      	movs	r2, #251	; 0xfb
   3f534:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   3f538:	f7ff ff7e 	bl	3f438 <nrf52_errata_103>
   3f53c:	b170      	cbz	r0, 3f55c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   3f53e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3f542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f546:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   3f54a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   3f54e:	f022 020f 	bic.w	r2, r2, #15
   3f552:	f003 030f 	and.w	r3, r3, #15
   3f556:	4313      	orrs	r3, r2
   3f558:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   3f55c:	f7ff ff6c 	bl	3f438 <nrf52_errata_103>
   3f560:	b120      	cbz	r0, 3f56c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   3f562:	4b30      	ldr	r3, [pc, #192]	; (3f624 <SystemInit+0x1b8>)
   3f564:	f44f 7200 	mov.w	r2, #512	; 0x200
   3f568:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   3f56c:	f008 fe8f 	bl	4828e <nrf52_errata_136>
   3f570:	b148      	cbz	r0, 3f586 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   3f572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f576:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   3f57a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   3f57c:	bf44      	itt	mi
   3f57e:	f06f 0201 	mvnmi.w	r2, #1
   3f582:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3f58a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f58e:	2a08      	cmp	r2, #8
   3f590:	d10e      	bne.n	3f5b0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f592:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   3f596:	2b05      	cmp	r3, #5
   3f598:	d802      	bhi.n	3f5a0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   3f59a:	4a23      	ldr	r2, [pc, #140]	; (3f628 <SystemInit+0x1bc>)
   3f59c:	5cd3      	ldrb	r3, [r2, r3]
   3f59e:	b13b      	cbz	r3, 3f5b0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3f5a0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f5a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   3f5a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f5ac:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f5b0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f5b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3f5b8:	2a00      	cmp	r2, #0
   3f5ba:	db03      	blt.n	3f5c4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   3f5bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f5c0:	2b00      	cmp	r3, #0
   3f5c2:	da22      	bge.n	3f60a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f5c4:	4919      	ldr	r1, [pc, #100]	; (3f62c <SystemInit+0x1c0>)
   3f5c6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f5c8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f5cc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f5d0:	2412      	movs	r4, #18
    nvmc_wait();
   3f5d2:	f7ff ff43 	bl	3f45c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f5d6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   3f5da:	f7ff ff3f 	bl	3f45c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   3f5de:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   3f5e2:	f7ff ff3b 	bl	3f45c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f5e6:	2300      	movs	r3, #0
   3f5e8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   3f5ec:	f7ff ff36 	bl	3f45c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   3f5f0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   3f5f4:	490e      	ldr	r1, [pc, #56]	; (3f630 <SystemInit+0x1c4>)
   3f5f6:	4b0f      	ldr	r3, [pc, #60]	; (3f634 <SystemInit+0x1c8>)
   3f5f8:	68ca      	ldr	r2, [r1, #12]
   3f5fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   3f5fe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   3f600:	60cb      	str	r3, [r1, #12]
   3f602:	f3bf 8f4f 	dsb	sy
    __NOP();
   3f606:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   3f608:	e7fd      	b.n	3f606 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   3f60a:	4b0b      	ldr	r3, [pc, #44]	; (3f638 <SystemInit+0x1cc>)
   3f60c:	4a0b      	ldr	r2, [pc, #44]	; (3f63c <SystemInit+0x1d0>)
   3f60e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   3f610:	bd10      	pop	{r4, pc}
   3f612:	bf00      	nop
   3f614:	4000c000 	.word	0x4000c000
   3f618:	40005000 	.word	0x40005000
   3f61c:	00038148 	.word	0x00038148
   3f620:	4000f000 	.word	0x4000f000
   3f624:	40029000 	.word	0x40029000
   3f628:	0004b9a5 	.word	0x0004b9a5
   3f62c:	4001e000 	.word	0x4001e000
   3f630:	e000ed00 	.word	0xe000ed00
   3f634:	05fa0004 	.word	0x05fa0004
   3f638:	20000840 	.word	0x20000840
   3f63c:	03d09000 	.word	0x03d09000

0003f640 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   3f640:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f642:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3f644:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   3f646:	fab2 f382 	clz	r3, r2
   3f64a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   3f64e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   3f650:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   3f652:	d014      	beq.n	3f67e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3f654:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f658:	fa05 f303 	lsl.w	r3, r5, r3
   3f65c:	ea22 0303 	bic.w	r3, r2, r3
   3f660:	e850 6f00 	ldrex	r6, [r0]
   3f664:	4296      	cmp	r6, r2
   3f666:	d104      	bne.n	3f672 <nrfx_flag32_alloc+0x32>
   3f668:	e840 3c00 	strex	ip, r3, [r0]
   3f66c:	f1bc 0f00 	cmp.w	ip, #0
   3f670:	d1f6      	bne.n	3f660 <nrfx_flag32_alloc+0x20>
   3f672:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f676:	d1e5      	bne.n	3f644 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   3f678:	4802      	ldr	r0, [pc, #8]	; (3f684 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   3f67a:	700c      	strb	r4, [r1, #0]
}
   3f67c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   3f67e:	4802      	ldr	r0, [pc, #8]	; (3f688 <nrfx_flag32_alloc+0x48>)
   3f680:	e7fc      	b.n	3f67c <nrfx_flag32_alloc+0x3c>
   3f682:	bf00      	nop
   3f684:	0bad0000 	.word	0x0bad0000
   3f688:	0bad0002 	.word	0x0bad0002

0003f68c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3f68c:	6803      	ldr	r3, [r0, #0]
   3f68e:	40cb      	lsrs	r3, r1
   3f690:	07db      	lsls	r3, r3, #31
{
   3f692:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   3f694:	d415      	bmi.n	3f6c2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   3f696:	2301      	movs	r3, #1
   3f698:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   3f69c:	6803      	ldr	r3, [r0, #0]
   3f69e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   3f6a2:	ea41 0203 	orr.w	r2, r1, r3
   3f6a6:	e850 4f00 	ldrex	r4, [r0]
   3f6aa:	429c      	cmp	r4, r3
   3f6ac:	d104      	bne.n	3f6b8 <nrfx_flag32_free+0x2c>
   3f6ae:	e840 2c00 	strex	ip, r2, [r0]
   3f6b2:	f1bc 0f00 	cmp.w	ip, #0
   3f6b6:	d1f6      	bne.n	3f6a6 <nrfx_flag32_free+0x1a>
   3f6b8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f6bc:	d1ee      	bne.n	3f69c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   3f6be:	4802      	ldr	r0, [pc, #8]	; (3f6c8 <nrfx_flag32_free+0x3c>)
}
   3f6c0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f6c2:	4802      	ldr	r0, [pc, #8]	; (3f6cc <nrfx_flag32_free+0x40>)
   3f6c4:	e7fc      	b.n	3f6c0 <nrfx_flag32_free+0x34>
   3f6c6:	bf00      	nop
   3f6c8:	0bad0000 	.word	0x0bad0000
   3f6cc:	0bad0004 	.word	0x0bad0004

0003f6d0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3f6d0:	4b04      	ldr	r3, [pc, #16]	; (3f6e4 <nrfx_clock_init+0x14>)
   3f6d2:	791a      	ldrb	r2, [r3, #4]
   3f6d4:	b922      	cbnz	r2, 3f6e0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3f6d6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   3f6d8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   3f6da:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   3f6dc:	4802      	ldr	r0, [pc, #8]	; (3f6e8 <nrfx_clock_init+0x18>)
   3f6de:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3f6e0:	4802      	ldr	r0, [pc, #8]	; (3f6ec <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3f6e2:	4770      	bx	lr
   3f6e4:	200037a0 	.word	0x200037a0
   3f6e8:	0bad0000 	.word	0x0bad0000
   3f6ec:	0bad000c 	.word	0x0bad000c

0003f6f0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3f6f0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3f6f2:	2000      	movs	r0, #0
   3f6f4:	f7ea fe74 	bl	2a3e0 <arch_irq_is_enabled>
   3f6f8:	b908      	cbnz	r0, 3f6fe <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3f6fa:	f7ea fe4d 	bl	2a398 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   3f6fe:	4b02      	ldr	r3, [pc, #8]	; (3f708 <nrfx_clock_enable+0x18>)
   3f700:	2201      	movs	r2, #1
   3f702:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3f704:	bd08      	pop	{r3, pc}
   3f706:	bf00      	nop
   3f708:	20003c7a 	.word	0x20003c7a

0003f70c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   3f70c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   3f70e:	b110      	cbz	r0, 3f716 <nrfx_clock_stop+0xa>
   3f710:	2801      	cmp	r0, #1
   3f712:	d017      	beq.n	3f744 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3f714:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   3f716:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3f71a:	2302      	movs	r3, #2
   3f71c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f720:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   3f724:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f728:	2301      	movs	r3, #1
   3f72a:	60e3      	str	r3, [r4, #12]
   3f72c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3f730:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   3f734:	03db      	lsls	r3, r3, #15
   3f736:	d5ed      	bpl.n	3f714 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   3f738:	2001      	movs	r0, #1
   3f73a:	f008 fdb2 	bl	482a2 <nrfx_busy_wait>
   3f73e:	3d01      	subs	r5, #1
   3f740:	d1f6      	bne.n	3f730 <nrfx_clock_stop+0x24>
   3f742:	e7e7      	b.n	3f714 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   3f744:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f748:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   3f74a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f74e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   3f752:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f756:	6060      	str	r0, [r4, #4]
   3f758:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3f75c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3f760:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   3f764:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3f766:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3f76a:	d505      	bpl.n	3f778 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3f76c:	b123      	cbz	r3, 3f778 <nrfx_clock_stop+0x6c>
   3f76e:	2001      	movs	r0, #1
   3f770:	f008 fd97 	bl	482a2 <nrfx_busy_wait>
   3f774:	3d01      	subs	r5, #1
   3f776:	d1f1      	bne.n	3f75c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   3f778:	4b01      	ldr	r3, [pc, #4]	; (3f780 <nrfx_clock_stop+0x74>)
   3f77a:	2200      	movs	r2, #0
   3f77c:	715a      	strb	r2, [r3, #5]
   3f77e:	e7c9      	b.n	3f714 <nrfx_clock_stop+0x8>
   3f780:	200037a0 	.word	0x200037a0

0003f784 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3f784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3f788:	b510      	push	{r4, lr}
   3f78a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3f78e:	b16a      	cbz	r2, 3f7ac <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f790:	2200      	movs	r2, #0
   3f792:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3f796:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   3f79a:	2201      	movs	r2, #1
   3f79c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   3f7a0:	4b11      	ldr	r3, [pc, #68]	; (3f7e8 <nrfx_clock_irq_handler+0x64>)
   3f7a2:	7958      	ldrb	r0, [r3, #5]
   3f7a4:	b910      	cbnz	r0, 3f7ac <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   3f7a6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3f7a8:	681b      	ldr	r3, [r3, #0]
   3f7aa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3f7ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f7b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3f7b4:	b172      	cbz	r2, 3f7d4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f7b6:	2200      	movs	r2, #0
   3f7b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3f7bc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3f7c0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3f7c4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3f7c8:	0792      	lsls	r2, r2, #30
   3f7ca:	d104      	bne.n	3f7d6 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3f7cc:	2201      	movs	r2, #1
   3f7ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f7d2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3f7d4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3f7d6:	2202      	movs	r2, #2
   3f7d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f7dc:	4b02      	ldr	r3, [pc, #8]	; (3f7e8 <nrfx_clock_irq_handler+0x64>)
}
   3f7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f7e2:	681b      	ldr	r3, [r3, #0]
   3f7e4:	2001      	movs	r0, #1
   3f7e6:	4718      	bx	r3
   3f7e8:	200037a0 	.word	0x200037a0

0003f7ec <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   3f7ec:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   3f7ee:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   3f7f2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   3f7f4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   3f7f6:	6002      	str	r2, [r0, #0]
}
   3f7f8:	4802      	ldr	r0, [pc, #8]	; (3f804 <nrf_gpio_pin_port_decode+0x18>)
   3f7fa:	bf18      	it	ne
   3f7fc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   3f800:	4770      	bx	lr
   3f802:	bf00      	nop
   3f804:	50000300 	.word	0x50000300

0003f808 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   3f808:	4b03      	ldr	r3, [pc, #12]	; (3f818 <pin_in_use_by_te+0x10>)
   3f80a:	3008      	adds	r0, #8
   3f80c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   3f810:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3f814:	4770      	bx	lr
   3f816:	bf00      	nop
   3f818:	20000844 	.word	0x20000844

0003f81c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   3f81c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f81e:	f100 0308 	add.w	r3, r0, #8
   3f822:	4c0c      	ldr	r4, [pc, #48]	; (3f854 <call_handler+0x38>)
   3f824:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   3f828:	05da      	lsls	r2, r3, #23
{
   3f82a:	4605      	mov	r5, r0
   3f82c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f82e:	d507      	bpl.n	3f840 <call_handler+0x24>
   3f830:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   3f834:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3f838:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3f83c:	6852      	ldr	r2, [r2, #4]
   3f83e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   3f840:	68a3      	ldr	r3, [r4, #8]
   3f842:	b12b      	cbz	r3, 3f850 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f844:	68e2      	ldr	r2, [r4, #12]
   3f846:	4631      	mov	r1, r6
   3f848:	4628      	mov	r0, r5
    }
}
   3f84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f84e:	4718      	bx	r3
}
   3f850:	bd70      	pop	{r4, r5, r6, pc}
   3f852:	bf00      	nop
   3f854:	20000844 	.word	0x20000844

0003f858 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f858:	4a12      	ldr	r2, [pc, #72]	; (3f8a4 <release_handler+0x4c>)
   3f85a:	3008      	adds	r0, #8
{
   3f85c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f85e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   3f862:	05d9      	lsls	r1, r3, #23
   3f864:	d51b      	bpl.n	3f89e <release_handler+0x46>
   3f866:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3f86a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3f86e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f872:	f102 0410 	add.w	r4, r2, #16
   3f876:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3f878:	f834 3b02 	ldrh.w	r3, [r4], #2
   3f87c:	f413 7f80 	tst.w	r3, #256	; 0x100
   3f880:	d003      	beq.n	3f88a <release_handler+0x32>
   3f882:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3f886:	4299      	cmp	r1, r3
   3f888:	d009      	beq.n	3f89e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f88a:	3001      	adds	r0, #1
   3f88c:	2830      	cmp	r0, #48	; 0x30
   3f88e:	d1f3      	bne.n	3f878 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3f890:	2300      	movs	r3, #0
   3f892:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f896:	4804      	ldr	r0, [pc, #16]	; (3f8a8 <release_handler+0x50>)
}
   3f898:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f89a:	f7ff bef7 	b.w	3f68c <nrfx_flag32_free>
}
   3f89e:	bc10      	pop	{r4}
   3f8a0:	4770      	bx	lr
   3f8a2:	bf00      	nop
   3f8a4:	20000844 	.word	0x20000844
   3f8a8:	200008b8 	.word	0x200008b8

0003f8ac <pin_handler_trigger_uninit>:
{
   3f8ac:	b538      	push	{r3, r4, r5, lr}
   3f8ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3f8b0:	f7ff ffaa 	bl	3f808 <pin_in_use_by_te>
   3f8b4:	4c09      	ldr	r4, [pc, #36]	; (3f8dc <pin_handler_trigger_uninit+0x30>)
   3f8b6:	f102 0508 	add.w	r5, r2, #8
   3f8ba:	b140      	cbz	r0, 3f8ce <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f8bc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   3f8c0:	4907      	ldr	r1, [pc, #28]	; (3f8e0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   3f8c2:	0b5b      	lsrs	r3, r3, #13
   3f8c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   3f8c8:	2000      	movs	r0, #0
   3f8ca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   3f8ce:	4610      	mov	r0, r2
   3f8d0:	f7ff ffc2 	bl	3f858 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   3f8d4:	2300      	movs	r3, #0
   3f8d6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   3f8da:	bd38      	pop	{r3, r4, r5, pc}
   3f8dc:	20000844 	.word	0x20000844
   3f8e0:	40006000 	.word	0x40006000

0003f8e4 <nrfx_gpiote_input_configure>:
{
   3f8e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3f8e8:	4604      	mov	r4, r0
   3f8ea:	4617      	mov	r7, r2
   3f8ec:	461d      	mov	r5, r3
    if (p_input_config)
   3f8ee:	b321      	cbz	r1, 3f93a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f8f0:	4e4e      	ldr	r6, [pc, #312]	; (3fa2c <nrfx_gpiote_input_configure+0x148>)
   3f8f2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3f8f6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   3f8fa:	079b      	lsls	r3, r3, #30
   3f8fc:	d506      	bpl.n	3f90c <nrfx_gpiote_input_configure+0x28>
   3f8fe:	f7ff ff83 	bl	3f808 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   3f902:	b118      	cbz	r0, 3f90c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   3f904:	484a      	ldr	r0, [pc, #296]	; (3fa30 <nrfx_gpiote_input_configure+0x14c>)
}
   3f906:	b004      	add	sp, #16
   3f908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f90c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f90e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f912:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3f916:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f91a:	f10d 020f 	add.w	r2, sp, #15
   3f91e:	460b      	mov	r3, r1
   3f920:	4620      	mov	r0, r4
   3f922:	f10d 010e 	add.w	r1, sp, #14
   3f926:	f008 fcea 	bl	482fe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   3f92a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   3f92e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3f932:	f043 0301 	orr.w	r3, r3, #1
   3f936:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   3f93a:	b197      	cbz	r7, 3f962 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f93c:	4b3b      	ldr	r3, [pc, #236]	; (3fa2c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3f93e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3f940:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f942:	f104 0008 	add.w	r0, r4, #8
   3f946:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   3f94a:	078f      	lsls	r7, r1, #30
   3f94c:	d50c      	bpl.n	3f968 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   3f94e:	2a00      	cmp	r2, #0
   3f950:	d1d8      	bne.n	3f904 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3f952:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   3f956:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3f95a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   3f95e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   3f962:	bbcd      	cbnz	r5, 3f9d8 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   3f964:	4833      	ldr	r0, [pc, #204]	; (3fa34 <nrfx_gpiote_input_configure+0x150>)
   3f966:	e7ce      	b.n	3f906 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3f968:	f021 0120 	bic.w	r1, r1, #32
   3f96c:	04c9      	lsls	r1, r1, #19
   3f96e:	0cc9      	lsrs	r1, r1, #19
   3f970:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   3f974:	2a00      	cmp	r2, #0
   3f976:	d0ec      	beq.n	3f952 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   3f978:	2e03      	cmp	r6, #3
   3f97a:	d8c3      	bhi.n	3f904 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   3f97c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3f97e:	b92e      	cbnz	r6, 3f98c <nrfx_gpiote_input_configure+0xa8>
   3f980:	4a2d      	ldr	r2, [pc, #180]	; (3fa38 <nrfx_gpiote_input_configure+0x154>)
   3f982:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   3f986:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   3f98a:	e7e2      	b.n	3f952 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3f98c:	00ba      	lsls	r2, r7, #2
   3f98e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3f992:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3f996:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   3f99a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   3f99e:	f02c 0c03 	bic.w	ip, ip, #3
   3f9a2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3f9a6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   3f9aa:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   3f9ae:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   3f9b2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f9b6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   3f9ba:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   3f9be:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   3f9c2:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   3f9c6:	ea4c 0c0e 	orr.w	ip, ip, lr
   3f9ca:	f041 0120 	orr.w	r1, r1, #32
   3f9ce:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   3f9d2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   3f9d6:	e7bc      	b.n	3f952 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3f9d8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   3f9dc:	4620      	mov	r0, r4
   3f9de:	f7ff ff3b 	bl	3f858 <release_handler>
    if (!handler)
   3f9e2:	2e00      	cmp	r6, #0
   3f9e4:	d0be      	beq.n	3f964 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3f9e6:	4d11      	ldr	r5, [pc, #68]	; (3fa2c <nrfx_gpiote_input_configure+0x148>)
   3f9e8:	682b      	ldr	r3, [r5, #0]
   3f9ea:	429e      	cmp	r6, r3
   3f9ec:	d104      	bne.n	3f9f8 <nrfx_gpiote_input_configure+0x114>
   3f9ee:	686b      	ldr	r3, [r5, #4]
   3f9f0:	429f      	cmp	r7, r3
   3f9f2:	d101      	bne.n	3f9f8 <nrfx_gpiote_input_configure+0x114>
   3f9f4:	2200      	movs	r2, #0
   3f9f6:	e00a      	b.n	3fa0e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3f9f8:	4810      	ldr	r0, [pc, #64]	; (3fa3c <nrfx_gpiote_input_configure+0x158>)
   3f9fa:	f10d 010f 	add.w	r1, sp, #15
   3f9fe:	f7ff fe1f 	bl	3f640 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   3fa02:	4b0c      	ldr	r3, [pc, #48]	; (3fa34 <nrfx_gpiote_input_configure+0x150>)
   3fa04:	4298      	cmp	r0, r3
   3fa06:	f47f af7e 	bne.w	3f906 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   3fa0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   3fa0e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   3fa12:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3fa16:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   3fa18:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3fa1a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   3fa1e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   3fa22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3fa26:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   3fa2a:	e79b      	b.n	3f964 <nrfx_gpiote_input_configure+0x80>
   3fa2c:	20000844 	.word	0x20000844
   3fa30:	0bad0004 	.word	0x0bad0004
   3fa34:	0bad0000 	.word	0x0bad0000
   3fa38:	40006000 	.word	0x40006000
   3fa3c:	200008b8 	.word	0x200008b8

0003fa40 <nrfx_gpiote_output_configure>:
{
   3fa40:	b5f0      	push	{r4, r5, r6, r7, lr}
   3fa42:	4604      	mov	r4, r0
   3fa44:	b085      	sub	sp, #20
   3fa46:	4615      	mov	r5, r2
    if (p_config)
   3fa48:	b319      	cbz	r1, 3fa92 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fa4a:	4e33      	ldr	r6, [pc, #204]	; (3fb18 <nrfx_gpiote_output_configure+0xd8>)
   3fa4c:	f100 0708 	add.w	r7, r0, #8
   3fa50:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3fa54:	0793      	lsls	r3, r2, #30
   3fa56:	d403      	bmi.n	3fa60 <nrfx_gpiote_output_configure+0x20>
   3fa58:	f7ff fed6 	bl	3f808 <pin_in_use_by_te>
   3fa5c:	2800      	cmp	r0, #0
   3fa5e:	d158      	bne.n	3fb12 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   3fa60:	f012 0f1c 	tst.w	r2, #28
   3fa64:	d002      	beq.n	3fa6c <nrfx_gpiote_output_configure+0x2c>
   3fa66:	784b      	ldrb	r3, [r1, #1]
   3fa68:	2b01      	cmp	r3, #1
   3fa6a:	d052      	beq.n	3fb12 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   3fa6c:	2301      	movs	r3, #1
   3fa6e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3fa72:	2300      	movs	r3, #0
   3fa74:	e9cd 1300 	strd	r1, r3, [sp]
   3fa78:	1c4a      	adds	r2, r1, #1
   3fa7a:	1c8b      	adds	r3, r1, #2
   3fa7c:	4620      	mov	r0, r4
   3fa7e:	f10d 010f 	add.w	r1, sp, #15
   3fa82:	f008 fc3c 	bl	482fe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3fa86:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   3fa8a:	f043 0303 	orr.w	r3, r3, #3
   3fa8e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   3fa92:	b915      	cbnz	r5, 3fa9a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   3fa94:	4821      	ldr	r0, [pc, #132]	; (3fb1c <nrfx_gpiote_output_configure+0xdc>)
}
   3fa96:	b005      	add	sp, #20
   3fa98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fa9a:	4e1f      	ldr	r6, [pc, #124]	; (3fb18 <nrfx_gpiote_output_configure+0xd8>)
   3fa9c:	f104 0708 	add.w	r7, r4, #8
   3faa0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   3faa4:	0783      	lsls	r3, r0, #30
   3faa6:	d534      	bpl.n	3fb12 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   3faa8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   3faac:	4661      	mov	r1, ip
   3faae:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   3fab0:	f020 0020 	bic.w	r0, r0, #32
   3fab4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3fab8:	04c0      	lsls	r0, r0, #19
   3faba:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3fabe:	0cc0      	lsrs	r0, r0, #19
   3fac0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3fac4:	2300      	movs	r3, #0
   3fac6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   3faca:	786a      	ldrb	r2, [r5, #1]
   3facc:	2a00      	cmp	r2, #0
   3face:	d0e1      	beq.n	3fa94 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3fad0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   3fad4:	78ad      	ldrb	r5, [r5, #2]
   3fad6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   3fada:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3fade:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3fae2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   3fae6:	0223      	lsls	r3, r4, #8
   3fae8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3faec:	0412      	lsls	r2, r2, #16
   3faee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3faf2:	ea43 030e 	orr.w	r3, r3, lr
   3faf6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3faf8:	052a      	lsls	r2, r5, #20
   3fafa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3fafe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3fb02:	4313      	orrs	r3, r2
   3fb04:	f040 0020 	orr.w	r0, r0, #32
   3fb08:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3fb0c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   3fb10:	e7c0      	b.n	3fa94 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   3fb12:	4803      	ldr	r0, [pc, #12]	; (3fb20 <nrfx_gpiote_output_configure+0xe0>)
   3fb14:	e7bf      	b.n	3fa96 <nrfx_gpiote_output_configure+0x56>
   3fb16:	bf00      	nop
   3fb18:	20000844 	.word	0x20000844
   3fb1c:	0bad0000 	.word	0x0bad0000
   3fb20:	0bad0004 	.word	0x0bad0004

0003fb24 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   3fb24:	4b01      	ldr	r3, [pc, #4]	; (3fb2c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   3fb26:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3fb2a:	4770      	bx	lr
   3fb2c:	20000844 	.word	0x20000844

0003fb30 <nrfx_gpiote_channel_get>:
{
   3fb30:	b508      	push	{r3, lr}
   3fb32:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3fb34:	f7ff fe68 	bl	3f808 <pin_in_use_by_te>
   3fb38:	b138      	cbz	r0, 3fb4a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fb3a:	4b05      	ldr	r3, [pc, #20]	; (3fb50 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   3fb3c:	4805      	ldr	r0, [pc, #20]	; (3fb54 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fb3e:	3208      	adds	r2, #8
   3fb40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   3fb44:	0b5b      	lsrs	r3, r3, #13
   3fb46:	700b      	strb	r3, [r1, #0]
}
   3fb48:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3fb4a:	4803      	ldr	r0, [pc, #12]	; (3fb58 <nrfx_gpiote_channel_get+0x28>)
   3fb4c:	e7fc      	b.n	3fb48 <nrfx_gpiote_channel_get+0x18>
   3fb4e:	bf00      	nop
   3fb50:	20000844 	.word	0x20000844
   3fb54:	0bad0000 	.word	0x0bad0000
   3fb58:	0bad0004 	.word	0x0bad0004

0003fb5c <nrfx_gpiote_init>:
{
   3fb5c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   3fb5e:	4c0f      	ldr	r4, [pc, #60]	; (3fb9c <nrfx_gpiote_init+0x40>)
   3fb60:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   3fb64:	b9bd      	cbnz	r5, 3fb96 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   3fb66:	2260      	movs	r2, #96	; 0x60
   3fb68:	4629      	mov	r1, r5
   3fb6a:	f104 0010 	add.w	r0, r4, #16
   3fb6e:	f005 f9b2 	bl	44ed6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   3fb72:	2006      	movs	r0, #6
   3fb74:	f7ea fc10 	bl	2a398 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fb78:	4b09      	ldr	r3, [pc, #36]	; (3fba0 <nrfx_gpiote_init+0x44>)
    return err_code;
   3fb7a:	480a      	ldr	r0, [pc, #40]	; (3fba4 <nrfx_gpiote_init+0x48>)
   3fb7c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   3fb80:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   3fb84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3fb88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3fb8c:	2301      	movs	r3, #1
   3fb8e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   3fb92:	6763      	str	r3, [r4, #116]	; 0x74
}
   3fb94:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   3fb96:	4804      	ldr	r0, [pc, #16]	; (3fba8 <nrfx_gpiote_init+0x4c>)
   3fb98:	e7fc      	b.n	3fb94 <nrfx_gpiote_init+0x38>
   3fb9a:	bf00      	nop
   3fb9c:	20000844 	.word	0x20000844
   3fba0:	40006000 	.word	0x40006000
   3fba4:	0bad0000 	.word	0x0bad0000
   3fba8:	0bad0005 	.word	0x0bad0005

0003fbac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3fbac:	4b03      	ldr	r3, [pc, #12]	; (3fbbc <nrfx_gpiote_is_init+0x10>)
   3fbae:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   3fbb2:	3800      	subs	r0, #0
   3fbb4:	bf18      	it	ne
   3fbb6:	2001      	movne	r0, #1
   3fbb8:	4770      	bx	lr
   3fbba:	bf00      	nop
   3fbbc:	20000844 	.word	0x20000844

0003fbc0 <nrfx_gpiote_channel_free>:
{
   3fbc0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   3fbc2:	4801      	ldr	r0, [pc, #4]	; (3fbc8 <nrfx_gpiote_channel_free+0x8>)
   3fbc4:	f7ff bd62 	b.w	3f68c <nrfx_flag32_free>
   3fbc8:	200008b4 	.word	0x200008b4

0003fbcc <nrfx_gpiote_channel_alloc>:
{
   3fbcc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3fbce:	4801      	ldr	r0, [pc, #4]	; (3fbd4 <nrfx_gpiote_channel_alloc+0x8>)
   3fbd0:	f7ff bd36 	b.w	3f640 <nrfx_flag32_alloc>
   3fbd4:	200008b4 	.word	0x200008b4

0003fbd8 <nrfx_gpiote_trigger_enable>:
{
   3fbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fbda:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fbdc:	f7ff fe14 	bl	3f808 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fbe0:	f104 0208 	add.w	r2, r4, #8
   3fbe4:	4b1e      	ldr	r3, [pc, #120]	; (3fc60 <nrfx_gpiote_trigger_enable+0x88>)
   3fbe6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fbea:	b1e8      	cbz	r0, 3fc28 <nrfx_gpiote_trigger_enable+0x50>
   3fbec:	f013 0502 	ands.w	r5, r3, #2
   3fbf0:	d11a      	bne.n	3fc28 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fbf2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3fbf4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   3fbf6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   3fbfa:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   3fbfe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3fc02:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fc06:	6005      	str	r5, [r0, #0]
   3fc08:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   3fc0a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3fc0e:	f040 0001 	orr.w	r0, r0, #1
   3fc12:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   3fc16:	b129      	cbz	r1, 3fc24 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   3fc18:	2201      	movs	r2, #1
   3fc1a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   3fc1e:	4a11      	ldr	r2, [pc, #68]	; (3fc64 <nrfx_gpiote_trigger_enable+0x8c>)
   3fc20:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   3fc24:	b003      	add	sp, #12
   3fc26:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fc28:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   3fc2c:	2b04      	cmp	r3, #4
   3fc2e:	d012      	beq.n	3fc56 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   3fc30:	2b05      	cmp	r3, #5
   3fc32:	d012      	beq.n	3fc5a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fc34:	a801      	add	r0, sp, #4
   3fc36:	9401      	str	r4, [sp, #4]
   3fc38:	f7ff fdd8 	bl	3f7ec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3fc3c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3fc3e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3fc42:	40d9      	lsrs	r1, r3
   3fc44:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fc48:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3fc4a:	4620      	mov	r0, r4
}
   3fc4c:	b003      	add	sp, #12
   3fc4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3fc52:	f008 bb9b 	b.w	4838c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   3fc56:	2103      	movs	r1, #3
   3fc58:	e7f7      	b.n	3fc4a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   3fc5a:	2102      	movs	r1, #2
   3fc5c:	e7f5      	b.n	3fc4a <nrfx_gpiote_trigger_enable+0x72>
   3fc5e:	bf00      	nop
   3fc60:	20000844 	.word	0x20000844
   3fc64:	40006000 	.word	0x40006000

0003fc68 <nrfx_gpiote_trigger_disable>:
{
   3fc68:	b508      	push	{r3, lr}
   3fc6a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fc6c:	f7ff fdcc 	bl	3f808 <pin_in_use_by_te>
   3fc70:	b1c0      	cbz	r0, 3fca4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fc72:	f102 0108 	add.w	r1, r2, #8
   3fc76:	4b0e      	ldr	r3, [pc, #56]	; (3fcb0 <nrfx_gpiote_trigger_disable+0x48>)
   3fc78:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fc7c:	0799      	lsls	r1, r3, #30
   3fc7e:	d411      	bmi.n	3fca4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fc80:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   3fc82:	2201      	movs	r2, #1
   3fc84:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   3fc86:	009b      	lsls	r3, r3, #2
   3fc88:	490a      	ldr	r1, [pc, #40]	; (3fcb4 <nrfx_gpiote_trigger_disable+0x4c>)
   3fc8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fc8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fc92:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3fc96:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3fc9a:	f022 0203 	bic.w	r2, r2, #3
   3fc9e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   3fca2:	bd08      	pop	{r3, pc}
   3fca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fca8:	2100      	movs	r1, #0
   3fcaa:	4610      	mov	r0, r2
   3fcac:	f008 bb6e 	b.w	4838c <nrf_gpio_cfg_sense_set>
   3fcb0:	20000844 	.word	0x20000844
   3fcb4:	40006000 	.word	0x40006000

0003fcb8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3fcb8:	4b0e      	ldr	r3, [pc, #56]	; (3fcf4 <nrfx_gpiote_pin_uninit+0x3c>)
   3fcba:	f100 0208 	add.w	r2, r0, #8
{
   3fcbe:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3fcc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   3fcc4:	07db      	lsls	r3, r3, #31
{
   3fcc6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   3fcc8:	d511      	bpl.n	3fcee <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   3fcca:	f7ff ffcd 	bl	3fc68 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   3fcce:	4620      	mov	r0, r4
   3fcd0:	f7ff fdec 	bl	3f8ac <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fcd4:	a801      	add	r0, sp, #4
   3fcd6:	9401      	str	r4, [sp, #4]
   3fcd8:	f7ff fd88 	bl	3f7ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3fcdc:	9b01      	ldr	r3, [sp, #4]
   3fcde:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fce2:	2202      	movs	r2, #2
   3fce4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   3fce8:	4803      	ldr	r0, [pc, #12]	; (3fcf8 <nrfx_gpiote_pin_uninit+0x40>)
}
   3fcea:	b002      	add	sp, #8
   3fcec:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3fcee:	4803      	ldr	r0, [pc, #12]	; (3fcfc <nrfx_gpiote_pin_uninit+0x44>)
   3fcf0:	e7fb      	b.n	3fcea <nrfx_gpiote_pin_uninit+0x32>
   3fcf2:	bf00      	nop
   3fcf4:	20000844 	.word	0x20000844
   3fcf8:	0bad0000 	.word	0x0bad0000
   3fcfc:	0bad0004 	.word	0x0bad0004

0003fd00 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   3fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fd04:	4b64      	ldr	r3, [pc, #400]	; (3fe98 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   3fd06:	4865      	ldr	r0, [pc, #404]	; (3fe9c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fd08:	4965      	ldr	r1, [pc, #404]	; (3fea0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   3fd0a:	2600      	movs	r6, #0
{
   3fd0c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   3fd0e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fd10:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fd12:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   3fd14:	b135      	cbz	r5, 3fd24 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   3fd16:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   3fd1a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fd1c:	bf1e      	ittt	ne
   3fd1e:	601c      	strne	r4, [r3, #0]
   3fd20:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   3fd22:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fd24:	3304      	adds	r3, #4
   3fd26:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   3fd28:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fd2c:	d1f1      	bne.n	3fd12 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fd2e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 3fe9c <nrfx_gpiote_irq_handler+0x19c>
   3fd32:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   3fd36:	2b00      	cmp	r3, #0
   3fd38:	f000 8091 	beq.w	3fe5e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   3fd3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   3fd40:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   3fd44:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fd46:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fd4a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   3fd4e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   3fd50:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fd54:	2700      	movs	r7, #0
            while (latch[i])
   3fd56:	f10d 0910 	add.w	r9, sp, #16
   3fd5a:	017b      	lsls	r3, r7, #5
   3fd5c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   3fd5e:	f04f 0a01 	mov.w	sl, #1
   3fd62:	e049      	b.n	3fdf8 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   3fd64:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fd66:	4a4f      	ldr	r2, [pc, #316]	; (3fea4 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   3fd68:	fa94 f4a4 	rbit	r4, r4
   3fd6c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   3fd70:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fd72:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   3fd76:	08e0      	lsrs	r0, r4, #3
   3fd78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   3fd7c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   3fd7e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   3fd82:	fa0a fc02 	lsl.w	ip, sl, r2
   3fd86:	f819 2000 	ldrb.w	r2, [r9, r0]
   3fd8a:	ea22 020c 	bic.w	r2, r2, ip
   3fd8e:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fd92:	a803      	add	r0, sp, #12
   3fd94:	f3c3 0582 	ubfx	r5, r3, #2, #3
   3fd98:	0899      	lsrs	r1, r3, #2
   3fd9a:	f7ff fd27 	bl	3f7ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fd9e:	9a03      	ldr	r2, [sp, #12]
   3fda0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   3fda4:	074b      	lsls	r3, r1, #29
   3fda6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fdaa:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   3fdac:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   3fdb0:	d529      	bpl.n	3fe06 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   3fdb2:	4620      	mov	r0, r4
   3fdb4:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fdb6:	b2d5      	uxtb	r5, r2
   3fdb8:	f7ff fd30 	bl	3f81c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fdbc:	a803      	add	r0, sp, #12
   3fdbe:	9403      	str	r4, [sp, #12]
   3fdc0:	f7ff fd14 	bl	3f7ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fdc4:	9b03      	ldr	r3, [sp, #12]
   3fdc6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fdca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   3fdce:	f3c3 4301 	ubfx	r3, r3, #16, #2
   3fdd2:	429d      	cmp	r5, r3
   3fdd4:	d107      	bne.n	3fde6 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fdd6:	2100      	movs	r1, #0
   3fdd8:	4620      	mov	r0, r4
   3fdda:	f008 fad7 	bl	4838c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   3fdde:	4629      	mov	r1, r5
   3fde0:	4620      	mov	r0, r4
   3fde2:	f008 fad3 	bl	4838c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fde6:	a803      	add	r0, sp, #12
   3fde8:	9403      	str	r4, [sp, #12]
   3fdea:	f7ff fcff 	bl	3f7ec <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   3fdee:	9b03      	ldr	r3, [sp, #12]
   3fdf0:	fa0a f303 	lsl.w	r3, sl, r3
   3fdf4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   3fdf8:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   3fdfc:	2c00      	cmp	r4, #0
   3fdfe:	d1b1      	bne.n	3fd64 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fe00:	b9cf      	cbnz	r7, 3fe36 <nrfx_gpiote_irq_handler+0x136>
   3fe02:	2701      	movs	r7, #1
   3fe04:	e7a9      	b.n	3fd5a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fe06:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fe08:	bf0c      	ite	eq
   3fe0a:	2103      	moveq	r1, #3
   3fe0c:	2102      	movne	r1, #2
   3fe0e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fe10:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fe12:	f008 fabb 	bl	4838c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3fe16:	2d03      	cmp	r5, #3
   3fe18:	d004      	beq.n	3fe24 <nrfx_gpiote_irq_handler+0x124>
   3fe1a:	9a01      	ldr	r2, [sp, #4]
   3fe1c:	2a02      	cmp	r2, #2
   3fe1e:	d106      	bne.n	3fe2e <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3fe20:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3fe22:	d1e0      	bne.n	3fde6 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   3fe24:	4659      	mov	r1, fp
   3fe26:	4620      	mov	r0, r4
   3fe28:	f7ff fcf8 	bl	3f81c <call_handler>
   3fe2c:	e7db      	b.n	3fde6 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3fe2e:	2a03      	cmp	r2, #3
   3fe30:	d1d9      	bne.n	3fde6 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3fe32:	2d02      	cmp	r5, #2
   3fe34:	e7f5      	b.n	3fe22 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fe36:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   3fe3a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   3fe3e:	491a      	ldr	r1, [pc, #104]	; (3fea8 <nrfx_gpiote_irq_handler+0x1a8>)
   3fe40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   3fe44:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   3fe48:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fe4a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fe4e:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   3fe52:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   3fe54:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   3fe58:	4313      	orrs	r3, r2
   3fe5a:	f47f af7b 	bne.w	3fd54 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3fe5e:	2401      	movs	r4, #1
    while (mask)
   3fe60:	b916      	cbnz	r6, 3fe68 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   3fe62:	b007      	add	sp, #28
   3fe64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   3fe68:	fa96 f3a6 	rbit	r3, r6
   3fe6c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   3fe70:	fa04 f203 	lsl.w	r2, r4, r3
   3fe74:	009b      	lsls	r3, r3, #2
   3fe76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fe7a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fe7e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   3fe82:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   3fe86:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3fe8a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3fe8e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   3fe92:	f7ff fcc3 	bl	3f81c <call_handler>
   3fe96:	e7e3      	b.n	3fe60 <nrfx_gpiote_irq_handler+0x160>
   3fe98:	40006100 	.word	0x40006100
   3fe9c:	40006000 	.word	0x40006000
   3fea0:	40006120 	.word	0x40006120
   3fea4:	20000844 	.word	0x20000844
   3fea8:	50000300 	.word	0x50000300

0003feac <nvmc_word_write>:
   3feac:	4a04      	ldr	r2, [pc, #16]	; (3fec0 <nvmc_word_write+0x14>)
   3feae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3feb2:	07db      	lsls	r3, r3, #31
   3feb4:	d5fb      	bpl.n	3feae <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3feb6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3feb8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3febc:	4770      	bx	lr
   3febe:	bf00      	nop
   3fec0:	4001e000 	.word	0x4001e000

0003fec4 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   3fec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3fec8:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   3feca:	fbb0 f3f2 	udiv	r3, r0, r2
   3fece:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   3fed2:	b973      	cbnz	r3, 3fef2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   3fed4:	4b08      	ldr	r3, [pc, #32]	; (3fef8 <nrfx_nvmc_page_erase+0x34>)
   3fed6:	2202      	movs	r2, #2
   3fed8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   3fedc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3fee0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3fee4:	07d2      	lsls	r2, r2, #31
   3fee6:	d5fb      	bpl.n	3fee0 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   3fee8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3feea:	4804      	ldr	r0, [pc, #16]	; (3fefc <nrfx_nvmc_page_erase+0x38>)
   3feec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3fef0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   3fef2:	4803      	ldr	r0, [pc, #12]	; (3ff00 <nrfx_nvmc_page_erase+0x3c>)
}
   3fef4:	4770      	bx	lr
   3fef6:	bf00      	nop
   3fef8:	4001e000 	.word	0x4001e000
   3fefc:	0bad0000 	.word	0x0bad0000
   3ff00:	0bad000a 	.word	0x0bad000a

0003ff04 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3ff04:	b510      	push	{r4, lr}
   3ff06:	4c05      	ldr	r4, [pc, #20]	; (3ff1c <nrfx_nvmc_word_write+0x18>)
   3ff08:	2301      	movs	r3, #1
   3ff0a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3ff0e:	f7ff ffcd 	bl	3feac <nvmc_word_write>
   3ff12:	2300      	movs	r3, #0
   3ff14:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   3ff18:	bd10      	pop	{r4, pc}
   3ff1a:	bf00      	nop
   3ff1c:	4001e000 	.word	0x4001e000

0003ff20 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   3ff20:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   3ff22:	4c18      	ldr	r4, [pc, #96]	; (3ff84 <nrfx_power_init+0x64>)
   3ff24:	7823      	ldrb	r3, [r4, #0]
   3ff26:	bb53      	cbnz	r3, 3ff7e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   3ff28:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   3ff2a:	0791      	lsls	r1, r2, #30
   3ff2c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   3ff30:	d511      	bpl.n	3ff56 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3ff32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3ff36:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   3ff3a:	2908      	cmp	r1, #8
   3ff3c:	d11d      	bne.n	3ff7a <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3ff3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3ff42:	2b05      	cmp	r3, #5
   3ff44:	d819      	bhi.n	3ff7a <nrfx_power_init+0x5a>
   3ff46:	4910      	ldr	r1, [pc, #64]	; (3ff88 <nrfx_power_init+0x68>)
   3ff48:	5cc9      	ldrb	r1, [r1, r3]
   3ff4a:	2301      	movs	r3, #1
   3ff4c:	b119      	cbz	r1, 3ff56 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   3ff4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3ff52:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3ff56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3ff5a:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3ff5e:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3ff62:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3ff64:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   3ff68:	f7ea fa3a 	bl	2a3e0 <arch_irq_is_enabled>
   3ff6c:	b908      	cbnz	r0, 3ff72 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3ff6e:	f7ea fa13 	bl	2a398 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   3ff72:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   3ff74:	4805      	ldr	r0, [pc, #20]	; (3ff8c <nrfx_power_init+0x6c>)
    m_initialized = true;
   3ff76:	7023      	strb	r3, [r4, #0]
}
   3ff78:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3ff7a:	2301      	movs	r3, #1
   3ff7c:	e7eb      	b.n	3ff56 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   3ff7e:	4804      	ldr	r0, [pc, #16]	; (3ff90 <nrfx_power_init+0x70>)
   3ff80:	e7fa      	b.n	3ff78 <nrfx_power_init+0x58>
   3ff82:	bf00      	nop
   3ff84:	20003c7b 	.word	0x20003c7b
   3ff88:	0004b9b1 	.word	0x0004b9b1
   3ff8c:	0bad0000 	.word	0x0bad0000
   3ff90:	0bad000c 	.word	0x0bad000c

0003ff94 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   3ff94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3ff98:	f44f 7260 	mov.w	r2, #896	; 0x380
   3ff9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   3ffa0:	4b01      	ldr	r3, [pc, #4]	; (3ffa8 <nrfx_power_usbevt_uninit+0x14>)
   3ffa2:	2200      	movs	r2, #0
   3ffa4:	601a      	str	r2, [r3, #0]
}
   3ffa6:	4770      	bx	lr
   3ffa8:	200037b0 	.word	0x200037b0

0003ffac <nrfx_power_usbevt_init>:
{
   3ffac:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   3ffae:	f7ff fff1 	bl	3ff94 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   3ffb2:	6803      	ldr	r3, [r0, #0]
   3ffb4:	b10b      	cbz	r3, 3ffba <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   3ffb6:	4a01      	ldr	r2, [pc, #4]	; (3ffbc <nrfx_power_usbevt_init+0x10>)
   3ffb8:	6013      	str	r3, [r2, #0]
}
   3ffba:	bd08      	pop	{r3, pc}
   3ffbc:	200037b0 	.word	0x200037b0

0003ffc0 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   3ffc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   3ffc4:	b510      	push	{r4, lr}
   3ffc6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3ffca:	0762      	lsls	r2, r4, #29
   3ffcc:	d507      	bpl.n	3ffde <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   3ffce:	f44f 7084 	mov.w	r0, #264	; 0x108
   3ffd2:	f008 f9f8 	bl	483c6 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3ffd6:	b110      	cbz	r0, 3ffde <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   3ffd8:	4b1e      	ldr	r3, [pc, #120]	; (40054 <nrfx_power_irq_handler+0x94>)
   3ffda:	681b      	ldr	r3, [r3, #0]
   3ffdc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3ffde:	06a3      	lsls	r3, r4, #26
   3ffe0:	d508      	bpl.n	3fff4 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   3ffe2:	f44f 708a 	mov.w	r0, #276	; 0x114
   3ffe6:	f008 f9ee 	bl	483c6 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3ffea:	b118      	cbz	r0, 3fff4 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   3ffec:	4b1a      	ldr	r3, [pc, #104]	; (40058 <nrfx_power_irq_handler+0x98>)
   3ffee:	2000      	movs	r0, #0
   3fff0:	681b      	ldr	r3, [r3, #0]
   3fff2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3fff4:	0660      	lsls	r0, r4, #25
   3fff6:	d508      	bpl.n	4000a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   3fff8:	f44f 708c 	mov.w	r0, #280	; 0x118
   3fffc:	f008 f9e3 	bl	483c6 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   40000:	b118      	cbz	r0, 4000a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   40002:	4b15      	ldr	r3, [pc, #84]	; (40058 <nrfx_power_irq_handler+0x98>)
   40004:	2001      	movs	r0, #1
   40006:	681b      	ldr	r3, [r3, #0]
   40008:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   4000a:	0621      	lsls	r1, r4, #24
   4000c:	d508      	bpl.n	40020 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   4000e:	f44f 708e 	mov.w	r0, #284	; 0x11c
   40012:	f008 f9d8 	bl	483c6 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   40016:	b118      	cbz	r0, 40020 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   40018:	4b10      	ldr	r3, [pc, #64]	; (4005c <nrfx_power_irq_handler+0x9c>)
   4001a:	2000      	movs	r0, #0
   4001c:	681b      	ldr	r3, [r3, #0]
   4001e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   40020:	05e2      	lsls	r2, r4, #23
   40022:	d508      	bpl.n	40036 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   40024:	f44f 7090 	mov.w	r0, #288	; 0x120
   40028:	f008 f9cd 	bl	483c6 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   4002c:	b118      	cbz	r0, 40036 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   4002e:	4b0b      	ldr	r3, [pc, #44]	; (4005c <nrfx_power_irq_handler+0x9c>)
   40030:	2001      	movs	r0, #1
   40032:	681b      	ldr	r3, [r3, #0]
   40034:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   40036:	05a3      	lsls	r3, r4, #22
   40038:	d50a      	bpl.n	40050 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   4003a:	f44f 7092 	mov.w	r0, #292	; 0x124
   4003e:	f008 f9c2 	bl	483c6 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   40042:	b128      	cbz	r0, 40050 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   40044:	4b05      	ldr	r3, [pc, #20]	; (4005c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   40046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   4004a:	681b      	ldr	r3, [r3, #0]
   4004c:	2002      	movs	r0, #2
   4004e:	4718      	bx	r3
}
   40050:	bd10      	pop	{r4, pc}
   40052:	bf00      	nop
   40054:	200037a8 	.word	0x200037a8
   40058:	200037ac 	.word	0x200037ac
   4005c:	200037b0 	.word	0x200037b0

00040060 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   40060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   40064:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   40068:	2a08      	cmp	r2, #8
   4006a:	d106      	bne.n	4007a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   4006c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   40070:	2b05      	cmp	r3, #5
   40072:	d804      	bhi.n	4007e <nrf52_errata_187+0x1e>
   40074:	4a03      	ldr	r2, [pc, #12]	; (40084 <nrf52_errata_187+0x24>)
   40076:	5cd0      	ldrb	r0, [r2, r3]
   40078:	4770      	bx	lr
        return false;
   4007a:	2000      	movs	r0, #0
   4007c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   4007e:	2001      	movs	r0, #1
}
   40080:	4770      	bx	lr
   40082:	bf00      	nop
   40084:	0004b9b7 	.word	0x0004b9b7

00040088 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   40088:	4b05      	ldr	r3, [pc, #20]	; (400a0 <ep_state_access+0x18>)
   4008a:	f010 0f80 	tst.w	r0, #128	; 0x80
   4008e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   40092:	bf08      	it	eq
   40094:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   40096:	f000 000f 	and.w	r0, r0, #15
}
   4009a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   4009e:	4770      	bx	lr
   400a0:	20003924 	.word	0x20003924

000400a4 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   400a4:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   400a6:	f008 f9af 	bl	48408 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   400aa:	b118      	cbz	r0, 400b4 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   400ac:	4b03      	ldr	r3, [pc, #12]	; (400bc <usbd_dma_pending_clear+0x18>)
   400ae:	2200      	movs	r2, #0
   400b0:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   400b4:	4b02      	ldr	r3, [pc, #8]	; (400c0 <usbd_dma_pending_clear+0x1c>)
   400b6:	2200      	movs	r2, #0
   400b8:	701a      	strb	r2, [r3, #0]
}
   400ba:	bd08      	pop	{r3, pc}
   400bc:	40027000 	.word	0x40027000
   400c0:	20003c7d 	.word	0x20003c7d

000400c4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   400c4:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   400c6:	4a09      	ldr	r2, [pc, #36]	; (400ec <ev_usbreset_handler+0x28>)
   400c8:	2300      	movs	r3, #0
   400ca:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   400cc:	4a08      	ldr	r2, [pc, #32]	; (400f0 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   400ce:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   400d2:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   400d4:	f88d 3007 	strb.w	r3, [sp, #7]
   400d8:	2301      	movs	r3, #1
   400da:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   400de:	4b05      	ldr	r3, [pc, #20]	; (400f4 <ev_usbreset_handler+0x30>)
   400e0:	a801      	add	r0, sp, #4
   400e2:	681b      	ldr	r3, [r3, #0]
   400e4:	4798      	blx	r3
}
   400e6:	b003      	add	sp, #12
   400e8:	f85d fb04 	ldr.w	pc, [sp], #4
   400ec:	20003c7c 	.word	0x20003c7c
   400f0:	20003c7f 	.word	0x20003c7f
   400f4:	200039b4 	.word	0x200039b4

000400f8 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   400f8:	4b21      	ldr	r3, [pc, #132]	; (40180 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   400fa:	b513      	push	{r0, r1, r4, lr}
   400fc:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   40100:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   40104:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   40106:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   4010a:	d50e      	bpl.n	4012a <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   4010c:	4b1d      	ldr	r3, [pc, #116]	; (40184 <ev_usbevent_handler+0x8c>)
   4010e:	2201      	movs	r2, #1
   40110:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   40112:	2300      	movs	r3, #0
   40114:	f8ad 3005 	strh.w	r3, [sp, #5]
   40118:	f88d 3007 	strb.w	r3, [sp, #7]
   4011c:	2302      	movs	r3, #2
   4011e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   40122:	4b19      	ldr	r3, [pc, #100]	; (40188 <ev_usbevent_handler+0x90>)
   40124:	a801      	add	r0, sp, #4
   40126:	681b      	ldr	r3, [r3, #0]
   40128:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   4012a:	05a2      	lsls	r2, r4, #22
   4012c:	d50d      	bpl.n	4014a <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   4012e:	4a15      	ldr	r2, [pc, #84]	; (40184 <ev_usbevent_handler+0x8c>)
   40130:	2300      	movs	r3, #0
   40132:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   40134:	f8ad 3005 	strh.w	r3, [sp, #5]
   40138:	f88d 3007 	strb.w	r3, [sp, #7]
   4013c:	2303      	movs	r3, #3
   4013e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   40142:	4b11      	ldr	r3, [pc, #68]	; (40188 <ev_usbevent_handler+0x90>)
   40144:	a801      	add	r0, sp, #4
   40146:	681b      	ldr	r3, [r3, #0]
   40148:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   4014a:	0563      	lsls	r3, r4, #21
   4014c:	d515      	bpl.n	4017a <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   4014e:	4a0d      	ldr	r2, [pc, #52]	; (40184 <ev_usbevent_handler+0x8c>)
   40150:	7813      	ldrb	r3, [r2, #0]
   40152:	b193      	cbz	r3, 4017a <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   40154:	2300      	movs	r3, #0
   40156:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   40158:	4a09      	ldr	r2, [pc, #36]	; (40180 <ev_usbevent_handler+0x88>)
   4015a:	2101      	movs	r1, #1
   4015c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40160:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40162:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   40164:	f8ad 3005 	strh.w	r3, [sp, #5]
   40168:	f88d 3007 	strb.w	r3, [sp, #7]
   4016c:	2304      	movs	r3, #4
   4016e:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   40172:	4b05      	ldr	r3, [pc, #20]	; (40188 <ev_usbevent_handler+0x90>)
   40174:	a801      	add	r0, sp, #4
   40176:	681b      	ldr	r3, [r3, #0]
   40178:	4798      	blx	r3
        }
    }
}
   4017a:	b002      	add	sp, #8
   4017c:	bd10      	pop	{r4, pc}
   4017e:	bf00      	nop
   40180:	40027000 	.word	0x40027000
   40184:	20003c7c 	.word	0x20003c7c
   40188:	200039b4 	.word	0x200039b4

0004018c <usbd_errata_187_211_begin>:
	__asm__ volatile(
   4018c:	f04f 0320 	mov.w	r3, #32
   40190:	f3ef 8011 	mrs	r0, BASEPRI
   40194:	f383 8812 	msr	BASEPRI_MAX, r3
   40198:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   4019c:	4b0a      	ldr	r3, [pc, #40]	; (401c8 <usbd_errata_187_211_begin+0x3c>)
   4019e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   401a2:	2203      	movs	r2, #3
   401a4:	b961      	cbnz	r1, 401c0 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401a6:	f249 3175 	movw	r1, #37749	; 0x9375
   401aa:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   401ae:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401b2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   401b6:	f380 8811 	msr	BASEPRI, r0
   401ba:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   401be:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   401c0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   401c4:	e7f7      	b.n	401b6 <usbd_errata_187_211_begin+0x2a>
   401c6:	bf00      	nop
   401c8:	4006e000 	.word	0x4006e000

000401cc <usbd_errata_187_211_end>:
	__asm__ volatile(
   401cc:	f04f 0320 	mov.w	r3, #32
   401d0:	f3ef 8011 	mrs	r0, BASEPRI
   401d4:	f383 8812 	msr	BASEPRI_MAX, r3
   401d8:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   401dc:	4b0a      	ldr	r3, [pc, #40]	; (40208 <usbd_errata_187_211_end+0x3c>)
   401de:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   401e2:	b961      	cbnz	r1, 401fe <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401e4:	f249 3275 	movw	r2, #37749	; 0x9375
   401e8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   401ec:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   401f4:	f380 8811 	msr	BASEPRI, r0
   401f8:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   401fc:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   401fe:	2200      	movs	r2, #0
   40200:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   40204:	e7f6      	b.n	401f4 <usbd_errata_187_211_end+0x28>
   40206:	bf00      	nop
   40208:	4006e000 	.word	0x4006e000

0004020c <nrfx_usbd_feeder_flash>:
{
   4020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   4020e:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   40210:	4f0b      	ldr	r7, [pc, #44]	; (40240 <nrfx_usbd_feeder_flash+0x34>)
   40212:	4295      	cmp	r5, r2
   40214:	bf28      	it	cs
   40216:	4615      	movcs	r5, r2
{
   40218:	460c      	mov	r4, r1
   4021a:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   4021c:	462a      	mov	r2, r5
   4021e:	6809      	ldr	r1, [r1, #0]
   40220:	4638      	mov	r0, r7
   40222:	f004 fe4d 	bl	44ec0 <memcpy>
    p_transfer->size -= tx_size;
   40226:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   40228:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   4022a:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   4022c:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   40230:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   40232:	6060      	str	r0, [r4, #4]
}
   40234:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   40236:	6022      	str	r2, [r4, #0]
}
   40238:	bf18      	it	ne
   4023a:	2001      	movne	r0, #1
   4023c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4023e:	bf00      	nop
   40240:	200039b8 	.word	0x200039b8

00040244 <nrfx_usbd_feeder_flash_zlp>:
{
   40244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   40246:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   40248:	4294      	cmp	r4, r2
   4024a:	bf28      	it	cs
   4024c:	4614      	movcs	r4, r2
{
   4024e:	4606      	mov	r6, r0
   40250:	460d      	mov	r5, r1
    if (tx_size != 0)
   40252:	b18c      	cbz	r4, 40278 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   40254:	4f09      	ldr	r7, [pc, #36]	; (4027c <nrfx_usbd_feeder_flash_zlp+0x38>)
   40256:	6809      	ldr	r1, [r1, #0]
   40258:	4622      	mov	r2, r4
   4025a:	4638      	mov	r0, r7
   4025c:	f004 fe30 	bl	44ec0 <memcpy>
        p_next->p_data.tx = p_buffer;
   40260:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   40262:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   40264:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   40266:	1b1b      	subs	r3, r3, r4
   40268:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   4026a:	682b      	ldr	r3, [r5, #0]
}
   4026c:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   4026e:	4423      	add	r3, r4
   40270:	602b      	str	r3, [r5, #0]
}
   40272:	bf18      	it	ne
   40274:	2001      	movne	r0, #1
   40276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   40278:	6004      	str	r4, [r0, #0]
   4027a:	e7f2      	b.n	40262 <nrfx_usbd_feeder_flash_zlp+0x1e>
   4027c:	200039b8 	.word	0x200039b8

00040280 <ev_sof_handler>:
{
   40280:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   40282:	2300      	movs	r3, #0
   40284:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   40288:	4b0b      	ldr	r3, [pc, #44]	; (402b8 <ev_sof_handler+0x38>)
   4028a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   4028e:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   40292:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   40296:	4a09      	ldr	r2, [pc, #36]	; (402bc <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   40298:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   4029a:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   4029c:	bf0c      	ite	eq
   4029e:	f44f 7180 	moveq.w	r1, #256	; 0x100
   402a2:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   402a6:	430b      	orrs	r3, r1
   402a8:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   402aa:	4b05      	ldr	r3, [pc, #20]	; (402c0 <ev_sof_handler+0x40>)
   402ac:	a801      	add	r0, sp, #4
   402ae:	681b      	ldr	r3, [r3, #0]
   402b0:	4798      	blx	r3
}
   402b2:	b003      	add	sp, #12
   402b4:	f85d fb04 	ldr.w	pc, [sp], #4
   402b8:	40027000 	.word	0x40027000
   402bc:	20003890 	.word	0x20003890
   402c0:	200039b4 	.word	0x200039b4

000402c4 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   402c4:	4b06      	ldr	r3, [pc, #24]	; (402e0 <atomic_and.constprop.0.isra.0+0x1c>)
   402c6:	f3bf 8f5b 	dmb	ish
   402ca:	e853 2f00 	ldrex	r2, [r3]
   402ce:	4002      	ands	r2, r0
   402d0:	e843 2100 	strex	r1, r2, [r3]
   402d4:	2900      	cmp	r1, #0
   402d6:	d1f8      	bne.n	402ca <atomic_and.constprop.0.isra.0+0x6>
   402d8:	f3bf 8f5b 	dmb	ish
}
   402dc:	4770      	bx	lr
   402de:	bf00      	nop
   402e0:	20003820 	.word	0x20003820

000402e4 <nrf_usbd_ep0in_dma_handler>:
{
   402e4:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   402e6:	f7ff fedd 	bl	400a4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   402ea:	4b08      	ldr	r3, [pc, #32]	; (4030c <nrf_usbd_ep0in_dma_handler+0x28>)
   402ec:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   402f0:	2a03      	cmp	r2, #3
   402f2:	d105      	bne.n	40300 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   402f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   402f8:	f06f 0001 	mvn.w	r0, #1
   402fc:	f7ff bfe2 	b.w	402c4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   40300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   40304:	2b00      	cmp	r3, #0
   40306:	d0f5      	beq.n	402f4 <nrf_usbd_ep0in_dma_handler+0x10>
}
   40308:	bd08      	pop	{r3, pc}
   4030a:	bf00      	nop
   4030c:	20003894 	.word	0x20003894

00040310 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   40310:	2201      	movs	r2, #1
{
   40312:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   40314:	fa02 f501 	lsl.w	r5, r2, r1
   40318:	491c      	ldr	r1, [pc, #112]	; (4038c <usbd_ep_data_handler+0x7c>)
   4031a:	4e1d      	ldr	r6, [pc, #116]	; (40390 <usbd_ep_data_handler+0x80>)
   4031c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   4031e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   40322:	ea43 0305 	orr.w	r3, r3, r5
{
   40326:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   40328:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   4032a:	d024      	beq.n	40376 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   4032c:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   40330:	4b18      	ldr	r3, [pc, #96]	; (40394 <usbd_ep_data_handler+0x84>)
   40332:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   40336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4033a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4033e:	681a      	ldr	r2, [r3, #0]
    if (ret)
   40340:	b132      	cbz	r2, 40350 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   40342:	2200      	movs	r2, #0
   40344:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   40346:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   40348:	681b      	ldr	r3, [r3, #0]
   4034a:	d011      	beq.n	40370 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   4034c:	f008 f8ac 	bl	484a8 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   40350:	6831      	ldr	r1, [r6, #0]
   40352:	4029      	ands	r1, r5
   40354:	d10a      	bne.n	4036c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40356:	2306      	movs	r3, #6
   40358:	f88d 3004 	strb.w	r3, [sp, #4]
   4035c:	f88d 4006 	strb.w	r4, [sp, #6]
   40360:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   40364:	4b0c      	ldr	r3, [pc, #48]	; (40398 <usbd_ep_data_handler+0x88>)
   40366:	a801      	add	r0, sp, #4
   40368:	681b      	ldr	r3, [r3, #0]
   4036a:	4798      	blx	r3
}
   4036c:	b002      	add	sp, #8
   4036e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   40370:	f7ff ffb8 	bl	402e4 <nrf_usbd_ep0in_dma_handler>
   40374:	e7ec      	b.n	40350 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   40376:	6833      	ldr	r3, [r6, #0]
   40378:	421d      	tst	r5, r3
   4037a:	d1f7      	bne.n	4036c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   4037c:	2306      	movs	r3, #6
   4037e:	f88d 3004 	strb.w	r3, [sp, #4]
   40382:	f88d 0006 	strb.w	r0, [sp, #6]
   40386:	f88d 2007 	strb.w	r2, [sp, #7]
   4038a:	e7eb      	b.n	40364 <usbd_ep_data_handler+0x54>
   4038c:	20003890 	.word	0x20003890
   40390:	20003820 	.word	0x20003820
   40394:	0004b388 	.word	0x0004b388
   40398:	200039b4 	.word	0x200039b4

0004039c <ev_setup_data_handler>:
{
   4039c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   4039e:	4b05      	ldr	r3, [pc, #20]	; (403b4 <ev_setup_data_handler+0x18>)
   403a0:	781a      	ldrb	r2, [r3, #0]
   403a2:	4610      	mov	r0, r2
   403a4:	f008 f876 	bl	48494 <ep2bit>
}
   403a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   403ac:	4601      	mov	r1, r0
   403ae:	4610      	mov	r0, r2
   403b0:	f7ff bfae 	b.w	40310 <usbd_ep_data_handler>
   403b4:	20003c7f 	.word	0x20003c7f

000403b8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   403b8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   403ba:	f7ff fe73 	bl	400a4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   403be:	4b0c      	ldr	r3, [pc, #48]	; (403f0 <ev_dma_epout8_handler+0x38>)
   403c0:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   403c4:	2a03      	cmp	r2, #3
   403c6:	d010      	beq.n	403ea <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   403c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   403cc:	b96b      	cbnz	r3, 403ea <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   403ce:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   403d2:	f7ff ff77 	bl	402c4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   403d6:	2306      	movs	r3, #6
   403d8:	f88d 3004 	strb.w	r3, [sp, #4]
   403dc:	2308      	movs	r3, #8
   403de:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   403e2:	4b04      	ldr	r3, [pc, #16]	; (403f4 <ev_dma_epout8_handler+0x3c>)
   403e4:	a801      	add	r0, sp, #4
   403e6:	681b      	ldr	r3, [r3, #0]
   403e8:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   403ea:	b003      	add	sp, #12
   403ec:	f85d fb04 	ldr.w	pc, [sp], #4
   403f0:	20003894 	.word	0x20003894
   403f4:	200039b4 	.word	0x200039b4

000403f8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   403f8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   403fa:	f7ff fe53 	bl	400a4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   403fe:	4b10      	ldr	r3, [pc, #64]	; (40440 <ev_dma_epin8_handler+0x48>)
   40400:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   40404:	2a03      	cmp	r2, #3
   40406:	d106      	bne.n	40416 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40408:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   4040c:	b003      	add	sp, #12
   4040e:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40412:	f7ff bf57 	b.w	402c4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   40416:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   4041a:	b96b      	cbnz	r3, 40438 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4041c:	f46f 7080 	mvn.w	r0, #256	; 0x100
   40420:	f7ff ff50 	bl	402c4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40424:	2306      	movs	r3, #6
   40426:	f88d 3004 	strb.w	r3, [sp, #4]
   4042a:	2388      	movs	r3, #136	; 0x88
   4042c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   40430:	4b04      	ldr	r3, [pc, #16]	; (40444 <ev_dma_epin8_handler+0x4c>)
   40432:	a801      	add	r0, sp, #4
   40434:	681b      	ldr	r3, [r3, #0]
   40436:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   40438:	b003      	add	sp, #12
   4043a:	f85d fb04 	ldr.w	pc, [sp], #4
   4043e:	bf00      	nop
   40440:	20003894 	.word	0x20003894
   40444:	200039b4 	.word	0x200039b4

00040448 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   40448:	4a02      	ldr	r2, [pc, #8]	; (40454 <nrfx_usbd_uninit+0xc>)
   4044a:	2300      	movs	r3, #0
   4044c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   4044e:	4a02      	ldr	r2, [pc, #8]	; (40458 <nrfx_usbd_uninit+0x10>)
   40450:	7013      	strb	r3, [r2, #0]
    return;
}
   40452:	4770      	bx	lr
   40454:	200039b4 	.word	0x200039b4
   40458:	20003c7e 	.word	0x20003c7e

0004045c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   4045c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   4045e:	4b48      	ldr	r3, [pc, #288]	; (40580 <nrfx_usbd_enable+0x124>)
   40460:	f44f 6200 	mov.w	r2, #2048	; 0x800
   40464:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   40468:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   4046c:	f7ff fdf8 	bl	40060 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   40470:	b108      	cbz	r0, 40476 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   40472:	f7ff fe8b 	bl	4018c <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   40476:	f007 ffc7 	bl	48408 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   4047a:	b1c8      	cbz	r0, 404b0 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   4047c:	f04f 0320 	mov.w	r3, #32
   40480:	f3ef 8011 	mrs	r0, BASEPRI
   40484:	f383 8812 	msr	BASEPRI_MAX, r3
   40488:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   4048c:	4b3d      	ldr	r3, [pc, #244]	; (40584 <nrfx_usbd_enable+0x128>)
   4048e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   40492:	22c0      	movs	r2, #192	; 0xc0
   40494:	2900      	cmp	r1, #0
   40496:	d16a      	bne.n	4056e <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   40498:	f249 3175 	movw	r1, #37749	; 0x9375
   4049c:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   404a0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   404a4:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   404a8:	f380 8811 	msr	BASEPRI, r0
   404ac:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   404b0:	4b33      	ldr	r3, [pc, #204]	; (40580 <nrfx_usbd_enable+0x124>)
   404b2:	2201      	movs	r2, #1
   404b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   404b8:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   404bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   404c0:	0512      	lsls	r2, r2, #20
   404c2:	d5fb      	bpl.n	404bc <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   404c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   404c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   404cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   404d0:	f007 ff9a 	bl	48408 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   404d4:	b1c0      	cbz	r0, 40508 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   404d6:	f04f 0320 	mov.w	r3, #32
   404da:	f3ef 8011 	mrs	r0, BASEPRI
   404de:	f383 8812 	msr	BASEPRI_MAX, r3
   404e2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   404e6:	4b27      	ldr	r3, [pc, #156]	; (40584 <nrfx_usbd_enable+0x128>)
   404e8:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   404ec:	2900      	cmp	r1, #0
   404ee:	d141      	bne.n	40574 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   404f0:	f249 3275 	movw	r2, #37749	; 0x9375
   404f4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   404f8:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   404fc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   40500:	f380 8811 	msr	BASEPRI, r0
   40504:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   40508:	f7ff fdaa 	bl	40060 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   4050c:	b130      	cbz	r0, 4051c <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   4050e:	f7ff fe5d 	bl	401cc <usbd_errata_187_211_end>
   40512:	f7ff fda5 	bl	40060 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   40516:	b108      	cbz	r0, 4051c <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   40518:	f7ff fe38 	bl	4018c <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   4051c:	f007 ff74 	bl	48408 <nrf52_errata_166>
   40520:	4b17      	ldr	r3, [pc, #92]	; (40580 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   40522:	b150      	cbz	r0, 4053a <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   40524:	f240 72e3 	movw	r2, #2019	; 0x7e3
   40528:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   4052c:	2240      	movs	r2, #64	; 0x40
   4052e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   40532:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   40536:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   4053a:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   4053c:	2280      	movs	r2, #128	; 0x80
   4053e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   40542:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   40546:	4b10      	ldr	r3, [pc, #64]	; (40588 <nrfx_usbd_enable+0x12c>)
   40548:	f240 12ff 	movw	r2, #511	; 0x1ff
   4054c:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   4054e:	4b0f      	ldr	r3, [pc, #60]	; (4058c <nrfx_usbd_enable+0x130>)
   40550:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   40552:	f7ff fda7 	bl	400a4 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   40556:	4b0e      	ldr	r3, [pc, #56]	; (40590 <nrfx_usbd_enable+0x134>)
   40558:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   4055a:	4b0e      	ldr	r3, [pc, #56]	; (40594 <nrfx_usbd_enable+0x138>)
   4055c:	2202      	movs	r2, #2
   4055e:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   40560:	f7ff fd7e 	bl	40060 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   40564:	b150      	cbz	r0, 4057c <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   40566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   4056a:	f7ff be2f 	b.w	401cc <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   4056e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   40572:	e799      	b.n	404a8 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   40574:	2200      	movs	r2, #0
   40576:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   4057a:	e7c1      	b.n	40500 <nrfx_usbd_enable+0xa4>
}
   4057c:	bd08      	pop	{r3, pc}
   4057e:	bf00      	nop
   40580:	40027000 	.word	0x40027000
   40584:	4006e000 	.word	0x4006e000
   40588:	20003890 	.word	0x20003890
   4058c:	20003820 	.word	0x20003820
   40590:	20003c7f 	.word	0x20003c7f
   40594:	20003c7e 	.word	0x20003c7e

00040598 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   40598:	4b0a      	ldr	r3, [pc, #40]	; (405c4 <nrfx_usbd_start+0x2c>)
   4059a:	2200      	movs	r2, #0
{
   4059c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   4059e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   405a0:	4a09      	ldr	r2, [pc, #36]	; (405c8 <nrfx_usbd_start+0x30>)
   405a2:	4b0a      	ldr	r3, [pc, #40]	; (405cc <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   405a4:	4c0a      	ldr	r4, [pc, #40]	; (405d0 <nrfx_usbd_start+0x38>)
   405a6:	2800      	cmp	r0, #0
   405a8:	bf18      	it	ne
   405aa:	4613      	movne	r3, r2
   405ac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   405b0:	2027      	movs	r0, #39	; 0x27
   405b2:	f7e9 fef1 	bl	2a398 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   405b6:	2301      	movs	r3, #1
   405b8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   405bc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   405c0:	bd10      	pop	{r4, pc}
   405c2:	bf00      	nop
   405c4:	20003c7c 	.word	0x20003c7c
   405c8:	01e01407 	.word	0x01e01407
   405cc:	01c01407 	.word	0x01c01407
   405d0:	40027000 	.word	0x40027000

000405d4 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   405d4:	4b03      	ldr	r3, [pc, #12]	; (405e4 <nrfx_usbd_is_enabled+0x10>)
   405d6:	7818      	ldrb	r0, [r3, #0]
}
   405d8:	2801      	cmp	r0, #1
   405da:	bf94      	ite	ls
   405dc:	2000      	movls	r0, #0
   405de:	2001      	movhi	r0, #1
   405e0:	4770      	bx	lr
   405e2:	bf00      	nop
   405e4:	20003c7e 	.word	0x20003c7e

000405e8 <nrfx_usbd_init>:
{
   405e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   405ec:	4b1d      	ldr	r3, [pc, #116]	; (40664 <nrfx_usbd_init+0x7c>)
   405ee:	781c      	ldrb	r4, [r3, #0]
   405f0:	2c00      	cmp	r4, #0
   405f2:	d135      	bne.n	40660 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   405f4:	4a1c      	ldr	r2, [pc, #112]	; (40668 <nrfx_usbd_init+0x80>)
   405f6:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   405f8:	2201      	movs	r2, #1
   405fa:	701a      	strb	r2, [r3, #0]
   405fc:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   405fe:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   40602:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   40604:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   40608:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   4060c:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4060e:	bf14      	ite	ne
   40610:	4641      	movne	r1, r8
   40612:	2140      	moveq	r1, #64	; 0x40
   40614:	4630      	mov	r0, r6
   40616:	f007 ff77 	bl	48508 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   4061a:	4630      	mov	r0, r6
   4061c:	f7ff fd34 	bl	40088 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   40620:	3501      	adds	r5, #1
   40622:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   40624:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   40626:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   40628:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   4062a:	d1eb      	bne.n	40604 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4062c:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   4062e:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   40630:	f240 16ff 	movw	r6, #511	; 0x1ff
   40634:	4620      	mov	r0, r4
   40636:	f007 ff67 	bl	48508 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   4063a:	4620      	mov	r0, r4
   4063c:	f7ff fd24 	bl	40088 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   40640:	3401      	adds	r4, #1
   40642:	b2e4      	uxtb	r4, r4
   40644:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   40646:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   40648:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   4064a:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   4064c:	d102      	bne.n	40654 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   4064e:	4807      	ldr	r0, [pc, #28]	; (4066c <nrfx_usbd_init+0x84>)
}
   40650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   40654:	f014 0f08 	tst.w	r4, #8
   40658:	bf14      	ite	ne
   4065a:	4631      	movne	r1, r6
   4065c:	2140      	moveq	r1, #64	; 0x40
   4065e:	e7e9      	b.n	40634 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   40660:	4803      	ldr	r0, [pc, #12]	; (40670 <nrfx_usbd_init+0x88>)
   40662:	e7f5      	b.n	40650 <nrfx_usbd_init+0x68>
   40664:	20003c7e 	.word	0x20003c7e
   40668:	200039b4 	.word	0x200039b4
   4066c:	0bad0000 	.word	0x0bad0000
   40670:	0bad0005 	.word	0x0bad0005

00040674 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   40674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40678:	4605      	mov	r5, r0
	__asm__ volatile(
   4067a:	f04f 0320 	mov.w	r3, #32
   4067e:	f3ef 8811 	mrs	r8, BASEPRI
   40682:	f383 8812 	msr	BASEPRI_MAX, r3
   40686:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   4068a:	f010 040f 	ands.w	r4, r0, #15
   4068e:	d103      	bne.n	40698 <nrfx_usbd_ep_transfer+0x24>
   40690:	4b27      	ldr	r3, [pc, #156]	; (40730 <nrfx_usbd_ep_transfer+0xbc>)
   40692:	781b      	ldrb	r3, [r3, #0]
   40694:	4283      	cmp	r3, r0
   40696:	d146      	bne.n	40726 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   40698:	4b26      	ldr	r3, [pc, #152]	; (40734 <nrfx_usbd_ep_transfer+0xc0>)
   4069a:	4f27      	ldr	r7, [pc, #156]	; (40738 <nrfx_usbd_ep_transfer+0xc4>)
   4069c:	681a      	ldr	r2, [r3, #0]
   4069e:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   406a0:	4628      	mov	r0, r5
   406a2:	f007 fef7 	bl	48494 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   406a6:	43d2      	mvns	r2, r2
   406a8:	b292      	uxth	r2, r2
   406aa:	f04f 0901 	mov.w	r9, #1
   406ae:	4332      	orrs	r2, r6
   406b0:	fa09 f900 	lsl.w	r9, r9, r0
   406b4:	ea12 0f09 	tst.w	r2, r9
   406b8:	d137      	bne.n	4072a <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   406ba:	4628      	mov	r0, r5
   406bc:	f7ff fce4 	bl	40088 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   406c0:	220c      	movs	r2, #12
   406c2:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   406c4:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   406c6:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   406c8:	d529      	bpl.n	4071e <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   406ca:	4a1c      	ldr	r2, [pc, #112]	; (4073c <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   406cc:	6808      	ldr	r0, [r1, #0]
   406ce:	4414      	add	r4, r2
   406d0:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   406d4:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   406d6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   406da:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   406de:	d119      	bne.n	40714 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   406e0:	b9b2      	cbnz	r2, 40710 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   406e2:	4a17      	ldr	r2, [pc, #92]	; (40740 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   406e4:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   406e6:	c907      	ldmia	r1, {r0, r1, r2}
   406e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   406ec:	2200      	movs	r2, #0
   406ee:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   406f0:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   406f2:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   406f4:	4b13      	ldr	r3, [pc, #76]	; (40744 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   406f6:	4814      	ldr	r0, [pc, #80]	; (40748 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   406f8:	ea46 0609 	orr.w	r6, r6, r9
   406fc:	2280      	movs	r2, #128	; 0x80
   406fe:	603e      	str	r6, [r7, #0]
   40700:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   40704:	f388 8811 	msr	BASEPRI, r8
   40708:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   4070c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   40710:	4a0e      	ldr	r2, [pc, #56]	; (4074c <nrfx_usbd_ep_transfer+0xd8>)
   40712:	e7e7      	b.n	406e4 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   40714:	b90a      	cbnz	r2, 4071a <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   40716:	4a0e      	ldr	r2, [pc, #56]	; (40750 <nrfx_usbd_ep_transfer+0xdc>)
   40718:	e7e4      	b.n	406e4 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   4071a:	4a0e      	ldr	r2, [pc, #56]	; (40754 <nrfx_usbd_ep_transfer+0xe0>)
   4071c:	e7e2      	b.n	406e4 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   4071e:	4a0e      	ldr	r2, [pc, #56]	; (40758 <nrfx_usbd_ep_transfer+0xe4>)
   40720:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   40722:	4a0e      	ldr	r2, [pc, #56]	; (4075c <nrfx_usbd_ep_transfer+0xe8>)
   40724:	e7de      	b.n	406e4 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   40726:	480e      	ldr	r0, [pc, #56]	; (40760 <nrfx_usbd_ep_transfer+0xec>)
   40728:	e7ec      	b.n	40704 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   4072a:	480e      	ldr	r0, [pc, #56]	; (40764 <nrfx_usbd_ep_transfer+0xf0>)
   4072c:	e7ea      	b.n	40704 <nrfx_usbd_ep_transfer+0x90>
   4072e:	bf00      	nop
   40730:	20003c7f 	.word	0x20003c7f
   40734:	20003890 	.word	0x20003890
   40738:	20003820 	.word	0x20003820
   4073c:	20003824 	.word	0x20003824
   40740:	00048449 	.word	0x00048449
   40744:	e000e100 	.word	0xe000e100
   40748:	0bad0000 	.word	0x0bad0000
   4074c:	0004846b 	.word	0x0004846b
   40750:	0004020d 	.word	0x0004020d
   40754:	00040245 	.word	0x00040245
   40758:	200037b4 	.word	0x200037b4
   4075c:	0004841b 	.word	0x0004841b
   40760:	0bad000a 	.word	0x0bad000a
   40764:	0bad000b 	.word	0x0bad000b

00040768 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   40768:	f010 0f08 	tst.w	r0, #8
   4076c:	4b07      	ldr	r3, [pc, #28]	; (4078c <nrfx_usbd_epout_size_get+0x24>)
   4076e:	d006      	beq.n	4077e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   40770:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   40774:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   40778:	bf18      	it	ne
   4077a:	2000      	movne	r0, #0
   4077c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   4077e:	f000 000f 	and.w	r0, r0, #15
   40782:	f500 7094 	add.w	r0, r0, #296	; 0x128
   40786:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   4078a:	4770      	bx	lr
   4078c:	40027000 	.word	0x40027000

00040790 <usbd_dmareq_process>:
{
   40790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   40794:	f8df 815c 	ldr.w	r8, [pc, #348]	; 408f4 <usbd_dmareq_process+0x164>
   40798:	f898 3000 	ldrb.w	r3, [r8]
{
   4079c:	b085      	sub	sp, #20
    if (!m_dma_pending)
   4079e:	2b00      	cmp	r3, #0
   407a0:	d16b      	bne.n	4087a <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   407a2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 408f8 <usbd_dmareq_process+0x168>
   407a6:	4e55      	ldr	r6, [pc, #340]	; (408fc <usbd_dmareq_process+0x16c>)
   407a8:	f8d9 1000 	ldr.w	r1, [r9]
   407ac:	6833      	ldr	r3, [r6, #0]
   407ae:	4019      	ands	r1, r3
   407b0:	d063      	beq.n	4087a <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   407b2:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   407b6:	bf14      	ite	ne
   407b8:	fa93 f1a3 	rbitne	r1, r3
   407bc:	fa91 f1a1 	rbiteq	r1, r1
   407c0:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   407c4:	290f      	cmp	r1, #15
   407c6:	bf8a      	itet	hi
   407c8:	f1a1 0410 	subhi.w	r4, r1, #16
   407cc:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   407d0:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   407d2:	4620      	mov	r0, r4
   407d4:	f7ff fc58 	bl	40088 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   407d8:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   407dc:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   407e0:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   407e4:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   407e8:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   407ea:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   407ee:	da47      	bge.n	40880 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   407f0:	6803      	ldr	r3, [r0, #0]
   407f2:	8982      	ldrh	r2, [r0, #12]
   407f4:	6841      	ldr	r1, [r0, #4]
   407f6:	a802      	add	r0, sp, #8
   407f8:	4798      	blx	r3
                if (!continue_transfer)
   407fa:	b900      	cbnz	r0, 407fe <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   407fc:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   407fe:	f007 fe03 	bl	48408 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   40802:	b118      	cbz	r0, 4080c <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   40804:	4b3e      	ldr	r3, [pc, #248]	; (40900 <usbd_dmareq_process+0x170>)
   40806:	2282      	movs	r2, #130	; 0x82
   40808:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   4080c:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   4080e:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   40810:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   40812:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   40816:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   40818:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   4081c:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   4081e:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   40822:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   40824:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   40826:	f004 0008 	and.w	r0, r4, #8
   4082a:	9902      	ldr	r1, [sp, #8]
   4082c:	4b34      	ldr	r3, [pc, #208]	; (40900 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   4082e:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   40832:	da4f      	bge.n	408d4 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   40834:	2800      	cmp	r0, #0
   40836:	d045      	beq.n	408c4 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   40838:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   4083c:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   40840:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40842:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   40846:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4084a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4084e:	2201      	movs	r2, #1
   40850:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40852:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   40854:	4a2b      	ldr	r2, [pc, #172]	; (40904 <usbd_dmareq_process+0x174>)
   40856:	4b2c      	ldr	r3, [pc, #176]	; (40908 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   40858:	4929      	ldr	r1, [pc, #164]	; (40900 <usbd_dmareq_process+0x170>)
   4085a:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   4085e:	bf38      	it	cc
   40860:	4613      	movcc	r3, r2
   40862:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   40866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4086a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4086e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   40870:	b91a      	cbnz	r2, 4087a <usbd_dmareq_process+0xea>
   40872:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   40876:	2a00      	cmp	r2, #0
   40878:	d0f9      	beq.n	4086e <usbd_dmareq_process+0xde>
}
   4087a:	b005      	add	sp, #20
   4087c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   40880:	4620      	mov	r0, r4
   40882:	f7ff ff71 	bl	40768 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   40886:	89aa      	ldrh	r2, [r5, #12]
   40888:	6869      	ldr	r1, [r5, #4]
   4088a:	f8d5 c000 	ldr.w	ip, [r5]
   4088e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   40890:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   40892:	a802      	add	r0, sp, #8
   40894:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   40896:	9a02      	ldr	r2, [sp, #8]
   40898:	2a00      	cmp	r2, #0
   4089a:	d0ae      	beq.n	407fa <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   4089c:	9a03      	ldr	r2, [sp, #12]
   4089e:	4297      	cmp	r7, r2
   408a0:	d9ab      	bls.n	407fa <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   408a2:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   408a4:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   408a6:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   408a8:	f7ff fd0c 	bl	402c4 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   408ac:	2306      	movs	r3, #6
   408ae:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   408b2:	4b16      	ldr	r3, [pc, #88]	; (4090c <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   408b4:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   408b8:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   408ba:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   408be:	a801      	add	r0, sp, #4
   408c0:	4798      	blx	r3
                    continue;
   408c2:	e771      	b.n	407a8 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   408c4:	2014      	movs	r0, #20
   408c6:	fb00 3304 	mla	r3, r0, r4, r3
   408ca:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   408ce:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   408d2:	e7b5      	b.n	40840 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   408d4:	b128      	cbz	r0, 408e2 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   408d6:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   408da:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   408de:	2328      	movs	r3, #40	; 0x28
   408e0:	e7af      	b.n	40842 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   408e2:	2014      	movs	r0, #20
   408e4:	fb00 3304 	mla	r3, r0, r4, r3
   408e8:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   408ec:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   408f0:	e7f5      	b.n	408de <usbd_dmareq_process+0x14e>
   408f2:	bf00      	nop
   408f4:	20003c7d 	.word	0x20003c7d
   408f8:	20003820 	.word	0x20003820
   408fc:	20003890 	.word	0x20003890
   40900:	40027000 	.word	0x40027000
   40904:	0004b39a 	.word	0x0004b39a
   40908:	0004b388 	.word	0x0004b388
   4090c:	200039b4 	.word	0x200039b4

00040910 <ev_epdata_handler>:
{
   40910:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   40912:	4b0f      	ldr	r3, [pc, #60]	; (40950 <ev_epdata_handler+0x40>)
   40914:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   40918:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   4091c:	2501      	movs	r5, #1
    while (dataepstatus)
   4091e:	b91c      	cbnz	r4, 40928 <ev_epdata_handler+0x18>
}
   40920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   40924:	f7ff bf34 	b.w	40790 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   40928:	fa94 f3a4 	rbit	r3, r4
   4092c:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40930:	2b0f      	cmp	r3, #15
   40932:	bfc8      	it	gt
   40934:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   40938:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4093a:	bfd4      	ite	le
   4093c:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   40940:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   40942:	fa05 f303 	lsl.w	r3, r5, r3
   40946:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   4094a:	f7ff fce1 	bl	40310 <usbd_ep_data_handler>
   4094e:	e7e6      	b.n	4091e <ev_epdata_handler+0xe>
   40950:	40027000 	.word	0x40027000

00040954 <nrf_usbd_epout_dma_handler>:
{
   40954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40956:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   40958:	f7ff fba4 	bl	400a4 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   4095c:	4620      	mov	r0, r4
   4095e:	f7ff fb93 	bl	40088 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   40962:	7b83      	ldrb	r3, [r0, #14]
   40964:	2b03      	cmp	r3, #3
   40966:	d10d      	bne.n	40984 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40968:	4620      	mov	r0, r4
   4096a:	f007 fd93 	bl	48494 <ep2bit>
   4096e:	2301      	movs	r3, #1
   40970:	fa03 f000 	lsl.w	r0, r3, r0
   40974:	43c0      	mvns	r0, r0
   40976:	f7ff fca5 	bl	402c4 <atomic_and.constprop.0.isra.0>
}
   4097a:	b003      	add	sp, #12
   4097c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   40980:	f7ff bf06 	b.w	40790 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   40984:	6805      	ldr	r5, [r0, #0]
   40986:	2d00      	cmp	r5, #0
   40988:	d1f7      	bne.n	4097a <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4098a:	4620      	mov	r0, r4
   4098c:	f007 fd82 	bl	48494 <ep2bit>
   40990:	2301      	movs	r3, #1
   40992:	fa03 f000 	lsl.w	r0, r3, r0
   40996:	43c0      	mvns	r0, r0
   40998:	f7ff fc94 	bl	402c4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4099c:	2306      	movs	r3, #6
   4099e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   409a2:	4b04      	ldr	r3, [pc, #16]	; (409b4 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   409a4:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   409a8:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   409aa:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   409ae:	a801      	add	r0, sp, #4
   409b0:	4798      	blx	r3
   409b2:	e7e2      	b.n	4097a <nrf_usbd_epout_dma_handler+0x26>
   409b4:	200039b4 	.word	0x200039b4

000409b8 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   409b8:	4b02      	ldr	r3, [pc, #8]	; (409c4 <nrfx_usbd_ep_stall+0xc>)
   409ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   409be:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   409c2:	4770      	bx	lr
   409c4:	40027000 	.word	0x40027000

000409c8 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   409c8:	0702      	lsls	r2, r0, #28
   409ca:	d413      	bmi.n	409f4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   409cc:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   409d0:	f010 0f80 	tst.w	r0, #128	; 0x80
   409d4:	4a08      	ldr	r2, [pc, #32]	; (409f8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   409d6:	bf0b      	itete	eq
   409d8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   409dc:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   409e0:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   409e4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   409e8:	bf08      	it	eq
   409ea:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   409ec:	1e43      	subs	r3, r0, #1
   409ee:	4258      	negs	r0, r3
   409f0:	4158      	adcs	r0, r3
   409f2:	4770      	bx	lr
        return false;
   409f4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   409f6:	4770      	bx	lr
   409f8:	40027000 	.word	0x40027000

000409fc <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   409fc:	4b04      	ldr	r3, [pc, #16]	; (40a10 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   409fe:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   40a02:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   40a06:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   40a0a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   40a0e:	4770      	bx	lr
   40a10:	40027000 	.word	0x40027000

00040a14 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   40a14:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   40a16:	2208      	movs	r2, #8
   40a18:	2100      	movs	r1, #0
{
   40a1a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   40a1c:	f004 fa5b 	bl	44ed6 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   40a20:	4b0e      	ldr	r3, [pc, #56]	; (40a5c <nrfx_usbd_setup_get+0x48>)
   40a22:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   40a26:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   40a28:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   40a2c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   40a2e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   40a32:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   40a36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   40a3a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   40a3c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   40a40:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   40a44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   40a48:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   40a4a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   40a4e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   40a52:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   40a56:	80e3      	strh	r3, [r4, #6]
}
   40a58:	bd10      	pop	{r4, pc}
   40a5a:	bf00      	nop
   40a5c:	40027000 	.word	0x40027000

00040a60 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40a60:	4b02      	ldr	r3, [pc, #8]	; (40a6c <nrfx_usbd_setup_data_clear+0xc>)
   40a62:	2201      	movs	r2, #1
   40a64:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   40a68:	4770      	bx	lr
   40a6a:	bf00      	nop
   40a6c:	40027000 	.word	0x40027000

00040a70 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   40a70:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   40a72:	f7ff fb17 	bl	400a4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   40a76:	4b10      	ldr	r3, [pc, #64]	; (40ab8 <ev_dma_epout0_handler+0x48>)
   40a78:	7b9a      	ldrb	r2, [r3, #14]
   40a7a:	2a03      	cmp	r2, #3
   40a7c:	d106      	bne.n	40a8c <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40a7e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   40a82:	b002      	add	sp, #8
   40a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40a88:	f7ff bc1c 	b.w	402c4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   40a8c:	681c      	ldr	r4, [r3, #0]
   40a8e:	b974      	cbnz	r4, 40aae <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40a90:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   40a94:	f7ff fc16 	bl	402c4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40a98:	2306      	movs	r3, #6
   40a9a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   40a9e:	4b07      	ldr	r3, [pc, #28]	; (40abc <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40aa0:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   40aa4:	681b      	ldr	r3, [r3, #0]
   40aa6:	a801      	add	r0, sp, #4
   40aa8:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   40aaa:	b002      	add	sp, #8
   40aac:	bd10      	pop	{r4, pc}
   40aae:	b002      	add	sp, #8
   40ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   40ab4:	f7ff bfd4 	b.w	40a60 <nrfx_usbd_setup_data_clear>
   40ab8:	20003894 	.word	0x20003894
   40abc:	200039b4 	.word	0x200039b4

00040ac0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40ac0:	4b02      	ldr	r3, [pc, #8]	; (40acc <nrfx_usbd_setup_clear+0xc>)
   40ac2:	2201      	movs	r2, #1
   40ac4:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   40ac8:	4770      	bx	lr
   40aca:	bf00      	nop
   40acc:	40027000 	.word	0x40027000

00040ad0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40ad0:	4b02      	ldr	r3, [pc, #8]	; (40adc <nrfx_usbd_setup_stall+0xc>)
   40ad2:	2201      	movs	r2, #1
   40ad4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   40ad8:	4770      	bx	lr
   40ada:	bf00      	nop
   40adc:	40027000 	.word	0x40027000

00040ae0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   40ae0:	4b01      	ldr	r3, [pc, #4]	; (40ae8 <nrfx_usbd_last_setup_dir_get+0x8>)
   40ae2:	7818      	ldrb	r0, [r3, #0]
   40ae4:	4770      	bx	lr
   40ae6:	bf00      	nop
   40ae8:	20003c7f 	.word	0x20003c7f

00040aec <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   40aec:	b510      	push	{r4, lr}
   40aee:	4602      	mov	r2, r0
	__asm__ volatile(
   40af0:	f04f 0320 	mov.w	r3, #32
   40af4:	f3ef 8411 	mrs	r4, BASEPRI
   40af8:	f383 8812 	msr	BASEPRI_MAX, r3
   40afc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   40b00:	f007 fcc8 	bl	48494 <ep2bit>
   40b04:	490d      	ldr	r1, [pc, #52]	; (40b3c <nrfx_usbd_transfer_out_drop+0x50>)
   40b06:	2301      	movs	r3, #1
   40b08:	fa03 f000 	lsl.w	r0, r3, r0
   40b0c:	680b      	ldr	r3, [r1, #0]
   40b0e:	ea23 0300 	bic.w	r3, r3, r0
   40b12:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   40b14:	f012 0108 	ands.w	r1, r2, #8
   40b18:	d10a      	bne.n	40b30 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   40b1a:	f002 030f 	and.w	r3, r2, #15
   40b1e:	009b      	lsls	r3, r3, #2
   40b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   40b24:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   40b28:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   40b2c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   40b30:	f384 8811 	msr	BASEPRI, r4
   40b34:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   40b38:	bd10      	pop	{r4, pc}
   40b3a:	bf00      	nop
   40b3c:	20003890 	.word	0x20003890

00040b40 <usbd_ep_abort>:
{
   40b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40b42:	4601      	mov	r1, r0
	__asm__ volatile(
   40b44:	f04f 0320 	mov.w	r3, #32
   40b48:	f3ef 8511 	mrs	r5, BASEPRI
   40b4c:	f383 8812 	msr	BASEPRI_MAX, r3
   40b50:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   40b54:	f7ff fa98 	bl	40088 <ep_state_access>
   40b58:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   40b5a:	4608      	mov	r0, r1
   40b5c:	f007 fc9a 	bl	48494 <ep2bit>
   40b60:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   40b62:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   40b66:	fa02 f200 	lsl.w	r2, r2, r0
   40b6a:	482e      	ldr	r0, [pc, #184]	; (40c24 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   40b6c:	d118      	bne.n	40ba0 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   40b6e:	6803      	ldr	r3, [r0, #0]
   40b70:	ea32 0403 	bics.w	r4, r2, r3
   40b74:	d00a      	beq.n	40b8c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   40b76:	4608      	mov	r0, r1
   40b78:	f7ff ffb8 	bl	40aec <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   40b7c:	2303      	movs	r3, #3
   40b7e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   40b80:	f385 8811 	msr	BASEPRI, r5
   40b84:	f3bf 8f6f 	isb	sy
}
   40b88:	b003      	add	sp, #12
   40b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40b8c:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   40b90:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40b92:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   40b94:	4b24      	ldr	r3, [pc, #144]	; (40c28 <usbd_ep_abort+0xe8>)
   40b96:	6818      	ldr	r0, [r3, #0]
   40b98:	ea20 0002 	bic.w	r0, r0, r2
   40b9c:	6018      	str	r0, [r3, #0]
   40b9e:	e7ed      	b.n	40b7c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   40ba0:	070b      	lsls	r3, r1, #28
   40ba2:	d415      	bmi.n	40bd0 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   40ba4:	2980      	cmp	r1, #128	; 0x80
   40ba6:	4b21      	ldr	r3, [pc, #132]	; (40c2c <usbd_ep_abort+0xec>)
   40ba8:	d02f      	beq.n	40c0a <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   40baa:	f001 040f 	and.w	r4, r1, #15
   40bae:	f204 34da 	addw	r4, r4, #986	; 0x3da
   40bb2:	0064      	lsls	r4, r4, #1
   40bb4:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40bb8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40bbc:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40bc0:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40bc2:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40bc6:	433c      	orrs	r4, r7
   40bc8:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   40bcc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   40bd0:	4f15      	ldr	r7, [pc, #84]	; (40c28 <usbd_ep_abort+0xe8>)
   40bd2:	6804      	ldr	r4, [r0, #0]
   40bd4:	683b      	ldr	r3, [r7, #0]
   40bd6:	ea64 0c03 	orn	ip, r4, r3
   40bda:	ea1c 0f02 	tst.w	ip, r2
   40bde:	d0cf      	beq.n	40b80 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   40be0:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40be2:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   40be6:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   40be8:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40bea:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   40bec:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   40bee:	2303      	movs	r3, #3
   40bf0:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   40bf2:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   40bf6:	4b0e      	ldr	r3, [pc, #56]	; (40c30 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   40bf8:	f88d 1006 	strb.w	r1, [sp, #6]
   40bfc:	2206      	movs	r2, #6
            m_event_handler(&evt);
   40bfe:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   40c00:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   40c04:	a801      	add	r0, sp, #4
   40c06:	4798      	blx	r3
   40c08:	e7ba      	b.n	40b80 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   40c0a:	f240 74b4 	movw	r4, #1972	; 0x7b4
   40c0e:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40c12:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40c16:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40c1a:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40c1c:	f044 0404 	orr.w	r4, r4, #4
   40c20:	e7d1      	b.n	40bc6 <usbd_ep_abort+0x86>
   40c22:	bf00      	nop
   40c24:	20003820 	.word	0x20003820
   40c28:	20003890 	.word	0x20003890
   40c2c:	40027000 	.word	0x40027000
   40c30:	200039b4 	.word	0x200039b4

00040c34 <ev_setup_handler>:
{
   40c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   40c36:	4b17      	ldr	r3, [pc, #92]	; (40c94 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40c38:	4c17      	ldr	r4, [pc, #92]	; (40c98 <ev_setup_handler+0x64>)
   40c3a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   40c3e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   40c40:	4e16      	ldr	r6, [pc, #88]	; (40c9c <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40c42:	43da      	mvns	r2, r3
   40c44:	4b16      	ldr	r3, [pc, #88]	; (40ca0 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   40c46:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40c48:	681b      	ldr	r3, [r3, #0]
   40c4a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   40c4c:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40c4e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   40c50:	f007 fc20 	bl	48494 <ep2bit>
   40c54:	2301      	movs	r3, #1
   40c56:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40c58:	4213      	tst	r3, r2
   40c5a:	d002      	beq.n	40c62 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   40c5c:	4608      	mov	r0, r1
   40c5e:	f7ff ff6f 	bl	40b40 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   40c62:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   40c66:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   40c6a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   40c6c:	f7ff fb2a 	bl	402c4 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   40c70:	6823      	ldr	r3, [r4, #0]
   40c72:	f043 0301 	orr.w	r3, r3, #1
   40c76:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   40c78:	2300      	movs	r3, #0
   40c7a:	f8ad 3005 	strh.w	r3, [sp, #5]
   40c7e:	f88d 3007 	strb.w	r3, [sp, #7]
   40c82:	2305      	movs	r3, #5
   40c84:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   40c88:	4b06      	ldr	r3, [pc, #24]	; (40ca4 <ev_setup_handler+0x70>)
   40c8a:	a801      	add	r0, sp, #4
   40c8c:	681b      	ldr	r3, [r3, #0]
   40c8e:	4798      	blx	r3
}
   40c90:	b002      	add	sp, #8
   40c92:	bd70      	pop	{r4, r5, r6, pc}
   40c94:	40027000 	.word	0x40027000
   40c98:	20003890 	.word	0x20003890
   40c9c:	20003c7f 	.word	0x20003c7f
   40ca0:	20003820 	.word	0x20003820
   40ca4:	200039b4 	.word	0x200039b4

00040ca8 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   40ca8:	4b1b      	ldr	r3, [pc, #108]	; (40d18 <nrfx_usbd_irq_handler+0x70>)
   40caa:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   40cae:	2300      	movs	r3, #0
{
   40cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   40cb4:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   40cb6:	461d      	mov	r5, r3
    while (to_process)
   40cb8:	b970      	cbnz	r0, 40cd8 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   40cba:	4f18      	ldr	r7, [pc, #96]	; (40d1c <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   40cbc:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   40cc0:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   40cc4:	f04f 0801 	mov.w	r8, #1
    while (active)
   40cc8:	b9bc      	cbnz	r4, 40cfa <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   40cca:	f7ff fd61 	bl	40790 <usbd_dmareq_process>
    if (setup_active)
   40cce:	b306      	cbz	r6, 40d12 <nrfx_usbd_irq_handler+0x6a>
}
   40cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   40cd4:	f7ff bfae 	b.w	40c34 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   40cd8:	fa90 f2a0 	rbit	r2, r0
   40cdc:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   40ce0:	490f      	ldr	r1, [pc, #60]	; (40d20 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   40ce2:	0096      	lsls	r6, r2, #2
   40ce4:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   40ce6:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   40cea:	680e      	ldr	r6, [r1, #0]
    if (ret)
   40cec:	b116      	cbz	r6, 40cf4 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   40cee:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   40cf0:	6809      	ldr	r1, [r1, #0]
   40cf2:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   40cf4:	ea20 0002 	bic.w	r0, r0, r2
   40cf8:	e7de      	b.n	40cb8 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   40cfa:	fa94 f5a4 	rbit	r5, r4
   40cfe:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   40d02:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   40d06:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   40d0a:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   40d0c:	ea24 0405 	bic.w	r4, r4, r5
   40d10:	e7da      	b.n	40cc8 <nrfx_usbd_irq_handler+0x20>
}
   40d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40d16:	bf00      	nop
   40d18:	40027000 	.word	0x40027000
   40d1c:	0004b260 	.word	0x0004b260
   40d20:	40027100 	.word	0x40027100

00040d24 <usbd_ep_abort_all>:
{
   40d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   40d26:	4e11      	ldr	r6, [pc, #68]	; (40d6c <usbd_ep_abort_all+0x48>)
   40d28:	4b11      	ldr	r3, [pc, #68]	; (40d70 <usbd_ep_abort_all+0x4c>)
   40d2a:	6834      	ldr	r4, [r6, #0]
   40d2c:	681b      	ldr	r3, [r3, #0]
   40d2e:	0c24      	lsrs	r4, r4, #16
   40d30:	0424      	lsls	r4, r4, #16
   40d32:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   40d34:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   40d36:	b91c      	cbnz	r4, 40d40 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   40d38:	f240 13ff 	movw	r3, #511	; 0x1ff
   40d3c:	6033      	str	r3, [r6, #0]
}
   40d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   40d40:	fa94 f5a4 	rbit	r5, r4
   40d44:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40d48:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   40d4a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40d4c:	bfc6      	itte	gt
   40d4e:	f1a5 0010 	subgt.w	r0, r5, #16
   40d52:	b2c0      	uxtbgt	r0, r0
   40d54:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   40d58:	0703      	lsls	r3, r0, #28
   40d5a:	d401      	bmi.n	40d60 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   40d5c:	f7ff fef0 	bl	40b40 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   40d60:	fa07 f505 	lsl.w	r5, r7, r5
   40d64:	ea24 0405 	bic.w	r4, r4, r5
   40d68:	e7e5      	b.n	40d36 <usbd_ep_abort_all+0x12>
   40d6a:	bf00      	nop
   40d6c:	20003890 	.word	0x20003890
   40d70:	20003820 	.word	0x20003820

00040d74 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   40d74:	4b0c      	ldr	r3, [pc, #48]	; (40da8 <nrfx_usbd_stop+0x34>)
   40d76:	2280      	movs	r2, #128	; 0x80
{
   40d78:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   40d7a:	2027      	movs	r0, #39	; 0x27
   40d7c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   40d80:	f7e9 fb2e 	bl	2a3e0 <arch_irq_is_enabled>
   40d84:	b170      	cbz	r0, 40da4 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   40d86:	4c09      	ldr	r4, [pc, #36]	; (40dac <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   40d88:	f7ff ffcc 	bl	40d24 <usbd_ep_abort_all>
   40d8c:	2300      	movs	r3, #0
   40d8e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   40d92:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   40d94:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   40d98:	f7e9 fb0e 	bl	2a3b8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   40d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40da0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   40da4:	bd10      	pop	{r4, pc}
   40da6:	bf00      	nop
   40da8:	e000e100 	.word	0xe000e100
   40dac:	40027000 	.word	0x40027000

00040db0 <nrfx_usbd_disable>:
{
   40db0:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   40db2:	f7ff ffdf 	bl	40d74 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   40db6:	4b08      	ldr	r3, [pc, #32]	; (40dd8 <nrfx_usbd_disable+0x28>)
   40db8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   40dbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   40dc0:	2200      	movs	r2, #0
   40dc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   40dc6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   40dca:	f7ff f96b 	bl	400a4 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   40dce:	4b03      	ldr	r3, [pc, #12]	; (40ddc <nrfx_usbd_disable+0x2c>)
   40dd0:	2201      	movs	r2, #1
   40dd2:	701a      	strb	r2, [r3, #0]
}
   40dd4:	bd08      	pop	{r3, pc}
   40dd6:	bf00      	nop
   40dd8:	40027000 	.word	0x40027000
   40ddc:	20003c7e 	.word	0x20003c7e

00040de0 <nrfx_usbd_suspend>:
{
   40de0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   40de2:	f04f 0320 	mov.w	r3, #32
   40de6:	f3ef 8511 	mrs	r5, BASEPRI
   40dea:	f383 8812 	msr	BASEPRI_MAX, r3
   40dee:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   40df2:	4b11      	ldr	r3, [pc, #68]	; (40e38 <nrfx_usbd_suspend+0x58>)
   40df4:	781b      	ldrb	r3, [r3, #0]
   40df6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   40dfa:	b933      	cbnz	r3, 40e0a <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   40dfc:	2400      	movs	r4, #0
	__asm__ volatile(
   40dfe:	f385 8811 	msr	BASEPRI, r5
   40e02:	f3bf 8f6f 	isb	sy
}
   40e06:	4620      	mov	r0, r4
   40e08:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   40e0a:	f7ff ff8b 	bl	40d24 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   40e0e:	4b0b      	ldr	r3, [pc, #44]	; (40e3c <nrfx_usbd_suspend+0x5c>)
   40e10:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   40e14:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   40e18:	d1f0      	bne.n	40dfc <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   40e1a:	2101      	movs	r1, #1
   40e1c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   40e20:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   40e24:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   40e28:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   40e2a:	bf42      	ittt	mi
   40e2c:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   40e30:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   40e34:	4614      	movmi	r4, r2
}
   40e36:	e7e2      	b.n	40dfe <nrfx_usbd_suspend+0x1e>
   40e38:	20003c7c 	.word	0x20003c7c
   40e3c:	40027000 	.word	0x40027000

00040e40 <nrfx_usbd_ep_disable>:
{
   40e40:	b510      	push	{r4, lr}
   40e42:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   40e44:	f7ff fe7c 	bl	40b40 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40e48:	4a10      	ldr	r2, [pc, #64]	; (40e8c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   40e4a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40e4e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   40e52:	f04f 0301 	mov.w	r3, #1
   40e56:	bf14      	ite	ne
   40e58:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40e5c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   40e60:	fa03 f300 	lsl.w	r3, r3, r0
   40e64:	ea6f 0303 	mvn.w	r3, r3
   40e68:	bf15      	itete	ne
   40e6a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40e6c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   40e6e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40e72:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40e76:	bf14      	ite	ne
   40e78:	4b05      	ldrne	r3, [pc, #20]	; (40e90 <nrfx_usbd_ep_disable+0x50>)
   40e7a:	4b06      	ldreq	r3, [pc, #24]	; (40e94 <nrfx_usbd_ep_disable+0x54>)
   40e7c:	5c1a      	ldrb	r2, [r3, r0]
   40e7e:	2301      	movs	r3, #1
   40e80:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   40e82:	4a02      	ldr	r2, [pc, #8]	; (40e8c <nrfx_usbd_ep_disable+0x4c>)
   40e84:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   40e88:	bd10      	pop	{r4, pc}
   40e8a:	bf00      	nop
   40e8c:	40027000 	.word	0x40027000
   40e90:	0004b9bd 	.word	0x0004b9bd
   40e94:	0004b9c6 	.word	0x0004b9c6

00040e98 <nrfx_usbd_ep_enable>:
{
   40e98:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40e9a:	b243      	sxtb	r3, r0
   40e9c:	2b00      	cmp	r3, #0
   40e9e:	4b23      	ldr	r3, [pc, #140]	; (40f2c <nrfx_usbd_ep_enable+0x94>)
   40ea0:	4a23      	ldr	r2, [pc, #140]	; (40f30 <nrfx_usbd_ep_enable+0x98>)
   40ea2:	bfa8      	it	ge
   40ea4:	461a      	movge	r2, r3
   40ea6:	f000 030f 	and.w	r3, r0, #15
   40eaa:	f04f 0401 	mov.w	r4, #1
   40eae:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   40eb0:	4a20      	ldr	r2, [pc, #128]	; (40f34 <nrfx_usbd_ep_enable+0x9c>)
   40eb2:	fa04 f101 	lsl.w	r1, r4, r1
{
   40eb6:	4605      	mov	r5, r0
   40eb8:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   40ebc:	da0c      	bge.n	40ed8 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   40ebe:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   40ec2:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40ec4:	07c8      	lsls	r0, r1, #31
   40ec6:	d406      	bmi.n	40ed6 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   40ec8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   40ecc:	fa04 f303 	lsl.w	r3, r4, r3
   40ed0:	4303      	orrs	r3, r0
   40ed2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   40ed6:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   40ed8:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   40edc:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40ede:	07c9      	lsls	r1, r1, #31
   40ee0:	d4f9      	bmi.n	40ed6 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   40ee2:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   40ee6:	fa04 f103 	lsl.w	r1, r4, r3
   40eea:	4331      	orrs	r1, r6
   40eec:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   40ef0:	2b00      	cmp	r3, #0
   40ef2:	d0f0      	beq.n	40ed6 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   40ef4:	0703      	lsls	r3, r0, #28
   40ef6:	d4ee      	bmi.n	40ed6 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   40ef8:	f04f 0320 	mov.w	r3, #32
   40efc:	f3ef 8611 	mrs	r6, BASEPRI
   40f00:	f383 8812 	msr	BASEPRI_MAX, r3
   40f04:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   40f08:	f7ff fdf0 	bl	40aec <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40f0c:	4628      	mov	r0, r5
   40f0e:	f007 fac1 	bl	48494 <ep2bit>
   40f12:	4a09      	ldr	r2, [pc, #36]	; (40f38 <nrfx_usbd_ep_enable+0xa0>)
   40f14:	6813      	ldr	r3, [r2, #0]
   40f16:	fa04 f000 	lsl.w	r0, r4, r0
   40f1a:	ea23 0000 	bic.w	r0, r3, r0
   40f1e:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   40f20:	f386 8811 	msr	BASEPRI, r6
   40f24:	f3bf 8f6f 	isb	sy
}
   40f28:	e7d5      	b.n	40ed6 <nrfx_usbd_ep_enable+0x3e>
   40f2a:	bf00      	nop
   40f2c:	0004b9c6 	.word	0x0004b9c6
   40f30:	0004b9bd 	.word	0x0004b9bd
   40f34:	40027000 	.word	0x40027000
   40f38:	20003820 	.word	0x20003820

00040f3c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   40f3c:	0603      	lsls	r3, r0, #24
{
   40f3e:	b510      	push	{r4, lr}
   40f40:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   40f42:	d405      	bmi.n	40f50 <nrfx_usbd_ep_stall_clear+0x14>
   40f44:	f7ff fd40 	bl	409c8 <nrfx_usbd_ep_stall_check>
   40f48:	b110      	cbz	r0, 40f50 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   40f4a:	4620      	mov	r0, r4
   40f4c:	f7ff fdce 	bl	40aec <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   40f50:	4b01      	ldr	r3, [pc, #4]	; (40f58 <nrfx_usbd_ep_stall_clear+0x1c>)
   40f52:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   40f56:	bd10      	pop	{r4, pc}
   40f58:	40027000 	.word	0x40027000

00040f5c <kscan_matrix_init>:
    }

    return 0;
}

static int kscan_matrix_init(const struct device *dev) {
   40f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   40f60:	6906      	ldr	r6, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   40f62:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   40f64:	6030      	str	r0, [r6, #0]
static int kscan_matrix_init(const struct device *dev) {
   40f66:	4604      	mov	r4, r0
    for (int i = 0; i < config->inputs.len; i++) {
   40f68:	2500      	movs	r5, #0
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   40f6a:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < config->inputs.len; i++) {
   40f6e:	697b      	ldr	r3, [r7, #20]
   40f70:	42ab      	cmp	r3, r5
   40f72:	d90a      	bls.n	40f8a <kscan_matrix_init+0x2e>
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   40f74:	f8d7 a010 	ldr.w	sl, [r7, #16]
   40f78:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
    if (!device_is_ready(gpio->port)) {
   40f7c:	f85a 0035 	ldr.w	r0, [sl, r5, lsl #3]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   40f80:	eb0a 08c5 	add.w	r8, sl, r5, lsl #3
   40f84:	f007 fde0 	bl	48b48 <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   40f88:	b980      	cbnz	r0, 40fac <kscan_matrix_init+0x50>

    kscan_matrix_init_inputs(dev);
    kscan_matrix_init_outputs(dev);
   40f8a:	6867      	ldr	r7, [r4, #4]
    for (int i = 0; i < config->outputs.len; i++) {
   40f8c:	2500      	movs	r5, #0
   40f8e:	69fb      	ldr	r3, [r7, #28]
   40f90:	42ab      	cmp	r3, r5
   40f92:	d82c      	bhi.n	40fee <kscan_matrix_init+0x92>
    kscan_matrix_set_all_outputs(dev, 0);
   40f94:	6860      	ldr	r0, [r4, #4]
   40f96:	2100      	movs	r1, #0
   40f98:	f007 fb84 	bl	486a4 <kscan_matrix_set_all_outputs.isra.0>

    k_work_init_delayable(&data->work, kscan_matrix_work_handler);
   40f9c:	f106 0008 	add.w	r0, r6, #8
   40fa0:	491c      	ldr	r1, [pc, #112]	; (41014 <kscan_matrix_init+0xb8>)
   40fa2:	f008 f825 	bl	48ff0 <k_work_init_delayable>

    return 0;
}
   40fa6:	2000      	movs	r0, #0
   40fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int err = gpio_pin_configure_dt(gpio, GPIO_INPUT);
   40fac:	f44f 7180 	mov.w	r1, #256	; 0x100
   40fb0:	4640      	mov	r0, r8
   40fb2:	f007 fb18 	bl	485e6 <gpio_pin_configure_dt>
    if (err) {
   40fb6:	2800      	cmp	r0, #0
   40fb8:	d1e7      	bne.n	40f8a <kscan_matrix_init+0x2e>
    struct kscan_matrix_irq_callback *irq = &data->irqs[index];
   40fba:	6922      	ldr	r2, [r4, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   40fbc:	4b16      	ldr	r3, [pc, #88]	; (41018 <kscan_matrix_init+0xbc>)
   40fbe:	6b90      	ldr	r0, [r2, #56]	; 0x38
   40fc0:	0129      	lsls	r1, r5, #4
   40fc2:	eb00 1205 	add.w	r2, r0, r5, lsl #4
    irq->dev = dev;
   40fc6:	5044      	str	r4, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   40fc8:	f898 0004 	ldrb.w	r0, [r8, #4]
   40fcc:	fa09 f000 	lsl.w	r0, r9, r0
	callback->pin_mask = pin_mask;
   40fd0:	e9c2 3002 	strd	r3, r0, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   40fd4:	f85a 000b 	ldr.w	r0, [sl, fp]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   40fd8:	6883      	ldr	r3, [r0, #8]
   40fda:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   40fdc:	1d11      	adds	r1, r2, #4
   40fde:	2b00      	cmp	r3, #0
   40fe0:	d0d3      	beq.n	40f8a <kscan_matrix_init+0x2e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   40fe2:	2201      	movs	r2, #1
   40fe4:	4798      	blx	r3
    if (err) {
   40fe6:	2800      	cmp	r0, #0
   40fe8:	d1cf      	bne.n	40f8a <kscan_matrix_init+0x2e>
    for (int i = 0; i < config->inputs.len; i++) {
   40fea:	3501      	adds	r5, #1
   40fec:	e7bf      	b.n	40f6e <kscan_matrix_init+0x12>
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i];
   40fee:	69bb      	ldr	r3, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   40ff0:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i];
   40ff4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
   40ff8:	f007 fda6 	bl	48b48 <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   40ffc:	2800      	cmp	r0, #0
   40ffe:	d0c9      	beq.n	40f94 <kscan_matrix_init+0x38>
    int err = gpio_pin_configure_dt(gpio, GPIO_OUTPUT);
   41000:	f44f 7100 	mov.w	r1, #512	; 0x200
   41004:	4640      	mov	r0, r8
   41006:	f007 faee 	bl	485e6 <gpio_pin_configure_dt>
    if (err) {
   4100a:	2800      	cmp	r0, #0
   4100c:	d1c2      	bne.n	40f94 <kscan_matrix_init+0x38>
    for (int i = 0; i < config->outputs.len; i++) {
   4100e:	3501      	adds	r5, #1
   41010:	e7bd      	b.n	40f8e <kscan_matrix_init+0x32>
   41012:	bf00      	nop
   41014:	0004885b 	.word	0x0004885b
   41018:	00048881 	.word	0x00048881

0004101c <vddh_sample_fetch>:
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
    // Make sure selected channel is supported
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   4101c:	f1a1 0327 	sub.w	r3, r1, #39	; 0x27
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   41020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   41022:	b299      	uxth	r1, r3
   41024:	2912      	cmp	r1, #18
   41026:	d828      	bhi.n	4107a <vddh_sample_fetch+0x5e>
   41028:	4b15      	ldr	r3, [pc, #84]	; (41080 <vddh_sample_fetch+0x64>)
   4102a:	40cb      	lsrs	r3, r1
   4102c:	43db      	mvns	r3, r3
   4102e:	f013 0401 	ands.w	r4, r3, #1
   41032:	d122      	bne.n	4107a <vddh_sample_fetch+0x5e>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   41034:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   41036:	4813      	ldr	r0, [pc, #76]	; (41084 <vddh_sample_fetch+0x68>)
   41038:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   4103a:	f105 0108 	add.w	r1, r5, #8
   4103e:	6873      	ldr	r3, [r6, #4]
   41040:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   41042:	76ac      	strb	r4, [r5, #26]

    if (rc != 0) {
   41044:	4604      	mov	r4, r0
   41046:	b9a8      	cbnz	r0, 41074 <vddh_sample_fetch+0x58>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   41048:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   4104a:	8932      	ldrh	r2, [r6, #8]
   4104c:	7828      	ldrb	r0, [r5, #0]
   4104e:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   41050:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   41052:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   41054:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   41056:	f7fc ff79 	bl	3df4c <adc_gain_invert>
	if (ret == 0) {
   4105a:	4604      	mov	r4, r0
   4105c:	b950      	cbnz	r0, 41074 <vddh_sample_fetch+0x58>
		*valp = (adc_mv >> resolution);
   4105e:	9801      	ldr	r0, [sp, #4]
   41060:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   41062:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   41066:	b280      	uxth	r0, r0
   41068:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   4106a:	b200      	sxth	r0, r0
   4106c:	f007 fc5f 	bl	4892e <lithium_ion_mv_to_pct>
   41070:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   41074:	4620      	mov	r0, r4
   41076:	b003      	add	sp, #12
   41078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -ENOTSUP;
   4107a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   4107e:	e7f9      	b.n	41074 <vddh_sample_fetch+0x58>
   41080:	00040021 	.word	0x00040021
   41084:	000497f8 	.word	0x000497f8

00041088 <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   41088:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   4108a:	6904      	ldr	r4, [r0, #16]
   4108c:	4d12      	ldr	r5, [pc, #72]	; (410d8 <vddh_init+0x50>)
   4108e:	4628      	mov	r0, r5
   41090:	f007 fd5a 	bl	48b48 <z_device_is_ready>

    if (!device_is_ready(adc)) {
   41094:	b1e0      	cbz	r0, 410d0 <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   41096:	2214      	movs	r2, #20
   41098:	2100      	movs	r1, #0
   4109a:	f104 0008 	add.w	r0, r4, #8
   4109e:	f003 ff1a 	bl	44ed6 <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   410a2:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   410a6:	490d      	ldr	r1, [pc, #52]	; (410dc <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   410a8:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   410aa:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   410ae:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   410b2:	2202      	movs	r2, #2
   410b4:	2301      	movs	r3, #1
   410b6:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   410b8:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   410bc:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   410be:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   410c0:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   410c2:	68ab      	ldr	r3, [r5, #8]
   410c4:	4621      	mov	r1, r4
   410c6:	4628      	mov	r0, r5
   410c8:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   410ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   410ce:	4718      	bx	r3
   410d0:	f06f 0012 	mvn.w	r0, #18
   410d4:	bd70      	pop	{r4, r5, r6, pc}
   410d6:	bf00      	nop
   410d8:	000497f8 	.word	0x000497f8
   410dc:	40280401 	.word	0x40280401

000410e0 <ec11_init_interrupt>:
    setup_int(dev, true);

    return 0;
}

int ec11_init_interrupt(const struct device *dev) {
   410e0:	b570      	push	{r4, r5, r6, lr}
    struct ec11_data *drv_data = dev->data;
   410e2:	6904      	ldr	r4, [r0, #16]
    const struct ec11_config *drv_cfg = dev->config;
   410e4:	6846      	ldr	r6, [r0, #4]

    drv_data->dev = dev;
   410e6:	6260      	str	r0, [r4, #36]	; 0x24
    /* setup gpio interrupt */

    gpio_init_callback(&drv_data->a_gpio_cb, ec11_a_gpio_callback, BIT(drv_cfg->a_pin));
   410e8:	7933      	ldrb	r3, [r6, #4]
	callback->handler = handler;
   410ea:	4a15      	ldr	r2, [pc, #84]	; (41140 <ec11_init_interrupt+0x60>)

    if (gpio_add_callback(drv_data->a, &drv_data->a_gpio_cb) < 0) {
   410ec:	6820      	ldr	r0, [r4, #0]
    gpio_init_callback(&drv_data->a_gpio_cb, ec11_a_gpio_callback, BIT(drv_cfg->a_pin));
   410ee:	2501      	movs	r5, #1
   410f0:	fa05 f303 	lsl.w	r3, r5, r3
	callback->pin_mask = pin_mask;
   410f4:	e9c4 2304 	strd	r2, r3, [r4, #16]
	if (api->manage_callback == NULL) {
   410f8:	6883      	ldr	r3, [r0, #8]
   410fa:	69db      	ldr	r3, [r3, #28]
   410fc:	f104 010c 	add.w	r1, r4, #12
   41100:	b913      	cbnz	r3, 41108 <ec11_init_interrupt+0x28>
        LOG_DBG("Failed to set A callback!");
        return -EIO;
   41102:	f06f 0004 	mvn.w	r0, #4
#elif defined(CONFIG_EC11_TRIGGER_GLOBAL_THREAD)
    k_work_init(&drv_data->work, ec11_work_cb);
#endif

    return 0;
}
   41106:	bd70      	pop	{r4, r5, r6, pc}
	return api->manage_callback(port, callback, true);
   41108:	462a      	mov	r2, r5
   4110a:	4798      	blx	r3
    if (gpio_add_callback(drv_data->a, &drv_data->a_gpio_cb) < 0) {
   4110c:	2800      	cmp	r0, #0
   4110e:	dbf8      	blt.n	41102 <ec11_init_interrupt+0x22>
    gpio_init_callback(&drv_data->b_gpio_cb, ec11_b_gpio_callback, BIT(drv_cfg->b_pin));
   41110:	7b33      	ldrb	r3, [r6, #12]
	callback->handler = handler;
   41112:	4a0c      	ldr	r2, [pc, #48]	; (41144 <ec11_init_interrupt+0x64>)
    if (gpio_add_callback(drv_data->b, &drv_data->b_gpio_cb) < 0) {
   41114:	6860      	ldr	r0, [r4, #4]
    gpio_init_callback(&drv_data->b_gpio_cb, ec11_b_gpio_callback, BIT(drv_cfg->b_pin));
   41116:	fa05 f303 	lsl.w	r3, r5, r3
	callback->pin_mask = pin_mask;
   4111a:	e9c4 2307 	strd	r2, r3, [r4, #28]
	if (api->manage_callback == NULL) {
   4111e:	6883      	ldr	r3, [r0, #8]
   41120:	69db      	ldr	r3, [r3, #28]
   41122:	f104 0118 	add.w	r1, r4, #24
   41126:	2b00      	cmp	r3, #0
   41128:	d0eb      	beq.n	41102 <ec11_init_interrupt+0x22>
	return api->manage_callback(port, callback, true);
   4112a:	462a      	mov	r2, r5
   4112c:	4798      	blx	r3
    if (gpio_add_callback(drv_data->b, &drv_data->b_gpio_cb) < 0) {
   4112e:	2800      	cmp	r0, #0
   41130:	dbe7      	blt.n	41102 <ec11_init_interrupt+0x22>
    k_work_init(&drv_data->work, ec11_work_cb);
   41132:	f104 0030 	add.w	r0, r4, #48	; 0x30
   41136:	4904      	ldr	r1, [pc, #16]	; (41148 <ec11_init_interrupt+0x68>)
   41138:	f007 ff34 	bl	48fa4 <k_work_init>
    return 0;
   4113c:	2000      	movs	r0, #0
   4113e:	e7e2      	b.n	41106 <ec11_init_interrupt+0x26>
   41140:	00048b07 	.word	0x00048b07
   41144:	00048aef 	.word	0x00048aef
   41148:	00048ad3 	.word	0x00048ad3

0004114c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   4114c:	4b0e      	ldr	r3, [pc, #56]	; (41188 <z_sys_init_run_level+0x3c>)
{
   4114e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   41150:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   41154:	3001      	adds	r0, #1
   41156:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   4115a:	42a6      	cmp	r6, r4
   4115c:	d800      	bhi.n	41160 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   4115e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   41160:	e9d4 3500 	ldrd	r3, r5, [r4]
   41164:	4628      	mov	r0, r5
   41166:	4798      	blx	r3
		if (dev != NULL) {
   41168:	b165      	cbz	r5, 41184 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   4116a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   4116c:	b130      	cbz	r0, 4117c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   4116e:	2800      	cmp	r0, #0
   41170:	bfb8      	it	lt
   41172:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   41174:	28ff      	cmp	r0, #255	; 0xff
   41176:	bfa8      	it	ge
   41178:	20ff      	movge	r0, #255	; 0xff
   4117a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   4117c:	785a      	ldrb	r2, [r3, #1]
   4117e:	f042 0201 	orr.w	r2, r2, #1
   41182:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   41184:	3408      	adds	r4, #8
   41186:	e7e8      	b.n	4115a <z_sys_init_run_level+0xe>
   41188:	0004b370 	.word	0x0004b370

0004118c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   4118c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   4118e:	4605      	mov	r5, r0
   41190:	b910      	cbnz	r0, 41198 <z_impl_device_get_binding+0xc>
		return NULL;
   41192:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   41194:	4620      	mov	r0, r4
   41196:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   41198:	7803      	ldrb	r3, [r0, #0]
   4119a:	2b00      	cmp	r3, #0
   4119c:	d0f9      	beq.n	41192 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   4119e:	4c0e      	ldr	r4, [pc, #56]	; (411d8 <z_impl_device_get_binding+0x4c>)
   411a0:	4e0e      	ldr	r6, [pc, #56]	; (411dc <z_impl_device_get_binding+0x50>)
   411a2:	42b4      	cmp	r4, r6
   411a4:	d108      	bne.n	411b8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   411a6:	4c0c      	ldr	r4, [pc, #48]	; (411d8 <z_impl_device_get_binding+0x4c>)
   411a8:	42b4      	cmp	r4, r6
   411aa:	d0f2      	beq.n	41192 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   411ac:	4620      	mov	r0, r4
   411ae:	f007 fccb 	bl	48b48 <z_device_is_ready>
   411b2:	b950      	cbnz	r0, 411ca <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   411b4:	3418      	adds	r4, #24
   411b6:	e7f7      	b.n	411a8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   411b8:	4620      	mov	r0, r4
   411ba:	f007 fcc5 	bl	48b48 <z_device_is_ready>
   411be:	b110      	cbz	r0, 411c6 <z_impl_device_get_binding+0x3a>
   411c0:	6823      	ldr	r3, [r4, #0]
   411c2:	42ab      	cmp	r3, r5
   411c4:	d0e6      	beq.n	41194 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   411c6:	3418      	adds	r4, #24
   411c8:	e7eb      	b.n	411a2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   411ca:	6821      	ldr	r1, [r4, #0]
   411cc:	4628      	mov	r0, r5
   411ce:	f003 fe49 	bl	44e64 <strcmp>
   411d2:	2800      	cmp	r0, #0
   411d4:	d1ee      	bne.n	411b4 <z_impl_device_get_binding+0x28>
   411d6:	e7dd      	b.n	41194 <z_impl_device_get_binding+0x8>
   411d8:	00049798 	.word	0x00049798
   411dc:	000498e8 	.word	0x000498e8

000411e0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   411e0:	4b01      	ldr	r3, [pc, #4]	; (411e8 <z_impl_z_errno+0x8>)
   411e2:	6898      	ldr	r0, [r3, #8]
}
   411e4:	3064      	adds	r0, #100	; 0x64
   411e6:	4770      	bx	lr
   411e8:	20003aec 	.word	0x20003aec

000411ec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   411ec:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   411ee:	2300      	movs	r3, #0
{
   411f0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   411f2:	2201      	movs	r2, #1
   411f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   411f8:	220f      	movs	r2, #15
   411fa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   411fe:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   41200:	4c0b      	ldr	r4, [pc, #44]	; (41230 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   41202:	4b0c      	ldr	r3, [pc, #48]	; (41234 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   41204:	490c      	ldr	r1, [pc, #48]	; (41238 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   41206:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   41208:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   4120c:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   41210:	f44f 72a0 	mov.w	r2, #320	; 0x140
   41214:	9300      	str	r3, [sp, #0]
   41216:	fb02 1100 	mla	r1, r2, r0, r1
   4121a:	4b08      	ldr	r3, [pc, #32]	; (4123c <init_idle_thread+0x50>)
   4121c:	4620      	mov	r0, r4
   4121e:	f000 f90b 	bl	41438 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   41222:	7b63      	ldrb	r3, [r4, #13]
   41224:	f023 0304 	bic.w	r3, r3, #4
   41228:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   4122a:	b006      	add	sp, #24
   4122c:	bd10      	pop	{r4, pc}
   4122e:	bf00      	nop
   41230:	20001848 	.word	0x20001848
   41234:	20003aec 	.word	0x20003aec
   41238:	200059b0 	.word	0x200059b0
   4123c:	000415a9 	.word	0x000415a9

00041240 <bg_thread_main>:
{
   41240:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   41242:	4b0a      	ldr	r3, [pc, #40]	; (4126c <bg_thread_main+0x2c>)
   41244:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   41246:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   41248:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   4124a:	f7ff ff7f 	bl	4114c <z_sys_init_run_level>
	boot_banner();
   4124e:	f008 fa28 	bl	496a2 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   41252:	2003      	movs	r0, #3
   41254:	f7ff ff7a 	bl	4114c <z_sys_init_run_level>
	z_init_static_threads();
   41258:	f000 f94a 	bl	414f0 <z_init_static_threads>
	main();
   4125c:	f7e6 ff5a 	bl	28114 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   41260:	4a03      	ldr	r2, [pc, #12]	; (41270 <bg_thread_main+0x30>)
   41262:	7b13      	ldrb	r3, [r2, #12]
   41264:	f023 0301 	bic.w	r3, r3, #1
   41268:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   4126a:	bd08      	pop	{r3, pc}
   4126c:	20003c80 	.word	0x20003c80
   41270:	200018c8 	.word	0x200018c8

00041274 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   41274:	4802      	ldr	r0, [pc, #8]	; (41280 <z_bss_zero+0xc>)
   41276:	4a03      	ldr	r2, [pc, #12]	; (41284 <z_bss_zero+0x10>)
   41278:	2100      	movs	r1, #0
   4127a:	1a12      	subs	r2, r2, r0
   4127c:	f003 be2b 	b.w	44ed6 <memset>
   41280:	20000de0 	.word	0x20000de0
   41284:	20003c84 	.word	0x20003c84

00041288 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   41288:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   4128a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 41354 <z_cstart+0xcc>
   4128e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   41290:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   41294:	4d30      	ldr	r5, [pc, #192]	; (41358 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   41296:	4e31      	ldr	r6, [pc, #196]	; (4135c <z_cstart+0xd4>)
   41298:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   4129a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 41360 <z_cstart+0xd8>
   4129e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   412a2:	2400      	movs	r4, #0
   412a4:	616b      	str	r3, [r5, #20]
   412a6:	23e0      	movs	r3, #224	; 0xe0
   412a8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   412ac:	77ec      	strb	r4, [r5, #31]
   412ae:	762c      	strb	r4, [r5, #24]
   412b0:	766c      	strb	r4, [r5, #25]
   412b2:	76ac      	strb	r4, [r5, #26]
   412b4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   412b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   412ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   412be:	626b      	str	r3, [r5, #36]	; 0x24
   412c0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   412c4:	f7e9 fa64 	bl	2a790 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   412c8:	f7e9 f848 	bl	2a35c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   412cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   412d0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   412d2:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   412d4:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   412d6:	f7e9 fb11 	bl	2a8fc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   412da:	f7e9 faa1 	bl	2a820 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   412de:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   412e2:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   412e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   412e8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   412ec:	f001 fb04 	bl	428f8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   412f0:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   412f2:	f007 fc28 	bl	48b46 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   412f6:	4620      	mov	r0, r4
   412f8:	f7ff ff28 	bl	4114c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   412fc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   412fe:	4d19      	ldr	r5, [pc, #100]	; (41364 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   41300:	f7ff ff24 	bl	4114c <z_sys_init_run_level>
	z_sched_init();
   41304:	f000 ff5a 	bl	421bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   41308:	4b17      	ldr	r3, [pc, #92]	; (41368 <z_cstart+0xe0>)
   4130a:	9305      	str	r3, [sp, #20]
   4130c:	2301      	movs	r3, #1
   4130e:	4917      	ldr	r1, [pc, #92]	; (4136c <z_cstart+0xe4>)
   41310:	9400      	str	r4, [sp, #0]
   41312:	e9cd 4303 	strd	r4, r3, [sp, #12]
   41316:	f44f 6280 	mov.w	r2, #1024	; 0x400
   4131a:	464b      	mov	r3, r9
   4131c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   41320:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   41322:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   41324:	f000 f888 	bl	41438 <z_setup_new_thread>
   41328:	7b6a      	ldrb	r2, [r5, #13]
   4132a:	4607      	mov	r7, r0
   4132c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   41330:	4628      	mov	r0, r5
   41332:	736a      	strb	r2, [r5, #13]
   41334:	f007 ff03 	bl	4913e <z_ready_thread>
		init_idle_thread(i);
   41338:	4620      	mov	r0, r4
   4133a:	f7ff ff57 	bl	411ec <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   4133e:	4b0c      	ldr	r3, [pc, #48]	; (41370 <z_cstart+0xe8>)
   41340:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   41342:	464a      	mov	r2, r9
   41344:	4639      	mov	r1, r7
   41346:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   41348:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   4134a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   4134e:	f7e9 f90d 	bl	2a56c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   41352:	bf00      	nop
   41354:	200062f0 	.word	0x200062f0
   41358:	e000ed00 	.word	0xe000ed00
   4135c:	20003aec 	.word	0x20003aec
   41360:	00041241 	.word	0x00041241
   41364:	200018c8 	.word	0x200018c8
   41368:	0004b9d7 	.word	0x0004b9d7
   4136c:	200055b0 	.word	0x200055b0
   41370:	20001848 	.word	0x20001848

00041374 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   41374:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   41376:	4c06      	ldr	r4, [pc, #24]	; (41390 <statics_init+0x1c>)
   41378:	4d06      	ldr	r5, [pc, #24]	; (41394 <statics_init+0x20>)
   4137a:	42ac      	cmp	r4, r5
   4137c:	d301      	bcc.n	41382 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   4137e:	2000      	movs	r0, #0
   41380:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   41382:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   41386:	4620      	mov	r0, r4
   41388:	f007 fc0f 	bl	48baa <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   4138c:	3414      	adds	r4, #20
   4138e:	e7f4      	b.n	4137a <statics_init+0x6>
   41390:	20000b48 	.word	0x20000b48
   41394:	20000b5c 	.word	0x20000b5c

00041398 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   41398:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   4139a:	4b0e      	ldr	r3, [pc, #56]	; (413d4 <init_mem_slab_module+0x3c>)
   4139c:	4c0e      	ldr	r4, [pc, #56]	; (413d8 <init_mem_slab_module+0x40>)
   4139e:	42a3      	cmp	r3, r4
   413a0:	d301      	bcc.n	413a6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   413a2:	2000      	movs	r0, #0
	return rc;
}
   413a4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   413a6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   413aa:	ea41 0200 	orr.w	r2, r1, r0
   413ae:	f012 0203 	ands.w	r2, r2, #3
   413b2:	d10b      	bne.n	413cc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   413b4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   413b6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   413b8:	42aa      	cmp	r2, r5
   413ba:	d101      	bne.n	413c0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   413bc:	331c      	adds	r3, #28
   413be:	e7ee      	b.n	4139e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   413c0:	695e      	ldr	r6, [r3, #20]
   413c2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   413c4:	3201      	adds	r2, #1
		slab->free_list = p;
   413c6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   413c8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   413ca:	e7f5      	b.n	413b8 <init_mem_slab_module+0x20>
	return rc;
   413cc:	f06f 0015 	mvn.w	r0, #21
   413d0:	e7e8      	b.n	413a4 <init_mem_slab_module+0xc>
   413d2:	bf00      	nop
   413d4:	20000ad8 	.word	0x20000ad8
   413d8:	20000b48 	.word	0x20000b48

000413dc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   413dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   413de:	460c      	mov	r4, r1
	__asm__ volatile(
   413e0:	f04f 0520 	mov.w	r5, #32
   413e4:	f3ef 8111 	mrs	r1, BASEPRI
   413e8:	f385 8812 	msr	BASEPRI_MAX, r5
   413ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   413f0:	6945      	ldr	r5, [r0, #20]
   413f2:	b15d      	cbz	r5, 4140c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   413f4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   413f6:	682b      	ldr	r3, [r5, #0]
   413f8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   413fa:	6983      	ldr	r3, [r0, #24]
   413fc:	3301      	adds	r3, #1
   413fe:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   41400:	2000      	movs	r0, #0
	__asm__ volatile(
   41402:	f381 8811 	msr	BASEPRI, r1
   41406:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   4140a:	e011      	b.n	41430 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   4140c:	ea52 0c03 	orrs.w	ip, r2, r3
   41410:	d103      	bne.n	4141a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   41412:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   41414:	f06f 000b 	mvn.w	r0, #11
   41418:	e7f3      	b.n	41402 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   4141a:	e9cd 2300 	strd	r2, r3, [sp]
   4141e:	4602      	mov	r2, r0
   41420:	3008      	adds	r0, #8
   41422:	f000 fe21 	bl	42068 <z_pend_curr>
		if (result == 0) {
   41426:	b918      	cbnz	r0, 41430 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   41428:	4b02      	ldr	r3, [pc, #8]	; (41434 <k_mem_slab_alloc+0x58>)
   4142a:	689b      	ldr	r3, [r3, #8]
   4142c:	695b      	ldr	r3, [r3, #20]
   4142e:	6023      	str	r3, [r4, #0]
}
   41430:	b003      	add	sp, #12
   41432:	bd30      	pop	{r4, r5, pc}
   41434:	20003aec 	.word	0x20003aec

00041438 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   41438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   4143c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   4143e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   41440:	2604      	movs	r6, #4
   41442:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   41444:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   41446:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   41448:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4144c:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   4144e:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   41452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   41454:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   41456:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   4145a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   4145e:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   41462:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   41464:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   41466:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   41468:	9202      	str	r2, [sp, #8]
   4146a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   4146c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   4146e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   41472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   41474:	9200      	str	r2, [sp, #0]
   41476:	4642      	mov	r2, r8
{
   41478:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4147a:	f7e9 f85b 	bl	2a534 <arch_new_thread>
	if (!_current) {
   4147e:	4b05      	ldr	r3, [pc, #20]	; (41494 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   41480:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   41482:	689b      	ldr	r3, [r3, #8]
   41484:	b103      	cbz	r3, 41488 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   41486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   41488:	6763      	str	r3, [r4, #116]	; 0x74
}
   4148a:	4640      	mov	r0, r8
   4148c:	b004      	add	sp, #16
   4148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41492:	bf00      	nop
   41494:	20003aec 	.word	0x20003aec

00041498 <z_impl_k_thread_create>:
{
   41498:	b5f0      	push	{r4, r5, r6, r7, lr}
   4149a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   4149c:	2700      	movs	r7, #0
   4149e:	9705      	str	r7, [sp, #20]
   414a0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   414a2:	9704      	str	r7, [sp, #16]
   414a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   414a6:	9703      	str	r7, [sp, #12]
   414a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   414aa:	9702      	str	r7, [sp, #8]
{
   414ac:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   414b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   414b2:	9701      	str	r7, [sp, #4]
   414b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   414b6:	9700      	str	r7, [sp, #0]
{
   414b8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   414ba:	f7ff ffbd 	bl	41438 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   414be:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   414c2:	bf08      	it	eq
   414c4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   414c8:	d005      	beq.n	414d6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   414ca:	ea55 0306 	orrs.w	r3, r5, r6
   414ce:	d105      	bne.n	414dc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   414d0:	4620      	mov	r0, r4
   414d2:	f000 fd6d 	bl	41fb0 <z_sched_start>
}
   414d6:	4620      	mov	r0, r4
   414d8:	b007      	add	sp, #28
   414da:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   414dc:	4903      	ldr	r1, [pc, #12]	; (414ec <z_impl_k_thread_create+0x54>)
   414de:	4632      	mov	r2, r6
   414e0:	462b      	mov	r3, r5
   414e2:	f104 0018 	add.w	r0, r4, #24
   414e6:	f000 fff5 	bl	424d4 <z_add_timeout>
   414ea:	e7f4      	b.n	414d6 <z_impl_k_thread_create+0x3e>
   414ec:	0004915f 	.word	0x0004915f

000414f0 <z_init_static_threads>:
{
   414f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   414f4:	4c29      	ldr	r4, [pc, #164]	; (4159c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   414f6:	4d2a      	ldr	r5, [pc, #168]	; (415a0 <z_init_static_threads+0xb0>)
{
   414f8:	b087      	sub	sp, #28
   414fa:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   414fc:	42ae      	cmp	r6, r5
   414fe:	f104 0430 	add.w	r4, r4, #48	; 0x30
   41502:	d30f      	bcc.n	41524 <z_init_static_threads+0x34>
	k_sched_lock();
   41504:	f000 fc70 	bl	41de8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   41508:	4c24      	ldr	r4, [pc, #144]	; (4159c <z_init_static_threads+0xac>)
   4150a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 415a4 <z_init_static_threads+0xb4>
   4150e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   41512:	f240 37e7 	movw	r7, #999	; 0x3e7
   41516:	42ac      	cmp	r4, r5
   41518:	d320      	bcc.n	4155c <z_init_static_threads+0x6c>
}
   4151a:	b007      	add	sp, #28
   4151c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   41520:	f000 be30 	b.w	42184 <k_sched_unlock>
		z_setup_new_thread(
   41524:	f854 3c04 	ldr.w	r3, [r4, #-4]
   41528:	9305      	str	r3, [sp, #20]
   4152a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   4152e:	9304      	str	r3, [sp, #16]
   41530:	f854 3c14 	ldr.w	r3, [r4, #-20]
   41534:	9303      	str	r3, [sp, #12]
   41536:	f854 3c18 	ldr.w	r3, [r4, #-24]
   4153a:	9302      	str	r3, [sp, #8]
   4153c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   41540:	9301      	str	r3, [sp, #4]
   41542:	f854 3c20 	ldr.w	r3, [r4, #-32]
   41546:	9300      	str	r3, [sp, #0]
   41548:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   4154c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   41550:	f7ff ff72 	bl	41438 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   41554:	f854 3c30 	ldr.w	r3, [r4, #-48]
   41558:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   4155a:	e7ce      	b.n	414fa <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   4155c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4155e:	1c5a      	adds	r2, r3, #1
   41560:	d00d      	beq.n	4157e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   41562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   41566:	2100      	movs	r1, #0
   41568:	4638      	mov	r0, r7
   4156a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4156e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   41572:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41576:	d104      	bne.n	41582 <z_init_static_threads+0x92>
	z_sched_start(thread);
   41578:	4640      	mov	r0, r8
   4157a:	f000 fd19 	bl	41fb0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   4157e:	3430      	adds	r4, #48	; 0x30
   41580:	e7c9      	b.n	41516 <z_init_static_threads+0x26>
   41582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   41586:	2300      	movs	r3, #0
   41588:	f7e4 fdba 	bl	26100 <__aeabi_uldivmod>
   4158c:	4602      	mov	r2, r0
   4158e:	460b      	mov	r3, r1
   41590:	f108 0018 	add.w	r0, r8, #24
   41594:	4649      	mov	r1, r9
   41596:	f000 ff9d 	bl	424d4 <z_add_timeout>
   4159a:	e7f0      	b.n	4157e <z_init_static_threads+0x8e>
   4159c:	20000a64 	.word	0x20000a64
   415a0:	20000a64 	.word	0x20000a64
   415a4:	0004915f 	.word	0x0004915f

000415a8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   415a8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   415aa:	4c0b      	ldr	r4, [pc, #44]	; (415d8 <idle+0x30>)
	return !z_sys_post_kernel;
   415ac:	4d0b      	ldr	r5, [pc, #44]	; (415dc <idle+0x34>)
	__asm__ volatile(
   415ae:	f04f 0220 	mov.w	r2, #32
   415b2:	f3ef 8311 	mrs	r3, BASEPRI
   415b6:	f382 8812 	msr	BASEPRI_MAX, r2
   415ba:	f3bf 8f6f 	isb	sy
   415be:	f007 fe8a 	bl	492d6 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   415c2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   415c4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   415c6:	b913      	cbnz	r3, 415ce <idle+0x26>
	arch_cpu_idle();
   415c8:	f7e8 fece 	bl	2a368 <arch_cpu_idle>
}
   415cc:	e7ef      	b.n	415ae <idle+0x6>
   415ce:	f7e8 fcc5 	bl	29f5c <pm_system_suspend>
   415d2:	2800      	cmp	r0, #0
   415d4:	d1eb      	bne.n	415ae <idle+0x6>
   415d6:	e7f7      	b.n	415c8 <idle+0x20>
   415d8:	20003aec 	.word	0x20003aec
   415dc:	20003c80 	.word	0x20003c80

000415e0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   415e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   415e4:	4604      	mov	r4, r0
   415e6:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   415e8:	f100 0808 	add.w	r8, r0, #8
   415ec:	f04f 0120 	mov.w	r1, #32
   415f0:	f3ef 8711 	mrs	r7, BASEPRI
   415f4:	f381 8812 	msr	BASEPRI_MAX, r1
   415f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   415fc:	6a05      	ldr	r5, [r0, #32]
   415fe:	68c1      	ldr	r1, [r0, #12]
   41600:	428d      	cmp	r5, r1
   41602:	d22f      	bcs.n	41664 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   41604:	f007 fe0c 	bl	49220 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   41608:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   4160a:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   4160c:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   4160e:	b178      	cbz	r0, 41630 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   41610:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   41612:	6940      	ldr	r0, [r0, #20]
   41614:	f003 fc54 	bl	44ec0 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   41618:	4628      	mov	r0, r5
   4161a:	67ec      	str	r4, [r5, #124]	; 0x7c
   4161c:	f007 fd8f 	bl	4913e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   41620:	4640      	mov	r0, r8
   41622:	4639      	mov	r1, r7
   41624:	f000 fbce 	bl	41dc4 <z_reschedule>
			return 0;
   41628:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   4162a:	b002      	add	sp, #8
   4162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   41630:	69e0      	ldr	r0, [r4, #28]
   41632:	f003 fc45 	bl	44ec0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   41636:	69e3      	ldr	r3, [r4, #28]
   41638:	68a2      	ldr	r2, [r4, #8]
   4163a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   4163c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   4163e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   41640:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   41642:	bf04      	itt	eq
   41644:	6923      	ldreq	r3, [r4, #16]
   41646:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   41648:	6a23      	ldr	r3, [r4, #32]
   4164a:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   4164c:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   41650:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   41652:	2110      	movs	r1, #16
   41654:	f007 fff9 	bl	4964a <z_handle_obj_poll_events>
		result = 0;
   41658:	2000      	movs	r0, #0
	__asm__ volatile(
   4165a:	f387 8811 	msr	BASEPRI, r7
   4165e:	f3bf 8f6f 	isb	sy
	return result;
   41662:	e7e2      	b.n	4162a <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41664:	ea52 0103 	orrs.w	r1, r2, r3
   41668:	d00a      	beq.n	41680 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   4166a:	4907      	ldr	r1, [pc, #28]	; (41688 <z_impl_k_msgq_put+0xa8>)
   4166c:	6889      	ldr	r1, [r1, #8]
   4166e:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   41670:	e9cd 2300 	strd	r2, r3, [sp]
   41674:	4639      	mov	r1, r7
   41676:	4602      	mov	r2, r0
   41678:	4640      	mov	r0, r8
   4167a:	f000 fcf5 	bl	42068 <z_pend_curr>
		return result;
   4167e:	e7d4      	b.n	4162a <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   41680:	f06f 0022 	mvn.w	r0, #34	; 0x22
   41684:	e7e9      	b.n	4165a <z_impl_k_msgq_put+0x7a>
   41686:	bf00      	nop
   41688:	20003aec 	.word	0x20003aec

0004168c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   4168c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4168e:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   41690:	f104 0708 	add.w	r7, r4, #8
{
   41694:	4608      	mov	r0, r1
	__asm__ volatile(
   41696:	f04f 0120 	mov.w	r1, #32
   4169a:	f3ef 8611 	mrs	r6, BASEPRI
   4169e:	f381 8812 	msr	BASEPRI_MAX, r1
   416a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   416a6:	6a21      	ldr	r1, [r4, #32]
   416a8:	2900      	cmp	r1, #0
   416aa:	d031      	beq.n	41710 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   416ac:	68a2      	ldr	r2, [r4, #8]
   416ae:	69a1      	ldr	r1, [r4, #24]
   416b0:	f003 fc06 	bl	44ec0 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   416b4:	69a3      	ldr	r3, [r4, #24]
   416b6:	68a2      	ldr	r2, [r4, #8]
   416b8:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   416ba:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   416bc:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   416be:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   416c0:	bf04      	itt	eq
   416c2:	6923      	ldreq	r3, [r4, #16]
   416c4:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   416c6:	6a23      	ldr	r3, [r4, #32]
   416c8:	3b01      	subs	r3, #1
   416ca:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   416cc:	4620      	mov	r0, r4
   416ce:	f007 fda7 	bl	49220 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   416d2:	4605      	mov	r5, r0
   416d4:	b360      	cbz	r0, 41730 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   416d6:	6941      	ldr	r1, [r0, #20]
   416d8:	68a2      	ldr	r2, [r4, #8]
   416da:	69e0      	ldr	r0, [r4, #28]
   416dc:	f003 fbf0 	bl	44ec0 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   416e0:	69e3      	ldr	r3, [r4, #28]
   416e2:	68a2      	ldr	r2, [r4, #8]
   416e4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   416e6:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   416e8:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   416ea:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   416ec:	bf04      	itt	eq
   416ee:	6923      	ldreq	r3, [r4, #16]
   416f0:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   416f2:	6a23      	ldr	r3, [r4, #32]
   416f4:	3301      	adds	r3, #1
   416f6:	6223      	str	r3, [r4, #32]
   416f8:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   416fa:	4628      	mov	r0, r5
   416fc:	67ec      	str	r4, [r5, #124]	; 0x7c
   416fe:	f007 fd1e 	bl	4913e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   41702:	4638      	mov	r0, r7
   41704:	4631      	mov	r1, r6
   41706:	f000 fb5d 	bl	41dc4 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   4170a:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   4170c:	b003      	add	sp, #12
   4170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41710:	ea52 0103 	orrs.w	r1, r2, r3
   41714:	d00a      	beq.n	4172c <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   41716:	4909      	ldr	r1, [pc, #36]	; (4173c <z_impl_k_msgq_get+0xb0>)
   41718:	6889      	ldr	r1, [r1, #8]
   4171a:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   4171c:	e9cd 2300 	strd	r2, r3, [sp]
   41720:	4631      	mov	r1, r6
   41722:	4622      	mov	r2, r4
   41724:	4638      	mov	r0, r7
   41726:	f000 fc9f 	bl	42068 <z_pend_curr>
		return result;
   4172a:	e7ef      	b.n	4170c <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   4172c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   41730:	f386 8811 	msr	BASEPRI, r6
   41734:	f3bf 8f6f 	isb	sy
	return result;
   41738:	e7e8      	b.n	4170c <z_impl_k_msgq_get+0x80>
   4173a:	bf00      	nop
   4173c:	20003aec 	.word	0x20003aec

00041740 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   41740:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   41744:	4604      	mov	r4, r0
   41746:	4617      	mov	r7, r2
   41748:	461e      	mov	r6, r3
	__asm__ volatile(
   4174a:	f04f 0320 	mov.w	r3, #32
   4174e:	f3ef 8811 	mrs	r8, BASEPRI
   41752:	f383 8812 	msr	BASEPRI_MAX, r3
   41756:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   4175a:	68c3      	ldr	r3, [r0, #12]
   4175c:	4a32      	ldr	r2, [pc, #200]	; (41828 <z_impl_k_mutex_lock+0xe8>)
   4175e:	b16b      	cbz	r3, 4177c <z_impl_k_mutex_lock+0x3c>
   41760:	6880      	ldr	r0, [r0, #8]
   41762:	6891      	ldr	r1, [r2, #8]
   41764:	4288      	cmp	r0, r1
   41766:	d019      	beq.n	4179c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   41768:	ea57 0306 	orrs.w	r3, r7, r6
   4176c:	d118      	bne.n	417a0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   4176e:	f388 8811 	msr	BASEPRI, r8
   41772:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   41776:	f06f 000f 	mvn.w	r0, #15
   4177a:	e00c      	b.n	41796 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   4177c:	6891      	ldr	r1, [r2, #8]
   4177e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   41782:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   41784:	3301      	adds	r3, #1
   41786:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   41788:	6893      	ldr	r3, [r2, #8]
   4178a:	60a3      	str	r3, [r4, #8]
   4178c:	f388 8811 	msr	BASEPRI, r8
   41790:	f3bf 8f6f 	isb	sy
		return 0;
   41794:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   41796:	b002      	add	sp, #8
   41798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   4179c:	6921      	ldr	r1, [r4, #16]
   4179e:	e7f0      	b.n	41782 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   417a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   417a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   417a8:	4299      	cmp	r1, r3
   417aa:	bfa8      	it	ge
   417ac:	4619      	movge	r1, r3
   417ae:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   417b2:	4291      	cmp	r1, r2
   417b4:	bfb8      	it	lt
   417b6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   417b8:	428b      	cmp	r3, r1
   417ba:	dd2e      	ble.n	4181a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   417bc:	f007 fa96 	bl	48cec <adjust_owner_prio.isra.0>
   417c0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   417c2:	e9cd 7600 	strd	r7, r6, [sp]
   417c6:	4819      	ldr	r0, [pc, #100]	; (4182c <z_impl_k_mutex_lock+0xec>)
   417c8:	4622      	mov	r2, r4
   417ca:	4641      	mov	r1, r8
   417cc:	f000 fc4c 	bl	42068 <z_pend_curr>
	if (got_mutex == 0) {
   417d0:	2800      	cmp	r0, #0
   417d2:	d0e0      	beq.n	41796 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   417d4:	f04f 0320 	mov.w	r3, #32
   417d8:	f3ef 8611 	mrs	r6, BASEPRI
   417dc:	f383 8812 	msr	BASEPRI_MAX, r3
   417e0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   417e4:	6823      	ldr	r3, [r4, #0]
   417e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   417e8:	429c      	cmp	r4, r3
   417ea:	d00a      	beq.n	41802 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   417ec:	b14b      	cbz	r3, 41802 <z_impl_k_mutex_lock+0xc2>
   417ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
   417f2:	4299      	cmp	r1, r3
   417f4:	bfa8      	it	ge
   417f6:	4619      	movge	r1, r3
   417f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   417fc:	4299      	cmp	r1, r3
   417fe:	bfb8      	it	lt
   41800:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   41802:	68a0      	ldr	r0, [r4, #8]
   41804:	f007 fa72 	bl	48cec <adjust_owner_prio.isra.0>
   41808:	b900      	cbnz	r0, 4180c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   4180a:	b145      	cbz	r5, 4181e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   4180c:	4807      	ldr	r0, [pc, #28]	; (4182c <z_impl_k_mutex_lock+0xec>)
   4180e:	4631      	mov	r1, r6
   41810:	f000 fad8 	bl	41dc4 <z_reschedule>
	return -EAGAIN;
   41814:	f06f 000a 	mvn.w	r0, #10
   41818:	e7bd      	b.n	41796 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   4181a:	2500      	movs	r5, #0
   4181c:	e7d1      	b.n	417c2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   4181e:	f386 8811 	msr	BASEPRI, r6
   41822:	f3bf 8f6f 	isb	sy
   41826:	e7f5      	b.n	41814 <z_impl_k_mutex_lock+0xd4>
   41828:	20003aec 	.word	0x20003aec
   4182c:	20003c81 	.word	0x20003c81

00041830 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   41830:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   41832:	6883      	ldr	r3, [r0, #8]
{
   41834:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   41836:	2b00      	cmp	r3, #0
   41838:	d032      	beq.n	418a0 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   4183a:	4a1c      	ldr	r2, [pc, #112]	; (418ac <z_impl_k_mutex_unlock+0x7c>)
   4183c:	6892      	ldr	r2, [r2, #8]
   4183e:	4293      	cmp	r3, r2
   41840:	d131      	bne.n	418a6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   41842:	7bda      	ldrb	r2, [r3, #15]
   41844:	3a01      	subs	r2, #1
   41846:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   41848:	68c3      	ldr	r3, [r0, #12]
   4184a:	2b01      	cmp	r3, #1
   4184c:	d905      	bls.n	4185a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   4184e:	3b01      	subs	r3, #1
   41850:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   41852:	f000 fc97 	bl	42184 <k_sched_unlock>

	return 0;
   41856:	2000      	movs	r0, #0
}
   41858:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   4185a:	f04f 0320 	mov.w	r3, #32
   4185e:	f3ef 8511 	mrs	r5, BASEPRI
   41862:	f383 8812 	msr	BASEPRI_MAX, r3
   41866:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   4186a:	6901      	ldr	r1, [r0, #16]
   4186c:	6880      	ldr	r0, [r0, #8]
   4186e:	f007 fa3d 	bl	48cec <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   41872:	4620      	mov	r0, r4
   41874:	f007 fcd4 	bl	49220 <z_unpend_first_thread>
	mutex->owner = new_owner;
   41878:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   4187a:	b158      	cbz	r0, 41894 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   4187c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   41880:	6122      	str	r2, [r4, #16]
   41882:	2200      	movs	r2, #0
   41884:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   41886:	f007 fc5a 	bl	4913e <z_ready_thread>
		z_reschedule(&lock, key);
   4188a:	4809      	ldr	r0, [pc, #36]	; (418b0 <z_impl_k_mutex_unlock+0x80>)
   4188c:	4629      	mov	r1, r5
   4188e:	f000 fa99 	bl	41dc4 <z_reschedule>
   41892:	e7de      	b.n	41852 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   41894:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   41896:	f385 8811 	msr	BASEPRI, r5
   4189a:	f3bf 8f6f 	isb	sy
   4189e:	e7d8      	b.n	41852 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   418a0:	f06f 0015 	mvn.w	r0, #21
   418a4:	e7d8      	b.n	41858 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   418a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   418aa:	e7d5      	b.n	41858 <z_impl_k_mutex_unlock+0x28>
   418ac:	20003aec 	.word	0x20003aec
   418b0:	20003c81 	.word	0x20003c81

000418b4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   418b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   418b6:	4611      	mov	r1, r2
	__asm__ volatile(
   418b8:	f04f 0220 	mov.w	r2, #32
   418bc:	f3ef 8511 	mrs	r5, BASEPRI
   418c0:	f382 8812 	msr	BASEPRI_MAX, r2
   418c4:	f3bf 8f6f 	isb	sy
   418c8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   418ca:	b19c      	cbz	r4, 418f4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   418cc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   418ce:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   418d0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   418d4:	4294      	cmp	r4, r2
	list->head = node;
   418d6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   418d8:	bf08      	it	eq
   418da:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   418dc:	2101      	movs	r1, #1
   418de:	4620      	mov	r0, r4
   418e0:	f007 fa77 	bl	48dd2 <z_queue_node_peek>
   418e4:	4604      	mov	r4, r0
	__asm__ volatile(
   418e6:	f385 8811 	msr	BASEPRI, r5
   418ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   418ee:	4620      	mov	r0, r4
   418f0:	b003      	add	sp, #12
   418f2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   418f4:	ea51 0203 	orrs.w	r2, r1, r3
   418f8:	d0f5      	beq.n	418e6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   418fa:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   418fe:	e9cd 1300 	strd	r1, r3, [sp]
   41902:	4610      	mov	r0, r2
   41904:	4629      	mov	r1, r5
   41906:	f000 fbaf 	bl	42068 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   4190a:	2800      	cmp	r0, #0
   4190c:	d1ef      	bne.n	418ee <z_impl_k_queue_get+0x3a>
   4190e:	4b02      	ldr	r3, [pc, #8]	; (41918 <z_impl_k_queue_get+0x64>)
   41910:	689b      	ldr	r3, [r3, #8]
   41912:	695c      	ldr	r4, [r3, #20]
   41914:	e7eb      	b.n	418ee <z_impl_k_queue_get+0x3a>
   41916:	bf00      	nop
   41918:	20003aec 	.word	0x20003aec

0004191c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   4191c:	b538      	push	{r3, r4, r5, lr}
   4191e:	4604      	mov	r4, r0
	__asm__ volatile(
   41920:	f04f 0320 	mov.w	r3, #32
   41924:	f3ef 8511 	mrs	r5, BASEPRI
   41928:	f383 8812 	msr	BASEPRI_MAX, r3
   4192c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   41930:	f007 fc76 	bl	49220 <z_unpend_first_thread>

	if (thread != NULL) {
   41934:	b148      	cbz	r0, 4194a <z_impl_k_sem_give+0x2e>
   41936:	2200      	movs	r2, #0
   41938:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   4193a:	f007 fc00 	bl	4913e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   4193e:	4629      	mov	r1, r5
   41940:	4808      	ldr	r0, [pc, #32]	; (41964 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   41942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   41946:	f000 ba3d 	b.w	41dc4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   4194a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   4194e:	429a      	cmp	r2, r3
   41950:	bf18      	it	ne
   41952:	3301      	addne	r3, #1
   41954:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   41956:	2102      	movs	r1, #2
   41958:	f104 0010 	add.w	r0, r4, #16
   4195c:	f007 fe75 	bl	4964a <z_handle_obj_poll_events>
}
   41960:	e7ed      	b.n	4193e <z_impl_k_sem_give+0x22>
   41962:	bf00      	nop
   41964:	20003c81 	.word	0x20003c81

00041968 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   41968:	b513      	push	{r0, r1, r4, lr}
   4196a:	f04f 0420 	mov.w	r4, #32
   4196e:	f3ef 8111 	mrs	r1, BASEPRI
   41972:	f384 8812 	msr	BASEPRI_MAX, r4
   41976:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   4197a:	6884      	ldr	r4, [r0, #8]
   4197c:	b144      	cbz	r4, 41990 <z_impl_k_sem_take+0x28>
		sem->count--;
   4197e:	3c01      	subs	r4, #1
   41980:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   41982:	f381 8811 	msr	BASEPRI, r1
   41986:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   4198a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   4198c:	b002      	add	sp, #8
   4198e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41990:	ea52 0403 	orrs.w	r4, r2, r3
   41994:	d106      	bne.n	419a4 <z_impl_k_sem_take+0x3c>
   41996:	f381 8811 	msr	BASEPRI, r1
   4199a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   4199e:	f06f 000f 	mvn.w	r0, #15
   419a2:	e7f3      	b.n	4198c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   419a4:	e9cd 2300 	strd	r2, r3, [sp]
   419a8:	4602      	mov	r2, r0
   419aa:	4802      	ldr	r0, [pc, #8]	; (419b4 <z_impl_k_sem_take+0x4c>)
   419ac:	f000 fb5c 	bl	42068 <z_pend_curr>
	return ret;
   419b0:	e7ec      	b.n	4198c <z_impl_k_sem_take+0x24>
   419b2:	bf00      	nop
   419b4:	20003c81 	.word	0x20003c81

000419b8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   419b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   419ba:	4b09      	ldr	r3, [pc, #36]	; (419e0 <k_sys_work_q_init+0x28>)
   419bc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   419be:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   419c0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   419c2:	9300      	str	r3, [sp, #0]
   419c4:	4907      	ldr	r1, [pc, #28]	; (419e4 <k_sys_work_q_init+0x2c>)
   419c6:	4808      	ldr	r0, [pc, #32]	; (419e8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   419c8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   419cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   419d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   419d4:	f000 f914 	bl	41c00 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   419d8:	4620      	mov	r0, r4
   419da:	b004      	add	sp, #16
   419dc:	bd10      	pop	{r4, pc}
   419de:	bf00      	nop
   419e0:	0004b9dc 	.word	0x0004b9dc
   419e4:	200062f0 	.word	0x200062f0
   419e8:	20001948 	.word	0x20001948

000419ec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   419ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   419f0:	4e47      	ldr	r6, [pc, #284]	; (41b10 <work_queue_main+0x124>)
   419f2:	b085      	sub	sp, #20
   419f4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   419f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   419fa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   419fe:	f04f 0320 	mov.w	r3, #32
   41a02:	f3ef 8711 	mrs	r7, BASEPRI
   41a06:	f383 8812 	msr	BASEPRI_MAX, r3
   41a0a:	f3bf 8f6f 	isb	sy
   41a0e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   41a12:	b98d      	cbnz	r5, 41a38 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   41a14:	2102      	movs	r1, #2
   41a16:	f104 0098 	add.w	r0, r4, #152	; 0x98
   41a1a:	f007 fa53 	bl	48ec4 <flag_test_and_clear>
   41a1e:	2800      	cmp	r0, #0
   41a20:	d135      	bne.n	41a8e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   41a22:	2300      	movs	r3, #0
   41a24:	e9cd 8900 	strd	r8, r9, [sp]
   41a28:	9302      	str	r3, [sp, #8]
   41a2a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   41a2e:	4639      	mov	r1, r7
   41a30:	4838      	ldr	r0, [pc, #224]	; (41b14 <work_queue_main+0x128>)
   41a32:	f000 fcd9 	bl	423e8 <z_sched_wait>
			continue;
   41a36:	e7e2      	b.n	419fe <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41a38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   41a3c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   41a3e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41a42:	4295      	cmp	r5, r2
   41a44:	d101      	bne.n	41a4a <work_queue_main+0x5e>
	list->tail = node;
   41a46:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   41a4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   41a4e:	f043 0302 	orr.w	r3, r3, #2
   41a52:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   41a56:	68eb      	ldr	r3, [r5, #12]
   41a58:	f023 0304 	bic.w	r3, r3, #4
   41a5c:	f043 0301 	orr.w	r3, r3, #1
   41a60:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   41a62:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   41a64:	f387 8811 	msr	BASEPRI, r7
   41a68:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   41a6c:	4628      	mov	r0, r5
   41a6e:	4798      	blx	r3
	__asm__ volatile(
   41a70:	f04f 0320 	mov.w	r3, #32
   41a74:	f3ef 8b11 	mrs	fp, BASEPRI
   41a78:	f383 8812 	msr	BASEPRI_MAX, r3
   41a7c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   41a80:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41a82:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   41a84:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41a88:	d40b      	bmi.n	41aa2 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   41a8a:	60ea      	str	r2, [r5, #12]
   41a8c:	e00e      	b.n	41aac <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   41a8e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   41a92:	2200      	movs	r2, #0
   41a94:	2101      	movs	r1, #1
   41a96:	4628      	mov	r0, r5
   41a98:	f007 fbea 	bl	49270 <z_sched_wake>
   41a9c:	2800      	cmp	r0, #0
   41a9e:	d1f8      	bne.n	41a92 <work_queue_main+0xa6>
   41aa0:	e7bf      	b.n	41a22 <work_queue_main+0x36>
	return list->head;
   41aa2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   41aa4:	f023 0303 	bic.w	r3, r3, #3
   41aa8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41aaa:	b970      	cbnz	r0, 41aca <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   41aac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   41ab0:	f023 0302 	bic.w	r3, r3, #2
   41ab4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   41ab8:	f38b 8811 	msr	BASEPRI, fp
   41abc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   41ac0:	05d8      	lsls	r0, r3, #23
   41ac2:	d49c      	bmi.n	419fe <work_queue_main+0x12>
	z_impl_k_yield();
   41ac4:	f000 fb86 	bl	421d4 <z_impl_k_yield>
}
   41ac8:	e799      	b.n	419fe <work_queue_main+0x12>
	return node->next;
   41aca:	2700      	movs	r7, #0
   41acc:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   41ad0:	463b      	mov	r3, r7
		if (wc->work == work) {
   41ad2:	6842      	ldr	r2, [r0, #4]
   41ad4:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   41ad6:	4601      	mov	r1, r0
		if (wc->work == work) {
   41ad8:	d10c      	bne.n	41af4 <work_queue_main+0x108>
	return node->next;
   41ada:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   41adc:	b997      	cbnz	r7, 41b04 <work_queue_main+0x118>
   41ade:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   41ae0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   41ae2:	4282      	cmp	r2, r0
   41ae4:	d100      	bne.n	41ae8 <work_queue_main+0xfc>
	list->tail = node;
   41ae6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   41ae8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   41aec:	f7ff ff16 	bl	4191c <z_impl_k_sem_give>
}
   41af0:	4639      	mov	r1, r7
   41af2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41af4:	f1ba 0f00 	cmp.w	sl, #0
   41af8:	d0d8      	beq.n	41aac <work_queue_main+0xc0>
	return node->next;
   41afa:	4650      	mov	r0, sl
   41afc:	460f      	mov	r7, r1
   41afe:	f8da a000 	ldr.w	sl, [sl]
   41b02:	e7e6      	b.n	41ad2 <work_queue_main+0xe6>
	return list->tail;
   41b04:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   41b06:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   41b08:	4290      	cmp	r0, r2
	list->tail = node;
   41b0a:	bf08      	it	eq
   41b0c:	6077      	streq	r7, [r6, #4]
}
   41b0e:	e7eb      	b.n	41ae8 <work_queue_main+0xfc>
   41b10:	20003b14 	.word	0x20003b14
   41b14:	20003c81 	.word	0x20003c81

00041b18 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   41b18:	68c3      	ldr	r3, [r0, #12]
{
   41b1a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   41b1c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   41b20:	079b      	lsls	r3, r3, #30
{
   41b22:	4605      	mov	r5, r0
   41b24:	460c      	mov	r4, r1
	if (ret) {
   41b26:	d50d      	bpl.n	41b44 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   41b28:	2201      	movs	r2, #1
   41b2a:	2100      	movs	r1, #0
   41b2c:	f104 0008 	add.w	r0, r4, #8
   41b30:	f007 f9b8 	bl	48ea4 <z_impl_k_sem_init>
	parent->next = child;
   41b34:	2300      	movs	r3, #0
   41b36:	6023      	str	r3, [r4, #0]
	return list->tail;
   41b38:	4b05      	ldr	r3, [pc, #20]	; (41b50 <cancel_sync_locked+0x38>)
	canceler->work = work;
   41b3a:	6065      	str	r5, [r4, #4]
   41b3c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   41b3e:	b91a      	cbnz	r2, 41b48 <cancel_sync_locked+0x30>
	list->head = node;
   41b40:	e9c3 4400 	strd	r4, r4, [r3]
}
   41b44:	4630      	mov	r0, r6
   41b46:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   41b48:	6014      	str	r4, [r2, #0]
	list->tail = node;
   41b4a:	605c      	str	r4, [r3, #4]
}
   41b4c:	e7fa      	b.n	41b44 <cancel_sync_locked+0x2c>
   41b4e:	bf00      	nop
   41b50:	20003b14 	.word	0x20003b14

00041b54 <submit_to_queue_locked>:
{
   41b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   41b56:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41b58:	079a      	lsls	r2, r3, #30
{
   41b5a:	4604      	mov	r4, r0
   41b5c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41b5e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   41b62:	d41f      	bmi.n	41ba4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   41b64:	075f      	lsls	r7, r3, #29
   41b66:	d41f      	bmi.n	41ba8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   41b68:	680a      	ldr	r2, [r1, #0]
   41b6a:	b90a      	cbnz	r2, 41b70 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   41b6c:	6882      	ldr	r2, [r0, #8]
   41b6e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   41b70:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   41b72:	bf44      	itt	mi
   41b74:	68a3      	ldrmi	r3, [r4, #8]
   41b76:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   41b78:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   41b7a:	bf4c      	ite	mi
   41b7c:	2502      	movmi	r5, #2
		ret = 1;
   41b7e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   41b80:	b37f      	cbz	r7, 41be2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   41b82:	4b1b      	ldr	r3, [pc, #108]	; (41bf0 <submit_to_queue_locked+0x9c>)
   41b84:	689b      	ldr	r3, [r3, #8]
   41b86:	42bb      	cmp	r3, r7
   41b88:	d111      	bne.n	41bae <submit_to_queue_locked+0x5a>
   41b8a:	f007 f89d 	bl	48cc8 <k_is_in_isr>
   41b8e:	f080 0001 	eor.w	r0, r0, #1
   41b92:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   41b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   41b98:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   41b9a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   41b9e:	d523      	bpl.n	41be8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   41ba0:	b13a      	cbz	r2, 41bb2 <submit_to_queue_locked+0x5e>
   41ba2:	b940      	cbnz	r0, 41bb6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   41ba4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   41ba8:	2300      	movs	r3, #0
   41baa:	6033      	str	r3, [r6, #0]
	return ret;
   41bac:	e013      	b.n	41bd6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   41bae:	2000      	movs	r0, #0
   41bb0:	e7f0      	b.n	41b94 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   41bb2:	071b      	lsls	r3, r3, #28
   41bb4:	d4f6      	bmi.n	41ba4 <submit_to_queue_locked+0x50>
	parent->next = child;
   41bb6:	2300      	movs	r3, #0
   41bb8:	6023      	str	r3, [r4, #0]
	return list->tail;
   41bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   41bbe:	b963      	cbnz	r3, 41bda <submit_to_queue_locked+0x86>
	list->head = node;
   41bc0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   41bc4:	4638      	mov	r0, r7
   41bc6:	f007 f996 	bl	48ef6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   41bca:	68e3      	ldr	r3, [r4, #12]
   41bcc:	f043 0304 	orr.w	r3, r3, #4
   41bd0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   41bd2:	6833      	ldr	r3, [r6, #0]
   41bd4:	60a3      	str	r3, [r4, #8]
}
   41bd6:	4628      	mov	r0, r5
   41bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   41bda:	601c      	str	r4, [r3, #0]
	list->tail = node;
   41bdc:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   41be0:	e7f0      	b.n	41bc4 <submit_to_queue_locked+0x70>
		return -EINVAL;
   41be2:	f06f 0515 	mvn.w	r5, #21
   41be6:	e7df      	b.n	41ba8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   41be8:	f06f 0512 	mvn.w	r5, #18
   41bec:	e7dc      	b.n	41ba8 <submit_to_queue_locked+0x54>
   41bee:	bf00      	nop
   41bf0:	20003aec 	.word	0x20003aec

00041bf4 <k_work_submit>:
{
   41bf4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   41bf6:	4801      	ldr	r0, [pc, #4]	; (41bfc <k_work_submit+0x8>)
   41bf8:	f007 b9dd 	b.w	48fb6 <k_work_submit_to_queue>
   41bfc:	20001948 	.word	0x20001948

00041c00 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   41c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   41c02:	b089      	sub	sp, #36	; 0x24
   41c04:	4604      	mov	r4, r0
	list->head = NULL;
   41c06:	2000      	movs	r0, #0
	list->tail = NULL;
   41c08:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   41c0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   41c0e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   41c12:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   41c16:	f104 0090 	add.w	r0, r4, #144	; 0x90
   41c1a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   41c1e:	b31d      	cbz	r5, 41c68 <k_work_queue_start+0x68>
   41c20:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   41c22:	2800      	cmp	r0, #0
   41c24:	f240 1001 	movw	r0, #257	; 0x101
   41c28:	bf08      	it	eq
   41c2a:	2001      	moveq	r0, #1
	*flagp = flags;
   41c2c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   41c30:	2000      	movs	r0, #0
   41c32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   41c36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   41c3a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   41c3e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   41c42:	e9cd 6706 	strd	r6, r7, [sp, #24]
   41c46:	4b09      	ldr	r3, [pc, #36]	; (41c6c <k_work_queue_start+0x6c>)
   41c48:	9400      	str	r4, [sp, #0]
   41c4a:	4620      	mov	r0, r4
   41c4c:	f7ff fc24 	bl	41498 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   41c50:	b125      	cbz	r5, 41c5c <k_work_queue_start+0x5c>
   41c52:	6829      	ldr	r1, [r5, #0]
   41c54:	b111      	cbz	r1, 41c5c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   41c56:	4620      	mov	r0, r4
   41c58:	f007 f83c 	bl	48cd4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   41c5c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   41c5e:	b009      	add	sp, #36	; 0x24
   41c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   41c64:	f007 b839 	b.w	48cda <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   41c68:	2001      	movs	r0, #1
   41c6a:	e7df      	b.n	41c2c <k_work_queue_start+0x2c>
   41c6c:	000419ed 	.word	0x000419ed

00041c70 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   41c70:	b513      	push	{r0, r1, r4, lr}
   41c72:	9001      	str	r0, [sp, #4]
   41c74:	4608      	mov	r0, r1
	__asm__ volatile(
   41c76:	f04f 0120 	mov.w	r1, #32
   41c7a:	f3ef 8411 	mrs	r4, BASEPRI
   41c7e:	f381 8812 	msr	BASEPRI_MAX, r1
   41c82:	f3bf 8f6f 	isb	sy
	return *flagp;
   41c86:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   41c88:	f011 0f0e 	tst.w	r1, #14
   41c8c:	d116      	bne.n	41cbc <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41c8e:	ea53 0c02 	orrs.w	ip, r3, r2
   41c92:	d108      	bne.n	41ca6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   41c94:	a901      	add	r1, sp, #4
   41c96:	f7ff ff5d 	bl	41b54 <submit_to_queue_locked>
	__asm__ volatile(
   41c9a:	f384 8811 	msr	BASEPRI, r4
   41c9e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   41ca2:	b002      	add	sp, #8
   41ca4:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   41ca6:	f041 0108 	orr.w	r1, r1, #8
   41caa:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   41cac:	9901      	ldr	r1, [sp, #4]
   41cae:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41cb0:	3010      	adds	r0, #16
   41cb2:	4903      	ldr	r1, [pc, #12]	; (41cc0 <k_work_schedule_for_queue+0x50>)
   41cb4:	f000 fc0e 	bl	424d4 <z_add_timeout>
	return ret;
   41cb8:	2001      	movs	r0, #1
   41cba:	e7ee      	b.n	41c9a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   41cbc:	2000      	movs	r0, #0
   41cbe:	e7ec      	b.n	41c9a <k_work_schedule_for_queue+0x2a>
   41cc0:	00048f67 	.word	0x00048f67

00041cc4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   41cc4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   41cc6:	4801      	ldr	r0, [pc, #4]	; (41ccc <k_work_schedule+0x8>)
   41cc8:	f7ff bfd2 	b.w	41c70 <k_work_schedule_for_queue>
   41ccc:	20001948 	.word	0x20001948

00041cd0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   41cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41cd2:	460c      	mov	r4, r1
   41cd4:	9001      	str	r0, [sp, #4]
   41cd6:	4616      	mov	r6, r2
   41cd8:	461d      	mov	r5, r3
	__asm__ volatile(
   41cda:	f04f 0320 	mov.w	r3, #32
   41cde:	f3ef 8711 	mrs	r7, BASEPRI
   41ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   41ce6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   41cea:	4608      	mov	r0, r1
   41cec:	f007 f8f5 	bl	48eda <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41cf0:	ea55 0306 	orrs.w	r3, r5, r6
   41cf4:	d109      	bne.n	41d0a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   41cf6:	a901      	add	r1, sp, #4
   41cf8:	4620      	mov	r0, r4
   41cfa:	f7ff ff2b 	bl	41b54 <submit_to_queue_locked>
	__asm__ volatile(
   41cfe:	f387 8811 	msr	BASEPRI, r7
   41d02:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   41d06:	b003      	add	sp, #12
   41d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   41d0a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41d0c:	4906      	ldr	r1, [pc, #24]	; (41d28 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   41d0e:	f043 0308 	orr.w	r3, r3, #8
   41d12:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   41d14:	9b01      	ldr	r3, [sp, #4]
   41d16:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41d18:	f104 0010 	add.w	r0, r4, #16
   41d1c:	4632      	mov	r2, r6
   41d1e:	462b      	mov	r3, r5
   41d20:	f000 fbd8 	bl	424d4 <z_add_timeout>
	return ret;
   41d24:	2001      	movs	r0, #1
   41d26:	e7ea      	b.n	41cfe <k_work_reschedule_for_queue+0x2e>
   41d28:	00048f67 	.word	0x00048f67

00041d2c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   41d2c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   41d2e:	4801      	ldr	r0, [pc, #4]	; (41d34 <k_work_reschedule+0x8>)
   41d30:	f7ff bfce 	b.w	41cd0 <k_work_reschedule_for_queue>
   41d34:	20001948 	.word	0x20001948

00041d38 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   41d38:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   41d3a:	4c08      	ldr	r4, [pc, #32]	; (41d5c <z_reset_time_slice+0x24>)
   41d3c:	6823      	ldr	r3, [r4, #0]
   41d3e:	b15b      	cbz	r3, 41d58 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   41d40:	f7fd fb70 	bl	3f424 <sys_clock_elapsed>
   41d44:	4603      	mov	r3, r0
   41d46:	6820      	ldr	r0, [r4, #0]
   41d48:	4a05      	ldr	r2, [pc, #20]	; (41d60 <z_reset_time_slice+0x28>)
   41d4a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   41d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   41d50:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   41d52:	2100      	movs	r1, #0
   41d54:	f007 bacf 	b.w	492f6 <z_set_timeout_expiry>
}
   41d58:	bd10      	pop	{r4, pc}
   41d5a:	bf00      	nop
   41d5c:	20003b24 	.word	0x20003b24
   41d60:	20003aec 	.word	0x20003aec

00041d64 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   41d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41d66:	4604      	mov	r4, r0
   41d68:	460d      	mov	r5, r1
	__asm__ volatile(
   41d6a:	f04f 0320 	mov.w	r3, #32
   41d6e:	f3ef 8611 	mrs	r6, BASEPRI
   41d72:	f383 8812 	msr	BASEPRI_MAX, r3
   41d76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   41d7a:	4b0f      	ldr	r3, [pc, #60]	; (41db8 <k_sched_time_slice_set+0x54>)
   41d7c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   41d7e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   41d82:	f240 30e7 	movw	r0, #999	; 0x3e7
   41d86:	6119      	str	r1, [r3, #16]
   41d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   41d8c:	2300      	movs	r3, #0
   41d8e:	fbe4 0107 	umlal	r0, r1, r4, r7
   41d92:	f7e4 f9b5 	bl	26100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   41d96:	2c00      	cmp	r4, #0
   41d98:	4b08      	ldr	r3, [pc, #32]	; (41dbc <k_sched_time_slice_set+0x58>)
   41d9a:	dc09      	bgt.n	41db0 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   41d9c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   41d9e:	4b08      	ldr	r3, [pc, #32]	; (41dc0 <k_sched_time_slice_set+0x5c>)
   41da0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   41da2:	f7ff ffc9 	bl	41d38 <z_reset_time_slice>
	__asm__ volatile(
   41da6:	f386 8811 	msr	BASEPRI, r6
   41daa:	f3bf 8f6f 	isb	sy
	}
}
   41dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   41db0:	2802      	cmp	r0, #2
   41db2:	bfb8      	it	lt
   41db4:	2002      	movlt	r0, #2
   41db6:	e7f1      	b.n	41d9c <k_sched_time_slice_set+0x38>
   41db8:	20003aec 	.word	0x20003aec
   41dbc:	20003b24 	.word	0x20003b24
   41dc0:	20003b20 	.word	0x20003b20

00041dc4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41dc4:	b949      	cbnz	r1, 41dda <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41dc6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   41dca:	b930      	cbnz	r0, 41dda <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   41dcc:	4b05      	ldr	r3, [pc, #20]	; (41de4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   41dce:	69da      	ldr	r2, [r3, #28]
   41dd0:	689b      	ldr	r3, [r3, #8]
   41dd2:	429a      	cmp	r2, r3
   41dd4:	d001      	beq.n	41dda <z_reschedule+0x16>
	ret = arch_swap(key);
   41dd6:	f7e8 bb5f 	b.w	2a498 <arch_swap>
   41dda:	f381 8811 	msr	BASEPRI, r1
   41dde:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   41de2:	4770      	bx	lr
   41de4:	20003aec 	.word	0x20003aec

00041de8 <k_sched_lock>:
	__asm__ volatile(
   41de8:	f04f 0320 	mov.w	r3, #32
   41dec:	f3ef 8111 	mrs	r1, BASEPRI
   41df0:	f383 8812 	msr	BASEPRI_MAX, r3
   41df4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   41df8:	4b04      	ldr	r3, [pc, #16]	; (41e0c <k_sched_lock+0x24>)
   41dfa:	689a      	ldr	r2, [r3, #8]
   41dfc:	7bd3      	ldrb	r3, [r2, #15]
   41dfe:	3b01      	subs	r3, #1
   41e00:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   41e02:	f381 8811 	msr	BASEPRI, r1
   41e06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   41e0a:	4770      	bx	lr
   41e0c:	20003aec 	.word	0x20003aec

00041e10 <update_cache>:
{
   41e10:	b538      	push	{r3, r4, r5, lr}
   41e12:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   41e14:	480c      	ldr	r0, [pc, #48]	; (41e48 <update_cache+0x38>)
   41e16:	4d0d      	ldr	r5, [pc, #52]	; (41e4c <update_cache+0x3c>)
   41e18:	f007 f98b 	bl	49132 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   41e1c:	4604      	mov	r4, r0
   41e1e:	b900      	cbnz	r0, 41e22 <update_cache+0x12>
   41e20:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   41e22:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   41e24:	b94a      	cbnz	r2, 41e3a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   41e26:	7b5a      	ldrb	r2, [r3, #13]
   41e28:	06d2      	lsls	r2, r2, #27
   41e2a:	d106      	bne.n	41e3a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   41e2c:	69a2      	ldr	r2, [r4, #24]
   41e2e:	b922      	cbnz	r2, 41e3a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   41e30:	89da      	ldrh	r2, [r3, #14]
   41e32:	2a7f      	cmp	r2, #127	; 0x7f
   41e34:	d901      	bls.n	41e3a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   41e36:	61eb      	str	r3, [r5, #28]
}
   41e38:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   41e3a:	429c      	cmp	r4, r3
   41e3c:	d001      	beq.n	41e42 <update_cache+0x32>
			z_reset_time_slice();
   41e3e:	f7ff ff7b 	bl	41d38 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   41e42:	61ec      	str	r4, [r5, #28]
}
   41e44:	e7f8      	b.n	41e38 <update_cache+0x28>
   41e46:	bf00      	nop
   41e48:	20003b0c 	.word	0x20003b0c
   41e4c:	20003aec 	.word	0x20003aec

00041e50 <move_thread_to_end_of_prio_q>:
{
   41e50:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   41e52:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41e56:	7b43      	ldrb	r3, [r0, #13]
   41e58:	2a00      	cmp	r2, #0
{
   41e5a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41e5c:	da04      	bge.n	41e68 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41e62:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   41e64:	f007 f910 	bl	49088 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41e68:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   41e6a:	4a15      	ldr	r2, [pc, #84]	; (41ec0 <move_thread_to_end_of_prio_q+0x70>)
   41e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41e70:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   41e72:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41e76:	f102 0520 	add.w	r5, r2, #32
   41e7a:	42ab      	cmp	r3, r5
   41e7c:	d01b      	beq.n	41eb6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41e7e:	b1d3      	cbz	r3, 41eb6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   41e80:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   41e84:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   41e88:	4286      	cmp	r6, r0
   41e8a:	d00f      	beq.n	41eac <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   41e8c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   41e8e:	2800      	cmp	r0, #0
   41e90:	dd0c      	ble.n	41eac <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   41e92:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   41e94:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   41e98:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   41e9a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   41e9c:	6890      	ldr	r0, [r2, #8]
   41e9e:	1a43      	subs	r3, r0, r1
   41ea0:	4258      	negs	r0, r3
}
   41ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   41ea6:	4158      	adcs	r0, r3
   41ea8:	f7ff bfb2 	b.w	41e10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41eac:	42a3      	cmp	r3, r4
   41eae:	d002      	beq.n	41eb6 <move_thread_to_end_of_prio_q+0x66>
   41eb0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41eb2:	2b00      	cmp	r3, #0
   41eb4:	d1e6      	bne.n	41e84 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   41eb6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   41eba:	6021      	str	r1, [r4, #0]
	list->tail = node;
   41ebc:	6251      	str	r1, [r2, #36]	; 0x24
}
   41ebe:	e7ed      	b.n	41e9c <move_thread_to_end_of_prio_q+0x4c>
   41ec0:	20003aec 	.word	0x20003aec

00041ec4 <z_time_slice>:
{
   41ec4:	b538      	push	{r3, r4, r5, lr}
   41ec6:	4601      	mov	r1, r0
	__asm__ volatile(
   41ec8:	f04f 0320 	mov.w	r3, #32
   41ecc:	f3ef 8411 	mrs	r4, BASEPRI
   41ed0:	f383 8812 	msr	BASEPRI_MAX, r3
   41ed4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   41ed8:	4b15      	ldr	r3, [pc, #84]	; (41f30 <z_time_slice+0x6c>)
   41eda:	4a16      	ldr	r2, [pc, #88]	; (41f34 <z_time_slice+0x70>)
   41edc:	6898      	ldr	r0, [r3, #8]
   41ede:	6815      	ldr	r5, [r2, #0]
   41ee0:	42a8      	cmp	r0, r5
   41ee2:	d106      	bne.n	41ef2 <z_time_slice+0x2e>
			z_reset_time_slice();
   41ee4:	f7ff ff28 	bl	41d38 <z_reset_time_slice>
	__asm__ volatile(
   41ee8:	f384 8811 	msr	BASEPRI, r4
   41eec:	f3bf 8f6f 	isb	sy
}
   41ef0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   41ef2:	2500      	movs	r5, #0
   41ef4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   41ef6:	4a10      	ldr	r2, [pc, #64]	; (41f38 <z_time_slice+0x74>)
   41ef8:	6812      	ldr	r2, [r2, #0]
   41efa:	b1ba      	cbz	r2, 41f2c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   41efc:	89c2      	ldrh	r2, [r0, #14]
   41efe:	2a7f      	cmp	r2, #127	; 0x7f
   41f00:	d814      	bhi.n	41f2c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   41f02:	7b42      	ldrb	r2, [r0, #13]
   41f04:	06d2      	lsls	r2, r2, #27
   41f06:	d111      	bne.n	41f2c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   41f08:	4a0c      	ldr	r2, [pc, #48]	; (41f3c <z_time_slice+0x78>)
   41f0a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   41f0e:	6812      	ldr	r2, [r2, #0]
   41f10:	4295      	cmp	r5, r2
   41f12:	db0b      	blt.n	41f2c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   41f14:	4a0a      	ldr	r2, [pc, #40]	; (41f40 <z_time_slice+0x7c>)
   41f16:	4290      	cmp	r0, r2
   41f18:	d008      	beq.n	41f2c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   41f1a:	691a      	ldr	r2, [r3, #16]
   41f1c:	428a      	cmp	r2, r1
   41f1e:	dc02      	bgt.n	41f26 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   41f20:	f7ff ff96 	bl	41e50 <move_thread_to_end_of_prio_q>
   41f24:	e7de      	b.n	41ee4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   41f26:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   41f28:	611a      	str	r2, [r3, #16]
   41f2a:	e7dd      	b.n	41ee8 <z_time_slice+0x24>
   41f2c:	2200      	movs	r2, #0
   41f2e:	e7fb      	b.n	41f28 <z_time_slice+0x64>
   41f30:	20003aec 	.word	0x20003aec
   41f34:	20003b1c 	.word	0x20003b1c
   41f38:	20003b24 	.word	0x20003b24
   41f3c:	20003b20 	.word	0x20003b20
   41f40:	20001848 	.word	0x20001848

00041f44 <ready_thread>:
{
   41f44:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   41f46:	f990 200d 	ldrsb.w	r2, [r0, #13]
   41f4a:	7b43      	ldrb	r3, [r0, #13]
   41f4c:	2a00      	cmp	r2, #0
   41f4e:	db2a      	blt.n	41fa6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   41f50:	06da      	lsls	r2, r3, #27
   41f52:	d128      	bne.n	41fa6 <ready_thread+0x62>
   41f54:	6982      	ldr	r2, [r0, #24]
   41f56:	bb32      	cbnz	r2, 41fa6 <ready_thread+0x62>
	return list->head == list;
   41f58:	4a14      	ldr	r2, [pc, #80]	; (41fac <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   41f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41f5e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   41f60:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41f64:	f102 0520 	add.w	r5, r2, #32
   41f68:	42ab      	cmp	r3, r5
   41f6a:	d017      	beq.n	41f9c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41f6c:	b1b3      	cbz	r3, 41f9c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   41f6e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41f72:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   41f76:	428e      	cmp	r6, r1
   41f78:	d00b      	beq.n	41f92 <ready_thread+0x4e>
		return b2 - b1;
   41f7a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   41f7c:	2900      	cmp	r1, #0
   41f7e:	dd08      	ble.n	41f92 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   41f80:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41f82:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   41f86:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   41f88:	6058      	str	r0, [r3, #4]
}
   41f8a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   41f8c:	2000      	movs	r0, #0
   41f8e:	f7ff bf3f 	b.w	41e10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41f92:	42a3      	cmp	r3, r4
   41f94:	d002      	beq.n	41f9c <ready_thread+0x58>
   41f96:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41f98:	2b00      	cmp	r3, #0
   41f9a:	d1ea      	bne.n	41f72 <ready_thread+0x2e>
	node->prev = tail;
   41f9c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   41fa0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   41fa2:	6250      	str	r0, [r2, #36]	; 0x24
}
   41fa4:	e7f1      	b.n	41f8a <ready_thread+0x46>
}
   41fa6:	bc70      	pop	{r4, r5, r6}
   41fa8:	4770      	bx	lr
   41faa:	bf00      	nop
   41fac:	20003aec 	.word	0x20003aec

00041fb0 <z_sched_start>:
{
   41fb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   41fb2:	f04f 0220 	mov.w	r2, #32
   41fb6:	f3ef 8411 	mrs	r4, BASEPRI
   41fba:	f382 8812 	msr	BASEPRI_MAX, r2
   41fbe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   41fc2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   41fc4:	0751      	lsls	r1, r2, #29
   41fc6:	d404      	bmi.n	41fd2 <z_sched_start+0x22>
	__asm__ volatile(
   41fc8:	f384 8811 	msr	BASEPRI, r4
   41fcc:	f3bf 8f6f 	isb	sy
}
   41fd0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   41fd2:	f022 0204 	bic.w	r2, r2, #4
   41fd6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   41fd8:	f7ff ffb4 	bl	41f44 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   41fdc:	4621      	mov	r1, r4
   41fde:	4802      	ldr	r0, [pc, #8]	; (41fe8 <z_sched_start+0x38>)
}
   41fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   41fe4:	f7ff beee 	b.w	41dc4 <z_reschedule>
   41fe8:	20003c81 	.word	0x20003c81

00041fec <unready_thread>:
{
   41fec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   41fee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41ff2:	7b43      	ldrb	r3, [r0, #13]
   41ff4:	2a00      	cmp	r2, #0
{
   41ff6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41ff8:	da04      	bge.n	42004 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41ffe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   42000:	f007 f842 	bl	49088 <sys_dlist_remove>
	update_cache(thread == _current);
   42004:	4b04      	ldr	r3, [pc, #16]	; (42018 <unready_thread+0x2c>)
   42006:	6898      	ldr	r0, [r3, #8]
   42008:	1a43      	subs	r3, r0, r1
   4200a:	4258      	negs	r0, r3
   4200c:	4158      	adcs	r0, r3
}
   4200e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   42012:	f7ff befd 	b.w	41e10 <update_cache>
   42016:	bf00      	nop
   42018:	20003aec 	.word	0x20003aec

0004201c <pend>:
{
   4201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42020:	4606      	mov	r6, r0
   42022:	4615      	mov	r5, r2
   42024:	461c      	mov	r4, r3
	__asm__ volatile(
   42026:	f04f 0320 	mov.w	r3, #32
   4202a:	f3ef 8711 	mrs	r7, BASEPRI
   4202e:	f383 8812 	msr	BASEPRI_MAX, r3
   42032:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   42036:	f007 f8b4 	bl	491a2 <add_to_waitq_locked>
	__asm__ volatile(
   4203a:	f387 8811 	msr	BASEPRI, r7
   4203e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   42042:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   42046:	bf08      	it	eq
   42048:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   4204c:	d008      	beq.n	42060 <pend+0x44>
   4204e:	462a      	mov	r2, r5
   42050:	4623      	mov	r3, r4
   42052:	f106 0018 	add.w	r0, r6, #24
   42056:	4903      	ldr	r1, [pc, #12]	; (42064 <pend+0x48>)
}
   42058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4205c:	f000 ba3a 	b.w	424d4 <z_add_timeout>
   42060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42064:	0004915f 	.word	0x0004915f

00042068 <z_pend_curr>:
{
   42068:	b510      	push	{r4, lr}
	pending_current = _current;
   4206a:	4b07      	ldr	r3, [pc, #28]	; (42088 <z_pend_curr+0x20>)
   4206c:	6898      	ldr	r0, [r3, #8]
   4206e:	4b07      	ldr	r3, [pc, #28]	; (4208c <z_pend_curr+0x24>)
{
   42070:	460c      	mov	r4, r1
	pending_current = _current;
   42072:	6018      	str	r0, [r3, #0]
{
   42074:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   42076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4207a:	f7ff ffcf 	bl	4201c <pend>
   4207e:	4620      	mov	r0, r4
}
   42080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   42084:	f7e8 ba08 	b.w	2a498 <arch_swap>
   42088:	20003aec 	.word	0x20003aec
   4208c:	20003b1c 	.word	0x20003b1c

00042090 <z_set_prio>:
{
   42090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42092:	4604      	mov	r4, r0
	__asm__ volatile(
   42094:	f04f 0320 	mov.w	r3, #32
   42098:	f3ef 8611 	mrs	r6, BASEPRI
   4209c:	f383 8812 	msr	BASEPRI_MAX, r3
   420a0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   420a4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   420a6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   420a8:	b249      	sxtb	r1, r1
   420aa:	d133      	bne.n	42114 <z_set_prio+0x84>
		if (need_sched) {
   420ac:	6982      	ldr	r2, [r0, #24]
   420ae:	bb8a      	cbnz	r2, 42114 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   420b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   420b4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   420b6:	f006 ffe7 	bl	49088 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   420ba:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   420bc:	4a17      	ldr	r2, [pc, #92]	; (4211c <z_set_prio+0x8c>)
				thread->base.prio = prio;
   420be:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   420c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   420c4:	7343      	strb	r3, [r0, #13]
   420c6:	4610      	mov	r0, r2
   420c8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   420cc:	4283      	cmp	r3, r0
   420ce:	d01b      	beq.n	42108 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   420d0:	b1d3      	cbz	r3, 42108 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   420d2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   420d4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   420d8:	42a9      	cmp	r1, r5
   420da:	d010      	beq.n	420fe <z_set_prio+0x6e>
		return b2 - b1;
   420dc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   420de:	2d00      	cmp	r5, #0
   420e0:	dd0d      	ble.n	420fe <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   420e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   420e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   420e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   420ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   420ec:	2001      	movs	r0, #1
   420ee:	f7ff fe8f 	bl	41e10 <update_cache>
   420f2:	2001      	movs	r0, #1
	__asm__ volatile(
   420f4:	f386 8811 	msr	BASEPRI, r6
   420f8:	f3bf 8f6f 	isb	sy
}
   420fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   420fe:	42bb      	cmp	r3, r7
   42100:	d002      	beq.n	42108 <z_set_prio+0x78>
   42102:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   42104:	2b00      	cmp	r3, #0
   42106:	d1e5      	bne.n	420d4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   42108:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   4210a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   4210e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   42110:	6254      	str	r4, [r2, #36]	; 0x24
}
   42112:	e7eb      	b.n	420ec <z_set_prio+0x5c>
			thread->base.prio = prio;
   42114:	73a1      	strb	r1, [r4, #14]
   42116:	2000      	movs	r0, #0
   42118:	e7ec      	b.n	420f4 <z_set_prio+0x64>
   4211a:	bf00      	nop
   4211c:	20003aec 	.word	0x20003aec

00042120 <z_impl_k_thread_suspend>:
{
   42120:	b570      	push	{r4, r5, r6, lr}
   42122:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   42124:	3018      	adds	r0, #24
   42126:	f007 f8c0 	bl	492aa <z_abort_timeout>
	__asm__ volatile(
   4212a:	f04f 0320 	mov.w	r3, #32
   4212e:	f3ef 8611 	mrs	r6, BASEPRI
   42132:	f383 8812 	msr	BASEPRI_MAX, r3
   42136:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   4213a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   4213e:	7b63      	ldrb	r3, [r4, #13]
   42140:	2a00      	cmp	r2, #0
   42142:	da05      	bge.n	42150 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   42144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   42148:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4214a:	4620      	mov	r0, r4
   4214c:	f006 ff9c 	bl	49088 <sys_dlist_remove>
		update_cache(thread == _current);
   42150:	4d0b      	ldr	r5, [pc, #44]	; (42180 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   42152:	7b63      	ldrb	r3, [r4, #13]
   42154:	68a8      	ldr	r0, [r5, #8]
   42156:	f043 0310 	orr.w	r3, r3, #16
   4215a:	7363      	strb	r3, [r4, #13]
   4215c:	1b03      	subs	r3, r0, r4
   4215e:	4258      	negs	r0, r3
   42160:	4158      	adcs	r0, r3
   42162:	f7ff fe55 	bl	41e10 <update_cache>
	__asm__ volatile(
   42166:	f386 8811 	msr	BASEPRI, r6
   4216a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   4216e:	68ab      	ldr	r3, [r5, #8]
   42170:	42a3      	cmp	r3, r4
   42172:	d103      	bne.n	4217c <z_impl_k_thread_suspend+0x5c>
}
   42174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   42178:	f006 bfd1 	b.w	4911e <z_reschedule_unlocked>
}
   4217c:	bd70      	pop	{r4, r5, r6, pc}
   4217e:	bf00      	nop
   42180:	20003aec 	.word	0x20003aec

00042184 <k_sched_unlock>:
{
   42184:	b510      	push	{r4, lr}
	__asm__ volatile(
   42186:	f04f 0320 	mov.w	r3, #32
   4218a:	f3ef 8411 	mrs	r4, BASEPRI
   4218e:	f383 8812 	msr	BASEPRI_MAX, r3
   42192:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   42196:	4b08      	ldr	r3, [pc, #32]	; (421b8 <k_sched_unlock+0x34>)
   42198:	689a      	ldr	r2, [r3, #8]
   4219a:	7bd3      	ldrb	r3, [r2, #15]
   4219c:	3301      	adds	r3, #1
   4219e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   421a0:	2000      	movs	r0, #0
   421a2:	f7ff fe35 	bl	41e10 <update_cache>
	__asm__ volatile(
   421a6:	f384 8811 	msr	BASEPRI, r4
   421aa:	f3bf 8f6f 	isb	sy
}
   421ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   421b2:	f006 bfb4 	b.w	4911e <z_reschedule_unlocked>
   421b6:	bf00      	nop
   421b8:	20003aec 	.word	0x20003aec

000421bc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   421bc:	4b04      	ldr	r3, [pc, #16]	; (421d0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   421be:	2100      	movs	r1, #0
   421c0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   421c4:	e9c3 2208 	strd	r2, r2, [r3, #32]
   421c8:	4608      	mov	r0, r1
   421ca:	f7ff bdcb 	b.w	41d64 <k_sched_time_slice_set>
   421ce:	bf00      	nop
   421d0:	20003aec 	.word	0x20003aec

000421d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   421d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   421d6:	f04f 0320 	mov.w	r3, #32
   421da:	f3ef 8511 	mrs	r5, BASEPRI
   421de:	f383 8812 	msr	BASEPRI_MAX, r3
   421e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   421e6:	491a      	ldr	r1, [pc, #104]	; (42250 <z_impl_k_yield+0x7c>)
   421e8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   421ea:	7b43      	ldrb	r3, [r0, #13]
   421ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   421f0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   421f2:	f006 ff49 	bl	49088 <sys_dlist_remove>
	}
	queue_thread(_current);
   421f6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   421f8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   421fa:	4608      	mov	r0, r1
   421fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   42200:	735a      	strb	r2, [r3, #13]
   42202:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42206:	4282      	cmp	r2, r0
   42208:	d01c      	beq.n	42244 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4220a:	b1da      	cbz	r2, 42244 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   4220c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   4220e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   42212:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   42216:	42a6      	cmp	r6, r4
   42218:	d00f      	beq.n	4223a <z_impl_k_yield+0x66>
		return b2 - b1;
   4221a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   4221c:	2c00      	cmp	r4, #0
   4221e:	dd0c      	ble.n	4223a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   42220:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   42222:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   42226:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   42228:	6053      	str	r3, [r2, #4]
	update_cache(1);
   4222a:	2001      	movs	r0, #1
   4222c:	f7ff fdf0 	bl	41e10 <update_cache>
   42230:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   42232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   42236:	f7e8 b92f 	b.w	2a498 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   4223a:	42ba      	cmp	r2, r7
   4223c:	d002      	beq.n	42244 <z_impl_k_yield+0x70>
   4223e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   42240:	2a00      	cmp	r2, #0
   42242:	d1e6      	bne.n	42212 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   42244:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   42246:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   4224a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4224c:	624b      	str	r3, [r1, #36]	; 0x24
}
   4224e:	e7ec      	b.n	4222a <z_impl_k_yield+0x56>
   42250:	20003aec 	.word	0x20003aec

00042254 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   42254:	ea50 0301 	orrs.w	r3, r0, r1
{
   42258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4225c:	4605      	mov	r5, r0
   4225e:	460e      	mov	r6, r1
	if (ticks == 0) {
   42260:	d103      	bne.n	4226a <z_tick_sleep+0x16>
	z_impl_k_yield();
   42262:	f7ff ffb7 	bl	421d4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   42266:	2000      	movs	r0, #0
   42268:	e033      	b.n	422d2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   4226a:	f06f 0401 	mvn.w	r4, #1
   4226e:	1a24      	subs	r4, r4, r0
   42270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   42274:	eb63 0301 	sbc.w	r3, r3, r1
   42278:	2c01      	cmp	r4, #1
   4227a:	f173 0300 	sbcs.w	r3, r3, #0
   4227e:	da02      	bge.n	42286 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   42280:	f007 f853 	bl	4932a <sys_clock_tick_get_32>
   42284:	1944      	adds	r4, r0, r5
   42286:	f04f 0320 	mov.w	r3, #32
   4228a:	f3ef 8811 	mrs	r8, BASEPRI
   4228e:	f383 8812 	msr	BASEPRI_MAX, r3
   42292:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   42296:	4f10      	ldr	r7, [pc, #64]	; (422d8 <z_tick_sleep+0x84>)
   42298:	4b10      	ldr	r3, [pc, #64]	; (422dc <z_tick_sleep+0x88>)
   4229a:	68b8      	ldr	r0, [r7, #8]
   4229c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   4229e:	f7ff fea5 	bl	41fec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   422a2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   422a4:	490e      	ldr	r1, [pc, #56]	; (422e0 <z_tick_sleep+0x8c>)
   422a6:	462a      	mov	r2, r5
   422a8:	4633      	mov	r3, r6
   422aa:	3018      	adds	r0, #24
   422ac:	f000 f912 	bl	424d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   422b0:	68ba      	ldr	r2, [r7, #8]
   422b2:	7b53      	ldrb	r3, [r2, #13]
   422b4:	f043 0310 	orr.w	r3, r3, #16
   422b8:	7353      	strb	r3, [r2, #13]
   422ba:	4640      	mov	r0, r8
   422bc:	f7e8 f8ec 	bl	2a498 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   422c0:	f007 f833 	bl	4932a <sys_clock_tick_get_32>
   422c4:	1a20      	subs	r0, r4, r0
   422c6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   422ca:	2801      	cmp	r0, #1
   422cc:	f173 0300 	sbcs.w	r3, r3, #0
   422d0:	dbc9      	blt.n	42266 <z_tick_sleep+0x12>
}
   422d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   422d6:	bf00      	nop
   422d8:	20003aec 	.word	0x20003aec
   422dc:	20003b1c 	.word	0x20003b1c
   422e0:	0004915f 	.word	0x0004915f

000422e4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   422e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   422e8:	bf08      	it	eq
   422ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   422ee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   422f0:	d106      	bne.n	42300 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   422f2:	4b08      	ldr	r3, [pc, #32]	; (42314 <z_impl_k_sleep+0x30>)
   422f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   422f6:	f7ff ff13 	bl	42120 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   422fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   422fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   42300:	f7ff ffa8 	bl	42254 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   42304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   42308:	fb80 0303 	smull	r0, r3, r0, r3
   4230c:	0bc0      	lsrs	r0, r0, #15
   4230e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   42312:	e7f4      	b.n	422fe <z_impl_k_sleep+0x1a>
   42314:	20003aec 	.word	0x20003aec

00042318 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   42318:	4b01      	ldr	r3, [pc, #4]	; (42320 <z_impl_z_current_get+0x8>)
   4231a:	6898      	ldr	r0, [r3, #8]
   4231c:	4770      	bx	lr
   4231e:	bf00      	nop
   42320:	20003aec 	.word	0x20003aec

00042324 <z_impl_k_is_preempt_thread>:
   42324:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   42328:	b93b      	cbnz	r3, 4233a <z_impl_k_is_preempt_thread+0x16>
   4232a:	4b05      	ldr	r3, [pc, #20]	; (42340 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   4232c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   4232e:	89d8      	ldrh	r0, [r3, #14]
   42330:	287f      	cmp	r0, #127	; 0x7f
   42332:	bf8c      	ite	hi
   42334:	2000      	movhi	r0, #0
   42336:	2001      	movls	r0, #1
   42338:	4770      	bx	lr
   4233a:	2000      	movs	r0, #0
}
   4233c:	4770      	bx	lr
   4233e:	bf00      	nop
   42340:	20003aec 	.word	0x20003aec

00042344 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   42344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42348:	4604      	mov	r4, r0
   4234a:	f04f 0320 	mov.w	r3, #32
   4234e:	f3ef 8611 	mrs	r6, BASEPRI
   42352:	f383 8812 	msr	BASEPRI_MAX, r3
   42356:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   4235a:	7b43      	ldrb	r3, [r0, #13]
   4235c:	071a      	lsls	r2, r3, #28
   4235e:	d505      	bpl.n	4236c <z_thread_abort+0x28>
	__asm__ volatile(
   42360:	f386 8811 	msr	BASEPRI, r6
   42364:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   42368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   4236c:	f023 0220 	bic.w	r2, r3, #32
   42370:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   42374:	09d2      	lsrs	r2, r2, #7
   42376:	d120      	bne.n	423ba <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   42378:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   4237a:	68a3      	ldr	r3, [r4, #8]
   4237c:	b113      	cbz	r3, 42384 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   4237e:	4620      	mov	r0, r4
   42380:	f006 fe8a 	bl	49098 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   42384:	f104 0018 	add.w	r0, r4, #24
   42388:	f006 ff8f 	bl	492aa <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   4238c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   42390:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   42394:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42396:	42bd      	cmp	r5, r7
   42398:	d000      	beq.n	4239c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4239a:	b9b5      	cbnz	r5, 423ca <z_thread_abort+0x86>
		update_cache(1);
   4239c:	2001      	movs	r0, #1
   4239e:	f7ff fd37 	bl	41e10 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   423a2:	4b10      	ldr	r3, [pc, #64]	; (423e4 <z_thread_abort+0xa0>)
   423a4:	689b      	ldr	r3, [r3, #8]
   423a6:	42a3      	cmp	r3, r4
   423a8:	d1da      	bne.n	42360 <z_thread_abort+0x1c>
   423aa:	f3ef 8305 	mrs	r3, IPSR
   423ae:	2b00      	cmp	r3, #0
   423b0:	d1d6      	bne.n	42360 <z_thread_abort+0x1c>
   423b2:	4630      	mov	r0, r6
   423b4:	f7e8 f870 	bl	2a498 <arch_swap>
	return ret;
   423b8:	e7d2      	b.n	42360 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   423ba:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   423be:	f043 0308 	orr.w	r3, r3, #8
   423c2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   423c4:	f006 fe60 	bl	49088 <sys_dlist_remove>
}
   423c8:	e7d7      	b.n	4237a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   423ca:	4628      	mov	r0, r5
   423cc:	f006 fe64 	bl	49098 <unpend_thread_no_timeout>
   423d0:	f105 0018 	add.w	r0, r5, #24
   423d4:	f006 ff69 	bl	492aa <z_abort_timeout>
   423d8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   423dc:	4628      	mov	r0, r5
   423de:	f7ff fdb1 	bl	41f44 <ready_thread>
   423e2:	e7d7      	b.n	42394 <z_thread_abort+0x50>
   423e4:	20003aec 	.word	0x20003aec

000423e8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   423e8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   423ea:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   423ee:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   423f0:	e9cd 6700 	strd	r6, r7, [sp]
   423f4:	f7ff fe38 	bl	42068 <z_pend_curr>

	if (data != NULL) {
   423f8:	b11c      	cbz	r4, 42402 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   423fa:	4b03      	ldr	r3, [pc, #12]	; (42408 <z_sched_wait+0x20>)
   423fc:	689b      	ldr	r3, [r3, #8]
   423fe:	695b      	ldr	r3, [r3, #20]
   42400:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   42402:	b002      	add	sp, #8
   42404:	bdd0      	pop	{r4, r6, r7, pc}
   42406:	bf00      	nop
   42408:	20003aec 	.word	0x20003aec

0004240c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   4240c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   4240e:	4806      	ldr	r0, [pc, #24]	; (42428 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   42410:	4a06      	ldr	r2, [pc, #24]	; (4242c <z_data_copy+0x20>)
   42412:	4907      	ldr	r1, [pc, #28]	; (42430 <z_data_copy+0x24>)
   42414:	1a12      	subs	r2, r2, r0
   42416:	f002 fd53 	bl	44ec0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   4241a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   4241e:	4a05      	ldr	r2, [pc, #20]	; (42434 <z_data_copy+0x28>)
   42420:	4905      	ldr	r1, [pc, #20]	; (42438 <z_data_copy+0x2c>)
   42422:	4806      	ldr	r0, [pc, #24]	; (4243c <z_data_copy+0x30>)
   42424:	f002 bd4c 	b.w	44ec0 <memcpy>
   42428:	20000000 	.word	0x20000000
   4242c:	20000dd9 	.word	0x20000dd9
   42430:	0004ba18 	.word	0x0004ba18
   42434:	00000000 	.word	0x00000000
   42438:	0004ba18 	.word	0x0004ba18
   4243c:	20000000 	.word	0x20000000

00042440 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   42440:	4b03      	ldr	r3, [pc, #12]	; (42450 <elapsed+0x10>)
   42442:	681b      	ldr	r3, [r3, #0]
   42444:	b90b      	cbnz	r3, 4244a <elapsed+0xa>
   42446:	f7fc bfed 	b.w	3f424 <sys_clock_elapsed>
}
   4244a:	2000      	movs	r0, #0
   4244c:	4770      	bx	lr
   4244e:	bf00      	nop
   42450:	20003b28 	.word	0x20003b28

00042454 <next_timeout>:
	return list->head == list;
   42454:	4b10      	ldr	r3, [pc, #64]	; (42498 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   42456:	b510      	push	{r4, lr}
   42458:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4245a:	429c      	cmp	r4, r3
   4245c:	bf08      	it	eq
   4245e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   42460:	f7ff ffee 	bl	42440 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   42464:	b1a4      	cbz	r4, 42490 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   42466:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   4246a:	1a1b      	subs	r3, r3, r0
   4246c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   42470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   42474:	f170 0200 	sbcs.w	r2, r0, #0
   42478:	da0a      	bge.n	42490 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   4247a:	2800      	cmp	r0, #0
   4247c:	bfac      	ite	ge
   4247e:	4618      	movge	r0, r3
   42480:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   42482:	4b06      	ldr	r3, [pc, #24]	; (4249c <next_timeout+0x48>)
   42484:	691b      	ldr	r3, [r3, #16]
   42486:	b113      	cbz	r3, 4248e <next_timeout+0x3a>
   42488:	4298      	cmp	r0, r3
   4248a:	bfa8      	it	ge
   4248c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   4248e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   42490:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   42494:	e7f5      	b.n	42482 <next_timeout+0x2e>
   42496:	bf00      	nop
   42498:	200008f4 	.word	0x200008f4
   4249c:	20003aec 	.word	0x20003aec

000424a0 <remove_timeout>:
{
   424a0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   424a2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   424a4:	b168      	cbz	r0, 424c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   424a6:	4a0a      	ldr	r2, [pc, #40]	; (424d0 <remove_timeout+0x30>)
   424a8:	6852      	ldr	r2, [r2, #4]
   424aa:	4290      	cmp	r0, r2
   424ac:	d009      	beq.n	424c2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   424ae:	b143      	cbz	r3, 424c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   424b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   424b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   424b8:	1912      	adds	r2, r2, r4
   424ba:	eb41 0105 	adc.w	r1, r1, r5
   424be:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   424c2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   424c4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   424c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   424c8:	2300      	movs	r3, #0
	node->prev = NULL;
   424ca:	e9c0 3300 	strd	r3, r3, [r0]
}
   424ce:	bd30      	pop	{r4, r5, pc}
   424d0:	200008f4 	.word	0x200008f4

000424d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   424d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   424d8:	bf08      	it	eq
   424da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   424de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   424e0:	4604      	mov	r4, r0
   424e2:	461f      	mov	r7, r3
   424e4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   424e6:	d067      	beq.n	425b8 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   424e8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   424ea:	f04f 0320 	mov.w	r3, #32
   424ee:	f3ef 8611 	mrs	r6, BASEPRI
   424f2:	f383 8812 	msr	BASEPRI_MAX, r3
   424f6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   424fa:	f06f 0201 	mvn.w	r2, #1
   424fe:	1b53      	subs	r3, r2, r5
   42500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   42504:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   42508:	2b00      	cmp	r3, #0
   4250a:	db1b      	blt.n	42544 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   4250c:	4b2b      	ldr	r3, [pc, #172]	; (425bc <z_add_timeout+0xe8>)
   4250e:	e9d3 1300 	ldrd	r1, r3, [r3]
   42512:	1a52      	subs	r2, r2, r1
   42514:	eb6c 0303 	sbc.w	r3, ip, r3
   42518:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   4251a:	eb63 0307 	sbc.w	r3, r3, r7
   4251e:	2d01      	cmp	r5, #1
   42520:	f173 0200 	sbcs.w	r2, r3, #0
   42524:	bfbc      	itt	lt
   42526:	2501      	movlt	r5, #1
   42528:	2300      	movlt	r3, #0
   4252a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   4252e:	4824      	ldr	r0, [pc, #144]	; (425c0 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   42530:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42534:	4283      	cmp	r3, r0
   42536:	d118      	bne.n	4256a <z_add_timeout+0x96>
	node->prev = tail;
   42538:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   4253c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   42540:	6044      	str	r4, [r0, #4]
}
   42542:	e026      	b.n	42592 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   42544:	f7ff ff7c 	bl	42440 <elapsed>
   42548:	3501      	adds	r5, #1
   4254a:	f147 0700 	adc.w	r7, r7, #0
   4254e:	182d      	adds	r5, r5, r0
   42550:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   42554:	e9c4 5704 	strd	r5, r7, [r4, #16]
   42558:	e7e9      	b.n	4252e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   4255a:	1a52      	subs	r2, r2, r1
   4255c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   42560:	459c      	cmp	ip, r3
   42562:	e9c4 2504 	strd	r2, r5, [r4, #16]
   42566:	d0e7      	beq.n	42538 <z_add_timeout+0x64>
   42568:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   4256a:	2b00      	cmp	r3, #0
   4256c:	d0e4      	beq.n	42538 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   4256e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   42572:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   42576:	428a      	cmp	r2, r1
   42578:	eb75 0e07 	sbcs.w	lr, r5, r7
   4257c:	daed      	bge.n	4255a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   4257e:	1a8a      	subs	r2, r1, r2
   42580:	eb67 0505 	sbc.w	r5, r7, r5
   42584:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   42588:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   4258a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   4258e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   42590:	605c      	str	r4, [r3, #4]
	return list->head == list;
   42592:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42594:	4283      	cmp	r3, r0
   42596:	d00b      	beq.n	425b0 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   42598:	429c      	cmp	r4, r3
   4259a:	d109      	bne.n	425b0 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   4259c:	f7ff ff5a 	bl	42454 <next_timeout>

			if (next_time == 0 ||
   425a0:	b118      	cbz	r0, 425aa <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   425a2:	4b08      	ldr	r3, [pc, #32]	; (425c4 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   425a4:	691b      	ldr	r3, [r3, #16]
   425a6:	4283      	cmp	r3, r0
   425a8:	d002      	beq.n	425b0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   425aa:	2100      	movs	r1, #0
   425ac:	f7fc ff08 	bl	3f3c0 <sys_clock_set_timeout>
	__asm__ volatile(
   425b0:	f386 8811 	msr	BASEPRI, r6
   425b4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   425b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   425ba:	bf00      	nop
   425bc:	200019e8 	.word	0x200019e8
   425c0:	200008f4 	.word	0x200008f4
   425c4:	20003aec 	.word	0x20003aec

000425c8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   425c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   425cc:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   425ce:	f7ff fc79 	bl	41ec4 <z_time_slice>
	__asm__ volatile(
   425d2:	f04f 0320 	mov.w	r3, #32
   425d6:	f3ef 8411 	mrs	r4, BASEPRI
   425da:	f383 8812 	msr	BASEPRI_MAX, r3
   425de:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   425e2:	4e24      	ldr	r6, [pc, #144]	; (42674 <sys_clock_announce+0xac>)
	return list->head == list;
   425e4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 42678 <sys_clock_announce+0xb0>
   425e8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   425ea:	4d24      	ldr	r5, [pc, #144]	; (4267c <sys_clock_announce+0xb4>)
   425ec:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   425f0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   425f2:	4540      	cmp	r0, r8
		curr_tick += dt;
   425f4:	e9d5 1e00 	ldrd	r1, lr, [r5]
   425f8:	ea4f 77e2 	mov.w	r7, r2, asr #31
   425fc:	d00b      	beq.n	42616 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   425fe:	b150      	cbz	r0, 42616 <sys_clock_announce+0x4e>
   42600:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   42604:	429a      	cmp	r2, r3
   42606:	eb77 090c 	sbcs.w	r9, r7, ip
   4260a:	da16      	bge.n	4263a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   4260c:	1a9b      	subs	r3, r3, r2
   4260e:	eb6c 0c07 	sbc.w	ip, ip, r7
   42612:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   42616:	1852      	adds	r2, r2, r1
   42618:	eb4e 0707 	adc.w	r7, lr, r7
   4261c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   42620:	2500      	movs	r5, #0
   42622:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   42624:	f7ff ff16 	bl	42454 <next_timeout>
   42628:	4629      	mov	r1, r5
   4262a:	f7fc fec9 	bl	3f3c0 <sys_clock_set_timeout>
	__asm__ volatile(
   4262e:	f384 8811 	msr	BASEPRI, r4
   42632:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   42636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   4263a:	1859      	adds	r1, r3, r1
   4263c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   42640:	1ad3      	subs	r3, r2, r3
   42642:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   42644:	2200      	movs	r2, #0
   42646:	2300      	movs	r3, #0
   42648:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   4264c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   42650:	f7ff ff26 	bl	424a0 <remove_timeout>
   42654:	f384 8811 	msr	BASEPRI, r4
   42658:	f3bf 8f6f 	isb	sy
		t->fn(t);
   4265c:	6883      	ldr	r3, [r0, #8]
   4265e:	4798      	blx	r3
	__asm__ volatile(
   42660:	f04f 0320 	mov.w	r3, #32
   42664:	f3ef 8411 	mrs	r4, BASEPRI
   42668:	f383 8812 	msr	BASEPRI_MAX, r3
   4266c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   42670:	e7bc      	b.n	425ec <sys_clock_announce+0x24>
   42672:	bf00      	nop
   42674:	20003b28 	.word	0x20003b28
   42678:	200008f4 	.word	0x200008f4
   4267c:	200019e8 	.word	0x200019e8

00042680 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   42680:	b510      	push	{r4, lr}
   42682:	f04f 0320 	mov.w	r3, #32
   42686:	f3ef 8411 	mrs	r4, BASEPRI
   4268a:	f383 8812 	msr	BASEPRI_MAX, r3
   4268e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   42692:	f7fc fec7 	bl	3f424 <sys_clock_elapsed>
   42696:	4a05      	ldr	r2, [pc, #20]	; (426ac <sys_clock_tick_get+0x2c>)
   42698:	e9d2 3100 	ldrd	r3, r1, [r2]
   4269c:	18c0      	adds	r0, r0, r3
   4269e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   426a2:	f384 8811 	msr	BASEPRI, r4
   426a6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   426aa:	bd10      	pop	{r4, pc}
   426ac:	200019e8 	.word	0x200019e8

000426b0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   426b0:	b570      	push	{r4, r5, r6, lr}
   426b2:	4604      	mov	r4, r0
	__asm__ volatile(
   426b4:	f04f 0320 	mov.w	r3, #32
   426b8:	f3ef 8511 	mrs	r5, BASEPRI
   426bc:	f383 8812 	msr	BASEPRI_MAX, r3
   426c0:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   426c4:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   426c8:	3301      	adds	r3, #1
   426ca:	f142 0200 	adc.w	r2, r2, #0
   426ce:	2b02      	cmp	r3, #2
   426d0:	f172 0300 	sbcs.w	r3, r2, #0
   426d4:	d304      	bcc.n	426e0 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   426d6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   426da:	4917      	ldr	r1, [pc, #92]	; (42738 <z_timer_expiration_handler+0x88>)
   426dc:	f7ff fefa 	bl	424d4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   426e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   426e2:	3301      	adds	r3, #1
   426e4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   426e6:	6a23      	ldr	r3, [r4, #32]
   426e8:	b173      	cbz	r3, 42708 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   426ea:	f385 8811 	msr	BASEPRI, r5
   426ee:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   426f2:	6a23      	ldr	r3, [r4, #32]
   426f4:	4620      	mov	r0, r4
   426f6:	4798      	blx	r3
	__asm__ volatile(
   426f8:	f04f 0320 	mov.w	r3, #32
   426fc:	f3ef 8511 	mrs	r5, BASEPRI
   42700:	f383 8812 	msr	BASEPRI_MAX, r3
   42704:	f3bf 8f6f 	isb	sy
	return list->head == list;
   42708:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4270c:	42a6      	cmp	r6, r4
   4270e:	d000      	beq.n	42712 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   42710:	b926      	cbnz	r6, 4271c <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   42712:	f385 8811 	msr	BASEPRI, r5
   42716:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   4271a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   4271c:	4630      	mov	r0, r6
   4271e:	f006 fcce 	bl	490be <z_unpend_thread_no_timeout>
   42722:	2300      	movs	r3, #0
   42724:	67f3      	str	r3, [r6, #124]	; 0x7c
   42726:	f385 8811 	msr	BASEPRI, r5
   4272a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   4272e:	4630      	mov	r0, r6
}
   42730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   42734:	f006 bd03 	b.w	4913e <z_ready_thread>
   42738:	000426b1 	.word	0x000426b1

0004273c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   4273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42740:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   42742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   42746:	bf08      	it	eq
   42748:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   4274c:	4606      	mov	r6, r0
   4274e:	461c      	mov	r4, r3
   42750:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   42754:	4689      	mov	r9, r1
   42756:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   42758:	d03e      	beq.n	427d8 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   4275a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   4275e:	bf08      	it	eq
   42760:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   42764:	4615      	mov	r5, r2
   42766:	4607      	mov	r7, r0
   42768:	d014      	beq.n	42794 <z_impl_k_timer_start+0x58>
   4276a:	ea50 0302 	orrs.w	r3, r0, r2
   4276e:	d011      	beq.n	42794 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   42770:	f06f 0301 	mvn.w	r3, #1
   42774:	1a9b      	subs	r3, r3, r2
   42776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4277a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   4277e:	2b00      	cmp	r3, #0
   42780:	da08      	bge.n	42794 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   42782:	2a02      	cmp	r2, #2
   42784:	f170 0300 	sbcs.w	r3, r0, #0
   42788:	bfbc      	itt	lt
   4278a:	2502      	movlt	r5, #2
   4278c:	2700      	movlt	r7, #0
   4278e:	3d01      	subs	r5, #1
   42790:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   42794:	f06f 0301 	mvn.w	r3, #1
   42798:	1a5b      	subs	r3, r3, r1
   4279a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4279e:	eb63 0304 	sbc.w	r3, r3, r4
   427a2:	2b00      	cmp	r3, #0
   427a4:	da09      	bge.n	427ba <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   427a6:	2901      	cmp	r1, #1
   427a8:	f174 0300 	sbcs.w	r3, r4, #0
   427ac:	bfbc      	itt	lt
   427ae:	2101      	movlt	r1, #1
   427b0:	2400      	movlt	r4, #0
   427b2:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   427b6:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   427ba:	4630      	mov	r0, r6
   427bc:	f006 fd75 	bl	492aa <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   427c0:	2300      	movs	r3, #0
   427c2:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   427c4:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   427c8:	464a      	mov	r2, r9
   427ca:	4643      	mov	r3, r8
   427cc:	4630      	mov	r0, r6
   427ce:	4903      	ldr	r1, [pc, #12]	; (427dc <z_impl_k_timer_start+0xa0>)
		     duration);
}
   427d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   427d4:	f7ff be7e 	b.w	424d4 <z_add_timeout>
}
   427d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   427dc:	000426b1 	.word	0x000426b1

000427e0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   427e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   427e4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   427e6:	4b29      	ldr	r3, [pc, #164]	; (4288c <z_impl_k_poll+0xac>)
   427e8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   427ea:	2301      	movs	r3, #1
   427ec:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   427f0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   427f4:	ea52 0305 	orrs.w	r3, r2, r5
{
   427f8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   427fa:	bf0c      	ite	eq
   427fc:	2301      	moveq	r3, #1
   427fe:	2300      	movne	r3, #0
   42800:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   42804:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   42806:	f006 fe11 	bl	4942c <register_events>
   4280a:	4681      	mov	r9, r0
	__asm__ volatile(
   4280c:	f04f 0320 	mov.w	r3, #32
   42810:	f3ef 8a11 	mrs	sl, BASEPRI
   42814:	f383 8812 	msr	BASEPRI_MAX, r3
   42818:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   4281c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   42820:	b964      	cbnz	r4, 4283c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   42822:	4601      	mov	r1, r0
   42824:	4652      	mov	r2, sl
   42826:	4640      	mov	r0, r8
   42828:	f006 fed1 	bl	495ce <clear_event_registrations>
	__asm__ volatile(
   4282c:	f38a 8811 	msr	BASEPRI, sl
   42830:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   42834:	4620      	mov	r0, r4
   42836:	b002      	add	sp, #8
   42838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   4283c:	2300      	movs	r3, #0
   4283e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   42842:	ea56 0305 	orrs.w	r3, r6, r5
   42846:	d106      	bne.n	42856 <z_impl_k_poll+0x76>
   42848:	f38a 8811 	msr	BASEPRI, sl
   4284c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   42850:	f06f 040a 	mvn.w	r4, #10
   42854:	e7ee      	b.n	42834 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   42856:	e9cd 6500 	strd	r6, r5, [sp]
   4285a:	4a0d      	ldr	r2, [pc, #52]	; (42890 <z_impl_k_poll+0xb0>)
   4285c:	480d      	ldr	r0, [pc, #52]	; (42894 <z_impl_k_poll+0xb4>)
   4285e:	4651      	mov	r1, sl
   42860:	f7ff fc02 	bl	42068 <z_pend_curr>
   42864:	4604      	mov	r4, r0
	__asm__ volatile(
   42866:	f04f 0320 	mov.w	r3, #32
   4286a:	f3ef 8511 	mrs	r5, BASEPRI
   4286e:	f383 8812 	msr	BASEPRI_MAX, r3
   42872:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   42876:	462a      	mov	r2, r5
   42878:	4649      	mov	r1, r9
   4287a:	4640      	mov	r0, r8
   4287c:	f006 fea7 	bl	495ce <clear_event_registrations>
	__asm__ volatile(
   42880:	f385 8811 	msr	BASEPRI, r5
   42884:	f3bf 8f6f 	isb	sy
	return swap_rc;
   42888:	e7d4      	b.n	42834 <z_impl_k_poll+0x54>
   4288a:	bf00      	nop
   4288c:	20003aec 	.word	0x20003aec
   42890:	200008fc 	.word	0x200008fc
   42894:	20003c81 	.word	0x20003c81

00042898 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   42898:	b538      	push	{r3, r4, r5, lr}
   4289a:	4603      	mov	r3, r0
	__asm__ volatile(
   4289c:	f04f 0220 	mov.w	r2, #32
   428a0:	f3ef 8511 	mrs	r5, BASEPRI
   428a4:	f382 8812 	msr	BASEPRI_MAX, r2
   428a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   428ac:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   428ae:	2101      	movs	r1, #1
   428b0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   428b2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   428b4:	4283      	cmp	r3, r0
   428b6:	d106      	bne.n	428c6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   428b8:	f385 8811 	msr	BASEPRI, r5
   428bc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   428c0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   428c2:	4620      	mov	r0, r4
   428c4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   428c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   428ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   428cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   428ce:	2300      	movs	r3, #0
	node->prev = NULL;
   428d0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   428d4:	f006 fe21 	bl	4951a <signal_poll_event>
	z_reschedule(&lock, key);
   428d8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   428da:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   428dc:	4801      	ldr	r0, [pc, #4]	; (428e4 <z_impl_k_poll_signal_raise+0x4c>)
   428de:	f7ff fa71 	bl	41dc4 <z_reschedule>
	return rc;
   428e2:	e7ee      	b.n	428c2 <z_impl_k_poll_signal_raise+0x2a>
   428e4:	20003c81 	.word	0x20003c81

000428e8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   428e8:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   428ea:	4601      	mov	r1, r0
   428ec:	4801      	ldr	r0, [pc, #4]	; (428f4 <k_aligned_alloc+0xc>)
   428ee:	f006 beba 	b.w	49666 <z_heap_aligned_alloc>
   428f2:	bf00      	nop
   428f4:	20000b48 	.word	0x20000b48

000428f8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   428f8:	4b01      	ldr	r3, [pc, #4]	; (42900 <k_thread_system_pool_assign+0x8>)
   428fa:	6743      	str	r3, [r0, #116]	; 0x74
}
   428fc:	4770      	bx	lr
   428fe:	bf00      	nop
   42900:	20000b48 	.word	0x20000b48

00042904 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   42904:	b538      	push	{r3, r4, r5, lr}
   42906:	4604      	mov	r4, r0
   42908:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   4290a:	f006 f9dd 	bl	48cc8 <k_is_in_isr>
   4290e:	b950      	cbnz	r0, 42926 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   42910:	4b06      	ldr	r3, [pc, #24]	; (4292c <z_thread_aligned_alloc+0x28>)
   42912:	689b      	ldr	r3, [r3, #8]
   42914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   42916:	b143      	cbz	r3, 4292a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   42918:	462a      	mov	r2, r5
   4291a:	4621      	mov	r1, r4
   4291c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   4291e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   42922:	f006 bea0 	b.w	49666 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   42926:	4b02      	ldr	r3, [pc, #8]	; (42930 <z_thread_aligned_alloc+0x2c>)
   42928:	e7f6      	b.n	42918 <z_thread_aligned_alloc+0x14>
}
   4292a:	bd38      	pop	{r3, r4, r5, pc}
   4292c:	20003aec 	.word	0x20003aec
   42930:	20000b48 	.word	0x20000b48

00042934 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   42934:	4770      	bx	lr

00042936 <zmk_sensors_trigger_handler>:
static void zmk_sensors_trigger_handler(const struct device *dev, struct sensor_trigger *trigger) {
   42936:	b530      	push	{r4, r5, lr}
   42938:	4604      	mov	r4, r0
   4293a:	b085      	sub	sp, #20
   4293c:	460d      	mov	r5, r1
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   4293e:	6883      	ldr	r3, [r0, #8]
   42940:	2139      	movs	r1, #57	; 0x39
   42942:	68db      	ldr	r3, [r3, #12]
   42944:	4798      	blx	r3
    if (err) {
   42946:	b9e0      	cbnz	r0, 42982 <zmk_sensors_trigger_handler+0x4c>
    ZMK_EVENT_RAISE(new_zmk_sensor_event((struct zmk_sensor_event){
   42948:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   4294c:	f88d 3000 	strb.w	r3, [sp]
   42950:	9401      	str	r4, [sp, #4]
	return z_impl_k_uptime_ticks();
   42952:	f006 fcee 	bl	49332 <z_impl_k_uptime_ticks>
   42956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4295a:	fba0 0302 	umull	r0, r3, r0, r2
   4295e:	fb02 3101 	mla	r1, r2, r1, r3
   42962:	0bc0      	lsrs	r0, r0, #15
   42964:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   42968:	0bc9      	lsrs	r1, r1, #15
   4296a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   4296e:	ab04      	add	r3, sp, #16
   42970:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   42974:	f7e5 f9c8 	bl	27d08 <new_zmk_sensor_event>
}
   42978:	b005      	add	sp, #20
   4297a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ZMK_EVENT_RAISE(new_zmk_sensor_event((struct zmk_sensor_event){
   4297e:	f000 b802 	b.w	42986 <zmk_event_manager_raise>
}
   42982:	b005      	add	sp, #20
   42984:	bd30      	pop	{r4, r5, pc}

00042986 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   42986:	2100      	movs	r1, #0
   42988:	f7e5 b8a8 	b.w	27adc <zmk_event_manager_handle_from>

0004298c <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   4298c:	2301      	movs	r3, #1
   4298e:	fa03 f101 	lsl.w	r1, r3, r1
   42992:	6903      	ldr	r3, [r0, #16]
   42994:	681b      	ldr	r3, [r3, #0]
   42996:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   42998:	bf18      	it	ne
   4299a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   4299e:	b112      	cbz	r2, 429a6 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   429a0:	6883      	ldr	r3, [r0, #8]
   429a2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   429a4:	4718      	bx	r3
   429a6:	6883      	ldr	r3, [r0, #8]
   429a8:	691b      	ldr	r3, [r3, #16]
   429aa:	e7fb      	b.n	429a4 <gpio_pin_set+0x18>

000429ac <ext_power_generic_get>:
    return data->status;
   429ac:	6903      	ldr	r3, [r0, #16]
}
   429ae:	7918      	ldrb	r0, [r3, #4]
   429b0:	4770      	bx	lr

000429b2 <ext_power_generic_enable>:
static int ext_power_generic_enable(const struct device *dev) {
   429b2:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   429b4:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   429b6:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   429b8:	7919      	ldrb	r1, [r3, #4]
   429ba:	6820      	ldr	r0, [r4, #0]
   429bc:	2201      	movs	r2, #1
   429be:	f7ff ffe5 	bl	4298c <gpio_pin_set>
   429c2:	b928      	cbnz	r0, 429d0 <ext_power_generic_enable+0x1e>
    data->status = true;
   429c4:	2301      	movs	r3, #1
   429c6:	7123      	strb	r3, [r4, #4]
}
   429c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   429cc:	f7e5 b92c 	b.w	27c28 <ext_power_save_state>
}
   429d0:	f06f 0004 	mvn.w	r0, #4
   429d4:	bd10      	pop	{r4, pc}

000429d6 <ext_power_generic_disable>:
static int ext_power_generic_disable(const struct device *dev) {
   429d6:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   429d8:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   429da:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   429dc:	7919      	ldrb	r1, [r3, #4]
   429de:	6820      	ldr	r0, [r4, #0]
   429e0:	2200      	movs	r2, #0
   429e2:	f7ff ffd3 	bl	4298c <gpio_pin_set>
   429e6:	b920      	cbnz	r0, 429f2 <ext_power_generic_disable+0x1c>
    data->status = false;
   429e8:	7120      	strb	r0, [r4, #4]
}
   429ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   429ee:	f7e5 b91b 	b.w	27c28 <ext_power_save_state>
}
   429f2:	f06f 0004 	mvn.w	r0, #4
   429f6:	bd10      	pop	{r4, pc}

000429f8 <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   429f8:	2000      	movs	r0, #0
   429fa:	4770      	bx	lr

000429fc <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   429fc:	b082      	sub	sp, #8
   429fe:	b508      	push	{r3, lr}
   42a00:	a902      	add	r1, sp, #8
   42a02:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   42a06:	6800      	ldr	r0, [r0, #0]
   42a08:	f7fe fbc0 	bl	4118c <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   42a0c:	6843      	ldr	r3, [r0, #4]
   42a0e:	6818      	ldr	r0, [r3, #0]
   42a10:	f7e5 fed6 	bl	287c0 <sys_reboot>

00042a14 <ext_power_enable>:
    if (api->enable == NULL) {
   42a14:	6883      	ldr	r3, [r0, #8]
   42a16:	681b      	ldr	r3, [r3, #0]
   42a18:	b103      	cbz	r3, 42a1c <ext_power_enable+0x8>
    return api->enable(dev);
   42a1a:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   42a1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   42a20:	4770      	bx	lr

00042a22 <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   42a22:	6883      	ldr	r3, [r0, #8]
   42a24:	685b      	ldr	r3, [r3, #4]
   42a26:	b103      	cbz	r3, 42a2a <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   42a28:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   42a2a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   42a2e:	4770      	bx	lr

00042a30 <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   42a30:	6883      	ldr	r3, [r0, #8]
   42a32:	689b      	ldr	r3, [r3, #8]
   42a34:	b103      	cbz	r3, 42a38 <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   42a36:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   42a38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   42a3c:	4770      	bx	lr

00042a3e <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   42a3e:	b082      	sub	sp, #8
   42a40:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   42a44:	2000      	movs	r0, #0
   42a46:	b002      	add	sp, #8
   42a48:	4770      	bx	lr

00042a4a <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   42a4a:	2000      	movs	r0, #0
   42a4c:	4770      	bx	lr

00042a4e <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   42a4e:	f7e5 b9d9 	b.w	27e04 <zmk_battery_update.constprop.0>

00042a52 <split_listener>:
#include <zmk/event_manager.h>
#include <zmk/events/position_state_changed.h>
#include <zmk/hid.h>
#include <zmk/endpoints.h>

int split_listener(const zmk_event_t *eh) {
   42a52:	b508      	push	{r3, lr}
    LOG_DBG("");
    const struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   42a54:	f7e5 f94e 	bl	27cf4 <as_zmk_position_state_changed>
    if (ev != NULL) {
   42a58:	4603      	mov	r3, r0
   42a5a:	b150      	cbz	r0, 42a72 <split_listener+0x20>
        if (ev->state) {
   42a5c:	7a1b      	ldrb	r3, [r3, #8]
            return zmk_split_bt_position_pressed(ev->position);
   42a5e:	7900      	ldrb	r0, [r0, #4]
        if (ev->state) {
   42a60:	b11b      	cbz	r3, 42a6a <split_listener+0x18>
        } else {
            return zmk_split_bt_position_released(ev->position);
        }
    }
    return ZMK_EV_EVENT_BUBBLE;
}
   42a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_pressed(ev->position);
   42a66:	f7e5 ba85 	b.w	27f74 <zmk_split_bt_position_pressed>
}
   42a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_released(ev->position);
   42a6e:	f7e5 ba8f 	b.w	27f90 <zmk_split_bt_position_released>
}
   42a72:	bd08      	pop	{r3, pc}

00042a74 <split_svc_pos_state_ccc>:
}
   42a74:	4770      	bx	lr

00042a76 <split_svc_num_of_positions>:
                                          void *buf, uint16_t len, uint16_t offset) {
   42a76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, attrs->user_data, sizeof(uint8_t));
   42a78:	2401      	movs	r4, #1
   42a7a:	9402      	str	r4, [sp, #8]
   42a7c:	68cc      	ldr	r4, [r1, #12]
   42a7e:	9401      	str	r4, [sp, #4]
   42a80:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   42a84:	9400      	str	r4, [sp, #0]
   42a86:	f004 fbc7 	bl	47218 <bt_gatt_attr_read>
}
   42a8a:	b004      	add	sp, #16
   42a8c:	bd10      	pop	{r4, pc}

00042a8e <split_svc_run_behavior>:
                                      uint8_t flags) {
   42a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42a92:	b092      	sub	sp, #72	; 0x48
   42a94:	461f      	mov	r7, r3
   42a96:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    uint16_t end_addr = offset + len;
   42a9a:	19dd      	adds	r5, r3, r7
                                      uint8_t flags) {
   42a9c:	460c      	mov	r4, r1
    uint16_t end_addr = offset + len;
   42a9e:	b2ad      	uxth	r5, r5
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   42aa0:	2d13      	cmp	r5, #19
    struct zmk_split_run_behavior_payload *payload = attrs->user_data;
   42aa2:	68e4      	ldr	r4, [r4, #12]
                                      uint8_t flags) {
   42aa4:	4611      	mov	r1, r2
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   42aa6:	d860      	bhi.n	42b6a <split_svc_run_behavior+0xdc>
    memcpy(payload + offset, buf, len);
   42aa8:	2013      	movs	r0, #19
   42aaa:	463a      	mov	r2, r7
   42aac:	fb00 4003 	mla	r0, r0, r3, r4
   42ab0:	f002 fa06 	bl	44ec0 <memcpy>
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   42ab4:	2d0a      	cmp	r5, #10
   42ab6:	d941      	bls.n	42b3c <split_svc_run_behavior+0xae>
        payload->behavior_dev[end_addr - behavior_dev_offset - 1] == '\0') {
   42ab8:	4425      	add	r5, r4
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   42aba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   42abe:	2b00      	cmp	r3, #0
   42ac0:	d13c      	bne.n	42b3c <split_svc_run_behavior+0xae>
            .behavior_dev = payload->behavior_dev,
   42ac2:	f104 020a 	add.w	r2, r4, #10
        struct zmk_behavior_binding binding = {
   42ac6:	9203      	str	r2, [sp, #12]
            .param1 = payload->data.param1,
   42ac8:	f8d4 2002 	ldr.w	r2, [r4, #2]
        struct zmk_behavior_binding binding = {
   42acc:	9204      	str	r2, [sp, #16]
            .param2 = payload->data.param2,
   42ace:	f8d4 2006 	ldr.w	r2, [r4, #6]
        struct zmk_behavior_binding_event event = {.position = payload->data.position,
   42ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
   42ad6:	f894 8000 	ldrb.w	r8, [r4]
   42ada:	f006 fc2a 	bl	49332 <z_impl_k_uptime_ticks>
   42ade:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   42ae2:	fba0 500c 	umull	r5, r0, r0, ip
   42ae6:	fb0c 0c01 	mla	ip, ip, r1, r0
        if (payload->data.state > 0) {
   42aea:	7862      	ldrb	r2, [r4, #1]
   42aec:	0bed      	lsrs	r5, r5, #15
   42aee:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
   42af2:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   42af6:	e9cd 8507 	strd	r8, r5, [sp, #28]
   42afa:	ac0a      	add	r4, sp, #40	; 0x28
   42afc:	ab06      	add	r3, sp, #24
   42afe:	ae0e      	add	r6, sp, #56	; 0x38
   42b00:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   42b04:	b1f2      	cbz	r2, 42b44 <split_svc_run_behavior+0xb6>
            err = behavior_keymap_binding_pressed(&binding, event);
   42b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   42b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   42b0c:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   42b10:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   42b14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   42b18:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   42b1c:	9803      	ldr	r0, [sp, #12]
   42b1e:	f7fe fb35 	bl	4118c <z_impl_device_get_binding>

    if (dev == NULL) {
   42b22:	b158      	cbz	r0, 42b3c <split_svc_run_behavior+0xae>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   42b24:	6883      	ldr	r3, [r0, #8]
   42b26:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   42b28:	b144      	cbz	r4, 42b3c <split_svc_run_behavior+0xae>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   42b2a:	ab12      	add	r3, sp, #72	; 0x48
   42b2c:	e913 0003 	ldmdb	r3, {r0, r1}
   42b30:	e88d 0003 	stmia.w	sp, {r0, r1}
   42b34:	a803      	add	r0, sp, #12
   42b36:	e896 000c 	ldmia.w	r6, {r2, r3}
   42b3a:	47a0      	blx	r4
    return len;
   42b3c:	4638      	mov	r0, r7
}
   42b3e:	b012      	add	sp, #72	; 0x48
   42b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            err = behavior_keymap_binding_released(&binding, event);
   42b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   42b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   42b4a:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   42b4e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   42b52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   42b56:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   42b5a:	9803      	ldr	r0, [sp, #12]
   42b5c:	f7fe fb16 	bl	4118c <z_impl_device_get_binding>
    if (dev == NULL) {
   42b60:	2800      	cmp	r0, #0
   42b62:	d0eb      	beq.n	42b3c <split_svc_run_behavior+0xae>
    if (api->binding_released == NULL) {
   42b64:	6883      	ldr	r3, [r0, #8]
   42b66:	68dc      	ldr	r4, [r3, #12]
   42b68:	e7de      	b.n	42b28 <split_svc_run_behavior+0x9a>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   42b6a:	f06f 0006 	mvn.w	r0, #6
   42b6e:	e7e6      	b.n	42b3e <split_svc_run_behavior+0xb0>

00042b70 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   42b70:	b500      	push	{lr}
   42b72:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   42b74:	f003 fa17 	bl	45fa6 <bt_conn_get_dst>
   42b78:	4669      	mov	r1, sp
   42b7a:	f7e5 fa25 	bl	27fc8 <bt_addr_le_to_str.constprop.0.isra.0>
}
   42b7e:	b009      	add	sp, #36	; 0x24
   42b80:	f85d fb04 	ldr.w	pc, [sp], #4

00042b84 <le_param_updated>:
                             uint16_t timeout) {
   42b84:	b500      	push	{lr}
   42b86:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   42b88:	f003 fa0d 	bl	45fa6 <bt_conn_get_dst>
   42b8c:	4669      	mov	r1, sp
   42b8e:	f7e5 fa1b 	bl	27fc8 <bt_addr_le_to_str.constprop.0.isra.0>
}
   42b92:	b009      	add	sp, #36	; 0x24
   42b94:	f85d fb04 	ldr.w	pc, [sp], #4

00042b98 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   42b98:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   42b9a:	f7e5 faa7 	bl	280ec <zmk_usb_get_conn_state>
   42b9e:	f7e5 f8c9 	bl	27d34 <new_zmk_usb_conn_state_changed>
}
   42ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   42ba6:	f7ff beee 	b.w	42986 <zmk_event_manager_raise>

00042baa <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   42baa:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   42bac:	2364      	movs	r3, #100	; 0x64
{
   42bae:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   42bb0:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   42bb2:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   42bb4:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   42bb8:	b111      	cbz	r1, 42bc0 <u8_to_dec+0x16>
   42bba:	3d01      	subs	r5, #1
   42bbc:	d101      	bne.n	42bc2 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   42bbe:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   42bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   42bc2:	429a      	cmp	r2, r3
		digit = value / divisor;
   42bc4:	fbb2 f7f3 	udiv	r7, r2, r3
   42bc8:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   42bca:	d202      	bcs.n	42bd2 <u8_to_dec+0x28>
   42bcc:	2b01      	cmp	r3, #1
   42bce:	d000      	beq.n	42bd2 <u8_to_dec+0x28>
   42bd0:	b130      	cbz	r0, 42be0 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   42bd2:	3630      	adds	r6, #48	; 0x30
			buflen--;
   42bd4:	3901      	subs	r1, #1
			num_digits++;
   42bd6:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   42bd8:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   42bdc:	b2c9      	uxtb	r1, r1
			num_digits++;
   42bde:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   42be0:	fb03 2217 	mls	r2, r3, r7, r2
   42be4:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   42be6:	fbb3 f3fc 	udiv	r3, r3, ip
   42bea:	e7e5      	b.n	42bb8 <u8_to_dec+0xe>

00042bec <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   42bec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   42bf0:	b2db      	uxtb	r3, r3
   42bf2:	2b09      	cmp	r3, #9
   42bf4:	d802      	bhi.n	42bfc <char2hex+0x10>
		*x = c - '0';
   42bf6:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   42bf8:	2000      	movs	r0, #0
   42bfa:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   42bfc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   42c00:	2b05      	cmp	r3, #5
   42c02:	d802      	bhi.n	42c0a <char2hex+0x1e>
		*x = c - 'a' + 10;
   42c04:	3857      	subs	r0, #87	; 0x57
   42c06:	7008      	strb	r0, [r1, #0]
   42c08:	e7f6      	b.n	42bf8 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   42c0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   42c0e:	2b05      	cmp	r3, #5
   42c10:	d801      	bhi.n	42c16 <char2hex+0x2a>
		*x = c - 'A' + 10;
   42c12:	3837      	subs	r0, #55	; 0x37
   42c14:	e7f7      	b.n	42c06 <char2hex+0x1a>
		return -EINVAL;
   42c16:	f06f 0015 	mvn.w	r0, #21
}
   42c1a:	4770      	bx	lr

00042c1c <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   42c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   42c1e:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   42c20:	f001 0001 	and.w	r0, r1, #1
   42c24:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   42c28:	429d      	cmp	r5, r3
   42c2a:	ea4f 0651 	mov.w	r6, r1, lsr #1
   42c2e:	d903      	bls.n	42c38 <hex2bin+0x1c>
		return 0;
   42c30:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   42c32:	4628      	mov	r0, r5
   42c34:	b003      	add	sp, #12
   42c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   42c38:	b158      	cbz	r0, 42c52 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   42c3a:	7820      	ldrb	r0, [r4, #0]
   42c3c:	f10d 0107 	add.w	r1, sp, #7
   42c40:	f7ff ffd4 	bl	42bec <char2hex>
   42c44:	2800      	cmp	r0, #0
   42c46:	dbf3      	blt.n	42c30 <hex2bin+0x14>
		buf[0] = dec;
   42c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42c4c:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   42c50:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   42c52:	3401      	adds	r4, #1
   42c54:	4416      	add	r6, r2
   42c56:	42b2      	cmp	r2, r6
   42c58:	d0eb      	beq.n	42c32 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   42c5a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   42c5e:	f10d 0107 	add.w	r1, sp, #7
   42c62:	f7ff ffc3 	bl	42bec <char2hex>
   42c66:	2800      	cmp	r0, #0
   42c68:	dbe2      	blt.n	42c30 <hex2bin+0x14>
		buf[i] = dec << 4;
   42c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42c6e:	011b      	lsls	r3, r3, #4
   42c70:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   42c72:	f814 0b02 	ldrb.w	r0, [r4], #2
   42c76:	f7ff ffb9 	bl	42bec <char2hex>
   42c7a:	2800      	cmp	r0, #0
   42c7c:	dbd8      	blt.n	42c30 <hex2bin+0x14>
		buf[i] += dec;
   42c7e:	7813      	ldrb	r3, [r2, #0]
   42c80:	f89d 1007 	ldrb.w	r1, [sp, #7]
   42c84:	440b      	add	r3, r1
   42c86:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   42c8a:	e7e4      	b.n	42c56 <hex2bin+0x3a>

00042c8c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   42c8c:	4603      	mov	r3, r0
   42c8e:	b140      	cbz	r0, 42ca2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   42c90:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   42c92:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   42c96:	2a02      	cmp	r2, #2
   42c98:	d006      	beq.n	42ca8 <sys_notify_validate+0x1c>
   42c9a:	2a03      	cmp	r2, #3
   42c9c:	d004      	beq.n	42ca8 <sys_notify_validate+0x1c>
   42c9e:	2a01      	cmp	r2, #1
   42ca0:	d005      	beq.n	42cae <sys_notify_validate+0x22>
		return -EINVAL;
   42ca2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   42ca6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   42ca8:	681a      	ldr	r2, [r3, #0]
   42caa:	2a00      	cmp	r2, #0
   42cac:	d0f9      	beq.n	42ca2 <sys_notify_validate+0x16>
		notify->result = 0;
   42cae:	2000      	movs	r0, #0
   42cb0:	6098      	str	r0, [r3, #8]
   42cb2:	4770      	bx	lr

00042cb4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   42cb4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   42cb6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   42cba:	2a02      	cmp	r2, #2
{
   42cbc:	b510      	push	{r4, lr}
   42cbe:	4603      	mov	r3, r0
	notify->result = res;
   42cc0:	6081      	str	r1, [r0, #8]
	switch (method) {
   42cc2:	d00a      	beq.n	42cda <sys_notify_finalize+0x26>
   42cc4:	2a03      	cmp	r2, #3
   42cc6:	d10b      	bne.n	42ce0 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   42cc8:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   42cca:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   42ccc:	2200      	movs	r2, #0
   42cce:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   42cd0:	b108      	cbz	r0, 42cd6 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   42cd2:	f7ff fde1 	bl	42898 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   42cd6:	4620      	mov	r0, r4
   42cd8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   42cda:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   42cdc:	2400      	movs	r4, #0
		break;
   42cde:	e7f5      	b.n	42ccc <sys_notify_finalize+0x18>
	switch (method) {
   42ce0:	2400      	movs	r4, #0
   42ce2:	4620      	mov	r0, r4
   42ce4:	e7f2      	b.n	42ccc <sys_notify_finalize+0x18>

00042ce6 <arch_printk_char_out>:
}
   42ce6:	2000      	movs	r0, #0
   42ce8:	4770      	bx	lr

00042cea <str_out>:
{
   42cea:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   42cec:	688a      	ldr	r2, [r1, #8]
   42cee:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   42cf0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   42cf2:	b114      	cbz	r4, 42cfa <str_out+0x10>
   42cf4:	684b      	ldr	r3, [r1, #4]
   42cf6:	4293      	cmp	r3, r2
   42cf8:	dc01      	bgt.n	42cfe <str_out+0x14>
		ctx->count++;
   42cfa:	608d      	str	r5, [r1, #8]
}
   42cfc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   42cfe:	3b01      	subs	r3, #1
   42d00:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   42d02:	bf08      	it	eq
   42d04:	2200      	moveq	r2, #0
   42d06:	608d      	str	r5, [r1, #8]
   42d08:	bf0c      	ite	eq
   42d0a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   42d0c:	54a0      	strbne	r0, [r4, r2]
   42d0e:	e7f5      	b.n	42cfc <str_out+0x12>

00042d10 <printk>:
{
   42d10:	b40f      	push	{r0, r1, r2, r3}
   42d12:	b507      	push	{r0, r1, r2, lr}
   42d14:	a904      	add	r1, sp, #16
   42d16:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   42d1a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   42d1c:	f7e5 fa20 	bl	28160 <vprintk>
}
   42d20:	b003      	add	sp, #12
   42d22:	f85d eb04 	ldr.w	lr, [sp], #4
   42d26:	b004      	add	sp, #16
   42d28:	4770      	bx	lr

00042d2a <snprintk>:
{
   42d2a:	b40c      	push	{r2, r3}
   42d2c:	b507      	push	{r0, r1, r2, lr}
   42d2e:	ab04      	add	r3, sp, #16
   42d30:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   42d34:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   42d36:	f7e5 fa21 	bl	2817c <vsnprintk>
}
   42d3a:	b003      	add	sp, #12
   42d3c:	f85d eb04 	ldr.w	lr, [sp], #4
   42d40:	b002      	add	sp, #8
   42d42:	4770      	bx	lr

00042d44 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42d44:	b510      	push	{r4, lr}
   42d46:	4603      	mov	r3, r0
	return list->head;
   42d48:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42d4a:	2200      	movs	r2, #0
   42d4c:	b158      	cbz	r0, 42d66 <sys_slist_find_and_remove+0x22>
   42d4e:	4288      	cmp	r0, r1
   42d50:	d10f      	bne.n	42d72 <sys_slist_find_and_remove+0x2e>
	return node->next;
   42d52:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   42d54:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   42d56:	b93a      	cbnz	r2, 42d68 <sys_slist_find_and_remove+0x24>
   42d58:	42a1      	cmp	r1, r4
	list->head = node;
   42d5a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   42d5c:	d100      	bne.n	42d60 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   42d5e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   42d60:	2300      	movs	r3, #0
   42d62:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42d64:	2001      	movs	r0, #1
   42d66:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   42d68:	42a1      	cmp	r1, r4
	parent->next = child;
   42d6a:	6010      	str	r0, [r2, #0]
	list->tail = node;
   42d6c:	bf08      	it	eq
   42d6e:	605a      	streq	r2, [r3, #4]
}
   42d70:	e7f6      	b.n	42d60 <sys_slist_find_and_remove+0x1c>
	return node->next;
   42d72:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42d74:	6800      	ldr	r0, [r0, #0]
   42d76:	e7e9      	b.n	42d4c <sys_slist_find_and_remove+0x8>

00042d78 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42d78:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   42d7a:	f013 0307 	ands.w	r3, r3, #7
   42d7e:	d105      	bne.n	42d8c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   42d80:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   42d82:	2b00      	cmp	r3, #0
   42d84:	bf0c      	ite	eq
   42d86:	2000      	moveq	r0, #0
   42d88:	2003      	movne	r0, #3
   42d8a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   42d8c:	2b02      	cmp	r3, #2
   42d8e:	d105      	bne.n	42d9c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   42d90:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   42d92:	2b00      	cmp	r3, #0
   42d94:	bf14      	ite	ne
   42d96:	2000      	movne	r0, #0
   42d98:	2004      	moveq	r0, #4
   42d9a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   42d9c:	2b01      	cmp	r3, #1
   42d9e:	d105      	bne.n	42dac <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   42da0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   42da2:	2b00      	cmp	r3, #0
   42da4:	bf0c      	ite	eq
   42da6:	2000      	moveq	r0, #0
   42da8:	2005      	movne	r0, #5
   42daa:	4770      	bx	lr
	int evt = EVT_NOP;
   42dac:	2000      	movs	r0, #0
}
   42dae:	4770      	bx	lr

00042db0 <notify_one>:
{
   42db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42db4:	460d      	mov	r5, r1
   42db6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   42db8:	4619      	mov	r1, r3
   42dba:	1d28      	adds	r0, r5, #4
{
   42dbc:	4690      	mov	r8, r2
   42dbe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   42dc0:	f7ff ff78 	bl	42cb4 <sys_notify_finalize>
	if (cb) {
   42dc4:	4604      	mov	r4, r0
   42dc6:	b138      	cbz	r0, 42dd8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   42dc8:	4633      	mov	r3, r6
   42dca:	4642      	mov	r2, r8
   42dcc:	4629      	mov	r1, r5
   42dce:	4638      	mov	r0, r7
   42dd0:	46a4      	mov	ip, r4
}
   42dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   42dd6:	4760      	bx	ip
}
   42dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042ddc <transition_complete>:
{
   42ddc:	b410      	push	{r4}
	__asm__ volatile(
   42dde:	f04f 0420 	mov.w	r4, #32
   42de2:	f3ef 8211 	mrs	r2, BASEPRI
   42de6:	f384 8812 	msr	BASEPRI_MAX, r4
   42dea:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   42dee:	6141      	str	r1, [r0, #20]
}
   42df0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   42df2:	2101      	movs	r1, #1
   42df4:	f7e5 b9d6 	b.w	281a4 <process_event>

00042df8 <validate_args>:
{
   42df8:	b510      	push	{r4, lr}
   42dfa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   42dfc:	b140      	cbz	r0, 42e10 <validate_args+0x18>
   42dfe:	b139      	cbz	r1, 42e10 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   42e00:	1d08      	adds	r0, r1, #4
   42e02:	f7ff ff43 	bl	42c8c <sys_notify_validate>
	if ((rv == 0)
   42e06:	b928      	cbnz	r0, 42e14 <validate_args+0x1c>
	    && ((cli->notify.flags
   42e08:	68a3      	ldr	r3, [r4, #8]
   42e0a:	f033 0303 	bics.w	r3, r3, #3
   42e0e:	d001      	beq.n	42e14 <validate_args+0x1c>
		rv = -EINVAL;
   42e10:	f06f 0015 	mvn.w	r0, #21
}
   42e14:	bd10      	pop	{r4, pc}

00042e16 <onoff_manager_init>:
{
   42e16:	b538      	push	{r3, r4, r5, lr}
   42e18:	460c      	mov	r4, r1
	if ((mgr == NULL)
   42e1a:	4605      	mov	r5, r0
   42e1c:	b158      	cbz	r0, 42e36 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   42e1e:	b151      	cbz	r1, 42e36 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   42e20:	680b      	ldr	r3, [r1, #0]
   42e22:	b143      	cbz	r3, 42e36 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   42e24:	684b      	ldr	r3, [r1, #4]
   42e26:	b133      	cbz	r3, 42e36 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   42e28:	221c      	movs	r2, #28
   42e2a:	2100      	movs	r1, #0
   42e2c:	f002 f853 	bl	44ed6 <memset>
   42e30:	612c      	str	r4, [r5, #16]
	return 0;
   42e32:	2000      	movs	r0, #0
}
   42e34:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   42e36:	f06f 0015 	mvn.w	r0, #21
   42e3a:	e7fb      	b.n	42e34 <onoff_manager_init+0x1e>

00042e3c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   42e3c:	b570      	push	{r4, r5, r6, lr}
   42e3e:	4604      	mov	r4, r0
   42e40:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   42e42:	f7ff ffd9 	bl	42df8 <validate_args>

	if (rv < 0) {
   42e46:	1e05      	subs	r5, r0, #0
   42e48:	db31      	blt.n	42eae <onoff_request+0x72>
   42e4a:	f04f 0320 	mov.w	r3, #32
   42e4e:	f3ef 8111 	mrs	r1, BASEPRI
   42e52:	f383 8812 	msr	BASEPRI_MAX, r3
   42e56:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   42e5a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42e5c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   42e5e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   42e62:	42ab      	cmp	r3, r5
   42e64:	f000 0207 	and.w	r2, r0, #7
   42e68:	d02e      	beq.n	42ec8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   42e6a:	2a02      	cmp	r2, #2
   42e6c:	d10e      	bne.n	42e8c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   42e6e:	3301      	adds	r3, #1
   42e70:	8363      	strh	r3, [r4, #26]
	rv = state;
   42e72:	4615      	mov	r5, r2
		notify = true;
   42e74:	2301      	movs	r3, #1
	__asm__ volatile(
   42e76:	f381 8811 	msr	BASEPRI, r1
   42e7a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   42e7e:	b1b3      	cbz	r3, 42eae <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   42e80:	2300      	movs	r3, #0
   42e82:	4631      	mov	r1, r6
   42e84:	4620      	mov	r0, r4
   42e86:	f7ff ff93 	bl	42db0 <notify_one>
   42e8a:	e010      	b.n	42eae <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   42e8c:	0783      	lsls	r3, r0, #30
   42e8e:	d001      	beq.n	42e94 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   42e90:	2a06      	cmp	r2, #6
   42e92:	d10e      	bne.n	42eb2 <onoff_request+0x76>
	parent->next = child;
   42e94:	2300      	movs	r3, #0
   42e96:	6033      	str	r3, [r6, #0]
	return list->tail;
   42e98:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   42e9a:	b993      	cbnz	r3, 42ec2 <onoff_request+0x86>
	list->head = node;
   42e9c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   42ea0:	4615      	mov	r5, r2
   42ea2:	b962      	cbnz	r2, 42ebe <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   42ea4:	460a      	mov	r2, r1
   42ea6:	4620      	mov	r0, r4
   42ea8:	2102      	movs	r1, #2
   42eaa:	f7e5 f97b 	bl	281a4 <process_event>
		}
	}

	return rv;
}
   42eae:	4628      	mov	r0, r5
   42eb0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   42eb2:	2a05      	cmp	r2, #5
   42eb4:	bf0c      	ite	eq
   42eb6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   42eba:	f06f 0504 	mvnne.w	r5, #4
   42ebe:	2300      	movs	r3, #0
   42ec0:	e7d9      	b.n	42e76 <onoff_request+0x3a>
	parent->next = child;
   42ec2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   42ec4:	6066      	str	r6, [r4, #4]
}
   42ec6:	e7eb      	b.n	42ea0 <onoff_request+0x64>
		rv = -EAGAIN;
   42ec8:	f06f 050a 	mvn.w	r5, #10
   42ecc:	e7f7      	b.n	42ebe <onoff_request+0x82>

00042ece <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   42ece:	b510      	push	{r4, lr}
	__asm__ volatile(
   42ed0:	f04f 0320 	mov.w	r3, #32
   42ed4:	f3ef 8211 	mrs	r2, BASEPRI
   42ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   42edc:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42ee0:	8b04      	ldrh	r4, [r0, #24]
   42ee2:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   42ee6:	2c02      	cmp	r4, #2
   42ee8:	d00a      	beq.n	42f00 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   42eea:	2c01      	cmp	r4, #1
   42eec:	bf0c      	ite	eq
   42eee:	f06f 0004 	mvneq.w	r0, #4
   42ef2:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   42ef6:	f382 8811 	msr	BASEPRI, r2
   42efa:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   42efe:	e008      	b.n	42f12 <onoff_release+0x44>
	mgr->refs -= 1U;
   42f00:	8b43      	ldrh	r3, [r0, #26]
   42f02:	3b01      	subs	r3, #1
   42f04:	b29b      	uxth	r3, r3
   42f06:	8343      	strh	r3, [r0, #26]
	if (stop) {
   42f08:	b923      	cbnz	r3, 42f14 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   42f0a:	4621      	mov	r1, r4
   42f0c:	f7e5 f94a 	bl	281a4 <process_event>
	int rv = state;
   42f10:	4620      	mov	r0, r4
}
   42f12:	bd10      	pop	{r4, pc}
	int rv = state;
   42f14:	4620      	mov	r0, r4
   42f16:	e7ee      	b.n	42ef6 <onoff_release+0x28>

00042f18 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   42f18:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   42f1a:	b1b0      	cbz	r0, 42f4a <onoff_cancel+0x32>
   42f1c:	b1a9      	cbz	r1, 42f4a <onoff_cancel+0x32>
	__asm__ volatile(
   42f1e:	f04f 0220 	mov.w	r2, #32
   42f22:	f3ef 8511 	mrs	r5, BASEPRI
   42f26:	f382 8812 	msr	BASEPRI_MAX, r2
   42f2a:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42f2e:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   42f30:	f7ff ff08 	bl	42d44 <sys_slist_find_and_remove>
   42f34:	b130      	cbz	r0, 42f44 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   42f36:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   42f3a:	f385 8811 	msr	BASEPRI, r5
   42f3e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   42f42:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   42f44:	f06f 0077 	mvn.w	r0, #119	; 0x77
   42f48:	e7f7      	b.n	42f3a <onoff_cancel+0x22>
		return -EINVAL;
   42f4a:	f06f 0015 	mvn.w	r0, #21
   42f4e:	e7f8      	b.n	42f42 <onoff_cancel+0x2a>

00042f50 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   42f50:	4604      	mov	r4, r0
   42f52:	b508      	push	{r3, lr}
   42f54:	4608      	mov	r0, r1
   42f56:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   42f58:	461a      	mov	r2, r3
   42f5a:	47a0      	blx	r4
	return z_impl_z_current_get();
   42f5c:	f7ff f9dc 	bl	42318 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   42f60:	f7e7 fc4c 	bl	2a7fc <z_impl_k_thread_abort>

00042f64 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   42f64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   42f68:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   42f6a:	0840      	lsrs	r0, r0, #1
   42f6c:	4770      	bx	lr

00042f6e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   42f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42f70:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   42f72:	f7ff fff7 	bl	42f64 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   42f76:	fab0 f080 	clz	r0, r0
   42f7a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   42f7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   42f82:	00ca      	lsls	r2, r1, #3
   42f84:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   42f88:	1d17      	adds	r7, r2, #4
{
   42f8a:	460c      	mov	r4, r1
   42f8c:	3206      	adds	r2, #6
   42f8e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   42f90:	b956      	cbnz	r6, 42fa8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   42f92:	2101      	movs	r1, #1
   42f94:	fa01 f000 	lsl.w	r0, r1, r0
   42f98:	68d9      	ldr	r1, [r3, #12]
   42f9a:	4301      	orrs	r1, r0
   42f9c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   42f9e:	f8cc 4010 	str.w	r4, [ip, #16]
   42fa2:	53dd      	strh	r5, [r3, r7]
   42fa4:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   42fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   42fa8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   42faa:	3104      	adds	r1, #4
   42fac:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   42fae:	53d8      	strh	r0, [r3, r7]
   42fb0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   42fb4:	529e      	strh	r6, [r3, r2]
   42fb6:	80c5      	strh	r5, [r0, #6]
   42fb8:	525d      	strh	r5, [r3, r1]
   42fba:	e7f4      	b.n	42fa6 <free_list_add+0x38>

00042fbc <free_list_remove_bidx>:
{
   42fbc:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   42fbe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   42fc2:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   42fc4:	4299      	cmp	r1, r3
   42fc6:	f102 0104 	add.w	r1, r2, #4
   42fca:	d10a      	bne.n	42fe2 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   42fcc:	2301      	movs	r3, #1
   42fce:	fa03 f202 	lsl.w	r2, r3, r2
   42fd2:	68c3      	ldr	r3, [r0, #12]
   42fd4:	ea23 0302 	bic.w	r3, r3, r2
   42fd8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   42fda:	2300      	movs	r3, #0
   42fdc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   42fe0:	bd10      	pop	{r4, pc}
   42fe2:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   42fe4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   42fe8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   42fec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   42ff0:	80cb      	strh	r3, [r1, #6]
   42ff2:	8082      	strh	r2, [r0, #4]
}
   42ff4:	e7f4      	b.n	42fe0 <free_list_remove_bidx+0x24>

00042ff6 <free_list_remove>:
{
   42ff6:	b508      	push	{r3, lr}
   42ff8:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   42ffa:	f7ff ffb3 	bl	42f64 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   42ffe:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   43002:	f1c2 021f 	rsb	r2, r2, #31
   43006:	4618      	mov	r0, r3
}
   43008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   4300c:	f7ff bfd6 	b.w	42fbc <free_list_remove_bidx>

00043010 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   43010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43014:	fab1 f581 	clz	r5, r1
   43018:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   4301c:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   43020:	4603      	mov	r3, r0
	if (b->next) {
   43022:	693a      	ldr	r2, [r7, #16]
{
   43024:	460e      	mov	r6, r1
	if (b->next) {
   43026:	b1c2      	cbz	r2, 4305a <alloc_chunk+0x4a>
   43028:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   4302c:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   4302e:	4618      	mov	r0, r3
   43030:	4621      	mov	r1, r4
   43032:	f7ff ff97 	bl	42f64 <chunk_size>
   43036:	42b0      	cmp	r0, r6
   43038:	d306      	bcc.n	43048 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   4303a:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   4303c:	4618      	mov	r0, r3
   4303e:	f7ff ffbd 	bl	42fbc <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   43042:	4620      	mov	r0, r4
   43044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   43048:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   4304c:	f1b8 0801 	subs.w	r8, r8, #1
   43050:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   43052:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   43054:	d001      	beq.n	4305a <alloc_chunk+0x4a>
   43056:	4282      	cmp	r2, r0
   43058:	d1e8      	bne.n	4302c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   4305a:	f1c5 0220 	rsb	r2, r5, #32
   4305e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   43062:	4094      	lsls	r4, r2
   43064:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   43066:	4014      	ands	r4, r2
   43068:	d0eb      	beq.n	43042 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   4306a:	fa94 f2a4 	rbit	r2, r4
   4306e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   43072:	1d11      	adds	r1, r2, #4
   43074:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   43078:	4621      	mov	r1, r4
   4307a:	e7df      	b.n	4303c <alloc_chunk+0x2c>

0004307c <merge_chunks>:
{
   4307c:	b538      	push	{r3, r4, r5, lr}
   4307e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   43080:	f7ff ff70 	bl	42f64 <chunk_size>
{
   43084:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   43086:	4604      	mov	r4, r0
   43088:	4611      	mov	r1, r2
   4308a:	4618      	mov	r0, r3
   4308c:	f7ff ff6a 	bl	42f64 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   43090:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   43094:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   43096:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   43098:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   4309a:	4618      	mov	r0, r3
   4309c:	f7ff ff62 	bl	42f64 <chunk_size>
	void *cmem = &buf[c];
   430a0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   430a2:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   430a6:	bd38      	pop	{r3, r4, r5, pc}

000430a8 <split_chunks>:
{
   430a8:	b538      	push	{r3, r4, r5, lr}
   430aa:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   430ac:	f7ff ff5a 	bl	42f64 <chunk_size>
{
   430b0:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   430b2:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   430b4:	1a51      	subs	r1, r2, r1
   430b6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   430ba:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   430bc:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   430be:	8060      	strh	r0, [r4, #2]
   430c0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   430c4:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   430c6:	8044      	strh	r4, [r0, #2]
   430c8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   430cc:	4618      	mov	r0, r3
   430ce:	4611      	mov	r1, r2
   430d0:	f7ff ff48 	bl	42f64 <chunk_size>
	void *cmem = &buf[c];
   430d4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   430d6:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   430da:	bd38      	pop	{r3, r4, r5, pc}

000430dc <free_chunk>:
{
   430dc:	b538      	push	{r3, r4, r5, lr}
   430de:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   430e0:	f7ff ff40 	bl	42f64 <chunk_size>
   430e4:	460c      	mov	r4, r1
   430e6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   430e8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   430ec:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   430ee:	07da      	lsls	r2, r3, #31
   430f0:	d40a      	bmi.n	43108 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   430f2:	4628      	mov	r0, r5
   430f4:	f7ff ff7f 	bl	42ff6 <free_list_remove>
	return c + chunk_size(h, c);
   430f8:	4621      	mov	r1, r4
   430fa:	4628      	mov	r0, r5
   430fc:	f7ff ff32 	bl	42f64 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   43100:	1822      	adds	r2, r4, r0
   43102:	4628      	mov	r0, r5
   43104:	f7ff ffba 	bl	4307c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   43108:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4310c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   4310e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   43112:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   43114:	07db      	lsls	r3, r3, #31
   43116:	d40c      	bmi.n	43132 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   43118:	4628      	mov	r0, r5
   4311a:	f7ff ff6c 	bl	42ff6 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   4311e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   43122:	4622      	mov	r2, r4
   43124:	1a61      	subs	r1, r4, r1
   43126:	4628      	mov	r0, r5
   43128:	f7ff ffa8 	bl	4307c <merge_chunks>
   4312c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   43130:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   43132:	4621      	mov	r1, r4
   43134:	4628      	mov	r0, r5
}
   43136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   4313a:	f7ff bf18 	b.w	42f6e <free_list_add>

0004313e <sys_heap_free>:
	if (mem == NULL) {
   4313e:	b161      	cbz	r1, 4315a <sys_heap_free+0x1c>
   43140:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   43142:	3904      	subs	r1, #4
   43144:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   43146:	f021 0307 	bic.w	r3, r1, #7
   4314a:	4403      	add	r3, r0
	free_chunk(h, c);
   4314c:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   4314e:	885a      	ldrh	r2, [r3, #2]
   43150:	f022 0201 	bic.w	r2, r2, #1
   43154:	805a      	strh	r2, [r3, #2]
   43156:	f7ff bfc1 	b.w	430dc <free_chunk>
}
   4315a:	4770      	bx	lr

0004315c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   4315c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   4315e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   43160:	b909      	cbnz	r1, 43166 <sys_heap_alloc+0xa>
		return NULL;
   43162:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   43164:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   43166:	68ab      	ldr	r3, [r5, #8]
   43168:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   4316c:	d9f9      	bls.n	43162 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4316e:	310b      	adds	r1, #11
   43170:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   43172:	4621      	mov	r1, r4
   43174:	4628      	mov	r0, r5
   43176:	f7ff ff4b 	bl	43010 <alloc_chunk>
	if (c == 0U) {
   4317a:	4606      	mov	r6, r0
   4317c:	2800      	cmp	r0, #0
   4317e:	d0f0      	beq.n	43162 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   43180:	4601      	mov	r1, r0
   43182:	4628      	mov	r0, r5
   43184:	f7ff feee 	bl	42f64 <chunk_size>
   43188:	42a0      	cmp	r0, r4
   4318a:	d907      	bls.n	4319c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   4318c:	1932      	adds	r2, r6, r4
   4318e:	4628      	mov	r0, r5
   43190:	f7ff ff8a 	bl	430a8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   43194:	4611      	mov	r1, r2
   43196:	4628      	mov	r0, r5
   43198:	f7ff fee9 	bl	42f6e <free_list_add>
	void *cmem = &buf[c];
   4319c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   431a0:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   431a2:	8853      	ldrh	r3, [r2, #2]
   431a4:	f043 0301 	orr.w	r3, r3, #1
   431a8:	8053      	strh	r3, [r2, #2]
   431aa:	3004      	adds	r0, #4
	return mem;
   431ac:	e7da      	b.n	43164 <sys_heap_alloc+0x8>

000431ae <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   431ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   431b2:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   431b4:	424a      	negs	r2, r1
   431b6:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   431ba:	ea31 0202 	bics.w	r2, r1, r2
{
   431be:	4603      	mov	r3, r0
	if (align != rew) {
   431c0:	d00a      	beq.n	431d8 <sys_heap_aligned_alloc+0x2a>
		return false;
   431c2:	2f04      	cmp	r7, #4
   431c4:	463a      	mov	r2, r7
   431c6:	46b9      	mov	r9, r7
   431c8:	bf28      	it	cs
   431ca:	2204      	movcs	r2, #4
		align -= rew;
   431cc:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   431ce:	b974      	cbnz	r4, 431ee <sys_heap_aligned_alloc+0x40>
		return NULL;
   431d0:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   431d2:	4628      	mov	r0, r5
   431d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   431d8:	2904      	cmp	r1, #4
   431da:	d804      	bhi.n	431e6 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   431dc:	4621      	mov	r1, r4
}
   431de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   431e2:	f7ff bfbb 	b.w	4315c <sys_heap_alloc>
		rew = 0;
   431e6:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   431ea:	2204      	movs	r2, #4
   431ec:	e7ef      	b.n	431ce <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   431ee:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   431f0:	68b3      	ldr	r3, [r6, #8]
   431f2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   431f6:	d9eb      	bls.n	431d0 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   431f8:	f104 010b 	add.w	r1, r4, #11
   431fc:	4439      	add	r1, r7
   431fe:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   43200:	08c9      	lsrs	r1, r1, #3
   43202:	4630      	mov	r0, r6
   43204:	f7ff ff04 	bl	43010 <alloc_chunk>
	if (c0 == 0) {
   43208:	4680      	mov	r8, r0
   4320a:	2800      	cmp	r0, #0
   4320c:	d0e0      	beq.n	431d0 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   4320e:	f109 0504 	add.w	r5, r9, #4
   43212:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   43216:	1e7b      	subs	r3, r7, #1
   43218:	4435      	add	r5, r6
   4321a:	441d      	add	r5, r3
   4321c:	427f      	negs	r7, r7
   4321e:	403d      	ands	r5, r7
   43220:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   43224:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   43226:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   43228:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4322a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4322c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   43230:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   43232:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   43236:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   4323a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   4323e:	d208      	bcs.n	43252 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   43240:	4601      	mov	r1, r0
   43242:	463a      	mov	r2, r7
   43244:	4630      	mov	r0, r6
   43246:	f7ff ff2f 	bl	430a8 <split_chunks>
		free_list_add(h, c0);
   4324a:	4641      	mov	r1, r8
   4324c:	4630      	mov	r0, r6
   4324e:	f7ff fe8e 	bl	42f6e <free_list_add>
	return c + chunk_size(h, c);
   43252:	4639      	mov	r1, r7
   43254:	4630      	mov	r0, r6
   43256:	f7ff fe85 	bl	42f64 <chunk_size>
   4325a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   4325c:	4284      	cmp	r4, r0
   4325e:	d207      	bcs.n	43270 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   43260:	4630      	mov	r0, r6
   43262:	4622      	mov	r2, r4
   43264:	f7ff ff20 	bl	430a8 <split_chunks>
		free_list_add(h, c_end);
   43268:	4621      	mov	r1, r4
   4326a:	4630      	mov	r0, r6
   4326c:	f7ff fe7f 	bl	42f6e <free_list_add>
	void *cmem = &buf[c];
   43270:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   43274:	8873      	ldrh	r3, [r6, #2]
   43276:	f043 0301 	orr.w	r3, r3, #1
   4327a:	8073      	strh	r3, [r6, #2]
   4327c:	e7a9      	b.n	431d2 <sys_heap_aligned_alloc+0x24>

0004327e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   4327e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   43280:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   43282:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   43284:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   43288:	f021 0107 	bic.w	r1, r1, #7
{
   4328c:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   4328e:	1acd      	subs	r5, r1, r3
   43290:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   43292:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   43294:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   43298:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   4329c:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4329e:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   432a0:	2600      	movs	r6, #0
   432a2:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   432a4:	f1c0 0020 	rsb	r0, r0, #32
   432a8:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   432ac:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   432ae:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   432b0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   432b4:	4284      	cmp	r4, r0
   432b6:	d118      	bne.n	432ea <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   432b8:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   432ba:	f040 0001 	orr.w	r0, r0, #1
   432be:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   432c0:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   432c4:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   432c6:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   432c8:	801e      	strh	r6, [r3, #0]
   432ca:	8067      	strh	r7, [r4, #2]
   432cc:	195c      	adds	r4, r3, r5
   432ce:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   432d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   432d6:	8066      	strh	r6, [r4, #2]
   432d8:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   432da:	8850      	ldrh	r0, [r2, #2]
   432dc:	f040 0001 	orr.w	r0, r0, #1
   432e0:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   432e2:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   432e4:	4618      	mov	r0, r3
   432e6:	f7ff be42 	b.w	42f6e <free_list_add>
		h->buckets[i].next = 0;
   432ea:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   432ee:	e7e1      	b.n	432b4 <sys_heap_init+0x36>

000432f0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   432f0:	4770      	bx	lr

000432f2 <read_str>:
{
   432f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   432f6:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   432fa:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   432fc:	4640      	mov	r0, r8
{
   432fe:	461f      	mov	r7, r3
   43300:	460c      	mov	r4, r1
   43302:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   43304:	f001 fda7 	bl	44e56 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   43308:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4330c:	9300      	str	r3, [sp, #0]
   4330e:	b280      	uxth	r0, r0
   43310:	e9cd 8001 	strd	r8, r0, [sp, #4]
   43314:	463b      	mov	r3, r7
   43316:	4632      	mov	r2, r6
   43318:	4621      	mov	r1, r4
   4331a:	4628      	mov	r0, r5
   4331c:	f003 ff7c 	bl	47218 <bt_gatt_attr_read>
}
   43320:	b004      	add	sp, #16
   43322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00043326 <blvl_ccc_cfg_changed>:
}
   43326:	4770      	bx	lr

00043328 <bas_init>:
}
   43328:	2000      	movs	r0, #0
   4332a:	4770      	bx	lr

0004332c <nvs_flash_rd>:
{
   4332c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   4332e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43330:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   43332:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43334:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   43336:	fa16 f181 	uxtah	r1, r6, r1
   4333a:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   4333e:	6884      	ldr	r4, [r0, #8]
   43340:	6824      	ldr	r4, [r4, #0]
   43342:	46a4      	mov	ip, r4
}
   43344:	bc70      	pop	{r4, r5, r6}
   43346:	4760      	bx	ip

00043348 <nvs_flash_block_cmp>:
{
   43348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4334c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4334e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   43350:	681d      	ldr	r5, [r3, #0]
   43352:	426d      	negs	r5, r5
{
   43354:	b089      	sub	sp, #36	; 0x24
   43356:	4681      	mov	r9, r0
   43358:	460e      	mov	r6, r1
   4335a:	4617      	mov	r7, r2
	block_size =
   4335c:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   43360:	b91c      	cbnz	r4, 4336a <nvs_flash_block_cmp+0x22>
	return 0;
   43362:	4620      	mov	r0, r4
}
   43364:	b009      	add	sp, #36	; 0x24
   43366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   4336a:	42ac      	cmp	r4, r5
   4336c:	46a0      	mov	r8, r4
   4336e:	bf28      	it	cs
   43370:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   43372:	4643      	mov	r3, r8
   43374:	466a      	mov	r2, sp
   43376:	4631      	mov	r1, r6
   43378:	4648      	mov	r0, r9
   4337a:	f7ff ffd7 	bl	4332c <nvs_flash_rd>
		if (rc) {
   4337e:	2800      	cmp	r0, #0
   43380:	d1f0      	bne.n	43364 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   43382:	4642      	mov	r2, r8
   43384:	4669      	mov	r1, sp
   43386:	4638      	mov	r0, r7
   43388:	f001 fd89 	bl	44e9e <memcmp>
		if (rc) {
   4338c:	b920      	cbnz	r0, 43398 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   4338e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   43392:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   43394:	4447      	add	r7, r8
   43396:	e7e3      	b.n	43360 <nvs_flash_block_cmp+0x18>
			return 1;
   43398:	2001      	movs	r0, #1
   4339a:	e7e3      	b.n	43364 <nvs_flash_block_cmp+0x1c>

0004339c <nvs_flash_cmp_const>:
{
   4339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   433a0:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   433a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   433a4:	681d      	ldr	r5, [r3, #0]
   433a6:	426d      	negs	r5, r5
{
   433a8:	b088      	sub	sp, #32
	block_size =
   433aa:	f005 0520 	and.w	r5, r5, #32
{
   433ae:	4607      	mov	r7, r0
   433b0:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   433b2:	4668      	mov	r0, sp
{
   433b4:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   433b6:	462a      	mov	r2, r5
   433b8:	f001 fd8d 	bl	44ed6 <memset>
	while (len) {
   433bc:	b91c      	cbnz	r4, 433c6 <nvs_flash_cmp_const+0x2a>
	return 0;
   433be:	4620      	mov	r0, r4
}
   433c0:	b008      	add	sp, #32
   433c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   433c6:	42ac      	cmp	r4, r5
   433c8:	46a0      	mov	r8, r4
   433ca:	bf28      	it	cs
   433cc:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   433ce:	4643      	mov	r3, r8
   433d0:	466a      	mov	r2, sp
   433d2:	4631      	mov	r1, r6
   433d4:	4638      	mov	r0, r7
   433d6:	f7ff ffb7 	bl	43348 <nvs_flash_block_cmp>
		if (rc) {
   433da:	2800      	cmp	r0, #0
   433dc:	d1f0      	bne.n	433c0 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   433de:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   433e2:	4446      	add	r6, r8
   433e4:	e7ea      	b.n	433bc <nvs_flash_cmp_const+0x20>

000433e6 <nvs_flash_erase_sector>:
{
   433e6:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   433e8:	8982      	ldrh	r2, [r0, #12]
   433ea:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   433ec:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   433ee:	0c09      	lsrs	r1, r1, #16
{
   433f0:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   433f2:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   433f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   433f6:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   433fa:	6883      	ldr	r3, [r0, #8]
   433fc:	689b      	ldr	r3, [r3, #8]
   433fe:	4798      	blx	r3
	if (rc) {
   43400:	b950      	cbnz	r0, 43418 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   43402:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   43404:	89a3      	ldrh	r3, [r4, #12]
   43406:	7912      	ldrb	r2, [r2, #4]
   43408:	4629      	mov	r1, r5
   4340a:	4620      	mov	r0, r4
   4340c:	f7ff ffc6 	bl	4339c <nvs_flash_cmp_const>
		rc = -ENXIO;
   43410:	2800      	cmp	r0, #0
   43412:	bf18      	it	ne
   43414:	f06f 0005 	mvnne.w	r0, #5
}
   43418:	bd38      	pop	{r3, r4, r5, pc}

0004341a <nvs_ate_crc8_update>:
{
   4341a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4341c:	4601      	mov	r1, r0
{
   4341e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   43420:	2207      	movs	r2, #7
   43422:	20ff      	movs	r0, #255	; 0xff
   43424:	f7e4 fe7c 	bl	28120 <crc8_ccitt>
	entry->crc8 = crc8;
   43428:	71e0      	strb	r0, [r4, #7]
}
   4342a:	bd10      	pop	{r4, pc}

0004342c <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4342c:	680b      	ldr	r3, [r1, #0]
   4342e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   43432:	0c1a      	lsrs	r2, r3, #16
   43434:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   43438:	bf08      	it	eq
   4343a:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   4343e:	600b      	str	r3, [r1, #0]
}
   43440:	4770      	bx	lr

00043442 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   43442:	7803      	ldrb	r3, [r0, #0]
   43444:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   43446:	bf81      	itttt	hi
   43448:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   4344c:	18c9      	addhi	r1, r1, r3
   4344e:	425b      	neghi	r3, r3
   43450:	4019      	andhi	r1, r3
}
   43452:	4608      	mov	r0, r1
   43454:	4770      	bx	lr

00043456 <nvs_ate_valid>:
{
   43456:	b570      	push	{r4, r5, r6, lr}
   43458:	460c      	mov	r4, r1
   4345a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4345c:	2108      	movs	r1, #8
   4345e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   43460:	f7ff ffef 	bl	43442 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   43464:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43466:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   43468:	4621      	mov	r1, r4
   4346a:	20ff      	movs	r0, #255	; 0xff
   4346c:	f7e4 fe58 	bl	28120 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   43470:	79e3      	ldrb	r3, [r4, #7]
   43472:	4283      	cmp	r3, r0
   43474:	d107      	bne.n	43486 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   43476:	89a8      	ldrh	r0, [r5, #12]
   43478:	8863      	ldrh	r3, [r4, #2]
   4347a:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   4347c:	4283      	cmp	r3, r0
   4347e:	bf2c      	ite	cs
   43480:	2000      	movcs	r0, #0
   43482:	2001      	movcc	r0, #1
}
   43484:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   43486:	2000      	movs	r0, #0
   43488:	e7fc      	b.n	43484 <nvs_ate_valid+0x2e>

0004348a <nvs_close_ate_valid>:
{
   4348a:	b538      	push	{r3, r4, r5, lr}
   4348c:	4605      	mov	r5, r0
   4348e:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   43490:	f7ff ffe1 	bl	43456 <nvs_ate_valid>
   43494:	b1a0      	cbz	r0, 434c0 <nvs_close_ate_valid+0x36>
   43496:	88a0      	ldrh	r0, [r4, #4]
   43498:	b998      	cbnz	r0, 434c2 <nvs_close_ate_valid+0x38>
   4349a:	8822      	ldrh	r2, [r4, #0]
   4349c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   434a0:	429a      	cmp	r2, r3
   434a2:	d10d      	bne.n	434c0 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   434a4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   434a6:	2108      	movs	r1, #8
   434a8:	f7ff ffcb 	bl	43442 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   434ac:	8862      	ldrh	r2, [r4, #2]
   434ae:	89ab      	ldrh	r3, [r5, #12]
   434b0:	1a9b      	subs	r3, r3, r2
   434b2:	fbb3 f2f0 	udiv	r2, r3, r0
   434b6:	fb02 3010 	mls	r0, r2, r0, r3
   434ba:	fab0 f080 	clz	r0, r0
   434be:	0940      	lsrs	r0, r0, #5
}
   434c0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   434c2:	2000      	movs	r0, #0
   434c4:	e7fc      	b.n	434c0 <nvs_close_ate_valid+0x36>

000434c6 <nvs_prev_ate>:
{
   434c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   434c8:	4605      	mov	r5, r0
   434ca:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   434cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   434ce:	2108      	movs	r1, #8
   434d0:	f7ff ffb7 	bl	43442 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   434d4:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   434d6:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   434d8:	2308      	movs	r3, #8
   434da:	4628      	mov	r0, r5
   434dc:	f7ff ff26 	bl	4332c <nvs_flash_rd>
	if (rc) {
   434e0:	4604      	mov	r4, r0
   434e2:	2800      	cmp	r0, #0
   434e4:	d138      	bne.n	43558 <nvs_prev_ate+0x92>
	*addr += ate_size;
   434e6:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   434e8:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   434ea:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   434ec:	b29a      	uxth	r2, r3
   434ee:	1bc7      	subs	r7, r0, r7
   434f0:	42ba      	cmp	r2, r7
	*addr += ate_size;
   434f2:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   434f4:	d130      	bne.n	43558 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   434f6:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   434f8:	bf03      	ittte	eq
   434fa:	89e9      	ldrheq	r1, [r5, #14]
   434fc:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   43500:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   43504:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   43508:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4350a:	2308      	movs	r3, #8
   4350c:	466a      	mov	r2, sp
   4350e:	4628      	mov	r0, r5
   43510:	f7ff ff0c 	bl	4332c <nvs_flash_rd>
	if (rc) {
   43514:	4604      	mov	r4, r0
   43516:	b9f8      	cbnz	r0, 43558 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   43518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   4351a:	466a      	mov	r2, sp
   4351c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4351e:	4603      	mov	r3, r0
		if (data8[i] != value) {
   43520:	f812 0b01 	ldrb.w	r0, [r2], #1
   43524:	4281      	cmp	r1, r0
   43526:	d10c      	bne.n	43542 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   43528:	3301      	adds	r3, #1
   4352a:	2b08      	cmp	r3, #8
   4352c:	d1f8      	bne.n	43520 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   4352e:	686b      	ldr	r3, [r5, #4]
   43530:	e005      	b.n	4353e <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   43532:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   43534:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   43538:	0c1b      	lsrs	r3, r3, #16
   4353a:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4353c:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4353e:	6033      	str	r3, [r6, #0]
		return 0;
   43540:	e00a      	b.n	43558 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43542:	4669      	mov	r1, sp
   43544:	4628      	mov	r0, r5
   43546:	f7ff ffa0 	bl	4348a <nvs_close_ate_valid>
   4354a:	2800      	cmp	r0, #0
   4354c:	d1f1      	bne.n	43532 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   4354e:	4631      	mov	r1, r6
   43550:	4628      	mov	r0, r5
   43552:	f7e5 f993 	bl	2887c <nvs_recover_last_ate>
   43556:	4604      	mov	r4, r0
}
   43558:	4620      	mov	r0, r4
   4355a:	b003      	add	sp, #12
   4355c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004355e <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4355e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43562:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   43564:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   43566:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   43568:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4356a:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4356c:	fa10 f181 	uxtah	r1, r0, r1
   43570:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   43574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43576:	681e      	ldr	r6, [r3, #0]
   43578:	4276      	negs	r6, r6
	if (blen > 0) {
   4357a:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4357c:	b089      	sub	sp, #36	; 0x24
   4357e:	4690      	mov	r8, r2
	if (blen > 0) {
   43580:	d00a      	beq.n	43598 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   43582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   43584:	6883      	ldr	r3, [r0, #8]
   43586:	4629      	mov	r1, r5
   43588:	f8d3 9004 	ldr.w	r9, [r3, #4]
   4358c:	4633      	mov	r3, r6
   4358e:	47c8      	blx	r9
		if (rc) {
   43590:	b9c0      	cbnz	r0, 435c4 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   43592:	1ba4      	subs	r4, r4, r6
		offset += blen;
   43594:	4435      	add	r5, r6
		data8 += blen;
   43596:	44b0      	add	r8, r6
	if (len) {
   43598:	b1bc      	cbz	r4, 435ca <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   4359a:	4622      	mov	r2, r4
   4359c:	4641      	mov	r1, r8
   4359e:	4668      	mov	r0, sp
   435a0:	f001 fc8e 	bl	44ec0 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   435a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   435a6:	681a      	ldr	r2, [r3, #0]
   435a8:	7919      	ldrb	r1, [r3, #4]
   435aa:	1b12      	subs	r2, r2, r4
   435ac:	eb0d 0004 	add.w	r0, sp, r4
   435b0:	f001 fc91 	bl	44ed6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   435b4:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   435b8:	681b      	ldr	r3, [r3, #0]
   435ba:	6882      	ldr	r2, [r0, #8]
   435bc:	4629      	mov	r1, r5
   435be:	6854      	ldr	r4, [r2, #4]
   435c0:	466a      	mov	r2, sp
   435c2:	47a0      	blx	r4
}
   435c4:	b009      	add	sp, #36	; 0x24
   435c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   435ca:	4620      	mov	r0, r4
   435cc:	e7fa      	b.n	435c4 <nvs_flash_al_wrt.part.0+0x66>

000435ce <nvs_flash_data_wrt>:
{
   435ce:	b538      	push	{r3, r4, r5, lr}
   435d0:	4604      	mov	r4, r0
	if (!len) {
   435d2:	4615      	mov	r5, r2
   435d4:	b12a      	cbz	r2, 435e2 <nvs_flash_data_wrt+0x14>
   435d6:	4613      	mov	r3, r2
   435d8:	460a      	mov	r2, r1
   435da:	6881      	ldr	r1, [r0, #8]
   435dc:	f7ff ffbf 	bl	4355e <nvs_flash_al_wrt.part.0>
   435e0:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   435e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   435e4:	4629      	mov	r1, r5
   435e6:	f7ff ff2c 	bl	43442 <nvs_al_size.isra.0>
   435ea:	68a3      	ldr	r3, [r4, #8]
   435ec:	4403      	add	r3, r0
   435ee:	60a3      	str	r3, [r4, #8]
}
   435f0:	4610      	mov	r0, r2
   435f2:	bd38      	pop	{r3, r4, r5, pc}

000435f4 <nvs_flash_ate_wrt>:
{
   435f4:	b510      	push	{r4, lr}
   435f6:	460a      	mov	r2, r1
	if (!len) {
   435f8:	2308      	movs	r3, #8
   435fa:	6841      	ldr	r1, [r0, #4]
{
   435fc:	4604      	mov	r4, r0
   435fe:	f7ff ffae 	bl	4355e <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   43602:	2108      	movs	r1, #8
   43604:	4602      	mov	r2, r0
   43606:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   43608:	f7ff ff1b 	bl	43442 <nvs_al_size.isra.0>
   4360c:	6863      	ldr	r3, [r4, #4]
   4360e:	1a1b      	subs	r3, r3, r0
   43610:	6063      	str	r3, [r4, #4]
}
   43612:	4610      	mov	r0, r2
   43614:	bd10      	pop	{r4, pc}

00043616 <nvs_add_gc_done_ate>:
{
   43616:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   43618:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4361c:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   43620:	2300      	movs	r3, #0
{
   43622:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   43624:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   43628:	6883      	ldr	r3, [r0, #8]
   4362a:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   4362e:	4668      	mov	r0, sp
   43630:	f7ff fef3 	bl	4341a <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   43634:	4669      	mov	r1, sp
   43636:	4620      	mov	r0, r4
   43638:	f7ff ffdc 	bl	435f4 <nvs_flash_ate_wrt>
}
   4363c:	b002      	add	sp, #8
   4363e:	bd10      	pop	{r4, pc}

00043640 <nvs_gc>:
{
   43640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43644:	4604      	mov	r4, r0
   43646:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43648:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4364a:	2108      	movs	r1, #8
   4364c:	f7ff fef9 	bl	43442 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   43650:	6863      	ldr	r3, [r4, #4]
   43652:	0c1b      	lsrs	r3, r3, #16
   43654:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43656:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   43658:	a901      	add	r1, sp, #4
   4365a:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4365c:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   4365e:	f7ff fee5 	bl	4342c <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   43662:	9b01      	ldr	r3, [sp, #4]
   43664:	89a1      	ldrh	r1, [r4, #12]
   43666:	4419      	add	r1, r3
   43668:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4366a:	2308      	movs	r3, #8
   4366c:	aa04      	add	r2, sp, #16
   4366e:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   43670:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   43672:	f7ff fe5b 	bl	4332c <nvs_flash_rd>
	if (rc < 0) {
   43676:	2800      	cmp	r0, #0
   43678:	f2c0 8094 	blt.w	437a4 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4367c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4367e:	aa04      	add	r2, sp, #16
   43680:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   43682:	2300      	movs	r3, #0
		if (data8[i] != value) {
   43684:	f812 0b01 	ldrb.w	r0, [r2], #1
   43688:	4281      	cmp	r1, r0
   4368a:	d17c      	bne.n	43786 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4368c:	3301      	adds	r3, #1
   4368e:	2b08      	cmp	r3, #8
   43690:	d1f8      	bne.n	43684 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   43692:	68a0      	ldr	r0, [r4, #8]
   43694:	6863      	ldr	r3, [r4, #4]
   43696:	4428      	add	r0, r5
   43698:	4283      	cmp	r3, r0
   4369a:	d26e      	bcs.n	4377a <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   4369c:	9901      	ldr	r1, [sp, #4]
   4369e:	4620      	mov	r0, r4
   436a0:	f7ff fea1 	bl	433e6 <nvs_flash_erase_sector>
	if (rc) {
   436a4:	e07e      	b.n	437a4 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   436a6:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   436a8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   436ac:	0c1b      	lsrs	r3, r3, #16
   436ae:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   436b0:	4413      	add	r3, r2
   436b2:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   436b4:	aa06      	add	r2, sp, #24
   436b6:	a902      	add	r1, sp, #8
   436b8:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   436ba:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   436be:	f7ff ff02 	bl	434c6 <nvs_prev_ate>
		if (rc) {
   436c2:	2800      	cmp	r0, #0
   436c4:	d16e      	bne.n	437a4 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   436c6:	a906      	add	r1, sp, #24
   436c8:	4620      	mov	r0, r4
   436ca:	f7ff fec4 	bl	43456 <nvs_ate_valid>
   436ce:	2800      	cmp	r0, #0
   436d0:	d034      	beq.n	4373c <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   436d2:	6863      	ldr	r3, [r4, #4]
   436d4:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   436d6:	aa08      	add	r2, sp, #32
   436d8:	a903      	add	r1, sp, #12
   436da:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   436dc:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   436de:	f7ff fef2 	bl	434c6 <nvs_prev_ate>
			if (rc) {
   436e2:	2800      	cmp	r0, #0
   436e4:	d15e      	bne.n	437a4 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   436e6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   436ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   436ee:	429a      	cmp	r2, r3
   436f0:	d027      	beq.n	43742 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   436f2:	6862      	ldr	r2, [r4, #4]
   436f4:	9b03      	ldr	r3, [sp, #12]
   436f6:	429a      	cmp	r2, r3
   436f8:	d1ed      	bne.n	436d6 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   436fa:	4556      	cmp	r6, sl
   436fc:	d11e      	bne.n	4373c <nvs_gc+0xfc>
   436fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   43702:	b1db      	cbz	r3, 4373c <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   43704:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   43708:	ea4f 471a 	mov.w	r7, sl, lsr #16
   4370c:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   4370e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   43710:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   43712:	68a3      	ldr	r3, [r4, #8]
   43714:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   43718:	f7ff fe7f 	bl	4341a <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4371c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4371e:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   43722:	681e      	ldr	r6, [r3, #0]
   43724:	4276      	negs	r6, r6
	block_size =
   43726:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4372a:	f1b8 0f00 	cmp.w	r8, #0
   4372e:	d10f      	bne.n	43750 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   43730:	a906      	add	r1, sp, #24
   43732:	4620      	mov	r0, r4
   43734:	f7ff ff5e 	bl	435f4 <nvs_flash_ate_wrt>
			if (rc) {
   43738:	2800      	cmp	r0, #0
   4373a:	d133      	bne.n	437a4 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   4373c:	45ca      	cmp	sl, r9
   4373e:	d1b9      	bne.n	436b4 <nvs_gc+0x74>
gc_done:
   43740:	e7a7      	b.n	43692 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   43742:	a908      	add	r1, sp, #32
   43744:	4620      	mov	r0, r4
   43746:	f7ff fe86 	bl	43456 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4374a:	2800      	cmp	r0, #0
   4374c:	d0d1      	beq.n	436f2 <nvs_gc+0xb2>
   4374e:	e7d4      	b.n	436fa <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   43750:	4546      	cmp	r6, r8
   43752:	46b3      	mov	fp, r6
   43754:	bf28      	it	cs
   43756:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   43758:	465b      	mov	r3, fp
   4375a:	aa0a      	add	r2, sp, #40	; 0x28
   4375c:	4639      	mov	r1, r7
   4375e:	4620      	mov	r0, r4
   43760:	f7ff fde4 	bl	4332c <nvs_flash_rd>
		if (rc) {
   43764:	b9f0      	cbnz	r0, 437a4 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   43766:	465a      	mov	r2, fp
   43768:	a90a      	add	r1, sp, #40	; 0x28
   4376a:	4620      	mov	r0, r4
   4376c:	f7ff ff2f 	bl	435ce <nvs_flash_data_wrt>
		if (rc) {
   43770:	b9c0      	cbnz	r0, 437a4 <nvs_gc+0x164>
		len -= bytes_to_copy;
   43772:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   43776:	445f      	add	r7, fp
   43778:	e7d7      	b.n	4372a <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   4377a:	4620      	mov	r0, r4
   4377c:	f7ff ff4b 	bl	43616 <nvs_add_gc_done_ate>
		if (rc) {
   43780:	2800      	cmp	r0, #0
   43782:	d08b      	beq.n	4369c <nvs_gc+0x5c>
   43784:	e00e      	b.n	437a4 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   43786:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43788:	a904      	add	r1, sp, #16
   4378a:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   4378c:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43790:	f7ff fe7b 	bl	4348a <nvs_close_ate_valid>
   43794:	2800      	cmp	r0, #0
   43796:	d186      	bne.n	436a6 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   43798:	a902      	add	r1, sp, #8
   4379a:	4620      	mov	r0, r4
   4379c:	f7e5 f86e 	bl	2887c <nvs_recover_last_ate>
		if (rc) {
   437a0:	2800      	cmp	r0, #0
   437a2:	d087      	beq.n	436b4 <nvs_gc+0x74>
}
   437a4:	b013      	add	sp, #76	; 0x4c
   437a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000437aa <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   437aa:	2300      	movs	r3, #0
   437ac:	461a      	mov	r2, r3
   437ae:	f7e5 b9f5 	b.w	28b9c <nvs_write>

000437b2 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   437b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   437b6:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   437b8:	7c03      	ldrb	r3, [r0, #16]
{
   437ba:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   437be:	4604      	mov	r4, r0
   437c0:	460f      	mov	r7, r1
   437c2:	4690      	mov	r8, r2
	if (!fs->ready) {
   437c4:	2b00      	cmp	r3, #0
   437c6:	d045      	beq.n	43854 <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   437c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   437ca:	2108      	movs	r1, #8
   437cc:	f7ff fe39 	bl	43442 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   437d0:	89a3      	ldrh	r3, [r4, #12]
   437d2:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   437d6:	429e      	cmp	r6, r3
   437d8:	d83f      	bhi.n	4385a <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   437da:	6863      	ldr	r3, [r4, #4]
   437dc:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   437de:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   437e2:	aa02      	add	r2, sp, #8
   437e4:	a901      	add	r1, sp, #4
   437e6:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   437e8:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   437ea:	f7ff fe6c 	bl	434c6 <nvs_prev_ate>
		if (rc) {
   437ee:	bb38      	cbnz	r0, 43840 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   437f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   437f4:	42bb      	cmp	r3, r7
   437f6:	d108      	bne.n	4380a <nvs_read_hist+0x58>
   437f8:	a902      	add	r1, sp, #8
   437fa:	4620      	mov	r0, r4
   437fc:	f7ff fe2b 	bl	43456 <nvs_ate_valid>
   43800:	b118      	cbz	r0, 4380a <nvs_read_hist+0x58>
			cnt_his++;
   43802:	f10a 0a01 	add.w	sl, sl, #1
   43806:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   4380a:	6862      	ldr	r2, [r4, #4]
   4380c:	9b01      	ldr	r3, [sp, #4]
   4380e:	429a      	cmp	r2, r3
   43810:	d019      	beq.n	43846 <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   43812:	45d1      	cmp	r9, sl
   43814:	d2e5      	bcs.n	437e2 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   43816:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4381a:	b1c3      	cbz	r3, 4384e <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4381c:	45d1      	cmp	r9, sl
   4381e:	d816      	bhi.n	4384e <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   43820:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   43824:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   43826:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   43828:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4382c:	bf28      	it	cs
   4382e:	4633      	movcs	r3, r6
   43830:	4642      	mov	r2, r8
   43832:	4429      	add	r1, r5
   43834:	4620      	mov	r0, r4
   43836:	f7ff fd79 	bl	4332c <nvs_flash_rd>
	if (rc) {
   4383a:	b908      	cbnz	r0, 43840 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   4383c:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   43840:	b004      	add	sp, #16
   43842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   43846:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4384a:	42bb      	cmp	r3, r7
   4384c:	d0e3      	beq.n	43816 <nvs_read_hist+0x64>
		return -ENOENT;
   4384e:	f06f 0001 	mvn.w	r0, #1
   43852:	e7f5      	b.n	43840 <nvs_read_hist+0x8e>
		return -EACCES;
   43854:	f06f 000c 	mvn.w	r0, #12
   43858:	e7f2      	b.n	43840 <nvs_read_hist+0x8e>
		return -EINVAL;
   4385a:	f06f 0015 	mvn.w	r0, #21
   4385e:	e7ef      	b.n	43840 <nvs_read_hist+0x8e>

00043860 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   43860:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   43862:	2400      	movs	r4, #0
   43864:	9400      	str	r4, [sp, #0]
   43866:	f7ff ffa4 	bl	437b2 <nvs_read_hist>
	return rc;
}
   4386a:	b002      	add	sp, #8
   4386c:	bd10      	pop	{r4, pc}

0004386e <usb_write>:
{
   4386e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43872:	4606      	mov	r6, r0
   43874:	460f      	mov	r7, r1
   43876:	4690      	mov	r8, r2
   43878:	4699      	mov	r9, r3
   4387a:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4387c:	464b      	mov	r3, r9
   4387e:	4642      	mov	r2, r8
   43880:	4639      	mov	r1, r7
   43882:	4630      	mov	r0, r6
   43884:	f7fa fa34 	bl	3dcf0 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   43888:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4388c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   4388e:	d103      	bne.n	43898 <usb_write+0x2a>
	z_impl_k_yield();
   43890:	f7fe fca0 	bl	421d4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   43894:	3d01      	subs	r5, #1
   43896:	d1f1      	bne.n	4387c <usb_write+0xe>
}
   43898:	4620      	mov	r0, r4
   4389a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004389e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4389e:	4770      	bx	lr

000438a0 <get_sectors_cb>:
{
   438a0:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   438a2:	6802      	ldr	r2, [r0, #0]
   438a4:	684c      	ldr	r4, [r1, #4]
   438a6:	42a2      	cmp	r2, r4
   438a8:	d316      	bcc.n	438d8 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   438aa:	688b      	ldr	r3, [r1, #8]
   438ac:	4423      	add	r3, r4
   438ae:	429a      	cmp	r2, r3
   438b0:	d206      	bcs.n	438c0 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   438b2:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   438b6:	42ab      	cmp	r3, r5
   438b8:	d304      	bcc.n	438c4 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   438ba:	f06f 030b 	mvn.w	r3, #11
   438be:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   438c0:	2000      	movs	r0, #0
   438c2:	e00a      	b.n	438da <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   438c4:	68cd      	ldr	r5, [r1, #12]
   438c6:	1b12      	subs	r2, r2, r4
   438c8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   438cc:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   438d0:	6842      	ldr	r2, [r0, #4]
   438d2:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   438d4:	3301      	adds	r3, #1
   438d6:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   438d8:	2001      	movs	r0, #1
}
   438da:	bd70      	pop	{r4, r5, r6, pc}

000438dc <settings_delete>:
	return settings_save_one(name, NULL, 0);
   438dc:	2200      	movs	r2, #0
   438de:	4611      	mov	r1, r2
   438e0:	f7e6 b8ac 	b.w	29a3c <settings_save_one>

000438e4 <settings_name_steq>:
{
   438e4:	4603      	mov	r3, r0
   438e6:	b530      	push	{r4, r5, lr}
   438e8:	4608      	mov	r0, r1
	if (next) {
   438ea:	b10a      	cbz	r2, 438f0 <settings_name_steq+0xc>
		*next = NULL;
   438ec:	2100      	movs	r1, #0
   438ee:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   438f0:	b163      	cbz	r3, 4390c <settings_name_steq+0x28>
   438f2:	b190      	cbz	r0, 4391a <settings_name_steq+0x36>
   438f4:	1e41      	subs	r1, r0, #1
   438f6:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   438f8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   438fc:	4604      	mov	r4, r0
   438fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   43902:	b15d      	cbz	r5, 4391c <settings_name_steq+0x38>
   43904:	429d      	cmp	r5, r3
   43906:	d101      	bne.n	4390c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   43908:	2d3d      	cmp	r5, #61	; 0x3d
   4390a:	d1f5      	bne.n	438f8 <settings_name_steq+0x14>
	return 0;
   4390c:	2000      	movs	r0, #0
   4390e:	e004      	b.n	4391a <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   43910:	2b3d      	cmp	r3, #61	; 0x3d
   43912:	d008      	beq.n	43926 <settings_name_steq+0x42>
   43914:	fab3 f083 	clz	r0, r3
   43918:	0940      	lsrs	r0, r0, #5
}
   4391a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4391c:	2b2f      	cmp	r3, #47	; 0x2f
   4391e:	d1f7      	bne.n	43910 <settings_name_steq+0x2c>
		if (next) {
   43920:	b10a      	cbz	r2, 43926 <settings_name_steq+0x42>
			*next = name + 1;
   43922:	3401      	adds	r4, #1
   43924:	6014      	str	r4, [r2, #0]
		return 1;
   43926:	2001      	movs	r0, #1
   43928:	e7f7      	b.n	4391a <settings_name_steq+0x36>

0004392a <settings_name_next>:
{
   4392a:	b530      	push	{r4, r5, lr}
   4392c:	4603      	mov	r3, r0
	if (next) {
   4392e:	b109      	cbz	r1, 43934 <settings_name_next+0xa>
		*next = NULL;
   43930:	2200      	movs	r2, #0
   43932:	600a      	str	r2, [r1, #0]
	if (!name) {
   43934:	b16b      	cbz	r3, 43952 <settings_name_next+0x28>
   43936:	461a      	mov	r2, r3
   43938:	4614      	mov	r4, r2
   4393a:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4393c:	f812 5b01 	ldrb.w	r5, [r2], #1
   43940:	b135      	cbz	r5, 43950 <settings_name_next+0x26>
   43942:	2d3d      	cmp	r5, #61	; 0x3d
   43944:	d004      	beq.n	43950 <settings_name_next+0x26>
   43946:	2d2f      	cmp	r5, #47	; 0x2f
   43948:	d1f6      	bne.n	43938 <settings_name_next+0xe>
		if (next) {
   4394a:	b109      	cbz	r1, 43950 <settings_name_next+0x26>
			*next = name + 1;
   4394c:	3401      	adds	r4, #1
   4394e:	600c      	str	r4, [r1, #0]
}
   43950:	bd30      	pop	{r4, r5, pc}
		return 0;
   43952:	4618      	mov	r0, r3
   43954:	e7fc      	b.n	43950 <settings_name_next+0x26>

00043956 <settings_call_set_handler>:
{
   43956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4395a:	b085      	sub	sp, #20
   4395c:	4604      	mov	r4, r0
   4395e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const char *name_key = name;
   43962:	9003      	str	r0, [sp, #12]
{
   43964:	460d      	mov	r5, r1
   43966:	4616      	mov	r6, r2
   43968:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   4396a:	f1b8 0f00 	cmp.w	r8, #0
   4396e:	d018      	beq.n	439a2 <settings_call_set_handler+0x4c>
   43970:	f8d8 1000 	ldr.w	r1, [r8]
   43974:	b181      	cbz	r1, 43998 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   43976:	aa03      	add	r2, sp, #12
   43978:	f7ff ffb4 	bl	438e4 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4397c:	b960      	cbnz	r0, 43998 <settings_call_set_handler+0x42>
			rc = 0;
   4397e:	2000      	movs	r0, #0
   43980:	e007      	b.n	43992 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   43982:	f8d8 3008 	ldr.w	r3, [r8, #8]
   43986:	9300      	str	r3, [sp, #0]
   43988:	9803      	ldr	r0, [sp, #12]
   4398a:	463b      	mov	r3, r7
   4398c:	4632      	mov	r2, r6
   4398e:	4629      	mov	r1, r5
   43990:	47c8      	blx	r9
}
   43992:	b005      	add	sp, #20
   43994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   43998:	f8d8 9004 	ldr.w	r9, [r8, #4]
   4399c:	f1b9 0f00 	cmp.w	r9, #0
   439a0:	d1ef      	bne.n	43982 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   439a2:	a903      	add	r1, sp, #12
   439a4:	4620      	mov	r0, r4
   439a6:	f7e6 f919 	bl	29bdc <settings_parse_and_lookup>
		if (!ch) {
   439aa:	2800      	cmp	r0, #0
   439ac:	d0e7      	beq.n	4397e <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   439ae:	6884      	ldr	r4, [r0, #8]
   439b0:	9803      	ldr	r0, [sp, #12]
   439b2:	463b      	mov	r3, r7
   439b4:	4632      	mov	r2, r6
   439b6:	4629      	mov	r1, r5
   439b8:	47a0      	blx	r4
   439ba:	e7e0      	b.n	4397e <settings_call_set_handler+0x28>

000439bc <settings_nvs_read_fn>:
{
   439bc:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   439be:	4613      	mov	r3, r2
{
   439c0:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   439c2:	460a      	mov	r2, r1
   439c4:	8881      	ldrh	r1, [r0, #4]
   439c6:	6800      	ldr	r0, [r0, #0]
   439c8:	f7ff ff4a 	bl	43860 <nvs_read>
}
   439cc:	42a0      	cmp	r0, r4
   439ce:	bfa8      	it	ge
   439d0:	4620      	movge	r0, r4
   439d2:	bd10      	pop	{r4, pc}

000439d4 <settings_nvs_save>:
{
   439d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   439d8:	b097      	sub	sp, #92	; 0x5c
   439da:	4604      	mov	r4, r0
   439dc:	9201      	str	r2, [sp, #4]
   439de:	469b      	mov	fp, r3
	if (!name) {
   439e0:	4689      	mov	r9, r1
   439e2:	2900      	cmp	r1, #0
   439e4:	d069      	beq.n	43aba <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   439e6:	b1da      	cbz	r2, 43a20 <settings_nvs_save+0x4c>
   439e8:	fabb f78b 	clz	r7, fp
   439ec:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   439ee:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   439f0:	3501      	adds	r5, #1
   439f2:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   439f4:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   439f6:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   439fa:	1e6e      	subs	r6, r5, #1
   439fc:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   439fe:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   43a02:	d02e      	beq.n	43a62 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   43a04:	234a      	movs	r3, #74	; 0x4a
   43a06:	aa03      	add	r2, sp, #12
   43a08:	4631      	mov	r1, r6
   43a0a:	4650      	mov	r0, sl
   43a0c:	f7ff ff28 	bl	43860 <nvs_read>
		if (rc < 0) {
   43a10:	2800      	cmp	r0, #0
   43a12:	da07      	bge.n	43a24 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   43a14:	f110 0f02 	cmn.w	r0, #2
   43a18:	bf08      	it	eq
   43a1a:	46b0      	moveq	r8, r6
   43a1c:	4635      	mov	r5, r6
   43a1e:	e7ec      	b.n	439fa <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   43a20:	2701      	movs	r7, #1
   43a22:	e7e4      	b.n	439ee <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   43a24:	ab16      	add	r3, sp, #88	; 0x58
   43a26:	4418      	add	r0, r3
   43a28:	2300      	movs	r3, #0
   43a2a:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   43a2e:	a903      	add	r1, sp, #12
   43a30:	4648      	mov	r0, r9
   43a32:	f001 fa17 	bl	44e64 <strcmp>
   43a36:	2800      	cmp	r0, #0
   43a38:	d1f0      	bne.n	43a1c <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   43a3a:	2f00      	cmp	r7, #0
   43a3c:	d03b      	beq.n	43ab6 <settings_nvs_save+0xe2>
   43a3e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   43a40:	42b3      	cmp	r3, r6
   43a42:	d142      	bne.n	43aca <settings_nvs_save+0xf6>
			cf->last_name_id--;
   43a44:	4622      	mov	r2, r4
   43a46:	1e73      	subs	r3, r6, #1
   43a48:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   43a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43a50:	2302      	movs	r3, #2
   43a52:	4650      	mov	r0, sl
   43a54:	f7e5 f8a2 	bl	28b9c <nvs_write>
			if (rc < 0) {
   43a58:	2800      	cmp	r0, #0
   43a5a:	da36      	bge.n	43aca <settings_nvs_save+0xf6>
}
   43a5c:	b017      	add	sp, #92	; 0x5c
   43a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   43a62:	bb6f      	cbnz	r7, 43ac0 <settings_nvs_save+0xec>
	write_name = true;
   43a64:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   43a66:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   43a6a:	d02b      	beq.n	43ac4 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   43a6c:	f104 0508 	add.w	r5, r4, #8
   43a70:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   43a74:	9a01      	ldr	r2, [sp, #4]
   43a76:	465b      	mov	r3, fp
   43a78:	b289      	uxth	r1, r1
   43a7a:	4628      	mov	r0, r5
   43a7c:	f7e5 f88e 	bl	28b9c <nvs_write>
	if (rc < 0) {
   43a80:	2800      	cmp	r0, #0
   43a82:	dbeb      	blt.n	43a5c <settings_nvs_save+0x88>
	if (write_name) {
   43a84:	b157      	cbz	r7, 43a9c <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   43a86:	4648      	mov	r0, r9
   43a88:	f001 f9e5 	bl	44e56 <strlen>
   43a8c:	464a      	mov	r2, r9
   43a8e:	4603      	mov	r3, r0
   43a90:	4641      	mov	r1, r8
   43a92:	4628      	mov	r0, r5
   43a94:	f7e5 f882 	bl	28b9c <nvs_write>
		if (rc < 0) {
   43a98:	2800      	cmp	r0, #0
   43a9a:	dbdf      	blt.n	43a5c <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   43a9c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   43a9e:	4543      	cmp	r3, r8
   43aa0:	d220      	bcs.n	43ae4 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   43aa2:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   43aa4:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   43aa6:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   43aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43aae:	4628      	mov	r0, r5
   43ab0:	f7e5 f874 	bl	28b9c <nvs_write>
   43ab4:	e016      	b.n	43ae4 <settings_nvs_save+0x110>
   43ab6:	46b0      	mov	r8, r6
   43ab8:	e7d5      	b.n	43a66 <settings_nvs_save+0x92>
		return -EINVAL;
   43aba:	f06f 0015 	mvn.w	r0, #21
   43abe:	e7cd      	b.n	43a5c <settings_nvs_save+0x88>
		return 0;
   43ac0:	2000      	movs	r0, #0
   43ac2:	e7cb      	b.n	43a5c <settings_nvs_save+0x88>
		return -ENOMEM;
   43ac4:	f06f 000b 	mvn.w	r0, #11
   43ac8:	e7c8      	b.n	43a5c <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   43aca:	4631      	mov	r1, r6
   43acc:	4650      	mov	r0, sl
   43ace:	f7ff fe6c 	bl	437aa <nvs_delete>
			if (rc >= 0) {
   43ad2:	2800      	cmp	r0, #0
   43ad4:	dbc2      	blt.n	43a5c <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   43ad6:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   43ada:	313f      	adds	r1, #63	; 0x3f
   43adc:	b289      	uxth	r1, r1
   43ade:	4650      	mov	r0, sl
   43ae0:	f7ff fe63 	bl	437aa <nvs_delete>
	if (rc < 0) {
   43ae4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   43ae8:	e7b8      	b.n	43a5c <settings_nvs_save+0x88>

00043aea <settings_nvs_backend_init>:
{
   43aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   43aec:	f100 0608 	add.w	r6, r0, #8
   43af0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   43af2:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   43af4:	4630      	mov	r0, r6
   43af6:	f7e4 fef3 	bl	288e0 <nvs_init>
	if (rc) {
   43afa:	4605      	mov	r5, r0
   43afc:	b970      	cbnz	r0, 43b1c <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   43afe:	2302      	movs	r3, #2
   43b00:	f10d 0206 	add.w	r2, sp, #6
   43b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43b08:	4630      	mov	r0, r6
   43b0a:	f7ff fea9 	bl	43860 <nvs_read>
	if (rc < 0) {
   43b0e:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   43b10:	bfac      	ite	ge
   43b12:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   43b16:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   43b1a:	8723      	strh	r3, [r4, #56]	; 0x38
}
   43b1c:	4628      	mov	r0, r5
   43b1e:	b002      	add	sp, #8
   43b20:	bd70      	pop	{r4, r5, r6, pc}

00043b22 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   43b22:	b538      	push	{r3, r4, r5, lr}
   43b24:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   43b26:	42ab      	cmp	r3, r5
{
   43b28:	4611      	mov	r1, r2
   43b2a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   43b2c:	d804      	bhi.n	43b38 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   43b2e:	461a      	mov	r2, r3
   43b30:	f001 f9c6 	bl	44ec0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   43b34:	4620      	mov	r0, r4
   43b36:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   43b38:	2400      	movs	r4, #0
   43b3a:	e7fb      	b.n	43b34 <_copy+0x12>

00043b3c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   43b3c:	f001 b9cb 	b.w	44ed6 <memset>

00043b40 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   43b40:	09c3      	lsrs	r3, r0, #7
   43b42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   43b46:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   43b4a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   43b4e:	b2c0      	uxtb	r0, r0
   43b50:	4770      	bx	lr

00043b52 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   43b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   43b56:	4606      	mov	r6, r0
   43b58:	b0a9      	sub	sp, #164	; 0xa4
   43b5a:	4688      	mov	r8, r1
   43b5c:	4614      	mov	r4, r2
   43b5e:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   43b60:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   43b64:	f7e6 fad2 	bl	2a10c <uECC_get_rng>
		if (!rng_function ||
   43b68:	4603      	mov	r3, r0
   43b6a:	2800      	cmp	r0, #0
   43b6c:	d03e      	beq.n	43bec <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   43b6e:	2140      	movs	r1, #64	; 0x40
   43b70:	a808      	add	r0, sp, #32
   43b72:	4798      	blx	r3
		if (!rng_function ||
   43b74:	b3d0      	cbz	r0, 43bec <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   43b76:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   43b7a:	f112 031f 	adds.w	r3, r2, #31
   43b7e:	bf48      	it	mi
   43b80:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   43b84:	466d      	mov	r5, sp
   43b86:	464a      	mov	r2, r9
   43b88:	a908      	add	r1, sp, #32
   43b8a:	4628      	mov	r0, r5
   43b8c:	f343 1347 	sbfx	r3, r3, #5, #8
   43b90:	f000 f9ee 	bl	43f70 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   43b94:	4622      	mov	r2, r4
   43b96:	4629      	mov	r1, r5
   43b98:	a818      	add	r0, sp, #96	; 0x60
   43b9a:	f000 fe03 	bl	447a4 <EccPoint_compute_public_key>
   43b9e:	b318      	cbz	r0, 43be8 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   43ba0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   43ba4:	1dd9      	adds	r1, r3, #7
   43ba6:	bf48      	it	mi
   43ba8:	f103 010e 	addmi.w	r1, r3, #14
   43bac:	462a      	mov	r2, r5
   43bae:	4640      	mov	r0, r8
   43bb0:	10c9      	asrs	r1, r1, #3
   43bb2:	f000 fe1f 	bl	447f4 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   43bb6:	f994 1001 	ldrsb.w	r1, [r4, #1]
   43bba:	aa18      	add	r2, sp, #96	; 0x60
   43bbc:	4630      	mov	r0, r6
   43bbe:	f000 fe19 	bl	447f4 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   43bc2:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   43bc6:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   43bca:	ab18      	add	r3, sp, #96	; 0x60
   43bcc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   43bd0:	1870      	adds	r0, r6, r1
   43bd2:	f000 fe0f 	bl	447f4 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   43bd6:	2220      	movs	r2, #32
   43bd8:	2100      	movs	r1, #0
   43bda:	4628      	mov	r0, r5
   43bdc:	f001 f97b 	bl	44ed6 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   43be0:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   43be2:	b029      	add	sp, #164	; 0xa4
   43be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   43be8:	3f01      	subs	r7, #1
   43bea:	d1bb      	bne.n	43b64 <uECC_make_key+0x12>
        		return 0;
   43bec:	2000      	movs	r0, #0
   43bee:	e7f8      	b.n	43be2 <uECC_make_key+0x90>

00043bf0 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   43bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   43bf4:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   43bf6:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   43bfa:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   43bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   43c02:	b0a4      	sub	sp, #144	; 0x90
   43c04:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   43c06:	1dda      	adds	r2, r3, #7
   43c08:	bf48      	it	mi
   43c0a:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   43c0e:	ad04      	add	r5, sp, #16
{
   43c10:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   43c12:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   43c14:	4628      	mov	r0, r5
   43c16:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   43c18:	9502      	str	r5, [sp, #8]
   43c1a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   43c1c:	f000 fdfe 	bl	4481c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   43c20:	463a      	mov	r2, r7
   43c22:	4649      	mov	r1, r9
   43c24:	a814      	add	r0, sp, #80	; 0x50
   43c26:	f000 fdf9 	bl	4481c <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   43c2a:	ab14      	add	r3, sp, #80	; 0x50
   43c2c:	eb09 0107 	add.w	r1, r9, r7
   43c30:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   43c34:	463a      	mov	r2, r7
   43c36:	f000 fdf1 	bl	4481c <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   43c3a:	4623      	mov	r3, r4
   43c3c:	4632      	mov	r2, r6
   43c3e:	4629      	mov	r1, r5
   43c40:	4628      	mov	r0, r5
   43c42:	f000 fd83 	bl	4474c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   43c46:	fab0 f380 	clz	r3, r0
   43c4a:	9401      	str	r4, [sp, #4]
   43c4c:	aa24      	add	r2, sp, #144	; 0x90
   43c4e:	095b      	lsrs	r3, r3, #5
   43c50:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   43c54:	8863      	ldrh	r3, [r4, #2]
   43c56:	3301      	adds	r3, #1
   43c58:	b21b      	sxth	r3, r3
   43c5a:	9300      	str	r3, [sp, #0]
   43c5c:	f851 2c88 	ldr.w	r2, [r1, #-136]
   43c60:	a914      	add	r1, sp, #80	; 0x50
   43c62:	2300      	movs	r3, #0
   43c64:	4608      	mov	r0, r1
   43c66:	f000 fca4 	bl	445b2 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   43c6a:	aa14      	add	r2, sp, #80	; 0x50
   43c6c:	4639      	mov	r1, r7
   43c6e:	4640      	mov	r0, r8
   43c70:	f000 fdc0 	bl	447f4 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   43c74:	4621      	mov	r1, r4
   43c76:	a814      	add	r0, sp, #80	; 0x50
   43c78:	f000 fc10 	bl	4449c <EccPoint_isZero>
   43c7c:	af02      	add	r7, sp, #8
   43c7e:	4604      	mov	r4, r0
   43c80:	2208      	movs	r2, #8
   43c82:	2100      	movs	r1, #0
   43c84:	4638      	mov	r0, r7
   43c86:	f001 f926 	bl	44ed6 <memset>
   43c8a:	2220      	movs	r2, #32
   43c8c:	2100      	movs	r1, #0
   43c8e:	4630      	mov	r0, r6
   43c90:	f001 f921 	bl	44ed6 <memset>
   43c94:	2220      	movs	r2, #32
   43c96:	2100      	movs	r1, #0
   43c98:	4628      	mov	r0, r5
   43c9a:	f001 f91c 	bl	44ed6 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   43c9e:	fab4 f084 	clz	r0, r4
   43ca2:	0940      	lsrs	r0, r0, #5
   43ca4:	b024      	add	sp, #144	; 0x90
   43ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00043caa <uECC_vli_add>:
{
   43caa:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   43cac:	2400      	movs	r4, #0
{
   43cae:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   43cb0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   43cb2:	b265      	sxtb	r5, r4
   43cb4:	42ab      	cmp	r3, r5
   43cb6:	dc00      	bgt.n	43cba <uECC_vli_add+0x10>
}
   43cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   43cba:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   43cbe:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   43cc2:	443d      	add	r5, r7
   43cc4:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   43cc6:	42af      	cmp	r7, r5
   43cc8:	f000 0001 	and.w	r0, r0, #1
   43ccc:	bf18      	it	ne
   43cce:	2000      	movne	r0, #0
		result[i] = sum;
   43cd0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   43cd4:	bf88      	it	hi
   43cd6:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43cda:	3401      	adds	r4, #1
   43cdc:	e7e9      	b.n	43cb2 <uECC_vli_add+0x8>

00043cde <uECC_vli_rshift1>:
	vli += num_words;
   43cde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   43ce2:	2300      	movs	r3, #0
	while (vli-- > end) {
   43ce4:	4288      	cmp	r0, r1
   43ce6:	d300      	bcc.n	43cea <uECC_vli_rshift1+0xc>
}
   43ce8:	4770      	bx	lr
		uECC_word_t temp = *vli;
   43cea:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   43cee:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   43cf2:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   43cf4:	07d3      	lsls	r3, r2, #31
   43cf6:	e7f5      	b.n	43ce4 <uECC_vli_rshift1+0x6>

00043cf8 <vli_modInv_update>:
	if (!EVEN(uv)) {
   43cf8:	6803      	ldr	r3, [r0, #0]
{
   43cfa:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   43cfc:	f013 0601 	ands.w	r6, r3, #1
{
   43d00:	4605      	mov	r5, r0
   43d02:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   43d04:	d005      	beq.n	43d12 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   43d06:	4613      	mov	r3, r2
   43d08:	460a      	mov	r2, r1
   43d0a:	4601      	mov	r1, r0
   43d0c:	f7ff ffcd 	bl	43caa <uECC_vli_add>
   43d10:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   43d12:	4621      	mov	r1, r4
   43d14:	4628      	mov	r0, r5
   43d16:	f7ff ffe2 	bl	43cde <uECC_vli_rshift1>
	if (carry) {
   43d1a:	b146      	cbz	r6, 43d2e <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   43d1c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   43d20:	3a01      	subs	r2, #1
   43d22:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   43d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   43d2a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   43d2e:	bd70      	pop	{r4, r5, r6, pc}

00043d30 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   43d30:	f04f 0c00 	mov.w	ip, #0
{
   43d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   43d38:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   43d3a:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   43d3c:	fa4f f98c 	sxtb.w	r9, ip
   43d40:	454b      	cmp	r3, r9
   43d42:	dc16      	bgt.n	43d72 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43d44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   43d48:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   43d4c:	9601      	str	r6, [sp, #4]
   43d4e:	f04f 0800 	mov.w	r8, #0
   43d52:	9f01      	ldr	r7, [sp, #4]
   43d54:	fa53 fe88 	uxtab	lr, r3, r8
   43d58:	fa4f fe8e 	sxtb.w	lr, lr
   43d5c:	45be      	cmp	lr, r7
   43d5e:	fa5f f688 	uxtb.w	r6, r8
   43d62:	db26      	blt.n	43db2 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   43d64:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   43d68:	f840 4c04 	str.w	r4, [r0, #-4]
}
   43d6c:	b003      	add	sp, #12
   43d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   43d72:	f04f 0e00 	mov.w	lr, #0
   43d76:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   43d7a:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   43d7c:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   43d80:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   43d84:	fba6 6707 	umull	r6, r7, r6, r7
   43d88:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   43d8a:	f10e 0e01 	add.w	lr, lr, #1
   43d8e:	417d      	adcs	r5, r7
   43d90:	fa4f f68e 	sxtb.w	r6, lr
   43d94:	f04f 0b00 	mov.w	fp, #0
   43d98:	bf28      	it	cs
   43d9a:	f04f 0b01 	movcs.w	fp, #1
   43d9e:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   43da0:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   43da2:	ddeb      	ble.n	43d7c <uECC_vli_mult+0x4c>
		result[k] = r0;
   43da4:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   43da8:	462c      	mov	r4, r5
   43daa:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   43dae:	4645      	mov	r5, r8
   43db0:	e7c4      	b.n	43d3c <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   43db2:	3601      	adds	r6, #1
   43db4:	46a9      	mov	r9, r5
   43db6:	b276      	sxtb	r6, r6
   43db8:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   43dbc:	2500      	movs	r5, #0
   43dbe:	b277      	sxtb	r7, r6
   43dc0:	42bb      	cmp	r3, r7
   43dc2:	dc05      	bgt.n	43dd0 <uECC_vli_mult+0xa0>
		result[k] = r0;
   43dc4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43dc8:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   43dcc:	464c      	mov	r4, r9
   43dce:	e7c0      	b.n	43d52 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   43dd0:	f06f 0703 	mvn.w	r7, #3
   43dd4:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   43dd6:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   43dda:	f85a 7007 	ldr.w	r7, [sl, r7]
   43dde:	fba7 7c0c 	umull	r7, ip, r7, ip
   43de2:	193c      	adds	r4, r7, r4
   43de4:	eb5c 0909 	adcs.w	r9, ip, r9
   43de8:	f04f 0b00 	mov.w	fp, #0
   43dec:	bf28      	it	cs
   43dee:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   43df2:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   43df4:	3601      	adds	r6, #1
   43df6:	e7e2      	b.n	43dbe <uECC_vli_mult+0x8e>

00043df8 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   43df8:	2300      	movs	r3, #0
{
   43dfa:	b510      	push	{r4, lr}
		 vli[i] = 0;
   43dfc:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   43dfe:	b25a      	sxtb	r2, r3
   43e00:	4291      	cmp	r1, r2
   43e02:	dc00      	bgt.n	43e06 <uECC_vli_clear+0xe>
}
   43e04:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   43e06:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43e0a:	3301      	adds	r3, #1
   43e0c:	e7f7      	b.n	43dfe <uECC_vli_clear+0x6>

00043e0e <uECC_vli_isZero>:
{
   43e0e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   43e10:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   43e12:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   43e14:	b25c      	sxtb	r4, r3
   43e16:	42a1      	cmp	r1, r4
   43e18:	dc03      	bgt.n	43e22 <uECC_vli_isZero+0x14>
}
   43e1a:	fab2 f082 	clz	r0, r2
   43e1e:	0940      	lsrs	r0, r0, #5
   43e20:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   43e22:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   43e26:	3301      	adds	r3, #1
   43e28:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   43e2a:	e7f3      	b.n	43e14 <uECC_vli_isZero+0x6>

00043e2c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43e2c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43e2e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43e30:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43e34:	f001 011f 	and.w	r1, r1, #31
   43e38:	fa03 f101 	lsl.w	r1, r3, r1
}
   43e3c:	4008      	ands	r0, r1
   43e3e:	4770      	bx	lr

00043e40 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43e40:	3901      	subs	r1, #1
{
   43e42:	b510      	push	{r4, lr}
   43e44:	4602      	mov	r2, r0
   43e46:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43e48:	1d04      	adds	r4, r0, #4
   43e4a:	0608      	lsls	r0, r1, #24
   43e4c:	b2cb      	uxtb	r3, r1
   43e4e:	d404      	bmi.n	43e5a <uECC_vli_numBits+0x1a>
   43e50:	3901      	subs	r1, #1
   43e52:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   43e56:	2800      	cmp	r0, #0
   43e58:	d0f7      	beq.n	43e4a <uECC_vli_numBits+0xa>
	return (i + 1);
   43e5a:	3301      	adds	r3, #1
   43e5c:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   43e5e:	b150      	cbz	r0, 43e76 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   43e60:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   43e64:	3b01      	subs	r3, #1
   43e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   43e6a:	2300      	movs	r3, #0
   43e6c:	b922      	cbnz	r2, 43e78 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   43e6e:	3801      	subs	r0, #1
   43e70:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   43e74:	b200      	sxth	r0, r0
}
   43e76:	bd10      	pop	{r4, pc}
		digit >>= 1;
   43e78:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   43e7a:	3301      	adds	r3, #1
   43e7c:	e7f6      	b.n	43e6c <uECC_vli_numBits+0x2c>

00043e7e <uECC_vli_set>:
{
   43e7e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   43e80:	2300      	movs	r3, #0
   43e82:	b25c      	sxtb	r4, r3
   43e84:	42a2      	cmp	r2, r4
   43e86:	dc00      	bgt.n	43e8a <uECC_vli_set+0xc>
}
   43e88:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   43e8a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   43e8e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43e92:	3301      	adds	r3, #1
   43e94:	e7f5      	b.n	43e82 <uECC_vli_set+0x4>

00043e96 <uECC_vli_cmp_unsafe>:
{
   43e96:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   43e98:	3a01      	subs	r2, #1
   43e9a:	b252      	sxtb	r2, r2
   43e9c:	0613      	lsls	r3, r2, #24
   43e9e:	d501      	bpl.n	43ea4 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   43ea0:	2000      	movs	r0, #0
}
   43ea2:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   43ea4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43ea8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   43eac:	429c      	cmp	r4, r3
   43eae:	d805      	bhi.n	43ebc <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   43eb0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   43eb4:	d2f2      	bcs.n	43e9c <uECC_vli_cmp_unsafe+0x6>
			return -1;
   43eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   43eba:	e7f2      	b.n	43ea2 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   43ebc:	2001      	movs	r0, #1
   43ebe:	e7f0      	b.n	43ea2 <uECC_vli_cmp_unsafe+0xc>

00043ec0 <uECC_vli_equal>:
{
   43ec0:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   43ec2:	3a01      	subs	r2, #1
   43ec4:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   43ec6:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   43ec8:	0614      	lsls	r4, r2, #24
   43eca:	d503      	bpl.n	43ed4 <uECC_vli_equal+0x14>
}
   43ecc:	1e18      	subs	r0, r3, #0
   43ece:	bf18      	it	ne
   43ed0:	2001      	movne	r0, #1
   43ed2:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   43ed4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43ed8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   43edc:	406c      	eors	r4, r5
   43ede:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   43ee0:	3a01      	subs	r2, #1
   43ee2:	e7f1      	b.n	43ec8 <uECC_vli_equal+0x8>

00043ee4 <uECC_vli_sub>:
{
   43ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   43ee6:	2400      	movs	r4, #0
{
   43ee8:	4606      	mov	r6, r0
   43eea:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   43eec:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   43eee:	b265      	sxtb	r5, r4
   43ef0:	4565      	cmp	r5, ip
   43ef2:	db00      	blt.n	43ef6 <uECC_vli_sub+0x12>
}
   43ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   43ef6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   43efa:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   43efe:	1a3d      	subs	r5, r7, r0
   43f00:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   43f02:	42af      	cmp	r7, r5
   43f04:	f000 0001 	and.w	r0, r0, #1
   43f08:	bf18      	it	ne
   43f0a:	2000      	movne	r0, #0
		result[i] = diff;
   43f0c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   43f10:	bf38      	it	cc
   43f12:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43f16:	3401      	adds	r4, #1
   43f18:	e7e9      	b.n	43eee <uECC_vli_sub+0xa>

00043f1a <uECC_vli_modAdd>:
{
   43f1a:	b570      	push	{r4, r5, r6, lr}
   43f1c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   43f20:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43f22:	4633      	mov	r3, r6
{
   43f24:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43f26:	f7ff fec0 	bl	43caa <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   43f2a:	b930      	cbnz	r0, 43f3a <uECC_vli_modAdd+0x20>
   43f2c:	4632      	mov	r2, r6
   43f2e:	4621      	mov	r1, r4
   43f30:	4628      	mov	r0, r5
   43f32:	f7ff ffb0 	bl	43e96 <uECC_vli_cmp_unsafe>
   43f36:	2801      	cmp	r0, #1
   43f38:	d007      	beq.n	43f4a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   43f3a:	4633      	mov	r3, r6
   43f3c:	462a      	mov	r2, r5
   43f3e:	4621      	mov	r1, r4
   43f40:	4620      	mov	r0, r4
}
   43f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   43f46:	f7ff bfcd 	b.w	43ee4 <uECC_vli_sub>
}
   43f4a:	bd70      	pop	{r4, r5, r6, pc}

00043f4c <uECC_vli_modSub>:
{
   43f4c:	b570      	push	{r4, r5, r6, lr}
   43f4e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   43f52:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43f54:	4633      	mov	r3, r6
{
   43f56:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43f58:	f7ff ffc4 	bl	43ee4 <uECC_vli_sub>
	if (l_borrow) {
   43f5c:	b138      	cbz	r0, 43f6e <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   43f5e:	4633      	mov	r3, r6
   43f60:	462a      	mov	r2, r5
   43f62:	4621      	mov	r1, r4
   43f64:	4620      	mov	r0, r4
}
   43f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   43f6a:	f7ff be9e 	b.w	43caa <uECC_vli_add>
}
   43f6e:	bd70      	pop	{r4, r5, r6, pc}

00043f70 <uECC_vli_mmod>:
{
   43f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43f74:	b0a5      	sub	sp, #148	; 0x94
   43f76:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   43f78:	ab14      	add	r3, sp, #80	; 0x50
   43f7a:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   43f7e:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   43f80:	4629      	mov	r1, r5
   43f82:	4610      	mov	r0, r2
{
   43f84:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   43f86:	f7ff ff5b 	bl	43e40 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   43f8a:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   43f8e:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   43f90:	2c00      	cmp	r4, #0
   43f92:	4621      	mov	r1, r4
   43f94:	bfb8      	it	lt
   43f96:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43f9a:	4263      	negs	r3, r4
   43f9c:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   43fa0:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43fa4:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   43fa8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43faa:	bf58      	it	pl
   43fac:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   43fae:	f7ff ff23 	bl	43df8 <uECC_vli_clear>
	if (bit_shift > 0) {
   43fb2:	2e00      	cmp	r6, #0
   43fb4:	b208      	sxth	r0, r1
   43fb6:	dd2b      	ble.n	44010 <uECC_vli_mmod+0xa0>
   43fb8:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   43fba:	2200      	movs	r2, #0
   43fbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   43fc0:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43fc4:	4613      	mov	r3, r2
   43fc6:	429d      	cmp	r5, r3
   43fc8:	d817      	bhi.n	43ffa <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   43fca:	006b      	lsls	r3, r5, #1
   43fcc:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43fce:	ab04      	add	r3, sp, #16
   43fd0:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43fd4:	1e6f      	subs	r7, r5, #1
   43fd6:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43fd8:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43fda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   43fde:	2c00      	cmp	r4, #0
   43fe0:	da54      	bge.n	4408c <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   43fe2:	ab24      	add	r3, sp, #144	; 0x90
   43fe4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   43fe8:	462a      	mov	r2, r5
   43fea:	f856 1c88 	ldr.w	r1, [r6, #-136]
   43fee:	4640      	mov	r0, r8
   43ff0:	f7ff ff45 	bl	43e7e <uECC_vli_set>
}
   43ff4:	b025      	add	sp, #148	; 0x94
   43ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   43ffa:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   43ffe:	fa0c f106 	lsl.w	r1, ip, r6
   44002:	430a      	orrs	r2, r1
   44004:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   44008:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4400a:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4400e:	e7da      	b.n	43fc6 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   44010:	ab04      	add	r3, sp, #16
   44012:	462a      	mov	r2, r5
   44014:	4639      	mov	r1, r7
   44016:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4401a:	f7ff ff30 	bl	43e7e <uECC_vli_set>
   4401e:	e7d4      	b.n	43fca <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   44020:	fa0f fe82 	sxth.w	lr, r2
   44024:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   44028:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   4402c:	ab24      	add	r3, sp, #144	; 0x90
   4402e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   44032:	3001      	adds	r0, #1
   44034:	f852 3c80 	ldr.w	r3, [r2, #-128]
   44038:	440b      	add	r3, r1
   4403a:	ebbb 0303 	subs.w	r3, fp, r3
   4403e:	bf34      	ite	cc
   44040:	2201      	movcc	r2, #1
   44042:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   44044:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   44046:	bf18      	it	ne
   44048:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   4404a:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   4404e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   44052:	9b01      	ldr	r3, [sp, #4]
   44054:	b242      	sxtb	r2, r0
   44056:	429a      	cmp	r2, r3
   44058:	dbe2      	blt.n	44020 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   4405a:	1a73      	subs	r3, r6, r1
   4405c:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4405e:	4629      	mov	r1, r5
   44060:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   44062:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   44064:	f7ff fe3b 	bl	43cde <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   44068:	ab24      	add	r3, sp, #144	; 0x90
   4406a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4406e:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   44070:	f853 2c80 	ldr.w	r2, [r3, #-128]
   44074:	f857 3c80 	ldr.w	r3, [r7, #-128]
   44078:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   4407c:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   44080:	4648      	mov	r0, r9
   44082:	3c01      	subs	r4, #1
   44084:	f7ff fe2b 	bl	43cde <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   44088:	b224      	sxth	r4, r4
   4408a:	e7a8      	b.n	43fde <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4408c:	ab24      	add	r3, sp, #144	; 0x90
   4408e:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   44090:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   44094:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   44096:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   4409a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   4409e:	e7d8      	b.n	44052 <uECC_vli_mmod+0xe2>

000440a0 <uECC_vli_modMult_fast>:
{
   440a0:	b530      	push	{r4, r5, lr}
   440a2:	461c      	mov	r4, r3
   440a4:	b091      	sub	sp, #68	; 0x44
   440a6:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   440a8:	f993 3000 	ldrsb.w	r3, [r3]
   440ac:	4668      	mov	r0, sp
   440ae:	f7ff fe3f 	bl	43d30 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   440b2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   440b6:	4669      	mov	r1, sp
   440b8:	4628      	mov	r0, r5
   440ba:	4798      	blx	r3
}
   440bc:	b011      	add	sp, #68	; 0x44
   440be:	bd30      	pop	{r4, r5, pc}

000440c0 <uECC_vli_modSquare_fast>:
{
   440c0:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   440c2:	460a      	mov	r2, r1
   440c4:	f7ff bfec 	b.w	440a0 <uECC_vli_modMult_fast>

000440c8 <double_jacobian_default>:
{
   440c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   440cc:	f993 6000 	ldrsb.w	r6, [r3]
{
   440d0:	b092      	sub	sp, #72	; 0x48
   440d2:	4604      	mov	r4, r0
   440d4:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   440d6:	4610      	mov	r0, r2
   440d8:	4631      	mov	r1, r6
{
   440da:	4615      	mov	r5, r2
   440dc:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   440de:	f7ff fe96 	bl	43e0e <uECC_vli_isZero>
   440e2:	2800      	cmp	r0, #0
   440e4:	f040 8091 	bne.w	4420a <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   440e8:	463a      	mov	r2, r7
   440ea:	4649      	mov	r1, r9
   440ec:	a802      	add	r0, sp, #8
   440ee:	f7ff ffe7 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   440f2:	463b      	mov	r3, r7
   440f4:	aa02      	add	r2, sp, #8
   440f6:	4621      	mov	r1, r4
   440f8:	a80a      	add	r0, sp, #40	; 0x28
   440fa:	f7ff ffd1 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   440fe:	a902      	add	r1, sp, #8
   44100:	4608      	mov	r0, r1
   44102:	463a      	mov	r2, r7
   44104:	f7ff ffdc 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   44108:	463b      	mov	r3, r7
   4410a:	462a      	mov	r2, r5
   4410c:	4649      	mov	r1, r9
   4410e:	4648      	mov	r0, r9
   44110:	f7ff ffc6 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   44114:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   44118:	463a      	mov	r2, r7
   4411a:	4629      	mov	r1, r5
   4411c:	4628      	mov	r0, r5
   4411e:	f7ff ffcf 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   44122:	4643      	mov	r3, r8
   44124:	462a      	mov	r2, r5
   44126:	4621      	mov	r1, r4
   44128:	4620      	mov	r0, r4
   4412a:	9600      	str	r6, [sp, #0]
   4412c:	f7ff fef5 	bl	43f1a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   44130:	4643      	mov	r3, r8
   44132:	462a      	mov	r2, r5
   44134:	4629      	mov	r1, r5
   44136:	4628      	mov	r0, r5
   44138:	9600      	str	r6, [sp, #0]
   4413a:	f7ff feee 	bl	43f1a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4413e:	4643      	mov	r3, r8
   44140:	462a      	mov	r2, r5
   44142:	4621      	mov	r1, r4
   44144:	4628      	mov	r0, r5
   44146:	9600      	str	r6, [sp, #0]
   44148:	f7ff ff00 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4414c:	463b      	mov	r3, r7
   4414e:	462a      	mov	r2, r5
   44150:	4621      	mov	r1, r4
   44152:	4620      	mov	r0, r4
   44154:	f7ff ffa4 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   44158:	4643      	mov	r3, r8
   4415a:	4622      	mov	r2, r4
   4415c:	4621      	mov	r1, r4
   4415e:	4628      	mov	r0, r5
   44160:	9600      	str	r6, [sp, #0]
   44162:	f7ff feda 	bl	43f1a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   44166:	4643      	mov	r3, r8
   44168:	9600      	str	r6, [sp, #0]
   4416a:	462a      	mov	r2, r5
   4416c:	4621      	mov	r1, r4
   4416e:	4620      	mov	r0, r4
   44170:	f7ff fed3 	bl	43f1a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   44174:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   44176:	07db      	lsls	r3, r3, #31
   44178:	d54a      	bpl.n	44210 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4417a:	4633      	mov	r3, r6
   4417c:	4642      	mov	r2, r8
   4417e:	4621      	mov	r1, r4
   44180:	4620      	mov	r0, r4
   44182:	f7ff fd92 	bl	43caa <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   44186:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   44188:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   4418a:	4620      	mov	r0, r4
   4418c:	f7ff fda7 	bl	43cde <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   44190:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   44194:	3b01      	subs	r3, #1
   44196:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   4419a:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   4419e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   441a2:	463a      	mov	r2, r7
   441a4:	4621      	mov	r1, r4
   441a6:	4628      	mov	r0, r5
   441a8:	f7ff ff8a 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   441ac:	4643      	mov	r3, r8
   441ae:	aa0a      	add	r2, sp, #40	; 0x28
   441b0:	4629      	mov	r1, r5
   441b2:	4628      	mov	r0, r5
   441b4:	9600      	str	r6, [sp, #0]
   441b6:	f7ff fec9 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   441ba:	4643      	mov	r3, r8
   441bc:	aa0a      	add	r2, sp, #40	; 0x28
   441be:	4629      	mov	r1, r5
   441c0:	4628      	mov	r0, r5
   441c2:	9600      	str	r6, [sp, #0]
   441c4:	f7ff fec2 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   441c8:	a90a      	add	r1, sp, #40	; 0x28
   441ca:	4608      	mov	r0, r1
   441cc:	4643      	mov	r3, r8
   441ce:	462a      	mov	r2, r5
   441d0:	9600      	str	r6, [sp, #0]
   441d2:	f7ff febb 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   441d6:	463b      	mov	r3, r7
   441d8:	aa0a      	add	r2, sp, #40	; 0x28
   441da:	4621      	mov	r1, r4
   441dc:	4620      	mov	r0, r4
   441de:	f7ff ff5f 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   441e2:	aa02      	add	r2, sp, #8
   441e4:	4643      	mov	r3, r8
   441e6:	4610      	mov	r0, r2
   441e8:	4621      	mov	r1, r4
   441ea:	9600      	str	r6, [sp, #0]
   441ec:	f7ff feae 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   441f0:	4632      	mov	r2, r6
   441f2:	4629      	mov	r1, r5
   441f4:	4620      	mov	r0, r4
   441f6:	f7ff fe42 	bl	43e7e <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   441fa:	4649      	mov	r1, r9
   441fc:	4628      	mov	r0, r5
   441fe:	f7ff fe3e 	bl	43e7e <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   44202:	a902      	add	r1, sp, #8
   44204:	4648      	mov	r0, r9
   44206:	f7ff fe3a 	bl	43e7e <uECC_vli_set>
}
   4420a:	b012      	add	sp, #72	; 0x48
   4420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   44210:	4631      	mov	r1, r6
   44212:	4620      	mov	r0, r4
   44214:	f7ff fd63 	bl	43cde <uECC_vli_rshift1>
   44218:	e7c3      	b.n	441a2 <double_jacobian_default+0xda>

0004421a <x_side_default>:
{
   4421a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4421e:	4615      	mov	r5, r2
   44220:	b08a      	sub	sp, #40	; 0x28
   44222:	4604      	mov	r4, r0
   44224:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   44226:	221c      	movs	r2, #28
   44228:	2100      	movs	r1, #0
   4422a:	a803      	add	r0, sp, #12
   4422c:	f000 fe53 	bl	44ed6 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   44230:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   44232:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   44236:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   44238:	462a      	mov	r2, r5
   4423a:	4631      	mov	r1, r6
   4423c:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4423e:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   44240:	f7ff ff3e 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   44244:	463b      	mov	r3, r7
   44246:	aa02      	add	r2, sp, #8
   44248:	4621      	mov	r1, r4
   4424a:	4620      	mov	r0, r4
   4424c:	f8cd 8000 	str.w	r8, [sp]
   44250:	f7ff fe7c 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   44254:	462b      	mov	r3, r5
   44256:	4632      	mov	r2, r6
   44258:	4621      	mov	r1, r4
   4425a:	4620      	mov	r0, r4
   4425c:	f7ff ff20 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   44260:	f8cd 8000 	str.w	r8, [sp]
   44264:	463b      	mov	r3, r7
   44266:	f105 0284 	add.w	r2, r5, #132	; 0x84
   4426a:	4621      	mov	r1, r4
   4426c:	4620      	mov	r0, r4
   4426e:	f7ff fe54 	bl	43f1a <uECC_vli_modAdd>
}
   44272:	b00a      	add	sp, #40	; 0x28
   44274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00044278 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   44278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4427c:	b09a      	sub	sp, #104	; 0x68
   4427e:	4616      	mov	r6, r2
   44280:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   44284:	4644      	mov	r4, r8
{
   44286:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   44288:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4428c:	9500      	str	r5, [sp, #0]
{
   4428e:	4607      	mov	r7, r0
   44290:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   44292:	4623      	mov	r3, r4
   44294:	4602      	mov	r2, r0
   44296:	4631      	mov	r1, r6
   44298:	a802      	add	r0, sp, #8
   4429a:	f7ff fe57 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4429e:	a902      	add	r1, sp, #8
   442a0:	4642      	mov	r2, r8
   442a2:	4608      	mov	r0, r1
   442a4:	f7ff ff0c 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   442a8:	4643      	mov	r3, r8
   442aa:	aa02      	add	r2, sp, #8
   442ac:	4639      	mov	r1, r7
   442ae:	4638      	mov	r0, r7
   442b0:	f7ff fef6 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   442b4:	4643      	mov	r3, r8
   442b6:	aa02      	add	r2, sp, #8
   442b8:	4631      	mov	r1, r6
   442ba:	4630      	mov	r0, r6
   442bc:	f7ff fef0 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   442c0:	4623      	mov	r3, r4
   442c2:	4652      	mov	r2, sl
   442c4:	4649      	mov	r1, r9
   442c6:	a802      	add	r0, sp, #8
   442c8:	9500      	str	r5, [sp, #0]
   442ca:	f7ff fe26 	bl	43f1a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   442ce:	4623      	mov	r3, r4
   442d0:	4652      	mov	r2, sl
   442d2:	4649      	mov	r1, r9
   442d4:	4648      	mov	r0, r9
   442d6:	9500      	str	r5, [sp, #0]
   442d8:	f7ff fe38 	bl	43f4c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   442dc:	4623      	mov	r3, r4
   442de:	463a      	mov	r2, r7
   442e0:	4631      	mov	r1, r6
   442e2:	a80a      	add	r0, sp, #40	; 0x28
   442e4:	9500      	str	r5, [sp, #0]
   442e6:	f7ff fe31 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   442ea:	4643      	mov	r3, r8
   442ec:	aa0a      	add	r2, sp, #40	; 0x28
   442ee:	4651      	mov	r1, sl
   442f0:	4650      	mov	r0, sl
   442f2:	f7ff fed5 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   442f6:	4623      	mov	r3, r4
   442f8:	4632      	mov	r2, r6
   442fa:	4639      	mov	r1, r7
   442fc:	a80a      	add	r0, sp, #40	; 0x28
   442fe:	9500      	str	r5, [sp, #0]
   44300:	f7ff fe0b 	bl	43f1a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   44304:	4642      	mov	r2, r8
   44306:	4649      	mov	r1, r9
   44308:	4630      	mov	r0, r6
   4430a:	f7ff fed9 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4430e:	4623      	mov	r3, r4
   44310:	aa0a      	add	r2, sp, #40	; 0x28
   44312:	4631      	mov	r1, r6
   44314:	4630      	mov	r0, r6
   44316:	9500      	str	r5, [sp, #0]
   44318:	f7ff fe18 	bl	43f4c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4431c:	4623      	mov	r3, r4
   4431e:	4632      	mov	r2, r6
   44320:	4639      	mov	r1, r7
   44322:	a812      	add	r0, sp, #72	; 0x48
   44324:	9500      	str	r5, [sp, #0]
   44326:	f7ff fe11 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4432a:	4643      	mov	r3, r8
   4432c:	aa12      	add	r2, sp, #72	; 0x48
   4432e:	4649      	mov	r1, r9
   44330:	4648      	mov	r0, r9
   44332:	f7ff feb5 	bl	440a0 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   44336:	4623      	mov	r3, r4
   44338:	4652      	mov	r2, sl
   4433a:	4649      	mov	r1, r9
   4433c:	4648      	mov	r0, r9
   4433e:	9500      	str	r5, [sp, #0]
   44340:	f7ff fe04 	bl	43f4c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   44344:	4642      	mov	r2, r8
   44346:	a902      	add	r1, sp, #8
   44348:	a812      	add	r0, sp, #72	; 0x48
   4434a:	f7ff feb9 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4434e:	a912      	add	r1, sp, #72	; 0x48
   44350:	4623      	mov	r3, r4
   44352:	aa0a      	add	r2, sp, #40	; 0x28
   44354:	4608      	mov	r0, r1
   44356:	9500      	str	r5, [sp, #0]
   44358:	f7ff fdf8 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4435c:	4623      	mov	r3, r4
   4435e:	463a      	mov	r2, r7
   44360:	a912      	add	r1, sp, #72	; 0x48
   44362:	a80a      	add	r0, sp, #40	; 0x28
   44364:	9500      	str	r5, [sp, #0]
   44366:	f7ff fdf1 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   4436a:	a90a      	add	r1, sp, #40	; 0x28
   4436c:	4643      	mov	r3, r8
   4436e:	aa02      	add	r2, sp, #8
   44370:	4608      	mov	r0, r1
   44372:	f7ff fe95 	bl	440a0 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   44376:	4623      	mov	r3, r4
   44378:	4652      	mov	r2, sl
   4437a:	a90a      	add	r1, sp, #40	; 0x28
   4437c:	4650      	mov	r0, sl
   4437e:	9500      	str	r5, [sp, #0]
   44380:	f7ff fde4 	bl	43f4c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   44384:	462a      	mov	r2, r5
   44386:	a912      	add	r1, sp, #72	; 0x48
   44388:	4638      	mov	r0, r7
   4438a:	f7ff fd78 	bl	43e7e <uECC_vli_set>
}
   4438e:	b01a      	add	sp, #104	; 0x68
   44390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00044394 <uECC_vli_modInv>:
{
   44394:	b5f0      	push	{r4, r5, r6, r7, lr}
   44396:	460f      	mov	r7, r1
   44398:	b0a1      	sub	sp, #132	; 0x84
   4439a:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   4439c:	4619      	mov	r1, r3
   4439e:	4638      	mov	r0, r7
{
   443a0:	4615      	mov	r5, r2
   443a2:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   443a4:	f7ff fd33 	bl	43e0e <uECC_vli_isZero>
   443a8:	b128      	cbz	r0, 443b6 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   443aa:	4630      	mov	r0, r6
}
   443ac:	b021      	add	sp, #132	; 0x84
   443ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   443b2:	f7ff bd21 	b.w	43df8 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   443b6:	4622      	mov	r2, r4
   443b8:	4639      	mov	r1, r7
   443ba:	4668      	mov	r0, sp
   443bc:	f7ff fd5f 	bl	43e7e <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   443c0:	4629      	mov	r1, r5
   443c2:	a808      	add	r0, sp, #32
   443c4:	f7ff fd5b 	bl	43e7e <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   443c8:	a810      	add	r0, sp, #64	; 0x40
   443ca:	4621      	mov	r1, r4
   443cc:	f7ff fd14 	bl	43df8 <uECC_vli_clear>
	u[0] = 1;
   443d0:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   443d2:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   443d4:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   443d6:	f7ff fd0f 	bl	43df8 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   443da:	4622      	mov	r2, r4
   443dc:	a908      	add	r1, sp, #32
   443de:	4668      	mov	r0, sp
   443e0:	f7ff fd59 	bl	43e96 <uECC_vli_cmp_unsafe>
   443e4:	b930      	cbnz	r0, 443f4 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   443e6:	4622      	mov	r2, r4
   443e8:	a910      	add	r1, sp, #64	; 0x40
   443ea:	4630      	mov	r0, r6
   443ec:	f7ff fd47 	bl	43e7e <uECC_vli_set>
}
   443f0:	b021      	add	sp, #132	; 0x84
   443f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   443f4:	9b00      	ldr	r3, [sp, #0]
   443f6:	07da      	lsls	r2, r3, #31
   443f8:	d409      	bmi.n	4440e <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   443fa:	4621      	mov	r1, r4
   443fc:	4668      	mov	r0, sp
   443fe:	f7ff fc6e 	bl	43cde <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   44402:	4622      	mov	r2, r4
   44404:	4629      	mov	r1, r5
   44406:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   44408:	f7ff fc76 	bl	43cf8 <vli_modInv_update>
   4440c:	e7e5      	b.n	443da <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4440e:	9b08      	ldr	r3, [sp, #32]
   44410:	07db      	lsls	r3, r3, #31
   44412:	d407      	bmi.n	44424 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   44414:	4621      	mov	r1, r4
   44416:	a808      	add	r0, sp, #32
   44418:	f7ff fc61 	bl	43cde <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4441c:	4622      	mov	r2, r4
   4441e:	4629      	mov	r1, r5
   44420:	a818      	add	r0, sp, #96	; 0x60
   44422:	e7f1      	b.n	44408 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   44424:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   44426:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   44428:	dd1c      	ble.n	44464 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4442a:	aa08      	add	r2, sp, #32
   4442c:	4669      	mov	r1, sp
   4442e:	4668      	mov	r0, sp
   44430:	f7ff fd58 	bl	43ee4 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   44434:	4621      	mov	r1, r4
   44436:	4668      	mov	r0, sp
   44438:	f7ff fc51 	bl	43cde <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4443c:	4622      	mov	r2, r4
   4443e:	a918      	add	r1, sp, #96	; 0x60
   44440:	a810      	add	r0, sp, #64	; 0x40
   44442:	f7ff fd28 	bl	43e96 <uECC_vli_cmp_unsafe>
   44446:	2800      	cmp	r0, #0
   44448:	da05      	bge.n	44456 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4444a:	a910      	add	r1, sp, #64	; 0x40
   4444c:	4623      	mov	r3, r4
   4444e:	462a      	mov	r2, r5
   44450:	4608      	mov	r0, r1
   44452:	f7ff fc2a 	bl	43caa <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   44456:	a910      	add	r1, sp, #64	; 0x40
   44458:	4623      	mov	r3, r4
   4445a:	aa18      	add	r2, sp, #96	; 0x60
   4445c:	4608      	mov	r0, r1
   4445e:	f7ff fd41 	bl	43ee4 <uECC_vli_sub>
   44462:	e7ce      	b.n	44402 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   44464:	466a      	mov	r2, sp
   44466:	a808      	add	r0, sp, #32
   44468:	f7ff fd3c 	bl	43ee4 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4446c:	4621      	mov	r1, r4
   4446e:	a808      	add	r0, sp, #32
   44470:	f7ff fc35 	bl	43cde <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   44474:	4622      	mov	r2, r4
   44476:	a910      	add	r1, sp, #64	; 0x40
   44478:	a818      	add	r0, sp, #96	; 0x60
   4447a:	f7ff fd0c 	bl	43e96 <uECC_vli_cmp_unsafe>
   4447e:	2800      	cmp	r0, #0
   44480:	da05      	bge.n	4448e <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   44482:	a918      	add	r1, sp, #96	; 0x60
   44484:	4623      	mov	r3, r4
   44486:	462a      	mov	r2, r5
   44488:	4608      	mov	r0, r1
   4448a:	f7ff fc0e 	bl	43caa <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4448e:	a918      	add	r1, sp, #96	; 0x60
   44490:	4623      	mov	r3, r4
   44492:	aa10      	add	r2, sp, #64	; 0x40
   44494:	4608      	mov	r0, r1
   44496:	f7ff fd25 	bl	43ee4 <uECC_vli_sub>
   4449a:	e7bf      	b.n	4441c <uECC_vli_modInv+0x88>

0004449c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   4449c:	7809      	ldrb	r1, [r1, #0]
   4449e:	0049      	lsls	r1, r1, #1
   444a0:	b249      	sxtb	r1, r1
   444a2:	f7ff bcb4 	b.w	43e0e <uECC_vli_isZero>

000444a6 <apply_z>:
{
   444a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   444a8:	4615      	mov	r5, r2
   444aa:	b089      	sub	sp, #36	; 0x24
   444ac:	461c      	mov	r4, r3
   444ae:	4607      	mov	r7, r0
   444b0:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   444b2:	461a      	mov	r2, r3
   444b4:	4629      	mov	r1, r5
   444b6:	4668      	mov	r0, sp
   444b8:	f7ff fe02 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   444bc:	4623      	mov	r3, r4
   444be:	466a      	mov	r2, sp
   444c0:	4639      	mov	r1, r7
   444c2:	4638      	mov	r0, r7
   444c4:	f7ff fdec 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   444c8:	4623      	mov	r3, r4
   444ca:	462a      	mov	r2, r5
   444cc:	4669      	mov	r1, sp
   444ce:	4668      	mov	r0, sp
   444d0:	f7ff fde6 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   444d4:	4623      	mov	r3, r4
   444d6:	466a      	mov	r2, sp
   444d8:	4631      	mov	r1, r6
   444da:	4630      	mov	r0, r6
   444dc:	f7ff fde0 	bl	440a0 <uECC_vli_modMult_fast>
}
   444e0:	b009      	add	sp, #36	; 0x24
   444e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000444e4 <XYcZ_add>:
{
   444e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   444e8:	b08a      	sub	sp, #40	; 0x28
   444ea:	4614      	mov	r4, r2
   444ec:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   444f0:	4655      	mov	r5, sl
{
   444f2:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   444f4:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   444f8:	9600      	str	r6, [sp, #0]
{
   444fa:	4680      	mov	r8, r0
   444fc:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   444fe:	462b      	mov	r3, r5
   44500:	4602      	mov	r2, r0
   44502:	4621      	mov	r1, r4
   44504:	a802      	add	r0, sp, #8
   44506:	f7ff fd21 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4450a:	a902      	add	r1, sp, #8
   4450c:	4652      	mov	r2, sl
   4450e:	4608      	mov	r0, r1
   44510:	f7ff fdd6 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   44514:	4653      	mov	r3, sl
   44516:	aa02      	add	r2, sp, #8
   44518:	4641      	mov	r1, r8
   4451a:	4640      	mov	r0, r8
   4451c:	f7ff fdc0 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   44520:	4653      	mov	r3, sl
   44522:	aa02      	add	r2, sp, #8
   44524:	4621      	mov	r1, r4
   44526:	4620      	mov	r0, r4
   44528:	f7ff fdba 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4452c:	462b      	mov	r3, r5
   4452e:	464a      	mov	r2, r9
   44530:	4639      	mov	r1, r7
   44532:	4638      	mov	r0, r7
   44534:	9600      	str	r6, [sp, #0]
   44536:	f7ff fd09 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4453a:	4652      	mov	r2, sl
   4453c:	4639      	mov	r1, r7
   4453e:	a802      	add	r0, sp, #8
   44540:	f7ff fdbe 	bl	440c0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   44544:	a902      	add	r1, sp, #8
   44546:	462b      	mov	r3, r5
   44548:	4642      	mov	r2, r8
   4454a:	4608      	mov	r0, r1
   4454c:	9600      	str	r6, [sp, #0]
   4454e:	f7ff fcfd 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   44552:	a902      	add	r1, sp, #8
   44554:	462b      	mov	r3, r5
   44556:	4622      	mov	r2, r4
   44558:	4608      	mov	r0, r1
   4455a:	9600      	str	r6, [sp, #0]
   4455c:	f7ff fcf6 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   44560:	462b      	mov	r3, r5
   44562:	4642      	mov	r2, r8
   44564:	4621      	mov	r1, r4
   44566:	4620      	mov	r0, r4
   44568:	9600      	str	r6, [sp, #0]
   4456a:	f7ff fcef 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4456e:	4653      	mov	r3, sl
   44570:	4622      	mov	r2, r4
   44572:	4649      	mov	r1, r9
   44574:	4648      	mov	r0, r9
   44576:	f7ff fd93 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   4457a:	462b      	mov	r3, r5
   4457c:	aa02      	add	r2, sp, #8
   4457e:	4641      	mov	r1, r8
   44580:	4620      	mov	r0, r4
   44582:	9600      	str	r6, [sp, #0]
   44584:	f7ff fce2 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   44588:	4653      	mov	r3, sl
   4458a:	4622      	mov	r2, r4
   4458c:	4639      	mov	r1, r7
   4458e:	4638      	mov	r0, r7
   44590:	f7ff fd86 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   44594:	462b      	mov	r3, r5
   44596:	464a      	mov	r2, r9
   44598:	4639      	mov	r1, r7
   4459a:	4638      	mov	r0, r7
   4459c:	9600      	str	r6, [sp, #0]
   4459e:	f7ff fcd5 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   445a2:	4632      	mov	r2, r6
   445a4:	a902      	add	r1, sp, #8
   445a6:	4620      	mov	r0, r4
   445a8:	f7ff fc69 	bl	43e7e <uECC_vli_set>
}
   445ac:	b00a      	add	sp, #40	; 0x28
   445ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000445b2 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   445b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   445b6:	b0b1      	sub	sp, #196	; 0xc4
   445b8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   445bc:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   445be:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   445c2:	a818      	add	r0, sp, #96	; 0x60
{
   445c4:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   445c6:	463a      	mov	r2, r7
{
   445c8:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   445ca:	f7ff fc58 	bl	43e7e <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   445ce:	00bb      	lsls	r3, r7, #2
   445d0:	9305      	str	r3, [sp, #20]
   445d2:	9b04      	ldr	r3, [sp, #16]
   445d4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   445d8:	4619      	mov	r1, r3
   445da:	a828      	add	r0, sp, #160	; 0xa0
   445dc:	9302      	str	r3, [sp, #8]
   445de:	f7ff fc4e 	bl	43e7e <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   445e2:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   445e6:	2d00      	cmp	r5, #0
   445e8:	f000 8086 	beq.w	446f8 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   445ec:	4632      	mov	r2, r6
   445ee:	4629      	mov	r1, r5
   445f0:	a808      	add	r0, sp, #32
   445f2:	f7ff fc44 	bl	43e7e <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   445f6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   445fa:	4632      	mov	r2, r6
   445fc:	a918      	add	r1, sp, #96	; 0x60
   445fe:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   44600:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   44604:	f7ff fc3b 	bl	43e7e <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   44608:	a928      	add	r1, sp, #160	; 0xa0
   4460a:	4648      	mov	r0, r9
   4460c:	f7ff fc37 	bl	43e7e <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   44610:	4623      	mov	r3, r4
   44612:	aa08      	add	r2, sp, #32
   44614:	a818      	add	r0, sp, #96	; 0x60
   44616:	f7ff ff46 	bl	444a6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4461a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4461e:	4623      	mov	r3, r4
   44620:	aa08      	add	r2, sp, #32
   44622:	a928      	add	r1, sp, #160	; 0xa0
   44624:	a818      	add	r0, sp, #96	; 0x60
   44626:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   44628:	4623      	mov	r3, r4
   4462a:	aa08      	add	r2, sp, #32
   4462c:	4649      	mov	r1, r9
   4462e:	4640      	mov	r0, r8
   44630:	f7ff ff39 	bl	444a6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   44634:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   44638:	3d02      	subs	r5, #2
   4463a:	b22d      	sxth	r5, r5
   4463c:	2d00      	cmp	r5, #0
   4463e:	dc62      	bgt.n	44706 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   44640:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44644:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   44646:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4464a:	ab10      	add	r3, sp, #64	; 0x40
   4464c:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   44650:	43ed      	mvns	r5, r5
   44652:	ab20      	add	r3, sp, #128	; 0x80
   44654:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   44658:	f005 0501 	and.w	r5, r5, #1
   4465c:	ab10      	add	r3, sp, #64	; 0x40
   4465e:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   44662:	ab20      	add	r3, sp, #128	; 0x80
   44664:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   44668:	462b      	mov	r3, r5
   4466a:	464a      	mov	r2, r9
   4466c:	4631      	mov	r1, r6
   4466e:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   44670:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44674:	f7ff fe00 	bl	44278 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   44678:	4653      	mov	r3, sl
   4467a:	aa10      	add	r2, sp, #64	; 0x40
   4467c:	a918      	add	r1, sp, #96	; 0x60
   4467e:	a808      	add	r0, sp, #32
   44680:	9700      	str	r7, [sp, #0]
   44682:	f7ff fc63 	bl	43f4c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   44686:	a908      	add	r1, sp, #32
   44688:	4623      	mov	r3, r4
   4468a:	4632      	mov	r2, r6
   4468c:	4608      	mov	r0, r1
   4468e:	f7ff fd07 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   44692:	a908      	add	r1, sp, #32
   44694:	9a04      	ldr	r2, [sp, #16]
   44696:	4623      	mov	r3, r4
   44698:	4608      	mov	r0, r1
   4469a:	f7ff fd01 	bl	440a0 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4469e:	a908      	add	r1, sp, #32
   446a0:	463b      	mov	r3, r7
   446a2:	4652      	mov	r2, sl
   446a4:	4608      	mov	r0, r1
   446a6:	f7ff fe75 	bl	44394 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   446aa:	a908      	add	r1, sp, #32
   446ac:	9a02      	ldr	r2, [sp, #8]
   446ae:	4623      	mov	r3, r4
   446b0:	4608      	mov	r0, r1
   446b2:	f7ff fcf5 	bl	440a0 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   446b6:	a908      	add	r1, sp, #32
   446b8:	4623      	mov	r3, r4
   446ba:	4642      	mov	r2, r8
   446bc:	4608      	mov	r0, r1
   446be:	f7ff fcef 	bl	440a0 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   446c2:	4633      	mov	r3, r6
   446c4:	4642      	mov	r2, r8
   446c6:	4629      	mov	r1, r5
   446c8:	4648      	mov	r0, r9
   446ca:	9400      	str	r4, [sp, #0]
   446cc:	f7ff ff0a 	bl	444e4 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   446d0:	4623      	mov	r3, r4
   446d2:	aa08      	add	r2, sp, #32
   446d4:	a920      	add	r1, sp, #128	; 0x80
   446d6:	a810      	add	r0, sp, #64	; 0x40
   446d8:	f7ff fee5 	bl	444a6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   446dc:	9803      	ldr	r0, [sp, #12]
   446de:	463a      	mov	r2, r7
   446e0:	a910      	add	r1, sp, #64	; 0x40
   446e2:	f7ff fbcc 	bl	43e7e <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   446e6:	9803      	ldr	r0, [sp, #12]
   446e8:	9b05      	ldr	r3, [sp, #20]
   446ea:	a920      	add	r1, sp, #128	; 0x80
   446ec:	4418      	add	r0, r3
   446ee:	f7ff fbc6 	bl	43e7e <uECC_vli_set>
}
   446f2:	b031      	add	sp, #196	; 0xc4
   446f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   446f8:	4631      	mov	r1, r6
   446fa:	a808      	add	r0, sp, #32
   446fc:	f7ff fb7c 	bl	43df8 <uECC_vli_clear>
		z[0] = 1;
   44700:	2301      	movs	r3, #1
   44702:	9308      	str	r3, [sp, #32]
   44704:	e777      	b.n	445f6 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   44706:	4629      	mov	r1, r5
   44708:	4650      	mov	r0, sl
   4470a:	f7ff fb8f 	bl	43e2c <uECC_vli_testBit>
   4470e:	fab0 f680 	clz	r6, r0
   44712:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44714:	f1c6 0101 	rsb	r1, r6, #1
   44718:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   4471c:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   44720:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   44724:	4633      	mov	r3, r6
   44726:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   4472a:	465a      	mov	r2, fp
   4472c:	9400      	str	r4, [sp, #0]
   4472e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   44732:	f7ff fda1 	bl	44278 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   44736:	9907      	ldr	r1, [sp, #28]
   44738:	9806      	ldr	r0, [sp, #24]
   4473a:	9400      	str	r4, [sp, #0]
   4473c:	460b      	mov	r3, r1
   4473e:	4602      	mov	r2, r0
   44740:	4631      	mov	r1, r6
   44742:	4658      	mov	r0, fp
   44744:	f7ff fece 	bl	444e4 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   44748:	3d01      	subs	r5, #1
   4474a:	e776      	b.n	4463a <EccPoint_mult+0x88>

0004474c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   4474c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   44750:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   44754:	f119 081f 	adds.w	r8, r9, #31
{
   44758:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4475a:	bf48      	it	mi
   4475c:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   44760:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   44762:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   44766:	3524      	adds	r5, #36	; 0x24
   44768:	4601      	mov	r1, r0
{
   4476a:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4476c:	4643      	mov	r3, r8
   4476e:	462a      	mov	r2, r5
   44770:	4630      	mov	r0, r6
   44772:	f7ff fa9a 	bl	43caa <uECC_vli_add>
   44776:	4604      	mov	r4, r0
   44778:	b990      	cbnz	r0, 447a0 <regularize_k+0x54>
   4477a:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   4477e:	da06      	bge.n	4478e <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   44780:	4649      	mov	r1, r9
   44782:	4630      	mov	r0, r6
   44784:	f7ff fb52 	bl	43e2c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   44788:	1e04      	subs	r4, r0, #0
   4478a:	bf18      	it	ne
   4478c:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   4478e:	4643      	mov	r3, r8
   44790:	462a      	mov	r2, r5
   44792:	4631      	mov	r1, r6
   44794:	4638      	mov	r0, r7
   44796:	f7ff fa88 	bl	43caa <uECC_vli_add>

	return carry;
}
   4479a:	4620      	mov	r0, r4
   4479c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   447a0:	2401      	movs	r4, #1
   447a2:	e7f4      	b.n	4478e <regularize_k+0x42>

000447a4 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   447a4:	b530      	push	{r4, r5, lr}
   447a6:	4614      	mov	r4, r2
   447a8:	b095      	sub	sp, #84	; 0x54
   447aa:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   447ac:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   447ae:	4623      	mov	r3, r4
{
   447b0:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   447b2:	a904      	add	r1, sp, #16
   447b4:	9102      	str	r1, [sp, #8]
   447b6:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   447b8:	f7ff ffc8 	bl	4474c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   447bc:	fab0 f380 	clz	r3, r0
   447c0:	095b      	lsrs	r3, r3, #5
   447c2:	aa14      	add	r2, sp, #80	; 0x50
   447c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   447c8:	8863      	ldrh	r3, [r4, #2]
   447ca:	9401      	str	r4, [sp, #4]
   447cc:	3301      	adds	r3, #1
   447ce:	b21b      	sxth	r3, r3
   447d0:	9300      	str	r3, [sp, #0]
   447d2:	f852 2c48 	ldr.w	r2, [r2, #-72]
   447d6:	2300      	movs	r3, #0
   447d8:	f104 0144 	add.w	r1, r4, #68	; 0x44
   447dc:	4628      	mov	r0, r5
   447de:	f7ff fee8 	bl	445b2 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   447e2:	4621      	mov	r1, r4
   447e4:	4628      	mov	r0, r5
   447e6:	f7ff fe59 	bl	4449c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   447ea:	fab0 f080 	clz	r0, r0
   447ee:	0940      	lsrs	r0, r0, #5
   447f0:	b015      	add	sp, #84	; 0x54
   447f2:	bd30      	pop	{r4, r5, pc}

000447f4 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   447f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   447f6:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   447f8:	1e4f      	subs	r7, r1, #1
   447fa:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   447fc:	428c      	cmp	r4, r1
   447fe:	f105 0501 	add.w	r5, r5, #1
   44802:	db00      	blt.n	44806 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   44804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   44806:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   44808:	f023 0603 	bic.w	r6, r3, #3
   4480c:	f003 0303 	and.w	r3, r3, #3
   44810:	5996      	ldr	r6, [r2, r6]
   44812:	00db      	lsls	r3, r3, #3
   44814:	fa26 f303 	lsr.w	r3, r6, r3
   44818:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   4481a:	e7ee      	b.n	447fa <uECC_vli_nativeToBytes+0x6>

0004481c <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   4481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4481e:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   44820:	1cd1      	adds	r1, r2, #3
   44822:	bf48      	it	mi
   44824:	1d91      	addmi	r1, r2, #6
   44826:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4482a:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4482c:	f7ff fae4 	bl	43df8 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   44830:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   44832:	1e67      	subs	r7, r4, #1
   44834:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   44836:	42a2      	cmp	r2, r4
   44838:	f105 0501 	add.w	r5, r5, #1
   4483c:	db00      	blt.n	44840 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   4483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   44840:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   44842:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   44846:	5cb2      	ldrb	r2, [r6, r2]
   44848:	f003 0303 	and.w	r3, r3, #3
   4484c:	00db      	lsls	r3, r3, #3
   4484e:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   44852:	5842      	ldr	r2, [r0, r1]
   44854:	431a      	orrs	r2, r3
   44856:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   44858:	e7ec      	b.n	44834 <uECC_vli_bytesToNative+0x18>

0004485a <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4485a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4485c:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4485e:	f991 6000 	ldrsb.w	r6, [r1]
{
   44862:	4605      	mov	r5, r0
   44864:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   44866:	f7ff fe19 	bl	4449c <EccPoint_isZero>
   4486a:	bb28      	cbnz	r0, 448b8 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4486c:	1d27      	adds	r7, r4, #4
   4486e:	4632      	mov	r2, r6
   44870:	4629      	mov	r1, r5
   44872:	4638      	mov	r0, r7
   44874:	f7ff fb0f 	bl	43e96 <uECC_vli_cmp_unsafe>
   44878:	2801      	cmp	r0, #1
   4487a:	d120      	bne.n	448be <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4487c:	4632      	mov	r2, r6
   4487e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   44882:	4638      	mov	r0, r7
   44884:	f7ff fb07 	bl	43e96 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   44888:	2801      	cmp	r0, #1
   4488a:	d118      	bne.n	448be <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4488c:	4622      	mov	r2, r4
   4488e:	4668      	mov	r0, sp
   44890:	f7ff fc16 	bl	440c0 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   44894:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   44898:	4622      	mov	r2, r4
   4489a:	4629      	mov	r1, r5
   4489c:	a808      	add	r0, sp, #32
   4489e:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   448a0:	4632      	mov	r2, r6
   448a2:	a908      	add	r1, sp, #32
   448a4:	4668      	mov	r0, sp
   448a6:	f7ff fb0b 	bl	43ec0 <uECC_vli_equal>
		return -3;
   448aa:	2800      	cmp	r0, #0
   448ac:	bf0c      	ite	eq
   448ae:	2000      	moveq	r0, #0
   448b0:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   448b4:	b011      	add	sp, #68	; 0x44
   448b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   448b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   448bc:	e7fa      	b.n	448b4 <uECC_valid_point+0x5a>
		return -2;
   448be:	f06f 0001 	mvn.w	r0, #1
   448c2:	e7f7      	b.n	448b4 <uECC_valid_point+0x5a>

000448c4 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   448c4:	b570      	push	{r4, r5, r6, lr}
   448c6:	460c      	mov	r4, r1
   448c8:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   448ca:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   448cc:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   448d0:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   448d2:	4601      	mov	r1, r0
   448d4:	4668      	mov	r0, sp
   448d6:	f7ff ffa1 	bl	4481c <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   448da:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   448de:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   448e2:	18a9      	adds	r1, r5, r2
   448e4:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   448e8:	f7ff ff98 	bl	4481c <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   448ec:	2210      	movs	r2, #16
   448ee:	4631      	mov	r1, r6
   448f0:	4668      	mov	r0, sp
   448f2:	f7ff fad0 	bl	43e96 <uECC_vli_cmp_unsafe>
   448f6:	b128      	cbz	r0, 44904 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   448f8:	4621      	mov	r1, r4
   448fa:	4668      	mov	r0, sp
   448fc:	f7ff ffad 	bl	4485a <uECC_valid_point>
}
   44900:	b010      	add	sp, #64	; 0x40
   44902:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   44904:	f06f 0003 	mvn.w	r0, #3
   44908:	e7fa      	b.n	44900 <uECC_valid_public_key+0x3c>

0004490a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4490a:	78cb      	ldrb	r3, [r1, #3]
   4490c:	7802      	ldrb	r2, [r0, #0]
   4490e:	4053      	eors	r3, r2
   44910:	7003      	strb	r3, [r0, #0]
   44912:	884b      	ldrh	r3, [r1, #2]
   44914:	7842      	ldrb	r2, [r0, #1]
   44916:	4053      	eors	r3, r2
   44918:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4491a:	680a      	ldr	r2, [r1, #0]
   4491c:	7883      	ldrb	r3, [r0, #2]
   4491e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44922:	7083      	strb	r3, [r0, #2]
   44924:	680a      	ldr	r2, [r1, #0]
   44926:	78c3      	ldrb	r3, [r0, #3]
   44928:	4053      	eors	r3, r2
   4492a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4492c:	79cb      	ldrb	r3, [r1, #7]
   4492e:	7902      	ldrb	r2, [r0, #4]
   44930:	4053      	eors	r3, r2
   44932:	7103      	strb	r3, [r0, #4]
   44934:	88cb      	ldrh	r3, [r1, #6]
   44936:	7942      	ldrb	r2, [r0, #5]
   44938:	4053      	eors	r3, r2
   4493a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4493c:	684a      	ldr	r2, [r1, #4]
   4493e:	7983      	ldrb	r3, [r0, #6]
   44940:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44944:	7183      	strb	r3, [r0, #6]
   44946:	684a      	ldr	r2, [r1, #4]
   44948:	79c3      	ldrb	r3, [r0, #7]
   4494a:	4053      	eors	r3, r2
   4494c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   4494e:	7acb      	ldrb	r3, [r1, #11]
   44950:	7a02      	ldrb	r2, [r0, #8]
   44952:	4053      	eors	r3, r2
   44954:	7203      	strb	r3, [r0, #8]
   44956:	7a42      	ldrb	r2, [r0, #9]
   44958:	894b      	ldrh	r3, [r1, #10]
   4495a:	4053      	eors	r3, r2
   4495c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   4495e:	688a      	ldr	r2, [r1, #8]
   44960:	7a83      	ldrb	r3, [r0, #10]
   44962:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44966:	7283      	strb	r3, [r0, #10]
   44968:	688a      	ldr	r2, [r1, #8]
   4496a:	7ac3      	ldrb	r3, [r0, #11]
   4496c:	4053      	eors	r3, r2
   4496e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   44970:	7bcb      	ldrb	r3, [r1, #15]
   44972:	7b02      	ldrb	r2, [r0, #12]
   44974:	4053      	eors	r3, r2
   44976:	7303      	strb	r3, [r0, #12]
   44978:	89cb      	ldrh	r3, [r1, #14]
   4497a:	7b42      	ldrb	r2, [r0, #13]
   4497c:	4053      	eors	r3, r2
   4497e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   44980:	68ca      	ldr	r2, [r1, #12]
   44982:	7b83      	ldrb	r3, [r0, #14]
   44984:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44988:	7383      	strb	r3, [r0, #14]
   4498a:	68ca      	ldr	r2, [r1, #12]
   4498c:	7bc3      	ldrb	r3, [r0, #15]
   4498e:	4053      	eors	r3, r2
   44990:	73c3      	strb	r3, [r0, #15]
}
   44992:	4770      	bx	lr

00044994 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   44994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   44996:	7802      	ldrb	r2, [r0, #0]
   44998:	f88d 2000 	strb.w	r2, [sp]
   4499c:	7942      	ldrb	r2, [r0, #5]
   4499e:	f88d 2001 	strb.w	r2, [sp, #1]
   449a2:	7a82      	ldrb	r2, [r0, #10]
   449a4:	f88d 2002 	strb.w	r2, [sp, #2]
   449a8:	7bc2      	ldrb	r2, [r0, #15]
   449aa:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   449ae:	7902      	ldrb	r2, [r0, #4]
   449b0:	f88d 2004 	strb.w	r2, [sp, #4]
   449b4:	7a42      	ldrb	r2, [r0, #9]
   449b6:	f88d 2005 	strb.w	r2, [sp, #5]
   449ba:	7b82      	ldrb	r2, [r0, #14]
   449bc:	f88d 2006 	strb.w	r2, [sp, #6]
   449c0:	78c2      	ldrb	r2, [r0, #3]
   449c2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   449c6:	7a02      	ldrb	r2, [r0, #8]
   449c8:	f88d 2008 	strb.w	r2, [sp, #8]
   449cc:	7b42      	ldrb	r2, [r0, #13]
   449ce:	f88d 2009 	strb.w	r2, [sp, #9]
   449d2:	7882      	ldrb	r2, [r0, #2]
   449d4:	f88d 200a 	strb.w	r2, [sp, #10]
   449d8:	79c2      	ldrb	r2, [r0, #7]
   449da:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   449de:	7b02      	ldrb	r2, [r0, #12]
   449e0:	f88d 200c 	strb.w	r2, [sp, #12]
   449e4:	7842      	ldrb	r2, [r0, #1]
   449e6:	7ac3      	ldrb	r3, [r0, #11]
   449e8:	f88d 200d 	strb.w	r2, [sp, #13]
   449ec:	7982      	ldrb	r2, [r0, #6]
   449ee:	f88d 200e 	strb.w	r2, [sp, #14]
   449f2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   449f6:	2310      	movs	r3, #16
   449f8:	466a      	mov	r2, sp
   449fa:	4619      	mov	r1, r3
   449fc:	f7ff f891 	bl	43b22 <_copy>
}
   44a00:	b005      	add	sp, #20
   44a02:	f85d fb04 	ldr.w	pc, [sp], #4

00044a06 <mult_row_column>:
{
   44a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44a08:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   44a0a:	7808      	ldrb	r0, [r1, #0]
{
   44a0c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   44a0e:	f7ff f897 	bl	43b40 <_double_byte>
   44a12:	4605      	mov	r5, r0
   44a14:	7860      	ldrb	r0, [r4, #1]
   44a16:	f7ff f893 	bl	43b40 <_double_byte>
   44a1a:	78a2      	ldrb	r2, [r4, #2]
   44a1c:	7863      	ldrb	r3, [r4, #1]
   44a1e:	4053      	eors	r3, r2
   44a20:	78e2      	ldrb	r2, [r4, #3]
   44a22:	4053      	eors	r3, r2
   44a24:	405d      	eors	r5, r3
   44a26:	4045      	eors	r5, r0
   44a28:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   44a2a:	7860      	ldrb	r0, [r4, #1]
   44a2c:	7827      	ldrb	r7, [r4, #0]
   44a2e:	f7ff f887 	bl	43b40 <_double_byte>
   44a32:	4605      	mov	r5, r0
   44a34:	78a0      	ldrb	r0, [r4, #2]
   44a36:	f7ff f883 	bl	43b40 <_double_byte>
   44a3a:	78a3      	ldrb	r3, [r4, #2]
   44a3c:	405f      	eors	r7, r3
   44a3e:	78e3      	ldrb	r3, [r4, #3]
   44a40:	405f      	eors	r7, r3
   44a42:	407d      	eors	r5, r7
   44a44:	4045      	eors	r5, r0
   44a46:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   44a48:	78a0      	ldrb	r0, [r4, #2]
   44a4a:	7865      	ldrb	r5, [r4, #1]
   44a4c:	7827      	ldrb	r7, [r4, #0]
   44a4e:	f7ff f877 	bl	43b40 <_double_byte>
   44a52:	406f      	eors	r7, r5
   44a54:	4605      	mov	r5, r0
   44a56:	78e0      	ldrb	r0, [r4, #3]
   44a58:	f7ff f872 	bl	43b40 <_double_byte>
   44a5c:	78e3      	ldrb	r3, [r4, #3]
   44a5e:	405f      	eors	r7, r3
   44a60:	407d      	eors	r5, r7
   44a62:	4045      	eors	r5, r0
   44a64:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   44a66:	7820      	ldrb	r0, [r4, #0]
   44a68:	f7ff f86a 	bl	43b40 <_double_byte>
   44a6c:	7863      	ldrb	r3, [r4, #1]
   44a6e:	7825      	ldrb	r5, [r4, #0]
   44a70:	405d      	eors	r5, r3
   44a72:	78a3      	ldrb	r3, [r4, #2]
   44a74:	405d      	eors	r5, r3
   44a76:	4045      	eors	r5, r0
   44a78:	78e0      	ldrb	r0, [r4, #3]
   44a7a:	f7ff f861 	bl	43b40 <_double_byte>
   44a7e:	b2ed      	uxtb	r5, r5
   44a80:	4045      	eors	r5, r0
   44a82:	70f5      	strb	r5, [r6, #3]
}
   44a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00044a86 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   44a86:	b570      	push	{r4, r5, r6, lr}
   44a88:	4614      	mov	r4, r2
   44a8a:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   44a8c:	4605      	mov	r5, r0
   44a8e:	2800      	cmp	r0, #0
   44a90:	d049      	beq.n	44b26 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   44a92:	2900      	cmp	r1, #0
   44a94:	d049      	beq.n	44b2a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   44a96:	2a00      	cmp	r2, #0
   44a98:	d049      	beq.n	44b2e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   44a9a:	2310      	movs	r3, #16
   44a9c:	460a      	mov	r2, r1
   44a9e:	4668      	mov	r0, sp
   44aa0:	4619      	mov	r1, r3
   44aa2:	f7ff f83e 	bl	43b22 <_copy>
	add_round_key(state, s->words);
   44aa6:	4621      	mov	r1, r4
   44aa8:	4668      	mov	r0, sp
   44aaa:	f7ff ff2e 	bl	4490a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   44aae:	3410      	adds	r4, #16
   44ab0:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   44ab4:	4668      	mov	r0, sp
   44ab6:	f7e5 fbf3 	bl	2a2a0 <sub_bytes>
		shift_rows(state);
   44aba:	4668      	mov	r0, sp
   44abc:	f7ff ff6a 	bl	44994 <shift_rows>
	mult_row_column(t, s);
   44ac0:	4669      	mov	r1, sp
   44ac2:	a804      	add	r0, sp, #16
   44ac4:	f7ff ff9f 	bl	44a06 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   44ac8:	a901      	add	r1, sp, #4
   44aca:	a805      	add	r0, sp, #20
   44acc:	f7ff ff9b 	bl	44a06 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   44ad0:	a902      	add	r1, sp, #8
   44ad2:	a806      	add	r0, sp, #24
   44ad4:	f7ff ff97 	bl	44a06 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   44ad8:	a903      	add	r1, sp, #12
   44ada:	a807      	add	r0, sp, #28
   44adc:	f7ff ff93 	bl	44a06 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   44ae0:	2310      	movs	r3, #16
   44ae2:	4619      	mov	r1, r3
   44ae4:	eb0d 0203 	add.w	r2, sp, r3
   44ae8:	4668      	mov	r0, sp
   44aea:	f7ff f81a 	bl	43b22 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   44aee:	4621      	mov	r1, r4
   44af0:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   44af2:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   44af4:	f7ff ff09 	bl	4490a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   44af8:	42a6      	cmp	r6, r4
   44afa:	d1db      	bne.n	44ab4 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   44afc:	f7e5 fbd0 	bl	2a2a0 <sub_bytes>
	shift_rows(state);
   44b00:	4668      	mov	r0, sp
   44b02:	f7ff ff47 	bl	44994 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   44b06:	4631      	mov	r1, r6
   44b08:	4668      	mov	r0, sp
   44b0a:	f7ff fefe 	bl	4490a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   44b0e:	2310      	movs	r3, #16
   44b10:	4619      	mov	r1, r3
   44b12:	466a      	mov	r2, sp
   44b14:	4628      	mov	r0, r5
   44b16:	f7ff f804 	bl	43b22 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   44b1a:	4668      	mov	r0, sp
   44b1c:	2210      	movs	r2, #16
   44b1e:	2100      	movs	r1, #0
   44b20:	f7ff f80c 	bl	43b3c <_set>

	return TC_CRYPTO_SUCCESS;
   44b24:	2001      	movs	r0, #1
}
   44b26:	b008      	add	sp, #32
   44b28:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   44b2a:	4608      	mov	r0, r1
   44b2c:	e7fb      	b.n	44b26 <tc_aes_encrypt+0xa0>
   44b2e:	4610      	mov	r0, r2
   44b30:	e7f9      	b.n	44b26 <tc_aes_encrypt+0xa0>

00044b32 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   44b32:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   44b34:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   44b36:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   44b38:	f912 3b10 	ldrsb.w	r3, [r2], #16
   44b3c:	2b00      	cmp	r3, #0
   44b3e:	bfb4      	ite	lt
   44b40:	2387      	movlt	r3, #135	; 0x87
   44b42:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   44b44:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   44b48:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   44b4c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   44b4e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   44b52:	d002      	beq.n	44b5a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   44b54:	7813      	ldrb	r3, [r2, #0]
   44b56:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   44b58:	e7f4      	b.n	44b44 <gf_double+0x12>
	}
}
   44b5a:	bd10      	pop	{r4, pc}

00044b5c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   44b5c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   44b5e:	b120      	cbz	r0, 44b6a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   44b60:	2258      	movs	r2, #88	; 0x58
   44b62:	2100      	movs	r1, #0
   44b64:	f7fe ffea 	bl	43b3c <_set>
   44b68:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   44b6a:	bd08      	pop	{r3, pc}

00044b6c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   44b6c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   44b6e:	4604      	mov	r4, r0
   44b70:	b188      	cbz	r0, 44b96 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   44b72:	2210      	movs	r2, #16
   44b74:	2100      	movs	r1, #0
   44b76:	f7fe ffe1 	bl	43b3c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   44b7a:	2210      	movs	r2, #16
   44b7c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   44b80:	2100      	movs	r1, #0
   44b82:	f7fe ffdb 	bl	43b3c <_set>
	s->leftover_offset = 0;
   44b86:	2300      	movs	r3, #0
   44b88:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   44b8a:	2200      	movs	r2, #0
   44b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   44b90:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   44b94:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   44b96:	bd10      	pop	{r4, pc}

00044b98 <tc_cmac_setup>:
{
   44b98:	b570      	push	{r4, r5, r6, lr}
   44b9a:	460d      	mov	r5, r1
   44b9c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   44b9e:	4604      	mov	r4, r0
   44ba0:	b310      	cbz	r0, 44be8 <tc_cmac_setup+0x50>
   44ba2:	b311      	cbz	r1, 44bea <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   44ba4:	2258      	movs	r2, #88	; 0x58
   44ba6:	2100      	movs	r1, #0
   44ba8:	f7fe ffc8 	bl	43b3c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   44bac:	4629      	mov	r1, r5
	s->sched = sched;
   44bae:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   44bb0:	4630      	mov	r0, r6
   44bb2:	f7e5 fb81 	bl	2a2b8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   44bb6:	2210      	movs	r2, #16
   44bb8:	2100      	movs	r1, #0
   44bba:	4620      	mov	r0, r4
   44bbc:	f7fe ffbe 	bl	43b3c <_set>
	gf_double (s->K1, s->iv);
   44bc0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   44bc4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44bc6:	4621      	mov	r1, r4
   44bc8:	4620      	mov	r0, r4
   44bca:	f7ff ff5c 	bl	44a86 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   44bce:	4621      	mov	r1, r4
   44bd0:	4628      	mov	r0, r5
   44bd2:	f7ff ffae 	bl	44b32 <gf_double>
	gf_double (s->K2, s->K1);
   44bd6:	4629      	mov	r1, r5
   44bd8:	f104 0020 	add.w	r0, r4, #32
   44bdc:	f7ff ffa9 	bl	44b32 <gf_double>
	tc_cmac_init(s);
   44be0:	4620      	mov	r0, r4
   44be2:	f7ff ffc3 	bl	44b6c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   44be6:	2001      	movs	r0, #1
}
   44be8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   44bea:	4608      	mov	r0, r1
   44bec:	e7fc      	b.n	44be8 <tc_cmac_setup+0x50>

00044bee <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   44bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44bf2:	460d      	mov	r5, r1
   44bf4:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   44bf6:	4604      	mov	r4, r0
   44bf8:	2800      	cmp	r0, #0
   44bfa:	d061      	beq.n	44cc0 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   44bfc:	b912      	cbnz	r2, 44c04 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   44bfe:	2001      	movs	r0, #1
}
   44c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   44c04:	2900      	cmp	r1, #0
   44c06:	d05b      	beq.n	44cc0 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   44c08:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   44c0c:	ea53 0102 	orrs.w	r1, r3, r2
   44c10:	d056      	beq.n	44cc0 <tc_cmac_update+0xd2>
	s->countdown--;
   44c12:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   44c14:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   44c18:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   44c1c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   44c20:	f1b8 0f00 	cmp.w	r8, #0
   44c24:	d02a      	beq.n	44c7c <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   44c26:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44c2a:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   44c2e:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44c30:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   44c32:	d208      	bcs.n	44c46 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44c34:	462a      	mov	r2, r5
   44c36:	4633      	mov	r3, r6
   44c38:	4631      	mov	r1, r6
   44c3a:	f7fe ff72 	bl	43b22 <_copy>
			s->leftover_offset += data_length;
   44c3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   44c40:	4432      	add	r2, r6
   44c42:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   44c44:	e7db      	b.n	44bfe <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   44c46:	463b      	mov	r3, r7
   44c48:	462a      	mov	r2, r5
   44c4a:	4639      	mov	r1, r7
   44c4c:	f7fe ff69 	bl	43b22 <_copy>
		data_length -= remaining_space;
   44c50:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   44c52:	2300      	movs	r3, #0
   44c54:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   44c56:	4446      	add	r6, r8
		data += remaining_space;
   44c58:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44c5a:	1e63      	subs	r3, r4, #1
   44c5c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   44c60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44c64:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44c68:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   44c6a:	ea82 0200 	eor.w	r2, r2, r0
   44c6e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44c70:	d1f6      	bne.n	44c60 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   44c72:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44c74:	4621      	mov	r1, r4
   44c76:	4620      	mov	r0, r4
   44c78:	f7ff ff05 	bl	44a86 <tc_aes_encrypt>
   44c7c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   44c80:	2e10      	cmp	r6, #16
   44c82:	d80a      	bhi.n	44c9a <tc_cmac_update+0xac>
	if (data_length > 0) {
   44c84:	2e00      	cmp	r6, #0
   44c86:	d0ba      	beq.n	44bfe <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   44c88:	4633      	mov	r3, r6
   44c8a:	462a      	mov	r2, r5
   44c8c:	4631      	mov	r1, r6
   44c8e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   44c92:	f7fe ff46 	bl	43b22 <_copy>
		s->leftover_offset = data_length;
   44c96:	6466      	str	r6, [r4, #68]	; 0x44
   44c98:	e7b1      	b.n	44bfe <tc_cmac_update+0x10>
   44c9a:	1e63      	subs	r3, r4, #1
   44c9c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   44c9e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44ca2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44ca6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   44ca8:	ea82 0200 	eor.w	r2, r2, r0
   44cac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44cae:	d1f6      	bne.n	44c9e <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   44cb0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44cb2:	4621      	mov	r1, r4
   44cb4:	4620      	mov	r0, r4
   44cb6:	f7ff fee6 	bl	44a86 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   44cba:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   44cbc:	3e10      	subs	r6, #16
   44cbe:	e7df      	b.n	44c80 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   44cc0:	2000      	movs	r0, #0
   44cc2:	e79d      	b.n	44c00 <tc_cmac_update+0x12>

00044cc4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   44cc4:	b570      	push	{r4, r5, r6, lr}
   44cc6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   44cc8:	4605      	mov	r5, r0
   44cca:	b1e8      	cbz	r0, 44d08 <tc_cmac_final+0x44>
   44ccc:	b369      	cbz	r1, 44d2a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   44cce:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   44cd0:	2a10      	cmp	r2, #16
   44cd2:	d11a      	bne.n	44d0a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   44cd4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44cd6:	1e63      	subs	r3, r4, #1
   44cd8:	3901      	subs	r1, #1
   44cda:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   44cde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44ce2:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   44ce6:	4072      	eors	r2, r6
   44ce8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44cec:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   44cee:	ea82 0206 	eor.w	r2, r2, r6
   44cf2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44cf4:	d1f3      	bne.n	44cde <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   44cf6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44cf8:	4621      	mov	r1, r4
   44cfa:	4628      	mov	r0, r5
   44cfc:	f7ff fec3 	bl	44a86 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   44d00:	4620      	mov	r0, r4
   44d02:	f7ff ff2b 	bl	44b5c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   44d06:	2001      	movs	r0, #1
}
   44d08:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   44d0a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   44d0e:	2100      	movs	r1, #0
   44d10:	f1c2 0210 	rsb	r2, r2, #16
   44d14:	4420      	add	r0, r4
   44d16:	f7fe ff11 	bl	43b3c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   44d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   44d1c:	4423      	add	r3, r4
   44d1e:	2280      	movs	r2, #128	; 0x80
   44d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   44d24:	f104 0120 	add.w	r1, r4, #32
   44d28:	e7d5      	b.n	44cd6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   44d2a:	4608      	mov	r0, r1
   44d2c:	e7ec      	b.n	44d08 <tc_cmac_final+0x44>

00044d2e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   44d2e:	f003 bf21 	b.w	48b74 <z_fatal_error>

00044d32 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   44d32:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   44d34:	6800      	ldr	r0, [r0, #0]
   44d36:	f003 bf1d 	b.w	48b74 <z_fatal_error>

00044d3a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   44d3a:	2100      	movs	r1, #0
   44d3c:	2001      	movs	r0, #1
   44d3e:	f7ff bff6 	b.w	44d2e <z_arm_fatal_error>

00044d42 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   44d42:	b508      	push	{r3, lr}
	handler();
   44d44:	f7e5 fb80 	bl	2a448 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   44d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   44d4c:	f7e5 bc40 	b.w	2a5d0 <z_arm_exc_exit>

00044d50 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   44d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44d54:	4607      	mov	r7, r0
   44d56:	4688      	mov	r8, r1
	register const char *s = nptr;
   44d58:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   44d5a:	4621      	mov	r1, r4
   44d5c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   44d60:	2b20      	cmp	r3, #32
   44d62:	d0fa      	beq.n	44d5a <strtoul+0xa>
   44d64:	f1a3 0009 	sub.w	r0, r3, #9
   44d68:	2804      	cmp	r0, #4
   44d6a:	d9f6      	bls.n	44d5a <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   44d6c:	2b2d      	cmp	r3, #45	; 0x2d
   44d6e:	d12f      	bne.n	44dd0 <strtoul+0x80>
		neg = 1;
		c = *s++;
   44d70:	784b      	ldrb	r3, [r1, #1]
   44d72:	1c8c      	adds	r4, r1, #2
		neg = 1;
   44d74:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   44d78:	2a00      	cmp	r2, #0
   44d7a:	d05e      	beq.n	44e3a <strtoul+0xea>
   44d7c:	2a10      	cmp	r2, #16
   44d7e:	d109      	bne.n	44d94 <strtoul+0x44>
   44d80:	2b30      	cmp	r3, #48	; 0x30
   44d82:	d107      	bne.n	44d94 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   44d84:	7823      	ldrb	r3, [r4, #0]
   44d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   44d8a:	2b58      	cmp	r3, #88	; 0x58
   44d8c:	d150      	bne.n	44e30 <strtoul+0xe0>
		c = s[1];
   44d8e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   44d90:	2210      	movs	r2, #16
		s += 2;
   44d92:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   44d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   44d98:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   44d9a:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   44d9e:	fb02 fe01 	mul.w	lr, r2, r1
   44da2:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   44da6:	4630      	mov	r0, r6
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   44da8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   44dac:	2d09      	cmp	r5, #9
   44dae:	d816      	bhi.n	44dde <strtoul+0x8e>
			c -= '0';
   44db0:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   44db2:	429a      	cmp	r2, r3
   44db4:	dd23      	ble.n	44dfe <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   44db6:	2e00      	cmp	r6, #0
   44db8:	db1e      	blt.n	44df8 <strtoul+0xa8>
   44dba:	4288      	cmp	r0, r1
   44dbc:	d81c      	bhi.n	44df8 <strtoul+0xa8>
   44dbe:	d101      	bne.n	44dc4 <strtoul+0x74>
   44dc0:	4573      	cmp	r3, lr
   44dc2:	dc19      	bgt.n	44df8 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   44dc4:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   44dc8:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   44dca:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   44dce:	e7eb      	b.n	44da8 <strtoul+0x58>
	} else if (c == '+') {
   44dd0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   44dd2:	bf04      	itt	eq
   44dd4:	784b      	ldrbeq	r3, [r1, #1]
   44dd6:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   44dd8:	f04f 0c00 	mov.w	ip, #0
   44ddc:	e7cc      	b.n	44d78 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   44dde:	f043 0520 	orr.w	r5, r3, #32
   44de2:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   44de4:	2d19      	cmp	r5, #25
   44de6:	d80a      	bhi.n	44dfe <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   44de8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   44dec:	2d1a      	cmp	r5, #26
   44dee:	bf34      	ite	cc
   44df0:	2537      	movcc	r5, #55	; 0x37
   44df2:	2557      	movcs	r5, #87	; 0x57
   44df4:	1b5b      	subs	r3, r3, r5
   44df6:	e7dc      	b.n	44db2 <strtoul+0x62>
			any = -1;
   44df8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   44dfc:	e7e5      	b.n	44dca <strtoul+0x7a>
		}
	}
	if (any < 0) {
   44dfe:	2e00      	cmp	r6, #0
   44e00:	da0a      	bge.n	44e18 <strtoul+0xc8>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   44e02:	f7fc f9ed 	bl	411e0 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   44e06:	2322      	movs	r3, #34	; 0x22
   44e08:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   44e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   44e0e:	f1b8 0f00 	cmp.w	r8, #0
   44e12:	d109      	bne.n	44e28 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   44e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   44e18:	f1bc 0f00 	cmp.w	ip, #0
   44e1c:	d000      	beq.n	44e20 <strtoul+0xd0>
		acc = -acc;
   44e1e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   44e20:	f1b8 0f00 	cmp.w	r8, #0
   44e24:	d0f6      	beq.n	44e14 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   44e26:	b106      	cbz	r6, 44e2a <strtoul+0xda>
   44e28:	1e67      	subs	r7, r4, #1
   44e2a:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   44e2e:	e7f1      	b.n	44e14 <strtoul+0xc4>
	if (base == 0) {
   44e30:	2330      	movs	r3, #48	; 0x30
   44e32:	2a00      	cmp	r2, #0
   44e34:	d1ae      	bne.n	44d94 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   44e36:	2208      	movs	r2, #8
   44e38:	e7ac      	b.n	44d94 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   44e3a:	2b30      	cmp	r3, #48	; 0x30
   44e3c:	d0a2      	beq.n	44d84 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   44e3e:	220a      	movs	r2, #10
   44e40:	e7a8      	b.n	44d94 <strtoul+0x44>

00044e42 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   44e42:	3901      	subs	r1, #1
   44e44:	4603      	mov	r3, r0
   44e46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   44e4a:	b90a      	cbnz	r2, 44e50 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   44e4c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   44e4e:	4770      	bx	lr
		*d = *s;
   44e50:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   44e54:	e7f7      	b.n	44e46 <strcpy+0x4>

00044e56 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   44e56:	4603      	mov	r3, r0
	size_t n = 0;
   44e58:	2000      	movs	r0, #0

	while (*s != '\0') {
   44e5a:	5c1a      	ldrb	r2, [r3, r0]
   44e5c:	b902      	cbnz	r2, 44e60 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   44e5e:	4770      	bx	lr
		n++;
   44e60:	3001      	adds	r0, #1
   44e62:	e7fa      	b.n	44e5a <strlen+0x4>

00044e64 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   44e64:	1e43      	subs	r3, r0, #1
   44e66:	3901      	subs	r1, #1
   44e68:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44e6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   44e70:	4282      	cmp	r2, r0
   44e72:	d101      	bne.n	44e78 <strcmp+0x14>
   44e74:	2a00      	cmp	r2, #0
   44e76:	d1f7      	bne.n	44e68 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   44e78:	1a10      	subs	r0, r2, r0
   44e7a:	4770      	bx	lr

00044e7c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   44e7c:	b510      	push	{r4, lr}
   44e7e:	3901      	subs	r1, #1
   44e80:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   44e82:	4282      	cmp	r2, r0
   44e84:	d009      	beq.n	44e9a <strncmp+0x1e>
   44e86:	7803      	ldrb	r3, [r0, #0]
   44e88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   44e8c:	42a3      	cmp	r3, r4
   44e8e:	d100      	bne.n	44e92 <strncmp+0x16>
   44e90:	b90b      	cbnz	r3, 44e96 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   44e92:	1b18      	subs	r0, r3, r4
   44e94:	e002      	b.n	44e9c <strncmp+0x20>
		s1++;
   44e96:	3001      	adds	r0, #1
		n--;
   44e98:	e7f3      	b.n	44e82 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   44e9a:	2000      	movs	r0, #0
}
   44e9c:	bd10      	pop	{r4, pc}

00044e9e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   44e9e:	b510      	push	{r4, lr}
   44ea0:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   44ea2:	b15a      	cbz	r2, 44ebc <memcmp+0x1e>
   44ea4:	3901      	subs	r1, #1
   44ea6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   44ea8:	f813 0b01 	ldrb.w	r0, [r3], #1
   44eac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   44eb0:	42a3      	cmp	r3, r4
   44eb2:	d001      	beq.n	44eb8 <memcmp+0x1a>
   44eb4:	4290      	cmp	r0, r2
   44eb6:	d0f7      	beq.n	44ea8 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   44eb8:	1a80      	subs	r0, r0, r2
}
   44eba:	bd10      	pop	{r4, pc}
		return 0;
   44ebc:	4610      	mov	r0, r2
   44ebe:	e7fc      	b.n	44eba <memcmp+0x1c>

00044ec0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   44ec0:	b510      	push	{r4, lr}
   44ec2:	1e43      	subs	r3, r0, #1
   44ec4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   44ec6:	4291      	cmp	r1, r2
   44ec8:	d100      	bne.n	44ecc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   44eca:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   44ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
   44ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   44ed4:	e7f7      	b.n	44ec6 <memcpy+0x6>

00044ed6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   44ed6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   44ed8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   44eda:	4603      	mov	r3, r0
	while (n > 0) {
   44edc:	4293      	cmp	r3, r2
   44ede:	d100      	bne.n	44ee2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   44ee0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   44ee2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   44ee6:	e7f9      	b.n	44edc <memset+0x6>

00044ee8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   44ee8:	684b      	ldr	r3, [r1, #4]
   44eea:	2b01      	cmp	r3, #1
   44eec:	dd07      	ble.n	44efe <sprintf_out+0x16>
		*(p->ptr) = c;
   44eee:	680b      	ldr	r3, [r1, #0]
   44ef0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   44ef2:	680b      	ldr	r3, [r1, #0]
   44ef4:	3301      	adds	r3, #1
   44ef6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   44ef8:	684b      	ldr	r3, [r1, #4]
   44efa:	3b01      	subs	r3, #1
   44efc:	604b      	str	r3, [r1, #4]
}
   44efe:	2000      	movs	r0, #0
   44f00:	4770      	bx	lr

00044f02 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   44f02:	b084      	sub	sp, #16
   44f04:	ab04      	add	r3, sp, #16
   44f06:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   44f0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   44f0e:	2b06      	cmp	r3, #6
   44f10:	d108      	bne.n	44f24 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   44f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44f16:	2201      	movs	r2, #1
   44f18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   44f1c:	f3bf 8f4f 	dsb	sy
        __WFE();
   44f20:	bf20      	wfe
    while (true)
   44f22:	e7fd      	b.n	44f20 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   44f24:	b004      	add	sp, #16
   44f26:	4770      	bx	lr

00044f28 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   44f28:	b084      	sub	sp, #16
   44f2a:	ab04      	add	r3, sp, #16
   44f2c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   44f30:	2300      	movs	r3, #0
   44f32:	f383 8811 	msr	BASEPRI, r3
   44f36:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   44f3a:	b004      	add	sp, #16
   44f3c:	4770      	bx	lr

00044f3e <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   44f3e:	b530      	push	{r4, r5, lr}
   44f40:	b085      	sub	sp, #20
   44f42:	4604      	mov	r4, r0
   44f44:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   44f46:	4668      	mov	r0, sp
   44f48:	2203      	movs	r2, #3
   44f4a:	f7ff ffb9 	bl	44ec0 <memcpy>
	(void)memset(res + 3, 0, 13);
   44f4e:	220d      	movs	r2, #13
   44f50:	2100      	movs	r1, #0
   44f52:	f10d 0003 	add.w	r0, sp, #3
   44f56:	f7ff ffbe 	bl	44ed6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   44f5a:	4620      	mov	r0, r4
   44f5c:	466a      	mov	r2, sp
   44f5e:	4669      	mov	r1, sp
   44f60:	f7ed fc80 	bl	32864 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   44f64:	4604      	mov	r4, r0
   44f66:	b920      	cbnz	r0, 44f72 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   44f68:	2203      	movs	r2, #3
   44f6a:	4669      	mov	r1, sp
   44f6c:	4628      	mov	r0, r5
   44f6e:	f7ff ffa7 	bl	44ec0 <memcpy>

	return 0;
}
   44f72:	4620      	mov	r0, r4
   44f74:	b005      	add	sp, #20
   44f76:	bd30      	pop	{r4, r5, pc}

00044f78 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   44f78:	b513      	push	{r0, r1, r4, lr}
   44f7a:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   44f7c:	aa01      	add	r2, sp, #4
   44f7e:	3103      	adds	r1, #3
   44f80:	f7ff ffdd 	bl	44f3e <ah>
	if (err) {
   44f84:	b948      	cbnz	r0, 44f9a <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   44f86:	2203      	movs	r2, #3
   44f88:	a901      	add	r1, sp, #4
   44f8a:	4620      	mov	r0, r4
   44f8c:	f7ff ff87 	bl	44e9e <memcmp>
   44f90:	fab0 f080 	clz	r0, r0
   44f94:	0940      	lsrs	r0, r0, #5
}
   44f96:	b002      	add	sp, #8
   44f98:	bd10      	pop	{r4, pc}
		return false;
   44f9a:	2000      	movs	r0, #0
   44f9c:	e7fb      	b.n	44f96 <bt_rpa_irk_matches+0x1e>

00044f9e <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   44f9e:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   44fa0:	1cce      	adds	r6, r1, #3
{
   44fa2:	4605      	mov	r5, r0
   44fa4:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   44fa6:	4630      	mov	r0, r6
   44fa8:	2103      	movs	r1, #3
   44faa:	f7ed fc59 	bl	32860 <bt_rand>
	if (err) {
   44fae:	b960      	cbnz	r0, 44fca <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   44fb0:	7963      	ldrb	r3, [r4, #5]
   44fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44fba:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   44fbc:	4622      	mov	r2, r4
   44fbe:	4631      	mov	r1, r6
   44fc0:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   44fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   44fc6:	f7ff bfba 	b.w	44f3e <ah>
}
   44fca:	bd70      	pop	{r4, r5, r6, pc}

00044fcc <send_cmd_status>:
{
   44fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   44fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   44fd4:	4606      	mov	r6, r0
   44fd6:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   44fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44fdc:	2100      	movs	r1, #0
   44fde:	200f      	movs	r0, #15
   44fe0:	f7e5 ffc0 	bl	2af64 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   44fe4:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   44fe6:	f100 0808 	add.w	r8, r0, #8
   44fea:	4604      	mov	r4, r0
   44fec:	7507      	strb	r7, [r0, #20]
   44fee:	2102      	movs	r1, #2
   44ff0:	4640      	mov	r0, r8
   44ff2:	f002 ff07 	bl	47e04 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   44ff6:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   44ff8:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   44ffa:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   44ffc:	7041      	strb	r1, [r0, #1]
   44ffe:	4640      	mov	r0, r8
   45000:	f002 ff00 	bl	47e04 <net_buf_simple_add>
	evt->ncmd = 1U;
   45004:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   45006:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   45008:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   4500a:	4620      	mov	r0, r4
}
   4500c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   45010:	f7e6 bc48 	b.w	2b8a4 <bt_recv_prio>

00045014 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   45014:	f101 0320 	add.w	r3, r1, #32
   45018:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   4501a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4501e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   45022:	428b      	cmp	r3, r1
   45024:	d1f9      	bne.n	4501a <sys_memcpy_swap.constprop.0+0x6>
}
   45026:	4770      	bx	lr

00045028 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   45028:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4502c:	f043 0306 	orr.w	r3, r3, #6
   45030:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   45034:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   45038:	f043 0304 	orr.w	r3, r3, #4
   4503c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   45040:	4770      	bx	lr

00045042 <default_CSPRNG>:
{
   45042:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   45044:	f7ed fc0c 	bl	32860 <bt_rand>
}
   45048:	fab0 f080 	clz	r0, r0
   4504c:	0940      	lsrs	r0, r0, #5
   4504e:	bd08      	pop	{r3, pc}

00045050 <bt_settings_decode_key>:
{
   45050:	b570      	push	{r4, r5, r6, lr}
   45052:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   45054:	2100      	movs	r1, #0
{
   45056:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   45058:	f7fe fc67 	bl	4392a <settings_name_next>
   4505c:	280d      	cmp	r0, #13
   4505e:	d118      	bne.n	45092 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   45060:	7b23      	ldrb	r3, [r4, #12]
   45062:	2b30      	cmp	r3, #48	; 0x30
   45064:	d111      	bne.n	4508a <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   45066:	2300      	movs	r3, #0
   45068:	702b      	strb	r3, [r5, #0]
   4506a:	f104 060c 	add.w	r6, r4, #12
   4506e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   45070:	462a      	mov	r2, r5
   45072:	4620      	mov	r0, r4
   45074:	2301      	movs	r3, #1
   45076:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   45078:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4507a:	f7fd fdcf 	bl	42c1c <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   4507e:	42b4      	cmp	r4, r6
   45080:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   45084:	d1f4      	bne.n	45070 <bt_settings_decode_key+0x20>
	return 0;
   45086:	2000      	movs	r0, #0
}
   45088:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   4508a:	2b31      	cmp	r3, #49	; 0x31
   4508c:	d101      	bne.n	45092 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   4508e:	2301      	movs	r3, #1
   45090:	e7ea      	b.n	45068 <bt_settings_decode_key+0x18>
		return -EINVAL;
   45092:	f06f 0015 	mvn.w	r0, #21
   45096:	e7f7      	b.n	45088 <bt_settings_decode_key+0x38>

00045098 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   45098:	f7e4 be1e 	b.w	29cd8 <settings_subsys_init>

0004509c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   4509c:	b510      	push	{r4, lr}
   4509e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   450a0:	7801      	ldrb	r1, [r0, #0]
   450a2:	7822      	ldrb	r2, [r4, #0]
   450a4:	428a      	cmp	r2, r1
{
   450a6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   450a8:	d00f      	beq.n	450ca <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   450aa:	4669      	mov	r1, sp
   450ac:	f7e5 fefa 	bl	2aea4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   450b0:	a905      	add	r1, sp, #20
   450b2:	4620      	mov	r0, r4
   450b4:	f7e5 fef6 	bl	2aea4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   450b8:	2210      	movs	r2, #16
   450ba:	f10d 0115 	add.w	r1, sp, #21
   450be:	f10d 0001 	add.w	r0, sp, #1
   450c2:	f7ff feec 	bl	44e9e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   450c6:	b00a      	add	sp, #40	; 0x28
   450c8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   450ca:	2a01      	cmp	r2, #1
   450cc:	d006      	beq.n	450dc <bt_uuid_cmp+0x40>
   450ce:	2a02      	cmp	r2, #2
   450d0:	d007      	beq.n	450e2 <bt_uuid_cmp+0x46>
   450d2:	b972      	cbnz	r2, 450f2 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   450d4:	8840      	ldrh	r0, [r0, #2]
   450d6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   450d8:	1ac0      	subs	r0, r0, r3
   450da:	e7f4      	b.n	450c6 <bt_uuid_cmp+0x2a>
   450dc:	6840      	ldr	r0, [r0, #4]
   450de:	6863      	ldr	r3, [r4, #4]
   450e0:	e7fa      	b.n	450d8 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   450e2:	2210      	movs	r2, #16
   450e4:	1c61      	adds	r1, r4, #1
   450e6:	3001      	adds	r0, #1
}
   450e8:	b00a      	add	sp, #40	; 0x28
   450ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   450ee:	f7ff bed6 	b.w	44e9e <memcmp>
	switch (u1->type) {
   450f2:	f06f 0015 	mvn.w	r0, #21
   450f6:	e7e6      	b.n	450c6 <bt_uuid_cmp+0x2a>

000450f8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   450f8:	2a04      	cmp	r2, #4
{
   450fa:	b510      	push	{r4, lr}
	switch (data_len) {
   450fc:	d00a      	beq.n	45114 <bt_uuid_create+0x1c>
   450fe:	2a10      	cmp	r2, #16
   45100:	d00d      	beq.n	4511e <bt_uuid_create+0x26>
   45102:	2a02      	cmp	r2, #2
   45104:	f04f 0300 	mov.w	r3, #0
   45108:	d10f      	bne.n	4512a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   4510a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   4510c:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4510e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   45110:	2001      	movs	r0, #1
}
   45112:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   45114:	2301      	movs	r3, #1
   45116:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   45118:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4511a:	6042      	str	r2, [r0, #4]
		break;
   4511c:	e7f8      	b.n	45110 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   4511e:	2302      	movs	r3, #2
   45120:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   45124:	f7ff fecc 	bl	44ec0 <memcpy>
		break;
   45128:	e7f2      	b.n	45110 <bt_uuid_create+0x18>
	switch (data_len) {
   4512a:	4618      	mov	r0, r3
   4512c:	e7f1      	b.n	45112 <bt_uuid_create+0x1a>

0004512e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4512e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   45130:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   45132:	2106      	movs	r1, #6
{
   45134:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   45136:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4513a:	f7ed fb91 	bl	32860 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4513e:	b918      	cbnz	r0, 45148 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   45140:	79a3      	ldrb	r3, [r4, #6]
   45142:	f063 033f 	orn	r3, r3, #63	; 0x3f
   45146:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   45148:	bd10      	pop	{r4, pc}

0004514a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   4514a:	280f      	cmp	r0, #15
   4514c:	d806      	bhi.n	4515c <bt_hci_evt_get_flags+0x12>
   4514e:	280d      	cmp	r0, #13
   45150:	d80b      	bhi.n	4516a <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   45152:	2805      	cmp	r0, #5
   45154:	bf14      	ite	ne
   45156:	2002      	movne	r0, #2
   45158:	2003      	moveq	r0, #3
   4515a:	4770      	bx	lr
	switch (evt) {
   4515c:	2813      	cmp	r0, #19
   4515e:	d004      	beq.n	4516a <bt_hci_evt_get_flags+0x20>
   45160:	281a      	cmp	r0, #26
   45162:	bf14      	ite	ne
   45164:	2002      	movne	r0, #2
   45166:	2001      	moveq	r0, #1
   45168:	4770      	bx	lr
   4516a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   4516c:	4770      	bx	lr

0004516e <handle_event>:
{
   4516e:	b410      	push	{r4}
   45170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   45174:	4604      	mov	r4, r0
   45176:	4608      	mov	r0, r1
		if (handler->event != event) {
   45178:	7811      	ldrb	r1, [r2, #0]
   4517a:	42a1      	cmp	r1, r4
   4517c:	d004      	beq.n	45188 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   4517e:	3208      	adds	r2, #8
   45180:	429a      	cmp	r2, r3
   45182:	d1f9      	bne.n	45178 <handle_event+0xa>
}
   45184:	bc10      	pop	{r4}
   45186:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   45188:	8981      	ldrh	r1, [r0, #12]
   4518a:	7853      	ldrb	r3, [r2, #1]
   4518c:	4299      	cmp	r1, r3
   4518e:	d3f9      	bcc.n	45184 <handle_event+0x16>
		handler->handler(buf);
   45190:	6853      	ldr	r3, [r2, #4]
}
   45192:	bc10      	pop	{r4}
		handler->handler(buf);
   45194:	4718      	bx	r3

00045196 <hci_data_buf_overflow>:
}
   45196:	4770      	bx	lr

00045198 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   45198:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   4519c:	b193      	cbz	r3, 451c4 <update_sec_level+0x2c>
   4519e:	7b5a      	ldrb	r2, [r3, #13]
   451a0:	07d1      	lsls	r1, r2, #31
   451a2:	d50f      	bpl.n	451c4 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   451a4:	06d2      	lsls	r2, r2, #27
   451a6:	d50b      	bpl.n	451c0 <update_sec_level+0x28>
   451a8:	7b1b      	ldrb	r3, [r3, #12]
   451aa:	2b10      	cmp	r3, #16
   451ac:	d108      	bne.n	451c0 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   451ae:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   451b0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   451b2:	7a82      	ldrb	r2, [r0, #10]
   451b4:	7a40      	ldrb	r0, [r0, #9]
}
   451b6:	4282      	cmp	r2, r0
   451b8:	bf8c      	ite	hi
   451ba:	2000      	movhi	r0, #0
   451bc:	2001      	movls	r0, #1
   451be:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   451c0:	2303      	movs	r3, #3
   451c2:	e7f5      	b.n	451b0 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   451c4:	2302      	movs	r3, #2
   451c6:	e7f3      	b.n	451b0 <update_sec_level+0x18>

000451c8 <atomic_or>:
{
   451c8:	4603      	mov	r3, r0
}
   451ca:	f3bf 8f5b 	dmb	ish
   451ce:	e853 0f00 	ldrex	r0, [r3]
   451d2:	ea40 0201 	orr.w	r2, r0, r1
   451d6:	e843 2c00 	strex	ip, r2, [r3]
   451da:	f1bc 0f00 	cmp.w	ip, #0
   451de:	d1f6      	bne.n	451ce <atomic_or+0x6>
   451e0:	f3bf 8f5b 	dmb	ish
   451e4:	4770      	bx	lr

000451e6 <hci_disconn_complete>:
{
   451e6:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   451e8:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   451ea:	782e      	ldrb	r6, [r5, #0]
   451ec:	b97e      	cbnz	r6, 4520e <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   451ee:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   451f2:	f7e7 fbd5 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   451f6:	4604      	mov	r4, r0
   451f8:	b148      	cbz	r0, 4520e <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   451fa:	78eb      	ldrb	r3, [r5, #3]
   451fc:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   451fe:	4631      	mov	r1, r6
   45200:	f7e7 fbd6 	bl	2c9b0 <bt_conn_set_state>
		bt_conn_unref(conn);
   45204:	4620      	mov	r0, r4
}
   45206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4520a:	f000 be0a 	b.w	45e22 <bt_conn_unref>
}
   4520e:	bd70      	pop	{r4, r5, r6, pc}

00045210 <le_data_len_change>:
{
   45210:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   45212:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45214:	8818      	ldrh	r0, [r3, #0]
   45216:	f7e7 fbc3 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   4521a:	b118      	cbz	r0, 45224 <le_data_len_change+0x14>
}
   4521c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   45220:	f000 bdff 	b.w	45e22 <bt_conn_unref>
}
   45224:	bd08      	pop	{r3, pc}

00045226 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   45226:	2101      	movs	r1, #1
   45228:	3008      	adds	r0, #8
   4522a:	f002 be12 	b.w	47e52 <net_buf_simple_pull_mem>

0004522e <le_conn_update_complete>:
{
   4522e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   45230:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45232:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   45236:	f7e7 fbb3 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   4523a:	4604      	mov	r4, r0
   4523c:	2800      	cmp	r0, #0
   4523e:	d03c      	beq.n	452ba <le_conn_update_complete+0x8c>
	if (!evt->status) {
   45240:	782b      	ldrb	r3, [r5, #0]
   45242:	b9cb      	cbnz	r3, 45278 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   45244:	792a      	ldrb	r2, [r5, #4]
   45246:	78eb      	ldrb	r3, [r5, #3]
   45248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4524c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   45250:	79aa      	ldrb	r2, [r5, #6]
   45252:	796b      	ldrb	r3, [r5, #5]
   45254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   45258:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4525c:	79eb      	ldrb	r3, [r5, #7]
   4525e:	7a2a      	ldrb	r2, [r5, #8]
   45260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   45264:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   45268:	f7e7 fc68 	bl	2cb3c <notify_le_param_updated>
	bt_conn_unref(conn);
   4526c:	4620      	mov	r0, r4
}
   4526e:	b003      	add	sp, #12
   45270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   45274:	f000 bdd5 	b.w	45e22 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   45278:	2b1a      	cmp	r3, #26
   4527a:	d1f7      	bne.n	4526c <le_conn_update_complete+0x3e>
   4527c:	78c3      	ldrb	r3, [r0, #3]
   4527e:	2b01      	cmp	r3, #1
   45280:	d1f4      	bne.n	4526c <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   45282:	f44f 6180 	mov.w	r1, #1024	; 0x400
   45286:	3004      	adds	r0, #4
   45288:	f7ff ff9e 	bl	451c8 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4528c:	0543      	lsls	r3, r0, #21
   4528e:	d4ed      	bmi.n	4526c <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   45290:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   45294:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   45298:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   4529c:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   452a0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   452a4:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   452a8:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   452aa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   452ae:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   452b2:	4620      	mov	r0, r4
   452b4:	f7e7 ff56 	bl	2d164 <bt_l2cap_update_conn_param>
   452b8:	e7d8      	b.n	4526c <le_conn_update_complete+0x3e>
}
   452ba:	b003      	add	sp, #12
   452bc:	bd30      	pop	{r4, r5, pc}

000452be <hci_vendor_event>:
   452be:	4770      	bx	lr

000452c0 <sys_put_le64>:
	dst[1] = val >> 8;
   452c0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   452c4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   452c6:	0e00      	lsrs	r0, r0, #24
   452c8:	7053      	strb	r3, [r2, #1]
   452ca:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   452cc:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   452ce:	f3c1 2007 	ubfx	r0, r1, #8, #8
   452d2:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   452d4:	7093      	strb	r3, [r2, #2]
   452d6:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   452d8:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   452da:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   452dc:	71d1      	strb	r1, [r2, #7]
}
   452de:	4770      	bx	lr

000452e0 <hci_num_completed_packets>:
{
   452e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   452e4:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   452e6:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   452e8:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   452ea:	783b      	ldrb	r3, [r7, #0]
   452ec:	429d      	cmp	r5, r3
   452ee:	db01      	blt.n	452f4 <hci_num_completed_packets+0x14>
}
   452f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   452f4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   452f8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   452fc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   45300:	f7e7 fb4e 	bl	2c9a0 <bt_conn_lookup_handle>
		if (!conn) {
   45304:	4604      	mov	r4, r0
   45306:	b350      	cbz	r0, 4535e <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   45308:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   4530c:	b326      	cbz	r6, 45358 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   4530e:	f04f 0320 	mov.w	r3, #32
   45312:	f3ef 8211 	mrs	r2, BASEPRI
   45316:	f383 8812 	msr	BASEPRI_MAX, r3
   4531a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4531e:	69e3      	ldr	r3, [r4, #28]
   45320:	b16b      	cbz	r3, 4533e <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   45322:	3b01      	subs	r3, #1
   45324:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   45326:	f382 8811 	msr	BASEPRI, r2
   4532a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4532e:	4620      	mov	r0, r4
   45330:	f7e7 fa94 	bl	2c85c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   45334:	3e01      	subs	r6, #1
   45336:	f7fc faf1 	bl	4191c <z_impl_k_sem_give>
   4533a:	b2b6      	uxth	r6, r6
   4533c:	e7e6      	b.n	4530c <hci_num_completed_packets+0x2c>
	return list->head;
   4533e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   45340:	b12b      	cbz	r3, 4534e <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45342:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   45344:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   45346:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45348:	428b      	cmp	r3, r1
	list->tail = node;
   4534a:	bf08      	it	eq
   4534c:	61a0      	streq	r0, [r4, #24]
   4534e:	f382 8811 	msr	BASEPRI, r2
   45352:	f3bf 8f6f 	isb	sy
			if (!node) {
   45356:	b923      	cbnz	r3, 45362 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   45358:	4620      	mov	r0, r4
   4535a:	f000 fd62 	bl	45e22 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4535e:	3501      	adds	r5, #1
   45360:	e7c3      	b.n	452ea <hci_num_completed_packets+0xa>
	__asm__ volatile(
   45362:	f04f 0220 	mov.w	r2, #32
   45366:	f3ef 8111 	mrs	r1, BASEPRI
   4536a:	f382 8812 	msr	BASEPRI_MAX, r2
   4536e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   45372:	68da      	ldr	r2, [r3, #12]
   45374:	61e2      	str	r2, [r4, #28]
	return list->tail;
   45376:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   45378:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   4537c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   45380:	b94a      	cbnz	r2, 45396 <hci_num_completed_packets+0xb6>
	list->head = node;
   45382:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   45386:	f381 8811 	msr	BASEPRI, r1
   4538a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   4538e:	4648      	mov	r0, r9
   45390:	f7fc fc30 	bl	41bf4 <k_work_submit>
   45394:	e7cb      	b.n	4532e <hci_num_completed_packets+0x4e>
	parent->next = child;
   45396:	6013      	str	r3, [r2, #0]
	list->tail = node;
   45398:	6263      	str	r3, [r4, #36]	; 0x24
}
   4539a:	e7f4      	b.n	45386 <hci_num_completed_packets+0xa6>

0004539c <le_ltk_request>:
{
   4539c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   4539e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   453a0:	8826      	ldrh	r6, [r4, #0]
{
   453a2:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   453a4:	b2b0      	uxth	r0, r6
   453a6:	f7e7 fafb 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   453aa:	4605      	mov	r5, r0
   453ac:	b318      	cbz	r0, 453f6 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   453ae:	af02      	add	r7, sp, #8
   453b0:	f8d4 2002 	ldr.w	r2, [r4, #2]
   453b4:	f8d4 3006 	ldr.w	r3, [r4, #6]
   453b8:	9701      	str	r7, [sp, #4]
   453ba:	8961      	ldrh	r1, [r4, #10]
   453bc:	9100      	str	r1, [sp, #0]
   453be:	f002 fa3b 	bl	47838 <bt_smp_request_ltk>
   453c2:	b1d0      	cbz	r0, 453fa <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   453c4:	2112      	movs	r1, #18
   453c6:	f242 001a 	movw	r0, #8218	; 0x201a
   453ca:	f7e5 ff83 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   453ce:	4604      	mov	r4, r0
   453d0:	b170      	cbz	r0, 453f0 <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   453d2:	2112      	movs	r1, #18
   453d4:	3008      	adds	r0, #8
   453d6:	f002 fd15 	bl	47e04 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   453da:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   453dc:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   453e0:	2210      	movs	r2, #16
   453e2:	f7ff fd6d 	bl	44ec0 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   453e6:	4621      	mov	r1, r4
   453e8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   453ec:	f7e5 ffac 	bl	2b348 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   453f0:	4628      	mov	r0, r5
   453f2:	f000 fd16 	bl	45e22 <bt_conn_unref>
}
   453f6:	b007      	add	sp, #28
   453f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   453fa:	2102      	movs	r1, #2
   453fc:	f242 001b 	movw	r0, #8219	; 0x201b
   45400:	f7e5 ff68 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   45404:	4604      	mov	r4, r0
   45406:	2800      	cmp	r0, #0
   45408:	d0f2      	beq.n	453f0 <le_ltk_request+0x54>
   4540a:	2102      	movs	r1, #2
   4540c:	3008      	adds	r0, #8
   4540e:	f002 fcf9 	bl	47e04 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   45412:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   45414:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   45416:	f242 001b 	movw	r0, #8219	; 0x201b
   4541a:	e7e7      	b.n	453ec <le_ltk_request+0x50>

0004541c <le_conn_param_neg_reply>:
{
   4541c:	b570      	push	{r4, r5, r6, lr}
   4541e:	4606      	mov	r6, r0
   45420:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   45422:	f242 0021 	movw	r0, #8225	; 0x2021
   45426:	2103      	movs	r1, #3
   45428:	f7e5 ff54 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   4542c:	4604      	mov	r4, r0
   4542e:	b160      	cbz	r0, 4544a <le_conn_param_neg_reply+0x2e>
   45430:	2103      	movs	r1, #3
   45432:	3008      	adds	r0, #8
   45434:	f002 fce6 	bl	47e04 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   45438:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   4543a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4543c:	4621      	mov	r1, r4
   4543e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   45442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   45446:	f7e5 bf7f 	b.w	2b348 <bt_hci_cmd_send>
}
   4544a:	bd70      	pop	{r4, r5, r6, pc}

0004544c <le_conn_param_req>:
{
   4544c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4544e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   45450:	78d9      	ldrb	r1, [r3, #3]
   45452:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   45454:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   45456:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4545a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4545e:	7959      	ldrb	r1, [r3, #5]
   45460:	791a      	ldrb	r2, [r3, #4]
   45462:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45466:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   4546a:	799a      	ldrb	r2, [r3, #6]
   4546c:	79d9      	ldrb	r1, [r3, #7]
   4546e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45472:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45476:	7a1a      	ldrb	r2, [r3, #8]
   45478:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   4547a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4547c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   45480:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45482:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   45486:	f7e7 fa8b 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   4548a:	4606      	mov	r6, r0
   4548c:	b928      	cbnz	r0, 4549a <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4548e:	2102      	movs	r1, #2
   45490:	4620      	mov	r0, r4
   45492:	f7ff ffc3 	bl	4541c <le_conn_param_neg_reply>
}
   45496:	b003      	add	sp, #12
   45498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   4549a:	4669      	mov	r1, sp
   4549c:	f7e7 fbb2 	bl	2cc04 <le_param_req>
   454a0:	b938      	cbnz	r0, 454b2 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   454a2:	211e      	movs	r1, #30
   454a4:	4620      	mov	r0, r4
   454a6:	f7ff ffb9 	bl	4541c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   454aa:	4630      	mov	r0, r6
   454ac:	f000 fcb9 	bl	45e22 <bt_conn_unref>
   454b0:	e7f1      	b.n	45496 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   454b2:	210e      	movs	r1, #14
   454b4:	f242 0020 	movw	r0, #8224	; 0x2020
   454b8:	f7e5 ff0c 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   454bc:	4605      	mov	r5, r0
   454be:	2800      	cmp	r0, #0
   454c0:	d0f3      	beq.n	454aa <le_conn_param_req+0x5e>
   454c2:	210e      	movs	r1, #14
   454c4:	3008      	adds	r0, #8
   454c6:	f002 fc9d 	bl	47e04 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   454ca:	220e      	movs	r2, #14
   454cc:	4604      	mov	r4, r0
   454ce:	2100      	movs	r1, #0
   454d0:	f7ff fd01 	bl	44ed6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   454d4:	f8bd 3000 	ldrh.w	r3, [sp]
   454d8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   454da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   454de:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   454e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   454e4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   454e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   454ea:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   454ec:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   454ee:	4629      	mov	r1, r5
   454f0:	f242 0020 	movw	r0, #8224	; 0x2020
   454f4:	f7e5 ff28 	bl	2b348 <bt_hci_cmd_send>
   454f8:	e7d7      	b.n	454aa <le_conn_param_req+0x5e>

000454fa <hci_le_read_max_data_len>:
{
   454fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   454fc:	4606      	mov	r6, r0
   454fe:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   45500:	aa01      	add	r2, sp, #4
   45502:	2100      	movs	r1, #0
   45504:	f242 002f 	movw	r0, #8239	; 0x202f
   45508:	f7e5 ff40 	bl	2b38c <bt_hci_cmd_send_sync>
	if (err) {
   4550c:	4604      	mov	r4, r0
   4550e:	b948      	cbnz	r0, 45524 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   45510:	9801      	ldr	r0, [sp, #4]
   45512:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   45514:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   45518:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   4551a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4551e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   45520:	f7f7 ff36 	bl	3d390 <net_buf_unref>
}
   45524:	4620      	mov	r0, r4
   45526:	b002      	add	sp, #8
   45528:	bd70      	pop	{r4, r5, r6, pc}

0004552a <bt_hci_disconnect>:
{
   4552a:	b570      	push	{r4, r5, r6, lr}
   4552c:	4606      	mov	r6, r0
   4552e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   45530:	f240 4006 	movw	r0, #1030	; 0x406
   45534:	2103      	movs	r1, #3
   45536:	f7e5 fecd 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   4553a:	4604      	mov	r4, r0
   4553c:	b168      	cbz	r0, 4555a <bt_hci_disconnect+0x30>
   4553e:	2103      	movs	r1, #3
   45540:	3008      	adds	r0, #8
   45542:	f002 fc5f 	bl	47e04 <net_buf_simple_add>
	disconn->reason = reason;
   45546:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   45548:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4554a:	4621      	mov	r1, r4
   4554c:	2200      	movs	r2, #0
}
   4554e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   45552:	f240 4006 	movw	r0, #1030	; 0x406
   45556:	f7e5 bf19 	b.w	2b38c <bt_hci_cmd_send_sync>
}
   4555a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4555e:	bd70      	pop	{r4, r5, r6, pc}

00045560 <bt_le_set_data_len>:
{
   45560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45562:	4607      	mov	r7, r0
   45564:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   45566:	f242 0022 	movw	r0, #8226	; 0x2022
   4556a:	2106      	movs	r1, #6
{
   4556c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4556e:	f7e5 feb1 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   45572:	4604      	mov	r4, r0
   45574:	b170      	cbz	r0, 45594 <bt_le_set_data_len+0x34>
   45576:	2106      	movs	r1, #6
   45578:	3008      	adds	r0, #8
   4557a:	f002 fc43 	bl	47e04 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4557e:	883b      	ldrh	r3, [r7, #0]
   45580:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   45582:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   45584:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   45586:	4621      	mov	r1, r4
   45588:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4558c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   45590:	f7e5 beda 	b.w	2b348 <bt_hci_cmd_send>
}
   45594:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004559a <bt_le_set_phy>:
{
   4559a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4559e:	4680      	mov	r8, r0
   455a0:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   455a2:	f242 0032 	movw	r0, #8242	; 0x2032
   455a6:	2107      	movs	r1, #7
{
   455a8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   455ac:	4616      	mov	r6, r2
   455ae:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   455b0:	f7e5 fe90 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   455b4:	4604      	mov	r4, r0
   455b6:	b190      	cbz	r0, 455de <bt_le_set_phy+0x44>
   455b8:	2107      	movs	r1, #7
   455ba:	3008      	adds	r0, #8
   455bc:	f002 fc22 	bl	47e04 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   455c0:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   455c4:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   455c6:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   455c8:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   455ca:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   455cc:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   455d0:	4621      	mov	r1, r4
   455d2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   455d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   455da:	f7e5 beb5 	b.w	2b348 <bt_hci_cmd_send>
}
   455de:	f06f 0068 	mvn.w	r0, #104	; 0x68
   455e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000455e6 <le_phy_update_complete>:
{
   455e6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   455e8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   455ea:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   455ee:	f7e7 f9d7 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   455f2:	4604      	mov	r4, r0
   455f4:	b338      	cbz	r0, 45646 <le_phy_update_complete+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   455f6:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   455fa:	3004      	adds	r0, #4
   455fc:	e850 3f00 	ldrex	r3, [r0]
   45600:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   45604:	e840 2100 	strex	r1, r2, [r0]
   45608:	2900      	cmp	r1, #0
   4560a:	d1f7      	bne.n	455fc <le_phy_update_complete+0x16>
   4560c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   45610:	061b      	lsls	r3, r3, #24
   45612:	d506      	bpl.n	45622 <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   45614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   45618:	f7ff fdd6 	bl	451c8 <atomic_or>
		conn_auto_initiate(conn);
   4561c:	4620      	mov	r0, r4
   4561e:	f7e5 ff21 	bl	2b464 <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   45622:	78e8      	ldrb	r0, [r5, #3]
   45624:	f7e5 ff14 	bl	2b450 <bt_get_phy>
   45628:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4562c:	7928      	ldrb	r0, [r5, #4]
   4562e:	f7e5 ff0f 	bl	2b450 <bt_get_phy>
   45632:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   45636:	4620      	mov	r0, r4
   45638:	f7e7 fac2 	bl	2cbc0 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4563c:	4620      	mov	r0, r4
}
   4563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   45642:	f000 bbee 	b.w	45e22 <bt_conn_unref>
}
   45646:	bd38      	pop	{r3, r4, r5, pc}

00045648 <le_remote_feat_complete>:
{
   45648:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4564a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4564c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   45650:	f7e7 f9a6 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   45654:	4604      	mov	r4, r0
   45656:	b198      	cbz	r0, 45680 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   45658:	782b      	ldrb	r3, [r5, #0]
   4565a:	b923      	cbnz	r3, 45666 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4565c:	2208      	movs	r2, #8
   4565e:	1ce9      	adds	r1, r5, #3
   45660:	30ac      	adds	r0, #172	; 0xac
   45662:	f7ff fc2d 	bl	44ec0 <memcpy>
   45666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4566a:	1d20      	adds	r0, r4, #4
   4566c:	f7ff fdac 	bl	451c8 <atomic_or>
	conn_auto_initiate(conn);
   45670:	4620      	mov	r0, r4
   45672:	f7e5 fef7 	bl	2b464 <conn_auto_initiate>
	bt_conn_unref(conn);
   45676:	4620      	mov	r0, r4
}
   45678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4567c:	f000 bbd1 	b.w	45e22 <bt_conn_unref>
}
   45680:	bd38      	pop	{r3, r4, r5, pc}

00045682 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   45682:	6880      	ldr	r0, [r0, #8]
   45684:	f7e5 bf50 	b.w	2b528 <bt_hci_le_enh_conn_complete>

00045688 <le_legacy_conn_complete>:
{
   45688:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4568a:	6881      	ldr	r1, [r0, #8]
{
   4568c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   4568e:	780b      	ldrb	r3, [r1, #0]
   45690:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   45694:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   45698:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   4569c:	78cb      	ldrb	r3, [r1, #3]
   4569e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   456a2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   456a6:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   456aa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   456ae:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   456b2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   456b6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   456ba:	7c4b      	ldrb	r3, [r1, #17]
   456bc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   456c0:	2207      	movs	r2, #7
   456c2:	3104      	adds	r1, #4
   456c4:	a803      	add	r0, sp, #12
   456c6:	f7ff fbfb 	bl	44ec0 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   456ca:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   456cc:	4669      	mov	r1, sp
   456ce:	2206      	movs	r2, #6
   456d0:	f10d 0013 	add.w	r0, sp, #19
   456d4:	9400      	str	r4, [sp, #0]
   456d6:	f8ad 4004 	strh.w	r4, [sp, #4]
   456da:	f7ff fbf1 	bl	44ec0 <memcpy>
   456de:	2206      	movs	r2, #6
   456e0:	4669      	mov	r1, sp
   456e2:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   456e6:	9400      	str	r4, [sp, #0]
   456e8:	f8ad 4004 	strh.w	r4, [sp, #4]
   456ec:	f7ff fbe8 	bl	44ec0 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   456f0:	a802      	add	r0, sp, #8
   456f2:	f7e5 ff19 	bl	2b528 <bt_hci_le_enh_conn_complete>
}
   456f6:	b00a      	add	sp, #40	; 0x28
   456f8:	bd10      	pop	{r4, pc}

000456fa <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   456fa:	8803      	ldrh	r3, [r0, #0]
   456fc:	8842      	ldrh	r2, [r0, #2]
   456fe:	4293      	cmp	r3, r2
{
   45700:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   45702:	d819      	bhi.n	45738 <bt_le_conn_params_valid+0x3e>
   45704:	2b05      	cmp	r3, #5
   45706:	d917      	bls.n	45738 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   45708:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   4570c:	d814      	bhi.n	45738 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   4570e:	8883      	ldrh	r3, [r0, #4]
   45710:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   45714:	d210      	bcs.n	45738 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   45716:	88c0      	ldrh	r0, [r0, #6]
   45718:	f1a0 010a 	sub.w	r1, r0, #10
   4571c:	b289      	uxth	r1, r1
   4571e:	f640 4476 	movw	r4, #3190	; 0xc76
   45722:	42a1      	cmp	r1, r4
   45724:	d808      	bhi.n	45738 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   45726:	3301      	adds	r3, #1
   45728:	b29b      	uxth	r3, r3
   4572a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4572c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   45730:	bf34      	ite	cc
   45732:	2001      	movcc	r0, #1
   45734:	2000      	movcs	r0, #0
}
   45736:	bd10      	pop	{r4, pc}
		return false;
   45738:	2000      	movs	r0, #0
   4573a:	e7fc      	b.n	45736 <bt_le_conn_params_valid+0x3c>

0004573c <hci_encrypt_key_refresh_complete>:
{
   4573c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4573e:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45740:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   45744:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   45746:	f7e7 f92b 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   4574a:	4604      	mov	r4, r0
   4574c:	b338      	cbz	r0, 4579e <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   4574e:	b165      	cbz	r5, 4576a <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   45750:	4628      	mov	r0, r5
   45752:	f7e5 ffc9 	bl	2b6e8 <bt_security_err_get>
   45756:	4629      	mov	r1, r5
   45758:	4602      	mov	r2, r0
   4575a:	4620      	mov	r0, r4
   4575c:	f7e7 faba 	bl	2ccd4 <bt_conn_security_changed>
	bt_conn_unref(conn);
   45760:	4620      	mov	r0, r4
}
   45762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   45766:	f000 bb5c 	b.w	45e22 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4576a:	7883      	ldrb	r3, [r0, #2]
   4576c:	2b01      	cmp	r3, #1
   4576e:	d107      	bne.n	45780 <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   45770:	f002 fa18 	bl	47ba4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   45774:	4620      	mov	r0, r4
   45776:	f7ff fd0f 	bl	45198 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   4577a:	2800      	cmp	r0, #0
   4577c:	bf08      	it	eq
   4577e:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   45780:	4628      	mov	r0, r5
   45782:	f7e5 ffb1 	bl	2b6e8 <bt_security_err_get>
   45786:	4629      	mov	r1, r5
   45788:	4602      	mov	r2, r0
   4578a:	4620      	mov	r0, r4
   4578c:	f7e7 faa2 	bl	2ccd4 <bt_conn_security_changed>
	if (status) {
   45790:	2d00      	cmp	r5, #0
   45792:	d0e5      	beq.n	45760 <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   45794:	4629      	mov	r1, r5
   45796:	4620      	mov	r0, r4
   45798:	f000 fb87 	bl	45eaa <bt_conn_disconnect>
   4579c:	e7e0      	b.n	45760 <hci_encrypt_key_refresh_complete+0x24>
}
   4579e:	bd38      	pop	{r3, r4, r5, pc}

000457a0 <hci_encrypt_change>:
{
   457a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   457a2:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   457a4:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   457a8:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   457aa:	f7e7 f8f9 	bl	2c9a0 <bt_conn_lookup_handle>
	if (!conn) {
   457ae:	4604      	mov	r4, r0
   457b0:	b350      	cbz	r0, 45808 <hci_encrypt_change+0x68>
	if (status) {
   457b2:	b165      	cbz	r5, 457ce <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   457b4:	4628      	mov	r0, r5
   457b6:	f7e5 ff97 	bl	2b6e8 <bt_security_err_get>
   457ba:	4629      	mov	r1, r5
   457bc:	4602      	mov	r2, r0
   457be:	4620      	mov	r0, r4
   457c0:	f7e7 fa88 	bl	2ccd4 <bt_conn_security_changed>
	bt_conn_unref(conn);
   457c4:	4620      	mov	r0, r4
}
   457c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   457ca:	f000 bb2a 	b.w	45e22 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   457ce:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   457d0:	78f3      	ldrb	r3, [r6, #3]
   457d2:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   457d4:	2a01      	cmp	r2, #1
   457d6:	d108      	bne.n	457ea <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   457d8:	b10b      	cbz	r3, 457de <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   457da:	f002 f9e3 	bl	47ba4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   457de:	4620      	mov	r0, r4
   457e0:	f7ff fcda 	bl	45198 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   457e4:	2800      	cmp	r0, #0
   457e6:	bf08      	it	eq
   457e8:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   457ea:	4628      	mov	r0, r5
   457ec:	f7e5 ff7c 	bl	2b6e8 <bt_security_err_get>
   457f0:	4629      	mov	r1, r5
   457f2:	4602      	mov	r2, r0
   457f4:	4620      	mov	r0, r4
   457f6:	f7e7 fa6d 	bl	2ccd4 <bt_conn_security_changed>
	if (status) {
   457fa:	2d00      	cmp	r5, #0
   457fc:	d0e2      	beq.n	457c4 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   457fe:	4629      	mov	r1, r5
   45800:	4620      	mov	r0, r4
   45802:	f000 fb52 	bl	45eaa <bt_conn_disconnect>
   45806:	e7dd      	b.n	457c4 <hci_encrypt_change+0x24>
}
   45808:	bd70      	pop	{r4, r5, r6, pc}

0004580a <bt_send>:
		return bt_hci_ecc_send(buf);
   4580a:	f7e5 ba13 	b.w	2ac34 <bt_hci_ecc_send>

0004580e <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4580e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   45810:	f7ea f93c 	bl	2fa8c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   45814:	b118      	cbz	r0, 4581e <bt_addr_le_is_bonded+0x10>
   45816:	89c0      	ldrh	r0, [r0, #14]
   45818:	3800      	subs	r0, #0
   4581a:	bf18      	it	ne
   4581c:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4581e:	bd08      	pop	{r3, pc}

00045820 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   45820:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   45826:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4582c:	2100      	movs	r1, #0
{
   4582e:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45830:	f7e5 fb98 	bl	2af64 <bt_buf_get_evt>
   45834:	2102      	movs	r1, #2
   45836:	4604      	mov	r4, r0
   45838:	3008      	adds	r0, #8
   4583a:	f002 fae3 	bl	47e04 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4583e:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   45840:	7045      	strb	r5, [r0, #1]

	return buf;
}
   45842:	4620      	mov	r0, r4
   45844:	bd70      	pop	{r4, r5, r6, pc}

00045846 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   45846:	3103      	adds	r1, #3
{
   45848:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4584a:	b2c9      	uxtb	r1, r1
{
   4584c:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4584e:	200e      	movs	r0, #14
   45850:	f7ff ffe6 	bl	45820 <bt_hci_evt_create>
   45854:	2103      	movs	r1, #3
   45856:	4604      	mov	r4, r0
   45858:	3008      	adds	r0, #8
   4585a:	f002 fad3 	bl	47e04 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4585e:	2301      	movs	r3, #1
   45860:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   45862:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   45866:	4620      	mov	r0, r4
   45868:	bd38      	pop	{r3, r4, r5, pc}

0004586a <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4586a:	b570      	push	{r4, r5, r6, lr}
   4586c:	4605      	mov	r5, r0
   4586e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   45870:	200f      	movs	r0, #15
   45872:	2104      	movs	r1, #4
   45874:	f7ff ffd4 	bl	45820 <bt_hci_evt_create>
   45878:	2104      	movs	r1, #4
   4587a:	4604      	mov	r4, r0
   4587c:	3008      	adds	r0, #8
   4587e:	f002 fac1 	bl	47e04 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   45882:	2201      	movs	r2, #1
	cs->status = status;
   45884:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   45886:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   45888:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4588a:	4620      	mov	r0, r4
   4588c:	bd70      	pop	{r4, r5, r6, pc}

0004588e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4588e:	2207      	movs	r2, #7
   45890:	f7ff bb16 	b.w	44ec0 <memcpy>

00045894 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45894:	f3bf 8f5b 	dmb	ish
   45898:	6800      	ldr	r0, [r0, #0]
   4589a:	f3bf 8f5b 	dmb	ish
}
   4589e:	4770      	bx	lr

000458a0 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   458a0:	f100 0310 	add.w	r3, r0, #16
   458a4:	f3bf 8f5b 	dmb	ish
   458a8:	e853 2f00 	ldrex	r2, [r3]
   458ac:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   458b0:	e843 1c00 	strex	ip, r1, [r3]
   458b4:	f1bc 0f00 	cmp.w	ip, #0
   458b8:	d1f6      	bne.n	458a8 <adv_unpause_enabled+0x8>
   458ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   458be:	0453      	lsls	r3, r2, #17
   458c0:	d502      	bpl.n	458c8 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   458c2:	2101      	movs	r1, #1
   458c4:	f000 b9dc 	b.w	45c80 <bt_le_adv_set_enable>
}
   458c8:	4770      	bx	lr

000458ca <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   458ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   458cc:	4607      	mov	r7, r0
   458ce:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   458d0:	f242 0027 	movw	r0, #8231	; 0x2027
   458d4:	2127      	movs	r1, #39	; 0x27
   458d6:	f7e5 fcfd 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   458da:	4604      	mov	r4, r0
   458dc:	b1d0      	cbz	r0, 45914 <hci_id_add.constprop.0+0x4a>
   458de:	2127      	movs	r1, #39	; 0x27
   458e0:	3008      	adds	r0, #8
   458e2:	f002 fa8f 	bl	47e04 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   458e6:	4639      	mov	r1, r7
   458e8:	4605      	mov	r5, r0
   458ea:	f7ff ffd0 	bl	4588e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   458ee:	4631      	mov	r1, r6
   458f0:	2210      	movs	r2, #16
   458f2:	1de8      	adds	r0, r5, #7
   458f4:	f7ff fae4 	bl	44ec0 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   458f8:	2210      	movs	r2, #16
   458fa:	2100      	movs	r1, #0
   458fc:	f105 0017 	add.w	r0, r5, #23
   45900:	f7ff fae9 	bl	44ed6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   45904:	4621      	mov	r1, r4
   45906:	2200      	movs	r2, #0
}
   45908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4590c:	f242 0027 	movw	r0, #8231	; 0x2027
   45910:	f7e5 bd3c 	b.w	2b38c <bt_hci_cmd_send_sync>
}
   45914:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004591a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4591a:	7a03      	ldrb	r3, [r0, #8]
   4591c:	075b      	lsls	r3, r3, #29
   4591e:	d504      	bpl.n	4592a <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   45920:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   45924:	3001      	adds	r0, #1
   45926:	f7ff bfd0 	b.w	458ca <hci_id_add.constprop.0>
}
   4592a:	4770      	bx	lr

0004592c <addr_res_enable>:
{
   4592c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4592e:	2101      	movs	r1, #1
{
   45930:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   45932:	f242 002d 	movw	r0, #8237	; 0x202d
   45936:	f7e5 fccd 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   4593a:	4604      	mov	r4, r0
   4593c:	b158      	cbz	r0, 45956 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   4593e:	4629      	mov	r1, r5
   45940:	3008      	adds	r0, #8
   45942:	f002 fa6e 	bl	47e22 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   45946:	4621      	mov	r1, r4
   45948:	2200      	movs	r2, #0
}
   4594a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4594e:	f242 002d 	movw	r0, #8237	; 0x202d
   45952:	f7e5 bd1b 	b.w	2b38c <bt_hci_cmd_send_sync>
}
   45956:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4595a:	bd38      	pop	{r3, r4, r5, pc}

0004595c <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4595c:	f100 0210 	add.w	r2, r0, #16
{
   45960:	b508      	push	{r3, lr}
   45962:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   45964:	4610      	mov	r0, r2
   45966:	f7ff ff95 	bl	45894 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4596a:	0641      	lsls	r1, r0, #25
   4596c:	d511      	bpl.n	45992 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4596e:	f3bf 8f5b 	dmb	ish
   45972:	e852 1f00 	ldrex	r1, [r2]
   45976:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   4597a:	e842 1000 	strex	r0, r1, [r2]
   4597e:	2800      	cmp	r0, #0
   45980:	d1f7      	bne.n	45972 <adv_pause_enabled+0x16>
   45982:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   45986:	4618      	mov	r0, r3
   45988:	2100      	movs	r1, #0
}
   4598a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   4598e:	f000 b977 	b.w	45c80 <bt_le_adv_set_enable>
}
   45992:	bd08      	pop	{r3, pc}

00045994 <bt_lookup_id_addr>:
{
   45994:	b510      	push	{r4, lr}
   45996:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   45998:	f7ea f840 	bl	2fa1c <bt_keys_find_irk>
		if (keys) {
   4599c:	b100      	cbz	r0, 459a0 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   4599e:	1c44      	adds	r4, r0, #1
}
   459a0:	4620      	mov	r0, r4
   459a2:	bd10      	pop	{r4, pc}

000459a4 <bt_id_set_adv_private_addr>:
{
   459a4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   459a6:	2106      	movs	r1, #6
   459a8:	4668      	mov	r0, sp
   459aa:	f7ec ff59 	bl	32860 <bt_rand>
	if (err) {
   459ae:	b940      	cbnz	r0, 459c2 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   459b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   459b4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   459b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   459ba:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   459be:	f7e6 f825 	bl	2ba0c <set_random_address>
}
   459c2:	b003      	add	sp, #12
   459c4:	f85d fb04 	ldr.w	pc, [sp], #4

000459c8 <bt_id_adv_random_addr_check>:
}
   459c8:	2001      	movs	r0, #1
   459ca:	4770      	bx	lr

000459cc <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   459cc:	7a03      	ldrb	r3, [r0, #8]
   459ce:	07d9      	lsls	r1, r3, #31
   459d0:	d504      	bpl.n	459dc <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   459d2:	f023 0301 	bic.w	r3, r3, #1
   459d6:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   459d8:	f7e6 b8a0 	b.w	2bb1c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   459dc:	0799      	lsls	r1, r3, #30
   459de:	d504      	bpl.n	459ea <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   459e0:	f023 0302 	bic.w	r3, r3, #2
   459e4:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   459e6:	f7e6 b92d 	b.w	2bc44 <bt_id_del>
}
   459ea:	4770      	bx	lr

000459ec <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   459ec:	2000      	movs	r0, #0
   459ee:	4770      	bx	lr

000459f0 <get_adv_channel_map>:
{
   459f0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   459f2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   459f6:	bf0c      	ite	eq
   459f8:	2007      	moveq	r0, #7
   459fa:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   459fc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   459fe:	bf48      	it	mi
   45a00:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   45a04:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   45a06:	bf48      	it	mi
   45a08:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   45a0c:	4770      	bx	lr

00045a0e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45a0e:	f3bf 8f5b 	dmb	ish
   45a12:	6800      	ldr	r0, [r0, #0]
   45a14:	f3bf 8f5b 	dmb	ish
}
   45a18:	4770      	bx	lr

00045a1a <atomic_and>:
{
   45a1a:	4603      	mov	r3, r0
}
   45a1c:	f3bf 8f5b 	dmb	ish
   45a20:	e853 0f00 	ldrex	r0, [r3]
   45a24:	ea00 0201 	and.w	r2, r0, r1
   45a28:	e843 2c00 	strex	ip, r2, [r3]
   45a2c:	f1bc 0f00 	cmp.w	ip, #0
   45a30:	d1f6      	bne.n	45a20 <atomic_and+0x6>
   45a32:	f3bf 8f5b 	dmb	ish
   45a36:	4770      	bx	lr

00045a38 <hci_set_ad>:
{
   45a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45a3c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45a3e:	2120      	movs	r1, #32
{
   45a40:	4682      	mov	sl, r0
   45a42:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45a44:	f7e5 fc46 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   45a48:	4605      	mov	r5, r0
   45a4a:	2800      	cmp	r0, #0
   45a4c:	d04a      	beq.n	45ae4 <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   45a4e:	2120      	movs	r1, #32
   45a50:	3008      	adds	r0, #8
   45a52:	f002 f9d7 	bl	47e04 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   45a56:	2220      	movs	r2, #32
   45a58:	2100      	movs	r1, #0
   45a5a:	4681      	mov	r9, r0
   45a5c:	f7ff fa3b 	bl	44ed6 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   45a60:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   45a64:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   45a68:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   45a6a:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   45a6c:	f8d4 8000 	ldr.w	r8, [r4]
   45a70:	2300      	movs	r3, #0
   45a72:	6862      	ldr	r2, [r4, #4]
   45a74:	4293      	cmp	r3, r2
   45a76:	d30d      	bcc.n	45a94 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   45a78:	9b00      	ldr	r3, [sp, #0]
   45a7a:	3408      	adds	r4, #8
   45a7c:	42a3      	cmp	r3, r4
   45a7e:	d1f5      	bne.n	45a6c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45a80:	2200      	movs	r2, #0
   45a82:	4629      	mov	r1, r5
   45a84:	4650      	mov	r0, sl
	*data_len = set_data_len;
   45a86:	f889 6000 	strb.w	r6, [r9]
}
   45a8a:	b003      	add	sp, #12
   45a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45a90:	f7e5 bc7c 	b.w	2b38c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   45a94:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   45a98:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   45a9c:	1cb0      	adds	r0, r6, #2
   45a9e:	1811      	adds	r1, r2, r0
   45aa0:	291f      	cmp	r1, #31
   45aa2:	d908      	bls.n	45ab6 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   45aa4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   45aa8:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   45aac:	d11f      	bne.n	45aee <hci_set_ad+0xb6>
   45aae:	2a00      	cmp	r2, #0
   45ab0:	dd1d      	ble.n	45aee <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   45ab2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   45ab6:	b2d7      	uxtb	r7, r2
   45ab8:	1c79      	adds	r1, r7, #1
   45aba:	f80b 1006 	strb.w	r1, [fp, r6]
   45abe:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   45ac0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   45ac2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   45ac6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   45aca:	f8d8 1004 	ldr.w	r1, [r8, #4]
   45ace:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   45ad0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   45ad2:	f7ff f9f5 	bl	44ec0 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   45ad6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   45ad8:	443e      	add	r6, r7
   45ada:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   45adc:	3301      	adds	r3, #1
   45ade:	f108 0808 	add.w	r8, r8, #8
   45ae2:	e7c6      	b.n	45a72 <hci_set_ad+0x3a>
		return -ENOBUFS;
   45ae4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   45ae8:	b003      	add	sp, #12
   45aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   45aee:	4628      	mov	r0, r5
   45af0:	f7f7 fc4e 	bl	3d390 <net_buf_unref>
		return err;
   45af4:	f06f 0015 	mvn.w	r0, #21
   45af8:	e7f6      	b.n	45ae8 <hci_set_ad+0xb0>

00045afa <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   45afa:	2301      	movs	r3, #1
{
   45afc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   45afe:	fa03 f101 	lsl.w	r1, r3, r1
{
   45b02:	4604      	mov	r4, r0
	if (val) {
   45b04:	b162      	cbz	r2, 45b20 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45b06:	f3bf 8f5b 	dmb	ish
   45b0a:	e854 3f00 	ldrex	r3, [r4]
   45b0e:	430b      	orrs	r3, r1
   45b10:	e844 3200 	strex	r2, r3, [r4]
   45b14:	2a00      	cmp	r2, #0
   45b16:	d1f8      	bne.n	45b0a <atomic_set_bit_to+0x10>
   45b18:	f3bf 8f5b 	dmb	ish
	}
}
   45b1c:	bc10      	pop	{r4}
   45b1e:	4770      	bx	lr
   45b20:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45b22:	43c9      	mvns	r1, r1
   45b24:	f7ff bf79 	b.w	45a1a <atomic_and>

00045b28 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   45b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45b2c:	b087      	sub	sp, #28
   45b2e:	4605      	mov	r5, r0
   45b30:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   45b34:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   45b38:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   45b3c:	460c      	mov	r4, r1
   45b3e:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   45b40:	2100      	movs	r1, #0
   45b42:	2210      	movs	r2, #16
   45b44:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   45b46:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   45b48:	f7ff f9c5 	bl	44ed6 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   45b4c:	b186      	cbz	r6, 45b70 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   45b4e:	f7e5 ff3f 	bl	2b9d0 <bt_get_name>
   45b52:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   45b54:	2c00      	cmp	r4, #0
   45b56:	d139      	bne.n	45bcc <le_adv_update.constprop.0+0xa4>
   45b58:	2f00      	cmp	r7, #0
   45b5a:	d142      	bne.n	45be2 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   45b5c:	4658      	mov	r0, fp
   45b5e:	f7ff f97a 	bl	44e56 <strlen>
   45b62:	2309      	movs	r3, #9
   45b64:	f88d 3000 	strb.w	r3, [sp]
   45b68:	f88d 0001 	strb.w	r0, [sp, #1]
   45b6c:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   45b70:	2e01      	cmp	r6, #1
			d_len = 2;
   45b72:	bf0c      	ite	eq
   45b74:	2202      	moveq	r2, #2
		d_len = 1;
   45b76:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   45b78:	a902      	add	r1, sp, #8
   45b7a:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   45b7e:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   45b82:	bf04      	itt	eq
   45b84:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   45b88:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   45b8a:	f7ff ff55 	bl	45a38 <hci_set_ad>
		if (err) {
   45b8e:	4604      	mov	r4, r0
   45b90:	b978      	cbnz	r0, 45bb2 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   45b92:	f1ba 0f00 	cmp.w	sl, #0
   45b96:	d126      	bne.n	45be6 <le_adv_update.constprop.0+0xbe>
   45b98:	3510      	adds	r5, #16
   45b9a:	f3bf 8f5b 	dmb	ish
   45b9e:	e855 3f00 	ldrex	r3, [r5]
   45ba2:	f043 0304 	orr.w	r3, r3, #4
   45ba6:	e845 3200 	strex	r2, r3, [r5]
   45baa:	2a00      	cmp	r2, #0
   45bac:	d1f7      	bne.n	45b9e <le_adv_update.constprop.0+0x76>
   45bae:	f3bf 8f5b 	dmb	ish
}
   45bb2:	4620      	mov	r0, r4
   45bb4:	b007      	add	sp, #28
   45bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   45bba:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   45bbe:	3a08      	subs	r2, #8
   45bc0:	2a01      	cmp	r2, #1
   45bc2:	d925      	bls.n	45c10 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   45bc4:	3301      	adds	r3, #1
   45bc6:	4598      	cmp	r8, r3
   45bc8:	d1f7      	bne.n	45bba <le_adv_update.constprop.0+0x92>
   45bca:	e7c5      	b.n	45b58 <le_adv_update.constprop.0+0x30>
   45bcc:	2300      	movs	r3, #0
   45bce:	e7fa      	b.n	45bc6 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   45bd0:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   45bd4:	3a08      	subs	r2, #8
   45bd6:	2a01      	cmp	r2, #1
   45bd8:	d91a      	bls.n	45c10 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   45bda:	3301      	adds	r3, #1
   45bdc:	4599      	cmp	r9, r3
   45bde:	d1f7      	bne.n	45bd0 <le_adv_update.constprop.0+0xa8>
   45be0:	e7bc      	b.n	45b5c <le_adv_update.constprop.0+0x34>
   45be2:	2300      	movs	r3, #0
   45be4:	e7fa      	b.n	45bdc <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   45be6:	2e02      	cmp	r6, #2
   45be8:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   45bec:	bf08      	it	eq
   45bee:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45bf0:	a902      	add	r1, sp, #8
			d_len = 2;
   45bf2:	bf08      	it	eq
   45bf4:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45bf6:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   45bfa:	bf08      	it	eq
   45bfc:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   45c00:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45c04:	f7ff ff18 	bl	45a38 <hci_set_ad>
		if (err) {
   45c08:	2800      	cmp	r0, #0
   45c0a:	d0c5      	beq.n	45b98 <le_adv_update.constprop.0+0x70>
   45c0c:	4604      	mov	r4, r0
   45c0e:	e7d0      	b.n	45bb2 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   45c10:	f06f 0415 	mvn.w	r4, #21
   45c14:	e7cd      	b.n	45bb2 <le_adv_update.constprop.0+0x8a>

00045c16 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   45c16:	6843      	ldr	r3, [r0, #4]
   45c18:	f013 0008 	ands.w	r0, r3, #8
   45c1c:	d00a      	beq.n	45c34 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   45c1e:	035a      	lsls	r2, r3, #13
   45c20:	d407      	bmi.n	45c32 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   45c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   45c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   45c2a:	bf0c      	ite	eq
   45c2c:	2001      	moveq	r0, #1
   45c2e:	2002      	movne	r0, #2
   45c30:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   45c32:	2001      	movs	r0, #1
}
   45c34:	4770      	bx	lr

00045c36 <bt_le_adv_set_enable_legacy>:
{
   45c36:	b570      	push	{r4, r5, r6, lr}
   45c38:	4606      	mov	r6, r0
   45c3a:	b086      	sub	sp, #24
   45c3c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   45c3e:	f242 000a 	movw	r0, #8202	; 0x200a
   45c42:	2101      	movs	r1, #1
   45c44:	f7e5 fb46 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   45c48:	4604      	mov	r4, r0
   45c4a:	b1b0      	cbz	r0, 45c7a <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   45c4c:	3008      	adds	r0, #8
	if (enable) {
   45c4e:	b195      	cbz	r5, 45c76 <bt_le_adv_set_enable_legacy+0x40>
   45c50:	2101      	movs	r1, #1
   45c52:	f002 f8e6 	bl	47e22 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   45c56:	f106 0210 	add.w	r2, r6, #16
   45c5a:	a903      	add	r1, sp, #12
   45c5c:	4620      	mov	r0, r4
   45c5e:	9500      	str	r5, [sp, #0]
   45c60:	2306      	movs	r3, #6
   45c62:	f7e5 fb25 	bl	2b2b0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   45c66:	2200      	movs	r2, #0
   45c68:	4621      	mov	r1, r4
   45c6a:	f242 000a 	movw	r0, #8202	; 0x200a
   45c6e:	f7e5 fb8d 	bl	2b38c <bt_hci_cmd_send_sync>
}
   45c72:	b006      	add	sp, #24
   45c74:	bd70      	pop	{r4, r5, r6, pc}
   45c76:	4629      	mov	r1, r5
   45c78:	e7eb      	b.n	45c52 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   45c7a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45c7e:	e7f8      	b.n	45c72 <bt_le_adv_set_enable_legacy+0x3c>

00045c80 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   45c80:	f7ff bfd9 	b.w	45c36 <bt_le_adv_set_enable_legacy>

00045c84 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   45c84:	3018      	adds	r0, #24
   45c86:	f003 b9bf 	b.w	49008 <k_work_cancel_delayable>

00045c8a <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   45c8a:	f7e6 bb8b 	b.w	2c3a4 <bt_le_adv_stop>

00045c8e <atomic_and>:
{
   45c8e:	4603      	mov	r3, r0
}
   45c90:	f3bf 8f5b 	dmb	ish
   45c94:	e853 0f00 	ldrex	r0, [r3]
   45c98:	ea00 0201 	and.w	r2, r0, r1
   45c9c:	e843 2c00 	strex	ip, r2, [r3]
   45ca0:	f1bc 0f00 	cmp.w	ip, #0
   45ca4:	d1f6      	bne.n	45c94 <atomic_and+0x6>
   45ca6:	f3bf 8f5b 	dmb	ish
   45caa:	4770      	bx	lr

00045cac <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45cac:	f3bf 8f5b 	dmb	ish
   45cb0:	6800      	ldr	r0, [r0, #0]
   45cb2:	f3bf 8f5b 	dmb	ish
}
   45cb6:	4770      	bx	lr

00045cb8 <tx_notify>:
{
   45cb8:	b570      	push	{r4, r5, r6, lr}
   45cba:	4604      	mov	r4, r0
	__asm__ volatile(
   45cbc:	f04f 0220 	mov.w	r2, #32
   45cc0:	f3ef 8311 	mrs	r3, BASEPRI
   45cc4:	f382 8812 	msr	BASEPRI_MAX, r2
   45cc8:	f3bf 8f6f 	isb	sy
	return list->head;
   45ccc:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   45cce:	b920      	cbnz	r0, 45cda <tx_notify+0x22>
	__asm__ volatile(
   45cd0:	f383 8811 	msr	BASEPRI, r3
   45cd4:	f3bf 8f6f 	isb	sy
}
   45cd8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45cda:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   45cdc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   45cde:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45ce0:	4288      	cmp	r0, r1
	list->tail = node;
   45ce2:	bf08      	it	eq
   45ce4:	6262      	streq	r2, [r4, #36]	; 0x24
   45ce6:	f383 8811 	msr	BASEPRI, r3
   45cea:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   45cee:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   45cf2:	f7e6 fcfd 	bl	2c6f0 <tx_free>
		cb(conn, user_data);
   45cf6:	4631      	mov	r1, r6
   45cf8:	4620      	mov	r0, r4
   45cfa:	47a8      	blx	r5
	while (1) {
   45cfc:	e7de      	b.n	45cbc <tx_notify+0x4>

00045cfe <tx_complete_work>:
	tx_notify(conn);
   45cfe:	3828      	subs	r0, #40	; 0x28
   45d00:	f7ff bfda 	b.w	45cb8 <tx_notify>

00045d04 <bt_conn_reset_rx_state>:
{
   45d04:	b510      	push	{r4, lr}
   45d06:	4604      	mov	r4, r0
	if (!conn->rx) {
   45d08:	6900      	ldr	r0, [r0, #16]
   45d0a:	b118      	cbz	r0, 45d14 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   45d0c:	f7f7 fb40 	bl	3d390 <net_buf_unref>
	conn->rx = NULL;
   45d10:	2300      	movs	r3, #0
   45d12:	6123      	str	r3, [r4, #16]
}
   45d14:	bd10      	pop	{r4, pc}

00045d16 <conn_cleanup>:
{
   45d16:	b570      	push	{r4, r5, r6, lr}
   45d18:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   45d1a:	f100 0638 	add.w	r6, r0, #56	; 0x38
   45d1e:	2200      	movs	r2, #0
   45d20:	2300      	movs	r3, #0
   45d22:	4630      	mov	r0, r6
   45d24:	f002 f811 	bl	47d4a <net_buf_get>
   45d28:	4605      	mov	r5, r0
   45d2a:	b950      	cbnz	r0, 45d42 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   45d2c:	4620      	mov	r0, r4
   45d2e:	f7ff ffe9 	bl	45d04 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   45d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
   45d36:	2200      	movs	r2, #0
}
   45d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   45d3c:	2300      	movs	r3, #0
   45d3e:	f7fb bff5 	b.w	41d2c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   45d42:	6968      	ldr	r0, [r5, #20]
   45d44:	b108      	cbz	r0, 45d4a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   45d46:	f7e6 fcd3 	bl	2c6f0 <tx_free>
		net_buf_unref(buf);
   45d4a:	4628      	mov	r0, r5
   45d4c:	f7f7 fb20 	bl	3d390 <net_buf_unref>
   45d50:	e7e5      	b.n	45d1e <conn_cleanup+0x8>

00045d52 <bt_conn_recv>:
{
   45d52:	b570      	push	{r4, r5, r6, lr}
   45d54:	4616      	mov	r6, r2
   45d56:	4604      	mov	r4, r0
   45d58:	460d      	mov	r5, r1
	tx_notify(conn);
   45d5a:	f7ff ffad 	bl	45cb8 <tx_notify>
	switch (flags) {
   45d5e:	2e01      	cmp	r6, #1
   45d60:	d017      	beq.n	45d92 <bt_conn_recv+0x40>
   45d62:	2e02      	cmp	r6, #2
   45d64:	d117      	bne.n	45d96 <bt_conn_recv+0x44>
		if (conn->rx) {
   45d66:	6923      	ldr	r3, [r4, #16]
   45d68:	b113      	cbz	r3, 45d70 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   45d6a:	4620      	mov	r0, r4
   45d6c:	f7ff ffca 	bl	45d04 <bt_conn_reset_rx_state>
		conn->rx = buf;
   45d70:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   45d72:	6921      	ldr	r1, [r4, #16]
   45d74:	898a      	ldrh	r2, [r1, #12]
   45d76:	2a01      	cmp	r2, #1
   45d78:	d937      	bls.n	45dea <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   45d7a:	688b      	ldr	r3, [r1, #8]
   45d7c:	881b      	ldrh	r3, [r3, #0]
   45d7e:	3304      	adds	r3, #4
   45d80:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   45d82:	429a      	cmp	r2, r3
   45d84:	d331      	bcc.n	45dea <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   45d86:	d928      	bls.n	45dda <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   45d88:	4620      	mov	r0, r4
}
   45d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   45d8e:	f7ff bfb9 	b.w	45d04 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   45d92:	6920      	ldr	r0, [r4, #16]
   45d94:	b918      	cbnz	r0, 45d9e <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   45d96:	4620      	mov	r0, r4
   45d98:	f7ff ffb4 	bl	45d04 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   45d9c:	e001      	b.n	45da2 <bt_conn_recv+0x50>
		if (!buf->len) {
   45d9e:	89ae      	ldrh	r6, [r5, #12]
   45da0:	b926      	cbnz	r6, 45dac <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   45da2:	4628      	mov	r0, r5
}
   45da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   45da8:	f7f7 baf2 	b.w	3d390 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   45dac:	3008      	adds	r0, #8
   45dae:	f002 f864 	bl	47e7a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   45db2:	4286      	cmp	r6, r0
   45db4:	d907      	bls.n	45dc6 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   45db6:	6921      	ldr	r1, [r4, #16]
   45db8:	2200      	movs	r2, #0
   45dba:	4620      	mov	r0, r4
   45dbc:	f000 fa00 	bl	461c0 <bt_l2cap_recv>
			conn->rx = NULL;
   45dc0:	2300      	movs	r3, #0
   45dc2:	6123      	str	r3, [r4, #16]
   45dc4:	e7ed      	b.n	45da2 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   45dc6:	6920      	ldr	r0, [r4, #16]
   45dc8:	89aa      	ldrh	r2, [r5, #12]
   45dca:	68a9      	ldr	r1, [r5, #8]
   45dcc:	3008      	adds	r0, #8
   45dce:	f002 f81f 	bl	47e10 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   45dd2:	4628      	mov	r0, r5
   45dd4:	f7f7 fadc 	bl	3d390 <net_buf_unref>
		break;
   45dd8:	e7cb      	b.n	45d72 <bt_conn_recv+0x20>
	conn->rx = NULL;
   45dda:	2300      	movs	r3, #0
   45ddc:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   45dde:	4620      	mov	r0, r4
   45de0:	2201      	movs	r2, #1
}
   45de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   45de6:	f000 b9eb 	b.w	461c0 <bt_l2cap_recv>
}
   45dea:	bd70      	pop	{r4, r5, r6, pc}

00045dec <bt_conn_ref>:
{
   45dec:	b510      	push	{r4, lr}
   45dee:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   45df0:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   45df4:	4610      	mov	r0, r2
   45df6:	f7ff ff59 	bl	45cac <atomic_get>
		if (!old) {
   45dfa:	b180      	cbz	r0, 45e1e <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   45dfc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   45e00:	1c41      	adds	r1, r0, #1
   45e02:	e852 4f00 	ldrex	r4, [r2]
   45e06:	4284      	cmp	r4, r0
   45e08:	d104      	bne.n	45e14 <bt_conn_ref+0x28>
   45e0a:	e842 1c00 	strex	ip, r1, [r2]
   45e0e:	f1bc 0f00 	cmp.w	ip, #0
   45e12:	d1f6      	bne.n	45e02 <bt_conn_ref+0x16>
   45e14:	f3bf 8f5b 	dmb	ish
   45e18:	d1ec      	bne.n	45df4 <bt_conn_ref+0x8>
}
   45e1a:	4618      	mov	r0, r3
   45e1c:	bd10      	pop	{r4, pc}
			return NULL;
   45e1e:	4603      	mov	r3, r0
   45e20:	e7fb      	b.n	45e1a <bt_conn_ref+0x2e>

00045e22 <bt_conn_unref>:
{
   45e22:	b508      	push	{r3, lr}
   45e24:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   45e26:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   45e28:	f3bf 8f5b 	dmb	ish
   45e2c:	e850 2f00 	ldrex	r2, [r0]
   45e30:	3a01      	subs	r2, #1
   45e32:	e840 2100 	strex	r1, r2, [r0]
   45e36:	2900      	cmp	r1, #0
   45e38:	d1f8      	bne.n	45e2c <bt_conn_unref+0xa>
   45e3a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   45e3e:	789b      	ldrb	r3, [r3, #2]
   45e40:	2b01      	cmp	r3, #1
   45e42:	d106      	bne.n	45e52 <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   45e44:	f7ff ff32 	bl	45cac <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   45e48:	b918      	cbnz	r0, 45e52 <bt_conn_unref+0x30>
}
   45e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   45e4e:	f7e6 baf9 	b.w	2c444 <bt_le_adv_resume>
}
   45e52:	bd08      	pop	{r3, pc}

00045e54 <conn_lookup_handle>:
{
   45e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45e58:	4607      	mov	r7, r0
   45e5a:	460e      	mov	r6, r1
   45e5c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   45e5e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   45e60:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   45e64:	42b4      	cmp	r4, r6
   45e66:	d103      	bne.n	45e70 <conn_lookup_handle+0x1c>
	return NULL;
   45e68:	2300      	movs	r3, #0
}
   45e6a:	4618      	mov	r0, r3
   45e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   45e70:	fb09 7004 	mla	r0, r9, r4, r7
   45e74:	f7ff ffba 	bl	45dec <bt_conn_ref>
   45e78:	4603      	mov	r3, r0
		if (!conn) {
   45e7a:	b158      	cbz	r0, 45e94 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   45e7c:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   45e7e:	2d01      	cmp	r5, #1
   45e80:	d002      	beq.n	45e88 <conn_lookup_handle+0x34>
   45e82:	3d07      	subs	r5, #7
   45e84:	2d01      	cmp	r5, #1
   45e86:	d803      	bhi.n	45e90 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   45e88:	881a      	ldrh	r2, [r3, #0]
   45e8a:	4542      	cmp	r2, r8
   45e8c:	d0ed      	beq.n	45e6a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   45e8e:	4618      	mov	r0, r3
   45e90:	f7ff ffc7 	bl	45e22 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   45e94:	3401      	adds	r4, #1
   45e96:	e7e5      	b.n	45e64 <conn_lookup_handle+0x10>

00045e98 <bt_conn_connected>:
{
   45e98:	b510      	push	{r4, lr}
   45e9a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   45e9c:	f7e7 f906 	bl	2d0ac <bt_l2cap_connected>
	notify_connected(conn);
   45ea0:	4620      	mov	r0, r4
}
   45ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   45ea6:	f7e6 bc2d 	b.w	2c704 <notify_connected>

00045eaa <bt_conn_disconnect>:
{
   45eaa:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   45eac:	7b43      	ldrb	r3, [r0, #13]
   45eae:	3b02      	subs	r3, #2
{
   45eb0:	4604      	mov	r4, r0
	switch (conn->state) {
   45eb2:	2b06      	cmp	r3, #6
   45eb4:	d805      	bhi.n	45ec2 <bt_conn_disconnect+0x18>
   45eb6:	e8df f003 	tbb	[pc, r3]
   45eba:	0408      	.short	0x0408
   45ebc:	0e0c0404 	.word	0x0e0c0404
   45ec0:	0c          	.byte	0x0c
   45ec1:	00          	.byte	0x00
   45ec2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   45ec6:	4628      	mov	r0, r5
   45ec8:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   45eca:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   45ecc:	2100      	movs	r1, #0
   45ece:	f7e6 fd6f 	bl	2c9b0 <bt_conn_set_state>
		return 0;
   45ed2:	2500      	movs	r5, #0
   45ed4:	e7f7      	b.n	45ec6 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   45ed6:	8800      	ldrh	r0, [r0, #0]
   45ed8:	f7ff fb27 	bl	4552a <bt_hci_disconnect>
	if (err) {
   45edc:	4605      	mov	r5, r0
   45ede:	2800      	cmp	r0, #0
   45ee0:	d1f1      	bne.n	45ec6 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   45ee2:	7b63      	ldrb	r3, [r4, #13]
   45ee4:	2b07      	cmp	r3, #7
   45ee6:	d1ee      	bne.n	45ec6 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   45ee8:	2108      	movs	r1, #8
   45eea:	4620      	mov	r0, r4
   45eec:	f7e6 fd60 	bl	2c9b0 <bt_conn_set_state>
   45ef0:	e7e9      	b.n	45ec6 <bt_conn_disconnect+0x1c>

00045ef2 <bt_conn_set_security>:
{
   45ef2:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   45ef4:	7b43      	ldrb	r3, [r0, #13]
   45ef6:	2b07      	cmp	r3, #7
{
   45ef8:	4604      	mov	r4, r0
   45efa:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   45efc:	d124      	bne.n	45f48 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   45efe:	7a43      	ldrb	r3, [r0, #9]
   45f00:	428b      	cmp	r3, r1
   45f02:	d224      	bcs.n	45f4e <bt_conn_set_security+0x5c>
   45f04:	7a83      	ldrb	r3, [r0, #10]
   45f06:	428b      	cmp	r3, r1
   45f08:	d221      	bcs.n	45f4e <bt_conn_set_security+0x5c>
	if (val) {
   45f0a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   45f0c:	f100 0004 	add.w	r0, r0, #4
   45f10:	d515      	bpl.n	45f3e <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45f12:	f3bf 8f5b 	dmb	ish
   45f16:	e850 3f00 	ldrex	r3, [r0]
   45f1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   45f1e:	e840 3200 	strex	r2, r3, [r0]
   45f22:	2a00      	cmp	r2, #0
   45f24:	d1f7      	bne.n	45f16 <bt_conn_set_security+0x24>
   45f26:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   45f2a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   45f2e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   45f30:	4620      	mov	r0, r4
   45f32:	f7e9 faeb 	bl	2f50c <bt_smp_start_security>
	if (err) {
   45f36:	b108      	cbz	r0, 45f3c <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   45f38:	7a63      	ldrb	r3, [r4, #9]
   45f3a:	72a3      	strb	r3, [r4, #10]
}
   45f3c:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45f3e:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   45f42:	f7ff fea4 	bl	45c8e <atomic_and>
   45f46:	e7f0      	b.n	45f2a <bt_conn_set_security+0x38>
		return -ENOTCONN;
   45f48:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   45f4c:	e7f6      	b.n	45f3c <bt_conn_set_security+0x4a>
		return 0;
   45f4e:	2000      	movs	r0, #0
   45f50:	e7f4      	b.n	45f3c <bt_conn_set_security+0x4a>

00045f52 <bt_conn_get_security>:
}
   45f52:	7a40      	ldrb	r0, [r0, #9]
   45f54:	4770      	bx	lr

00045f56 <bt_conn_is_peer_addr_le>:
{
   45f56:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   45f58:	7a03      	ldrb	r3, [r0, #8]
   45f5a:	428b      	cmp	r3, r1
{
   45f5c:	4604      	mov	r4, r0
   45f5e:	4615      	mov	r5, r2
	if (id != conn->id) {
   45f60:	d115      	bne.n	45f8e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   45f62:	f100 0188 	add.w	r1, r0, #136	; 0x88
   45f66:	2207      	movs	r2, #7
   45f68:	4628      	mov	r0, r5
   45f6a:	f7fe ff98 	bl	44e9e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   45f6e:	b180      	cbz	r0, 45f92 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   45f70:	78e3      	ldrb	r3, [r4, #3]
   45f72:	2207      	movs	r2, #7
   45f74:	b943      	cbnz	r3, 45f88 <bt_conn_is_peer_addr_le+0x32>
   45f76:	f104 0196 	add.w	r1, r4, #150	; 0x96
   45f7a:	4628      	mov	r0, r5
   45f7c:	f7fe ff8f 	bl	44e9e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   45f80:	fab0 f080 	clz	r0, r0
   45f84:	0940      	lsrs	r0, r0, #5
}
   45f86:	bd38      	pop	{r3, r4, r5, pc}
   45f88:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   45f8c:	e7f5      	b.n	45f7a <bt_conn_is_peer_addr_le+0x24>
		return false;
   45f8e:	2000      	movs	r0, #0
   45f90:	e7f9      	b.n	45f86 <bt_conn_is_peer_addr_le+0x30>
		return true;
   45f92:	2001      	movs	r0, #1
   45f94:	e7f7      	b.n	45f86 <bt_conn_is_peer_addr_le+0x30>

00045f96 <bt_conn_exists_le>:
{
   45f96:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   45f98:	f7e6 fee6 	bl	2cd68 <bt_conn_lookup_addr_le>
	if (conn) {
   45f9c:	b110      	cbz	r0, 45fa4 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   45f9e:	f7ff ff40 	bl	45e22 <bt_conn_unref>
		return true;
   45fa2:	2001      	movs	r0, #1
}
   45fa4:	bd08      	pop	{r3, pc}

00045fa6 <bt_conn_get_dst>:
}
   45fa6:	3088      	adds	r0, #136	; 0x88
   45fa8:	4770      	bx	lr

00045faa <bt_conn_le_conn_update>:
{
   45faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45fac:	4607      	mov	r7, r0
   45fae:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   45fb0:	f242 0013 	movw	r0, #8211	; 0x2013
   45fb4:	210e      	movs	r1, #14
   45fb6:	f7e5 f98d 	bl	2b2d4 <bt_hci_cmd_create>
	if (!buf) {
   45fba:	4606      	mov	r6, r0
   45fbc:	b1d0      	cbz	r0, 45ff4 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   45fbe:	210e      	movs	r1, #14
   45fc0:	3008      	adds	r0, #8
   45fc2:	f001 ff1f 	bl	47e04 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   45fc6:	220e      	movs	r2, #14
   45fc8:	4604      	mov	r4, r0
   45fca:	2100      	movs	r1, #0
   45fcc:	f7fe ff83 	bl	44ed6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   45fd0:	883b      	ldrh	r3, [r7, #0]
   45fd2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   45fd4:	882b      	ldrh	r3, [r5, #0]
   45fd6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   45fd8:	886b      	ldrh	r3, [r5, #2]
   45fda:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   45fdc:	88ab      	ldrh	r3, [r5, #4]
   45fde:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   45fe0:	88eb      	ldrh	r3, [r5, #6]
   45fe2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45fe4:	4631      	mov	r1, r6
   45fe6:	2200      	movs	r2, #0
}
   45fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45fec:	f242 0013 	movw	r0, #8211	; 0x2013
   45ff0:	f7e5 b9cc 	b.w	2b38c <bt_hci_cmd_send_sync>
}
   45ff4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045ffa <l2cap_connected>:
}
   45ffa:	4770      	bx	lr

00045ffc <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   45ffc:	3010      	adds	r0, #16
   45ffe:	f003 b803 	b.w	49008 <k_work_cancel_delayable>

00046002 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   46002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46004:	4607      	mov	r7, r0
   46006:	460e      	mov	r6, r1
   46008:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4600a:	2300      	movs	r3, #0
   4600c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   46010:	2104      	movs	r1, #4
   46012:	2000      	movs	r0, #0
   46014:	f7e6 fd80 	bl	2cb18 <bt_conn_create_pdu_timeout>
	if (!buf) {
   46018:	4604      	mov	r4, r0
   4601a:	b130      	cbz	r0, 4602a <l2cap_create_le_sig_pdu.constprop.0+0x28>
   4601c:	2104      	movs	r1, #4
   4601e:	3008      	adds	r0, #8
   46020:	f001 fef0 	bl	47e04 <net_buf_simple_add>
	hdr->code = code;
   46024:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   46026:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   46028:	8045      	strh	r5, [r0, #2]
}
   4602a:	4620      	mov	r0, r4
   4602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004602e <bt_l2cap_chan_remove>:
	return list->head;
   4602e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   46030:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   46032:	b173      	cbz	r3, 46052 <bt_l2cap_chan_remove+0x24>
   46034:	3b08      	subs	r3, #8
   46036:	2500      	movs	r5, #0
	return node->next;
   46038:	461a      	mov	r2, r3
		if (chan == ch) {
   4603a:	4299      	cmp	r1, r3
   4603c:	f852 4f08 	ldr.w	r4, [r2, #8]!
   46040:	d10d      	bne.n	4605e <bt_l2cap_chan_remove+0x30>
	return list->tail;
   46042:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   46044:	b935      	cbnz	r5, 46054 <bt_l2cap_chan_remove+0x26>
   46046:	4291      	cmp	r1, r2
	list->head = node;
   46048:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   4604a:	d100      	bne.n	4604e <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   4604c:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   4604e:	2200      	movs	r2, #0
   46050:	609a      	str	r2, [r3, #8]
}
   46052:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   46054:	4291      	cmp	r1, r2
	parent->next = child;
   46056:	602c      	str	r4, [r5, #0]
	list->tail = node;
   46058:	bf08      	it	eq
   4605a:	6545      	streq	r5, [r0, #84]	; 0x54
}
   4605c:	e7f7      	b.n	4604e <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4605e:	2c00      	cmp	r4, #0
   46060:	d0f7      	beq.n	46052 <bt_l2cap_chan_remove+0x24>
   46062:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   46066:	4615      	mov	r5, r2
   46068:	e7e6      	b.n	46038 <bt_l2cap_chan_remove+0xa>

0004606a <bt_l2cap_chan_del>:
{
   4606a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   4606c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   46070:	4604      	mov	r4, r0
	if (!chan->conn) {
   46072:	b123      	cbz	r3, 4607e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   46074:	686b      	ldr	r3, [r5, #4]
   46076:	b103      	cbz	r3, 4607a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   46078:	4798      	blx	r3
	chan->conn = NULL;
   4607a:	2300      	movs	r3, #0
   4607c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   4607e:	68e3      	ldr	r3, [r4, #12]
   46080:	b10b      	cbz	r3, 46086 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   46082:	4620      	mov	r0, r4
   46084:	4798      	blx	r3
	if (ops->released) {
   46086:	69eb      	ldr	r3, [r5, #28]
   46088:	b11b      	cbz	r3, 46092 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   4608a:	4620      	mov	r0, r4
}
   4608c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   46090:	4718      	bx	r3
}
   46092:	bd70      	pop	{r4, r5, r6, pc}

00046094 <l2cap_rtx_timeout>:
{
   46094:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   46096:	f1a0 0410 	sub.w	r4, r0, #16
   4609a:	4621      	mov	r1, r4
   4609c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   460a0:	f7ff ffc5 	bl	4602e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   460a4:	4620      	mov	r0, r4
}
   460a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   460aa:	f7ff bfde 	b.w	4606a <bt_l2cap_chan_del>

000460ae <bt_l2cap_disconnected>:
	return list->head;
   460ae:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   460b0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   460b2:	b160      	cbz	r0, 460ce <bt_l2cap_disconnected+0x20>
	return node->next;
   460b4:	f850 4908 	ldr.w	r4, [r0], #-8
   460b8:	b104      	cbz	r4, 460bc <bt_l2cap_disconnected+0xe>
   460ba:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   460bc:	f7ff ffd5 	bl	4606a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   460c0:	b12c      	cbz	r4, 460ce <bt_l2cap_disconnected+0x20>
   460c2:	68a3      	ldr	r3, [r4, #8]
   460c4:	b103      	cbz	r3, 460c8 <bt_l2cap_disconnected+0x1a>
   460c6:	3b08      	subs	r3, #8
{
   460c8:	4620      	mov	r0, r4
   460ca:	461c      	mov	r4, r3
   460cc:	e7f6      	b.n	460bc <bt_l2cap_disconnected+0xe>
}
   460ce:	bd10      	pop	{r4, pc}

000460d0 <bt_l2cap_security_changed>:
	return list->head;
   460d0:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   460d2:	b538      	push	{r3, r4, r5, lr}
   460d4:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   460d6:	b178      	cbz	r0, 460f8 <bt_l2cap_security_changed+0x28>
	return node->next;
   460d8:	f850 4908 	ldr.w	r4, [r0], #-8
   460dc:	b104      	cbz	r4, 460e0 <bt_l2cap_security_changed+0x10>
   460de:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   460e0:	6843      	ldr	r3, [r0, #4]
   460e2:	689b      	ldr	r3, [r3, #8]
   460e4:	b10b      	cbz	r3, 460ea <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   460e6:	4629      	mov	r1, r5
   460e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   460ea:	b12c      	cbz	r4, 460f8 <bt_l2cap_security_changed+0x28>
   460ec:	68a3      	ldr	r3, [r4, #8]
   460ee:	b103      	cbz	r3, 460f2 <bt_l2cap_security_changed+0x22>
   460f0:	3b08      	subs	r3, #8
{
   460f2:	4620      	mov	r0, r4
   460f4:	461c      	mov	r4, r3
   460f6:	e7f3      	b.n	460e0 <bt_l2cap_security_changed+0x10>
}
   460f8:	bd38      	pop	{r3, r4, r5, pc}

000460fa <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   460fa:	3104      	adds	r1, #4
   460fc:	f7e6 bd0c 	b.w	2cb18 <bt_conn_create_pdu_timeout>

00046100 <bt_l2cap_send_cb>:
{
   46100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46104:	4614      	mov	r4, r2
   46106:	4605      	mov	r5, r0
   46108:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   4610a:	f102 0008 	add.w	r0, r2, #8
   4610e:	2104      	movs	r1, #4
   46110:	461e      	mov	r6, r3
   46112:	f8dd 8018 	ldr.w	r8, [sp, #24]
   46116:	f001 fe8c 	bl	47e32 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4611a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4611c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4611e:	3a04      	subs	r2, #4
   46120:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   46122:	4643      	mov	r3, r8
   46124:	4632      	mov	r2, r6
   46126:	4621      	mov	r1, r4
   46128:	4628      	mov	r0, r5
}
   4612a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4612e:	f7e6 bbcd 	b.w	2c8cc <bt_conn_send_cb>

00046132 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   46132:	898b      	ldrh	r3, [r1, #12]
   46134:	2b03      	cmp	r3, #3
{
   46136:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46138:	4605      	mov	r5, r0
   4613a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4613c:	d927      	bls.n	4618e <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   4613e:	2104      	movs	r1, #4
   46140:	f104 0008 	add.w	r0, r4, #8
   46144:	f001 fe85 	bl	47e52 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   46148:	89a3      	ldrh	r3, [r4, #12]
   4614a:	8842      	ldrh	r2, [r0, #2]
   4614c:	429a      	cmp	r2, r3
   4614e:	d11e      	bne.n	4618e <l2cap_recv+0x5c>
	if (!hdr->ident) {
   46150:	7841      	ldrb	r1, [r0, #1]
   46152:	b1e1      	cbz	r1, 4618e <l2cap_recv+0x5c>
	switch (hdr->code) {
   46154:	7803      	ldrb	r3, [r0, #0]
   46156:	2b01      	cmp	r3, #1
   46158:	d019      	beq.n	4618e <l2cap_recv+0x5c>
   4615a:	2b13      	cmp	r3, #19
   4615c:	d017      	beq.n	4618e <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4615e:	2202      	movs	r2, #2
   46160:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   46162:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   46164:	f7ff ff4d 	bl	46002 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   46168:	4604      	mov	r4, r0
   4616a:	b180      	cbz	r0, 4618e <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   4616c:	2102      	movs	r1, #2
   4616e:	3008      	adds	r0, #8
   46170:	f001 fe48 	bl	47e04 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   46174:	2300      	movs	r3, #0
   46176:	7003      	strb	r3, [r0, #0]
   46178:	7043      	strb	r3, [r0, #1]
   4617a:	4622      	mov	r2, r4
   4617c:	9300      	str	r3, [sp, #0]
   4617e:	2105      	movs	r1, #5
   46180:	4628      	mov	r0, r5
   46182:	f7ff ffbd 	bl	46100 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   46186:	b110      	cbz	r0, 4618e <l2cap_recv+0x5c>
		net_buf_unref(buf);
   46188:	4620      	mov	r0, r4
   4618a:	f7f7 f901 	bl	3d390 <net_buf_unref>
}
   4618e:	2000      	movs	r0, #0
   46190:	b003      	add	sp, #12
   46192:	bd30      	pop	{r4, r5, pc}

00046194 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   46194:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   46196:	b138      	cbz	r0, 461a8 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   46198:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   4619c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4619e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   461a2:	d001      	beq.n	461a8 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   461a4:	6880      	ldr	r0, [r0, #8]
   461a6:	e7f6      	b.n	46196 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   461a8:	4770      	bx	lr

000461aa <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   461aa:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   461ac:	b138      	cbz	r0, 461be <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   461ae:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   461b2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   461b4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   461b8:	d001      	beq.n	461be <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   461ba:	6880      	ldr	r0, [r0, #8]
   461bc:	e7f6      	b.n	461ac <bt_l2cap_le_lookup_rx_cid+0x2>
}
   461be:	4770      	bx	lr

000461c0 <bt_l2cap_recv>:
{
   461c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   461c2:	898b      	ldrh	r3, [r1, #12]
   461c4:	2b03      	cmp	r3, #3
{
   461c6:	4605      	mov	r5, r0
   461c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   461ca:	d804      	bhi.n	461d6 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   461cc:	4620      	mov	r0, r4
}
   461ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   461d2:	f7f7 b8dd 	b.w	3d390 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   461d6:	2104      	movs	r1, #4
   461d8:	f104 0008 	add.w	r0, r4, #8
   461dc:	f001 fe39 	bl	47e52 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   461e0:	8841      	ldrh	r1, [r0, #2]
   461e2:	4628      	mov	r0, r5
   461e4:	f7ff ffe1 	bl	461aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   461e8:	2800      	cmp	r0, #0
   461ea:	d0ef      	beq.n	461cc <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   461ec:	6843      	ldr	r3, [r0, #4]
   461ee:	4621      	mov	r1, r4
   461f0:	691b      	ldr	r3, [r3, #16]
   461f2:	4798      	blx	r3
   461f4:	e7ea      	b.n	461cc <bt_l2cap_recv+0xc>

000461f6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   461f6:	4770      	bx	lr

000461f8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   461f8:	4603      	mov	r3, r0
	return list->head;
   461fa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   461fc:	b128      	cbz	r0, 4620a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   461fe:	6859      	ldr	r1, [r3, #4]
	return node->next;
   46200:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   46202:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   46204:	4288      	cmp	r0, r1
	list->tail = node;
   46206:	bf08      	it	eq
   46208:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   4620a:	4770      	bx	lr

0004620c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   4620c:	4603      	mov	r3, r0
	size_t bytes = 0;
   4620e:	2000      	movs	r0, #0

	while (buf) {
   46210:	b903      	cbnz	r3, 46214 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   46212:	4770      	bx	lr
		bytes += buf->len;
   46214:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   46216:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   46218:	4410      	add	r0, r2
		buf = buf->frags;
   4621a:	e7f9      	b.n	46210 <net_buf_frags_len+0x4>

0004621c <att_sent>:
	if (chan->ops->sent) {
   4621c:	684b      	ldr	r3, [r1, #4]
   4621e:	695b      	ldr	r3, [r3, #20]
{
   46220:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   46222:	b103      	cbz	r3, 46226 <att_sent+0xa>
		chan->ops->sent(chan);
   46224:	4718      	bx	r3
}
   46226:	4770      	bx	lr

00046228 <attr_read_type_cb>:
{
   46228:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4622a:	68d4      	ldr	r4, [r2, #12]
   4622c:	7823      	ldrb	r3, [r4, #0]
   4622e:	3102      	adds	r1, #2
   46230:	b913      	cbnz	r3, 46238 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   46232:	7021      	strb	r1, [r4, #0]
	return true;
   46234:	2001      	movs	r0, #1
   46236:	e006      	b.n	46246 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   46238:	428b      	cmp	r3, r1
   4623a:	d0fb      	beq.n	46234 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4623c:	8983      	ldrh	r3, [r0, #12]
   4623e:	3b02      	subs	r3, #2
   46240:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   46242:	2000      	movs	r0, #0
   46244:	6110      	str	r0, [r2, #16]
}
   46246:	bd10      	pop	{r4, pc}

00046248 <att_prepare_write_req>:
}
   46248:	2006      	movs	r0, #6
   4624a:	4770      	bx	lr

0004624c <att_op_get_type>:
	switch (op) {
   4624c:	281e      	cmp	r0, #30
   4624e:	d816      	bhi.n	4627e <att_op_get_type+0x32>
   46250:	b308      	cbz	r0, 46296 <att_op_get_type+0x4a>
   46252:	1e43      	subs	r3, r0, #1
   46254:	2b1d      	cmp	r3, #29
   46256:	d81e      	bhi.n	46296 <att_op_get_type+0x4a>
   46258:	e8df f003 	tbb	[pc, r3]
   4625c:	23172317 	.word	0x23172317
   46260:	23172317 	.word	0x23172317
   46264:	23172317 	.word	0x23172317
   46268:	23172317 	.word	0x23172317
   4626c:	1d172317 	.word	0x1d172317
   46270:	2317231d 	.word	0x2317231d
   46274:	1d191d17 	.word	0x1d191d17
   46278:	0f1b      	.short	0x0f1b
   4627a:	2004      	movs	r0, #4
   4627c:	4770      	bx	lr
   4627e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   46282:	2b52      	cmp	r3, #82	; 0x52
   46284:	d107      	bne.n	46296 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   46286:	2000      	movs	r0, #0
}
   46288:	4770      	bx	lr
		return ATT_RESPONSE;
   4628a:	2002      	movs	r0, #2
   4628c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   4628e:	2003      	movs	r0, #3
   46290:	4770      	bx	lr
		return ATT_INDICATION;
   46292:	2005      	movs	r0, #5
   46294:	4770      	bx	lr
		return ATT_COMMAND;
   46296:	f010 0f40 	tst.w	r0, #64	; 0x40
   4629a:	bf0c      	ite	eq
   4629c:	2006      	moveq	r0, #6
   4629e:	2000      	movne	r0, #0
   462a0:	4770      	bx	lr
		return ATT_REQUEST;
   462a2:	2001      	movs	r0, #1
   462a4:	4770      	bx	lr

000462a6 <bt_gatt_foreach_attr>:
{
   462a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   462a8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   462ac:	2300      	movs	r3, #0
   462ae:	9300      	str	r3, [sp, #0]
   462b0:	461a      	mov	r2, r3
   462b2:	f7e7 ffb7 	bl	2e224 <bt_gatt_foreach_attr_type>
}
   462b6:	b005      	add	sp, #20
   462b8:	f85d fb04 	ldr.w	pc, [sp], #4

000462bc <find_type_cb>:
{
   462bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   462c0:	f8d2 9000 	ldr.w	r9, [r2]
{
   462c4:	b091      	sub	sp, #68	; 0x44
   462c6:	4607      	mov	r7, r0
   462c8:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   462ca:	2500      	movs	r5, #0
   462cc:	f642 0301 	movw	r3, #10241	; 0x2801
   462d0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   462d2:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   462d6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   462da:	a90b      	add	r1, sp, #44	; 0x2c
{
   462dc:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   462de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   462e2:	f7fe fedb 	bl	4509c <bt_uuid_cmp>
   462e6:	2800      	cmp	r0, #0
   462e8:	d079      	beq.n	463de <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   462ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   462ee:	6838      	ldr	r0, [r7, #0]
   462f0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   462f4:	a90b      	add	r1, sp, #44	; 0x2c
   462f6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   462fa:	f7fe fecf 	bl	4509c <bt_uuid_cmp>
   462fe:	b138      	cbz	r0, 46310 <find_type_cb+0x54>
		if (data->group &&
   46300:	68a3      	ldr	r3, [r4, #8]
   46302:	b11b      	cbz	r3, 4630c <find_type_cb+0x50>
   46304:	885a      	ldrh	r2, [r3, #2]
   46306:	42b2      	cmp	r2, r6
   46308:	d200      	bcs.n	4630c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   4630a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   4630c:	2001      	movs	r0, #1
   4630e:	e009      	b.n	46324 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   46310:	6861      	ldr	r1, [r4, #4]
   46312:	4608      	mov	r0, r1
   46314:	f7ff ff7a 	bl	4620c <net_buf_frags_len>
   46318:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4631c:	1a1b      	subs	r3, r3, r0
   4631e:	2b03      	cmp	r3, #3
   46320:	d803      	bhi.n	4632a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   46322:	2000      	movs	r0, #0
}
   46324:	b011      	add	sp, #68	; 0x44
   46326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   4632a:	4608      	mov	r0, r1
   4632c:	f001 fd3c 	bl	47da8 <net_buf_frag_last>
   46330:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   46332:	6860      	ldr	r0, [r4, #4]
   46334:	f7ff ff6a 	bl	4620c <net_buf_frags_len>
   46338:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4633c:	f105 0b08 	add.w	fp, r5, #8
   46340:	ebaa 0a00 	sub.w	sl, sl, r0
   46344:	4658      	mov	r0, fp
   46346:	f001 fd98 	bl	47e7a <net_buf_simple_tailroom>
   4634a:	4582      	cmp	sl, r0
   4634c:	d23f      	bcs.n	463ce <find_type_cb+0x112>
   4634e:	6860      	ldr	r0, [r4, #4]
   46350:	f7ff ff5c 	bl	4620c <net_buf_frags_len>
   46354:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   46358:	1a18      	subs	r0, r3, r0
	if (!len) {
   4635a:	b970      	cbnz	r0, 4637a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   4635c:	6863      	ldr	r3, [r4, #4]
   4635e:	7998      	ldrb	r0, [r3, #6]
   46360:	f7f6 ff52 	bl	3d208 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   46364:	2200      	movs	r2, #0
   46366:	2300      	movs	r3, #0
   46368:	f001 fcea 	bl	47d40 <net_buf_alloc_fixed>
		if (!frag) {
   4636c:	4605      	mov	r5, r0
   4636e:	2800      	cmp	r0, #0
   46370:	d0d7      	beq.n	46322 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   46372:	4601      	mov	r1, r0
   46374:	6860      	ldr	r0, [r4, #4]
   46376:	f001 fd28 	bl	47dca <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4637a:	2300      	movs	r3, #0
   4637c:	9300      	str	r3, [sp, #0]
   4637e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   46382:	4639      	mov	r1, r7
   46384:	2310      	movs	r3, #16
   46386:	aa02      	add	r2, sp, #8
   46388:	4640      	mov	r0, r8
   4638a:	47c8      	blx	r9
	if (read < 0) {
   4638c:	1e07      	subs	r7, r0, #0
   4638e:	db26      	blt.n	463de <find_type_cb+0x122>
	if (read != data->value_len) {
   46390:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   46392:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   46394:	42ba      	cmp	r2, r7
   46396:	d01e      	beq.n	463d6 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   46398:	4601      	mov	r1, r0
   4639a:	a80b      	add	r0, sp, #44	; 0x2c
   4639c:	f7fe feac 	bl	450f8 <bt_uuid_create>
   463a0:	b1e8      	cbz	r0, 463de <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   463a2:	b2fa      	uxtb	r2, r7
   463a4:	a902      	add	r1, sp, #8
   463a6:	a806      	add	r0, sp, #24
   463a8:	f7fe fea6 	bl	450f8 <bt_uuid_create>
   463ac:	b1b8      	cbz	r0, 463de <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   463ae:	a906      	add	r1, sp, #24
   463b0:	a80b      	add	r0, sp, #44	; 0x2c
   463b2:	f7fe fe73 	bl	4509c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   463b6:	b990      	cbnz	r0, 463de <find_type_cb+0x122>
	data->err = 0x00;
   463b8:	2300      	movs	r3, #0
   463ba:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   463bc:	2104      	movs	r1, #4
   463be:	f105 0008 	add.w	r0, r5, #8
   463c2:	f001 fd1f 	bl	47e04 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   463c6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   463c8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   463ca:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   463cc:	e79e      	b.n	4630c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   463ce:	4658      	mov	r0, fp
   463d0:	f001 fd53 	bl	47e7a <net_buf_simple_tailroom>
   463d4:	e7c1      	b.n	4635a <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   463d6:	a902      	add	r1, sp, #8
   463d8:	f7fe fd61 	bl	44e9e <memcmp>
   463dc:	e7eb      	b.n	463b6 <find_type_cb+0xfa>
	data->group = NULL;
   463de:	2300      	movs	r3, #0
   463e0:	60a3      	str	r3, [r4, #8]
   463e2:	e793      	b.n	4630c <find_type_cb+0x50>

000463e4 <find_info_cb>:
{
   463e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   463e6:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   463e8:	6817      	ldr	r7, [r2, #0]
{
   463ea:	4605      	mov	r5, r0
   463ec:	460e      	mov	r6, r1
   463ee:	4614      	mov	r4, r2
	if (!data->rsp) {
   463f0:	b963      	cbnz	r3, 4640c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   463f2:	6850      	ldr	r0, [r2, #4]
   463f4:	2101      	movs	r1, #1
   463f6:	3008      	adds	r0, #8
   463f8:	f001 fd04 	bl	47e04 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   463fc:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   463fe:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   46400:	781b      	ldrb	r3, [r3, #0]
   46402:	2b00      	cmp	r3, #0
   46404:	bf0c      	ite	eq
   46406:	2301      	moveq	r3, #1
   46408:	2302      	movne	r3, #2
   4640a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4640c:	68a3      	ldr	r3, [r4, #8]
   4640e:	781b      	ldrb	r3, [r3, #0]
   46410:	2b01      	cmp	r3, #1
   46412:	d003      	beq.n	4641c <find_info_cb+0x38>
   46414:	2b02      	cmp	r3, #2
   46416:	d019      	beq.n	4644c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   46418:	2000      	movs	r0, #0
   4641a:	e016      	b.n	4644a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4641c:	682b      	ldr	r3, [r5, #0]
   4641e:	781b      	ldrb	r3, [r3, #0]
   46420:	2b00      	cmp	r3, #0
   46422:	d1f9      	bne.n	46418 <find_info_cb+0x34>
   46424:	6860      	ldr	r0, [r4, #4]
   46426:	2104      	movs	r1, #4
   46428:	3008      	adds	r0, #8
   4642a:	f001 fceb 	bl	47e04 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4642e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   46430:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   46432:	885b      	ldrh	r3, [r3, #2]
   46434:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   46436:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   46438:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   4643a:	899b      	ldrh	r3, [r3, #12]
   4643c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   46440:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   46442:	2804      	cmp	r0, #4
   46444:	bf94      	ite	ls
   46446:	2000      	movls	r0, #0
   46448:	2001      	movhi	r0, #1
}
   4644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   4644c:	682b      	ldr	r3, [r5, #0]
   4644e:	781b      	ldrb	r3, [r3, #0]
   46450:	2b02      	cmp	r3, #2
   46452:	d1e1      	bne.n	46418 <find_info_cb+0x34>
   46454:	6860      	ldr	r0, [r4, #4]
   46456:	2112      	movs	r1, #18
   46458:	3008      	adds	r0, #8
   4645a:	f001 fcd3 	bl	47e04 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4645e:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   46460:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   46462:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   46464:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   46468:	3101      	adds	r1, #1
   4646a:	f7fe fd29 	bl	44ec0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4646e:	6863      	ldr	r3, [r4, #4]
   46470:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   46474:	899b      	ldrh	r3, [r3, #12]
   46476:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   46478:	2812      	cmp	r0, #18
   4647a:	e7e3      	b.n	46444 <find_info_cb+0x60>

0004647c <att_chan_mtu_updated>:
{
   4647c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4647e:	6806      	ldr	r6, [r0, #0]
	return list->head;
   46480:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46482:	b1e3      	cbz	r3, 464be <att_chan_mtu_updated+0x42>
	return node->next;
   46484:	681a      	ldr	r2, [r3, #0]
   46486:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   4648a:	b10a      	cbz	r2, 46490 <att_chan_mtu_updated+0x14>
   4648c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   46490:	2300      	movs	r3, #0
   46492:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   46494:	42a8      	cmp	r0, r5
   46496:	d009      	beq.n	464ac <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   46498:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   4649c:	42a1      	cmp	r1, r4
   4649e:	bf38      	it	cc
   464a0:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   464a2:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   464a6:	42a3      	cmp	r3, r4
   464a8:	bf38      	it	cc
   464aa:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   464ac:	b142      	cbz	r2, 464c0 <att_chan_mtu_updated+0x44>
   464ae:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   464b2:	b10c      	cbz	r4, 464b8 <att_chan_mtu_updated+0x3c>
   464b4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   464b8:	4615      	mov	r5, r2
   464ba:	4622      	mov	r2, r4
   464bc:	e7ea      	b.n	46494 <att_chan_mtu_updated+0x18>
   464be:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   464c0:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   464c4:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   464c8:	428c      	cmp	r4, r1
   464ca:	d801      	bhi.n	464d0 <att_chan_mtu_updated+0x54>
   464cc:	429a      	cmp	r2, r3
   464ce:	d909      	bls.n	464e4 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   464d0:	429a      	cmp	r2, r3
   464d2:	bf38      	it	cc
   464d4:	461a      	movcc	r2, r3
   464d6:	42a1      	cmp	r1, r4
   464d8:	6830      	ldr	r0, [r6, #0]
   464da:	bf38      	it	cc
   464dc:	4621      	movcc	r1, r4
}
   464de:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   464e0:	f7e8 ba6c 	b.w	2e9bc <bt_gatt_att_max_mtu_changed>
}
   464e4:	bc70      	pop	{r4, r5, r6}
   464e6:	4770      	bx	lr

000464e8 <attr_read_group_cb>:
	if (!data->rsp->len) {
   464e8:	68d0      	ldr	r0, [r2, #12]
   464ea:	7803      	ldrb	r3, [r0, #0]
   464ec:	3104      	adds	r1, #4
   464ee:	b913      	cbnz	r3, 464f6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   464f0:	7001      	strb	r1, [r0, #0]
	return true;
   464f2:	2001      	movs	r0, #1
}
   464f4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   464f6:	428b      	cmp	r3, r1
   464f8:	d0fb      	beq.n	464f2 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   464fa:	6891      	ldr	r1, [r2, #8]
   464fc:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   464fe:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   46500:	3b04      	subs	r3, #4
   46502:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   46504:	6110      	str	r0, [r2, #16]
		return false;
   46506:	4770      	bx	lr

00046508 <att_get>:
{
   46508:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4650a:	7b43      	ldrb	r3, [r0, #13]
   4650c:	2b07      	cmp	r3, #7
   4650e:	d001      	beq.n	46514 <att_get+0xc>
		return NULL;
   46510:	2000      	movs	r0, #0
}
   46512:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   46514:	2104      	movs	r1, #4
   46516:	f7ff fe48 	bl	461aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4651a:	2800      	cmp	r0, #0
   4651c:	d0f8      	beq.n	46510 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4651e:	f3bf 8f5b 	dmb	ish
   46522:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   46526:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   4652a:	075b      	lsls	r3, r3, #29
   4652c:	d4f0      	bmi.n	46510 <att_get+0x8>
	return att_chan->att;
   4652e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   46532:	e7ee      	b.n	46512 <att_get+0xa>

00046534 <chan_req_sent>:
	if (chan->req) {
   46534:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   46538:	b133      	cbz	r3, 46548 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4653a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4653e:	2300      	movs	r3, #0
   46540:	f500 7088 	add.w	r0, r0, #272	; 0x110
   46544:	f7fb bbf2 	b.w	41d2c <k_work_reschedule>
}
   46548:	4770      	bx	lr

0004654a <write_cb>:
{
   4654a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4654c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4654e:	4601      	mov	r1, r0
{
   46550:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   46552:	222a      	movs	r2, #42	; 0x2a
   46554:	6820      	ldr	r0, [r4, #0]
   46556:	f000 fecf 	bl	472f8 <bt_gatt_check_perm>
   4655a:	4605      	mov	r5, r0
   4655c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4655e:	bb20      	cbnz	r0, 465aa <write_cb+0x60>
	if (!data->req) {
   46560:	7a23      	ldrb	r3, [r4, #8]
   46562:	b1ab      	cbz	r3, 46590 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   46564:	2b18      	cmp	r3, #24
   46566:	bf14      	ite	ne
   46568:	2300      	movne	r3, #0
   4656a:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   4656c:	9301      	str	r3, [sp, #4]
   4656e:	8a63      	ldrh	r3, [r4, #18]
   46570:	9300      	str	r3, [sp, #0]
   46572:	68b7      	ldr	r7, [r6, #8]
   46574:	8a23      	ldrh	r3, [r4, #16]
   46576:	68e2      	ldr	r2, [r4, #12]
   46578:	6820      	ldr	r0, [r4, #0]
   4657a:	4631      	mov	r1, r6
   4657c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   4657e:	1e03      	subs	r3, r0, #0
   46580:	db08      	blt.n	46594 <write_cb+0x4a>
   46582:	8a22      	ldrh	r2, [r4, #16]
   46584:	4293      	cmp	r3, r2
   46586:	d10e      	bne.n	465a6 <write_cb+0x5c>
	data->err = 0U;
   46588:	2300      	movs	r3, #0
   4658a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4658c:	2501      	movs	r5, #1
   4658e:	e007      	b.n	465a0 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   46590:	2302      	movs	r3, #2
   46592:	e7eb      	b.n	4656c <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   46594:	f113 0fff 	cmn.w	r3, #255	; 0xff
   46598:	d305      	bcc.n	465a6 <write_cb+0x5c>
		return -err;
   4659a:	425b      	negs	r3, r3
   4659c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   4659e:	7523      	strb	r3, [r4, #20]
}
   465a0:	4628      	mov	r0, r5
   465a2:	b003      	add	sp, #12
   465a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   465a6:	230e      	movs	r3, #14
   465a8:	e7f9      	b.n	4659e <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   465aa:	2500      	movs	r5, #0
   465ac:	e7f8      	b.n	465a0 <write_cb+0x56>

000465ae <att_chan_read>:
{
   465ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   465b2:	4680      	mov	r8, r0
   465b4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   465b6:	4610      	mov	r0, r2
{
   465b8:	4699      	mov	r9, r3
   465ba:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   465bc:	f7ff fe26 	bl	4620c <net_buf_frags_len>
   465c0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   465c4:	4283      	cmp	r3, r0
{
   465c6:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   465c8:	d97a      	bls.n	466c0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   465ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   465ce:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   465d0:	4630      	mov	r0, r6
   465d2:	f001 fbe9 	bl	47da8 <net_buf_frag_last>
	size_t len, total = 0;
   465d6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   465da:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   465dc:	4630      	mov	r0, r6
   465de:	f7ff fe15 	bl	4620c <net_buf_frags_len>
   465e2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   465e6:	f105 0708 	add.w	r7, r5, #8
   465ea:	1a24      	subs	r4, r4, r0
   465ec:	4638      	mov	r0, r7
   465ee:	f001 fc44 	bl	47e7a <net_buf_simple_tailroom>
   465f2:	4284      	cmp	r4, r0
   465f4:	d211      	bcs.n	4661a <att_chan_read+0x6c>
   465f6:	4630      	mov	r0, r6
   465f8:	f7ff fe08 	bl	4620c <net_buf_frags_len>
   465fc:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   46600:	1a24      	subs	r4, r4, r0
		if (!len) {
   46602:	bb34      	cbnz	r4, 46652 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   46604:	79b0      	ldrb	r0, [r6, #6]
   46606:	f7f6 fdff 	bl	3d208 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4660a:	2200      	movs	r2, #0
   4660c:	2300      	movs	r3, #0
   4660e:	f001 fb97 	bl	47d40 <net_buf_alloc_fixed>
			if (!frag) {
   46612:	4605      	mov	r5, r0
   46614:	b930      	cbnz	r0, 46624 <att_chan_read+0x76>
	return total;
   46616:	4657      	mov	r7, sl
   46618:	e02c      	b.n	46674 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   4661a:	4638      	mov	r0, r7
   4661c:	f001 fc2d 	bl	47e7a <net_buf_simple_tailroom>
   46620:	4604      	mov	r4, r0
   46622:	e7ee      	b.n	46602 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   46624:	4601      	mov	r1, r0
   46626:	4630      	mov	r0, r6
   46628:	f001 fbcf 	bl	47dca <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4662c:	4630      	mov	r0, r6
   4662e:	f7ff fded 	bl	4620c <net_buf_frags_len>
   46632:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   46636:	f105 0708 	add.w	r7, r5, #8
   4663a:	1a24      	subs	r4, r4, r0
   4663c:	4638      	mov	r0, r7
   4663e:	f001 fc1c 	bl	47e7a <net_buf_simple_tailroom>
   46642:	4284      	cmp	r4, r0
   46644:	d21a      	bcs.n	4667c <att_chan_read+0xce>
   46646:	4630      	mov	r0, r6
   46648:	f7ff fde0 	bl	4620c <net_buf_frags_len>
   4664c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   46650:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   46652:	68a9      	ldr	r1, [r5, #8]
   46654:	89aa      	ldrh	r2, [r5, #12]
   46656:	f8db 7004 	ldr.w	r7, [fp, #4]
   4665a:	9803      	ldr	r0, [sp, #12]
   4665c:	f8cd 9000 	str.w	r9, [sp]
   46660:	440a      	add	r2, r1
   46662:	b2a3      	uxth	r3, r4
   46664:	4659      	mov	r1, fp
   46666:	47b8      	blx	r7
		if (read < 0) {
   46668:	1e07      	subs	r7, r0, #0
   4666a:	da0c      	bge.n	46686 <att_chan_read+0xd8>
				return total;
   4666c:	f1ba 0f00 	cmp.w	sl, #0
   46670:	bf18      	it	ne
   46672:	4657      	movne	r7, sl
}
   46674:	4638      	mov	r0, r7
   46676:	b005      	add	sp, #20
   46678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4667c:	4638      	mov	r0, r7
   4667e:	f001 fbfc 	bl	47e7a <net_buf_simple_tailroom>
   46682:	4604      	mov	r4, r0
   46684:	e7e5      	b.n	46652 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   46686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   46688:	b993      	cbnz	r3, 466b0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   4668a:	4639      	mov	r1, r7
   4668c:	f105 0008 	add.w	r0, r5, #8
   46690:	f001 fbb8 	bl	47e04 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   46694:	4630      	mov	r0, r6
   46696:	f7ff fdb9 	bl	4620c <net_buf_frags_len>
   4669a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4669e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   466a0:	4283      	cmp	r3, r0
		total += read;
   466a2:	44ba      	add	sl, r7
		offset += read;
   466a4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   466a8:	d9b5      	bls.n	46616 <att_chan_read+0x68>
   466aa:	42a7      	cmp	r7, r4
   466ac:	d096      	beq.n	465dc <att_chan_read+0x2e>
   466ae:	e7b2      	b.n	46616 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   466b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   466b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   466b4:	4639      	mov	r1, r7
   466b6:	4628      	mov	r0, r5
   466b8:	4798      	blx	r3
   466ba:	2800      	cmp	r0, #0
   466bc:	d1e5      	bne.n	4668a <att_chan_read+0xdc>
   466be:	e7aa      	b.n	46616 <att_chan_read+0x68>
		return 0;
   466c0:	2700      	movs	r7, #0
   466c2:	e7d7      	b.n	46674 <att_chan_read+0xc6>

000466c4 <chan_req_send>:
{
   466c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   466c6:	688f      	ldr	r7, [r1, #8]
{
   466c8:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   466ca:	4638      	mov	r0, r7
   466cc:	f7ff fd9e 	bl	4620c <net_buf_frags_len>
   466d0:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   466d4:	4283      	cmp	r3, r0
{
   466d6:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   466d8:	d30d      	bcc.n	466f6 <chan_req_send+0x32>
	req->buf = NULL;
   466da:	2600      	movs	r6, #0
	chan->req = req;
   466dc:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   466e0:	4632      	mov	r2, r6
	req->buf = NULL;
   466e2:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   466e4:	4620      	mov	r0, r4
   466e6:	4639      	mov	r1, r7
   466e8:	f7e6 fe30 	bl	2d34c <chan_send>
	if (err) {
   466ec:	b110      	cbz	r0, 466f4 <chan_req_send+0x30>
		req->buf = buf;
   466ee:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   466f0:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   466f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   466f6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   466fa:	e7fb      	b.n	466f4 <chan_req_send+0x30>

000466fc <process_queue>:
{
   466fc:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   466fe:	2200      	movs	r2, #0
{
   46700:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   46702:	2300      	movs	r3, #0
   46704:	4608      	mov	r0, r1
{
   46706:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   46708:	f001 fb1f 	bl	47d4a <net_buf_get>
	if (buf) {
   4670c:	4605      	mov	r5, r0
   4670e:	b160      	cbz	r0, 4672a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   46710:	4601      	mov	r1, r0
   46712:	2200      	movs	r2, #0
   46714:	4620      	mov	r0, r4
   46716:	f7e6 fe19 	bl	2d34c <chan_send>
		if (err) {
   4671a:	4604      	mov	r4, r0
   4671c:	b118      	cbz	r0, 46726 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   4671e:	4629      	mov	r1, r5
   46720:	4630      	mov	r0, r6
   46722:	f002 fb79 	bl	48e18 <k_queue_prepend>
}
   46726:	4620      	mov	r0, r4
   46728:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   4672a:	f06f 0401 	mvn.w	r4, #1
   4672e:	e7fa      	b.n	46726 <process_queue+0x2a>

00046730 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   46730:	b510      	push	{r4, lr}
	return list->head;
   46732:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   46734:	2200      	movs	r2, #0
   46736:	b153      	cbz	r3, 4674e <sys_slist_find_and_remove.isra.0+0x1e>
   46738:	428b      	cmp	r3, r1
   4673a:	d10e      	bne.n	4675a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   4673c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4673e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   46740:	b932      	cbnz	r2, 46750 <sys_slist_find_and_remove.isra.0+0x20>
   46742:	42a1      	cmp	r1, r4
	list->head = node;
   46744:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   46746:	d100      	bne.n	4674a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   46748:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4674a:	2300      	movs	r3, #0
   4674c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4674e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   46750:	42a1      	cmp	r1, r4
	parent->next = child;
   46752:	6013      	str	r3, [r2, #0]
	list->tail = node;
   46754:	bf08      	it	eq
   46756:	6042      	streq	r2, [r0, #4]
}
   46758:	e7f7      	b.n	4674a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   4675a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4675c:	681b      	ldr	r3, [r3, #0]
   4675e:	e7ea      	b.n	46736 <sys_slist_find_and_remove.isra.0+0x6>

00046760 <att_exec_write_req>:
   46760:	2006      	movs	r0, #6
   46762:	4770      	bx	lr

00046764 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46764:	30f0      	adds	r0, #240	; 0xf0
   46766:	f3bf 8f5b 	dmb	ish
   4676a:	e850 3f00 	ldrex	r3, [r0]
   4676e:	f023 0301 	bic.w	r3, r3, #1
   46772:	e840 3200 	strex	r2, r3, [r0]
   46776:	2a00      	cmp	r2, #0
   46778:	d1f7      	bne.n	4676a <chan_rsp_sent+0x6>
   4677a:	f3bf 8f5b 	dmb	ish
}
   4677e:	4770      	bx	lr

00046780 <chan_cfm_sent>:
   46780:	30f0      	adds	r0, #240	; 0xf0
   46782:	f3bf 8f5b 	dmb	ish
   46786:	e850 3f00 	ldrex	r3, [r0]
   4678a:	f023 0302 	bic.w	r3, r3, #2
   4678e:	e840 3200 	strex	r2, r3, [r0]
   46792:	2a00      	cmp	r2, #0
   46794:	d1f7      	bne.n	46786 <chan_cfm_sent+0x6>
   46796:	f3bf 8f5b 	dmb	ish
}
   4679a:	4770      	bx	lr

0004679c <read_cb>:
{
   4679c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   467a0:	f8d2 8000 	ldr.w	r8, [r2]
{
   467a4:	4606      	mov	r6, r0
	data->err = 0x00;
   467a6:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   467a8:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   467ac:	7317      	strb	r7, [r2, #12]
{
   467ae:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   467b0:	4631      	mov	r1, r6
   467b2:	2215      	movs	r2, #21
   467b4:	f000 fda0 	bl	472f8 <bt_gatt_check_perm>
   467b8:	4604      	mov	r4, r0
   467ba:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   467bc:	b9a0      	cbnz	r0, 467e8 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   467be:	e9cd 0000 	strd	r0, r0, [sp]
   467c2:	88ab      	ldrh	r3, [r5, #4]
   467c4:	68aa      	ldr	r2, [r5, #8]
   467c6:	4631      	mov	r1, r6
   467c8:	4640      	mov	r0, r8
   467ca:	f7ff fef0 	bl	465ae <att_chan_read>
	if (ret < 0) {
   467ce:	1e03      	subs	r3, r0, #0
   467d0:	da0c      	bge.n	467ec <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   467d2:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   467d6:	bf26      	itte	cs
   467d8:	425b      	negcs	r3, r3
   467da:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   467dc:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   467de:	732b      	strb	r3, [r5, #12]
}
   467e0:	4620      	mov	r0, r4
   467e2:	b002      	add	sp, #8
   467e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   467e8:	463c      	mov	r4, r7
   467ea:	e7f9      	b.n	467e0 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   467ec:	2401      	movs	r4, #1
   467ee:	e7f7      	b.n	467e0 <read_cb+0x44>

000467f0 <bt_att_sent>:
{
   467f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   467f2:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   467f6:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   467fa:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   467fc:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   46800:	b10b      	cbz	r3, 46806 <bt_att_sent+0x16>
		chan->sent(chan);
   46802:	4638      	mov	r0, r7
   46804:	4798      	blx	r3
   46806:	f3bf 8f5b 	dmb	ish
   4680a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4680e:	e853 2f00 	ldrex	r2, [r3]
   46812:	f022 0210 	bic.w	r2, r2, #16
   46816:	e843 2100 	strex	r1, r2, [r3]
   4681a:	2900      	cmp	r1, #0
   4681c:	d1f7      	bne.n	4680e <bt_att_sent+0x1e>
   4681e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   46822:	b30c      	cbz	r4, 46868 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   46824:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   46828:	b98b      	cbnz	r3, 4684e <bt_att_sent+0x5e>
   4682a:	6863      	ldr	r3, [r4, #4]
   4682c:	b17b      	cbz	r3, 4684e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4682e:	1d20      	adds	r0, r4, #4
   46830:	f7ff fce2 	bl	461f8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46834:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   46836:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46838:	4638      	mov	r0, r7
   4683a:	f7ff ff43 	bl	466c4 <chan_req_send>
   4683e:	2800      	cmp	r0, #0
   46840:	da12      	bge.n	46868 <bt_att_sent+0x78>
	parent->next = child;
   46842:	6863      	ldr	r3, [r4, #4]
   46844:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   46846:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   46848:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4684a:	b903      	cbnz	r3, 4684e <bt_att_sent+0x5e>
	list->tail = node;
   4684c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4684e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   46852:	4638      	mov	r0, r7
   46854:	f7ff ff52 	bl	466fc <process_queue>
	if (!err) {
   46858:	b130      	cbz	r0, 46868 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   4685a:	f104 010c 	add.w	r1, r4, #12
   4685e:	4638      	mov	r0, r7
}
   46860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   46864:	f7ff bf4a 	b.w	466fc <process_queue>
}
   46868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004686a <att_req_send_process>:
{
   4686a:	b570      	push	{r4, r5, r6, lr}
   4686c:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   4686e:	3004      	adds	r0, #4
   46870:	f7ff fcc2 	bl	461f8 <sys_slist_get>
	if (!node) {
   46874:	4605      	mov	r5, r0
   46876:	b1b8      	cbz	r0, 468a8 <att_req_send_process+0x3e>
	return list->head;
   46878:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4687a:	b14b      	cbz	r3, 46890 <att_req_send_process+0x26>
	return node->next;
   4687c:	681e      	ldr	r6, [r3, #0]
   4687e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   46882:	b10e      	cbz	r6, 46888 <att_req_send_process+0x1e>
   46884:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   46888:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4688c:	b13b      	cbz	r3, 4689e <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4688e:	b966      	cbnz	r6, 468aa <att_req_send_process+0x40>
	parent->next = child;
   46890:	6863      	ldr	r3, [r4, #4]
   46892:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   46894:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   46896:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   46898:	b933      	cbnz	r3, 468a8 <att_req_send_process+0x3e>
	list->tail = node;
   4689a:	60a5      	str	r5, [r4, #8]
}
   4689c:	e004      	b.n	468a8 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   4689e:	4629      	mov	r1, r5
   468a0:	f7ff ff10 	bl	466c4 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   468a4:	2800      	cmp	r0, #0
   468a6:	dbf2      	blt.n	4688e <att_req_send_process+0x24>
}
   468a8:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   468aa:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   468ae:	b10b      	cbz	r3, 468b4 <att_req_send_process+0x4a>
   468b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   468b4:	4630      	mov	r0, r6
   468b6:	461e      	mov	r6, r3
   468b8:	e7e6      	b.n	46888 <att_req_send_process+0x1e>

000468ba <bt_att_status>:
{
   468ba:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   468bc:	f3bf 8f5b 	dmb	ish
   468c0:	680b      	ldr	r3, [r1, #0]
   468c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   468c6:	07db      	lsls	r3, r3, #31
{
   468c8:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   468ca:	d519      	bpl.n	46900 <bt_att_status+0x46>
	if (!chan->att) {
   468cc:	f850 0c08 	ldr.w	r0, [r0, #-8]
   468d0:	b1b0      	cbz	r0, 46900 <bt_att_status+0x46>
	if (chan->req) {
   468d2:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   468d6:	b99b      	cbnz	r3, 46900 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   468d8:	3004      	adds	r0, #4
   468da:	f7ff fc8d 	bl	461f8 <sys_slist_get>
	if (!node) {
   468de:	4604      	mov	r4, r0
   468e0:	b170      	cbz	r0, 46900 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   468e2:	4601      	mov	r1, r0
   468e4:	f1a5 0008 	sub.w	r0, r5, #8
   468e8:	f7ff feec 	bl	466c4 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   468ec:	2800      	cmp	r0, #0
   468ee:	da07      	bge.n	46900 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   468f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   468f4:	685a      	ldr	r2, [r3, #4]
   468f6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   468f8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   468fa:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   468fc:	b902      	cbnz	r2, 46900 <bt_att_status+0x46>
	list->tail = node;
   468fe:	609c      	str	r4, [r3, #8]
}
   46900:	bd38      	pop	{r3, r4, r5, pc}

00046902 <bt_att_chan_create_pdu>:
{
   46902:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   46904:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   46908:	3201      	adds	r2, #1
   4690a:	429a      	cmp	r2, r3
{
   4690c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4690e:	d81b      	bhi.n	46948 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   46910:	4608      	mov	r0, r1
   46912:	f7ff fc9b 	bl	4624c <att_op_get_type>
   46916:	2802      	cmp	r0, #2
   46918:	d001      	beq.n	4691e <bt_att_chan_create_pdu+0x1c>
   4691a:	2804      	cmp	r0, #4
   4691c:	d10f      	bne.n	4693e <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   4691e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   46922:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   46924:	2100      	movs	r1, #0
   46926:	4608      	mov	r0, r1
   46928:	f7ff fbe7 	bl	460fa <bt_l2cap_create_pdu_timeout>
   4692c:	4604      	mov	r4, r0
	if (!buf) {
   4692e:	b120      	cbz	r0, 4693a <bt_att_chan_create_pdu+0x38>
   46930:	2101      	movs	r1, #1
   46932:	3008      	adds	r0, #8
   46934:	f001 fa66 	bl	47e04 <net_buf_simple_add>
	hdr->code = op;
   46938:	7005      	strb	r5, [r0, #0]
}
   4693a:	4620      	mov	r0, r4
   4693c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4693e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   46942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   46946:	e7ed      	b.n	46924 <bt_att_chan_create_pdu+0x22>
		return NULL;
   46948:	2400      	movs	r4, #0
   4694a:	e7f6      	b.n	4693a <bt_att_chan_create_pdu+0x38>

0004694c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   4694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46950:	4688      	mov	r8, r1
   46952:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   46954:	2101      	movs	r1, #1
   46956:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   46958:	4605      	mov	r5, r0
   4695a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   4695c:	f7ff ffd1 	bl	46902 <bt_att_chan_create_pdu>
	if (!buf) {
   46960:	4604      	mov	r4, r0
   46962:	b170      	cbz	r0, 46982 <send_err_rsp.part.0+0x36>
   46964:	2104      	movs	r1, #4
   46966:	3008      	adds	r0, #8
   46968:	f001 fa4c 	bl	47e04 <net_buf_simple_add>
	rsp->request = req;
   4696c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   46970:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   46972:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   46976:	4621      	mov	r1, r4
   46978:	4628      	mov	r0, r5
}
   4697a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   4697e:	f7e6 bd43 	b.w	2d408 <bt_att_chan_send_rsp.constprop.0>
}
   46982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046986 <att_write_req>:
{
   46986:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46988:	460c      	mov	r4, r1
   4698a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4698c:	f101 0008 	add.w	r0, r1, #8
   46990:	f001 fa67 	bl	47e62 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   46994:	89a2      	ldrh	r2, [r4, #12]
   46996:	9201      	str	r2, [sp, #4]
   46998:	68a2      	ldr	r2, [r4, #8]
   4699a:	9200      	str	r2, [sp, #0]
   4699c:	4603      	mov	r3, r0
   4699e:	2213      	movs	r2, #19
   469a0:	2112      	movs	r1, #18
   469a2:	4628      	mov	r0, r5
   469a4:	f7e6 fe3c 	bl	2d620 <att_write_rsp.constprop.0>
}
   469a8:	b003      	add	sp, #12
   469aa:	bd30      	pop	{r4, r5, pc}

000469ac <att_write_cmd>:
{
   469ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   469ae:	460c      	mov	r4, r1
   469b0:	4605      	mov	r5, r0
   469b2:	f101 0008 	add.w	r0, r1, #8
   469b6:	f001 fa54 	bl	47e62 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   469ba:	89a2      	ldrh	r2, [r4, #12]
   469bc:	9201      	str	r2, [sp, #4]
   469be:	68a2      	ldr	r2, [r4, #8]
   469c0:	9200      	str	r2, [sp, #0]
   469c2:	2200      	movs	r2, #0
   469c4:	4603      	mov	r3, r0
   469c6:	4611      	mov	r1, r2
   469c8:	4628      	mov	r0, r5
   469ca:	f7e6 fe29 	bl	2d620 <att_write_rsp.constprop.0>
}
   469ce:	b003      	add	sp, #12
   469d0:	bd30      	pop	{r4, r5, pc}

000469d2 <bt_att_create_pdu>:
{
   469d2:	b570      	push	{r4, r5, r6, lr}
   469d4:	460e      	mov	r6, r1
   469d6:	4615      	mov	r5, r2
	att = att_get(conn);
   469d8:	f7ff fd96 	bl	46508 <att_get>
	if (!att) {
   469dc:	b168      	cbz	r0, 469fa <bt_att_create_pdu+0x28>
	return list->head;
   469de:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   469e0:	b15b      	cbz	r3, 469fa <bt_att_create_pdu+0x28>
   469e2:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   469e6:	681b      	ldr	r3, [r3, #0]
   469e8:	b10b      	cbz	r3, 469ee <bt_att_create_pdu+0x1c>
   469ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   469ee:	1c6a      	adds	r2, r5, #1
   469f0:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   469f4:	428a      	cmp	r2, r1
   469f6:	d902      	bls.n	469fe <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   469f8:	b93b      	cbnz	r3, 46a0a <bt_att_create_pdu+0x38>
}
   469fa:	2000      	movs	r0, #0
   469fc:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   469fe:	462a      	mov	r2, r5
   46a00:	4631      	mov	r1, r6
}
   46a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   46a06:	f7ff bf7c 	b.w	46902 <bt_att_chan_create_pdu>
   46a0a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46a0e:	b10c      	cbz	r4, 46a14 <bt_att_create_pdu+0x42>
   46a10:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   46a14:	4618      	mov	r0, r3
   46a16:	4623      	mov	r3, r4
   46a18:	e7ea      	b.n	469f0 <bt_att_create_pdu+0x1e>

00046a1a <att_read_blob_req>:
{
   46a1a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   46a1c:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   46a1e:	8813      	ldrh	r3, [r2, #0]
   46a20:	8852      	ldrh	r2, [r2, #2]
   46a22:	9200      	str	r2, [sp, #0]
   46a24:	210c      	movs	r1, #12
   46a26:	220d      	movs	r2, #13
   46a28:	f7e6 ff28 	bl	2d87c <att_read_rsp>
}
   46a2c:	b003      	add	sp, #12
   46a2e:	f85d fb04 	ldr.w	pc, [sp], #4

00046a32 <att_read_req>:
{
   46a32:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   46a34:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   46a36:	2200      	movs	r2, #0
   46a38:	881b      	ldrh	r3, [r3, #0]
   46a3a:	9200      	str	r2, [sp, #0]
   46a3c:	210a      	movs	r1, #10
   46a3e:	220b      	movs	r2, #11
   46a40:	f7e6 ff1c 	bl	2d87c <att_read_rsp>
}
   46a44:	b003      	add	sp, #12
   46a46:	f85d fb04 	ldr.w	pc, [sp], #4

00046a4a <att_mtu_req>:
{
   46a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   46a4c:	6803      	ldr	r3, [r0, #0]
{
   46a4e:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   46a50:	6818      	ldr	r0, [r3, #0]
   46a52:	f3bf 8f5b 	dmb	ish
   46a56:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   46a5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   46a5e:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   46a62:	071b      	lsls	r3, r3, #28
   46a64:	d420      	bmi.n	46aa8 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   46a66:	688b      	ldr	r3, [r1, #8]
   46a68:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   46a6a:	2e16      	cmp	r6, #22
   46a6c:	d91e      	bls.n	46aac <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   46a6e:	2202      	movs	r2, #2
   46a70:	2103      	movs	r1, #3
   46a72:	f7ff ffae 	bl	469d2 <bt_att_create_pdu>
	if (!pdu) {
   46a76:	4607      	mov	r7, r0
   46a78:	b1d0      	cbz	r0, 46ab0 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   46a7a:	2102      	movs	r1, #2
   46a7c:	3008      	adds	r0, #8
   46a7e:	f001 f9c1 	bl	47e04 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   46a82:	2341      	movs	r3, #65	; 0x41
   46a84:	7003      	strb	r3, [r0, #0]
   46a86:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   46a88:	4639      	mov	r1, r7
   46a8a:	4620      	mov	r0, r4
   46a8c:	f7e6 fcbc 	bl	2d408 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   46a90:	2e41      	cmp	r6, #65	; 0x41
   46a92:	bf28      	it	cs
   46a94:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   46a96:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   46a98:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   46a9c:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   46aa0:	f7ff fcec 	bl	4647c <att_chan_mtu_updated>
	return 0;
   46aa4:	4628      	mov	r0, r5
}
   46aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   46aa8:	2006      	movs	r0, #6
   46aaa:	e7fc      	b.n	46aa6 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   46aac:	2004      	movs	r0, #4
   46aae:	e7fa      	b.n	46aa6 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   46ab0:	200e      	movs	r0, #14
   46ab2:	e7f8      	b.n	46aa6 <att_mtu_req+0x5c>

00046ab4 <bt_att_init>:
	bt_gatt_init();
   46ab4:	f7e7 bb22 	b.w	2e0fc <bt_gatt_init>

00046ab8 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   46ab8:	898a      	ldrh	r2, [r1, #12]
   46aba:	6889      	ldr	r1, [r1, #8]
   46abc:	2300      	movs	r3, #0
   46abe:	f7e7 b85b 	b.w	2db78 <att_handle_rsp>

00046ac2 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   46ac2:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   46ac6:	b570      	push	{r4, r5, r6, lr}
   46ac8:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   46aca:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   46ace:	2b00      	cmp	r3, #0
   46ad0:	d037      	beq.n	46b42 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   46ad2:	b171      	cbz	r1, 46af2 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   46ad4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   46ad8:	2b00      	cmp	r3, #0
   46ada:	d032      	beq.n	46b42 <bt_att_encrypt_change+0x80>
   46adc:	7c1b      	ldrb	r3, [r3, #16]
   46ade:	07da      	lsls	r2, r3, #31
   46ae0:	d52f      	bpl.n	46b42 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   46ae2:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   46ae4:	2200      	movs	r2, #0
   46ae6:	4630      	mov	r0, r6
   46ae8:	4611      	mov	r1, r2
}
   46aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   46aee:	f7e7 b843 	b.w	2db78 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   46af2:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   46af4:	4628      	mov	r0, r5
   46af6:	f7e7 ff75 	bl	2e9e4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   46afa:	7a6b      	ldrb	r3, [r5, #9]
   46afc:	2b01      	cmp	r3, #1
   46afe:	d020      	beq.n	46b42 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   46b00:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   46b04:	b1ec      	cbz	r4, 46b42 <bt_att_encrypt_change+0x80>
   46b06:	7c23      	ldrb	r3, [r4, #16]
   46b08:	07db      	lsls	r3, r3, #31
   46b0a:	d51a      	bpl.n	46b42 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   46b0c:	68e3      	ldr	r3, [r4, #12]
   46b0e:	2b00      	cmp	r3, #0
   46b10:	d0e7      	beq.n	46ae2 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   46b12:	6962      	ldr	r2, [r4, #20]
   46b14:	7c61      	ldrb	r1, [r4, #17]
   46b16:	4630      	mov	r0, r6
   46b18:	f7ff fef3 	bl	46902 <bt_att_chan_create_pdu>
	if (!buf) {
   46b1c:	4605      	mov	r5, r0
   46b1e:	b140      	cbz	r0, 46b32 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   46b20:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   46b24:	68e3      	ldr	r3, [r4, #12]
   46b26:	4798      	blx	r3
   46b28:	4602      	mov	r2, r0
   46b2a:	b120      	cbz	r0, 46b36 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   46b2c:	4628      	mov	r0, r5
   46b2e:	f7f6 fc2f 	bl	3d390 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   46b32:	230e      	movs	r3, #14
   46b34:	e7d6      	b.n	46ae4 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   46b36:	4629      	mov	r1, r5
   46b38:	4630      	mov	r0, r6
   46b3a:	f7e6 fc07 	bl	2d34c <chan_send>
   46b3e:	2800      	cmp	r0, #0
   46b40:	d1f4      	bne.n	46b2c <bt_att_encrypt_change+0x6a>
}
   46b42:	bd70      	pop	{r4, r5, r6, pc}

00046b44 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   46b44:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   46b48:	f7e7 b848 	b.w	2dbdc <bt_att_disconnected>

00046b4c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   46b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   46b50:	4607      	mov	r7, r0
   46b52:	460d      	mov	r5, r1
   46b54:	4616      	mov	r6, r2
   46b56:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   46b58:	f7ff fcd6 	bl	46508 <att_get>
	if (!att) {
   46b5c:	4604      	mov	r4, r0
   46b5e:	b938      	cbnz	r0, 46b70 <bt_att_send+0x24>
		net_buf_unref(buf);
   46b60:	4628      	mov	r0, r5
   46b62:	f7f6 fc15 	bl	3d390 <net_buf_unref>
		return -ENOTCONN;
   46b66:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   46b6a:	b002      	add	sp, #8
   46b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   46b70:	b146      	cbz	r6, 46b84 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   46b72:	f8cd 8000 	str.w	r8, [sp]
   46b76:	4633      	mov	r3, r6
   46b78:	462a      	mov	r2, r5
   46b7a:	2104      	movs	r1, #4
   46b7c:	4638      	mov	r0, r7
   46b7e:	f7ff fabf 	bl	46100 <bt_l2cap_send_cb>
   46b82:	e7f2      	b.n	46b6a <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   46b84:	f100 060c 	add.w	r6, r0, #12
   46b88:	4629      	mov	r1, r5
   46b8a:	4630      	mov	r0, r6
   46b8c:	f001 f8fb 	bl	47d86 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   46b90:	2200      	movs	r2, #0
   46b92:	2300      	movs	r3, #0
   46b94:	4630      	mov	r0, r6
   46b96:	f001 f8d8 	bl	47d4a <net_buf_get>
	if (!buf) {
   46b9a:	4605      	mov	r5, r0
   46b9c:	b908      	cbnz	r0, 46ba2 <bt_att_send+0x56>
	return 0;
   46b9e:	2000      	movs	r0, #0
   46ba0:	e7e3      	b.n	46b6a <bt_att_send+0x1e>
	return list->head;
   46ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46ba4:	b1a3      	cbz	r3, 46bd0 <bt_att_send+0x84>
	return node->next;
   46ba6:	681c      	ldr	r4, [r3, #0]
   46ba8:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   46bac:	b10c      	cbz	r4, 46bb2 <bt_att_send+0x66>
   46bae:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   46bb2:	2200      	movs	r2, #0
   46bb4:	4629      	mov	r1, r5
   46bb6:	f7e6 fbc9 	bl	2d34c <chan_send>
		if (err >= 0) {
   46bba:	2800      	cmp	r0, #0
   46bbc:	daef      	bge.n	46b9e <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46bbe:	b13c      	cbz	r4, 46bd0 <bt_att_send+0x84>
   46bc0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   46bc4:	b10b      	cbz	r3, 46bca <bt_att_send+0x7e>
   46bc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   46bca:	4620      	mov	r0, r4
   46bcc:	461c      	mov	r4, r3
   46bce:	e7f0      	b.n	46bb2 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   46bd0:	4629      	mov	r1, r5
   46bd2:	4630      	mov	r0, r6
   46bd4:	f002 f920 	bl	48e18 <k_queue_prepend>
   46bd8:	e7e1      	b.n	46b9e <bt_att_send+0x52>

00046bda <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   46bda:	b510      	push	{r4, lr}
   46bdc:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   46bde:	f7ff fc93 	bl	46508 <att_get>
	if (!att) {
   46be2:	b160      	cbz	r0, 46bfe <bt_att_req_send+0x24>
	parent->next = child;
   46be4:	2300      	movs	r3, #0
   46be6:	6023      	str	r3, [r4, #0]
	return list->tail;
   46be8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   46bea:	b92b      	cbnz	r3, 46bf8 <bt_att_req_send+0x1e>
	list->head = node;
   46bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   46bf0:	f7ff fe3b 	bl	4686a <att_req_send_process>

	return 0;
   46bf4:	2000      	movs	r0, #0
}
   46bf6:	bd10      	pop	{r4, pc}
	parent->next = child;
   46bf8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   46bfa:	6084      	str	r4, [r0, #8]
}
   46bfc:	e7f8      	b.n	46bf0 <bt_att_req_send+0x16>
		return -ENOTCONN;
   46bfe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   46c02:	e7f8      	b.n	46bf6 <bt_att_req_send+0x1c>

00046c04 <gatt_ccc_changed>:
{
   46c04:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   46c06:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   46c08:	895a      	ldrh	r2, [r3, #10]
   46c0a:	428a      	cmp	r2, r1
   46c0c:	d003      	beq.n	46c16 <gatt_ccc_changed+0x12>
		ccc->value = value;
   46c0e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   46c10:	68db      	ldr	r3, [r3, #12]
   46c12:	b103      	cbz	r3, 46c16 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   46c14:	4718      	bx	r3
}
   46c16:	4770      	bx	lr

00046c18 <gatt_indicate_rsp>:
{
   46c18:	b510      	push	{r4, lr}
   46c1a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   46c1c:	68a3      	ldr	r3, [r4, #8]
{
   46c1e:	460a      	mov	r2, r1
	if (params->func) {
   46c20:	b10b      	cbz	r3, 46c26 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   46c22:	4621      	mov	r1, r4
   46c24:	4798      	blx	r3
	params->_ref--;
   46c26:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46c28:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   46c2a:	3b01      	subs	r3, #1
   46c2c:	b2db      	uxtb	r3, r3
   46c2e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46c30:	b122      	cbz	r2, 46c3c <gatt_indicate_rsp+0x24>
   46c32:	b91b      	cbnz	r3, 46c3c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   46c34:	4620      	mov	r0, r4
}
   46c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   46c3a:	4710      	bx	r2
}
   46c3c:	bd10      	pop	{r4, pc}

00046c3e <match_uuid>:
	data->attr = attr;
   46c3e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   46c40:	8091      	strh	r1, [r2, #4]
}
   46c42:	2000      	movs	r0, #0
   46c44:	4770      	bx	lr

00046c46 <ccc_set_cb>:
}
   46c46:	2000      	movs	r0, #0
   46c48:	4770      	bx	lr

00046c4a <atomic_get>:
   46c4a:	f3bf 8f5b 	dmb	ish
   46c4e:	6800      	ldr	r0, [r0, #0]
   46c50:	f3bf 8f5b 	dmb	ish
}
   46c54:	4770      	bx	lr

00046c56 <gen_hash_m>:
{
   46c56:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46c58:	6807      	ldr	r7, [r0, #0]
   46c5a:	783d      	ldrb	r5, [r7, #0]
{
   46c5c:	b089      	sub	sp, #36	; 0x24
   46c5e:	4606      	mov	r6, r0
   46c60:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46c62:	b10d      	cbz	r5, 46c68 <gen_hash_m+0x12>
	switch (u16->val) {
   46c64:	2501      	movs	r5, #1
   46c66:	e014      	b.n	46c92 <gen_hash_m+0x3c>
   46c68:	887b      	ldrh	r3, [r7, #2]
   46c6a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   46c6e:	d004      	beq.n	46c7a <gen_hash_m+0x24>
   46c70:	d812      	bhi.n	46c98 <gen_hash_m+0x42>
   46c72:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   46c76:	2b03      	cmp	r3, #3
   46c78:	d8f4      	bhi.n	46c64 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   46c7a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46c7e:	2202      	movs	r2, #2
   46c80:	f10d 010a 	add.w	r1, sp, #10
   46c84:	4620      	mov	r0, r4
   46c86:	f7fd ffb2 	bl	44bee <tc_cmac_update>
   46c8a:	b9e0      	cbnz	r0, 46cc6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   46c8c:	f06f 0315 	mvn.w	r3, #21
   46c90:	65a3      	str	r3, [r4, #88]	; 0x58
}
   46c92:	4628      	mov	r0, r5
   46c94:	b009      	add	sp, #36	; 0x24
   46c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   46c98:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   46c9c:	33ff      	adds	r3, #255	; 0xff
   46c9e:	b29b      	uxth	r3, r3
   46ca0:	2b04      	cmp	r3, #4
   46ca2:	d8df      	bhi.n	46c64 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   46ca4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46ca8:	2202      	movs	r2, #2
   46caa:	f10d 010a 	add.w	r1, sp, #10
   46cae:	4620      	mov	r0, r4
   46cb0:	f7fd ff9d 	bl	44bee <tc_cmac_update>
   46cb4:	2800      	cmp	r0, #0
   46cb6:	d0e9      	beq.n	46c8c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   46cb8:	887b      	ldrh	r3, [r7, #2]
   46cba:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46cbe:	2202      	movs	r2, #2
   46cc0:	f10d 010a 	add.w	r1, sp, #10
   46cc4:	e016      	b.n	46cf4 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   46cc6:	887b      	ldrh	r3, [r7, #2]
   46cc8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46ccc:	2202      	movs	r2, #2
   46cce:	f10d 010a 	add.w	r1, sp, #10
   46cd2:	4620      	mov	r0, r4
   46cd4:	f7fd ff8b 	bl	44bee <tc_cmac_update>
   46cd8:	2800      	cmp	r0, #0
   46cda:	d0d7      	beq.n	46c8c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   46cdc:	2000      	movs	r0, #0
   46cde:	aa03      	add	r2, sp, #12
   46ce0:	6877      	ldr	r7, [r6, #4]
   46ce2:	9000      	str	r0, [sp, #0]
   46ce4:	2313      	movs	r3, #19
   46ce6:	4631      	mov	r1, r6
   46ce8:	47b8      	blx	r7
		if (len < 0) {
   46cea:	1e02      	subs	r2, r0, #0
   46cec:	da01      	bge.n	46cf2 <gen_hash_m+0x9c>
			state->err = len;
   46cee:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   46cf0:	e7cf      	b.n	46c92 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   46cf2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46cf4:	4620      	mov	r0, r4
   46cf6:	f7fd ff7a 	bl	44bee <tc_cmac_update>
   46cfa:	2800      	cmp	r0, #0
   46cfc:	d1b2      	bne.n	46c64 <gen_hash_m+0xe>
   46cfe:	e7c5      	b.n	46c8c <gen_hash_m+0x36>

00046d00 <atomic_or>:
{
   46d00:	4603      	mov	r3, r0
}
   46d02:	f3bf 8f5b 	dmb	ish
   46d06:	e853 0f00 	ldrex	r0, [r3]
   46d0a:	ea40 0201 	orr.w	r2, r0, r1
   46d0e:	e843 2c00 	strex	ip, r2, [r3]
   46d12:	f1bc 0f00 	cmp.w	ip, #0
   46d16:	d1f6      	bne.n	46d06 <atomic_or+0x6>
   46d18:	f3bf 8f5b 	dmb	ish
   46d1c:	4770      	bx	lr

00046d1e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   46d1e:	2207      	movs	r2, #7
   46d20:	f7fe b8ce 	b.w	44ec0 <memcpy>

00046d24 <cf_write>:
{
   46d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46d28:	4698      	mov	r8, r3
   46d2a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   46d2e:	2b01      	cmp	r3, #1
{
   46d30:	4606      	mov	r6, r0
   46d32:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   46d34:	d830      	bhi.n	46d98 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   46d36:	4443      	add	r3, r8
   46d38:	2b01      	cmp	r3, #1
   46d3a:	4645      	mov	r5, r8
   46d3c:	dc2f      	bgt.n	46d9e <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   46d3e:	f7e6 ffb3 	bl	2dca8 <find_cf_cfg>
	if (!cfg) {
   46d42:	4604      	mov	r4, r0
   46d44:	b918      	cbnz	r0, 46d4e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   46d46:	f7e6 ffaf 	bl	2dca8 <find_cf_cfg>
	if (!cfg) {
   46d4a:	4604      	mov	r4, r0
   46d4c:	b350      	cbz	r0, 46da4 <cf_write+0x80>
{
   46d4e:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   46d50:	f1b8 0f00 	cmp.w	r8, #0
   46d54:	d10e      	bne.n	46d74 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   46d56:	f106 0188 	add.w	r1, r6, #136	; 0x88
   46d5a:	1c60      	adds	r0, r4, #1
   46d5c:	f7ff ffdf 	bl	46d1e <bt_addr_le_copy>
	cfg->id = conn->id;
   46d60:	4620      	mov	r0, r4
   46d62:	7a33      	ldrb	r3, [r6, #8]
   46d64:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   46d68:	2101      	movs	r1, #1
   46d6a:	f7ff ffc9 	bl	46d00 <atomic_or>
}
   46d6e:	4628      	mov	r0, r5
   46d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46d74:	7a20      	ldrb	r0, [r4, #8]
   46d76:	fa20 f301 	lsr.w	r3, r0, r1
   46d7a:	07da      	lsls	r2, r3, #31
   46d7c:	d503      	bpl.n	46d86 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   46d7e:	783b      	ldrb	r3, [r7, #0]
   46d80:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46d82:	07db      	lsls	r3, r3, #31
   46d84:	d511      	bpl.n	46daa <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   46d86:	3101      	adds	r1, #1
   46d88:	2903      	cmp	r1, #3
   46d8a:	d1e1      	bne.n	46d50 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   46d8c:	783b      	ldrb	r3, [r7, #0]
   46d8e:	f003 0307 	and.w	r3, r3, #7
   46d92:	4318      	orrs	r0, r3
   46d94:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   46d96:	e7de      	b.n	46d56 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46d98:	f06f 0506 	mvn.w	r5, #6
   46d9c:	e7e7      	b.n	46d6e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   46d9e:	f06f 050c 	mvn.w	r5, #12
   46da2:	e7e4      	b.n	46d6e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   46da4:	f06f 0510 	mvn.w	r5, #16
   46da8:	e7e1      	b.n	46d6e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   46daa:	f06f 0512 	mvn.w	r5, #18
   46dae:	e7de      	b.n	46d6e <cf_write+0x4a>

00046db0 <clear_ccc_cfg>:
{
   46db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46db2:	2500      	movs	r5, #0
{
   46db4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46db6:	4669      	mov	r1, sp
   46db8:	3001      	adds	r0, #1
   46dba:	9500      	str	r5, [sp, #0]
   46dbc:	f8cd 5003 	str.w	r5, [sp, #3]
   46dc0:	f7ff ffad 	bl	46d1e <bt_addr_le_copy>
	cfg->id = 0U;
   46dc4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   46dc6:	8125      	strh	r5, [r4, #8]
}
   46dc8:	b003      	add	sp, #12
   46dca:	bd30      	pop	{r4, r5, pc}

00046dcc <atomic_and>:
{
   46dcc:	4603      	mov	r3, r0
}
   46dce:	f3bf 8f5b 	dmb	ish
   46dd2:	e853 0f00 	ldrex	r0, [r3]
   46dd6:	ea00 0201 	and.w	r2, r0, r1
   46dda:	e843 2c00 	strex	ip, r2, [r3]
   46dde:	f1bc 0f00 	cmp.w	ip, #0
   46de2:	d1f6      	bne.n	46dd2 <atomic_and+0x6>
   46de4:	f3bf 8f5b 	dmb	ish
   46de8:	4770      	bx	lr

00046dea <clear_cf_cfg>:
{
   46dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46dec:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46dee:	2500      	movs	r5, #0
   46df0:	4669      	mov	r1, sp
   46df2:	3001      	adds	r0, #1
   46df4:	9500      	str	r5, [sp, #0]
   46df6:	f8cd 5003 	str.w	r5, [sp, #3]
   46dfa:	f7ff ff90 	bl	46d1e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   46dfe:	f104 0008 	add.w	r0, r4, #8
   46e02:	2201      	movs	r2, #1
   46e04:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   46e06:	340c      	adds	r4, #12
   46e08:	f7fe f865 	bl	44ed6 <memset>
   46e0c:	f3bf 8f5b 	dmb	ish
   46e10:	e854 3f00 	ldrex	r3, [r4]
   46e14:	e844 5200 	strex	r2, r5, [r4]
   46e18:	2a00      	cmp	r2, #0
   46e1a:	d1f9      	bne.n	46e10 <clear_cf_cfg+0x26>
   46e1c:	f3bf 8f5b 	dmb	ish
}
   46e20:	b003      	add	sp, #12
   46e22:	bd30      	pop	{r4, r5, pc}

00046e24 <read_ppcp>:
{
   46e24:	b513      	push	{r0, r1, r4, lr}
   46e26:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   46e28:	2206      	movs	r2, #6
{
   46e2a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   46e2e:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   46e32:	220c      	movs	r2, #12
   46e34:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   46e38:	221e      	movs	r2, #30
   46e3a:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   46e3e:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   46e40:	f44f 72c8 	mov.w	r2, #400	; 0x190
   46e44:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   46e48:	d80b      	bhi.n	46e62 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   46e4a:	f1c1 0408 	rsb	r4, r1, #8
   46e4e:	429c      	cmp	r4, r3
   46e50:	bfa8      	it	ge
   46e52:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   46e54:	4622      	mov	r2, r4
   46e56:	4469      	add	r1, sp
   46e58:	f7fe f832 	bl	44ec0 <memcpy>
}
   46e5c:	4620      	mov	r0, r4
   46e5e:	b002      	add	sp, #8
   46e60:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46e62:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   46e66:	e7f9      	b.n	46e5c <read_ppcp+0x38>

00046e68 <read_appearance>:
{
   46e68:	b513      	push	{r0, r1, r4, lr}
   46e6a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   46e6e:	4610      	mov	r0, r2
	if (offset > value_len) {
   46e70:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   46e72:	f240 32c1 	movw	r2, #961	; 0x3c1
   46e76:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   46e7a:	d80d      	bhi.n	46e98 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   46e7c:	f1c1 0402 	rsb	r4, r1, #2
   46e80:	429c      	cmp	r4, r3
   46e82:	bfa8      	it	ge
   46e84:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   46e86:	f10d 0306 	add.w	r3, sp, #6
   46e8a:	4622      	mov	r2, r4
   46e8c:	4419      	add	r1, r3
   46e8e:	f7fe f817 	bl	44ec0 <memcpy>
}
   46e92:	4620      	mov	r0, r4
   46e94:	b002      	add	sp, #8
   46e96:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46e98:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   46e9c:	e7f9      	b.n	46e92 <read_appearance+0x2a>

00046e9e <read_name>:
{
   46e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46ea2:	4698      	mov	r8, r3
   46ea4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   46ea8:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   46eaa:	f7e4 fd91 	bl	2b9d0 <bt_get_name>
   46eae:	4607      	mov	r7, r0
				 strlen(name));
   46eb0:	f7fd ffd1 	bl	44e56 <strlen>
	if (offset > value_len) {
   46eb4:	b283      	uxth	r3, r0
   46eb6:	42b3      	cmp	r3, r6
   46eb8:	d30c      	bcc.n	46ed4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   46eba:	1b9c      	subs	r4, r3, r6
   46ebc:	4544      	cmp	r4, r8
   46ebe:	bfa8      	it	ge
   46ec0:	4644      	movge	r4, r8
   46ec2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   46ec4:	4622      	mov	r2, r4
   46ec6:	19b9      	adds	r1, r7, r6
   46ec8:	4628      	mov	r0, r5
   46eca:	f7fd fff9 	bl	44ec0 <memcpy>
}
   46ece:	4620      	mov	r0, r4
   46ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46ed4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   46ed8:	e7f9      	b.n	46ece <read_name+0x30>

00046eda <cf_read>:
{
   46eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46edc:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   46ede:	2300      	movs	r3, #0
{
   46ee0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   46ee4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   46ee8:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   46eea:	f7e6 fedd 	bl	2dca8 <find_cf_cfg>
	if (cfg) {
   46eee:	b128      	cbz	r0, 46efc <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   46ef0:	f100 0108 	add.w	r1, r0, #8
   46ef4:	2201      	movs	r2, #1
   46ef6:	a801      	add	r0, sp, #4
   46ef8:	f7fd ffe2 	bl	44ec0 <memcpy>
	if (offset > value_len) {
   46efc:	2e01      	cmp	r6, #1
   46efe:	d80d      	bhi.n	46f1c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   46f00:	f1c6 0401 	rsb	r4, r6, #1
   46f04:	42bc      	cmp	r4, r7
   46f06:	bfa8      	it	ge
   46f08:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46f0a:	ab01      	add	r3, sp, #4
   46f0c:	4622      	mov	r2, r4
   46f0e:	1999      	adds	r1, r3, r6
   46f10:	4628      	mov	r0, r5
   46f12:	f7fd ffd5 	bl	44ec0 <memcpy>
}
   46f16:	4620      	mov	r0, r4
   46f18:	b003      	add	sp, #12
   46f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46f1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   46f20:	e7f9      	b.n	46f16 <cf_read+0x3c>

00046f22 <bt_gatt_attr_read_service>:
{
   46f22:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   46f24:	68c9      	ldr	r1, [r1, #12]
{
   46f26:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   46f2a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   46f2c:	780b      	ldrb	r3, [r1, #0]
{
   46f2e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   46f30:	b993      	cbnz	r3, 46f58 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   46f32:	884b      	ldrh	r3, [r1, #2]
   46f34:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   46f38:	2d02      	cmp	r5, #2
   46f3a:	d819      	bhi.n	46f70 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   46f3c:	f1c5 0202 	rsb	r2, r5, #2
   46f40:	4294      	cmp	r4, r2
   46f42:	bfa8      	it	ge
   46f44:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   46f46:	f10d 0306 	add.w	r3, sp, #6
   46f4a:	4622      	mov	r2, r4
   46f4c:	1959      	adds	r1, r3, r5
   46f4e:	f7fd ffb7 	bl	44ec0 <memcpy>
}
   46f52:	4620      	mov	r0, r4
   46f54:	b003      	add	sp, #12
   46f56:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   46f58:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   46f5a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   46f5e:	d807      	bhi.n	46f70 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   46f60:	f1c5 0210 	rsb	r2, r5, #16
   46f64:	4294      	cmp	r4, r2
   46f66:	bfa8      	it	ge
   46f68:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   46f6a:	4622      	mov	r2, r4
   46f6c:	4429      	add	r1, r5
   46f6e:	e7ee      	b.n	46f4e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46f70:	f06f 0406 	mvn.w	r4, #6
   46f74:	e7ed      	b.n	46f52 <bt_gatt_attr_read_service+0x30>

00046f76 <cf_set>:
{
   46f76:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   46f7a:	4688      	mov	r8, r1
   46f7c:	4616      	mov	r6, r2
   46f7e:	461f      	mov	r7, r3
	if (!name) {
   46f80:	4605      	mov	r5, r0
   46f82:	b928      	cbnz	r0, 46f90 <cf_set+0x1a>
		return -EINVAL;
   46f84:	f06f 0415 	mvn.w	r4, #21
}
   46f88:	4620      	mov	r0, r4
   46f8a:	b004      	add	sp, #16
   46f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   46f90:	a902      	add	r1, sp, #8
   46f92:	f7fe f85d 	bl	45050 <bt_settings_decode_key>
	if (err) {
   46f96:	4604      	mov	r4, r0
   46f98:	2800      	cmp	r0, #0
   46f9a:	d1f3      	bne.n	46f84 <cf_set+0xe>
	settings_name_next(name, &next);
   46f9c:	a901      	add	r1, sp, #4
   46f9e:	4628      	mov	r0, r5
   46fa0:	f7fc fcc3 	bl	4392a <settings_name_next>
	if (!next) {
   46fa4:	9801      	ldr	r0, [sp, #4]
   46fa6:	b9d0      	cbnz	r0, 46fde <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   46fa8:	a902      	add	r1, sp, #8
   46faa:	2000      	movs	r0, #0
   46fac:	f7e6 fee6 	bl	2dd7c <find_cf_cfg_by_addr>
	if (!cfg) {
   46fb0:	4605      	mov	r5, r0
   46fb2:	b948      	cbnz	r0, 46fc8 <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   46fb4:	f7e6 fe78 	bl	2dca8 <find_cf_cfg>
		if (!cfg) {
   46fb8:	4605      	mov	r5, r0
   46fba:	b1d8      	cbz	r0, 46ff4 <cf_set+0x7e>
		cfg->id = id;
   46fbc:	2300      	movs	r3, #0
   46fbe:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   46fc2:	a902      	add	r1, sp, #8
   46fc4:	f7ff feab 	bl	46d1e <bt_addr_le_copy>
	if (len_rd) {
   46fc8:	f1b8 0f00 	cmp.w	r8, #0
   46fcc:	d00e      	beq.n	46fec <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   46fce:	2201      	movs	r2, #1
   46fd0:	f105 0108 	add.w	r1, r5, #8
   46fd4:	4638      	mov	r0, r7
   46fd6:	47b0      	blx	r6
		if (len < 0) {
   46fd8:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   46fdc:	e7d4      	b.n	46f88 <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   46fde:	220a      	movs	r2, #10
   46fe0:	4621      	mov	r1, r4
   46fe2:	f7fd feb5 	bl	44d50 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   46fe6:	2800      	cmp	r0, #0
   46fe8:	d0de      	beq.n	46fa8 <cf_set+0x32>
   46fea:	e7cb      	b.n	46f84 <cf_set+0xe>
		clear_cf_cfg(cfg);
   46fec:	4628      	mov	r0, r5
   46fee:	f7ff fefc 	bl	46dea <clear_cf_cfg>
   46ff2:	e7c9      	b.n	46f88 <cf_set+0x12>
			return -ENOMEM;
   46ff4:	f06f 040b 	mvn.w	r4, #11
   46ff8:	e7c6      	b.n	46f88 <cf_set+0x12>

00046ffa <ccc_find_cfg>:
{
   46ffa:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   46ffc:	7803      	ldrb	r3, [r0, #0]
   46ffe:	4293      	cmp	r3, r2
{
   47000:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   47002:	d001      	beq.n	47008 <ccc_find_cfg+0xe>
	return NULL;
   47004:	2000      	movs	r0, #0
}
   47006:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   47008:	2207      	movs	r2, #7
   4700a:	3001      	adds	r0, #1
   4700c:	f7fd ff47 	bl	44e9e <memcmp>
		if (id == ccc->cfg[i].id &&
   47010:	2800      	cmp	r0, #0
   47012:	d1f7      	bne.n	47004 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   47014:	4620      	mov	r0, r4
   47016:	e7f6      	b.n	47006 <ccc_find_cfg+0xc>

00047018 <find_ccc_cfg>:
{
   47018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4701a:	460c      	mov	r4, r1
						    &cfg->peer)) {
   4701c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   4701e:	b148      	cbz	r0, 47034 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   47020:	7809      	ldrb	r1, [r1, #0]
   47022:	462a      	mov	r2, r5
   47024:	f7fe ff97 	bl	45f56 <bt_conn_is_peer_addr_le>
	return NULL;
   47028:	2800      	cmp	r0, #0
   4702a:	bf08      	it	eq
   4702c:	2400      	moveq	r4, #0
}
   4702e:	4620      	mov	r0, r4
   47030:	b003      	add	sp, #12
   47032:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   47034:	9000      	str	r0, [sp, #0]
   47036:	2207      	movs	r2, #7
   47038:	f8cd 0003 	str.w	r0, [sp, #3]
   4703c:	4669      	mov	r1, sp
   4703e:	4628      	mov	r0, r5
   47040:	f7fd ff2d 	bl	44e9e <memcmp>
	return NULL;
   47044:	2800      	cmp	r0, #0
   47046:	bf18      	it	ne
   47048:	2400      	movne	r4, #0
   4704a:	e7f0      	b.n	4702e <find_ccc_cfg+0x16>

0004704c <bt_gatt_attr_read_ccc>:
{
   4704c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4704e:	68c9      	ldr	r1, [r1, #12]
{
   47050:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   47054:	4615      	mov	r5, r2
   47056:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   47058:	f7ff ffde 	bl	47018 <find_ccc_cfg>
	if (cfg) {
   4705c:	b100      	cbz	r0, 47060 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4705e:	8900      	ldrh	r0, [r0, #8]
   47060:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   47064:	2e02      	cmp	r6, #2
   47066:	d80e      	bhi.n	47086 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   47068:	f1c6 0402 	rsb	r4, r6, #2
   4706c:	42bc      	cmp	r4, r7
   4706e:	bfa8      	it	ge
   47070:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   47072:	f10d 0306 	add.w	r3, sp, #6
   47076:	4622      	mov	r2, r4
   47078:	1999      	adds	r1, r3, r6
   4707a:	4628      	mov	r0, r5
   4707c:	f7fd ff20 	bl	44ec0 <memcpy>
}
   47080:	4620      	mov	r0, r4
   47082:	b003      	add	sp, #12
   47084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   47086:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   4708a:	e7f9      	b.n	47080 <bt_gatt_attr_read_ccc+0x34>

0004708c <sc_save>:
{
   4708c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47090:	4680      	mov	r8, r0
   47092:	460f      	mov	r7, r1
   47094:	4616      	mov	r6, r2
   47096:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   47098:	f7e6 ff7e 	bl	2df98 <find_sc_cfg>
	if (!cfg) {
   4709c:	4604      	mov	r4, r0
   4709e:	b960      	cbnz	r0, 470ba <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   470a0:	4669      	mov	r1, sp
   470a2:	9000      	str	r0, [sp, #0]
   470a4:	f8cd 0003 	str.w	r0, [sp, #3]
   470a8:	f7e6 ff76 	bl	2df98 <find_sc_cfg>
		if (!cfg) {
   470ac:	4604      	mov	r4, r0
   470ae:	b1d0      	cbz	r0, 470e6 <sc_save+0x5a>
		cfg->id = id;
   470b0:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   470b4:	4639      	mov	r1, r7
   470b6:	f7ff fe32 	bl	46d1e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   470ba:	8922      	ldrh	r2, [r4, #8]
   470bc:	8963      	ldrh	r3, [r4, #10]
   470be:	b972      	cbnz	r2, 470de <sc_save+0x52>
   470c0:	b97b      	cbnz	r3, 470e2 <sc_save+0x56>
		cfg->data.start = start;
   470c2:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   470c4:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   470c6:	4621      	mov	r1, r4
   470c8:	f811 0b01 	ldrb.w	r0, [r1], #1
   470cc:	f7fe fb9f 	bl	4580e <bt_addr_le_is_bonded>
   470d0:	b148      	cbz	r0, 470e6 <sc_save+0x5a>
		sc_store(cfg);
   470d2:	4620      	mov	r0, r4
}
   470d4:	b002      	add	sp, #8
   470d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   470da:	f7e6 be07 	b.w	2dcec <sc_store>
	if (new_start >= *start && new_end <= *end) {
   470de:	4296      	cmp	r6, r2
   470e0:	d304      	bcc.n	470ec <sc_save+0x60>
   470e2:	429d      	cmp	r5, r3
   470e4:	d8ee      	bhi.n	470c4 <sc_save+0x38>
}
   470e6:	b002      	add	sp, #8
   470e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   470ec:	429d      	cmp	r5, r3
		*start = new_start;
   470ee:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   470f0:	d9e9      	bls.n	470c6 <sc_save+0x3a>
   470f2:	e7e7      	b.n	470c4 <sc_save+0x38>

000470f4 <sc_clear>:
{
   470f4:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   470f6:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   470fa:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   470fc:	4631      	mov	r1, r6
   470fe:	7a00      	ldrb	r0, [r0, #8]
   47100:	f7fe fb85 	bl	4580e <bt_addr_le_is_bonded>
   47104:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   47106:	4631      	mov	r1, r6
   47108:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4710a:	b11d      	cbz	r5, 47114 <sc_clear+0x20>
}
   4710c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   47110:	f7e6 bf64 	b.w	2dfdc <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   47114:	f7e6 ff40 	bl	2df98 <find_sc_cfg>
		if (cfg) {
   47118:	b128      	cbz	r0, 47126 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   4711a:	4629      	mov	r1, r5
   4711c:	220c      	movs	r2, #12
}
   4711e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   47122:	f7fd bed8 	b.w	44ed6 <memset>
}
   47126:	bd70      	pop	{r4, r5, r6, pc}

00047128 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   47128:	2a02      	cmp	r2, #2
{
   4712a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   4712c:	d108      	bne.n	47140 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   4712e:	2300      	movs	r3, #0
   47130:	f100 0188 	add.w	r1, r0, #136	; 0x88
   47134:	461a      	mov	r2, r3
   47136:	7a00      	ldrb	r0, [r0, #8]
   47138:	f7ff ffa8 	bl	4708c <sc_save>
}
   4713c:	2002      	movs	r0, #2
   4713e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   47140:	f7ff ffd8 	bl	470f4 <sc_clear>
   47144:	e7fa      	b.n	4713c <sc_ccc_cfg_write+0x14>

00047146 <sc_set>:
{
   47146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4714a:	460e      	mov	r6, r1
   4714c:	b086      	sub	sp, #24
   4714e:	4617      	mov	r7, r2
   47150:	4698      	mov	r8, r3
	if (!name) {
   47152:	4605      	mov	r5, r0
   47154:	b928      	cbnz	r0, 47162 <sc_set+0x1c>
		return -EINVAL;
   47156:	f06f 0415 	mvn.w	r4, #21
}
   4715a:	4620      	mov	r0, r4
   4715c:	b006      	add	sp, #24
   4715e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   47162:	a902      	add	r1, sp, #8
   47164:	f7fd ff74 	bl	45050 <bt_settings_decode_key>
	if (err) {
   47168:	4604      	mov	r4, r0
   4716a:	2800      	cmp	r0, #0
   4716c:	d1f3      	bne.n	47156 <sc_set+0x10>
	settings_name_next(name, &next);
   4716e:	a901      	add	r1, sp, #4
   47170:	4628      	mov	r0, r5
   47172:	f7fc fbda 	bl	4392a <settings_name_next>
	if (!next) {
   47176:	9801      	ldr	r0, [sp, #4]
   47178:	b998      	cbnz	r0, 471a2 <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   4717a:	a902      	add	r1, sp, #8
   4717c:	2000      	movs	r0, #0
   4717e:	f7e6 ff0b 	bl	2df98 <find_sc_cfg>
	if (!cfg && len_rd) {
   47182:	4605      	mov	r5, r0
   47184:	bb08      	cbnz	r0, 471ca <sc_set+0x84>
   47186:	2e00      	cmp	r6, #0
   47188:	d0e7      	beq.n	4715a <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4718a:	a904      	add	r1, sp, #16
   4718c:	9004      	str	r0, [sp, #16]
   4718e:	4604      	mov	r4, r0
   47190:	f8cd 0013 	str.w	r0, [sp, #19]
   47194:	f7e6 ff00 	bl	2df98 <find_sc_cfg>
		if (!cfg) {
   47198:	4605      	mov	r5, r0
   4719a:	b948      	cbnz	r0, 471b0 <sc_set+0x6a>
			return -ENOMEM;
   4719c:	f06f 040b 	mvn.w	r4, #11
   471a0:	e7db      	b.n	4715a <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   471a2:	220a      	movs	r2, #10
   471a4:	4621      	mov	r1, r4
   471a6:	f7fd fdd3 	bl	44d50 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   471aa:	2800      	cmp	r0, #0
   471ac:	d0e5      	beq.n	4717a <sc_set+0x34>
   471ae:	e7d2      	b.n	47156 <sc_set+0x10>
		cfg->id = id;
   471b0:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   471b4:	a902      	add	r1, sp, #8
   471b6:	f7ff fdb2 	bl	46d1e <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   471ba:	2204      	movs	r2, #4
   471bc:	f105 0108 	add.w	r1, r5, #8
   471c0:	4640      	mov	r0, r8
   471c2:	47b8      	blx	r7
		if (len < 0) {
   471c4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   471c8:	e7c7      	b.n	4715a <sc_set+0x14>
	if (len_rd) {
   471ca:	2e00      	cmp	r6, #0
   471cc:	d1f5      	bne.n	471ba <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   471ce:	220c      	movs	r2, #12
   471d0:	4631      	mov	r1, r6
   471d2:	f7fd fe80 	bl	44ed6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   471d6:	e7c0      	b.n	4715a <sc_set+0x14>

000471d8 <sc_restore_rsp>:
{
   471d8:	b538      	push	{r3, r4, r5, lr}
   471da:	4604      	mov	r4, r0
   471dc:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   471de:	f7e6 fd63 	bl	2dca8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   471e2:	b130      	cbz	r0, 471f2 <sc_restore_rsp+0x1a>
   471e4:	7a03      	ldrb	r3, [r0, #8]
   471e6:	07db      	lsls	r3, r3, #31
   471e8:	d503      	bpl.n	471f2 <sc_restore_rsp+0x1a>
   471ea:	2101      	movs	r1, #1
   471ec:	300c      	adds	r0, #12
   471ee:	f7ff fd87 	bl	46d00 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   471f2:	b985      	cbnz	r5, 47216 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   471f4:	7a20      	ldrb	r0, [r4, #8]
   471f6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   471fa:	f7e6 fecd 	bl	2df98 <find_sc_cfg>
		if (sc_cfg) {
   471fe:	4604      	mov	r4, r0
   47200:	b148      	cbz	r0, 47216 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   47202:	4629      	mov	r1, r5
   47204:	2204      	movs	r2, #4
   47206:	3008      	adds	r0, #8
   47208:	f7fd fe65 	bl	44ed6 <memset>
		sc_store(cfg);
   4720c:	4620      	mov	r0, r4
}
   4720e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   47212:	f7e6 bd6b 	b.w	2dcec <sc_store>
}
   47216:	bd38      	pop	{r3, r4, r5, pc}

00047218 <bt_gatt_attr_read>:
{
   47218:	b538      	push	{r3, r4, r5, lr}
   4721a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4721e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   47222:	42a9      	cmp	r1, r5
{
   47224:	4610      	mov	r0, r2
	if (offset > value_len) {
   47226:	d80b      	bhi.n	47240 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   47228:	1a6d      	subs	r5, r5, r1
   4722a:	429d      	cmp	r5, r3
   4722c:	bfa8      	it	ge
   4722e:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   47230:	9b05      	ldr	r3, [sp, #20]
   47232:	b2ad      	uxth	r5, r5
   47234:	462a      	mov	r2, r5
   47236:	4419      	add	r1, r3
   47238:	f7fd fe42 	bl	44ec0 <memcpy>
}
   4723c:	4628      	mov	r0, r5
   4723e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   47240:	f06f 0506 	mvn.w	r5, #6
   47244:	e7fa      	b.n	4723c <bt_gatt_attr_read+0x24>

00047246 <bt_gatt_attr_value_handle>:
{
   47246:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   47248:	4604      	mov	r4, r0
   4724a:	b910      	cbnz	r0, 47252 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   4724c:	2000      	movs	r0, #0
}
   4724e:	b002      	add	sp, #8
   47250:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   47252:	2300      	movs	r3, #0
   47254:	f88d 3004 	strb.w	r3, [sp, #4]
   47258:	6800      	ldr	r0, [r0, #0]
   4725a:	f642 0303 	movw	r3, #10243	; 0x2803
   4725e:	a901      	add	r1, sp, #4
   47260:	f8ad 3006 	strh.w	r3, [sp, #6]
   47264:	f7fd ff1a 	bl	4509c <bt_uuid_cmp>
   47268:	2800      	cmp	r0, #0
   4726a:	d1ef      	bne.n	4724c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   4726c:	68e3      	ldr	r3, [r4, #12]
   4726e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   47270:	2800      	cmp	r0, #0
   47272:	d1ec      	bne.n	4724e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   47274:	4620      	mov	r0, r4
   47276:	f7e6 ffa5 	bl	2e1c4 <bt_gatt_attr_get_handle>
   4727a:	3001      	adds	r0, #1
   4727c:	b280      	uxth	r0, r0
	return handle;
   4727e:	e7e6      	b.n	4724e <bt_gatt_attr_value_handle+0x8>

00047280 <bt_gatt_attr_read_chrc>:
{
   47280:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   47282:	68cf      	ldr	r7, [r1, #12]
{
   47284:	b087      	sub	sp, #28
   47286:	4608      	mov	r0, r1
   47288:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   4728a:	79bb      	ldrb	r3, [r7, #6]
   4728c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   47290:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   47294:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   47296:	f7ff ffd6 	bl	47246 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4729a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4729c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   472a0:	780b      	ldrb	r3, [r1, #0]
   472a2:	b99b      	cbnz	r3, 472cc <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   472a4:	884b      	ldrh	r3, [r1, #2]
   472a6:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   472aa:	2105      	movs	r1, #5
	if (offset > value_len) {
   472ac:	42b1      	cmp	r1, r6
   472ae:	d315      	bcc.n	472dc <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   472b0:	1b89      	subs	r1, r1, r6
   472b2:	42a1      	cmp	r1, r4
   472b4:	bfa8      	it	ge
   472b6:	4621      	movge	r1, r4
   472b8:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   472ba:	ab01      	add	r3, sp, #4
   472bc:	4622      	mov	r2, r4
   472be:	1999      	adds	r1, r3, r6
   472c0:	4628      	mov	r0, r5
   472c2:	f7fd fdfd 	bl	44ec0 <memcpy>
}
   472c6:	4620      	mov	r0, r4
   472c8:	b007      	add	sp, #28
   472ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   472cc:	3101      	adds	r1, #1
   472ce:	2210      	movs	r2, #16
   472d0:	f10d 0007 	add.w	r0, sp, #7
   472d4:	f7fd fdf4 	bl	44ec0 <memcpy>
		value_len += 16U;
   472d8:	2113      	movs	r1, #19
   472da:	e7e7      	b.n	472ac <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   472dc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   472e0:	e7f1      	b.n	472c6 <bt_gatt_attr_read_chrc+0x46>

000472e2 <bt_gatt_foreach_attr>:
{
   472e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   472e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   472e8:	2300      	movs	r3, #0
   472ea:	9300      	str	r3, [sp, #0]
   472ec:	461a      	mov	r2, r3
   472ee:	f7e6 ff99 	bl	2e224 <bt_gatt_foreach_attr_type>
}
   472f2:	b005      	add	sp, #20
   472f4:	f85d fb04 	ldr.w	pc, [sp], #4

000472f8 <bt_gatt_check_perm>:
{
   472f8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   472fa:	07d4      	lsls	r4, r2, #31
{
   472fc:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   472fe:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   47300:	d504      	bpl.n	4730c <bt_gatt_check_perm+0x14>
   47302:	f010 0f15 	tst.w	r0, #21
   47306:	d01e      	beq.n	47346 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   47308:	684b      	ldr	r3, [r1, #4]
   4730a:	b1e3      	cbz	r3, 47346 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   4730c:	0793      	lsls	r3, r2, #30
   4730e:	d504      	bpl.n	4731a <bt_gatt_check_perm+0x22>
   47310:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   47314:	d019      	beq.n	4734a <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   47316:	688b      	ldr	r3, [r1, #8]
   47318:	b1bb      	cbz	r3, 4734a <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   4731a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   4731e:	f014 0f30 	tst.w	r4, #48	; 0x30
   47322:	d103      	bne.n	4732c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   47324:	f014 000c 	ands.w	r0, r4, #12
   47328:	d107      	bne.n	4733a <bt_gatt_check_perm+0x42>
}
   4732a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   4732c:	4628      	mov	r0, r5
   4732e:	f7fe fe10 	bl	45f52 <bt_conn_get_security>
   47332:	2802      	cmp	r0, #2
   47334:	d8f6      	bhi.n	47324 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   47336:	2005      	movs	r0, #5
   47338:	e7f7      	b.n	4732a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   4733a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4733c:	2b00      	cmp	r3, #0
   4733e:	bf14      	ite	ne
   47340:	2000      	movne	r0, #0
   47342:	200f      	moveq	r0, #15
   47344:	e7f1      	b.n	4732a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   47346:	2002      	movs	r0, #2
   47348:	e7ef      	b.n	4732a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   4734a:	2003      	movs	r0, #3
   4734c:	e7ed      	b.n	4732a <bt_gatt_check_perm+0x32>

0004734e <gatt_notify>:
{
   4734e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   47352:	4614      	mov	r4, r2
   47354:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   47356:	2214      	movs	r2, #20
   47358:	6861      	ldr	r1, [r4, #4]
{
   4735a:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   4735c:	f7ff ffcc 	bl	472f8 <bt_gatt_check_perm>
   47360:	bb08      	cbnz	r0, 473a6 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   47362:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   47364:	211b      	movs	r1, #27
   47366:	3202      	adds	r2, #2
   47368:	4638      	mov	r0, r7
   4736a:	f7ff fb32 	bl	469d2 <bt_att_create_pdu>
	if (!buf) {
   4736e:	4605      	mov	r5, r0
   47370:	b1e8      	cbz	r0, 473ae <gatt_notify+0x60>
   47372:	f100 0908 	add.w	r9, r0, #8
   47376:	2102      	movs	r1, #2
   47378:	4648      	mov	r0, r9
   4737a:	f000 fd43 	bl	47e04 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   4737e:	4606      	mov	r6, r0
   47380:	89a1      	ldrh	r1, [r4, #12]
   47382:	f826 8b02 	strh.w	r8, [r6], #2
   47386:	4648      	mov	r0, r9
   47388:	f000 fd3c 	bl	47e04 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   4738c:	89a2      	ldrh	r2, [r4, #12]
   4738e:	68a1      	ldr	r1, [r4, #8]
   47390:	4630      	mov	r0, r6
   47392:	f7fd fd95 	bl	44ec0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   47396:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4739a:	4629      	mov	r1, r5
   4739c:	4638      	mov	r0, r7
}
   4739e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   473a2:	f7ff bbd3 	b.w	46b4c <bt_att_send>
		return -EPERM;
   473a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   473aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   473ae:	f06f 000b 	mvn.w	r0, #11
   473b2:	e7fa      	b.n	473aa <gatt_notify+0x5c>

000473b4 <bt_gatt_change_aware>:
{
   473b4:	b538      	push	{r3, r4, r5, lr}
   473b6:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   473b8:	f7e6 fc76 	bl	2dca8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   473bc:	b910      	cbnz	r0, 473c4 <bt_gatt_change_aware+0x10>
		return true;
   473be:	2501      	movs	r5, #1
}
   473c0:	4628      	mov	r0, r5
   473c2:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   473c4:	7a03      	ldrb	r3, [r0, #8]
   473c6:	07d9      	lsls	r1, r3, #31
   473c8:	d5f9      	bpl.n	473be <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   473ca:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   473ce:	4620      	mov	r0, r4
   473d0:	f7ff fc3b 	bl	46c4a <atomic_get>
   473d4:	07c2      	lsls	r2, r0, #31
   473d6:	d4f2      	bmi.n	473be <bt_gatt_change_aware+0xa>
	if (!req) {
   473d8:	2d00      	cmp	r5, #0
   473da:	d0f1      	beq.n	473c0 <bt_gatt_change_aware+0xc>
   473dc:	4620      	mov	r0, r4
   473de:	f7ff fc34 	bl	46c4a <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   473e2:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   473e4:	f3c0 0540 	ubfx	r5, r0, #1, #1
   473e8:	d509      	bpl.n	473fe <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   473ea:	f06f 0102 	mvn.w	r1, #2
   473ee:	4620      	mov	r0, r4
   473f0:	f7ff fcec 	bl	46dcc <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   473f4:	2101      	movs	r1, #1
   473f6:	4620      	mov	r0, r4
   473f8:	f7ff fc82 	bl	46d00 <atomic_or>
}
   473fc:	e7e0      	b.n	473c0 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   473fe:	2102      	movs	r1, #2
   47400:	e7f9      	b.n	473f6 <bt_gatt_change_aware+0x42>

00047402 <ccc_delayed_store>:
{
   47402:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   47404:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   47408:	4605      	mov	r5, r0
		if (!conn) {
   4740a:	b194      	cbz	r4, 47432 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4740c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   47410:	7a20      	ldrb	r0, [r4, #8]
   47412:	4631      	mov	r1, r6
   47414:	f7fe f9fb 	bl	4580e <bt_addr_le_is_bonded>
   47418:	b158      	cbz	r0, 47432 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   4741a:	2300      	movs	r3, #0
   4741c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   47420:	7a20      	ldrb	r0, [r4, #8]
   47422:	4631      	mov	r1, r6
   47424:	f7e7 fb1e 	bl	2ea64 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   47428:	4620      	mov	r0, r4
}
   4742a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   4742e:	f7fe bcf8 	b.w	45e22 <bt_conn_unref>
}
   47432:	bd70      	pop	{r4, r5, r6, pc}

00047434 <sys_memcpy_swap>:
	psrc += length - 1;
   47434:	1e53      	subs	r3, r2, #1
   47436:	4419      	add	r1, r3
	for (; length > 0; length--) {
   47438:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   4743a:	f811 3901 	ldrb.w	r3, [r1], #-1
   4743e:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   47442:	4290      	cmp	r0, r2
   47444:	d1f9      	bne.n	4743a <sys_memcpy_swap+0x6>
}
   47446:	4770      	bx	lr

00047448 <smp_encrypt_info>:
}
   47448:	2007      	movs	r0, #7
   4744a:	4770      	bx	lr

0004744c <smp_chan_get>:
{
   4744c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   4744e:	2106      	movs	r1, #6
   47450:	f7fe feab 	bl	461aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   47454:	b100      	cbz	r0, 47458 <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   47456:	38f0      	subs	r0, #240	; 0xf0
}
   47458:	bd08      	pop	{r3, pc}

0004745a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4745a:	2301      	movs	r3, #1
   4745c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4745e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   47460:	f3bf 8f5b 	dmb	ish
   47464:	e850 2f00 	ldrex	r2, [r0]
   47468:	401a      	ands	r2, r3
   4746a:	e840 2100 	strex	r1, r2, [r0]
   4746e:	2900      	cmp	r1, #0
   47470:	d1f8      	bne.n	47464 <atomic_clear_bit+0xa>
   47472:	f3bf 8f5b 	dmb	ish
}
   47476:	4770      	bx	lr

00047478 <bt_smp_aes_cmac>:
{
   47478:	b570      	push	{r4, r5, r6, lr}
   4747a:	b0c2      	sub	sp, #264	; 0x108
   4747c:	460d      	mov	r5, r1
   4747e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   47480:	4601      	mov	r1, r0
   47482:	aa16      	add	r2, sp, #88	; 0x58
   47484:	4668      	mov	r0, sp
{
   47486:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   47488:	f7fd fb86 	bl	44b98 <tc_cmac_setup>
   4748c:	b150      	cbz	r0, 474a4 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   4748e:	4632      	mov	r2, r6
   47490:	4629      	mov	r1, r5
   47492:	4668      	mov	r0, sp
   47494:	f7fd fbab 	bl	44bee <tc_cmac_update>
   47498:	b120      	cbz	r0, 474a4 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4749a:	4669      	mov	r1, sp
   4749c:	4620      	mov	r0, r4
   4749e:	f7fd fc11 	bl	44cc4 <tc_cmac_final>
   474a2:	b918      	cbnz	r0, 474ac <bt_smp_aes_cmac+0x34>
		return -EIO;
   474a4:	f06f 0004 	mvn.w	r0, #4
}
   474a8:	b042      	add	sp, #264	; 0x108
   474aa:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   474ac:	2000      	movs	r0, #0
   474ae:	e7fb      	b.n	474a8 <bt_smp_aes_cmac+0x30>

000474b0 <smp_security_request>:
   474b0:	2007      	movs	r0, #7
   474b2:	4770      	bx	lr

000474b4 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   474b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   474b6:	2300      	movs	r3, #0
   474b8:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   474ba:	4604      	mov	r4, r0
   474bc:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   474be:	460a      	mov	r2, r1
   474c0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   474c4:	2106      	movs	r1, #6
   474c6:	f7fe fe1b 	bl	46100 <bt_l2cap_send_cb>
   474ca:	b128      	cbz	r0, 474d8 <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   474cc:	4628      	mov	r0, r5
}
   474ce:	b003      	add	sp, #12
   474d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   474d4:	f7f5 bf5c 	b.w	3d390 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   474d8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   474dc:	2300      	movs	r3, #0
   474de:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   474e2:	b003      	add	sp, #12
   474e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   474e8:	f7fa bc20 	b.w	41d2c <k_work_reschedule>

000474ec <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   474ec:	b510      	push	{r4, lr}
   474ee:	1e43      	subs	r3, r0, #1
   474f0:	f100 0210 	add.w	r2, r0, #16
   474f4:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   474f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   474fa:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   474fe:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   47500:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   47502:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   47504:	d1f7      	bne.n	474f6 <sys_mem_swap.constprop.0+0xa>
	}
}
   47506:	bd10      	pop	{r4, pc}

00047508 <smp_f6>:
{
   47508:	b5f0      	push	{r4, r5, r6, r7, lr}
   4750a:	b097      	sub	sp, #92	; 0x5c
   4750c:	4605      	mov	r5, r0
   4750e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   47510:	a805      	add	r0, sp, #20
   47512:	2210      	movs	r2, #16
{
   47514:	461c      	mov	r4, r3
   47516:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   47518:	f7ff ff8c 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4751c:	2210      	movs	r2, #16
   4751e:	4631      	mov	r1, r6
   47520:	a809      	add	r0, sp, #36	; 0x24
   47522:	f7ff ff87 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   47526:	4621      	mov	r1, r4
   47528:	2210      	movs	r2, #16
   4752a:	a80d      	add	r0, sp, #52	; 0x34
   4752c:	f7ff ff82 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   47530:	991c      	ldr	r1, [sp, #112]	; 0x70
   47532:	2203      	movs	r2, #3
   47534:	a811      	add	r0, sp, #68	; 0x44
   47536:	f7ff ff7d 	bl	47434 <sys_memcpy_swap>
	m[51] = a1->type;
   4753a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4753c:	f814 3b01 	ldrb.w	r3, [r4], #1
   47540:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   47544:	4621      	mov	r1, r4
   47546:	2206      	movs	r2, #6
   47548:	a812      	add	r0, sp, #72	; 0x48
   4754a:	f7fd fcb9 	bl	44ec0 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4754e:	4621      	mov	r1, r4
   47550:	2206      	movs	r2, #6
   47552:	a812      	add	r0, sp, #72	; 0x48
   47554:	f7ff ff6e 	bl	47434 <sys_memcpy_swap>
	m[58] = a2->type;
   47558:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   4755a:	f814 3b01 	ldrb.w	r3, [r4], #1
   4755e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   47562:	4621      	mov	r1, r4
   47564:	2206      	movs	r2, #6
   47566:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4756a:	f7fd fca9 	bl	44ec0 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4756e:	4621      	mov	r1, r4
   47570:	2206      	movs	r2, #6
   47572:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   47576:	f7ff ff5d 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   4757a:	2210      	movs	r2, #16
   4757c:	4629      	mov	r1, r5
   4757e:	a801      	add	r0, sp, #4
   47580:	f7ff ff58 	bl	47434 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   47584:	463b      	mov	r3, r7
   47586:	2241      	movs	r2, #65	; 0x41
   47588:	a905      	add	r1, sp, #20
   4758a:	a801      	add	r0, sp, #4
   4758c:	f7ff ff74 	bl	47478 <bt_smp_aes_cmac>
	if (err) {
   47590:	4604      	mov	r4, r0
   47592:	b910      	cbnz	r0, 4759a <smp_f6+0x92>
	sys_mem_swap(check, 16);
   47594:	4638      	mov	r0, r7
   47596:	f7ff ffa9 	bl	474ec <sys_mem_swap.constprop.0>
}
   4759a:	4620      	mov	r0, r4
   4759c:	b017      	add	sp, #92	; 0x5c
   4759e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000475a0 <smp_f4>:
{
   475a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   475a2:	b097      	sub	sp, #92	; 0x5c
   475a4:	4614      	mov	r4, r2
   475a6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   475a8:	2220      	movs	r2, #32
   475aa:	4601      	mov	r1, r0
   475ac:	a805      	add	r0, sp, #20
{
   475ae:	461d      	mov	r5, r3
   475b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   475b2:	f7ff ff3f 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   475b6:	2220      	movs	r2, #32
   475b8:	4631      	mov	r1, r6
   475ba:	a80d      	add	r0, sp, #52	; 0x34
   475bc:	f7ff ff3a 	bl	47434 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   475c0:	4621      	mov	r1, r4
   475c2:	2210      	movs	r2, #16
   475c4:	a801      	add	r0, sp, #4
	m[64] = z;
   475c6:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   475ca:	f7ff ff33 	bl	47434 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   475ce:	463b      	mov	r3, r7
   475d0:	2241      	movs	r2, #65	; 0x41
   475d2:	a905      	add	r1, sp, #20
   475d4:	a801      	add	r0, sp, #4
   475d6:	f7ff ff4f 	bl	47478 <bt_smp_aes_cmac>
	if (err) {
   475da:	4604      	mov	r4, r0
   475dc:	b910      	cbnz	r0, 475e4 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   475de:	4638      	mov	r0, r7
   475e0:	f7ff ff84 	bl	474ec <sys_mem_swap.constprop.0>
}
   475e4:	4620      	mov	r0, r4
   475e6:	b017      	add	sp, #92	; 0x5c
   475e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000475ea <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   475ea:	2301      	movs	r3, #1
   475ec:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   475ee:	f3bf 8f5b 	dmb	ish
   475f2:	e850 2f00 	ldrex	r2, [r0]
   475f6:	431a      	orrs	r2, r3
   475f8:	e840 2100 	strex	r1, r2, [r0]
   475fc:	2900      	cmp	r1, #0
   475fe:	d1f8      	bne.n	475f2 <atomic_set_bit+0x8>
   47600:	f3bf 8f5b 	dmb	ish
}
   47604:	4770      	bx	lr

00047606 <smp_keypress_notif>:
{
   47606:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   47608:	210e      	movs	r1, #14
   4760a:	f7ff ffee 	bl	475ea <atomic_set_bit>
}
   4760e:	2000      	movs	r0, #0
   47610:	bd08      	pop	{r3, pc}

00047612 <smp_central_ident>:
   47612:	2007      	movs	r0, #7
   47614:	4770      	bx	lr

00047616 <smp_pairing_rsp>:
   47616:	2007      	movs	r0, #7
   47618:	4770      	bx	lr

0004761a <smp_signing_info>:
   4761a:	2007      	movs	r0, #7
   4761c:	4770      	bx	lr

0004761e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4761e:	f3bf 8f5b 	dmb	ish
   47622:	6800      	ldr	r0, [r0, #0]
   47624:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   47628:	4108      	asrs	r0, r1
}
   4762a:	f000 0001 	and.w	r0, r0, #1
   4762e:	4770      	bx	lr

00047630 <update_keys_check>:
{
   47630:	b510      	push	{r4, lr}
   47632:	4603      	mov	r3, r0
	if (!keys ||
   47634:	b1d9      	cbz	r1, 4766e <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   47636:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   47638:	f010 0f24 	tst.w	r0, #36	; 0x24
   4763c:	d017      	beq.n	4766e <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4763e:	7d1a      	ldrb	r2, [r3, #20]
   47640:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   47642:	7b09      	ldrb	r1, [r1, #12]
   47644:	42a2      	cmp	r2, r4
   47646:	bf28      	it	cs
   47648:	4622      	movcs	r2, r4
   4764a:	4291      	cmp	r1, r2
   4764c:	d901      	bls.n	47652 <update_keys_check+0x22>
		return false;
   4764e:	2000      	movs	r0, #0
}
   47650:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   47652:	0682      	lsls	r2, r0, #26
   47654:	d404      	bmi.n	47660 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   47656:	7a18      	ldrb	r0, [r3, #8]
   47658:	3800      	subs	r0, #0
   4765a:	bf18      	it	ne
   4765c:	2001      	movne	r0, #1
   4765e:	e7f7      	b.n	47650 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47660:	2105      	movs	r1, #5
   47662:	1d18      	adds	r0, r3, #4
   47664:	f7ff ffdb 	bl	4761e <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   47668:	2800      	cmp	r0, #0
   4766a:	d1f4      	bne.n	47656 <update_keys_check+0x26>
   4766c:	e7ef      	b.n	4764e <update_keys_check+0x1e>
		return true;
   4766e:	2001      	movs	r0, #1
   47670:	e7ee      	b.n	47650 <update_keys_check+0x20>

00047672 <smp_ident_info>:
{
   47672:	b538      	push	{r3, r4, r5, lr}
   47674:	4604      	mov	r4, r0
   47676:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   47678:	3004      	adds	r0, #4
   4767a:	210d      	movs	r1, #13
   4767c:	f7ff ffcf 	bl	4761e <atomic_test_bit>
   47680:	b170      	cbz	r0, 476a0 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   47682:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   47684:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   47688:	2002      	movs	r0, #2
   4768a:	7a19      	ldrb	r1, [r3, #8]
   4768c:	f103 0288 	add.w	r2, r3, #136	; 0x88
   47690:	f000 fafd 	bl	47c8e <bt_keys_get_type>
		if (!keys) {
   47694:	b150      	cbz	r0, 476ac <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   47696:	2210      	movs	r2, #16
   47698:	4629      	mov	r1, r5
   4769a:	302a      	adds	r0, #42	; 0x2a
   4769c:	f7fd fc10 	bl	44ec0 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   476a0:	4620      	mov	r0, r4
   476a2:	2109      	movs	r1, #9
   476a4:	f7ff ffa1 	bl	475ea <atomic_set_bit>
	return 0;
   476a8:	2000      	movs	r0, #0
}
   476aa:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   476ac:	2008      	movs	r0, #8
   476ae:	e7fc      	b.n	476aa <smp_ident_info+0x38>

000476b0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   476b0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   476b2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   476b4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   476b6:	4628      	mov	r0, r5
   476b8:	2104      	movs	r1, #4
   476ba:	f7ff ffb0 	bl	4761e <atomic_test_bit>
   476be:	b970      	cbnz	r0, 476de <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   476c0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   476c4:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   476c6:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   476c8:	4608      	mov	r0, r1
   476ca:	f7fe fd16 	bl	460fa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   476ce:	4604      	mov	r4, r0
   476d0:	b938      	cbnz	r0, 476e2 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   476d2:	2104      	movs	r1, #4
   476d4:	4628      	mov	r0, r5
   476d6:	f7ff ff88 	bl	475ea <atomic_set_bit>
}
   476da:	4620      	mov	r0, r4
   476dc:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   476de:	2200      	movs	r2, #0
   476e0:	e7f0      	b.n	476c4 <smp_create_pdu.constprop.0+0x14>
   476e2:	2101      	movs	r1, #1
   476e4:	3008      	adds	r0, #8
   476e6:	f000 fb8d 	bl	47e04 <net_buf_simple_add>
	hdr->code = op;
   476ea:	7006      	strb	r6, [r0, #0]
	return buf;
   476ec:	e7f5      	b.n	476da <smp_create_pdu.constprop.0+0x2a>

000476ee <smp_send_pairing_random>:
{
   476ee:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   476f0:	2104      	movs	r1, #4
{
   476f2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   476f4:	f7ff ffdc 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   476f8:	4604      	mov	r4, r0
   476fa:	b170      	cbz	r0, 4771a <smp_send_pairing_random+0x2c>
   476fc:	2110      	movs	r1, #16
   476fe:	3008      	adds	r0, #8
   47700:	f000 fb80 	bl	47e04 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   47704:	2210      	movs	r2, #16
   47706:	f105 0127 	add.w	r1, r5, #39	; 0x27
   4770a:	f7fd fbd9 	bl	44ec0 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4770e:	4628      	mov	r0, r5
   47710:	4621      	mov	r1, r4
   47712:	f7ff fecf 	bl	474b4 <smp_send.constprop.0>
	return 0;
   47716:	2000      	movs	r0, #0
}
   47718:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4771a:	2008      	movs	r0, #8
   4771c:	e7fc      	b.n	47718 <smp_send_pairing_random+0x2a>

0004771e <smp_dhkey_check>:
{
   4771e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   47720:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   47724:	78db      	ldrb	r3, [r3, #3]
   47726:	2b01      	cmp	r3, #1
{
   47728:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4772a:	d114      	bne.n	47756 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4772c:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4772e:	1d05      	adds	r5, r0, #4
   47730:	2110      	movs	r1, #16
   47732:	4628      	mov	r0, r5
   47734:	f7ff fe91 	bl	4745a <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   47738:	4631      	mov	r1, r6
   4773a:	2210      	movs	r2, #16
   4773c:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   47740:	f7fd fbbe 	bl	44ec0 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   47744:	2107      	movs	r1, #7
   47746:	4628      	mov	r0, r5
   47748:	f7ff ff69 	bl	4761e <atomic_test_bit>
   4774c:	b128      	cbz	r0, 4775a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4774e:	2109      	movs	r1, #9
   47750:	4628      	mov	r0, r5
   47752:	f7ff ff4a 	bl	475ea <atomic_set_bit>
}
   47756:	2000      	movs	r0, #0
   47758:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4775a:	210a      	movs	r1, #10
   4775c:	4628      	mov	r0, r5
   4775e:	f7ff ff5e 	bl	4761e <atomic_test_bit>
   47762:	2800      	cmp	r0, #0
   47764:	d1f3      	bne.n	4774e <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   47766:	4620      	mov	r0, r4
}
   47768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   4776c:	f7e7 bb9c 	b.w	2eea8 <compute_and_check_and_send_periph_dhcheck>

00047770 <smp_pairing_confirm>:
{
   47770:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   47772:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   47774:	1d05      	adds	r5, r0, #4
{
   47776:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   47778:	210b      	movs	r1, #11
   4777a:	4628      	mov	r0, r5
   4777c:	f7ff fe6d 	bl	4745a <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   47780:	2210      	movs	r2, #16
   47782:	4631      	mov	r1, r6
   47784:	f104 0017 	add.w	r0, r4, #23
   47788:	f7fd fb9a 	bl	44ec0 <memcpy>
	switch (smp->method) {
   4778c:	7a23      	ldrb	r3, [r4, #8]
   4778e:	2b01      	cmp	r3, #1
   47790:	d009      	beq.n	477a6 <smp_pairing_confirm+0x36>
   47792:	2b02      	cmp	r3, #2
   47794:	d113      	bne.n	477be <smp_pairing_confirm+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   47796:	4620      	mov	r0, r4
   47798:	2104      	movs	r1, #4
   4779a:	f7ff ff26 	bl	475ea <atomic_set_bit>
}
   4779e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   477a2:	f7e7 bc63 	b.w	2f06c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   477a6:	210a      	movs	r1, #10
   477a8:	4628      	mov	r0, r5
   477aa:	f7ff ff38 	bl	4761e <atomic_test_bit>
   477ae:	2800      	cmp	r0, #0
   477b0:	d0f1      	beq.n	47796 <smp_pairing_confirm+0x26>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   477b2:	4628      	mov	r0, r5
   477b4:	2100      	movs	r1, #0
   477b6:	f7ff ff18 	bl	475ea <atomic_set_bit>
			return 0;
   477ba:	2000      	movs	r0, #0
}
   477bc:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   477be:	2008      	movs	r0, #8
   477c0:	e7fc      	b.n	477bc <smp_pairing_confirm+0x4c>

000477c2 <atomic_test_and_clear_bit>:
{
   477c2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   477c4:	2301      	movs	r3, #1
   477c6:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   477ca:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   477cc:	f3bf 8f5b 	dmb	ish
   477d0:	e850 3f00 	ldrex	r3, [r0]
   477d4:	ea03 0c02 	and.w	ip, r3, r2
   477d8:	e840 ce00 	strex	lr, ip, [r0]
   477dc:	f1be 0f00 	cmp.w	lr, #0
   477e0:	d1f6      	bne.n	477d0 <atomic_test_and_clear_bit+0xe>
   477e2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   477e6:	420b      	tst	r3, r1
}
   477e8:	bf14      	ite	ne
   477ea:	2001      	movne	r0, #1
   477ec:	2000      	moveq	r0, #0
   477ee:	f85d fb04 	ldr.w	pc, [sp], #4

000477f2 <smp_reset>:
{
   477f2:	b538      	push	{r3, r4, r5, lr}
   477f4:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   477f6:	1d03      	adds	r3, r0, #4
   477f8:	2500      	movs	r5, #0
   477fa:	f3bf 8f5b 	dmb	ish
   477fe:	e853 2f00 	ldrex	r2, [r3]
   47802:	e843 5100 	strex	r1, r5, [r3]
   47806:	2900      	cmp	r1, #0
   47808:	d1f9      	bne.n	477fe <smp_reset+0xc>
   4780a:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   4780e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   47812:	f001 fbf9 	bl	49008 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   47816:	7225      	strb	r5, [r4, #8]
   47818:	f3bf 8f5b 	dmb	ish
   4781c:	e854 3f00 	ldrex	r3, [r4]
   47820:	e844 5200 	strex	r2, r5, [r4]
   47824:	2a00      	cmp	r2, #0
   47826:	d1f9      	bne.n	4781c <smp_reset+0x2a>
   47828:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4782c:	4620      	mov	r0, r4
   4782e:	2101      	movs	r1, #1
}
   47830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   47834:	f7ff bed9 	b.w	475ea <atomic_set_bit>

00047838 <bt_smp_request_ltk>:
{
   47838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4783c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   47840:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   47844:	4604      	mov	r4, r0
   47846:	4693      	mov	fp, r2
   47848:	469a      	mov	sl, r3
	smp = smp_chan_get(conn);
   4784a:	f7ff fdff 	bl	4744c <smp_chan_get>
	if (!smp) {
   4784e:	4605      	mov	r5, r0
   47850:	2800      	cmp	r0, #0
   47852:	d070      	beq.n	47936 <bt_smp_request_ltk+0xfe>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   47854:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   47856:	f1b9 0f00 	cmp.w	r9, #0
   4785a:	d128      	bne.n	478ae <bt_smp_request_ltk+0x76>
   4785c:	ea5b 030a 	orrs.w	r3, fp, sl
   47860:	d125      	bne.n	478ae <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   47862:	2103      	movs	r1, #3
   47864:	4638      	mov	r0, r7
   47866:	f7ff feda 	bl	4761e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   4786a:	b300      	cbz	r0, 478ae <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4786c:	2101      	movs	r1, #1
   4786e:	4638      	mov	r0, r7
   47870:	f7ff fed5 	bl	4761e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   47874:	4606      	mov	r6, r0
   47876:	b1d0      	cbz	r0, 478ae <bt_smp_request_ltk+0x76>
	return MIN(req->max_key_size, rsp->max_key_size);
   47878:	7d2c      	ldrb	r4, [r5, #20]
   4787a:	7b6b      	ldrb	r3, [r5, #13]
   4787c:	429c      	cmp	r4, r3
   4787e:	bf28      	it	cs
   47880:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   47882:	4622      	mov	r2, r4
   47884:	f105 0147 	add.w	r1, r5, #71	; 0x47
   47888:	4640      	mov	r0, r8
   4788a:	f7fd fb19 	bl	44ec0 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4788e:	2c0f      	cmp	r4, #15
   47890:	d806      	bhi.n	478a0 <bt_smp_request_ltk+0x68>
			(void)memset(ltk + enc_size, 0,
   47892:	f1c4 0210 	rsb	r2, r4, #16
   47896:	4649      	mov	r1, r9
   47898:	eb08 0004 	add.w	r0, r8, r4
   4789c:	f7fd fb1b 	bl	44ed6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   478a0:	2101      	movs	r1, #1
   478a2:	4638      	mov	r0, r7
   478a4:	f7ff fea1 	bl	475ea <atomic_set_bit>
}
   478a8:	4630      	mov	r0, r6
   478aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   478ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   478b2:	b983      	cbnz	r3, 478d6 <bt_smp_request_ltk+0x9e>
					     &conn->le.dst);
   478b4:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   478b8:	7a21      	ldrb	r1, [r4, #8]
   478ba:	4632      	mov	r2, r6
   478bc:	2020      	movs	r0, #32
   478be:	f7e8 f897 	bl	2f9f0 <bt_keys_find>
   478c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   478c6:	b930      	cbnz	r0, 478d6 <bt_smp_request_ltk+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   478c8:	7a21      	ldrb	r1, [r4, #8]
   478ca:	4632      	mov	r2, r6
   478cc:	2001      	movs	r0, #1
   478ce:	f7e8 f88f 	bl	2f9f0 <bt_keys_find>
   478d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   478d6:	f1b9 0f00 	cmp.w	r9, #0
   478da:	d11d      	bne.n	47918 <bt_smp_request_ltk+0xe0>
   478dc:	ea5b 030a 	orrs.w	r3, fp, sl
   478e0:	d11a      	bne.n	47918 <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   478e2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   478e6:	b1b9      	cbz	r1, 47918 <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   478e8:	89cb      	ldrh	r3, [r1, #14]
   478ea:	069b      	lsls	r3, r3, #26
   478ec:	d514      	bpl.n	47918 <bt_smp_request_ltk+0xe0>
		enc_size = conn->le.keys->enc_size;
   478ee:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   478f0:	4640      	mov	r0, r8
   478f2:	4622      	mov	r2, r4
   478f4:	311a      	adds	r1, #26
   478f6:	f7fd fae3 	bl	44ec0 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   478fa:	2c0f      	cmp	r4, #15
   478fc:	d806      	bhi.n	4790c <bt_smp_request_ltk+0xd4>
			(void)memset(ltk + enc_size, 0,
   478fe:	f1c4 0210 	rsb	r2, r4, #16
   47902:	4649      	mov	r1, r9
   47904:	eb08 0004 	add.w	r0, r8, r4
   47908:	f7fd fae5 	bl	44ed6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4790c:	2101      	movs	r1, #1
   4790e:	4638      	mov	r0, r7
   47910:	f7ff fe6b 	bl	475ea <atomic_set_bit>
		return true;
   47914:	2601      	movs	r6, #1
   47916:	e7c7      	b.n	478a8 <bt_smp_request_ltk+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   47918:	210f      	movs	r1, #15
   4791a:	4638      	mov	r0, r7
   4791c:	f7ff fe7f 	bl	4761e <atomic_test_bit>
   47920:	b120      	cbz	r0, 4792c <bt_smp_request_ltk+0xf4>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   47922:	2202      	movs	r2, #2
   47924:	2106      	movs	r1, #6
   47926:	4620      	mov	r0, r4
   47928:	f7e5 f9d4 	bl	2ccd4 <bt_conn_security_changed>
	smp_reset(smp);
   4792c:	4628      	mov	r0, r5
   4792e:	f7ff ff60 	bl	477f2 <smp_reset>
	return false;
   47932:	2600      	movs	r6, #0
   47934:	e7b8      	b.n	478a8 <bt_smp_request_ltk+0x70>
		return false;
   47936:	4606      	mov	r6, r0
   47938:	e7b6      	b.n	478a8 <bt_smp_request_ltk+0x70>

0004793a <bt_smp_sign>:
   4793a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4793e:	4770      	bx	lr

00047940 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47940:	1d03      	adds	r3, r0, #4
{
   47942:	b573      	push	{r0, r1, r4, r5, r6, lr}
   47944:	4605      	mov	r5, r0
   47946:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47948:	4618      	mov	r0, r3
   4794a:	2103      	movs	r1, #3
   4794c:	f7ff fe67 	bl	4761e <atomic_test_bit>
   47950:	b1f0      	cbz	r0, 47990 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   47952:	4631      	mov	r1, r6
   47954:	4628      	mov	r0, r5
   47956:	f7e7 fe99 	bl	2f68c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   4795a:	2105      	movs	r1, #5
   4795c:	4628      	mov	r0, r5
   4795e:	f7ff fea7 	bl	476b0 <smp_create_pdu.constprop.0>
	if (!buf) {
   47962:	4604      	mov	r4, r0
   47964:	b308      	cbz	r0, 479aa <smp_error+0x6a>
   47966:	2101      	movs	r1, #1
   47968:	3008      	adds	r0, #8
   4796a:	f000 fa4b 	bl	47e04 <net_buf_simple_add>
	rsp->reason = reason;
   4796e:	7006      	strb	r6, [r0, #0]
   47970:	2600      	movs	r6, #0
   47972:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   47976:	9600      	str	r6, [sp, #0]
   47978:	4633      	mov	r3, r6
   4797a:	4622      	mov	r2, r4
   4797c:	2106      	movs	r1, #6
   4797e:	f7fe fbbf 	bl	46100 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   47982:	b118      	cbz	r0, 4798c <smp_error+0x4c>
		net_buf_unref(buf);
   47984:	4620      	mov	r0, r4
   47986:	f7f5 fd03 	bl	3d390 <net_buf_unref>
	return 0;
   4798a:	4630      	mov	r0, r6
}
   4798c:	b002      	add	sp, #8
   4798e:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47990:	2101      	movs	r1, #1
   47992:	4618      	mov	r0, r3
   47994:	f7ff fe43 	bl	4761e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47998:	2800      	cmp	r0, #0
   4799a:	d1da      	bne.n	47952 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4799c:	210f      	movs	r1, #15
   4799e:	4618      	mov	r0, r3
   479a0:	f7ff fe3d 	bl	4761e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   479a4:	2800      	cmp	r0, #0
   479a6:	d1d4      	bne.n	47952 <smp_error+0x12>
   479a8:	e7d7      	b.n	4795a <smp_error+0x1a>
		return -ENOBUFS;
   479aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   479ae:	e7ed      	b.n	4798c <smp_error+0x4c>

000479b0 <bt_smp_dhkey_ready>:
{
   479b0:	b570      	push	{r4, r5, r6, lr}
   479b2:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   479b4:	2008      	movs	r0, #8
   479b6:	f7e7 f995 	bl	2ece4 <smp_find>
	if (smp) {
   479ba:	4604      	mov	r4, r0
   479bc:	b1b8      	cbz	r0, 479ee <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   479be:	1d05      	adds	r5, r0, #4
   479c0:	2108      	movs	r1, #8
   479c2:	4628      	mov	r0, r5
   479c4:	f7ff fd49 	bl	4745a <atomic_clear_bit>
	if (!dhkey) {
   479c8:	b38e      	cbz	r6, 47a2e <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   479ca:	2107      	movs	r1, #7
   479cc:	f7ff fd45 	bl	4745a <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   479d0:	4631      	mov	r1, r6
   479d2:	2220      	movs	r2, #32
   479d4:	f104 0097 	add.w	r0, r4, #151	; 0x97
   479d8:	f7fd fa72 	bl	44ec0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   479dc:	210a      	movs	r1, #10
   479de:	4628      	mov	r0, r5
   479e0:	f7ff fe1d 	bl	4761e <atomic_test_bit>
   479e4:	b168      	cbz	r0, 47a02 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   479e6:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   479e8:	4628      	mov	r0, r5
   479ea:	f7ff fdfe 	bl	475ea <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   479ee:	2007      	movs	r0, #7
   479f0:	f7e7 f978 	bl	2ece4 <smp_find>
		if (smp) {
   479f4:	4604      	mov	r4, r0
   479f6:	b118      	cbz	r0, 47a00 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   479f8:	f7e7 f95e 	bl	2ecb8 <smp_dhkey_generate>
			if (err) {
   479fc:	4601      	mov	r1, r0
   479fe:	b990      	cbnz	r0, 47a26 <bt_smp_dhkey_ready+0x76>
}
   47a00:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   47a02:	2110      	movs	r1, #16
   47a04:	4628      	mov	r0, r5
   47a06:	f7ff fe0a 	bl	4761e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   47a0a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   47a0c:	2800      	cmp	r0, #0
   47a0e:	d1eb      	bne.n	479e8 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   47a10:	4628      	mov	r0, r5
   47a12:	f7ff fe04 	bl	4761e <atomic_test_bit>
   47a16:	2800      	cmp	r0, #0
   47a18:	d0e9      	beq.n	479ee <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   47a1a:	4620      	mov	r0, r4
   47a1c:	f7e7 fa44 	bl	2eea8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   47a20:	4601      	mov	r1, r0
   47a22:	2800      	cmp	r0, #0
   47a24:	d0e3      	beq.n	479ee <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   47a26:	4620      	mov	r0, r4
   47a28:	f7ff ff8a 	bl	47940 <smp_error>
   47a2c:	e7df      	b.n	479ee <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   47a2e:	210b      	movs	r1, #11
   47a30:	e7f9      	b.n	47a26 <bt_smp_dhkey_ready+0x76>

00047a32 <smp_ident_addr_info>:
{
   47a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   47a36:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   47a38:	783b      	ldrb	r3, [r7, #0]
{
   47a3a:	4604      	mov	r4, r0
   47a3c:	b123      	cbz	r3, 47a48 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   47a3e:	79bb      	ldrb	r3, [r7, #6]
   47a40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47a44:	2bc0      	cmp	r3, #192	; 0xc0
   47a46:	d16b      	bne.n	47b20 <smp_ident_addr_info+0xee>
	struct bt_conn *conn = smp->chan.chan.conn;
   47a48:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   47a4c:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   47a50:	2207      	movs	r2, #7
   47a52:	4639      	mov	r1, r7
   47a54:	4640      	mov	r0, r8
   47a56:	f7fd fa22 	bl	44e9e <memcmp>
   47a5a:	b180      	cbz	r0, 47a7e <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   47a5c:	7a28      	ldrb	r0, [r5, #8]
   47a5e:	4639      	mov	r1, r7
   47a60:	f7e8 f814 	bl	2fa8c <bt_keys_find_addr>
		if (keys) {
   47a64:	4606      	mov	r6, r0
   47a66:	b150      	cbz	r0, 47a7e <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   47a68:	4601      	mov	r1, r0
   47a6a:	4620      	mov	r0, r4
   47a6c:	f7ff fde0 	bl	47630 <update_keys_check>
   47a70:	b910      	cbnz	r0, 47a78 <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   47a72:	2008      	movs	r0, #8
}
   47a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   47a78:	4630      	mov	r0, r6
   47a7a:	f7e8 f817 	bl	2faac <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   47a7e:	210d      	movs	r1, #13
   47a80:	1d20      	adds	r0, r4, #4
   47a82:	f7ff fdcc 	bl	4761e <atomic_test_bit>
   47a86:	b398      	cbz	r0, 47af0 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   47a88:	7a29      	ldrb	r1, [r5, #8]
   47a8a:	4642      	mov	r2, r8
   47a8c:	2002      	movs	r0, #2
   47a8e:	f000 f8fe 	bl	47c8e <bt_keys_get_type>
		if (!keys) {
   47a92:	4606      	mov	r6, r0
   47a94:	2800      	cmp	r0, #0
   47a96:	d0ec      	beq.n	47a72 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   47a98:	78eb      	ldrb	r3, [r5, #3]
   47a9a:	2b00      	cmp	r3, #0
   47a9c:	d13d      	bne.n	47b1a <smp_ident_addr_info+0xe8>
			dst = &conn->le.resp_addr;
   47a9e:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   47aa2:	780b      	ldrb	r3, [r1, #0]
   47aa4:	2b01      	cmp	r3, #1
   47aa6:	d120      	bne.n	47aea <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   47aa8:	798b      	ldrb	r3, [r1, #6]
   47aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47aae:	2b40      	cmp	r3, #64	; 0x40
   47ab0:	d11b      	bne.n	47aea <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   47ab2:	2206      	movs	r2, #6
   47ab4:	3101      	adds	r1, #1
   47ab6:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   47aba:	f7fd fa01 	bl	44ec0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   47abe:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   47ac2:	b193      	cbz	r3, 47aea <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   47ac4:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   47ac8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47acc:	2bc0      	cmp	r3, #192	; 0xc0
   47ace:	d00c      	beq.n	47aea <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   47ad0:	2207      	movs	r2, #7
   47ad2:	4639      	mov	r1, r7
   47ad4:	1c70      	adds	r0, r6, #1
   47ad6:	f7fd f9f3 	bl	44ec0 <memcpy>
   47ada:	2207      	movs	r2, #7
   47adc:	4639      	mov	r1, r7
   47ade:	4640      	mov	r0, r8
   47ae0:	f7fd f9ee 	bl	44ec0 <memcpy>
				bt_conn_identity_resolved(conn);
   47ae4:	4628      	mov	r0, r5
   47ae6:	f7e5 f8c7 	bl	2cc78 <bt_conn_identity_resolved>
		bt_id_add(keys);
   47aea:	4630      	mov	r0, r6
   47aec:	f7e4 f816 	bl	2bb1c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   47af0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   47af4:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   47af8:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   47afa:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   47afe:	d503      	bpl.n	47b08 <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   47b00:	210a      	movs	r1, #10
   47b02:	4620      	mov	r0, r4
   47b04:	f7ff fd71 	bl	475ea <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   47b08:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   47b0c:	b91d      	cbnz	r5, 47b16 <smp_ident_addr_info+0xe4>
		smp_pairing_complete(smp, 0);
   47b0e:	4629      	mov	r1, r5
   47b10:	4620      	mov	r0, r4
   47b12:	f7e7 fdbb 	bl	2f68c <smp_pairing_complete>
	return 0;
   47b16:	2000      	movs	r0, #0
   47b18:	e7ac      	b.n	47a74 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   47b1a:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   47b1e:	e7c0      	b.n	47aa2 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   47b20:	200a      	movs	r0, #10
   47b22:	e7a7      	b.n	47a74 <smp_ident_addr_info+0x42>

00047b24 <bt_smp_disconnected>:
{
   47b24:	b570      	push	{r4, r5, r6, lr}
   47b26:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   47b28:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   47b2c:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47b30:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   47b32:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   47b36:	f001 fa67 	bl	49008 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47b3a:	2103      	movs	r1, #3
   47b3c:	4620      	mov	r0, r4
   47b3e:	f7ff fd6e 	bl	4761e <atomic_test_bit>
   47b42:	b1a0      	cbz	r0, 47b6e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   47b44:	2108      	movs	r1, #8
   47b46:	4630      	mov	r0, r6
   47b48:	f7e7 fda0 	bl	2f68c <smp_pairing_complete>
	if (keys) {
   47b4c:	b13d      	cbz	r5, 47b5e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   47b4e:	89eb      	ldrh	r3, [r5, #14]
   47b50:	b113      	cbz	r3, 47b58 <bt_smp_disconnected+0x34>
   47b52:	7b6b      	ldrb	r3, [r5, #13]
   47b54:	079b      	lsls	r3, r3, #30
   47b56:	d502      	bpl.n	47b5e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   47b58:	4628      	mov	r0, r5
   47b5a:	f7e7 ffa7 	bl	2faac <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   47b5e:	4630      	mov	r0, r6
   47b60:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   47b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   47b68:	2100      	movs	r1, #0
   47b6a:	f7fd b9b4 	b.w	44ed6 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47b6e:	2101      	movs	r1, #1
   47b70:	4620      	mov	r0, r4
   47b72:	f7ff fd54 	bl	4761e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47b76:	2800      	cmp	r0, #0
   47b78:	d1e4      	bne.n	47b44 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   47b7a:	210f      	movs	r1, #15
   47b7c:	4620      	mov	r0, r4
   47b7e:	f7ff fd4e 	bl	4761e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47b82:	2800      	cmp	r0, #0
   47b84:	d1de      	bne.n	47b44 <bt_smp_disconnected+0x20>
   47b86:	e7e1      	b.n	47b4c <bt_smp_disconnected+0x28>

00047b88 <smp_timeout>:
{
   47b88:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   47b8a:	2108      	movs	r1, #8
{
   47b8c:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   47b8e:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   47b92:	f7e7 fd7b 	bl	2f68c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   47b96:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   47b9a:	2104      	movs	r1, #4
}
   47b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   47ba0:	f7ff bd23 	b.w	475ea <atomic_set_bit>

00047ba4 <bt_smp_update_keys>:
{
   47ba4:	b570      	push	{r4, r5, r6, lr}
   47ba6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   47ba8:	f7ff fc50 	bl	4744c <smp_chan_get>
	if (!smp) {
   47bac:	4605      	mov	r5, r0
   47bae:	2800      	cmp	r0, #0
   47bb0:	d06a      	beq.n	47c88 <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   47bb2:	1d06      	adds	r6, r0, #4
   47bb4:	2103      	movs	r1, #3
   47bb6:	4630      	mov	r0, r6
   47bb8:	f7ff fd31 	bl	4761e <atomic_test_bit>
   47bbc:	2800      	cmp	r0, #0
   47bbe:	d063      	beq.n	47c88 <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   47bc0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47bc4:	b108      	cbz	r0, 47bca <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   47bc6:	f7e7 ff71 	bl	2faac <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   47bca:	7a20      	ldrb	r0, [r4, #8]
   47bcc:	f104 0188 	add.w	r1, r4, #136	; 0x88
   47bd0:	f7e7 fece 	bl	2f970 <bt_keys_get_addr>
   47bd4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   47bd8:	b928      	cbnz	r0, 47be6 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   47bda:	4628      	mov	r0, r5
   47bdc:	2108      	movs	r1, #8
}
   47bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   47be2:	f7ff bead 	b.w	47940 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   47be6:	210e      	movs	r1, #14
   47be8:	4630      	mov	r0, r6
   47bea:	f7ff fd18 	bl	4761e <atomic_test_bit>
   47bee:	b128      	cbz	r0, 47bfc <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   47bf0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   47bf4:	7b53      	ldrb	r3, [r2, #13]
   47bf6:	f043 0302 	orr.w	r3, r3, #2
   47bfa:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   47bfc:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   47bfe:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   47c02:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   47c04:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   47c06:	d836      	bhi.n	47c76 <bt_smp_update_keys+0xd2>
   47c08:	b3c2      	cbz	r2, 47c7c <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   47c0a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   47c0e:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   47c10:	7b6b      	ldrb	r3, [r5, #13]
   47c12:	7d2a      	ldrb	r2, [r5, #20]
   47c14:	4293      	cmp	r3, r2
   47c16:	bf28      	it	cs
   47c18:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   47c1a:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47c1c:	4630      	mov	r0, r6
   47c1e:	2105      	movs	r1, #5
   47c20:	f7ff fcfd 	bl	4761e <atomic_test_bit>
   47c24:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   47c28:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47c2a:	b350      	cbz	r0, 47c82 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   47c2c:	f042 0210 	orr.w	r2, r2, #16
   47c30:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   47c32:	210d      	movs	r1, #13
   47c34:	4630      	mov	r0, r6
   47c36:	f7ff fcf2 	bl	4761e <atomic_test_bit>
   47c3a:	b328      	cbz	r0, 47c88 <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   47c3c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47c40:	2120      	movs	r1, #32
   47c42:	f000 f834 	bl	47cae <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   47c46:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47c4a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   47c4e:	2210      	movs	r2, #16
   47c50:	301a      	adds	r0, #26
   47c52:	f7fd f935 	bl	44ec0 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   47c56:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47c5a:	2208      	movs	r2, #8
   47c5c:	2100      	movs	r1, #0
   47c5e:	3010      	adds	r0, #16
   47c60:	f7fd f939 	bl	44ed6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   47c64:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47c68:	2202      	movs	r2, #2
}
   47c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   47c6e:	2100      	movs	r1, #0
   47c70:	3018      	adds	r0, #24
   47c72:	f7fd b930 	b.w	44ed6 <memset>
	switch (smp->method) {
   47c76:	3a05      	subs	r2, #5
   47c78:	2a01      	cmp	r2, #1
   47c7a:	d9c6      	bls.n	47c0a <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   47c7c:	f023 0301 	bic.w	r3, r3, #1
   47c80:	e7c5      	b.n	47c0e <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   47c82:	f022 0210 	bic.w	r2, r2, #16
   47c86:	735a      	strb	r2, [r3, #13]
}
   47c88:	bd70      	pop	{r4, r5, r6, pc}

00047c8a <id_add>:
	bt_id_add(keys);
   47c8a:	f7e3 bf47 	b.w	2bb1c <bt_id_add>

00047c8e <bt_keys_get_type>:
{
   47c8e:	b570      	push	{r4, r5, r6, lr}
   47c90:	4604      	mov	r4, r0
   47c92:	460d      	mov	r5, r1
   47c94:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   47c96:	f7e7 feab 	bl	2f9f0 <bt_keys_find>
	if (keys) {
   47c9a:	b938      	cbnz	r0, 47cac <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   47c9c:	4631      	mov	r1, r6
   47c9e:	4628      	mov	r0, r5
   47ca0:	f7e7 fe66 	bl	2f970 <bt_keys_get_addr>
	if (!keys) {
   47ca4:	b110      	cbz	r0, 47cac <bt_keys_get_type+0x1e>
	keys->keys |= type;
   47ca6:	89c3      	ldrh	r3, [r0, #14]
   47ca8:	431c      	orrs	r4, r3
   47caa:	81c4      	strh	r4, [r0, #14]
}
   47cac:	bd70      	pop	{r4, r5, r6, pc}

00047cae <bt_keys_add_type>:
	keys->keys |= type;
   47cae:	89c3      	ldrh	r3, [r0, #14]
   47cb0:	4319      	orrs	r1, r3
   47cb2:	81c1      	strh	r1, [r0, #14]
}
   47cb4:	4770      	bx	lr

00047cb6 <keys_set>:
{
   47cb6:	b570      	push	{r4, r5, r6, lr}
   47cb8:	4605      	mov	r5, r0
   47cba:	b090      	sub	sp, #64	; 0x40
   47cbc:	4614      	mov	r4, r2
   47cbe:	4618      	mov	r0, r3
	if (!name) {
   47cc0:	b915      	cbnz	r5, 47cc8 <keys_set+0x12>
			return -EINVAL;
   47cc2:	f06f 0415 	mvn.w	r4, #21
   47cc6:	e01c      	b.n	47d02 <keys_set+0x4c>
	len = read_cb(cb_arg, val, sizeof(val));
   47cc8:	2234      	movs	r2, #52	; 0x34
   47cca:	a903      	add	r1, sp, #12
   47ccc:	47a0      	blx	r4
	if (len < 0) {
   47cce:	1e04      	subs	r4, r0, #0
   47cd0:	dbf7      	blt.n	47cc2 <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   47cd2:	a901      	add	r1, sp, #4
   47cd4:	4628      	mov	r0, r5
   47cd6:	f7fd f9bb 	bl	45050 <bt_settings_decode_key>
	if (err) {
   47cda:	4606      	mov	r6, r0
   47cdc:	2800      	cmp	r0, #0
   47cde:	d1f0      	bne.n	47cc2 <keys_set+0xc>
	settings_name_next(name, &next);
   47ce0:	4669      	mov	r1, sp
   47ce2:	4628      	mov	r0, r5
   47ce4:	f7fb fe21 	bl	4392a <settings_name_next>
	if (!next) {
   47ce8:	9800      	ldr	r0, [sp, #0]
   47cea:	b968      	cbnz	r0, 47d08 <keys_set+0x52>
	if (!len) {
   47cec:	b99c      	cbnz	r4, 47d16 <keys_set+0x60>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   47cee:	aa01      	add	r2, sp, #4
   47cf0:	4621      	mov	r1, r4
   47cf2:	203f      	movs	r0, #63	; 0x3f
   47cf4:	f7e7 fe7c 	bl	2f9f0 <bt_keys_find>
		if (keys) {
   47cf8:	b118      	cbz	r0, 47d02 <keys_set+0x4c>
			(void)memset(keys, 0, sizeof(*keys));
   47cfa:	2240      	movs	r2, #64	; 0x40
   47cfc:	4621      	mov	r1, r4
   47cfe:	f7fd f8ea 	bl	44ed6 <memset>
}
   47d02:	4620      	mov	r0, r4
   47d04:	b010      	add	sp, #64	; 0x40
   47d06:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   47d08:	220a      	movs	r2, #10
   47d0a:	4631      	mov	r1, r6
   47d0c:	f7fd f820 	bl	44d50 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   47d10:	2800      	cmp	r0, #0
   47d12:	d0eb      	beq.n	47cec <keys_set+0x36>
   47d14:	e7d5      	b.n	47cc2 <keys_set+0xc>
	keys = bt_keys_get_addr(id, &addr);
   47d16:	a901      	add	r1, sp, #4
   47d18:	2000      	movs	r0, #0
   47d1a:	f7e7 fe29 	bl	2f970 <bt_keys_get_addr>
	if (!keys) {
   47d1e:	b158      	cbz	r0, 47d38 <keys_set+0x82>
	if (len != BT_KEYS_STORAGE_LEN) {
   47d20:	2c34      	cmp	r4, #52	; 0x34
   47d22:	d002      	beq.n	47d2a <keys_set+0x74>
			bt_keys_clear(keys);
   47d24:	f7e7 fec2 	bl	2faac <bt_keys_clear>
   47d28:	e7cb      	b.n	47cc2 <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   47d2a:	4622      	mov	r2, r4
   47d2c:	a903      	add	r1, sp, #12
   47d2e:	300c      	adds	r0, #12
   47d30:	f7fd f8c6 	bl	44ec0 <memcpy>
	return 0;
   47d34:	2400      	movs	r4, #0
   47d36:	e7e4      	b.n	47d02 <keys_set+0x4c>
		return -ENOMEM;
   47d38:	f06f 040b 	mvn.w	r4, #11
   47d3c:	e7e1      	b.n	47d02 <keys_set+0x4c>

00047d3e <fixed_data_unref>:
}
   47d3e:	4770      	bx	lr

00047d40 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   47d40:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   47d42:	6849      	ldr	r1, [r1, #4]
   47d44:	6809      	ldr	r1, [r1, #0]
   47d46:	f7f5 ba8f 	b.w	3d268 <net_buf_alloc_len>

00047d4a <net_buf_get>:
{
   47d4a:	b570      	push	{r4, r5, r6, lr}
   47d4c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   47d4e:	f7f9 fdb1 	bl	418b4 <z_impl_k_queue_get>
	if (!buf) {
   47d52:	4605      	mov	r5, r0
   47d54:	b128      	cbz	r0, 47d62 <net_buf_get+0x18>
   47d56:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   47d58:	7963      	ldrb	r3, [r4, #5]
   47d5a:	f013 0301 	ands.w	r3, r3, #1
   47d5e:	d102      	bne.n	47d66 <net_buf_get+0x1c>
	frag->frags = NULL;
   47d60:	6023      	str	r3, [r4, #0]
}
   47d62:	4628      	mov	r0, r5
   47d64:	bd70      	pop	{r4, r5, r6, pc}
   47d66:	2300      	movs	r3, #0
   47d68:	2200      	movs	r2, #0
   47d6a:	4630      	mov	r0, r6
   47d6c:	f7f9 fda2 	bl	418b4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   47d70:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   47d72:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   47d74:	f023 0301 	bic.w	r3, r3, #1
   47d78:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   47d7a:	4604      	mov	r4, r0
   47d7c:	e7ec      	b.n	47d58 <net_buf_get+0xe>

00047d7e <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   47d7e:	6883      	ldr	r3, [r0, #8]
   47d80:	440b      	add	r3, r1
   47d82:	6003      	str	r3, [r0, #0]
}
   47d84:	4770      	bx	lr

00047d86 <net_buf_put>:
{
   47d86:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   47d88:	460a      	mov	r2, r1
   47d8a:	6814      	ldr	r4, [r2, #0]
   47d8c:	b914      	cbnz	r4, 47d94 <net_buf_put+0xe>
}
   47d8e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   47d90:	f001 b84c 	b.w	48e2c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   47d94:	7953      	ldrb	r3, [r2, #5]
   47d96:	f043 0301 	orr.w	r3, r3, #1
   47d9a:	7153      	strb	r3, [r2, #5]
   47d9c:	4622      	mov	r2, r4
   47d9e:	e7f4      	b.n	47d8a <net_buf_put+0x4>

00047da0 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   47da0:	7902      	ldrb	r2, [r0, #4]
   47da2:	3201      	adds	r2, #1
   47da4:	7102      	strb	r2, [r0, #4]
	return buf;
}
   47da6:	4770      	bx	lr

00047da8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   47da8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   47daa:	4618      	mov	r0, r3
   47dac:	681b      	ldr	r3, [r3, #0]
   47dae:	2b00      	cmp	r3, #0
   47db0:	d1fb      	bne.n	47daa <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   47db2:	4770      	bx	lr

00047db4 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   47db4:	6802      	ldr	r2, [r0, #0]
{
   47db6:	b510      	push	{r4, lr}
	if (parent->frags) {
   47db8:	b12a      	cbz	r2, 47dc6 <net_buf_frag_insert+0x12>
   47dba:	460b      	mov	r3, r1
	while (buf->frags) {
   47dbc:	461c      	mov	r4, r3
   47dbe:	681b      	ldr	r3, [r3, #0]
   47dc0:	2b00      	cmp	r3, #0
   47dc2:	d1fb      	bne.n	47dbc <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   47dc4:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   47dc6:	6001      	str	r1, [r0, #0]
}
   47dc8:	bd10      	pop	{r4, pc}

00047dca <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   47dca:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   47dcc:	4604      	mov	r4, r0
   47dce:	b920      	cbnz	r0, 47dda <net_buf_frag_add+0x10>
	buf->ref++;
   47dd0:	790b      	ldrb	r3, [r1, #4]
   47dd2:	3301      	adds	r3, #1
   47dd4:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   47dd6:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   47dd8:	bd10      	pop	{r4, pc}
   47dda:	4603      	mov	r3, r0
	while (buf->frags) {
   47ddc:	4618      	mov	r0, r3
   47dde:	681b      	ldr	r3, [r3, #0]
   47de0:	2b00      	cmp	r3, #0
   47de2:	d1fb      	bne.n	47ddc <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   47de4:	f7ff ffe6 	bl	47db4 <net_buf_frag_insert>
   47de8:	4620      	mov	r0, r4
   47dea:	e7f5      	b.n	47dd8 <net_buf_frag_add+0xe>

00047dec <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   47dec:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   47dee:	b108      	cbz	r0, 47df4 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   47df0:	680b      	ldr	r3, [r1, #0]
   47df2:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   47df4:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   47df6:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   47df8:	4608      	mov	r0, r1
	frag->frags = NULL;
   47dfa:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   47dfc:	f7f5 fac8 	bl	3d390 <net_buf_unref>
#endif

	return next_frag;
}
   47e00:	4620      	mov	r0, r4
   47e02:	bd10      	pop	{r4, pc}

00047e04 <net_buf_simple_add>:
	return buf->data + buf->len;
   47e04:	8883      	ldrh	r3, [r0, #4]
   47e06:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   47e08:	4419      	add	r1, r3
   47e0a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   47e0c:	18d0      	adds	r0, r2, r3
   47e0e:	4770      	bx	lr

00047e10 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   47e10:	b430      	push	{r4, r5}
   47e12:	8884      	ldrh	r4, [r0, #4]
   47e14:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   47e16:	18a3      	adds	r3, r4, r2
   47e18:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   47e1a:	1928      	adds	r0, r5, r4
}
   47e1c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   47e1e:	f7fd b84f 	b.w	44ec0 <memcpy>

00047e22 <net_buf_simple_add_u8>:
   47e22:	8883      	ldrh	r3, [r0, #4]
   47e24:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   47e26:	b510      	push	{r4, lr}
	buf->len += len;
   47e28:	1c5c      	adds	r4, r3, #1
   47e2a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   47e2c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   47e2e:	18d0      	adds	r0, r2, r3
   47e30:	bd10      	pop	{r4, pc}

00047e32 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   47e32:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   47e34:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   47e36:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   47e38:	1a40      	subs	r0, r0, r1
	buf->len += len;
   47e3a:	4411      	add	r1, r2
	buf->data -= len;
   47e3c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   47e3e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   47e40:	4770      	bx	lr

00047e42 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47e42:	8882      	ldrh	r2, [r0, #4]
   47e44:	1a52      	subs	r2, r2, r1
{
   47e46:	4603      	mov	r3, r0
	buf->len -= len;
   47e48:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   47e4a:	6800      	ldr	r0, [r0, #0]
   47e4c:	4408      	add	r0, r1
   47e4e:	6018      	str	r0, [r3, #0]
}
   47e50:	4770      	bx	lr

00047e52 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   47e52:	4603      	mov	r3, r0
	void *data = buf->data;
   47e54:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47e56:	889a      	ldrh	r2, [r3, #4]
   47e58:	1a52      	subs	r2, r2, r1
	buf->data += len;
   47e5a:	4401      	add	r1, r0
	buf->len -= len;
   47e5c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   47e5e:	6019      	str	r1, [r3, #0]

	return data;
}
   47e60:	4770      	bx	lr

00047e62 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   47e62:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   47e64:	6803      	ldr	r3, [r0, #0]
   47e66:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   47e68:	2102      	movs	r1, #2
   47e6a:	f7ff ffea 	bl	47e42 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   47e6e:	4620      	mov	r0, r4
   47e70:	bd10      	pop	{r4, pc}

00047e72 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   47e72:	6802      	ldr	r2, [r0, #0]
   47e74:	6880      	ldr	r0, [r0, #8]
}
   47e76:	1a10      	subs	r0, r2, r0
   47e78:	4770      	bx	lr

00047e7a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   47e7a:	8883      	ldrh	r3, [r0, #4]
   47e7c:	88c2      	ldrh	r2, [r0, #6]
   47e7e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   47e80:	6803      	ldr	r3, [r0, #0]
   47e82:	6880      	ldr	r0, [r0, #8]
   47e84:	1a18      	subs	r0, r3, r0
}
   47e86:	1a10      	subs	r0, r2, r0
   47e88:	4770      	bx	lr

00047e8a <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   47e8a:	6903      	ldr	r3, [r0, #16]
{
   47e8c:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   47e8e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   47e92:	2300      	movs	r3, #0
   47e94:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   47e96:	7f83      	ldrb	r3, [r0, #30]
{
   47e98:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   47e9a:	b113      	cbz	r3, 47ea2 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   47e9c:	7a40      	ldrb	r0, [r0, #9]
   47e9e:	f000 fb64 	bl	4856a <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   47ea2:	2301      	movs	r3, #1
   47ea4:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   47ea6:	2300      	movs	r3, #0
   47ea8:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   47eaa:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   47eac:	77a3      	strb	r3, [r4, #30]
}
   47eae:	bd10      	pop	{r4, pc}

00047eb0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   47eb0:	f7f9 bc46 	b.w	41740 <z_impl_k_mutex_lock>

00047eb4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   47eb4:	f7f9 bcbc 	b.w	41830 <z_impl_k_mutex_unlock>

00047eb8 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   47eb8:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   47eba:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   47ebc:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   47ec0:	b921      	cbnz	r1, 47ecc <usb_dc_ep_check_cap+0x14>
   47ec2:	1e10      	subs	r0, r2, #0
   47ec4:	bf18      	it	ne
   47ec6:	2001      	movne	r0, #1
   47ec8:	4240      	negs	r0, r0
   47eca:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   47ecc:	2a08      	cmp	r2, #8
   47ece:	d806      	bhi.n	47ede <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   47ed0:	2901      	cmp	r1, #1
   47ed2:	d107      	bne.n	47ee4 <usb_dc_ep_check_cap+0x2c>
   47ed4:	f083 0008 	eor.w	r0, r3, #8
   47ed8:	f340 00c0 	sbfx	r0, r0, #3, #1
   47edc:	4770      	bx	lr
		return -1;
   47ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47ee2:	4770      	bx	lr
	return 0;
   47ee4:	2000      	movs	r0, #0
}
   47ee6:	4770      	bx	lr

00047ee8 <usb_dc_ep_read>:
{
   47ee8:	b570      	push	{r4, r5, r6, lr}
   47eea:	4604      	mov	r4, r0
   47eec:	460e      	mov	r6, r1
   47eee:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   47ef0:	f7f5 ff76 	bl	3dde0 <usb_dc_ep_read_wait>
	if (ret) {
   47ef4:	b930      	cbnz	r0, 47f04 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   47ef6:	b906      	cbnz	r6, 47efa <usb_dc_ep_read+0x12>
   47ef8:	b125      	cbz	r5, 47f04 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   47efa:	4620      	mov	r0, r4
}
   47efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   47f00:	f7f5 bfb6 	b.w	3de70 <usb_dc_ep_read_continue>
}
   47f04:	bd70      	pop	{r4, r5, r6, pc}

00047f06 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   47f06:	f1a0 0308 	sub.w	r3, r0, #8
   47f0a:	f3bf 8f5b 	dmb	ish
   47f0e:	e853 2f00 	ldrex	r2, [r3]
   47f12:	1c51      	adds	r1, r2, #1
   47f14:	e843 1c00 	strex	ip, r1, [r3]
   47f18:	f1bc 0f00 	cmp.w	ip, #0
   47f1c:	d1f7      	bne.n	47f0e <adc_context_on_timer_expired+0x8>
   47f1e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   47f22:	b91a      	cbnz	r2, 47f2c <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   47f24:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   47f28:	f7f6 b890 	b.w	3e04c <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   47f2c:	f06f 030f 	mvn.w	r3, #15
   47f30:	6683      	str	r3, [r0, #104]	; 0x68
}
   47f32:	4770      	bx	lr

00047f34 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   47f34:	6903      	ldr	r3, [r0, #16]
   47f36:	b2c9      	uxtb	r1, r1
   47f38:	220c      	movs	r2, #12
   47f3a:	fb01 3302 	mla	r3, r1, r2, r3
   47f3e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   47f40:	f000 0007 	and.w	r0, r0, #7
   47f44:	4770      	bx	lr

00047f46 <set_on_state>:
	__asm__ volatile(
   47f46:	f04f 0320 	mov.w	r3, #32
   47f4a:	f3ef 8211 	mrs	r2, BASEPRI
   47f4e:	f383 8812 	msr	BASEPRI_MAX, r3
   47f52:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   47f56:	6803      	ldr	r3, [r0, #0]
   47f58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47f5c:	f043 0302 	orr.w	r3, r3, #2
   47f60:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   47f62:	f382 8811 	msr	BASEPRI, r2
   47f66:	f3bf 8f6f 	isb	sy
}
   47f6a:	4770      	bx	lr

00047f6c <stop>:
{
   47f6c:	4603      	mov	r3, r0
   47f6e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   47f70:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   47f72:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47f74:	f04f 0420 	mov.w	r4, #32
   47f78:	f3ef 8611 	mrs	r6, BASEPRI
   47f7c:	f384 8812 	msr	BASEPRI_MAX, r4
   47f80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47f84:	250c      	movs	r5, #12
   47f86:	fb05 0401 	mla	r4, r5, r1, r0
   47f8a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   47f8c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   47f90:	d001      	beq.n	47f96 <stop+0x2a>
   47f92:	42a2      	cmp	r2, r4
   47f94:	d110      	bne.n	47fb8 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   47f96:	fb05 0001 	mla	r0, r5, r1, r0
   47f9a:	2201      	movs	r2, #1
   47f9c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   47f9e:	2000      	movs	r0, #0
	__asm__ volatile(
   47fa0:	f386 8811 	msr	BASEPRI, r6
   47fa4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   47fa8:	b928      	cbnz	r0, 47fb6 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   47faa:	685b      	ldr	r3, [r3, #4]
   47fac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   47fb0:	684b      	ldr	r3, [r1, #4]
   47fb2:	4798      	blx	r3
	return 0;
   47fb4:	2000      	movs	r0, #0
}
   47fb6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   47fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47fbc:	e7f0      	b.n	47fa0 <stop+0x34>

00047fbe <api_stop>:
	return stop(dev, subsys, CTX_API);
   47fbe:	2280      	movs	r2, #128	; 0x80
   47fc0:	f7ff bfd4 	b.w	47f6c <stop>

00047fc4 <async_start>:
{
   47fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47fc6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   47fc8:	6904      	ldr	r4, [r0, #16]
{
   47fca:	4605      	mov	r5, r0
   47fcc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47fce:	f04f 0020 	mov.w	r0, #32
   47fd2:	f3ef 8c11 	mrs	ip, BASEPRI
   47fd6:	f380 8812 	msr	BASEPRI_MAX, r0
   47fda:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47fde:	260c      	movs	r6, #12
   47fe0:	fb06 4601 	mla	r6, r6, r1, r4
   47fe4:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   47fe6:	f000 0e07 	and.w	lr, r0, #7
   47fea:	f1be 0f01 	cmp.w	lr, #1
   47fee:	d111      	bne.n	48014 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   47ff0:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   47ff2:	2600      	movs	r6, #0
	__asm__ volatile(
   47ff4:	f38c 8811 	msr	BASEPRI, ip
   47ff8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   47ffc:	b946      	cbnz	r6, 48010 <async_start+0x4c>
	subdata->cb = cb;
   47ffe:	200c      	movs	r0, #12
   48000:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   48004:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   48008:	686b      	ldr	r3, [r5, #4]
   4800a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   4800e:	4798      	blx	r3
}
   48010:	4630      	mov	r0, r6
   48012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   48014:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   48018:	4287      	cmp	r7, r0
   4801a:	bf14      	ite	ne
   4801c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   48020:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   48024:	e7e6      	b.n	47ff4 <async_start+0x30>

00048026 <api_start>:
{
   48026:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   48028:	2480      	movs	r4, #128	; 0x80
   4802a:	9400      	str	r4, [sp, #0]
   4802c:	f7ff ffca 	bl	47fc4 <async_start>
}
   48030:	b002      	add	sp, #8
   48032:	bd10      	pop	{r4, pc}

00048034 <onoff_started_callback>:
	return &data->mgr[type];
   48034:	6900      	ldr	r0, [r0, #16]
{
   48036:	b410      	push	{r4}
	return &data->mgr[type];
   48038:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   4803a:	241c      	movs	r4, #28
   4803c:	fb03 0004 	mla	r0, r3, r4, r0
   48040:	2100      	movs	r1, #0
}
   48042:	bc10      	pop	{r4}
	notify(mgr, 0);
   48044:	4710      	bx	r2

00048046 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   48046:	2000      	movs	r0, #0
   48048:	f000 b92d 	b.w	482a6 <nrfx_clock_start>

0004804c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4804c:	2000      	movs	r0, #0
   4804e:	f7f7 bb5d 	b.w	3f70c <nrfx_clock_stop>

00048052 <blocking_start_callback>:
{
   48052:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   48054:	f7f9 bc62 	b.w	4191c <z_impl_k_sem_give>

00048058 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48058:	6843      	ldr	r3, [r0, #4]
   4805a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   4805c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   48060:	600b      	str	r3, [r1, #0]
}
   48062:	2000      	movs	r0, #0
   48064:	4770      	bx	lr

00048066 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48066:	6843      	ldr	r3, [r0, #4]
   48068:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   4806a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   4806e:	4042      	eors	r2, r0
   48070:	400a      	ands	r2, r1
   48072:	4042      	eors	r2, r0
    p_reg->OUT = value;
   48074:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   48078:	2000      	movs	r0, #0
   4807a:	4770      	bx	lr

0004807c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4807c:	6843      	ldr	r3, [r0, #4]
   4807e:	685b      	ldr	r3, [r3, #4]
}
   48080:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   48082:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   48086:	4770      	bx	lr

00048088 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48088:	6843      	ldr	r3, [r0, #4]
   4808a:	685b      	ldr	r3, [r3, #4]
}
   4808c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   4808e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   48092:	4770      	bx	lr

00048094 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   48094:	6843      	ldr	r3, [r0, #4]
   48096:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   48098:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   4809c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   4809e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   480a2:	2000      	movs	r0, #0
   480a4:	4770      	bx	lr

000480a6 <gpio_nrfx_manage_callback>:
	return port->data;
   480a6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   480a8:	6858      	ldr	r0, [r3, #4]
{
   480aa:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   480ac:	b158      	cbz	r0, 480c6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   480ae:	2400      	movs	r4, #0
   480b0:	4281      	cmp	r1, r0
   480b2:	d112      	bne.n	480da <gpio_nrfx_manage_callback+0x34>
	return node->next;
   480b4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   480b6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   480b8:	b954      	cbnz	r4, 480d0 <gpio_nrfx_manage_callback+0x2a>
   480ba:	428d      	cmp	r5, r1
	list->head = node;
   480bc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   480be:	d100      	bne.n	480c2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   480c0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   480c2:	2000      	movs	r0, #0
   480c4:	6008      	str	r0, [r1, #0]
	if (set) {
   480c6:	b96a      	cbnz	r2, 480e4 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   480c8:	2000      	movs	r0, #0
}
   480ca:	bd30      	pop	{r4, r5, pc}
   480cc:	4628      	mov	r0, r5
   480ce:	e7ef      	b.n	480b0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   480d0:	428d      	cmp	r5, r1
	parent->next = child;
   480d2:	6020      	str	r0, [r4, #0]
	list->tail = node;
   480d4:	bf08      	it	eq
   480d6:	609c      	streq	r4, [r3, #8]
}
   480d8:	e7f3      	b.n	480c2 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   480da:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   480dc:	4604      	mov	r4, r0
   480de:	2d00      	cmp	r5, #0
   480e0:	d1f4      	bne.n	480cc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   480e2:	b13a      	cbz	r2, 480f4 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   480e4:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   480e6:	685a      	ldr	r2, [r3, #4]
   480e8:	600a      	str	r2, [r1, #0]
	list->head = node;
   480ea:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   480ec:	2800      	cmp	r0, #0
   480ee:	d1eb      	bne.n	480c8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   480f0:	6099      	str	r1, [r3, #8]
}
   480f2:	e7ea      	b.n	480ca <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   480f4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   480f8:	e7e7      	b.n	480ca <gpio_nrfx_manage_callback+0x24>

000480fa <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   480fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   480fc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   48100:	2908      	cmp	r1, #8
   48102:	6e66      	ldr	r6, [r4, #100]	; 0x64
   48104:	6e65      	ldr	r5, [r4, #100]	; 0x64
   48106:	6e62      	ldr	r2, [r4, #100]	; 0x64
   48108:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   4810a:	ea4f 2515 	mov.w	r5, r5, lsr #8
   4810e:	ea4f 6303 	mov.w	r3, r3, lsl #24
   48112:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   48116:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   4811a:	ea4f 2202 	mov.w	r2, r2, lsl #8
   4811e:	ea43 0305 	orr.w	r3, r3, r5
   48122:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   48126:	ea43 0302 	orr.w	r3, r3, r2
   4812a:	9300      	str	r3, [sp, #0]
   4812c:	6e26      	ldr	r6, [r4, #96]	; 0x60
   4812e:	6e25      	ldr	r5, [r4, #96]	; 0x60
   48130:	6e22      	ldr	r2, [r4, #96]	; 0x60
   48132:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   48134:	ea4f 2415 	mov.w	r4, r5, lsr #8
   48138:	ea4f 6303 	mov.w	r3, r3, lsl #24
   4813c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   48140:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   48144:	ea43 0304 	orr.w	r3, r3, r4
   48148:	ea4f 2402 	mov.w	r4, r2, lsl #8
   4814c:	bf28      	it	cs
   4814e:	2108      	movcs	r1, #8
   48150:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   48154:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   48156:	460a      	mov	r2, r1
   48158:	460c      	mov	r4, r1
   4815a:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   4815c:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   4815e:	f7fc feaf 	bl	44ec0 <memcpy>

	return length;
}
   48162:	4620      	mov	r0, r4
   48164:	b002      	add	sp, #8
   48166:	bd70      	pop	{r4, r5, r6, pc}

00048168 <is_regular_addr_valid>:
{
   48168:	b538      	push	{r3, r4, r5, lr}
   4816a:	4605      	mov	r5, r0
   4816c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   4816e:	f000 f91c 	bl	483aa <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   48172:	2d00      	cmp	r5, #0
   48174:	db07      	blt.n	48186 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   48176:	42a8      	cmp	r0, r5
   48178:	d905      	bls.n	48186 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   4817a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   4817c:	4284      	cmp	r4, r0
   4817e:	bf8c      	ite	hi
   48180:	2000      	movhi	r0, #0
   48182:	2001      	movls	r0, #1
}
   48184:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   48186:	2000      	movs	r0, #0
   48188:	e7fc      	b.n	48184 <is_regular_addr_valid+0x1c>

0004818a <flash_nrf_read>:
{
   4818a:	b570      	push	{r4, r5, r6, lr}
   4818c:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   4818e:	4628      	mov	r0, r5
   48190:	4619      	mov	r1, r3
{
   48192:	4616      	mov	r6, r2
   48194:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   48196:	f7ff ffe7 	bl	48168 <is_regular_addr_valid>
   4819a:	b138      	cbz	r0, 481ac <flash_nrf_read+0x22>
	if (!len) {
   4819c:	b14c      	cbz	r4, 481b2 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   4819e:	4622      	mov	r2, r4
   481a0:	4629      	mov	r1, r5
   481a2:	4630      	mov	r0, r6
   481a4:	f7fc fe8c 	bl	44ec0 <memcpy>
	return 0;
   481a8:	2000      	movs	r0, #0
}
   481aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   481ac:	f06f 0015 	mvn.w	r0, #21
   481b0:	e7fb      	b.n	481aa <flash_nrf_read+0x20>
		return 0;
   481b2:	4620      	mov	r0, r4
   481b4:	e7f9      	b.n	481aa <flash_nrf_read+0x20>

000481b6 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   481b6:	2000      	movs	r0, #0
   481b8:	f7e8 be90 	b.w	30edc <ticker_is_initialized>

000481bc <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   481bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   481c0:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   481c2:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   481c4:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   481c8:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   481ca:	f8c4 8000 	str.w	r8, [r4]
{
   481ce:	460d      	mov	r5, r1
   481d0:	4616      	mov	r6, r2
	info->index = 0U;
   481d2:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   481d6:	aa01      	add	r2, sp, #4
   481d8:	4669      	mov	r1, sp
   481da:	4798      	blx	r3

	while (layout_size--) {
   481dc:	e9dd 7c00 	ldrd	r7, ip, [sp]
   481e0:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   481e2:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   481e6:	4560      	cmp	r0, ip
   481e8:	d104      	bne.n	481f4 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   481ea:	f06f 0015 	mvn.w	r0, #21
}
   481ee:	b003      	add	sp, #12
   481f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   481f4:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   481f8:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   481fa:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   481fc:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   48200:	b985      	cbnz	r5, 48224 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   48202:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   48204:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   48208:	4543      	cmp	r3, r8
   4820a:	bf28      	it	cs
   4820c:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   4820e:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   48212:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   48214:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   48216:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   48218:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   4821a:	f100 0001 	add.w	r0, r0, #1
   4821e:	d9e2      	bls.n	481e6 <flash_get_page_info+0x2a>
			return 0;
   48220:	2000      	movs	r0, #0
   48222:	e7e4      	b.n	481ee <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   48224:	1aab      	subs	r3, r5, r2
   48226:	fbb3 f3f9 	udiv	r3, r3, r9
   4822a:	e7eb      	b.n	48204 <flash_get_page_info+0x48>

0004822c <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   4822c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   4822e:	2200      	movs	r2, #0
   48230:	f7ff bfc4 	b.w	481bc <flash_get_page_info>

00048234 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   48234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   48238:	6883      	ldr	r3, [r0, #8]
{
   4823a:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   4823c:	691b      	ldr	r3, [r3, #16]
{
   4823e:	4688      	mov	r8, r1
   48240:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   48242:	a901      	add	r1, sp, #4
   48244:	aa02      	add	r2, sp, #8
   48246:	4798      	blx	r3
	off_t off = 0;
   48248:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   4824a:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   4824c:	4625      	mov	r5, r4
   4824e:	9b02      	ldr	r3, [sp, #8]
   48250:	42ab      	cmp	r3, r5
   48252:	d802      	bhi.n	4825a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   48254:	b006      	add	sp, #24
   48256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   4825a:	9f01      	ldr	r7, [sp, #4]
   4825c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   48260:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   48262:	687b      	ldr	r3, [r7, #4]
   48264:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   48266:	683a      	ldr	r2, [r7, #0]
   48268:	42b2      	cmp	r2, r6
   4826a:	eb0a 0306 	add.w	r3, sl, r6
   4826e:	d802      	bhi.n	48276 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   48270:	3501      	adds	r5, #1
   48272:	469a      	mov	sl, r3
   48274:	e7eb      	b.n	4824e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   48276:	4649      	mov	r1, r9
   48278:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   4827a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   4827c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   4827e:	47c0      	blx	r8
   48280:	2800      	cmp	r0, #0
   48282:	d0e7      	beq.n	48254 <flash_page_foreach+0x20>
			off += page_info.size;
   48284:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   48286:	3601      	adds	r6, #1
			off += page_info.size;
   48288:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   4828a:	e7ec      	b.n	48266 <flash_page_foreach+0x32>

0004828c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   4828c:	4770      	bx	lr

0004828e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4828e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   48292:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   48296:	f1a0 0308 	sub.w	r3, r0, #8
   4829a:	4258      	negs	r0, r3
   4829c:	4158      	adcs	r0, r3
   4829e:	4770      	bx	lr

000482a0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   482a0:	4700      	bx	r0

000482a2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   482a2:	f001 b848 	b.w	49336 <z_impl_k_busy_wait>

000482a6 <nrfx_clock_start>:
    switch (domain)
   482a6:	b110      	cbz	r0, 482ae <nrfx_clock_start+0x8>
   482a8:	2801      	cmp	r0, #1
   482aa:	d01d      	beq.n	482e8 <nrfx_clock_start+0x42>
   482ac:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   482ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   482b2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   482b6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   482ba:	03c9      	lsls	r1, r1, #15
   482bc:	d512      	bpl.n	482e4 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   482be:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   482c2:	2a01      	cmp	r2, #1
   482c4:	d10e      	bne.n	482e4 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   482c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   482ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   482ce:	2200      	movs	r2, #0
   482d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   482d4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   482d8:	2202      	movs	r2, #2
   482da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   482de:	2201      	movs	r2, #1
   482e0:	609a      	str	r2, [r3, #8]
}
   482e2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   482e4:	2200      	movs	r2, #0
   482e6:	e7ee      	b.n	482c6 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   482e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   482ec:	2200      	movs	r2, #0
   482ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   482f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   482f6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   482fa:	6018      	str	r0, [r3, #0]
}
   482fc:	4770      	bx	lr

000482fe <nrf_gpio_reconfigure>:
{
   482fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   48300:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   48302:	a801      	add	r0, sp, #4
{
   48304:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   48308:	4617      	mov	r7, r2
   4830a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4830c:	f7f7 fa6e 	bl	3f7ec <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   48310:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   48312:	2f00      	cmp	r7, #0
   48314:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   48318:	bf14      	ite	ne
   4831a:	2302      	movne	r3, #2
   4831c:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   4831e:	2900      	cmp	r1, #0
   48320:	bf18      	it	ne
   48322:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   48326:	2d00      	cmp	r5, #0
   48328:	bf14      	ite	ne
   4832a:	f04f 0c0c 	movne.w	ip, #12
   4832e:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   48332:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   48334:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   48338:	bf14      	ite	ne
   4833a:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   4833e:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   48342:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   48344:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   48348:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   4834c:	bf14      	ite	ne
   4834e:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   48352:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   48356:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   4835a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4835e:	b101      	cbz	r1, 48362 <nrf_gpio_reconfigure+0x64>
   48360:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   48362:	b10f      	cbz	r7, 48368 <nrf_gpio_reconfigure+0x6a>
   48364:	783f      	ldrb	r7, [r7, #0]
   48366:	007f      	lsls	r7, r7, #1
   48368:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4836a:	b10d      	cbz	r5, 48370 <nrf_gpio_reconfigure+0x72>
   4836c:	782d      	ldrb	r5, [r5, #0]
   4836e:	00ad      	lsls	r5, r5, #2
   48370:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   48372:	b10c      	cbz	r4, 48378 <nrf_gpio_reconfigure+0x7a>
   48374:	7822      	ldrb	r2, [r4, #0]
   48376:	0214      	lsls	r4, r2, #8
   48378:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   4837a:	b10e      	cbz	r6, 48380 <nrf_gpio_reconfigure+0x82>
   4837c:	7836      	ldrb	r6, [r6, #0]
   4837e:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   48380:	432c      	orrs	r4, r5
   48382:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   48384:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   48388:	b003      	add	sp, #12
   4838a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004838c <nrf_gpio_cfg_sense_set>:
{
   4838c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   4838e:	f10d 030f 	add.w	r3, sp, #15
   48392:	9301      	str	r3, [sp, #4]
   48394:	2300      	movs	r3, #0
{
   48396:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   4839a:	9300      	str	r3, [sp, #0]
   4839c:	461a      	mov	r2, r3
   4839e:	4619      	mov	r1, r3
   483a0:	f7ff ffad 	bl	482fe <nrf_gpio_reconfigure>
}
   483a4:	b005      	add	sp, #20
   483a6:	f85d fb04 	ldr.w	pc, [sp], #4

000483aa <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   483aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   483ae:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   483b0:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   483b2:	4350      	muls	r0, r2
   483b4:	4770      	bx	lr

000483b6 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   483b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   483ba:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   483bc:	4770      	bx	lr

000483be <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   483be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   483c2:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   483c4:	4770      	bx	lr

000483c6 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   483c6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   483ca:	681a      	ldr	r2, [r3, #0]
   483cc:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   483ce:	bf1f      	itttt	ne
   483d0:	2200      	movne	r2, #0
   483d2:	601a      	strne	r2, [r3, #0]
   483d4:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   483d6:	2001      	movne	r0, #1
   483d8:	bf08      	it	eq
   483da:	2000      	moveq	r0, #0
}
   483dc:	4770      	bx	lr

000483de <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   483de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   483e2:	f44f 7260 	mov.w	r2, #896	; 0x380
   483e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   483ea:	4770      	bx	lr

000483ec <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   483ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   483f0:	f44f 7260 	mov.w	r2, #896	; 0x380
   483f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   483f8:	4770      	bx	lr

000483fa <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   483fa:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   483fc:	f7f7 fde0 	bl	3ffc0 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   48400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   48404:	f7f7 b9be 	b.w	3f784 <nrfx_clock_irq_handler>

00048408 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   48408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4840c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   48410:	f1a0 0308 	sub.w	r3, r0, #8
   48414:	4258      	negs	r0, r3
   48416:	4158      	adcs	r0, r3
   48418:	4770      	bx	lr

0004841a <nrfx_usbd_consumer>:
{
   4841a:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   4841c:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   4841e:	680d      	ldr	r5, [r1, #0]
   48420:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   48422:	bf97      	itett	ls
   48424:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   48428:	2100      	movhi	r1, #0
        size -= data_size;
   4842a:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   4842c:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   4842e:	bf8e      	itee	hi
   48430:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   48434:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   48436:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   48438:	429a      	cmp	r2, r3
   4843a:	d103      	bne.n	48444 <nrfx_usbd_consumer+0x2a>
   4843c:	1e20      	subs	r0, r4, #0
   4843e:	bf18      	it	ne
   48440:	2001      	movne	r0, #1
}
   48442:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   48444:	2000      	movs	r0, #0
   48446:	e7fc      	b.n	48442 <nrfx_usbd_consumer+0x28>

00048448 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   48448:	684b      	ldr	r3, [r1, #4]
{
   4844a:	b510      	push	{r4, lr}
   4844c:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   4844e:	680c      	ldr	r4, [r1, #0]
   48450:	bf28      	it	cs
   48452:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   48454:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   48458:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   4845a:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   4845c:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   4845e:	441a      	add	r2, r3
}
   48460:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   48462:	600a      	str	r2, [r1, #0]
}
   48464:	bf18      	it	ne
   48466:	2001      	movne	r0, #1
   48468:	bd10      	pop	{r4, pc}

0004846a <nrfx_usbd_feeder_ram_zlp>:
{
   4846a:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   4846c:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   4846e:	680b      	ldr	r3, [r1, #0]
   48470:	42a2      	cmp	r2, r4
   48472:	bf28      	it	cs
   48474:	4622      	movcs	r2, r4
   48476:	2a00      	cmp	r2, #0
   48478:	bf14      	ite	ne
   4847a:	461d      	movne	r5, r3
   4847c:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   4847e:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   48482:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   48486:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   48488:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   4848a:	600a      	str	r2, [r1, #0]
}
   4848c:	bf14      	ite	ne
   4848e:	2001      	movne	r0, #1
   48490:	2000      	moveq	r0, #0
   48492:	bd30      	pop	{r4, r5, pc}

00048494 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   48494:	f010 0f80 	tst.w	r0, #128	; 0x80
   48498:	bf14      	ite	ne
   4849a:	2300      	movne	r3, #0
   4849c:	2310      	moveq	r3, #16
   4849e:	f000 000f 	and.w	r0, r0, #15
}
   484a2:	4418      	add	r0, r3
   484a4:	4770      	bx	lr

000484a6 <ev_started_handler>:
}
   484a6:	4770      	bx	lr

000484a8 <nrf_usbd_epin_dma_handler>:
{
   484a8:	b508      	push	{r3, lr}
   484aa:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   484ac:	f7f7 fdfa 	bl	400a4 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   484b0:	4608      	mov	r0, r1
   484b2:	f7f7 fde9 	bl	40088 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   484b6:	7b83      	ldrb	r3, [r0, #14]
   484b8:	2b03      	cmp	r3, #3
   484ba:	d10a      	bne.n	484d2 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   484bc:	4608      	mov	r0, r1
   484be:	f7ff ffe9 	bl	48494 <ep2bit>
   484c2:	2301      	movs	r3, #1
   484c4:	fa03 f000 	lsl.w	r0, r3, r0
   484c8:	43c0      	mvns	r0, r0
}
   484ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   484ce:	f7f7 bef9 	b.w	402c4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   484d2:	6803      	ldr	r3, [r0, #0]
   484d4:	2b00      	cmp	r3, #0
   484d6:	d0f1      	beq.n	484bc <nrf_usbd_epin_dma_handler+0x14>
}
   484d8:	bd08      	pop	{r3, pc}

000484da <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   484da:	2087      	movs	r0, #135	; 0x87
   484dc:	f7ff bfe4 	b.w	484a8 <nrf_usbd_epin_dma_handler>

000484e0 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   484e0:	2086      	movs	r0, #134	; 0x86
   484e2:	f7ff bfe1 	b.w	484a8 <nrf_usbd_epin_dma_handler>

000484e6 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   484e6:	2085      	movs	r0, #133	; 0x85
   484e8:	f7ff bfde 	b.w	484a8 <nrf_usbd_epin_dma_handler>

000484ec <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   484ec:	2084      	movs	r0, #132	; 0x84
   484ee:	f7ff bfdb 	b.w	484a8 <nrf_usbd_epin_dma_handler>

000484f2 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   484f2:	2083      	movs	r0, #131	; 0x83
   484f4:	f7ff bfd8 	b.w	484a8 <nrf_usbd_epin_dma_handler>

000484f8 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   484f8:	2082      	movs	r0, #130	; 0x82
   484fa:	f7ff bfd5 	b.w	484a8 <nrf_usbd_epin_dma_handler>

000484fe <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   484fe:	2081      	movs	r0, #129	; 0x81
   48500:	f7ff bfd2 	b.w	484a8 <nrf_usbd_epin_dma_handler>

00048504 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   48504:	f7f7 beee 	b.w	402e4 <nrf_usbd_ep0in_dma_handler>

00048508 <nrfx_usbd_ep_max_packet_size_set>:
{
   48508:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   4850a:	f7f7 fdbd 	bl	40088 <ep_state_access>
    p_state->max_packet_size = size;
   4850e:	8181      	strh	r1, [r0, #12]
}
   48510:	bd08      	pop	{r3, pc}

00048512 <nrfx_usbd_ep_status_get>:
{
   48512:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   48514:	f7f7 fdb8 	bl	40088 <ep_state_access>
	__asm__ volatile(
   48518:	f04f 0220 	mov.w	r2, #32
   4851c:	f3ef 8311 	mrs	r3, BASEPRI
   48520:	f382 8812 	msr	BASEPRI_MAX, r2
   48524:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   48528:	6882      	ldr	r2, [r0, #8]
   4852a:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   4852c:	6802      	ldr	r2, [r0, #0]
   4852e:	b92a      	cbnz	r2, 4853c <nrfx_usbd_ep_status_get+0x2a>
   48530:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   48532:	f383 8811 	msr	BASEPRI, r3
   48536:	f3bf 8f6f 	isb	sy
}
   4853a:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   4853c:	2004      	movs	r0, #4
   4853e:	e7f8      	b.n	48532 <nrfx_usbd_ep_status_get+0x20>

00048540 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   48540:	2007      	movs	r0, #7
   48542:	f7f8 ba07 	b.w	40954 <nrf_usbd_epout_dma_handler>

00048546 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   48546:	2006      	movs	r0, #6
   48548:	f7f8 ba04 	b.w	40954 <nrf_usbd_epout_dma_handler>

0004854c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   4854c:	2005      	movs	r0, #5
   4854e:	f7f8 ba01 	b.w	40954 <nrf_usbd_epout_dma_handler>

00048552 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   48552:	2004      	movs	r0, #4
   48554:	f7f8 b9fe 	b.w	40954 <nrf_usbd_epout_dma_handler>

00048558 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   48558:	2003      	movs	r0, #3
   4855a:	f7f8 b9fb 	b.w	40954 <nrf_usbd_epout_dma_handler>

0004855e <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   4855e:	2002      	movs	r0, #2
   48560:	f7f8 b9f8 	b.w	40954 <nrf_usbd_epout_dma_handler>

00048564 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   48564:	2001      	movs	r0, #1
   48566:	f7f8 b9f5 	b.w	40954 <nrf_usbd_epout_dma_handler>

0004856a <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   4856a:	f7f8 bae9 	b.w	40b40 <usbd_ep_abort>

0004856e <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   4856e:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   48570:	7804      	ldrb	r4, [r0, #0]
   48572:	f36f 0441 	bfc	r4, #1, #1
   48576:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   48578:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   4857c:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   4857e:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   48580:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   48584:	d109      	bne.n	4859a <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   48586:	42b2      	cmp	r2, r6
   48588:	dd03      	ble.n	48592 <debounce_update+0x24>
        state->counter = 0;
   4858a:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   4858e:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   48590:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   48592:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   48594:	f366 048f 	bfi	r4, r6, #2, #14
   48598:	e7f9      	b.n	4858e <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   4859a:	e9d3 1300 	ldrd	r1, r3, [r3]
   4859e:	f014 0f01 	tst.w	r4, #1
   485a2:	bf08      	it	eq
   485a4:	460b      	moveq	r3, r1
    if (state->counter < flip_threshold) {
   485a6:	429e      	cmp	r6, r3
   485a8:	d208      	bcs.n	485bc <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   485aa:	4416      	add	r6, r2
   485ac:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   485b0:	d3f0      	bcc.n	48594 <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   485b2:	f643 73ff 	movw	r3, #16383	; 0x3fff
   485b6:	f363 048f 	bfi	r4, r3, #2, #14
   485ba:	e7e8      	b.n	4858e <debounce_update+0x20>
    state->pressed = !state->pressed;
   485bc:	f085 0401 	eor.w	r4, r5, #1
   485c0:	f044 0402 	orr.w	r4, r4, #2
   485c4:	e7e3      	b.n	4858e <debounce_update+0x20>

000485c6 <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   485c6:	8800      	ldrh	r0, [r0, #0]
   485c8:	f020 0002 	bic.w	r0, r0, #2
   485cc:	b280      	uxth	r0, r0
}
   485ce:	3800      	subs	r0, #0
   485d0:	bf18      	it	ne
   485d2:	2001      	movne	r0, #1
   485d4:	4770      	bx	lr

000485d6 <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   485d6:	7800      	ldrb	r0, [r0, #0]
   485d8:	f000 0001 	and.w	r0, r0, #1
   485dc:	4770      	bx	lr

000485de <debounce_get_changed>:

   485de:	7800      	ldrb	r0, [r0, #0]
   485e0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   485e4:	4770      	bx	lr

000485e6 <gpio_pin_configure_dt>:
{
   485e6:	b470      	push	{r4, r5, r6}
   485e8:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   485ea:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
   485ec:	795a      	ldrb	r2, [r3, #5]
	return gpio_pin_configure(spec->port,
   485ee:	791d      	ldrb	r5, [r3, #4]
   485f0:	430a      	orrs	r2, r1
	struct gpio_driver_data *data =
   485f2:	6901      	ldr	r1, [r0, #16]
	const struct gpio_driver_api *api =
   485f4:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   485f6:	2301      	movs	r3, #1
   485f8:	fa03 f405 	lsl.w	r4, r3, r5
   485fc:	680b      	ldr	r3, [r1, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   485fe:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   48602:	bf14      	ite	ne
   48604:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   48606:	43a3      	biceq	r3, r4
   48608:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
   4860a:	6833      	ldr	r3, [r6, #0]
   4860c:	4629      	mov	r1, r5
}
   4860e:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   48610:	4718      	bx	r3

00048612 <gpio_pin_set_dt>:
{
   48612:	4603      	mov	r3, r0
   48614:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   48616:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   48618:	7919      	ldrb	r1, [r3, #4]
   4861a:	2301      	movs	r3, #1
   4861c:	fa03 f101 	lsl.w	r1, r3, r1
   48620:	6903      	ldr	r3, [r0, #16]
   48622:	681b      	ldr	r3, [r3, #0]
   48624:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   48626:	bf18      	it	ne
   48628:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   4862c:	b112      	cbz	r2, 48634 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   4862e:	6883      	ldr	r3, [r0, #8]
   48630:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   48632:	4718      	bx	r3
   48634:	6883      	ldr	r3, [r0, #8]
   48636:	691b      	ldr	r3, [r3, #16]
   48638:	e7fb      	b.n	48632 <gpio_pin_set_dt+0x20>

0004863a <kscan_matrix_configure>:
    struct kscan_matrix_data *data = dev->data;
   4863a:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   4863c:	b111      	cbz	r1, 48644 <kscan_matrix_configure+0xa>
    data->callback = callback;
   4863e:	6059      	str	r1, [r3, #4]
    return 0;
   48640:	2000      	movs	r0, #0
   48642:	4770      	bx	lr
        return -EINVAL;
   48644:	f06f 0015 	mvn.w	r0, #21
}
   48648:	4770      	bx	lr

0004864a <kscan_matrix_interrupt_configure.isra.0>:
static int kscan_matrix_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   4864a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4864e:	4606      	mov	r6, r0
   48650:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   48652:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   48654:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   48658:	f04f 0801 	mov.w	r8, #1
   4865c:	6973      	ldr	r3, [r6, #20]
   4865e:	42ab      	cmp	r3, r5
   48660:	d802      	bhi.n	48668 <kscan_matrix_interrupt_configure.isra.0+0x1e>
    return 0;
   48662:	2000      	movs	r0, #0
}
   48664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   48668:	6933      	ldr	r3, [r6, #16]
   4866a:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   4866e:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   48672:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   48674:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   48678:	b197      	cbz	r7, 486a0 <kscan_matrix_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   4867a:	6902      	ldr	r2, [r0, #16]
   4867c:	6812      	ldr	r2, [r2, #0]
   4867e:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   48682:	4213      	tst	r3, r2
   48684:	d00c      	beq.n	486a0 <kscan_matrix_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   48686:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   4868a:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   4868e:	f8dc 9018 	ldr.w	r9, [ip, #24]
   48692:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   48696:	47c8      	blx	r9
        if (err) {
   48698:	2800      	cmp	r0, #0
   4869a:	d1e3      	bne.n	48664 <kscan_matrix_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   4869c:	3501      	adds	r5, #1
   4869e:	e7dd      	b.n	4865c <kscan_matrix_interrupt_configure.isra.0+0x12>
   486a0:	4622      	mov	r2, r4
   486a2:	e7f2      	b.n	4868a <kscan_matrix_interrupt_configure.isra.0+0x40>

000486a4 <kscan_matrix_set_all_outputs.isra.0>:
static int kscan_matrix_set_all_outputs(const struct device *dev, const int value) {
   486a4:	b570      	push	{r4, r5, r6, lr}
   486a6:	4605      	mov	r5, r0
   486a8:	460e      	mov	r6, r1
    for (int i = 0; i < config->outputs.len; i++) {
   486aa:	2400      	movs	r4, #0
   486ac:	69eb      	ldr	r3, [r5, #28]
   486ae:	42a3      	cmp	r3, r4
   486b0:	d801      	bhi.n	486b6 <kscan_matrix_set_all_outputs.isra.0+0x12>
    return 0;
   486b2:	2000      	movs	r0, #0
}
   486b4:	bd70      	pop	{r4, r5, r6, pc}
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i];
   486b6:	69a8      	ldr	r0, [r5, #24]
        int err = gpio_pin_set_dt(gpio, value);
   486b8:	4631      	mov	r1, r6
   486ba:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   486be:	f7ff ffa8 	bl	48612 <gpio_pin_set_dt>
        if (err) {
   486c2:	2800      	cmp	r0, #0
   486c4:	d1f6      	bne.n	486b4 <kscan_matrix_set_all_outputs.isra.0+0x10>
    for (int i = 0; i < config->outputs.len; i++) {
   486c6:	3401      	adds	r4, #1
   486c8:	e7f0      	b.n	486ac <kscan_matrix_set_all_outputs.isra.0+0x8>

000486ca <kscan_matrix_read>:
static int kscan_matrix_read(const struct device *dev) {
   486ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   486ce:	f8d0 a010 	ldr.w	sl, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   486d2:	6845      	ldr	r5, [r0, #4]
static int kscan_matrix_read(const struct device *dev) {
   486d4:	b085      	sub	sp, #20
   486d6:	4606      	mov	r6, r0
    for (int o = 0; o < config->outputs.len; o++) {
   486d8:	2700      	movs	r7, #0
   486da:	69eb      	ldr	r3, [r5, #28]
   486dc:	42bb      	cmp	r3, r7
   486de:	d838      	bhi.n	48752 <kscan_matrix_read+0x88>
    for (int r = 0; r < config->rows.len; r++) {
   486e0:	f04f 0800 	mov.w	r8, #0
    bool continue_scan = false;
   486e4:	4647      	mov	r7, r8
    for (int r = 0; r < config->rows.len; r++) {
   486e6:	686b      	ldr	r3, [r5, #4]
   486e8:	4598      	cmp	r8, r3
   486ea:	f0c0 80a1 	bcc.w	48830 <kscan_matrix_read+0x166>
    const struct kscan_matrix_config *config = dev->config;
   486ee:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   486f0:	2f00      	cmp	r7, #0
   486f2:	f000 80a5 	beq.w	48840 <kscan_matrix_read+0x176>
    struct kscan_matrix_data *data = dev->data;
   486f6:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   486f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   486fa:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   486fe:	1818      	adds	r0, r3, r0
   48700:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   48704:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   48708:	03c9      	lsls	r1, r1, #15
   4870a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   4870e:	f240 33e7 	movw	r3, #999	; 0x3e7
   48712:	03c0      	lsls	r0, r0, #15
   48714:	18c0      	adds	r0, r0, r3
   48716:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   4871a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   4871e:	f171 0300 	sbcs.w	r3, r1, #0
   48722:	f104 0408 	add.w	r4, r4, #8
   48726:	f0c0 8086 	bcc.w	48836 <kscan_matrix_read+0x16c>
   4872a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4872e:	2300      	movs	r3, #0
   48730:	f7dd fce6 	bl	26100 <__aeabi_uldivmod>
   48734:	f06f 0201 	mvn.w	r2, #1
   48738:	1a12      	subs	r2, r2, r0
   4873a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4873e:	eb63 0301 	sbc.w	r3, r3, r1
   48742:	4620      	mov	r0, r4
   48744:	f7f9 faf2 	bl	41d2c <k_work_reschedule>
    return 0;
   48748:	2400      	movs	r4, #0
}
   4874a:	4620      	mov	r0, r4
   4874c:	b005      	add	sp, #20
   4874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *out_gpio = &config->outputs.gpios[o];
   48752:	69ab      	ldr	r3, [r5, #24]
   48754:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
        int err = gpio_pin_set_dt(out_gpio, 1);
   48758:	2101      	movs	r1, #1
   4875a:	4648      	mov	r0, r9
   4875c:	f7ff ff59 	bl	48612 <gpio_pin_set_dt>
        if (err) {
   48760:	4604      	mov	r4, r0
   48762:	2800      	cmp	r0, #0
   48764:	d1f1      	bne.n	4874a <kscan_matrix_read+0x80>
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   48766:	f105 0b20 	add.w	fp, r5, #32
        for (int i = 0; i < config->inputs.len; i++) {
   4876a:	696b      	ldr	r3, [r5, #20]
   4876c:	42a3      	cmp	r3, r4
   4876e:	d808      	bhi.n	48782 <kscan_matrix_read+0xb8>
        err = gpio_pin_set_dt(out_gpio, 0);
   48770:	2100      	movs	r1, #0
   48772:	4648      	mov	r0, r9
   48774:	f7ff ff4d 	bl	48612 <gpio_pin_set_dt>
        if (err) {
   48778:	4604      	mov	r4, r0
   4877a:	2800      	cmp	r0, #0
   4877c:	d1e5      	bne.n	4874a <kscan_matrix_read+0x80>
    for (int o = 0; o < config->outputs.len; o++) {
   4877e:	3701      	adds	r7, #1
   48780:	e7ab      	b.n	486da <kscan_matrix_read+0x10>
            const struct gpio_dt_spec *in_gpio = &config->inputs.gpios[i];
   48782:	692b      	ldr	r3, [r5, #16]
               : state_index_rc(config, input_idx, output_idx);
   48784:	f895 c030 	ldrb.w	ip, [r5, #48]	; 0x30
    return (col * config->rows.len) + row;
   48788:	686a      	ldr	r2, [r5, #4]
            const struct gpio_dt_spec *in_gpio = &config->inputs.gpios[i];
   4878a:	00e0      	lsls	r0, r4, #3
   4878c:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
               : state_index_rc(config, input_idx, output_idx);
   48790:	f1bc 0f00 	cmp.w	ip, #0
   48794:	d124      	bne.n	487e0 <kscan_matrix_read+0x116>
    return (col * config->rows.len) + row;
   48796:	fb02 7804 	mla	r8, r2, r4, r7
	return gpio_pin_get(spec->port, spec->pin);
   4879a:	5818      	ldr	r0, [r3, r0]
   4879c:	790b      	ldrb	r3, [r1, #4]
   4879e:	9301      	str	r3, [sp, #4]
	const struct gpio_driver_data *const data =
   487a0:	6903      	ldr	r3, [r0, #16]
   487a2:	9300      	str	r3, [sp, #0]
	return api->port_get_raw(port, value);
   487a4:	6882      	ldr	r2, [r0, #8]
   487a6:	a903      	add	r1, sp, #12
   487a8:	6852      	ldr	r2, [r2, #4]
   487aa:	4790      	blx	r2
	if (ret == 0) {
   487ac:	b958      	cbnz	r0, 487c6 <kscan_matrix_read+0xfc>
		*value ^= data->invert;
   487ae:	9b00      	ldr	r3, [sp, #0]
   487b0:	9903      	ldr	r1, [sp, #12]
   487b2:	681a      	ldr	r2, [r3, #0]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   487b4:	9b01      	ldr	r3, [sp, #4]
		*value ^= data->invert;
   487b6:	404a      	eors	r2, r1
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   487b8:	2101      	movs	r1, #1
   487ba:	fa01 f303 	lsl.w	r3, r1, r3
   487be:	421a      	tst	r2, r3
   487c0:	bf14      	ite	ne
   487c2:	4608      	movne	r0, r1
   487c4:	2000      	moveq	r0, #0
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   487c6:	1e01      	subs	r1, r0, #0
   487c8:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
   487cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   487ce:	465b      	mov	r3, fp
   487d0:	bf18      	it	ne
   487d2:	2101      	movne	r1, #1
   487d4:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   487d8:	f7ff fec9 	bl	4856e <debounce_update>
        for (int i = 0; i < config->inputs.len; i++) {
   487dc:	3401      	adds	r4, #1
   487de:	e7c4      	b.n	4876a <kscan_matrix_read+0xa0>
    return (col * config->rows.len) + row;
   487e0:	fb02 4807 	mla	r8, r2, r7, r4
   487e4:	e7d9      	b.n	4879a <kscan_matrix_read+0xd0>
   487e6:	fb03 8b09 	mla	fp, r3, r9, r8
            struct debounce_state *state = &data->matrix_state[index];
   487ea:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
   487ee:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
            if (debounce_get_changed(state)) {
   487f2:	4658      	mov	r0, fp
   487f4:	f7ff fef3 	bl	485de <debounce_get_changed>
   487f8:	b148      	cbz	r0, 4880e <kscan_matrix_read+0x144>
                const bool pressed = debounce_is_pressed(state);
   487fa:	4658      	mov	r0, fp
   487fc:	f7ff feeb 	bl	485d6 <debounce_is_pressed>
                data->callback(dev, r, c, pressed);
   48800:	f8da 4004 	ldr.w	r4, [sl, #4]
                const bool pressed = debounce_is_pressed(state);
   48804:	4603      	mov	r3, r0
                data->callback(dev, r, c, pressed);
   48806:	464a      	mov	r2, r9
   48808:	4641      	mov	r1, r8
   4880a:	4630      	mov	r0, r6
   4880c:	47a0      	blx	r4
            continue_scan = continue_scan || debounce_is_active(state);
   4880e:	b96f      	cbnz	r7, 4882c <kscan_matrix_read+0x162>
   48810:	4658      	mov	r0, fp
   48812:	f7ff fed8 	bl	485c6 <debounce_is_active>
   48816:	f000 0701 	and.w	r7, r0, #1
        for (int c = 0; c < config->cols.len; c++) {
   4881a:	f109 0901 	add.w	r9, r9, #1
   4881e:	68ea      	ldr	r2, [r5, #12]
    return (col * config->rows.len) + row;
   48820:	686b      	ldr	r3, [r5, #4]
        for (int c = 0; c < config->cols.len; c++) {
   48822:	454a      	cmp	r2, r9
   48824:	d8df      	bhi.n	487e6 <kscan_matrix_read+0x11c>
    for (int r = 0; r < config->rows.len; r++) {
   48826:	f108 0801 	add.w	r8, r8, #1
   4882a:	e75c      	b.n	486e6 <kscan_matrix_read+0x1c>
            continue_scan = continue_scan || debounce_is_active(state);
   4882c:	2001      	movs	r0, #1
   4882e:	e7f2      	b.n	48816 <kscan_matrix_read+0x14c>
        for (int c = 0; c < config->cols.len; c++) {
   48830:	f04f 0900 	mov.w	r9, #0
   48834:	e7f3      	b.n	4881e <kscan_matrix_read+0x154>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   48836:	f06f 0201 	mvn.w	r2, #1
   4883a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4883e:	e780      	b.n	48742 <kscan_matrix_read+0x78>
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   48840:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   48844:	f7ff ff01 	bl	4864a <kscan_matrix_interrupt_configure.isra.0>
    if (err) {
   48848:	4604      	mov	r4, r0
   4884a:	b920      	cbnz	r0, 48856 <kscan_matrix_read+0x18c>
    return kscan_matrix_set_all_outputs(dev, 1);
   4884c:	6870      	ldr	r0, [r6, #4]
   4884e:	2101      	movs	r1, #1
   48850:	f7ff ff28 	bl	486a4 <kscan_matrix_set_all_outputs.isra.0>
   48854:	e779      	b.n	4874a <kscan_matrix_read+0x80>
    return 0;
   48856:	463c      	mov	r4, r7
   48858:	e777      	b.n	4874a <kscan_matrix_read+0x80>

0004885a <kscan_matrix_work_handler>:
    kscan_matrix_read(data->dev);
   4885a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4885e:	f7ff bf34 	b.w	486ca <kscan_matrix_read>

00048862 <kscan_matrix_interrupt_disable>:
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   48862:	b510      	push	{r4, lr}
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   48864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   48868:	4604      	mov	r4, r0
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   4886a:	6840      	ldr	r0, [r0, #4]
   4886c:	f7ff feed 	bl	4864a <kscan_matrix_interrupt_configure.isra.0>
   48870:	4601      	mov	r1, r0
    if (err) {
   48872:	b920      	cbnz	r0, 4887e <kscan_matrix_interrupt_disable+0x1c>
    return kscan_matrix_set_all_outputs(dev, 0);
   48874:	6860      	ldr	r0, [r4, #4]
}
   48876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_set_all_outputs(dev, 0);
   4887a:	f7ff bf13 	b.w	486a4 <kscan_matrix_set_all_outputs.isra.0>
}
   4887e:	bd10      	pop	{r4, pc}

00048880 <kscan_matrix_irq_callback_handler>:
    struct kscan_matrix_data *data = irq_data->dev->data;
   48880:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   48884:	b510      	push	{r4, lr}
    struct kscan_matrix_data *data = irq_data->dev->data;
   48886:	691c      	ldr	r4, [r3, #16]
    kscan_matrix_interrupt_disable(data->dev);
   48888:	6820      	ldr	r0, [r4, #0]
   4888a:	f7ff ffea 	bl	48862 <kscan_matrix_interrupt_disable>
	return z_impl_k_uptime_ticks();
   4888e:	f000 fd50 	bl	49332 <z_impl_k_uptime_ticks>
   48892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48896:	fba0 0302 	umull	r0, r3, r0, r2
   4889a:	fb02 3101 	mla	r1, r2, r1, r3
   4889e:	0bc0      	lsrs	r0, r0, #15
   488a0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   488a4:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   488a6:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   488aa:	2200      	movs	r2, #0
   488ac:	f104 0008 	add.w	r0, r4, #8
   488b0:	2300      	movs	r3, #0
}
   488b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   488b6:	f7f9 ba39 	b.w	41d2c <k_work_reschedule>

000488ba <kscan_matrix_disable>:
static int kscan_matrix_disable(const struct device *dev) {
   488ba:	b510      	push	{r4, lr}
   488bc:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   488be:	6900      	ldr	r0, [r0, #16]
   488c0:	3008      	adds	r0, #8
   488c2:	f000 fba1 	bl	49008 <k_work_cancel_delayable>
    return kscan_matrix_interrupt_disable(dev);
   488c6:	4620      	mov	r0, r4
}
   488c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_interrupt_disable(dev);
   488cc:	f7ff bfc9 	b.w	48862 <kscan_matrix_interrupt_disable>

000488d0 <kscan_matrix_enable>:
static int kscan_matrix_enable(const struct device *dev) {
   488d0:	b570      	push	{r4, r5, r6, lr}
    struct kscan_matrix_data *data = dev->data;
   488d2:	6906      	ldr	r6, [r0, #16]
static int kscan_matrix_enable(const struct device *dev) {
   488d4:	4604      	mov	r4, r0
   488d6:	f000 fd2c 	bl	49332 <z_impl_k_uptime_ticks>
   488da:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   488de:	fba0 3205 	umull	r3, r2, r0, r5
   488e2:	fb05 2101 	mla	r1, r5, r1, r2
   488e6:	0bdb      	lsrs	r3, r3, #15
   488e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   488ec:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   488ee:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_matrix_read(dev);
   488f2:	4620      	mov	r0, r4
}
   488f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_matrix_read(dev);
   488f8:	f7ff bee7 	b.w	486ca <kscan_matrix_read>

000488fc <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   488fc:	2927      	cmp	r1, #39	; 0x27
   488fe:	d004      	beq.n	4890a <battery_channel_get+0xe>
   48900:	292c      	cmp	r1, #44	; 0x2c
   48902:	d00f      	beq.n	48924 <battery_channel_get+0x28>
   48904:	f06f 0085 	mvn.w	r0, #133	; 0x85
   48908:	4770      	bx	lr
    case SENSOR_CHAN_GAUGE_VOLTAGE:
        val_out->val1 = value->millivolts / 1000;
   4890a:	8843      	ldrh	r3, [r0, #2]
   4890c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   48910:	fbb3 f0f1 	udiv	r0, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   48914:	fb01 3310 	mls	r3, r1, r0, r3
   48918:	b29b      	uxth	r3, r3
   4891a:	434b      	muls	r3, r1
        val_out->val1 = value->millivolts / 1000;
   4891c:	6010      	str	r0, [r2, #0]
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   4891e:	6053      	str	r3, [r2, #4]

    default:
        return -ENOTSUP;
    }

    return 0;
   48920:	2000      	movs	r0, #0
        break;
   48922:	4770      	bx	lr
        val_out->val1 = value->state_of_charge;
   48924:	7903      	ldrb	r3, [r0, #4]
   48926:	6013      	str	r3, [r2, #0]
        val_out->val2 = 0;
   48928:	2000      	movs	r0, #0
   4892a:	6050      	str	r0, [r2, #4]
}
   4892c:	4770      	bx	lr

0004892e <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   4892e:	f241 0367 	movw	r3, #4199	; 0x1067
   48932:	4298      	cmp	r0, r3
   48934:	dc0a      	bgt.n	4894c <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   48936:	f640 537a 	movw	r3, #3450	; 0xd7a
   4893a:	4298      	cmp	r0, r3
   4893c:	dd08      	ble.n	48950 <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   4893e:	230f      	movs	r3, #15
   48940:	0040      	lsls	r0, r0, #1
   48942:	fbb0 f0f3 	udiv	r0, r0, r3
   48946:	3035      	adds	r0, #53	; 0x35
   48948:	b2c0      	uxtb	r0, r0
   4894a:	4770      	bx	lr
        return 100;
   4894c:	2064      	movs	r0, #100	; 0x64
   4894e:	4770      	bx	lr
        return 0;
   48950:	2000      	movs	r0, #0
   48952:	4770      	bx	lr

00048954 <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   48954:	6900      	ldr	r0, [r0, #16]
   48956:	301c      	adds	r0, #28
   48958:	f7ff bfd0 	b.w	488fc <battery_channel_get>

0004895c <z_impl_gpio_pin_configure>:
{
   4895c:	b470      	push	{r4, r5, r6}
	struct gpio_driver_data *data =
   4895e:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   48960:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   48962:	682b      	ldr	r3, [r5, #0]
   48964:	2401      	movs	r4, #1
   48966:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   48968:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   4896c:	bf14      	ite	ne
   4896e:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   48970:	43a3      	biceq	r3, r4
   48972:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   48974:	6833      	ldr	r3, [r6, #0]
}
   48976:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   48978:	4718      	bx	r3

0004897a <gpio_pin_get>:
{
   4897a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
   4897c:	6905      	ldr	r5, [r0, #16]
{
   4897e:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   48980:	6883      	ldr	r3, [r0, #8]
   48982:	a901      	add	r1, sp, #4
   48984:	685b      	ldr	r3, [r3, #4]
   48986:	4798      	blx	r3
	if (ret == 0) {
   48988:	b948      	cbnz	r0, 4899e <gpio_pin_get+0x24>
		*value ^= data->invert;
   4898a:	9b01      	ldr	r3, [sp, #4]
   4898c:	682a      	ldr	r2, [r5, #0]
   4898e:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   48990:	2301      	movs	r3, #1
   48992:	fa03 f104 	lsl.w	r1, r3, r4
   48996:	420a      	tst	r2, r1
   48998:	bf14      	ite	ne
   4899a:	4618      	movne	r0, r3
   4899c:	2000      	moveq	r0, #0
}
   4899e:	b003      	add	sp, #12
   489a0:	bd30      	pop	{r4, r5, pc}

000489a2 <ec11_get_ab_state>:

#include "ec11.h"

LOG_MODULE_REGISTER(EC11, CONFIG_SENSOR_LOG_LEVEL);

static int ec11_get_ab_state(const struct device *dev) {
   489a2:	b570      	push	{r4, r5, r6, lr}
    struct ec11_data *drv_data = dev->data;
    const struct ec11_config *drv_cfg = dev->config;
   489a4:	6846      	ldr	r6, [r0, #4]
    struct ec11_data *drv_data = dev->data;
   489a6:	6905      	ldr	r5, [r0, #16]

    return (gpio_pin_get(drv_data->a, drv_cfg->a_pin) << 1) |
   489a8:	7931      	ldrb	r1, [r6, #4]
   489aa:	6828      	ldr	r0, [r5, #0]
   489ac:	f7ff ffe5 	bl	4897a <gpio_pin_get>
           gpio_pin_get(drv_data->b, drv_cfg->b_pin);
   489b0:	7b31      	ldrb	r1, [r6, #12]
    return (gpio_pin_get(drv_data->a, drv_cfg->a_pin) << 1) |
   489b2:	4604      	mov	r4, r0
           gpio_pin_get(drv_data->b, drv_cfg->b_pin);
   489b4:	6868      	ldr	r0, [r5, #4]
   489b6:	f7ff ffe0 	bl	4897a <gpio_pin_get>
}
   489ba:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
   489be:	bd70      	pop	{r4, r5, r6, pc}

000489c0 <ec11_sample_fetch>:

static int ec11_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   489c0:	b538      	push	{r3, r4, r5, lr}
    struct ec11_data *drv_data = dev->data;
   489c2:	6904      	ldr	r4, [r0, #16]
    const struct ec11_config *drv_cfg = dev->config;
   489c4:	6845      	ldr	r5, [r0, #4]
    uint8_t val;
    int8_t delta;

    __ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL || chan == SENSOR_CHAN_ROTATION);

    val = ec11_get_ab_state(dev);
   489c6:	f7ff ffec 	bl	489a2 <ec11_get_ab_state>

    LOG_DBG("prev: %d, new: %d", drv_data->ab_state, val);

    switch (val | (drv_data->ab_state << 2)) {
   489ca:	7a23      	ldrb	r3, [r4, #8]
    val = ec11_get_ab_state(dev);
   489cc:	b2c0      	uxtb	r0, r0
    switch (val | (drv_data->ab_state << 2)) {
   489ce:	ea40 0383 	orr.w	r3, r0, r3, lsl #2
   489d2:	3b01      	subs	r3, #1
   489d4:	2b0d      	cmp	r3, #13
   489d6:	d817      	bhi.n	48a08 <ec11_sample_fetch+0x48>
   489d8:	e8df f003 	tbb	[pc, r3]
   489dc:	18161807 	.word	0x18161807
   489e0:	07071616 	.word	0x07071616
   489e4:	16181616 	.word	0x16181616
   489e8:	0718      	.short	0x0718
   489ea:	2201      	movs	r2, #1
        break;
    }

    LOG_DBG("Delta: %d", delta);

    drv_data->pulses += delta;
   489ec:	7a63      	ldrb	r3, [r4, #9]
    drv_data->ab_state = val;
   489ee:	7220      	strb	r0, [r4, #8]

    drv_data->ticks = drv_data->pulses / drv_cfg->resolution;
   489f0:	7ba8      	ldrb	r0, [r5, #14]
    drv_data->delta = delta;
   489f2:	72e2      	strb	r2, [r4, #11]
    drv_data->pulses += delta;
   489f4:	4413      	add	r3, r2
   489f6:	b25b      	sxtb	r3, r3
    drv_data->ticks = drv_data->pulses / drv_cfg->resolution;
   489f8:	fb93 f1f0 	sdiv	r1, r3, r0
    drv_data->pulses %= drv_cfg->resolution;
   489fc:	fb00 3311 	mls	r3, r0, r1, r3
    drv_data->ticks = drv_data->pulses / drv_cfg->resolution;
   48a00:	72a1      	strb	r1, [r4, #10]
    drv_data->pulses %= drv_cfg->resolution;
   48a02:	7263      	strb	r3, [r4, #9]

    return 0;
}
   48a04:	2000      	movs	r0, #0
   48a06:	bd38      	pop	{r3, r4, r5, pc}
        delta = 0;
   48a08:	2200      	movs	r2, #0
        break;
   48a0a:	e7ef      	b.n	489ec <ec11_sample_fetch+0x2c>
        delta = -1;
   48a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   48a10:	e7ec      	b.n	489ec <ec11_sample_fetch+0x2c>

00048a12 <ec11_channel_get>:

static int ec11_channel_get(const struct device *dev, enum sensor_channel chan,
                            struct sensor_value *val) {
    struct ec11_data *drv_data = dev->data;
   48a12:	6903      	ldr	r3, [r0, #16]

    if (chan != SENSOR_CHAN_ROTATION) {
   48a14:	2922      	cmp	r1, #34	; 0x22
        return -ENOTSUP;
    }

    val->val1 = drv_data->ticks;
   48a16:	bf01      	itttt	eq
   48a18:	f993 100a 	ldrsbeq.w	r1, [r3, #10]
   48a1c:	6011      	streq	r1, [r2, #0]
    val->val2 = drv_data->delta;
   48a1e:	f993 300b 	ldrsbeq.w	r3, [r3, #11]
   48a22:	6053      	streq	r3, [r2, #4]

    return 0;
   48a24:	bf0c      	ite	eq
   48a26:	2000      	moveq	r0, #0
        return -ENOTSUP;
   48a28:	f06f 0085 	mvnne.w	r0, #133	; 0x85
}
   48a2c:	4770      	bx	lr

00048a2e <ec11_init>:
#endif
    .sample_fetch = ec11_sample_fetch,
    .channel_get = ec11_channel_get,
};

int ec11_init(const struct device *dev) {
   48a2e:	b570      	push	{r4, r5, r6, lr}
    struct ec11_data *drv_data = dev->data;
    const struct ec11_config *drv_cfg = dev->config;
   48a30:	6844      	ldr	r4, [r0, #4]
    struct ec11_data *drv_data = dev->data;
   48a32:	6906      	ldr	r6, [r0, #16]
int ec11_init(const struct device *dev) {
   48a34:	4605      	mov	r5, r0

    LOG_DBG("A: %s %d B: %s %d resolution %d", drv_cfg->a_label, drv_cfg->a_pin, drv_cfg->b_label,
            drv_cfg->b_pin, drv_cfg->resolution);

    drv_data->a = device_get_binding(drv_cfg->a_label);
   48a36:	6820      	ldr	r0, [r4, #0]
   48a38:	f7f8 fba8 	bl	4118c <z_impl_device_get_binding>
   48a3c:	6030      	str	r0, [r6, #0]
    if (drv_data->a == NULL) {
   48a3e:	b918      	cbnz	r0, 48a48 <ec11_init+0x1a>
        LOG_ERR("Failed to get pointer to A GPIO device");
        return -EINVAL;
   48a40:	f06f 0415 	mvn.w	r4, #21
#endif

    drv_data->ab_state = ec11_get_ab_state(dev);

    return 0;
}
   48a44:	4620      	mov	r0, r4
   48a46:	bd70      	pop	{r4, r5, r6, pc}
    drv_data->b = device_get_binding(drv_cfg->b_label);
   48a48:	68a0      	ldr	r0, [r4, #8]
   48a4a:	f7f8 fb9f 	bl	4118c <z_impl_device_get_binding>
   48a4e:	6070      	str	r0, [r6, #4]
    if (drv_data->b == NULL) {
   48a50:	2800      	cmp	r0, #0
   48a52:	d0f5      	beq.n	48a40 <ec11_init+0x12>
    if (gpio_pin_configure(drv_data->a, drv_cfg->a_pin, drv_cfg->a_flags | GPIO_INPUT)) {
   48a54:	7962      	ldrb	r2, [r4, #5]
   48a56:	6830      	ldr	r0, [r6, #0]
   48a58:	7921      	ldrb	r1, [r4, #4]
   48a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   48a5e:	f7ff ff7d 	bl	4895c <z_impl_gpio_pin_configure>
   48a62:	b110      	cbz	r0, 48a6a <ec11_init+0x3c>
        return -EIO;
   48a64:	f06f 0404 	mvn.w	r4, #4
   48a68:	e7ec      	b.n	48a44 <ec11_init+0x16>
    if (gpio_pin_configure(drv_data->b, drv_cfg->b_pin, drv_cfg->b_flags | GPIO_INPUT)) {
   48a6a:	7b62      	ldrb	r2, [r4, #13]
   48a6c:	6870      	ldr	r0, [r6, #4]
   48a6e:	7b21      	ldrb	r1, [r4, #12]
   48a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   48a74:	f7ff ff72 	bl	4895c <z_impl_gpio_pin_configure>
   48a78:	4604      	mov	r4, r0
   48a7a:	2800      	cmp	r0, #0
   48a7c:	d1f2      	bne.n	48a64 <ec11_init+0x36>
    if (ec11_init_interrupt(dev) < 0) {
   48a7e:	4628      	mov	r0, r5
   48a80:	f7f8 fb2e 	bl	410e0 <ec11_init_interrupt>
   48a84:	2800      	cmp	r0, #0
   48a86:	dbed      	blt.n	48a64 <ec11_init+0x36>
    drv_data->ab_state = ec11_get_ab_state(dev);
   48a88:	4628      	mov	r0, r5
   48a8a:	f7ff ff8a 	bl	489a2 <ec11_get_ab_state>
   48a8e:	7230      	strb	r0, [r6, #8]
    return 0;
   48a90:	e7d8      	b.n	48a44 <ec11_init+0x16>

00048a92 <z_impl_gpio_pin_interrupt_configure.isra.0>:
	return api->pin_interrupt_configure(port, pin, mode, trig);
   48a92:	6883      	ldr	r3, [r0, #8]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   48a94:	b410      	push	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   48a96:	699c      	ldr	r4, [r3, #24]
   48a98:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   48a9c:	46a4      	mov	ip, r4
   48a9e:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   48aa2:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   48aa4:	4760      	bx	ip

00048aa6 <setup_int>:
static inline void setup_int(const struct device *dev, bool enable) {
   48aa6:	b570      	push	{r4, r5, r6, lr}
    const struct ec11_config *cfg = dev->config;
   48aa8:	6845      	ldr	r5, [r0, #4]
    struct ec11_data *data = dev->data;
   48aaa:	6906      	ldr	r6, [r0, #16]
    if (gpio_pin_interrupt_configure(data->a, cfg->a_pin,
   48aac:	792b      	ldrb	r3, [r5, #4]
   48aae:	6830      	ldr	r0, [r6, #0]
   48ab0:	2900      	cmp	r1, #0
   48ab2:	bf14      	ite	ne
   48ab4:	f44f 24e8 	movne.w	r4, #475136	; 0x74000
   48ab8:	f44f 5400 	moveq.w	r4, #8192	; 0x2000
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   48abc:	4619      	mov	r1, r3
   48abe:	4622      	mov	r2, r4
   48ac0:	f7ff ffe7 	bl	48a92 <z_impl_gpio_pin_interrupt_configure.isra.0>
    if (gpio_pin_interrupt_configure(data->b, cfg->b_pin,
   48ac4:	6870      	ldr	r0, [r6, #4]
   48ac6:	7b29      	ldrb	r1, [r5, #12]
   48ac8:	4622      	mov	r2, r4
}
   48aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   48ace:	f7ff bfe0 	b.w	48a92 <z_impl_gpio_pin_interrupt_configure.isra.0>

00048ad2 <ec11_work_cb>:
static void ec11_work_cb(struct k_work *work) {
   48ad2:	b510      	push	{r4, lr}
    ec11_thread_cb(drv_data->dev);
   48ad4:	f850 4c0c 	ldr.w	r4, [r0, #-12]
    struct ec11_data *drv_data = dev->data;
   48ad8:	6923      	ldr	r3, [r4, #16]
    drv_data->handler(dev, drv_data->trigger);
   48ada:	4620      	mov	r0, r4
   48adc:	e9d3 210a 	ldrd	r2, r1, [r3, #40]	; 0x28
   48ae0:	4790      	blx	r2
    setup_int(dev, true);
   48ae2:	4620      	mov	r0, r4
   48ae4:	2101      	movs	r1, #1
}
   48ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setup_int(dev, true);
   48aea:	f7ff bfdc 	b.w	48aa6 <setup_int>

00048aee <ec11_b_gpio_callback>:
                                 uint32_t pins) {
   48aee:	b510      	push	{r4, lr}
   48af0:	460c      	mov	r4, r1
    setup_int(drv_data->dev, false);
   48af2:	2100      	movs	r1, #0
   48af4:	68e0      	ldr	r0, [r4, #12]
   48af6:	f7ff ffd6 	bl	48aa6 <setup_int>
    k_work_submit(&drv_data->work);
   48afa:	f104 0018 	add.w	r0, r4, #24
}
   48afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_submit(&drv_data->work);
   48b02:	f7f9 b877 	b.w	41bf4 <k_work_submit>

00048b06 <ec11_a_gpio_callback>:
                                 uint32_t pins) {
   48b06:	b510      	push	{r4, lr}
   48b08:	460c      	mov	r4, r1
    setup_int(drv_data->dev, false);
   48b0a:	2100      	movs	r1, #0
   48b0c:	69a0      	ldr	r0, [r4, #24]
   48b0e:	f7ff ffca 	bl	48aa6 <setup_int>
    k_work_submit(&drv_data->work);
   48b12:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   48b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_submit(&drv_data->work);
   48b1a:	f7f9 b86b 	b.w	41bf4 <k_work_submit>

00048b1e <ec11_trigger_set>:
                     sensor_trigger_handler_t handler) {
   48b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48b20:	460e      	mov	r6, r1
    setup_int(dev, false);
   48b22:	2100      	movs	r1, #0
    struct ec11_data *drv_data = dev->data;
   48b24:	6907      	ldr	r7, [r0, #16]
                     sensor_trigger_handler_t handler) {
   48b26:	4604      	mov	r4, r0
   48b28:	4615      	mov	r5, r2
    setup_int(dev, false);
   48b2a:	f7ff ffbc 	bl	48aa6 <setup_int>
	return z_impl_k_sleep(timeout);
   48b2e:	2100      	movs	r1, #0
   48b30:	20a4      	movs	r0, #164	; 0xa4
   48b32:	f7f9 fbd7 	bl	422e4 <z_impl_k_sleep>
    setup_int(dev, true);
   48b36:	4620      	mov	r0, r4
    drv_data->handler = handler;
   48b38:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28
    setup_int(dev, true);
   48b3c:	2101      	movs	r1, #1
   48b3e:	f7ff ffb2 	bl	48aa6 <setup_int>
}
   48b42:	2000      	movs	r0, #0
   48b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048b46 <z_device_state_init>:
}
   48b46:	4770      	bx	lr

00048b48 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   48b48:	b138      	cbz	r0, 48b5a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   48b4a:	68c3      	ldr	r3, [r0, #12]
   48b4c:	8818      	ldrh	r0, [r3, #0]
   48b4e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   48b52:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   48b56:	4258      	negs	r0, r3
   48b58:	4158      	adcs	r0, r3
}
   48b5a:	4770      	bx	lr

00048b5c <arch_system_halt>:
	__asm__ volatile(
   48b5c:	f04f 0220 	mov.w	r2, #32
   48b60:	f3ef 8311 	mrs	r3, BASEPRI
   48b64:	f382 8812 	msr	BASEPRI_MAX, r2
   48b68:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   48b6c:	e7fe      	b.n	48b6c <arch_system_halt+0x10>

00048b6e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   48b6e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   48b70:	f7ff fff4 	bl	48b5c <arch_system_halt>

00048b74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   48b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48b76:	4605      	mov	r5, r0
   48b78:	460e      	mov	r6, r1
   48b7a:	f04f 0320 	mov.w	r3, #32
   48b7e:	f3ef 8711 	mrs	r7, BASEPRI
   48b82:	f383 8812 	msr	BASEPRI_MAX, r3
   48b86:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   48b8a:	f7f9 fbc5 	bl	42318 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   48b8e:	4631      	mov	r1, r6
   48b90:	4604      	mov	r4, r0
   48b92:	4628      	mov	r0, r5
   48b94:	f7ff ffeb 	bl	48b6e <k_sys_fatal_error_handler>
	__asm__ volatile(
   48b98:	f387 8811 	msr	BASEPRI, r7
   48b9c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   48ba0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   48ba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   48ba6:	f7e1 be29 	b.w	2a7fc <z_impl_k_thread_abort>

00048baa <k_heap_init>:
{
   48baa:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   48bac:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   48bb0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   48bb4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   48bb6:	f7fa bb62 	b.w	4327e <sys_heap_init>

00048bba <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   48bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48bbe:	b085      	sub	sp, #20
   48bc0:	4606      	mov	r6, r0
   48bc2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48bc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   48bc8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48bca:	f000 fbb8 	bl	4933e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   48bce:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48bd2:	4605      	mov	r5, r0
   48bd4:	460f      	mov	r7, r1
	__asm__ volatile(
   48bd6:	f04f 0320 	mov.w	r3, #32
   48bda:	f3ef 8411 	mrs	r4, BASEPRI
   48bde:	f383 8812 	msr	BASEPRI_MAX, r3
   48be2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   48be6:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   48bea:	464a      	mov	r2, r9
   48bec:	4641      	mov	r1, r8
   48bee:	4630      	mov	r0, r6
   48bf0:	f7fa fadd 	bl	431ae <sys_heap_aligned_alloc>
   48bf4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   48bf6:	f7f9 fd43 	bl	42680 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   48bfa:	9b03      	ldr	r3, [sp, #12]
   48bfc:	b13b      	cbz	r3, 48c0e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   48bfe:	f384 8811 	msr	BASEPRI, r4
   48c02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   48c06:	4618      	mov	r0, r3
   48c08:	b005      	add	sp, #20
   48c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   48c0e:	1a28      	subs	r0, r5, r0
   48c10:	eb67 0101 	sbc.w	r1, r7, r1
   48c14:	2801      	cmp	r0, #1
   48c16:	f171 0200 	sbcs.w	r2, r1, #0
   48c1a:	dbf0      	blt.n	48bfe <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   48c1c:	e9cd 0100 	strd	r0, r1, [sp]
   48c20:	465a      	mov	r2, fp
   48c22:	4621      	mov	r1, r4
   48c24:	4650      	mov	r0, sl
   48c26:	f7f9 fa1f 	bl	42068 <z_pend_curr>
	__asm__ volatile(
   48c2a:	f04f 0320 	mov.w	r3, #32
   48c2e:	f3ef 8411 	mrs	r4, BASEPRI
   48c32:	f383 8812 	msr	BASEPRI_MAX, r3
   48c36:	f3bf 8f6f 	isb	sy
   48c3a:	e7d6      	b.n	48bea <k_heap_aligned_alloc+0x30>

00048c3c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   48c3c:	b538      	push	{r3, r4, r5, lr}
   48c3e:	4604      	mov	r4, r0
   48c40:	f04f 0320 	mov.w	r3, #32
   48c44:	f3ef 8511 	mrs	r5, BASEPRI
   48c48:	f383 8812 	msr	BASEPRI_MAX, r3
   48c4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   48c50:	f7fa fa75 	bl	4313e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   48c54:	f104 000c 	add.w	r0, r4, #12
   48c58:	f000 fafa 	bl	49250 <z_unpend_all>
   48c5c:	b130      	cbz	r0, 48c6c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   48c5e:	4629      	mov	r1, r5
   48c60:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   48c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   48c68:	f7f9 b8ac 	b.w	41dc4 <z_reschedule>
	__asm__ volatile(
   48c6c:	f385 8811 	msr	BASEPRI, r5
   48c70:	f3bf 8f6f 	isb	sy
}
   48c74:	bd38      	pop	{r3, r4, r5, pc}

00048c76 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   48c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48c78:	4604      	mov	r4, r0
   48c7a:	460d      	mov	r5, r1
	__asm__ volatile(
   48c7c:	f04f 0320 	mov.w	r3, #32
   48c80:	f3ef 8611 	mrs	r6, BASEPRI
   48c84:	f383 8812 	msr	BASEPRI_MAX, r3
   48c88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   48c8c:	6947      	ldr	r7, [r0, #20]
   48c8e:	b977      	cbnz	r7, 48cae <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   48c90:	f000 fac6 	bl	49220 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   48c94:	b158      	cbz	r0, 48cae <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   48c96:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   48c98:	6142      	str	r2, [r0, #20]
   48c9a:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   48c9c:	f000 fa4f 	bl	4913e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   48ca0:	4631      	mov	r1, r6
   48ca2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   48ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   48caa:	f7f9 b88b 	b.w	41dc4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   48cae:	682b      	ldr	r3, [r5, #0]
   48cb0:	6962      	ldr	r2, [r4, #20]
   48cb2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   48cb4:	682b      	ldr	r3, [r5, #0]
   48cb6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   48cb8:	69a3      	ldr	r3, [r4, #24]
   48cba:	3b01      	subs	r3, #1
   48cbc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   48cbe:	f386 8811 	msr	BASEPRI, r6
   48cc2:	f3bf 8f6f 	isb	sy
}
   48cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048cc8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   48cc8:	f3ef 8005 	mrs	r0, IPSR
}
   48ccc:	3800      	subs	r0, #0
   48cce:	bf18      	it	ne
   48cd0:	2001      	movne	r0, #1
   48cd2:	4770      	bx	lr

00048cd4 <z_impl_k_thread_name_set>:
}
   48cd4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   48cd8:	4770      	bx	lr

00048cda <z_impl_k_thread_start>:
	z_sched_start(thread);
   48cda:	f7f9 b969 	b.w	41fb0 <z_sched_start>

00048cde <z_pm_save_idle_exit>:
{
   48cde:	b508      	push	{r3, lr}
	pm_system_resume();
   48ce0:	f7e1 f8f8 	bl	29ed4 <pm_system_resume>
}
   48ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   48ce8:	f7ff bad0 	b.w	4828c <sys_clock_idle_exit>

00048cec <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   48cec:	f990 300e 	ldrsb.w	r3, [r0, #14]
   48cf0:	428b      	cmp	r3, r1
   48cf2:	d001      	beq.n	48cf8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   48cf4:	f7f9 b9cc 	b.w	42090 <z_set_prio>
}
   48cf8:	2000      	movs	r0, #0
   48cfa:	4770      	bx	lr

00048cfc <z_impl_k_mutex_init>:
{
   48cfc:	4603      	mov	r3, r0
	mutex->owner = NULL;
   48cfe:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   48d00:	e9c3 0002 	strd	r0, r0, [r3, #8]
   48d04:	e9c3 3300 	strd	r3, r3, [r3]
}
   48d08:	4770      	bx	lr

00048d0a <queue_insert>:
{
   48d0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48d0e:	4699      	mov	r9, r3
   48d10:	4604      	mov	r4, r0
   48d12:	f89d 3020 	ldrb.w	r3, [sp, #32]
   48d16:	460d      	mov	r5, r1
   48d18:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48d1a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   48d1e:	f04f 0220 	mov.w	r2, #32
   48d22:	f3ef 8711 	mrs	r7, BASEPRI
   48d26:	f382 8812 	msr	BASEPRI_MAX, r2
   48d2a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   48d2e:	b103      	cbz	r3, 48d32 <queue_insert+0x28>
	return list->tail;
   48d30:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   48d32:	4630      	mov	r0, r6
   48d34:	f000 fa74 	bl	49220 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   48d38:	b158      	cbz	r0, 48d52 <queue_insert+0x48>
   48d3a:	2400      	movs	r4, #0
   48d3c:	67c4      	str	r4, [r0, #124]	; 0x7c
   48d3e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   48d42:	f000 f9fc 	bl	4913e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   48d46:	4630      	mov	r0, r6
   48d48:	4639      	mov	r1, r7
   48d4a:	f7f9 f83b 	bl	41dc4 <z_reschedule>
	return 0;
   48d4e:	2000      	movs	r0, #0
   48d50:	e00c      	b.n	48d6c <queue_insert+0x62>
	if (alloc) {
   48d52:	f1b9 0f00 	cmp.w	r9, #0
   48d56:	d01b      	beq.n	48d90 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   48d58:	2108      	movs	r1, #8
   48d5a:	f7f9 fdd3 	bl	42904 <z_thread_aligned_alloc>
		if (anode == NULL) {
   48d5e:	b938      	cbnz	r0, 48d70 <queue_insert+0x66>
	__asm__ volatile(
   48d60:	f387 8811 	msr	BASEPRI, r7
   48d64:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   48d68:	f06f 000b 	mvn.w	r0, #11
}
   48d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   48d70:	2301      	movs	r3, #1
		anode->data = data;
   48d72:	f8c0 8004 	str.w	r8, [r0, #4]
   48d76:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48d78:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48d7a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   48d7e:	b95d      	cbnz	r5, 48d98 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   48d80:	6823      	ldr	r3, [r4, #0]
   48d82:	4313      	orrs	r3, r2
   48d84:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   48d86:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   48d88:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   48d8a:	b973      	cbnz	r3, 48daa <queue_insert+0xa0>
	list->tail = node;
   48d8c:	6060      	str	r0, [r4, #4]
}
   48d8e:	e00c      	b.n	48daa <queue_insert+0xa0>
	node->next_and_flags = flags;
   48d90:	f8c8 9000 	str.w	r9, [r8]
}
   48d94:	4640      	mov	r0, r8
   48d96:	e7ef      	b.n	48d78 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48d98:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   48d9a:	f033 0303 	bics.w	r3, r3, #3
   48d9e:	d110      	bne.n	48dc2 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   48da0:	6002      	str	r2, [r0, #0]
	return list->tail;
   48da2:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   48da4:	b93a      	cbnz	r2, 48db6 <queue_insert+0xac>
	list->head = node;
   48da6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   48daa:	2104      	movs	r1, #4
   48dac:	f104 0010 	add.w	r0, r4, #16
   48db0:	f000 fc4b 	bl	4964a <z_handle_obj_poll_events>
   48db4:	e7c7      	b.n	48d46 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48db6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48db8:	f003 0303 	and.w	r3, r3, #3
   48dbc:	4303      	orrs	r3, r0
   48dbe:	6013      	str	r3, [r2, #0]
   48dc0:	e7e4      	b.n	48d8c <queue_insert+0x82>
   48dc2:	4313      	orrs	r3, r2
   48dc4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48dc6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48dc8:	f003 0303 	and.w	r3, r3, #3
   48dcc:	4303      	orrs	r3, r0
   48dce:	602b      	str	r3, [r5, #0]
}
   48dd0:	e7eb      	b.n	48daa <queue_insert+0xa0>

00048dd2 <z_queue_node_peek>:
{
   48dd2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   48dd4:	4604      	mov	r4, r0
   48dd6:	b130      	cbz	r0, 48de6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48dd8:	6802      	ldr	r2, [r0, #0]
   48dda:	0793      	lsls	r3, r2, #30
   48ddc:	d003      	beq.n	48de6 <z_queue_node_peek+0x14>
		ret = anode->data;
   48dde:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   48de0:	b109      	cbz	r1, 48de6 <z_queue_node_peek+0x14>
			k_free(anode);
   48de2:	f000 fc53 	bl	4968c <k_free>
}
   48de6:	4620      	mov	r0, r4
   48de8:	bd10      	pop	{r4, pc}

00048dea <z_impl_k_queue_init>:
	list->head = NULL;
   48dea:	2300      	movs	r3, #0
	list->tail = NULL;
   48dec:	e9c0 3300 	strd	r3, r3, [r0]
   48df0:	f100 0308 	add.w	r3, r0, #8
   48df4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   48df8:	f100 0310 	add.w	r3, r0, #16
   48dfc:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   48e00:	4770      	bx	lr

00048e02 <k_queue_append>:
{
   48e02:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   48e04:	2301      	movs	r3, #1
   48e06:	9300      	str	r3, [sp, #0]
   48e08:	2300      	movs	r3, #0
{
   48e0a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   48e0c:	4619      	mov	r1, r3
   48e0e:	f7ff ff7c 	bl	48d0a <queue_insert>
}
   48e12:	b003      	add	sp, #12
   48e14:	f85d fb04 	ldr.w	pc, [sp], #4

00048e18 <k_queue_prepend>:
{
   48e18:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   48e1a:	2300      	movs	r3, #0
{
   48e1c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   48e1e:	9300      	str	r3, [sp, #0]
   48e20:	4619      	mov	r1, r3
   48e22:	f7ff ff72 	bl	48d0a <queue_insert>
}
   48e26:	b003      	add	sp, #12
   48e28:	f85d fb04 	ldr.w	pc, [sp], #4

00048e2c <k_queue_append_list>:
{
   48e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48e30:	4605      	mov	r5, r0
   48e32:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   48e34:	460c      	mov	r4, r1
   48e36:	b391      	cbz	r1, 48e9e <k_queue_append_list+0x72>
   48e38:	b38a      	cbz	r2, 48e9e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48e3a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   48e3e:	f04f 0320 	mov.w	r3, #32
   48e42:	f3ef 8811 	mrs	r8, BASEPRI
   48e46:	f383 8812 	msr	BASEPRI_MAX, r3
   48e4a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   48e4e:	4638      	mov	r0, r7
   48e50:	f000 f9e6 	bl	49220 <z_unpend_first_thread>
   48e54:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   48e58:	b920      	cbnz	r0, 48e64 <k_queue_append_list+0x38>
	return list->tail;
   48e5a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   48e5c:	b9ca      	cbnz	r2, 48e92 <k_queue_append_list+0x66>
	list->head = node;
   48e5e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   48e60:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   48e62:	e00a      	b.n	48e7a <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   48e64:	6144      	str	r4, [r0, #20]
   48e66:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   48e6a:	f000 f968 	bl	4913e <z_ready_thread>
		head = *(void **)head;
   48e6e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   48e70:	4638      	mov	r0, r7
   48e72:	f000 f9d5 	bl	49220 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   48e76:	2c00      	cmp	r4, #0
   48e78:	d1ee      	bne.n	48e58 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   48e7a:	2104      	movs	r1, #4
   48e7c:	f105 0010 	add.w	r0, r5, #16
   48e80:	f000 fbe3 	bl	4964a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   48e84:	4638      	mov	r0, r7
   48e86:	4641      	mov	r1, r8
   48e88:	f7f8 ff9c 	bl	41dc4 <z_reschedule>
	return 0;
   48e8c:	2000      	movs	r0, #0
}
   48e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48e92:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48e94:	f003 0303 	and.w	r3, r3, #3
   48e98:	431c      	orrs	r4, r3
   48e9a:	6014      	str	r4, [r2, #0]
}
   48e9c:	e7e0      	b.n	48e60 <k_queue_append_list+0x34>
		return -EINVAL;
   48e9e:	f06f 0015 	mvn.w	r0, #21
   48ea2:	e7f4      	b.n	48e8e <k_queue_append_list+0x62>

00048ea4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   48ea4:	b15a      	cbz	r2, 48ebe <z_impl_k_sem_init+0x1a>
   48ea6:	428a      	cmp	r2, r1
   48ea8:	d309      	bcc.n	48ebe <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   48eaa:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   48eae:	e9c0 1202 	strd	r1, r2, [r0, #8]
   48eb2:	e9c0 0000 	strd	r0, r0, [r0]
   48eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   48eba:	2000      	movs	r0, #0
   48ebc:	4770      	bx	lr
		return -EINVAL;
   48ebe:	f06f 0015 	mvn.w	r0, #21
}
   48ec2:	4770      	bx	lr

00048ec4 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   48ec4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   48ec6:	2301      	movs	r3, #1
   48ec8:	408b      	lsls	r3, r1
   48eca:	ea22 0303 	bic.w	r3, r2, r3
   48ece:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   48ed0:	fa22 f001 	lsr.w	r0, r2, r1
}
   48ed4:	f000 0001 	and.w	r0, r0, #1
   48ed8:	4770      	bx	lr

00048eda <unschedule_locked>:
{
   48eda:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48edc:	2103      	movs	r1, #3
{
   48ede:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48ee0:	300c      	adds	r0, #12
   48ee2:	f7ff ffef 	bl	48ec4 <flag_test_and_clear>
   48ee6:	4604      	mov	r4, r0
   48ee8:	b118      	cbz	r0, 48ef2 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   48eea:	f105 0010 	add.w	r0, r5, #16
   48eee:	f000 f9dc 	bl	492aa <z_abort_timeout>
}
   48ef2:	4620      	mov	r0, r4
   48ef4:	bd38      	pop	{r3, r4, r5, pc}

00048ef6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   48ef6:	b120      	cbz	r0, 48f02 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   48ef8:	2200      	movs	r2, #0
   48efa:	4611      	mov	r1, r2
   48efc:	3088      	adds	r0, #136	; 0x88
   48efe:	f000 b9b7 	b.w	49270 <z_sched_wake>
}
   48f02:	4770      	bx	lr

00048f04 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   48f04:	68c3      	ldr	r3, [r0, #12]
{
   48f06:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48f08:	f3c3 0540 	ubfx	r5, r3, #1, #1
   48f0c:	079b      	lsls	r3, r3, #30
{
   48f0e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48f10:	d416      	bmi.n	48f40 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   48f12:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   48f14:	2102      	movs	r1, #2
   48f16:	300c      	adds	r0, #12
   48f18:	f7ff ffd4 	bl	48ec4 <flag_test_and_clear>
   48f1c:	b180      	cbz	r0, 48f40 <cancel_async_locked+0x3c>
	return list->head;
   48f1e:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   48f22:	b16a      	cbz	r2, 48f40 <cancel_async_locked+0x3c>
   48f24:	4294      	cmp	r4, r2
   48f26:	d11b      	bne.n	48f60 <cancel_async_locked+0x5c>
	return node->next;
   48f28:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   48f2a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   48f2e:	b98d      	cbnz	r5, 48f54 <cancel_async_locked+0x50>
   48f30:	428c      	cmp	r4, r1
	list->head = node;
   48f32:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   48f36:	d101      	bne.n	48f3c <cancel_async_locked+0x38>
	list->tail = node;
   48f38:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   48f3c:	2300      	movs	r3, #0
   48f3e:	6023      	str	r3, [r4, #0]
	return *flagp;
   48f40:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   48f42:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   48f46:	bf1e      	ittt	ne
   48f48:	f043 0302 	orrne.w	r3, r3, #2
   48f4c:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   48f4e:	f003 000f 	andne.w	r0, r3, #15
}
   48f52:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   48f54:	428c      	cmp	r4, r1
	parent->next = child;
   48f56:	602a      	str	r2, [r5, #0]
	list->tail = node;
   48f58:	bf08      	it	eq
   48f5a:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   48f5e:	e7ed      	b.n	48f3c <cancel_async_locked+0x38>
	return node->next;
   48f60:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   48f62:	6812      	ldr	r2, [r2, #0]
   48f64:	e7dd      	b.n	48f22 <cancel_async_locked+0x1e>

00048f66 <work_timeout>:
{
   48f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   48f68:	4604      	mov	r4, r0
   48f6a:	f04f 0320 	mov.w	r3, #32
   48f6e:	f3ef 8511 	mrs	r5, BASEPRI
   48f72:	f383 8812 	msr	BASEPRI_MAX, r3
   48f76:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   48f7a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48f7c:	f1a0 0610 	sub.w	r6, r0, #16
   48f80:	2103      	movs	r1, #3
   48f82:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   48f84:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48f86:	f7ff ff9d 	bl	48ec4 <flag_test_and_clear>
   48f8a:	b128      	cbz	r0, 48f98 <work_timeout+0x32>
		queue = dw->queue;
   48f8c:	69a3      	ldr	r3, [r4, #24]
   48f8e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   48f90:	a901      	add	r1, sp, #4
   48f92:	4630      	mov	r0, r6
   48f94:	f7f8 fdde 	bl	41b54 <submit_to_queue_locked>
	__asm__ volatile(
   48f98:	f385 8811 	msr	BASEPRI, r5
   48f9c:	f3bf 8f6f 	isb	sy
}
   48fa0:	b002      	add	sp, #8
   48fa2:	bd70      	pop	{r4, r5, r6, pc}

00048fa4 <k_work_init>:
{
   48fa4:	b538      	push	{r3, r4, r5, lr}
   48fa6:	4604      	mov	r4, r0
   48fa8:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   48faa:	2210      	movs	r2, #16
   48fac:	2100      	movs	r1, #0
   48fae:	f7fb ff92 	bl	44ed6 <memset>
   48fb2:	6065      	str	r5, [r4, #4]
}
   48fb4:	bd38      	pop	{r3, r4, r5, pc}

00048fb6 <k_work_submit_to_queue>:
{
   48fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48fb8:	9001      	str	r0, [sp, #4]
   48fba:	4608      	mov	r0, r1
	__asm__ volatile(
   48fbc:	f04f 0320 	mov.w	r3, #32
   48fc0:	f3ef 8511 	mrs	r5, BASEPRI
   48fc4:	f383 8812 	msr	BASEPRI_MAX, r3
   48fc8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   48fcc:	a901      	add	r1, sp, #4
   48fce:	f7f8 fdc1 	bl	41b54 <submit_to_queue_locked>
   48fd2:	4604      	mov	r4, r0
	__asm__ volatile(
   48fd4:	f385 8811 	msr	BASEPRI, r5
   48fd8:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   48fdc:	2800      	cmp	r0, #0
   48fde:	dd04      	ble.n	48fea <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   48fe0:	f7f9 f9a0 	bl	42324 <z_impl_k_is_preempt_thread>
   48fe4:	b108      	cbz	r0, 48fea <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   48fe6:	f7f9 f8f5 	bl	421d4 <z_impl_k_yield>
}
   48fea:	4620      	mov	r0, r4
   48fec:	b003      	add	sp, #12
   48fee:	bd30      	pop	{r4, r5, pc}

00048ff0 <k_work_init_delayable>:
{
   48ff0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   48ff2:	2230      	movs	r2, #48	; 0x30
{
   48ff4:	4604      	mov	r4, r0
   48ff6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   48ff8:	2100      	movs	r1, #0
   48ffa:	f7fb ff6c 	bl	44ed6 <memset>
   48ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
   49002:	6065      	str	r5, [r4, #4]
   49004:	60e3      	str	r3, [r4, #12]
}
   49006:	bd38      	pop	{r3, r4, r5, pc}

00049008 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   49008:	b538      	push	{r3, r4, r5, lr}
   4900a:	4604      	mov	r4, r0
	__asm__ volatile(
   4900c:	f04f 0320 	mov.w	r3, #32
   49010:	f3ef 8511 	mrs	r5, BASEPRI
   49014:	f383 8812 	msr	BASEPRI_MAX, r3
   49018:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   4901c:	f7ff ff5d 	bl	48eda <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   49020:	4620      	mov	r0, r4
   49022:	f7ff ff6f 	bl	48f04 <cancel_async_locked>
	__asm__ volatile(
   49026:	f385 8811 	msr	BASEPRI, r5
   4902a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   4902e:	bd38      	pop	{r3, r4, r5, pc}

00049030 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   49030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49032:	4604      	mov	r4, r0
   49034:	460d      	mov	r5, r1
	__asm__ volatile(
   49036:	f04f 0320 	mov.w	r3, #32
   4903a:	f3ef 8711 	mrs	r7, BASEPRI
   4903e:	f383 8812 	msr	BASEPRI_MAX, r3
   49042:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   49046:	68c3      	ldr	r3, [r0, #12]
   49048:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   4904c:	2b00      	cmp	r3, #0
   4904e:	bf14      	ite	ne
   49050:	2601      	movne	r6, #1
   49052:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   49054:	d009      	beq.n	4906a <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   49056:	f7ff ff40 	bl	48eda <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   4905a:	4620      	mov	r0, r4
   4905c:	f7ff ff52 	bl	48f04 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   49060:	4629      	mov	r1, r5
   49062:	4620      	mov	r0, r4
   49064:	f7f8 fd58 	bl	41b18 <cancel_sync_locked>
   49068:	4603      	mov	r3, r0
	__asm__ volatile(
   4906a:	f387 8811 	msr	BASEPRI, r7
   4906e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   49072:	b13b      	cbz	r3, 49084 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   49074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4907c:	f105 0008 	add.w	r0, r5, #8
   49080:	f7f8 fc72 	bl	41968 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   49084:	4630      	mov	r0, r6
   49086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00049088 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   49088:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4908c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4908e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   49090:	2300      	movs	r3, #0
	node->prev = NULL;
   49092:	e9c0 3300 	strd	r3, r3, [r0]
}
   49096:	4770      	bx	lr

00049098 <unpend_thread_no_timeout>:
{
   49098:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   4909a:	f7ff fff5 	bl	49088 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   4909e:	7b43      	ldrb	r3, [r0, #13]
   490a0:	f023 0302 	bic.w	r3, r3, #2
   490a4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   490a6:	2300      	movs	r3, #0
   490a8:	6083      	str	r3, [r0, #8]
}
   490aa:	bd08      	pop	{r3, pc}

000490ac <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   490ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   490b0:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   490b4:	4283      	cmp	r3, r0
		return b2 - b1;
   490b6:	bf14      	ite	ne
   490b8:	1ac0      	subne	r0, r0, r3
	return 0;
   490ba:	2000      	moveq	r0, #0
}
   490bc:	4770      	bx	lr

000490be <z_unpend_thread_no_timeout>:
{
   490be:	b508      	push	{r3, lr}
	__asm__ volatile(
   490c0:	f04f 0320 	mov.w	r3, #32
   490c4:	f3ef 8111 	mrs	r1, BASEPRI
   490c8:	f383 8812 	msr	BASEPRI_MAX, r3
   490cc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   490d0:	f7ff ffe2 	bl	49098 <unpend_thread_no_timeout>
	__asm__ volatile(
   490d4:	f381 8811 	msr	BASEPRI, r1
   490d8:	f3bf 8f6f 	isb	sy
}
   490dc:	bd08      	pop	{r3, pc}

000490de <z_unpend_thread>:
{
   490de:	b510      	push	{r4, lr}
	__asm__ volatile(
   490e0:	f04f 0320 	mov.w	r3, #32
   490e4:	f3ef 8411 	mrs	r4, BASEPRI
   490e8:	f383 8812 	msr	BASEPRI_MAX, r3
   490ec:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   490f0:	f7ff ffd2 	bl	49098 <unpend_thread_no_timeout>
	__asm__ volatile(
   490f4:	f384 8811 	msr	BASEPRI, r4
   490f8:	f3bf 8f6f 	isb	sy
}
   490fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   49100:	3018      	adds	r0, #24
   49102:	f000 b8d2 	b.w	492aa <z_abort_timeout>

00049106 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   49106:	4603      	mov	r3, r0
   49108:	b920      	cbnz	r0, 49114 <z_reschedule_irqlock+0xe>
   4910a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   4910e:	b90a      	cbnz	r2, 49114 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   49110:	f7e1 b9c2 	b.w	2a498 <arch_swap>
   49114:	f383 8811 	msr	BASEPRI, r3
   49118:	f3bf 8f6f 	isb	sy
}
   4911c:	4770      	bx	lr

0004911e <z_reschedule_unlocked>:
	__asm__ volatile(
   4911e:	f04f 0320 	mov.w	r3, #32
   49122:	f3ef 8011 	mrs	r0, BASEPRI
   49126:	f383 8812 	msr	BASEPRI_MAX, r3
   4912a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   4912e:	f7ff bfea 	b.w	49106 <z_reschedule_irqlock>

00049132 <z_priq_dumb_best>:
{
   49132:	4603      	mov	r3, r0
	return list->head == list;
   49134:	6800      	ldr	r0, [r0, #0]
}
   49136:	4283      	cmp	r3, r0
   49138:	bf08      	it	eq
   4913a:	2000      	moveq	r0, #0
   4913c:	4770      	bx	lr

0004913e <z_ready_thread>:
{
   4913e:	b510      	push	{r4, lr}
   49140:	f04f 0320 	mov.w	r3, #32
   49144:	f3ef 8411 	mrs	r4, BASEPRI
   49148:	f383 8812 	msr	BASEPRI_MAX, r3
   4914c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   49150:	f7f8 fef8 	bl	41f44 <ready_thread>
	__asm__ volatile(
   49154:	f384 8811 	msr	BASEPRI, r4
   49158:	f3bf 8f6f 	isb	sy
}
   4915c:	bd10      	pop	{r4, pc}

0004915e <z_thread_timeout>:
{
   4915e:	b510      	push	{r4, lr}
   49160:	4601      	mov	r1, r0
	__asm__ volatile(
   49162:	f04f 0320 	mov.w	r3, #32
   49166:	f3ef 8411 	mrs	r4, BASEPRI
   4916a:	f383 8812 	msr	BASEPRI_MAX, r3
   4916e:	f3bf 8f6f 	isb	sy
		if (!killed) {
   49172:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   49176:	f013 0f28 	tst.w	r3, #40	; 0x28
   4917a:	d10d      	bne.n	49198 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   4917c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   49180:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   49182:	b10b      	cbz	r3, 49188 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   49184:	f7ff ff88 	bl	49098 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   49188:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   4918c:	f023 0314 	bic.w	r3, r3, #20
   49190:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   49194:	f7f8 fed6 	bl	41f44 <ready_thread>
	__asm__ volatile(
   49198:	f384 8811 	msr	BASEPRI, r4
   4919c:	f3bf 8f6f 	isb	sy
}
   491a0:	bd10      	pop	{r4, pc}

000491a2 <add_to_waitq_locked>:
{
   491a2:	b538      	push	{r3, r4, r5, lr}
   491a4:	4604      	mov	r4, r0
   491a6:	460d      	mov	r5, r1
	unready_thread(thread);
   491a8:	f7f8 ff20 	bl	41fec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   491ac:	7b63      	ldrb	r3, [r4, #13]
   491ae:	f043 0302 	orr.w	r3, r3, #2
   491b2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   491b4:	b195      	cbz	r5, 491dc <add_to_waitq_locked+0x3a>
   491b6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   491b8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   491ba:	429d      	cmp	r5, r3
   491bc:	d015      	beq.n	491ea <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   491be:	b1a3      	cbz	r3, 491ea <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   491c0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   491c4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   491c8:	4291      	cmp	r1, r2
   491ca:	d008      	beq.n	491de <add_to_waitq_locked+0x3c>
		return b2 - b1;
   491cc:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   491ce:	2a00      	cmp	r2, #0
   491d0:	dd05      	ble.n	491de <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   491d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   491d4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   491d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   491da:	605c      	str	r4, [r3, #4]
}
   491dc:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   491de:	686a      	ldr	r2, [r5, #4]
   491e0:	4293      	cmp	r3, r2
   491e2:	d002      	beq.n	491ea <add_to_waitq_locked+0x48>
   491e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   491e6:	2b00      	cmp	r3, #0
   491e8:	d1ec      	bne.n	491c4 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   491ea:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   491ec:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   491f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   491f2:	606c      	str	r4, [r5, #4]
}
   491f4:	e7f2      	b.n	491dc <add_to_waitq_locked+0x3a>

000491f6 <z_unpend1_no_timeout>:
{
   491f6:	b510      	push	{r4, lr}
	__asm__ volatile(
   491f8:	f04f 0320 	mov.w	r3, #32
   491fc:	f3ef 8411 	mrs	r4, BASEPRI
   49200:	f383 8812 	msr	BASEPRI_MAX, r3
   49204:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   49208:	f7ff ff93 	bl	49132 <z_priq_dumb_best>
		if (thread != NULL) {
   4920c:	4601      	mov	r1, r0
   4920e:	b108      	cbz	r0, 49214 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   49210:	f7ff ff42 	bl	49098 <unpend_thread_no_timeout>
	__asm__ volatile(
   49214:	f384 8811 	msr	BASEPRI, r4
   49218:	f3bf 8f6f 	isb	sy
}
   4921c:	4608      	mov	r0, r1
   4921e:	bd10      	pop	{r4, pc}

00049220 <z_unpend_first_thread>:
{
   49220:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   49222:	f04f 0320 	mov.w	r3, #32
   49226:	f3ef 8511 	mrs	r5, BASEPRI
   4922a:	f383 8812 	msr	BASEPRI_MAX, r3
   4922e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   49232:	f7ff ff7e 	bl	49132 <z_priq_dumb_best>
		if (thread != NULL) {
   49236:	4604      	mov	r4, r0
   49238:	b120      	cbz	r0, 49244 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   4923a:	f7ff ff2d 	bl	49098 <unpend_thread_no_timeout>
   4923e:	3018      	adds	r0, #24
   49240:	f000 f833 	bl	492aa <z_abort_timeout>
	__asm__ volatile(
   49244:	f385 8811 	msr	BASEPRI, r5
   49248:	f3bf 8f6f 	isb	sy
}
   4924c:	4620      	mov	r0, r4
   4924e:	bd38      	pop	{r3, r4, r5, pc}

00049250 <z_unpend_all>:
{
   49250:	b538      	push	{r3, r4, r5, lr}
   49252:	4605      	mov	r5, r0
	int need_sched = 0;
   49254:	2000      	movs	r0, #0
	return list->head == list;
   49256:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49258:	42a5      	cmp	r5, r4
   4925a:	d000      	beq.n	4925e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4925c:	b904      	cbnz	r4, 49260 <z_unpend_all+0x10>
}
   4925e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   49260:	4620      	mov	r0, r4
   49262:	f7ff ff3c 	bl	490de <z_unpend_thread>
		z_ready_thread(thread);
   49266:	4620      	mov	r0, r4
   49268:	f7ff ff69 	bl	4913e <z_ready_thread>
		need_sched = 1;
   4926c:	2001      	movs	r0, #1
   4926e:	e7f2      	b.n	49256 <z_unpend_all+0x6>

00049270 <z_sched_wake>:
{
   49270:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   49272:	f04f 0320 	mov.w	r3, #32
   49276:	f3ef 8511 	mrs	r5, BASEPRI
   4927a:	f383 8812 	msr	BASEPRI_MAX, r3
   4927e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   49282:	f7ff ff56 	bl	49132 <z_priq_dumb_best>
		if (thread != NULL) {
   49286:	4604      	mov	r4, r0
   49288:	b150      	cbz	r0, 492a0 <z_sched_wake+0x30>
   4928a:	67c1      	str	r1, [r0, #124]	; 0x7c
   4928c:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   4928e:	f7ff ff03 	bl	49098 <unpend_thread_no_timeout>
   49292:	3018      	adds	r0, #24
   49294:	f000 f809 	bl	492aa <z_abort_timeout>
			ready_thread(thread);
   49298:	4620      	mov	r0, r4
   4929a:	f7f8 fe53 	bl	41f44 <ready_thread>
			ret = true;
   4929e:	2001      	movs	r0, #1
	__asm__ volatile(
   492a0:	f385 8811 	msr	BASEPRI, r5
   492a4:	f3bf 8f6f 	isb	sy
}
   492a8:	bd38      	pop	{r3, r4, r5, pc}

000492aa <z_abort_timeout>:
{
   492aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   492ac:	f04f 0220 	mov.w	r2, #32
   492b0:	f3ef 8411 	mrs	r4, BASEPRI
   492b4:	f382 8812 	msr	BASEPRI_MAX, r2
   492b8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   492bc:	6803      	ldr	r3, [r0, #0]
   492be:	b13b      	cbz	r3, 492d0 <z_abort_timeout+0x26>
			remove_timeout(to);
   492c0:	f7f9 f8ee 	bl	424a0 <remove_timeout>
			ret = 0;
   492c4:	2000      	movs	r0, #0
	__asm__ volatile(
   492c6:	f384 8811 	msr	BASEPRI, r4
   492ca:	f3bf 8f6f 	isb	sy
}
   492ce:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   492d0:	f06f 0015 	mvn.w	r0, #21
   492d4:	e7f7      	b.n	492c6 <z_abort_timeout+0x1c>

000492d6 <z_get_next_timeout_expiry>:
{
   492d6:	b510      	push	{r4, lr}
	__asm__ volatile(
   492d8:	f04f 0320 	mov.w	r3, #32
   492dc:	f3ef 8411 	mrs	r4, BASEPRI
   492e0:	f383 8812 	msr	BASEPRI_MAX, r3
   492e4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   492e8:	f7f9 f8b4 	bl	42454 <next_timeout>
	__asm__ volatile(
   492ec:	f384 8811 	msr	BASEPRI, r4
   492f0:	f3bf 8f6f 	isb	sy
}
   492f4:	bd10      	pop	{r4, pc}

000492f6 <z_set_timeout_expiry>:
{
   492f6:	b570      	push	{r4, r5, r6, lr}
   492f8:	4604      	mov	r4, r0
   492fa:	460d      	mov	r5, r1
	__asm__ volatile(
   492fc:	f04f 0320 	mov.w	r3, #32
   49300:	f3ef 8611 	mrs	r6, BASEPRI
   49304:	f383 8812 	msr	BASEPRI_MAX, r3
   49308:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   4930c:	f7f9 f8a2 	bl	42454 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   49310:	2801      	cmp	r0, #1
   49312:	dd05      	ble.n	49320 <z_set_timeout_expiry+0x2a>
   49314:	42a0      	cmp	r0, r4
   49316:	db03      	blt.n	49320 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   49318:	4629      	mov	r1, r5
   4931a:	4620      	mov	r0, r4
   4931c:	f7f6 f850 	bl	3f3c0 <sys_clock_set_timeout>
	__asm__ volatile(
   49320:	f386 8811 	msr	BASEPRI, r6
   49324:	f3bf 8f6f 	isb	sy
}
   49328:	bd70      	pop	{r4, r5, r6, pc}

0004932a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   4932a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   4932c:	f7f9 f9a8 	bl	42680 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   49330:	bd08      	pop	{r3, pc}

00049332 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   49332:	f7f9 b9a5 	b.w	42680 <sys_clock_tick_get>

00049336 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   49336:	b108      	cbz	r0, 4933c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   49338:	f7e1 bb56 	b.w	2a9e8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   4933c:	4770      	bx	lr

0004933e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4933e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   49342:	bf08      	it	eq
   49344:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   49348:	b538      	push	{r3, r4, r5, lr}
   4934a:	4605      	mov	r5, r0
   4934c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4934e:	d01d      	beq.n	4938c <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   49350:	ea51 0300 	orrs.w	r3, r1, r0
   49354:	d103      	bne.n	4935e <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   49356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   4935a:	f7f9 b991 	b.w	42680 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   4935e:	f06f 0301 	mvn.w	r3, #1
   49362:	1a18      	subs	r0, r3, r0
   49364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   49368:	eb63 0101 	sbc.w	r1, r3, r1
   4936c:	2900      	cmp	r1, #0
   4936e:	da0c      	bge.n	4938a <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   49370:	f7f9 f986 	bl	42680 <sys_clock_tick_get>
   49374:	2d01      	cmp	r5, #1
   49376:	4622      	mov	r2, r4
   49378:	f174 0400 	sbcs.w	r4, r4, #0
   4937c:	462b      	mov	r3, r5
   4937e:	bfbc      	itt	lt
   49380:	2301      	movlt	r3, #1
   49382:	2200      	movlt	r2, #0
   49384:	1818      	adds	r0, r3, r0
   49386:	eb41 0102 	adc.w	r1, r1, r2
}
   4938a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   4938c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   49390:	4601      	mov	r1, r0
   49392:	e7fa      	b.n	4938a <sys_clock_timeout_end_calc+0x4c>

00049394 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   49394:	b510      	push	{r4, lr}
   49396:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   49398:	f7ff ff87 	bl	492aa <z_abort_timeout>

	if (inactive) {
   4939c:	b9b0      	cbnz	r0, 493cc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   4939e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   493a0:	b10b      	cbz	r3, 493a6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   493a2:	4620      	mov	r0, r4
   493a4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   493a6:	f104 0018 	add.w	r0, r4, #24
   493aa:	f7ff ff24 	bl	491f6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   493ae:	b168      	cbz	r0, 493cc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   493b0:	f7ff fec5 	bl	4913e <z_ready_thread>
	__asm__ volatile(
   493b4:	f04f 0320 	mov.w	r3, #32
   493b8:	f3ef 8011 	mrs	r0, BASEPRI
   493bc:	f383 8812 	msr	BASEPRI_MAX, r3
   493c0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   493c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   493c8:	f7ff be9d 	b.w	49106 <z_reschedule_irqlock>
   493cc:	bd10      	pop	{r4, pc}

000493ce <add_event>:
{
   493ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   493d0:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   493d2:	e9d0 1300 	ldrd	r1, r3, [r0]
   493d6:	4288      	cmp	r0, r1
   493d8:	4604      	mov	r4, r0
   493da:	d00d      	beq.n	493f8 <add_event+0x2a>
	if ((pending == NULL) ||
   493dc:	b163      	cbz	r3, 493f8 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   493de:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   493e0:	b100      	cbz	r0, 493e4 <add_event+0x16>
   493e2:	3860      	subs	r0, #96	; 0x60
   493e4:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   493e8:	4639      	mov	r1, r7
   493ea:	f7ff fe5f 	bl	490ac <z_sched_prio_cmp>
	if ((pending == NULL) ||
   493ee:	2800      	cmp	r0, #0
   493f0:	dc02      	bgt.n	493f8 <add_event+0x2a>
	return list->head == list;
   493f2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   493f4:	42b4      	cmp	r4, r6
   493f6:	d109      	bne.n	4940c <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   493f8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   493fa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   493fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   49400:	6065      	str	r5, [r4, #4]
}
   49402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   49404:	6863      	ldr	r3, [r4, #4]
   49406:	42b3      	cmp	r3, r6
   49408:	d0f6      	beq.n	493f8 <add_event+0x2a>
   4940a:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   4940c:	2e00      	cmp	r6, #0
   4940e:	d0f3      	beq.n	493f8 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   49410:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   49412:	b101      	cbz	r1, 49416 <add_event+0x48>
   49414:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   49416:	4638      	mov	r0, r7
   49418:	f7ff fe48 	bl	490ac <z_sched_prio_cmp>
   4941c:	2800      	cmp	r0, #0
   4941e:	ddf1      	ble.n	49404 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   49420:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   49422:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   49426:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   49428:	6075      	str	r5, [r6, #4]
			return;
   4942a:	e7ea      	b.n	49402 <add_event+0x34>

0004942c <register_events>:
{
   4942c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   49430:	2500      	movs	r5, #0
{
   49432:	468b      	mov	fp, r1
   49434:	4614      	mov	r4, r2
   49436:	461f      	mov	r7, r3
   49438:	4682      	mov	sl, r0
	int events_registered = 0;
   4943a:	462e      	mov	r6, r5
	event->poller = NULL;
   4943c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   4943e:	455d      	cmp	r5, fp
   49440:	db02      	blt.n	49448 <register_events+0x1c>
}
   49442:	4630      	mov	r0, r6
   49444:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49448:	f04f 0320 	mov.w	r3, #32
   4944c:	f3ef 8911 	mrs	r9, BASEPRI
   49450:	f383 8812 	msr	BASEPRI_MAX, r3
   49454:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   49458:	f89a 300d 	ldrb.w	r3, [sl, #13]
   4945c:	f003 031f 	and.w	r3, r3, #31
   49460:	3b01      	subs	r3, #1
   49462:	2b07      	cmp	r3, #7
   49464:	d80f      	bhi.n	49486 <register_events+0x5a>
   49466:	e8df f003 	tbb	[pc, r3]
   4946a:	041e      	.short	0x041e
   4946c:	0e0e0a0e 	.word	0x0e0e0a0e
   49470:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   49472:	f8da 3010 	ldr.w	r3, [sl, #16]
   49476:	689b      	ldr	r3, [r3, #8]
   49478:	b12b      	cbz	r3, 49486 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   4947a:	2302      	movs	r3, #2
   4947c:	e020      	b.n	494c0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   4947e:	f8da 3010 	ldr.w	r3, [sl, #16]
   49482:	681b      	ldr	r3, [r3, #0]
   49484:	bb8b      	cbnz	r3, 494ea <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   49486:	bb47      	cbnz	r7, 494da <register_events+0xae>
   49488:	7823      	ldrb	r3, [r4, #0]
   4948a:	b333      	cbz	r3, 494da <register_events+0xae>
	switch (event->type) {
   4948c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   49490:	f003 031f 	and.w	r3, r3, #31
   49494:	3b01      	subs	r3, #1
   49496:	2b07      	cmp	r3, #7
   49498:	d830      	bhi.n	494fc <register_events+0xd0>
   4949a:	e8df f003 	tbb	[pc, r3]
   4949e:	2833      	.short	0x2833
   494a0:	2f2f282f 	.word	0x2f2f282f
   494a4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   494a6:	f8da 3010 	ldr.w	r3, [sl, #16]
   494aa:	689b      	ldr	r3, [r3, #8]
   494ac:	2b00      	cmp	r3, #0
   494ae:	d0ea      	beq.n	49486 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   494b0:	2301      	movs	r3, #1
   494b2:	e005      	b.n	494c0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   494b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   494b8:	6a1b      	ldr	r3, [r3, #32]
   494ba:	2b00      	cmp	r3, #0
   494bc:	d0e3      	beq.n	49486 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   494be:	2310      	movs	r3, #16
	event->state |= state;
   494c0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   494c4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   494c8:	f3c2 3145 	ubfx	r1, r2, #13, #6
   494cc:	430b      	orrs	r3, r1
   494ce:	f363 3252 	bfi	r2, r3, #13, #6
   494d2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   494d6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   494da:	f389 8811 	msr	BASEPRI, r9
   494de:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   494e2:	3501      	adds	r5, #1
   494e4:	f10a 0a14 	add.w	sl, sl, #20
   494e8:	e7a9      	b.n	4943e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   494ea:	2304      	movs	r3, #4
   494ec:	e7e8      	b.n	494c0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   494ee:	f8da 0010 	ldr.w	r0, [sl, #16]
   494f2:	4622      	mov	r2, r4
   494f4:	4651      	mov	r1, sl
   494f6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   494f8:	f7ff ff69 	bl	493ce <add_event>
	event->poller = poller;
   494fc:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   49500:	3601      	adds	r6, #1
   49502:	e7ea      	b.n	494da <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   49504:	f8da 0010 	ldr.w	r0, [sl, #16]
   49508:	4622      	mov	r2, r4
   4950a:	4651      	mov	r1, sl
   4950c:	e7f4      	b.n	494f8 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   4950e:	f8da 0010 	ldr.w	r0, [sl, #16]
   49512:	4622      	mov	r2, r4
   49514:	4651      	mov	r1, sl
   49516:	3024      	adds	r0, #36	; 0x24
   49518:	e7ee      	b.n	494f8 <register_events+0xcc>

0004951a <signal_poll_event>:
{
   4951a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   4951e:	6884      	ldr	r4, [r0, #8]
{
   49520:	4605      	mov	r5, r0
   49522:	460e      	mov	r6, r1
	if (poller != NULL) {
   49524:	b144      	cbz	r4, 49538 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   49526:	7863      	ldrb	r3, [r4, #1]
   49528:	2b01      	cmp	r3, #1
   4952a:	d136      	bne.n	4959a <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   4952c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   49530:	f013 0302 	ands.w	r3, r3, #2
   49534:	d10a      	bne.n	4954c <signal_poll_event+0x32>
		poller->is_polling = false;
   49536:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   49538:	68eb      	ldr	r3, [r5, #12]
   4953a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   4953e:	430e      	orrs	r6, r1
	event->poller = NULL;
   49540:	2000      	movs	r0, #0
	event->state |= state;
   49542:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   49546:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   49548:	60eb      	str	r3, [r5, #12]
	return retcode;
   4954a:	e00b      	b.n	49564 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   4954c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   49550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   49554:	bf08      	it	eq
   49556:	f112 0f02 	cmneq.w	r2, #2
   4955a:	d105      	bne.n	49568 <signal_poll_event+0x4e>
		poller->is_polling = false;
   4955c:	2300      	movs	r3, #0
   4955e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   49560:	f06f 000a 	mvn.w	r0, #10
}
   49564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   49568:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   4956c:	4640      	mov	r0, r8
   4956e:	f7ff fdb6 	bl	490de <z_unpend_thread>
	arch_thread_return_value_set(thread,
   49572:	2e08      	cmp	r6, #8
   49574:	bf0c      	ite	eq
   49576:	f06f 0303 	mvneq.w	r3, #3
   4957a:	2300      	movne	r3, #0
   4957c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   4957e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   49582:	06db      	lsls	r3, r3, #27
   49584:	d102      	bne.n	4958c <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   49586:	f854 7c48 	ldr.w	r7, [r4, #-72]
   4958a:	b10f      	cbz	r7, 49590 <signal_poll_event+0x76>
		poller->is_polling = false;
   4958c:	2300      	movs	r3, #0
   4958e:	e7d2      	b.n	49536 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   49590:	4640      	mov	r0, r8
   49592:	f7ff fdd4 	bl	4913e <z_ready_thread>
		poller->is_polling = false;
   49596:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   49598:	e7ce      	b.n	49538 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   4959a:	2b02      	cmp	r3, #2
   4959c:	d1f6      	bne.n	4958c <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   4959e:	7823      	ldrb	r3, [r4, #0]
   495a0:	2b00      	cmp	r3, #0
   495a2:	d0c9      	beq.n	49538 <signal_poll_event+0x1e>
   495a4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   495a8:	2f00      	cmp	r7, #0
   495aa:	d0f4      	beq.n	49596 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   495ac:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   495b0:	f1a4 0914 	sub.w	r9, r4, #20
   495b4:	f104 0014 	add.w	r0, r4, #20
   495b8:	f7ff fe77 	bl	492aa <z_abort_timeout>
		twork->poll_result = 0;
   495bc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   495c0:	4649      	mov	r1, r9
   495c2:	4638      	mov	r0, r7
   495c4:	f7ff fcf7 	bl	48fb6 <k_work_submit_to_queue>
		poller->is_polling = false;
   495c8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   495cc:	e7b4      	b.n	49538 <signal_poll_event+0x1e>

000495ce <clear_event_registrations>:
	while (num_events--) {
   495ce:	2314      	movs	r3, #20
{
   495d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   495d2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   495d6:	2400      	movs	r4, #0
   495d8:	2601      	movs	r6, #1
	while (num_events--) {
   495da:	b901      	cbnz	r1, 495de <clear_event_registrations+0x10>
}
   495dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   495de:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   495e2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   495e6:	f003 031f 	and.w	r3, r3, #31
   495ea:	2b08      	cmp	r3, #8
   495ec:	f1a0 0714 	sub.w	r7, r0, #20
   495f0:	d80d      	bhi.n	4960e <clear_event_registrations+0x40>
   495f2:	fa06 f303 	lsl.w	r3, r6, r3
   495f6:	f413 7f8b 	tst.w	r3, #278	; 0x116
   495fa:	d008      	beq.n	4960e <clear_event_registrations+0x40>
	return node->next != NULL;
   495fc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   49600:	b12b      	cbz	r3, 4960e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   49602:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   49606:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   49608:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   4960a:	e940 4405 	strd	r4, r4, [r0, #-20]
   4960e:	f382 8811 	msr	BASEPRI, r2
   49612:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   49616:	f04f 0320 	mov.w	r3, #32
   4961a:	f3ef 8211 	mrs	r2, BASEPRI
   4961e:	f383 8812 	msr	BASEPRI_MAX, r3
   49622:	f3bf 8f6f 	isb	sy
   49626:	3901      	subs	r1, #1
   49628:	4638      	mov	r0, r7
   4962a:	e7d6      	b.n	495da <clear_event_registrations+0xc>

0004962c <k_poll_event_init>:
{
   4962c:	b510      	push	{r4, lr}
	event->type = type;
   4962e:	04d2      	lsls	r2, r2, #19
   49630:	0209      	lsls	r1, r1, #8
   49632:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   49636:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   4963a:	430a      	orrs	r2, r1
   4963c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   4963e:	2400      	movs	r4, #0
	event->type = type;
   49640:	430a      	orrs	r2, r1
	event->obj = obj;
   49642:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   49646:	6084      	str	r4, [r0, #8]
}
   49648:	bd10      	pop	{r4, pc}

0004964a <z_handle_obj_poll_events>:
{
   4964a:	4603      	mov	r3, r0
	return list->head == list;
   4964c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   4964e:	4283      	cmp	r3, r0
   49650:	d008      	beq.n	49664 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   49652:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   49656:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   49658:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4965a:	2300      	movs	r3, #0
	node->prev = NULL;
   4965c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   49660:	f7ff bf5b 	b.w	4951a <signal_poll_event>
}
   49664:	4770      	bx	lr

00049666 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   49666:	3204      	adds	r2, #4
{
   49668:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   4966a:	4604      	mov	r4, r0
   4966c:	d208      	bcs.n	49680 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   4966e:	2600      	movs	r6, #0
   49670:	2700      	movs	r7, #0
   49672:	e9cd 6700 	strd	r6, r7, [sp]
   49676:	f041 0104 	orr.w	r1, r1, #4
   4967a:	f7ff fa9e 	bl	48bba <k_heap_aligned_alloc>
	if (mem == NULL) {
   4967e:	b910      	cbnz	r0, 49686 <z_heap_aligned_alloc+0x20>
		return NULL;
   49680:	2000      	movs	r0, #0
}
   49682:	b002      	add	sp, #8
   49684:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   49686:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   4968a:	e7fa      	b.n	49682 <z_heap_aligned_alloc+0x1c>

0004968c <k_free>:
	if (ptr != NULL) {
   4968c:	b120      	cbz	r0, 49698 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   4968e:	1f01      	subs	r1, r0, #4
   49690:	f850 0c04 	ldr.w	r0, [r0, #-4]
   49694:	f7ff bad2 	b.w	48c3c <k_heap_free>
}
   49698:	4770      	bx	lr

0004969a <k_malloc>:
{
   4969a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   4969c:	2004      	movs	r0, #4
   4969e:	f7f9 b923 	b.w	428e8 <k_aligned_alloc>

000496a2 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   496a2:	4770      	bx	lr

000496a4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   496a4:	f7f5 bee2 	b.w	3f46c <SystemInit>
