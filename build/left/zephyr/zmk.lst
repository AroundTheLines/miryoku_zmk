
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	28 9e 00 20 f9 d6 02 00 39 c5 04 00 cd d6 02 00     (.. ....9.......
   26010:	cd d6 02 00 cd d6 02 00 cd d6 02 00 00 00 00 00     ................
	...
   2602c:	41 d4 02 00 cd d6 02 00 00 00 00 00 f9 d3 02 00     A...............
   2603c:	cd d6 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	bd d4 02 00 f1 05 04 00 bd d4 02 00 bd d4 02 00     ................
   26050:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   26060:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   26070:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   26080:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   26090:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   260a0:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   260b0:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   260c0:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   260d0:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   260e0:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................
   260f0:	bd d4 02 00 bd d4 02 00 bd d4 02 00 bd d4 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26138:	4607      	mov	r7, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   26140:	4615      	mov	r5, r2
   26142:	463c      	mov	r4, r7
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c6 	bne.w	262d8 <__udivmoddi4+0x1a4>
   2614c:	4282      	cmp	r2, r0
   2614e:	fab2 f782 	clz	r7, r2
   26152:	d946      	bls.n	261e2 <__udivmoddi4+0xae>
   26154:	b14f      	cbz	r7, 2616a <__udivmoddi4+0x36>
   26156:	f1c7 0e20 	rsb	lr, r7, #32
   2615a:	fa24 fe0e 	lsr.w	lr, r4, lr
   2615e:	fa00 f307 	lsl.w	r3, r0, r7
   26162:	40bd      	lsls	r5, r7
   26164:	ea4e 0c03 	orr.w	ip, lr, r3
   26168:	40bc      	lsls	r4, r7
   2616a:	ea4f 4815 	mov.w	r8, r5, lsr #16
   2616e:	fa1f fe85 	uxth.w	lr, r5
   26172:	fbbc f9f8 	udiv	r9, ip, r8
   26176:	0c22      	lsrs	r2, r4, #16
   26178:	fb08 c319 	mls	r3, r8, r9, ip
   2617c:	fb09 fa0e 	mul.w	sl, r9, lr
   26180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   26184:	459a      	cmp	sl, r3
   26186:	d928      	bls.n	261da <__udivmoddi4+0xa6>
   26188:	18eb      	adds	r3, r5, r3
   2618a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   2618e:	d204      	bcs.n	2619a <__udivmoddi4+0x66>
   26190:	459a      	cmp	sl, r3
   26192:	d902      	bls.n	2619a <__udivmoddi4+0x66>
   26194:	f1a9 0002 	sub.w	r0, r9, #2
   26198:	442b      	add	r3, r5
   2619a:	eba3 030a 	sub.w	r3, r3, sl
   2619e:	b2a4      	uxth	r4, r4
   261a0:	fbb3 f2f8 	udiv	r2, r3, r8
   261a4:	fb08 3312 	mls	r3, r8, r2, r3
   261a8:	fb02 fe0e 	mul.w	lr, r2, lr
   261ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261b0:	45a6      	cmp	lr, r4
   261b2:	d914      	bls.n	261de <__udivmoddi4+0xaa>
   261b4:	192c      	adds	r4, r5, r4
   261b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   261ba:	d203      	bcs.n	261c4 <__udivmoddi4+0x90>
   261bc:	45a6      	cmp	lr, r4
   261be:	d901      	bls.n	261c4 <__udivmoddi4+0x90>
   261c0:	1e93      	subs	r3, r2, #2
   261c2:	442c      	add	r4, r5
   261c4:	eba4 040e 	sub.w	r4, r4, lr
   261c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   261cc:	b11e      	cbz	r6, 261d6 <__udivmoddi4+0xa2>
   261ce:	40fc      	lsrs	r4, r7
   261d0:	2300      	movs	r3, #0
   261d2:	6034      	str	r4, [r6, #0]
   261d4:	6073      	str	r3, [r6, #4]
   261d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261da:	4648      	mov	r0, r9
   261dc:	e7dd      	b.n	2619a <__udivmoddi4+0x66>
   261de:	4613      	mov	r3, r2
   261e0:	e7f0      	b.n	261c4 <__udivmoddi4+0x90>
   261e2:	b902      	cbnz	r2, 261e6 <__udivmoddi4+0xb2>
   261e4:	deff      	udf	#255	; 0xff
   261e6:	bb87      	cbnz	r7, 2624a <__udivmoddi4+0x116>
   261e8:	1a83      	subs	r3, r0, r2
   261ea:	2101      	movs	r1, #1
   261ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261f0:	b2aa      	uxth	r2, r5
   261f2:	fbb3 fcfe 	udiv	ip, r3, lr
   261f6:	0c20      	lsrs	r0, r4, #16
   261f8:	fb0e 331c 	mls	r3, lr, ip, r3
   261fc:	fb0c f802 	mul.w	r8, ip, r2
   26200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   26204:	4598      	cmp	r8, r3
   26206:	d963      	bls.n	262d0 <__udivmoddi4+0x19c>
   26208:	18eb      	adds	r3, r5, r3
   2620a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   2620e:	d204      	bcs.n	2621a <__udivmoddi4+0xe6>
   26210:	4598      	cmp	r8, r3
   26212:	d902      	bls.n	2621a <__udivmoddi4+0xe6>
   26214:	f1ac 0002 	sub.w	r0, ip, #2
   26218:	442b      	add	r3, r5
   2621a:	eba3 0308 	sub.w	r3, r3, r8
   2621e:	b2a4      	uxth	r4, r4
   26220:	fbb3 fcfe 	udiv	ip, r3, lr
   26224:	fb0e 331c 	mls	r3, lr, ip, r3
   26228:	fb0c f202 	mul.w	r2, ip, r2
   2622c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   26230:	42a2      	cmp	r2, r4
   26232:	d94f      	bls.n	262d4 <__udivmoddi4+0x1a0>
   26234:	192c      	adds	r4, r5, r4
   26236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   2623a:	d204      	bcs.n	26246 <__udivmoddi4+0x112>
   2623c:	42a2      	cmp	r2, r4
   2623e:	d902      	bls.n	26246 <__udivmoddi4+0x112>
   26240:	f1ac 0302 	sub.w	r3, ip, #2
   26244:	442c      	add	r4, r5
   26246:	1aa4      	subs	r4, r4, r2
   26248:	e7be      	b.n	261c8 <__udivmoddi4+0x94>
   2624a:	f1c7 0c20 	rsb	ip, r7, #32
   2624e:	fa20 f80c 	lsr.w	r8, r0, ip
   26252:	fa00 f307 	lsl.w	r3, r0, r7
   26256:	fa24 fc0c 	lsr.w	ip, r4, ip
   2625a:	40bd      	lsls	r5, r7
   2625c:	ea4c 0203 	orr.w	r2, ip, r3
   26260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   26264:	b2ab      	uxth	r3, r5
   26266:	fbb8 fcfe 	udiv	ip, r8, lr
   2626a:	0c11      	lsrs	r1, r2, #16
   2626c:	fb0e 801c 	mls	r0, lr, ip, r8
   26270:	fb0c f903 	mul.w	r9, ip, r3
   26274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   26278:	4581      	cmp	r9, r0
   2627a:	fa04 f407 	lsl.w	r4, r4, r7
   2627e:	d923      	bls.n	262c8 <__udivmoddi4+0x194>
   26280:	1828      	adds	r0, r5, r0
   26282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   26286:	d204      	bcs.n	26292 <__udivmoddi4+0x15e>
   26288:	4581      	cmp	r9, r0
   2628a:	d902      	bls.n	26292 <__udivmoddi4+0x15e>
   2628c:	f1ac 0102 	sub.w	r1, ip, #2
   26290:	4428      	add	r0, r5
   26292:	eba0 0009 	sub.w	r0, r0, r9
   26296:	b292      	uxth	r2, r2
   26298:	fbb0 fcfe 	udiv	ip, r0, lr
   2629c:	fb0e 001c 	mls	r0, lr, ip, r0
   262a0:	fb0c f803 	mul.w	r8, ip, r3
   262a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   262a8:	4598      	cmp	r8, r3
   262aa:	d90f      	bls.n	262cc <__udivmoddi4+0x198>
   262ac:	18eb      	adds	r3, r5, r3
   262ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   262b2:	d204      	bcs.n	262be <__udivmoddi4+0x18a>
   262b4:	4598      	cmp	r8, r3
   262b6:	d902      	bls.n	262be <__udivmoddi4+0x18a>
   262b8:	f1ac 0202 	sub.w	r2, ip, #2
   262bc:	442b      	add	r3, r5
   262be:	eba3 0308 	sub.w	r3, r3, r8
   262c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   262c6:	e791      	b.n	261ec <__udivmoddi4+0xb8>
   262c8:	4661      	mov	r1, ip
   262ca:	e7e2      	b.n	26292 <__udivmoddi4+0x15e>
   262cc:	4662      	mov	r2, ip
   262ce:	e7f6      	b.n	262be <__udivmoddi4+0x18a>
   262d0:	4660      	mov	r0, ip
   262d2:	e7a2      	b.n	2621a <__udivmoddi4+0xe6>
   262d4:	4663      	mov	r3, ip
   262d6:	e7b6      	b.n	26246 <__udivmoddi4+0x112>
   262d8:	4283      	cmp	r3, r0
   262da:	d905      	bls.n	262e8 <__udivmoddi4+0x1b4>
   262dc:	b10e      	cbz	r6, 262e2 <__udivmoddi4+0x1ae>
   262de:	e9c6 7000 	strd	r7, r0, [r6]
   262e2:	2100      	movs	r1, #0
   262e4:	4608      	mov	r0, r1
   262e6:	e776      	b.n	261d6 <__udivmoddi4+0xa2>
   262e8:	fab3 f183 	clz	r1, r3
   262ec:	b981      	cbnz	r1, 26310 <__udivmoddi4+0x1dc>
   262ee:	4283      	cmp	r3, r0
   262f0:	d301      	bcc.n	262f6 <__udivmoddi4+0x1c2>
   262f2:	42ba      	cmp	r2, r7
   262f4:	d80a      	bhi.n	2630c <__udivmoddi4+0x1d8>
   262f6:	1abc      	subs	r4, r7, r2
   262f8:	eb60 0303 	sbc.w	r3, r0, r3
   262fc:	2001      	movs	r0, #1
   262fe:	469c      	mov	ip, r3
   26300:	2e00      	cmp	r6, #0
   26302:	d068      	beq.n	263d6 <__udivmoddi4+0x2a2>
   26304:	e9c6 4c00 	strd	r4, ip, [r6]
   26308:	2100      	movs	r1, #0
   2630a:	e764      	b.n	261d6 <__udivmoddi4+0xa2>
   2630c:	4608      	mov	r0, r1
   2630e:	e7f7      	b.n	26300 <__udivmoddi4+0x1cc>
   26310:	f1c1 0c20 	rsb	ip, r1, #32
   26314:	408b      	lsls	r3, r1
   26316:	fa22 f40c 	lsr.w	r4, r2, ip
   2631a:	431c      	orrs	r4, r3
   2631c:	fa02 f501 	lsl.w	r5, r2, r1
   26320:	fa00 f301 	lsl.w	r3, r0, r1
   26324:	fa27 f20c 	lsr.w	r2, r7, ip
   26328:	fa20 fb0c 	lsr.w	fp, r0, ip
   2632c:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26330:	4313      	orrs	r3, r2
   26332:	fbbb f8f9 	udiv	r8, fp, r9
   26336:	fa1f fe84 	uxth.w	lr, r4
   2633a:	fb09 bb18 	mls	fp, r9, r8, fp
   2633e:	0c1a      	lsrs	r2, r3, #16
   26340:	fb08 fa0e 	mul.w	sl, r8, lr
   26344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   26348:	4592      	cmp	sl, r2
   2634a:	fa07 f701 	lsl.w	r7, r7, r1
   2634e:	d93e      	bls.n	263ce <__udivmoddi4+0x29a>
   26350:	18a2      	adds	r2, r4, r2
   26352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26356:	d204      	bcs.n	26362 <__udivmoddi4+0x22e>
   26358:	4592      	cmp	sl, r2
   2635a:	d902      	bls.n	26362 <__udivmoddi4+0x22e>
   2635c:	f1a8 0002 	sub.w	r0, r8, #2
   26360:	4422      	add	r2, r4
   26362:	eba2 020a 	sub.w	r2, r2, sl
   26366:	b29b      	uxth	r3, r3
   26368:	fbb2 f8f9 	udiv	r8, r2, r9
   2636c:	fb09 2218 	mls	r2, r9, r8, r2
   26370:	fb08 fe0e 	mul.w	lr, r8, lr
   26374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   26378:	4596      	cmp	lr, r2
   2637a:	d92a      	bls.n	263d2 <__udivmoddi4+0x29e>
   2637c:	18a2      	adds	r2, r4, r2
   2637e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   26382:	d204      	bcs.n	2638e <__udivmoddi4+0x25a>
   26384:	4596      	cmp	lr, r2
   26386:	d902      	bls.n	2638e <__udivmoddi4+0x25a>
   26388:	f1a8 0302 	sub.w	r3, r8, #2
   2638c:	4422      	add	r2, r4
   2638e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26392:	fba0 9305 	umull	r9, r3, r0, r5
   26396:	eba2 020e 	sub.w	r2, r2, lr
   2639a:	429a      	cmp	r2, r3
   2639c:	46ce      	mov	lr, r9
   2639e:	4698      	mov	r8, r3
   263a0:	d302      	bcc.n	263a8 <__udivmoddi4+0x274>
   263a2:	d106      	bne.n	263b2 <__udivmoddi4+0x27e>
   263a4:	454f      	cmp	r7, r9
   263a6:	d204      	bcs.n	263b2 <__udivmoddi4+0x27e>
   263a8:	ebb9 0e05 	subs.w	lr, r9, r5
   263ac:	eb63 0804 	sbc.w	r8, r3, r4
   263b0:	3801      	subs	r0, #1
   263b2:	b186      	cbz	r6, 263d6 <__udivmoddi4+0x2a2>
   263b4:	ebb7 030e 	subs.w	r3, r7, lr
   263b8:	eb62 0708 	sbc.w	r7, r2, r8
   263bc:	fa07 fc0c 	lsl.w	ip, r7, ip
   263c0:	40cb      	lsrs	r3, r1
   263c2:	ea4c 0303 	orr.w	r3, ip, r3
   263c6:	40cf      	lsrs	r7, r1
   263c8:	e9c6 3700 	strd	r3, r7, [r6]
   263cc:	e79c      	b.n	26308 <__udivmoddi4+0x1d4>
   263ce:	4640      	mov	r0, r8
   263d0:	e7c7      	b.n	26362 <__udivmoddi4+0x22e>
   263d2:	4643      	mov	r3, r8
   263d4:	e7db      	b.n	2638e <__udivmoddi4+0x25a>
   263d6:	4631      	mov	r1, r6
   263d8:	e6fd      	b.n	261d6 <__udivmoddi4+0xa2>
   263da:	0000      	movs	r0, r0
   263dc:	0000      	movs	r0, r0
	...

000263e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   263e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   263e2:	4d40      	ldr	r5, [pc, #256]	; (264e4 <bt_init+0x104>)
   263e4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   263e8:	6899      	ldr	r1, [r3, #8]
   263ea:	f011 0101 	ands.w	r1, r1, #1
   263ee:	d123      	bne.n	26438 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   263f0:	aa01      	add	r2, sp, #4
   263f2:	f640 4003 	movw	r0, #3075	; 0xc03
   263f6:	f008 f809 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   263fa:	4604      	mov	r4, r0
   263fc:	2800      	cmp	r0, #0
   263fe:	d16e      	bne.n	264de <bt_init+0xfe>
	uint8_t status = buf->data[0];
   26400:	9b01      	ldr	r3, [sp, #4]
   26402:	689b      	ldr	r3, [r3, #8]
	if (status) {
   26404:	781b      	ldrb	r3, [r3, #0]
   26406:	b9a3      	cbnz	r3, 26432 <bt_init+0x52>
		bt_scan_reset();
   26408:	f009 fa8e 	bl	2f928 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2640c:	f3bf 8f5b 	dmb	ish
   26410:	462b      	mov	r3, r5
   26412:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   26416:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   2641a:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2641e:	f3bf 8f5b 	dmb	ish
   26422:	e853 1f00 	ldrex	r1, [r3]
   26426:	e843 2000 	strex	r0, r2, [r3]
   2642a:	2800      	cmp	r0, #0
   2642c:	d1f9      	bne.n	26422 <bt_init+0x42>
   2642e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   26432:	9801      	ldr	r0, [sp, #4]
   26434:	f01d fe3e 	bl	440b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26438:	aa01      	add	r2, sp, #4
   2643a:	2100      	movs	r1, #0
   2643c:	f241 0003 	movw	r0, #4099	; 0x1003
   26440:	f007 ffe4 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   26444:	4604      	mov	r4, r0
   26446:	2800      	cmp	r0, #0
   26448:	d149      	bne.n	264de <bt_init+0xfe>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   2644a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   2644c:	4826      	ldr	r0, [pc, #152]	; (264e8 <bt_init+0x108>)
   2644e:	6899      	ldr	r1, [r3, #8]
   26450:	2208      	movs	r2, #8
   26452:	3101      	adds	r1, #1
   26454:	f026 f92f 	bl	4c6b6 <memcpy>
	net_buf_unref(rsp);
   26458:	9801      	ldr	r0, [sp, #4]
   2645a:	f01d fe2b 	bl	440b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   2645e:	4621      	mov	r1, r4
   26460:	aa01      	add	r2, sp, #4
   26462:	f241 0001 	movw	r0, #4097	; 0x1001
   26466:	f007 ffd1 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2646a:	4604      	mov	r4, r0
   2646c:	2800      	cmp	r0, #0
   2646e:	d136      	bne.n	264de <bt_init+0xfe>
	read_local_ver_complete(rsp);
   26470:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   26472:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   26474:	785a      	ldrb	r2, [r3, #1]
   26476:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   2647a:	78d9      	ldrb	r1, [r3, #3]
   2647c:	789a      	ldrb	r2, [r3, #2]
   2647e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26482:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   26486:	791a      	ldrb	r2, [r3, #4]
   26488:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   2648c:	7a19      	ldrb	r1, [r3, #8]
   2648e:	79da      	ldrb	r2, [r3, #7]
   26490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26494:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   26498:	795a      	ldrb	r2, [r3, #5]
   2649a:	799b      	ldrb	r3, [r3, #6]
   2649c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   264a0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   264a4:	f01d fe06 	bl	440b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   264a8:	4621      	mov	r1, r4
   264aa:	aa01      	add	r2, sp, #4
   264ac:	f241 0002 	movw	r0, #4098	; 0x1002
   264b0:	f007 ffac 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   264b4:	4604      	mov	r4, r0
   264b6:	b990      	cbnz	r0, 264de <bt_init+0xfe>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   264b8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   264ba:	480c      	ldr	r0, [pc, #48]	; (264ec <bt_init+0x10c>)
   264bc:	6899      	ldr	r1, [r3, #8]
   264be:	2240      	movs	r2, #64	; 0x40
   264c0:	3101      	adds	r1, #1
   264c2:	f026 f8f8 	bl	4c6b6 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264c6:	4809      	ldr	r0, [pc, #36]	; (264ec <bt_init+0x10c>)
   264c8:	f026 f9a9 	bl	4c81e <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264cc:	9801      	ldr	r0, [sp, #4]
   264ce:	f01d fdf1 	bl	440b4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264d2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264d6:	065a      	lsls	r2, r3, #25
   264d8:	d40a      	bmi.n	264f0 <bt_init+0x110>
		return -ENODEV;
   264da:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   264de:	4620      	mov	r0, r4
   264e0:	b002      	add	sp, #8
   264e2:	bd70      	pop	{r4, r5, r6, pc}
   264e4:	20000040 	.word	0x20000040
   264e8:	200000b0 	.word	0x200000b0
   264ec:	200000b8 	.word	0x200000b8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   264f0:	4621      	mov	r1, r4
   264f2:	aa01      	add	r2, sp, #4
   264f4:	f242 0003 	movw	r0, #8195	; 0x2003
   264f8:	f007 ff88 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   264fc:	4604      	mov	r4, r0
   264fe:	2800      	cmp	r0, #0
   26500:	d1ed      	bne.n	264de <bt_init+0xfe>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   26502:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   26504:	48ba      	ldr	r0, [pc, #744]	; (267f0 <bt_init+0x410>)
   26506:	6899      	ldr	r1, [r3, #8]
   26508:	2208      	movs	r2, #8
   2650a:	3101      	adds	r1, #1
   2650c:	f026 f8d3 	bl	4c6b6 <memcpy>
	net_buf_unref(rsp);
   26510:	9801      	ldr	r0, [sp, #4]
   26512:	f01d fdcf 	bl	440b4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   26516:	4621      	mov	r1, r4
   26518:	aa01      	add	r2, sp, #4
   2651a:	f242 0002 	movw	r0, #8194	; 0x2002
   2651e:	f007 ff75 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   26522:	4604      	mov	r4, r0
   26524:	2800      	cmp	r0, #0
   26526:	d1da      	bne.n	264de <bt_init+0xfe>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26528:	9b01      	ldr	r3, [sp, #4]
   2652a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   2652c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26530:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   26534:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   26536:	b121      	cbz	r1, 26542 <bt_init+0x162>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26538:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   2653a:	48ae      	ldr	r0, [pc, #696]	; (267f4 <bt_init+0x414>)
   2653c:	4611      	mov	r1, r2
   2653e:	f02b f96c 	bl	5181a <z_impl_k_sem_init>
		net_buf_unref(rsp);
   26542:	9801      	ldr	r0, [sp, #4]
   26544:	f01d fdb6 	bl	440b4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26548:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   2654c:	f016 0620 	ands.w	r6, r6, #32
   26550:	f000 8121 	beq.w	26796 <bt_init+0x3b6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   26554:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26558:	071b      	lsls	r3, r3, #28
   2655a:	d512      	bpl.n	26582 <bt_init+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   2655c:	aa01      	add	r2, sp, #4
   2655e:	2100      	movs	r1, #0
   26560:	f242 001c 	movw	r0, #8220	; 0x201c
   26564:	f007 ff52 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   26568:	4604      	mov	r4, r0
   2656a:	2800      	cmp	r0, #0
   2656c:	d1b7      	bne.n	264de <bt_init+0xfe>
		le_read_supp_states_complete(rsp);
   2656e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   26570:	6883      	ldr	r3, [r0, #8]
   26572:	f8d3 2001 	ldr.w	r2, [r3, #1]
   26576:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   2657a:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   2657e:	f01d fd99 	bl	440b4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   26582:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26586:	069e      	lsls	r6, r3, #26
   26588:	d523      	bpl.n	265d2 <bt_init+0x1f2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2658a:	f10d 0102 	add.w	r1, sp, #2
   2658e:	4668      	mov	r0, sp
   26590:	f026 fbd7 	bl	4cd42 <hci_le_read_max_data_len>
		if (err) {
   26594:	4604      	mov	r4, r0
   26596:	2800      	cmp	r0, #0
   26598:	d1a1      	bne.n	264de <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   2659a:	2104      	movs	r1, #4
   2659c:	f242 0024 	movw	r0, #8228	; 0x2024
   265a0:	f007 fed8 	bl	2e354 <bt_hci_cmd_create>
		if (!buf) {
   265a4:	4606      	mov	r6, r0
   265a6:	2800      	cmp	r0, #0
   265a8:	f000 80fc 	beq.w	267a4 <bt_init+0x3c4>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   265ac:	2104      	movs	r1, #4
   265ae:	3008      	adds	r0, #8
   265b0:	f02a f8aa 	bl	50708 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265b4:	f8bd 3000 	ldrh.w	r3, [sp]
   265b8:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265be:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265c0:	4622      	mov	r2, r4
   265c2:	4631      	mov	r1, r6
   265c4:	f242 0024 	movw	r0, #8228	; 0x2024
   265c8:	f007 ff20 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   265cc:	4604      	mov	r4, r0
   265ce:	2800      	cmp	r0, #0
   265d0:	d185      	bne.n	264de <bt_init+0xfe>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   265d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265d6:	065c      	lsls	r4, r3, #25
   265d8:	d510      	bpl.n	265fc <bt_init+0x21c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   265da:	aa01      	add	r2, sp, #4
   265dc:	2100      	movs	r1, #0
   265de:	f242 002a 	movw	r0, #8234	; 0x202a
   265e2:	f007 ff13 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   265e6:	4604      	mov	r4, r0
   265e8:	2800      	cmp	r0, #0
   265ea:	f47f af78 	bne.w	264de <bt_init+0xfe>
		le_read_resolving_list_size_complete(rsp);
   265ee:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   265f0:	6883      	ldr	r3, [r0, #8]
   265f2:	785b      	ldrb	r3, [r3, #1]
   265f4:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   265f8:	f01d fd5c 	bl	440b4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   265fc:	2108      	movs	r1, #8
   265fe:	f242 0001 	movw	r0, #8193	; 0x2001
   26602:	f007 fea7 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   26606:	4604      	mov	r4, r0
   26608:	2800      	cmp	r0, #0
   2660a:	f000 80cb 	beq.w	267a4 <bt_init+0x3c4>
   2660e:	2108      	movs	r1, #8
   26610:	4408      	add	r0, r1
   26612:	f02a f879 	bl	50708 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   26616:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   2661a:	f011 0f40 	tst.w	r1, #64	; 0x40
   2661e:	4602      	mov	r2, r0
   26620:	f240 2302 	movw	r3, #514	; 0x202
   26624:	bf08      	it	eq
   26626:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   26628:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   2662a:	bf4c      	ite	mi
   2662c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   26630:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   26634:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26636:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   2663a:	bf48      	it	mi
   2663c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26640:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26644:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   26648:	bf18      	it	ne
   2664a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2664e:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26652:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   26654:	bf48      	it	mi
   26656:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2665a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   2665c:	bf08      	it	eq
   2665e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   26662:	2100      	movs	r1, #0
   26664:	f026 fa29 	bl	4caba <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   26668:	4621      	mov	r1, r4
   2666a:	2200      	movs	r2, #0
   2666c:	f242 0001 	movw	r0, #8193	; 0x2001
   26670:	f007 fecc 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   26674:	4604      	mov	r4, r0
   26676:	2800      	cmp	r0, #0
   26678:	f47f af31 	bne.w	264de <bt_init+0xfe>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2667c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   26680:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26684:	0698      	lsls	r0, r3, #26
   26686:	f100 80a2 	bmi.w	267ce <bt_init+0x3ee>
	if (bt_dev.le.acl_mtu) {
   2668a:	b9d9      	cbnz	r1, 266c4 <bt_init+0x2e4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   2668c:	aa01      	add	r2, sp, #4
   2668e:	f241 0005 	movw	r0, #4101	; 0x1005
   26692:	f007 febb 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   26696:	4604      	mov	r4, r0
   26698:	2800      	cmp	r0, #0
   2669a:	f47f af20 	bne.w	264de <bt_init+0xfe>
	if (bt_dev.le.acl_mtu) {
   2669e:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   266a2:	b963      	cbnz	r3, 266be <bt_init+0x2de>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266a4:	9b01      	ldr	r3, [sp, #4]
   266a6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266a8:	785a      	ldrb	r2, [r3, #1]
   266aa:	7899      	ldrb	r1, [r3, #2]
   266ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   266b0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266b4:	889a      	ldrh	r2, [r3, #4]
   266b6:	484f      	ldr	r0, [pc, #316]	; (267f4 <bt_init+0x414>)
   266b8:	4611      	mov	r1, r2
   266ba:	f02b f8ae 	bl	5181a <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266be:	9801      	ldr	r0, [sp, #4]
   266c0:	f01d fcf8 	bl	440b4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266c4:	2108      	movs	r1, #8
   266c6:	f640 4001 	movw	r0, #3073	; 0xc01
   266ca:	f007 fe43 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   266ce:	4604      	mov	r4, r0
   266d0:	2800      	cmp	r0, #0
   266d2:	d067      	beq.n	267a4 <bt_init+0x3c4>
   266d4:	2108      	movs	r1, #8
   266d6:	4408      	add	r0, r1
   266d8:	f02a f816 	bl	50708 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   266dc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   266e0:	07d9      	lsls	r1, r3, #31
   266e2:	4602      	mov	r2, r0
   266e4:	d579      	bpl.n	267da <bt_init+0x3fa>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   266e6:	a140      	add	r1, pc, #256	; (adr r1, 267e8 <bt_init+0x408>)
   266e8:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   266ec:	f026 f9e5 	bl	4caba <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   266f0:	4621      	mov	r1, r4
   266f2:	2200      	movs	r2, #0
   266f4:	f640 4001 	movw	r0, #3073	; 0xc01
   266f8:	f007 fe88 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   266fc:	4604      	mov	r4, r0
   266fe:	2800      	cmp	r0, #0
   26700:	f47f aeed 	bne.w	264de <bt_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   26704:	4601      	mov	r1, r0
   26706:	aa01      	add	r2, sp, #4
   26708:	f64f 4001 	movw	r0, #64513	; 0xfc01
   2670c:	f007 fe7e 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   26710:	4604      	mov	r4, r0
   26712:	bb48      	cbnz	r0, 26768 <bt_init+0x388>
	net_buf_unref(rsp);
   26714:	9801      	ldr	r0, [sp, #4]
   26716:	f01d fccd 	bl	440b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   2671a:	4621      	mov	r1, r4
   2671c:	aa01      	add	r2, sp, #4
   2671e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   26722:	f007 fe73 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   26726:	4604      	mov	r4, r0
   26728:	b9f0      	cbnz	r0, 26768 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   2672a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   2672c:	4832      	ldr	r0, [pc, #200]	; (267f8 <bt_init+0x418>)
   2672e:	6899      	ldr	r1, [r3, #8]
   26730:	2202      	movs	r2, #2
   26732:	3101      	adds	r1, #1
   26734:	f025 ffbf 	bl	4c6b6 <memcpy>
	net_buf_unref(rsp);
   26738:	9801      	ldr	r0, [sp, #4]
   2673a:	f01d fcbb 	bl	440b4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   2673e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   26742:	075b      	lsls	r3, r3, #29
   26744:	d510      	bpl.n	26768 <bt_init+0x388>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   26746:	aa01      	add	r2, sp, #4
   26748:	4621      	mov	r1, r4
   2674a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   2674e:	f007 fe5d 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   26752:	b948      	cbnz	r0, 26768 <bt_init+0x388>
		rp.feat = (void *)rsp->data;
   26754:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   26756:	4829      	ldr	r0, [pc, #164]	; (267fc <bt_init+0x41c>)
   26758:	6899      	ldr	r1, [r3, #8]
   2675a:	2201      	movs	r2, #1
   2675c:	4411      	add	r1, r2
   2675e:	f025 ffaa 	bl	4c6b6 <memcpy>
		net_buf_unref(rsp);
   26762:	9801      	ldr	r0, [sp, #4]
   26764:	f01d fca6 	bl	440b4 <net_buf_unref>
	err = bt_id_init();
   26768:	f026 fda9 	bl	4d2be <bt_id_init>
	if (err) {
   2676c:	4604      	mov	r4, r0
   2676e:	2800      	cmp	r0, #0
   26770:	f47f aeb5 	bne.w	264de <bt_init+0xfe>
		err = bt_conn_init();
   26774:	f00a f9fc 	bl	30b70 <bt_conn_init>
		if (err) {
   26778:	4604      	mov	r4, r0
   2677a:	2800      	cmp	r0, #0
   2677c:	f47f aeaf 	bne.w	264de <bt_init+0xfe>
		if (!bt_dev.id_count) {
   26780:	79eb      	ldrb	r3, [r5, #7]
   26782:	2b00      	cmp	r3, #0
   26784:	f43f aeab 	beq.w	264de <bt_init+0xfe>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26788:	2104      	movs	r1, #4
   2678a:	481d      	ldr	r0, [pc, #116]	; (26800 <bt_init+0x420>)
   2678c:	f026 f91a 	bl	4c9c4 <atomic_or>
	bt_finalize_init();
   26790:	f008 f9d2 	bl	2eb38 <bt_finalize_init>
	return 0;
   26794:	e6a3      	b.n	264de <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   26796:	2102      	movs	r1, #2
   26798:	f640 406d 	movw	r0, #3181	; 0xc6d
   2679c:	f007 fdda 	bl	2e354 <bt_hci_cmd_create>
		if (!buf) {
   267a0:	4604      	mov	r4, r0
   267a2:	b910      	cbnz	r0, 267aa <bt_init+0x3ca>
		return -ENOBUFS;
   267a4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   267a8:	e699      	b.n	264de <bt_init+0xfe>
   267aa:	2102      	movs	r1, #2
   267ac:	3008      	adds	r0, #8
   267ae:	f029 ffab 	bl	50708 <net_buf_simple_add>
		cp_le->le = 0x01;
   267b2:	2301      	movs	r3, #1
   267b4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   267b6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   267b8:	4621      	mov	r1, r4
   267ba:	4632      	mov	r2, r6
   267bc:	f640 406d 	movw	r0, #3181	; 0xc6d
   267c0:	f007 fe24 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   267c4:	4604      	mov	r4, r0
   267c6:	2800      	cmp	r0, #0
   267c8:	f43f aec4 	beq.w	26554 <bt_init+0x174>
   267cc:	e687      	b.n	264de <bt_init+0xfe>
	else if (!bt_dev.le.acl_mtu) {
   267ce:	2900      	cmp	r1, #0
   267d0:	f47f af78 	bne.w	266c4 <bt_init+0x2e4>
		return -EIO;
   267d4:	f06f 0404 	mvn.w	r4, #4
   267d8:	e681      	b.n	264de <bt_init+0xfe>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   267da:	480a      	ldr	r0, [pc, #40]	; (26804 <bt_init+0x424>)
   267dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   267e0:	e784      	b.n	266ec <bt_init+0x30c>
   267e2:	bf00      	nop
   267e4:	f3af 8000 	nop.w
   267e8:	02008890 	.word	0x02008890
   267ec:	20008000 	.word	0x20008000
   267f0:	20000110 	.word	0x20000110
   267f4:	20000140 	.word	0x20000140
   267f8:	200000f9 	.word	0x200000f9
   267fc:	200000f8 	.word	0x200000f8
   26800:	2000010c 	.word	0x2000010c
   26804:	02008810 	.word	0x02008810

00026808 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   26808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   2680c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   26810:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   26812:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   26814:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26816:	42a6      	cmp	r6, r4
{
   26818:	4688      	mov	r8, r1
   2681a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   2681c:	d818      	bhi.n	26850 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   2681e:	4d1c      	ldr	r5, [pc, #112]	; (26890 <ull_drift_ticks_get+0x88>)
   26820:	fba3 0105 	umull	r0, r1, r3, r5
   26824:	a318      	add	r3, pc, #96	; (adr r3, 26888 <ull_drift_ticks_get+0x80>)
   26826:	e9d3 2300 	ldrd	r2, r3, [r3]
   2682a:	f7ff fc69 	bl	26100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2682e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26834:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26838:	a313      	add	r3, pc, #76	; (adr r3, 26888 <ull_drift_ticks_get+0x80>)
   2683a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2683e:	fba4 0105 	umull	r0, r1, r4, r5
   26842:	f7ff fc5d 	bl	26100 <__aeabi_uldivmod>
   26846:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   2684a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   2684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26850:	4c0f      	ldr	r4, [pc, #60]	; (26890 <ull_drift_ticks_get+0x88>)
   26852:	a30d      	add	r3, pc, #52	; (adr r3, 26888 <ull_drift_ticks_get+0x80>)
   26854:	e9d3 2300 	ldrd	r2, r3, [r3]
   26858:	fba6 0104 	umull	r0, r1, r6, r4
   2685c:	f7ff fc50 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26860:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26864:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26868:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   2686c:	a306      	add	r3, pc, #24	; (adr r3, 26888 <ull_drift_ticks_get+0x80>)
   2686e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26872:	fba1 0104 	umull	r0, r1, r1, r4
   26876:	f7ff fc43 	bl	26100 <__aeabi_uldivmod>
   2687a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   2687e:	6038      	str	r0, [r7, #0]
}
   26880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26884:	f3af 8000 	nop.w
   26888:	1afd498d 	.word	0x1afd498d
   2688c:	00000007 	.word	0x00000007
   26890:	3b9aca00 	.word	0x3b9aca00
   26894:	00000000 	.word	0x00000000

00026898 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
   26898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
   2689c:	4c76      	ldr	r4, [pc, #472]	; (26a78 <ll_adv_enable+0x1e0>)
{
   2689e:	b091      	sub	sp, #68	; 0x44
	if (!adv || !adv->is_enabled) {
   268a0:	f894 506a 	ldrb.w	r5, [r4, #106]	; 0x6a
	if (!enable) {
   268a4:	2800      	cmp	r0, #0
   268a6:	d048      	beq.n	2693a <ll_adv_enable+0xa2>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   268a8:	f015 0501 	ands.w	r5, r5, #1
   268ac:	d159      	bne.n	26962 <ll_adv_enable+0xca>
	ull_filter_adv_update(lll->filter_policy);
   268ae:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   268b2:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   268b4:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   268b8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   268bc:	f019 fa32 	bl	3fd24 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   268c0:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   268c4:	0747      	lsls	r7, r0, #29
   268c6:	d429      	bmi.n	2691c <ll_adv_enable+0x84>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268c8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268cc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268d8:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268da:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268de:	b187      	cbz	r7, 26902 <ll_adv_enable+0x6a>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   268e0:	4865      	ldr	r0, [pc, #404]	; (26a78 <ll_adv_enable+0x1e0>)
   268e2:	4639      	mov	r1, r7
   268e4:	f012 fdc0 	bl	39468 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   268e8:	783b      	ldrb	r3, [r7, #0]
   268ea:	065e      	lsls	r6, r3, #25
   268ec:	d505      	bpl.n	268fa <ll_adv_enable+0x62>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268ee:	2106      	movs	r1, #6
   268f0:	f00d fe1a 	bl	34528 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   268f4:	2800      	cmp	r0, #0
   268f6:	f000 8215 	beq.w	26d24 <ll_adv_enable+0x48c>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   268fa:	485f      	ldr	r0, [pc, #380]	; (26a78 <ll_adv_enable+0x1e0>)
   268fc:	4649      	mov	r1, r9
   268fe:	f012 fdb3 	bl	39468 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   26902:	783b      	ldrb	r3, [r7, #0]
   26904:	f013 0f0e 	tst.w	r3, #14
   26908:	d130      	bne.n	2696c <ll_adv_enable+0xd4>
		if (lll->conn) {
   2690a:	6a23      	ldr	r3, [r4, #32]
   2690c:	2b00      	cmp	r3, #0
   2690e:	f000 80bf 	beq.w	26a90 <ll_adv_enable+0x1f8>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26912:	250c      	movs	r5, #12
}
   26914:	4628      	mov	r0, r5
   26916:	b011      	add	sp, #68	; 0x44
   26918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2691c:	462a      	mov	r2, r5
   2691e:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   26922:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   26926:	f019 fb8f 	bl	40048 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   2692a:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2692c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26930:	d0ca      	beq.n	268c8 <ll_adv_enable+0x30>
			ull_filter_rpa_update(false);
   26932:	4628      	mov	r0, r5
   26934:	f019 fa3c 	bl	3fdb0 <ull_filter_rpa_update>
   26938:	e7c6      	b.n	268c8 <ll_adv_enable+0x30>
	if (!adv || !adv->is_enabled) {
   2693a:	07ea      	lsls	r2, r5, #31
   2693c:	d511      	bpl.n	26962 <ll_adv_enable+0xca>
	if (adv->lll.conn) {
   2693e:	6a23      	ldr	r3, [r4, #32]
   26940:	b153      	cbz	r3, 26958 <ll_adv_enable+0xc0>
		adv->lll.conn->periph.cancelled = 1U;
   26942:	f893 2020 	ldrb.w	r2, [r3, #32]
   26946:	f042 0202 	orr.w	r2, r2, #2
   2694a:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   2694e:	6a23      	ldr	r3, [r4, #32]
   26950:	f893 3020 	ldrb.w	r3, [r3, #32]
   26954:	07db      	lsls	r3, r3, #31
   26956:	d4dc      	bmi.n	26912 <ll_adv_enable+0x7a>
}
   26958:	b011      	add	sp, #68	; 0x44
   2695a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2695e:	f012 ba8f 	b.w	38e80 <disable.part.0>
			return 0;
   26962:	2500      	movs	r5, #0
}
   26964:	4628      	mov	r0, r5
   26966:	b011      	add	sp, #68	; 0x44
   26968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ch_map = lll->chan_map;
   2696c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26970:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   26972:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26976:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t ch_map = lll->chan_map;
   26978:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   2697c:	f00d ff60 	bl	34840 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   26980:	2800      	cmp	r0, #0
   26982:	d06b      	beq.n	26a5c <ll_adv_enable+0x1c4>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26984:	f899 1001 	ldrb.w	r1, [r9, #1]
   26988:	4602      	mov	r2, r0
   2698a:	4638      	mov	r0, r7
   2698c:	f012 fb28 	bl	38fe0 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26990:	493a      	ldr	r1, [pc, #232]	; (26a7c <ll_adv_enable+0x1e4>)
	uint16_t interval = adv->interval;
   26992:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
   26996:	2331      	movs	r3, #49	; 0x31
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
   26998:	2600      	movs	r6, #0
   2699a:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   2699c:	fba0 0101 	umull	r0, r1, r0, r1
   269a0:	a333      	add	r3, pc, #204	; (adr r3, 26a70 <ll_adv_enable+0x1d8>)
   269a2:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   269a6:	e9c4 6605 	strd	r6, r6, [r4, #20]
	hdr->ref = 0U;
   269aa:	7026      	strb	r6, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   269ac:	6066      	str	r6, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   269ae:	60e6      	str	r6, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   269b0:	f7ff fba6 	bl	26100 <__aeabi_uldivmod>
   269b4:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   269b6:	f00f f947 	bl	35c48 <ticker_ticks_now_get>
   269ba:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   269bc:	f1b9 0f00 	cmp.w	r9, #0
   269c0:	d107      	bne.n	269d2 <ll_adv_enable+0x13a>
   269c2:	783e      	ldrb	r6, [r7, #0]
   269c4:	f006 060f 	and.w	r6, r6, #15
   269c8:	f1a6 0601 	sub.w	r6, r6, #1
   269cc:	fab6 f686 	clz	r6, r6
   269d0:	0976      	lsrs	r6, r6, #5
   269d2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   269d6:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   269d8:	f366 0000 	bfi	r0, r6, #0, #1
	if (lll->is_hdcd) {
   269dc:	f010 0601 	ands.w	r6, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   269e0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   269e4:	f040 816e 	bne.w	26cc4 <ll_adv_enable+0x42c>
		ll_adv_ticker_ext[handle].ticks_slot_window =
   269e8:	4a25      	ldr	r2, [pc, #148]	; (26a80 <ll_adv_enable+0x1e8>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   269ea:	4826      	ldr	r0, [pc, #152]	; (26a84 <ll_adv_enable+0x1ec>)
		ret = ticker_start_ext(
   269ec:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   269ee:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   269f2:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
   269f6:	9406      	str	r4, [sp, #24]
   269f8:	9602      	str	r6, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   269fa:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   269fc:	2391      	movs	r3, #145	; 0x91
   269fe:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
   26a02:	4b21      	ldr	r3, [pc, #132]	; (26a88 <ll_adv_enable+0x1f0>)
   26a04:	9307      	str	r3, [sp, #28]
   26a06:	4b21      	ldr	r3, [pc, #132]	; (26a8c <ll_adv_enable+0x1f4>)
   26a08:	9305      	str	r3, [sp, #20]
   26a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26a0e:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26a10:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
   26a14:	9303      	str	r3, [sp, #12]
   26a16:	af0e      	add	r7, sp, #56	; 0x38
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26a18:	a315      	add	r3, pc, #84	; (adr r3, 26a70 <ll_adv_enable+0x1d8>)
   26a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26a1e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
		ret = ticker_start_ext(
   26a22:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26a24:	f7ff fb6c 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26a28:	4643      	mov	r3, r8
   26a2a:	e9cd 6000 	strd	r6, r0, [sp]
   26a2e:	464a      	mov	r2, r9
   26a30:	4630      	mov	r0, r6
   26a32:	2103      	movs	r1, #3
   26a34:	f00e ff88 	bl	35948 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26a38:	4639      	mov	r1, r7
   26a3a:	f011 fc5f 	bl	382fc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26a3e:	b968      	cbnz	r0, 26a5c <ll_adv_enable+0x1c4>
	adv->is_enabled = 1;
   26a40:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   26a44:	f043 0301 	orr.w	r3, r3, #1
   26a48:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   26a4c:	f012 fef6 	bl	3983c <ull_scan_is_enabled_get>
   26a50:	2800      	cmp	r0, #0
   26a52:	d186      	bne.n	26962 <ll_adv_enable+0xca>
		ull_filter_adv_scan_state_cb(BIT(0));
   26a54:	2001      	movs	r0, #1
   26a56:	f019 f947 	bl	3fce8 <ull_filter_adv_scan_state_cb>
   26a5a:	e75b      	b.n	26914 <ll_adv_enable+0x7c>
	if (adv->lll.conn) {
   26a5c:	6a23      	ldr	r3, [r4, #32]
   26a5e:	2b00      	cmp	r3, #0
   26a60:	f43f af57 	beq.w	26912 <ll_adv_enable+0x7a>
		conn_release(adv);
   26a64:	f012 f9ca 	bl	38dfc <conn_release.constprop.0>
   26a68:	e753      	b.n	26912 <ll_adv_enable+0x7a>
   26a6a:	bf00      	nop
   26a6c:	f3af 8000 	nop.w
   26a70:	1afd498d 	.word	0x1afd498d
   26a74:	00000007 	.word	0x00000007
   26a78:	20005b4c 	.word	0x20005b4c
   26a7c:	3b9aca00 	.word	0x3b9aca00
   26a80:	20005bc4 	.word	0x20005bc4
   26a84:	84e72a00 	.word	0x84e72a00
   26a88:	000377e1 	.word	0x000377e1
   26a8c:	00039051 	.word	0x00039051
		link = ll_rx_link_alloc();
   26a90:	f011 fb7e 	bl	38190 <ll_rx_link_alloc>
		if (!link) {
   26a94:	4682      	mov	sl, r0
   26a96:	2800      	cmp	r0, #0
   26a98:	f000 814c 	beq.w	26d34 <ll_adv_enable+0x49c>
		node_rx = ll_rx_alloc();
   26a9c:	f011 fb84 	bl	381a8 <ll_rx_alloc>
		if (!node_rx) {
   26aa0:	4683      	mov	fp, r0
   26aa2:	2800      	cmp	r0, #0
   26aa4:	f000 8143 	beq.w	26d2e <ll_adv_enable+0x496>
		conn = ll_conn_acquire();
   26aa8:	f013 fd86 	bl	3a5b8 <ll_conn_acquire>
		if (!conn) {
   26aac:	4606      	mov	r6, r0
   26aae:	2800      	cmp	r0, #0
   26ab0:	f000 813a 	beq.w	26d28 <ll_adv_enable+0x490>
		conn_lll->handle = 0xFFFF;
   26ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
   26ab8:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26aba:	8533      	strh	r3, [r6, #40]	; 0x28
		conn_lll = &conn->lll;
   26abc:	f106 031c 	add.w	r3, r6, #28
   26ac0:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
   26ac2:	2800      	cmp	r0, #0
   26ac4:	f000 8138 	beq.w	26d38 <ll_adv_enable+0x4a0>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26ac8:	f106 0268 	add.w	r2, r6, #104	; 0x68
   26acc:	f106 0164 	add.w	r1, r6, #100	; 0x64
   26ad0:	f00d fd36 	bl	34540 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26ad4:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26ad8:	4999      	ldr	r1, [pc, #612]	; (26d40 <ll_adv_enable+0x4a8>)
			conn_lll->phy_tx = PHY_1M;
   26ada:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   26ade:	f023 0307 	bic.w	r3, r3, #7
   26ae2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   26ae6:	f043 0301 	orr.w	r3, r3, #1
   26aea:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   26aee:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   26af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26afa:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
		conn_lll->sn = 0;
   26afe:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
   26b02:	f023 0307 	bic.w	r3, r3, #7
   26b06:	f886 307a 	strb.w	r3, [r6, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   26b0a:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   26b0e:	f023 0307 	bic.w	r3, r3, #7
   26b12:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26b16:	f896 30d6 	ldrb.w	r3, [r6, #214]	; 0xd6
		conn_lll->link_tx_free = NULL;
   26b1a:	f04f 0800 	mov.w	r8, #0
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26b1e:	f368 0300 	bfi	r3, r8, #0, #1
   26b22:	f886 30d6 	strb.w	r3, [r6, #214]	; 0xd6
		conn->connect_expire = 6;
   26b26:	2206      	movs	r2, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26b28:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   26b2c:	e9c6 3116 	strd	r3, r1, [r6, #88]	; 0x58
		conn->connect_expire = 6;
   26b30:	f8a6 20c0 	strh.w	r2, [r6, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   26b34:	e9c6 8812 	strd	r8, r8, [r6, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   26b38:	f8c6 8074 	str.w	r8, [r6, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   26b3c:	f8a6 8078 	strh.w	r8, [r6, #120]	; 0x78
		conn_lll->latency_prepare = 0;
   26b40:	f8a6 802e 	strh.w	r8, [r6, #46]	; 0x2e
		conn_lll->latency_event = 0;
   26b44:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		conn_lll->data_chan_use = 0;
   26b48:	f886 803b 	strb.w	r8, [r6, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   26b4c:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
		conn->supervision_expire = 0;
   26b50:	f8a6 80c4 	strh.w	r8, [r6, #196]	; 0xc4
		conn->procedure_expire = 0;
   26b54:	f8a6 80c8 	strh.w	r8, [r6, #200]	; 0xc8
		conn->apto_expire = 0U;
   26b58:	f8a6 80d0 	strh.w	r8, [r6, #208]	; 0xd0
		conn->appto_expire = 0U;
   26b5c:	f8a6 80cc 	strh.w	r8, [r6, #204]	; 0xcc
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26b60:	23ff      	movs	r3, #255	; 0xff
   26b62:	f10d 0131 	add.w	r1, sp, #49	; 0x31
   26b66:	f106 00d7 	add.w	r0, r6, #215	; 0xd7
   26b6a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   26b6e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   26b72:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   26b76:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   26b7a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   26b7e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   26b82:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
   26b86:	f025 fd96 	bl	4c6b6 <memcpy>
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   26b8a:	f896 10d6 	ldrb.w	r1, [r6, #214]	; 0xd6
   26b8e:	f368 0141 	bfi	r1, r8, #1, #1
   26b92:	f886 10d6 	strb.w	r1, [r6, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   26b96:	23ff      	movs	r3, #255	; 0xff
   26b98:	2206      	movs	r2, #6
   26b9a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   26b9e:	f106 00dd 	add.w	r0, r6, #221	; 0xdd
   26ba2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   26ba6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
   26baa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   26bae:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   26bb2:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   26bb6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
   26bba:	f88d 8038 	strb.w	r8, [sp, #56]	; 0x38
   26bbe:	f025 fd7a 	bl	4c6b6 <memcpy>
		conn->common.fex_valid = 0;
   26bc2:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26bc6:	f8a6 80f0 	strh.w	r8, [r6, #240]	; 0xf0
		conn->common.fex_valid = 0;
   26bca:	f023 0307 	bic.w	r3, r3, #7
   26bce:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26bd2:	f886 80f2 	strb.w	r8, [r6, #242]	; 0xf2
		conn->llcp_rx = NULL;
   26bd6:	f8c6 8114 	str.w	r8, [r6, #276]	; 0x114
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26bda:	f8a6 8118 	strh.w	r8, [r6, #280]	; 0x118
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26bde:	f8a6 8130 	strh.w	r8, [r6, #304]	; 0x130
		conn->llcp_feature.features_conn = ll_feat_get();
   26be2:	f010 fd97 	bl	37714 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26be6:	f896 314a 	ldrb.w	r3, [r6, #330]	; 0x14a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26bea:	f8a6 8148 	strh.w	r8, [r6, #328]	; 0x148
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26bee:	f023 0303 	bic.w	r3, r3, #3
   26bf2:	f886 314a 	strb.w	r3, [r6, #330]	; 0x14a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26bf6:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26bfa:	f8a6 8150 	strh.w	r8, [r6, #336]	; 0x150
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26bfe:	f023 0318 	bic.w	r3, r3, #24
   26c02:	f886 307a 	strb.w	r3, [r6, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26c06:	f896 3176 	ldrb.w	r3, [r6, #374]	; 0x176
		conn->llcp_terminate.reason_final = 0;
   26c0a:	f886 8153 	strb.w	r8, [r6, #339]	; 0x153
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26c0e:	f023 0307 	bic.w	r3, r3, #7
   26c12:	f886 3176 	strb.w	r3, [r6, #374]	; 0x176
		conn->llcp_conn_param.disabled = 0;
   26c16:	f896 3196 	ldrb.w	r3, [r6, #406]	; 0x196
		conn->llcp_terminate.node_rx.hdr.link = link;
   26c1a:	f8c6 a154 	str.w	sl, [r6, #340]	; 0x154
		conn->llcp_conn_param.disabled = 0;
   26c1e:	f368 1345 	bfi	r3, r8, #5, #1
   26c22:	f886 3196 	strb.w	r3, [r6, #406]	; 0x196
		conn->llcp_length.disabled = 0U;
   26c26:	f896 31be 	ldrb.w	r3, [r6, #446]	; 0x1be
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26c2a:	f8a6 8174 	strh.w	r8, [r6, #372]	; 0x174
		conn->llcp_length.disabled = 0U;
   26c2e:	f368 03c3 	bfi	r3, r8, #3, #1
		conn->llcp_feature.features_peer = 0;
   26c32:	2200      	movs	r2, #0
		conn->llcp_length.disabled = 0U;
   26c34:	f886 31be 	strb.w	r3, [r6, #446]	; 0x1be
		conn->llcp_feature.features_peer = 0;
   26c38:	2300      	movs	r3, #0
		conn->llcp_feature.features_conn = ll_feat_get();
   26c3a:	e9c6 014e 	strd	r0, r1, [r6, #312]	; 0x138
		conn->llcp_feature.features_peer = 0;
   26c3e:	e9c6 2350 	strd	r2, r3, [r6, #320]	; 0x140
		conn->periph.llcp_type = 0U;
   26c42:	f886 80e5 	strb.w	r8, [r6, #229]	; 0xe5
		conn->llcp_conn_param.req = 0;
   26c46:	f8a6 8194 	strh.w	r8, [r6, #404]	; 0x194
		conn->periph.ticks_to_offset = 0;
   26c4a:	f8c6 80ec 	str.w	r8, [r6, #236]	; 0xec
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26c4e:	f8a6 81bc 	strh.w	r8, [r6, #444]	; 0x1bc
		conn->llcp_length.cache.tx_octets = 0U;
   26c52:	f8a6 81c8 	strh.w	r8, [r6, #456]	; 0x1c8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26c56:	f014 f81f 	bl	3ac98 <ull_conn_default_tx_octets_get>
   26c5a:	f8a6 00d2 	strh.w	r0, [r6, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26c5e:	f014 f821 	bl	3aca4 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26c62:	f8d6 21cc 	ldr.w	r2, [r6, #460]	; 0x1cc
   26c66:	4b37      	ldr	r3, [pc, #220]	; (26d44 <ll_adv_enable+0x4ac>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26c68:	f8a6 00d4 	strh.w	r0, [r6, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26c6c:	4013      	ands	r3, r2
   26c6e:	f8c6 31cc 	str.w	r3, [r6, #460]	; 0x1cc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26c72:	f014 f81d 	bl	3acb0 <ull_conn_default_phy_tx_get>
   26c76:	f896 31d0 	ldrb.w	r3, [r6, #464]	; 0x1d0
   26c7a:	f360 0302 	bfi	r3, r0, #0, #3
   26c7e:	f886 31d0 	strb.w	r3, [r6, #464]	; 0x1d0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c82:	f014 f81b 	bl	3acbc <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   26c86:	f106 031c 	add.w	r3, r6, #28
   26c8a:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c8c:	f896 31d0 	ldrb.w	r3, [r6, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26c90:	f8c6 81d4 	str.w	r8, [r6, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c94:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   26c98:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26c9c:	e9c6 8878 	strd	r8, r8, [r6, #480]	; 0x1e0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26ca0:	e9c6 8876 	strd	r8, r8, [r6, #472]	; 0x1d8
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26ca4:	e9c6 8805 	strd	r8, r8, [r6, #20]
	hdr->ref = 0U;
   26ca8:	f886 8000 	strb.w	r8, [r6]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26cac:	61f6      	str	r6, [r6, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26cae:	f886 31d0 	strb.w	r3, [r6, #464]	; 0x1d0
		err = lll_clock_wait();
   26cb2:	f01a f9fb 	bl	410ac <lll_clock_wait>
		if (err) {
   26cb6:	2800      	cmp	r0, #0
   26cb8:	f43f ae58 	beq.w	2696c <ll_adv_enable+0xd4>
			conn_release(adv);
   26cbc:	f012 f89e 	bl	38dfc <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26cc0:	2503      	movs	r5, #3
   26cc2:	e627      	b.n	26914 <ll_adv_enable+0x7c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cc4:	2000      	movs	r0, #0
   26cc6:	4a20      	ldr	r2, [pc, #128]	; (26d48 <ll_adv_enable+0x4b0>)
   26cc8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 26d4c <ll_adv_enable+0x4b4>
   26ccc:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   26cce:	2602      	movs	r6, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cd0:	af0e      	add	r7, sp, #56	; 0x38
   26cd2:	9301      	str	r3, [sp, #4]
   26cd4:	9205      	str	r2, [sp, #20]
   26cd6:	2103      	movs	r1, #3
   26cd8:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26cdc:	9406      	str	r4, [sp, #24]
   26cde:	4643      	mov	r3, r8
   26ce0:	9000      	str	r0, [sp, #0]
   26ce2:	9708      	str	r7, [sp, #32]
   26ce4:	f8cd 901c 	str.w	r9, [sp, #28]
   26ce8:	4632      	mov	r2, r6
		ret_cb = TICKER_STATUS_BUSY;
   26cea:	960e      	str	r6, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cec:	f00e fe82 	bl	359f4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26cf0:	4639      	mov	r1, r7
   26cf2:	f011 fb03 	bl	382fc <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   26cf6:	2800      	cmp	r0, #0
   26cf8:	f47f aeb0 	bne.w	26a5c <ll_adv_enable+0x1c4>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cfc:	4a14      	ldr	r2, [pc, #80]	; (26d50 <ll_adv_enable+0x4b8>)
   26cfe:	9205      	str	r2, [sp, #20]
   26d00:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
   26d04:	9200      	str	r2, [sp, #0]
   26d06:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26d0a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26d0e:	f8cd 901c 	str.w	r9, [sp, #28]
   26d12:	9708      	str	r7, [sp, #32]
   26d14:	9406      	str	r4, [sp, #24]
   26d16:	4643      	mov	r3, r8
   26d18:	2201      	movs	r2, #1
   26d1a:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26d1c:	960e      	str	r6, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d1e:	f00e fe69 	bl	359f4 <ticker_start>
   26d22:	e689      	b.n	26a38 <ll_adv_enable+0x1a0>
			return BT_HCI_ERR_INVALID_PARAM;
   26d24:	2512      	movs	r5, #18
   26d26:	e5f5      	b.n	26914 <ll_adv_enable+0x7c>
			ll_rx_release(node_rx);
   26d28:	4658      	mov	r0, fp
   26d2a:	f011 fa43 	bl	381b4 <ll_rx_release>
			ll_rx_link_release(link);
   26d2e:	4650      	mov	r0, sl
   26d30:	f011 fa34 	bl	3819c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26d34:	2507      	movs	r5, #7
   26d36:	e5ed      	b.n	26914 <ll_adv_enable+0x7c>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26d38:	f106 006c 	add.w	r0, r6, #108	; 0x6c
   26d3c:	6770      	str	r0, [r6, #116]	; 0x74
   26d3e:	e6c3      	b.n	26ac8 <ll_adv_enable+0x230>
   26d40:	01480148 	.word	0x01480148
   26d44:	f6ff0000 	.word	0xf6ff0000
   26d48:	00039051 	.word	0x00039051
   26d4c:	000377e1 	.word	0x000377e1
   26d50:	00038b8d 	.word	0x00038b8d
   26d54:	00000000 	.word	0x00000000

00026d58 <ull_adv_time_update>:
{
   26d58:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26d5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26d5e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26d60:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26d64:	460d      	mov	r5, r1
   26d66:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d68:	2101      	movs	r1, #1
   26d6a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26d6e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26d70:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d74:	f00d fd64 	bl	34840 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26d78:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d7a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26d7c:	4628      	mov	r0, r5
   26d7e:	f012 f92f 	bl	38fe0 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d82:	491d      	ldr	r1, [pc, #116]	; (26df8 <ull_adv_time_update+0xa0>)
   26d84:	a31a      	add	r3, pc, #104	; (adr r3, 26df0 <ull_adv_time_update+0x98>)
   26d86:	e9d3 2300 	ldrd	r2, r3, [r3]
   26d8a:	fba0 0101 	umull	r0, r1, r0, r1
   26d8e:	f7ff f9b7 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26d92:	6923      	ldr	r3, [r4, #16]
   26d94:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d96:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26d98:	d220      	bcs.n	26ddc <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26d9a:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26d9c:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d9e:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26da0:	4a16      	ldr	r2, [pc, #88]	; (26dfc <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26da2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26da4:	4b16      	ldr	r3, [pc, #88]	; (26e00 <ull_adv_time_update+0xa8>)
   26da6:	1aa2      	subs	r2, r4, r2
   26da8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26dac:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26dae:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26db0:	2300      	movs	r3, #0
   26db2:	440a      	add	r2, r1
   26db4:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26db6:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26db8:	4912      	ldr	r1, [pc, #72]	; (26e04 <ull_adv_time_update+0xac>)
   26dba:	9105      	str	r1, [sp, #20]
   26dbc:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26dc0:	2103      	movs	r1, #3
   26dc2:	b2d2      	uxtb	r2, r2
   26dc4:	9606      	str	r6, [sp, #24]
   26dc6:	9300      	str	r3, [sp, #0]
   26dc8:	4618      	mov	r0, r3
   26dca:	f00e fe85 	bl	35ad8 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26dce:	4631      	mov	r1, r6
   26dd0:	f011 fa94 	bl	382fc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26dd4:	b948      	cbnz	r0, 26dea <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
   26dd6:	6125      	str	r5, [r4, #16]
}
   26dd8:	b00a      	add	sp, #40	; 0x28
   26dda:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26ddc:	d902      	bls.n	26de4 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26dde:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26de0:	2300      	movs	r3, #0
   26de2:	e7dc      	b.n	26d9e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
   26de4:	2000      	movs	r0, #0
}
   26de6:	b00a      	add	sp, #40	; 0x28
   26de8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26dea:	200c      	movs	r0, #12
}
   26dec:	b00a      	add	sp, #40	; 0x28
   26dee:	bd70      	pop	{r4, r5, r6, pc}
   26df0:	1afd498d 	.word	0x1afd498d
   26df4:	00000007 	.word	0x00000007
   26df8:	3b9aca00 	.word	0x3b9aca00
   26dfc:	20005b4c 	.word	0x20005b4c
   26e00:	88888889 	.word	0x88888889
   26e04:	000377e1 	.word	0x000377e1

00026e08 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
   26e08:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
   26e0a:	4c19      	ldr	r4, [pc, #100]	; (26e70 <ll_scan_params_set+0x68>)
{
   26e0c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
   26e10:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
   26e14:	f01c 0501 	ands.w	r5, ip, #1
   26e18:	d122      	bne.n	26e60 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
   26e1a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
   26e1e:	0140      	lsls	r0, r0, #5
   26e20:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
   26e24:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
   26e26:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   26e2a:	f00e 0e18 	and.w	lr, lr, #24
   26e2e:	f000 0020 	and.w	r0, r0, #32
   26e32:	ea40 000e 	orr.w	r0, r0, lr
   26e36:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   26e3a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e3c:	480d      	ldr	r0, [pc, #52]	; (26e74 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
   26e3e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e42:	fba2 0100 	umull	r0, r1, r2, r0
   26e46:	2391      	movs	r3, #145	; 0x91
   26e48:	fb03 1102 	mla	r1, r3, r2, r1
   26e4c:	a306      	add	r3, pc, #24	; (adr r3, 26e68 <ll_scan_params_set+0x60>)
   26e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
   26e52:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e56:	f7ff f953 	bl	26100 <__aeabi_uldivmod>
   26e5a:	6420      	str	r0, [r4, #64]	; 0x40
}
   26e5c:	4628      	mov	r0, r5
   26e5e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26e60:	250c      	movs	r5, #12
}
   26e62:	4628      	mov	r0, r5
   26e64:	bd38      	pop	{r3, r4, r5, pc}
   26e66:	bf00      	nop
   26e68:	1afd498d 	.word	0x1afd498d
   26e6c:	00000007 	.word	0x00000007
   26e70:	20005be8 	.word	0x20005be8
   26e74:	84e72a00 	.word	0x84e72a00

00026e78 <ull_scan_params_set>:
{
   26e78:	b510      	push	{r4, lr}
   26e7a:	f89d c008 	ldrb.w	ip, [sp, #8]
   26e7e:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
   26e80:	0149      	lsls	r1, r1, #5
   26e82:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   26e86:	f000 0018 	and.w	r0, r0, #24
   26e8a:	f001 0c20 	and.w	ip, r1, #32
   26e8e:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
   26e90:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
   26e92:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e96:	480c      	ldr	r0, [pc, #48]	; (26ec8 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
   26e98:	f021 0138 	bic.w	r1, r1, #56	; 0x38
   26e9c:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26ea0:	2291      	movs	r2, #145	; 0x91
   26ea2:	fba3 0100 	umull	r0, r1, r3, r0
   26ea6:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
   26eaa:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26eae:	a304      	add	r3, pc, #16	; (adr r3, 26ec0 <ull_scan_params_set+0x48>)
   26eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   26eb4:	f7ff f924 	bl	26100 <__aeabi_uldivmod>
   26eb8:	6260      	str	r0, [r4, #36]	; 0x24
}
   26eba:	bd10      	pop	{r4, pc}
   26ebc:	f3af 8000 	nop.w
   26ec0:	1afd498d 	.word	0x1afd498d
   26ec4:	00000007 	.word	0x00000007
   26ec8:	84e72a00 	.word	0x84e72a00
   26ecc:	00000000 	.word	0x00000000

00026ed0 <ull_scan_enable>:
{
   26ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26ed4:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26ed6:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
   26eda:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   26ede:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   26ee2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   26ee6:	f360 1386 	bfi	r3, r0, #6, #1
{
   26eea:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
   26eec:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26ef0:	f00e fee2 	bl	35cb8 <ll_addr_read>
	lll->chan = 0U;
   26ef4:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26ef8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   26efa:	484d      	ldr	r0, [pc, #308]	; (27030 <ull_scan_enable+0x160>)
   26efc:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
   26efe:	f002 0279 	and.w	r2, r2, #121	; 0x79
   26f02:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26f04:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
   26f08:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26f0c:	2291      	movs	r2, #145	; 0x91
   26f0e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26f12:	e9c4 5505 	strd	r5, r5, [r4, #20]
   26f16:	a344      	add	r3, pc, #272	; (adr r3, 27028 <ull_scan_enable+0x158>)
   26f18:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26f1c:	7025      	strb	r5, [r4, #0]
   26f1e:	f7ff f8ef 	bl	26100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
   26f22:	2331      	movs	r3, #49	; 0x31
   26f24:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
   26f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
   26f2a:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
   26f2c:	3309      	adds	r3, #9
	    (ticks_interval -
   26f2e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
   26f32:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
   26f34:	bf32      	itee	cc
   26f36:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
   26f38:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
   26f3a:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26f3c:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
   26f3e:	f00e fe83 	bl	35c48 <ticker_ticks_now_get>
	if (!lll->conn) {
   26f42:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
   26f44:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26f46:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
   26f4a:	2b00      	cmp	r3, #0
   26f4c:	d04c      	beq.n	26fe8 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26f4e:	4d39      	ldr	r5, [pc, #228]	; (27034 <ull_scan_enable+0x164>)
   26f50:	4b39      	ldr	r3, [pc, #228]	; (27038 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f52:	f8cd 8020 	str.w	r8, [sp, #32]
   26f56:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26f58:	1b65      	subs	r5, r4, r5
   26f5a:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f5e:	4834      	ldr	r0, [pc, #208]	; (27030 <ull_scan_enable+0x160>)
   26f60:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f62:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f66:	fba3 0100 	umull	r0, r1, r3, r0
   26f6a:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f6c:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f70:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f74:	6923      	ldr	r3, [r4, #16]
   26f76:	9304      	str	r3, [sp, #16]
   26f78:	4b30      	ldr	r3, [pc, #192]	; (2703c <ull_scan_enable+0x16c>)
   26f7a:	9307      	str	r3, [sp, #28]
   26f7c:	4b30      	ldr	r3, [pc, #192]	; (27040 <ull_scan_enable+0x170>)
   26f7e:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
   26f80:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f84:	a328      	add	r3, pc, #160	; (adr r3, 27028 <ull_scan_enable+0x158>)
   26f86:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
   26f8a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f8e:	f7ff f8b7 	bl	26100 <__aeabi_uldivmod>
   26f92:	4610      	mov	r0, r2
   26f94:	4619      	mov	r1, r3
   26f96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26f9a:	2300      	movs	r3, #0
   26f9c:	f7ff f8b0 	bl	26100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26fa0:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fa2:	3504      	adds	r5, #4
   26fa4:	b2ed      	uxtb	r5, r5
   26fa6:	462a      	mov	r2, r5
   26fa8:	e9cd 6001 	strd	r6, r0, [sp, #4]
   26fac:	463b      	mov	r3, r7
   26fae:	2103      	movs	r1, #3
   26fb0:	f8cd a000 	str.w	sl, [sp]
   26fb4:	4650      	mov	r0, sl
   26fb6:	f00e fd1d 	bl	359f4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26fba:	4641      	mov	r1, r8
   26fbc:	f011 f99e 	bl	382fc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26fc0:	4605      	mov	r5, r0
   26fc2:	b968      	cbnz	r0, 26fe0 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
   26fc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   26fc8:	f043 0301 	orr.w	r3, r3, #1
   26fcc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   26fd0:	f012 fa20 	bl	39414 <ull_adv_is_enabled_get>
   26fd4:	4604      	mov	r4, r0
   26fd6:	b1f8      	cbz	r0, 27018 <ull_scan_enable+0x148>
	return 0;
   26fd8:	4628      	mov	r0, r5
}
   26fda:	b00c      	add	sp, #48	; 0x30
   26fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26fe0:	200c      	movs	r0, #12
}
   26fe2:	b00c      	add	sp, #48	; 0x30
   26fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
   26fe8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26fec:	6921      	ldr	r1, [r4, #16]
   26fee:	4643      	mov	r3, r8
   26ff0:	aa0a      	add	r2, sp, #40	; 0x28
   26ff2:	2003      	movs	r0, #3
   26ff4:	f001 f9e0 	bl	283b8 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
   26ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26ffa:	2900      	cmp	r1, #0
   26ffc:	d0a7      	beq.n	26f4e <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26ffe:	4811      	ldr	r0, [pc, #68]	; (27044 <ull_scan_enable+0x174>)
   27000:	a309      	add	r3, pc, #36	; (adr r3, 27028 <ull_scan_enable+0x158>)
   27002:	e9d3 2300 	ldrd	r2, r3, [r3]
   27006:	fba1 0100 	umull	r0, r1, r1, r0
   2700a:	f7ff f879 	bl	26100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
   2700e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
   27010:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
   27014:	4407      	add	r7, r0
   27016:	e79a      	b.n	26f4e <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
   27018:	4648      	mov	r0, r9
   2701a:	f018 fe65 	bl	3fce8 <ull_filter_adv_scan_state_cb>
	return 0;
   2701e:	4620      	mov	r0, r4
}
   27020:	b00c      	add	sp, #48	; 0x30
   27022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27026:	bf00      	nop
   27028:	1afd498d 	.word	0x1afd498d
   2702c:	00000007 	.word	0x00000007
   27030:	84e72a00 	.word	0x84e72a00
   27034:	20005be8 	.word	0x20005be8
   27038:	38e38e39 	.word	0x38e38e39
   2703c:	000377e1 	.word	0x000377e1
   27040:	00039639 	.word	0x00039639
   27044:	3b9aca00 	.word	0x3b9aca00

00027048 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   27048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   2704c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   2704e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
   27050:	441d      	add	r5, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   27052:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   27056:	b2ad      	uxth	r5, r5
   27058:	4429      	add	r1, r5
{
   2705a:	4616      	mov	r6, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   2705c:	f013 0207 	ands.w	r2, r3, #7
{
   27060:	b08b      	sub	sp, #44	; 0x2c
   27062:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   27064:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   27066:	d00a      	beq.n	2707e <event_conn_upd_prep+0x36>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
   27068:	1e53      	subs	r3, r2, #1
   2706a:	2b04      	cmp	r3, #4
   2706c:	f200 8370 	bhi.w	27750 <event_conn_upd_prep+0x708>
   27070:	e8df f013 	tbh	[pc, r3, lsl #1]
   27074:	023701c6 	.word	0x023701c6
   27078:	015001a1 	.word	0x015001a1
   2707c:	023a      	.short	0x023a
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   2707e:	f8b0 70f4 	ldrh.w	r7, [r0, #244]	; 0xf4
   27082:	1bc9      	subs	r1, r1, r7
   27084:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   27088:	0409      	lsls	r1, r1, #16
   2708a:	f100 816e 	bmi.w	2736a <event_conn_upd_prep+0x322>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   2708e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   27092:	2b00      	cmp	r3, #0
   27094:	f2c0 826a 	blt.w	2756c <event_conn_upd_prep+0x524>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   27098:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   2709c:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   270a0:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   270a4:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
		conn->llcp_cu.ack = conn->llcp_cu.req;
   270a8:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   270ac:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   270b0:	4293      	cmp	r3, r2
   270b2:	d00a      	beq.n	270ca <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   270b4:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   270b8:	f003 030f 	and.w	r3, r3, #15
   270bc:	2b06      	cmp	r3, #6
   270be:	d104      	bne.n	270ca <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
   270c0:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   270c2:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->procedure_expire = 0U;
   270c6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
   270ca:	4bbf      	ldr	r3, [pc, #764]	; (273c8 <event_conn_upd_prep+0x380>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   270cc:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
	if (conn == conn_upd_curr) {
   270d0:	681a      	ldr	r2, [r3, #0]
   270d2:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   270d4:	bf04      	itt	eq
   270d6:	2200      	moveq	r2, #0
   270d8:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   270da:	f1b9 0f00 	cmp.w	r9, #0
   270de:	f000 815a 	beq.w	27396 <event_conn_upd_prep+0x34e>
   270e2:	f8d9 0000 	ldr.w	r0, [r9]
   270e6:	2800      	cmp	r0, #0
   270e8:	f000 8155 	beq.w	27396 <event_conn_upd_prep+0x34e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   270ec:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   270f0:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   270f4:	6842      	ldr	r2, [r0, #4]
   270f6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   270fa:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
   270fc:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   27100:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
		if ((conn->llcp_cu.interval != lll->interval) ||
   27104:	f000 823a 	beq.w	2757c <event_conn_upd_prep+0x534>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   27108:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   2710c:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   27110:	2318      	movs	r3, #24
   27112:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
   27116:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
   27118:	f8a9 c006 	strh.w	ip, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
   2711c:	f8a9 2020 	strh.w	r2, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
   27120:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			cu->status = 0x00;
   27124:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   27128:	4649      	mov	r1, r9
   2712a:	f011 f849 	bl	381c0 <ll_rx_put>
		ll_rx_sched();
   2712e:	f011 f851 	bl	381d4 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   27132:	68a3      	ldr	r3, [r4, #8]
   27134:	2b00      	cmp	r3, #0
   27136:	da09      	bge.n	2714c <event_conn_upd_prep+0x104>
			uint32_t ticks_prepare_to_start =
   27138:	68e1      	ldr	r1, [r4, #12]
   2713a:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   2713c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   27140:	4291      	cmp	r1, r2
   27142:	bf2c      	ite	cs
   27144:	1876      	addcs	r6, r6, r1
   27146:	18b6      	addcc	r6, r6, r2
   27148:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   2714a:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   2714c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   2714e:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
		conn_interval_old = instant_latency * lll->interval;
   27152:	fb10 f008 	smulbb	r0, r0, r8
   27156:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   27158:	fbb0 f1f9 	udiv	r1, r0, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
   2715c:	fb19 f301 	smulbb	r3, r9, r1
   27160:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
   27162:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
   27164:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
   27168:	f080 8104 	bcs.w	27374 <event_conn_upd_prep+0x32c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   2716c:	1a1b      	subs	r3, r3, r0
   2716e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   27172:	4896      	ldr	r0, [pc, #600]	; (273cc <event_conn_upd_prep+0x384>)
   27174:	fb03 f101 	mul.w	r1, r3, r1
   27178:	fba1 0100 	umull	r0, r1, r1, r0
   2717c:	a390      	add	r3, pc, #576	; (adr r3, 273c0 <event_conn_upd_prep+0x378>)
   2717e:	e9d3 2300 	ldrd	r2, r3, [r3]
   27182:	f7fe ffbd 	bl	26100 <__aeabi_uldivmod>
   27186:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2718a:	4406      	add	r6, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   2718c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   2718e:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   27190:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   27194:	1b7d      	subs	r5, r7, r5
   27196:	4455      	add	r5, sl
		conn_interval_us = conn->llcp_cu.interval *
   27198:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
   2719c:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
   2719e:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
   271a0:	fb0b f709 	mul.w	r7, fp, r9
		} else if (lll->role) {
   271a4:	f2c0 820c 	blt.w	275c0 <event_conn_upd_prep+0x578>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   271a8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   271ac:	4887      	ldr	r0, [pc, #540]	; (273cc <event_conn_upd_prep+0x384>)
   271ae:	a384      	add	r3, pc, #528	; (adr r3, 273c0 <event_conn_upd_prep+0x378>)
   271b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   271b4:	fba1 0100 	umull	r0, r1, r1, r0
   271b8:	f7fe ffa2 	bl	26100 <__aeabi_uldivmod>
   271bc:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
   271c0:	463d      	mov	r5, r7

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
   271c2:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   271c6:	4a82      	ldr	r2, [pc, #520]	; (273d0 <event_conn_upd_prep+0x388>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   271c8:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
		lll->latency = conn->llcp_cu.latency;
   271cc:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   271d0:	4980      	ldr	r1, [pc, #512]	; (273d4 <event_conn_upd_prep+0x38c>)
		lll->interval = conn->llcp_cu.interval;
   271d2:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   271d6:	443a      	add	r2, r7
   271d8:	fbb2 f2f7 	udiv	r2, r2, r7
   271dc:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   271e0:	f242 7210 	movw	r2, #10000	; 0x2710
   271e4:	fb02 7303 	mla	r3, r2, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   271e8:	4439      	add	r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   271ea:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   271ec:	fbb1 f1f7 	udiv	r1, r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   271f0:	fbb3 f7f7 	udiv	r7, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   271f4:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   271f6:	1d83      	adds	r3, r0, #6
   271f8:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
   271fa:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   271fc:	f8a4 70c2 	strh.w	r7, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27200:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27204:	dd04      	ble.n	27210 <event_conn_upd_prep+0x1c8>
   27206:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   2720a:	33fa      	adds	r3, #250	; 0xfa
   2720c:	441a      	add	r2, r3
   2720e:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   27210:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27214:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   27218:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   2721a:	bf44      	itt	mi
   2721c:	2300      	movmi	r3, #0
   2721e:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   27222:	2102      	movs	r1, #2
   27224:	2001      	movs	r0, #1
   27226:	f01c fc89 	bl	43b3c <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   2722a:	2200      	movs	r2, #0
   2722c:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   2722e:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   27230:	2001      	movs	r0, #1
   27232:	f00d f9d5 	bl	345e0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   27236:	4968      	ldr	r1, [pc, #416]	; (273d8 <event_conn_upd_prep+0x390>)
   27238:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   2723c:	4620      	mov	r0, r4
   2723e:	f00d f95f 	bl	34500 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27242:	f100 0a05 	add.w	sl, r0, #5
   27246:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2724a:	4b64      	ldr	r3, [pc, #400]	; (273dc <event_conn_upd_prep+0x394>)
   2724c:	9400      	str	r4, [sp, #0]
   2724e:	4652      	mov	r2, sl
   27250:	2101      	movs	r1, #1
   27252:	2000      	movs	r0, #0
   27254:	f00e fc58 	bl	35b08 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27258:	f030 0302 	bics.w	r3, r0, #2
   2725c:	d00c      	beq.n	27278 <event_conn_upd_prep+0x230>
   2725e:	4a60      	ldr	r2, [pc, #384]	; (273e0 <event_conn_upd_prep+0x398>)
   27260:	4960      	ldr	r1, [pc, #384]	; (273e4 <event_conn_upd_prep+0x39c>)
   27262:	4861      	ldr	r0, [pc, #388]	; (273e8 <event_conn_upd_prep+0x3a0>)
   27264:	f640 43cb 	movw	r3, #3275	; 0xccb
   27268:	f023 f91d 	bl	4a4a6 <printk>
   2726c:	4040      	eors	r0, r0
   2726e:	f380 8811 	msr	BASEPRI, r0
   27272:	f04f 0003 	mov.w	r0, #3
   27276:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   27278:	4f54      	ldr	r7, [pc, #336]	; (273cc <event_conn_upd_prep+0x384>)
   2727a:	fba5 7b07 	umull	r7, fp, r5, r7
   2727e:	a350      	add	r3, pc, #320	; (adr r3, 273c0 <event_conn_upd_prep+0x378>)
   27280:	e9d3 2300 	ldrd	r2, r3, [r3]
   27284:	4638      	mov	r0, r7
   27286:	4659      	mov	r1, fp
   27288:	f7fe ff3a 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   2728c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   27290:	4856      	ldr	r0, [pc, #344]	; (273ec <event_conn_upd_prep+0x3a4>)
   27292:	2307      	movs	r3, #7
   27294:	fba5 0100 	umull	r0, r1, r5, r0
   27298:	1a38      	subs	r0, r7, r0
   2729a:	fb03 1105 	mla	r1, r3, r5, r1
   2729e:	eb6b 0101 	sbc.w	r1, fp, r1
   272a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   272a6:	2300      	movs	r3, #0
   272a8:	f7fe ff2a 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   272ac:	e9cd 5001 	strd	r5, r0, [sp, #4]
   272b0:	9408      	str	r4, [sp, #32]
   272b2:	9406      	str	r4, [sp, #24]
   272b4:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
   272b8:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   272ba:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
   272be:	484c      	ldr	r0, [pc, #304]	; (273f0 <event_conn_upd_prep+0x3a8>)
   272c0:	9104      	str	r1, [sp, #16]
   272c2:	494c      	ldr	r1, [pc, #304]	; (273f4 <event_conn_upd_prep+0x3ac>)
   272c4:	4c4c      	ldr	r4, [pc, #304]	; (273f8 <event_conn_upd_prep+0x3b0>)
   272c6:	9407      	str	r4, [sp, #28]
   272c8:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   272cc:	bf38      	it	cc
   272ce:	4601      	movcc	r1, r0
   272d0:	9105      	str	r1, [sp, #20]
   272d2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   272d6:	4633      	mov	r3, r6
   272d8:	9103      	str	r1, [sp, #12]
   272da:	4652      	mov	r2, sl
   272dc:	2101      	movs	r1, #1
   272de:	2000      	movs	r0, #0
   272e0:	f00e fb88 	bl	359f4 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   272e4:	f030 0302 	bics.w	r3, r0, #2
   272e8:	d00c      	beq.n	27304 <event_conn_upd_prep+0x2bc>
   272ea:	4a3d      	ldr	r2, [pc, #244]	; (273e0 <event_conn_upd_prep+0x398>)
   272ec:	493d      	ldr	r1, [pc, #244]	; (273e4 <event_conn_upd_prep+0x39c>)
   272ee:	483e      	ldr	r0, [pc, #248]	; (273e8 <event_conn_upd_prep+0x3a0>)
   272f0:	f640 43e5 	movw	r3, #3301	; 0xce5
   272f4:	f023 f8d7 	bl	4a4a6 <printk>
   272f8:	4040      	eors	r0, r0
   272fa:	f380 8811 	msr	BASEPRI, r0
   272fe:	f04f 0003 	mov.w	r0, #3
   27302:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   27304:	f1b9 0f00 	cmp.w	r9, #0
   27308:	f040 8154 	bne.w	275b4 <event_conn_upd_prep+0x56c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   2730c:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   2730e:	b00b      	add	sp, #44	; 0x2c
   27310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						      conn->lll.latency + 6;
   27314:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   27316:	f890 511a 	ldrb.w	r5, [r0, #282]	; 0x11a
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   2731a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
						      conn->lll.latency + 6;
   2731e:	3206      	adds	r2, #6
   27320:	4411      	add	r1, r2
	    conn->tx_head &&
   27322:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
						      conn->lll.latency + 6;
   27326:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   27328:	f36f 0502 	bfc	r5, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
   2732c:	f8a0 10f4 	strh.w	r1, [r0, #244]	; 0xf4
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   27330:	8119      	strh	r1, [r3, #8]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27332:	f1a3 0009 	sub.w	r0, r3, #9
		if (!conn->tx_ctrl) {
   27336:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2733a:	f884 511a 	strb.w	r5, [r4, #282]	; 0x11a
	if (
   2733e:	b122      	cbz	r2, 2734a <event_conn_upd_prep+0x302>
	    !conn->llcp_enc.pause_tx &&
   27340:	f894 5176 	ldrb.w	r5, [r4, #374]	; 0x176
	    conn->tx_head &&
   27344:	07ae      	lsls	r6, r5, #30
   27346:	f140 8189 	bpl.w	2765c <event_conn_upd_prep+0x614>
		if (!conn->tx_ctrl) {
   2734a:	2900      	cmp	r1, #0
   2734c:	f000 819d 	beq.w	2768a <event_conn_upd_prep+0x642>
	tx->next = conn->tx_ctrl_last->next;
   27350:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   27354:	6811      	ldr	r1, [r2, #0]
   27356:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   2735a:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   2735c:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
   27360:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27364:	2a00      	cmp	r2, #0
   27366:	f000 818d 	beq.w	27684 <event_conn_upd_prep+0x63c>
			return -EINPROGRESS;
   2736a:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   2736e:	b00b      	add	sp, #44	; 0x2c
   27370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27374:	fb09 0111 	mls	r1, r9, r1, r0
   27378:	f240 43e2 	movw	r3, #1250	; 0x4e2
   2737c:	4813      	ldr	r0, [pc, #76]	; (273cc <event_conn_upd_prep+0x384>)
   2737e:	b289      	uxth	r1, r1
   27380:	fb03 f101 	mul.w	r1, r3, r1
   27384:	fba1 0100 	umull	r0, r1, r1, r0
   27388:	a30d      	add	r3, pc, #52	; (adr r3, 273c0 <event_conn_upd_prep+0x378>)
   2738a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2738e:	f7fe feb7 	bl	26100 <__aeabi_uldivmod>
   27392:	1a36      	subs	r6, r6, r0
   27394:	e6fa      	b.n	2718c <event_conn_upd_prep+0x144>
		LL_ASSERT(rx && rx->hdr.link);
   27396:	4a12      	ldr	r2, [pc, #72]	; (273e0 <event_conn_upd_prep+0x398>)
   27398:	4918      	ldr	r1, [pc, #96]	; (273fc <event_conn_upd_prep+0x3b4>)
   2739a:	4813      	ldr	r0, [pc, #76]	; (273e8 <event_conn_upd_prep+0x3a0>)
   2739c:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   273a0:	f023 f881 	bl	4a4a6 <printk>
   273a4:	4040      	eors	r0, r0
   273a6:	f380 8811 	msr	BASEPRI, r0
   273aa:	f04f 0003 	mov.w	r0, #3
   273ae:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   273b0:	f8d9 0000 	ldr.w	r0, [r9]
   273b4:	e69a      	b.n	270ec <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
   273b6:	f06f 000f 	mvn.w	r0, #15
}
   273ba:	b00b      	add	sp, #44	; 0x2c
   273bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273c0:	1afd498d 	.word	0x1afd498d
   273c4:	00000007 	.word	0x00000007
   273c8:	20005c44 	.word	0x20005c44
   273cc:	3b9aca00 	.word	0x3b9aca00
   273d0:	026259ff 	.word	0x026259ff
   273d4:	01c9c37f 	.word	0x01c9c37f
   273d8:	20003578 	.word	0x20003578
   273dc:	00039d25 	.word	0x00039d25
   273e0:	0005563c 	.word	0x0005563c
   273e4:	0005571c 	.word	0x0005571c
   273e8:	0005512c 	.word	0x0005512c
   273ec:	1afd498d 	.word	0x1afd498d
   273f0:	0003eb2d 	.word	0x0003eb2d
   273f4:	0003e93d 	.word	0x0003e93d
   273f8:	00039ccd 	.word	0x00039ccd
   273fc:	00055708 	.word	0x00055708
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
   27400:	f8df 8314 	ldr.w	r8, [pc, #788]	; 27718 <event_conn_upd_prep+0x6d0>
		rx = ll_pdu_rx_alloc_peek(1);
   27404:	2001      	movs	r0, #1
   27406:	f010 feeb 	bl	381e0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   2740a:	4607      	mov	r7, r0
   2740c:	2800      	cmp	r0, #0
   2740e:	f000 814d 	beq.w	276ac <event_conn_upd_prep+0x664>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   27412:	48c2      	ldr	r0, [pc, #776]	; (2771c <event_conn_upd_prep+0x6d4>)
   27414:	f00d f83e 	bl	34494 <mem_acquire>
		if (!tx) {
   27418:	4605      	mov	r5, r0
   2741a:	2800      	cmp	r0, #0
   2741c:	f000 8146 	beq.w	276ac <event_conn_upd_prep+0x664>
	if (!conn_upd_curr) {
   27420:	4bbf      	ldr	r3, [pc, #764]	; (27720 <event_conn_upd_prep+0x6d8>)
   27422:	681a      	ldr	r2, [r3, #0]
   27424:	2a00      	cmp	r2, #0
   27426:	f000 8117 	beq.w	27658 <event_conn_upd_prep+0x610>
		(void)ll_pdu_rx_alloc();
   2742a:	f010 fef7 	bl	3821c <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
   2742e:	683b      	ldr	r3, [r7, #0]
   27430:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   27434:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27436:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
   27438:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2743c:	f043 0303 	orr.w	r3, r3, #3
   27440:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   27442:	230c      	movs	r3, #12
   27444:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   27446:	2300      	movs	r3, #0
   27448:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   2744a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   2744e:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   27450:	4ab4      	ldr	r2, [pc, #720]	; (27724 <event_conn_upd_prep+0x6dc>)
   27452:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   27456:	fba2 2303 	umull	r2, r3, r2, r3
   2745a:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   2745c:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   27460:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   27464:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   27468:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   2746c:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   27470:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   27474:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   27478:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   2747c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   27480:	2203      	movs	r2, #3
   27482:	f362 0302 	bfi	r3, r2, #0, #3
   27486:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   2748a:	68a3      	ldr	r3, [r4, #8]
   2748c:	2b00      	cmp	r3, #0
   2748e:	da0a      	bge.n	274a6 <event_conn_upd_prep+0x45e>
			uint32_t ticks_prepare_to_start =
   27490:	68e1      	ldr	r1, [r4, #12]
   27492:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   27494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   27498:	4291      	cmp	r1, r2
   2749a:	bf2c      	ite	cs
   2749c:	1876      	addcs	r6, r6, r1
   2749e:	18b6      	addcc	r6, r6, r2
   274a0:	1af3      	subs	r3, r6, r3
   274a2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		mfy_sched_offset->fp = fp_mfy_select_or_use;
   274a6:	4ba0      	ldr	r3, [pc, #640]	; (27728 <event_conn_upd_prep+0x6e0>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   274a8:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
   274aa:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
   274ac:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   274b0:	2102      	movs	r1, #2
   274b2:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
   274b4:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   274b8:	f00d f8c4 	bl	34644 <mayfly_enqueue>
		LL_ASSERT(!retval);
   274bc:	2800      	cmp	r0, #0
   274be:	f43f af54 	beq.w	2736a <event_conn_upd_prep+0x322>
   274c2:	4a9a      	ldr	r2, [pc, #616]	; (2772c <event_conn_upd_prep+0x6e4>)
   274c4:	499a      	ldr	r1, [pc, #616]	; (27730 <event_conn_upd_prep+0x6e8>)
   274c6:	489b      	ldr	r0, [pc, #620]	; (27734 <event_conn_upd_prep+0x6ec>)
   274c8:	f640 3373 	movw	r3, #2931	; 0xb73
   274cc:	f022 ffeb 	bl	4a4a6 <printk>
   274d0:	4040      	eors	r0, r0
   274d2:	f380 8811 	msr	BASEPRI, r0
   274d6:	f04f 0003 	mov.w	r0, #3
   274da:	df02      	svc	2
	return -EINPROGRESS;
   274dc:	f06f 0076 	mvn.w	r0, #118	; 0x76
   274e0:	e715      	b.n	2730e <event_conn_upd_prep+0x2c6>
		switch (conn->llcp_cu.state) {
   274e2:	f8df 8254 	ldr.w	r8, [pc, #596]	; 27738 <event_conn_upd_prep+0x6f0>
   274e6:	e78d      	b.n	27404 <event_conn_upd_prep+0x3bc>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   274e8:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
	    conn->tx_head &&
   274ec:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
			conn->llcp_ack = conn->llcp_req;
   274f0:	f890 00f0 	ldrb.w	r0, [r0, #240]	; 0xf0
   274f4:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
			conn->llcp_cu.ack = conn->llcp_cu.req;
   274f8:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
	conn_upd_curr = NULL;
   274fc:	4988      	ldr	r1, [pc, #544]	; (27720 <event_conn_upd_prep+0x6d8>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
   274fe:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27502:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   27506:	f884 0195 	strb.w	r0, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   2750a:	2000      	movs	r0, #0
   2750c:	6008      	str	r0, [r1, #0]
		if (!conn->tx_ctrl) {
   2750e:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27512:	f1a2 0109 	sub.w	r1, r2, #9
	if (
   27516:	b1b3      	cbz	r3, 27546 <event_conn_upd_prep+0x4fe>
	    !conn->llcp_enc.pause_tx &&
   27518:	f894 5176 	ldrb.w	r5, [r4, #374]	; 0x176
	    conn->tx_head &&
   2751c:	07ad      	lsls	r5, r5, #30
   2751e:	d412      	bmi.n	27546 <event_conn_upd_prep+0x4fe>
	    !conn->llcp_phy.pause_tx &&
   27520:	f894 51cf 	ldrb.w	r5, [r4, #463]	; 0x1cf
   27524:	07ef      	lsls	r7, r5, #31
   27526:	d40e      	bmi.n	27546 <event_conn_upd_prep+0x4fe>
		if (conn->tx_head == conn->tx_data) {
   27528:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   2752c:	42ab      	cmp	r3, r5
   2752e:	f000 80d7 	beq.w	276e0 <event_conn_upd_prep+0x698>
		} else if (!conn->tx_ctrl) {
   27532:	b958      	cbnz	r0, 2754c <event_conn_upd_prep+0x504>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27534:	7918      	ldrb	r0, [r3, #4]
   27536:	f000 0003 	and.w	r0, r0, #3
   2753a:	2803      	cmp	r0, #3
   2753c:	f000 80df 	beq.w	276fe <event_conn_upd_prep+0x6b6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27540:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   27544:	e004      	b.n	27550 <event_conn_upd_prep+0x508>
		if (!conn->tx_ctrl) {
   27546:	2800      	cmp	r0, #0
   27548:	f000 80a9 	beq.w	2769e <event_conn_upd_prep+0x656>
	tx->next = conn->tx_ctrl_last->next;
   2754c:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   27550:	6818      	ldr	r0, [r3, #0]
   27552:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
   27556:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
   27558:	f852 3c09 	ldr.w	r3, [r2, #-9]
	conn->tx_ctrl_last = tx;
   2755c:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27560:	2b00      	cmp	r3, #0
   27562:	f000 80a6 	beq.w	276b2 <event_conn_upd_prep+0x66a>
			return -ECANCELED;
   27566:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2756a:	e6d0      	b.n	2730e <event_conn_upd_prep+0x2c6>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   2756c:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   27570:	2b00      	cmp	r3, #0
   27572:	f43f ad91 	beq.w	27098 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
   27576:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   2757a:	e591      	b.n	270a0 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
   2757c:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   27580:	4594      	cmp	ip, r2
   27582:	f47f adc1 	bne.w	27108 <event_conn_upd_prep+0xc0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   27586:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   2758a:	fb0c fe03 	mul.w	lr, ip, r3
   2758e:	f242 7c10 	movw	ip, #10000	; 0x2710
   27592:	fb0c ec01 	mla	ip, ip, r1, lr
   27596:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   2759a:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
   2759e:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
   275a2:	fa1f fc8c 	uxth.w	ip, ip
   275a6:	45e6      	cmp	lr, ip
   275a8:	f47f adae 	bne.w	27108 <event_conn_upd_prep+0xc0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   275ac:	2301      	movs	r3, #1
   275ae:	f889 3004 	strb.w	r3, [r9, #4]
   275b2:	e5b9      	b.n	27128 <event_conn_upd_prep+0xe0>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   275b4:	2201      	movs	r2, #1
   275b6:	2102      	movs	r1, #2
   275b8:	4610      	mov	r0, r2
   275ba:	f00d f811 	bl	345e0 <mayfly_enable>
   275be:	e6a5      	b.n	2730c <event_conn_upd_prep+0x2c4>
				lll->periph.window_widening_periodic_us *
   275c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   275c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   275c4:	fb02 3318 	mls	r3, r2, r8, r3
   275c8:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   275ca:	f019 fdc3 	bl	41154 <lll_clock_ppm_local_get>
   275ce:	4605      	mov	r5, r0
   275d0:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   275d4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2773c <event_conn_upd_prep+0x6f4>
				ceiling_fraction(((lll_clock_ppm_local_get() +
   275d8:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   275dc:	f019 fdbc 	bl	41158 <lll_clock_ppm_get>
   275e0:	4405      	add	r5, r0
   275e2:	fb07 f505 	mul.w	r5, r7, r5
   275e6:	4b56      	ldr	r3, [pc, #344]	; (27740 <event_conn_upd_prep+0x6f8>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   275e8:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
				ceiling_fraction(((lll_clock_ppm_local_get() +
   275ec:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   275f0:	f205 253f 	addw	r5, r5, #575	; 0x23f
   275f4:	fba3 3505 	umull	r3, r5, r3, r5
   275f8:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
   275fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
   275fc:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   275fe:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
   27602:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
   27606:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27608:	087a      	lsrs	r2, r7, #1
			lll->periph.window_widening_prepare_us +=
   2760a:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   2760c:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
   2760e:	4293      	cmp	r3, r2
   27610:	bf28      	it	cs
   27612:	4613      	movcs	r3, r2
   27614:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   27618:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2761a:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
   2761e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27622:	a33b      	add	r3, pc, #236	; (adr r3, 27710 <event_conn_upd_prep+0x6c8>)
   27624:	e9d3 2300 	ldrd	r2, r3, [r3]
   27628:	f7fe fd6a 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2762c:	4b3d      	ldr	r3, [pc, #244]	; (27724 <event_conn_upd_prep+0x6dc>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2762e:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   27630:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   27634:	fba3 3000 	umull	r3, r0, r3, r0
   27638:	0a80      	lsrs	r0, r0, #10
   2763a:	fb0b f000 	mul.w	r0, fp, r0
   2763e:	fba0 0108 	umull	r0, r1, r0, r8
   27642:	a333      	add	r3, pc, #204	; (adr r3, 27710 <event_conn_upd_prep+0x6c8>)
   27644:	e9d3 2300 	ldrd	r2, r3, [r3]
   27648:	f7fe fd5a 	bl	26100 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
   2764c:	1b7d      	subs	r5, r7, r5
		lll->interval = conn->llcp_cu.interval;
   2764e:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   27652:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   27656:	e5b6      	b.n	271c6 <event_conn_upd_prep+0x17e>
		conn_upd_curr = conn;
   27658:	601c      	str	r4, [r3, #0]
   2765a:	e6e6      	b.n	2742a <event_conn_upd_prep+0x3e2>
	    !conn->llcp_phy.pause_tx &&
   2765c:	f894 51cf 	ldrb.w	r5, [r4, #463]	; 0x1cf
   27660:	07ed      	lsls	r5, r5, #31
   27662:	f53f ae72 	bmi.w	2734a <event_conn_upd_prep+0x302>
		if (conn->tx_head == conn->tx_data) {
   27666:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   2766a:	42aa      	cmp	r2, r5
   2766c:	d026      	beq.n	276bc <event_conn_upd_prep+0x674>
		} else if (!conn->tx_ctrl) {
   2766e:	2900      	cmp	r1, #0
   27670:	f47f ae6e 	bne.w	27350 <event_conn_upd_prep+0x308>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27674:	7911      	ldrb	r1, [r2, #4]
   27676:	f001 0103 	and.w	r1, r1, #3
   2767a:	2903      	cmp	r1, #3
   2767c:	d062      	beq.n	27744 <event_conn_upd_prep+0x6fc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   2767e:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   27682:	e667      	b.n	27354 <event_conn_upd_prep+0x30c>
		conn->tx_data_last = tx;
   27684:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   27688:	e66f      	b.n	2736a <event_conn_upd_prep+0x322>
			tx->next = conn->tx_head;
   2768a:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
   2768e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27692:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27696:	2a00      	cmp	r2, #0
   27698:	f47f ae67 	bne.w	2736a <event_conn_upd_prep+0x322>
   2769c:	e7f2      	b.n	27684 <event_conn_upd_prep+0x63c>
			tx->next = conn->tx_head;
   2769e:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
   276a2:	e9c4 1175 	strd	r1, r1, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   276a6:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
   276aa:	e759      	b.n	27560 <event_conn_upd_prep+0x518>
			return -ENOBUFS;
   276ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   276b0:	e62d      	b.n	2730e <event_conn_upd_prep+0x2c6>
		conn->tx_data_last = tx;
   276b2:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
			return -ECANCELED;
   276b6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   276ba:	e628      	b.n	2730e <event_conn_upd_prep+0x2c6>
			conn->tx_data = conn->tx_data->next;
   276bc:	6815      	ldr	r5, [r2, #0]
   276be:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   276c2:	2900      	cmp	r1, #0
   276c4:	f47f ae44 	bne.w	27350 <event_conn_upd_prep+0x308>
			tx->next = conn->tx_head->next;
   276c8:	6811      	ldr	r1, [r2, #0]
   276ca:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
   276ce:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   276d0:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
   276d4:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   276d8:	2a00      	cmp	r2, #0
   276da:	f47f ae46 	bne.w	2736a <event_conn_upd_prep+0x322>
   276de:	e7d1      	b.n	27684 <event_conn_upd_prep+0x63c>
			conn->tx_data = conn->tx_data->next;
   276e0:	681d      	ldr	r5, [r3, #0]
   276e2:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   276e6:	2800      	cmp	r0, #0
   276e8:	f47f af30 	bne.w	2754c <event_conn_upd_prep+0x504>
			tx->next = conn->tx_head->next;
   276ec:	6818      	ldr	r0, [r3, #0]
   276ee:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
   276f2:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
   276f4:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
   276f8:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
   276fc:	e730      	b.n	27560 <event_conn_upd_prep+0x518>
	    ((pdu_data_tx->llctrl.opcode !=
   276fe:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27700:	2803      	cmp	r0, #3
   27702:	d0f3      	beq.n	276ec <event_conn_upd_prep+0x6a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   27704:	280a      	cmp	r0, #10
   27706:	f47f af1b 	bne.w	27540 <event_conn_upd_prep+0x4f8>
   2770a:	e7ef      	b.n	276ec <event_conn_upd_prep+0x6a4>
   2770c:	f3af 8000 	nop.w
   27710:	1afd498d 	.word	0x1afd498d
   27714:	00000007 	.word	0x00000007
   27718:	0003f189 	.word	0x0003f189
   2771c:	20005cd8 	.word	0x20005cd8
   27720:	20005c44 	.word	0x20005c44
   27724:	d1b71759 	.word	0xd1b71759
   27728:	20000ed0 	.word	0x20000ed0
   2772c:	0005563c 	.word	0x0005563c
   27730:	00055430 	.word	0x00055430
   27734:	0005512c 	.word	0x0005512c
   27738:	00028581 	.word	0x00028581
   2773c:	3b9aca00 	.word	0x3b9aca00
   27740:	431bde83 	.word	0x431bde83
	    ((pdu_data_tx->llctrl.opcode !=
   27744:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27746:	2903      	cmp	r1, #3
   27748:	d0be      	beq.n	276c8 <event_conn_upd_prep+0x680>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2774a:	290a      	cmp	r1, #10
   2774c:	d197      	bne.n	2767e <event_conn_upd_prep+0x636>
   2774e:	e7bb      	b.n	276c8 <event_conn_upd_prep+0x680>
			LL_ASSERT(0);
   27750:	4a07      	ldr	r2, [pc, #28]	; (27770 <event_conn_upd_prep+0x728>)
   27752:	4908      	ldr	r1, [pc, #32]	; (27774 <event_conn_upd_prep+0x72c>)
   27754:	4808      	ldr	r0, [pc, #32]	; (27778 <event_conn_upd_prep+0x730>)
   27756:	f640 33c7 	movw	r3, #3015	; 0xbc7
   2775a:	f022 fea4 	bl	4a4a6 <printk>
   2775e:	4040      	eors	r0, r0
   27760:	f380 8811 	msr	BASEPRI, r0
   27764:	f04f 0003 	mov.w	r0, #3
   27768:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
   2776a:	f04f 0800 	mov.w	r8, #0
			break;
   2776e:	e649      	b.n	27404 <event_conn_upd_prep+0x3bc>
   27770:	0005563c 	.word	0x0005563c
   27774:	0005518c 	.word	0x0005518c
   27778:	0005512c 	.word	0x0005512c
   2777c:	00000000 	.word	0x00000000

00027780 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   27780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27784:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   27786:	f8d2 b000 	ldr.w	fp, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   2778a:	681b      	ldr	r3, [r3, #0]
{
   2778c:	b097      	sub	sp, #92	; 0x5c
   2778e:	468a      	mov	sl, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27790:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   27792:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27794:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
   27798:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   2779c:	4604      	mov	r4, r0
   2779e:	4615      	mov	r5, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   277a0:	a814      	add	r0, sp, #80	; 0x50
   277a2:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   277a4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   277a8:	f024 ff85 	bl	4c6b6 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   277ac:	f89a 0011 	ldrb.w	r0, [sl, #17]
   277b0:	900c      	str	r0, [sp, #48]	; 0x30

	if (rl_idx != FILTER_IDX_NONE) {
   277b2:	28ff      	cmp	r0, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   277b4:	f10d 0948 	add.w	r9, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   277b8:	f000 8083 	beq.w	278c2 <ull_periph_setup+0x142>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   277bc:	464a      	mov	r2, r9
   277be:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   277c2:	f017 ff91 	bl	3f6e8 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   277c6:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   277ca:	3602      	adds	r6, #2
   277cc:	b2f6      	uxtb	r6, r6
   277ce:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	link = rx->link;

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
	const uint8_t *own_id_addr = adv->own_id_addr;
   277d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   277d4:	7f27      	ldrb	r7, [r4, #28]
	link = rx->link;
   277d6:	f8d4 c000 	ldr.w	ip, [r4]
   277da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
	const uint8_t *own_id_addr = adv->own_id_addr;
   277de:	f103 0871 	add.w	r8, r3, #113	; 0x71
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   277e2:	09ff      	lsrs	r7, r7, #7

	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   277e4:	464b      	mov	r3, r9
   277e6:	f006 0201 	and.w	r2, r6, #1
   277ea:	4641      	mov	r1, r8
   277ec:	4638      	mov	r0, r7
   277ee:	f013 fa6b 	bl	3acc8 <ull_conn_peer_connected>
   277f2:	2800      	cmp	r0, #0
   277f4:	d14b      	bne.n	2788e <ull_periph_setup+0x10e>

		return;
	}

	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_id_addr_type;
   277f6:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   277fa:	900d      	str	r0, [sp, #52]	; 0x34
   277fc:	f366 0241 	bfi	r2, r6, #1, #1
   27800:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->peer_id_addr, peer_id_addr,
   27804:	4649      	mov	r1, r9
   27806:	2206      	movs	r2, #6
   27808:	f10b 00dd 	add.w	r0, fp, #221	; 0xdd
   2780c:	f024 ff53 	bl	4c6b6 <memcpy>
		     sizeof(conn->peer_id_addr));
	conn->own_id_addr_type = own_id_addr_type;
   27810:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   27814:	f367 0200 	bfi	r2, r7, #0, #1
	(void)memcpy(conn->own_id_addr, own_id_addr,
   27818:	4641      	mov	r1, r8
	conn->own_id_addr_type = own_id_addr_type;
   2781a:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr,
   2781e:	f10b 00d7 	add.w	r0, fp, #215	; 0xd7
   27822:	2206      	movs	r2, #6
   27824:	f024 ff47 	bl	4c6b6 <memcpy>
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27828:	1d2f      	adds	r7, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   2782a:	2203      	movs	r2, #3
   2782c:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   27830:	f105 0008 	add.w	r0, r5, #8
   27834:	f024 ff3f 	bl	4c6b6 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27838:	f105 0618 	add.w	r6, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   2783c:	2204      	movs	r2, #4
   2783e:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   27842:	4638      	mov	r0, r7
   27844:	f024 ff37 	bl	4c6b6 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27848:	2205      	movs	r2, #5
   2784a:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   2784e:	4630      	mov	r0, r6
   27850:	f024 ff31 	bl	4c6b6 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   27854:	4630      	mov	r0, r6
   27856:	2105      	movs	r1, #5
   27858:	f00c fff2 	bl	34840 <util_ones_count_get>
   2785c:	7f6a      	ldrb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   2785e:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   27862:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   27866:	f360 0205 	bfi	r2, r0, #0, #6
   2786a:	776a      	strb	r2, [r5, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   2786c:	f3c1 0204 	ubfx	r2, r1, #0, #5
   27870:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27872:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
   27874:	81ee      	strh	r6, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27876:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27878:	b2b6      	uxth	r6, r6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   2787a:	f001 021f 	and.w	r2, r1, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   2787e:	d906      	bls.n	2788e <ull_periph_setup+0x10e>
   27880:	321b      	adds	r2, #27
   27882:	f002 021f 	and.w	r2, r2, #31
   27886:	2a0b      	cmp	r2, #11
   27888:	d801      	bhi.n	2788e <ull_periph_setup+0x10e>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   2788a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2788c:	bb0e      	cbnz	r6, 278d2 <ull_periph_setup+0x152>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   2788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   27890:	68e6      	ldr	r6, [r4, #12]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   27892:	980b      	ldr	r0, [sp, #44]	; 0x2c
	hdr->disabled_cb = NULL;
   27894:	2200      	movs	r2, #0
   27896:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
   27898:	f895 3020 	ldrb.w	r3, [r5, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
   2789c:	2701      	movs	r7, #1
	lll->periph.initiated = 0U;
   2789e:	f362 0300 	bfi	r3, r2, #0, #1
   278a2:	f885 3020 	strb.w	r3, [r5, #32]
		ll_rx_put(link, rx);
   278a6:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
   278a8:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
   278aa:	f010 fc89 	bl	381c0 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   278ae:	6830      	ldr	r0, [r6, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   278b0:	7137      	strb	r7, [r6, #4]
	ll_rx_put(link, rx);
   278b2:	4631      	mov	r1, r6
   278b4:	f010 fc84 	bl	381c0 <ll_rx_put>
	ll_rx_sched();
   278b8:	f010 fc8c 	bl	381d4 <ll_rx_sched>
}
   278bc:	b017      	add	sp, #92	; 0x5c
   278be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   278c2:	2206      	movs	r2, #6
   278c4:	a914      	add	r1, sp, #80	; 0x50
   278c6:	4648      	mov	r0, r9
   278c8:	f024 fef5 	bl	4c6b6 <memcpy>
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
   278cc:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   278d0:	e77f      	b.n	277d2 <ull_periph_setup+0x52>
	((struct lll_adv *)ftr->param)->conn = NULL;
   278d2:	f8da 2000 	ldr.w	r2, [sl]
   278d6:	6053      	str	r3, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   278d8:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   278dc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   278e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   278e4:	822b      	strh	r3, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   278e6:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   278ea:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   278ec:	920e      	str	r2, [sp, #56]	; 0x38
	conn->periph.sca = pdu_adv->connect_ind.sca;
   278ee:	0949      	lsrs	r1, r1, #5
   278f0:	f361 03c5 	bfi	r3, r1, #3, #3
   278f4:	f88b 30e4 	strb.w	r3, [fp, #228]	; 0xe4
		ceiling_fraction(((lll_clock_ppm_local_get() +
   278f8:	f019 fc2c 	bl	41154 <lll_clock_ppm_local_get>
   278fc:	900d      	str	r0, [sp, #52]	; 0x34
   278fe:	f89b 00e4 	ldrb.w	r0, [fp, #228]	; 0xe4
   27902:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27906:	f019 fc27 	bl	41158 <lll_clock_ppm_get>
   2790a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2790c:	4ac2      	ldr	r2, [pc, #776]	; (27c18 <ull_periph_setup+0x498>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2790e:	8a29      	ldrh	r1, [r5, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27910:	f240 48e2 	movw	r8, #1250	; 0x4e2
   27914:	fb08 f606 	mul.w	r6, r8, r6
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27918:	4403      	add	r3, r0
   2791a:	fb06 f303 	mul.w	r3, r6, r3
   2791e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   27922:	f203 233f 	addw	r3, r3, #575	; 0x23f
   27926:	fba2 2303 	umull	r2, r3, r2, r3
   2792a:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
   2792c:	626b      	str	r3, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   2792e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27932:	4aba      	ldr	r2, [pc, #744]	; (27c1c <ull_periph_setup+0x49c>)
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27934:	fb08 f303 	mul.w	r3, r8, r3
   27938:	63ab      	str	r3, [r5, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   2793a:	0873      	lsrs	r3, r6, #1
   2793c:	3b96      	subs	r3, #150	; 0x96
   2793e:	62ab      	str	r3, [r5, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   27940:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27944:	4bb6      	ldr	r3, [pc, #728]	; (27c20 <ull_periph_setup+0x4a0>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27946:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2794a:	4432      	add	r2, r6
   2794c:	fbb2 f2f6 	udiv	r2, r2, r6
   27950:	f8ab 20c6 	strh.w	r2, [fp, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   27954:	fa1f f288 	uxth.w	r2, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27958:	fb00 6202 	mla	r2, r0, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2795c:	4433      	add	r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   2795e:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27960:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27962:	fbb2 f2f6 	udiv	r2, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27966:	fbb3 f3f6 	udiv	r3, r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   2796a:	f8ab 20c2 	strh.w	r2, [fp, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2796e:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27970:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27972:	f8ab 20ce 	strh.w	r2, [fp, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27976:	dd04      	ble.n	27982 <ull_periph_setup+0x202>
   27978:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   2797c:	31fa      	adds	r1, #250	; 0xfa
   2797e:	440a      	add	r2, r1
   27980:	b292      	uxth	r2, r2
   27982:	f8ab 20ca 	strh.w	r2, [fp, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   27986:	4639      	mov	r1, r7
   27988:	2204      	movs	r2, #4
   2798a:	f10b 00e8 	add.w	r0, fp, #232	; 0xe8
   2798e:	f024 fe92 	bl	4c6b6 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27992:	4623      	mov	r3, r4
   27994:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   27998:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   2799c:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
   2799e:	910f      	str	r1, [sp, #60]	; 0x3c
   279a0:	910d      	str	r1, [sp, #52]	; 0x34
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   279a2:	f100 8100 	bmi.w	27ba6 <ull_periph_setup+0x426>
	cc->status = 0U;
   279a6:	f44f 7380 	mov.w	r3, #256	; 0x100
   279aa:	83a3      	strh	r3, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   279ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   279ae:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   279b2:	f018 fc67 	bl	40284 <ull_filter_lll_lrpa_used>
   279b6:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   279b8:	2206      	movs	r2, #6
   279ba:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   279be:	2900      	cmp	r1, #0
   279c0:	f000 80e9 	beq.w	27b96 <ull_periph_setup+0x416>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   279c4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   279c8:	f024 fe75 	bl	4c6b6 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   279cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   279ce:	2bff      	cmp	r3, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   279d0:	f104 0025 	add.w	r0, r4, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
   279d4:	f000 80e2 	beq.w	27b9c <ull_periph_setup+0x41c>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   279d8:	a914      	add	r1, sp, #80	; 0x50
   279da:	2206      	movs	r2, #6
   279dc:	f024 fe6b 	bl	4c6b6 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   279e0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   279e4:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   279e6:	4649      	mov	r1, r9
   279e8:	2206      	movs	r2, #6
   279ea:	f104 001f 	add.w	r0, r4, #31
   279ee:	f024 fe62 	bl	4c6b6 <memcpy>
	cc->sca = conn->periph.sca;
   279f2:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	cc->interval = lll->interval;
   279f6:	89ea      	ldrh	r2, [r5, #14]
   279f8:	8662      	strh	r2, [r4, #50]	; 0x32
	cc->sca = conn->periph.sca;
   279fa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->latency = lll->latency;
   279fe:	8a2a      	ldrh	r2, [r5, #16]
   27a00:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->periph.sca;
   27a02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
   27a06:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
   27a0a:	4658      	mov	r0, fp
   27a0c:	f012 fde0 	bl	3a5d0 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   27a10:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
   27a12:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
   27a14:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
   27a16:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
   27a1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27a1c:	f010 fbd0 	bl	381c0 <ll_rx_put>
		rx->handle = lll->handle;
   27a20:	89ab      	ldrh	r3, [r5, #12]
   27a22:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27a24:	231b      	movs	r3, #27
   27a26:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
   27a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
   27a2a:	f8d4 8000 	ldr.w	r8, [r4]
		if (chan_sel) {
   27a2e:	2b00      	cmp	r3, #0
   27a30:	f040 80ce 	bne.w	27bd0 <ull_periph_setup+0x450>
			cs->csa = 0x00;
   27a34:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   27a38:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   27a3a:	4621      	mov	r1, r4
   27a3c:	4640      	mov	r0, r8
   27a3e:	f010 fbbf 	bl	381c0 <ll_rx_put>
	ll_rx_sched();
   27a42:	f010 fbc7 	bl	381d4 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27a46:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   27a4a:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   27a4e:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27a52:	2101      	movs	r1, #1
   27a54:	f000 0007 	and.w	r0, r0, #7
   27a58:	f019 f98a 	bl	40d70 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a5c:	4427      	add	r7, r4
   27a5e:	f507 77e1 	add.w	r7, r7, #450	; 0x1c2
   27a62:	1839      	adds	r1, r7, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27a64:	4681      	mov	r9, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a66:	486f      	ldr	r0, [pc, #444]	; (27c24 <ull_periph_setup+0x4a4>)
	conn->ull.ticks_active_to_start = 0U;
   27a68:	2700      	movs	r7, #0
	conn->ull.ticks_prepare_to_start =
   27a6a:	2331      	movs	r3, #49	; 0x31
   27a6c:	f8cb 3008 	str.w	r3, [fp, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a70:	fba1 0100 	umull	r0, r1, r1, r0
   27a74:	a366      	add	r3, pc, #408	; (adr r3, 27c10 <ull_periph_setup+0x490>)
   27a76:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   27a7a:	f8cb 7004 	str.w	r7, [fp, #4]
	conn->ull.ticks_preempt_to_start =
   27a7e:	f8cb 700c 	str.w	r7, [fp, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a82:	f7fe fb3d 	bl	26100 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	conn_offset_us = ftr->radio_end_us;
   27a8a:	f8da 400c 	ldr.w	r4, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27a92:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a94:	f240 43e2 	movw	r3, #1250	; 0x4e2
   27a98:	fb03 4402 	mla	r4, r3, r2, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27a9c:	2102      	movs	r1, #2
   27a9e:	463a      	mov	r2, r7
	conn->ull.ticks_slot =
   27aa0:	f8cb 0010 	str.w	r0, [fp, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27aa4:	2001      	movs	r0, #1
   27aa6:	f00c fd9b 	bl	345e0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   27aaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   27aac:	4628      	mov	r0, r5
   27aae:	f011 fc97 	bl	393e0 <ull_adv_handle_get>
   27ab2:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27ab4:	4b5c      	ldr	r3, [pc, #368]	; (27c28 <ull_periph_setup+0x4a8>)
   27ab6:	9500      	str	r5, [sp, #0]
   27ab8:	b2d2      	uxtb	r2, r2
   27aba:	4638      	mov	r0, r7
   27abc:	2101      	movs	r1, #1
   27abe:	f00e f823 	bl	35b08 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   27ac2:	f204 44b2 	addw	r4, r4, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27ac6:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
   27ac8:	eba4 0409 	sub.w	r4, r4, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27acc:	f000 808b 	beq.w	27be6 <ull_periph_setup+0x466>
	if (adv->lll.is_hdcd) {
   27ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   27ad6:	07db      	lsls	r3, r3, #31
   27ad8:	d472      	bmi.n	27bc0 <ull_periph_setup+0x440>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27ada:	4658      	mov	r0, fp
   27adc:	f012 fd78 	bl	3a5d0 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27ae0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 27c24 <ull_periph_setup+0x4a4>
   27ae4:	fba6 8609 	umull	r8, r6, r6, r9
   27ae8:	a349      	add	r3, pc, #292	; (adr r3, 27c10 <ull_periph_setup+0x490>)
   27aea:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27aee:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27af0:	4631      	mov	r1, r6
   27af2:	4640      	mov	r0, r8
   27af4:	f7fe fb04 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27af8:	f8da 3008 	ldr.w	r3, [sl, #8]
   27afc:	f8cd b018 	str.w	fp, [sp, #24]
   27b00:	f1a3 0a3a 	sub.w	sl, r3, #58	; 0x3a
   27b04:	4b49      	ldr	r3, [pc, #292]	; (27c2c <ull_periph_setup+0x4ac>)
   27b06:	9307      	str	r3, [sp, #28]
   27b08:	4b49      	ldr	r3, [pc, #292]	; (27c30 <ull_periph_setup+0x4b0>)
   27b0a:	9305      	str	r3, [sp, #20]
   27b0c:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   27b10:	9308      	str	r3, [sp, #32]
   27b12:	f8db 3010 	ldr.w	r3, [fp, #16]
   27b16:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27b18:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   27b1c:	4845      	ldr	r0, [pc, #276]	; (27c34 <ull_periph_setup+0x4b4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27b1e:	2300      	movs	r3, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27b20:	fba7 0100 	umull	r0, r1, r7, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27b24:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27b26:	2307      	movs	r3, #7
   27b28:	ebb8 0000 	subs.w	r0, r8, r0
   27b2c:	fb03 1107 	mla	r1, r3, r7, r1
   27b30:	eb66 0101 	sbc.w	r1, r6, r1
   27b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27b38:	2300      	movs	r3, #0
   27b3a:	f7fe fae1 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27b3e:	a334      	add	r3, pc, #208	; (adr r3, 27c10 <ull_periph_setup+0x490>)
   27b40:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27b44:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27b48:	fba4 0109 	umull	r0, r1, r4, r9
   27b4c:	f7fe fad8 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27b50:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27b52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27b56:	b2ed      	uxtb	r5, r5
   27b58:	9000      	str	r0, [sp, #0]
   27b5a:	4653      	mov	r3, sl
   27b5c:	462a      	mov	r2, r5
   27b5e:	2101      	movs	r1, #1
   27b60:	2000      	movs	r0, #0
   27b62:	f00d ff47 	bl	359f4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27b66:	f030 0302 	bics.w	r3, r0, #2
   27b6a:	d00c      	beq.n	27b86 <ull_periph_setup+0x406>
   27b6c:	4a32      	ldr	r2, [pc, #200]	; (27c38 <ull_periph_setup+0x4b8>)
   27b6e:	4933      	ldr	r1, [pc, #204]	; (27c3c <ull_periph_setup+0x4bc>)
   27b70:	4833      	ldr	r0, [pc, #204]	; (27c40 <ull_periph_setup+0x4c0>)
   27b72:	f240 13c9 	movw	r3, #457	; 0x1c9
   27b76:	f022 fc96 	bl	4a4a6 <printk>
   27b7a:	4040      	eors	r0, r0
   27b7c:	f380 8811 	msr	BASEPRI, r0
   27b80:	f04f 0003 	mov.w	r0, #3
   27b84:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   27b86:	2201      	movs	r2, #1
   27b88:	2102      	movs	r1, #2
   27b8a:	4610      	mov	r0, r2
   27b8c:	f00c fd28 	bl	345e0 <mayfly_enable>
}
   27b90:	b017      	add	sp, #92	; 0x5c
   27b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   27b96:	f024 fd99 	bl	4c6cc <memset>
   27b9a:	e717      	b.n	279cc <ull_periph_setup+0x24c>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   27b9c:	2206      	movs	r2, #6
   27b9e:	2100      	movs	r1, #0
   27ba0:	f024 fd94 	bl	4c6cc <memset>
   27ba4:	e71c      	b.n	279e0 <ull_periph_setup+0x260>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27ba6:	4a24      	ldr	r2, [pc, #144]	; (27c38 <ull_periph_setup+0x4b8>)
   27ba8:	4926      	ldr	r1, [pc, #152]	; (27c44 <ull_periph_setup+0x4c4>)
   27baa:	4825      	ldr	r0, [pc, #148]	; (27c40 <ull_periph_setup+0x4c0>)
   27bac:	23f1      	movs	r3, #241	; 0xf1
   27bae:	f022 fc7a 	bl	4a4a6 <printk>
   27bb2:	4040      	eors	r0, r0
   27bb4:	f380 8811 	msr	BASEPRI, r0
   27bb8:	f04f 0003 	mov.w	r0, #3
   27bbc:	df02      	svc	2
   27bbe:	e6f2      	b.n	279a6 <ull_periph_setup+0x226>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27bc0:	2300      	movs	r3, #0
   27bc2:	2201      	movs	r2, #1
   27bc4:	9300      	str	r3, [sp, #0]
   27bc6:	4618      	mov	r0, r3
   27bc8:	4611      	mov	r1, r2
   27bca:	f00d ff9d 	bl	35b08 <ticker_stop>
   27bce:	e784      	b.n	27ada <ull_periph_setup+0x35a>
			lll->data_chan_sel = 1;
   27bd0:	7f6b      	ldrb	r3, [r5, #29]
   27bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27bd6:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27bd8:	4638      	mov	r0, r7
   27bda:	f017 fb83 	bl	3f2e4 <lll_chan_id>
			cs->csa = 0x01;
   27bde:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27be0:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   27be2:	7723      	strb	r3, [r4, #28]
   27be4:	e729      	b.n	27a3a <ull_periph_setup+0x2ba>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27be6:	f010 fbc7 	bl	38378 <ull_disable_mark_get>
   27bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27bec:	4283      	cmp	r3, r0
   27bee:	f43f af6f 	beq.w	27ad0 <ull_periph_setup+0x350>
   27bf2:	4a11      	ldr	r2, [pc, #68]	; (27c38 <ull_periph_setup+0x4b8>)
   27bf4:	4914      	ldr	r1, [pc, #80]	; (27c48 <ull_periph_setup+0x4c8>)
   27bf6:	4812      	ldr	r0, [pc, #72]	; (27c40 <ull_periph_setup+0x4c0>)
   27bf8:	f240 239f 	movw	r3, #671	; 0x29f
   27bfc:	f022 fc53 	bl	4a4a6 <printk>
   27c00:	4040      	eors	r0, r0
   27c02:	f380 8811 	msr	BASEPRI, r0
   27c06:	f04f 0003 	mov.w	r0, #3
   27c0a:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   27c0c:	e760      	b.n	27ad0 <ull_periph_setup+0x350>
   27c0e:	bf00      	nop
   27c10:	1afd498d 	.word	0x1afd498d
   27c14:	00000007 	.word	0x00000007
   27c18:	431bde83 	.word	0x431bde83
   27c1c:	026259ff 	.word	0x026259ff
   27c20:	01c9c37f 	.word	0x01c9c37f
   27c24:	3b9aca00 	.word	0x3b9aca00
   27c28:	0003e901 	.word	0x0003e901
   27c2c:	0003e8d1 	.word	0x0003e8d1
   27c30:	0003e93d 	.word	0x0003e93d
   27c34:	1afd498d 	.word	0x1afd498d
   27c38:	00055824 	.word	0x00055824
   27c3c:	0005571c 	.word	0x0005571c
   27c40:	0005512c 	.word	0x0005512c
   27c44:	0005523c 	.word	0x0005523c
   27c48:	00055880 	.word	0x00055880
   27c4c:	00000000 	.word	0x00000000

00027c50 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
   27c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c54:	b08b      	sub	sp, #44	; 0x2c
   27c56:	461f      	mov	r7, r3
   27c58:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   27c5c:	9306      	str	r3, [sp, #24]
   27c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   27c62:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   27c66:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
   27c6a:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
   27c6e:	9303      	str	r3, [sp, #12]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27c70:	2000      	movs	r0, #0
{
   27c72:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27c74:	f011 fdf0 	bl	39858 <ull_scan_is_disabled_get>
	if (!scan) {
   27c78:	2800      	cmp	r0, #0
   27c7a:	f000 81b7 	beq.w	27fec <ll_create_connection+0x39c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
   27c7e:	f009 0801 	and.w	r8, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
   27c82:	4605      	mov	r5, r0
   27c84:	4640      	mov	r0, r8
   27c86:	f00e f807 	bl	35c98 <ll_addr_get>
   27c8a:	9002      	str	r0, [sp, #8]
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27c8c:	f1b8 0f00 	cmp.w	r8, #0
   27c90:	d16a      	bne.n	27d68 <ll_create_connection+0x118>
		return BT_HCI_ERR_INVALID_PARAM;
	}

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   27c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27c94:	9902      	ldr	r1, [sp, #8]
   27c96:	463a      	mov	r2, r7
   27c98:	4640      	mov	r0, r8
   27c9a:	f013 f815 	bl	3acc8 <ull_conn_peer_connected>
   27c9e:	2800      	cmp	r0, #0
   27ca0:	f040 81b5 	bne.w	2800e <ll_create_connection+0x3be>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
   27ca4:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
   27ca6:	f105 021c 	add.w	r2, r5, #28
   27caa:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
   27cac:	2b00      	cmp	r3, #0
   27cae:	d062      	beq.n	27d76 <ll_create_connection+0x126>
		conn_lll = lll->conn;
   27cb0:	f8d5 a020 	ldr.w	sl, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
   27cb4:	f8da 4000 	ldr.w	r4, [sl]
	conn->ull.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_addr_type;
   27cb8:	f007 0b01 	and.w	fp, r7, #1
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
   27cbc:	f89a 0044 	ldrb.w	r0, [sl, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
   27cc0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   27cc4:	f000 0007 	and.w	r0, r0, #7
   27cc8:	f019 f850 	bl	40d6c <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27ccc:	f8ba 1040 	ldrh.w	r1, [sl, #64]	; 0x40
   27cd0:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
   27cd4:	4401      	add	r1, r0
   27cd6:	f8ba 0042 	ldrh.w	r0, [sl, #66]	; 0x42
   27cda:	4401      	add	r1, r0
   27cdc:	48d6      	ldr	r0, [pc, #856]	; (28038 <ll_create_connection+0x3e8>)
   27cde:	a3d4      	add	r3, pc, #848	; (adr r3, 28030 <ll_create_connection+0x3e0>)
   27ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   27ce4:	fba1 0100 	umull	r0, r1, r1, r0
   27ce8:	f7fe fa0a 	bl	26100 <__aeabi_uldivmod>
   27cec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   27cf0:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
   27cf2:	4630      	mov	r0, r6
   27cf4:	f018 f838 	bl	3fd68 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
   27cf8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27cfc:	f36f 0341 	bfc	r3, #1, #1
   27d00:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   27d04:	23ff      	movs	r3, #255	; 0xff
   27d06:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27d0a:	2e00      	cmp	r6, #0
   27d0c:	f000 8172 	beq.w	27ff4 <ll_create_connection+0x3a4>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   27d10:	f1a9 0302 	sub.w	r3, r9, #2
   27d14:	2b01      	cmp	r3, #1
   27d16:	f240 817e 	bls.w	28016 <ll_create_connection+0x3c6>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
   27d1a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27d1e:	9914      	ldr	r1, [sp, #80]	; 0x50
	scan->own_addr_type = own_addr_type;
   27d20:	f369 0342 	bfi	r3, r9, #1, #2
   27d24:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
   27d28:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27d2c:	f36b 0300 	bfi	r3, fp, #0, #1
   27d30:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27d34:	2206      	movs	r2, #6
   27d36:	f105 0024 	add.w	r0, r5, #36	; 0x24
   27d3a:	f024 fcbc 	bl	4c6b6 <memcpy>
	lll->conn_timeout = timeout;
   27d3e:	9b03      	ldr	r3, [sp, #12]
   27d40:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   27d42:	f105 001c 	add.w	r0, r5, #28
   27d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   27d4a:	2100      	movs	r1, #0
   27d4c:	9600      	str	r6, [sp, #0]
   27d4e:	f7ff f893 	bl	26e78 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
   27d52:	f019 f9ab 	bl	410ac <lll_clock_wait>
	if (err) {
   27d56:	2800      	cmp	r0, #0
   27d58:	f040 817a 	bne.w	28050 <ll_create_connection+0x400>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
   27d5c:	4628      	mov	r0, r5
   27d5e:	f7ff f8b7 	bl	26ed0 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   27d62:	b00b      	add	sp, #44	; 0x2c
   27d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27d68:	2106      	movs	r1, #6
   27d6a:	f00c fbdd 	bl	34528 <mem_nz>
   27d6e:	2800      	cmp	r0, #0
   27d70:	d18f      	bne.n	27c92 <ll_create_connection+0x42>
		return BT_HCI_ERR_INVALID_PARAM;
   27d72:	2012      	movs	r0, #18
   27d74:	e7f5      	b.n	27d62 <ll_create_connection+0x112>
	link = ll_rx_link_alloc();
   27d76:	f010 fa0b 	bl	38190 <ll_rx_link_alloc>
	if (!link) {
   27d7a:	9007      	str	r0, [sp, #28]
   27d7c:	2800      	cmp	r0, #0
   27d7e:	f000 81a2 	beq.w	280c6 <ll_create_connection+0x476>
	conn = ll_conn_acquire();
   27d82:	f012 fc19 	bl	3a5b8 <ll_conn_acquire>
	if (!conn) {
   27d86:	4604      	mov	r4, r0
   27d88:	2800      	cmp	r0, #0
   27d8a:	f000 81ba 	beq.w	28102 <ll_create_connection+0x4b2>
	err = util_aa_le32(conn_lll->access_addr);
   27d8e:	3020      	adds	r0, #32
   27d90:	f00c fd6a 	bl	34868 <util_aa_le32>
	conn_lll = &conn->lll;
   27d94:	f104 0a1c 	add.w	sl, r4, #28
	LL_ASSERT(!err);
   27d98:	2800      	cmp	r0, #0
   27d9a:	f040 8183 	bne.w	280a4 <ll_create_connection+0x454>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   27d9e:	2103      	movs	r1, #3
   27da0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   27da4:	f018 fe90 	bl	40ac8 <lll_csrand_get>
	conn_lll->interval = interval;
   27da8:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
   27daa:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
   27dac:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
   27dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   27db2:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
   27db6:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
   27db8:	2800      	cmp	r0, #0
   27dba:	f000 8180 	beq.w	280be <ll_create_connection+0x46e>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   27dbe:	f104 0164 	add.w	r1, r4, #100	; 0x64
   27dc2:	f104 0268 	add.w	r2, r4, #104	; 0x68
   27dc6:	f00c fbbb 	bl	34540 <memq_init>
	conn_lll->phy_tx = PHY_1M;
   27dca:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27dce:	4a9b      	ldr	r2, [pc, #620]	; (2803c <ll_create_connection+0x3ec>)
	conn_lll->phy_tx = PHY_1M;
   27dd0:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   27dd4:	f023 0307 	bic.w	r3, r3, #7
   27dd8:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   27ddc:	f043 0301 	orr.w	r3, r3, #1
   27de0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
   27de4:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   27de8:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
   27dec:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
   27df0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27df4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   27df8:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
   27dfc:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
   27e00:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
   27e04:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
   27e08:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27e0c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   27e10:	f017 fa1c 	bl	3f24c <ull_chan_map_get>
   27e14:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   27e18:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
   27e1c:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27e1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
   27e22:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   27e26:	f018 fe4f 	bl	40ac8 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27e2a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   27e2e:	4b84      	ldr	r3, [pc, #528]	; (28040 <ll_create_connection+0x3f0>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e30:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e34:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
   27e36:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27e3a:	fba3 1302 	umull	r1, r3, r3, r2
   27e3e:	08db      	lsrs	r3, r3, #3
   27e40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27e44:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
   27e48:	3305      	adds	r3, #5
   27e4a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
   27e4e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27e52:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
   27e54:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
   27e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27e5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
   27e60:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
   27e64:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->central.initiated = 0;
   27e68:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27e6c:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
   27e70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e74:	4b73      	ldr	r3, [pc, #460]	; (28044 <ll_create_connection+0x3f4>)
	conn->apto_expire = 0U;
   27e76:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27e7a:	fb02 f101 	mul.w	r1, r2, r1
   27e7e:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e80:	440b      	add	r3, r1
   27e82:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e86:	4970      	ldr	r1, [pc, #448]	; (28048 <ll_create_connection+0x3f8>)
	conn->appto_expire = 0U;
   27e88:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e8c:	4411      	add	r1, r2
   27e8e:	fbb1 f1f2 	udiv	r1, r1, r2
   27e92:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e96:	f242 7110 	movw	r1, #10000	; 0x2710
   27e9a:	fb01 210c 	mla	r1, r1, ip, r2
   27e9e:	3901      	subs	r1, #1
   27ea0:	fbb1 f2f2 	udiv	r2, r1, r2
   27ea4:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
   27ea8:	2206      	movs	r2, #6
   27eaa:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27eae:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27eb0:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27eb2:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27eb4:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27eb8:	dd02      	ble.n	27ec0 <ll_create_connection+0x270>
   27eba:	3a06      	subs	r2, #6
   27ebc:	1a12      	subs	r2, r2, r0
   27ebe:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
   27ec0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27ec4:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->common.fex_valid = 0U;
   27ec8:	f023 0307 	bic.w	r3, r3, #7
   27ecc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27ed0:	2300      	movs	r3, #0
   27ed2:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
   27ed6:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
	conn->llcp_rx = NULL;
   27eda:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   27ede:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   27ee2:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
	conn->llcp_feature.features_conn = ll_feat_get();
   27ee6:	f00f fc15 	bl	37714 <ll_feat_get>
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27eea:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
	conn->llcp_terminate.node_rx.hdr.link = link;
   27eee:	9b07      	ldr	r3, [sp, #28]
   27ef0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27ef4:	f022 0203 	bic.w	r2, r2, #3
   27ef8:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   27efc:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   27f00:	f022 0218 	bic.w	r2, r2, #24
   27f04:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   27f08:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   27f0c:	f022 0207 	bic.w	r2, r2, #7
   27f10:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->llcp_conn_param.disabled = 0U;
   27f14:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   27f18:	2300      	movs	r3, #0
	conn->llcp_conn_param.disabled = 0U;
   27f1a:	f363 1245 	bfi	r2, r3, #5, #1
   27f1e:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	conn->llcp_length.disabled = 0U;
   27f22:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   27f26:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
	conn->llcp_length.disabled = 0U;
   27f2a:	f363 02c3 	bfi	r2, r3, #3, #1
	conn->llcp_feature.features_conn = ll_feat_get();
   27f2e:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
	conn->llcp_feature.features_peer = 0;
   27f32:	2100      	movs	r1, #0
   27f34:	2000      	movs	r0, #0
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
   27f36:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
	conn->llcp_terminate.reason_final = 0U;
   27f3a:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   27f3e:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
	conn->llcp_conn_param.req = 0U;
   27f42:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   27f46:	f8a4 31bc 	strh.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_length.cache.tx_octets = 0U;
   27f4a:	f8a4 31c8 	strh.w	r3, [r4, #456]	; 0x1c8
	conn->llcp_feature.features_peer = 0;
   27f4e:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
	conn->llcp_length.disabled = 0U;
   27f52:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   27f56:	f012 fe9f 	bl	3ac98 <ull_conn_default_tx_octets_get>
   27f5a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27f5e:	f012 fea1 	bl	3aca4 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27f62:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
   27f66:	4a39      	ldr	r2, [pc, #228]	; (2804c <ll_create_connection+0x3fc>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27f68:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27f6c:	400a      	ands	r2, r1
   27f6e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   27f72:	f012 fe9d 	bl	3acb0 <ull_conn_default_phy_tx_get>
   27f76:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
   27f7a:	f360 0202 	bfi	r2, r0, #0, #3
   27f7e:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27f82:	f012 fe9b 	bl	3acbc <ull_conn_default_phy_rx_get>
   27f86:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f8a:	9914      	ldr	r1, [sp, #80]	; 0x50
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27f8c:	f360 02c5 	bfi	r2, r0, #3, #3
   27f90:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
	conn->peer_id_addr_type = peer_addr_type;
   27f94:	f894 20d6 	ldrb.w	r2, [r4, #214]	; 0xd6
   27f98:	f007 0b01 	and.w	fp, r7, #1
   27f9c:	f36b 0241 	bfi	r2, fp, #1, #1
	conn->tx_data = conn->tx_data_last = 0;
   27fa0:	2300      	movs	r3, #0
	conn->peer_id_addr_type = peer_addr_type;
   27fa2:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
	conn->ull.ticks_prepare_to_start =
   27fa6:	2231      	movs	r2, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
   27fa8:	e9c4 3378 	strd	r3, r3, [r4, #480]	; 0x1e0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   27fac:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   27fb0:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
	conn->ull.ticks_active_to_start = 0U;
   27fb4:	6063      	str	r3, [r4, #4]
	conn->ull.ticks_preempt_to_start =
   27fb6:	60e3      	str	r3, [r4, #12]
	conn->ull.ticks_prepare_to_start =
   27fb8:	60a2      	str	r2, [r4, #8]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27fba:	f104 00dd 	add.w	r0, r4, #221	; 0xdd
   27fbe:	2206      	movs	r2, #6
   27fc0:	f024 fb79 	bl	4c6b6 <memcpy>
	conn->own_id_addr_type = own_id_addr_type;
   27fc4:	f894 20d6 	ldrb.w	r2, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27fc8:	9902      	ldr	r1, [sp, #8]
	conn->own_id_addr_type = own_id_addr_type;
   27fca:	f369 0200 	bfi	r2, r9, #0, #1
   27fce:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27fd2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   27fd6:	2206      	movs	r2, #6
   27fd8:	f024 fb6d 	bl	4c6b6 <memcpy>
   27fdc:	2300      	movs	r3, #0
	lll->conn = conn_lll;
   27fde:	f8c5 a020 	str.w	sl, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   27fe2:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hdr->ref = 0U;
   27fe6:	7023      	strb	r3, [r4, #0]
   27fe8:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
   27fea:	e667      	b.n	27cbc <ll_create_connection+0x6c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   27fec:	200c      	movs	r0, #12
}
   27fee:	b00b      	add	sp, #44	; 0x2c
   27ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27ff4:	f018 faf4 	bl	405e0 <ull_filter_lll_rl_enabled>
   27ff8:	2800      	cmp	r0, #0
   27ffa:	f43f ae89 	beq.w	27d10 <ll_create_connection+0xc0>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   27ffe:	9914      	ldr	r1, [sp, #80]	; 0x50
   28000:	4638      	mov	r0, r7
   28002:	4632      	mov	r2, r6
   28004:	f018 f820 	bl	40048 <ull_filter_rl_find>
   28008:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   2800c:	e680      	b.n	27d10 <ll_create_connection+0xc0>
		return BT_HCI_ERR_CONN_ALREADY_EXISTS;
   2800e:	200b      	movs	r0, #11
}
   28010:	b00b      	add	sp, #44	; 0x2c
   28012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
   28016:	2000      	movs	r0, #0
   28018:	f017 feca 	bl	3fdb0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   2801c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   28020:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
   28024:	46c1      	mov	r9, r8
		lll->rpa_gen = 1;
   28026:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   2802a:	e676      	b.n	27d1a <ll_create_connection+0xca>
   2802c:	f3af 8000 	nop.w
   28030:	1afd498d 	.word	0x1afd498d
   28034:	00000007 	.word	0x00000007
   28038:	3b9aca00 	.word	0x3b9aca00
   2803c:	01480148 	.word	0x01480148
   28040:	aaaaaaab 	.word	0xaaaaaaab
   28044:	01c9c37f 	.word	0x01c9c37f
   28048:	026259ff 	.word	0x026259ff
   2804c:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
   28050:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
   28052:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28054:	b163      	cbz	r3, 28070 <ll_create_connection+0x420>
   28056:	4a2d      	ldr	r2, [pc, #180]	; (2810c <ll_create_connection+0x4bc>)
   28058:	492d      	ldr	r1, [pc, #180]	; (28110 <ll_create_connection+0x4c0>)
   2805a:	482e      	ldr	r0, [pc, #184]	; (28114 <ll_create_connection+0x4c4>)
   2805c:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   28060:	f022 fa21 	bl	4a4a6 <printk>
   28064:	4040      	eors	r0, r0
   28066:	f380 8811 	msr	BASEPRI, r0
   2806a:	f04f 0003 	mov.w	r0, #3
   2806e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   28070:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   28074:	f104 0048 	add.w	r0, r4, #72	; 0x48
   28078:	f00c fa66 	bl	34548 <memq_deinit>
	LL_ASSERT(link);
   2807c:	4606      	mov	r6, r0
   2807e:	2800      	cmp	r0, #0
   28080:	d031      	beq.n	280e6 <ll_create_connection+0x496>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
   28082:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   28084:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   28086:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
	LL_ASSERT(link);
   2808a:	b1f4      	cbz	r4, 280ca <ll_create_connection+0x47a>

	ll_rx_link_release(link);
   2808c:	4620      	mov	r0, r4
   2808e:	f010 f885 	bl	3819c <ll_rx_link_release>

	ll_conn_release(conn);
   28092:	4638      	mov	r0, r7
   28094:	f012 fa96 	bl	3a5c4 <ll_conn_release>
	scan->lll.conn = NULL;
   28098:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   2809a:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   2809c:	622b      	str	r3, [r5, #32]
}
   2809e:	b00b      	add	sp, #44	; 0x2c
   280a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   280a4:	4a19      	ldr	r2, [pc, #100]	; (2810c <ll_create_connection+0x4bc>)
   280a6:	491c      	ldr	r1, [pc, #112]	; (28118 <ll_create_connection+0x4c8>)
   280a8:	481a      	ldr	r0, [pc, #104]	; (28114 <ll_create_connection+0x4c4>)
   280aa:	23bf      	movs	r3, #191	; 0xbf
   280ac:	f022 f9fb 	bl	4a4a6 <printk>
   280b0:	4040      	eors	r0, r0
   280b2:	f380 8811 	msr	BASEPRI, r0
   280b6:	f04f 0003 	mov.w	r0, #3
   280ba:	df02      	svc	2
   280bc:	e66f      	b.n	27d9e <ll_create_connection+0x14e>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   280be:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   280c2:	6760      	str	r0, [r4, #116]	; 0x74
   280c4:	e67b      	b.n	27dbe <ll_create_connection+0x16e>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   280c6:	2007      	movs	r0, #7
   280c8:	e64b      	b.n	27d62 <ll_create_connection+0x112>
	LL_ASSERT(link);
   280ca:	4a10      	ldr	r2, [pc, #64]	; (2810c <ll_create_connection+0x4bc>)
   280cc:	4913      	ldr	r1, [pc, #76]	; (2811c <ll_create_connection+0x4cc>)
   280ce:	4811      	ldr	r0, [pc, #68]	; (28114 <ll_create_connection+0x4c4>)
   280d0:	f240 43c1 	movw	r3, #1217	; 0x4c1
   280d4:	f022 f9e7 	bl	4a4a6 <printk>
   280d8:	4040      	eors	r0, r0
   280da:	f380 8811 	msr	BASEPRI, r0
   280de:	f04f 0003 	mov.w	r0, #3
   280e2:	df02      	svc	2
   280e4:	e7d2      	b.n	2808c <ll_create_connection+0x43c>
	LL_ASSERT(link);
   280e6:	4a09      	ldr	r2, [pc, #36]	; (2810c <ll_create_connection+0x4bc>)
   280e8:	490c      	ldr	r1, [pc, #48]	; (2811c <ll_create_connection+0x4cc>)
   280ea:	480a      	ldr	r0, [pc, #40]	; (28114 <ll_create_connection+0x4c4>)
   280ec:	f240 43ba 	movw	r3, #1210	; 0x4ba
   280f0:	f022 f9d9 	bl	4a4a6 <printk>
   280f4:	4040      	eors	r0, r0
   280f6:	f380 8811 	msr	BASEPRI, r0
   280fa:	f04f 0003 	mov.w	r0, #3
   280fe:	df02      	svc	2
   28100:	e7bf      	b.n	28082 <ll_create_connection+0x432>
		ll_rx_link_release(link);
   28102:	9807      	ldr	r0, [sp, #28]
   28104:	f010 f84a 	bl	3819c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   28108:	2007      	movs	r0, #7
   2810a:	e62a      	b.n	27d62 <ll_create_connection+0x112>
   2810c:	000558b0 	.word	0x000558b0
   28110:	00055568 	.word	0x00055568
   28114:	0005512c 	.word	0x0005512c
   28118:	00055308 	.word	0x00055308
   2811c:	00055694 	.word	0x00055694

00028120 <ull_central_setup>:
{
   28120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
   28124:	4680      	mov	r8, r0
{
   28126:	b08f      	sub	sp, #60	; 0x3c
   28128:	4604      	mov	r4, r0
   2812a:	460f      	mov	r7, r1
   2812c:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   2812e:	f100 0124 	add.w	r1, r0, #36	; 0x24
   28132:	2206      	movs	r2, #6
   28134:	a80c      	add	r0, sp, #48	; 0x30
	peer_addr_type = pdu_tx->rx_addr;
   28136:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   2813a:	f024 fabc 	bl	4c6b6 <memcpy>
	chan_sel = pdu_tx->chan_sel;
   2813e:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   28142:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
   28146:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
   2814a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
   2814e:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   28150:	f040 8104 	bne.w	2835c <ull_central_setup+0x23c>
	cc->status = 0U;
   28154:	2300      	movs	r3, #0
   28156:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
   28158:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
   2815a:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
   2815e:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   28162:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   28166:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
   2816a:	f000 80e1 	beq.w	28330 <ull_central_setup+0x210>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   2816e:	f104 011e 	add.w	r1, r4, #30
   28172:	f024 faa0 	bl	4c6b6 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   28176:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   2817a:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   2817e:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
   28182:	f000 80df 	beq.w	28344 <ull_central_setup+0x224>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   28186:	4652      	mov	r2, sl
   28188:	4640      	mov	r0, r8
   2818a:	f104 011e 	add.w	r1, r4, #30
   2818e:	930b      	str	r3, [sp, #44]	; 0x2c
   28190:	f017 faaa 	bl	3f6e8 <ll_rl_id_addr_get>
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   28194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28196:	4618      	mov	r0, r3
		cc->peer_addr_type += 2;
   28198:	7fa3      	ldrb	r3, [r4, #30]
   2819a:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   2819c:	a90c      	add	r1, sp, #48	; 0x30
		cc->peer_addr_type += 2;
   2819e:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   281a0:	2206      	movs	r2, #6
   281a2:	f024 fa88 	bl	4c6b6 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
   281a6:	683b      	ldr	r3, [r7, #0]
   281a8:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
   281ac:	89eb      	ldrh	r3, [r5, #14]
   281ae:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
   281b0:	8a2b      	ldrh	r3, [r5, #16]
   281b2:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
   281b4:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
   281b8:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
   281ba:	f018 ffc9 	bl	41150 <lll_clock_sca_local_get>
   281be:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
   281c2:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
   281c6:	4640      	mov	r0, r8
   281c8:	f012 fa02 	bl	3a5d0 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
   281cc:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
   281ce:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
   281d0:	4621      	mov	r1, r4
	rx->handle = lll->handle;
   281d2:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
   281d4:	6820      	ldr	r0, [r4, #0]
   281d6:	f00f fff3 	bl	381c0 <ll_rx_put>
		rx->handle = lll->handle;
   281da:	89ab      	ldrh	r3, [r5, #12]
   281dc:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   281de:	231b      	movs	r3, #27
		link = rx->link;
   281e0:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   281e2:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
   281e4:	f1b9 0f00 	cmp.w	r9, #0
   281e8:	f040 80c6 	bne.w	28378 <ull_central_setup+0x258>
			cs->csa = 0x00;
   281ec:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
   281f0:	4631      	mov	r1, r6
   281f2:	4620      	mov	r0, r4
   281f4:	f00f ffe4 	bl	381c0 <ll_rx_put>
	ll_rx_sched();
   281f8:	f00f ffec 	bl	381d4 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   281fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28200:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
   28204:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   28208:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
   2820c:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   2820e:	429e      	cmp	r6, r3
   28210:	bf38      	it	cc
   28212:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   28214:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   28218:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   2821c:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   28220:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   28224:	f018 fda2 	bl	40d6c <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
   28228:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   2822a:	2200      	movs	r2, #0
   2822c:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   2822e:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   28230:	2001      	movs	r0, #1
   28232:	f00c f9d5 	bl	345e0 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
   28236:	4650      	mov	r0, sl
   28238:	f011 fae6 	bl	39808 <ull_scan_handle_get>
   2823c:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2823e:	4b56      	ldr	r3, [pc, #344]	; (28398 <ull_central_setup+0x278>)
   28240:	f8cd a000 	str.w	sl, [sp]
   28244:	b2d2      	uxtb	r2, r2
   28246:	2101      	movs	r1, #1
   28248:	2000      	movs	r0, #0
   2824a:	f00d fc5d 	bl	35b08 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2824e:	f030 0302 	bics.w	r3, r0, #2
   28252:	d00c      	beq.n	2826e <ull_central_setup+0x14e>
   28254:	4a51      	ldr	r2, [pc, #324]	; (2839c <ull_central_setup+0x27c>)
   28256:	4952      	ldr	r1, [pc, #328]	; (283a0 <ull_central_setup+0x280>)
   28258:	4852      	ldr	r0, [pc, #328]	; (283a4 <ull_central_setup+0x284>)
   2825a:	f240 33c9 	movw	r3, #969	; 0x3c9
   2825e:	f022 f922 	bl	4a4a6 <printk>
   28262:	4040      	eors	r0, r0
   28264:	f380 8811 	msr	BASEPRI, r0
   28268:	f04f 0003 	mov.w	r0, #3
   2826c:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   2826e:	f04f 0a00 	mov.w	sl, #0
   28272:	4653      	mov	r3, sl
   28274:	2203      	movs	r2, #3
   28276:	2101      	movs	r1, #1
   28278:	f8cd a000 	str.w	sl, [sp]
   2827c:	4650      	mov	r0, sl
   2827e:	f00d fc43 	bl	35b08 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   28282:	4640      	mov	r0, r8
   28284:	f012 f9a4 	bl	3a5d0 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28288:	68bb      	ldr	r3, [r7, #8]
   2828a:	f8cd 8018 	str.w	r8, [sp, #24]
   2828e:	3b09      	subs	r3, #9
   28290:	1b9e      	subs	r6, r3, r6
   28292:	4b45      	ldr	r3, [pc, #276]	; (283a8 <ull_central_setup+0x288>)
   28294:	9307      	str	r3, [sp, #28]
   28296:	4b45      	ldr	r3, [pc, #276]	; (283ac <ull_central_setup+0x28c>)
   28298:	9305      	str	r3, [sp, #20]
   2829a:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   2829e:	4f44      	ldr	r7, [pc, #272]	; (283b0 <ull_central_setup+0x290>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   282a0:	9308      	str	r3, [sp, #32]
   282a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   282a6:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   282aa:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   282ae:	1d45      	adds	r5, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
   282b0:	a337      	add	r3, pc, #220	; (adr r3, 28390 <ull_central_setup+0x270>)
   282b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   282b6:	4648      	mov	r0, r9
   282b8:	4641      	mov	r1, r8
   282ba:	f7fd ff21 	bl	26100 <__aeabi_uldivmod>
   282be:	4610      	mov	r0, r2
   282c0:	4619      	mov	r1, r3
   282c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   282c6:	2300      	movs	r3, #0
   282c8:	f7fd ff1a 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   282cc:	a330      	add	r3, pc, #192	; (adr r3, 28390 <ull_central_setup+0x270>)
   282ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   282d2:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   282d4:	4641      	mov	r1, r8
   282d6:	4648      	mov	r0, r9
   282d8:	f7fd ff12 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   282dc:	a32c      	add	r3, pc, #176	; (adr r3, 28390 <ull_central_setup+0x270>)
   282de:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   282e2:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   282e4:	fba4 0107 	umull	r0, r1, r4, r7
   282e8:	f7fd ff0a 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   282ec:	b2ed      	uxtb	r5, r5
   282ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   282f2:	9000      	str	r0, [sp, #0]
   282f4:	4633      	mov	r3, r6
   282f6:	462a      	mov	r2, r5
   282f8:	2101      	movs	r1, #1
   282fa:	4650      	mov	r0, sl
   282fc:	f00d fb7a 	bl	359f4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   28300:	f030 0302 	bics.w	r3, r0, #2
   28304:	d00c      	beq.n	28320 <ull_central_setup+0x200>
   28306:	4a25      	ldr	r2, [pc, #148]	; (2839c <ull_central_setup+0x27c>)
   28308:	4925      	ldr	r1, [pc, #148]	; (283a0 <ull_central_setup+0x280>)
   2830a:	4826      	ldr	r0, [pc, #152]	; (283a4 <ull_central_setup+0x284>)
   2830c:	f240 33fa 	movw	r3, #1018	; 0x3fa
   28310:	f022 f8c9 	bl	4a4a6 <printk>
   28314:	4040      	eors	r0, r0
   28316:	f380 8811 	msr	BASEPRI, r0
   2831a:	f04f 0003 	mov.w	r0, #3
   2831e:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   28320:	2201      	movs	r2, #1
   28322:	2102      	movs	r1, #2
   28324:	4610      	mov	r0, r2
   28326:	f00c f95b 	bl	345e0 <mayfly_enable>
}
   2832a:	b00f      	add	sp, #60	; 0x3c
   2832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   28330:	f024 f9cc 	bl	4c6cc <memset>
	if (rl_idx != FILTER_IDX_NONE) {
   28334:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   28338:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   2833c:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
   28340:	f47f af21 	bne.w	28186 <ull_central_setup+0x66>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
   28344:	4618      	mov	r0, r3
   28346:	2206      	movs	r2, #6
   28348:	2100      	movs	r1, #0
   2834a:	f024 f9bf 	bl	4c6cc <memset>
		cc->peer_addr_type = peer_addr_type;
   2834e:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
   28350:	a90c      	add	r1, sp, #48	; 0x30
   28352:	4650      	mov	r0, sl
   28354:	2206      	movs	r2, #6
   28356:	f024 f9ae 	bl	4c6b6 <memcpy>
   2835a:	e724      	b.n	281a6 <ull_central_setup+0x86>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   2835c:	4a0f      	ldr	r2, [pc, #60]	; (2839c <ull_central_setup+0x27c>)
   2835e:	4915      	ldr	r1, [pc, #84]	; (283b4 <ull_central_setup+0x294>)
   28360:	4810      	ldr	r0, [pc, #64]	; (283a4 <ull_central_setup+0x284>)
   28362:	f44f 7352 	mov.w	r3, #840	; 0x348
   28366:	f022 f89e 	bl	4a4a6 <printk>
   2836a:	4040      	eors	r0, r0
   2836c:	f380 8811 	msr	BASEPRI, r0
   28370:	f04f 0003 	mov.w	r0, #3
   28374:	df02      	svc	2
   28376:	e6ed      	b.n	28154 <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
   28378:	7f6b      	ldrb	r3, [r5, #29]
   2837a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2837e:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   28380:	1d28      	adds	r0, r5, #4
   28382:	f016 ffaf 	bl	3f2e4 <lll_chan_id>
			cs->csa = 0x01;
   28386:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   28388:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   2838a:	7733      	strb	r3, [r6, #28]
   2838c:	e730      	b.n	281f0 <ull_central_setup+0xd0>
   2838e:	bf00      	nop
   28390:	1afd498d 	.word	0x1afd498d
   28394:	00000007 	.word	0x00000007
   28398:	0003eaf9 	.word	0x0003eaf9
   2839c:	000558b0 	.word	0x000558b0
   283a0:	0005571c 	.word	0x0005571c
   283a4:	0005512c 	.word	0x0005512c
   283a8:	0003eafd 	.word	0x0003eafd
   283ac:	0003eb2d 	.word	0x0003eb2d
   283b0:	3b9aca00 	.word	0x3b9aca00
   283b4:	0005523c 	.word	0x0005523c

000283b8 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
   283b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283bc:	b08f      	sub	sp, #60	; 0x3c
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
   283be:	f04f 09ff 	mov.w	r9, #255	; 0xff
{
   283c2:	4615      	mov	r5, r2
	ticker_id = ticker_id_prev = 0xff;
   283c4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   283c8:	1d0a      	adds	r2, r1, #4
	ticker_id = ticker_id_prev = 0xff;
   283ca:	f8cd 9010 	str.w	r9, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   283ce:	2100      	movs	r1, #0
   283d0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 284d0 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
   283d4:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 284d4 <ull_sched_after_mstr_slot_get+0x11c>
   283d8:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 284d8 <ull_sched_after_mstr_slot_get+0x120>
   283dc:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 284dc <ull_sched_after_mstr_slot_get+0x124>
{
   283e0:	9309      	str	r3, [sp, #36]	; 0x24
   283e2:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   283e4:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   283e6:	6019      	str	r1, [r3, #0]
   283e8:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
   283ea:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   283ec:	9106      	str	r1, [sp, #24]
   283ee:	af0d      	add	r7, sp, #52	; 0x34
   283f0:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
   283f2:	2302      	movs	r3, #2
   283f4:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   283f6:	e9cd 8701 	strd	r8, r7, [sp, #4]
   283fa:	9600      	str	r6, [sp, #0]
   283fc:	462b      	mov	r3, r5
   283fe:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   28402:	4621      	mov	r1, r4
   28404:	2000      	movs	r0, #0
   28406:	f00d fbc1 	bl	35b8c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   2840a:	2802      	cmp	r0, #2
   2840c:	d02f      	beq.n	2846e <ull_sched_after_mstr_slot_get+0xb6>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   2840e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
   28410:	2b00      	cmp	r3, #0
   28412:	d132      	bne.n	2847a <ull_sched_after_mstr_slot_get+0xc2>

		if (ticker_id == 0xff) {
   28414:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   28418:	28ff      	cmp	r0, #255	; 0xff
   2841a:	d03e      	beq.n	2849a <ull_sched_after_mstr_slot_get+0xe2>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
   2841c:	3805      	subs	r0, #5
   2841e:	b2c3      	uxtb	r3, r0
   28420:	2b05      	cmp	r3, #5
   28422:	d8e6      	bhi.n	283f2 <ull_sched_after_mstr_slot_get+0x3a>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   28424:	b280      	uxth	r0, r0
   28426:	f012 f8db 	bl	3a5e0 <ll_conn_get>
		if (conn && !conn->lll.role) {
   2842a:	2800      	cmp	r0, #0
   2842c:	d0e1      	beq.n	283f2 <ull_sched_after_mstr_slot_get+0x3a>
   2842e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   28432:	2b00      	cmp	r3, #0
   28434:	dbdd      	blt.n	283f2 <ull_sched_after_mstr_slot_get+0x3a>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
   28436:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
   28438:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
   2843a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
   2843c:	29ff      	cmp	r1, #255	; 0xff
   2843e:	d00c      	beq.n	2845a <ull_sched_after_mstr_slot_get+0xa2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   28440:	9906      	ldr	r1, [sp, #24]
   28442:	9207      	str	r2, [sp, #28]
   28444:	4618      	mov	r0, r3
   28446:	9304      	str	r3, [sp, #16]
   28448:	f00d fc00 	bl	35c4c <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   2844c:	9b05      	ldr	r3, [sp, #20]
   2844e:	9a08      	ldr	r2, [sp, #32]
   28450:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
   28452:	4288      	cmp	r0, r1
   28454:	9b04      	ldr	r3, [sp, #16]
   28456:	9a07      	ldr	r2, [sp, #28]
   28458:	d822      	bhi.n	284a0 <ull_sched_after_mstr_slot_get+0xe8>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
   2845a:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
   2845e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   28462:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   28464:	e7c5      	b.n	283f2 <ull_sched_after_mstr_slot_get+0x3a>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   28466:	4621      	mov	r1, r4
   28468:	2000      	movs	r0, #0
   2846a:	f00d fbd5 	bl	35c18 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   2846e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28470:	2b02      	cmp	r3, #2
   28472:	d0f8      	beq.n	28466 <ull_sched_after_mstr_slot_get+0xae>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   28474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
   28476:	2b00      	cmp	r3, #0
   28478:	d0cc      	beq.n	28414 <ull_sched_after_mstr_slot_get+0x5c>
   2847a:	2373      	movs	r3, #115	; 0x73
   2847c:	465a      	mov	r2, fp
   2847e:	4651      	mov	r1, sl
   28480:	4648      	mov	r0, r9
   28482:	f022 f810 	bl	4a4a6 <printk>
   28486:	4040      	eors	r0, r0
   28488:	f380 8811 	msr	BASEPRI, r0
   2848c:	f04f 0003 	mov.w	r0, #3
   28490:	df02      	svc	2
		if (ticker_id == 0xff) {
   28492:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   28496:	28ff      	cmp	r0, #255	; 0xff
   28498:	d1c0      	bne.n	2841c <ull_sched_after_mstr_slot_get+0x64>
		}
	}

	if (ticker_id_prev != 0xff) {
   2849a:	9b04      	ldr	r3, [sp, #16]
   2849c:	2bff      	cmp	r3, #255	; 0xff
   2849e:	d010      	beq.n	284c2 <ull_sched_after_mstr_slot_get+0x10a>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   284a0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   284a4:	480e      	ldr	r0, [pc, #56]	; (284e0 <ull_sched_after_mstr_slot_get+0x128>)
   284a6:	4413      	add	r3, r2
   284a8:	fba3 0100 	umull	r0, r1, r3, r0
   284ac:	2207      	movs	r2, #7
   284ae:	fb02 1103 	mla	r1, r2, r3, r1
   284b2:	a305      	add	r3, pc, #20	; (adr r3, 284c8 <ull_sched_after_mstr_slot_get+0x110>)
   284b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   284b8:	f7fd fe22 	bl	26100 <__aeabi_uldivmod>
   284bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
   284be:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   284c0:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
   284c2:	b00f      	add	sp, #60	; 0x3c
   284c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   284c8:	3b9aca00 	.word	0x3b9aca00
   284cc:	00000000 	.word	0x00000000
   284d0:	0003eed1 	.word	0x0003eed1
   284d4:	000558fc 	.word	0x000558fc
   284d8:	00055940 	.word	0x00055940
   284dc:	0005512c 	.word	0x0005512c
   284e0:	1afd498d 	.word	0x1afd498d
   284e4:	00000000 	.word	0x00000000

000284e8 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
   284e8:	b570      	push	{r4, r5, r6, lr}
   284ea:	b082      	sub	sp, #8
   284ec:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
   284ee:	9201      	str	r2, [sp, #4]
{
   284f0:	4615      	mov	r5, r2
   284f2:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
   284f4:	aa01      	add	r2, sp, #4
   284f6:	2002      	movs	r0, #2
   284f8:	f7ff ff5e 	bl	283b8 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
   284fc:	6823      	ldr	r3, [r4, #0]
   284fe:	b30b      	cbz	r3, 28544 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
   28500:	9801      	ldr	r0, [sp, #4]
   28502:	1b43      	subs	r3, r0, r5
   28504:	021b      	lsls	r3, r3, #8
   28506:	d41f      	bmi.n	28548 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
   28508:	4629      	mov	r1, r5
   2850a:	f00d fb9f 	bl	35c4c <ticker_ticks_diff_get>
   2850e:	4a1a      	ldr	r2, [pc, #104]	; (28578 <after_mstr_offset_get+0x90>)
   28510:	4603      	mov	r3, r0
   28512:	2107      	movs	r1, #7
   28514:	fba0 0202 	umull	r0, r2, r0, r2
   28518:	fb01 2103 	mla	r1, r1, r3, r2
   2851c:	a314      	add	r3, pc, #80	; (adr r3, 28570 <after_mstr_offset_get+0x88>)
   2851e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28522:	f7fd fded 	bl	26100 <__aeabi_uldivmod>
   28526:	6822      	ldr	r2, [r4, #0]
   28528:	4402      	add	r2, r0
   2852a:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
   2852c:	2a00      	cmp	r2, #0
   2852e:	db09      	blt.n	28544 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
   28530:	f240 40e2 	movw	r0, #1250	; 0x4e2
   28534:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
   28538:	4290      	cmp	r0, r2
   2853a:	d203      	bcs.n	28544 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
   2853c:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
   2853e:	4282      	cmp	r2, r0
   28540:	d8fc      	bhi.n	2853c <after_mstr_offset_get+0x54>
   28542:	6022      	str	r2, [r4, #0]
		}
	}
}
   28544:	b002      	add	sp, #8
   28546:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   28548:	4601      	mov	r1, r0
   2854a:	4628      	mov	r0, r5
   2854c:	f00d fb7e 	bl	35c4c <ticker_ticks_diff_get>
   28550:	4a09      	ldr	r2, [pc, #36]	; (28578 <after_mstr_offset_get+0x90>)
   28552:	4603      	mov	r3, r0
   28554:	2107      	movs	r1, #7
   28556:	fba0 0202 	umull	r0, r2, r0, r2
   2855a:	fb01 2103 	mla	r1, r1, r3, r2
   2855e:	a304      	add	r3, pc, #16	; (adr r3, 28570 <after_mstr_offset_get+0x88>)
   28560:	e9d3 2300 	ldrd	r2, r3, [r3]
   28564:	f7fd fdcc 	bl	26100 <__aeabi_uldivmod>
   28568:	6822      	ldr	r2, [r4, #0]
   2856a:	1a12      	subs	r2, r2, r0
   2856c:	6022      	str	r2, [r4, #0]
   2856e:	e7dd      	b.n	2852c <after_mstr_offset_get+0x44>
   28570:	3b9aca00 	.word	0x3b9aca00
   28574:	00000000 	.word	0x00000000
   28578:	1afd498d 	.word	0x1afd498d
   2857c:	00000000 	.word	0x00000000

00028580 <ull_sched_mfy_win_offset_select>:
{
   28580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28584:	f8b0 11a4 	ldrh.w	r1, [r0, #420]	; 0x1a4
{
   28588:	b088      	sub	sp, #32
   2858a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   2858c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   28590:	4847      	ldr	r0, [pc, #284]	; (286b0 <ull_sched_mfy_win_offset_select+0x130>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   28592:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28594:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   28598:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
   2859a:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   2859c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
   285a0:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   285a4:	fba1 0100 	umull	r0, r1, r1, r0
   285a8:	a33f      	add	r3, pc, #252	; (adr r3, 286a8 <ull_sched_mfy_win_offset_select+0x128>)
   285aa:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   285ae:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   285b0:	f7fd fda6 	bl	26100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
   285b4:	f10d 030f 	add.w	r3, sp, #15
   285b8:	9501      	str	r5, [sp, #4]
   285ba:	9300      	str	r3, [sp, #0]
   285bc:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   285c0:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
   285c2:	aa04      	add	r2, sp, #16
   285c4:	4620      	mov	r0, r4
   285c6:	2101      	movs	r1, #1
   285c8:	f016 fc84 	bl	3eed4 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
   285cc:	f89d 800f 	ldrb.w	r8, [sp, #15]
   285d0:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
   285d4:	fa5f fc8c 	uxtb.w	ip, ip
   285d8:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
   285dc:	4630      	mov	r0, r6
   285de:	f504 77d2 	add.w	r7, r4, #420	; 0x1a4
   285e2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
   285e6:	f504 76d8 	add.w	r6, r4, #432	; 0x1b0
			if (win_offset_s != 0xffff) {
   285ea:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
   285ee:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
   285f0:	f1b8 0f00 	cmp.w	r8, #0
   285f4:	d00a      	beq.n	2860c <ull_sched_mfy_win_offset_select+0x8c>
   285f6:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
   285f8:	4572      	cmp	r2, lr
   285fa:	d004      	beq.n	28606 <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
   285fc:	8819      	ldrh	r1, [r3, #0]
   285fe:	4291      	cmp	r1, r2
				has_offset_s = 1U;
   28600:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
   28604:	d01d      	beq.n	28642 <ull_sched_mfy_win_offset_select+0xc2>
		while (offset_index_m < offset_m_max) {
   28606:	3302      	adds	r3, #2
   28608:	459c      	cmp	ip, r3
   2860a:	d1f5      	bne.n	285f8 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
   2860c:	3702      	adds	r7, #2
   2860e:	42be      	cmp	r6, r7
   28610:	d1ed      	bne.n	285ee <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   28612:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	} else if (!has_offset_s) {
   28616:	bb48      	cbnz	r0, 2866c <ull_sched_mfy_win_offset_select+0xec>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
   28618:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2861c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   28620:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
   28624:	0a10      	lsrs	r0, r2, #8
   28626:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
	dst[0] = val;
   2862a:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
   2862c:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   2862e:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   28632:	2204      	movs	r2, #4
   28634:	f362 0302 	bfi	r3, r2, #0, #3
   28638:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   2863c:	b008      	add	sp, #32
   2863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   28642:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
   28646:	f240 43e2 	movw	r3, #1250	; 0x4e2
   2864a:	fb02 f303 	mul.w	r3, r2, r3
   2864e:	0a10      	lsrs	r0, r2, #8
   28650:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	dst[0] = val;
   28654:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
   28656:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   28658:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   2865c:	2204      	movs	r2, #4
   2865e:	f362 0302 	bfi	r3, r2, #0, #3
   28662:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   28666:	b008      	add	sp, #32
   28668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
   2866c:	2203      	movs	r2, #3
   2866e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   28672:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
   28676:	f894 111a 	ldrb.w	r1, [r4, #282]	; 0x11a
   2867a:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2867c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   28680:	2011      	movs	r0, #17
   28682:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   28686:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
   2868a:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   2868e:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   28690:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   28692:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   28696:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
   28698:	f884 111a 	strb.w	r1, [r4, #282]	; 0x11a
}
   2869c:	b008      	add	sp, #32
   2869e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   286a2:	bf00      	nop
   286a4:	f3af 8000 	nop.w
   286a8:	1afd498d 	.word	0x1afd498d
   286ac:	00000007 	.word	0x00000007
   286b0:	3b9aca00 	.word	0x3b9aca00
   286b4:	00000000 	.word	0x00000000

000286b8 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
   286b8:	b538      	push	{r3, r4, r5, lr}
   286ba:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
   286bc:	f019 fbd8 	bl	41e70 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
   286c0:	7da2      	ldrb	r2, [r4, #22]
   286c2:	f3c2 0341 	ubfx	r3, r2, #1, #2
   286c6:	3301      	adds	r3, #1
   286c8:	f003 0303 	and.w	r3, r3, #3
   286cc:	2b03      	cmp	r3, #3
   286ce:	d034      	beq.n	2873a <isr_window+0x82>
   286d0:	f363 0242 	bfi	r2, r3, #1, #2
   286d4:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
   286d6:	f103 0025 	add.w	r0, r3, #37	; 0x25
   286da:	f018 fb05 	bl	40ce8 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
   286de:	6863      	ldr	r3, [r4, #4]
   286e0:	b30b      	cbz	r3, 28726 <isr_window+0x6e>
   286e2:	6923      	ldr	r3, [r4, #16]
   286e4:	b1fb      	cbz	r3, 28726 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
   286e6:	f01b f8b3 	bl	43850 <radio_tmr_start_get>
   286ea:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
   286ec:	f00d faac 	bl	35c48 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   286f0:	1cc1      	adds	r1, r0, #3
   286f2:	2000      	movs	r0, #0
   286f4:	f01b f87a 	bl	437ec <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
   286f8:	f01b f8f6 	bl	438e8 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
   286fc:	f01b f8a8 	bl	43850 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28700:	4629      	mov	r1, r5
   28702:	f00d faa3 	bl	35c4c <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   28706:	4912      	ldr	r1, [pc, #72]	; (28750 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28708:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2870a:	2207      	movs	r2, #7
   2870c:	fba0 0101 	umull	r0, r1, r0, r1
   28710:	fb02 1103 	mla	r1, r2, r3, r1
   28714:	a30c      	add	r3, pc, #48	; (adr r3, 28748 <isr_window+0x90>)
   28716:	e9d3 2300 	ldrd	r2, r3, [r3]
   2871a:	f7fd fcf1 	bl	26100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
   2871e:	6923      	ldr	r3, [r4, #16]
   28720:	1a1b      	subs	r3, r3, r0
   28722:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
   28724:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
   28726:	f00d fa8f 	bl	35c48 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   2872a:	1cc1      	adds	r1, r0, #3
   2872c:	2000      	movs	r0, #0
   2872e:	f01b f85d 	bl	437ec <radio_tmr_start_tick>
}
   28732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   28736:	f01b b8d7 	b.w	438e8 <radio_tmr_end_capture>
		lll->chan = 0U;
   2873a:	f36f 0242 	bfc	r2, #1, #2
   2873e:	75a2      	strb	r2, [r4, #22]
   28740:	2025      	movs	r0, #37	; 0x25
   28742:	e7ca      	b.n	286da <isr_window+0x22>
   28744:	f3af 8000 	nop.w
   28748:	3b9aca00 	.word	0x3b9aca00
   2874c:	00000000 	.word	0x00000000
   28750:	1afd498d 	.word	0x1afd498d
   28754:	00000000 	.word	0x00000000

00028758 <isr_rx>:
{
   28758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2875c:	b087      	sub	sp, #28
   2875e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   28760:	f01a fe58 	bl	43414 <radio_is_done>
	if (trx_done) {
   28764:	b2c0      	uxtb	r0, r0
   28766:	b950      	cbnz	r0, 2877e <isr_rx+0x26>
	lll_isr_status_reset();
   28768:	f018 fb16 	bl	40d98 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   2876c:	48b4      	ldr	r0, [pc, #720]	; (28a40 <isr_rx+0x2e8>)
   2876e:	4621      	mov	r1, r4
   28770:	f01a fd2a 	bl	431c8 <radio_isr_set>
}
   28774:	b007      	add	sp, #28
   28776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   2877a:	f01a be21 	b.w	433c0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   2877e:	f01a fe69 	bl	43454 <radio_crc_is_valid>
   28782:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   28784:	f01a ff84 	bl	43690 <radio_filter_has_match>
   28788:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
   2878a:	f01a ff8b 	bl	436a4 <radio_filter_match_get>
   2878e:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
   28790:	f01b f9a0 	bl	43ad4 <radio_ar_has_match>
   28794:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   28796:	f01b f981 	bl	43a9c <radio_ar_match_get>
   2879a:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
   2879c:	f01a ff3c 	bl	43618 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
   287a0:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
   287a2:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   287a4:	f01a ff1e 	bl	435e4 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   287a8:	f018 faf6 	bl	40d98 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   287ac:	2d00      	cmp	r5, #0
   287ae:	d0dd      	beq.n	2876c <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
   287b0:	2001      	movs	r0, #1
   287b2:	f00f fe87 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   287b6:	4605      	mov	r5, r0
   287b8:	2800      	cmp	r0, #0
   287ba:	f000 817d 	beq.w	28ab8 <isr_rx+0x360>
	rl_idx = devmatch_ok ?
   287be:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
   287c2:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
   287c4:	f040 816f 	bne.w	28aa6 <isr_rx+0x34e>
   287c8:	2e00      	cmp	r6, #0
   287ca:	f040 80cc 	bne.w	28966 <isr_rx+0x20e>
   287ce:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
   287d0:	465a      	mov	r2, fp
   287d2:	463b      	mov	r3, r7
   287d4:	4631      	mov	r1, r6
   287d6:	4620      	mov	r0, r4
   287d8:	f019 fd78 	bl	422cc <lll_scan_isr_rx_check>
	if (has_adva &&
   287dc:	2800      	cmp	r0, #0
   287de:	d0c5      	beq.n	2876c <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   287e0:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
   287e2:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
   287e4:	2100      	movs	r1, #0
   287e6:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
   287ea:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   287ee:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
   287f2:	2a00      	cmp	r2, #0
   287f4:	f000 80d3 	beq.w	2899e <isr_rx+0x246>
   287f8:	6862      	ldr	r2, [r4, #4]
   287fa:	f892 2020 	ldrb.w	r2, [r2, #32]
   287fe:	0790      	lsls	r0, r2, #30
   28800:	f100 80cd 	bmi.w	2899e <isr_rx+0x246>
   28804:	2907      	cmp	r1, #7
   28806:	d0b1      	beq.n	2876c <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28808:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
   2880a:	0712      	lsls	r2, r2, #28
   2880c:	f140 8162 	bpl.w	28ad4 <isr_rx+0x37c>
   28810:	2900      	cmp	r1, #0
   28812:	f040 80ae 	bne.w	28972 <isr_rx+0x21a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28816:	7f6b      	ldrb	r3, [r5, #29]
   28818:	2b25      	cmp	r3, #37	; 0x25
   2881a:	f200 8122 	bhi.w	28a62 <isr_rx+0x30a>
			rx = ull_pdu_rx_alloc_peek(4);
   2881e:	2004      	movs	r0, #4
   28820:	f00f fe50 	bl	384c4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   28824:	2800      	cmp	r0, #0
   28826:	d0a1      	beq.n	2876c <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
   28828:	f01b f866 	bl	438f8 <radio_tmr_end_get>
		if (!lll->ticks_window) {
   2882c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
   2882e:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
   28830:	b943      	cbnz	r3, 28844 <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
   28832:	8c23      	ldrh	r3, [r4, #32]
   28834:	f240 2271 	movw	r2, #625	; 0x271
   28838:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
   2883c:	fbb0 f2f3 	udiv	r2, r0, r3
   28840:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   28844:	6823      	ldr	r3, [r4, #0]
   28846:	691a      	ldr	r2, [r3, #16]
   28848:	4b7e      	ldr	r3, [pc, #504]	; (28a44 <isr_rx+0x2ec>)
   2884a:	2107      	movs	r1, #7
   2884c:	fba2 0303 	umull	r0, r3, r2, r3
   28850:	fb01 3102 	mla	r1, r1, r2, r3
   28854:	a378      	add	r3, pc, #480	; (adr r3, 28a38 <isr_rx+0x2e0>)
   28856:	e9d3 2300 	ldrd	r2, r3, [r3]
   2885a:	f7fd fc51 	bl	26100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
   2885e:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   28862:	4543      	cmp	r3, r8
   28864:	d382      	bcc.n	2876c <isr_rx+0x14>
		radio_switch_complete_and_disable();
   28866:	f01a feaf 	bl	435c8 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   2886a:	4638      	mov	r0, r7
		lll_conn = lll->conn;
   2886c:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   2886e:	f017 fd17 	bl	402a0 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   28872:	7de3      	ldrb	r3, [r4, #23]
   28874:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28876:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
   28878:	f140 81cf 	bpl.w	28c1a <isr_rx+0x4c2>
   2887c:	2800      	cmp	r0, #0
   2887e:	f000 81cc 	beq.w	28c1a <isr_rx+0x4c2>
			init_addr = lrpa->val;
   28882:	4683      	mov	fp, r0
			init_tx_addr = 1;
   28884:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   28888:	f01a fdf2 	bl	43470 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
   2888c:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   2888e:	aa05      	add	r2, sp, #20
   28890:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
   28892:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   28896:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
   28898:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   2889a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2889e:	9200      	str	r2, [sp, #0]
   288a0:	4620      	mov	r0, r4
   288a2:	2200      	movs	r2, #0
   288a4:	e9cd 8b01 	strd	r8, fp, [sp, #4]
   288a8:	f019 fd2a 	bl	42300 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
   288ac:	4650      	mov	r0, sl
   288ae:	f01a fd65 	bl	4337c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   288b2:	f01a fda5 	bl	43400 <radio_is_ready>
   288b6:	2800      	cmp	r0, #0
   288b8:	f040 81c5 	bne.w	28c46 <isr_rx+0x4ee>
		radio_isr_set(isr_done_cleanup, lll);
   288bc:	4862      	ldr	r0, [pc, #392]	; (28a48 <isr_rx+0x2f0>)
   288be:	4621      	mov	r1, r4
   288c0:	f01a fc82 	bl	431c8 <radio_isr_set>
		lll->conn->central.initiated = 1U;
   288c4:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
   288c6:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
   288c8:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   288cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
   288d0:	f042 0201 	orr.w	r2, r2, #1
   288d4:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   288d8:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
   288da:	f00f fe11 	bl	38500 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   288de:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
   288e0:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   288e2:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   288e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   288e8:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
   288ea:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
   288ec:	4651      	mov	r1, sl
   288ee:	2224      	movs	r2, #36	; 0x24
   288f0:	301c      	adds	r0, #28
   288f2:	f023 fee0 	bl	4c6b6 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   288f6:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
   288fa:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   288fe:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28902:	f365 1345 	bfi	r3, r5, #5, #1
   28906:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
   2890a:	f01a ffa1 	bl	43850 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
   2890e:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
   28910:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28914:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
   28916:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28918:	f01a fd40 	bl	4339c <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2891c:	2e00      	cmp	r6, #0
   2891e:	bf08      	it	eq
   28920:	27ff      	moveq	r7, #255	; 0xff
   28922:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28926:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
   28928:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   2892a:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
   2892e:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28932:	d003      	beq.n	2893c <isr_rx+0x1e4>
   28934:	f1b9 0300 	subs.w	r3, r9, #0
   28938:	bf18      	it	ne
   2893a:	2301      	movne	r3, #1
   2893c:	f898 201a 	ldrb.w	r2, [r8, #26]
   28940:	f363 0200 	bfi	r2, r3, #0, #1
   28944:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
   28948:	f00f fdda 	bl	38500 <ull_pdu_rx_alloc>
   2894c:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   2894e:	4641      	mov	r1, r8
   28950:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
   28954:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
   28958:	f00f fde8 	bl	3852c <ull_rx_put>
		ull_rx_sched();
   2895c:	f00f fdf6 	bl	3854c <ull_rx_sched>
}
   28960:	b007      	add	sp, #28
   28962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   28966:	fa5f f08a 	uxtb.w	r0, sl
   2896a:	f017 fd27 	bl	403bc <ull_filter_lll_rl_irk_idx>
   2896e:	4607      	mov	r7, r0
   28970:	e72e      	b.n	287d0 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28972:	2901      	cmp	r1, #1
   28974:	d115      	bne.n	289a2 <isr_rx+0x24a>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   28976:	7f6b      	ldrb	r3, [r5, #29]
   28978:	2b0c      	cmp	r3, #12
   2897a:	f47f aef7 	bne.w	2876c <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
   2897e:	7f2a      	ldrb	r2, [r5, #28]
   28980:	9700      	str	r7, [sp, #0]
   28982:	2300      	movs	r3, #0
   28984:	9301      	str	r3, [sp, #4]
   28986:	09d2      	lsrs	r2, r2, #7
   28988:	f105 0324 	add.w	r3, r5, #36	; 0x24
   2898c:	4620      	mov	r0, r4
   2898e:	f019 fbef 	bl	42170 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
   28992:	2800      	cmp	r0, #0
   28994:	f47f af43 	bne.w	2881e <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28998:	7f29      	ldrb	r1, [r5, #28]
   2899a:	f001 010f 	and.w	r1, r1, #15
   2899e:	2900      	cmp	r1, #0
   289a0:	d054      	beq.n	28a4c <isr_rx+0x2f4>
   289a2:	2906      	cmp	r1, #6
   289a4:	d052      	beq.n	28a4c <isr_rx+0x2f4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   289a6:	2902      	cmp	r1, #2
   289a8:	f000 80a7 	beq.w	28afa <isr_rx+0x3a2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   289ac:	2901      	cmp	r1, #1
   289ae:	d158      	bne.n	28a62 <isr_rx+0x30a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   289b0:	7f6b      	ldrb	r3, [r5, #29]
   289b2:	2b0c      	cmp	r3, #12
   289b4:	f47f aeda 	bne.w	2876c <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   289b8:	7f2a      	ldrb	r2, [r5, #28]
   289ba:	9700      	str	r7, [sp, #0]
   289bc:	f10d 0313 	add.w	r3, sp, #19
   289c0:	9301      	str	r3, [sp, #4]
   289c2:	09d2      	lsrs	r2, r2, #7
   289c4:	f105 0324 	add.w	r3, r5, #36	; 0x24
   289c8:	2100      	movs	r1, #0
   289ca:	4620      	mov	r0, r4
   289cc:	f019 fbd0 	bl	42170 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   289d0:	2800      	cmp	r0, #0
   289d2:	d046      	beq.n	28a62 <isr_rx+0x30a>
		 (pdu_adv_rx->len != 0) &&
   289d4:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   289d6:	2b00      	cmp	r3, #0
   289d8:	f43f aec8 	beq.w	2876c <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   289dc:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
   289de:	b12b      	cbz	r3, 289ec <isr_rx+0x294>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   289e0:	7f2b      	ldrb	r3, [r5, #28]
   289e2:	f003 030f 	and.w	r3, r3, #15
   289e6:	2b07      	cmp	r3, #7
   289e8:	f47f aec0 	bne.w	2876c <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   289ec:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   289ee:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
   289f2:	f00f fd67 	bl	384c4 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   289f6:	4605      	mov	r5, r0
   289f8:	2800      	cmp	r0, #0
   289fa:	f43f aeb7 	beq.w	2876c <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   289fe:	f00f fd7f 	bl	38500 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   28a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28a06:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28a08:	2305      	movs	r3, #5
   28a0a:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28a0c:	f1b8 0f00 	cmp.w	r8, #0
   28a10:	d16f      	bne.n	28af2 <isr_rx+0x39a>
   28a12:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a14:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28a16:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a18:	2e00      	cmp	r6, #0
   28a1a:	bf08      	it	eq
   28a1c:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a1e:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   28a22:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a24:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a26:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a28:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a2a:	f00f fd7f 	bl	3852c <ull_rx_put>
	ull_rx_sched();
   28a2e:	f00f fd8d 	bl	3854c <ull_rx_sched>
	if (!err) {
   28a32:	e69b      	b.n	2876c <isr_rx+0x14>
   28a34:	f3af 8000 	nop.w
   28a38:	3b9aca00 	.word	0x3b9aca00
   28a3c:	00000000 	.word	0x00000000
   28a40:	00041f29 	.word	0x00041f29
   28a44:	1afd498d 	.word	0x1afd498d
   28a48:	00042121 	.word	0x00042121
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28a4c:	7f6b      	ldrb	r3, [r5, #29]
   28a4e:	2b25      	cmp	r3, #37	; 0x25
   28a50:	d807      	bhi.n	28a62 <isr_rx+0x30a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   28a52:	7da2      	ldrb	r2, [r4, #22]
   28a54:	0692      	lsls	r2, r2, #26
   28a56:	d502      	bpl.n	28a5e <isr_rx+0x306>
		   !lll->conn) {
   28a58:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
   28a5a:	2a00      	cmp	r2, #0
   28a5c:	d04f      	beq.n	28afe <isr_rx+0x3a6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28a5e:	2b25      	cmp	r3, #37	; 0x25
   28a60:	d9b9      	bls.n	289d6 <isr_rx+0x27e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28a62:	7f2b      	ldrb	r3, [r5, #28]
   28a64:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
   28a68:	2b04      	cmp	r3, #4
   28a6a:	f47f ae7f 	bne.w	2876c <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28a6e:	7f6b      	ldrb	r3, [r5, #29]
   28a70:	2b25      	cmp	r3, #37	; 0x25
   28a72:	f63f ae7b 	bhi.w	2876c <isr_rx+0x14>
		   (lll->state != 0U) &&
   28a76:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   28a78:	07d9      	lsls	r1, r3, #31
   28a7a:	f57f ae77 	bpl.w	2876c <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   28a7e:	f01a fcf7 	bl	43470 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28a82:	7f2b      	ldrb	r3, [r5, #28]
   28a84:	7802      	ldrb	r2, [r0, #0]
   28a86:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28a8a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   28a8e:	f47f ae6d 	bne.w	2876c <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
   28a92:	3008      	adds	r0, #8
   28a94:	2206      	movs	r2, #6
   28a96:	f105 011e 	add.w	r1, r5, #30
   28a9a:	f023 fdfb 	bl	4c694 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28a9e:	2800      	cmp	r0, #0
   28aa0:	f47f ae64 	bne.w	2876c <isr_rx+0x14>
   28aa4:	e796      	b.n	289d4 <isr_rx+0x27c>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
   28aa6:	7da0      	ldrb	r0, [r4, #22]
   28aa8:	fa5f f189 	uxtb.w	r1, r9
   28aac:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28ab0:	f017 fc1a 	bl	402e8 <ull_filter_lll_rl_idx>
   28ab4:	4607      	mov	r7, r0
   28ab6:	e68b      	b.n	287d0 <isr_rx+0x78>
	LL_ASSERT(node_rx);
   28ab8:	4a71      	ldr	r2, [pc, #452]	; (28c80 <isr_rx+0x528>)
   28aba:	4972      	ldr	r1, [pc, #456]	; (28c84 <isr_rx+0x52c>)
   28abc:	4872      	ldr	r0, [pc, #456]	; (28c88 <isr_rx+0x530>)
   28abe:	f240 23c3 	movw	r3, #707	; 0x2c3
   28ac2:	f021 fcf0 	bl	4a4a6 <printk>
   28ac6:	4040      	eors	r0, r0
   28ac8:	f380 8811 	msr	BASEPRI, r0
   28acc:	f04f 0003 	mov.w	r0, #3
   28ad0:	df02      	svc	2
   28ad2:	e674      	b.n	287be <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
   28ad4:	2fff      	cmp	r7, #255	; 0xff
   28ad6:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28ada:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
   28ade:	d078      	beq.n	28bd2 <isr_rx+0x47a>
		return (rl_idx == lll->rl_idx);
   28ae0:	7e23      	ldrb	r3, [r4, #24]
   28ae2:	1bdb      	subs	r3, r3, r7
   28ae4:	fab3 f383 	clz	r3, r3
   28ae8:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28aea:	2b00      	cmp	r3, #0
   28aec:	f47f ae90 	bne.w	28810 <isr_rx+0xb8>
   28af0:	e755      	b.n	2899e <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28af2:	f01a fd83 	bl	435fc <radio_rssi_get>
   28af6:	b2c0      	uxtb	r0, r0
   28af8:	e78c      	b.n	28a14 <isr_rx+0x2bc>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28afa:	7f6b      	ldrb	r3, [r5, #29]
   28afc:	e7af      	b.n	28a5e <isr_rx+0x306>
		radio_tmr_tifs_set(EVENT_IFS_US);
   28afe:	2096      	movs	r0, #150	; 0x96
   28b00:	f01a fde6 	bl	436d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   28b04:	2000      	movs	r0, #0
   28b06:	f01a fcb7 	bl	43478 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
   28b0a:	2003      	movs	r0, #3
   28b0c:	f00f fcda 	bl	384c4 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   28b10:	4681      	mov	r9, r0
   28b12:	2800      	cmp	r0, #0
   28b14:	f43f ae2a 	beq.w	2876c <isr_rx+0x14>
	ull_pdu_rx_alloc();
   28b18:	f00f fcf2 	bl	38500 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   28b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28b20:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28b24:	2305      	movs	r3, #5
   28b26:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28b2a:	f1b8 0f00 	cmp.w	r8, #0
   28b2e:	d170      	bne.n	28c12 <isr_rx+0x4ba>
   28b30:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28b32:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28b34:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28b38:	bf14      	ite	ne
   28b3a:	463b      	movne	r3, r7
   28b3c:	23ff      	moveq	r3, #255	; 0xff
   28b3e:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28b42:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28b46:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28b4a:	f36f 0341 	bfc	r3, #1, #1
   28b4e:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28b52:	4649      	mov	r1, r9
   28b54:	f00f fcea 	bl	3852c <ull_rx_put>
	ull_rx_sched();
   28b58:	f00f fcf8 	bl	3854c <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   28b5c:	f01a fc88 	bl	43470 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28b60:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
   28b62:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28b64:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   28b68:	7832      	ldrb	r2, [r6, #0]
   28b6a:	01db      	lsls	r3, r3, #7
   28b6c:	f002 0270 	and.w	r2, r2, #112	; 0x70
   28b70:	f043 0303 	orr.w	r3, r3, #3
   28b74:	4313      	orrs	r3, r2
   28b76:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   28b78:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28b7a:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   28b7c:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28b7e:	f017 fb8f 	bl	402a0 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   28b82:	7de3      	ldrb	r3, [r4, #23]
   28b84:	079f      	lsls	r7, r3, #30
   28b86:	d54f      	bpl.n	28c28 <isr_rx+0x4d0>
   28b88:	2800      	cmp	r0, #0
   28b8a:	d04d      	beq.n	28c28 <isr_rx+0x4d0>
			pdu_tx->tx_addr = 1;
   28b8c:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   28b8e:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
   28b90:	4630      	mov	r0, r6
   28b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28b96:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   28b9a:	2206      	movs	r2, #6
   28b9c:	f023 fd8b 	bl	4c6b6 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   28ba0:	2206      	movs	r2, #6
   28ba2:	f105 011e 	add.w	r1, r5, #30
   28ba6:	f106 0008 	add.w	r0, r6, #8
   28baa:	f023 fd84 	bl	4c6b6 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   28bae:	4630      	mov	r0, r6
   28bb0:	f01a fbe4 	bl	4337c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   28bb4:	f01a fc24 	bl	43400 <radio_is_ready>
   28bb8:	2800      	cmp	r0, #0
   28bba:	d152      	bne.n	28c62 <isr_rx+0x50a>
		radio_tmr_end_capture();
   28bbc:	f01a fe94 	bl	438e8 <radio_tmr_end_capture>
		lll->state = 1U;
   28bc0:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   28bc2:	4832      	ldr	r0, [pc, #200]	; (28c8c <isr_rx+0x534>)
		lll->state = 1U;
   28bc4:	f043 0301 	orr.w	r3, r3, #1
   28bc8:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   28bca:	4621      	mov	r1, r4
   28bcc:	f01a fafc 	bl	431c8 <radio_isr_set>
	if (!err) {
   28bd0:	e6c6      	b.n	28960 <isr_rx+0x208>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28bd2:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
   28bd6:	aa05      	add	r2, sp, #20
   28bd8:	4651      	mov	r1, sl
   28bda:	4648      	mov	r0, r9
   28bdc:	f017 fca4 	bl	40528 <ull_filter_lll_rl_addr_allowed>
   28be0:	2800      	cmp	r0, #0
   28be2:	f43f aed9 	beq.w	28998 <isr_rx+0x240>
	return ((lll->adv_addr_type == addr_type) &&
   28be6:	7de3      	ldrb	r3, [r4, #23]
   28be8:	f003 0301 	and.w	r3, r3, #1
   28bec:	454b      	cmp	r3, r9
   28bee:	f47f aed3 	bne.w	28998 <isr_rx+0x240>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
   28bf2:	4651      	mov	r1, sl
   28bf4:	2206      	movs	r2, #6
   28bf6:	f104 0008 	add.w	r0, r4, #8
   28bfa:	f023 fd4b 	bl	4c694 <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28bfe:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
   28c00:	fab0 f380 	clz	r3, r0
   28c04:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28c06:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28c0a:	2b00      	cmp	r3, #0
   28c0c:	f47f ae00 	bne.w	28810 <isr_rx+0xb8>
   28c10:	e6c5      	b.n	2899e <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28c12:	f01a fcf3 	bl	435fc <radio_rssi_get>
   28c16:	b2c3      	uxtb	r3, r0
   28c18:	e78b      	b.n	28b32 <isr_rx+0x3da>
			init_tx_addr = lll->init_addr_type;
   28c1a:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
   28c1e:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
   28c22:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
   28c26:	e62f      	b.n	28888 <isr_rx+0x130>
			pdu_tx->tx_addr = lll->init_addr_type;
   28c28:	7da3      	ldrb	r3, [r4, #22]
   28c2a:	7832      	ldrb	r2, [r6, #0]
   28c2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28c30:	4630      	mov	r0, r6
   28c32:	f363 1286 	bfi	r2, r3, #6, #1
   28c36:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   28c3a:	f104 0119 	add.w	r1, r4, #25
   28c3e:	2206      	movs	r2, #6
   28c40:	f023 fd39 	bl	4c6b6 <memcpy>
   28c44:	e7ac      	b.n	28ba0 <isr_rx+0x448>
		LL_ASSERT(!radio_is_ready());
   28c46:	4a0e      	ldr	r2, [pc, #56]	; (28c80 <isr_rx+0x528>)
   28c48:	4911      	ldr	r1, [pc, #68]	; (28c90 <isr_rx+0x538>)
   28c4a:	480f      	ldr	r0, [pc, #60]	; (28c88 <isr_rx+0x530>)
   28c4c:	f240 4391 	movw	r3, #1169	; 0x491
   28c50:	f021 fc29 	bl	4a4a6 <printk>
   28c54:	4040      	eors	r0, r0
   28c56:	f380 8811 	msr	BASEPRI, r0
   28c5a:	f04f 0003 	mov.w	r0, #3
   28c5e:	df02      	svc	2
   28c60:	e62c      	b.n	288bc <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
   28c62:	4a07      	ldr	r2, [pc, #28]	; (28c80 <isr_rx+0x528>)
   28c64:	490a      	ldr	r1, [pc, #40]	; (28c90 <isr_rx+0x538>)
   28c66:	4808      	ldr	r0, [pc, #32]	; (28c88 <isr_rx+0x530>)
   28c68:	f240 5316 	movw	r3, #1302	; 0x516
   28c6c:	f021 fc1b 	bl	4a4a6 <printk>
   28c70:	4040      	eors	r0, r0
   28c72:	f380 8811 	msr	BASEPRI, r0
   28c76:	f04f 0003 	mov.w	r0, #3
   28c7a:	df02      	svc	2
   28c7c:	e79e      	b.n	28bbc <isr_rx+0x464>
   28c7e:	bf00      	nop
   28c80:	00055d60 	.word	0x00055d60
   28c84:	00055d14 	.word	0x00055d14
   28c88:	0005512c 	.word	0x0005512c
   28c8c:	00041f3d 	.word	0x00041f3d
   28c90:	00055d1c 	.word	0x00055d1c
   28c94:	00000000 	.word	0x00000000

00028c98 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   28c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c9c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   28c9e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 28d78 <nrf_flash_sync_exe+0xe0>
{
   28ca2:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   28ca4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   28ca8:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   28cac:	f00f fb00 	bl	382b0 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   28cb0:	4f32      	ldr	r7, [pc, #200]	; (28d7c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   28cb2:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   28cb6:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   28cba:	f00c ffc5 	bl	35c48 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   28cbe:	f8d8 4000 	ldr.w	r4, [r8]
   28cc2:	fba4 5407 	umull	r5, r4, r4, r7
   28cc6:	a32a      	add	r3, pc, #168	; (adr r3, 28d70 <nrf_flash_sync_exe+0xd8>)
   28cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   28ccc:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
   28cce:	4621      	mov	r1, r4
   28cd0:	4628      	mov	r0, r5
   28cd2:	f7fd fa15 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   28cd8:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28cda:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
   28cde:	9306      	str	r3, [sp, #24]
   28ce0:	4b27      	ldr	r3, [pc, #156]	; (28d80 <nrf_flash_sync_exe+0xe8>)
   28ce2:	9305      	str	r3, [sp, #20]
   28ce4:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28ce6:	a322      	add	r3, pc, #136	; (adr r3, 28d70 <nrf_flash_sync_exe+0xd8>)
   28ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
   28cec:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
   28cf0:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28cf4:	f7fd fa04 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
   28cfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28cfe:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28d02:	4820      	ldr	r0, [pc, #128]	; (28d84 <nrf_flash_sync_exe+0xec>)
   28d04:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
   28d08:	fba7 0100 	umull	r0, r1, r7, r0
   28d0c:	2307      	movs	r3, #7
   28d0e:	1a28      	subs	r0, r5, r0
   28d10:	fb03 1107 	mla	r1, r3, r7, r1
   28d14:	eb64 0101 	sbc.w	r1, r4, r1
   28d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d1c:	2300      	movs	r3, #0
   28d1e:	f7fd f9ef 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28d22:	9600      	str	r6, [sp, #0]
   28d24:	e9cd 7001 	strd	r7, r0, [sp, #4]
   28d28:	464b      	mov	r3, r9
   28d2a:	465a      	mov	r2, fp
   28d2c:	2103      	movs	r1, #3
   28d2e:	4650      	mov	r0, sl
   28d30:	f00c fe60 	bl	359f4 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   28d34:	f030 0402 	bics.w	r4, r0, #2
   28d38:	d116      	bne.n	28d68 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   28d3a:	4a13      	ldr	r2, [pc, #76]	; (28d88 <nrf_flash_sync_exe+0xf0>)
   28d3c:	4813      	ldr	r0, [pc, #76]	; (28d8c <nrf_flash_sync_exe+0xf4>)
   28d3e:	2300      	movs	r3, #0
   28d40:	f01f fddc 	bl	488fc <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   28d44:	b168      	cbz	r0, 28d62 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   28d46:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   28d4a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   28d4e:	9400      	str	r4, [sp, #0]
   28d50:	4623      	mov	r3, r4
   28d52:	2103      	movs	r1, #3
   28d54:	f00c fed8 	bl	35b08 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   28d58:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   28d5c:	b00f      	add	sp, #60	; 0x3c
   28d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   28d62:	f8d8 000c 	ldr.w	r0, [r8, #12]
   28d66:	e7f9      	b.n	28d5c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
   28d68:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   28d6c:	e7f6      	b.n	28d5c <nrf_flash_sync_exe+0xc4>
   28d6e:	bf00      	nop
   28d70:	1afd498d 	.word	0x1afd498d
   28d74:	00000007 	.word	0x00000007
   28d78:	2000715c 	.word	0x2000715c
   28d7c:	3b9aca00 	.word	0x3b9aca00
   28d80:	00045bb9 	.word	0x00045bb9
   28d84:	1afd498d 	.word	0x1afd498d
   28d88:	000b7b44 	.word	0x000b7b44
   28d8c:	2000716c 	.word	0x2000716c

00028d90 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   28d90:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28d92:	4d0f      	ldr	r5, [pc, #60]	; (28dd0 <nrf_flash_sync_check_time_limit+0x40>)
{
   28d94:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28d96:	f00c ff57 	bl	35c48 <ticker_ticks_now_get>
   28d9a:	68a9      	ldr	r1, [r5, #8]
   28d9c:	f00c ff56 	bl	35c4c <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28da0:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   28da2:	fbb0 f4f4 	udiv	r4, r0, r4
   28da6:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28da8:	480a      	ldr	r0, [pc, #40]	; (28dd4 <nrf_flash_sync_check_time_limit+0x44>)
   28daa:	a307      	add	r3, pc, #28	; (adr r3, 28dc8 <nrf_flash_sync_check_time_limit+0x38>)
   28dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   28db0:	fba1 0100 	umull	r0, r1, r1, r0
   28db4:	f7fd f9a4 	bl	26100 <__aeabi_uldivmod>
   28db8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   28dbc:	4284      	cmp	r4, r0
   28dbe:	bf94      	ite	ls
   28dc0:	2000      	movls	r0, #0
   28dc2:	2001      	movhi	r0, #1
   28dc4:	bd38      	pop	{r3, r4, r5, pc}
   28dc6:	bf00      	nop
   28dc8:	1afd498d 	.word	0x1afd498d
   28dcc:	00000007 	.word	0x00000007
   28dd0:	2000715c 	.word	0x2000715c
   28dd4:	3b9aca00 	.word	0x3b9aca00

00028dd8 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   28dd8:	4801      	ldr	r0, [pc, #4]	; (28de0 <activity_expiry_function+0x8>)
   28dda:	f01f bed5 	b.w	48b88 <k_work_submit>
   28dde:	bf00      	nop
   28de0:	200002a0 	.word	0x200002a0

00028de4 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   28de4:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   28de6:	f028 ff71 	bl	51ccc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   28dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dee:	fba0 0302 	umull	r0, r3, r0, r2
   28df2:	fb02 3301 	mla	r3, r2, r1, r3
   28df6:	0bc0      	lsrs	r0, r0, #15
   28df8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    activity_last_uptime = k_uptime_get();
   28dfc:	4b06      	ldr	r3, [pc, #24]	; (28e18 <activity_init+0x34>)
   28dfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   28e02:	6018      	str	r0, [r3, #0]
   28e04:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   28e06:	4805      	ldr	r0, [pc, #20]	; (28e1c <activity_init+0x38>)
   28e08:	e9cd 2300 	strd	r2, r3, [sp]
   28e0c:	f020 fc60 	bl	496d0 <z_impl_k_timer_start>

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
    return 0;
}
   28e10:	2000      	movs	r0, #0
   28e12:	b003      	add	sp, #12
   28e14:	f85d fb04 	ldr.w	pc, [sp], #4
   28e18:	200043b8 	.word	0x200043b8
   28e1c:	20001260 	.word	0x20001260

00028e20 <raise_event>:
int raise_event() {
   28e20:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28e22:	4b04      	ldr	r3, [pc, #16]	; (28e34 <raise_event+0x14>)
   28e24:	7818      	ldrb	r0, [r3, #0]
   28e26:	f000 f9ed 	bl	29204 <new_zmk_activity_state_changed>
}
   28e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28e2e:	f020 bd8a 	b.w	49946 <zmk_event_manager_raise>
   28e32:	bf00      	nop
   28e34:	20007656 	.word	0x20007656

00028e38 <set_state>:
    if (activity_state == state)
   28e38:	4b04      	ldr	r3, [pc, #16]	; (28e4c <set_state+0x14>)
   28e3a:	781a      	ldrb	r2, [r3, #0]
   28e3c:	4282      	cmp	r2, r0
   28e3e:	d002      	beq.n	28e46 <set_state+0xe>
    activity_state = state;
   28e40:	7018      	strb	r0, [r3, #0]
    return raise_event();
   28e42:	f7ff bfed 	b.w	28e20 <raise_event>
}
   28e46:	2000      	movs	r0, #0
   28e48:	4770      	bx	lr
   28e4a:	bf00      	nop
   28e4c:	20007656 	.word	0x20007656

00028e50 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   28e50:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   28e52:	f028 ff3b 	bl	51ccc <z_impl_k_uptime_ticks>
   28e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28e5a:	fba0 0302 	umull	r0, r3, r0, r2
   28e5e:	fb02 3301 	mla	r3, r2, r1, r3
   28e62:	0bc0      	lsrs	r0, r0, #15
   28e64:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    activity_last_uptime = k_uptime_get();
   28e68:	4b03      	ldr	r3, [pc, #12]	; (28e78 <activity_event_listener+0x28>)
   28e6a:	6018      	str	r0, [r3, #0]
}
   28e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   28e70:	2000      	movs	r0, #0
   28e72:	f7ff bfe1 	b.w	28e38 <set_state>
   28e76:	bf00      	nop
   28e78:	200043b8 	.word	0x200043b8

00028e7c <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   28e7c:	b508      	push	{r3, lr}
   28e7e:	f028 ff25 	bl	51ccc <z_impl_k_uptime_ticks>
   28e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28e86:	fba0 0302 	umull	r0, r3, r0, r2
   28e8a:	fb02 3301 	mla	r3, r2, r1, r3
   28e8e:	0bc0      	lsrs	r0, r0, #15
   28e90:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    int32_t inactive_time = current - activity_last_uptime;
   28e94:	4b06      	ldr	r3, [pc, #24]	; (28eb0 <activity_work_handler+0x34>)
   28e96:	681b      	ldr	r3, [r3, #0]
   28e98:	1ac0      	subs	r0, r0, r3
        if (inactive_time > MAX_IDLE_MS) {
   28e9a:	f247 5330 	movw	r3, #30000	; 0x7530
   28e9e:	4298      	cmp	r0, r3
   28ea0:	dd04      	ble.n	28eac <activity_work_handler+0x30>
}
   28ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   28ea6:	2001      	movs	r0, #1
   28ea8:	f7ff bfc6 	b.w	28e38 <set_state>
}
   28eac:	bd08      	pop	{r3, pc}
   28eae:	bf00      	nop
   28eb0:	200043b8 	.word	0x200043b8

00028eb4 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   28eb4:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   28eb6:	4c18      	ldr	r4, [pc, #96]	; (28f18 <zmk_kscan_process_msgq+0x64>)
   28eb8:	b08d      	sub	sp, #52	; 0x34
   28eba:	2200      	movs	r2, #0
   28ebc:	2300      	movs	r3, #0
   28ebe:	a903      	add	r1, sp, #12
   28ec0:	4620      	mov	r0, r4
   28ec2:	f01f fbad 	bl	48620 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   28ec6:	b108      	cbz	r0, 28ecc <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   28ec8:	b00d      	add	sp, #52	; 0x34
   28eca:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28ecc:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   28ece:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   28ed2:	f000 f859 	bl	28f88 <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28ed6:	fab5 f585 	clz	r5, r5
   28eda:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   28edc:	23ff      	movs	r3, #255	; 0xff
   28ede:	f88d 3018 	strb.w	r3, [sp, #24]
   28ee2:	9007      	str	r0, [sp, #28]
   28ee4:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   28ee8:	f028 fef0 	bl	51ccc <z_impl_k_uptime_ticks>
   28eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28ef0:	fba0 0302 	umull	r0, r3, r0, r2
   28ef4:	fb02 3101 	mla	r1, r2, r1, r3
   28ef8:	0bc0      	lsrs	r0, r0, #15
   28efa:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28efe:	0bc9      	lsrs	r1, r1, #15
   28f00:	e88d 0003 	stmia.w	sp, {r0, r1}
   28f04:	ab06      	add	r3, sp, #24
   28f06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   28f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28f0c:	f000 f986 	bl	2921c <new_zmk_position_state_changed>
   28f10:	f020 fd19 	bl	49946 <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   28f14:	e7d1      	b.n	28eba <zmk_kscan_process_msgq+0x6>
   28f16:	bf00      	nop
   28f18:	2000143c 	.word	0x2000143c

00028f1c <zmk_kscan_callback>:
                               bool pressed) {
   28f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28f1e:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   28f22:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28f26:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   28f28:	2200      	movs	r2, #0
   28f2a:	2300      	movs	r3, #0
   28f2c:	a901      	add	r1, sp, #4
   28f2e:	4804      	ldr	r0, [pc, #16]	; (28f40 <zmk_kscan_callback+0x24>)
   28f30:	f01f fb20 	bl	48574 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   28f34:	4803      	ldr	r0, [pc, #12]	; (28f44 <zmk_kscan_callback+0x28>)
   28f36:	f01f fe27 	bl	48b88 <k_work_submit>
}
   28f3a:	b005      	add	sp, #20
   28f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   28f40:	2000143c 	.word	0x2000143c
   28f44:	200043bc 	.word	0x200043bc

00028f48 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   28f48:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   28f4a:	f01f f8e9 	bl	48120 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   28f4e:	4604      	mov	r4, r0
   28f50:	b178      	cbz	r0, 28f72 <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   28f52:	490a      	ldr	r1, [pc, #40]	; (28f7c <zmk_kscan_init+0x34>)
   28f54:	480a      	ldr	r0, [pc, #40]	; (28f80 <zmk_kscan_init+0x38>)
   28f56:	f028 fce0 	bl	5191a <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   28f5a:	68a3      	ldr	r3, [r4, #8]
   28f5c:	4909      	ldr	r1, [pc, #36]	; (28f84 <zmk_kscan_init+0x3c>)
   28f5e:	681b      	ldr	r3, [r3, #0]
   28f60:	4620      	mov	r0, r4
   28f62:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   28f64:	68a3      	ldr	r3, [r4, #8]
   28f66:	689b      	ldr	r3, [r3, #8]
   28f68:	b133      	cbz	r3, 28f78 <zmk_kscan_init+0x30>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   28f6a:	4620      	mov	r0, r4
   28f6c:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   28f6e:	2000      	movs	r0, #0
}
   28f70:	bd10      	pop	{r4, pc}
        return -EINVAL;
   28f72:	f06f 0015 	mvn.w	r0, #21
   28f76:	e7fb      	b.n	28f70 <zmk_kscan_init+0x28>
    return 0;
   28f78:	4618      	mov	r0, r3
   28f7a:	e7f9      	b.n	28f70 <zmk_kscan_init+0x28>
   28f7c:	00028eb5 	.word	0x00028eb5
   28f80:	200043bc 	.word	0x200043bc
   28f84:	00028f1d 	.word	0x00028f1d

00028f88 <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   28f88:	230c      	movs	r3, #12
   28f8a:	fb03 1100 	mla	r1, r3, r0, r1
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   28f8e:	4b02      	ldr	r3, [pc, #8]	; (28f98 <zmk_matrix_transform_row_column_to_position+0x10>)
   28f90:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   28f94:	4770      	bx	lr
   28f96:	bf00      	nop
   28f98:	00052b6c 	.word	0x00052b6c

00028f9c <zmk_sensors_init_item>:

    ZMK_EVENT_RAISE(new_zmk_sensor_event((struct zmk_sensor_event){
        .sensor_number = item->sensor_number, .sensor = dev, .timestamp = k_uptime_get()}));
}

static void zmk_sensors_init_item(const char *node, uint8_t i, uint8_t abs_i) {
   28f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28fa0:	460d      	mov	r5, r1
   28fa2:	4616      	mov	r6, r2
   28fa4:	f01f f8bc 	bl	48120 <z_impl_device_get_binding>
    LOG_DBG("Init %s at index %d with sensor_number %d", node, i, abs_i);

    sensors[i].dev = device_get_binding(node);
   28fa8:	4b09      	ldr	r3, [pc, #36]	; (28fd0 <zmk_sensors_init_item+0x34>)
   28faa:	210c      	movs	r1, #12
   28fac:	fb01 f205 	mul.w	r2, r1, r5
   28fb0:	189f      	adds	r7, r3, r2
    sensors[i].sensor_number = abs_i;
   28fb2:	549e      	strb	r6, [r3, r2]
    sensors[i].dev = device_get_binding(node);
   28fb4:	6078      	str	r0, [r7, #4]

    if (!sensors[i].dev) {
   28fb6:	b140      	cbz	r0, 28fca <zmk_sensors_init_item+0x2e>
				     sensor_trigger_handler_t handler)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	if (api->trigger_set == NULL) {
   28fb8:	6883      	ldr	r3, [r0, #8]
   28fba:	689b      	ldr	r3, [r3, #8]
        LOG_WRN("Failed to find device for %s", node);
        return;
    }

    sensor_trigger_set(sensors[i].dev, &sensors[i].trigger, zmk_sensors_trigger_handler);
   28fbc:	4639      	mov	r1, r7
   28fbe:	3108      	adds	r1, #8
   28fc0:	b11b      	cbz	r3, 28fca <zmk_sensors_init_item+0x2e>
}
   28fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return -ENOSYS;
	}

	return api->trigger_set(dev, trig, handler);
   28fc6:	4a03      	ldr	r2, [pc, #12]	; (28fd4 <zmk_sensors_init_item+0x38>)
   28fc8:	4718      	bx	r3
   28fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28fce:	bf00      	nop
   28fd0:	200002b0 	.word	0x200002b0
   28fd4:	000498f7 	.word	0x000498f7

00028fd8 <zmk_sensors_init>:
#define _SENSOR_INIT(node) zmk_sensors_init_item(DT_LABEL(node), local_index++, absolute_index++);
#define SENSOR_INIT(idx, _i)                                                                       \
    COND_CODE_1(DT_NODE_HAS_STATUS(ZMK_KEYMAP_SENSORS_BY_IDX(idx), okay),                          \
                (_SENSOR_INIT(ZMK_KEYMAP_SENSORS_BY_IDX(idx))), (absolute_index++;))

static int zmk_sensors_init(const struct device *_arg) {
   28fd8:	b508      	push	{r3, lr}
    int local_index = 0;
    int absolute_index = 0;

    UTIL_LISTIFY(ZMK_KEYMAP_SENSORS_LEN, SENSOR_INIT, 0)
   28fda:	2200      	movs	r2, #0
   28fdc:	4611      	mov	r1, r2
   28fde:	4805      	ldr	r0, [pc, #20]	; (28ff4 <zmk_sensors_init+0x1c>)
   28fe0:	f7ff ffdc 	bl	28f9c <zmk_sensors_init_item>
   28fe4:	2201      	movs	r2, #1
   28fe6:	4804      	ldr	r0, [pc, #16]	; (28ff8 <zmk_sensors_init+0x20>)
   28fe8:	4611      	mov	r1, r2
   28fea:	f7ff ffd7 	bl	28f9c <zmk_sensors_init_item>
    return 0;
}
   28fee:	2000      	movs	r0, #0
   28ff0:	bd08      	pop	{r3, pc}
   28ff2:	bf00      	nop
   28ff4:	00056200 	.word	0x00056200
   28ff8:	0005620d 	.word	0x0005620d

00028ffc <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   29000:	4b13      	ldr	r3, [pc, #76]	; (29050 <zmk_event_manager_handle_from+0x54>)
   29002:	4e14      	ldr	r6, [pc, #80]	; (29054 <zmk_event_manager_handle_from+0x58>)
   29004:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   29008:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   2900a:	460d      	mov	r5, r1
   2900c:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   29010:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   29014:	45a8      	cmp	r8, r5
   29016:	dc04      	bgt.n	29022 <zmk_event_manager_handle_from+0x26>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
        if (ev_sub->event_type != event->event) {
            continue;
        }
        ret = ev_sub->listener->callback(event);
        switch (ret) {
   29018:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   2901a:	4638      	mov	r0, r7
   2901c:	f029 f803 	bl	52026 <k_free>
    return ret;
   29020:	e013      	b.n	2904a <zmk_event_manager_handle_from+0x4e>
        if (ev_sub->event_type != event->event) {
   29022:	6832      	ldr	r2, [r6, #0]
   29024:	683b      	ldr	r3, [r7, #0]
   29026:	429a      	cmp	r2, r3
   29028:	d10a      	bne.n	29040 <zmk_event_manager_handle_from+0x44>
        ret = ev_sub->listener->callback(event);
   2902a:	6873      	ldr	r3, [r6, #4]
   2902c:	4638      	mov	r0, r7
   2902e:	681b      	ldr	r3, [r3, #0]
   29030:	4798      	blx	r3
        switch (ret) {
   29032:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   29034:	4604      	mov	r4, r0
        switch (ret) {
   29036:	d0ef      	beq.n	29018 <zmk_event_manager_handle_from+0x1c>
   29038:	2802      	cmp	r0, #2
   2903a:	d004      	beq.n	29046 <zmk_event_manager_handle_from+0x4a>
   2903c:	2800      	cmp	r0, #0
   2903e:	d1ec      	bne.n	2901a <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   29040:	3501      	adds	r5, #1
   29042:	3608      	adds	r6, #8
   29044:	e7e6      	b.n	29014 <zmk_event_manager_handle_from+0x18>
            event->last_listener_index = i;
   29046:	713d      	strb	r5, [r7, #4]
            return 0;
   29048:	2400      	movs	r4, #0
}
   2904a:	4620      	mov	r0, r4
   2904c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29050:	00056c28 	.word	0x00056c28
   29054:	00056bd8 	.word	0x00056bd8

00029058 <zmk_event_manager_raise_at>:

    return -EINVAL;
}

int zmk_event_manager_raise_at(zmk_event_t *event, const struct zmk_listener *listener) {
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   29058:	4b0d      	ldr	r3, [pc, #52]	; (29090 <zmk_event_manager_raise_at+0x38>)
   2905a:	4a0e      	ldr	r2, [pc, #56]	; (29094 <zmk_event_manager_raise_at+0x3c>)
   2905c:	1ad2      	subs	r2, r2, r3
int zmk_event_manager_raise_at(zmk_event_t *event, const struct zmk_listener *listener) {
   2905e:	b470      	push	{r4, r5, r6}
    for (int i = 0; i < len; i++) {
   29060:	f3c2 02c7 	ubfx	r2, r2, #3, #8
   29064:	2400      	movs	r4, #0
   29066:	42a2      	cmp	r2, r4
   29068:	dc03      	bgt.n	29072 <zmk_event_manager_raise_at+0x1a>
    }

    LOG_WRN("Unable to find where to raise this event");

    return -EINVAL;
}
   2906a:	f06f 0015 	mvn.w	r0, #21
   2906e:	bc70      	pop	{r4, r5, r6}
   29070:	4770      	bx	lr
        if (ev_sub->event_type == event->event && ev_sub->listener == listener) {
   29072:	681e      	ldr	r6, [r3, #0]
   29074:	6805      	ldr	r5, [r0, #0]
   29076:	42ae      	cmp	r6, r5
   29078:	d106      	bne.n	29088 <zmk_event_manager_raise_at+0x30>
   2907a:	685d      	ldr	r5, [r3, #4]
   2907c:	428d      	cmp	r5, r1
   2907e:	d103      	bne.n	29088 <zmk_event_manager_raise_at+0x30>
            return zmk_event_manager_handle_from(event, i);
   29080:	b2e1      	uxtb	r1, r4
}
   29082:	bc70      	pop	{r4, r5, r6}
            return zmk_event_manager_handle_from(event, i);
   29084:	f7ff bfba 	b.w	28ffc <zmk_event_manager_handle_from>
    for (int i = 0; i < len; i++) {
   29088:	3401      	adds	r4, #1
   2908a:	3308      	adds	r3, #8
   2908c:	e7eb      	b.n	29066 <zmk_event_manager_raise_at+0xe>
   2908e:	bf00      	nop
   29090:	00056bd8 	.word	0x00056bd8
   29094:	00056c28 	.word	0x00056c28

00029098 <ext_power_generic_init>:

struct settings_handler ext_power_conf = {.name = "ext_power/state",
                                          .h_set = ext_power_settings_set};
#endif

static int ext_power_generic_init(const struct device *dev) {
   29098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct ext_power_generic_data *data = dev->data;
    const struct ext_power_generic_config *config = dev->config;
   2909c:	6846      	ldr	r6, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   2909e:	6907      	ldr	r7, [r0, #16]
static int ext_power_generic_init(const struct device *dev) {
   290a0:	4605      	mov	r5, r0

    data->gpio = device_get_binding(config->label);
   290a2:	6830      	ldr	r0, [r6, #0]
   290a4:	f01f f83c 	bl	48120 <z_impl_device_get_binding>
   290a8:	6038      	str	r0, [r7, #0]
    if (data->gpio == NULL) {
   290aa:	2800      	cmp	r0, #0
   290ac:	d045      	beq.n	2913a <ext_power_generic_init+0xa2>
        LOG_ERR("Failed to get ext-power control device");
        return -EINVAL;
    }

    if (gpio_pin_configure(data->gpio, config->pin, config->flags | GPIO_OUTPUT)) {
   290ae:	f896 e005 	ldrb.w	lr, [r6, #5]
   290b2:	7931      	ldrb	r1, [r6, #4]
   290b4:	f44e 7200 	orr.w	r2, lr, #512	; 0x200
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   290b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   290bc:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   290c0:	2301      	movs	r3, #1
   290c2:	fa03 f401 	lsl.w	r4, r3, r1
   290c6:	f8dc 3000 	ldr.w	r3, [ip]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   290ca:	f01e 0f01 	tst.w	lr, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   290ce:	bf14      	ite	ne
   290d0:	4323      	orrne	r3, r4
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   290d2:	43a3      	biceq	r3, r4
   290d4:	f8cc 3000 	str.w	r3, [ip]
	}

	return api->pin_configure(port, pin, flags);
   290d8:	f8d8 3000 	ldr.w	r3, [r8]
   290dc:	4798      	blx	r3
   290de:	bb78      	cbnz	r0, 29140 <ext_power_generic_init+0xa8>
        LOG_ERR("Failed to configure ext-power control pin");
        return -EIO;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   290e0:	f003 fd90 	bl	2cc04 <settings_subsys_init>

    int err = settings_register(&ext_power_conf);
   290e4:	4818      	ldr	r0, [pc, #96]	; (29148 <ext_power_generic_init+0xb0>)
   290e6:	f003 fccf 	bl	2ca88 <settings_register>
    if (err) {
   290ea:	4604      	mov	r4, r0
   290ec:	bb10      	cbnz	r0, 29134 <ext_power_generic_init+0x9c>
        LOG_ERR("Failed to register the ext_power settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ext_power_save_work, ext_power_save_state_work);
   290ee:	4917      	ldr	r1, [pc, #92]	; (2914c <ext_power_generic_init+0xb4>)
   290f0:	4817      	ldr	r0, [pc, #92]	; (29150 <ext_power_generic_init+0xb8>)
   290f2:	f028 fc48 	bl	51986 <k_work_init_delayable>

    // Set default value (on) if settings isn't set
    settings_load_subtree("ext_power");
   290f6:	4817      	ldr	r0, [pc, #92]	; (29154 <ext_power_generic_init+0xbc>)
   290f8:	f003 fc70 	bl	2c9dc <settings_load_subtree>
    if (!data->settings_init) {
   290fc:	797b      	ldrb	r3, [r7, #5]
   290fe:	b95b      	cbnz	r3, 29118 <ext_power_generic_init+0x80>

        data->status = true;
   29100:	2301      	movs	r3, #1
   29102:	713b      	strb	r3, [r7, #4]
        k_work_schedule(&ext_power_save_work, K_NO_WAIT);
   29104:	2200      	movs	r2, #0
   29106:	2300      	movs	r3, #0
   29108:	4811      	ldr	r0, [pc, #68]	; (29150 <ext_power_generic_init+0xb8>)
   2910a:	f01f fda5 	bl	48c58 <k_work_schedule>
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   2910e:	68ab      	ldr	r3, [r5, #8]
   29110:	681b      	ldr	r3, [r3, #0]
   29112:	b10b      	cbz	r3, 29118 <ext_power_generic_init+0x80>
        return -ENOTSUP;
    }

    return api->enable(dev);
   29114:	4628      	mov	r0, r5
   29116:	4798      	blx	r3
#else
    // Default to the ext_power being open when no settings
    ext_power_enable(dev);
#endif

    if (config->init_delay_ms) {
   29118:	88f1      	ldrh	r1, [r6, #6]
   2911a:	b159      	cbz	r1, 29134 <ext_power_generic_init+0x9c>
   2911c:	f240 30e7 	movw	r0, #999	; 0x3e7
   29120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29124:	2300      	movs	r3, #0
   29126:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2912a:	2100      	movs	r1, #0
   2912c:	f7fc ffe8 	bl	26100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   29130:	f020 f8a2 	bl	49278 <z_impl_k_sleep>
        k_msleep(config->init_delay_ms);
    }

    return 0;
}
   29134:	4620      	mov	r0, r4
   29136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -EINVAL;
   2913a:	f06f 0415 	mvn.w	r4, #21
   2913e:	e7f9      	b.n	29134 <ext_power_generic_init+0x9c>
        return -EIO;
   29140:	f06f 0404 	mvn.w	r4, #4
   29144:	e7f6      	b.n	29134 <ext_power_generic_init+0x9c>
   29146:	bf00      	nop
   29148:	200002c8 	.word	0x200002c8
   2914c:	00029159 	.word	0x00029159
   29150:	200016f8 	.word	0x200016f8
   29154:	0005621b 	.word	0x0005621b

00029158 <ext_power_save_state_work>:
static void ext_power_save_state_work(struct k_work *work) {
   29158:	b530      	push	{r4, r5, lr}
   2915a:	b08b      	sub	sp, #44	; 0x2c
   2915c:	4c08      	ldr	r4, [pc, #32]	; (29180 <ext_power_save_state_work+0x28>)
   2915e:	4620      	mov	r0, r4
   29160:	f01e ffde 	bl	48120 <z_impl_device_get_binding>
    struct ext_power_generic_data *data = ext_power->data;
   29164:	6905      	ldr	r5, [r0, #16]
    snprintf(setting_path, 40, "ext_power/state/%s", DT_INST_LABEL(0));
   29166:	4a07      	ldr	r2, [pc, #28]	; (29184 <ext_power_save_state_work+0x2c>)
   29168:	4623      	mov	r3, r4
   2916a:	2128      	movs	r1, #40	; 0x28
   2916c:	4668      	mov	r0, sp
   2916e:	f004 fb8b 	bl	2d888 <snprintf>
    settings_save_one(setting_path, &data->status, sizeof(data->status));
   29172:	2201      	movs	r2, #1
   29174:	1d29      	adds	r1, r5, #4
   29176:	4668      	mov	r0, sp
   29178:	f003 fbf6 	bl	2c968 <settings_save_one>
}
   2917c:	b00b      	add	sp, #44	; 0x2c
   2917e:	bd30      	pop	{r4, r5, pc}
   29180:	00056225 	.word	0x00056225
   29184:	0005622f 	.word	0x0005622f

00029188 <ext_power_save_state>:
int ext_power_save_state() {
   29188:	b508      	push	{r3, lr}
    int ret = k_work_reschedule(&ext_power_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   2918a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2918e:	2300      	movs	r3, #0
   29190:	4802      	ldr	r0, [pc, #8]	; (2919c <ext_power_save_state+0x14>)
   29192:	f01f fd95 	bl	48cc0 <k_work_reschedule>
}
   29196:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2919a:	bd08      	pop	{r3, pc}
   2919c:	200016f8 	.word	0x200016f8

000291a0 <ext_power_settings_set>:
                                  void *cb_arg) {
   291a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   291a4:	460c      	mov	r4, r1
   291a6:	4616      	mov	r6, r2
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   291a8:	4913      	ldr	r1, [pc, #76]	; (291f8 <ext_power_settings_set+0x58>)
   291aa:	aa01      	add	r2, sp, #4
                                  void *cb_arg) {
   291ac:	461f      	mov	r7, r3
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   291ae:	f021 ff94 	bl	4b0da <settings_name_steq>
   291b2:	b1d8      	cbz	r0, 291ec <ext_power_settings_set+0x4c>
   291b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   291b8:	f1b8 0f00 	cmp.w	r8, #0
   291bc:	d116      	bne.n	291ec <ext_power_settings_set+0x4c>
        if (len != sizeof(data->status)) {
   291be:	2c01      	cmp	r4, #1
   291c0:	d117      	bne.n	291f2 <ext_power_settings_set+0x52>
        rc = read_cb(cb_arg, &data->status, sizeof(data->status));
   291c2:	4d0e      	ldr	r5, [pc, #56]	; (291fc <ext_power_settings_set+0x5c>)
   291c4:	4622      	mov	r2, r4
   291c6:	1d29      	adds	r1, r5, #4
   291c8:	4638      	mov	r0, r7
   291ca:	47b0      	blx	r6
        if (rc >= 0) {
   291cc:	2800      	cmp	r0, #0
   291ce:	db06      	blt.n	291de <ext_power_settings_set+0x3e>
            data->settings_init = true;
   291d0:	716c      	strb	r4, [r5, #5]
            if (data->status) {
   291d2:	792c      	ldrb	r4, [r5, #4]
                ext_power_generic_enable(ext_power);
   291d4:	480a      	ldr	r0, [pc, #40]	; (29200 <ext_power_settings_set+0x60>)
            if (data->status) {
   291d6:	b12c      	cbz	r4, 291e4 <ext_power_settings_set+0x44>
                ext_power_generic_enable(ext_power);
   291d8:	f020 fbcb 	bl	49972 <ext_power_generic_enable>
   291dc:	4640      	mov	r0, r8
}
   291de:	b002      	add	sp, #8
   291e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ext_power_generic_disable(ext_power);
   291e4:	f020 fbd7 	bl	49996 <ext_power_generic_disable>
   291e8:	4620      	mov	r0, r4
   291ea:	e7f8      	b.n	291de <ext_power_settings_set+0x3e>
    return -ENOENT;
   291ec:	f06f 0001 	mvn.w	r0, #1
   291f0:	e7f5      	b.n	291de <ext_power_settings_set+0x3e>
            return -EINVAL;
   291f2:	f06f 0015 	mvn.w	r0, #21
   291f6:	e7f2      	b.n	291de <ext_power_settings_set+0x3e>
   291f8:	00056225 	.word	0x00056225
   291fc:	200043cc 	.word	0x200043cc
   29200:	000522ec 	.word	0x000522ec

00029204 <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   29204:	b510      	push	{r4, lr}
   29206:	4604      	mov	r4, r0
   29208:	200c      	movs	r0, #12
   2920a:	f028 ff13 	bl	52034 <k_malloc>
   2920e:	4a02      	ldr	r2, [pc, #8]	; (29218 <new_zmk_activity_state_changed+0x14>)
   29210:	6002      	str	r2, [r0, #0]
   29212:	7204      	strb	r4, [r0, #8]
   29214:	bd10      	pop	{r4, pc}
   29216:	bf00      	nop
   29218:	00052c6c 	.word	0x00052c6c

0002921c <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   2921c:	b084      	sub	sp, #16
   2921e:	b570      	push	{r4, r5, r6, lr}
   29220:	ac04      	add	r4, sp, #16
   29222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29226:	2020      	movs	r0, #32
   29228:	f028 ff04 	bl	52034 <k_malloc>
   2922c:	4604      	mov	r4, r0
   2922e:	4b08      	ldr	r3, [pc, #32]	; (29250 <new_zmk_position_state_changed+0x34>)
   29230:	f844 3b08 	str.w	r3, [r4], #8
   29234:	ad04      	add	r5, sp, #16
   29236:	4606      	mov	r6, r0
   29238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2923a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2923c:	e895 0003 	ldmia.w	r5, {r0, r1}
   29240:	e884 0003 	stmia.w	r4, {r0, r1}
   29244:	4630      	mov	r0, r6
   29246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2924a:	b004      	add	sp, #16
   2924c:	4770      	bx	lr
   2924e:	bf00      	nop
   29250:	00052c70 	.word	0x00052c70

00029254 <as_zmk_position_state_changed>:
   29254:	6802      	ldr	r2, [r0, #0]
   29256:	4b03      	ldr	r3, [pc, #12]	; (29264 <as_zmk_position_state_changed+0x10>)
   29258:	429a      	cmp	r2, r3
   2925a:	bf0c      	ite	eq
   2925c:	3008      	addeq	r0, #8
   2925e:	2000      	movne	r0, #0
   29260:	4770      	bx	lr
   29262:	bf00      	nop
   29264:	00052c70 	.word	0x00052c70

00029268 <new_zmk_sensor_event>:
 */

#include <kernel.h>
#include <zmk/events/sensor_event.h>

   29268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2926a:	466c      	mov	r4, sp
   2926c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29270:	2018      	movs	r0, #24
   29272:	f028 fedf 	bl	52034 <k_malloc>
   29276:	4605      	mov	r5, r0
   29278:	4b05      	ldr	r3, [pc, #20]	; (29290 <new_zmk_sensor_event+0x28>)
   2927a:	f845 3b08 	str.w	r3, [r5], #8
   2927e:	4606      	mov	r6, r0
   29280:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29284:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   29288:	4630      	mov	r0, r6
   2928a:	b004      	add	sp, #16
   2928c:	bd70      	pop	{r4, r5, r6, pc}
   2928e:	bf00      	nop
   29290:	00052c74 	.word	0x00052c74

00029294 <as_zmk_sensor_event>:
   29294:	6802      	ldr	r2, [r0, #0]
   29296:	4b03      	ldr	r3, [pc, #12]	; (292a4 <as_zmk_sensor_event+0x10>)
   29298:	429a      	cmp	r2, r3
   2929a:	bf0c      	ite	eq
   2929c:	3008      	addeq	r0, #8
   2929e:	2000      	movne	r0, #0
   292a0:	4770      	bx	lr
   292a2:	bf00      	nop
   292a4:	00052c74 	.word	0x00052c74

000292a8 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   292a8:	b510      	push	{r4, lr}
   292aa:	4604      	mov	r4, r0
   292ac:	200c      	movs	r0, #12
   292ae:	f028 fec1 	bl	52034 <k_malloc>
   292b2:	4a02      	ldr	r2, [pc, #8]	; (292bc <new_zmk_usb_conn_state_changed+0x14>)
   292b4:	6002      	str	r2, [r0, #0]
   292b6:	7204      	strb	r4, [r0, #8]
   292b8:	bd10      	pop	{r4, pc}
   292ba:	bf00      	nop
   292bc:	00052c78 	.word	0x00052c78

000292c0 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   292c0:	b082      	sub	sp, #8
   292c2:	b538      	push	{r3, r4, r5, lr}
   292c4:	a904      	add	r1, sp, #16
   292c6:	e881 000c 	stmia.w	r1, {r2, r3}
   292ca:	4605      	mov	r5, r0
   292cc:	4811      	ldr	r0, [pc, #68]	; (29314 <on_keymap_binding_pressed+0x54>)
   292ce:	f01e ff27 	bl	48120 <z_impl_device_get_binding>
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   292d2:	4604      	mov	r4, r0
   292d4:	b1a0      	cbz	r0, 29300 <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   292d6:	686b      	ldr	r3, [r5, #4]
   292d8:	2b01      	cmp	r3, #1
   292da:	d00c      	beq.n	292f6 <on_keymap_binding_pressed+0x36>
   292dc:	2b02      	cmp	r3, #2
   292de:	d005      	beq.n	292ec <on_keymap_binding_pressed+0x2c>
   292e0:	b9a3      	cbnz	r3, 2930c <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   292e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   292e6:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   292e8:	f020 bb7b 	b.w	499e2 <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   292ec:	f020 fb80 	bl	499f0 <ext_power_get>
   292f0:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   292f2:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   292f4:	dcf5      	bgt.n	292e2 <on_keymap_binding_pressed+0x22>
}
   292f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   292fa:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   292fc:	f020 bb6a 	b.w	499d4 <ext_power_enable>
        return -EIO;
   29300:	f06f 0004 	mvn.w	r0, #4
}
   29304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29308:	b002      	add	sp, #8
   2930a:	4770      	bx	lr
    switch (binding->param1) {
   2930c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29310:	e7f8      	b.n	29304 <on_keymap_binding_pressed+0x44>
   29312:	bf00      	nop
   29314:	00056225 	.word	0x00056225

00029318 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   29318:	b082      	sub	sp, #8
   2931a:	b510      	push	{r4, lr}
   2931c:	a902      	add	r1, sp, #8
   2931e:	e881 000c 	stmia.w	r1, {r2, r3}
   29322:	4604      	mov	r4, r0
   29324:	480a      	ldr	r0, [pc, #40]	; (29350 <on_keymap_binding_convert_central_state_dependent_params+0x38>)
   29326:	f01e fefb 	bl	48120 <z_impl_device_get_binding>
    if (ext_power == NULL) {
   2932a:	b158      	cbz	r0, 29344 <on_keymap_binding_convert_central_state_dependent_params+0x2c>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   2932c:	6863      	ldr	r3, [r4, #4]
   2932e:	2b02      	cmp	r3, #2
   29330:	d106      	bne.n	29340 <on_keymap_binding_convert_central_state_dependent_params+0x28>
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   29332:	f020 fb5d 	bl	499f0 <ext_power_get>
   29336:	2800      	cmp	r0, #0
   29338:	bfcc      	ite	gt
   2933a:	2000      	movgt	r0, #0
   2933c:	2001      	movle	r0, #1
   2933e:	6060      	str	r0, [r4, #4]
    return 0;
   29340:	2000      	movs	r0, #0
   29342:	e001      	b.n	29348 <on_keymap_binding_convert_central_state_dependent_params+0x30>
        return -EIO;
   29344:	f06f 0004 	mvn.w	r0, #4
}
   29348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2934c:	b002      	add	sp, #8
   2934e:	4770      	bx	lr
   29350:	00056225 	.word	0x00056225

00029354 <zmk_hid_get_explicit_mods>:
        LOG_DBG("Modifiers set to 0x%02X", keyboard_report.body.modifiers);                        \
    }

#define GET_MODIFIERS (keyboard_report.body.modifiers)

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }
   29354:	4b01      	ldr	r3, [pc, #4]	; (2935c <zmk_hid_get_explicit_mods+0x8>)
   29356:	7818      	ldrb	r0, [r3, #0]
   29358:	4770      	bx	lr
   2935a:	bf00      	nop
   2935c:	20007657 	.word	0x20007657

00029360 <zmk_hid_register_mod>:

int zmk_hid_register_mod(zmk_mod_t modifier) {
    explicit_modifier_counts[modifier]++;
   29360:	4a09      	ldr	r2, [pc, #36]	; (29388 <zmk_hid_register_mod+0x28>)
   29362:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   29366:	3301      	adds	r3, #1
   29368:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
    WRITE_BIT(explicit_modifiers, modifier, true);
   2936c:	4a07      	ldr	r2, [pc, #28]	; (2938c <zmk_hid_register_mod+0x2c>)
   2936e:	2301      	movs	r3, #1
   29370:	4083      	lsls	r3, r0
   29372:	7810      	ldrb	r0, [r2, #0]
   29374:	4303      	orrs	r3, r0
   29376:	b2db      	uxtb	r3, r3
   29378:	7013      	strb	r3, [r2, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   2937a:	4a05      	ldr	r2, [pc, #20]	; (29390 <zmk_hid_register_mod+0x30>)
   2937c:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   2937e:	7053      	strb	r3, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   29380:	1a18      	subs	r0, r3, r0
   29382:	bf18      	it	ne
   29384:	2001      	movne	r0, #1
   29386:	4770      	bx	lr
   29388:	200043d4 	.word	0x200043d4
   2938c:	20007657 	.word	0x20007657
   29390:	20001185 	.word	0x20001185

00029394 <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
    if (explicit_modifier_counts[modifier] <= 0) {
   29394:	4a0d      	ldr	r2, [pc, #52]	; (293cc <zmk_hid_unregister_mod+0x38>)
   29396:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   2939a:	2b00      	cmp	r3, #0
   2939c:	dd12      	ble.n	293c4 <zmk_hid_unregister_mod+0x30>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
   2939e:	3b01      	subs	r3, #1
   293a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
    if (explicit_modifier_counts[modifier] == 0) {
   293a4:	4a0a      	ldr	r2, [pc, #40]	; (293d0 <zmk_hid_unregister_mod+0x3c>)
   293a6:	b92b      	cbnz	r3, 293b4 <zmk_hid_unregister_mod+0x20>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
   293a8:	2301      	movs	r3, #1
   293aa:	4083      	lsls	r3, r0
   293ac:	7810      	ldrb	r0, [r2, #0]
   293ae:	ea20 0003 	bic.w	r0, r0, r3
   293b2:	7010      	strb	r0, [r2, #0]
    }
    zmk_mod_flags_t current = GET_MODIFIERS;
   293b4:	4b07      	ldr	r3, [pc, #28]	; (293d4 <zmk_hid_unregister_mod+0x40>)
    SET_MODIFIERS(explicit_modifiers);
   293b6:	7810      	ldrb	r0, [r2, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   293b8:	7859      	ldrb	r1, [r3, #1]
    SET_MODIFIERS(explicit_modifiers);
   293ba:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
   293bc:	1a40      	subs	r0, r0, r1
   293be:	bf18      	it	ne
   293c0:	2001      	movne	r0, #1
   293c2:	4770      	bx	lr
        return -EINVAL;
   293c4:	f06f 0015 	mvn.w	r0, #21
}
   293c8:	4770      	bx	lr
   293ca:	bf00      	nop
   293cc:	200043d4 	.word	0x200043d4
   293d0:	20007657 	.word	0x20007657
   293d4:	20001185 	.word	0x20001185

000293d8 <zmk_hid_implicit_modifiers_press>:
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t implicit_modifiers) {
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   293d8:	4904      	ldr	r1, [pc, #16]	; (293ec <zmk_hid_implicit_modifiers_press+0x14>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   293da:	4b05      	ldr	r3, [pc, #20]	; (293f0 <zmk_hid_implicit_modifiers_press+0x18>)
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   293dc:	7809      	ldrb	r1, [r1, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   293de:	785a      	ldrb	r2, [r3, #1]
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   293e0:	4308      	orrs	r0, r1
   293e2:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   293e4:	1a80      	subs	r0, r0, r2
   293e6:	bf18      	it	ne
   293e8:	2001      	movne	r0, #1
   293ea:	4770      	bx	lr
   293ec:	20007657 	.word	0x20007657
   293f0:	20001185 	.word	0x20001185

000293f4 <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
    zmk_mod_flags_t current = GET_MODIFIERS;
   293f4:	4a04      	ldr	r2, [pc, #16]	; (29408 <zmk_hid_implicit_modifiers_release+0x14>)
    SET_MODIFIERS(explicit_modifiers);
   293f6:	4b05      	ldr	r3, [pc, #20]	; (2940c <zmk_hid_implicit_modifiers_release+0x18>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   293f8:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   293fa:	781b      	ldrb	r3, [r3, #0]
   293fc:	7053      	strb	r3, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   293fe:	1a18      	subs	r0, r3, r0
   29400:	bf18      	it	ne
   29402:	2001      	movne	r0, #1
   29404:	4770      	bx	lr
   29406:	bf00      	nop
   29408:	20001185 	.word	0x20001185
   2940c:	20007657 	.word	0x20007657

00029410 <zmk_hid_keyboard_press>:

int zmk_hid_keyboard_press(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   29410:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   29414:	2b07      	cmp	r3, #7
   29416:	d803      	bhi.n	29420 <zmk_hid_keyboard_press+0x10>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29418:	3020      	adds	r0, #32
   2941a:	b2c0      	uxtb	r0, r0
   2941c:	f7ff bfa0 	b.w	29360 <zmk_hid_register_mod>
   29420:	4b07      	ldr	r3, [pc, #28]	; (29440 <zmk_hid_keyboard_press+0x30>)
    TOGGLE_KEYBOARD(0U, usage);
   29422:	2200      	movs	r2, #0
   29424:	f813 1b01 	ldrb.w	r1, [r3], #1
   29428:	b121      	cbz	r1, 29434 <zmk_hid_keyboard_press+0x24>
   2942a:	3201      	adds	r2, #1
   2942c:	2a06      	cmp	r2, #6
   2942e:	d1f9      	bne.n	29424 <zmk_hid_keyboard_press+0x14>
    }
    select_keyboard_usage(code);
    return 0;
};
   29430:	2000      	movs	r0, #0
   29432:	4770      	bx	lr
    TOGGLE_KEYBOARD(0U, usage);
   29434:	f803 0c01 	strb.w	r0, [r3, #-1]
   29438:	2800      	cmp	r0, #0
   2943a:	d0f6      	beq.n	2942a <zmk_hid_keyboard_press+0x1a>
   2943c:	e7f8      	b.n	29430 <zmk_hid_keyboard_press+0x20>
   2943e:	bf00      	nop
   29440:	20001188 	.word	0x20001188

00029444 <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   29444:	f1a0 02e0 	sub.w	r2, r0, #224	; 0xe0
   29448:	2a07      	cmp	r2, #7
int zmk_hid_keyboard_release(zmk_key_t code) {
   2944a:	b410      	push	{r4}
   2944c:	4603      	mov	r3, r0
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2944e:	d804      	bhi.n	2945a <zmk_hid_keyboard_release+0x16>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29450:	3020      	adds	r0, #32
    }
    deselect_keyboard_usage(code);
    return 0;
};
   29452:	bc10      	pop	{r4}
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29454:	b2c0      	uxtb	r0, r0
   29456:	f7ff bf9d 	b.w	29394 <zmk_hid_unregister_mod>
   2945a:	4a06      	ldr	r2, [pc, #24]	; (29474 <zmk_hid_keyboard_release+0x30>)
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2945c:	2006      	movs	r0, #6
    TOGGLE_KEYBOARD(usage, 0U);
   2945e:	2100      	movs	r1, #0
   29460:	f812 4b01 	ldrb.w	r4, [r2], #1
   29464:	42a3      	cmp	r3, r4
   29466:	bf08      	it	eq
   29468:	f802 1c01 	strbeq.w	r1, [r2, #-1]
   2946c:	3801      	subs	r0, #1
   2946e:	d1f7      	bne.n	29460 <zmk_hid_keyboard_release+0x1c>
};
   29470:	bc10      	pop	{r4}
   29472:	4770      	bx	lr
   29474:	20001188 	.word	0x20001188

00029478 <zmk_hid_keyboard_clear>:
        return zmk_hid_mod_is_pressed(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    return check_keyboard_usage(code);
}

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
   29478:	4802      	ldr	r0, [pc, #8]	; (29484 <zmk_hid_keyboard_clear+0xc>)
   2947a:	2208      	movs	r2, #8
   2947c:	2100      	movs	r1, #0
   2947e:	f023 b925 	b.w	4c6cc <memset>
   29482:	bf00      	nop
   29484:	20001186 	.word	0x20001186

00029488 <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
   29488:	b510      	push	{r4, lr}
    TOGGLE_CONSUMER(0U, code);
   2948a:	4908      	ldr	r1, [pc, #32]	; (294ac <zmk_hid_consumer_press+0x24>)
   2948c:	2300      	movs	r3, #0
   2948e:	eb01 0243 	add.w	r2, r1, r3, lsl #1
   29492:	f8b2 4001 	ldrh.w	r4, [r2, #1]
   29496:	b124      	cbz	r4, 294a2 <zmk_hid_consumer_press+0x1a>
   29498:	3301      	adds	r3, #1
   2949a:	2b06      	cmp	r3, #6
   2949c:	d1f7      	bne.n	2948e <zmk_hid_consumer_press+0x6>
    return 0;
};
   2949e:	2000      	movs	r0, #0
   294a0:	bd10      	pop	{r4, pc}
    TOGGLE_CONSUMER(0U, code);
   294a2:	f8a2 0001 	strh.w	r0, [r2, #1]
   294a6:	2800      	cmp	r0, #0
   294a8:	d0f6      	beq.n	29498 <zmk_hid_consumer_press+0x10>
   294aa:	e7f8      	b.n	2949e <zmk_hid_consumer_press+0x16>
   294ac:	20001178 	.word	0x20001178

000294b0 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
   294b0:	b530      	push	{r4, r5, lr}
    TOGGLE_CONSUMER(code, 0U);
   294b2:	2300      	movs	r3, #0
   294b4:	4c07      	ldr	r4, [pc, #28]	; (294d4 <zmk_hid_consumer_release+0x24>)
   294b6:	4619      	mov	r1, r3
   294b8:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   294bc:	3301      	adds	r3, #1
   294be:	f8b2 5001 	ldrh.w	r5, [r2, #1]
   294c2:	4285      	cmp	r5, r0
   294c4:	bf04      	itt	eq
   294c6:	7051      	strbeq	r1, [r2, #1]
   294c8:	7091      	strbeq	r1, [r2, #2]
   294ca:	2b06      	cmp	r3, #6
   294cc:	d1f4      	bne.n	294b8 <zmk_hid_consumer_release+0x8>
    return 0;
};
   294ce:	2000      	movs	r0, #0
   294d0:	bd30      	pop	{r4, r5, pc}
   294d2:	bf00      	nop
   294d4:	20001178 	.word	0x20001178

000294d8 <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
   294d8:	4802      	ldr	r0, [pc, #8]	; (294e4 <zmk_hid_consumer_clear+0xc>)
   294da:	220c      	movs	r2, #12
   294dc:	2100      	movs	r1, #0
   294de:	f023 b8f5 	b.w	4c6cc <memset>
   294e2:	bf00      	nop
   294e4:	20001179 	.word	0x20001179

000294e8 <zmk_hid_get_keyboard_report>:
    return false;
}

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
   294e8:	4800      	ldr	r0, [pc, #0]	; (294ec <zmk_hid_get_keyboard_report+0x4>)
   294ea:	4770      	bx	lr
   294ec:	20001185 	.word	0x20001185

000294f0 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
   294f0:	4800      	ldr	r0, [pc, #0]	; (294f4 <zmk_hid_get_consumer_report+0x4>)
   294f2:	4770      	bx	lr
   294f4:	20001178 	.word	0x20001178

000294f8 <behavior_hold_tap_init>:
    } else {
        decide_hold_tap(hold_tap, HT_TIMER_EVENT);
    }
}

static int behavior_hold_tap_init(const struct device *dev) {
   294f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool init_first_run = true;

    if (init_first_run) {
   294fc:	4e0b      	ldr	r6, [pc, #44]	; (2952c <behavior_hold_tap_init+0x34>)
   294fe:	7833      	ldrb	r3, [r6, #0]
   29500:	b183      	cbz	r3, 29524 <behavior_hold_tap_init+0x2c>
   29502:	4c0b      	ldr	r4, [pc, #44]	; (29530 <behavior_hold_tap_init+0x38>)
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
            k_work_init_delayable(&active_hold_taps[i].work, behavior_hold_tap_timer_work_handler);
   29504:	f8df 802c 	ldr.w	r8, [pc, #44]	; 29534 <behavior_hold_tap_init+0x3c>
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29508:	2500      	movs	r5, #0
            active_hold_taps[i].position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
   2950a:	f242 770f 	movw	r7, #9999	; 0x270f
            k_work_init_delayable(&active_hold_taps[i].work, behavior_hold_tap_timer_work_handler);
   2950e:	4620      	mov	r0, r4
   29510:	4641      	mov	r1, r8
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29512:	3501      	adds	r5, #1
            k_work_init_delayable(&active_hold_taps[i].work, behavior_hold_tap_timer_work_handler);
   29514:	f028 fa37 	bl	51986 <k_work_init_delayable>
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29518:	2d0a      	cmp	r5, #10
            active_hold_taps[i].position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
   2951a:	f844 7c20 	str.w	r7, [r4, #-32]
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   2951e:	f104 0458 	add.w	r4, r4, #88	; 0x58
   29522:	d1f4      	bne.n	2950e <behavior_hold_tap_init+0x16>
        }
    }
    init_first_run = false;
   29524:	2000      	movs	r0, #0
   29526:	7030      	strb	r0, [r6, #0]
    return 0;
}
   29528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2952c:	2000118e 	.word	0x2000118e
   29530:	20001748 	.word	0x20001748
   29534:	00049b29 	.word	0x00049b29

00029538 <capture_event.isra.0>:
static int capture_event(const zmk_event_t *event) {
   29538:	b510      	push	{r4, lr}
   2953a:	4a06      	ldr	r2, [pc, #24]	; (29554 <capture_event.isra.0+0x1c>)
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
   2953c:	2300      	movs	r3, #0
   2953e:	4611      	mov	r1, r2
        if (captured_events[i] == NULL) {
   29540:	f852 4b04 	ldr.w	r4, [r2], #4
   29544:	b914      	cbnz	r4, 2954c <capture_event.isra.0+0x14>
            captured_events[i] = event;
   29546:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
   2954a:	bd10      	pop	{r4, pc}
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
   2954c:	3301      	adds	r3, #1
   2954e:	2b28      	cmp	r3, #40	; 0x28
   29550:	d1f6      	bne.n	29540 <capture_event.isra.0+0x8>
   29552:	e7fa      	b.n	2954a <capture_event.isra.0+0x12>
   29554:	200043f4 	.word	0x200043f4

00029558 <press_binding.isra.0>:
static int press_binding(struct active_hold_tap *hold_tap) {
   29558:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (hold_tap->config->retro_tap && hold_tap->status == STATUS_HOLD_TIMER) {
   2955a:	69c1      	ldr	r1, [r0, #28]
   2955c:	7e03      	ldrb	r3, [r0, #24]
   2955e:	7c8a      	ldrb	r2, [r1, #18]
static int press_binding(struct active_hold_tap *hold_tap) {
   29560:	b093      	sub	sp, #76	; 0x4c
    if (hold_tap->config->retro_tap && hold_tap->status == STATUS_HOLD_TIMER) {
   29562:	b10a      	cbz	r2, 29568 <press_binding.isra.0+0x10>
   29564:	2b03      	cmp	r3, #3
   29566:	d02e      	beq.n	295c6 <press_binding.isra.0+0x6e>
    if (hold_tap->status == STATUS_HOLD_TIMER || hold_tap->status == STATUS_HOLD_INTERRUPT) {
   29568:	3b02      	subs	r3, #2
    struct zmk_behavior_binding_event event = {
   2956a:	2200      	movs	r2, #0
    if (hold_tap->status == STATUS_HOLD_TIMER || hold_tap->status == STATUS_HOLD_INTERRUPT) {
   2956c:	2b01      	cmp	r3, #1
        .timestamp = hold_tap->timestamp,
   2956e:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    struct zmk_behavior_binding binding = {0};
   29572:	e9cd 2203 	strd	r2, r2, [sp, #12]
        .position = hold_tap->position,
   29576:	6805      	ldr	r5, [r0, #0]
    struct zmk_behavior_binding_event event = {
   29578:	9206      	str	r2, [sp, #24]
    struct zmk_behavior_binding binding = {0};
   2957a:	9205      	str	r2, [sp, #20]
    if (hold_tap->status == STATUS_HOLD_TIMER || hold_tap->status == STATUS_HOLD_INTERRUPT) {
   2957c:	d825      	bhi.n	295ca <press_binding.isra.0+0x72>
        binding.behavior_dev = hold_tap->config->hold_behavior_dev;
   2957e:	684b      	ldr	r3, [r1, #4]
   29580:	9303      	str	r3, [sp, #12]
        binding.param1 = hold_tap->param_hold;
   29582:	6843      	ldr	r3, [r0, #4]
   29584:	9304      	str	r3, [sp, #16]
    return behavior_keymap_binding_pressed(&binding, event);
   29586:	e9cd 6708 	strd	r6, r7, [sp, #32]
   2958a:	9507      	str	r5, [sp, #28]
   2958c:	ab06      	add	r3, sp, #24
   2958e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29590:	ac0a      	add	r4, sp, #40	; 0x28
   29592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   29596:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   2959a:	950b      	str	r5, [sp, #44]	; 0x2c
   2959c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   295a0:	ad0e      	add	r5, sp, #56	; 0x38
   295a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   295a6:	9803      	ldr	r0, [sp, #12]
   295a8:	f01e fdba 	bl	48120 <z_impl_device_get_binding>

    if (dev == NULL) {
   295ac:	b158      	cbz	r0, 295c6 <press_binding.isra.0+0x6e>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   295ae:	6883      	ldr	r3, [r0, #8]
   295b0:	689c      	ldr	r4, [r3, #8]
   295b2:	b144      	cbz	r4, 295c6 <press_binding.isra.0+0x6e>
        return -ENOTSUP;
    }

    return api->binding_pressed(binding, event);
   295b4:	ab12      	add	r3, sp, #72	; 0x48
   295b6:	e913 0003 	ldmdb	r3, {r0, r1}
   295ba:	e88d 0003 	stmia.w	sp, {r0, r1}
   295be:	a803      	add	r0, sp, #12
   295c0:	e895 000c 	ldmia.w	r5, {r2, r3}
   295c4:	47a0      	blx	r4
}
   295c6:	b013      	add	sp, #76	; 0x4c
   295c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        binding.behavior_dev = hold_tap->config->tap_behavior_dev;
   295ca:	688b      	ldr	r3, [r1, #8]
   295cc:	9303      	str	r3, [sp, #12]
        binding.param1 = hold_tap->param_tap;
   295ce:	6883      	ldr	r3, [r0, #8]
   295d0:	9304      	str	r3, [sp, #16]
    last_tapped.position = hold_tap->position;
   295d2:	4b02      	ldr	r3, [pc, #8]	; (295dc <press_binding.isra.0+0x84>)
    last_tapped.timestamp = hold_tap->timestamp;
   295d4:	e9c3 6702 	strd	r6, r7, [r3, #8]
    last_tapped.position = hold_tap->position;
   295d8:	601d      	str	r5, [r3, #0]
}
   295da:	e7d4      	b.n	29586 <press_binding.isra.0+0x2e>
   295dc:	20000000 	.word	0x20000000

000295e0 <decide_hold_tap>:
                            enum decision_moment decision_moment) {
   295e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (hold_tap->status != STATUS_UNDECIDED) {
   295e4:	7e03      	ldrb	r3, [r0, #24]
   295e6:	2b00      	cmp	r3, #0
   295e8:	d166      	bne.n	296b8 <decide_hold_tap+0xd8>
    if (hold_tap != undecided_hold_tap) {
   295ea:	4c39      	ldr	r4, [pc, #228]	; (296d0 <decide_hold_tap+0xf0>)
   295ec:	6823      	ldr	r3, [r4, #0]
   295ee:	4283      	cmp	r3, r0
   295f0:	d162      	bne.n	296b8 <decide_hold_tap+0xd8>
    switch (hold_tap->config->flavor) {
   295f2:	69c3      	ldr	r3, [r0, #28]
   295f4:	7c5a      	ldrb	r2, [r3, #17]
   295f6:	2a03      	cmp	r2, #3
   295f8:	d825      	bhi.n	29646 <decide_hold_tap+0x66>
   295fa:	e8df f002 	tbb	[pc, r2]
   295fe:	0d02      	.short	0x0d02
   29600:	5f1d      	.short	0x5f1d
    switch (event) {
   29602:	2904      	cmp	r1, #4
   29604:	d81f      	bhi.n	29646 <decide_hold_tap+0x66>
   29606:	e8df f001 	tbb	[pc, r1]
   2960a:	031c      	.short	0x031c
   2960c:	051e      	.short	0x051e
   2960e:	1c          	.byte	0x1c
   2960f:	00          	.byte	0x00
        hold_tap->status = STATUS_HOLD_INTERRUPT;
   29610:	2202      	movs	r2, #2
   29612:	e017      	b.n	29644 <decide_hold_tap+0x64>
        hold_tap->status = STATUS_HOLD_TIMER;
   29614:	2203      	movs	r2, #3
   29616:	e015      	b.n	29644 <decide_hold_tap+0x64>
    switch (event) {
   29618:	2904      	cmp	r1, #4
   2961a:	d814      	bhi.n	29646 <decide_hold_tap+0x66>
   2961c:	a201      	add	r2, pc, #4	; (adr r2, 29624 <decide_hold_tap+0x44>)
   2961e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
   29622:	bf00      	nop
   29624:	00029643 	.word	0x00029643
   29628:	00029647 	.word	0x00029647
   2962c:	00029611 	.word	0x00029611
   29630:	00029615 	.word	0x00029615
   29634:	00029643 	.word	0x00029643
    switch (event) {
   29638:	2903      	cmp	r1, #3
   2963a:	d0eb      	beq.n	29614 <decide_hold_tap+0x34>
   2963c:	f011 0ffb 	tst.w	r1, #251	; 0xfb
   29640:	d101      	bne.n	29646 <decide_hold_tap+0x66>
        hold_tap->status = STATUS_TAP;
   29642:	2201      	movs	r2, #1
        hold_tap->status = STATUS_HOLD_TIMER;
   29644:	7602      	strb	r2, [r0, #24]
    if (hold_tap->status == STATUS_UNDECIDED) {
   29646:	7e02      	ldrb	r2, [r0, #24]
   29648:	b3b2      	cbz	r2, 296b8 <decide_hold_tap+0xd8>
    if (!(hold_tap->config->hold_trigger_key_positions_len > 0)) {
   2964a:	6959      	ldr	r1, [r3, #20]
   2964c:	2900      	cmp	r1, #0
   2964e:	dd0d      	ble.n	2966c <decide_hold_tap+0x8c>
    if (hold_tap->position_of_first_other_key_pressed == -1) {
   29650:	6d45      	ldr	r5, [r0, #84]	; 0x54
   29652:	1c6a      	adds	r2, r5, #1
   29654:	d00a      	beq.n	2966c <decide_hold_tap+0x8c>
   29656:	3318      	adds	r3, #24
    for (int i = 0; i < hold_tap->config->hold_trigger_key_positions_len; i++) {
   29658:	2200      	movs	r2, #0
        if (hold_tap->config->hold_trigger_key_positions[i] ==
   2965a:	f853 6b04 	ldr.w	r6, [r3], #4
   2965e:	42b5      	cmp	r5, r6
   29660:	d004      	beq.n	2966c <decide_hold_tap+0x8c>
    for (int i = 0; i < hold_tap->config->hold_trigger_key_positions_len; i++) {
   29662:	3201      	adds	r2, #1
   29664:	4291      	cmp	r1, r2
   29666:	d1f8      	bne.n	2965a <decide_hold_tap+0x7a>
    hold_tap->status = STATUS_TAP;
   29668:	2301      	movs	r3, #1
   2966a:	7603      	strb	r3, [r0, #24]
    undecided_hold_tap = NULL;
   2966c:	2300      	movs	r3, #0
   2966e:	6023      	str	r3, [r4, #0]
    press_binding(hold_tap);
   29670:	f7ff ff72 	bl	29558 <press_binding.isra.0>
    if (undecided_hold_tap != NULL) {
   29674:	f8d4 8000 	ldr.w	r8, [r4]
   29678:	f1b8 0f00 	cmp.w	r8, #0
   2967c:	d11c      	bne.n	296b8 <decide_hold_tap+0xd8>
   2967e:	4f15      	ldr	r7, [pc, #84]	; (296d4 <decide_hold_tap+0xf4>)
        ZMK_EVENT_RAISE_AT(captured_event, behavior_hold_tap);
   29680:	f8df 9054 	ldr.w	r9, [pc, #84]	; 296d8 <decide_hold_tap+0xf8>
    if (undecided_hold_tap != NULL) {
   29684:	2628      	movs	r6, #40	; 0x28
        const zmk_event_t *captured_event = captured_events[i];
   29686:	f857 5b04 	ldr.w	r5, [r7], #4
        if (captured_event == NULL) {
   2968a:	b1ad      	cbz	r5, 296b8 <decide_hold_tap+0xd8>
        if (undecided_hold_tap != NULL) {
   2968c:	6823      	ldr	r3, [r4, #0]
        captured_events[i] = NULL;
   2968e:	f847 8c04 	str.w	r8, [r7, #-4]
        if (undecided_hold_tap != NULL) {
   29692:	b123      	cbz	r3, 2969e <decide_hold_tap+0xbe>
   29694:	f44f 70a4 	mov.w	r0, #328	; 0x148
   29698:	2100      	movs	r1, #0
   2969a:	f01f fded 	bl	49278 <z_impl_k_sleep>
        if ((position_event = as_zmk_position_state_changed(captured_event)) != NULL) {
   2969e:	4628      	mov	r0, r5
   296a0:	f7ff fdd8 	bl	29254 <as_zmk_position_state_changed>
   296a4:	b910      	cbnz	r0, 296ac <decide_hold_tap+0xcc>
        } else if ((modifier_event = as_zmk_keycode_state_changed(captured_event)) != NULL) {
   296a6:	4628      	mov	r0, r5
   296a8:	f000 fd04 	bl	2a0b4 <as_zmk_keycode_state_changed>
        ZMK_EVENT_RAISE_AT(captured_event, behavior_hold_tap);
   296ac:	4649      	mov	r1, r9
   296ae:	4628      	mov	r0, r5
   296b0:	f7ff fcd2 	bl	29058 <zmk_event_manager_raise_at>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
   296b4:	3e01      	subs	r6, #1
   296b6:	d1e6      	bne.n	29686 <decide_hold_tap+0xa6>
}
   296b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (event) {
   296bc:	2901      	cmp	r1, #1
   296be:	d0a7      	beq.n	29610 <decide_hold_tap+0x30>
   296c0:	d802      	bhi.n	296c8 <decide_hold_tap+0xe8>
   296c2:	2900      	cmp	r1, #0
   296c4:	d0bd      	beq.n	29642 <decide_hold_tap+0x62>
   296c6:	e7be      	b.n	29646 <decide_hold_tap+0x66>
   296c8:	3903      	subs	r1, #3
   296ca:	2901      	cmp	r1, #1
   296cc:	d9b9      	bls.n	29642 <decide_hold_tap+0x62>
   296ce:	e7ba      	b.n	29646 <decide_hold_tap+0x66>
   296d0:	20004494 	.word	0x20004494
   296d4:	200043f4 	.word	0x200043f4
   296d8:	00052cd4 	.word	0x00052cd4

000296dc <on_hold_tap_binding_pressed>:
                                       struct zmk_behavior_binding_event event) {
   296dc:	b082      	sub	sp, #8
   296de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   296e2:	a908      	add	r1, sp, #32
   296e4:	4605      	mov	r5, r0
   296e6:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   296ea:	6800      	ldr	r0, [r0, #0]
   296ec:	f01e fd18 	bl	48120 <z_impl_device_get_binding>
    if (undecided_hold_tap != NULL) {
   296f0:	492f      	ldr	r1, [pc, #188]	; (297b0 <on_hold_tap_binding_pressed+0xd4>)
   296f2:	680c      	ldr	r4, [r1, #0]
   296f4:	b984      	cbnz	r4, 29718 <on_hold_tap_binding_pressed+0x3c>
        store_hold_tap(event.position, binding->param1, binding->param2, event.timestamp, cfg);
   296f6:	e9d5 8901 	ldrd	r8, r9, [r5, #4]
   296fa:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
   296fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
        if (active_hold_taps[i].position != ZMK_BHV_HOLD_TAP_POSITION_NOT_USED) {
   29700:	4e2c      	ldr	r6, [pc, #176]	; (297b4 <on_hold_tap_binding_pressed+0xd8>)
   29702:	2758      	movs	r7, #88	; 0x58
   29704:	f242 7a0f 	movw	sl, #9999	; 0x270f
   29708:	fb07 f504 	mul.w	r5, r7, r4
   2970c:	59ab      	ldr	r3, [r5, r6]
   2970e:	4553      	cmp	r3, sl
   29710:	d007      	beq.n	29722 <on_hold_tap_binding_pressed+0x46>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29712:	3401      	adds	r4, #1
   29714:	2c0a      	cmp	r4, #10
   29716:	d1f7      	bne.n	29708 <on_hold_tap_binding_pressed+0x2c>
}
   29718:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2971c:	2000      	movs	r0, #0
   2971e:	b002      	add	sp, #8
   29720:	4770      	bx	lr
    const struct behavior_hold_tap_config *cfg = dev->config;
   29722:	6847      	ldr	r7, [r0, #4]
        active_hold_taps[i].position = position;
   29724:	5172      	str	r2, [r6, r5]
   29726:	1970      	adds	r0, r6, r5
        active_hold_taps[i].status = STATUS_UNDECIDED;
   29728:	2300      	movs	r3, #0
   2972a:	7603      	strb	r3, [r0, #24]
        active_hold_taps[i].position_of_first_other_key_pressed = -1;
   2972c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29730:	6543      	str	r3, [r0, #84]	; 0x54
    if (hold_tap->config->global_quick_tap || last_tapped.position == hold_tap->position) {
   29732:	7c3b      	ldrb	r3, [r7, #16]
    undecided_hold_tap = hold_tap;
   29734:	6008      	str	r0, [r1, #0]
        active_hold_taps[i].param_tap = param_tap;
   29736:	e9c0 8901 	strd	r8, r9, [r0, #4]
        active_hold_taps[i].timestamp = timestamp;
   2973a:	e9c0 ec04 	strd	lr, ip, [r0, #16]
   2973e:	491e      	ldr	r1, [pc, #120]	; (297b8 <on_hold_tap_binding_pressed+0xdc>)
        active_hold_taps[i].config = config;
   29740:	61c7      	str	r7, [r0, #28]
    if (hold_tap->config->global_quick_tap || last_tapped.position == hold_tap->position) {
   29742:	b913      	cbnz	r3, 2974a <on_hold_tap_binding_pressed+0x6e>
   29744:	680b      	ldr	r3, [r1, #0]
   29746:	429a      	cmp	r2, r3
   29748:	d10c      	bne.n	29764 <on_hold_tap_binding_pressed+0x88>
        return (last_tapped.timestamp + hold_tap->config->quick_tap_ms) > hold_tap->timestamp;
   2974a:	e9d1 3102 	ldrd	r3, r1, [r1, #8]
   2974e:	68fa      	ldr	r2, [r7, #12]
   29750:	18d3      	adds	r3, r2, r3
   29752:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
    if (is_quick_tap(hold_tap)) {
   29756:	459e      	cmp	lr, r3
   29758:	eb7c 0302 	sbcs.w	r3, ip, r2
   2975c:	da02      	bge.n	29764 <on_hold_tap_binding_pressed+0x88>
        decide_hold_tap(hold_tap, HT_QUICK_TAP);
   2975e:	2104      	movs	r1, #4
   29760:	f7ff ff3e 	bl	295e0 <decide_hold_tap>
    int32_t tapping_term_ms_left = (hold_tap->timestamp + cfg->tapping_term_ms) - k_uptime_get();
   29764:	2358      	movs	r3, #88	; 0x58
   29766:	fb03 6404 	mla	r4, r3, r4, r6
   2976a:	6839      	ldr	r1, [r7, #0]
   2976c:	6924      	ldr	r4, [r4, #16]
   2976e:	440c      	add	r4, r1
	return z_impl_k_uptime_ticks();
   29770:	f028 faac 	bl	51ccc <z_impl_k_uptime_ticks>
   29774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29778:	fba0 3002 	umull	r3, r0, r0, r2
   2977c:	fb02 0001 	mla	r0, r2, r1, r0
   29780:	0bdb      	lsrs	r3, r3, #15
   29782:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
   29786:	1ae1      	subs	r1, r4, r3
    k_work_schedule(&hold_tap->work, K_MSEC(tapping_term_ms_left));
   29788:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2978c:	f240 30e7 	movw	r0, #999	; 0x3e7
   29790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29794:	2300      	movs	r3, #0
   29796:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2979a:	1449      	asrs	r1, r1, #17
   2979c:	f7fc fcb0 	bl	26100 <__aeabi_uldivmod>
   297a0:	3520      	adds	r5, #32
   297a2:	4602      	mov	r2, r0
   297a4:	460b      	mov	r3, r1
   297a6:	1970      	adds	r0, r6, r5
   297a8:	f01f fa56 	bl	48c58 <k_work_schedule>
    return ZMK_BEHAVIOR_OPAQUE;
   297ac:	e7b4      	b.n	29718 <on_hold_tap_binding_pressed+0x3c>
   297ae:	bf00      	nop
   297b0:	20004494 	.word	0x20004494
   297b4:	20001728 	.word	0x20001728
   297b8:	20000000 	.word	0x20000000

000297bc <behavior_hold_tap_listener>:
int behavior_hold_tap_listener(const zmk_event_t *eh) {
   297bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   297c0:	4605      	mov	r5, r0
    if (as_zmk_position_state_changed(eh) != NULL) {
   297c2:	f7ff fd47 	bl	29254 <as_zmk_position_state_changed>
   297c6:	2800      	cmp	r0, #0
   297c8:	d069      	beq.n	2989e <behavior_hold_tap_listener+0xe2>
    struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   297ca:	4628      	mov	r0, r5
   297cc:	f7ff fd42 	bl	29254 <as_zmk_position_state_changed>
   297d0:	4e49      	ldr	r6, [pc, #292]	; (298f8 <behavior_hold_tap_listener+0x13c>)
    update_hold_status_for_retro_tap(ev->position);
   297d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
    struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   297d6:	4604      	mov	r4, r0
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   297d8:	2700      	movs	r7, #0
        if (hold_tap->position == ignore_position ||
   297da:	f242 790f 	movw	r9, #9999	; 0x270f
            hold_tap->status = STATUS_HOLD_INTERRUPT;
   297de:	f04f 0a02 	mov.w	sl, #2
        if (hold_tap->position == ignore_position ||
   297e2:	6833      	ldr	r3, [r6, #0]
   297e4:	4598      	cmp	r8, r3
   297e6:	d00c      	beq.n	29802 <behavior_hold_tap_listener+0x46>
   297e8:	454b      	cmp	r3, r9
   297ea:	d00a      	beq.n	29802 <behavior_hold_tap_listener+0x46>
            hold_tap->config->retro_tap == false) {
   297ec:	69f3      	ldr	r3, [r6, #28]
            hold_tap->position == ZMK_BHV_HOLD_TAP_POSITION_NOT_USED ||
   297ee:	7c9b      	ldrb	r3, [r3, #18]
   297f0:	b13b      	cbz	r3, 29802 <behavior_hold_tap_listener+0x46>
        if (hold_tap->status == STATUS_HOLD_TIMER) {
   297f2:	7e33      	ldrb	r3, [r6, #24]
   297f4:	2b03      	cmp	r3, #3
   297f6:	d104      	bne.n	29802 <behavior_hold_tap_listener+0x46>
            hold_tap->status = STATUS_HOLD_INTERRUPT;
   297f8:	f886 a018 	strb.w	sl, [r6, #24]
            press_binding(hold_tap);
   297fc:	4630      	mov	r0, r6
   297fe:	f7ff feab 	bl	29558 <press_binding.isra.0>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29802:	3701      	adds	r7, #1
   29804:	2f0a      	cmp	r7, #10
   29806:	f106 0658 	add.w	r6, r6, #88	; 0x58
   2980a:	d1ea      	bne.n	297e2 <behavior_hold_tap_listener+0x26>
    if (undecided_hold_tap == NULL) {
   2980c:	4f3b      	ldr	r7, [pc, #236]	; (298fc <behavior_hold_tap_listener+0x140>)
   2980e:	6838      	ldr	r0, [r7, #0]
   29810:	b910      	cbnz	r0, 29818 <behavior_hold_tap_listener+0x5c>
        return ZMK_EV_EVENT_BUBBLE;
   29812:	2000      	movs	r0, #0
}
   29814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((ev->state) // i.e. key pressed (not released)
   29818:	7a22      	ldrb	r2, [r4, #8]
        undecided_hold_tap->position_of_first_other_key_pressed = ev->position;
   2981a:	6863      	ldr	r3, [r4, #4]
    if ((ev->state) // i.e. key pressed (not released)
   2981c:	b11a      	cbz	r2, 29826 <behavior_hold_tap_listener+0x6a>
        && (undecided_hold_tap->position_of_first_other_key_pressed ==
   2981e:	6d42      	ldr	r2, [r0, #84]	; 0x54
   29820:	3201      	adds	r2, #1
        undecided_hold_tap->position_of_first_other_key_pressed = ev->position;
   29822:	bf08      	it	eq
   29824:	6543      	streq	r3, [r0, #84]	; 0x54
    if (undecided_hold_tap->position == ev->position) {
   29826:	6802      	ldr	r2, [r0, #0]
   29828:	429a      	cmp	r2, r3
   2982a:	d0f2      	beq.n	29812 <behavior_hold_tap_listener+0x56>
        (undecided_hold_tap->timestamp + undecided_hold_tap->config->tapping_term_ms)) {
   2982c:	69c3      	ldr	r3, [r0, #28]
   2982e:	681a      	ldr	r2, [r3, #0]
   29830:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
   29834:	18d3      	adds	r3, r2, r3
   29836:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
    if (ev->timestamp >
   2983a:	e9d4 6104 	ldrd	r6, r1, [r4, #16]
   2983e:	42b3      	cmp	r3, r6
   29840:	eb72 0301 	sbcs.w	r3, r2, r1
   29844:	da02      	bge.n	2984c <behavior_hold_tap_listener+0x90>
        decide_hold_tap(undecided_hold_tap, HT_TIMER_EVENT);
   29846:	2103      	movs	r1, #3
   29848:	f7ff feca 	bl	295e0 <decide_hold_tap>
    if (!ev->state && find_captured_keydown_event(ev->position) == NULL) {
   2984c:	7a26      	ldrb	r6, [r4, #8]
   2984e:	b166      	cbz	r6, 2986a <behavior_hold_tap_listener+0xae>
    capture_event(eh);
   29850:	4628      	mov	r0, r5
   29852:	f7ff fe71 	bl	29538 <capture_event.isra.0>
    decide_hold_tap(undecided_hold_tap, ev->state ? HT_OTHER_KEY_DOWN : HT_OTHER_KEY_UP);
   29856:	7a23      	ldrb	r3, [r4, #8]
   29858:	6838      	ldr	r0, [r7, #0]
   2985a:	2b00      	cmp	r3, #0
   2985c:	bf14      	ite	ne
   2985e:	2101      	movne	r1, #1
   29860:	2102      	moveq	r1, #2
   29862:	f7ff febd 	bl	295e0 <decide_hold_tap>
    return ZMK_EV_EVENT_CAPTURED;
   29866:	2002      	movs	r0, #2
   29868:	e7d4      	b.n	29814 <behavior_hold_tap_listener+0x58>
    if (!ev->state && find_captured_keydown_event(ev->position) == NULL) {
   2986a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
   2986e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 29900 <behavior_hold_tap_listener+0x144>
   29872:	46b2      	mov	sl, r6
        const zmk_event_t *eh = captured_events[i];
   29874:	f858 0b04 	ldr.w	r0, [r8], #4
        if (eh == NULL) {
   29878:	b170      	cbz	r0, 29898 <behavior_hold_tap_listener+0xdc>
        struct zmk_position_state_changed *position_event = as_zmk_position_state_changed(eh);
   2987a:	f7ff fceb 	bl	29254 <as_zmk_position_state_changed>
        if (position_event == NULL) {
   2987e:	b130      	cbz	r0, 2988e <behavior_hold_tap_listener+0xd2>
        if (position_event->position == position && position_event->state) {
   29880:	6843      	ldr	r3, [r0, #4]
   29882:	4599      	cmp	r9, r3
   29884:	d103      	bne.n	2988e <behavior_hold_tap_listener+0xd2>
   29886:	7a03      	ldrb	r3, [r0, #8]
   29888:	2b00      	cmp	r3, #0
   2988a:	bf18      	it	ne
   2988c:	4606      	movne	r6, r0
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
   2988e:	f10a 0a01 	add.w	sl, sl, #1
   29892:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
   29896:	d1ed      	bne.n	29874 <behavior_hold_tap_listener+0xb8>
    if (!ev->state && find_captured_keydown_event(ev->position) == NULL) {
   29898:	2e00      	cmp	r6, #0
   2989a:	d1d9      	bne.n	29850 <behavior_hold_tap_listener+0x94>
   2989c:	e7b9      	b.n	29812 <behavior_hold_tap_listener+0x56>
    } else if (as_zmk_keycode_state_changed(eh) != NULL) {
   2989e:	4628      	mov	r0, r5
   298a0:	f000 fc08 	bl	2a0b4 <as_zmk_keycode_state_changed>
   298a4:	2800      	cmp	r0, #0
   298a6:	d0b4      	beq.n	29812 <behavior_hold_tap_listener+0x56>
    struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   298a8:	4628      	mov	r0, r5
   298aa:	f000 fc03 	bl	2a0b4 <as_zmk_keycode_state_changed>
    if (ev->state && !is_mod(ev->usage_page, ev->keycode)) {
   298ae:	7a83      	ldrb	r3, [r0, #10]
   298b0:	b19b      	cbz	r3, 298da <behavior_hold_tap_listener+0x11e>
    zmk_key_t key;
    bool pressed;
};

static inline bool is_mod(uint8_t usage_page, uint32_t keycode) {
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   298b2:	6843      	ldr	r3, [r0, #4]
   298b4:	3be0      	subs	r3, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   298b6:	2b07      	cmp	r3, #7
   298b8:	d802      	bhi.n	298c0 <behavior_hold_tap_listener+0x104>
   298ba:	7803      	ldrb	r3, [r0, #0]
   298bc:	2b07      	cmp	r3, #7
   298be:	d00c      	beq.n	298da <behavior_hold_tap_listener+0x11e>
    if (timestamp > last_tapped.timestamp) {
   298c0:	4b10      	ldr	r3, [pc, #64]	; (29904 <behavior_hold_tap_listener+0x148>)
        store_last_tapped(ev->timestamp);
   298c2:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    if (timestamp > last_tapped.timestamp) {
   298c6:	e9d3 6402 	ldrd	r6, r4, [r3, #8]
   298ca:	428e      	cmp	r6, r1
   298cc:	4194      	sbcs	r4, r2
        last_tapped.timestamp = timestamp;
   298ce:	bfbe      	ittt	lt
   298d0:	e9c3 1202 	strdlt	r1, r2, [r3, #8]
        last_tapped.position = INT32_MIN;
   298d4:	f04f 4400 	movlt.w	r4, #2147483648	; 0x80000000
   298d8:	601c      	strlt	r4, [r3, #0]
    if (undecided_hold_tap == NULL) {
   298da:	4b08      	ldr	r3, [pc, #32]	; (298fc <behavior_hold_tap_listener+0x140>)
   298dc:	681b      	ldr	r3, [r3, #0]
   298de:	2b00      	cmp	r3, #0
   298e0:	d097      	beq.n	29812 <behavior_hold_tap_listener+0x56>
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   298e2:	6843      	ldr	r3, [r0, #4]
   298e4:	3be0      	subs	r3, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   298e6:	2b07      	cmp	r3, #7
   298e8:	d893      	bhi.n	29812 <behavior_hold_tap_listener+0x56>
   298ea:	7803      	ldrb	r3, [r0, #0]
   298ec:	2b07      	cmp	r3, #7
   298ee:	d190      	bne.n	29812 <behavior_hold_tap_listener+0x56>
    capture_event(eh);
   298f0:	4628      	mov	r0, r5
   298f2:	f7ff fe21 	bl	29538 <capture_event.isra.0>
   298f6:	e7b6      	b.n	29866 <behavior_hold_tap_listener+0xaa>
   298f8:	20001728 	.word	0x20001728
   298fc:	20004494 	.word	0x20004494
   29900:	200043f4 	.word	0x200043f4
   29904:	20000000 	.word	0x20000000

00029908 <on_hold_tap_binding_released>:
                                        struct zmk_behavior_binding_event event) {
   29908:	b082      	sub	sp, #8
   2990a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (active_hold_taps[i].position == position) {
   2990e:	4e2b      	ldr	r6, [pc, #172]	; (299bc <on_hold_tap_binding_released+0xb4>)
                                        struct zmk_behavior_binding_event event) {
   29910:	a906      	add	r1, sp, #24
   29912:	e881 000c 	stmia.w	r1, {r2, r3}
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29916:	2400      	movs	r4, #0
   29918:	2258      	movs	r2, #88	; 0x58
        if (active_hold_taps[i].position == position) {
   2991a:	fb02 f004 	mul.w	r0, r2, r4
   2991e:	5981      	ldr	r1, [r0, r6]
   29920:	428b      	cmp	r3, r1
   29922:	d139      	bne.n	29998 <on_hold_tap_binding_released+0x90>
            return &active_hold_taps[i];
   29924:	1835      	adds	r5, r6, r0
    int work_cancel_result = k_work_cancel_delayable(&hold_tap->work);
   29926:	3020      	adds	r0, #32
   29928:	4430      	add	r0, r6
   2992a:	f028 f83a 	bl	519a2 <k_work_cancel_delayable>
    if (event.timestamp > (hold_tap->timestamp + hold_tap->config->tapping_term_ms)) {
   2992e:	69eb      	ldr	r3, [r5, #28]
   29930:	681a      	ldr	r2, [r3, #0]
   29932:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
   29936:	18d3      	adds	r3, r2, r3
   29938:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
   2993c:	9908      	ldr	r1, [sp, #32]
   2993e:	428b      	cmp	r3, r1
   29940:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29942:	eb72 0303 	sbcs.w	r3, r2, r3
    int work_cancel_result = k_work_cancel_delayable(&hold_tap->work);
   29946:	4680      	mov	r8, r0
    if (event.timestamp > (hold_tap->timestamp + hold_tap->config->tapping_term_ms)) {
   29948:	da03      	bge.n	29952 <on_hold_tap_binding_released+0x4a>
        decide_hold_tap(hold_tap, HT_TIMER_EVENT);
   2994a:	2103      	movs	r1, #3
   2994c:	4628      	mov	r0, r5
   2994e:	f7ff fe47 	bl	295e0 <decide_hold_tap>
    if (!hold_tap->config->retro_tap) {
   29952:	2758      	movs	r7, #88	; 0x58
   29954:	fb07 6704 	mla	r7, r7, r4, r6
    decide_hold_tap(hold_tap, HT_KEY_UP);
   29958:	2100      	movs	r1, #0
   2995a:	4628      	mov	r0, r5
   2995c:	f7ff fe40 	bl	295e0 <decide_hold_tap>
    if (!hold_tap->config->retro_tap) {
   29960:	69fb      	ldr	r3, [r7, #28]
   29962:	7c9b      	ldrb	r3, [r3, #18]
   29964:	b153      	cbz	r3, 2997c <on_hold_tap_binding_released+0x74>
    if (hold_tap->status == STATUS_HOLD_TIMER) {
   29966:	7e3b      	ldrb	r3, [r7, #24]
   29968:	2b03      	cmp	r3, #3
   2996a:	d107      	bne.n	2997c <on_hold_tap_binding_released+0x74>
        release_binding(hold_tap);
   2996c:	4628      	mov	r0, r5
   2996e:	f020 f8ec 	bl	49b4a <release_binding.isra.0>
        hold_tap->status = STATUS_TAP;
   29972:	2301      	movs	r3, #1
   29974:	763b      	strb	r3, [r7, #24]
        press_binding(hold_tap);
   29976:	4628      	mov	r0, r5
   29978:	f7ff fdee 	bl	29558 <press_binding.isra.0>
    release_binding(hold_tap);
   2997c:	4628      	mov	r0, r5
   2997e:	f020 f8e4 	bl	49b4a <release_binding.isra.0>
    if (work_cancel_result == -EINPROGRESS) {
   29982:	f118 0f77 	cmn.w	r8, #119	; 0x77
   29986:	f04f 0358 	mov.w	r3, #88	; 0x58
   2998a:	d10d      	bne.n	299a8 <on_hold_tap_binding_released+0xa0>
        hold_tap->work_is_cancelled = true;
   2998c:	fb03 6404 	mla	r4, r3, r4, r6
   29990:	2301      	movs	r3, #1
   29992:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   29996:	e002      	b.n	2999e <on_hold_tap_binding_released+0x96>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
   29998:	3401      	adds	r4, #1
   2999a:	2c0a      	cmp	r4, #10
   2999c:	d1bd      	bne.n	2991a <on_hold_tap_binding_released+0x12>
}
   2999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   299a2:	2000      	movs	r0, #0
   299a4:	b002      	add	sp, #8
   299a6:	4770      	bx	lr
    hold_tap->position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
   299a8:	435c      	muls	r4, r3
   299aa:	1933      	adds	r3, r6, r4
   299ac:	f242 720f 	movw	r2, #9999	; 0x270f
   299b0:	5132      	str	r2, [r6, r4]
    hold_tap->status = STATUS_UNDECIDED;
   299b2:	2200      	movs	r2, #0
   299b4:	761a      	strb	r2, [r3, #24]
    hold_tap->work_is_cancelled = false;
   299b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
   299ba:	e7f0      	b.n	2999e <on_hold_tap_binding_released+0x96>
   299bc:	20001728 	.word	0x20001728

000299c0 <behavior_caps_word_init>:
    return ZMK_EV_EVENT_BUBBLE;
}

static int behavior_caps_word_init(const struct device *dev) {
    const struct behavior_caps_word_config *config = dev->config;
    devs[config->index] = dev;
   299c0:	6843      	ldr	r3, [r0, #4]
   299c2:	785a      	ldrb	r2, [r3, #1]
   299c4:	4b02      	ldr	r3, [pc, #8]	; (299d0 <behavior_caps_word_init+0x10>)
   299c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    return 0;
}
   299ca:	2000      	movs	r0, #0
   299cc:	4770      	bx	lr
   299ce:	bf00      	nop
   299d0:	20004498 	.word	0x20004498

000299d4 <caps_word_keycode_state_changed_listener>:
static int caps_word_keycode_state_changed_listener(const zmk_event_t *eh) {
   299d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   299d8:	f000 fb6c 	bl	2a0b4 <as_zmk_keycode_state_changed>
    if (ev == NULL || !ev->state) {
   299dc:	b108      	cbz	r0, 299e2 <caps_word_keycode_state_changed_listener+0xe>
   299de:	7a83      	ldrb	r3, [r0, #10]
   299e0:	bb7b      	cbnz	r3, 29a42 <caps_word_keycode_state_changed_listener+0x6e>
}
   299e2:	2000      	movs	r0, #0
   299e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!caps_word_is_alpha(ev->keycode) && !caps_word_is_numeric(ev->keycode) &&
   299e8:	2b23      	cmp	r3, #35	; 0x23
   299ea:	d9fa      	bls.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   299ec:	f1a2 03e0 	sub.w	r3, r2, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   299f0:	2b07      	cmp	r3, #7
   299f2:	d802      	bhi.n	299fa <caps_word_keycode_state_changed_listener+0x26>
   299f4:	b2fb      	uxtb	r3, r7
   299f6:	2b07      	cmp	r3, #7
   299f8:	d0f3      	beq.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
            !caps_word_is_caps_includelist(config, ev->usage_page, ev->keycode,
   299fa:	f890 a008 	ldrb.w	sl, [r0, #8]
    for (int i = 0; i < config->continuations_count; i++) {
   299fe:	4634      	mov	r4, r6
   29a00:	f04f 0900 	mov.w	r9, #0
        if (continuation->page == usage_page && continuation->id == usage_id &&
   29a04:	fa5f fb82 	uxtb.w	fp, r2
    for (int i = 0; i < config->continuations_count; i++) {
   29a08:	78b3      	ldrb	r3, [r6, #2]
   29a0a:	4599      	cmp	r9, r3
   29a0c:	db03      	blt.n	29a16 <caps_word_keycode_state_changed_listener+0x42>
    data->active = false;
   29a0e:	692b      	ldr	r3, [r5, #16]
   29a10:	2200      	movs	r2, #0
   29a12:	701a      	strb	r2, [r3, #0]
}
   29a14:	e7e5      	b.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
        if (continuation->page == usage_page && continuation->id == usage_id &&
   29a16:	88a3      	ldrh	r3, [r4, #4]
   29a18:	42bb      	cmp	r3, r7
   29a1a:	d003      	beq.n	29a24 <caps_word_keycode_state_changed_listener+0x50>
    for (int i = 0; i < config->continuations_count; i++) {
   29a1c:	f109 0901 	add.w	r9, r9, #1
   29a20:	340c      	adds	r4, #12
   29a22:	e7f1      	b.n	29a08 <caps_word_keycode_state_changed_listener+0x34>
        if (continuation->page == usage_page && continuation->id == usage_id &&
   29a24:	68a3      	ldr	r3, [r4, #8]
   29a26:	455b      	cmp	r3, fp
   29a28:	d1f8      	bne.n	29a1c <caps_word_keycode_state_changed_listener+0x48>
            (continuation->implicit_modifiers &
   29a2a:	f894 800c 	ldrb.w	r8, [r4, #12]
             (implicit_modifiers | zmk_hid_get_explicit_mods())) ==
   29a2e:	f7ff fc91 	bl	29354 <zmk_hid_get_explicit_mods>
        if (continuation->page == usage_page && continuation->id == usage_id &&
   29a32:	7b23      	ldrb	r3, [r4, #12]
             (implicit_modifiers | zmk_hid_get_explicit_mods())) ==
   29a34:	ea4a 0000 	orr.w	r0, sl, r0
        if (continuation->page == usage_page && continuation->id == usage_id &&
   29a38:	ea08 0800 	and.w	r8, r8, r0
   29a3c:	4543      	cmp	r3, r8
   29a3e:	d1ed      	bne.n	29a1c <caps_word_keycode_state_changed_listener+0x48>
   29a40:	e7cf      	b.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
        const struct device *dev = devs[i];
   29a42:	4b0b      	ldr	r3, [pc, #44]	; (29a70 <caps_word_keycode_state_changed_listener+0x9c>)
   29a44:	681d      	ldr	r5, [r3, #0]
        if (dev == NULL) {
   29a46:	2d00      	cmp	r5, #0
   29a48:	d0cb      	beq.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
        if (!data->active) {
   29a4a:	692b      	ldr	r3, [r5, #16]
   29a4c:	781b      	ldrb	r3, [r3, #0]
   29a4e:	2b00      	cmp	r3, #0
   29a50:	d0c7      	beq.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
    if (ev->usage_page != HID_USAGE_KEY || !caps_word_is_alpha(ev->keycode)) {
   29a52:	8807      	ldrh	r7, [r0, #0]
   29a54:	6842      	ldr	r2, [r0, #4]
        const struct behavior_caps_word_config *config = dev->config;
   29a56:	686e      	ldr	r6, [r5, #4]
    return (usage_id >= HID_USAGE_KEY_KEYBOARD_A && usage_id <= HID_USAGE_KEY_KEYBOARD_Z);
   29a58:	1f13      	subs	r3, r2, #4
    if (ev->usage_page != HID_USAGE_KEY || !caps_word_is_alpha(ev->keycode)) {
   29a5a:	2f07      	cmp	r7, #7
    return (usage_id >= HID_USAGE_KEY_KEYBOARD_A && usage_id <= HID_USAGE_KEY_KEYBOARD_Z);
   29a5c:	b2db      	uxtb	r3, r3
    if (ev->usage_page != HID_USAGE_KEY || !caps_word_is_alpha(ev->keycode)) {
   29a5e:	d1c3      	bne.n	299e8 <caps_word_keycode_state_changed_listener+0x14>
   29a60:	2b19      	cmp	r3, #25
   29a62:	d8c1      	bhi.n	299e8 <caps_word_keycode_state_changed_listener+0x14>
    ev->implicit_modifiers |= config->mods;
   29a64:	7a03      	ldrb	r3, [r0, #8]
   29a66:	7832      	ldrb	r2, [r6, #0]
   29a68:	4313      	orrs	r3, r2
   29a6a:	7203      	strb	r3, [r0, #8]
    return (usage_id >= HID_USAGE_KEY_KEYBOARD_A && usage_id <= HID_USAGE_KEY_KEYBOARD_Z);
   29a6c:	e7b9      	b.n	299e2 <caps_word_keycode_state_changed_listener+0xe>
   29a6e:	bf00      	nop
   29a70:	20004498 	.word	0x20004498

00029a74 <handle_control_binding>:
#define IS_TAP_TIME(dev) ZM_IS_NODE_MATCH(dev, TAP_TIME)
#define IS_WAIT_TIME(dev) ZM_IS_NODE_MATCH(dev, WAIT_TIME)
#define IS_PAUSE(dev) ZM_IS_NODE_MATCH(dev, WAIT_REL)

static bool handle_control_binding(struct behavior_macro_trigger_state *state,
                                   const struct zmk_behavior_binding *binding) {
   29a74:	b538      	push	{r3, r4, r5, lr}
   29a76:	460c      	mov	r4, r1
   29a78:	4605      	mov	r5, r0
    if (IS_TAP_MODE(binding->behavior_dev)) {
   29a7a:	4915      	ldr	r1, [pc, #84]	; (29ad0 <handle_control_binding+0x5c>)
   29a7c:	6820      	ldr	r0, [r4, #0]
   29a7e:	f022 fdec 	bl	4c65a <strcmp>
   29a82:	b910      	cbnz	r0, 29a8a <handle_control_binding+0x16>
        state->mode = MACRO_MODE_TAP;
   29a84:	7228      	strb	r0, [r5, #8]
        LOG_DBG("macro wait time set: %d", state->wait_ms);
    } else {
        return false;
    }

    return true;
   29a86:	2001      	movs	r0, #1
   29a88:	e006      	b.n	29a98 <handle_control_binding+0x24>
    } else if (IS_PRESS_MODE(binding->behavior_dev)) {
   29a8a:	4912      	ldr	r1, [pc, #72]	; (29ad4 <handle_control_binding+0x60>)
   29a8c:	6820      	ldr	r0, [r4, #0]
   29a8e:	f022 fde4 	bl	4c65a <strcmp>
   29a92:	b910      	cbnz	r0, 29a9a <handle_control_binding+0x26>
        state->mode = MACRO_MODE_PRESS;
   29a94:	2001      	movs	r0, #1
   29a96:	7228      	strb	r0, [r5, #8]
}
   29a98:	bd38      	pop	{r3, r4, r5, pc}
    } else if (IS_RELEASE_MODE(binding->behavior_dev)) {
   29a9a:	490f      	ldr	r1, [pc, #60]	; (29ad8 <handle_control_binding+0x64>)
   29a9c:	6820      	ldr	r0, [r4, #0]
   29a9e:	f022 fddc 	bl	4c65a <strcmp>
   29aa2:	b910      	cbnz	r0, 29aaa <handle_control_binding+0x36>
        state->mode = MACRO_MODE_RELEASE;
   29aa4:	2302      	movs	r3, #2
   29aa6:	722b      	strb	r3, [r5, #8]
        LOG_DBG("macro mode set: release");
   29aa8:	e7ed      	b.n	29a86 <handle_control_binding+0x12>
    } else if (IS_TAP_TIME(binding->behavior_dev)) {
   29aaa:	490c      	ldr	r1, [pc, #48]	; (29adc <handle_control_binding+0x68>)
   29aac:	6820      	ldr	r0, [r4, #0]
   29aae:	f022 fdd4 	bl	4c65a <strcmp>
   29ab2:	b910      	cbnz	r0, 29aba <handle_control_binding+0x46>
        state->tap_ms = binding->param1;
   29ab4:	6863      	ldr	r3, [r4, #4]
   29ab6:	606b      	str	r3, [r5, #4]
   29ab8:	e7e5      	b.n	29a86 <handle_control_binding+0x12>
    } else if (IS_WAIT_TIME(binding->behavior_dev)) {
   29aba:	4909      	ldr	r1, [pc, #36]	; (29ae0 <handle_control_binding+0x6c>)
   29abc:	6820      	ldr	r0, [r4, #0]
   29abe:	f022 fdcc 	bl	4c65a <strcmp>
   29ac2:	b910      	cbnz	r0, 29aca <handle_control_binding+0x56>
        state->wait_ms = binding->param1;
   29ac4:	6863      	ldr	r3, [r4, #4]
   29ac6:	602b      	str	r3, [r5, #0]
        LOG_DBG("macro wait time set: %d", state->wait_ms);
   29ac8:	e7dd      	b.n	29a86 <handle_control_binding+0x12>
        return false;
   29aca:	2000      	movs	r0, #0
   29acc:	e7e4      	b.n	29a98 <handle_control_binding+0x24>
   29ace:	bf00      	nop
   29ad0:	000562f7 	.word	0x000562f7
   29ad4:	000562ff 	.word	0x000562ff
   29ad8:	00056309 	.word	0x00056309
   29adc:	00056311 	.word	0x00056311
   29ae0:	0005631e 	.word	0x0005631e

00029ae4 <behavior_macro_init>:

static int behavior_macro_init(const struct device *dev) {
   29ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct behavior_macro_config *cfg = dev->config;
   29ae8:	f8d0 8004 	ldr.w	r8, [r0, #4]
    struct behavior_macro_state *state = dev->data;
   29aec:	6907      	ldr	r7, [r0, #16]
    state->press_bindings_count = cfg->count;
   29aee:	f8d8 3008 	ldr.w	r3, [r8, #8]

    LOG_DBG("Precalculate initial release state:");
    for (int i = 0; i < cfg->count; i++) {
        if (handle_control_binding(&state->release_state, &cfg->bindings[i])) {
            // Updated state used for initial state on release.
        } else if (IS_PAUSE(cfg->bindings[i].behavior_dev)) {
   29af2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 29b3c <behavior_macro_init+0x58>
    state->press_bindings_count = cfg->count;
   29af6:	613b      	str	r3, [r7, #16]
    state->release_state.count = 0;
   29af8:	2400      	movs	r4, #0
    state->release_state.start_index = cfg->count;
   29afa:	817b      	strh	r3, [r7, #10]
    state->release_state.count = 0;
   29afc:	81bc      	strh	r4, [r7, #12]
    for (int i = 0; i < cfg->count; i++) {
   29afe:	f108 060c 	add.w	r6, r8, #12
   29b02:	f8d8 3008 	ldr.w	r3, [r8, #8]
   29b06:	42a3      	cmp	r3, r4
   29b08:	d911      	bls.n	29b2e <behavior_macro_init+0x4a>
        if (handle_control_binding(&state->release_state, &cfg->bindings[i])) {
   29b0a:	4631      	mov	r1, r6
   29b0c:	4638      	mov	r0, r7
   29b0e:	f7ff ffb1 	bl	29a74 <handle_control_binding>
   29b12:	1c65      	adds	r5, r4, #1
   29b14:	b970      	cbnz	r0, 29b34 <behavior_macro_init+0x50>
        } else if (IS_PAUSE(cfg->bindings[i].behavior_dev)) {
   29b16:	6830      	ldr	r0, [r6, #0]
   29b18:	4649      	mov	r1, r9
   29b1a:	f022 fd9e 	bl	4c65a <strcmp>
   29b1e:	b948      	cbnz	r0, 29b34 <behavior_macro_init+0x50>
            state->release_state.start_index = i + 1;
            state->release_state.count = cfg->count - state->release_state.start_index;
   29b20:	f8d8 3008 	ldr.w	r3, [r8, #8]
            state->press_bindings_count = i;
   29b24:	613c      	str	r4, [r7, #16]
            state->release_state.start_index = i + 1;
   29b26:	b2ad      	uxth	r5, r5
   29b28:	817d      	strh	r5, [r7, #10]
            state->release_state.count = cfg->count - state->release_state.start_index;
   29b2a:	1b5d      	subs	r5, r3, r5
   29b2c:	81bd      	strh	r5, [r7, #12]
            // Ignore regular invokable bindings
        }
    }

    return 0;
};
   29b2e:	2000      	movs	r0, #0
   29b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < cfg->count; i++) {
   29b34:	462c      	mov	r4, r5
   29b36:	360c      	adds	r6, #12
   29b38:	e7e3      	b.n	29b02 <behavior_macro_init+0x1e>
   29b3a:	bf00      	nop
   29b3c:	0005632c 	.word	0x0005632c

00029b40 <behavior_queue_process_next>:
K_MSGQ_DEFINE(zmk_behavior_queue_msgq, sizeof(struct q_item), CONFIG_ZMK_BEHAVIORS_QUEUE_SIZE, 4);

static void behavior_queue_process_next(struct k_work *work);
static K_WORK_DELAYABLE_DEFINE(queue_work, behavior_queue_process_next);

static void behavior_queue_process_next(struct k_work *work) {
   29b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29b44:	b095      	sub	sp, #84	; 0x54
    struct q_item item = {.wait = 0};
   29b46:	2214      	movs	r2, #20
   29b48:	2100      	movs	r1, #0
   29b4a:	a80f      	add	r0, sp, #60	; 0x3c
   29b4c:	f022 fdbe 	bl	4c6cc <memset>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 29c24 <behavior_queue_process_next+0xe4>
   29b54:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   29b58:	2200      	movs	r2, #0
   29b5a:	2300      	movs	r3, #0
   29b5c:	a90f      	add	r1, sp, #60	; 0x3c
   29b5e:	4640      	mov	r0, r8
   29b60:	f01e fd5e 	bl	48620 <z_impl_k_msgq_get>

    while (k_msgq_get(&zmk_behavior_queue_msgq, &item, K_NO_WAIT) == 0) {
   29b64:	2800      	cmp	r0, #0
   29b66:	d14a      	bne.n	29bfe <behavior_queue_process_next+0xbe>
        LOG_DBG("Invoking %s: 0x%02x 0x%02x", log_strdup(item.binding.behavior_dev),
                item.binding.param1, item.binding.param2);

        struct zmk_behavior_binding_event event = {.position = item.position,
   29b68:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   29b6a:	9002      	str	r0, [sp, #8]
	return z_impl_k_uptime_ticks();
   29b6c:	f028 f8ae 	bl	51ccc <z_impl_k_uptime_ticks>
   29b70:	fba0 5c07 	umull	r5, ip, r0, r7
   29b74:	fb07 cc01 	mla	ip, r7, r1, ip
   29b78:	0bed      	lsrs	r5, r5, #15
   29b7a:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
                                                   .timestamp = k_uptime_get()};

        if (item.press) {
   29b7e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   29b82:	e9cd 6503 	strd	r6, r5, [sp, #12]
   29b86:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   29b8a:	f013 0f01 	tst.w	r3, #1
   29b8e:	f8cd c014 	str.w	ip, [sp, #20]
   29b92:	ab02      	add	r3, sp, #8
   29b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29b96:	ac06      	add	r4, sp, #24
   29b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29b9c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   29ba0:	d030      	beq.n	29c04 <behavior_queue_process_next+0xc4>
   29ba2:	e9cd 6507 	strd	r6, r5, [sp, #28]
   29ba6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   29baa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29bae:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   29bb2:	9810      	ldr	r0, [sp, #64]	; 0x40
   29bb4:	f01e fab4 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   29bb8:	b150      	cbz	r0, 29bd0 <behavior_queue_process_next+0x90>
    if (api->binding_pressed == NULL) {
   29bba:	6883      	ldr	r3, [r0, #8]
   29bbc:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   29bbe:	b13c      	cbz	r4, 29bd0 <behavior_queue_process_next+0x90>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   29bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   29bc4:	e88d 0003 	stmia.w	sp, {r0, r1}
   29bc8:	a810      	add	r0, sp, #64	; 0x40
   29bca:	e899 000c 	ldmia.w	r9, {r2, r3}
   29bce:	47a0      	blx	r4
            behavior_keymap_binding_released(&item.binding, event);
        }

        LOG_DBG("Processing next queued behavior in %dms", item.wait);

        if (item.wait > 0) {
   29bd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   29bd2:	f034 0301 	bics.w	r3, r4, #1
   29bd6:	d0bf      	beq.n	29b58 <behavior_queue_process_next+0x18>
            k_work_schedule(&queue_work, K_MSEC(item.wait));
   29bd8:	f3c4 045e 	ubfx	r4, r4, #1, #31
   29bdc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29be0:	f240 30e7 	movw	r0, #999	; 0x3e7
   29be4:	2100      	movs	r1, #0
   29be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29bea:	2300      	movs	r3, #0
   29bec:	fbe5 0104 	umlal	r0, r1, r5, r4
   29bf0:	f7fc fa86 	bl	26100 <__aeabi_uldivmod>
   29bf4:	4602      	mov	r2, r0
   29bf6:	460b      	mov	r3, r1
   29bf8:	480b      	ldr	r0, [pc, #44]	; (29c28 <behavior_queue_process_next+0xe8>)
   29bfa:	f01f f82d 	bl	48c58 <k_work_schedule>
            break;
        }
    }
}
   29bfe:	b015      	add	sp, #84	; 0x54
   29c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   29c04:	e9cd 6507 	strd	r6, r5, [sp, #28]
   29c08:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   29c0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29c10:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   29c14:	9810      	ldr	r0, [sp, #64]	; 0x40
   29c16:	f01e fa83 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   29c1a:	2800      	cmp	r0, #0
   29c1c:	d0d8      	beq.n	29bd0 <behavior_queue_process_next+0x90>
    if (api->binding_released == NULL) {
   29c1e:	6883      	ldr	r3, [r0, #8]
   29c20:	68dc      	ldr	r4, [r3, #12]
   29c22:	e7cc      	b.n	29bbe <behavior_queue_process_next+0x7e>
   29c24:	200013ac 	.word	0x200013ac
   29c28:	20000010 	.word	0x20000010

00029c2c <zmk_behavior_queue_add>:

int zmk_behavior_queue_add(uint32_t position, const struct zmk_behavior_binding binding, bool press,
                           uint32_t wait) {
   29c2c:	b510      	push	{r4, lr}
   29c2e:	b08a      	sub	sp, #40	; 0x28
   29c30:	ac01      	add	r4, sp, #4
   29c32:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    struct q_item item = {.press = press, .binding = binding, .wait = wait};
   29c36:	2214      	movs	r2, #20
   29c38:	eb0d 0002 	add.w	r0, sp, r2
   29c3c:	2100      	movs	r1, #0
   29c3e:	f022 fd45 	bl	4c6cc <memset>
   29c42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   29c46:	ab06      	add	r3, sp, #24
   29c48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29c4c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   29c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   29c52:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   29c56:	9309      	str	r3, [sp, #36]	; 0x24
	return z_impl_k_msgq_put(msgq, data, timeout);
   29c58:	480a      	ldr	r0, [pc, #40]	; (29c84 <zmk_behavior_queue_add+0x58>)
   29c5a:	2200      	movs	r2, #0
   29c5c:	2300      	movs	r3, #0
   29c5e:	a905      	add	r1, sp, #20
   29c60:	f01e fc88 	bl	48574 <z_impl_k_msgq_put>

    const int ret = k_msgq_put(&zmk_behavior_queue_msgq, &item, K_NO_WAIT);
    if (ret < 0) {
   29c64:	1e04      	subs	r4, r0, #0
   29c66:	db07      	blt.n	29c78 <zmk_behavior_queue_add+0x4c>
}

static inline bool k_work_delayable_is_pending(
	const struct k_work_delayable *dwork)
{
	return k_work_delayable_busy_get(dwork) != 0;
   29c68:	4807      	ldr	r0, [pc, #28]	; (29c88 <zmk_behavior_queue_add+0x5c>)
   29c6a:	f027 fe98 	bl	5199e <k_work_delayable_busy_get>
        return ret;
    }

    if (!k_work_delayable_is_pending(&queue_work)) {
   29c6e:	4604      	mov	r4, r0
   29c70:	b928      	cbnz	r0, 29c7e <zmk_behavior_queue_add+0x52>
        behavior_queue_process_next(&queue_work.work);
   29c72:	4805      	ldr	r0, [pc, #20]	; (29c88 <zmk_behavior_queue_add+0x5c>)
   29c74:	f7ff ff64 	bl	29b40 <behavior_queue_process_next>
    }

    return 0;
}
   29c78:	4620      	mov	r0, r4
   29c7a:	b00a      	add	sp, #40	; 0x28
   29c7c:	bd10      	pop	{r4, pc}
    return 0;
   29c7e:	2400      	movs	r4, #0
   29c80:	e7fa      	b.n	29c78 <zmk_behavior_queue_add+0x4c>
   29c82:	bf00      	nop
   29c84:	200013ac 	.word	0x200013ac
   29c88:	20000010 	.word	0x20000010

00029c8c <send_keyboard_report>:
    enum zmk_endpoint new_endpoint =
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
    return zmk_endpoints_select(new_endpoint);
}

static int send_keyboard_report() {
   29c8c:	b508      	push	{r3, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
   29c8e:	f7ff fc2b 	bl	294e8 <zmk_hid_get_keyboard_report>

    switch (current_endpoint) {
   29c92:	4a09      	ldr	r2, [pc, #36]	; (29cb8 <send_keyboard_report+0x2c>)
   29c94:	7812      	ldrb	r2, [r2, #0]
   29c96:	b122      	cbz	r2, 29ca2 <send_keyboard_report+0x16>
   29c98:	2a01      	cmp	r2, #1
   29c9a:	d007      	beq.n	29cac <send_keyboard_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   29c9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29ca0:	bd08      	pop	{r3, pc}
   29ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
   29ca6:	2109      	movs	r1, #9
   29ca8:	f001 b990 	b.w	2afcc <zmk_usb_hid_send_report>
}
   29cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
   29cb0:	3001      	adds	r0, #1
   29cb2:	f000 bd4d 	b.w	2a750 <zmk_hog_send_keyboard_report>
   29cb6:	bf00      	nop
   29cb8:	2000118f 	.word	0x2000118f

00029cbc <send_consumer_report>:

static int send_consumer_report() {
   29cbc:	b508      	push	{r3, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
   29cbe:	f7ff fc17 	bl	294f0 <zmk_hid_get_consumer_report>

    switch (current_endpoint) {
   29cc2:	4a09      	ldr	r2, [pc, #36]	; (29ce8 <send_consumer_report+0x2c>)
   29cc4:	7812      	ldrb	r2, [r2, #0]
   29cc6:	b122      	cbz	r2, 29cd2 <send_consumer_report+0x16>
   29cc8:	2a01      	cmp	r2, #1
   29cca:	d007      	beq.n	29cdc <send_consumer_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   29ccc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29cd0:	bd08      	pop	{r3, pc}
   29cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
   29cd6:	210d      	movs	r1, #13
   29cd8:	f001 b978 	b.w	2afcc <zmk_usb_hid_send_report>
}
   29cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
   29ce0:	3001      	adds	r0, #1
   29ce2:	f000 bd5b 	b.w	2a79c <zmk_hog_send_consumer_report>
   29ce6:	bf00      	nop
   29ce8:	2000118f 	.word	0x2000118f

00029cec <endpoints_save_preferred_work>:
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
   29cec:	4902      	ldr	r1, [pc, #8]	; (29cf8 <endpoints_save_preferred_work+0xc>)
   29cee:	4803      	ldr	r0, [pc, #12]	; (29cfc <endpoints_save_preferred_work+0x10>)
   29cf0:	2201      	movs	r2, #1
   29cf2:	f002 be39 	b.w	2c968 <settings_save_one>
   29cf6:	bf00      	nop
   29cf8:	20007659 	.word	0x20007659
   29cfc:	00056453 	.word	0x00056453

00029d00 <zmk_endpoints_init>:
}

struct settings_handler endpoints_handler = {.name = "endpoints", .h_set = endpoints_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static int zmk_endpoints_init(const struct device *_arg) {
   29d00:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29d02:	f002 ff7f 	bl	2cc04 <settings_subsys_init>

    int err = settings_register(&endpoints_handler);
   29d06:	4807      	ldr	r0, [pc, #28]	; (29d24 <zmk_endpoints_init+0x24>)
   29d08:	f002 febe 	bl	2ca88 <settings_register>
    if (err) {
   29d0c:	4604      	mov	r4, r0
   29d0e:	b930      	cbnz	r0, 29d1e <zmk_endpoints_init+0x1e>
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&endpoints_save_work, endpoints_save_preferred_work);
   29d10:	4805      	ldr	r0, [pc, #20]	; (29d28 <zmk_endpoints_init+0x28>)
   29d12:	4906      	ldr	r1, [pc, #24]	; (29d2c <zmk_endpoints_init+0x2c>)
   29d14:	f027 fe37 	bl	51986 <k_work_init_delayable>

    settings_load_subtree("endpoints");
   29d18:	4805      	ldr	r0, [pc, #20]	; (29d30 <zmk_endpoints_init+0x30>)
   29d1a:	f002 fe5f 	bl	2c9dc <settings_load_subtree>
#endif

    return 0;
}
   29d1e:	4620      	mov	r0, r4
   29d20:	bd10      	pop	{r4, pc}
   29d22:	bf00      	nop
   29d24:	200005a8 	.word	0x200005a8
   29d28:	20001a98 	.word	0x20001a98
   29d2c:	00029ced 	.word	0x00029ced
   29d30:	00056467 	.word	0x00056467

00029d34 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
   29d34:	b538      	push	{r3, r4, r5, lr}
    return zmk_ble_active_profile_is_connected();
   29d36:	f000 fb0d 	bl	2a354 <zmk_ble_active_profile_is_connected>
    if (is_ble_ready()) {
   29d3a:	b1c8      	cbz	r0, 29d70 <update_current_endpoint+0x3c>

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
   29d3c:	f001 f910 	bl	2af60 <zmk_usb_get_conn_state>
        if (is_usb_ready()) {
   29d40:	2802      	cmp	r0, #2
   29d42:	d11b      	bne.n	29d7c <update_current_endpoint+0x48>
            return preferred_endpoint;
   29d44:	4b0f      	ldr	r3, [pc, #60]	; (29d84 <update_current_endpoint+0x50>)
   29d46:	781c      	ldrb	r4, [r3, #0]
    enum zmk_endpoint new_endpoint = get_selected_endpoint();

    if (new_endpoint != current_endpoint) {
   29d48:	4d0f      	ldr	r5, [pc, #60]	; (29d88 <update_current_endpoint+0x54>)
   29d4a:	782b      	ldrb	r3, [r5, #0]
   29d4c:	42a3      	cmp	r3, r4
   29d4e:	d017      	beq.n	29d80 <update_current_endpoint+0x4c>
    zmk_hid_keyboard_clear();
   29d50:	f7ff fb92 	bl	29478 <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
   29d54:	f7ff fbc0 	bl	294d8 <zmk_hid_consumer_clear>
        return send_keyboard_report();
   29d58:	f7ff ff98 	bl	29c8c <send_keyboard_report>
        return send_consumer_report();
   29d5c:	f7ff ffae 	bl	29cbc <send_consumer_report>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);

        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29d60:	4620      	mov	r0, r4
        current_endpoint = new_endpoint;
   29d62:	702c      	strb	r4, [r5, #0]
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29d64:	f000 f84c 	bl	29e00 <new_zmk_endpoint_selection_changed>
            (struct zmk_endpoint_selection_changed){.endpoint = current_endpoint}));
    }
}
   29d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29d6c:	f01f bdeb 	b.w	49946 <zmk_event_manager_raise>
   29d70:	f001 f8f6 	bl	2af60 <zmk_usb_get_conn_state>
        return ZMK_ENDPOINT_BLE;
   29d74:	1e84      	subs	r4, r0, #2
   29d76:	bf18      	it	ne
   29d78:	2401      	movne	r4, #1
   29d7a:	e7e5      	b.n	29d48 <update_current_endpoint+0x14>
   29d7c:	2401      	movs	r4, #1
   29d7e:	e7e3      	b.n	29d48 <update_current_endpoint+0x14>
}
   29d80:	bd38      	pop	{r3, r4, r5, pc}
   29d82:	bf00      	nop
   29d84:	20007659 	.word	0x20007659
   29d88:	2000118f 	.word	0x2000118f

00029d8c <endpoints_handle_set>:
                                void *cb_arg) {
   29d8c:	b570      	push	{r4, r5, r6, lr}
   29d8e:	460c      	mov	r4, r1
   29d90:	4615      	mov	r5, r2
    if (settings_name_steq(name, "preferred", NULL)) {
   29d92:	490a      	ldr	r1, [pc, #40]	; (29dbc <endpoints_handle_set+0x30>)
   29d94:	2200      	movs	r2, #0
                                void *cb_arg) {
   29d96:	461e      	mov	r6, r3
    if (settings_name_steq(name, "preferred", NULL)) {
   29d98:	f021 f99f 	bl	4b0da <settings_name_steq>
   29d9c:	b150      	cbz	r0, 29db4 <endpoints_handle_set+0x28>
        if (len != sizeof(enum zmk_endpoint)) {
   29d9e:	2c01      	cmp	r4, #1
   29da0:	d109      	bne.n	29db6 <endpoints_handle_set+0x2a>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
   29da2:	4907      	ldr	r1, [pc, #28]	; (29dc0 <endpoints_handle_set+0x34>)
   29da4:	4622      	mov	r2, r4
   29da6:	4630      	mov	r0, r6
   29da8:	47a8      	blx	r5
        if (err <= 0) {
   29daa:	2800      	cmp	r0, #0
   29dac:	dd02      	ble.n	29db4 <endpoints_handle_set+0x28>
        update_current_endpoint();
   29dae:	f7ff ffc1 	bl	29d34 <update_current_endpoint>
    return 0;
   29db2:	2000      	movs	r0, #0
}
   29db4:	bd70      	pop	{r4, r5, r6, pc}
            return -EINVAL;
   29db6:	f06f 0015 	mvn.w	r0, #21
   29dba:	e7fb      	b.n	29db4 <endpoints_handle_set+0x28>
   29dbc:	0005645d 	.word	0x0005645d
   29dc0:	20007659 	.word	0x20007659

00029dc4 <zmk_endpoints_select>:
int zmk_endpoints_select(enum zmk_endpoint endpoint) {
   29dc4:	b508      	push	{r3, lr}
    if (preferred_endpoint == endpoint) {
   29dc6:	4b07      	ldr	r3, [pc, #28]	; (29de4 <zmk_endpoints_select+0x20>)
   29dc8:	781a      	ldrb	r2, [r3, #0]
   29dca:	4282      	cmp	r2, r0
   29dcc:	d008      	beq.n	29de0 <zmk_endpoints_select+0x1c>
    preferred_endpoint = endpoint;
   29dce:	7018      	strb	r0, [r3, #0]
    return k_work_reschedule(&endpoints_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   29dd0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   29dd4:	2300      	movs	r3, #0
   29dd6:	4804      	ldr	r0, [pc, #16]	; (29de8 <zmk_endpoints_select+0x24>)
   29dd8:	f01e ff72 	bl	48cc0 <k_work_reschedule>
    update_current_endpoint();
   29ddc:	f7ff ffaa 	bl	29d34 <update_current_endpoint>
}
   29de0:	2000      	movs	r0, #0
   29de2:	bd08      	pop	{r3, pc}
   29de4:	20007659 	.word	0x20007659
   29de8:	20001a98 	.word	0x20001a98

00029dec <zmk_endpoints_toggle>:
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
   29dec:	4b03      	ldr	r3, [pc, #12]	; (29dfc <zmk_endpoints_toggle+0x10>)
   29dee:	7818      	ldrb	r0, [r3, #0]
    return zmk_endpoints_select(new_endpoint);
   29df0:	fab0 f080 	clz	r0, r0
   29df4:	0940      	lsrs	r0, r0, #5
   29df6:	f7ff bfe5 	b.w	29dc4 <zmk_endpoints_select>
   29dfa:	bf00      	nop
   29dfc:	20007659 	.word	0x20007659

00029e00 <new_zmk_endpoint_selection_changed>:
 */

#include <kernel.h>
#include <zmk/events/endpoint_selection_changed.h>

ZMK_EVENT_IMPL(zmk_endpoint_selection_changed);
   29e00:	b510      	push	{r4, lr}
   29e02:	4604      	mov	r4, r0
   29e04:	200c      	movs	r0, #12
   29e06:	f028 f915 	bl	52034 <k_malloc>
   29e0a:	4a02      	ldr	r2, [pc, #8]	; (29e14 <new_zmk_endpoint_selection_changed+0x14>)
   29e0c:	6002      	str	r2, [r0, #0]
   29e0e:	7204      	strb	r4, [r0, #8]
   29e10:	bd10      	pop	{r4, pc}
   29e12:	bf00      	nop
   29e14:	00052d80 	.word	0x00052d80

00029e18 <set_layer_state>:
                                                        DT_INST_FOREACH_CHILD(0, SENSOR_LAYER)};

#endif /* ZMK_KEYMAP_HAS_SENSORS */

static inline int set_layer_state(uint8_t layer, bool state) {
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   29e18:	2809      	cmp	r0, #9
static inline int set_layer_state(uint8_t layer, bool state) {
   29e1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   29e1c:	d82a      	bhi.n	29e74 <set_layer_state+0x5c>
        return -EINVAL;
    }

    // Default layer should *always* remain active
    if (layer == _zmk_keymap_layer_default && !state) {
   29e1e:	b918      	cbnz	r0, 29e28 <set_layer_state+0x10>
   29e20:	b911      	cbnz	r1, 29e28 <set_layer_state+0x10>
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
    // Don't send state changes unless there was an actual change
    if (old_state != _zmk_keymap_layer_state) {
        LOG_DBG("layer_changed: layer %d state %d", layer, state);
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   29e22:	2000      	movs	r0, #0
    }

    return 0;
}
   29e24:	b004      	add	sp, #16
   29e26:	bd10      	pop	{r4, pc}
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   29e28:	4c14      	ldr	r4, [pc, #80]	; (29e7c <set_layer_state+0x64>)
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29e2a:	2301      	movs	r3, #1
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   29e2c:	6822      	ldr	r2, [r4, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29e2e:	4083      	lsls	r3, r0
   29e30:	b1e9      	cbz	r1, 29e6e <set_layer_state+0x56>
   29e32:	4313      	orrs	r3, r2
    if (old_state != _zmk_keymap_layer_state) {
   29e34:	429a      	cmp	r2, r3
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29e36:	6023      	str	r3, [r4, #0]
    if (old_state != _zmk_keymap_layer_state) {
   29e38:	d0f3      	beq.n	29e22 <set_layer_state+0xa>

ZMK_EVENT_DECLARE(zmk_layer_state_changed);

static inline struct zmk_layer_state_changed_event *create_layer_state_changed(uint8_t layer,
                                                                               bool state) {
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
   29e3a:	f88d 0000 	strb.w	r0, [sp]
   29e3e:	f88d 1001 	strb.w	r1, [sp, #1]
	return z_impl_k_uptime_ticks();
   29e42:	f027 ff43 	bl	51ccc <z_impl_k_uptime_ticks>
   29e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29e4a:	fba0 0302 	umull	r0, r3, r0, r2
   29e4e:	fb02 3101 	mla	r1, r2, r1, r3
   29e52:	0bc0      	lsrs	r0, r0, #15
   29e54:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   29e58:	0bc9      	lsrs	r1, r1, #15
   29e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29e5e:	ab04      	add	r3, sp, #16
   29e60:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   29e64:	f000 f8f4 	bl	2a050 <new_zmk_layer_state_changed>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   29e68:	f01f fd6d 	bl	49946 <zmk_event_manager_raise>
   29e6c:	e7d9      	b.n	29e22 <set_layer_state+0xa>
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29e6e:	ea22 0303 	bic.w	r3, r2, r3
   29e72:	e7df      	b.n	29e34 <set_layer_state+0x1c>
        return -EINVAL;
   29e74:	f06f 0015 	mvn.w	r0, #21
   29e78:	e7d4      	b.n	29e24 <set_layer_state+0xc>
   29e7a:	bf00      	nop
   29e7c:	2000456c 	.word	0x2000456c

00029e80 <zmk_keymap_layer_active>:
    // breaks up that assumption by accident
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
};

bool zmk_keymap_layer_active(uint8_t layer) {
    return zmk_keymap_layer_active_with_state(layer, _zmk_keymap_layer_state);
   29e80:	4b01      	ldr	r3, [pc, #4]	; (29e88 <zmk_keymap_layer_active+0x8>)
   29e82:	6819      	ldr	r1, [r3, #0]
   29e84:	f020 b894 	b.w	49fb0 <zmk_keymap_layer_active_with_state>
   29e88:	2000456c 	.word	0x2000456c

00029e8c <zmk_keymap_apply_position_state>:
        return behavior_keymap_binding_released(binding, event);
    }
}

int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position, bool pressed,
                                    int64_t timestamp) {
   29e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e90:	461f      	mov	r7, r3
    // We want to make a copy of this, since it may be converted from
    // relative to absolute before being invoked
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29e92:	f44f 732e 	mov.w	r3, #696	; 0x2b8
                                    int64_t timestamp) {
   29e96:	4615      	mov	r5, r2
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29e98:	434b      	muls	r3, r1
   29e9a:	220c      	movs	r2, #12
   29e9c:	fb02 3205 	mla	r2, r2, r5, r3
   29ea0:	4b39      	ldr	r3, [pc, #228]	; (29f88 <zmk_keymap_apply_position_state+0xfc>)
   29ea2:	4413      	add	r3, r2
                                    int64_t timestamp) {
   29ea4:	4682      	mov	sl, r0
   29ea6:	460e      	mov	r6, r1
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29ea8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
                                    int64_t timestamp) {
   29eac:	b08d      	sub	sp, #52	; 0x34
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29eae:	ac05      	add	r4, sp, #20
   29eb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                                    int64_t timestamp) {
   29eb4:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
   29eb8:	f01e f932 	bl	48120 <z_impl_device_get_binding>
    LOG_DBG("layer: %d position: %d, binding name: %s", layer, position,
            log_strdup(binding.behavior_dev));

    behavior = device_get_binding(binding.behavior_dev);

    if (!behavior) {
   29ebc:	4683      	mov	fp, r0
   29ebe:	2800      	cmp	r0, #0
   29ec0:	d05d      	beq.n	29f7e <zmk_keymap_apply_position_state+0xf2>
	return z_impl_behavior_keymap_binding_convert_central_state_dependent_params(binding, event);
   29ec2:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29ec6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    const struct device *dev = device_get_binding(binding->behavior_dev);
   29eca:	9805      	ldr	r0, [sp, #20]
   29ecc:	f01e f928 	bl	48120 <z_impl_device_get_binding>
    if (api->binding_convert_central_state_dependent_params == NULL) {
   29ed0:	6883      	ldr	r3, [r0, #8]
   29ed2:	685b      	ldr	r3, [r3, #4]
   29ed4:	469c      	mov	ip, r3
   29ed6:	b153      	cbz	r3, 29eee <zmk_keymap_apply_position_state+0x62>
    return api->binding_convert_central_state_dependent_params(binding, event);
   29ed8:	ab0c      	add	r3, sp, #48	; 0x30
   29eda:	e913 0003 	ldmdb	r3, {r0, r1}
   29ede:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   29ee2:	e88d 0003 	stmia.w	sp, {r0, r1}
   29ee6:	4620      	mov	r0, r4
   29ee8:	4661      	mov	r1, ip
   29eea:	4788      	blx	r1
        LOG_WRN("No behavior assigned to %d on layer %d", position, layer);
        return 1;
    }

    int err = behavior_keymap_binding_convert_central_state_dependent_params(&binding, event);
    if (err) {
   29eec:	bb58      	cbnz	r0, 29f46 <zmk_keymap_apply_position_state+0xba>
    *locality = api->locality;
   29eee:	f8db 3008 	ldr.w	r3, [fp, #8]
   29ef2:	781b      	ldrb	r3, [r3, #0]
    if (err) {
        LOG_ERR("Failed to get behavior locality %d", err);
        return err;
    }

    switch (locality) {
   29ef4:	2b01      	cmp	r3, #1
   29ef6:	d013      	beq.n	29f20 <zmk_keymap_apply_position_state+0x94>
   29ef8:	2b02      	cmp	r3, #2
   29efa:	d027      	beq.n	29f4c <zmk_keymap_apply_position_state+0xc0>
   29efc:	2b00      	cmp	r3, #0
   29efe:	d140      	bne.n	29f82 <zmk_keymap_apply_position_state+0xf6>
    case BEHAVIOR_LOCALITY_CENTRAL:
        return invoke_locally(&binding, event, pressed);
   29f00:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29f04:	ab0c      	add	r3, sp, #48	; 0x30
   29f06:	9702      	str	r7, [sp, #8]
   29f08:	e913 0003 	ldmdb	r3, {r0, r1}
   29f0c:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29f10:	e88d 0003 	stmia.w	sp, {r0, r1}
   29f14:	462b      	mov	r3, r5
   29f16:	4632      	mov	r2, r6
#if ZMK_BLE_IS_CENTRAL
        for (int i = 0; i < ZMK_BLE_SPLIT_PERIPHERAL_COUNT; i++) {
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
        }
#endif
        return invoke_locally(&binding, event, pressed);
   29f18:	4620      	mov	r0, r4
   29f1a:	f020 f866 	bl	49fea <invoke_locally>
   29f1e:	e012      	b.n	29f46 <zmk_keymap_apply_position_state+0xba>
            return invoke_locally(&binding, event, pressed);
   29f20:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29f24:	9702      	str	r7, [sp, #8]
   29f26:	aa0a      	add	r2, sp, #40	; 0x28
   29f28:	e892 0003 	ldmia.w	r2, {r0, r1}
   29f2c:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29f30:	e88d 0003 	stmia.w	sp, {r0, r1}
   29f34:	ab08      	add	r3, sp, #32
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   29f36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
            return invoke_locally(&binding, event, pressed);
   29f3a:	cb0c      	ldmia	r3, {r2, r3}
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   29f3c:	d0ec      	beq.n	29f18 <zmk_keymap_apply_position_state+0x8c>
            return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
   29f3e:	4621      	mov	r1, r4
   29f40:	4650      	mov	r0, sl
   29f42:	f020 f9b7 	bl	4a2b4 <zmk_split_bt_invoke_behavior>
    }

    return -ENOTSUP;
}
   29f46:	b00d      	add	sp, #52	; 0x34
   29f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
   29f4c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29f50:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29f54:	9702      	str	r7, [sp, #8]
   29f56:	ae0a      	add	r6, sp, #40	; 0x28
   29f58:	e896 0003 	ldmia.w	r6, {r0, r1}
   29f5c:	e88d 0003 	stmia.w	sp, {r0, r1}
   29f60:	ad08      	add	r5, sp, #32
   29f62:	e895 000c 	ldmia.w	r5, {r2, r3}
   29f66:	4621      	mov	r1, r4
   29f68:	2000      	movs	r0, #0
   29f6a:	f020 f9a3 	bl	4a2b4 <zmk_split_bt_invoke_behavior>
        return invoke_locally(&binding, event, pressed);
   29f6e:	9702      	str	r7, [sp, #8]
   29f70:	e896 0003 	ldmia.w	r6, {r0, r1}
   29f74:	e88d 0003 	stmia.w	sp, {r0, r1}
   29f78:	e895 000c 	ldmia.w	r5, {r2, r3}
   29f7c:	e7cc      	b.n	29f18 <zmk_keymap_apply_position_state+0x8c>
        return 1;
   29f7e:	2001      	movs	r0, #1
   29f80:	e7e1      	b.n	29f46 <zmk_keymap_apply_position_state+0xba>
    switch (locality) {
   29f82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29f86:	e7de      	b.n	29f46 <zmk_keymap_apply_position_state+0xba>
   29f88:	00052d88 	.word	0x00052d88

00029f8c <zmk_keymap_position_state_changed>:

int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                      int64_t timestamp) {
   29f8c:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
   29f90:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   29f94:	4d10      	ldr	r5, [pc, #64]	; (29fd8 <zmk_keymap_position_state_changed+0x4c>)
   29f96:	4680      	mov	r8, r0
   29f98:	460f      	mov	r7, r1
    if (pressed) {
   29f9a:	4614      	mov	r4, r2
   29f9c:	b11a      	cbz	r2, 29fa6 <zmk_keymap_position_state_changed+0x1a>
        zmk_keymap_active_behavior_layer[position] = _zmk_keymap_layer_state;
   29f9e:	4b0f      	ldr	r3, [pc, #60]	; (29fdc <zmk_keymap_position_state_changed+0x50>)
   29fa0:	681b      	ldr	r3, [r3, #0]
   29fa2:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
                                      int64_t timestamp) {
   29fa6:	2609      	movs	r6, #9
    }
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
   29fa8:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
   29fac:	b2f0      	uxtb	r0, r6
   29fae:	f01f ffff 	bl	49fb0 <zmk_keymap_layer_active_with_state>
   29fb2:	b930      	cbnz	r0, 29fc2 <zmk_keymap_position_state_changed+0x36>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   29fb4:	3e01      	subs	r6, #1
   29fb6:	d2f7      	bcs.n	29fa8 <zmk_keymap_position_state_changed+0x1c>
                return ret;
            }
        }
    }

    return -ENOTSUP;
   29fb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29fbc:	b002      	add	sp, #8
   29fbe:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
            int ret = zmk_keymap_apply_position_state(source, layer, position, pressed, timestamp);
   29fc2:	e9cd ab00 	strd	sl, fp, [sp]
   29fc6:	4623      	mov	r3, r4
   29fc8:	463a      	mov	r2, r7
   29fca:	4631      	mov	r1, r6
   29fcc:	4640      	mov	r0, r8
   29fce:	f7ff ff5d 	bl	29e8c <zmk_keymap_apply_position_state>
            if (ret > 0) {
   29fd2:	2800      	cmp	r0, #0
   29fd4:	ddf2      	ble.n	29fbc <zmk_keymap_position_state_changed+0x30>
   29fd6:	e7ed      	b.n	29fb4 <zmk_keymap_position_state_changed+0x28>
   29fd8:	20004570 	.word	0x20004570
   29fdc:	2000456c 	.word	0x2000456c

00029fe0 <zmk_keymap_sensor_triggered>:

#if ZMK_KEYMAP_HAS_SENSORS
int zmk_keymap_sensor_triggered(uint8_t sensor_number, const struct device *sensor,
                                int64_t timestamp) {
   29fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29fe4:	4c19      	ldr	r4, [pc, #100]	; (2a04c <zmk_keymap_sensor_triggered+0x6c>)
   29fe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   29fea:	460e      	mov	r6, r1
   29fec:	4617      	mov	r7, r2
   29fee:	4698      	mov	r8, r3
   29ff0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   29ff4:	2509      	movs	r5, #9
        if (zmk_keymap_layer_active(layer) && zmk_sensor_keymap[layer] != NULL) {
   29ff6:	b2e8      	uxtb	r0, r5
   29ff8:	f7ff ff42 	bl	29e80 <zmk_keymap_layer_active>
   29ffc:	b940      	cbnz	r0, 2a010 <zmk_keymap_sensor_triggered+0x30>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   29ffe:	3d01      	subs	r5, #1
   2a000:	1c6b      	adds	r3, r5, #1
   2a002:	f1a4 0418 	sub.w	r4, r4, #24
   2a006:	d1f6      	bne.n	29ff6 <zmk_keymap_sensor_triggered+0x16>
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->sensor_binding_triggered == NULL) {
        return -ENOTSUP;
   2a008:	f06f 0085 	mvn.w	r0, #133	; 0x85
            }
        }
    }

    return -ENOTSUP;
}
   2a00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            behavior = device_get_binding(binding->behavior_dev);
   2a010:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2a014:	f01e f884 	bl	48120 <z_impl_device_get_binding>
            if (!behavior) {
   2a018:	2800      	cmp	r0, #0
   2a01a:	d0f0      	beq.n	29ffe <zmk_keymap_sensor_triggered+0x1e>
    const struct device *dev = device_get_binding(binding->behavior_dev);
   2a01c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2a020:	f01e f87e 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   2a024:	b170      	cbz	r0, 2a044 <zmk_keymap_sensor_triggered+0x64>
    if (api->sensor_binding_triggered == NULL) {
   2a026:	6883      	ldr	r3, [r0, #8]
   2a028:	f8d3 9010 	ldr.w	r9, [r3, #16]
   2a02c:	f1b9 0f00 	cmp.w	r9, #0
   2a030:	d0ea      	beq.n	2a008 <zmk_keymap_sensor_triggered+0x28>
    }

    return api->sensor_binding_triggered(binding, sensor, timestamp);
   2a032:	463a      	mov	r2, r7
   2a034:	4643      	mov	r3, r8
   2a036:	4631      	mov	r1, r6
   2a038:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2a03c:	47c8      	blx	r9
            if (ret > 0) {
   2a03e:	2800      	cmp	r0, #0
   2a040:	dde4      	ble.n	2a00c <zmk_keymap_sensor_triggered+0x2c>
   2a042:	e7dc      	b.n	29ffe <zmk_keymap_sensor_triggered+0x1e>
        return -EINVAL;
   2a044:	f06f 0015 	mvn.w	r0, #21
   2a048:	e7e0      	b.n	2a00c <zmk_keymap_sensor_triggered+0x2c>
   2a04a:	bf00      	nop
   2a04c:	200005c0 	.word	0x200005c0

0002a050 <new_zmk_layer_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/layer_state_changed.h>

   2a050:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a052:	466c      	mov	r4, sp
   2a054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2a058:	2018      	movs	r0, #24
   2a05a:	f027 ffeb 	bl	52034 <k_malloc>
   2a05e:	4605      	mov	r5, r0
   2a060:	4b05      	ldr	r3, [pc, #20]	; (2a078 <new_zmk_layer_state_changed+0x28>)
   2a062:	f845 3b08 	str.w	r3, [r5], #8
   2a066:	4606      	mov	r6, r0
   2a068:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a06c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2a070:	4630      	mov	r0, r6
   2a072:	b004      	add	sp, #16
   2a074:	bd70      	pop	{r4, r5, r6, pc}
   2a076:	bf00      	nop
   2a078:	000548bc 	.word	0x000548bc

0002a07c <new_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
   2a07c:	b084      	sub	sp, #16
   2a07e:	b570      	push	{r4, r5, r6, lr}
   2a080:	ac04      	add	r4, sp, #16
   2a082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2a086:	2020      	movs	r0, #32
   2a088:	f027 ffd4 	bl	52034 <k_malloc>
   2a08c:	4604      	mov	r4, r0
   2a08e:	4b08      	ldr	r3, [pc, #32]	; (2a0b0 <new_zmk_keycode_state_changed+0x34>)
   2a090:	f844 3b08 	str.w	r3, [r4], #8
   2a094:	ad04      	add	r5, sp, #16
   2a096:	4606      	mov	r6, r0
   2a098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a09a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a09c:	e895 0003 	ldmia.w	r5, {r0, r1}
   2a0a0:	e884 0003 	stmia.w	r4, {r0, r1}
   2a0a4:	4630      	mov	r0, r6
   2a0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a0aa:	b004      	add	sp, #16
   2a0ac:	4770      	bx	lr
   2a0ae:	bf00      	nop
   2a0b0:	000548c4 	.word	0x000548c4

0002a0b4 <as_zmk_keycode_state_changed>:
   2a0b4:	6802      	ldr	r2, [r0, #0]
   2a0b6:	4b03      	ldr	r3, [pc, #12]	; (2a0c4 <as_zmk_keycode_state_changed+0x10>)
   2a0b8:	429a      	cmp	r2, r3
   2a0ba:	bf0c      	ite	eq
   2a0bc:	3008      	addeq	r0, #8
   2a0be:	2000      	movne	r0, #0
   2a0c0:	4770      	bx	lr
   2a0c2:	bf00      	nop
   2a0c4:	000548c4 	.word	0x000548c4

0002a0c8 <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

   2a0c8:	b513      	push	{r0, r1, r4, lr}
   2a0ca:	466c      	mov	r4, sp
   2a0cc:	e884 0003 	stmia.w	r4, {r0, r1}
   2a0d0:	2010      	movs	r0, #16
   2a0d2:	f027 ffaf 	bl	52034 <k_malloc>
   2a0d6:	4602      	mov	r2, r0
   2a0d8:	4905      	ldr	r1, [pc, #20]	; (2a0f0 <new_zmk_ble_active_profile_changed+0x28>)
   2a0da:	f842 1b08 	str.w	r1, [r2], #8
   2a0de:	4603      	mov	r3, r0
   2a0e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   2a0e4:	e882 0003 	stmia.w	r2, {r0, r1}
   2a0e8:	4618      	mov	r0, r3
   2a0ea:	b002      	add	sp, #8
   2a0ec:	bd10      	pop	{r4, pc}
   2a0ee:	bf00      	nop
   2a0f0:	000548c8 	.word	0x000548c8

0002a0f4 <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
   2a0f4:	b507      	push	{r0, r1, r2, lr}
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   2a0f6:	4b09      	ldr	r3, [pc, #36]	; (2a11c <raise_profile_changed_event+0x28>)
   2a0f8:	781a      	ldrb	r2, [r3, #0]
   2a0fa:	4b09      	ldr	r3, [pc, #36]	; (2a120 <raise_profile_changed_event+0x2c>)
   2a0fc:	f88d 2000 	strb.w	r2, [sp]
   2a100:	2116      	movs	r1, #22
   2a102:	fb02 3301 	mla	r3, r2, r1, r3
   2a106:	9301      	str	r3, [sp, #4]
   2a108:	ab02      	add	r3, sp, #8
   2a10a:	e913 0003 	ldmdb	r3, {r0, r1}
   2a10e:	f7ff ffdb 	bl	2a0c8 <new_zmk_ble_active_profile_changed>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
   2a112:	b003      	add	sp, #12
   2a114:	f85d eb04 	ldr.w	lr, [sp], #4
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   2a118:	f01f bc15 	b.w	49946 <zmk_event_manager_raise>
   2a11c:	2000765a 	.word	0x2000765a
   2a120:	20007663 	.word	0x20007663

0002a124 <ble_save_profile_work>:

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
   2a124:	4902      	ldr	r1, [pc, #8]	; (2a130 <ble_save_profile_work+0xc>)
   2a126:	4803      	ldr	r0, [pc, #12]	; (2a134 <ble_save_profile_work+0x10>)
   2a128:	2201      	movs	r2, #1
   2a12a:	f002 bc1d 	b.w	2c968 <settings_save_one>
   2a12e:	bf00      	nop
   2a130:	2000765a 	.word	0x2000765a
   2a134:	0005652f 	.word	0x0005652f

0002a138 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a138:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   2a13a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a13c:	b08a      	sub	sp, #40	; 0x28
   2a13e:	4604      	mov	r4, r0
   2a140:	460e      	mov	r6, r1
   2a142:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   2a144:	2b03      	cmp	r3, #3
   2a146:	d820      	bhi.n	2a18a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   2a148:	e8df f003 	tbb	[pc, r3]
   2a14c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   2a150:	4911      	ldr	r1, [pc, #68]	; (2a198 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   2a152:	4628      	mov	r0, r5
   2a154:	f022 fa70 	bl	4c638 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   2a158:	7863      	ldrb	r3, [r4, #1]
   2a15a:	9304      	str	r3, [sp, #16]
   2a15c:	78a3      	ldrb	r3, [r4, #2]
   2a15e:	9303      	str	r3, [sp, #12]
   2a160:	78e3      	ldrb	r3, [r4, #3]
   2a162:	9302      	str	r3, [sp, #8]
   2a164:	7923      	ldrb	r3, [r4, #4]
   2a166:	9301      	str	r3, [sp, #4]
   2a168:	7963      	ldrb	r3, [r4, #5]
   2a16a:	9300      	str	r3, [sp, #0]
   2a16c:	4a0b      	ldr	r2, [pc, #44]	; (2a19c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   2a16e:	79a3      	ldrb	r3, [r4, #6]
   2a170:	9505      	str	r5, [sp, #20]
   2a172:	211e      	movs	r1, #30
   2a174:	4630      	mov	r0, r6
   2a176:	f020 f9a3 	bl	4a4c0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   2a17a:	b00a      	add	sp, #40	; 0x28
   2a17c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   2a17e:	4908      	ldr	r1, [pc, #32]	; (2a1a0 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   2a180:	e7e7      	b.n	2a152 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   2a182:	4908      	ldr	r1, [pc, #32]	; (2a1a4 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   2a184:	e7e5      	b.n	2a152 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   2a186:	4908      	ldr	r1, [pc, #32]	; (2a1a8 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   2a188:	e7e3      	b.n	2a152 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   2a18a:	4a08      	ldr	r2, [pc, #32]	; (2a1ac <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   2a18c:	210a      	movs	r1, #10
   2a18e:	4628      	mov	r0, r5
   2a190:	f020 f996 	bl	4a4c0 <snprintk>
		break;
   2a194:	e7e0      	b.n	2a158 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   2a196:	bf00      	nop
   2a198:	00056542 	.word	0x00056542
   2a19c:	0005656b 	.word	0x0005656b
   2a1a0:	00056549 	.word	0x00056549
   2a1a4:	00056550 	.word	0x00056550
   2a1a8:	0005655a 	.word	0x0005655a
   2a1ac:	00056564 	.word	0x00056564

0002a1b0 <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
   2a1b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a1b4:	b08b      	sub	sp, #44	; 0x2c
   2a1b6:	460d      	mov	r5, r1
   2a1b8:	4616      	mov	r6, r2
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));

    if (settings_name_steq(name, "profiles", &next) && next) {
   2a1ba:	4926      	ldr	r1, [pc, #152]	; (2a254 <ble_profiles_handle_set+0xa4>)
   2a1bc:	466a      	mov	r2, sp
                                   void *cb_arg) {
   2a1be:	4604      	mov	r4, r0
   2a1c0:	4698      	mov	r8, r3
    if (settings_name_steq(name, "profiles", &next) && next) {
   2a1c2:	f020 ff8a 	bl	4b0da <settings_name_steq>
   2a1c6:	b1f8      	cbz	r0, 2a208 <ble_profiles_handle_set+0x58>
   2a1c8:	9800      	ldr	r0, [sp, #0]
   2a1ca:	b1e8      	cbz	r0, 2a208 <ble_profiles_handle_set+0x58>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
   2a1cc:	220a      	movs	r2, #10
   2a1ce:	a901      	add	r1, sp, #4
   2a1d0:	f022 f9b9 	bl	4c546 <strtoul>
        if (*endptr != '\0') {
   2a1d4:	9b01      	ldr	r3, [sp, #4]
   2a1d6:	781f      	ldrb	r7, [r3, #0]
   2a1d8:	bb07      	cbnz	r7, 2a21c <ble_profiles_handle_set+0x6c>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
   2a1da:	2d16      	cmp	r5, #22
   2a1dc:	d11e      	bne.n	2a21c <ble_profiles_handle_set+0x6c>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= ZMK_BLE_PROFILE_COUNT) {
   2a1de:	b2c4      	uxtb	r4, r0
   2a1e0:	2c04      	cmp	r4, #4
   2a1e2:	d81b      	bhi.n	2a21c <ble_profiles_handle_set+0x6c>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx,
                    ZMK_BLE_PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
   2a1e4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 2a258 <ble_profiles_handle_set+0xa8>
   2a1e8:	436c      	muls	r4, r5
   2a1ea:	462a      	mov	r2, r5
   2a1ec:	eb09 0104 	add.w	r1, r9, r4
   2a1f0:	4640      	mov	r0, r8
   2a1f2:	47b0      	blx	r6
        if (err <= 0) {
   2a1f4:	2800      	cmp	r0, #0
   2a1f6:	dd13      	ble.n	2a220 <ble_profiles_handle_set+0x70>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
   2a1f8:	f104 000f 	add.w	r0, r4, #15
   2a1fc:	a902      	add	r1, sp, #8
   2a1fe:	4448      	add	r0, r9
   2a200:	f7ff ff9a 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
            return err;
        }
    }
#endif

    return 0;
   2a204:	2000      	movs	r0, #0
   2a206:	e00b      	b.n	2a220 <ble_profiles_handle_set+0x70>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
   2a208:	4914      	ldr	r1, [pc, #80]	; (2a25c <ble_profiles_handle_set+0xac>)
   2a20a:	466a      	mov	r2, sp
   2a20c:	4620      	mov	r0, r4
   2a20e:	f020 ff64 	bl	4b0da <settings_name_steq>
   2a212:	b178      	cbz	r0, 2a234 <ble_profiles_handle_set+0x84>
   2a214:	9b00      	ldr	r3, [sp, #0]
   2a216:	b96b      	cbnz	r3, 2a234 <ble_profiles_handle_set+0x84>
        if (len != sizeof(active_profile)) {
   2a218:	2d01      	cmp	r5, #1
   2a21a:	d004      	beq.n	2a226 <ble_profiles_handle_set+0x76>
            return -EINVAL;
   2a21c:	f06f 0015 	mvn.w	r0, #21
};
   2a220:	b00b      	add	sp, #44	; 0x2c
   2a222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
   2a226:	490e      	ldr	r1, [pc, #56]	; (2a260 <ble_profiles_handle_set+0xb0>)
   2a228:	462a      	mov	r2, r5
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   2a22a:	4640      	mov	r0, r8
   2a22c:	47b0      	blx	r6
        if (err <= 0) {
   2a22e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2a232:	e7f5      	b.n	2a220 <ble_profiles_handle_set+0x70>
    else if (settings_name_steq(name, "peripheral_address", &next) && !next) {
   2a234:	490b      	ldr	r1, [pc, #44]	; (2a264 <ble_profiles_handle_set+0xb4>)
   2a236:	466a      	mov	r2, sp
   2a238:	4620      	mov	r0, r4
   2a23a:	f020 ff4e 	bl	4b0da <settings_name_steq>
   2a23e:	2800      	cmp	r0, #0
   2a240:	d0ee      	beq.n	2a220 <ble_profiles_handle_set+0x70>
   2a242:	9b00      	ldr	r3, [sp, #0]
   2a244:	2b00      	cmp	r3, #0
   2a246:	d1dd      	bne.n	2a204 <ble_profiles_handle_set+0x54>
        if (len != sizeof(bt_addr_le_t)) {
   2a248:	2d07      	cmp	r5, #7
   2a24a:	d1e7      	bne.n	2a21c <ble_profiles_handle_set+0x6c>
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   2a24c:	4906      	ldr	r1, [pc, #24]	; (2a268 <ble_profiles_handle_set+0xb8>)
   2a24e:	462a      	mov	r2, r5
   2a250:	e7eb      	b.n	2a22a <ble_profiles_handle_set+0x7a>
   2a252:	bf00      	nop
   2a254:	0005658e 	.word	0x0005658e
   2a258:	20007663 	.word	0x20007663
   2a25c:	00056533 	.word	0x00056533
   2a260:	2000765a 	.word	0x2000765a
   2a264:	000565b2 	.word	0x000565b2
   2a268:	2000765c 	.word	0x2000765c

0002a26c <disconnected>:
        LOG_DBG("Active profile connected");
        k_work_submit(&raise_profile_changed_event_work);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   2a26c:	b510      	push	{r4, lr}
   2a26e:	b090      	sub	sp, #64	; 0x40
   2a270:	4604      	mov	r4, r0
    char addr[BT_ADDR_LE_STR_LEN];
    struct bt_conn_info info;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   2a272:	f023 fb30 	bl	4d8d6 <bt_conn_get_dst>
   2a276:	4669      	mov	r1, sp
   2a278:	f7ff ff5e 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    bt_conn_get_info(conn, &info);
   2a27c:	a908      	add	r1, sp, #32
   2a27e:	4620      	mov	r0, r4
   2a280:	f006 f9e8 	bl	30654 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   2a284:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   2a288:	2b01      	cmp	r3, #1
   2a28a:	d113      	bne.n	2a2b4 <disconnected+0x48>
        return;
    }

    // We need to do this in a work callback, otherwise the advertising update will still see the
    // connection for a profile as active, and not start advertising yet.
    k_work_submit(&update_advertising_work);
   2a28c:	480a      	ldr	r0, [pc, #40]	; (2a2b8 <disconnected+0x4c>)
   2a28e:	f01e fc7b 	bl	48b88 <k_work_submit>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   2a292:	4620      	mov	r0, r4
   2a294:	f023 fb1f 	bl	4d8d6 <bt_conn_get_dst>
   2a298:	4b08      	ldr	r3, [pc, #32]	; (2a2bc <disconnected+0x50>)
   2a29a:	4909      	ldr	r1, [pc, #36]	; (2a2c0 <disconnected+0x54>)
   2a29c:	781b      	ldrb	r3, [r3, #0]
   2a29e:	2216      	movs	r2, #22
   2a2a0:	fb02 1103 	mla	r1, r2, r3, r1
	return memcmp(a, b, sizeof(*a));
   2a2a4:	310f      	adds	r1, #15
   2a2a6:	2207      	movs	r2, #7
   2a2a8:	f022 f9f4 	bl	4c694 <memcmp>

    if (is_conn_active_profile(conn)) {
   2a2ac:	b910      	cbnz	r0, 2a2b4 <disconnected+0x48>
        LOG_DBG("Active profile disconnected");
        k_work_submit(&raise_profile_changed_event_work);
   2a2ae:	4805      	ldr	r0, [pc, #20]	; (2a2c4 <disconnected+0x58>)
   2a2b0:	f01e fc6a 	bl	48b88 <k_work_submit>
    }
}
   2a2b4:	b010      	add	sp, #64	; 0x40
   2a2b6:	bd10      	pop	{r4, pc}
   2a2b8:	200006f8 	.word	0x200006f8
   2a2bc:	2000765a 	.word	0x2000765a
   2a2c0:	20007663 	.word	0x20007663
   2a2c4:	200006e8 	.word	0x200006e8

0002a2c8 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
   2a2c8:	b507      	push	{r0, r1, r2, lr}
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
   2a2ca:	4b0a      	ldr	r3, [pc, #40]	; (2a2f4 <zmk_ble_active_profile_is_open+0x2c>)
   2a2cc:	480a      	ldr	r0, [pc, #40]	; (2a2f8 <zmk_ble_active_profile_is_open+0x30>)
   2a2ce:	781b      	ldrb	r3, [r3, #0]
   2a2d0:	2216      	movs	r2, #22
   2a2d2:	fb02 0003 	mla	r0, r2, r3, r0
   2a2d6:	4669      	mov	r1, sp
   2a2d8:	2300      	movs	r3, #0
   2a2da:	2207      	movs	r2, #7
   2a2dc:	300f      	adds	r0, #15
   2a2de:	9300      	str	r3, [sp, #0]
   2a2e0:	f8cd 3003 	str.w	r3, [sp, #3]
   2a2e4:	f022 f9d6 	bl	4c694 <memcmp>
}
   2a2e8:	fab0 f080 	clz	r0, r0
   2a2ec:	0940      	lsrs	r0, r0, #5
   2a2ee:	b003      	add	sp, #12
   2a2f0:	f85d fb04 	ldr.w	pc, [sp], #4
   2a2f4:	2000765a 	.word	0x2000765a
   2a2f8:	20007663 	.word	0x20007663

0002a2fc <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
   2a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a300:	4604      	mov	r4, r0
   2a302:	b08c      	sub	sp, #48	; 0x30
   2a304:	460d      	mov	r5, r1
   2a306:	f04f 0816 	mov.w	r8, #22
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   2a30a:	4f0f      	ldr	r7, [pc, #60]	; (2a348 <set_profile_address+0x4c>)
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   2a30c:	a904      	add	r1, sp, #16
   2a30e:	4628      	mov	r0, r5
   2a310:	fb14 f608 	smulbb	r6, r4, r8
   2a314:	f7ff ff10 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   2a318:	f106 000f 	add.w	r0, r6, #15
   2a31c:	4629      	mov	r1, r5
   2a31e:	2207      	movs	r2, #7
   2a320:	4438      	add	r0, r7
   2a322:	f022 f9c8 	bl	4c6b6 <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
   2a326:	4622      	mov	r2, r4
   2a328:	4908      	ldr	r1, [pc, #32]	; (2a34c <set_profile_address+0x50>)
   2a32a:	4668      	mov	r0, sp
   2a32c:	f003 fac4 	bl	2d8b8 <sprintf>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
   2a330:	4642      	mov	r2, r8
   2a332:	19b9      	adds	r1, r7, r6
   2a334:	4668      	mov	r0, sp
   2a336:	f002 fb17 	bl	2c968 <settings_save_one>
    k_work_submit(&raise_profile_changed_event_work);
   2a33a:	4805      	ldr	r0, [pc, #20]	; (2a350 <set_profile_address+0x54>)
   2a33c:	f01e fc24 	bl	48b88 <k_work_submit>
}
   2a340:	b00c      	add	sp, #48	; 0x30
   2a342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a346:	bf00      	nop
   2a348:	20007663 	.word	0x20007663
   2a34c:	00056597 	.word	0x00056597
   2a350:	200006e8 	.word	0x200006e8

0002a354 <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
   2a354:	b537      	push	{r0, r1, r2, r4, r5, lr}
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   2a356:	4b0e      	ldr	r3, [pc, #56]	; (2a390 <zmk_ble_active_profile_is_connected+0x3c>)
   2a358:	4c0e      	ldr	r4, [pc, #56]	; (2a394 <zmk_ble_active_profile_is_connected+0x40>)
   2a35a:	781b      	ldrb	r3, [r3, #0]
   2a35c:	2216      	movs	r2, #22
   2a35e:	fb02 4403 	mla	r4, r2, r3, r4
   2a362:	340f      	adds	r4, #15
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2a364:	2500      	movs	r5, #0
   2a366:	2207      	movs	r2, #7
   2a368:	4669      	mov	r1, sp
   2a36a:	4620      	mov	r0, r4
   2a36c:	9500      	str	r5, [sp, #0]
   2a36e:	f8cd 5003 	str.w	r5, [sp, #3]
   2a372:	f022 f98f 	bl	4c694 <memcmp>
   2a376:	b148      	cbz	r0, 2a38c <zmk_ble_active_profile_is_connected+0x38>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   2a378:	4621      	mov	r1, r4
   2a37a:	4628      	mov	r0, r5
   2a37c:	f006 f918 	bl	305b0 <bt_conn_lookup_addr_le>
   2a380:	b120      	cbz	r0, 2a38c <zmk_ble_active_profile_is_connected+0x38>
    bt_conn_unref(conn);
   2a382:	f023 f9d7 	bl	4d734 <bt_conn_unref>
    return true;
   2a386:	2001      	movs	r0, #1
}
   2a388:	b003      	add	sp, #12
   2a38a:	bd30      	pop	{r4, r5, pc}
        return false;
   2a38c:	2000      	movs	r0, #0
   2a38e:	e7fb      	b.n	2a388 <zmk_ble_active_profile_is_connected+0x34>
   2a390:	2000765a 	.word	0x2000765a
   2a394:	20007663 	.word	0x20007663

0002a398 <update_advertising>:
int update_advertising() {
   2a398:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a39a:	b08d      	sub	sp, #52	; 0x34
    if (zmk_ble_active_profile_is_open()) {
   2a39c:	f7ff ff94 	bl	2a2c8 <zmk_ble_active_profile_is_open>
   2a3a0:	4604      	mov	r4, r0
   2a3a2:	b910      	cbnz	r0, 2a3aa <update_advertising+0x12>
    } else if (!zmk_ble_active_profile_is_connected()) {
   2a3a4:	f7ff ffd6 	bl	2a354 <zmk_ble_active_profile_is_connected>
   2a3a8:	b900      	cbnz	r0, 2a3ac <update_advertising+0x14>
        desired_adv = ZMK_ADV_CONN;
   2a3aa:	2402      	movs	r4, #2
    switch (desired_adv + CURR_ADV(advertising_status)) {
   2a3ac:	4d20      	ldr	r5, [pc, #128]	; (2a430 <update_advertising+0x98>)
   2a3ae:	7828      	ldrb	r0, [r5, #0]
   2a3b0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   2a3b4:	2811      	cmp	r0, #17
   2a3b6:	dc05      	bgt.n	2a3c4 <update_advertising+0x2c>
   2a3b8:	2802      	cmp	r0, #2
   2a3ba:	d02d      	beq.n	2a418 <update_advertising+0x80>
   2a3bc:	2810      	cmp	r0, #16
   2a3be:	d00a      	beq.n	2a3d6 <update_advertising+0x3e>
    return 0;
   2a3c0:	2400      	movs	r4, #0
   2a3c2:	e005      	b.n	2a3d0 <update_advertising+0x38>
    switch (desired_adv + CURR_ADV(advertising_status)) {
   2a3c4:	2820      	cmp	r0, #32
   2a3c6:	d006      	beq.n	2a3d6 <update_advertising+0x3e>
   2a3c8:	2812      	cmp	r0, #18
   2a3ca:	f04f 0400 	mov.w	r4, #0
   2a3ce:	d00a      	beq.n	2a3e6 <update_advertising+0x4e>
};
   2a3d0:	4620      	mov	r0, r4
   2a3d2:	b00d      	add	sp, #52	; 0x34
   2a3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CHECKED_ADV_STOP();
   2a3d6:	f005 f979 	bl	2f6cc <bt_le_adv_stop>
   2a3da:	2300      	movs	r3, #0
   2a3dc:	702b      	strb	r3, [r5, #0]
   2a3de:	4604      	mov	r4, r0
   2a3e0:	2800      	cmp	r0, #0
   2a3e2:	d0ed      	beq.n	2a3c0 <update_advertising+0x28>
   2a3e4:	e7f4      	b.n	2a3d0 <update_advertising+0x38>
        CHECKED_ADV_STOP();
   2a3e6:	f005 f971 	bl	2f6cc <bt_le_adv_stop>
   2a3ea:	702c      	strb	r4, [r5, #0]
   2a3ec:	4604      	mov	r4, r0
   2a3ee:	2800      	cmp	r0, #0
   2a3f0:	d1ee      	bne.n	2a3d0 <update_advertising+0x38>
        CHECKED_OPEN_ADV();
   2a3f2:	4f10      	ldr	r7, [pc, #64]	; (2a434 <update_advertising+0x9c>)
   2a3f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2a3f6:	ae02      	add	r6, sp, #8
   2a3f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2a3fa:	683b      	ldr	r3, [r7, #0]
   2a3fc:	490e      	ldr	r1, [pc, #56]	; (2a438 <update_advertising+0xa0>)
   2a3fe:	6033      	str	r3, [r6, #0]
   2a400:	2204      	movs	r2, #4
   2a402:	9400      	str	r4, [sp, #0]
   2a404:	4623      	mov	r3, r4
   2a406:	a802      	add	r0, sp, #8
   2a408:	f005 f92e 	bl	2f668 <bt_le_adv_start>
   2a40c:	4604      	mov	r4, r0
   2a40e:	2800      	cmp	r0, #0
   2a410:	d1de      	bne.n	2a3d0 <update_advertising+0x38>
   2a412:	2302      	movs	r3, #2
   2a414:	702b      	strb	r3, [r5, #0]
        break;
   2a416:	e7d3      	b.n	2a3c0 <update_advertising+0x28>
        CHECKED_OPEN_ADV();
   2a418:	4e06      	ldr	r6, [pc, #24]	; (2a434 <update_advertising+0x9c>)
   2a41a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a41c:	ac07      	add	r4, sp, #28
   2a41e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a420:	6833      	ldr	r3, [r6, #0]
   2a422:	6023      	str	r3, [r4, #0]
   2a424:	2300      	movs	r3, #0
   2a426:	4904      	ldr	r1, [pc, #16]	; (2a438 <update_advertising+0xa0>)
   2a428:	9300      	str	r3, [sp, #0]
   2a42a:	2204      	movs	r2, #4
   2a42c:	a807      	add	r0, sp, #28
   2a42e:	e7eb      	b.n	2a408 <update_advertising+0x70>
   2a430:	2000765b 	.word	0x2000765b
   2a434:	00052a50 	.word	0x00052a50
   2a438:	000548e0 	.word	0x000548e0

0002a43c <auth_pairing_complete>:
    }

    return BT_SECURITY_ERR_SUCCESS;
};

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
   2a43c:	b530      	push	{r4, r5, lr}
   2a43e:	b091      	sub	sp, #68	; 0x44
   2a440:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   2a442:	f023 fa48 	bl	4d8d6 <bt_conn_get_dst>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
   2a446:	4669      	mov	r1, sp
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   2a448:	4604      	mov	r4, r0
    bt_addr_le_to_str(dst, addr, sizeof(addr));
   2a44a:	f7ff fe75 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   2a44e:	a908      	add	r1, sp, #32
   2a450:	4628      	mov	r0, r5
   2a452:	f006 f8ff 	bl	30654 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   2a456:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   2a45a:	2b01      	cmp	r3, #1
   2a45c:	d105      	bne.n	2a46a <auth_pairing_complete+0x2e>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
        return;
    }

    if (!zmk_ble_active_profile_is_open()) {
   2a45e:	f7ff ff33 	bl	2a2c8 <zmk_ble_active_profile_is_open>
        LOG_ERR("Pairing completed but current profile is not open: %s", log_strdup(addr));
        bt_unpair(BT_ID_DEFAULT, dst);
   2a462:	4621      	mov	r1, r4
    if (!zmk_ble_active_profile_is_open()) {
   2a464:	b918      	cbnz	r0, 2a46e <auth_pairing_complete+0x32>
        bt_unpair(BT_ID_DEFAULT, dst);
   2a466:	f004 fa31 	bl	2e8cc <bt_unpair>
        return;
    }

    set_profile_address(active_profile, dst);
    update_advertising();
};
   2a46a:	b011      	add	sp, #68	; 0x44
   2a46c:	bd30      	pop	{r4, r5, pc}
    set_profile_address(active_profile, dst);
   2a46e:	4b03      	ldr	r3, [pc, #12]	; (2a47c <auth_pairing_complete+0x40>)
   2a470:	7818      	ldrb	r0, [r3, #0]
   2a472:	f7ff ff43 	bl	2a2fc <set_profile_address>
    update_advertising();
   2a476:	f7ff ff8f 	bl	2a398 <update_advertising>
   2a47a:	e7f6      	b.n	2a46a <auth_pairing_complete+0x2e>
   2a47c:	2000765a 	.word	0x2000765a

0002a480 <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
   2a480:	b530      	push	{r4, r5, lr}
   2a482:	b091      	sub	sp, #68	; 0x44
   2a484:	460d      	mov	r5, r1
    bt_conn_get_info(conn, &info);
   2a486:	a908      	add	r1, sp, #32
static void connected(struct bt_conn *conn, uint8_t err) {
   2a488:	4604      	mov	r4, r0
    bt_conn_get_info(conn, &info);
   2a48a:	f006 f8e3 	bl	30654 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   2a48e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   2a492:	2b01      	cmp	r3, #1
   2a494:	d10b      	bne.n	2a4ae <connected+0x2e>
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   2a496:	4620      	mov	r0, r4
   2a498:	f023 fa1d 	bl	4d8d6 <bt_conn_get_dst>
   2a49c:	4669      	mov	r1, sp
   2a49e:	f7ff fe4b 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
    advertising_status = ZMK_ADV_NONE;
   2a4a2:	4b10      	ldr	r3, [pc, #64]	; (2a4e4 <connected+0x64>)
   2a4a4:	2200      	movs	r2, #0
   2a4a6:	701a      	strb	r2, [r3, #0]
    if (err) {
   2a4a8:	b11d      	cbz	r5, 2a4b2 <connected+0x32>
        update_advertising();
   2a4aa:	f7ff ff75 	bl	2a398 <update_advertising>
}
   2a4ae:	b011      	add	sp, #68	; 0x44
   2a4b0:	bd30      	pop	{r4, r5, pc}
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
   2a4b2:	2102      	movs	r1, #2
   2a4b4:	4620      	mov	r0, r4
   2a4b6:	f023 f9bc 	bl	4d832 <bt_conn_set_security>
    update_advertising();
   2a4ba:	f7ff ff6d 	bl	2a398 <update_advertising>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   2a4be:	4620      	mov	r0, r4
   2a4c0:	f023 fa09 	bl	4d8d6 <bt_conn_get_dst>
   2a4c4:	4b08      	ldr	r3, [pc, #32]	; (2a4e8 <connected+0x68>)
   2a4c6:	4909      	ldr	r1, [pc, #36]	; (2a4ec <connected+0x6c>)
   2a4c8:	781b      	ldrb	r3, [r3, #0]
   2a4ca:	2216      	movs	r2, #22
   2a4cc:	fb02 1103 	mla	r1, r2, r3, r1
   2a4d0:	310f      	adds	r1, #15
   2a4d2:	2207      	movs	r2, #7
   2a4d4:	f022 f8de 	bl	4c694 <memcmp>
    if (is_conn_active_profile(conn)) {
   2a4d8:	2800      	cmp	r0, #0
   2a4da:	d1e8      	bne.n	2a4ae <connected+0x2e>
        k_work_submit(&raise_profile_changed_event_work);
   2a4dc:	4804      	ldr	r0, [pc, #16]	; (2a4f0 <connected+0x70>)
   2a4de:	f01e fb53 	bl	48b88 <k_work_submit>
   2a4e2:	e7e4      	b.n	2a4ae <connected+0x2e>
   2a4e4:	2000765b 	.word	0x2000765b
   2a4e8:	2000765a 	.word	0x2000765a
   2a4ec:	20007663 	.word	0x20007663
   2a4f0:	200006e8 	.word	0x200006e8

0002a4f4 <zmk_ble_init>:
    }

    update_advertising();
}

static int zmk_ble_init(const struct device *_arg) {
   2a4f4:	b510      	push	{r4, lr}
    int err = bt_enable(NULL);
   2a4f6:	2000      	movs	r0, #0
   2a4f8:	f004 fb36 	bl	2eb68 <bt_enable>

    if (err) {
   2a4fc:	4604      	mov	r4, r0
   2a4fe:	b9c0      	cbnz	r0, 2a532 <zmk_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   2a500:	f002 fb80 	bl	2cc04 <settings_subsys_init>

    err = settings_register(&profiles_handler);
   2a504:	480c      	ldr	r0, [pc, #48]	; (2a538 <zmk_ble_init+0x44>)
   2a506:	f002 fabf 	bl	2ca88 <settings_register>
    if (err) {
   2a50a:	4604      	mov	r4, r0
   2a50c:	b988      	cbnz	r0, 2a532 <zmk_ble_init+0x3e>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ble_save_work, ble_save_profile_work);
   2a50e:	490b      	ldr	r1, [pc, #44]	; (2a53c <zmk_ble_init+0x48>)
   2a510:	480b      	ldr	r0, [pc, #44]	; (2a540 <zmk_ble_init+0x4c>)
   2a512:	f027 fa38 	bl	51986 <k_work_init_delayable>

    settings_load_subtree("ble");
   2a516:	480b      	ldr	r0, [pc, #44]	; (2a544 <zmk_ble_init+0x50>)
   2a518:	f002 fa60 	bl	2c9dc <settings_load_subtree>
    settings_load_subtree("bt");
   2a51c:	480a      	ldr	r0, [pc, #40]	; (2a548 <zmk_ble_init+0x54>)
   2a51e:	f002 fa5d 	bl	2c9dc <settings_load_subtree>
            LOG_ERR("Failed to delete setting: %d", err);
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
   2a522:	480a      	ldr	r0, [pc, #40]	; (2a54c <zmk_ble_init+0x58>)
   2a524:	f006 f820 	bl	30568 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
   2a528:	4809      	ldr	r0, [pc, #36]	; (2a550 <zmk_ble_init+0x5c>)
   2a52a:	f006 fb05 	bl	30b38 <bt_conn_auth_cb_register>
    update_advertising();
   2a52e:	f7ff ff33 	bl	2a398 <update_advertising>

    zmk_ble_ready(0);

    return 0;
}
   2a532:	4620      	mov	r0, r4
   2a534:	bd10      	pop	{r4, pc}
   2a536:	bf00      	nop
   2a538:	200006d0 	.word	0x200006d0
   2a53c:	0002a125 	.word	0x0002a125
   2a540:	20001ac8 	.word	0x20001ac8
   2a544:	000565a7 	.word	0x000565a7
   2a548:	000565ab 	.word	0x000565ab
   2a54c:	200006b0 	.word	0x200006b0
   2a550:	20000708 	.word	0x20000708

0002a554 <zmk_ble_clear_bonds>:
int zmk_ble_clear_bonds() {
   2a554:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY)) {
   2a558:	4e12      	ldr	r6, [pc, #72]	; (2a5a4 <zmk_ble_clear_bonds+0x50>)
   2a55a:	4f13      	ldr	r7, [pc, #76]	; (2a5a8 <zmk_ble_clear_bonds+0x54>)
   2a55c:	7830      	ldrb	r0, [r6, #0]
   2a55e:	2516      	movs	r5, #22
   2a560:	f04f 080f 	mov.w	r8, #15
   2a564:	fb15 8000 	smlabb	r0, r5, r0, r8
   2a568:	2400      	movs	r4, #0
   2a56a:	2207      	movs	r2, #7
   2a56c:	4669      	mov	r1, sp
   2a56e:	4438      	add	r0, r7
   2a570:	9400      	str	r4, [sp, #0]
   2a572:	f8cd 4003 	str.w	r4, [sp, #3]
   2a576:	f022 f88d 	bl	4c694 <memcmp>
   2a57a:	b168      	cbz	r0, 2a598 <zmk_ble_clear_bonds+0x44>
        bt_unpair(BT_ID_DEFAULT, &profiles[active_profile].peer);
   2a57c:	7831      	ldrb	r1, [r6, #0]
   2a57e:	fb15 8101 	smlabb	r1, r5, r1, r8
   2a582:	4439      	add	r1, r7
   2a584:	4620      	mov	r0, r4
   2a586:	f004 f9a1 	bl	2e8cc <bt_unpair>
        set_profile_address(active_profile, BT_ADDR_LE_ANY);
   2a58a:	7830      	ldrb	r0, [r6, #0]
   2a58c:	9402      	str	r4, [sp, #8]
   2a58e:	a902      	add	r1, sp, #8
   2a590:	f8cd 400b 	str.w	r4, [sp, #11]
   2a594:	f7ff feb2 	bl	2a2fc <set_profile_address>
    update_advertising();
   2a598:	f7ff fefe 	bl	2a398 <update_advertising>
};
   2a59c:	2000      	movs	r0, #0
   2a59e:	b004      	add	sp, #16
   2a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a5a4:	2000765a 	.word	0x2000765a
   2a5a8:	20007663 	.word	0x20007663

0002a5ac <zmk_ble_prof_select>:
    if (index >= ZMK_BLE_PROFILE_COUNT) {
   2a5ac:	2804      	cmp	r0, #4
int zmk_ble_prof_select(uint8_t index) {
   2a5ae:	b508      	push	{r3, lr}
    if (index >= ZMK_BLE_PROFILE_COUNT) {
   2a5b0:	d810      	bhi.n	2a5d4 <zmk_ble_prof_select+0x28>
    if (active_profile == index) {
   2a5b2:	4b0a      	ldr	r3, [pc, #40]	; (2a5dc <zmk_ble_prof_select+0x30>)
   2a5b4:	781a      	ldrb	r2, [r3, #0]
   2a5b6:	4282      	cmp	r2, r0
   2a5b8:	d00a      	beq.n	2a5d0 <zmk_ble_prof_select+0x24>
    active_profile = index;
   2a5ba:	7018      	strb	r0, [r3, #0]
    return k_work_reschedule(&ble_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   2a5bc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2a5c0:	2300      	movs	r3, #0
   2a5c2:	4807      	ldr	r0, [pc, #28]	; (2a5e0 <zmk_ble_prof_select+0x34>)
   2a5c4:	f01e fb7c 	bl	48cc0 <k_work_reschedule>
    update_advertising();
   2a5c8:	f7ff fee6 	bl	2a398 <update_advertising>
    raise_profile_changed_event();
   2a5cc:	f7ff fd92 	bl	2a0f4 <raise_profile_changed_event>
        return 0;
   2a5d0:	2000      	movs	r0, #0
   2a5d2:	e001      	b.n	2a5d8 <zmk_ble_prof_select+0x2c>
        return -ERANGE;
   2a5d4:	f06f 0021 	mvn.w	r0, #33	; 0x21
};
   2a5d8:	bd08      	pop	{r3, pc}
   2a5da:	bf00      	nop
   2a5dc:	2000765a 	.word	0x2000765a
   2a5e0:	20001ac8 	.word	0x20001ac8

0002a5e4 <zmk_ble_prof_next>:
    return zmk_ble_prof_select((active_profile + 1) % ZMK_BLE_PROFILE_COUNT);
   2a5e4:	4b05      	ldr	r3, [pc, #20]	; (2a5fc <zmk_ble_prof_next+0x18>)
   2a5e6:	7818      	ldrb	r0, [r3, #0]
   2a5e8:	2305      	movs	r3, #5
   2a5ea:	3001      	adds	r0, #1
   2a5ec:	fbb0 f3f3 	udiv	r3, r0, r3
   2a5f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2a5f4:	1ac0      	subs	r0, r0, r3
   2a5f6:	b2c0      	uxtb	r0, r0
   2a5f8:	f7ff bfd8 	b.w	2a5ac <zmk_ble_prof_select>
   2a5fc:	2000765a 	.word	0x2000765a

0002a600 <zmk_ble_prof_prev>:
    return zmk_ble_prof_select((active_profile + ZMK_BLE_PROFILE_COUNT - 1) %
   2a600:	4b05      	ldr	r3, [pc, #20]	; (2a618 <zmk_ble_prof_prev+0x18>)
   2a602:	7818      	ldrb	r0, [r3, #0]
   2a604:	2305      	movs	r3, #5
   2a606:	3004      	adds	r0, #4
   2a608:	fbb0 f3f3 	udiv	r3, r0, r3
   2a60c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2a610:	1ac0      	subs	r0, r0, r3
   2a612:	b2c0      	uxtb	r0, r0
   2a614:	f7ff bfca 	b.w	2a5ac <zmk_ble_prof_select>
   2a618:	2000765a 	.word	0x2000765a

0002a61c <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   2a61c:	4b03      	ldr	r3, [pc, #12]	; (2a62c <zmk_ble_active_profile_addr+0x10>)
   2a61e:	4804      	ldr	r0, [pc, #16]	; (2a630 <zmk_ble_active_profile_addr+0x14>)
   2a620:	781b      	ldrb	r3, [r3, #0]
   2a622:	2216      	movs	r2, #22
   2a624:	fb02 0003 	mla	r0, r2, r3, r0
   2a628:	300f      	adds	r0, #15
   2a62a:	4770      	bx	lr
   2a62c:	2000765a 	.word	0x2000765a
   2a630:	20007663 	.word	0x20007663

0002a634 <zmk_ble_set_peripheral_addr>:
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   2a634:	b510      	push	{r4, lr}
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   2a636:	4601      	mov	r1, r0
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   2a638:	4604      	mov	r4, r0
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   2a63a:	2207      	movs	r2, #7
   2a63c:	4804      	ldr	r0, [pc, #16]	; (2a650 <zmk_ble_set_peripheral_addr+0x1c>)
   2a63e:	f022 f83a 	bl	4c6b6 <memcpy>
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   2a642:	4621      	mov	r1, r4
   2a644:	4803      	ldr	r0, [pc, #12]	; (2a654 <zmk_ble_set_peripheral_addr+0x20>)
}
   2a646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   2a64a:	2207      	movs	r2, #7
   2a64c:	f002 b98c 	b.w	2c968 <settings_save_one>
   2a650:	2000765c 	.word	0x2000765c
   2a654:	000565ae 	.word	0x000565ae

0002a658 <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
   2a658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
   2a65a:	244c      	movs	r4, #76	; 0x4c
   2a65c:	9402      	str	r4, [sp, #8]
   2a65e:	4c04      	ldr	r4, [pc, #16]	; (2a670 <read_hids_report_map+0x18>)
   2a660:	9401      	str	r4, [sp, #4]
   2a662:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2a666:	9400      	str	r4, [sp, #0]
   2a668:	f024 fc81 	bl	4ef6e <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
   2a66c:	b004      	add	sp, #16
   2a66e:	bd10      	pop	{r4, pc}
   2a670:	000565e4 	.word	0x000565e4

0002a674 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
   2a674:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
    k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
   2a676:	4b06      	ldr	r3, [pc, #24]	; (2a690 <zmk_hog_init+0x1c>)
   2a678:	9300      	str	r3, [sp, #0]
   2a67a:	4906      	ldr	r1, [pc, #24]	; (2a694 <zmk_hog_init+0x20>)
   2a67c:	4806      	ldr	r0, [pc, #24]	; (2a698 <zmk_hog_init+0x24>)
   2a67e:	2305      	movs	r3, #5
   2a680:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a684:	f01e fa86 	bl	48b94 <k_work_queue_start>
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, &queue_config);

    return 0;
}
   2a688:	2000      	movs	r0, #0
   2a68a:	b003      	add	sp, #12
   2a68c:	f85d fb04 	ldr.w	pc, [sp], #4
   2a690:	00054a2c 	.word	0x00054a2c
   2a694:	200077a8 	.word	0x200077a8
   2a698:	20001af8 	.word	0x20001af8

0002a69c <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
   2a69c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a69e:	4e13      	ldr	r6, [pc, #76]	; (2a6ec <send_keyboard_report_callback+0x50>)
        struct bt_gatt_notify_params notify_params = {
   2a6a0:	4f13      	ldr	r7, [pc, #76]	; (2a6f0 <send_keyboard_report_callback+0x54>)
void send_keyboard_report_callback(struct k_work *work) {
   2a6a2:	b089      	sub	sp, #36	; 0x24
   2a6a4:	2200      	movs	r2, #0
   2a6a6:	2300      	movs	r3, #0
   2a6a8:	4669      	mov	r1, sp
   2a6aa:	4630      	mov	r0, r6
   2a6ac:	f01d ffb8 	bl	48620 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
   2a6b0:	4605      	mov	r5, r0
   2a6b2:	b108      	cbz	r0, 2a6b8 <send_keyboard_report_callback+0x1c>
}
   2a6b4:	b009      	add	sp, #36	; 0x24
   2a6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        struct bt_conn *conn = destination_connection();
   2a6b8:	f01f fdac 	bl	4a214 <destination_connection>
        if (conn == NULL) {
   2a6bc:	4604      	mov	r4, r0
   2a6be:	2800      	cmp	r0, #0
   2a6c0:	d0f8      	beq.n	2a6b4 <send_keyboard_report_callback+0x18>
        struct bt_gatt_notify_params notify_params = {
   2a6c2:	2218      	movs	r2, #24
   2a6c4:	4629      	mov	r1, r5
   2a6c6:	a802      	add	r0, sp, #8
   2a6c8:	f022 f800 	bl	4c6cc <memset>
   2a6cc:	2308      	movs	r3, #8
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a6ce:	eb0d 0103 	add.w	r1, sp, r3
   2a6d2:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   2a6d4:	9703      	str	r7, [sp, #12]
   2a6d6:	f8cd d010 	str.w	sp, [sp, #16]
   2a6da:	f8ad 3014 	strh.w	r3, [sp, #20]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a6de:	f007 feef 	bl	324c0 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a6e2:	4620      	mov	r0, r4
   2a6e4:	f023 f826 	bl	4d734 <bt_conn_unref>
   2a6e8:	e7dc      	b.n	2a6a4 <send_keyboard_report_callback+0x8>
   2a6ea:	bf00      	nop
   2a6ec:	2000140c 	.word	0x2000140c
   2a6f0:	00054964 	.word	0x00054964

0002a6f4 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
   2a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a6f8:	4f13      	ldr	r7, [pc, #76]	; (2a748 <send_consumer_report_callback+0x54>)
        struct bt_gatt_notify_params notify_params = {
   2a6fa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2a74c <send_consumer_report_callback+0x58>
void send_consumer_report_callback(struct k_work *work) {
   2a6fe:	b08a      	sub	sp, #40	; 0x28
   2a700:	ae01      	add	r6, sp, #4
   2a702:	2200      	movs	r2, #0
   2a704:	2300      	movs	r3, #0
   2a706:	4631      	mov	r1, r6
   2a708:	4638      	mov	r0, r7
   2a70a:	f01d ff89 	bl	48620 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
   2a70e:	4605      	mov	r5, r0
   2a710:	b110      	cbz	r0, 2a718 <send_consumer_report_callback+0x24>
};
   2a712:	b00a      	add	sp, #40	; 0x28
   2a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        struct bt_conn *conn = destination_connection();
   2a718:	f01f fd7c 	bl	4a214 <destination_connection>
        if (conn == NULL) {
   2a71c:	4604      	mov	r4, r0
   2a71e:	2800      	cmp	r0, #0
   2a720:	d0f7      	beq.n	2a712 <send_consumer_report_callback+0x1e>
        struct bt_gatt_notify_params notify_params = {
   2a722:	2218      	movs	r2, #24
   2a724:	4629      	mov	r1, r5
   2a726:	a804      	add	r0, sp, #16
   2a728:	f021 ffd0 	bl	4c6cc <memset>
   2a72c:	230c      	movs	r3, #12
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a72e:	a904      	add	r1, sp, #16
   2a730:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   2a732:	e9cd 8605 	strd	r8, r6, [sp, #20]
   2a736:	f8ad 301c 	strh.w	r3, [sp, #28]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a73a:	f007 fec1 	bl	324c0 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a73e:	4620      	mov	r0, r4
   2a740:	f022 fff8 	bl	4d734 <bt_conn_unref>
   2a744:	e7dd      	b.n	2a702 <send_consumer_report_callback+0xe>
   2a746:	bf00      	nop
   2a748:	200013dc 	.word	0x200013dc
   2a74c:	000549c8 	.word	0x000549c8

0002a750 <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
   2a750:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a752:	4605      	mov	r5, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a754:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a758:	4601      	mov	r1, r0
   2a75a:	2300      	movs	r3, #0
   2a75c:	480c      	ldr	r0, [pc, #48]	; (2a790 <zmk_hog_send_keyboard_report+0x40>)
   2a75e:	f01d ff09 	bl	48574 <z_impl_k_msgq_put>
    if (err) {
   2a762:	4604      	mov	r4, r0
   2a764:	b178      	cbz	r0, 2a786 <zmk_hog_send_keyboard_report+0x36>
        switch (err) {
   2a766:	f110 0f0b 	cmn.w	r0, #11
   2a76a:	d109      	bne.n	2a780 <zmk_hog_send_keyboard_report+0x30>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a76c:	2200      	movs	r2, #0
   2a76e:	2300      	movs	r3, #0
   2a770:	4669      	mov	r1, sp
   2a772:	4807      	ldr	r0, [pc, #28]	; (2a790 <zmk_hog_send_keyboard_report+0x40>)
   2a774:	f01d ff54 	bl	48620 <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
   2a778:	4628      	mov	r0, r5
   2a77a:	f7ff ffe9 	bl	2a750 <zmk_hog_send_keyboard_report>
   2a77e:	4604      	mov	r4, r0
};
   2a780:	4620      	mov	r0, r4
   2a782:	b003      	add	sp, #12
   2a784:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_keyboard_work);
   2a786:	4903      	ldr	r1, [pc, #12]	; (2a794 <zmk_hog_send_keyboard_report+0x44>)
   2a788:	4803      	ldr	r0, [pc, #12]	; (2a798 <zmk_hog_send_keyboard_report+0x48>)
   2a78a:	f027 f8df 	bl	5194c <k_work_submit_to_queue>
    return 0;
   2a78e:	e7f7      	b.n	2a780 <zmk_hog_send_keyboard_report+0x30>
   2a790:	2000140c 	.word	0x2000140c
   2a794:	20000800 	.word	0x20000800
   2a798:	20001af8 	.word	0x20001af8

0002a79c <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
   2a79c:	b530      	push	{r4, r5, lr}
   2a79e:	4605      	mov	r5, r0
   2a7a0:	b085      	sub	sp, #20
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a7a2:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a7a6:	4601      	mov	r1, r0
   2a7a8:	2300      	movs	r3, #0
   2a7aa:	480d      	ldr	r0, [pc, #52]	; (2a7e0 <zmk_hog_send_consumer_report+0x44>)
   2a7ac:	f01d fee2 	bl	48574 <z_impl_k_msgq_put>
    if (err) {
   2a7b0:	4604      	mov	r4, r0
   2a7b2:	b178      	cbz	r0, 2a7d4 <zmk_hog_send_consumer_report+0x38>
        switch (err) {
   2a7b4:	f110 0f0b 	cmn.w	r0, #11
   2a7b8:	d109      	bne.n	2a7ce <zmk_hog_send_consumer_report+0x32>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a7ba:	2200      	movs	r2, #0
   2a7bc:	2300      	movs	r3, #0
   2a7be:	a901      	add	r1, sp, #4
   2a7c0:	4807      	ldr	r0, [pc, #28]	; (2a7e0 <zmk_hog_send_consumer_report+0x44>)
   2a7c2:	f01d ff2d 	bl	48620 <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
   2a7c6:	4628      	mov	r0, r5
   2a7c8:	f7ff ffe8 	bl	2a79c <zmk_hog_send_consumer_report>
   2a7cc:	4604      	mov	r4, r0
};
   2a7ce:	4620      	mov	r0, r4
   2a7d0:	b005      	add	sp, #20
   2a7d2:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);
   2a7d4:	4903      	ldr	r1, [pc, #12]	; (2a7e4 <zmk_hog_send_consumer_report+0x48>)
   2a7d6:	4804      	ldr	r0, [pc, #16]	; (2a7e8 <zmk_hog_send_consumer_report+0x4c>)
   2a7d8:	f027 f8b8 	bl	5194c <k_work_submit_to_queue>
    return 0;
   2a7dc:	e7f7      	b.n	2a7ce <zmk_hog_send_consumer_report+0x32>
   2a7de:	bf00      	nop
   2a7e0:	200013dc 	.word	0x200013dc
   2a7e4:	200007f0 	.word	0x200007f0
   2a7e8:	20001af8 	.word	0x20001af8

0002a7ec <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   2a7ec:	b510      	push	{r4, lr}
   2a7ee:	4604      	mov	r4, r0
   2a7f0:	200c      	movs	r0, #12
   2a7f2:	f027 fc1f 	bl	52034 <k_malloc>
   2a7f6:	4a02      	ldr	r2, [pc, #8]	; (2a800 <new_zmk_battery_state_changed+0x14>)
   2a7f8:	6002      	str	r2, [r0, #0]
   2a7fa:	7204      	strb	r4, [r0, #8]
   2a7fc:	bd10      	pop	{r4, pc}
   2a7fe:	bf00      	nop
   2a800:	00054a34 	.word	0x00054a34

0002a804 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   2a804:	4801      	ldr	r0, [pc, #4]	; (2a80c <zmk_battery_timer+0x8>)
   2a806:	f01e b9bf 	b.w	48b88 <k_work_submit>
   2a80a:	bf00      	nop
   2a80c:	20000810 	.word	0x20000810

0002a810 <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   2a810:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   2a812:	4c0f      	ldr	r4, [pc, #60]	; (2a850 <zmk_battery_update.constprop.0+0x40>)
   2a814:	68a5      	ldr	r5, [r4, #8]
   2a816:	212c      	movs	r1, #44	; 0x2c
   2a818:	68eb      	ldr	r3, [r5, #12]
   2a81a:	4620      	mov	r0, r4
   2a81c:	4798      	blx	r3
    if (rc != 0) {
   2a81e:	b9a0      	cbnz	r0, 2a84a <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   2a820:	212c      	movs	r1, #44	; 0x2c
   2a822:	692b      	ldr	r3, [r5, #16]
   2a824:	466a      	mov	r2, sp
   2a826:	4620      	mov	r0, r4
   2a828:	4798      	blx	r3
    if (rc != 0) {
   2a82a:	b970      	cbnz	r0, 2a84a <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   2a82c:	4c09      	ldr	r4, [pc, #36]	; (2a854 <zmk_battery_update.constprop.0+0x44>)
   2a82e:	9b00      	ldr	r3, [sp, #0]
   2a830:	7822      	ldrb	r2, [r4, #0]
   2a832:	429a      	cmp	r2, r3
   2a834:	d009      	beq.n	2a84a <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   2a836:	b2d8      	uxtb	r0, r3
   2a838:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   2a83a:	f000 ff81 	bl	2b740 <bt_bas_set_battery_level>
        if (rc != 0) {
   2a83e:	b920      	cbnz	r0, 2a84a <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   2a840:	7820      	ldrb	r0, [r4, #0]
   2a842:	f7ff ffd3 	bl	2a7ec <new_zmk_battery_state_changed>
   2a846:	f01f f87e 	bl	49946 <zmk_event_manager_raise>
}
   2a84a:	b003      	add	sp, #12
   2a84c:	bd30      	pop	{r4, r5, pc}
   2a84e:	bf00      	nop
   2a850:	00052304 	.word	0x00052304
   2a854:	200076d2 	.word	0x200076d2

0002a858 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   2a858:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   2a85a:	480b      	ldr	r0, [pc, #44]	; (2a888 <zmk_battery_init+0x30>)
   2a85c:	f026 fe2f 	bl	514be <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   2a860:	b170      	cbz	r0, 2a880 <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   2a862:	f7ff ffd5 	bl	2a810 <zmk_battery_update.constprop.0>

    if (rc != 0) {
   2a866:	4604      	mov	r4, r0
   2a868:	b938      	cbnz	r0, 2a87a <zmk_battery_init+0x22>
   2a86a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2a86e:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   2a870:	4806      	ldr	r0, [pc, #24]	; (2a88c <zmk_battery_init+0x34>)
   2a872:	e9cd 2300 	strd	r2, r3, [sp]
   2a876:	f01e ff2b 	bl	496d0 <z_impl_k_timer_start>
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));

    return 0;
}
   2a87a:	4620      	mov	r0, r4
   2a87c:	b002      	add	sp, #8
   2a87e:	bd10      	pop	{r4, pc}
        return -ENODEV;
   2a880:	f06f 0412 	mvn.w	r4, #18
   2a884:	e7f9      	b.n	2a87a <zmk_battery_init+0x22>
   2a886:	bf00      	nop
   2a888:	00052304 	.word	0x00052304
   2a88c:	20001298 	.word	0x20001298

0002a890 <start_scan>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
    }
}

static int start_scan(void) {
   2a890:	b530      	push	{r4, r5, lr}
    int err;

    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   2a892:	4d06      	ldr	r5, [pc, #24]	; (2a8ac <start_scan+0x1c>)
   2a894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int start_scan(void) {
   2a896:	b087      	sub	sp, #28
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   2a898:	ac01      	add	r4, sp, #4
   2a89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a89c:	682b      	ldr	r3, [r5, #0]
   2a89e:	4904      	ldr	r1, [pc, #16]	; (2a8b0 <start_scan+0x20>)
   2a8a0:	6023      	str	r3, [r4, #0]
   2a8a2:	a801      	add	r0, sp, #4
   2a8a4:	f005 f96e 	bl	2fb84 <bt_le_scan_start>
        return err;
    }

    LOG_DBG("Scanning successfully started");
    return 0;
}
   2a8a8:	b007      	add	sp, #28
   2a8aa:	bd30      	pop	{r4, r5, pc}
   2a8ac:	00052a64 	.word	0x00052a64
   2a8b0:	0002a9bd 	.word	0x0002a9bd

0002a8b4 <zmk_split_bt_central_init>:

    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
    return split_bt_invoke_behavior_payload(wrapper);
}

int zmk_split_bt_central_init(const struct device *_arg) {
   2a8b4:	b507      	push	{r0, r1, r2, lr}
    k_work_queue_start(&split_central_split_run_q, split_central_split_run_q_stack,
   2a8b6:	2300      	movs	r3, #0
   2a8b8:	4907      	ldr	r1, [pc, #28]	; (2a8d8 <zmk_split_bt_central_init+0x24>)
   2a8ba:	9300      	str	r3, [sp, #0]
   2a8bc:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a8c0:	2305      	movs	r3, #5
   2a8c2:	4806      	ldr	r0, [pc, #24]	; (2a8dc <zmk_split_bt_central_init+0x28>)
   2a8c4:	f01e f966 	bl	48b94 <k_work_queue_start>
                       K_THREAD_STACK_SIZEOF(split_central_split_run_q_stack),
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, NULL);
    bt_conn_cb_register(&conn_callbacks);
   2a8c8:	4805      	ldr	r0, [pc, #20]	; (2a8e0 <zmk_split_bt_central_init+0x2c>)
   2a8ca:	f005 fe4d 	bl	30568 <bt_conn_cb_register>

    return start_scan();
}
   2a8ce:	b003      	add	sp, #12
   2a8d0:	f85d eb04 	ldr.w	lr, [sp], #4
    return start_scan();
   2a8d4:	f7ff bfdc 	b.w	2a890 <start_scan>
   2a8d8:	200079a8 	.word	0x200079a8
   2a8dc:	20001b98 	.word	0x20001b98
   2a8e0:	20000820 	.word	0x20000820

0002a8e4 <split_bt_invoke_behavior_payload>:
split_bt_invoke_behavior_payload(struct zmk_split_run_behavior_payload_wrapper payload_wrapper) {
   2a8e4:	b084      	sub	sp, #16
   2a8e6:	b510      	push	{r4, lr}
   2a8e8:	b088      	sub	sp, #32
   2a8ea:	ac0a      	add	r4, sp, #40	; 0x28
   2a8ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a8f0:	4811      	ldr	r0, [pc, #68]	; (2a938 <split_bt_invoke_behavior_payload+0x54>)
   2a8f2:	4621      	mov	r1, r4
   2a8f4:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a8f8:	2300      	movs	r3, #0
   2a8fa:	f01d fe3b 	bl	48574 <z_impl_k_msgq_put>
    if (err) {
   2a8fe:	4604      	mov	r4, r0
   2a900:	b1a8      	cbz	r0, 2a92e <split_bt_invoke_behavior_payload+0x4a>
        switch (err) {
   2a902:	f110 0f0b 	cmn.w	r0, #11
   2a906:	d10c      	bne.n	2a922 <split_bt_invoke_behavior_payload+0x3e>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a908:	2200      	movs	r2, #0
   2a90a:	2300      	movs	r3, #0
   2a90c:	a903      	add	r1, sp, #12
   2a90e:	480a      	ldr	r0, [pc, #40]	; (2a938 <split_bt_invoke_behavior_payload+0x54>)
   2a910:	f01d fe86 	bl	48620 <z_impl_k_msgq_get>
            return split_bt_invoke_behavior_payload(payload_wrapper);
   2a914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a916:	9300      	str	r3, [sp, #0]
   2a918:	ab0a      	add	r3, sp, #40	; 0x28
   2a91a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a91c:	f7ff ffe2 	bl	2a8e4 <split_bt_invoke_behavior_payload>
   2a920:	4604      	mov	r4, r0
};
   2a922:	4620      	mov	r0, r4
   2a924:	b008      	add	sp, #32
   2a926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a92a:	b004      	add	sp, #16
   2a92c:	4770      	bx	lr
    k_work_submit_to_queue(&split_central_split_run_q, &split_central_split_run_work);
   2a92e:	4903      	ldr	r1, [pc, #12]	; (2a93c <split_bt_invoke_behavior_payload+0x58>)
   2a930:	4803      	ldr	r0, [pc, #12]	; (2a940 <split_bt_invoke_behavior_payload+0x5c>)
   2a932:	f027 f80b 	bl	5194c <k_work_submit_to_queue>
    return 0;
   2a936:	e7f4      	b.n	2a922 <split_bt_invoke_behavior_payload+0x3e>
   2a938:	2000146c 	.word	0x2000146c
   2a93c:	20000850 	.word	0x20000850
   2a940:	20001b98 	.word	0x20001b98

0002a944 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a944:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   2a946:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a948:	b08a      	sub	sp, #40	; 0x28
   2a94a:	4604      	mov	r4, r0
   2a94c:	460e      	mov	r6, r1
   2a94e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   2a950:	2b03      	cmp	r3, #3
   2a952:	d820      	bhi.n	2a996 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   2a954:	e8df f003 	tbb	[pc, r3]
   2a958:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   2a95c:	4911      	ldr	r1, [pc, #68]	; (2a9a4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
   2a95e:	4628      	mov	r0, r5
   2a960:	f021 fe6a 	bl	4c638 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   2a964:	7863      	ldrb	r3, [r4, #1]
   2a966:	9304      	str	r3, [sp, #16]
   2a968:	78a3      	ldrb	r3, [r4, #2]
   2a96a:	9303      	str	r3, [sp, #12]
   2a96c:	78e3      	ldrb	r3, [r4, #3]
   2a96e:	9302      	str	r3, [sp, #8]
   2a970:	7923      	ldrb	r3, [r4, #4]
   2a972:	9301      	str	r3, [sp, #4]
   2a974:	7963      	ldrb	r3, [r4, #5]
   2a976:	9300      	str	r3, [sp, #0]
   2a978:	4a0b      	ldr	r2, [pc, #44]	; (2a9a8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   2a97a:	79a3      	ldrb	r3, [r4, #6]
   2a97c:	9505      	str	r5, [sp, #20]
   2a97e:	211e      	movs	r1, #30
   2a980:	4630      	mov	r0, r6
   2a982:	f01f fd9d 	bl	4a4c0 <snprintk>
}
   2a986:	b00a      	add	sp, #40	; 0x28
   2a988:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   2a98a:	4908      	ldr	r1, [pc, #32]	; (2a9ac <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   2a98c:	e7e7      	b.n	2a95e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   2a98e:	4908      	ldr	r1, [pc, #32]	; (2a9b0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   2a990:	e7e5      	b.n	2a95e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   2a992:	4908      	ldr	r1, [pc, #32]	; (2a9b4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   2a994:	e7e3      	b.n	2a95e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   2a996:	4a08      	ldr	r2, [pc, #32]	; (2a9b8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   2a998:	210a      	movs	r1, #10
   2a99a:	4628      	mov	r0, r5
   2a99c:	f01f fd90 	bl	4a4c0 <snprintk>
		break;
   2a9a0:	e7e0      	b.n	2a964 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   2a9a2:	bf00      	nop
   2a9a4:	00056542 	.word	0x00056542
   2a9a8:	0005656b 	.word	0x0005656b
   2a9ac:	00056549 	.word	0x00056549
   2a9b0:	00056550 	.word	0x00056550
   2a9b4:	0005655a 	.word	0x0005655a
   2a9b8:	00056564 	.word	0x00056564

0002a9bc <split_central_device_found>:
                                       struct net_buf_simple *ad) {
   2a9bc:	b570      	push	{r4, r5, r6, lr}
   2a9be:	b088      	sub	sp, #32
   2a9c0:	4616      	mov	r6, r2
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   2a9c2:	4669      	mov	r1, sp
                                       struct net_buf_simple *ad) {
   2a9c4:	4605      	mov	r5, r0
   2a9c6:	461c      	mov	r4, r3
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   2a9c8:	f7ff ffbc 	bl	2a944 <bt_addr_le_to_str.constprop.0.isra.0>
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   2a9cc:	2e01      	cmp	r6, #1
   2a9ce:	d804      	bhi.n	2a9da <split_central_device_found+0x1e>
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
   2a9d0:	4903      	ldr	r1, [pc, #12]	; (2a9e0 <split_central_device_found+0x24>)
   2a9d2:	462a      	mov	r2, r5
   2a9d4:	4620      	mov	r0, r4
   2a9d6:	f022 fb42 	bl	4d05e <bt_data_parse>
}
   2a9da:	b008      	add	sp, #32
   2a9dc:	bd70      	pop	{r4, r5, r6, pc}
   2a9de:	bf00      	nop
   2a9e0:	0002adf5 	.word	0x0002adf5

0002a9e4 <peripheral_event_work_callback>:
void peripheral_event_work_callback(struct k_work *work) {
   2a9e4:	b530      	push	{r4, r5, lr}
   2a9e6:	4d0c      	ldr	r5, [pc, #48]	; (2aa18 <peripheral_event_work_callback+0x34>)
   2a9e8:	b089      	sub	sp, #36	; 0x24
   2a9ea:	ac02      	add	r4, sp, #8
   2a9ec:	2200      	movs	r2, #0
   2a9ee:	2300      	movs	r3, #0
   2a9f0:	4621      	mov	r1, r4
   2a9f2:	4628      	mov	r0, r5
   2a9f4:	f01d fe14 	bl	48620 <z_impl_k_msgq_get>
    while (k_msgq_get(&peripheral_event_msgq, &ev, K_NO_WAIT) == 0) {
   2a9f8:	b108      	cbz	r0, 2a9fe <peripheral_event_work_callback+0x1a>
}
   2a9fa:	b009      	add	sp, #36	; 0x24
   2a9fc:	bd30      	pop	{r4, r5, pc}
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(ev));
   2a9fe:	ab08      	add	r3, sp, #32
   2aa00:	e913 0003 	ldmdb	r3, {r0, r1}
   2aa04:	e88d 0003 	stmia.w	sp, {r0, r1}
   2aa08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2aa0c:	f7fe fc06 	bl	2921c <new_zmk_position_state_changed>
   2aa10:	f01e ff99 	bl	49946 <zmk_event_manager_raise>
   2aa14:	e7ea      	b.n	2a9ec <peripheral_event_work_callback+0x8>
   2aa16:	bf00      	nop
   2aa18:	2000137c 	.word	0x2000137c

0002aa1c <split_central_split_run_callback>:
void split_central_split_run_callback(struct k_work *work) {
   2aa1c:	b570      	push	{r4, r5, r6, lr}
   2aa1e:	4e10      	ldr	r6, [pc, #64]	; (2aa60 <split_central_split_run_callback+0x44>)
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   2aa20:	4c10      	ldr	r4, [pc, #64]	; (2aa64 <split_central_split_run_callback+0x48>)
void split_central_split_run_callback(struct k_work *work) {
   2aa22:	b08a      	sub	sp, #40	; 0x28
   2aa24:	2200      	movs	r2, #0
   2aa26:	2300      	movs	r3, #0
   2aa28:	a905      	add	r1, sp, #20
   2aa2a:	4630      	mov	r0, r6
   2aa2c:	f01d fdf8 	bl	48620 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_split_central_split_run_msgq, &payload_wrapper, K_NO_WAIT) == 0) {
   2aa30:	b108      	cbz	r0, 2aa36 <split_central_split_run_callback+0x1a>
}
   2aa32:	b00a      	add	sp, #40	; 0x28
   2aa34:	bd70      	pop	{r4, r5, r6, pc}
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   2aa36:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2aa3a:	227c      	movs	r2, #124	; 0x7c
   2aa3c:	4353      	muls	r3, r2
   2aa3e:	18e5      	adds	r5, r4, r3
   2aa40:	5ce3      	ldrb	r3, [r4, r3]
   2aa42:	2b02      	cmp	r3, #2
   2aa44:	d1ee      	bne.n	2aa24 <split_central_split_run_callback+0x8>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   2aa46:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2aa4a:	2301      	movs	r3, #1
   2aa4c:	9300      	str	r3, [sp, #0]
   2aa4e:	f8b5 1058 	ldrh.w	r1, [r5, #88]	; 0x58
   2aa52:	6868      	ldr	r0, [r5, #4]
   2aa54:	2313      	movs	r3, #19
   2aa56:	f10d 0215 	add.w	r2, sp, #21
   2aa5a:	f024 fd24 	bl	4f4a6 <bt_gatt_write_without_response_cb>
   2aa5e:	e7e1      	b.n	2aa24 <split_central_split_run_callback+0x8>
   2aa60:	2000146c 	.word	0x2000146c
   2aa64:	20004658 	.word	0x20004658

0002aa68 <peripheral_slot_index_for_conn>:
        if (peripherals[i].conn == conn) {
   2aa68:	4b03      	ldr	r3, [pc, #12]	; (2aa78 <peripheral_slot_index_for_conn+0x10>)
   2aa6a:	685b      	ldr	r3, [r3, #4]
    return -EINVAL;
   2aa6c:	4283      	cmp	r3, r0
}
   2aa6e:	bf14      	ite	ne
   2aa70:	f06f 0015 	mvnne.w	r0, #21
   2aa74:	2000      	moveq	r0, #0
   2aa76:	4770      	bx	lr
   2aa78:	20004658 	.word	0x20004658

0002aa7c <peripheral_slot_for_conn>:
struct peripheral_slot *peripheral_slot_for_conn(struct bt_conn *conn) {
   2aa7c:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2aa7e:	f7ff fff3 	bl	2aa68 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2aa82:	1e03      	subs	r3, r0, #0
    return &peripherals[idx];
   2aa84:	bfa3      	ittte	ge
   2aa86:	4803      	ldrge	r0, [pc, #12]	; (2aa94 <peripheral_slot_for_conn+0x18>)
   2aa88:	227c      	movge	r2, #124	; 0x7c
   2aa8a:	fb02 0003 	mlage	r0, r2, r3, r0
        return NULL;
   2aa8e:	2000      	movlt	r0, #0
}
   2aa90:	bd08      	pop	{r3, pc}
   2aa92:	bf00      	nop
   2aa94:	20004658 	.word	0x20004658

0002aa98 <split_central_process_connection>:
static void split_central_process_connection(struct bt_conn *conn) {
   2aa98:	b510      	push	{r4, lr}
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   2aa9a:	2102      	movs	r1, #2
static void split_central_process_connection(struct bt_conn *conn) {
   2aa9c:	b088      	sub	sp, #32
   2aa9e:	4604      	mov	r4, r0
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   2aaa0:	f022 fec7 	bl	4d832 <bt_conn_set_security>
    if (err) {
   2aaa4:	b948      	cbnz	r0, 2aaba <split_central_process_connection+0x22>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2aaa6:	4620      	mov	r0, r4
   2aaa8:	f7ff ffe8 	bl	2aa7c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2aaac:	b128      	cbz	r0, 2aaba <split_central_process_connection+0x22>
    if (!slot->subscribe_params.value_handle) {
   2aaae:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   2aab0:	b12b      	cbz	r3, 2aabe <split_central_process_connection+0x26>
    bt_conn_get_info(conn, &info);
   2aab2:	4669      	mov	r1, sp
   2aab4:	4620      	mov	r0, r4
   2aab6:	f005 fdcd 	bl	30654 <bt_conn_get_info>
}
   2aaba:	b008      	add	sp, #32
   2aabc:	bd10      	pop	{r4, pc}
        slot->discover_params.uuid = &split_service_uuid.uuid;
   2aabe:	4a09      	ldr	r2, [pc, #36]	; (2aae4 <split_central_process_connection+0x4c>)
   2aac0:	6082      	str	r2, [r0, #8]
        slot->discover_params.func = split_central_service_discovery_func;
   2aac2:	4a09      	ldr	r2, [pc, #36]	; (2aae8 <split_central_process_connection+0x50>)
   2aac4:	60c2      	str	r2, [r0, #12]
        slot->discover_params.start_handle = 0x0001;
   2aac6:	2201      	movs	r2, #1
   2aac8:	8202      	strh	r2, [r0, #16]
        slot->discover_params.end_handle = 0xffff;
   2aaca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2aace:	82c2      	strh	r2, [r0, #22]
        slot->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   2aad0:	7603      	strb	r3, [r0, #24]
        err = bt_gatt_discover(slot->conn, &slot->discover_params);
   2aad2:	f100 0108 	add.w	r1, r0, #8
   2aad6:	6840      	ldr	r0, [r0, #4]
   2aad8:	f007 fe5c 	bl	32794 <bt_gatt_discover>
        if (err) {
   2aadc:	2800      	cmp	r0, #0
   2aade:	d0e8      	beq.n	2aab2 <split_central_process_connection+0x1a>
   2aae0:	e7eb      	b.n	2aaba <split_central_process_connection+0x22>
   2aae2:	bf00      	nop
   2aae4:	0005666e 	.word	0x0005666e
   2aae8:	0002aaed 	.word	0x0002aaed

0002aaec <split_central_service_discovery_func>:
                                                    struct bt_gatt_discover_params *params) {
   2aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aaf0:	4613      	mov	r3, r2
   2aaf2:	b086      	sub	sp, #24
   2aaf4:	4607      	mov	r7, r0
    if (!attr) {
   2aaf6:	460e      	mov	r6, r1
   2aaf8:	b939      	cbnz	r1, 2ab0a <split_central_service_discovery_func+0x1e>
        (void)memset(params, 0, sizeof(*params));
   2aafa:	2218      	movs	r2, #24
   2aafc:	4618      	mov	r0, r3
   2aafe:	f021 fde5 	bl	4c6cc <memset>
        return BT_GATT_ITER_STOP;
   2ab02:	4630      	mov	r0, r6
}
   2ab04:	b006      	add	sp, #24
   2ab06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2ab0a:	f7ff ffb7 	bl	2aa7c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2ab0e:	4604      	mov	r4, r0
   2ab10:	2800      	cmp	r0, #0
   2ab12:	d0f7      	beq.n	2ab04 <split_central_service_discovery_func+0x18>
    if (bt_uuid_cmp(slot->discover_params.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2ab14:	4b13      	ldr	r3, [pc, #76]	; (2ab64 <split_central_service_discovery_func+0x78>)
   2ab16:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2ab1a:	aa01      	add	r2, sp, #4
   2ab1c:	f103 0810 	add.w	r8, r3, #16
   2ab20:	4696      	mov	lr, r2
   2ab22:	6818      	ldr	r0, [r3, #0]
   2ab24:	6859      	ldr	r1, [r3, #4]
   2ab26:	4615      	mov	r5, r2
   2ab28:	c503      	stmia	r5!, {r0, r1}
   2ab2a:	3308      	adds	r3, #8
   2ab2c:	4543      	cmp	r3, r8
   2ab2e:	462a      	mov	r2, r5
   2ab30:	d1f7      	bne.n	2ab22 <split_central_service_discovery_func+0x36>
   2ab32:	781b      	ldrb	r3, [r3, #0]
   2ab34:	702b      	strb	r3, [r5, #0]
   2ab36:	4671      	mov	r1, lr
   2ab38:	4660      	mov	r0, ip
   2ab3a:	f021 feaa 	bl	4c892 <bt_uuid_cmp>
   2ab3e:	4605      	mov	r5, r0
   2ab40:	b108      	cbz	r0, 2ab46 <split_central_service_discovery_func+0x5a>
        return BT_GATT_ITER_CONTINUE;
   2ab42:	2001      	movs	r0, #1
   2ab44:	e7de      	b.n	2ab04 <split_central_service_discovery_func+0x18>
    slot->discover_params.func = split_central_chrc_discovery_func;
   2ab46:	4b08      	ldr	r3, [pc, #32]	; (2ab68 <split_central_service_discovery_func+0x7c>)
   2ab48:	60e3      	str	r3, [r4, #12]
    slot->discover_params.start_handle = attr->handle + 1;
   2ab4a:	8a33      	ldrh	r3, [r6, #16]
    slot->discover_params.uuid = NULL;
   2ab4c:	60a0      	str	r0, [r4, #8]
    slot->discover_params.start_handle = attr->handle + 1;
   2ab4e:	3301      	adds	r3, #1
   2ab50:	8223      	strh	r3, [r4, #16]
    slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2ab52:	2303      	movs	r3, #3
   2ab54:	7623      	strb	r3, [r4, #24]
    int err = bt_gatt_discover(conn, &slot->discover_params);
   2ab56:	f104 0108 	add.w	r1, r4, #8
   2ab5a:	4638      	mov	r0, r7
   2ab5c:	f007 fe1a 	bl	32794 <bt_gatt_discover>
    return BT_GATT_ITER_STOP;
   2ab60:	4628      	mov	r0, r5
   2ab62:	e7cf      	b.n	2ab04 <split_central_service_discovery_func+0x18>
   2ab64:	00052a78 	.word	0x00052a78
   2ab68:	0002ac31 	.word	0x0002ac31

0002ab6c <split_central_notify_func>:
                                         uint16_t length) {
   2ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ab70:	b086      	sub	sp, #24
   2ab72:	4607      	mov	r7, r0
   2ab74:	4614      	mov	r4, r2
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2ab76:	f7ff ff81 	bl	2aa7c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2ab7a:	2800      	cmp	r0, #0
   2ab7c:	d052      	beq.n	2ac24 <split_central_notify_func+0xb8>
    if (!data) {
   2ab7e:	b924      	cbnz	r4, 2ab8a <split_central_notify_func+0x1e>
        params->value_handle = 0U;
   2ab80:	810c      	strh	r4, [r1, #8]
        return BT_GATT_ITER_STOP;
   2ab82:	4620      	mov	r0, r4
}
   2ab84:	b006      	add	sp, #24
   2ab86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ab8a:	1e63      	subs	r3, r4, #1
   2ab8c:	f100 025a 	add.w	r2, r0, #90	; 0x5a
   2ab90:	340f      	adds	r4, #15
        slot->changed_positions[i] = ((uint8_t *)data)[i] ^ slot->position_state[i];
   2ab92:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   2ab96:	f812 1b01 	ldrb.w	r1, [r2], #1
   2ab9a:	4069      	eors	r1, r5
   2ab9c:	73d1      	strb	r1, [r2, #15]
        slot->position_state[i] = ((uint8_t *)data)[i];
   2ab9e:	7819      	ldrb	r1, [r3, #0]
   2aba0:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2aba4:	42a3      	cmp	r3, r4
   2aba6:	d1f4      	bne.n	2ab92 <split_central_notify_func+0x26>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2aba8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2ac28 <split_central_notify_func+0xbc>
                k_work_submit(&peripheral_event_work);
   2abac:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2ac2c <split_central_notify_func+0xc0>
   2abb0:	f100 046a 	add.w	r4, r0, #106	; 0x6a
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2abb4:	2600      	movs	r6, #0
                bool pressed = slot->position_state[i] & BIT(j);
   2abb6:	f04f 0801 	mov.w	r8, #1
        for (int j = 0; j < 8; j++) {
   2abba:	2500      	movs	r5, #0
            if (slot->changed_positions[i] & BIT(j)) {
   2abbc:	7823      	ldrb	r3, [r4, #0]
   2abbe:	40eb      	lsrs	r3, r5
   2abc0:	07db      	lsls	r3, r3, #31
   2abc2:	d527      	bpl.n	2ac14 <split_central_notify_func+0xa8>
                bool pressed = slot->position_state[i] & BIT(j);
   2abc4:	f814 1c10 	ldrb.w	r1, [r4, #-16]
   2abc8:	fa08 f305 	lsl.w	r3, r8, r5
   2abcc:	4219      	tst	r1, r3
                                                            peripheral_slot_index_for_conn(conn),
   2abce:	4638      	mov	r0, r7
                bool pressed = slot->position_state[i] & BIT(j);
   2abd0:	bf14      	ite	ne
   2abd2:	2101      	movne	r1, #1
   2abd4:	2100      	moveq	r1, #0
                                                            peripheral_slot_index_for_conn(conn),
   2abd6:	f7ff ff47 	bl	2aa68 <peripheral_slot_index_for_conn>
   2abda:	19aa      	adds	r2, r5, r6
                struct zmk_position_state_changed ev = {.source =
   2abdc:	f88d 0000 	strb.w	r0, [sp]
   2abe0:	9201      	str	r2, [sp, #4]
   2abe2:	f88d 1008 	strb.w	r1, [sp, #8]
	return z_impl_k_uptime_ticks();
   2abe6:	f027 f871 	bl	51ccc <z_impl_k_uptime_ticks>
   2abea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2abee:	fba0 3002 	umull	r3, r0, r0, r2
   2abf2:	fb02 0101 	mla	r1, r2, r1, r0
   2abf6:	0bdb      	lsrs	r3, r3, #15
   2abf8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   2abfc:	0bc9      	lsrs	r1, r1, #15
   2abfe:	e9cd 3104 	strd	r3, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2ac02:	2200      	movs	r2, #0
   2ac04:	2300      	movs	r3, #0
   2ac06:	4669      	mov	r1, sp
   2ac08:	4648      	mov	r0, r9
   2ac0a:	f01d fcb3 	bl	48574 <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2ac0e:	4650      	mov	r0, sl
   2ac10:	f01d ffba 	bl	48b88 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2ac14:	3501      	adds	r5, #1
   2ac16:	2d08      	cmp	r5, #8
   2ac18:	d1d0      	bne.n	2abbc <split_central_notify_func+0x50>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2ac1a:	3608      	adds	r6, #8
   2ac1c:	2e80      	cmp	r6, #128	; 0x80
   2ac1e:	f104 0401 	add.w	r4, r4, #1
   2ac22:	d1ca      	bne.n	2abba <split_central_notify_func+0x4e>
        return BT_GATT_ITER_CONTINUE;
   2ac24:	2001      	movs	r0, #1
   2ac26:	e7ad      	b.n	2ab84 <split_central_notify_func+0x18>
   2ac28:	2000137c 	.word	0x2000137c
   2ac2c:	20000840 	.word	0x20000840

0002ac30 <split_central_chrc_discovery_func>:
                                                 struct bt_gatt_discover_params *params) {
   2ac30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac34:	4606      	mov	r6, r0
   2ac36:	b08a      	sub	sp, #40	; 0x28
    if (!attr) {
   2ac38:	460d      	mov	r5, r1
   2ac3a:	2900      	cmp	r1, #0
   2ac3c:	d062      	beq.n	2ad04 <split_central_chrc_discovery_func+0xd4>
    if (!attr->user_data) {
   2ac3e:	68c9      	ldr	r1, [r1, #12]
   2ac40:	2900      	cmp	r1, #0
   2ac42:	d061      	beq.n	2ad08 <split_central_chrc_discovery_func+0xd8>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2ac44:	f7ff ff1a 	bl	2aa7c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2ac48:	4604      	mov	r4, r0
   2ac4a:	2800      	cmp	r0, #0
   2ac4c:	d03a      	beq.n	2acc4 <split_central_chrc_discovery_func+0x94>
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2ac4e:	4b2f      	ldr	r3, [pc, #188]	; (2ad0c <split_central_chrc_discovery_func+0xdc>)
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2ac50:	f8d1 c000 	ldr.w	ip, [r1]
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2ac54:	466a      	mov	r2, sp
   2ac56:	f103 0810 	add.w	r8, r3, #16
   2ac5a:	4696      	mov	lr, r2
   2ac5c:	6818      	ldr	r0, [r3, #0]
   2ac5e:	6859      	ldr	r1, [r3, #4]
   2ac60:	4617      	mov	r7, r2
   2ac62:	c703      	stmia	r7!, {r0, r1}
   2ac64:	3308      	adds	r3, #8
   2ac66:	4543      	cmp	r3, r8
   2ac68:	463a      	mov	r2, r7
   2ac6a:	d1f7      	bne.n	2ac5c <split_central_chrc_discovery_func+0x2c>
   2ac6c:	781b      	ldrb	r3, [r3, #0]
   2ac6e:	703b      	strb	r3, [r7, #0]
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2ac70:	4671      	mov	r1, lr
   2ac72:	4660      	mov	r0, ip
   2ac74:	f021 fe0d 	bl	4c892 <bt_uuid_cmp>
   2ac78:	bb38      	cbnz	r0, 2acca <split_central_chrc_discovery_func+0x9a>
        slot->discover_params.start_handle = attr->handle + 2;
   2ac7a:	8a2b      	ldrh	r3, [r5, #16]
        slot->discover_params.uuid = NULL;
   2ac7c:	60a0      	str	r0, [r4, #8]
        slot->discover_params.start_handle = attr->handle + 2;
   2ac7e:	3302      	adds	r3, #2
   2ac80:	8223      	strh	r3, [r4, #16]
        slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2ac82:	2303      	movs	r3, #3
   2ac84:	7623      	strb	r3, [r4, #24]
        slot->subscribe_params.disc_params = &slot->sub_discover_params;
   2ac86:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2ac8a:	6323      	str	r3, [r4, #48]	; 0x30
        slot->subscribe_params.end_handle = slot->discover_params.end_handle;
   2ac8c:	8ae3      	ldrh	r3, [r4, #22]
   2ac8e:	85a3      	strh	r3, [r4, #44]	; 0x2c
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2ac90:	4628      	mov	r0, r5
   2ac92:	f024 f983 	bl	4ef9c <bt_gatt_attr_value_handle>
        slot->subscribe_params.notify = split_central_notify_func;
   2ac96:	4b1e      	ldr	r3, [pc, #120]	; (2ad10 <split_central_chrc_discovery_func+0xe0>)
   2ac98:	6223      	str	r3, [r4, #32]
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2ac9a:	2301      	movs	r3, #1
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2ac9c:	8520      	strh	r0, [r4, #40]	; 0x28
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2ac9e:	86a3      	strh	r3, [r4, #52]	; 0x34
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2aca0:	4630      	mov	r0, r6
   2aca2:	f7ff feeb 	bl	2aa7c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2aca6:	b120      	cbz	r0, 2acb2 <split_central_chrc_discovery_func+0x82>
    int err = bt_gatt_subscribe(conn, &slot->subscribe_params);
   2aca8:	f100 0120 	add.w	r1, r0, #32
   2acac:	4630      	mov	r0, r6
   2acae:	f007 ff81 	bl	32bb4 <bt_gatt_subscribe>
    bool subscribed = (slot->run_behavior_handle && slot->subscribe_params.value_handle);
   2acb2:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
   2acb6:	b118      	cbz	r0, 2acc0 <split_central_chrc_discovery_func+0x90>
   2acb8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   2acba:	3800      	subs	r0, #0
   2acbc:	bf18      	it	ne
   2acbe:	2001      	movne	r0, #1
    return subscribed ? BT_GATT_ITER_STOP : BT_GATT_ITER_CONTINUE;
   2acc0:	f080 0001 	eor.w	r0, r0, #1
}
   2acc4:	b00a      	add	sp, #40	; 0x28
   2acc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2acca:	68eb      	ldr	r3, [r5, #12]
   2accc:	681f      	ldr	r7, [r3, #0]
                            BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_RUN_BEHAVIOR_UUID))) {
   2acce:	4b11      	ldr	r3, [pc, #68]	; (2ad14 <split_central_chrc_discovery_func+0xe4>)
   2acd0:	aa05      	add	r2, sp, #20
   2acd2:	f103 0e10 	add.w	lr, r3, #16
   2acd6:	4694      	mov	ip, r2
   2acd8:	6818      	ldr	r0, [r3, #0]
   2acda:	6859      	ldr	r1, [r3, #4]
   2acdc:	4616      	mov	r6, r2
   2acde:	c603      	stmia	r6!, {r0, r1}
   2ace0:	3308      	adds	r3, #8
   2ace2:	4573      	cmp	r3, lr
   2ace4:	4632      	mov	r2, r6
   2ace6:	d1f7      	bne.n	2acd8 <split_central_chrc_discovery_func+0xa8>
   2ace8:	781b      	ldrb	r3, [r3, #0]
   2acea:	7033      	strb	r3, [r6, #0]
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2acec:	4661      	mov	r1, ip
   2acee:	4638      	mov	r0, r7
   2acf0:	f021 fdcf 	bl	4c892 <bt_uuid_cmp>
   2acf4:	2800      	cmp	r0, #0
   2acf6:	d1dc      	bne.n	2acb2 <split_central_chrc_discovery_func+0x82>
        slot->run_behavior_handle = bt_gatt_attr_value_handle(attr);
   2acf8:	4628      	mov	r0, r5
   2acfa:	f024 f94f 	bl	4ef9c <bt_gatt_attr_value_handle>
   2acfe:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
   2ad02:	e7d6      	b.n	2acb2 <split_central_chrc_discovery_func+0x82>
        return BT_GATT_ITER_STOP;
   2ad04:	4608      	mov	r0, r1
   2ad06:	e7dd      	b.n	2acc4 <split_central_chrc_discovery_func+0x94>
   2ad08:	4608      	mov	r0, r1
   2ad0a:	e7db      	b.n	2acc4 <split_central_chrc_discovery_func+0x94>
   2ad0c:	00052a89 	.word	0x00052a89
   2ad10:	0002ab6d 	.word	0x0002ab6d
   2ad14:	00052a9a 	.word	0x00052a9a

0002ad18 <release_peripheral_slot>:
int release_peripheral_slot(int index) {
   2ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2ad1c:	4604      	mov	r4, r0
int release_peripheral_slot(int index) {
   2ad1e:	b087      	sub	sp, #28
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2ad20:	2800      	cmp	r0, #0
   2ad22:	d14b      	bne.n	2adbc <release_peripheral_slot+0xa4>
    if (slot->state == PERIPHERAL_SLOT_STATE_OPEN) {
   2ad24:	4d27      	ldr	r5, [pc, #156]	; (2adc4 <release_peripheral_slot+0xac>)
   2ad26:	782b      	ldrb	r3, [r5, #0]
   2ad28:	2b00      	cmp	r3, #0
   2ad2a:	d047      	beq.n	2adbc <release_peripheral_slot+0xa4>
    if (slot->conn != NULL) {
   2ad2c:	6868      	ldr	r0, [r5, #4]
   2ad2e:	b110      	cbz	r0, 2ad36 <release_peripheral_slot+0x1e>
        bt_conn_unref(slot->conn);
   2ad30:	f022 fd00 	bl	4d734 <bt_conn_unref>
        slot->conn = NULL;
   2ad34:	606c      	str	r4, [r5, #4]
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2ad36:	4f24      	ldr	r7, [pc, #144]	; (2adc8 <release_peripheral_slot+0xb0>)
   2ad38:	f8df a090 	ldr.w	sl, [pc, #144]	; 2adcc <release_peripheral_slot+0xb4>
                k_work_submit(&peripheral_event_work);
   2ad3c:	f8df b090 	ldr.w	fp, [pc, #144]	; 2add0 <release_peripheral_slot+0xb8>
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2ad40:	2400      	movs	r4, #0
   2ad42:	702c      	strb	r4, [r5, #0]
   2ad44:	46b8      	mov	r8, r7
                struct zmk_position_state_changed ev = {.source = index,
   2ad46:	46a1      	mov	r9, r4
        for (int j = 0; j < 8; j++) {
   2ad48:	2600      	movs	r6, #0
            if (slot->position_state[i] & BIT(j)) {
   2ad4a:	f898 3000 	ldrb.w	r3, [r8]
   2ad4e:	40f3      	lsrs	r3, r6
   2ad50:	07db      	lsls	r3, r3, #31
   2ad52:	d51c      	bpl.n	2ad8e <release_peripheral_slot+0x76>
                struct zmk_position_state_changed ev = {.source = index,
   2ad54:	1933      	adds	r3, r6, r4
   2ad56:	f88d 9000 	strb.w	r9, [sp]
   2ad5a:	9301      	str	r3, [sp, #4]
   2ad5c:	f88d 9008 	strb.w	r9, [sp, #8]
	return z_impl_k_uptime_ticks();
   2ad60:	f026 ffb4 	bl	51ccc <z_impl_k_uptime_ticks>
   2ad64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ad68:	fba0 0302 	umull	r0, r3, r0, r2
   2ad6c:	fb02 3101 	mla	r1, r2, r1, r3
   2ad70:	0bc0      	lsrs	r0, r0, #15
   2ad72:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2ad76:	0bc9      	lsrs	r1, r1, #15
   2ad78:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2ad7c:	2200      	movs	r2, #0
   2ad7e:	2300      	movs	r3, #0
   2ad80:	4669      	mov	r1, sp
   2ad82:	4650      	mov	r0, sl
   2ad84:	f01d fbf6 	bl	48574 <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2ad88:	4658      	mov	r0, fp
   2ad8a:	f01d fefd 	bl	48b88 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2ad8e:	3601      	adds	r6, #1
   2ad90:	2e08      	cmp	r6, #8
   2ad92:	d1da      	bne.n	2ad4a <release_peripheral_slot+0x32>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2ad94:	3408      	adds	r4, #8
   2ad96:	2c80      	cmp	r4, #128	; 0x80
   2ad98:	f108 0801 	add.w	r8, r8, #1
   2ad9c:	d1d4      	bne.n	2ad48 <release_peripheral_slot+0x30>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2ad9e:	2200      	movs	r2, #0
        slot->position_state[i] = 0U;
   2ada0:	4613      	mov	r3, r2
   2ada2:	f807 3b01 	strb.w	r3, [r7], #1
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2ada6:	3201      	adds	r2, #1
   2ada8:	2a10      	cmp	r2, #16
        slot->changed_positions[i] = 0U;
   2adaa:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2adac:	d1f9      	bne.n	2ada2 <release_peripheral_slot+0x8a>
    slot->subscribe_params.value_handle = 0;
   2adae:	852b      	strh	r3, [r5, #40]	; 0x28
    slot->run_behavior_handle = 0;
   2adb0:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
   2adb4:	2000      	movs	r0, #0
}
   2adb6:	b007      	add	sp, #28
   2adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -EINVAL;
   2adbc:	f06f 0015 	mvn.w	r0, #21
   2adc0:	e7f9      	b.n	2adb6 <release_peripheral_slot+0x9e>
   2adc2:	bf00      	nop
   2adc4:	20004658 	.word	0x20004658
   2adc8:	200046b2 	.word	0x200046b2
   2adcc:	2000137c 	.word	0x2000137c
   2add0:	20000840 	.word	0x20000840

0002add4 <reserve_peripheral_slot>:
int reserve_peripheral_slot() {
   2add4:	b538      	push	{r3, r4, r5, lr}
        if (peripherals[i].state == PERIPHERAL_SLOT_STATE_OPEN) {
   2add6:	4d06      	ldr	r5, [pc, #24]	; (2adf0 <reserve_peripheral_slot+0x1c>)
   2add8:	782c      	ldrb	r4, [r5, #0]
   2adda:	b934      	cbnz	r4, 2adea <reserve_peripheral_slot+0x16>
            release_peripheral_slot(i);
   2addc:	4620      	mov	r0, r4
   2adde:	f7ff ff9b 	bl	2ad18 <release_peripheral_slot>
            peripherals[i].state = PERIPHERAL_SLOT_STATE_CONNECTING;
   2ade2:	2301      	movs	r3, #1
   2ade4:	702b      	strb	r3, [r5, #0]
   2ade6:	4620      	mov	r0, r4
}
   2ade8:	bd38      	pop	{r3, r4, r5, pc}
    return -ENOMEM;
   2adea:	f06f 000b 	mvn.w	r0, #11
   2adee:	e7fb      	b.n	2ade8 <reserve_peripheral_slot+0x14>
   2adf0:	20004658 	.word	0x20004658

0002adf4 <split_central_eir_found>:
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (data->type) {
   2adf8:	7803      	ldrb	r3, [r0, #0]
   2adfa:	3b06      	subs	r3, #6
   2adfc:	2b01      	cmp	r3, #1
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2adfe:	b0a4      	sub	sp, #144	; 0x90
   2ae00:	4605      	mov	r5, r0
   2ae02:	460e      	mov	r6, r1
    switch (data->type) {
   2ae04:	d903      	bls.n	2ae0e <split_central_eir_found+0x1a>
    return true;
   2ae06:	2001      	movs	r0, #1
}
   2ae08:	b024      	add	sp, #144	; 0x90
   2ae0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data->data_len % 16 != 0U) {
   2ae0e:	7844      	ldrb	r4, [r0, #1]
   2ae10:	f014 040f 	ands.w	r4, r4, #15
   2ae14:	d1f7      	bne.n	2ae06 <split_central_eir_found+0x12>
        for (i = 0; i < data->data_len; i += 16) {
   2ae16:	786b      	ldrb	r3, [r5, #1]
   2ae18:	429c      	cmp	r4, r3
   2ae1a:	daf4      	bge.n	2ae06 <split_central_eir_found+0x12>
            if (!bt_uuid_create(&uuid.uuid, &data->data[i], 16)) {
   2ae1c:	6869      	ldr	r1, [r5, #4]
   2ae1e:	2210      	movs	r2, #16
   2ae20:	4421      	add	r1, r4
   2ae22:	a801      	add	r0, sp, #4
   2ae24:	f021 fd63 	bl	4c8ee <bt_uuid_create>
   2ae28:	b370      	cbz	r0, 2ae88 <split_central_eir_found+0x94>
            if (bt_uuid_cmp(&uuid.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2ae2a:	4b35      	ldr	r3, [pc, #212]	; (2af00 <split_central_eir_found+0x10c>)
   2ae2c:	aa06      	add	r2, sp, #24
   2ae2e:	f103 0710 	add.w	r7, r3, #16
   2ae32:	4696      	mov	lr, r2
   2ae34:	6818      	ldr	r0, [r3, #0]
   2ae36:	6859      	ldr	r1, [r3, #4]
   2ae38:	4694      	mov	ip, r2
   2ae3a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2ae3e:	3308      	adds	r3, #8
   2ae40:	42bb      	cmp	r3, r7
   2ae42:	4662      	mov	r2, ip
   2ae44:	d1f6      	bne.n	2ae34 <split_central_eir_found+0x40>
   2ae46:	781b      	ldrb	r3, [r3, #0]
   2ae48:	f88c 3000 	strb.w	r3, [ip]
   2ae4c:	4671      	mov	r1, lr
   2ae4e:	a801      	add	r0, sp, #4
   2ae50:	f021 fd1f 	bl	4c892 <bt_uuid_cmp>
   2ae54:	b1d0      	cbz	r0, 2ae8c <split_central_eir_found+0x98>
                bt_uuid_to_str(&uuid.uuid, uuid_str, sizeof(uuid_str));
   2ae56:	2225      	movs	r2, #37	; 0x25
   2ae58:	a910      	add	r1, sp, #64	; 0x40
   2ae5a:	a801      	add	r0, sp, #4
   2ae5c:	f003 f806 	bl	2de6c <bt_uuid_to_str>
                bt_uuid_to_str(BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID), service_uuid_str,
   2ae60:	aa0b      	add	r2, sp, #44	; 0x2c
   2ae62:	4b27      	ldr	r3, [pc, #156]	; (2af00 <split_central_eir_found+0x10c>)
   2ae64:	4696      	mov	lr, r2
   2ae66:	6818      	ldr	r0, [r3, #0]
   2ae68:	6859      	ldr	r1, [r3, #4]
   2ae6a:	4694      	mov	ip, r2
   2ae6c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2ae70:	3308      	adds	r3, #8
   2ae72:	42bb      	cmp	r3, r7
   2ae74:	4662      	mov	r2, ip
   2ae76:	d1f6      	bne.n	2ae66 <split_central_eir_found+0x72>
   2ae78:	781b      	ldrb	r3, [r3, #0]
   2ae7a:	f88c 3000 	strb.w	r3, [ip]
   2ae7e:	2225      	movs	r2, #37	; 0x25
   2ae80:	a91a      	add	r1, sp, #104	; 0x68
   2ae82:	4670      	mov	r0, lr
   2ae84:	f002 fff2 	bl	2de6c <bt_uuid_to_str>
        for (i = 0; i < data->data_len; i += 16) {
   2ae88:	3410      	adds	r4, #16
   2ae8a:	e7c4      	b.n	2ae16 <split_central_eir_found+0x22>
            zmk_ble_set_peripheral_addr(addr);
   2ae8c:	4630      	mov	r0, r6
   2ae8e:	f7ff fbd1 	bl	2a634 <zmk_ble_set_peripheral_addr>
            err = bt_le_scan_stop();
   2ae92:	f004 fef7 	bl	2fc84 <bt_le_scan_stop>
            if (err) {
   2ae96:	4607      	mov	r7, r0
   2ae98:	2800      	cmp	r0, #0
   2ae9a:	d1f5      	bne.n	2ae88 <split_central_eir_found+0x94>
            uint8_t slot_idx = reserve_peripheral_slot();
   2ae9c:	f7ff ff9a 	bl	2add4 <reserve_peripheral_slot>
            slot->conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   2aea0:	4631      	mov	r1, r6
   2aea2:	b2c5      	uxtb	r5, r0
   2aea4:	4638      	mov	r0, r7
   2aea6:	f005 fb83 	bl	305b0 <bt_conn_lookup_addr_le>
   2aeaa:	f8df c058 	ldr.w	ip, [pc, #88]	; 2af04 <split_central_eir_found+0x110>
   2aeae:	4c16      	ldr	r4, [pc, #88]	; (2af08 <split_central_eir_found+0x114>)
   2aeb0:	237c      	movs	r3, #124	; 0x7c
   2aeb2:	435d      	muls	r5, r3
   2aeb4:	eb0c 0805 	add.w	r8, ip, r5
   2aeb8:	af1a      	add	r7, sp, #104	; 0x68
   2aeba:	f8c8 0004 	str.w	r0, [r8, #4]
            if (slot->conn) {
   2aebe:	b150      	cbz	r0, 2aed6 <split_central_eir_found+0xe2>
                split_central_process_connection(slot->conn);
   2aec0:	f7ff fdea 	bl	2aa98 <split_central_process_connection>
                err = bt_conn_le_phy_update(slot->conn, BT_CONN_LE_PHY_PARAM_2M);
   2aec4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   2aec6:	901a      	str	r0, [sp, #104]	; 0x68
   2aec8:	4639      	mov	r1, r7
   2aeca:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2aece:	f022 fd04 	bl	4d8da <bt_conn_le_phy_update>
            return false;
   2aed2:	2000      	movs	r0, #0
   2aed4:	e798      	b.n	2ae08 <split_central_eir_found+0x14>
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2aed6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2aed8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   2aeda:	ab10      	add	r3, sp, #64	; 0x40
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2aedc:	3454      	adds	r4, #84	; 0x54
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2aede:	c303      	stmia	r3!, {r0, r1}
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2aee0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2aee4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   2aee8:	1d2b      	adds	r3, r5, #4
   2aeea:	4463      	add	r3, ip
   2aeec:	aa10      	add	r2, sp, #64	; 0x40
   2aeee:	4639      	mov	r1, r7
   2aef0:	4630      	mov	r0, r6
   2aef2:	f005 fbdd 	bl	306b0 <bt_conn_le_create>
                if (err) {
   2aef6:	2800      	cmp	r0, #0
   2aef8:	d0eb      	beq.n	2aed2 <split_central_eir_found+0xde>
                    start_scan();
   2aefa:	f7ff fcc9 	bl	2a890 <start_scan>
   2aefe:	e7e8      	b.n	2aed2 <split_central_eir_found+0xde>
   2af00:	00052a78 	.word	0x00052a78
   2af04:	20004658 	.word	0x20004658
   2af08:	00052a64 	.word	0x00052a64

0002af0c <confirm_peripheral_slot_conn>:
int confirm_peripheral_slot_conn(struct bt_conn *conn) {
   2af0c:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2af0e:	f7ff fdab 	bl	2aa68 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2af12:	2800      	cmp	r0, #0
   2af14:	db05      	blt.n	2af22 <confirm_peripheral_slot_conn+0x16>
    peripherals[idx].state = PERIPHERAL_SLOT_STATE_CONNECTED;
   2af16:	237c      	movs	r3, #124	; 0x7c
   2af18:	4358      	muls	r0, r3
   2af1a:	4b02      	ldr	r3, [pc, #8]	; (2af24 <confirm_peripheral_slot_conn+0x18>)
   2af1c:	2202      	movs	r2, #2
   2af1e:	541a      	strb	r2, [r3, r0]
    return 0;
   2af20:	2000      	movs	r0, #0
}
   2af22:	bd08      	pop	{r3, pc}
   2af24:	20004658 	.word	0x20004658

0002af28 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   2af28:	4b02      	ldr	r3, [pc, #8]	; (2af34 <usb_status_cb+0xc>)
   2af2a:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   2af2c:	4802      	ldr	r0, [pc, #8]	; (2af38 <usb_status_cb+0x10>)
   2af2e:	f01d be2b 	b.w	48b88 <k_work_submit>
   2af32:	bf00      	nop
   2af34:	2000119f 	.word	0x2000119f
   2af38:	20000860 	.word	0x20000860

0002af3c <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   2af3c:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   2af3e:	4804      	ldr	r0, [pc, #16]	; (2af50 <zmk_usb_init+0x14>)
   2af40:	f001 fa20 	bl	2c384 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   2af44:	2800      	cmp	r0, #0
    }

    return 0;
}
   2af46:	bf18      	it	ne
   2af48:	f06f 0015 	mvnne.w	r0, #21
   2af4c:	bd08      	pop	{r3, pc}
   2af4e:	bf00      	nop
   2af50:	0002af29 	.word	0x0002af29

0002af54 <zmk_usb_get_status>:
enum usb_dc_status_code zmk_usb_get_status() { return usb_status; }
   2af54:	4b01      	ldr	r3, [pc, #4]	; (2af5c <zmk_usb_get_status+0x8>)
   2af56:	7818      	ldrb	r0, [r3, #0]
   2af58:	4770      	bx	lr
   2af5a:	bf00      	nop
   2af5c:	2000119f 	.word	0x2000119f

0002af60 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   2af60:	4b08      	ldr	r3, [pc, #32]	; (2af84 <zmk_usb_get_conn_state+0x24>)
   2af62:	781b      	ldrb	r3, [r3, #0]
   2af64:	3b03      	subs	r3, #3
   2af66:	2b08      	cmp	r3, #8
   2af68:	d808      	bhi.n	2af7c <zmk_usb_get_conn_state+0x1c>
   2af6a:	e8df f003 	tbb	[pc, r3]
   2af6e:	0509      	.short	0x0509
   2af70:	07070709 	.word	0x07070709
   2af74:	0707      	.short	0x0707
   2af76:	05          	.byte	0x05
   2af77:	00          	.byte	0x00
   2af78:	2000      	movs	r0, #0
   2af7a:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   2af7c:	2001      	movs	r0, #1
   2af7e:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
   2af80:	2002      	movs	r0, #2
}
   2af82:	4770      	bx	lr
   2af84:	2000119f 	.word	0x2000119f

0002af88 <zmk_usb_hid_init>:

        return err;
    }
}

static int zmk_usb_hid_init(const struct device *_arg) {
   2af88:	b510      	push	{r4, lr}
   2af8a:	4809      	ldr	r0, [pc, #36]	; (2afb0 <zmk_usb_hid_init+0x28>)
    hid_dev = device_get_binding("HID_0");
   2af8c:	4c09      	ldr	r4, [pc, #36]	; (2afb4 <zmk_usb_hid_init+0x2c>)
   2af8e:	f01d f8c7 	bl	48120 <z_impl_device_get_binding>
   2af92:	6020      	str	r0, [r4, #0]
    if (hid_dev == NULL) {
   2af94:	b148      	cbz	r0, 2afaa <zmk_usb_hid_init+0x22>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
   2af96:	4b08      	ldr	r3, [pc, #32]	; (2afb8 <zmk_usb_hid_init+0x30>)
   2af98:	4908      	ldr	r1, [pc, #32]	; (2afbc <zmk_usb_hid_init+0x34>)
   2af9a:	224c      	movs	r2, #76	; 0x4c
   2af9c:	f019 f9a4 	bl	442e8 <usb_hid_register_device>
    usb_hid_init(hid_dev);
   2afa0:	6820      	ldr	r0, [r4, #0]
   2afa2:	f025 fc0a 	bl	507ba <usb_hid_init>

    return 0;
   2afa6:	2000      	movs	r0, #0
}
   2afa8:	bd10      	pop	{r4, pc}
        return -EINVAL;
   2afaa:	f06f 0015 	mvn.w	r0, #21
   2afae:	e7fb      	b.n	2afa8 <zmk_usb_hid_init+0x20>
   2afb0:	0005667f 	.word	0x0005667f
   2afb4:	200046d4 	.word	0x200046d4
   2afb8:	00054a3c 	.word	0x00054a3c
   2afbc:	00056685 	.word	0x00056685

0002afc0 <in_ready_cb>:
	z_impl_k_sem_give(sem);
   2afc0:	4801      	ldr	r0, [pc, #4]	; (2afc8 <in_ready_cb+0x8>)
   2afc2:	f01d bc75 	b.w	488b0 <z_impl_k_sem_give>
   2afc6:	bf00      	nop
   2afc8:	200014b4 	.word	0x200014b4

0002afcc <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
   2afcc:	b538      	push	{r3, r4, r5, lr}
   2afce:	4604      	mov	r4, r0
   2afd0:	460d      	mov	r5, r1
    switch (zmk_usb_get_status()) {
   2afd2:	f7ff ffbf 	bl	2af54 <zmk_usb_get_status>
   2afd6:	280b      	cmp	r0, #11
   2afd8:	d80b      	bhi.n	2aff2 <zmk_usb_hid_send_report+0x26>
   2afda:	e8df f000 	tbb	[pc, r0]
   2afde:	1e1e      	.short	0x1e1e
   2afe0:	061e0a0a 	.word	0x061e0a0a
   2afe4:	0a0a0a0a 	.word	0x0a0a0a0a
   2afe8:	1e0a      	.short	0x1e0a
}
   2afea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usb_wakeup_request();
   2afee:	f001 b993 	b.w	2c318 <usb_wakeup_request>
	return z_impl_k_sem_take(sem, timeout);
   2aff2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
   2aff6:	2300      	movs	r3, #0
   2aff8:	4809      	ldr	r0, [pc, #36]	; (2b020 <zmk_usb_hid_send_report+0x54>)
   2affa:	f01d fc7f 	bl	488fc <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
   2affe:	4809      	ldr	r0, [pc, #36]	; (2b024 <zmk_usb_hid_send_report+0x58>)
   2b000:	4621      	mov	r1, r4
   2b002:	6800      	ldr	r0, [r0, #0]
   2b004:	2300      	movs	r3, #0
   2b006:	462a      	mov	r2, r5
   2b008:	f025 fbe1 	bl	507ce <hid_int_ep_write>
        if (err) {
   2b00c:	4604      	mov	r4, r0
   2b00e:	b110      	cbz	r0, 2b016 <zmk_usb_hid_send_report+0x4a>
	z_impl_k_sem_give(sem);
   2b010:	4803      	ldr	r0, [pc, #12]	; (2b020 <zmk_usb_hid_send_report+0x54>)
   2b012:	f01d fc4d 	bl	488b0 <z_impl_k_sem_give>
}
   2b016:	4620      	mov	r0, r4
   2b018:	bd38      	pop	{r3, r4, r5, pc}
    switch (zmk_usb_get_status()) {
   2b01a:	f06f 0412 	mvn.w	r4, #18
   2b01e:	e7fa      	b.n	2b016 <zmk_usb_hid_send_report+0x4a>
   2b020:	200014b4 	.word	0x200014b4
   2b024:	200046d4 	.word	0x200046d4

0002b028 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   2b028:	4801      	ldr	r0, [pc, #4]	; (2b030 <main+0x8>)
   2b02a:	f7fd bf8d 	b.w	28f48 <zmk_kscan_init>
   2b02e:	bf00      	nop
   2b030:	000566d1 	.word	0x000566d1

0002b034 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   2b034:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2b036:	4c0a      	ldr	r4, [pc, #40]	; (2b060 <crc8_ccitt+0x2c>)
   2b038:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2b03a:	4291      	cmp	r1, r2
   2b03c:	d100      	bne.n	2b040 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   2b03e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   2b040:	f811 3b01 	ldrb.w	r3, [r1], #1
   2b044:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2b046:	0903      	lsrs	r3, r0, #4
   2b048:	5ce3      	ldrb	r3, [r4, r3]
   2b04a:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   2b04e:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2b050:	f3c3 1303 	ubfx	r3, r3, #4, #4
   2b054:	5ce0      	ldrb	r0, [r4, r3]
   2b056:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   2b05a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   2b05c:	e7ed      	b.n	2b03a <crc8_ccitt+0x6>
   2b05e:	bf00      	nop
   2b060:	000566d7 	.word	0x000566d7

0002b064 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2b064:	680b      	ldr	r3, [r1, #0]
   2b066:	3301      	adds	r3, #1
   2b068:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2b06a:	4b01      	ldr	r3, [pc, #4]	; (2b070 <char_out+0xc>)
   2b06c:	681b      	ldr	r3, [r3, #0]
   2b06e:	4718      	bx	r3
   2b070:	20000870 	.word	0x20000870

0002b074 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   2b074:	b507      	push	{r0, r1, r2, lr}
   2b076:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   2b078:	2100      	movs	r1, #0
{
   2b07a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   2b07c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   2b07e:	4803      	ldr	r0, [pc, #12]	; (2b08c <vprintk+0x18>)
   2b080:	a901      	add	r1, sp, #4
   2b082:	f000 f8f9 	bl	2b278 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   2b086:	b003      	add	sp, #12
   2b088:	f85d fb04 	ldr.w	pc, [sp], #4
   2b08c:	0002b065 	.word	0x0002b065

0002b090 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2b090:	b530      	push	{r4, r5, lr}
   2b092:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2b094:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2b098:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   2b09a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   2b09c:	a901      	add	r1, sp, #4
   2b09e:	4805      	ldr	r0, [pc, #20]	; (2b0b4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2b0a0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2b0a2:	f000 f8e9 	bl	2b278 <cbvprintf>

	if (ctx.count < ctx.max) {
   2b0a6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2b0aa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2b0ac:	bfb8      	it	lt
   2b0ae:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2b0b0:	b005      	add	sp, #20
   2b0b2:	bd30      	pop	{r4, r5, pc}
   2b0b4:	0004a481 	.word	0x0004a481

0002b0b8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2b0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2b0bc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2b0c0:	f019 0808 	ands.w	r8, r9, #8
{
   2b0c4:	4604      	mov	r4, r0
   2b0c6:	4693      	mov	fp, r2
	if (processing) {
   2b0c8:	d00d      	beq.n	2b0e6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   2b0ca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2b0cc:	bf0c      	ite	eq
   2b0ce:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2b0d2:	f049 0920 	orrne.w	r9, r9, #32
   2b0d6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2b0da:	f38b 8811 	msr	BASEPRI, fp
   2b0de:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2b0e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2b0e6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   2b0ea:	2902      	cmp	r1, #2
   2b0ec:	d107      	bne.n	2b0fe <process_event+0x46>
			evt = process_recheck(mgr);
   2b0ee:	4620      	mov	r0, r4
   2b0f0:	f01f fa0d 	bl	4a50e <process_recheck>
		if (evt == EVT_NOP) {
   2b0f4:	2800      	cmp	r0, #0
   2b0f6:	d0f0      	beq.n	2b0da <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   2b0f8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b0fa:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   2b0fc:	d14e      	bne.n	2b19c <process_event+0xe4>
			res = mgr->last_res;
   2b0fe:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2b100:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2b102:	2f00      	cmp	r7, #0
   2b104:	da15      	bge.n	2b132 <process_event+0x7a>
		*clients = mgr->clients;
   2b106:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b108:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   2b10c:	e9c4 8800 	strd	r8, r8, [r4]
   2b110:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2b114:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   2b116:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2b118:	8b21      	ldrh	r1, [r4, #24]
   2b11a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2b11e:	45ca      	cmp	sl, r9
   2b120:	d002      	beq.n	2b128 <process_event+0x70>
		if (do_monitors
   2b122:	68a3      	ldr	r3, [r4, #8]
   2b124:	2b00      	cmp	r3, #0
   2b126:	d15a      	bne.n	2b1de <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   2b128:	b90d      	cbnz	r5, 2b12e <process_event+0x76>
		    || (transit != NULL)) {
   2b12a:	2e00      	cmp	r6, #0
   2b12c:	d071      	beq.n	2b212 <process_event+0x15a>
   2b12e:	2300      	movs	r3, #0
   2b130:	e056      	b.n	2b1e0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2b132:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2b136:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2b138:	2a01      	cmp	r2, #1
   2b13a:	d81e      	bhi.n	2b17a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b13c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2b140:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   2b142:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b144:	b289      	uxth	r1, r1
   2b146:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2b14a:	d10a      	bne.n	2b162 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2b14c:	b13d      	cbz	r5, 2b15e <process_event+0xa6>
   2b14e:	8b63      	ldrh	r3, [r4, #26]
   2b150:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   2b152:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   2b154:	3301      	adds	r3, #1
   2b156:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2b158:	2a00      	cmp	r2, #0
   2b15a:	d1fa      	bne.n	2b152 <process_event+0x9a>
   2b15c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b15e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2b162:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2b164:	4620      	mov	r0, r4
   2b166:	f01f f9d2 	bl	4a50e <process_recheck>
   2b16a:	4606      	mov	r6, r0
   2b16c:	2800      	cmp	r0, #0
   2b16e:	d0d3      	beq.n	2b118 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2b170:	8b23      	ldrh	r3, [r4, #24]
   2b172:	f043 0320 	orr.w	r3, r3, #32
   2b176:	8323      	strh	r3, [r4, #24]
   2b178:	e7cd      	b.n	2b116 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2b17a:	2b04      	cmp	r3, #4
   2b17c:	d10c      	bne.n	2b198 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b17e:	f021 0107 	bic.w	r1, r1, #7
   2b182:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2b184:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2b186:	4620      	mov	r0, r4
   2b188:	f01f f9c1 	bl	4a50e <process_recheck>
   2b18c:	4605      	mov	r5, r0
   2b18e:	2800      	cmp	r0, #0
   2b190:	d0c1      	beq.n	2b116 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2b192:	f041 0120 	orr.w	r1, r1, #32
   2b196:	8321      	strh	r1, [r4, #24]
   2b198:	2500      	movs	r5, #0
   2b19a:	e7bc      	b.n	2b116 <process_event+0x5e>
		} else if (evt == EVT_START) {
   2b19c:	2803      	cmp	r0, #3
   2b19e:	d109      	bne.n	2b1b4 <process_event+0xfc>
			transit = mgr->transitions->start;
   2b1a0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b1a2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   2b1a6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b1a8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   2b1ac:	8323      	strh	r3, [r4, #24]
}
   2b1ae:	2500      	movs	r5, #0
		res = 0;
   2b1b0:	462f      	mov	r7, r5
   2b1b2:	e7b1      	b.n	2b118 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   2b1b4:	2804      	cmp	r0, #4
   2b1b6:	d106      	bne.n	2b1c6 <process_event+0x10e>
			transit = mgr->transitions->stop;
   2b1b8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b1ba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   2b1be:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b1c0:	f043 0304 	orr.w	r3, r3, #4
   2b1c4:	e7f2      	b.n	2b1ac <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   2b1c6:	2805      	cmp	r0, #5
   2b1c8:	d106      	bne.n	2b1d8 <process_event+0x120>
			transit = mgr->transitions->reset;
   2b1ca:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b1cc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   2b1d0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2b1d2:	f043 0305 	orr.w	r3, r3, #5
   2b1d6:	e7e9      	b.n	2b1ac <process_event+0xf4>
   2b1d8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   2b1da:	462e      	mov	r6, r5
   2b1dc:	e7e8      	b.n	2b1b0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   2b1de:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2b1e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2b1e4:	8321      	strh	r1, [r4, #24]
   2b1e6:	f38b 8811 	msr	BASEPRI, fp
   2b1ea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2b1ee:	b9fb      	cbnz	r3, 2b230 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   2b1f0:	bb85      	cbnz	r5, 2b254 <process_event+0x19c>
			if (transit != NULL) {
   2b1f2:	b116      	cbz	r6, 2b1fa <process_event+0x142>
				transit(mgr, transition_complete);
   2b1f4:	491f      	ldr	r1, [pc, #124]	; (2b274 <process_event+0x1bc>)
   2b1f6:	4620      	mov	r0, r4
   2b1f8:	47b0      	blx	r6
	__asm__ volatile(
   2b1fa:	f04f 0320 	mov.w	r3, #32
   2b1fe:	f3ef 8b11 	mrs	fp, BASEPRI
   2b202:	f383 8812 	msr	BASEPRI_MAX, r3
   2b206:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2b20a:	8b23      	ldrh	r3, [r4, #24]
   2b20c:	f023 0308 	bic.w	r3, r3, #8
   2b210:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2b212:	8b23      	ldrh	r3, [r4, #24]
   2b214:	06da      	lsls	r2, r3, #27
   2b216:	d525      	bpl.n	2b264 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2b218:	f023 0310 	bic.w	r3, r3, #16
   2b21c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   2b21e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   2b220:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   2b224:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   2b228:	2900      	cmp	r1, #0
   2b22a:	f47f af5e 	bne.w	2b0ea <process_event+0x32>
out:
   2b22e:	e754      	b.n	2b0da <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2b230:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2b232:	2900      	cmp	r1, #0
   2b234:	d0dc      	beq.n	2b1f0 <process_event+0x138>
	return node->next;
   2b236:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   2b23a:	f8d1 b004 	ldr.w	fp, [r1, #4]
   2b23e:	463b      	mov	r3, r7
   2b240:	4652      	mov	r2, sl
   2b242:	4620      	mov	r0, r4
   2b244:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2b246:	f1b9 0f00 	cmp.w	r9, #0
   2b24a:	d0d1      	beq.n	2b1f0 <process_event+0x138>
   2b24c:	4649      	mov	r1, r9
   2b24e:	f8d9 9000 	ldr.w	r9, [r9]
   2b252:	e7f2      	b.n	2b23a <process_event+0x182>
   2b254:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   2b256:	463b      	mov	r3, r7
   2b258:	4652      	mov	r2, sl
   2b25a:	4620      	mov	r0, r4
   2b25c:	682d      	ldr	r5, [r5, #0]
   2b25e:	f01f f972 	bl	4a546 <notify_one>
   2b262:	e7c5      	b.n	2b1f0 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2b264:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2b268:	bf1e      	ittt	ne
   2b26a:	f023 0320 	bicne.w	r3, r3, #32
   2b26e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   2b270:	2102      	movne	r1, #2
   2b272:	e7d5      	b.n	2b220 <process_event+0x168>
   2b274:	0004a573 	.word	0x0004a573

0002b278 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   2b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b27c:	b08f      	sub	sp, #60	; 0x3c
   2b27e:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   2b280:	1e53      	subs	r3, r2, #1
{
   2b282:	9001      	str	r0, [sp, #4]
   2b284:	468a      	mov	sl, r1
	fmt--;
   2b286:	9302      	str	r3, [sp, #8]
	size_t count = 0;
   2b288:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   2b28c:	9b02      	ldr	r3, [sp, #8]
   2b28e:	7858      	ldrb	r0, [r3, #1]
   2b290:	2825      	cmp	r0, #37	; 0x25
   2b292:	f103 0401 	add.w	r4, r3, #1
   2b296:	d121      	bne.n	2b2dc <cbvprintf+0x64>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
   2b298:	f04f 0c00 	mov.w	ip, #0

	for (fmt++ ; ; fmt++) {
   2b29c:	4618      	mov	r0, r3
	precision = -1;
   2b29e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   2b2a2:	3002      	adds	r0, #2
	length_mod = 0;
   2b2a4:	4661      	mov	r1, ip
	padding_mode = 0;
   2b2a6:	f8cd c00c 	str.w	ip, [sp, #12]
	min_width = -1;
   2b2aa:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
   2b2ac:	260a      	movs	r6, #10
		switch (*fmt) {
   2b2ae:	7802      	ldrb	r2, [r0, #0]
   2b2b0:	9002      	str	r0, [sp, #8]
   2b2b2:	2a39      	cmp	r2, #57	; 0x39
   2b2b4:	f100 0001 	add.w	r0, r0, #1
   2b2b8:	d858      	bhi.n	2b36c <cbvprintf+0xf4>
   2b2ba:	2a1f      	cmp	r2, #31
   2b2bc:	d818      	bhi.n	2b2f0 <cbvprintf+0x78>
   2b2be:	2a00      	cmp	r2, #0
   2b2c0:	f000 81f6 	beq.w	2b6b0 <cbvprintf+0x438>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   2b2c4:	9b01      	ldr	r3, [sp, #4]
   2b2c6:	4651      	mov	r1, sl
   2b2c8:	2025      	movs	r0, #37	; 0x25
   2b2ca:	4798      	blx	r3
			OUTC(*fmt);
   2b2cc:	9b02      	ldr	r3, [sp, #8]
   2b2ce:	4651      	mov	r1, sl
   2b2d0:	7818      	ldrb	r0, [r3, #0]
   2b2d2:	9b01      	ldr	r3, [sp, #4]
   2b2d4:	4798      	blx	r3
   2b2d6:	f109 0902 	add.w	r9, r9, #2
			goto start;
   2b2da:	e7d7      	b.n	2b28c <cbvprintf+0x14>
		if (*fmt == '\0') {
   2b2dc:	2800      	cmp	r0, #0
   2b2de:	f000 81e7 	beq.w	2b6b0 <cbvprintf+0x438>
		OUTC(*fmt);
   2b2e2:	9b01      	ldr	r3, [sp, #4]
   2b2e4:	4651      	mov	r1, sl
   2b2e6:	4798      	blx	r3
   2b2e8:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   2b2ec:	9402      	str	r4, [sp, #8]
   2b2ee:	e7cd      	b.n	2b28c <cbvprintf+0x14>
		switch (*fmt) {
   2b2f0:	f1a2 0320 	sub.w	r3, r2, #32
   2b2f4:	2b19      	cmp	r3, #25
   2b2f6:	d8e5      	bhi.n	2b2c4 <cbvprintf+0x4c>
   2b2f8:	f20f 0e04 	addw	lr, pc, #4
   2b2fc:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
   2b300:	0002b369 	.word	0x0002b369
   2b304:	0002b2c5 	.word	0x0002b2c5
   2b308:	0002b2c5 	.word	0x0002b2c5
   2b30c:	0002b369 	.word	0x0002b369
   2b310:	0002b2c5 	.word	0x0002b2c5
   2b314:	0002b3ed 	.word	0x0002b3ed
   2b318:	0002b2c5 	.word	0x0002b2c5
   2b31c:	0002b2c5 	.word	0x0002b2c5
   2b320:	0002b2c5 	.word	0x0002b2c5
   2b324:	0002b2c5 	.word	0x0002b2c5
   2b328:	0002b42f 	.word	0x0002b42f
   2b32c:	0002b369 	.word	0x0002b369
   2b330:	0002b2c5 	.word	0x0002b2c5
   2b334:	0002b443 	.word	0x0002b443
   2b338:	0002b3fb 	.word	0x0002b3fb
   2b33c:	0002b2c5 	.word	0x0002b2c5
   2b340:	0002b407 	.word	0x0002b407
   2b344:	0002b423 	.word	0x0002b423
   2b348:	0002b423 	.word	0x0002b423
   2b34c:	0002b423 	.word	0x0002b423
   2b350:	0002b423 	.word	0x0002b423
   2b354:	0002b423 	.word	0x0002b423
   2b358:	0002b423 	.word	0x0002b423
   2b35c:	0002b423 	.word	0x0002b423
   2b360:	0002b423 	.word	0x0002b423
   2b364:	0002b423 	.word	0x0002b423
   2b368:	4694      	mov	ip, r2
   2b36a:	e7a0      	b.n	2b2ae <cbvprintf+0x36>
   2b36c:	2a58      	cmp	r2, #88	; 0x58
   2b36e:	f000 811b 	beq.w	2b5a8 <cbvprintf+0x330>
   2b372:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
   2b376:	fa5f fe83 	uxtb.w	lr, r3
   2b37a:	f1be 0f17 	cmp.w	lr, #23
   2b37e:	d8a1      	bhi.n	2b2c4 <cbvprintf+0x4c>
   2b380:	2b17      	cmp	r3, #23
   2b382:	d89f      	bhi.n	2b2c4 <cbvprintf+0x4c>
   2b384:	f20f 0e04 	addw	lr, pc, #4
   2b388:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
   2b38c:	0002b60b 	.word	0x0002b60b
   2b390:	0002b469 	.word	0x0002b469
   2b394:	0002b2c5 	.word	0x0002b2c5
   2b398:	0002b2c5 	.word	0x0002b2c5
   2b39c:	0002b2c5 	.word	0x0002b2c5
   2b3a0:	0002b449 	.word	0x0002b449
   2b3a4:	0002b469 	.word	0x0002b469
   2b3a8:	0002b2c5 	.word	0x0002b2c5
   2b3ac:	0002b2c5 	.word	0x0002b2c5
   2b3b0:	0002b449 	.word	0x0002b449
   2b3b4:	0002b2c5 	.word	0x0002b2c5
   2b3b8:	0002b2c5 	.word	0x0002b2c5
   2b3bc:	0002b2c5 	.word	0x0002b2c5
   2b3c0:	0002b553 	.word	0x0002b553
   2b3c4:	0002b2c5 	.word	0x0002b2c5
   2b3c8:	0002b2c5 	.word	0x0002b2c5
   2b3cc:	0002b5eb 	.word	0x0002b5eb
   2b3d0:	0002b2c5 	.word	0x0002b2c5
   2b3d4:	0002b469 	.word	0x0002b469
   2b3d8:	0002b2c5 	.word	0x0002b2c5
   2b3dc:	0002b2c5 	.word	0x0002b2c5
   2b3e0:	0002b553 	.word	0x0002b553
   2b3e4:	0002b2c5 	.word	0x0002b2c5
   2b3e8:	0002b449 	.word	0x0002b449
			OUTC('%');
   2b3ec:	9b01      	ldr	r3, [sp, #4]
   2b3ee:	4651      	mov	r1, sl
   2b3f0:	2025      	movs	r0, #37	; 0x25
   2b3f2:	4798      	blx	r3
   2b3f4:	f109 0901 	add.w	r9, r9, #1
			goto start;
   2b3f8:	e748      	b.n	2b28c <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   2b3fa:	9b03      	ldr	r3, [sp, #12]
   2b3fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   2b400:	9303      	str	r3, [sp, #12]
			precision = 0;
   2b402:	2700      	movs	r7, #0
			continue;
   2b404:	e753      	b.n	2b2ae <cbvprintf+0x36>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   2b406:	2c00      	cmp	r4, #0
   2b408:	da0b      	bge.n	2b422 <cbvprintf+0x1aa>
   2b40a:	2f00      	cmp	r7, #0
   2b40c:	da0b      	bge.n	2b426 <cbvprintf+0x1ae>
   2b40e:	9b03      	ldr	r3, [sp, #12]
   2b410:	2b00      	cmp	r3, #0
   2b412:	f000 8149 	beq.w	2b6a8 <cbvprintf+0x430>
				min_width = 10 * min_width + *fmt - '0';
   2b416:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2b41a:	fb06 2404 	mla	r4, r6, r4, r2
   2b41e:	3c30      	subs	r4, #48	; 0x30
   2b420:	e745      	b.n	2b2ae <cbvprintf+0x36>
			if (precision >= 0) {
   2b422:	2f00      	cmp	r7, #0
   2b424:	dbf7      	blt.n	2b416 <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
   2b426:	fb06 2707 	mla	r7, r6, r7, r2
   2b42a:	3f30      	subs	r7, #48	; 0x30
   2b42c:	e73f      	b.n	2b2ae <cbvprintf+0x36>
			if (precision >= 0) {
   2b42e:	2f00      	cmp	r7, #0
   2b430:	f855 3b04 	ldr.w	r3, [r5], #4
   2b434:	db01      	blt.n	2b43a <cbvprintf+0x1c2>
				precision = va_arg(ap, int);
   2b436:	461f      	mov	r7, r3
   2b438:	e739      	b.n	2b2ae <cbvprintf+0x36>
				if (min_width < 0) {
   2b43a:	1e1c      	subs	r4, r3, #0
   2b43c:	f6bf af37 	bge.w	2b2ae <cbvprintf+0x36>
					min_width = -min_width;
   2b440:	4264      	negs	r4, r4
		switch (*fmt) {
   2b442:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
   2b444:	9303      	str	r3, [sp, #12]
   2b446:	e732      	b.n	2b2ae <cbvprintf+0x36>
			if (*fmt == 'h' && length_mod == 'h') {
   2b448:	2a68      	cmp	r2, #104	; 0x68
   2b44a:	d103      	bne.n	2b454 <cbvprintf+0x1dc>
   2b44c:	2968      	cmp	r1, #104	; 0x68
   2b44e:	d106      	bne.n	2b45e <cbvprintf+0x1e6>
				length_mod = 'H';
   2b450:	2148      	movs	r1, #72	; 0x48
   2b452:	e72c      	b.n	2b2ae <cbvprintf+0x36>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2b454:	2a6c      	cmp	r2, #108	; 0x6c
   2b456:	d102      	bne.n	2b45e <cbvprintf+0x1e6>
   2b458:	296c      	cmp	r1, #108	; 0x6c
   2b45a:	f000 8127 	beq.w	2b6ac <cbvprintf+0x434>
			} else if (length_mod == '\0') {
   2b45e:	2900      	cmp	r1, #0
   2b460:	f47f af30 	bne.w	2b2c4 <cbvprintf+0x4c>
   2b464:	4611      	mov	r1, r2
		switch (*fmt) {
   2b466:	e722      	b.n	2b2ae <cbvprintf+0x36>
			if (length_mod == 'z') {
   2b468:	297a      	cmp	r1, #122	; 0x7a
   2b46a:	d107      	bne.n	2b47c <cbvprintf+0x204>
			} else if (*fmt == 'u') {
   2b46c:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
   2b46e:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
   2b472:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
   2b474:	d162      	bne.n	2b53c <cbvprintf+0x2c4>
				d = va_arg(ap, unsigned int);
   2b476:	f04f 0800 	mov.w	r8, #0
   2b47a:	e00d      	b.n	2b498 <cbvprintf+0x220>
			} else if (length_mod == 'l') {
   2b47c:	296c      	cmp	r1, #108	; 0x6c
   2b47e:	d0f5      	beq.n	2b46c <cbvprintf+0x1f4>
			} else if (length_mod == 'L') {
   2b480:	294c      	cmp	r1, #76	; 0x4c
   2b482:	d1f3      	bne.n	2b46c <cbvprintf+0x1f4>
					unsigned long long llu =
   2b484:	1deb      	adds	r3, r5, #7
   2b486:	f023 0307 	bic.w	r3, r3, #7
   2b48a:	461e      	mov	r6, r3
				if (*fmt == 'u') {
   2b48c:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
   2b48e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
   2b492:	d107      	bne.n	2b4a4 <cbvprintf+0x22c>
					unsigned long long llu =
   2b494:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
   2b498:	f1bc 0f20 	cmp.w	ip, #32
   2b49c:	d151      	bne.n	2b542 <cbvprintf+0x2ca>
				prefix = " ";
   2b49e:	4b86      	ldr	r3, [pc, #536]	; (2b6b8 <cbvprintf+0x440>)
				min_width--;
   2b4a0:	3c01      	subs	r4, #1
   2b4a2:	e009      	b.n	2b4b8 <cbvprintf+0x240>
					d = (int_value_type) lld;
   2b4a4:	4605      	mov	r5, r0
   2b4a6:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2b4a8:	f1b8 0f00 	cmp.w	r8, #0
   2b4ac:	daf4      	bge.n	2b498 <cbvprintf+0x220>
				d = -d;
   2b4ae:	426d      	negs	r5, r5
				prefix = "-";
   2b4b0:	4b82      	ldr	r3, [pc, #520]	; (2b6bc <cbvprintf+0x444>)
				d = -d;
   2b4b2:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
   2b4b6:	3c01      	subs	r4, #1
	prefix = "";
   2b4b8:	9300      	str	r3, [sp, #0]
	int i = 0;
   2b4ba:	ab0d      	add	r3, sp, #52	; 0x34
   2b4bc:	9305      	str	r3, [sp, #20]
   2b4be:	f04f 0b00 	mov.w	fp, #0
		unsigned int c = num % base;
   2b4c2:	4628      	mov	r0, r5
   2b4c4:	4641      	mov	r1, r8
   2b4c6:	220a      	movs	r2, #10
   2b4c8:	2300      	movs	r3, #0
   2b4ca:	f8cd b010 	str.w	fp, [sp, #16]
   2b4ce:	f7fa fe17 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   2b4d2:	9b05      	ldr	r3, [sp, #20]
   2b4d4:	f8cd 801c 	str.w	r8, [sp, #28]
   2b4d8:	3230      	adds	r2, #48	; 0x30
   2b4da:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
   2b4de:	4628      	mov	r0, r5
   2b4e0:	e9cd 3505 	strd	r3, r5, [sp, #20]
   2b4e4:	4641      	mov	r1, r8
   2b4e6:	2300      	movs	r3, #0
   2b4e8:	220a      	movs	r2, #10
   2b4ea:	f7fa fe09 	bl	26100 <__aeabi_uldivmod>
	} while (num);
   2b4ee:	9b06      	ldr	r3, [sp, #24]
   2b4f0:	2b0a      	cmp	r3, #10
   2b4f2:	9b07      	ldr	r3, [sp, #28]
   2b4f4:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   2b4f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		num /= base;
   2b4fc:	4605      	mov	r5, r0
   2b4fe:	4688      	mov	r8, r1
	} while (num);
   2b500:	d2df      	bcs.n	2b4c2 <cbvprintf+0x24a>
	return -i;
   2b502:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
   2b504:	9a04      	ldr	r2, [sp, #16]
	return -i;
   2b506:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   2b50a:	ab0e      	add	r3, sp, #56	; 0x38
   2b50c:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2b50e:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
   2b510:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2b514:	da04      	bge.n	2b520 <cbvprintf+0x2a8>
   2b516:	9b03      	ldr	r3, [sp, #12]
   2b518:	f013 0f01 	tst.w	r3, #1
   2b51c:	bf18      	it	ne
   2b51e:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   2b520:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
   2b522:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
   2b526:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
   2b52a:	bfd4      	ite	le
   2b52c:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
   2b530:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
   2b532:	079b      	lsls	r3, r3, #30
   2b534:	f100 8081 	bmi.w	2b63a <cbvprintf+0x3c2>
   2b538:	4627      	mov	r7, r4
   2b53a:	e077      	b.n	2b62c <cbvprintf+0x3b4>
				d = va_arg(ap, int);
   2b53c:	ea4f 78e5 	mov.w	r8, r5, asr #31
   2b540:	e7b2      	b.n	2b4a8 <cbvprintf+0x230>
			} else if (special == '+') {
   2b542:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
   2b546:	bf0a      	itet	eq
   2b548:	4b5d      	ldreq	r3, [pc, #372]	; (2b6c0 <cbvprintf+0x448>)
	prefix = "";
   2b54a:	4b5e      	ldrne	r3, [pc, #376]	; (2b6c4 <cbvprintf+0x44c>)
				min_width--;
   2b54c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2b550:	e7b2      	b.n	2b4b8 <cbvprintf+0x240>
			if (*fmt == 'p') {
   2b552:	2a70      	cmp	r2, #112	; 0x70
   2b554:	d128      	bne.n	2b5a8 <cbvprintf+0x330>
				x = (uintptr_t)va_arg(ap, void *);
   2b556:	462e      	mov	r6, r5
   2b558:	2300      	movs	r3, #0
   2b55a:	f856 1b04 	ldr.w	r1, [r6], #4
				if (x == (uint_value_type)0) {
   2b55e:	2900      	cmp	r1, #0
   2b560:	d05c      	beq.n	2b61c <cbvprintf+0x3a4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2b562:	4859      	ldr	r0, [pc, #356]	; (2b6c8 <cbvprintf+0x450>)
   2b564:	9000      	str	r0, [sp, #0]
				min_width -= 2;
   2b566:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2b568:	f002 0260 	and.w	r2, r2, #96	; 0x60
   2b56c:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
   2b570:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
   2b574:	2500      	movs	r5, #0
		unsigned int c = num % base;
   2b576:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
   2b57a:	2a09      	cmp	r2, #9
			c += alpha;
   2b57c:	bf88      	it	hi
   2b57e:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
   2b580:	3230      	adds	r2, #48	; 0x30
   2b582:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
   2b586:	2910      	cmp	r1, #16
		num /= base;
   2b588:	ea4f 1211 	mov.w	r2, r1, lsr #4
   2b58c:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
   2b590:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
   2b594:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   2b598:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
	} while (num);
   2b59c:	d221      	bcs.n	2b5e2 <cbvprintf+0x36a>
			data = buf + sizeof(buf) - data_len;
   2b59e:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
   2b5a0:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
   2b5a4:	441d      	add	r5, r3
   2b5a6:	e7b2      	b.n	2b50e <cbvprintf+0x296>
			} else if (length_mod == 'l') {
   2b5a8:	296c      	cmp	r1, #108	; 0x6c
   2b5aa:	d104      	bne.n	2b5b6 <cbvprintf+0x33e>
				x = va_arg(ap, unsigned int);
   2b5ac:	462e      	mov	r6, r5
   2b5ae:	2300      	movs	r3, #0
   2b5b0:	f856 1b04 	ldr.w	r1, [r6], #4
   2b5b4:	e008      	b.n	2b5c8 <cbvprintf+0x350>
			} else if (length_mod == 'L') {
   2b5b6:	294c      	cmp	r1, #76	; 0x4c
   2b5b8:	d1f8      	bne.n	2b5ac <cbvprintf+0x334>
				unsigned long long llx =
   2b5ba:	3507      	adds	r5, #7
   2b5bc:	f025 0507 	bic.w	r5, r5, #7
   2b5c0:	462e      	mov	r6, r5
   2b5c2:	686b      	ldr	r3, [r5, #4]
   2b5c4:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
   2b5c8:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
   2b5cc:	d106      	bne.n	2b5dc <cbvprintf+0x364>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2b5ce:	4d3f      	ldr	r5, [pc, #252]	; (2b6cc <cbvprintf+0x454>)
   2b5d0:	483d      	ldr	r0, [pc, #244]	; (2b6c8 <cbvprintf+0x450>)
   2b5d2:	f012 0f20 	tst.w	r2, #32
   2b5d6:	bf08      	it	eq
   2b5d8:	4628      	moveq	r0, r5
   2b5da:	e7c3      	b.n	2b564 <cbvprintf+0x2ec>
	prefix = "";
   2b5dc:	4839      	ldr	r0, [pc, #228]	; (2b6c4 <cbvprintf+0x44c>)
   2b5de:	9000      	str	r0, [sp, #0]
   2b5e0:	e7c2      	b.n	2b568 <cbvprintf+0x2f0>
		buftop[--i] = c + '0';
   2b5e2:	4665      	mov	r5, ip
		num /= base;
   2b5e4:	4611      	mov	r1, r2
   2b5e6:	4603      	mov	r3, r0
   2b5e8:	e7c5      	b.n	2b576 <cbvprintf+0x2fe>
			data = va_arg(ap, char *);
   2b5ea:	462e      	mov	r6, r5
   2b5ec:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
   2b5f0:	4628      	mov	r0, r5
   2b5f2:	f021 f82b 	bl	4c64c <strlen>
			if (precision >= 0 && data_len > precision) {
   2b5f6:	2f00      	cmp	r7, #0
			data_len = strlen(data);
   2b5f8:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   2b5fa:	db02      	blt.n	2b602 <cbvprintf+0x38a>
   2b5fc:	42b8      	cmp	r0, r7
   2b5fe:	bfa8      	it	ge
   2b600:	46bb      	movge	fp, r7
   2b602:	4b30      	ldr	r3, [pc, #192]	; (2b6c4 <cbvprintf+0x44c>)
   2b604:	9300      	str	r3, [sp, #0]
   2b606:	2700      	movs	r7, #0
   2b608:	e78a      	b.n	2b520 <cbvprintf+0x2a8>
			int c = va_arg(ap, int);
   2b60a:	462e      	mov	r6, r5
			data_len = 1;
   2b60c:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
   2b610:	f856 3b04 	ldr.w	r3, [r6], #4
   2b614:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
   2b618:	ad08      	add	r5, sp, #32
   2b61a:	e7f2      	b.n	2b602 <cbvprintf+0x38a>
					data = "(nil)";
   2b61c:	4d2c      	ldr	r5, [pc, #176]	; (2b6d0 <cbvprintf+0x458>)
					data_len = 5;
   2b61e:	f04f 0b05 	mov.w	fp, #5
   2b622:	e7ee      	b.n	2b602 <cbvprintf+0x38a>
			while (--min_width >= 0) {
				OUTC(' ');
   2b624:	9b01      	ldr	r3, [sp, #4]
   2b626:	4651      	mov	r1, sl
   2b628:	2020      	movs	r0, #32
   2b62a:	4798      	blx	r3
			while (--min_width >= 0) {
   2b62c:	3f01      	subs	r7, #1
   2b62e:	d5f9      	bpl.n	2b624 <cbvprintf+0x3ac>
   2b630:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   2b634:	3c01      	subs	r4, #1
   2b636:	4499      	add	r9, r3
   2b638:	1ae4      	subs	r4, r4, r3
   2b63a:	9b00      	ldr	r3, [sp, #0]
   2b63c:	eba9 0903 	sub.w	r9, r9, r3
   2b640:	e004      	b.n	2b64c <cbvprintf+0x3d4>
   2b642:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   2b644:	4651      	mov	r1, sl
   2b646:	9b01      	ldr	r3, [sp, #4]
   2b648:	4798      	blx	r3
   2b64a:	9b00      	ldr	r3, [sp, #0]
   2b64c:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
   2b650:	f813 0b01 	ldrb.w	r0, [r3], #1
   2b654:	2800      	cmp	r0, #0
   2b656:	d1f4      	bne.n	2b642 <cbvprintf+0x3ca>
		precision -= data_len;
   2b658:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
   2b65a:	f1b9 0901 	subs.w	r9, r9, #1
   2b65e:	d513      	bpl.n	2b688 <cbvprintf+0x410>
   2b660:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   2b664:	46d9      	mov	r9, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
   2b666:	f1b9 0901 	subs.w	r9, r9, #1
   2b66a:	d512      	bpl.n	2b692 <cbvprintf+0x41a>
   2b66c:	f1bb 0f00 	cmp.w	fp, #0
   2b670:	bfa8      	it	ge
   2b672:	44d8      	addge	r8, fp
   2b674:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2b676:	3d01      	subs	r5, #1
   2b678:	d511      	bpl.n	2b69e <cbvprintf+0x426>
   2b67a:	2c00      	cmp	r4, #0
   2b67c:	bfa8      	it	ge
   2b67e:	44a0      	addge	r8, r4
   2b680:	eb08 0907 	add.w	r9, r8, r7
   2b684:	4635      	mov	r5, r6
   2b686:	e601      	b.n	2b28c <cbvprintf+0x14>
			OUTC('0');
   2b688:	9b01      	ldr	r3, [sp, #4]
   2b68a:	4651      	mov	r1, sl
   2b68c:	2030      	movs	r0, #48	; 0x30
   2b68e:	4798      	blx	r3
   2b690:	e7e3      	b.n	2b65a <cbvprintf+0x3e2>
			OUTC(*data++);
   2b692:	f815 0b01 	ldrb.w	r0, [r5], #1
   2b696:	9b01      	ldr	r3, [sp, #4]
   2b698:	4651      	mov	r1, sl
   2b69a:	4798      	blx	r3
   2b69c:	e7e3      	b.n	2b666 <cbvprintf+0x3ee>
			OUTC(' ');
   2b69e:	9b01      	ldr	r3, [sp, #4]
   2b6a0:	4651      	mov	r1, sl
   2b6a2:	2020      	movs	r0, #32
   2b6a4:	4798      	blx	r3
   2b6a6:	e7e6      	b.n	2b676 <cbvprintf+0x3fe>
				padding_mode = PAD_ZERO;
   2b6a8:	2301      	movs	r3, #1
   2b6aa:	e6cb      	b.n	2b444 <cbvprintf+0x1cc>
				length_mod = 'L';
   2b6ac:	214c      	movs	r1, #76	; 0x4c
   2b6ae:	e5fe      	b.n	2b2ae <cbvprintf+0x36>
		}

		goto start;
	}
}
   2b6b0:	4648      	mov	r0, r9
   2b6b2:	b00f      	add	sp, #60	; 0x3c
   2b6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6b8:	000566e9 	.word	0x000566e9
   2b6bc:	000566e7 	.word	0x000566e7
   2b6c0:	000566eb 	.word	0x000566eb
   2b6c4:	00056721 	.word	0x00056721
   2b6c8:	000566f0 	.word	0x000566f0
   2b6cc:	000566ed 	.word	0x000566ed
   2b6d0:	000566f3 	.word	0x000566f3

0002b6d4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   2b6d4:	b508      	push	{r3, lr}
   2b6d6:	f04f 0220 	mov.w	r2, #32
   2b6da:	f3ef 8311 	mrs	r3, BASEPRI
   2b6de:	f382 8812 	msr	BASEPRI_MAX, r2
   2b6e2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2b6e6:	f002 f917 	bl	2d918 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2b6ea:	4803      	ldr	r0, [pc, #12]	; (2b6f8 <sys_reboot+0x24>)
   2b6ec:	f01e fedb 	bl	4a4a6 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2b6f0:	f001 fdd0 	bl	2d294 <arch_cpu_idle>
   2b6f4:	e7fc      	b.n	2b6f0 <sys_reboot+0x1c>
   2b6f6:	bf00      	nop
   2b6f8:	000566f9 	.word	0x000566f9

0002b6fc <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   2b6fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   2b6fe:	2407      	movs	r4, #7
   2b700:	9402      	str	r4, [sp, #8]
   2b702:	4c04      	ldr	r4, [pc, #16]	; (2b714 <read_pnp_id+0x18>)
   2b704:	9401      	str	r4, [sp, #4]
   2b706:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2b70a:	9400      	str	r4, [sp, #0]
   2b70c:	f023 fc2f 	bl	4ef6e <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   2b710:	b004      	add	sp, #16
   2b712:	bd10      	pop	{r4, pc}
   2b714:	200011a0 	.word	0x200011a0

0002b718 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   2b718:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   2b71a:	4c08      	ldr	r4, [pc, #32]	; (2b73c <read_blvl+0x24>)
{
   2b71c:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   2b71e:	7824      	ldrb	r4, [r4, #0]
   2b720:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   2b724:	2401      	movs	r4, #1
   2b726:	9402      	str	r4, [sp, #8]
   2b728:	f10d 0417 	add.w	r4, sp, #23
   2b72c:	9401      	str	r4, [sp, #4]
   2b72e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2b732:	9400      	str	r4, [sp, #0]
   2b734:	f023 fc1b 	bl	4ef6e <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   2b738:	b006      	add	sp, #24
   2b73a:	bd10      	pop	{r4, pc}
   2b73c:	200011a7 	.word	0x200011a7

0002b740 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   2b740:	b500      	push	{lr}
   2b742:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   2b744:	2864      	cmp	r0, #100	; 0x64
{
   2b746:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   2b74a:	d819      	bhi.n	2b780 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   2b74c:	4b0e      	ldr	r3, [pc, #56]	; (2b788 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2b74e:	2218      	movs	r2, #24
   2b750:	7018      	strb	r0, [r3, #0]
   2b752:	2100      	movs	r1, #0
   2b754:	a802      	add	r0, sp, #8
   2b756:	f020 ffb9 	bl	4c6cc <memset>
	params.attr = attr;
   2b75a:	4b0c      	ldr	r3, [pc, #48]	; (2b78c <bt_bas_set_battery_level+0x4c>)
   2b75c:	9303      	str	r3, [sp, #12]
	params.data = data;
   2b75e:	f10d 0307 	add.w	r3, sp, #7
   2b762:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   2b764:	a902      	add	r1, sp, #8
	params.len = len;
   2b766:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   2b768:	2000      	movs	r0, #0
	params.len = len;
   2b76a:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2b76e:	f006 fea7 	bl	324c0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2b772:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2b776:	bf08      	it	eq
   2b778:	2000      	moveq	r0, #0
}
   2b77a:	b009      	add	sp, #36	; 0x24
   2b77c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2b780:	f06f 0015 	mvn.w	r0, #21
   2b784:	e7f9      	b.n	2b77a <bt_bas_set_battery_level+0x3a>
   2b786:	bf00      	nop
   2b788:	200011a7 	.word	0x200011a7
   2b78c:	00054af0 	.word	0x00054af0

0002b790 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2b790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b794:	460f      	mov	r7, r1
   2b796:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b798:	2108      	movs	r1, #8
   2b79a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b79c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b7f0 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b7a0:	f01f fa1a 	bl	4abd8 <nvs_al_size.isra.0>
	*addr -= ate_size;
   2b7a4:	683c      	ldr	r4, [r7, #0]
   2b7a6:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b7a8:	4680      	mov	r8, r0
	*addr -= ate_size;
   2b7aa:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b7ac:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   2b7b0:	42ac      	cmp	r4, r5
   2b7b2:	d803      	bhi.n	2b7bc <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   2b7b4:	2000      	movs	r0, #0
}
   2b7b6:	b003      	add	sp, #12
   2b7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b7bc:	2308      	movs	r3, #8
   2b7be:	466a      	mov	r2, sp
   2b7c0:	4621      	mov	r1, r4
   2b7c2:	4630      	mov	r0, r6
   2b7c4:	f01f f97d 	bl	4aac2 <nvs_flash_rd>
		if (rc) {
   2b7c8:	2800      	cmp	r0, #0
   2b7ca:	d1f4      	bne.n	2b7b6 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   2b7cc:	4669      	mov	r1, sp
   2b7ce:	4630      	mov	r0, r6
   2b7d0:	f01f fa0c 	bl	4abec <nvs_ate_valid>
   2b7d4:	b140      	cbz	r0, 2b7e8 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   2b7d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2b7da:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   2b7de:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   2b7e0:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   2b7e4:	4413      	add	r3, r2
   2b7e6:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   2b7e8:	eba4 0408 	sub.w	r4, r4, r8
   2b7ec:	e7e0      	b.n	2b7b0 <nvs_recover_last_ate+0x20>
   2b7ee:	bf00      	nop
   2b7f0:	ffff0000 	.word	0xffff0000

0002b7f4 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   2b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b7f8:	4604      	mov	r4, r0
   2b7fa:	b089      	sub	sp, #36	; 0x24
   2b7fc:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   2b7fe:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   2b802:	4638      	mov	r0, r7
   2b804:	f025 ff35 	bl	51672 <z_impl_k_mutex_init>
   2b808:	4628      	mov	r0, r5
   2b80a:	f01c fc89 	bl	48120 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   2b80e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   2b810:	2800      	cmp	r0, #0
   2b812:	f000 811f 	beq.w	2ba54 <nvs_init+0x260>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   2b816:	6883      	ldr	r3, [r0, #8]
   2b818:	68db      	ldr	r3, [r3, #12]
   2b81a:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   2b81c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   2b81e:	b928      	cbnz	r0, 2b82c <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   2b820:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   2b824:	4628      	mov	r0, r5
   2b826:	b009      	add	sp, #36	; 0x24
   2b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   2b82c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   2b82e:	6883      	ldr	r3, [r0, #8]
   2b830:	68db      	ldr	r3, [r3, #12]
   2b832:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   2b834:	6803      	ldr	r3, [r0, #0]
   2b836:	3b01      	subs	r3, #1
   2b838:	2b1f      	cmp	r3, #31
   2b83a:	d8f1      	bhi.n	2b820 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   2b83c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2b83e:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2b840:	aa05      	add	r2, sp, #20
   2b842:	f025 f9ae 	bl	50ba2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2b846:	2800      	cmp	r0, #0
   2b848:	d1ea      	bne.n	2b820 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   2b84a:	89a5      	ldrh	r5, [r4, #12]
   2b84c:	2d00      	cmp	r5, #0
   2b84e:	d0e7      	beq.n	2b820 <nvs_init+0x2c>
   2b850:	9b06      	ldr	r3, [sp, #24]
   2b852:	fbb5 f2f3 	udiv	r2, r5, r3
   2b856:	fb03 5512 	mls	r5, r3, r2, r5
   2b85a:	2d00      	cmp	r5, #0
   2b85c:	d1e0      	bne.n	2b820 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2b85e:	89e3      	ldrh	r3, [r4, #14]
   2b860:	2b01      	cmp	r3, #1
   2b862:	d9dd      	bls.n	2b820 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2b864:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   2b866:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2b868:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2b86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b874:	4638      	mov	r0, r7
   2b876:	f01c ff2d 	bl	486d4 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b87a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b87c:	2108      	movs	r1, #8
   2b87e:	f01f f9ab 	bl	4abd8 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2b882:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b884:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   2b886:	89e3      	ldrh	r3, [r4, #14]
   2b888:	fa1f fa85 	uxth.w	sl, r5
   2b88c:	4553      	cmp	r3, sl
   2b88e:	d845      	bhi.n	2b91c <nvs_init+0x128>
	if (closed_sectors == fs->sector_count) {
   2b890:	89e3      	ldrh	r3, [r4, #14]
   2b892:	454b      	cmp	r3, r9
   2b894:	f000 80d3 	beq.w	2ba3e <nvs_init+0x24a>
	if (i == fs->sector_count) {
   2b898:	4553      	cmp	r3, sl
   2b89a:	d10b      	bne.n	2b8b4 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2b89c:	9900      	ldr	r1, [sp, #0]
   2b89e:	2308      	movs	r3, #8
   2b8a0:	4642      	mov	r2, r8
   2b8a2:	1b89      	subs	r1, r1, r6
   2b8a4:	4620      	mov	r0, r4
   2b8a6:	f01f f944 	bl	4ab32 <nvs_flash_cmp_const>
		if (!rc) {
   2b8aa:	b918      	cbnz	r0, 2b8b4 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   2b8ac:	89e0      	ldrh	r0, [r4, #14]
   2b8ae:	4669      	mov	r1, sp
   2b8b0:	f01f f987 	bl	4abc2 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   2b8b4:	4669      	mov	r1, sp
   2b8b6:	4620      	mov	r0, r4
   2b8b8:	f7ff ff6a 	bl	2b790 <nvs_recover_last_ate>
	if (rc) {
   2b8bc:	4605      	mov	r5, r0
   2b8be:	2800      	cmp	r0, #0
   2b8c0:	f040 80bf 	bne.w	2ba42 <nvs_init+0x24e>
	fs->ate_wra = addr;
   2b8c4:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2b8c6:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 2baac <nvs_init+0x2b8>
	fs->ate_wra = addr;
   2b8ca:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2b8cc:	ea03 0309 	and.w	r3, r3, r9
   2b8d0:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   2b8d2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2b8d6:	4299      	cmp	r1, r3
   2b8d8:	d30e      	bcc.n	2b8f8 <nvs_init+0x104>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b8da:	2308      	movs	r3, #8
   2b8dc:	aa01      	add	r2, sp, #4
   2b8de:	4620      	mov	r0, r4
   2b8e0:	f01f f8ef 	bl	4aac2 <nvs_flash_rd>
		if (rc) {
   2b8e4:	b9c0      	cbnz	r0, 2b918 <nvs_init+0x124>
   2b8e6:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   2b8e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b8ec:	4590      	cmp	r8, r2
   2b8ee:	f040 80c1 	bne.w	2ba74 <nvs_init+0x280>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b8f2:	3001      	adds	r0, #1
   2b8f4:	2808      	cmp	r0, #8
   2b8f6:	d1f7      	bne.n	2b8e8 <nvs_init+0xf4>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b8f8:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   2b8fa:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b8fc:	0c1b      	lsrs	r3, r3, #16
   2b8fe:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   2b900:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b902:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   2b904:	f01f f95d 	bl	4abc2 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   2b908:	89a3      	ldrh	r3, [r4, #12]
   2b90a:	9900      	ldr	r1, [sp, #0]
   2b90c:	4642      	mov	r2, r8
   2b90e:	4620      	mov	r0, r4
   2b910:	f01f f90f 	bl	4ab32 <nvs_flash_cmp_const>
	if (rc < 0) {
   2b914:	2800      	cmp	r0, #0
   2b916:	da26      	bge.n	2b966 <nvs_init+0x172>
   2b918:	4605      	mov	r5, r0
   2b91a:	e092      	b.n	2ba42 <nvs_init+0x24e>
		       (uint16_t)(fs->sector_size - ate_size);
   2b91c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   2b91e:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   2b920:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   2b922:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b926:	4642      	mov	r2, r8
   2b928:	2308      	movs	r3, #8
   2b92a:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   2b92c:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b92e:	f01f f900 	bl	4ab32 <nvs_flash_cmp_const>
		if (rc) {
   2b932:	b178      	cbz	r0, 2b954 <nvs_init+0x160>
			nvs_sector_advance(fs, &addr);
   2b934:	89e0      	ldrh	r0, [r4, #14]
   2b936:	4669      	mov	r1, sp
   2b938:	f01f f943 	bl	4abc2 <nvs_sector_advance.isra.0>
			closed_sectors++;
   2b93c:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b940:	9900      	ldr	r1, [sp, #0]
   2b942:	2308      	movs	r3, #8
   2b944:	4642      	mov	r2, r8
   2b946:	4620      	mov	r0, r4
			closed_sectors++;
   2b948:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b94c:	f01f f8f1 	bl	4ab32 <nvs_flash_cmp_const>
			if (!rc) {
   2b950:	2800      	cmp	r0, #0
   2b952:	d09d      	beq.n	2b890 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   2b954:	3501      	adds	r5, #1
   2b956:	e796      	b.n	2b886 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b958:	f1ba 0f00 	cmp.w	sl, #0
   2b95c:	f000 80a2 	beq.w	2baa4 <nvs_init+0x2b0>
				rc = -ESPIPE;
   2b960:	f06f 051c 	mvn.w	r5, #28
   2b964:	e06d      	b.n	2ba42 <nvs_init+0x24e>
	if (rc) {
   2b966:	d045      	beq.n	2b9f4 <nvs_init+0x200>
		addr = fs->ate_wra + ate_size;
   2b968:	6863      	ldr	r3, [r4, #4]
   2b96a:	4433      	add	r3, r6
   2b96c:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2b96e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2b972:	9900      	ldr	r1, [sp, #0]
   2b974:	89a3      	ldrh	r3, [r4, #12]
   2b976:	b28a      	uxth	r2, r1
   2b978:	1b9b      	subs	r3, r3, r6
   2b97a:	429a      	cmp	r2, r3
   2b97c:	d315      	bcc.n	2b9aa <nvs_init+0x1b6>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2b97e:	6861      	ldr	r1, [r4, #4]
   2b980:	4620      	mov	r0, r4
   2b982:	f01f f8fb 	bl	4ab7c <nvs_flash_erase_sector>
		if (rc) {
   2b986:	2800      	cmp	r0, #0
   2b988:	d1c6      	bne.n	2b918 <nvs_init+0x124>
		fs->ate_wra &= ADDR_SECT_MASK;
   2b98a:	6863      	ldr	r3, [r4, #4]
   2b98c:	4a47      	ldr	r2, [pc, #284]	; (2baac <nvs_init+0x2b8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2b98e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   2b990:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2b992:	440b      	add	r3, r1
   2b994:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   2b998:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   2b99a:	4013      	ands	r3, r2
   2b99c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2b99e:	4620      	mov	r0, r4
   2b9a0:	f01f fa19 	bl	4add6 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b9a4:	2800      	cmp	r0, #0
   2b9a6:	d040      	beq.n	2ba2a <nvs_init+0x236>
   2b9a8:	e7b6      	b.n	2b918 <nvs_init+0x124>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b9aa:	2308      	movs	r3, #8
   2b9ac:	aa03      	add	r2, sp, #12
   2b9ae:	4620      	mov	r0, r4
   2b9b0:	f01f f887 	bl	4aac2 <nvs_flash_rd>
			if (rc) {
   2b9b4:	2800      	cmp	r0, #0
   2b9b6:	d1af      	bne.n	2b918 <nvs_init+0x124>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   2b9b8:	a903      	add	r1, sp, #12
   2b9ba:	4620      	mov	r0, r4
   2b9bc:	f01f f916 	bl	4abec <nvs_ate_valid>
   2b9c0:	b138      	cbz	r0, 2b9d2 <nvs_init+0x1de>
   2b9c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2b9c6:	4543      	cmp	r3, r8
   2b9c8:	d103      	bne.n	2b9d2 <nvs_init+0x1de>
			    (gc_done_ate.id == 0xffff) &&
   2b9ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b9ce:	2b00      	cmp	r3, #0
   2b9d0:	d043      	beq.n	2ba5a <nvs_init+0x266>
			addr += ate_size;
   2b9d2:	9b00      	ldr	r3, [sp, #0]
   2b9d4:	4433      	add	r3, r6
   2b9d6:	9300      	str	r3, [sp, #0]
   2b9d8:	e7cb      	b.n	2b972 <nvs_init+0x17e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   2b9da:	1a5b      	subs	r3, r3, r1
   2b9dc:	4642      	mov	r2, r8
   2b9de:	4620      	mov	r0, r4
   2b9e0:	f01f f8a7 	bl	4ab32 <nvs_flash_cmp_const>
		if (rc < 0) {
   2b9e4:	2800      	cmp	r0, #0
   2b9e6:	db97      	blt.n	2b918 <nvs_init+0x124>
		if (!rc) {
   2b9e8:	d008      	beq.n	2b9fc <nvs_init+0x208>
		fs->data_wra += fs->flash_parameters->write_block_size;
   2b9ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2b9ec:	68a3      	ldr	r3, [r4, #8]
   2b9ee:	6812      	ldr	r2, [r2, #0]
   2b9f0:	4413      	add	r3, r2
   2b9f2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   2b9f4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2b9f8:	428b      	cmp	r3, r1
   2b9fa:	d8ee      	bhi.n	2b9da <nvs_init+0x1e6>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b9fc:	6861      	ldr	r1, [r4, #4]
   2b9fe:	89a3      	ldrh	r3, [r4, #12]
   2ba00:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   2ba04:	429a      	cmp	r2, r3
   2ba06:	d1cd      	bne.n	2b9a4 <nvs_init+0x1b0>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2ba08:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2baac <nvs_init+0x2b8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2ba0c:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2ba0e:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2ba12:	4293      	cmp	r3, r2
   2ba14:	d0c6      	beq.n	2b9a4 <nvs_init+0x1b0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2ba16:	4620      	mov	r0, r4
   2ba18:	f01f f8b0 	bl	4ab7c <nvs_flash_erase_sector>
		if (rc) {
   2ba1c:	2800      	cmp	r0, #0
   2ba1e:	f47f af7b 	bne.w	2b918 <nvs_init+0x124>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2ba22:	6863      	ldr	r3, [r4, #4]
   2ba24:	ea03 0308 	and.w	r3, r3, r8
   2ba28:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   2ba2a:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2ba2c:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   2ba2e:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2ba32:	42b3      	cmp	r3, r6
   2ba34:	d105      	bne.n	2ba42 <nvs_init+0x24e>
		rc = nvs_add_gc_done_ate(fs);
   2ba36:	4620      	mov	r0, r4
   2ba38:	f01f f9b8 	bl	4adac <nvs_add_gc_done_ate>
   2ba3c:	e76c      	b.n	2b918 <nvs_init+0x124>
		rc = -EDEADLK;
   2ba3e:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   2ba42:	4638      	mov	r0, r7
   2ba44:	f01c febe 	bl	487c4 <z_impl_k_mutex_unlock>
	if (rc) {
   2ba48:	2d00      	cmp	r5, #0
   2ba4a:	f47f aeeb 	bne.w	2b824 <nvs_init+0x30>
	fs->ready = true;
   2ba4e:	2301      	movs	r3, #1
   2ba50:	7423      	strb	r3, [r4, #16]
	return 0;
   2ba52:	e6e7      	b.n	2b824 <nvs_init+0x30>
		return -ENXIO;
   2ba54:	f06f 0505 	mvn.w	r5, #5
   2ba58:	e6e4      	b.n	2b824 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2ba5a:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   2ba5c:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2ba5e:	0c1b      	lsrs	r3, r3, #16
   2ba60:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   2ba62:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2ba64:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   2ba66:	f01f f8ac 	bl	4abc2 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   2ba6a:	9900      	ldr	r1, [sp, #0]
   2ba6c:	4620      	mov	r0, r4
   2ba6e:	f01f f885 	bl	4ab7c <nvs_flash_erase_sector>
			goto end;
   2ba72:	e797      	b.n	2b9a4 <nvs_init+0x1b0>
		if (nvs_ate_valid(fs, &last_ate)) {
   2ba74:	a901      	add	r1, sp, #4
   2ba76:	4620      	mov	r0, r4
   2ba78:	f01f f8b8 	bl	4abec <nvs_ate_valid>
   2ba7c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   2ba80:	b180      	cbz	r0, 2baa4 <nvs_init+0x2b0>
			fs->data_wra = addr & ADDR_SECT_MASK;
   2ba82:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2ba84:	f8bd a008 	ldrh.w	sl, [sp, #8]
   2ba88:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2ba8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   2ba8e:	ea02 0209 	and.w	r2, r2, r9
   2ba92:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2ba94:	4451      	add	r1, sl
   2ba96:	f01f f89f 	bl	4abd8 <nvs_al_size.isra.0>
   2ba9a:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2ba9c:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2ba9e:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2baa0:	f43f af5a 	beq.w	2b958 <nvs_init+0x164>
		fs->ate_wra -= ate_size;
   2baa4:	ebab 0306 	sub.w	r3, fp, r6
   2baa8:	6063      	str	r3, [r4, #4]
   2baaa:	e712      	b.n	2b8d2 <nvs_init+0xde>
   2baac:	ffff0000 	.word	0xffff0000

0002bab0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   2bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bab4:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2bab6:	7c03      	ldrb	r3, [r0, #16]
{
   2bab8:	b089      	sub	sp, #36	; 0x24
   2baba:	4604      	mov	r4, r0
   2babc:	4689      	mov	r9, r1
   2babe:	4690      	mov	r8, r2
	if (!fs->ready) {
   2bac0:	2b00      	cmp	r3, #0
   2bac2:	f000 80b2 	beq.w	2bc2a <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2bac6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2bac8:	2108      	movs	r1, #8
   2baca:	4610      	mov	r0, r2
   2bacc:	f01f f884 	bl	4abd8 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   2bad0:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2bad2:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   2bad4:	4610      	mov	r0, r2
   2bad6:	f01f f87f 	bl	4abd8 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2bada:	89a3      	ldrh	r3, [r4, #12]
   2badc:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   2bae0:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   2bae2:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2bae4:	f200 80a4 	bhi.w	2bc30 <nvs_write+0x180>
   2bae8:	b11e      	cbz	r6, 2baf2 <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   2baea:	f1b8 0f00 	cmp.w	r8, #0
   2baee:	f000 809f 	beq.w	2bc30 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   2baf2:	6863      	ldr	r3, [r4, #4]
   2baf4:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2baf6:	aa04      	add	r2, sp, #16
   2baf8:	a903      	add	r1, sp, #12
   2bafa:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2bafc:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2bb00:	f01f f8ac 	bl	4ac5c <nvs_prev_ate>
		if (rc) {
   2bb04:	4605      	mov	r5, r0
   2bb06:	2800      	cmp	r0, #0
   2bb08:	d15a      	bne.n	2bbc0 <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2bb0a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2bb0e:	454b      	cmp	r3, r9
   2bb10:	d005      	beq.n	2bb1e <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   2bb12:	6862      	ldr	r2, [r4, #4]
   2bb14:	9b03      	ldr	r3, [sp, #12]
   2bb16:	429a      	cmp	r2, r3
   2bb18:	d1ed      	bne.n	2baf6 <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   2bb1a:	b9de      	cbnz	r6, 2bb54 <nvs_write+0xa4>
   2bb1c:	e050      	b.n	2bbc0 <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2bb1e:	a904      	add	r1, sp, #16
   2bb20:	4620      	mov	r0, r4
   2bb22:	f01f f863 	bl	4abec <nvs_ate_valid>
   2bb26:	2800      	cmp	r0, #0
   2bb28:	d0f3      	beq.n	2bb12 <nvs_write+0x62>
			if (wlk_ate.len == 0U) {
   2bb2a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   2bb2e:	b186      	cbz	r6, 2bb52 <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   2bb30:	429e      	cmp	r6, r3
   2bb32:	d10f      	bne.n	2bb54 <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
   2bb34:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   2bb38:	ea4f 411b 	mov.w	r1, fp, lsr #16
   2bb3c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   2bb3e:	4401      	add	r1, r0
   2bb40:	4633      	mov	r3, r6
   2bb42:	4642      	mov	r2, r8
   2bb44:	4620      	mov	r0, r4
   2bb46:	f01e ffca 	bl	4aade <nvs_flash_block_cmp>
			if (rc <= 0) {
   2bb4a:	2800      	cmp	r0, #0
   2bb4c:	dc02      	bgt.n	2bb54 <nvs_write+0xa4>
   2bb4e:	4605      	mov	r5, r0
   2bb50:	e036      	b.n	2bbc0 <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
   2bb52:	b3ab      	cbz	r3, 2bbc0 <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2bb54:	2f00      	cmp	r7, #0
   2bb56:	d137      	bne.n	2bbc8 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   2bb58:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2bb5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bb60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bb64:	4650      	mov	r0, sl
   2bb66:	f01c fdb5 	bl	486d4 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   2bb6a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 2bc38 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   2bb6e:	89e3      	ldrh	r3, [r4, #14]
   2bb70:	429d      	cmp	r5, r3
   2bb72:	d057      	beq.n	2bc24 <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2bb74:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2bb78:	18f9      	adds	r1, r7, r3
   2bb7a:	428a      	cmp	r2, r1
   2bb7c:	d327      	bcc.n	2bbce <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2bb7e:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   2bb82:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   2bb84:	23ff      	movs	r3, #255	; 0xff
   2bb86:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   2bb8a:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   2bb8e:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   2bb92:	f01f f80d 	bl	4abb0 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   2bb96:	4632      	mov	r2, r6
   2bb98:	4641      	mov	r1, r8
   2bb9a:	4620      	mov	r0, r4
   2bb9c:	f01f f8e2 	bl	4ad64 <nvs_flash_data_wrt>
	if (rc) {
   2bba0:	4603      	mov	r3, r0
   2bba2:	b938      	cbnz	r0, 2bbb4 <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2bba4:	a906      	add	r1, sp, #24
   2bba6:	4620      	mov	r0, r4
   2bba8:	f01f f8ef 	bl	4ad8a <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   2bbac:	2800      	cmp	r0, #0
   2bbae:	bf14      	ite	ne
   2bbb0:	4603      	movne	r3, r0
   2bbb2:	4633      	moveq	r3, r6
   2bbb4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2bbb6:	4650      	mov	r0, sl
   2bbb8:	f01c fe04 	bl	487c4 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   2bbbc:	9b01      	ldr	r3, [sp, #4]
   2bbbe:	461d      	mov	r5, r3
}
   2bbc0:	4628      	mov	r0, r5
   2bbc2:	b009      	add	sp, #36	; 0x24
   2bbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   2bbc8:	4457      	add	r7, sl
   2bbca:	b2bf      	uxth	r7, r7
   2bbcc:	e7c4      	b.n	2bb58 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2bbce:	2108      	movs	r1, #8
   2bbd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2bbd2:	f01f f801 	bl	4abd8 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2bbd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2bbda:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   2bbde:	2300      	movs	r3, #0
   2bbe0:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2bbe4:	1813      	adds	r3, r2, r0
   2bbe6:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   2bbea:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   2bbec:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   2bbf0:	441a      	add	r2, r3
   2bbf2:	1a12      	subs	r2, r2, r0
   2bbf4:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2bbf6:	a806      	add	r0, sp, #24
   2bbf8:	f01e ffda 	bl	4abb0 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   2bbfc:	a906      	add	r1, sp, #24
   2bbfe:	4620      	mov	r0, r4
   2bc00:	f01f f8c3 	bl	4ad8a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2bc04:	89e0      	ldrh	r0, [r4, #14]
   2bc06:	1d21      	adds	r1, r4, #4
   2bc08:	f01e ffdb 	bl	4abc2 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2bc0c:	6863      	ldr	r3, [r4, #4]
   2bc0e:	ea03 030b 	and.w	r3, r3, fp
   2bc12:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2bc14:	4620      	mov	r0, r4
   2bc16:	f01f f8de 	bl	4add6 <nvs_gc>
		if (rc) {
   2bc1a:	4603      	mov	r3, r0
   2bc1c:	2800      	cmp	r0, #0
   2bc1e:	d1c9      	bne.n	2bbb4 <nvs_write+0x104>
		gc_count++;
   2bc20:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   2bc22:	e7a4      	b.n	2bb6e <nvs_write+0xbe>
			rc = -ENOSPC;
   2bc24:	f06f 031b 	mvn.w	r3, #27
   2bc28:	e7c4      	b.n	2bbb4 <nvs_write+0x104>
		return -EACCES;
   2bc2a:	f06f 050c 	mvn.w	r5, #12
   2bc2e:	e7c7      	b.n	2bbc0 <nvs_write+0x110>
		return -EINVAL;
   2bc30:	f06f 0515 	mvn.w	r5, #21
   2bc34:	e7c4      	b.n	2bbc0 <nvs_write+0x110>
   2bc36:	bf00      	nop
   2bc38:	ffff0000 	.word	0xffff0000

0002bc3c <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2bc3c:	4b0c      	ldr	r3, [pc, #48]	; (2bc70 <class_handler+0x34>)
{
   2bc3e:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2bc40:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bc42:	4e0c      	ldr	r6, [pc, #48]	; (2bc74 <class_handler+0x38>)
   2bc44:	4b0c      	ldr	r3, [pc, #48]	; (2bc78 <class_handler+0x3c>)
   2bc46:	42b3      	cmp	r3, r6
   2bc48:	d303      	bcc.n	2bc52 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   2bc4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bc4e:	bcf0      	pop	{r4, r5, r6, r7}
   2bc50:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   2bc52:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2bc54:	42bd      	cmp	r5, r7
   2bc56:	d309      	bcc.n	2bc6c <class_handler+0x30>
		if (iface->class_handler &&
   2bc58:	691c      	ldr	r4, [r3, #16]
   2bc5a:	b13c      	cbz	r4, 2bc6c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2bc5c:	f895 c002 	ldrb.w	ip, [r5, #2]
   2bc60:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   2bc62:	45ac      	cmp	ip, r5
   2bc64:	d102      	bne.n	2bc6c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   2bc66:	4623      	mov	r3, r4
}
   2bc68:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   2bc6a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bc6c:	3324      	adds	r3, #36	; 0x24
   2bc6e:	e7ea      	b.n	2bc46 <class_handler+0xa>
   2bc70:	200046d8 	.word	0x200046d8
   2bc74:	200016f4 	.word	0x200016f4
   2bc78:	200016d0 	.word	0x200016d0

0002bc7c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bc80:	4c13      	ldr	r4, [pc, #76]	; (2bcd0 <custom_handler+0x54>)
   2bc82:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2bcd4 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2bc86:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2bcd8 <custom_handler+0x5c>
{
   2bc8a:	4605      	mov	r5, r0
   2bc8c:	460e      	mov	r6, r1
   2bc8e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bc90:	4544      	cmp	r4, r8
   2bc92:	d303      	bcc.n	2bc9c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   2bc94:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   2bc9c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2bc9e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2bca2:	429a      	cmp	r2, r3
   2bca4:	d312      	bcc.n	2bccc <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   2bca6:	69a3      	ldr	r3, [r4, #24]
   2bca8:	b183      	cbz	r3, 2bccc <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2bcaa:	7890      	ldrb	r0, [r2, #2]
   2bcac:	7929      	ldrb	r1, [r5, #4]
   2bcae:	4288      	cmp	r0, r1
   2bcb0:	d105      	bne.n	2bcbe <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2bcb2:	463a      	mov	r2, r7
   2bcb4:	4631      	mov	r1, r6
   2bcb6:	4628      	mov	r0, r5
}
   2bcb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   2bcbc:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2bcbe:	7952      	ldrb	r2, [r2, #5]
   2bcc0:	2a01      	cmp	r2, #1
   2bcc2:	d103      	bne.n	2bccc <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   2bcc4:	463a      	mov	r2, r7
   2bcc6:	4631      	mov	r1, r6
   2bcc8:	4628      	mov	r0, r5
   2bcca:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bccc:	3424      	adds	r4, #36	; 0x24
   2bcce:	e7df      	b.n	2bc90 <custom_handler+0x14>
   2bcd0:	200016d0 	.word	0x200016d0
   2bcd4:	200016f4 	.word	0x200016f4
   2bcd8:	200046d8 	.word	0x200046d8

0002bcdc <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bce0:	4c0b      	ldr	r4, [pc, #44]	; (2bd10 <vendor_handler+0x34>)
   2bce2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2bd14 <vendor_handler+0x38>
{
   2bce6:	4605      	mov	r5, r0
   2bce8:	460e      	mov	r6, r1
   2bcea:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bcec:	4544      	cmp	r4, r8
   2bcee:	d302      	bcc.n	2bcf6 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   2bcf0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bcf4:	e009      	b.n	2bd0a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   2bcf6:	6963      	ldr	r3, [r4, #20]
   2bcf8:	b90b      	cbnz	r3, 2bcfe <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bcfa:	3424      	adds	r4, #36	; 0x24
   2bcfc:	e7f6      	b.n	2bcec <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2bcfe:	463a      	mov	r2, r7
   2bd00:	4631      	mov	r1, r6
   2bd02:	4628      	mov	r0, r5
   2bd04:	4798      	blx	r3
   2bd06:	2800      	cmp	r0, #0
   2bd08:	d1f7      	bne.n	2bcfa <vendor_handler+0x1e>
}
   2bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bd0e:	bf00      	nop
   2bd10:	200016d0 	.word	0x200016d0
   2bd14:	200016f4 	.word	0x200016f4

0002bd18 <set_endpoint>:
{
   2bd18:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2bd1a:	7883      	ldrb	r3, [r0, #2]
   2bd1c:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2bd20:	7903      	ldrb	r3, [r0, #4]
   2bd22:	7942      	ldrb	r2, [r0, #5]
   2bd24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2bd28:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2bd2c:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   2bd2e:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2bd30:	f003 0303 	and.w	r3, r3, #3
   2bd34:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   2bd38:	f018 fe94 	bl	44a64 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2bd3c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2bd40:	d004      	beq.n	2bd4c <set_endpoint+0x34>
	} else if (ret) {
   2bd42:	b118      	cbz	r0, 2bd4c <set_endpoint+0x34>
		return false;
   2bd44:	2000      	movs	r0, #0
}
   2bd46:	b003      	add	sp, #12
   2bd48:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2bd4c:	f89d 0000 	ldrb.w	r0, [sp]
   2bd50:	f018 ff0e 	bl	44b70 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   2bd54:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2bd58:	d001      	beq.n	2bd5e <set_endpoint+0x46>
	} else if (ret) {
   2bd5a:	2800      	cmp	r0, #0
   2bd5c:	d1f2      	bne.n	2bd44 <set_endpoint+0x2c>
	usb_dev.configured = true;
   2bd5e:	4b02      	ldr	r3, [pc, #8]	; (2bd68 <set_endpoint+0x50>)
   2bd60:	2001      	movs	r0, #1
   2bd62:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   2bd66:	e7ee      	b.n	2bd46 <set_endpoint+0x2e>
   2bd68:	200046d8 	.word	0x200046d8

0002bd6c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   2bd6c:	4802      	ldr	r0, [pc, #8]	; (2bd78 <usb_reset_alt_setting+0xc>)
   2bd6e:	2208      	movs	r2, #8
   2bd70:	2100      	movs	r1, #0
   2bd72:	f020 bcab 	b.w	4c6cc <memset>
   2bd76:	bf00      	nop
   2bd78:	20004793 	.word	0x20004793

0002bd7c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   2bd7c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bd7e:	4b0b      	ldr	r3, [pc, #44]	; (2bdac <is_ep_valid.part.0+0x30>)
   2bd80:	4c0b      	ldr	r4, [pc, #44]	; (2bdb0 <is_ep_valid.part.0+0x34>)
   2bd82:	42a3      	cmp	r3, r4
   2bd84:	d301      	bcc.n	2bd8a <is_ep_valid.part.0+0xe>
	return false;
   2bd86:	2000      	movs	r0, #0
}
   2bd88:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   2bd8a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2bd8c:	7f1e      	ldrb	r6, [r3, #28]
   2bd8e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   2bd90:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2bd92:	b2d5      	uxtb	r5, r2
   2bd94:	42ae      	cmp	r6, r5
   2bd96:	d801      	bhi.n	2bd9c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bd98:	3324      	adds	r3, #36	; 0x24
   2bd9a:	e7f2      	b.n	2bd82 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   2bd9c:	3201      	adds	r2, #1
   2bd9e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   2bda2:	4285      	cmp	r5, r0
   2bda4:	d1f5      	bne.n	2bd92 <is_ep_valid.part.0+0x16>
				return true;
   2bda6:	2001      	movs	r0, #1
   2bda8:	e7ee      	b.n	2bd88 <is_ep_valid.part.0+0xc>
   2bdaa:	bf00      	nop
   2bdac:	200016d0 	.word	0x200016d0
   2bdb0:	200016f4 	.word	0x200016f4

0002bdb4 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   2bdb4:	4809      	ldr	r0, [pc, #36]	; (2bddc <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   2bdb6:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   2bdb8:	7803      	ldrb	r3, [r0, #0]
   2bdba:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   2bdbe:	330a      	adds	r3, #10
   2bdc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   2bdc4:	b13b      	cbz	r3, 2bdd6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   2bdc6:	f100 0208 	add.w	r2, r0, #8
   2bdca:	f100 0110 	add.w	r1, r0, #16
   2bdce:	4798      	blx	r3
   2bdd0:	43c0      	mvns	r0, r0
   2bdd2:	0fc0      	lsrs	r0, r0, #31
}
   2bdd4:	bd08      	pop	{r3, pc}
		return false;
   2bdd6:	4618      	mov	r0, r3
   2bdd8:	e7fc      	b.n	2bdd4 <usb_handle_request.constprop.0+0x20>
   2bdda:	bf00      	nop
   2bddc:	200046d8 	.word	0x200046d8

0002bde0 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   2bde0:	2804      	cmp	r0, #4
{
   2bde2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bde6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2be70 <forward_status_cb+0x90>
   2bdea:	4604      	mov	r4, r0
   2bdec:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   2bdee:	d10e      	bne.n	2be0e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
   2bdf0:	f7ff ffbc 	bl	2bd6c <usb_reset_alt_setting>
		if (usb_dev.configured) {
   2bdf4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2be74 <forward_status_cb+0x94>
   2bdf8:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
   2bdfc:	b15b      	cbz	r3, 2be16 <forward_status_cb+0x36>
			usb_cancel_transfers();
   2bdfe:	f000 fd1f 	bl	2c840 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   2be02:	2c04      	cmp	r4, #4
   2be04:	d001      	beq.n	2be0a <forward_status_cb+0x2a>
   2be06:	2c01      	cmp	r4, #1
   2be08:	d105      	bne.n	2be16 <forward_status_cb+0x36>
   2be0a:	4d1b      	ldr	r5, [pc, #108]	; (2be78 <forward_status_cb+0x98>)
   2be0c:	e016      	b.n	2be3c <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2be0e:	2805      	cmp	r0, #5
   2be10:	d0f0      	beq.n	2bdf4 <forward_status_cb+0x14>
   2be12:	2801      	cmp	r0, #1
   2be14:	d0ee      	beq.n	2bdf4 <forward_status_cb+0x14>
   2be16:	4d18      	ldr	r5, [pc, #96]	; (2be78 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2be18:	4545      	cmp	r5, r8
   2be1a:	d31e      	bcc.n	2be5a <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
   2be1c:	4b15      	ldr	r3, [pc, #84]	; (2be74 <forward_status_cb+0x94>)
   2be1e:	6a1b      	ldr	r3, [r3, #32]
   2be20:	b31b      	cbz	r3, 2be6a <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
   2be22:	4631      	mov	r1, r6
   2be24:	4620      	mov	r0, r4
}
   2be26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   2be2a:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
   2be2c:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2be30:	2700      	movs	r7, #0
   2be32:	7f2a      	ldrb	r2, [r5, #28]
   2be34:	b2fb      	uxtb	r3, r7
   2be36:	429a      	cmp	r2, r3
   2be38:	d803      	bhi.n	2be42 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2be3a:	3524      	adds	r5, #36	; 0x24
   2be3c:	4545      	cmp	r5, r8
   2be3e:	d3f5      	bcc.n	2be2c <forward_status_cb+0x4c>
   2be40:	e007      	b.n	2be52 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
   2be42:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
   2be46:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   2be48:	7918      	ldrb	r0, [r3, #4]
   2be4a:	f018 febb 	bl	44bc4 <usb_dc_ep_disable>
			if (ret < 0) {
   2be4e:	2800      	cmp	r0, #0
   2be50:	daef      	bge.n	2be32 <forward_status_cb+0x52>
				usb_dev.configured = false;
   2be52:	2300      	movs	r3, #0
   2be54:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
   2be58:	e7dd      	b.n	2be16 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
   2be5a:	68eb      	ldr	r3, [r5, #12]
   2be5c:	b11b      	cbz	r3, 2be66 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
   2be5e:	4632      	mov	r2, r6
   2be60:	4621      	mov	r1, r4
   2be62:	4628      	mov	r0, r5
   2be64:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2be66:	3524      	adds	r5, #36	; 0x24
   2be68:	e7d6      	b.n	2be18 <forward_status_cb+0x38>
}
   2be6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2be6e:	bf00      	nop
   2be70:	200016f4 	.word	0x200016f4
   2be74:	200046d8 	.word	0x200046d8
   2be78:	200016d0 	.word	0x200016d0

0002be7c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2be7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   2be7e:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   2be80:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2be82:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   2be84:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   2be88:	d007      	beq.n	2be9a <usb_halt_endpoint_req.isra.0+0x1e>
   2be8a:	4620      	mov	r0, r4
   2be8c:	f7ff ff76 	bl	2bd7c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2be90:	b188      	cbz	r0, 2beb6 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
   2be92:	4b0f      	ldr	r3, [pc, #60]	; (2bed0 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2be94:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   2be98:	b168      	cbz	r0, 2beb6 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
   2be9a:	4e0d      	ldr	r6, [pc, #52]	; (2bed0 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
   2be9c:	4620      	mov	r0, r4
		if (halt) {
   2be9e:	b165      	cbz	r5, 2beba <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
   2bea0:	f018 fe02 	bl	44aa8 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   2bea4:	69f3      	ldr	r3, [r6, #28]
   2bea6:	b90b      	cbnz	r3, 2beac <usb_halt_endpoint_req.isra.0+0x30>
		return true;
   2bea8:	2001      	movs	r0, #1
   2beaa:	e004      	b.n	2beb6 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   2beac:	2008      	movs	r0, #8
   2beae:	f10d 0107 	add.w	r1, sp, #7
   2beb2:	4798      	blx	r3
		return true;
   2beb4:	4628      	mov	r0, r5
}
   2beb6:	b002      	add	sp, #8
   2beb8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   2beba:	f018 fe1d 	bl	44af8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   2bebe:	69f3      	ldr	r3, [r6, #28]
   2bec0:	2b00      	cmp	r3, #0
   2bec2:	d0f1      	beq.n	2bea8 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2bec4:	f10d 0107 	add.w	r1, sp, #7
   2bec8:	2009      	movs	r0, #9
   2beca:	4798      	blx	r3
   2becc:	e7ec      	b.n	2bea8 <usb_halt_endpoint_req.isra.0+0x2c>
   2bece:	bf00      	nop
   2bed0:	200046d8 	.word	0x200046d8

0002bed4 <usb_handle_standard_request>:
{
   2bed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   2bed8:	4ea8      	ldr	r6, [pc, #672]	; (2c17c <usb_handle_standard_request+0x2a8>)
   2beda:	69b3      	ldr	r3, [r6, #24]
{
   2bedc:	4605      	mov	r5, r0
   2bede:	460f      	mov	r7, r1
   2bee0:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
   2bee2:	b963      	cbnz	r3, 2befe <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
   2bee4:	7828      	ldrb	r0, [r5, #0]
   2bee6:	f000 001f 	and.w	r0, r0, #31
   2beea:	2801      	cmp	r0, #1
   2beec:	f000 80a6 	beq.w	2c03c <usb_handle_standard_request+0x168>
   2bef0:	2802      	cmp	r0, #2
   2bef2:	f000 810e 	beq.w	2c112 <usb_handle_standard_request+0x23e>
   2bef6:	b138      	cbz	r0, 2bf08 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
   2bef8:	f06f 0015 	mvn.w	r0, #21
   2befc:	e095      	b.n	2c02a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   2befe:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   2bf00:	2800      	cmp	r0, #0
   2bf02:	d1ef      	bne.n	2bee4 <usb_handle_standard_request+0x10>
	int rc = 0;
   2bf04:	2000      	movs	r0, #0
   2bf06:	e090      	b.n	2c02a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
   2bf08:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   2bf0c:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2bf0e:	2a00      	cmp	r2, #0
   2bf10:	da31      	bge.n	2bf76 <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
   2bf12:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
   2bf14:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
   2bf18:	d010      	beq.n	2bf3c <usb_handle_standard_request+0x68>
   2bf1a:	2b08      	cmp	r3, #8
   2bf1c:	d025      	beq.n	2bf6a <usb_handle_standard_request+0x96>
   2bf1e:	2b00      	cmp	r3, #0
   2bf20:	d1ea      	bne.n	2bef8 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2bf22:	2101      	movs	r1, #1
	data[1] = 0U;
   2bf24:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2bf26:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
   2bf28:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
   2bf2c:	2900      	cmp	r1, #0
   2bf2e:	bf18      	it	ne
   2bf30:	2302      	movne	r3, #2
   2bf32:	f043 0301 	orr.w	r3, r3, #1
   2bf36:	7013      	strb	r3, [r2, #0]
		*len = 2;
   2bf38:	2302      	movs	r3, #2
   2bf3a:	e01a      	b.n	2bf72 <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
   2bf3c:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2bf3e:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2bf40:	1f11      	subs	r1, r2, #4
   2bf42:	2901      	cmp	r1, #1
   2bf44:	d9d8      	bls.n	2bef8 <usb_handle_standard_request+0x24>
   2bf46:	2a07      	cmp	r2, #7
   2bf48:	d8d6      	bhi.n	2bef8 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   2bf4a:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
   2bf4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
   2bf4e:	781c      	ldrb	r4, [r3, #0]
   2bf50:	2c00      	cmp	r4, #0
   2bf52:	d0d1      	beq.n	2bef8 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
   2bf54:	785d      	ldrb	r5, [r3, #1]
   2bf56:	4295      	cmp	r5, r2
   2bf58:	d103      	bne.n	2bf62 <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
   2bf5a:	4281      	cmp	r1, r0
   2bf5c:	f000 8112 	beq.w	2c184 <usb_handle_standard_request+0x2b0>
			cur_index++;
   2bf60:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   2bf62:	4423      	add	r3, r4
   2bf64:	e7f3      	b.n	2bf4e <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
   2bf66:	781b      	ldrb	r3, [r3, #0]
   2bf68:	e112      	b.n	2c190 <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
   2bf6a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2bf6e:	7013      	strb	r3, [r2, #0]
			*len = 1;
   2bf70:	2301      	movs	r3, #1
		*len = 2;
   2bf72:	603b      	str	r3, [r7, #0]
		return true;
   2bf74:	e059      	b.n	2c02a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
   2bf76:	3b01      	subs	r3, #1
   2bf78:	2b08      	cmp	r3, #8
   2bf7a:	d8bd      	bhi.n	2bef8 <usb_handle_standard_request+0x24>
   2bf7c:	a201      	add	r2, pc, #4	; (adr r2, 2bf84 <usb_handle_standard_request+0xb0>)
   2bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2bf82:	bf00      	nop
   2bf84:	0002c01d 	.word	0x0002c01d
   2bf88:	0002bef9 	.word	0x0002bef9
   2bf8c:	0002c02f 	.word	0x0002c02f
   2bf90:	0002bef9 	.word	0x0002bef9
   2bf94:	0002bfa9 	.word	0x0002bfa9
   2bf98:	0002bef9 	.word	0x0002bef9
   2bf9c:	0002bef9 	.word	0x0002bef9
   2bfa0:	0002bef9 	.word	0x0002bef9
   2bfa4:	0002bfb5 	.word	0x0002bfb5
			return !usb_dc_set_address(setup->wValue);
   2bfa8:	78a8      	ldrb	r0, [r5, #2]
   2bfaa:	f018 fd49 	bl	44a40 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2bfae:	2800      	cmp	r0, #0
   2bfb0:	d0a8      	beq.n	2bf04 <usb_handle_standard_request+0x30>
   2bfb2:	e7a1      	b.n	2bef8 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
   2bfb4:	886c      	ldrh	r4, [r5, #2]
   2bfb6:	b144      	cbz	r4, 2bfca <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
   2bfb8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2bfbc:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
   2bfbe:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   2bfc0:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
   2bfc2:	783c      	ldrb	r4, [r7, #0]
   2bfc4:	b96c      	cbnz	r4, 2bfe2 <usb_handle_standard_request+0x10e>
	if (found) {
   2bfc6:	2800      	cmp	r0, #0
   2bfc8:	d096      	beq.n	2bef8 <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
   2bfca:	f7ff fecf 	bl	2bd6c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   2bfce:	886b      	ldrh	r3, [r5, #2]
   2bfd0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   2bfd4:	69f3      	ldr	r3, [r6, #28]
   2bfd6:	2b00      	cmp	r3, #0
   2bfd8:	d094      	beq.n	2bf04 <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2bfda:	4969      	ldr	r1, [pc, #420]	; (2c180 <usb_handle_standard_request+0x2ac>)
   2bfdc:	2003      	movs	r0, #3
   2bfde:	4798      	blx	r3
   2bfe0:	e790      	b.n	2bf04 <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
   2bfe2:	787b      	ldrb	r3, [r7, #1]
   2bfe4:	2b04      	cmp	r3, #4
   2bfe6:	d00c      	beq.n	2c002 <usb_handle_standard_request+0x12e>
   2bfe8:	2b05      	cmp	r3, #5
   2bfea:	d00d      	beq.n	2c008 <usb_handle_standard_request+0x134>
   2bfec:	2b02      	cmp	r3, #2
   2bfee:	d105      	bne.n	2bffc <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
   2bff0:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
   2bff4:	886a      	ldrh	r2, [r5, #2]
				found = true;
   2bff6:	4542      	cmp	r2, r8
   2bff8:	bf08      	it	eq
   2bffa:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   2bffc:	783b      	ldrb	r3, [r7, #0]
   2bffe:	441f      	add	r7, r3
   2c000:	e7df      	b.n	2bfc2 <usb_handle_standard_request+0xee>
			cur_alt_setting =
   2c002:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
   2c006:	e7f9      	b.n	2bffc <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
   2c008:	886b      	ldrh	r3, [r5, #2]
   2c00a:	4543      	cmp	r3, r8
   2c00c:	d1f6      	bne.n	2bffc <usb_handle_standard_request+0x128>
   2c00e:	f1b9 0f00 	cmp.w	r9, #0
   2c012:	d1f3      	bne.n	2bffc <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   2c014:	4638      	mov	r0, r7
   2c016:	f7ff fe7f 	bl	2bd18 <set_endpoint>
			break;
   2c01a:	e7ef      	b.n	2bffc <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2c01c:	886b      	ldrh	r3, [r5, #2]
   2c01e:	2b01      	cmp	r3, #1
   2c020:	f47f af6a 	bne.w	2bef8 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
   2c024:	2000      	movs	r0, #0
   2c026:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
   2c02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2c02e:	886b      	ldrh	r3, [r5, #2]
   2c030:	2b01      	cmp	r3, #1
   2c032:	f47f af61 	bne.w	2bef8 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
   2c036:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   2c03a:	e763      	b.n	2bf04 <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
   2c03c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2c040:	2b00      	cmp	r3, #0
   2c042:	f43f af59 	beq.w	2bef8 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2c046:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2c048:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   2c04c:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2c04e:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
   2c050:	781a      	ldrb	r2, [r3, #0]
   2c052:	2a00      	cmp	r2, #0
   2c054:	f43f af50 	beq.w	2bef8 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   2c058:	7859      	ldrb	r1, [r3, #1]
   2c05a:	2902      	cmp	r1, #2
   2c05c:	d104      	bne.n	2c068 <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
   2c05e:	f893 e004 	ldrb.w	lr, [r3, #4]
   2c062:	4586      	cmp	lr, r0
   2c064:	f200 8096 	bhi.w	2c194 <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
   2c068:	4413      	add	r3, r2
   2c06a:	e7f1      	b.n	2c050 <usb_handle_standard_request+0x17c>
			data[0] = 0U;
   2c06c:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
   2c06e:	7050      	strb	r0, [r2, #1]
			*len = 2;
   2c070:	6039      	str	r1, [r7, #0]
			return true;
   2c072:	e7da      	b.n	2c02a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
   2c074:	440c      	add	r4, r1
   2c076:	e09b      	b.n	2c1b0 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2c078:	280b      	cmp	r0, #11
   2c07a:	f47f af3d 	bne.w	2bef8 <usb_handle_standard_request+0x24>
	bool ret = false;
   2c07e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   2c080:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   2c084:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
   2c086:	46b9      	mov	r9, r7
   2c088:	e006      	b.n	2c098 <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
   2c08a:	7863      	ldrb	r3, [r4, #1]
   2c08c:	2b04      	cmp	r3, #4
   2c08e:	d00f      	beq.n	2c0b0 <usb_handle_standard_request+0x1dc>
   2c090:	2b05      	cmp	r3, #5
   2c092:	d022      	beq.n	2c0da <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
   2c094:	7823      	ldrb	r3, [r4, #0]
   2c096:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   2c098:	7823      	ldrb	r3, [r4, #0]
   2c09a:	2b00      	cmp	r3, #0
   2c09c:	d1f5      	bne.n	2c08a <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
   2c09e:	69f3      	ldr	r3, [r6, #28]
   2c0a0:	b113      	cbz	r3, 2c0a8 <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   2c0a2:	4649      	mov	r1, r9
   2c0a4:	2007      	movs	r0, #7
   2c0a6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2c0a8:	2f00      	cmp	r7, #0
   2c0aa:	f47f af2b 	bne.w	2bf04 <usb_handle_standard_request+0x30>
   2c0ae:	e723      	b.n	2bef8 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2c0b0:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
   2c0b4:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   2c0b6:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
   2c0ba:	4592      	cmp	sl, r2
   2c0bc:	4653      	mov	r3, sl
   2c0be:	d1e9      	bne.n	2c094 <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
   2c0c0:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
   2c0c2:	4588      	cmp	r8, r1
   2c0c4:	fa1f f288 	uxth.w	r2, r8
   2c0c8:	d1e4      	bne.n	2c094 <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2c0ca:	2b07      	cmp	r3, #7
   2c0cc:	d81e      	bhi.n	2c10c <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
   2c0ce:	4433      	add	r3, r6
		return true;
   2c0d0:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
   2c0d2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
   2c0d6:	2701      	movs	r7, #1
   2c0d8:	e7dc      	b.n	2c094 <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
   2c0da:	88ab      	ldrh	r3, [r5, #4]
   2c0dc:	4553      	cmp	r3, sl
   2c0de:	d1d9      	bne.n	2c094 <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
   2c0e0:	78ab      	ldrb	r3, [r5, #2]
   2c0e2:	4543      	cmp	r3, r8
   2c0e4:	d00d      	beq.n	2c102 <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
   2c0e6:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2c0e8:	4638      	mov	r0, r7
   2c0ea:	f000 fb8b 	bl	2c804 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   2c0ee:	4638      	mov	r0, r7
   2c0f0:	f018 fd68 	bl	44bc4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2c0f4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2c0f8:	d0ed      	beq.n	2c0d6 <usb_handle_standard_request+0x202>
	} else if (ret) {
   2c0fa:	fab0 f780 	clz	r7, r0
   2c0fe:	097f      	lsrs	r7, r7, #5
   2c100:	e7c8      	b.n	2c094 <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
   2c102:	4620      	mov	r0, r4
   2c104:	f7ff fe08 	bl	2bd18 <set_endpoint>
   2c108:	4607      	mov	r7, r0
   2c10a:	e7c3      	b.n	2c094 <usb_handle_standard_request+0x1c0>
   2c10c:	46a1      	mov	r9, r4
	return false;
   2c10e:	2700      	movs	r7, #0
   2c110:	e7c0      	b.n	2c094 <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
   2c112:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   2c116:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2c118:	2a00      	cmp	r2, #0
   2c11a:	da19      	bge.n	2c150 <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2c11c:	2b00      	cmp	r3, #0
   2c11e:	f47f aeeb 	bne.w	2bef8 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
   2c122:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
   2c124:	0663      	lsls	r3, r4, #25
   2c126:	d00a      	beq.n	2c13e <usb_handle_standard_request+0x26a>
   2c128:	4620      	mov	r0, r4
   2c12a:	f7ff fe27 	bl	2bd7c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2c12e:	2800      	cmp	r0, #0
   2c130:	f43f aee2 	beq.w	2bef8 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2c134:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2c138:	2b00      	cmp	r3, #0
   2c13a:	f43f aedd 	beq.w	2bef8 <usb_handle_standard_request+0x24>
   2c13e:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
   2c142:	4620      	mov	r0, r4
   2c144:	4629      	mov	r1, r5
   2c146:	f018 fcf7 	bl	44b38 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2c14a:	2000      	movs	r0, #0
   2c14c:	7068      	strb	r0, [r5, #1]
   2c14e:	e6f3      	b.n	2bf38 <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
   2c150:	2b01      	cmp	r3, #1
   2c152:	d008      	beq.n	2c166 <usb_handle_standard_request+0x292>
   2c154:	2b03      	cmp	r3, #3
   2c156:	f47f aecf 	bne.w	2bef8 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2c15a:	886b      	ldrh	r3, [r5, #2]
   2c15c:	2b00      	cmp	r3, #0
   2c15e:	f47f aecb 	bne.w	2bef8 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   2c162:	2101      	movs	r1, #1
   2c164:	e003      	b.n	2c16e <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2c166:	8869      	ldrh	r1, [r5, #2]
   2c168:	2900      	cmp	r1, #0
   2c16a:	f47f aec5 	bne.w	2bef8 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   2c16e:	88a8      	ldrh	r0, [r5, #4]
   2c170:	f7ff fe84 	bl	2be7c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2c174:	2800      	cmp	r0, #0
   2c176:	f47f aec5 	bne.w	2bf04 <usb_handle_standard_request+0x30>
   2c17a:	e6bd      	b.n	2bef8 <usb_handle_standard_request+0x24>
   2c17c:	200046d8 	.word	0x200046d8
   2c180:	20004792 	.word	0x20004792
		if (type == USB_DESC_CONFIGURATION) {
   2c184:	2a02      	cmp	r2, #2
		*data = p;
   2c186:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
   2c18a:	f47f aeec 	bne.w	2bf66 <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
   2c18e:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
   2c190:	603b      	str	r3, [r7, #0]
   2c192:	e6b7      	b.n	2bf04 <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
   2c194:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
   2c198:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2c19a:	2b00      	cmp	r3, #0
   2c19c:	f6bf af6c 	bge.w	2c078 <usb_handle_standard_request+0x1a4>
   2c1a0:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
   2c1a4:	2800      	cmp	r0, #0
   2c1a6:	f43f af61 	beq.w	2c06c <usb_handle_standard_request+0x198>
   2c1aa:	280a      	cmp	r0, #10
   2c1ac:	f47f aea4 	bne.w	2bef8 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
   2c1b0:	7821      	ldrb	r1, [r4, #0]
   2c1b2:	2900      	cmp	r1, #0
   2c1b4:	f43f aea0 	beq.w	2bef8 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2c1b8:	7863      	ldrb	r3, [r4, #1]
   2c1ba:	2b04      	cmp	r3, #4
   2c1bc:	f47f af5a 	bne.w	2c074 <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2c1c0:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
   2c1c2:	459c      	cmp	ip, r3
   2c1c4:	f47f af56 	bne.w	2c074 <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2c1c8:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   2c1ca:	bf96      	itet	ls
   2c1cc:	199b      	addls	r3, r3, r6
	return 0;
   2c1ce:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   2c1d0:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2c1d4:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2c1d6:	2301      	movs	r3, #1
   2c1d8:	e7da      	b.n	2c190 <usb_handle_standard_request+0x2bc>
   2c1da:	bf00      	nop

0002c1dc <usb_data_to_host>:
{
   2c1dc:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   2c1de:	4c13      	ldr	r4, [pc, #76]	; (2c22c <usb_data_to_host+0x50>)
   2c1e0:	7d23      	ldrb	r3, [r4, #20]
   2c1e2:	b9cb      	cbnz	r3, 2c218 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   2c1e4:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2c1e6:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2c1e8:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2c1ea:	ab01      	add	r3, sp, #4
   2c1ec:	2080      	movs	r0, #128	; 0x80
   2c1ee:	f01e ff09 	bl	4b004 <usb_write>
		usb_dev.data_buf += chunk;
   2c1f2:	9a01      	ldr	r2, [sp, #4]
   2c1f4:	68a3      	ldr	r3, [r4, #8]
   2c1f6:	4413      	add	r3, r2
   2c1f8:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2c1fa:	68e3      	ldr	r3, [r4, #12]
   2c1fc:	1a9b      	subs	r3, r3, r2
   2c1fe:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   2c200:	b943      	cbnz	r3, 2c214 <usb_data_to_host+0x38>
   2c202:	b13a      	cbz	r2, 2c214 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   2c204:	6923      	ldr	r3, [r4, #16]
   2c206:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   2c208:	429a      	cmp	r2, r3
   2c20a:	dd03      	ble.n	2c214 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   2c20c:	069b      	lsls	r3, r3, #26
   2c20e:	d101      	bne.n	2c214 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   2c210:	2301      	movs	r3, #1
   2c212:	7523      	strb	r3, [r4, #20]
}
   2c214:	b002      	add	sp, #8
   2c216:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   2c218:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2c21a:	461a      	mov	r2, r3
   2c21c:	4619      	mov	r1, r3
   2c21e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   2c220:	7523      	strb	r3, [r4, #20]
}
   2c222:	b002      	add	sp, #8
   2c224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2c228:	f018 bcf2 	b.w	44c10 <usb_dc_ep_write>
   2c22c:	200046d8 	.word	0x200046d8

0002c230 <usb_handle_control_transfer>:
{
   2c230:	b530      	push	{r4, r5, lr}
   2c232:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   2c234:	2300      	movs	r3, #0
{
   2c236:	4602      	mov	r2, r0
   2c238:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   2c23a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   2c23c:	2800      	cmp	r0, #0
   2c23e:	d15f      	bne.n	2c300 <usb_handle_control_transfer+0xd0>
   2c240:	2900      	cmp	r1, #0
   2c242:	d13c      	bne.n	2c2be <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   2c244:	2208      	movs	r2, #8
   2c246:	460b      	mov	r3, r1
   2c248:	eb0d 0102 	add.w	r1, sp, r2
   2c24c:	f024 fafe 	bl	5084c <usb_dc_ep_read>
   2c250:	2800      	cmp	r0, #0
   2c252:	da04      	bge.n	2c25e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2c254:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2c256:	f018 fc27 	bl	44aa8 <usb_dc_ep_set_stall>
}
   2c25a:	b005      	add	sp, #20
   2c25c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2c25e:	4c2d      	ldr	r4, [pc, #180]	; (2c314 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
   2c260:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
   2c264:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
   2c268:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   2c26a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2c26e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2c270:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
   2c274:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2c276:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2c278:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2c27c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2c280:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
   2c282:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
   2c284:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
   2c288:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
   2c28a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2c28c:	d40a      	bmi.n	2c2a4 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2c28e:	2b80      	cmp	r3, #128	; 0x80
   2c290:	d904      	bls.n	2c29c <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2c292:	2080      	movs	r0, #128	; 0x80
   2c294:	f018 fc08 	bl	44aa8 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2c298:	2000      	movs	r0, #0
   2c29a:	e7dc      	b.n	2c256 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2c29c:	b113      	cbz	r3, 2c2a4 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
   2c29e:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   2c2a2:	e7da      	b.n	2c25a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2c2a4:	f7ff fd86 	bl	2bdb4 <usb_handle_request.constprop.0>
   2c2a8:	2800      	cmp	r0, #0
   2c2aa:	d0d3      	beq.n	2c254 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   2c2ac:	88e2      	ldrh	r2, [r4, #6]
   2c2ae:	6923      	ldr	r3, [r4, #16]
   2c2b0:	429a      	cmp	r2, r3
   2c2b2:	bfd4      	ite	le
   2c2b4:	60e2      	strle	r2, [r4, #12]
   2c2b6:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2c2b8:	f7ff ff90 	bl	2c1dc <usb_data_to_host>
   2c2bc:	e7cd      	b.n	2c25a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   2c2be:	4c15      	ldr	r4, [pc, #84]	; (2c314 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2c2c0:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2c2c4:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2c2c6:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2c2c8:	dc04      	bgt.n	2c2d4 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2c2ca:	f024 fabf 	bl	5084c <usb_dc_ep_read>
   2c2ce:	2800      	cmp	r0, #0
   2c2d0:	dac3      	bge.n	2c25a <usb_handle_control_transfer+0x2a>
   2c2d2:	e7bf      	b.n	2c254 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2c2d4:	462a      	mov	r2, r5
   2c2d6:	f024 fab9 	bl	5084c <usb_dc_ep_read>
   2c2da:	2800      	cmp	r0, #0
   2c2dc:	dbd9      	blt.n	2c292 <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
   2c2de:	9901      	ldr	r1, [sp, #4]
   2c2e0:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2c2e2:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
   2c2e4:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
   2c2e6:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
   2c2e8:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2c2ea:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   2c2ec:	2b00      	cmp	r3, #0
   2c2ee:	d1b4      	bne.n	2c25a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2c2f0:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2c2f4:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   2c2f6:	f7ff fd5d 	bl	2bdb4 <usb_handle_request.constprop.0>
   2c2fa:	2800      	cmp	r0, #0
   2c2fc:	d1dc      	bne.n	2c2b8 <usb_handle_control_transfer+0x88>
   2c2fe:	e7a9      	b.n	2c254 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   2c300:	2880      	cmp	r0, #128	; 0x80
   2c302:	d1aa      	bne.n	2c25a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   2c304:	4b03      	ldr	r3, [pc, #12]	; (2c314 <usb_handle_control_transfer+0xe4>)
   2c306:	68da      	ldr	r2, [r3, #12]
   2c308:	2a00      	cmp	r2, #0
   2c30a:	d1d5      	bne.n	2c2b8 <usb_handle_control_transfer+0x88>
   2c30c:	7d1b      	ldrb	r3, [r3, #20]
   2c30e:	2b00      	cmp	r3, #0
   2c310:	d1d2      	bne.n	2c2b8 <usb_handle_control_transfer+0x88>
   2c312:	e7a2      	b.n	2c25a <usb_handle_control_transfer+0x2a>
   2c314:	200046d8 	.word	0x200046d8

0002c318 <usb_wakeup_request>:
	return usb_dev.remote_wakeup;
   2c318:	4b04      	ldr	r3, [pc, #16]	; (2c32c <usb_wakeup_request+0x14>)
		if (usb_get_remote_wakeup_status()) {
   2c31a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   2c31e:	b10b      	cbz	r3, 2c324 <usb_wakeup_request+0xc>
			return usb_dc_wakeup_request();
   2c320:	f024 baa3 	b.w	5086a <usb_dc_wakeup_request>
}
   2c324:	f06f 000c 	mvn.w	r0, #12
   2c328:	4770      	bx	lr
   2c32a:	bf00      	nop
   2c32c:	200046d8 	.word	0x200046d8

0002c330 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   2c330:	4b05      	ldr	r3, [pc, #20]	; (2c348 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   2c332:	4a06      	ldr	r2, [pc, #24]	; (2c34c <usb_set_config+0x1c>)
   2c334:	629a      	str	r2, [r3, #40]	; 0x28
   2c336:	4a06      	ldr	r2, [pc, #24]	; (2c350 <usb_set_config+0x20>)
   2c338:	62da      	str	r2, [r3, #44]	; 0x2c
   2c33a:	4a06      	ldr	r2, [pc, #24]	; (2c354 <usb_set_config+0x24>)
   2c33c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   2c33e:	4a06      	ldr	r2, [pc, #24]	; (2c358 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   2c340:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   2c342:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   2c344:	2000      	movs	r0, #0
   2c346:	4770      	bx	lr
   2c348:	200046d8 	.word	0x200046d8
   2c34c:	0002bed5 	.word	0x0002bed5
   2c350:	0002bc3d 	.word	0x0002bc3d
   2c354:	0002bcdd 	.word	0x0002bcdd
   2c358:	0002bc7d 	.word	0x0002bc7d

0002c35c <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   2c35c:	4b08      	ldr	r3, [pc, #32]	; (2c380 <usb_device_init+0x24>)
{
   2c35e:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   2c360:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   2c364:	b934      	cbnz	r4, 2c374 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   2c366:	f000 f9a3 	bl	2c6b0 <usb_get_device_descriptor>
	if (!device_descriptor) {
   2c36a:	b130      	cbz	r0, 2c37a <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   2c36c:	f7ff ffe0 	bl	2c330 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   2c370:	4620      	mov	r0, r4
}
   2c372:	bd10      	pop	{r4, pc}
		return -EALREADY;
   2c374:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2c378:	e7fb      	b.n	2c372 <usb_device_init+0x16>
		return -1;
   2c37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c37e:	e7f8      	b.n	2c372 <usb_device_init+0x16>
   2c380:	200046d8 	.word	0x200046d8

0002c384 <usb_enable>:
{
   2c384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c388:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2c38a:	4d35      	ldr	r5, [pc, #212]	; (2c460 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2c38c:	4835      	ldr	r0, [pc, #212]	; (2c464 <usb_enable+0xe0>)
   2c38e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c396:	f01c f99d 	bl	486d4 <z_impl_k_mutex_lock>
   2c39a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2c39e:	2e00      	cmp	r6, #0
   2c3a0:	d15b      	bne.n	2c45a <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   2c3a2:	4831      	ldr	r0, [pc, #196]	; (2c468 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   2c3a4:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2c3a6:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2c3a8:	f018 fd48 	bl	44e3c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   2c3ac:	f018 fb0a 	bl	449c4 <usb_dc_attach>
	if (ret < 0) {
   2c3b0:	1e04      	subs	r4, r0, #0
   2c3b2:	db36      	blt.n	2c422 <usb_enable+0x9e>
	ret = usb_transfer_init();
   2c3b4:	f000 fa6c 	bl	2c890 <usb_transfer_init>
	if (ret < 0) {
   2c3b8:	1e04      	subs	r4, r0, #0
   2c3ba:	db32      	blt.n	2c422 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2c3bc:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   2c3be:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2c3c0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   2c3c4:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2c3c8:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2c3cc:	f018 fb4a 	bl	44a64 <usb_dc_ep_configure>
	if (ret < 0) {
   2c3d0:	1e04      	subs	r4, r0, #0
   2c3d2:	db26      	blt.n	2c422 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2c3d4:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2c3d6:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2c3d8:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2c3dc:	f018 fb42 	bl	44a64 <usb_dc_ep_configure>
	if (ret < 0) {
   2c3e0:	1e04      	subs	r4, r0, #0
   2c3e2:	db1e      	blt.n	2c422 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   2c3e4:	4921      	ldr	r1, [pc, #132]	; (2c46c <usb_enable+0xe8>)
   2c3e6:	4630      	mov	r0, r6
   2c3e8:	f018 fd14 	bl	44e14 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2c3ec:	1e04      	subs	r4, r0, #0
   2c3ee:	db18      	blt.n	2c422 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   2c3f0:	491e      	ldr	r1, [pc, #120]	; (2c46c <usb_enable+0xe8>)
   2c3f2:	4638      	mov	r0, r7
   2c3f4:	f018 fd0e 	bl	44e14 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2c3f8:	1e04      	subs	r4, r0, #0
   2c3fa:	db12      	blt.n	2c422 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2c3fc:	4c1c      	ldr	r4, [pc, #112]	; (2c470 <usb_enable+0xec>)
   2c3fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c474 <usb_enable+0xf0>
   2c402:	4544      	cmp	r4, r8
   2c404:	d314      	bcc.n	2c430 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2c406:	2000      	movs	r0, #0
   2c408:	f018 fbb2 	bl	44b70 <usb_dc_ep_enable>
	if (ret < 0) {
   2c40c:	1e04      	subs	r4, r0, #0
   2c40e:	db08      	blt.n	2c422 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   2c410:	2080      	movs	r0, #128	; 0x80
   2c412:	f018 fbad 	bl	44b70 <usb_dc_ep_enable>
	if (ret < 0) {
   2c416:	1e04      	subs	r4, r0, #0
   2c418:	db03      	blt.n	2c422 <usb_enable+0x9e>
	usb_dev.enabled = true;
   2c41a:	2301      	movs	r3, #1
   2c41c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   2c420:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2c422:	4810      	ldr	r0, [pc, #64]	; (2c464 <usb_enable+0xe0>)
   2c424:	f01c f9ce 	bl	487c4 <z_impl_k_mutex_unlock>
}
   2c428:	4620      	mov	r0, r4
   2c42a:	b002      	add	sp, #8
   2c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   2c430:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2c432:	2600      	movs	r6, #0
   2c434:	7f22      	ldrb	r2, [r4, #28]
   2c436:	b2f3      	uxtb	r3, r6
   2c438:	429a      	cmp	r2, r3
   2c43a:	d801      	bhi.n	2c440 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2c43c:	3424      	adds	r4, #36	; 0x24
   2c43e:	e7e0      	b.n	2c402 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   2c440:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2c444:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2c448:	7910      	ldrb	r0, [r2, #4]
   2c44a:	f018 fce3 	bl	44e14 <usb_dc_ep_set_callback>
   2c44e:	3601      	adds	r6, #1
   2c450:	2800      	cmp	r0, #0
   2c452:	d0ef      	beq.n	2c434 <usb_enable+0xb0>
   2c454:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2c458:	e7e3      	b.n	2c422 <usb_enable+0x9e>
		ret = -EALREADY;
   2c45a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2c45e:	e7e0      	b.n	2c422 <usb_enable+0x9e>
   2c460:	200046d8 	.word	0x200046d8
   2c464:	20001368 	.word	0x20001368
   2c468:	0002bde1 	.word	0x0002bde1
   2c46c:	0002c231 	.word	0x0002c231
   2c470:	200016d0 	.word	0x200016d0
   2c474:	200016f4 	.word	0x200016f4

0002c478 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2c478:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2c47a:	4b1f      	ldr	r3, [pc, #124]	; (2c4f8 <usb_update_sn_string_descriptor+0x80>)
{
   2c47c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2c47e:	aa05      	add	r2, sp, #20
   2c480:	f103 0510 	add.w	r5, r3, #16
   2c484:	6818      	ldr	r0, [r3, #0]
   2c486:	6859      	ldr	r1, [r3, #4]
   2c488:	4614      	mov	r4, r2
   2c48a:	c403      	stmia	r4!, {r0, r1}
   2c48c:	3308      	adds	r3, #8
   2c48e:	42ab      	cmp	r3, r5
   2c490:	4622      	mov	r2, r4
   2c492:	d1f7      	bne.n	2c484 <usb_update_sn_string_descriptor+0xc>
   2c494:	781b      	ldrb	r3, [r3, #0]
   2c496:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2c498:	2210      	movs	r2, #16
   2c49a:	2100      	movs	r1, #0
   2c49c:	a801      	add	r0, sp, #4
   2c49e:	f020 f915 	bl	4c6cc <memset>
	memset(sn, 0, sizeof(sn));
   2c4a2:	2212      	movs	r2, #18
   2c4a4:	2100      	movs	r1, #0
   2c4a6:	4815      	ldr	r0, [pc, #84]	; (2c4fc <usb_update_sn_string_descriptor+0x84>)
   2c4a8:	f020 f910 	bl	4c6cc <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2c4ac:	2110      	movs	r1, #16
   2c4ae:	a801      	add	r0, sp, #4
   2c4b0:	f024 fade 	bl	50a70 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   2c4b4:	2800      	cmp	r0, #0
   2c4b6:	dd1b      	ble.n	2c4f0 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2c4b8:	2808      	cmp	r0, #8
   2c4ba:	bfb8      	it	lt
   2c4bc:	2008      	movlt	r0, #8
   2c4be:	3808      	subs	r0, #8
   2c4c0:	ab01      	add	r3, sp, #4
   2c4c2:	4a0e      	ldr	r2, [pc, #56]	; (2c4fc <usb_update_sn_string_descriptor+0x84>)
   2c4c4:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2c4c6:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2c4c8:	f810 3b01 	ldrb.w	r3, [r0], #1
   2c4cc:	ac0a      	add	r4, sp, #40	; 0x28
   2c4ce:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2c4d2:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2c4d6:	f814 4c14 	ldrb.w	r4, [r4, #-20]
   2c4da:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2c4dc:	ac0a      	add	r4, sp, #40	; 0x28
   2c4de:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
   2c4e0:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2c4e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   2c4e6:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
   2c4e8:	2908      	cmp	r1, #8
   2c4ea:	f102 0202 	add.w	r2, r2, #2
   2c4ee:	d1eb      	bne.n	2c4c8 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   2c4f0:	4802      	ldr	r0, [pc, #8]	; (2c4fc <usb_update_sn_string_descriptor+0x84>)
   2c4f2:	b00b      	add	sp, #44	; 0x2c
   2c4f4:	bd30      	pop	{r4, r5, pc}
   2c4f6:	bf00      	nop
   2c4f8:	0005673d 	.word	0x0005673d
   2c4fc:	200076d3 	.word	0x200076d3

0002c500 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   2c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c504:	4604      	mov	r4, r0
   2c506:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
   2c508:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2c50a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   2c50e:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
   2c510:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   2c512:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
   2c514:	7820      	ldrb	r0, [r4, #0]
   2c516:	b920      	cbnz	r0, 2c522 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
   2c518:	4b61      	ldr	r3, [pc, #388]	; (2c6a0 <usb_fix_descriptor+0x1a0>)
   2c51a:	3402      	adds	r4, #2
   2c51c:	429c      	cmp	r4, r3
   2c51e:	d01f      	beq.n	2c560 <usb_fix_descriptor+0x60>
   2c520:	e7f2      	b.n	2c508 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
   2c522:	7863      	ldrb	r3, [r4, #1]
   2c524:	2b05      	cmp	r3, #5
   2c526:	d805      	bhi.n	2c534 <usb_fix_descriptor+0x34>
   2c528:	e8df f003 	tbb	[pc, r3]
   2c52c:	78030478 	.word	0x78030478
   2c530:	2007      	.short	0x2007
   2c532:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   2c534:	7823      	ldrb	r3, [r4, #0]
   2c536:	441c      	add	r4, r3
   2c538:	e7ec      	b.n	2c514 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   2c53a:	78e3      	ldrb	r3, [r4, #3]
   2c53c:	2b00      	cmp	r3, #0
   2c53e:	d1f9      	bne.n	2c534 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
   2c540:	78a3      	ldrb	r3, [r4, #2]
   2c542:	b183      	cbz	r3, 2c566 <usb_fix_descriptor+0x66>
			numof_ifaces++;
   2c544:	f109 0901 	add.w	r9, r9, #1
   2c548:	fa5f f989 	uxtb.w	r9, r9
			break;
   2c54c:	e7f2      	b.n	2c534 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
   2c54e:	6872      	ldr	r2, [r6, #4]
   2c550:	4294      	cmp	r4, r2
   2c552:	f000 809d 	beq.w	2c690 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2c556:	3624      	adds	r6, #36	; 0x24
   2c558:	429e      	cmp	r6, r3
   2c55a:	d3f8      	bcc.n	2c54e <usb_fix_descriptor+0x4e>
					return -1;
   2c55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
   2c560:	b005      	add	sp, #20
   2c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2c566:	4e4f      	ldr	r6, [pc, #316]	; (2c6a4 <usb_fix_descriptor+0x1a4>)
   2c568:	4b4f      	ldr	r3, [pc, #316]	; (2c6a8 <usb_fix_descriptor+0x1a8>)
   2c56a:	e7f5      	b.n	2c558 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
   2c56c:	2e00      	cmp	r6, #0
   2c56e:	d0f5      	beq.n	2c55c <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2c570:	2300      	movs	r3, #0
   2c572:	2101      	movs	r1, #1
   2c574:	7f32      	ldrb	r2, [r6, #28]
   2c576:	4293      	cmp	r3, r2
   2c578:	d2f0      	bcs.n	2c55c <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2c57a:	6a32      	ldr	r2, [r6, #32]
   2c57c:	78a7      	ldrb	r7, [r4, #2]
   2c57e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2c582:	7910      	ldrb	r0, [r2, #4]
   2c584:	4287      	cmp	r7, r0
   2c586:	d001      	beq.n	2c58c <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2c588:	3301      	adds	r3, #1
   2c58a:	e7f3      	b.n	2c574 <usb_fix_descriptor+0x74>
   2c58c:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2c58e:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2c590:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2c594:	f000 0003 	and.w	r0, r0, #3
   2c598:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2c59c:	7920      	ldrb	r0, [r4, #4]
   2c59e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2c5a2:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2c5a6:	f994 0002 	ldrsb.w	r0, [r4, #2]
   2c5aa:	2800      	cmp	r0, #0
   2c5ac:	fa5f f887 	uxtb.w	r8, r7
   2c5b0:	da28      	bge.n	2c604 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2c5b2:	f107 0010 	add.w	r0, r7, #16
   2c5b6:	fa01 f000 	lsl.w	r0, r1, r0
   2c5ba:	ea10 0f0b 	tst.w	r0, fp
   2c5be:	d129      	bne.n	2c614 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2c5c0:	f068 007f 	orn	r0, r8, #127	; 0x7f
   2c5c4:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2c5c8:	a802      	add	r0, sp, #8
   2c5ca:	e9cd 3200 	strd	r3, r2, [sp]
   2c5ce:	f024 f925 	bl	5081c <usb_dc_ep_check_cap>
   2c5d2:	e9dd 3200 	ldrd	r3, r2, [sp]
   2c5d6:	2101      	movs	r1, #1
   2c5d8:	b9e0      	cbnz	r0, 2c614 <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2c5da:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2c5de:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2c5e0:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   2c5e4:	bf1c      	itt	ne
   2c5e6:	f108 0810 	addne.w	r8, r8, #16
   2c5ea:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2c5ee:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2c5f0:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
   2c5f2:	bf15      	itete	ne
   2c5f4:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
   2c5f8:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   2c5fa:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
   2c5fe:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
   2c602:	e797      	b.n	2c534 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
   2c604:	fa01 f007 	lsl.w	r0, r1, r7
   2c608:	ea10 0f0b 	tst.w	r0, fp
   2c60c:	d102      	bne.n	2c614 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
   2c60e:	f88d 8008 	strb.w	r8, [sp, #8]
   2c612:	e7d9      	b.n	2c5c8 <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2c614:	3701      	adds	r7, #1
   2c616:	2f10      	cmp	r7, #16
   2c618:	d1b9      	bne.n	2c58e <usb_fix_descriptor+0x8e>
   2c61a:	e7b5      	b.n	2c588 <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   2c61c:	2d03      	cmp	r5, #3
   2c61e:	d11d      	bne.n	2c65c <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   2c620:	f7ff ff2a 	bl	2c478 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   2c624:	4607      	mov	r7, r0
   2c626:	b168      	cbz	r0, 2c644 <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
   2c628:	f020 f810 	bl	4c64c <strlen>
	if (!runtime_sn_len) {
   2c62c:	4680      	mov	r8, r0
   2c62e:	b148      	cbz	r0, 2c644 <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   2c630:	481e      	ldr	r0, [pc, #120]	; (2c6ac <usb_fix_descriptor+0x1ac>)
   2c632:	f020 f80b 	bl	4c64c <strlen>
	if (runtime_sn_len != default_sn_len) {
   2c636:	4580      	cmp	r8, r0
   2c638:	d104      	bne.n	2c644 <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2c63a:	4642      	mov	r2, r8
   2c63c:	4639      	mov	r1, r7
   2c63e:	1ca0      	adds	r0, r4, #2
   2c640:	f020 f839 	bl	4c6b6 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2c644:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2c646:	f06f 0102 	mvn.w	r1, #2
   2c64a:	18e2      	adds	r2, r4, r3
   2c64c:	1b09      	subs	r1, r1, r4
   2c64e:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   2c652:	42d1      	cmn	r1, r2
   2c654:	d513      	bpl.n	2c67e <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
   2c656:	3501      	adds	r5, #1
   2c658:	b2ed      	uxtb	r5, r5
			break;
   2c65a:	e76b      	b.n	2c534 <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
   2c65c:	2d00      	cmp	r5, #0
   2c65e:	d1f1      	bne.n	2c644 <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
   2c660:	f1ba 0f00 	cmp.w	sl, #0
   2c664:	f43f af7a 	beq.w	2c55c <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2c668:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   2c66c:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   2c670:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2c674:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2c678:	f88a 9004 	strb.w	r9, [sl, #4]
   2c67c:	e7eb      	b.n	2c656 <usb_fix_descriptor+0x156>
		buf[i] = 0U;
   2c67e:	f04f 0000 	mov.w	r0, #0
   2c682:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2c686:	f813 0901 	ldrb.w	r0, [r3], #-1
   2c68a:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   2c68e:	e7e0      	b.n	2c652 <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
   2c690:	68b3      	ldr	r3, [r6, #8]
   2c692:	2b00      	cmp	r3, #0
   2c694:	f43f af56 	beq.w	2c544 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
   2c698:	4649      	mov	r1, r9
   2c69a:	4620      	mov	r0, r4
   2c69c:	4798      	blx	r3
   2c69e:	e751      	b.n	2c544 <usb_fix_descriptor+0x44>
   2c6a0:	200016ce 	.word	0x200016ce
   2c6a4:	200016d0 	.word	0x200016d0
   2c6a8:	200016f4 	.word	0x200016f4
   2c6ac:	0005673d 	.word	0x0005673d

0002c6b0 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   2c6b0:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   2c6b2:	4804      	ldr	r0, [pc, #16]	; (2c6c4 <usb_get_device_descriptor+0x14>)
   2c6b4:	f7ff ff24 	bl	2c500 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
   2c6b8:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
   2c6ba:	4802      	ldr	r0, [pc, #8]	; (2c6c4 <usb_get_device_descriptor+0x14>)
   2c6bc:	bf18      	it	ne
   2c6be:	2000      	movne	r0, #0
   2c6c0:	bd08      	pop	{r3, pc}
   2c6c2:	bf00      	nop
   2c6c4:	2000164c 	.word	0x2000164c

0002c6c8 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2c6c8:	b510      	push	{r4, lr}
   2c6ca:	4b09      	ldr	r3, [pc, #36]	; (2c6f0 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c6cc:	2100      	movs	r1, #0
   2c6ce:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2c6d0:	781c      	ldrb	r4, [r3, #0]
   2c6d2:	4284      	cmp	r4, r0
   2c6d4:	d105      	bne.n	2c6e2 <usb_ep_get_transfer+0x1a>
   2c6d6:	685c      	ldr	r4, [r3, #4]
   2c6d8:	b11c      	cbz	r4, 2c6e2 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   2c6da:	2048      	movs	r0, #72	; 0x48
   2c6dc:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
   2c6e0:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c6e2:	3101      	adds	r1, #1
   2c6e4:	2904      	cmp	r1, #4
   2c6e6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   2c6ea:	d1f1      	bne.n	2c6d0 <usb_ep_get_transfer+0x8>
	return NULL;
   2c6ec:	2000      	movs	r0, #0
   2c6ee:	e7f7      	b.n	2c6e0 <usb_ep_get_transfer+0x18>
   2c6f0:	2000479c 	.word	0x2000479c

0002c6f4 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   2c6f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   2c6f8:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   2c6fc:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   2c700:	3310      	adds	r3, #16
{
   2c702:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   2c704:	d110      	bne.n	2c728 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   2c706:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   2c708:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   2c70c:	0799      	lsls	r1, r3, #30
   2c70e:	d53c      	bpl.n	2c78a <usb_transfer_work+0x96>
		if (!trans->bsize) {
   2c710:	bb02      	cbnz	r2, 2c754 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   2c712:	f013 0304 	ands.w	r3, r3, #4
   2c716:	d104      	bne.n	2c722 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   2c718:	461a      	mov	r2, r3
   2c71a:	4619      	mov	r1, r3
   2c71c:	4630      	mov	r0, r6
   2c71e:	f01e fc71 	bl	4b004 <usb_write>
			}
			trans->status = 0;
   2c722:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   2c724:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   2c728:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c72c:	3310      	adds	r3, #16
   2c72e:	d00e      	beq.n	2c74e <usb_transfer_work+0x5a>
   2c730:	f854 5c20 	ldr.w	r5, [r4, #-32]
   2c734:	b15d      	cbz	r5, 2c74e <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   2c736:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2c73a:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   2c73e:	f024 ff7e 	bl	5163e <k_is_in_isr>
   2c742:	2800      	cmp	r0, #0
   2c744:	d04c      	beq.n	2c7e0 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c746:	482e      	ldr	r0, [pc, #184]	; (2c800 <usb_transfer_work+0x10c>)
   2c748:	4621      	mov	r1, r4
   2c74a:	f025 f8ff 	bl	5194c <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   2c74e:	b002      	add	sp, #8
   2c750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   2c754:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2c758:	ab01      	add	r3, sp, #4
   2c75a:	4630      	mov	r0, r6
   2c75c:	f01e fc52 	bl	4b004 <usb_write>
		if (ret) {
   2c760:	b110      	cbz	r0, 2c768 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   2c762:	f06f 0315 	mvn.w	r3, #21
   2c766:	e7dd      	b.n	2c724 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   2c768:	9a01      	ldr	r2, [sp, #4]
   2c76a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c76e:	4413      	add	r3, r2
   2c770:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2c774:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c778:	1a9b      	subs	r3, r3, r2
   2c77a:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2c77e:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2c782:	4413      	add	r3, r2
   2c784:	f844 3c24 	str.w	r3, [r4, #-36]
   2c788:	e7ce      	b.n	2c728 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2c78a:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2c78e:	ab01      	add	r3, sp, #4
   2c790:	4630      	mov	r0, r6
   2c792:	f018 fab5 	bl	44d00 <usb_dc_ep_read_wait>
		if (ret) {
   2c796:	2800      	cmp	r0, #0
   2c798:	d1e3      	bne.n	2c762 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2c79a:	9d01      	ldr	r5, [sp, #4]
   2c79c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c7a0:	442b      	add	r3, r5
   2c7a2:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2c7a6:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c7aa:	1b5b      	subs	r3, r3, r5
   2c7ac:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2c7b0:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2c7b4:	442b      	add	r3, r5
   2c7b6:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2c7ba:	2d00      	cmp	r5, #0
   2c7bc:	d0b1      	beq.n	2c722 <usb_transfer_work+0x2e>
   2c7be:	4630      	mov	r0, r6
   2c7c0:	f018 fb42 	bl	44e48 <usb_dc_ep_mps>
   2c7c4:	fbb5 f3f0 	udiv	r3, r5, r0
   2c7c8:	fb03 5510 	mls	r5, r3, r0, r5
   2c7cc:	2d00      	cmp	r5, #0
   2c7ce:	d1a8      	bne.n	2c722 <usb_transfer_work+0x2e>
   2c7d0:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c7d4:	2b00      	cmp	r3, #0
   2c7d6:	d0a4      	beq.n	2c722 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   2c7d8:	4630      	mov	r0, r6
   2c7da:	f018 fad9 	bl	44d90 <usb_dc_ep_read_continue>
   2c7de:	e7a3      	b.n	2c728 <usb_transfer_work+0x34>
		trans->cb = NULL;
   2c7e0:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   2c7e4:	f1a4 0018 	sub.w	r0, r4, #24
   2c7e8:	f01c f862 	bl	488b0 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   2c7ec:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c7f0:	338c      	adds	r3, #140	; 0x8c
   2c7f2:	d0ac      	beq.n	2c74e <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   2c7f4:	4642      	mov	r2, r8
   2c7f6:	4639      	mov	r1, r7
   2c7f8:	4630      	mov	r0, r6
   2c7fa:	47a8      	blx	r5
   2c7fc:	e7a7      	b.n	2c74e <usb_transfer_work+0x5a>
   2c7fe:	bf00      	nop
   2c800:	20004310 	.word	0x20004310

0002c804 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   2c804:	b510      	push	{r4, lr}
   2c806:	f04f 0320 	mov.w	r3, #32
   2c80a:	f3ef 8411 	mrs	r4, BASEPRI
   2c80e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c812:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   2c816:	f7ff ff57 	bl	2c6c8 <usb_ep_get_transfer>
	if (!trans) {
   2c81a:	b150      	cbz	r0, 2c832 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   2c81c:	6843      	ldr	r3, [r0, #4]
   2c81e:	3310      	adds	r3, #16
   2c820:	d107      	bne.n	2c832 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2c822:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   2c826:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c828:	f100 0134 	add.w	r1, r0, #52	; 0x34
   2c82c:	4803      	ldr	r0, [pc, #12]	; (2c83c <usb_cancel_transfer+0x38>)
   2c82e:	f025 f88d 	bl	5194c <k_work_submit_to_queue>
	__asm__ volatile(
   2c832:	f384 8811 	msr	BASEPRI, r4
   2c836:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2c83a:	bd10      	pop	{r4, pc}
   2c83c:	20004310 	.word	0x20004310

0002c840 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   2c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c844:	4c10      	ldr	r4, [pc, #64]	; (2c888 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c846:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2c88c <usb_cancel_transfers+0x4c>
{
   2c84a:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
   2c84c:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
   2c850:	f04f 0320 	mov.w	r3, #32
   2c854:	f3ef 8611 	mrs	r6, BASEPRI
   2c858:	f383 8812 	msr	BASEPRI_MAX, r3
   2c85c:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   2c860:	6863      	ldr	r3, [r4, #4]
   2c862:	3310      	adds	r3, #16
   2c864:	d105      	bne.n	2c872 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c866:	f104 0134 	add.w	r1, r4, #52	; 0x34
   2c86a:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
   2c86c:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c86e:	f025 f86d 	bl	5194c <k_work_submit_to_queue>
	__asm__ volatile(
   2c872:	f386 8811 	msr	BASEPRI, r6
   2c876:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c87a:	3d01      	subs	r5, #1
   2c87c:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2c880:	d1e6      	bne.n	2c850 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   2c882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c886:	bf00      	nop
   2c888:	2000479c 	.word	0x2000479c
   2c88c:	20004310 	.word	0x20004310

0002c890 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2c890:	b570      	push	{r4, r5, r6, lr}
   2c892:	4c0a      	ldr	r4, [pc, #40]	; (2c8bc <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2c894:	4e0a      	ldr	r6, [pc, #40]	; (2c8c0 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c896:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2c898:	4631      	mov	r1, r6
   2c89a:	4620      	mov	r0, r4
   2c89c:	f025 f83d 	bl	5191a <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2c8a0:	2201      	movs	r2, #1
   2c8a2:	f1a4 0018 	sub.w	r0, r4, #24
   2c8a6:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c8a8:	3501      	adds	r5, #1
   2c8aa:	f024 ffb6 	bl	5181a <z_impl_k_sem_init>
   2c8ae:	2d04      	cmp	r5, #4
   2c8b0:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2c8b4:	d1f0      	bne.n	2c898 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2c8b6:	2000      	movs	r0, #0
   2c8b8:	bd70      	pop	{r4, r5, r6, pc}
   2c8ba:	bf00      	nop
   2c8bc:	200047d0 	.word	0x200047d0
   2c8c0:	0002c6f5 	.word	0x0002c6f5

0002c8c4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2c8c4:	4b0c      	ldr	r3, [pc, #48]	; (2c8f8 <flash_area_open+0x34>)
   2c8c6:	681b      	ldr	r3, [r3, #0]
{
   2c8c8:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   2c8ca:	b173      	cbz	r3, 2c8ea <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2c8cc:	4a0b      	ldr	r2, [pc, #44]	; (2c8fc <flash_area_open+0x38>)
   2c8ce:	6815      	ldr	r5, [r2, #0]
   2c8d0:	2200      	movs	r2, #0
   2c8d2:	42aa      	cmp	r2, r5
   2c8d4:	db02      	blt.n	2c8dc <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2c8d6:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   2c8da:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   2c8dc:	461c      	mov	r4, r3
   2c8de:	f813 6b10 	ldrb.w	r6, [r3], #16
   2c8e2:	4286      	cmp	r6, r0
   2c8e4:	d004      	beq.n	2c8f0 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   2c8e6:	3201      	adds	r2, #1
   2c8e8:	e7f3      	b.n	2c8d2 <flash_area_open+0xe>
		return -EACCES;
   2c8ea:	f06f 000c 	mvn.w	r0, #12
   2c8ee:	e7f4      	b.n	2c8da <flash_area_open+0x16>
	*fap = area;
   2c8f0:	600c      	str	r4, [r1, #0]
	return 0;
   2c8f2:	2000      	movs	r0, #0
   2c8f4:	e7f1      	b.n	2c8da <flash_area_open+0x16>
   2c8f6:	bf00      	nop
   2c8f8:	200008e0 	.word	0x200008e0
   2c8fc:	00054b6c 	.word	0x00054b6c

0002c900 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   2c900:	b570      	push	{r4, r5, r6, lr}
   2c902:	b088      	sub	sp, #32
   2c904:	4605      	mov	r5, r0
   2c906:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   2c908:	b2c0      	uxtb	r0, r0
   2c90a:	4669      	mov	r1, sp
{
   2c90c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2c90e:	f7ff ffd9 	bl	2c8c4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2c912:	2800      	cmp	r0, #0
   2c914:	db1f      	blt.n	2c956 <flash_area_get_sectors+0x56>
   2c916:	9b00      	ldr	r3, [sp, #0]
   2c918:	b1eb      	cbz	r3, 2c956 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   2c91a:	685a      	ldr	r2, [r3, #4]
   2c91c:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2c91e:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   2c920:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2c922:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   2c924:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   2c926:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   2c92a:	2200      	movs	r2, #0
	cb_data->status = 0;
   2c92c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   2c930:	9205      	str	r2, [sp, #20]
   2c932:	f01b fbf5 	bl	48120 <z_impl_device_get_binding>
   2c936:	4605      	mov	r5, r0
	flash_area_close(fa);
   2c938:	9800      	ldr	r0, [sp, #0]
   2c93a:	f01e fbab 	bl	4b094 <flash_area_close>
	if (flash_dev == NULL) {
   2c93e:	b16d      	cbz	r5, 2c95c <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   2c940:	4628      	mov	r0, r5
   2c942:	4908      	ldr	r1, [pc, #32]	; (2c964 <flash_area_get_sectors+0x64>)
   2c944:	aa01      	add	r2, sp, #4
   2c946:	f024 f930 	bl	50baa <flash_page_foreach>
	if (cb_data->status == 0) {
   2c94a:	9807      	ldr	r0, [sp, #28]
   2c94c:	b908      	cbnz	r0, 2c952 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   2c94e:	9b05      	ldr	r3, [sp, #20]
   2c950:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2c952:	b008      	add	sp, #32
   2c954:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c956:	f06f 0015 	mvn.w	r0, #21
   2c95a:	e7fa      	b.n	2c952 <flash_area_get_sectors+0x52>
		return -ENODEV;
   2c95c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2c960:	e7f7      	b.n	2c952 <flash_area_get_sectors+0x52>
   2c962:	bf00      	nop
   2c964:	0004b097 	.word	0x0004b097

0002c968 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   2c968:	4b10      	ldr	r3, [pc, #64]	; (2c9ac <settings_save_one+0x44>)
{
   2c96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2c96e:	681c      	ldr	r4, [r3, #0]
{
   2c970:	4605      	mov	r5, r0
   2c972:	460e      	mov	r6, r1
   2c974:	4617      	mov	r7, r2
	if (!cs) {
   2c976:	b1ac      	cbz	r4, 2c9a4 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   2c978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c97c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c980:	480b      	ldr	r0, [pc, #44]	; (2c9b0 <settings_save_one+0x48>)
   2c982:	f01b fea7 	bl	486d4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2c986:	6863      	ldr	r3, [r4, #4]
   2c988:	4632      	mov	r2, r6
   2c98a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2c98e:	4629      	mov	r1, r5
   2c990:	463b      	mov	r3, r7
   2c992:	4620      	mov	r0, r4
   2c994:	47c0      	blx	r8
   2c996:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2c998:	4805      	ldr	r0, [pc, #20]	; (2c9b0 <settings_save_one+0x48>)
   2c99a:	f01b ff13 	bl	487c4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2c99e:	4620      	mov	r0, r4
   2c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2c9a4:	f06f 0401 	mvn.w	r4, #1
   2c9a8:	e7f9      	b.n	2c99e <settings_save_one+0x36>
   2c9aa:	bf00      	nop
   2c9ac:	200048c4 	.word	0x200048c4
   2c9b0:	20001354 	.word	0x20001354

0002c9b4 <settings_src_register>:
	parent->next = child;
   2c9b4:	2300      	movs	r3, #0
   2c9b6:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   2c9b8:	4b04      	ldr	r3, [pc, #16]	; (2c9cc <settings_src_register+0x18>)
   2c9ba:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2c9bc:	b912      	cbnz	r2, 2c9c4 <settings_src_register+0x10>
	list->head = node;
   2c9be:	e9c3 0000 	strd	r0, r0, [r3]
}
   2c9c2:	4770      	bx	lr
	parent->next = child;
   2c9c4:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2c9c6:	6058      	str	r0, [r3, #4]
}
   2c9c8:	4770      	bx	lr
   2c9ca:	bf00      	nop
   2c9cc:	200048bc 	.word	0x200048bc

0002c9d0 <settings_dst_register>:
	settings_save_dst = cs;
   2c9d0:	4b01      	ldr	r3, [pc, #4]	; (2c9d8 <settings_dst_register+0x8>)
   2c9d2:	6018      	str	r0, [r3, #0]
}
   2c9d4:	4770      	bx	lr
   2c9d6:	bf00      	nop
   2c9d8:	200048c4 	.word	0x200048c4

0002c9dc <settings_load_subtree>:
{
   2c9dc:	b530      	push	{r4, r5, lr}
   2c9de:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   2c9e0:	2300      	movs	r3, #0
{
   2c9e2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   2c9e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c9e8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c9ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9ee:	480c      	ldr	r0, [pc, #48]	; (2ca20 <settings_load_subtree+0x44>)
   2c9f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c9f4:	f01b fe6e 	bl	486d4 <z_impl_k_mutex_lock>
	return list->head;
   2c9f8:	4b0a      	ldr	r3, [pc, #40]	; (2ca24 <settings_load_subtree+0x48>)
   2c9fa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2c9fc:	b134      	cbz	r4, 2ca0c <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   2c9fe:	6863      	ldr	r3, [r4, #4]
   2ca00:	4620      	mov	r0, r4
   2ca02:	681b      	ldr	r3, [r3, #0]
   2ca04:	a901      	add	r1, sp, #4
   2ca06:	4798      	blx	r3
	return node->next;
   2ca08:	6824      	ldr	r4, [r4, #0]
   2ca0a:	e7f7      	b.n	2c9fc <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   2ca0c:	4628      	mov	r0, r5
   2ca0e:	f000 f8c1 	bl	2cb94 <settings_commit_subtree>
   2ca12:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2ca14:	4802      	ldr	r0, [pc, #8]	; (2ca20 <settings_load_subtree+0x44>)
   2ca16:	f01b fed5 	bl	487c4 <z_impl_k_mutex_unlock>
}
   2ca1a:	4620      	mov	r0, r4
   2ca1c:	b005      	add	sp, #20
   2ca1e:	bd30      	pop	{r4, r5, pc}
   2ca20:	20001354 	.word	0x20001354
   2ca24:	200048bc 	.word	0x200048bc

0002ca28 <settings_load_subtree_direct>:
{
   2ca28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   2ca2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2ca2e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   2ca30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ca34:	480a      	ldr	r0, [pc, #40]	; (2ca60 <settings_load_subtree_direct+0x38>)
   2ca36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ca3a:	f01b fe4b 	bl	486d4 <z_impl_k_mutex_lock>
	return list->head;
   2ca3e:	4b09      	ldr	r3, [pc, #36]	; (2ca64 <settings_load_subtree_direct+0x3c>)
   2ca40:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2ca42:	b134      	cbz	r4, 2ca52 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   2ca44:	6863      	ldr	r3, [r4, #4]
   2ca46:	4620      	mov	r0, r4
   2ca48:	681b      	ldr	r3, [r3, #0]
   2ca4a:	a901      	add	r1, sp, #4
   2ca4c:	4798      	blx	r3
	return node->next;
   2ca4e:	6824      	ldr	r4, [r4, #0]
   2ca50:	e7f7      	b.n	2ca42 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   2ca52:	4803      	ldr	r0, [pc, #12]	; (2ca60 <settings_load_subtree_direct+0x38>)
   2ca54:	f01b feb6 	bl	487c4 <z_impl_k_mutex_unlock>
}
   2ca58:	2000      	movs	r0, #0
   2ca5a:	b004      	add	sp, #16
   2ca5c:	bd10      	pop	{r4, pc}
   2ca5e:	bf00      	nop
   2ca60:	20001354 	.word	0x20001354
   2ca64:	200048bc 	.word	0x200048bc

0002ca68 <settings_store_init>:
	list->head = NULL;
   2ca68:	4b02      	ldr	r3, [pc, #8]	; (2ca74 <settings_store_init+0xc>)
   2ca6a:	2200      	movs	r2, #0
	list->tail = NULL;
   2ca6c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   2ca70:	4770      	bx	lr
   2ca72:	bf00      	nop
   2ca74:	200048bc 	.word	0x200048bc

0002ca78 <settings_init>:
	list->head = NULL;
   2ca78:	4b02      	ldr	r3, [pc, #8]	; (2ca84 <settings_init+0xc>)
   2ca7a:	2200      	movs	r2, #0
	list->tail = NULL;
   2ca7c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   2ca80:	f7ff bff2 	b.w	2ca68 <settings_store_init>
   2ca84:	200048c8 	.word	0x200048c8

0002ca88 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   2ca88:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2ca8a:	4c1b      	ldr	r4, [pc, #108]	; (2caf8 <settings_register+0x70>)
   2ca8c:	4e1b      	ldr	r6, [pc, #108]	; (2cafc <settings_register+0x74>)
{
   2ca8e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2ca90:	42b4      	cmp	r4, r6
   2ca92:	d312      	bcc.n	2caba <settings_register+0x32>
	return list->head;
   2ca94:	4e1a      	ldr	r6, [pc, #104]	; (2cb00 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2ca96:	481b      	ldr	r0, [pc, #108]	; (2cb04 <settings_register+0x7c>)
   2ca98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ca9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2caa0:	f01b fe18 	bl	486d4 <z_impl_k_mutex_lock>
   2caa4:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2caa6:	b17c      	cbz	r4, 2cac8 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   2caa8:	6828      	ldr	r0, [r5, #0]
   2caaa:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2caae:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   2cab0:	f01f fdd3 	bl	4c65a <strcmp>
   2cab4:	b1c8      	cbz	r0, 2caea <settings_register+0x62>
	return node->next;
   2cab6:	6964      	ldr	r4, [r4, #20]
   2cab8:	e7f5      	b.n	2caa6 <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   2caba:	6821      	ldr	r1, [r4, #0]
   2cabc:	6828      	ldr	r0, [r5, #0]
   2cabe:	f01f fdcc 	bl	4c65a <strcmp>
   2cac2:	b1a8      	cbz	r0, 2caf0 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2cac4:	3414      	adds	r4, #20
   2cac6:	e7e3      	b.n	2ca90 <settings_register+0x8>
	return list->tail;
   2cac8:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   2caca:	2400      	movs	r4, #0
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   2cacc:	f105 0314 	add.w	r3, r5, #20
   2cad0:	616c      	str	r4, [r5, #20]
Z_GENLIST_APPEND(slist, snode)
   2cad2:	b93a      	cbnz	r2, 2cae4 <settings_register+0x5c>
	list->head = node;
   2cad4:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   2cad8:	4614      	mov	r4, r2
	return z_impl_k_mutex_unlock(mutex);
   2cada:	480a      	ldr	r0, [pc, #40]	; (2cb04 <settings_register+0x7c>)
   2cadc:	f01b fe72 	bl	487c4 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   2cae0:	4620      	mov	r0, r4
   2cae2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2cae4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2cae6:	6073      	str	r3, [r6, #4]
}
   2cae8:	e7f7      	b.n	2cada <settings_register+0x52>
			rc = -EEXIST;
   2caea:	f06f 0410 	mvn.w	r4, #16
   2caee:	e7f4      	b.n	2cada <settings_register+0x52>
			return -EEXIST;
   2caf0:	f06f 0410 	mvn.w	r4, #16
   2caf4:	e7f4      	b.n	2cae0 <settings_register+0x58>
   2caf6:	bf00      	nop
   2caf8:	00052848 	.word	0x00052848
   2cafc:	000528c0 	.word	0x000528c0
   2cb00:	200048c8 	.word	0x200048c8
   2cb04:	20001354 	.word	0x20001354

0002cb08 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2cb08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2cb0c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   2cb0e:	460e      	mov	r6, r1
   2cb10:	b109      	cbz	r1, 2cb16 <settings_parse_and_lookup+0xe>
		*next = NULL;
   2cb12:	2300      	movs	r3, #0
   2cb14:	600b      	str	r3, [r1, #0]
   2cb16:	4c1c      	ldr	r4, [pc, #112]	; (2cb88 <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2cb18:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2cb8c <settings_parse_and_lookup+0x84>
   2cb1c:	2500      	movs	r5, #0
   2cb1e:	4544      	cmp	r4, r8
   2cb20:	d310      	bcc.n	2cb44 <settings_parse_and_lookup+0x3c>
	return list->head;
   2cb22:	4b1b      	ldr	r3, [pc, #108]	; (2cb90 <settings_parse_and_lookup+0x88>)
   2cb24:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2cb26:	b35c      	cbz	r4, 2cb80 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2cb28:	aa01      	add	r2, sp, #4
   2cb2a:	4638      	mov	r0, r7
   2cb2c:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2cb30:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2cb32:	f01e fad2 	bl	4b0da <settings_name_steq>
   2cb36:	b308      	cbz	r0, 2cb7c <settings_parse_and_lookup+0x74>
			continue;
		}
		if (!bestmatch) {
   2cb38:	b9cd      	cbnz	r5, 2cb6e <settings_parse_and_lookup+0x66>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   2cb3a:	b10e      	cbz	r6, 2cb40 <settings_parse_and_lookup+0x38>
				*next = tmpnext;
   2cb3c:	9b01      	ldr	r3, [sp, #4]
   2cb3e:	6033      	str	r3, [r6, #0]
   2cb40:	4625      	mov	r5, r4
   2cb42:	e01b      	b.n	2cb7c <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2cb44:	6821      	ldr	r1, [r4, #0]
   2cb46:	aa01      	add	r2, sp, #4
   2cb48:	4638      	mov	r0, r7
   2cb4a:	f01e fac6 	bl	4b0da <settings_name_steq>
   2cb4e:	b160      	cbz	r0, 2cb6a <settings_parse_and_lookup+0x62>
		if (!bestmatch) {
   2cb50:	b925      	cbnz	r5, 2cb5c <settings_parse_and_lookup+0x54>
			if (next) {
   2cb52:	b10e      	cbz	r6, 2cb58 <settings_parse_and_lookup+0x50>
				*next = tmpnext;
   2cb54:	9b01      	ldr	r3, [sp, #4]
   2cb56:	6033      	str	r3, [r6, #0]
   2cb58:	4625      	mov	r5, r4
   2cb5a:	e006      	b.n	2cb6a <settings_parse_and_lookup+0x62>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2cb5c:	6829      	ldr	r1, [r5, #0]
   2cb5e:	6820      	ldr	r0, [r4, #0]
   2cb60:	2200      	movs	r2, #0
   2cb62:	f01e faba 	bl	4b0da <settings_name_steq>
   2cb66:	2800      	cmp	r0, #0
   2cb68:	d1f3      	bne.n	2cb52 <settings_parse_and_lookup+0x4a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2cb6a:	3414      	adds	r4, #20
   2cb6c:	e7d7      	b.n	2cb1e <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2cb6e:	6829      	ldr	r1, [r5, #0]
   2cb70:	6820      	ldr	r0, [r4, #0]
   2cb72:	2200      	movs	r2, #0
   2cb74:	f01e fab1 	bl	4b0da <settings_name_steq>
   2cb78:	2800      	cmp	r0, #0
   2cb7a:	d1de      	bne.n	2cb3a <settings_parse_and_lookup+0x32>
	return node->next;
   2cb7c:	6964      	ldr	r4, [r4, #20]
   2cb7e:	e7d2      	b.n	2cb26 <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2cb80:	4628      	mov	r0, r5
   2cb82:	b002      	add	sp, #8
   2cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb88:	00052848 	.word	0x00052848
   2cb8c:	000528c0 	.word	0x000528c0
   2cb90:	200048c8 	.word	0x200048c8

0002cb94 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   2cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2cb96:	4c18      	ldr	r4, [pc, #96]	; (2cbf8 <settings_commit_subtree+0x64>)
   2cb98:	4f18      	ldr	r7, [pc, #96]	; (2cbfc <settings_commit_subtree+0x68>)
{
   2cb9a:	4606      	mov	r6, r0
	rc = 0;
   2cb9c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2cb9e:	42bc      	cmp	r4, r7
   2cba0:	d308      	bcc.n	2cbb4 <settings_commit_subtree+0x20>
	return list->head;
   2cba2:	4b17      	ldr	r3, [pc, #92]	; (2cc00 <settings_commit_subtree+0x6c>)
   2cba4:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2cba6:	b324      	cbz	r4, 2cbf2 <settings_commit_subtree+0x5e>
   2cba8:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2cbaa:	b9ae      	cbnz	r6, 2cbd8 <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   2cbac:	68e3      	ldr	r3, [r4, #12]
   2cbae:	b9db      	cbnz	r3, 2cbe8 <settings_commit_subtree+0x54>
	return node->next;
   2cbb0:	6964      	ldr	r4, [r4, #20]
   2cbb2:	e7f8      	b.n	2cba6 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2cbb4:	b91e      	cbnz	r6, 2cbbe <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   2cbb6:	68e3      	ldr	r3, [r4, #12]
   2cbb8:	b94b      	cbnz	r3, 2cbce <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2cbba:	3414      	adds	r4, #20
   2cbbc:	e7ef      	b.n	2cb9e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2cbbe:	6820      	ldr	r0, [r4, #0]
   2cbc0:	2200      	movs	r2, #0
   2cbc2:	4631      	mov	r1, r6
   2cbc4:	f01e fa89 	bl	4b0da <settings_name_steq>
   2cbc8:	2800      	cmp	r0, #0
   2cbca:	d1f4      	bne.n	2cbb6 <settings_commit_subtree+0x22>
   2cbcc:	e7f5      	b.n	2cbba <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   2cbce:	4798      	blx	r3
				rc = rc2;
   2cbd0:	2d00      	cmp	r5, #0
   2cbd2:	bf08      	it	eq
   2cbd4:	4605      	moveq	r5, r0
   2cbd6:	e7f0      	b.n	2cbba <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2cbd8:	6820      	ldr	r0, [r4, #0]
   2cbda:	2200      	movs	r2, #0
   2cbdc:	4631      	mov	r1, r6
   2cbde:	f01e fa7c 	bl	4b0da <settings_name_steq>
   2cbe2:	2800      	cmp	r0, #0
   2cbe4:	d1e2      	bne.n	2cbac <settings_commit_subtree+0x18>
   2cbe6:	e7e3      	b.n	2cbb0 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   2cbe8:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2cbea:	2d00      	cmp	r5, #0
   2cbec:	bf08      	it	eq
   2cbee:	4605      	moveq	r5, r0
   2cbf0:	e7de      	b.n	2cbb0 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2cbf2:	4628      	mov	r0, r5
   2cbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cbf6:	bf00      	nop
   2cbf8:	00052848 	.word	0x00052848
   2cbfc:	000528c0 	.word	0x000528c0
   2cc00:	200048c8 	.word	0x200048c8

0002cc04 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   2cc04:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2cc06:	4c06      	ldr	r4, [pc, #24]	; (2cc20 <settings_subsys_init+0x1c>)
   2cc08:	7823      	ldrb	r3, [r4, #0]
   2cc0a:	b93b      	cbnz	r3, 2cc1c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   2cc0c:	f7ff ff34 	bl	2ca78 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   2cc10:	f000 f864 	bl	2ccdc <settings_backend_init>

	if (!err) {
   2cc14:	b908      	cbnz	r0, 2cc1a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   2cc16:	2301      	movs	r3, #1
   2cc18:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   2cc1a:	bd10      	pop	{r4, pc}
		return 0;
   2cc1c:	2000      	movs	r0, #0
   2cc1e:	e7fc      	b.n	2cc1a <settings_subsys_init+0x16>
   2cc20:	200076e5 	.word	0x200076e5

0002cc24 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   2cc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   2cc28:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   2cc2a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 2ccd8 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   2cc2e:	3401      	adds	r4, #1
{
   2cc30:	b098      	sub	sp, #96	; 0x60
   2cc32:	4680      	mov	r8, r0
   2cc34:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   2cc36:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2cc38:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   2cc3c:	1e65      	subs	r5, r4, #1
   2cc3e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   2cc40:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2cc44:	d045      	beq.n	2ccd2 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2cc46:	234a      	movs	r3, #74	; 0x4a
   2cc48:	aa05      	add	r2, sp, #20
   2cc4a:	4629      	mov	r1, r5
   2cc4c:	4630      	mov	r0, r6
   2cc4e:	f01e f9d2 	bl	4aff6 <nvs_read>
   2cc52:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   2cc56:	343f      	adds	r4, #63	; 0x3f
   2cc58:	b2a4      	uxth	r4, r4
   2cc5a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2cc5c:	4621      	mov	r1, r4
   2cc5e:	2301      	movs	r3, #1
   2cc60:	f10d 020b 	add.w	r2, sp, #11
   2cc64:	4630      	mov	r0, r6
   2cc66:	f01e f9c6 	bl	4aff6 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2cc6a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2cc6c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2cc6e:	dc03      	bgt.n	2cc78 <settings_nvs_load+0x54>
   2cc70:	2800      	cmp	r0, #0
   2cc72:	dc03      	bgt.n	2cc7c <settings_nvs_load+0x58>
{
   2cc74:	462c      	mov	r4, r5
   2cc76:	e7e1      	b.n	2cc3c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   2cc78:	2800      	cmp	r0, #0
   2cc7a:	dc16      	bgt.n	2ccaa <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   2cc7c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   2cc80:	42ab      	cmp	r3, r5
   2cc82:	d109      	bne.n	2cc98 <settings_nvs_load+0x74>
				cf->last_name_id--;
   2cc84:	4642      	mov	r2, r8
   2cc86:	1e6b      	subs	r3, r5, #1
   2cc88:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2cc8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2cc90:	2302      	movs	r3, #2
   2cc92:	4630      	mov	r0, r6
   2cc94:	f7fe ff0c 	bl	2bab0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   2cc98:	4629      	mov	r1, r5
   2cc9a:	4630      	mov	r0, r6
   2cc9c:	f01e f950 	bl	4af40 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   2cca0:	4621      	mov	r1, r4
   2cca2:	4630      	mov	r0, r6
   2cca4:	f01e f94c 	bl	4af40 <nvs_delete>
			continue;
   2cca8:	e7e4      	b.n	2cc74 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   2ccaa:	ab18      	add	r3, sp, #96	; 0x60
   2ccac:	441f      	add	r7, r3
   2ccae:	2300      	movs	r3, #0
   2ccb0:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   2ccb4:	4652      	mov	r2, sl
   2ccb6:	f8cd 9000 	str.w	r9, [sp]
   2ccba:	ab03      	add	r3, sp, #12
   2ccbc:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   2ccbe:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   2ccc0:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   2ccc4:	f01e fa42 	bl	4b14c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   2ccc8:	2800      	cmp	r0, #0
   2ccca:	d0d3      	beq.n	2cc74 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   2cccc:	b018      	add	sp, #96	; 0x60
   2ccce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ccd2:	2000      	movs	r0, #0
	return ret;
   2ccd4:	e7fa      	b.n	2cccc <settings_nvs_load+0xa8>
   2ccd6:	bf00      	nop
   2ccd8:	0004b1b3 	.word	0x0004b1b3

0002ccdc <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   2ccdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   2ccde:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2cce0:	4669      	mov	r1, sp
   2cce2:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   2cce4:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2cce6:	f7ff fded 	bl	2c8c4 <flash_area_open>
	if (rc) {
   2ccea:	4604      	mov	r4, r0
   2ccec:	2800      	cmp	r0, #0
   2ccee:	d136      	bne.n	2cd5e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2ccf0:	aa02      	add	r2, sp, #8
   2ccf2:	a901      	add	r1, sp, #4
   2ccf4:	2002      	movs	r0, #2
   2ccf6:	f7ff fe03 	bl	2c900 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   2ccfa:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2ccfe:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   2cd00:	d02d      	beq.n	2cd5e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2cd02:	b138      	cbz	r0, 2cd14 <settings_backend_init+0x38>
   2cd04:	340c      	adds	r4, #12
   2cd06:	d005      	beq.n	2cd14 <settings_backend_init+0x38>
		k_panic();
   2cd08:	4040      	eors	r0, r0
   2cd0a:	f380 8811 	msr	BASEPRI, r0
   2cd0e:	f04f 0004 	mov.w	r0, #4
   2cd12:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   2cd14:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   2cd16:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2cd1a:	d223      	bcs.n	2cd64 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   2cd1c:	9a00      	ldr	r2, [sp, #0]
   2cd1e:	2300      	movs	r3, #0
   2cd20:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   2cd22:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   2cd24:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   2cd26:	4285      	cmp	r5, r0
   2cd28:	b29c      	uxth	r4, r3
   2cd2a:	d303      	bcc.n	2cd34 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   2cd2c:	3301      	adds	r3, #1
   2cd2e:	2b08      	cmp	r3, #8
   2cd30:	d1f8      	bne.n	2cd24 <settings_backend_init+0x48>
   2cd32:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2cd34:	4d0d      	ldr	r5, [pc, #52]	; (2cd6c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   2cd36:	6853      	ldr	r3, [r2, #4]
   2cd38:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   2cd3a:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2cd3c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   2cd3e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2cd40:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2cd42:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   2cd44:	f01e facc 	bl	4b2e0 <settings_nvs_backend_init>
	if (rc) {
   2cd48:	4604      	mov	r4, r0
   2cd4a:	b940      	cbnz	r0, 2cd5e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2cd4c:	4e08      	ldr	r6, [pc, #32]	; (2cd70 <settings_backend_init+0x94>)
   2cd4e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   2cd50:	4628      	mov	r0, r5
   2cd52:	f7ff fe2f 	bl	2c9b4 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   2cd56:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2cd58:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   2cd5a:	f7ff fe39 	bl	2c9d0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   2cd5e:	4620      	mov	r0, r4
   2cd60:	b004      	add	sp, #16
   2cd62:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   2cd64:	f06f 0420 	mvn.w	r4, #32
   2cd68:	e7f9      	b.n	2cd5e <settings_backend_init+0x82>
   2cd6a:	bf00      	nop
   2cd6c:	200048d0 	.word	0x200048d0
   2cd70:	200008e4 	.word	0x200008e4

0002cd74 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2cd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cd78:	4605      	mov	r5, r0
	__asm__ volatile(
   2cd7a:	f04f 0320 	mov.w	r3, #32
   2cd7e:	f3ef 8611 	mrs	r6, BASEPRI
   2cd82:	f383 8812 	msr	BASEPRI_MAX, r3
   2cd86:	f3bf 8f6f 	isb	sy
	return list->head;
   2cd8a:	4b0e      	ldr	r3, [pc, #56]	; (2cdc4 <pm_state_notify+0x50>)
   2cd8c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2cd8e:	b19c      	cbz	r4, 2cdb8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2cd90:	4f0d      	ldr	r7, [pc, #52]	; (2cdc8 <pm_state_notify+0x54>)
   2cd92:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2cdcc <pm_state_notify+0x58>
   2cd96:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   2cd9a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   2cd9e:	2d00      	cmp	r5, #0
   2cda0:	bf08      	it	eq
   2cda2:	4613      	moveq	r3, r2
		if (callback) {
   2cda4:	b12b      	cbz	r3, 2cdb2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2cda6:	f898 2014 	ldrb.w	r2, [r8, #20]
   2cdaa:	fb09 f202 	mul.w	r2, r9, r2
   2cdae:	5cb8      	ldrb	r0, [r7, r2]
   2cdb0:	4798      	blx	r3
	return node->next;
   2cdb2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2cdb4:	2c00      	cmp	r4, #0
   2cdb6:	d1f0      	bne.n	2cd9a <pm_state_notify+0x26>
	__asm__ volatile(
   2cdb8:	f386 8811 	msr	BASEPRI, r6
   2cdbc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   2cdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2cdc4:	20004910 	.word	0x20004910
   2cdc8:	20004918 	.word	0x20004918
   2cdcc:	20007530 	.word	0x20007530

0002cdd0 <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cdd0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cdd2:	2301      	movs	r3, #1
   2cdd4:	f000 001f 	and.w	r0, r0, #31
   2cdd8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cddc:	4b07      	ldr	r3, [pc, #28]	; (2cdfc <atomic_clear_bit.constprop.0+0x2c>)
   2cdde:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cde2:	43c0      	mvns	r0, r0
   2cde4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2cde8:	e853 2f00 	ldrex	r2, [r3]
   2cdec:	4002      	ands	r2, r0
   2cdee:	e843 2100 	strex	r1, r2, [r3]
   2cdf2:	2900      	cmp	r1, #0
   2cdf4:	d1f8      	bne.n	2cde8 <atomic_clear_bit.constprop.0+0x18>
   2cdf6:	f3bf 8f5b 	dmb	ish
}
   2cdfa:	4770      	bx	lr
   2cdfc:	20004924 	.word	0x20004924

0002ce00 <pm_system_resume>:

void pm_system_resume(void)
{
   2ce00:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   2ce02:	4b1d      	ldr	r3, [pc, #116]	; (2ce78 <pm_system_resume+0x78>)
   2ce04:	7d1c      	ldrb	r4, [r3, #20]
   2ce06:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ce0a:	f004 031f 	and.w	r3, r4, #31
   2ce0e:	2201      	movs	r2, #1
   2ce10:	409a      	lsls	r2, r3
   2ce12:	4b1a      	ldr	r3, [pc, #104]	; (2ce7c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ce14:	0961      	lsrs	r1, r4, #5
{
   2ce16:	b085      	sub	sp, #20
   2ce18:	43d0      	mvns	r0, r2
   2ce1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2ce1e:	e853 1f00 	ldrex	r1, [r3]
   2ce22:	ea01 0500 	and.w	r5, r1, r0
   2ce26:	e843 5c00 	strex	ip, r5, [r3]
   2ce2a:	f1bc 0f00 	cmp.w	ip, #0
   2ce2e:	d1f6      	bne.n	2ce1e <pm_system_resume+0x1e>
   2ce30:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2ce34:	4211      	tst	r1, r2
   2ce36:	d017      	beq.n	2ce68 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
   2ce38:	4d11      	ldr	r5, [pc, #68]	; (2ce80 <pm_system_resume+0x80>)
   2ce3a:	220c      	movs	r2, #12
   2ce3c:	fb02 5204 	mla	r2, r2, r4, r5
   2ce40:	ca07      	ldmia	r2, {r0, r1, r2}
   2ce42:	ab01      	add	r3, sp, #4
   2ce44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   2ce48:	4a0e      	ldr	r2, [pc, #56]	; (2ce84 <pm_system_resume+0x84>)
   2ce4a:	b17a      	cbz	r2, 2ce6c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   2ce4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2ce50:	f01f fc65 	bl	4c71e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   2ce54:	2000      	movs	r0, #0
   2ce56:	f7ff ff8d 	bl	2cd74 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2ce5a:	230c      	movs	r3, #12
   2ce5c:	435c      	muls	r4, r3
   2ce5e:	192a      	adds	r2, r5, r4
   2ce60:	2300      	movs	r3, #0
   2ce62:	512b      	str	r3, [r5, r4]
   2ce64:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2ce68:	b005      	add	sp, #20
   2ce6a:	bd30      	pop	{r4, r5, pc}
   2ce6c:	f382 8811 	msr	BASEPRI, r2
   2ce70:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   2ce74:	e7ee      	b.n	2ce54 <pm_system_resume+0x54>
   2ce76:	bf00      	nop
   2ce78:	20007530 	.word	0x20007530
   2ce7c:	20004928 	.word	0x20004928
   2ce80:	20004918 	.word	0x20004918
   2ce84:	0004c71f 	.word	0x0004c71f

0002ce88 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   2ce88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   2ce8c:	4b35      	ldr	r3, [pc, #212]	; (2cf64 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ce8e:	4a36      	ldr	r2, [pc, #216]	; (2cf68 <pm_system_suspend+0xe0>)
   2ce90:	7d1c      	ldrb	r4, [r3, #20]
   2ce92:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ce96:	0963      	lsrs	r3, r4, #5
   2ce98:	ea4f 0983 	mov.w	r9, r3, lsl #2
   2ce9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2cea0:	4d32      	ldr	r5, [pc, #200]	; (2cf6c <pm_system_suspend+0xe4>)
   2cea2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2cea6:	f004 081f 	and.w	r8, r4, #31
   2ceaa:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2ceae:	f013 0f01 	tst.w	r3, #1
{
   2ceb2:	b085      	sub	sp, #20
   2ceb4:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2ceb6:	d10a      	bne.n	2cece <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   2ceb8:	4601      	mov	r1, r0
   2ceba:	4620      	mov	r0, r4
   2cebc:	f000 f876 	bl	2cfac <pm_policy_next_state>
		if (info != NULL) {
   2cec0:	b128      	cbz	r0, 2cece <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   2cec2:	c807      	ldmia	r0, {r0, r1, r2}
   2cec4:	230c      	movs	r3, #12
   2cec6:	fb03 5304 	mla	r3, r3, r4, r5
   2ceca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   2cece:	230c      	movs	r3, #12
   2ced0:	4363      	muls	r3, r4
   2ced2:	18ea      	adds	r2, r5, r3
   2ced4:	5cee      	ldrb	r6, [r5, r3]
   2ced6:	b936      	cbnz	r6, 2cee6 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   2ced8:	4620      	mov	r0, r4
   2ceda:	f7ff ff79 	bl	2cdd0 <atomic_clear_bit.constprop.0>
		ret = false;
   2cede:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   2cee0:	b005      	add	sp, #20
   2cee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   2cee6:	1c7b      	adds	r3, r7, #1
   2cee8:	d00f      	beq.n	2cf0a <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2ceea:	f8d2 c008 	ldr.w	ip, [r2, #8]
   2ceee:	4820      	ldr	r0, [pc, #128]	; (2cf70 <pm_system_suspend+0xe8>)
   2cef0:	4a20      	ldr	r2, [pc, #128]	; (2cf74 <pm_system_suspend+0xec>)
   2cef2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2cef6:	2100      	movs	r1, #0
   2cef8:	2300      	movs	r3, #0
   2cefa:	fbec 0106 	umlal	r0, r1, ip, r6
   2cefe:	f7f9 f8ff 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2cf02:	2101      	movs	r1, #1
   2cf04:	1a38      	subs	r0, r7, r0
   2cf06:	f024 fec3 	bl	51c90 <z_set_timeout_expiry>
	k_sched_lock();
   2cf0a:	f01b ff37 	bl	48d7c <k_sched_lock>
	pm_state_notify(true);
   2cf0e:	2001      	movs	r0, #1
   2cf10:	f7ff ff30 	bl	2cd74 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cf14:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cf18:	2301      	movs	r3, #1
   2cf1a:	fa03 f808 	lsl.w	r8, r3, r8
   2cf1e:	4b16      	ldr	r3, [pc, #88]	; (2cf78 <pm_system_suspend+0xf0>)
   2cf20:	4499      	add	r9, r3
   2cf22:	e859 3f00 	ldrex	r3, [r9]
   2cf26:	ea43 0308 	orr.w	r3, r3, r8
   2cf2a:	e849 3200 	strex	r2, r3, [r9]
   2cf2e:	2a00      	cmp	r2, #0
   2cf30:	d1f7      	bne.n	2cf22 <pm_system_suspend+0x9a>
   2cf32:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   2cf36:	230c      	movs	r3, #12
   2cf38:	fb03 5504 	mla	r5, r3, r4, r5
   2cf3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2cf40:	ab01      	add	r3, sp, #4
   2cf42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   2cf46:	4a0d      	ldr	r2, [pc, #52]	; (2cf7c <pm_system_suspend+0xf4>)
   2cf48:	b11a      	cbz	r2, 2cf52 <pm_system_suspend+0xca>
		pm_power_state_set(info);
   2cf4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2cf4e:	f01f fbd3 	bl	4c6f8 <pm_power_state_set>
	pm_system_resume();
   2cf52:	f7ff ff55 	bl	2ce00 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2cf56:	4620      	mov	r0, r4
   2cf58:	f7ff ff3a 	bl	2cdd0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   2cf5c:	f01c f8dc 	bl	49118 <k_sched_unlock>
	bool ret = true;
   2cf60:	2001      	movs	r0, #1
   2cf62:	e7bd      	b.n	2cee0 <pm_system_suspend+0x58>
   2cf64:	20007530 	.word	0x20007530
   2cf68:	20004924 	.word	0x20004924
   2cf6c:	20004918 	.word	0x20004918
   2cf70:	000f423f 	.word	0x000f423f
   2cf74:	000f4240 	.word	0x000f4240
   2cf78:	20004928 	.word	0x20004928
   2cf7c:	0004c6f9 	.word	0x0004c6f9

0002cf80 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cf80:	4b05      	ldr	r3, [pc, #20]	; (2cf98 <pm_constraint_get+0x18>)
   2cf82:	f3bf 8f5b 	dmb	ish
   2cf86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2cf8a:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   2cf8e:	fab0 f080 	clz	r0, r0
   2cf92:	0940      	lsrs	r0, r0, #5
   2cf94:	4770      	bx	lr
   2cf96:	bf00      	nop
   2cf98:	2000492c 	.word	0x2000492c

0002cf9c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2cf9c:	b908      	cbnz	r0, 2cfa2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2cf9e:	4b02      	ldr	r3, [pc, #8]	; (2cfa8 <pm_state_cpu_get_all+0xc>)
   2cfa0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2cfa2:	2000      	movs	r0, #0
   2cfa4:	4770      	bx	lr
   2cfa6:	bf00      	nop
   2cfa8:	00054b70 	.word	0x00054b70

0002cfac <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2cfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cfb0:	b085      	sub	sp, #20
   2cfb2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2cfb4:	a903      	add	r1, sp, #12
   2cfb6:	f7ff fff1 	bl	2cf9c <pm_state_cpu_get_all>
   2cfba:	f8df a074 	ldr.w	sl, [pc, #116]	; 2d030 <pm_policy_next_state+0x84>
   2cfbe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2d034 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2cfc2:	1e44      	subs	r4, r0, #1
   2cfc4:	b224      	sxth	r4, r4
   2cfc6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2cfca:	f04f 0900 	mov.w	r9, #0
   2cfce:	1c63      	adds	r3, r4, #1
   2cfd0:	d104      	bne.n	2cfdc <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   2cfd2:	2500      	movs	r5, #0
}
   2cfd4:	4628      	mov	r0, r5
   2cfd6:	b005      	add	sp, #20
   2cfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   2cfdc:	9a03      	ldr	r2, [sp, #12]
   2cfde:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2cfe2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
   2cfe6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   2cfea:	f7ff ffc9 	bl	2cf80 <pm_constraint_get>
   2cfee:	b1e0      	cbz	r0, 2d02a <pm_policy_next_state+0x7e>
   2cff0:	6868      	ldr	r0, [r5, #4]
   2cff2:	f04f 0b00 	mov.w	fp, #0
   2cff6:	46d4      	mov	ip, sl
   2cff8:	4659      	mov	r1, fp
   2cffa:	fbe0 c107 	umlal	ip, r1, r0, r7
   2cffe:	4642      	mov	r2, r8
   2d000:	464b      	mov	r3, r9
   2d002:	4660      	mov	r0, ip
   2d004:	f7f9 f87c 	bl	26100 <__aeabi_uldivmod>
   2d008:	9001      	str	r0, [sp, #4]
   2d00a:	68a8      	ldr	r0, [r5, #8]
   2d00c:	46d4      	mov	ip, sl
   2d00e:	4659      	mov	r1, fp
   2d010:	fbe0 c107 	umlal	ip, r1, r0, r7
   2d014:	4642      	mov	r2, r8
   2d016:	464b      	mov	r3, r9
   2d018:	4660      	mov	r0, ip
   2d01a:	f7f9 f871 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   2d01e:	1c72      	adds	r2, r6, #1
   2d020:	d0d8      	beq.n	2cfd4 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
   2d022:	9b01      	ldr	r3, [sp, #4]
   2d024:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   2d026:	42b0      	cmp	r0, r6
   2d028:	d9d4      	bls.n	2cfd4 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2d02a:	3c01      	subs	r4, #1
   2d02c:	b224      	sxth	r4, r4
   2d02e:	e7ce      	b.n	2cfce <pm_policy_next_state+0x22>
   2d030:	000f423f 	.word	0x000f423f
   2d034:	000f4240 	.word	0x000f4240

0002d038 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2d038:	4b01      	ldr	r3, [pc, #4]	; (2d040 <uECC_get_rng+0x8>)
   2d03a:	6818      	ldr	r0, [r3, #0]
   2d03c:	4770      	bx	lr
   2d03e:	bf00      	nop
   2d040:	200008f4 	.word	0x200008f4

0002d044 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2d044:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2d046:	2208      	movs	r2, #8
{
   2d048:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2d04a:	f01e fb13 	bl	4b674 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2d04e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2d050:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2d052:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2d054:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2d056:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2d058:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2d05a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2d05c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2d05e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2d060:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2d062:	4613      	mov	r3, r2
   2d064:	466a      	mov	r2, sp
{
   2d066:	460c      	mov	r4, r1
   2d068:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   2d06a:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2d06c:	4611      	mov	r1, r2
   2d06e:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   2d070:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2d074:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2d076:	f01e fa13 	bl	4b4a0 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d07a:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2d07c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d07e:	4630      	mov	r0, r6
   2d080:	f01e fa0e 	bl	4b4a0 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2d084:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2d086:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   2d088:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2d08a:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   2d08c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2d08e:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   2d090:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d092:	4405      	add	r5, r0
	tmp[7] = 0;
   2d094:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2d098:	4610      	mov	r0, r2
   2d09a:	4611      	mov	r1, r2
   2d09c:	f01e fa00 	bl	4b4a0 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d0a0:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2d0a2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d0a4:	4630      	mov	r0, r6
   2d0a6:	f01e f9fb 	bl	4b4a0 <uECC_vli_add>
   2d0aa:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2d0ac:	6a20      	ldr	r0, [r4, #32]
   2d0ae:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   2d0b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2d0b2:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   2d0b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2d0b6:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2d0b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2d0ba:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   2d0bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2d0be:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d0c0:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2d0c2:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2d0c6:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d0c8:	f01e f9ea 	bl	4b4a0 <uECC_vli_add>
   2d0cc:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2d0ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2d0d0:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   2d0d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2d0d4:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2d0d8:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   2d0da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2d0dc:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   2d0de:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   2d0e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2d0e4:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2d0e8:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   2d0ea:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   2d0ee:	6a20      	ldr	r0, [r4, #32]
   2d0f0:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2d0f2:	4630      	mov	r0, r6
   2d0f4:	f01e f9d4 	bl	4b4a0 <uECC_vli_add>
   2d0f8:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2d0fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2d0fc:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   2d0fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2d100:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   2d102:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2d104:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2d106:	6a20      	ldr	r0, [r4, #32]
   2d108:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   2d10a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2d10c:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d10e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2d110:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2d114:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d116:	f01e fae0 	bl	4b6da <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2d11a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d11c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2d11e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2d120:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2d122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d124:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2d126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2d128:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2d12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d12c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2d12e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2d130:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d132:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d134:	2308      	movs	r3, #8
   2d136:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   2d138:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d13c:	f01e facd 	bl	4b6da <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2d140:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2d142:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2d144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d146:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2d148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2d14a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2d14c:	6a23      	ldr	r3, [r4, #32]
   2d14e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2d150:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d152:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2d154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2d156:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2d15a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d15c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d15e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d160:	2308      	movs	r3, #8
   2d162:	4630      	mov	r0, r6
   2d164:	f01e fab9 	bl	4b6da <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2d168:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d16a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2d16c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2d16e:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2d172:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d174:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2d176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2d178:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2d17a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   2d17c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   2d180:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2d182:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d184:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2d186:	2308      	movs	r3, #8
   2d188:	4630      	mov	r0, r6
   2d18a:	f01e faa6 	bl	4b6da <uECC_vli_sub>

	if (carry < 0) {
   2d18e:	1a2d      	subs	r5, r5, r0
   2d190:	d410      	bmi.n	2d1b4 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2d192:	4c0d      	ldr	r4, [pc, #52]	; (2d1c8 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
   2d194:	b935      	cbnz	r5, 2d1a4 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2d196:	2208      	movs	r2, #8
   2d198:	4631      	mov	r1, r6
   2d19a:	4620      	mov	r0, r4
   2d19c:	f01e fa76 	bl	4b68c <uECC_vli_cmp_unsafe>
		while (carry || 
   2d1a0:	2801      	cmp	r0, #1
   2d1a2:	d00f      	beq.n	2d1c4 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2d1a4:	2308      	movs	r3, #8
   2d1a6:	4622      	mov	r2, r4
   2d1a8:	4631      	mov	r1, r6
   2d1aa:	4630      	mov	r0, r6
   2d1ac:	f01e fa95 	bl	4b6da <uECC_vli_sub>
   2d1b0:	1a2d      	subs	r5, r5, r0
   2d1b2:	e7ef      	b.n	2d194 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2d1b4:	4a04      	ldr	r2, [pc, #16]	; (2d1c8 <vli_mmod_fast_secp256r1+0x184>)
   2d1b6:	2308      	movs	r3, #8
   2d1b8:	4631      	mov	r1, r6
   2d1ba:	4630      	mov	r0, r6
   2d1bc:	f01e f970 	bl	4b4a0 <uECC_vli_add>
		while (carry < 0);
   2d1c0:	182d      	adds	r5, r5, r0
   2d1c2:	d4f8      	bmi.n	2d1b6 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
   2d1c4:	b009      	add	sp, #36	; 0x24
   2d1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d1c8:	00054b74 	.word	0x00054b74

0002d1cc <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2d1cc:	4904      	ldr	r1, [pc, #16]	; (2d1e0 <sub_bytes+0x14>)
   2d1ce:	1e43      	subs	r3, r0, #1
   2d1d0:	300f      	adds	r0, #15
   2d1d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2d1d6:	5c8a      	ldrb	r2, [r1, r2]
   2d1d8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2d1da:	4283      	cmp	r3, r0
   2d1dc:	d1f9      	bne.n	2d1d2 <sub_bytes+0x6>
	}
}
   2d1de:	4770      	bx	lr
   2d1e0:	00056761 	.word	0x00056761

0002d1e4 <tc_aes128_set_encrypt_key>:
{
   2d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2d1e6:	4e26      	ldr	r6, [pc, #152]	; (2d280 <tc_aes128_set_encrypt_key+0x9c>)
{
   2d1e8:	4607      	mov	r7, r0
   2d1ea:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2d1ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2d1ee:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2d1f0:	ad01      	add	r5, sp, #4
   2d1f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2d1f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2d1f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2d1f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2d1fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2d200:	4638      	mov	r0, r7
   2d202:	2f00      	cmp	r7, #0
   2d204:	d038      	beq.n	2d278 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2d206:	2c00      	cmp	r4, #0
   2d208:	d038      	beq.n	2d27c <tc_aes128_set_encrypt_key+0x98>
   2d20a:	1f38      	subs	r0, r7, #4
   2d20c:	4621      	mov	r1, r4
   2d20e:	4602      	mov	r2, r0
   2d210:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2d212:	784b      	ldrb	r3, [r1, #1]
   2d214:	780d      	ldrb	r5, [r1, #0]
   2d216:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2d218:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2d21c:	78cd      	ldrb	r5, [r1, #3]
   2d21e:	432b      	orrs	r3, r5
   2d220:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2d222:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2d224:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2d228:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2d22a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2d22e:	d1f0      	bne.n	2d212 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2d230:	4c14      	ldr	r4, [pc, #80]	; (2d284 <tc_aes128_set_encrypt_key+0xa0>)
   2d232:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2d234:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2d236:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2d238:	d116      	bne.n	2d268 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2d23a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2d23e:	5ca5      	ldrb	r5, [r4, r2]
   2d240:	0e1a      	lsrs	r2, r3, #24
   2d242:	5ca2      	ldrb	r2, [r4, r2]
   2d244:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2d248:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2d24c:	b2db      	uxtb	r3, r3
   2d24e:	5d65      	ldrb	r5, [r4, r5]
   2d250:	5ce3      	ldrb	r3, [r4, r3]
   2d252:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2d256:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2d25a:	ad0c      	add	r5, sp, #48	; 0x30
   2d25c:	f021 0303 	bic.w	r3, r1, #3
   2d260:	442b      	add	r3, r5
   2d262:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2d266:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2d268:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2d26c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2d26e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2d270:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2d272:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2d274:	d1de      	bne.n	2d234 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2d276:	2001      	movs	r0, #1
}
   2d278:	b00d      	add	sp, #52	; 0x34
   2d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2d27c:	4620      	mov	r0, r4
   2d27e:	e7fb      	b.n	2d278 <tc_aes128_set_encrypt_key+0x94>
   2d280:	00052ac8 	.word	0x00052ac8
   2d284:	00056761 	.word	0x00056761

0002d288 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2d288:	4901      	ldr	r1, [pc, #4]	; (2d290 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2d28a:	2210      	movs	r2, #16
	str	r2, [r1]
   2d28c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2d28e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2d290:	e000ed10 	.word	0xe000ed10

0002d294 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2d294:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2d296:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2d298:	f380 8811 	msr	BASEPRI, r0
	isb
   2d29c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2d2a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2d2a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2d2a6:	b662      	cpsie	i
	isb
   2d2a8:	f3bf 8f6f 	isb	sy

	bx	lr
   2d2ac:	4770      	bx	lr
   2d2ae:	bf00      	nop

0002d2b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2d2b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2d2b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2d2b4:	f381 8811 	msr	BASEPRI, r1

	wfe
   2d2b8:	bf20      	wfe

	msr	BASEPRI, r0
   2d2ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2d2be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2d2c0:	4770      	bx	lr
   2d2c2:	bf00      	nop

0002d2c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2d2c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2d2c6:	2b00      	cmp	r3, #0
   2d2c8:	db08      	blt.n	2d2dc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2d2ca:	2201      	movs	r2, #1
   2d2cc:	f000 001f 	and.w	r0, r0, #31
   2d2d0:	fa02 f000 	lsl.w	r0, r2, r0
   2d2d4:	095b      	lsrs	r3, r3, #5
   2d2d6:	4a02      	ldr	r2, [pc, #8]	; (2d2e0 <arch_irq_enable+0x1c>)
   2d2d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   2d2dc:	4770      	bx	lr
   2d2de:	bf00      	nop
   2d2e0:	e000e100 	.word	0xe000e100

0002d2e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2d2e4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2d2e6:	2b00      	cmp	r3, #0
   2d2e8:	db0d      	blt.n	2d306 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2d2ea:	2201      	movs	r2, #1
   2d2ec:	095b      	lsrs	r3, r3, #5
   2d2ee:	f000 001f 	and.w	r0, r0, #31
   2d2f2:	fa02 f000 	lsl.w	r0, r2, r0
   2d2f6:	3320      	adds	r3, #32
   2d2f8:	4a03      	ldr	r2, [pc, #12]	; (2d308 <arch_irq_disable+0x24>)
   2d2fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2d2fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2d302:	f3bf 8f6f 	isb	sy
}
   2d306:	4770      	bx	lr
   2d308:	e000e100 	.word	0xe000e100

0002d30c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2d30c:	4b05      	ldr	r3, [pc, #20]	; (2d324 <arch_irq_is_enabled+0x18>)
   2d30e:	0942      	lsrs	r2, r0, #5
   2d310:	f000 001f 	and.w	r0, r0, #31
   2d314:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2d318:	2301      	movs	r3, #1
   2d31a:	fa03 f000 	lsl.w	r0, r3, r0
}
   2d31e:	4010      	ands	r0, r2
   2d320:	4770      	bx	lr
   2d322:	bf00      	nop
   2d324:	e000e100 	.word	0xe000e100

0002d328 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2d328:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2d32a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d32c:	bfa8      	it	ge
   2d32e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2d332:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d336:	bfb8      	it	lt
   2d338:	4b06      	ldrlt	r3, [pc, #24]	; (2d354 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d33a:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2d33e:	bfac      	ite	ge
   2d340:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d344:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d348:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d34a:	bfb4      	ite	lt
   2d34c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d34e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   2d352:	4770      	bx	lr
   2d354:	e000ed14 	.word	0xe000ed14

0002d358 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2d358:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2d35a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2d35c:	4b04      	ldr	r3, [pc, #16]	; (2d370 <_arch_isr_direct_pm+0x18>)
   2d35e:	699a      	ldr	r2, [r3, #24]
   2d360:	b11a      	cbz	r2, 2d36a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2d362:	2200      	movs	r2, #0
   2d364:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2d366:	f024 f975 	bl	51654 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2d36a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2d36c:	bd08      	pop	{r3, pc}
   2d36e:	bf00      	nop
   2d370:	20007530 	.word	0x20007530

0002d374 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2d374:	bf30      	wfi
    b z_SysNmiOnReset
   2d376:	f7ff bffd 	b.w	2d374 <z_SysNmiOnReset>
   2d37a:	bf00      	nop

0002d37c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2d37c:	4a0f      	ldr	r2, [pc, #60]	; (2d3bc <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2d37e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2d380:	4b0f      	ldr	r3, [pc, #60]	; (2d3c0 <z_arm_prep_c+0x44>)
   2d382:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2d386:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2d388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2d38c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2d390:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2d394:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2d398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2d39c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2d3a0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2d3a4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2d3a8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2d3ac:	f01a ff2c 	bl	48208 <z_bss_zero>
	z_data_copy();
   2d3b0:	f01b fff6 	bl	493a0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2d3b4:	f000 f994 	bl	2d6e0 <z_arm_interrupt_init>
	z_cstart();
   2d3b8:	f01a ff30 	bl	4821c <z_cstart>
   2d3bc:	00026000 	.word	0x00026000
   2d3c0:	e000ed00 	.word	0xe000ed00

0002d3c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2d3c4:	4a09      	ldr	r2, [pc, #36]	; (2d3ec <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2d3c6:	490a      	ldr	r1, [pc, #40]	; (2d3f0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2d3c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2d3ca:	6809      	ldr	r1, [r1, #0]
   2d3cc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2d3ce:	4909      	ldr	r1, [pc, #36]	; (2d3f4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2d3d0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2d3d2:	684b      	ldr	r3, [r1, #4]
   2d3d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2d3d8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2d3da:	2300      	movs	r3, #0
   2d3dc:	f383 8811 	msr	BASEPRI, r3
   2d3e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2d3e4:	6893      	ldr	r3, [r2, #8]
}
   2d3e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2d3e8:	4770      	bx	lr
   2d3ea:	bf00      	nop
   2d3ec:	20007530 	.word	0x20007530
   2d3f0:	000561d8 	.word	0x000561d8
   2d3f4:	e000ed00 	.word	0xe000ed00

0002d3f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2d3f8:	490f      	ldr	r1, [pc, #60]	; (2d438 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2d3fa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2d3fc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2d400:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2d402:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2d406:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2d40a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2d40c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2d410:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2d414:	4f09      	ldr	r7, [pc, #36]	; (2d43c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2d416:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2d41a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2d41c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2d41e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2d420:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2d422:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2d424:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2d426:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2d42a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2d42e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2d432:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2d436:	4770      	bx	lr
    ldr r1, =_kernel
   2d438:	20007530 	.word	0x20007530
    ldr v4, =_SCS_ICSR
   2d43c:	e000ed04 	.word	0xe000ed04

0002d440 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2d440:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2d444:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2d446:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2d44a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2d44e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2d450:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2d454:	2902      	cmp	r1, #2
    beq _oops
   2d456:	d0ff      	beq.n	2d458 <_oops>

0002d458 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2d458:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2d45a:	f01f f865 	bl	4c528 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2d45e:	bd01      	pop	{r0, pc}

0002d460 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2d460:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2d464:	9b00      	ldr	r3, [sp, #0]
   2d466:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2d46a:	490a      	ldr	r1, [pc, #40]	; (2d494 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2d46c:	9b01      	ldr	r3, [sp, #4]
   2d46e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2d472:	9b02      	ldr	r3, [sp, #8]
   2d474:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2d478:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2d47c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2d480:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2d484:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2d488:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2d48a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2d48c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2d48e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2d490:	4770      	bx	lr
   2d492:	bf00      	nop
   2d494:	0004a6e7 	.word	0x0004a6e7

0002d498 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2d498:	4b07      	ldr	r3, [pc, #28]	; (2d4b8 <arch_switch_to_main_thread+0x20>)
   2d49a:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2d49c:	4610      	mov	r0, r2
   2d49e:	f381 8809 	msr	PSP, r1
   2d4a2:	2100      	movs	r1, #0
   2d4a4:	b663      	cpsie	if
   2d4a6:	f381 8811 	msr	BASEPRI, r1
   2d4aa:	f3bf 8f6f 	isb	sy
   2d4ae:	2200      	movs	r2, #0
   2d4b0:	2300      	movs	r3, #0
   2d4b2:	f01d f918 	bl	4a6e6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2d4b6:	bf00      	nop
   2d4b8:	20007530 	.word	0x20007530

0002d4bc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2d4bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2d4be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2d4c0:	4a0b      	ldr	r2, [pc, #44]	; (2d4f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2d4c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2d4c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2d4c6:	bf1e      	ittt	ne
	movne	r1, #0
   2d4c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2d4ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2d4cc:	f024 f8c2 	blne	51654 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2d4d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2d4d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2d4d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2d4da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2d4de:	4905      	ldr	r1, [pc, #20]	; (2d4f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2d4e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2d4e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2d4e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2d4e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2d4ea:	4903      	ldr	r1, [pc, #12]	; (2d4f8 <_isr_wrapper+0x3c>)
	bx r1
   2d4ec:	4708      	bx	r1
   2d4ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   2d4f0:	20007530 	.word	0x20007530
	ldr r1, =_sw_isr_table
   2d4f4:	0005267c 	.word	0x0005267c
	ldr r1, =z_arm_int_exit
   2d4f8:	0002d4fd 	.word	0x0002d4fd

0002d4fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2d4fc:	4b04      	ldr	r3, [pc, #16]	; (2d510 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2d4fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2d500:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2d502:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2d504:	d003      	beq.n	2d50e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2d506:	4903      	ldr	r1, [pc, #12]	; (2d514 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2d508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2d50c:	600a      	str	r2, [r1, #0]

0002d50e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2d50e:	4770      	bx	lr
	ldr r3, =_kernel
   2d510:	20007530 	.word	0x20007530
	ldr r1, =_SCS_ICSR
   2d514:	e000ed04 	.word	0xe000ed04

0002d518 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2d518:	4b0d      	ldr	r3, [pc, #52]	; (2d550 <bus_fault.constprop.0+0x38>)
   2d51a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2d51c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2d51e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d520:	0592      	lsls	r2, r2, #22
   2d522:	d508      	bpl.n	2d536 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2d524:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2d526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d528:	0412      	lsls	r2, r2, #16
   2d52a:	d504      	bpl.n	2d536 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2d52c:	b118      	cbz	r0, 2d536 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2d52e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2d534:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2d536:	4b06      	ldr	r3, [pc, #24]	; (2d550 <bus_fault.constprop.0+0x38>)
   2d538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2d53a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d53c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2d53e:	bf58      	it	pl
   2d540:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2d542:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2d544:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2d546:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   2d54a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2d54c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2d54e:	4770      	bx	lr
   2d550:	e000ed00 	.word	0xe000ed00

0002d554 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2d554:	4b0e      	ldr	r3, [pc, #56]	; (2d590 <mem_manage_fault.constprop.0+0x3c>)
   2d556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2d558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2d55a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d55c:	0792      	lsls	r2, r2, #30
   2d55e:	d508      	bpl.n	2d572 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2d560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2d562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d564:	0612      	lsls	r2, r2, #24
   2d566:	d504      	bpl.n	2d572 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2d568:	b118      	cbz	r0, 2d572 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2d56a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d56c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2d570:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2d572:	4b07      	ldr	r3, [pc, #28]	; (2d590 <mem_manage_fault.constprop.0+0x3c>)
   2d574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2d576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2d578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d57a:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2d57c:	bf58      	it	pl
   2d57e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2d580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2d582:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2d584:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2d588:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2d58a:	7008      	strb	r0, [r1, #0]
}
   2d58c:	4770      	bx	lr
   2d58e:	bf00      	nop
   2d590:	e000ed00 	.word	0xe000ed00

0002d594 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2d594:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2d596:	4b48      	ldr	r3, [pc, #288]	; (2d6b8 <z_arm_fault+0x124>)
   2d598:	685b      	ldr	r3, [r3, #4]
{
   2d59a:	b08a      	sub	sp, #40	; 0x28
   2d59c:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2d59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2d5a2:	2500      	movs	r5, #0
   2d5a4:	f385 8811 	msr	BASEPRI, r5
   2d5a8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2d5ac:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   2d5b0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   2d5b4:	d111      	bne.n	2d5da <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2d5b6:	f002 010c 	and.w	r1, r2, #12
   2d5ba:	2908      	cmp	r1, #8
   2d5bc:	d00d      	beq.n	2d5da <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2d5be:	0711      	lsls	r1, r2, #28
   2d5c0:	d401      	bmi.n	2d5c6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   2d5c2:	4606      	mov	r6, r0
			*nested_exc = true;
   2d5c4:	2501      	movs	r5, #1
	*recoverable = false;
   2d5c6:	2200      	movs	r2, #0
	switch (fault) {
   2d5c8:	3b03      	subs	r3, #3
	*recoverable = false;
   2d5ca:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2d5ce:	2b03      	cmp	r3, #3
   2d5d0:	d86a      	bhi.n	2d6a8 <z_arm_fault+0x114>
   2d5d2:	e8df f003 	tbb	[pc, r3]
   2d5d6:	5404      	.short	0x5404
   2d5d8:	5c58      	.short	0x5c58
		return NULL;
   2d5da:	462e      	mov	r6, r5
   2d5dc:	e7f3      	b.n	2d5c6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2d5de:	4b36      	ldr	r3, [pc, #216]	; (2d6b8 <z_arm_fault+0x124>)
   2d5e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2d5e2:	f014 0402 	ands.w	r4, r4, #2
   2d5e6:	d15f      	bne.n	2d6a8 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2d5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d5ea:	2a00      	cmp	r2, #0
   2d5ec:	db14      	blt.n	2d618 <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2d5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d5f0:	0052      	lsls	r2, r2, #1
   2d5f2:	d511      	bpl.n	2d618 <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
   2d5f4:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2d5f6:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2d5fa:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2d5fe:	4291      	cmp	r1, r2
   2d600:	d009      	beq.n	2d616 <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
   2d602:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2d606:	b302      	cbz	r2, 2d64a <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
   2d608:	f10d 0107 	add.w	r1, sp, #7
   2d60c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2d60e:	f7ff ffa1 	bl	2d554 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   2d612:	4604      	mov	r4, r0
		break;
   2d614:	e000      	b.n	2d618 <z_arm_fault+0x84>
			reason = esf->basic.r0;
   2d616:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2d618:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2d61c:	b99b      	cbnz	r3, 2d646 <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2d61e:	2220      	movs	r2, #32
   2d620:	4631      	mov	r1, r6
   2d622:	a802      	add	r0, sp, #8
   2d624:	f01f f847 	bl	4c6b6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2d628:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d62a:	2d00      	cmp	r5, #0
   2d62c:	d03e      	beq.n	2d6ac <z_arm_fault+0x118>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2d62e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2d632:	b922      	cbnz	r2, 2d63e <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2d634:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2d638:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2d63c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2d63e:	a902      	add	r1, sp, #8
   2d640:	4620      	mov	r0, r4
   2d642:	f01e ff6f 	bl	4c524 <z_arm_fatal_error>
}
   2d646:	b00a      	add	sp, #40	; 0x28
   2d648:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   2d64a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2d64e:	b12a      	cbz	r2, 2d65c <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
   2d650:	f10d 0107 	add.w	r1, sp, #7
   2d654:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2d656:	f7ff ff5f 	bl	2d518 <bus_fault.constprop.0>
   2d65a:	e7da      	b.n	2d612 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
   2d65c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2d65e:	b292      	uxth	r2, r2
   2d660:	2a00      	cmp	r2, #0
   2d662:	d0d9      	beq.n	2d618 <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2d664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2d666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2d668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2d66a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2d66c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2d66e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2d670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d672:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2d676:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2d67a:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
   2d67c:	e7cc      	b.n	2d618 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   2d67e:	f10d 0107 	add.w	r1, sp, #7
   2d682:	2000      	movs	r0, #0
   2d684:	e7c3      	b.n	2d60e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   2d686:	f10d 0107 	add.w	r1, sp, #7
   2d68a:	2000      	movs	r0, #0
   2d68c:	e7e3      	b.n	2d656 <z_arm_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2d68e:	4b0a      	ldr	r3, [pc, #40]	; (2d6b8 <z_arm_fault+0x124>)
   2d690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2d692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2d694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2d696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2d698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2d69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2d69c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d69e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2d6a2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2d6a6:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2d6a8:	2400      	movs	r4, #0
   2d6aa:	e7b5      	b.n	2d618 <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2d6ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2d6b0:	f023 0301 	bic.w	r3, r3, #1
   2d6b4:	e7c2      	b.n	2d63c <z_arm_fault+0xa8>
   2d6b6:	bf00      	nop
   2d6b8:	e000ed00 	.word	0xe000ed00

0002d6bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2d6bc:	4a02      	ldr	r2, [pc, #8]	; (2d6c8 <z_arm_fault_init+0xc>)
   2d6be:	6953      	ldr	r3, [r2, #20]
   2d6c0:	f043 0310 	orr.w	r3, r3, #16
   2d6c4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2d6c6:	4770      	bx	lr
   2d6c8:	e000ed00 	.word	0xe000ed00

0002d6cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2d6cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2d6d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2d6d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2d6d6:	4672      	mov	r2, lr
	bl z_arm_fault
   2d6d8:	f7ff ff5c 	bl	2d594 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2d6dc:	bd01      	pop	{r0, pc}
   2d6de:	bf00      	nop

0002d6e0 <z_arm_interrupt_init>:
   2d6e0:	4804      	ldr	r0, [pc, #16]	; (2d6f4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2d6e2:	2300      	movs	r3, #0
   2d6e4:	2120      	movs	r1, #32
   2d6e6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2d6e8:	3301      	adds	r3, #1
   2d6ea:	2b30      	cmp	r3, #48	; 0x30
   2d6ec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2d6f0:	d1f9      	bne.n	2d6e6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2d6f2:	4770      	bx	lr
   2d6f4:	e000e100 	.word	0xe000e100

0002d6f8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2d6f8:	f024 fca2 	bl	52040 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2d6fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2d6fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2d702:	4808      	ldr	r0, [pc, #32]	; (2d724 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2d704:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2d708:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2d70a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2d70e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2d712:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2d714:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2d716:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2d71a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2d71e:	f7ff fe2d 	bl	2d37c <z_arm_prep_c>
   2d722:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2d724:	20009f68 	.word	0x20009f68

0002d728 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2d728:	4b06      	ldr	r3, [pc, #24]	; (2d744 <z_impl_k_thread_abort+0x1c>)
   2d72a:	689b      	ldr	r3, [r3, #8]
   2d72c:	4283      	cmp	r3, r0
   2d72e:	d107      	bne.n	2d740 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d730:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2d734:	b123      	cbz	r3, 2d740 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2d736:	4a04      	ldr	r2, [pc, #16]	; (2d748 <z_impl_k_thread_abort+0x20>)
   2d738:	6853      	ldr	r3, [r2, #4]
   2d73a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2d73e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2d740:	f01b bdca 	b.w	492d8 <z_thread_abort>
   2d744:	20007530 	.word	0x20007530
   2d748:	e000ed00 	.word	0xe000ed00

0002d74c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2d74c:	4b02      	ldr	r3, [pc, #8]	; (2d758 <z_arm_configure_static_mpu_regions+0xc>)
   2d74e:	4a03      	ldr	r2, [pc, #12]	; (2d75c <z_arm_configure_static_mpu_regions+0x10>)
   2d750:	4803      	ldr	r0, [pc, #12]	; (2d760 <z_arm_configure_static_mpu_regions+0x14>)
   2d752:	2101      	movs	r1, #1
   2d754:	f000 b85e 	b.w	2d814 <arm_core_mpu_configure_static_mpu_regions>
   2d758:	20040000 	.word	0x20040000
   2d75c:	20000000 	.word	0x20000000
   2d760:	00054c20 	.word	0x00054c20

0002d764 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2d764:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2d766:	4f1f      	ldr	r7, [pc, #124]	; (2d7e4 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2d768:	2600      	movs	r6, #0
   2d76a:	428e      	cmp	r6, r1
   2d76c:	db01      	blt.n	2d772 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2d76e:	4610      	mov	r0, r2
   2d770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2d772:	6844      	ldr	r4, [r0, #4]
   2d774:	b39c      	cbz	r4, 2d7de <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   2d776:	b153      	cbz	r3, 2d78e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2d778:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2d77c:	ea14 0f0c 	tst.w	r4, ip
   2d780:	d118      	bne.n	2d7b4 <mpu_configure_regions+0x50>
		&&
   2d782:	2c1f      	cmp	r4, #31
   2d784:	d916      	bls.n	2d7b4 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   2d786:	6805      	ldr	r5, [r0, #0]
		&&
   2d788:	ea1c 0f05 	tst.w	ip, r5
   2d78c:	d112      	bne.n	2d7b4 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2d78e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2d790:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2d792:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2d796:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   2d798:	d90f      	bls.n	2d7ba <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   2d79a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2d79e:	d80e      	bhi.n	2d7be <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2d7a0:	3c01      	subs	r4, #1
   2d7a2:	fab4 f484 	clz	r4, r4
   2d7a6:	f1c4 041f 	rsb	r4, r4, #31
   2d7aa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2d7ac:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2d7ae:	ea4c 0404 	orr.w	r4, ip, r4
   2d7b2:	d906      	bls.n	2d7c2 <mpu_configure_regions+0x5e>
			return -EINVAL;
   2d7b4:	f06f 0215 	mvn.w	r2, #21
   2d7b8:	e7d9      	b.n	2d76e <mpu_configure_regions+0xa>
		return REGION_32B;
   2d7ba:	2408      	movs	r4, #8
   2d7bc:	e7f6      	b.n	2d7ac <mpu_configure_regions+0x48>
		return REGION_4G;
   2d7be:	243e      	movs	r4, #62	; 0x3e
   2d7c0:	e7f4      	b.n	2d7ac <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d7c2:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   2d7c6:	4315      	orrs	r5, r2
   2d7c8:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d7cc:	f044 0401 	orr.w	r4, r4, #1
   2d7d0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d7d4:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   2d7d8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d7da:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   2d7de:	3601      	adds	r6, #1
   2d7e0:	300c      	adds	r0, #12
   2d7e2:	e7c2      	b.n	2d76a <mpu_configure_regions+0x6>
   2d7e4:	e000ed00 	.word	0xe000ed00

0002d7e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2d7e8:	4b04      	ldr	r3, [pc, #16]	; (2d7fc <arm_core_mpu_enable+0x14>)
   2d7ea:	2205      	movs	r2, #5
   2d7ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2d7f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2d7f4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2d7f8:	4770      	bx	lr
   2d7fa:	bf00      	nop
   2d7fc:	e000ed00 	.word	0xe000ed00

0002d800 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2d800:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2d804:	4b02      	ldr	r3, [pc, #8]	; (2d810 <arm_core_mpu_disable+0x10>)
   2d806:	2200      	movs	r2, #0
   2d808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2d80c:	4770      	bx	lr
   2d80e:	bf00      	nop
   2d810:	e000ed00 	.word	0xe000ed00

0002d814 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2d814:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2d816:	4c03      	ldr	r4, [pc, #12]	; (2d824 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2d818:	2301      	movs	r3, #1
   2d81a:	7822      	ldrb	r2, [r4, #0]
   2d81c:	f7ff ffa2 	bl	2d764 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2d820:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2d822:	bd10      	pop	{r4, pc}
   2d824:	200076e6 	.word	0x200076e6

0002d828 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2d828:	4914      	ldr	r1, [pc, #80]	; (2d87c <z_arm_mpu_init+0x54>)
   2d82a:	6808      	ldr	r0, [r1, #0]
   2d82c:	2808      	cmp	r0, #8
{
   2d82e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2d830:	d821      	bhi.n	2d876 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2d832:	f7ff ffe5 	bl	2d800 <arm_core_mpu_disable>
   2d836:	4c12      	ldr	r4, [pc, #72]	; (2d880 <z_arm_mpu_init+0x58>)
   2d838:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d83a:	2200      	movs	r2, #0
   2d83c:	4290      	cmp	r0, r2
   2d83e:	f101 010c 	add.w	r1, r1, #12
   2d842:	d105      	bne.n	2d850 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2d844:	4b0f      	ldr	r3, [pc, #60]	; (2d884 <z_arm_mpu_init+0x5c>)
   2d846:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2d848:	f7ff ffce 	bl	2d7e8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2d84c:	2000      	movs	r0, #0
}
   2d84e:	bd10      	pop	{r4, pc}
   2d850:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d854:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2d858:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2d85c:	4313      	orrs	r3, r2
   2d85e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d862:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d866:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2d86a:	f043 0301 	orr.w	r3, r3, #1
   2d86e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d872:	3201      	adds	r2, #1
   2d874:	e7e2      	b.n	2d83c <z_arm_mpu_init+0x14>
		return -1;
   2d876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d87a:	e7e8      	b.n	2d84e <z_arm_mpu_init+0x26>
   2d87c:	00054c2c 	.word	0x00054c2c
   2d880:	e000ed00 	.word	0xe000ed00
   2d884:	200076e6 	.word	0x200076e6

0002d888 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   2d888:	b40c      	push	{r2, r3}
   2d88a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   2d88c:	b909      	cbnz	r1, 2d892 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   2d88e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   2d892:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   2d896:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d898:	9a06      	ldr	r2, [sp, #24]
   2d89a:	4806      	ldr	r0, [pc, #24]	; (2d8b4 <snprintf+0x2c>)
	va_start(vargs, format);
   2d89c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d89e:	a902      	add	r1, sp, #8
   2d8a0:	f7fd fcea 	bl	2b278 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2d8a4:	9b02      	ldr	r3, [sp, #8]
   2d8a6:	2200      	movs	r2, #0
   2d8a8:	701a      	strb	r2, [r3, #0]
	return r;
}
   2d8aa:	b005      	add	sp, #20
   2d8ac:	f85d eb04 	ldr.w	lr, [sp], #4
   2d8b0:	b002      	add	sp, #8
   2d8b2:	4770      	bx	lr
   2d8b4:	0004c6df 	.word	0x0004c6df

0002d8b8 <sprintf>:

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   2d8b8:	b40e      	push	{r1, r2, r3}
   2d8ba:	b50f      	push	{r0, r1, r2, r3, lr}
   2d8bc:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d8be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   2d8c2:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   2d8c6:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d8c8:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d8ca:	4806      	ldr	r0, [pc, #24]	; (2d8e4 <sprintf+0x2c>)
	va_start(vargs, format);
   2d8cc:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d8ce:	a902      	add	r1, sp, #8
   2d8d0:	f7fd fcd2 	bl	2b278 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2d8d4:	9b02      	ldr	r3, [sp, #8]
   2d8d6:	2200      	movs	r2, #0
   2d8d8:	701a      	strb	r2, [r3, #0]
	return r;
}
   2d8da:	b004      	add	sp, #16
   2d8dc:	f85d eb04 	ldr.w	lr, [sp], #4
   2d8e0:	b003      	add	sp, #12
   2d8e2:	4770      	bx	lr
   2d8e4:	0004c6df 	.word	0x0004c6df

0002d8e8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2d8e8:	f04f 0320 	mov.w	r3, #32
   2d8ec:	f3ef 8211 	mrs	r2, BASEPRI
   2d8f0:	f383 8812 	msr	BASEPRI_MAX, r3
   2d8f4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2d8f8:	4906      	ldr	r1, [pc, #24]	; (2d914 <nordicsemi_nrf52_init+0x2c>)
   2d8fa:	2301      	movs	r3, #1
   2d8fc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2d900:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2d904:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2d908:	f382 8811 	msr	BASEPRI, r2
   2d90c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2d910:	2000      	movs	r0, #0
   2d912:	4770      	bx	lr
   2d914:	4001e000 	.word	0x4001e000

0002d918 <sys_arch_reboot>:
    *p_gpregret = val;
   2d918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d91c:	b2c0      	uxtb	r0, r0
   2d91e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2d922:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2d926:	4905      	ldr	r1, [pc, #20]	; (2d93c <sys_arch_reboot+0x24>)
   2d928:	4b05      	ldr	r3, [pc, #20]	; (2d940 <sys_arch_reboot+0x28>)
   2d92a:	68ca      	ldr	r2, [r1, #12]
   2d92c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2d930:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2d932:	60cb      	str	r3, [r1, #12]
   2d934:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2d938:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2d93a:	e7fd      	b.n	2d938 <sys_arch_reboot+0x20>
   2d93c:	e000ed00 	.word	0xe000ed00
   2d940:	05fa0004 	.word	0x05fa0004

0002d944 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2d944:	b120      	cbz	r0, 2d950 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2d946:	4b03      	ldr	r3, [pc, #12]	; (2d954 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2d948:	0180      	lsls	r0, r0, #6
   2d94a:	f043 0301 	orr.w	r3, r3, #1
   2d94e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2d950:	4770      	bx	lr
   2d952:	bf00      	nop
   2d954:	00052b60 	.word	0x00052b60

0002d958 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2d958:	b570      	push	{r4, r5, r6, lr}
   2d95a:	4c21      	ldr	r4, [pc, #132]	; (2d9e0 <le_gen_dhkey+0x88>)
   2d95c:	f3bf 8f5b 	dmb	ish
   2d960:	6823      	ldr	r3, [r4, #0]
   2d962:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d966:	07da      	lsls	r2, r3, #31
{
   2d968:	4606      	mov	r6, r0
   2d96a:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d96c:	d501      	bpl.n	2d972 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2d96e:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2d970:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2d972:	2901      	cmp	r1, #1
   2d974:	d831      	bhi.n	2d9da <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d976:	f3bf 8f5b 	dmb	ish
   2d97a:	e854 3f00 	ldrex	r3, [r4]
   2d97e:	f043 0202 	orr.w	r2, r3, #2
   2d982:	e844 2100 	strex	r1, r2, [r4]
   2d986:	2900      	cmp	r1, #0
   2d988:	d1f7      	bne.n	2d97a <le_gen_dhkey+0x22>
   2d98a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2d98e:	079b      	lsls	r3, r3, #30
   2d990:	d4ed      	bmi.n	2d96e <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2d992:	4814      	ldr	r0, [pc, #80]	; (2d9e4 <le_gen_dhkey+0x8c>)
   2d994:	4631      	mov	r1, r6
   2d996:	f01e ff38 	bl	4c80a <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2d99a:	4813      	ldr	r0, [pc, #76]	; (2d9e8 <le_gen_dhkey+0x90>)
   2d99c:	f106 0120 	add.w	r1, r6, #32
   2d9a0:	f01e ff33 	bl	4c80a <sys_memcpy_swap.constprop.0>
   2d9a4:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2d9a8:	b175      	cbz	r5, 2d9c8 <le_gen_dhkey+0x70>
   2d9aa:	e854 3f00 	ldrex	r3, [r4]
   2d9ae:	f043 0304 	orr.w	r3, r3, #4
   2d9b2:	e844 3200 	strex	r2, r3, [r4]
   2d9b6:	2a00      	cmp	r2, #0
   2d9b8:	d1f7      	bne.n	2d9aa <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d9ba:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2d9be:	480b      	ldr	r0, [pc, #44]	; (2d9ec <le_gen_dhkey+0x94>)
   2d9c0:	f01a ff76 	bl	488b0 <z_impl_k_sem_give>
   2d9c4:	2000      	movs	r0, #0
   2d9c6:	e7d3      	b.n	2d970 <le_gen_dhkey+0x18>
   2d9c8:	e854 3f00 	ldrex	r3, [r4]
   2d9cc:	f023 0304 	bic.w	r3, r3, #4
   2d9d0:	e844 3200 	strex	r2, r3, [r4]
   2d9d4:	2a00      	cmp	r2, #0
   2d9d6:	d0f0      	beq.n	2d9ba <le_gen_dhkey+0x62>
   2d9d8:	e7f6      	b.n	2d9c8 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2d9da:	2012      	movs	r0, #18
   2d9dc:	e7c8      	b.n	2d970 <le_gen_dhkey+0x18>
   2d9de:	bf00      	nop
   2d9e0:	20004948 	.word	0x20004948
   2d9e4:	20007707 	.word	0x20007707
   2d9e8:	20007727 	.word	0x20007727
   2d9ec:	2000149c 	.word	0x2000149c

0002d9f0 <ecc_thread>:
{
   2d9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d9f4:	4f60      	ldr	r7, [pc, #384]	; (2db78 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
   2d9f6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 2db7c <ecc_thread+0x18c>
   2d9fa:	463e      	mov	r6, r7
   2d9fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2da00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2da04:	4640      	mov	r0, r8
   2da06:	f01a ff79 	bl	488fc <z_impl_k_sem_take>
   2da0a:	f3bf 8f5b 	dmb	ish
   2da0e:	683c      	ldr	r4, [r7, #0]
   2da10:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2da14:	f014 0401 	ands.w	r4, r4, #1
   2da18:	d055      	beq.n	2dac6 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2da1a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2db80 <ecc_thread+0x190>
   2da1e:	4c59      	ldr	r4, [pc, #356]	; (2db84 <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2da20:	4d59      	ldr	r5, [pc, #356]	; (2db88 <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2da22:	485a      	ldr	r0, [pc, #360]	; (2db8c <ecc_thread+0x19c>)
   2da24:	464a      	mov	r2, r9
   2da26:	4621      	mov	r1, r4
   2da28:	f01d fc8e 	bl	4b348 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2da2c:	2800      	cmp	r0, #0
   2da2e:	d03e      	beq.n	2daae <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2da30:	2220      	movs	r2, #32
   2da32:	4629      	mov	r1, r5
   2da34:	4620      	mov	r0, r4
   2da36:	f01e fe2d 	bl	4c694 <memcmp>
   2da3a:	2800      	cmp	r0, #0
   2da3c:	d0f1      	beq.n	2da22 <ecc_thread+0x32>
	return 0;
   2da3e:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2da42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2da46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2da4a:	2001      	movs	r0, #1
   2da4c:	f000 fa6c 	bl	2df28 <bt_buf_get_rx>
   2da50:	f100 0508 	add.w	r5, r0, #8
   2da54:	2102      	movs	r1, #2
   2da56:	4604      	mov	r4, r0
   2da58:	4628      	mov	r0, r5
   2da5a:	f022 fe55 	bl	50708 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2da5e:	233e      	movs	r3, #62	; 0x3e
   2da60:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2da62:	2342      	movs	r3, #66	; 0x42
   2da64:	7043      	strb	r3, [r0, #1]
   2da66:	2101      	movs	r1, #1
   2da68:	4628      	mov	r0, r5
   2da6a:	f022 fe4d 	bl	50708 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2da6e:	2308      	movs	r3, #8
   2da70:	7003      	strb	r3, [r0, #0]
   2da72:	2141      	movs	r1, #65	; 0x41
   2da74:	4628      	mov	r0, r5
   2da76:	f022 fe47 	bl	50708 <net_buf_simple_add>
   2da7a:	4605      	mov	r5, r0
	evt->status = status;
   2da7c:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   2da80:	f1b9 0f00 	cmp.w	r9, #0
   2da84:	d016      	beq.n	2dab4 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2da86:	2240      	movs	r2, #64	; 0x40
   2da88:	2100      	movs	r1, #0
   2da8a:	f01e fe1f 	bl	4c6cc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2da8e:	f3bf 8f5b 	dmb	ish
   2da92:	e856 3f00 	ldrex	r3, [r6]
   2da96:	f023 0301 	bic.w	r3, r3, #1
   2da9a:	e846 3200 	strex	r2, r3, [r6]
   2da9e:	2a00      	cmp	r2, #0
   2daa0:	d1f7      	bne.n	2da92 <ecc_thread+0xa2>
   2daa2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2daa6:	4620      	mov	r0, r4
	bt_recv(buf);
   2daa8:	f000 ff90 	bl	2e9cc <bt_recv>
	while (true) {
   2daac:	e7a6      	b.n	2d9fc <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   2daae:	f04f 091f 	mov.w	r9, #31
   2dab2:	e7c6      	b.n	2da42 <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2dab4:	4935      	ldr	r1, [pc, #212]	; (2db8c <ecc_thread+0x19c>)
   2dab6:	f01e fea8 	bl	4c80a <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2daba:	3120      	adds	r1, #32
   2dabc:	f105 0021 	add.w	r0, r5, #33	; 0x21
   2dac0:	f01e fea3 	bl	4c80a <sys_memcpy_swap.constprop.0>
   2dac4:	e7e3      	b.n	2da8e <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dac6:	f3bf 8f5b 	dmb	ish
   2daca:	683b      	ldr	r3, [r7, #0]
   2dacc:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2dad0:	079b      	lsls	r3, r3, #30
   2dad2:	d593      	bpl.n	2d9fc <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2dad4:	492a      	ldr	r1, [pc, #168]	; (2db80 <ecc_thread+0x190>)
   2dad6:	482d      	ldr	r0, [pc, #180]	; (2db8c <ecc_thread+0x19c>)
   2dad8:	f01e faef 	bl	4c0ba <uECC_valid_public_key>
	if (ret < 0) {
   2dadc:	2800      	cmp	r0, #0
   2dade:	db11      	blt.n	2db04 <ecc_thread+0x114>
   2dae0:	f3bf 8f5b 	dmb	ish
   2dae4:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
   2dae6:	4927      	ldr	r1, [pc, #156]	; (2db84 <ecc_thread+0x194>)
   2dae8:	4827      	ldr	r0, [pc, #156]	; (2db88 <ecc_thread+0x198>)
   2daea:	f3bf 8f5b 	dmb	ish
   2daee:	f013 0f04 	tst.w	r3, #4
   2daf2:	f101 0220 	add.w	r2, r1, #32
   2daf6:	4b22      	ldr	r3, [pc, #136]	; (2db80 <ecc_thread+0x190>)
   2daf8:	bf18      	it	ne
   2dafa:	4601      	movne	r1, r0
   2dafc:	4610      	mov	r0, r2
   2dafe:	f01d fc72 	bl	4b3e6 <uECC_shared_secret>
   2db02:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2db04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2db08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2db0c:	2001      	movs	r0, #1
   2db0e:	f000 fa0b 	bl	2df28 <bt_buf_get_rx>
   2db12:	f100 0908 	add.w	r9, r0, #8
   2db16:	2102      	movs	r1, #2
   2db18:	4605      	mov	r5, r0
   2db1a:	4648      	mov	r0, r9
   2db1c:	f022 fdf4 	bl	50708 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2db20:	233e      	movs	r3, #62	; 0x3e
   2db22:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2db24:	2322      	movs	r3, #34	; 0x22
   2db26:	7043      	strb	r3, [r0, #1]
   2db28:	2101      	movs	r1, #1
   2db2a:	4648      	mov	r0, r9
   2db2c:	f022 fdec 	bl	50708 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2db30:	2309      	movs	r3, #9
   2db32:	7003      	strb	r3, [r0, #0]
   2db34:	2121      	movs	r1, #33	; 0x21
   2db36:	4648      	mov	r0, r9
   2db38:	f022 fde6 	bl	50708 <net_buf_simple_add>
   2db3c:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2db3e:	3001      	adds	r0, #1
   2db40:	b99c      	cbnz	r4, 2db6a <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2db42:	221f      	movs	r2, #31
   2db44:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2db46:	21ff      	movs	r1, #255	; 0xff
   2db48:	2220      	movs	r2, #32
   2db4a:	f01e fdbf 	bl	4c6cc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2db4e:	f3bf 8f5b 	dmb	ish
   2db52:	e856 3f00 	ldrex	r3, [r6]
   2db56:	f023 0302 	bic.w	r3, r3, #2
   2db5a:	e846 3200 	strex	r2, r3, [r6]
   2db5e:	2a00      	cmp	r2, #0
   2db60:	d1f7      	bne.n	2db52 <ecc_thread+0x162>
   2db62:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2db66:	4628      	mov	r0, r5
   2db68:	e79e      	b.n	2daa8 <ecc_thread+0xb8>
		evt->status = 0U;
   2db6a:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2db6c:	4907      	ldr	r1, [pc, #28]	; (2db8c <ecc_thread+0x19c>)
		evt->status = 0U;
   2db6e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2db70:	f01e fe4b 	bl	4c80a <sys_memcpy_swap.constprop.0>
   2db74:	e7eb      	b.n	2db4e <ecc_thread+0x15e>
   2db76:	bf00      	nop
   2db78:	20004948 	.word	0x20004948
   2db7c:	2000149c 	.word	0x2000149c
   2db80:	00054c4c 	.word	0x00054c4c
   2db84:	200076e7 	.word	0x200076e7
   2db88:	00056877 	.word	0x00056877
   2db8c:	20007707 	.word	0x20007707

0002db90 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2db90:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2db92:	7d06      	ldrb	r6, [r0, #20]
   2db94:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2db96:	b976      	cbnz	r6, 2dbb6 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2db98:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2db9a:	881d      	ldrh	r5, [r3, #0]
   2db9c:	f242 0226 	movw	r2, #8230	; 0x2026
   2dba0:	4295      	cmp	r5, r2
   2dba2:	d045      	beq.n	2dc30 <bt_hci_ecc_send+0xa0>
   2dba4:	d80f      	bhi.n	2dbc6 <bt_hci_ecc_send+0x36>
   2dba6:	f242 0201 	movw	r2, #8193	; 0x2001
   2dbaa:	4295      	cmp	r5, r2
   2dbac:	d04f      	beq.n	2dc4e <bt_hci_ecc_send+0xbe>
   2dbae:	f242 0325 	movw	r3, #8229	; 0x2025
   2dbb2:	429d      	cmp	r5, r3
   2dbb4:	d013      	beq.n	2dbde <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2dbb6:	4b2a      	ldr	r3, [pc, #168]	; (2dc60 <bt_hci_ecc_send+0xd0>)
   2dbb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2dbbc:	4620      	mov	r0, r4
   2dbbe:	691b      	ldr	r3, [r3, #16]
}
   2dbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2dbc4:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2dbc6:	f242 035e 	movw	r3, #8286	; 0x205e
   2dbca:	429d      	cmp	r5, r3
   2dbcc:	d1f3      	bne.n	2dbb6 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2dbce:	2103      	movs	r1, #3
   2dbd0:	3008      	adds	r0, #8
   2dbd2:	f022 fdc2 	bl	5075a <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2dbd6:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2dbd8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2dbdc:	e02e      	b.n	2dc3c <bt_hci_ecc_send+0xac>
   2dbde:	2103      	movs	r1, #3
   2dbe0:	3008      	adds	r0, #8
   2dbe2:	f022 fdba 	bl	5075a <net_buf_simple_pull>
	net_buf_unref(buf);
   2dbe6:	4620      	mov	r0, r4
   2dbe8:	f016 fa64 	bl	440b4 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dbec:	f3bf 8f5b 	dmb	ish
   2dbf0:	4b1c      	ldr	r3, [pc, #112]	; (2dc64 <bt_hci_ecc_send+0xd4>)
   2dbf2:	681a      	ldr	r2, [r3, #0]
   2dbf4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2dbf8:	0792      	lsls	r2, r2, #30
   2dbfa:	d507      	bpl.n	2dc0c <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2dbfc:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2dbfe:	4631      	mov	r1, r6
   2dc00:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2dc04:	f01e fddd 	bl	4c7c2 <send_cmd_status>
}
   2dc08:	2000      	movs	r0, #0
   2dc0a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dc0c:	f3bf 8f5b 	dmb	ish
   2dc10:	e853 2f00 	ldrex	r2, [r3]
   2dc14:	f042 0101 	orr.w	r1, r2, #1
   2dc18:	e843 1000 	strex	r0, r1, [r3]
   2dc1c:	2800      	cmp	r0, #0
   2dc1e:	d1f7      	bne.n	2dc10 <bt_hci_ecc_send+0x80>
   2dc20:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2dc24:	07d3      	lsls	r3, r2, #31
   2dc26:	d4e9      	bmi.n	2dbfc <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2dc28:	480f      	ldr	r0, [pc, #60]	; (2dc68 <bt_hci_ecc_send+0xd8>)
   2dc2a:	f01a fe41 	bl	488b0 <z_impl_k_sem_give>
}
   2dc2e:	e7e6      	b.n	2dbfe <bt_hci_ecc_send+0x6e>
   2dc30:	2103      	movs	r1, #3
   2dc32:	3008      	adds	r0, #8
   2dc34:	f022 fd91 	bl	5075a <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2dc38:	68a0      	ldr	r0, [r4, #8]
   2dc3a:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2dc3c:	f7ff fe8c 	bl	2d958 <le_gen_dhkey>
   2dc40:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2dc42:	4620      	mov	r0, r4
   2dc44:	f016 fa36 	bl	440b4 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2dc48:	4631      	mov	r1, r6
   2dc4a:	4628      	mov	r0, r5
   2dc4c:	e7da      	b.n	2dc04 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2dc4e:	78da      	ldrb	r2, [r3, #3]
   2dc50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2dc54:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2dc56:	791a      	ldrb	r2, [r3, #4]
   2dc58:	f022 0201 	bic.w	r2, r2, #1
   2dc5c:	711a      	strb	r2, [r3, #4]
}
   2dc5e:	e7aa      	b.n	2dbb6 <bt_hci_ecc_send+0x26>
   2dc60:	20000040 	.word	0x20000040
   2dc64:	20004948 	.word	0x20004948
   2dc68:	2000149c 	.word	0x2000149c

0002dc6c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2dc6c:	b510      	push	{r4, lr}
   2dc6e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2dc70:	4c0c      	ldr	r4, [pc, #48]	; (2dca4 <bt_hci_ecc_init+0x38>)
   2dc72:	490d      	ldr	r1, [pc, #52]	; (2dca8 <bt_hci_ecc_init+0x3c>)
   2dc74:	2200      	movs	r2, #0
   2dc76:	2300      	movs	r3, #0
   2dc78:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2dc7c:	2300      	movs	r3, #0
   2dc7e:	220a      	movs	r2, #10
   2dc80:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2dc84:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2dc88:	9300      	str	r3, [sp, #0]
   2dc8a:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2dc8e:	4b07      	ldr	r3, [pc, #28]	; (2dcac <bt_hci_ecc_init+0x40>)
   2dc90:	4620      	mov	r0, r4
   2dc92:	f01a fbcb 	bl	4842c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2dc96:	4906      	ldr	r1, [pc, #24]	; (2dcb0 <bt_hci_ecc_init+0x44>)
   2dc98:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2dc9a:	b008      	add	sp, #32
   2dc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2dca0:	f023 bcd3 	b.w	5164a <z_impl_k_thread_name_set>
   2dca4:	20001c38 	.word	0x20001c38
   2dca8:	20007ba8 	.word	0x20007ba8
   2dcac:	0002d9f1 	.word	0x0002d9f1
   2dcb0:	00056870 	.word	0x00056870

0002dcb4 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2dcb4:	4903      	ldr	r1, [pc, #12]	; (2dcc4 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2dcb6:	4804      	ldr	r0, [pc, #16]	; (2dcc8 <save_id+0x14>)
   2dcb8:	79ca      	ldrb	r2, [r1, #7]
   2dcba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2dcbe:	f7fe be53 	b.w	2c968 <settings_save_one>
   2dcc2:	bf00      	nop
   2dcc4:	20000040 	.word	0x20000040
   2dcc8:	00056897 	.word	0x00056897

0002dccc <set>:
{
   2dccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2dcce:	4616      	mov	r6, r2
   2dcd0:	461f      	mov	r7, r3
	if (!name) {
   2dcd2:	4604      	mov	r4, r0
   2dcd4:	b920      	cbnz	r0, 2dce0 <set+0x14>
		return -ENOENT;
   2dcd6:	f06f 0401 	mvn.w	r4, #1
}
   2dcda:	4620      	mov	r0, r4
   2dcdc:	b003      	add	sp, #12
   2dcde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2dce0:	a901      	add	r1, sp, #4
   2dce2:	f01d fa1d 	bl	4b120 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2dce6:	4911      	ldr	r1, [pc, #68]	; (2dd2c <set+0x60>)
	len = settings_name_next(name, &next);
   2dce8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2dcea:	4620      	mov	r0, r4
   2dcec:	f01e fcc1 	bl	4c672 <strncmp>
   2dcf0:	4604      	mov	r4, r0
   2dcf2:	2800      	cmp	r0, #0
   2dcf4:	d1ef      	bne.n	2dcd6 <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dcf6:	f3bf 8f5b 	dmb	ish
   2dcfa:	4d0d      	ldr	r5, [pc, #52]	; (2dd30 <set+0x64>)
   2dcfc:	682b      	ldr	r3, [r5, #0]
   2dcfe:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2dd02:	075b      	lsls	r3, r3, #29
   2dd04:	d4e9      	bmi.n	2dcda <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2dd06:	3dcc      	subs	r5, #204	; 0xcc
   2dd08:	2207      	movs	r2, #7
   2dd0a:	4629      	mov	r1, r5
   2dd0c:	4638      	mov	r0, r7
   2dd0e:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2dd10:	2806      	cmp	r0, #6
   2dd12:	d806      	bhi.n	2dd22 <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2dd14:	2207      	movs	r2, #7
   2dd16:	4621      	mov	r1, r4
   2dd18:	4628      	mov	r0, r5
   2dd1a:	f01e fcd7 	bl	4c6cc <memset>
			bt_dev.id_count = 0U;
   2dd1e:	71ec      	strb	r4, [r5, #7]
   2dd20:	e7db      	b.n	2dcda <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2dd22:	2307      	movs	r3, #7
   2dd24:	fbb0 f0f3 	udiv	r0, r0, r3
   2dd28:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2dd2a:	e7d6      	b.n	2dcda <set+0xe>
   2dd2c:	00056557 	.word	0x00056557
   2dd30:	2000010c 	.word	0x2000010c

0002dd34 <bt_settings_encode_key>:
{
   2dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dd38:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2dd3a:	799c      	ldrb	r4, [r3, #6]
{
   2dd3c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2dd40:	795d      	ldrb	r5, [r3, #5]
   2dd42:	791e      	ldrb	r6, [r3, #4]
   2dd44:	78df      	ldrb	r7, [r3, #3]
   2dd46:	f893 c002 	ldrb.w	ip, [r3, #2]
   2dd4a:	f893 e001 	ldrb.w	lr, [r3, #1]
   2dd4e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2dd50:	f1b8 0f00 	cmp.w	r8, #0
   2dd54:	d00e      	beq.n	2dd74 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2dd56:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2dd5a:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2dd5e:	4613      	mov	r3, r2
   2dd60:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2dd64:	e9cd 4500 	strd	r4, r5, [sp]
   2dd68:	4a08      	ldr	r2, [pc, #32]	; (2dd8c <bt_settings_encode_key+0x58>)
   2dd6a:	f01c fba9 	bl	4a4c0 <snprintk>
}
   2dd6e:	b008      	add	sp, #32
   2dd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2dd74:	e9cd e305 	strd	lr, r3, [sp, #20]
   2dd78:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2dd7c:	4613      	mov	r3, r2
   2dd7e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2dd82:	4a03      	ldr	r2, [pc, #12]	; (2dd90 <bt_settings_encode_key+0x5c>)
   2dd84:	9400      	str	r4, [sp, #0]
   2dd86:	f01c fb9b 	bl	4a4c0 <snprintk>
}
   2dd8a:	e7f0      	b.n	2dd6e <bt_settings_encode_key+0x3a>
   2dd8c:	0005689d 	.word	0x0005689d
   2dd90:	000568c1 	.word	0x000568c1

0002dd94 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2dd94:	4801      	ldr	r0, [pc, #4]	; (2dd9c <bt_settings_save_id+0x8>)
   2dd96:	f01a bef7 	b.w	48b88 <k_work_submit>
   2dd9a:	bf00      	nop
   2dd9c:	200008f8 	.word	0x200008f8

0002dda0 <commit>:
}

static int commit(void)
{
   2dda0:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2dda2:	4c15      	ldr	r4, [pc, #84]	; (2ddf8 <commit+0x58>)
   2dda4:	79e3      	ldrb	r3, [r4, #7]
   2dda6:	b1e3      	cbz	r3, 2dde2 <commit+0x42>
   2dda8:	f3bf 8f5b 	dmb	ish
   2ddac:	4c13      	ldr	r4, [pc, #76]	; (2ddfc <commit+0x5c>)
   2ddae:	6823      	ldr	r3, [r4, #0]
   2ddb0:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ddb4:	079b      	lsls	r3, r3, #30
   2ddb6:	d401      	bmi.n	2ddbc <commit+0x1c>
		bt_finalize_init();
   2ddb8:	f000 febe 	bl	2eb38 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ddbc:	f3bf 8f5b 	dmb	ish
   2ddc0:	e854 0f00 	ldrex	r0, [r4]
   2ddc4:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   2ddc8:	e844 3200 	strex	r2, r3, [r4]
   2ddcc:	2a00      	cmp	r2, #0
   2ddce:	d1f7      	bne.n	2ddc0 <commit+0x20>
   2ddd0:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2ddd4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2ddd8:	d00d      	beq.n	2ddf6 <commit+0x56>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   2ddda:	f7ff ffdb 	bl	2dd94 <bt_settings_save_id>
	}

	return 0;
   2ddde:	2000      	movs	r0, #0
   2dde0:	e009      	b.n	2ddf6 <commit+0x56>
		err = bt_setup_public_id_addr();
   2dde2:	f001 f985 	bl	2f0f0 <bt_setup_public_id_addr>
		if (err) {
   2dde6:	b930      	cbnz	r0, 2ddf6 <commit+0x56>
	if (!bt_dev.id_count) {
   2dde8:	79e3      	ldrb	r3, [r4, #7]
   2ddea:	2b00      	cmp	r3, #0
   2ddec:	d1dc      	bne.n	2dda8 <commit+0x8>
		err = bt_setup_random_id_addr();
   2ddee:	f001 f9bf 	bl	2f170 <bt_setup_random_id_addr>
		if (err) {
   2ddf2:	2800      	cmp	r0, #0
   2ddf4:	d0d8      	beq.n	2dda8 <commit+0x8>
}
   2ddf6:	bd10      	pop	{r4, pc}
   2ddf8:	20000040 	.word	0x20000040
   2ddfc:	2000010c 	.word	0x2000010c

0002de00 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2de00:	b430      	push	{r4, r5}
   2de02:	4603      	mov	r3, r0
   2de04:	4608      	mov	r0, r1
	switch (src->type) {
   2de06:	781a      	ldrb	r2, [r3, #0]
   2de08:	2a01      	cmp	r2, #1
   2de0a:	d013      	beq.n	2de34 <uuid_to_uuid128+0x34>
   2de0c:	2a02      	cmp	r2, #2
   2de0e:	d026      	beq.n	2de5e <uuid_to_uuid128+0x5e>
   2de10:	b972      	cbnz	r2, 2de30 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2de12:	4a15      	ldr	r2, [pc, #84]	; (2de68 <uuid_to_uuid128+0x68>)
   2de14:	f102 0410 	add.w	r4, r2, #16
   2de18:	f852 5b04 	ldr.w	r5, [r2], #4
   2de1c:	f841 5b04 	str.w	r5, [r1], #4
   2de20:	42a2      	cmp	r2, r4
   2de22:	d1f9      	bne.n	2de18 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2de24:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2de26:	7812      	ldrb	r2, [r2, #0]
   2de28:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2de2a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2de2c:	0a1b      	lsrs	r3, r3, #8
   2de2e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2de30:	bc30      	pop	{r4, r5}
   2de32:	4770      	bx	lr
		*dst = uuid128_base;
   2de34:	4a0c      	ldr	r2, [pc, #48]	; (2de68 <uuid_to_uuid128+0x68>)
   2de36:	f102 0410 	add.w	r4, r2, #16
   2de3a:	f852 5b04 	ldr.w	r5, [r2], #4
   2de3e:	f841 5b04 	str.w	r5, [r1], #4
   2de42:	42a2      	cmp	r2, r4
   2de44:	d1f9      	bne.n	2de3a <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2de46:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2de48:	7812      	ldrb	r2, [r2, #0]
   2de4a:	700a      	strb	r2, [r1, #0]
   2de4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2de50:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2de52:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2de54:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2de56:	0a1b      	lsrs	r3, r3, #8
   2de58:	7382      	strb	r2, [r0, #14]
   2de5a:	7403      	strb	r3, [r0, #16]
}
   2de5c:	e7e8      	b.n	2de30 <uuid_to_uuid128+0x30>
}
   2de5e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2de60:	2211      	movs	r2, #17
   2de62:	4619      	mov	r1, r3
   2de64:	f01e bc27 	b.w	4c6b6 <memcpy>
   2de68:	00056904 	.word	0x00056904

0002de6c <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   2de6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   2de6e:	7805      	ldrb	r5, [r0, #0]
   2de70:	2d01      	cmp	r5, #1
{
   2de72:	b08b      	sub	sp, #44	; 0x2c
   2de74:	4604      	mov	r4, r0
   2de76:	460e      	mov	r6, r1
   2de78:	4617      	mov	r7, r2
	switch (uuid->type) {
   2de7a:	d00c      	beq.n	2de96 <bt_uuid_to_str+0x2a>
   2de7c:	2d02      	cmp	r5, #2
   2de7e:	d00d      	beq.n	2de9c <bt_uuid_to_str+0x30>
   2de80:	2d00      	cmp	r5, #0
   2de82:	d144      	bne.n	2df0e <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   2de84:	8843      	ldrh	r3, [r0, #2]
   2de86:	4a25      	ldr	r2, [pc, #148]	; (2df1c <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2de88:	4639      	mov	r1, r7
   2de8a:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   2de8c:	b00b      	add	sp, #44	; 0x2c
   2de8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2de92:	f01c bb15 	b.w	4a4c0 <snprintk>
   2de96:	6843      	ldr	r3, [r0, #4]
   2de98:	4a21      	ldr	r2, [pc, #132]	; (2df20 <bt_uuid_to_str+0xb4>)
   2de9a:	e7f5      	b.n	2de88 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   2de9c:	462a      	mov	r2, r5
   2de9e:	1c41      	adds	r1, r0, #1
   2dea0:	a806      	add	r0, sp, #24
   2dea2:	f01e fc08 	bl	4c6b6 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   2dea6:	1ce1      	adds	r1, r4, #3
   2dea8:	2204      	movs	r2, #4
   2deaa:	a808      	add	r0, sp, #32
   2deac:	f01e fc03 	bl	4c6b6 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   2deb0:	462a      	mov	r2, r5
   2deb2:	1de1      	adds	r1, r4, #7
   2deb4:	f10d 001a 	add.w	r0, sp, #26
   2deb8:	f01e fbfd 	bl	4c6b6 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   2debc:	462a      	mov	r2, r5
   2debe:	f104 0109 	add.w	r1, r4, #9
   2dec2:	a807      	add	r0, sp, #28
   2dec4:	f01e fbf7 	bl	4c6b6 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   2dec8:	462a      	mov	r2, r5
   2deca:	f104 010b 	add.w	r1, r4, #11
   2dece:	f10d 001e 	add.w	r0, sp, #30
   2ded2:	f01e fbf0 	bl	4c6b6 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   2ded6:	f104 010d 	add.w	r1, r4, #13
   2deda:	2204      	movs	r2, #4
   2dedc:	a809      	add	r0, sp, #36	; 0x24
   2dede:	f01e fbea 	bl	4c6b6 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   2dee2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2dee6:	9304      	str	r3, [sp, #16]
   2dee8:	9b08      	ldr	r3, [sp, #32]
   2deea:	9303      	str	r3, [sp, #12]
   2deec:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2def0:	9302      	str	r3, [sp, #8]
   2def2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2def6:	9301      	str	r3, [sp, #4]
   2def8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2defc:	9300      	str	r3, [sp, #0]
   2defe:	4a09      	ldr	r2, [pc, #36]	; (2df24 <bt_uuid_to_str+0xb8>)
   2df00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2df02:	4639      	mov	r1, r7
   2df04:	4630      	mov	r0, r6
   2df06:	f01c fadb 	bl	4a4c0 <snprintk>
}
   2df0a:	b00b      	add	sp, #44	; 0x2c
   2df0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   2df0e:	2100      	movs	r1, #0
   2df10:	4630      	mov	r0, r6
}
   2df12:	b00b      	add	sp, #44	; 0x2c
   2df14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   2df18:	f01e bbd8 	b.w	4c6cc <memset>
   2df1c:	000568ff 	.word	0x000568ff
   2df20:	000568e2 	.word	0x000568e2
   2df24:	000568e7 	.word	0x000568e7

0002df28 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2df28:	b538      	push	{r3, r4, r5, lr}
   2df2a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2df2c:	4805      	ldr	r0, [pc, #20]	; (2df44 <bt_buf_get_rx+0x1c>)
   2df2e:	f022 fb83 	bl	50638 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2df32:	4604      	mov	r4, r0
   2df34:	b120      	cbz	r0, 2df40 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2df36:	2100      	movs	r1, #0
   2df38:	3008      	adds	r0, #8
   2df3a:	f022 fba2 	bl	50682 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2df3e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2df40:	4620      	mov	r0, r4
   2df42:	bd38      	pop	{r3, r4, r5, pc}
   2df44:	200015f4 	.word	0x200015f4

0002df48 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2df48:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2df4a:	490b      	ldr	r1, [pc, #44]	; (2df78 <bt_buf_get_cmd_complete+0x30>)
{
   2df4c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2df4e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2df52:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2df54:	b920      	cbnz	r0, 2df60 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2df56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2df5a:	2001      	movs	r0, #1
   2df5c:	f7ff bfe4 	b.w	2df28 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2df60:	f022 fba0 	bl	506a4 <net_buf_ref>
   2df64:	2301      	movs	r3, #1
		buf->len = 0U;
   2df66:	2100      	movs	r1, #0
   2df68:	7503      	strb	r3, [r0, #20]
   2df6a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2df6c:	4604      	mov	r4, r0
   2df6e:	3008      	adds	r0, #8
   2df70:	f022 fb87 	bl	50682 <net_buf_simple_reserve>
}
   2df74:	4620      	mov	r0, r4
   2df76:	bd10      	pop	{r4, pc}
   2df78:	20000040 	.word	0x20000040

0002df7c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2df7c:	b570      	push	{r4, r5, r6, lr}
   2df7e:	4604      	mov	r4, r0
	switch (evt) {
   2df80:	2c0f      	cmp	r4, #15
{
   2df82:	460d      	mov	r5, r1
   2df84:	4610      	mov	r0, r2
   2df86:	4619      	mov	r1, r3
	switch (evt) {
   2df88:	d805      	bhi.n	2df96 <bt_buf_get_evt+0x1a>
   2df8a:	2c0d      	cmp	r4, #13
   2df8c:	d912      	bls.n	2dfb4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2df8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2df92:	f7ff bfd9 	b.w	2df48 <bt_buf_get_cmd_complete>
	switch (evt) {
   2df96:	2c13      	cmp	r4, #19
   2df98:	d10c      	bne.n	2dfb4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   2df9a:	480b      	ldr	r0, [pc, #44]	; (2dfc8 <bt_buf_get_evt+0x4c>)
   2df9c:	f022 fb4c 	bl	50638 <net_buf_alloc_fixed>
			if (buf) {
   2dfa0:	4604      	mov	r4, r0
   2dfa2:	b128      	cbz	r0, 2dfb0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   2dfa4:	2100      	movs	r1, #0
   2dfa6:	3008      	adds	r0, #8
   2dfa8:	f022 fb6b 	bl	50682 <net_buf_simple_reserve>
   2dfac:	2301      	movs	r3, #1
   2dfae:	7523      	strb	r3, [r4, #20]
}
   2dfb0:	4620      	mov	r0, r4
   2dfb2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   2dfb4:	4602      	mov	r2, r0
   2dfb6:	460b      	mov	r3, r1
		if (discardable) {
   2dfb8:	b10d      	cbz	r5, 2dfbe <bt_buf_get_evt+0x42>
   2dfba:	4804      	ldr	r0, [pc, #16]	; (2dfcc <bt_buf_get_evt+0x50>)
   2dfbc:	e7ee      	b.n	2df9c <bt_buf_get_evt+0x20>
}
   2dfbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2dfc2:	2001      	movs	r0, #1
   2dfc4:	f7ff bfb0 	b.w	2df28 <bt_buf_get_rx>
   2dfc8:	20001620 	.word	0x20001620
   2dfcc:	20001570 	.word	0x20001570

0002dfd0 <unpair>:
{
   2dfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dfd4:	4606      	mov	r6, r0
   2dfd6:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2dfd8:	f002 faea 	bl	305b0 <bt_conn_lookup_addr_le>
	if (conn) {
   2dfdc:	4604      	mov	r4, r0
   2dfde:	b9b0      	cbnz	r0, 2e00e <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
   2dfe0:	4639      	mov	r1, r7
   2dfe2:	4630      	mov	r0, r6
   2dfe4:	f006 f9c0 	bl	34368 <bt_keys_find_addr>
		if (keys) {
   2dfe8:	4605      	mov	r5, r0
   2dfea:	b110      	cbz	r0, 2dff2 <unpair+0x22>
			bt_keys_clear(keys);
   2dfec:	4628      	mov	r0, r5
   2dfee:	f006 f9d9 	bl	343a4 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   2dff2:	4639      	mov	r1, r7
   2dff4:	4630      	mov	r0, r6
   2dff6:	f004 ff51 	bl	32e9c <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   2dffa:	4b10      	ldr	r3, [pc, #64]	; (2e03c <unpair+0x6c>)
   2dffc:	681b      	ldr	r3, [r3, #0]
   2dffe:	b1db      	cbz	r3, 2e038 <unpair+0x68>
   2e000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e002:	b1cb      	cbz	r3, 2e038 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
   2e004:	4639      	mov	r1, r7
   2e006:	4630      	mov	r0, r6
}
   2e008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   2e00c:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
   2e00e:	7883      	ldrb	r3, [r0, #2]
   2e010:	2b01      	cmp	r3, #1
   2e012:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   2e016:	bf04      	itt	eq
   2e018:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   2e01c:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2e020:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   2e024:	bf18      	it	ne
   2e026:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2e028:	f01f fc7d 	bl	4d926 <bt_conn_disconnect>
		bt_conn_unref(conn);
   2e02c:	4620      	mov	r0, r4
   2e02e:	f01f fb81 	bl	4d734 <bt_conn_unref>
		if (!keys) {
   2e032:	2d00      	cmp	r5, #0
   2e034:	d1da      	bne.n	2dfec <unpair+0x1c>
   2e036:	e7d3      	b.n	2dfe0 <unpair+0x10>
}
   2e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e03c:	20004984 	.word	0x20004984

0002e040 <hci_disconn_complete_prio>:
{
   2e040:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2e042:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   2e044:	781a      	ldrb	r2, [r3, #0]
   2e046:	b99a      	cbnz	r2, 2e070 <hci_disconn_complete_prio+0x30>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2e048:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   2e04c:	4620      	mov	r0, r4
   2e04e:	f002 f8a5 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   2e052:	4605      	mov	r5, r0
   2e054:	b968      	cbnz	r0, 2e072 <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2e056:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2e05a:	4a0a      	ldr	r2, [pc, #40]	; (2e084 <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   2e05c:	2306      	movs	r3, #6
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2e05e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   2e062:	f832 1b02 	ldrh.w	r1, [r2], #2
   2e066:	b909      	cbnz	r1, 2e06c <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2e068:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2e06c:	3b01      	subs	r3, #1
   2e06e:	d1f8      	bne.n	2e062 <hci_disconn_complete_prio+0x22>
}
   2e070:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2e072:	2101      	movs	r1, #1
   2e074:	f002 f89a 	bl	301ac <bt_conn_set_state>
	bt_conn_unref(conn);
   2e078:	4628      	mov	r0, r5
}
   2e07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2e07e:	f01f bb59 	b.w	4d734 <bt_conn_unref>
   2e082:	bf00      	nop
   2e084:	20007570 	.word	0x20007570

0002e088 <hci_le_meta_event>:
{
   2e088:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2e08a:	2101      	movs	r1, #1
   2e08c:	4604      	mov	r4, r0
   2e08e:	3008      	adds	r0, #8
   2e090:	f022 fb6b 	bl	5076a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2e094:	4621      	mov	r1, r4
   2e096:	4a03      	ldr	r2, [pc, #12]	; (2e0a4 <hci_le_meta_event+0x1c>)
   2e098:	7800      	ldrb	r0, [r0, #0]
}
   2e09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2e09e:	230b      	movs	r3, #11
   2e0a0:	f01e bc60 	b.w	4c964 <handle_event>
   2e0a4:	00054d2c 	.word	0x00054d2c

0002e0a8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2e0a8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2e0aa:	4c0c      	ldr	r4, [pc, #48]	; (2e0dc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2e0ac:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2e0ae:	2205      	movs	r2, #5
   2e0b0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2e0b4:	f002 faa0 	bl	305f8 <bt_conn_lookup_state_le>
		if (!conn) {
   2e0b8:	b970      	cbnz	r0, 2e0d8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2e0ba:	4b09      	ldr	r3, [pc, #36]	; (2e0e0 <find_pending_connect.part.0+0x38>)
   2e0bc:	6818      	ldr	r0, [r3, #0]
   2e0be:	889a      	ldrh	r2, [r3, #4]
   2e0c0:	9000      	str	r0, [sp, #0]
   2e0c2:	799b      	ldrb	r3, [r3, #6]
   2e0c4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2e0c8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2e0cc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2e0d0:	2204      	movs	r2, #4
   2e0d2:	4669      	mov	r1, sp
   2e0d4:	f002 fa90 	bl	305f8 <bt_conn_lookup_state_le>
}
   2e0d8:	b002      	add	sp, #8
   2e0da:	bd10      	pop	{r4, pc}
   2e0dc:	20000040 	.word	0x20000040
   2e0e0:	00052b0a 	.word	0x00052b0a

0002e0e4 <hci_cmd_done>:
{
   2e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e0e6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2e0e8:	7990      	ldrb	r0, [r2, #6]
{
   2e0ea:	460e      	mov	r6, r1
   2e0ec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2e0ee:	f015 ff1d 	bl	43f2c <net_buf_pool_get>
   2e0f2:	4b28      	ldr	r3, [pc, #160]	; (2e194 <hci_cmd_done+0xb0>)
   2e0f4:	4283      	cmp	r3, r0
   2e0f6:	d14b      	bne.n	2e190 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   2e0f8:	4620      	mov	r0, r4
   2e0fa:	f015 ff1f 	bl	43f3c <net_buf_id>
   2e0fe:	4d26      	ldr	r5, [pc, #152]	; (2e198 <hci_cmd_done+0xb4>)
   2e100:	230c      	movs	r3, #12
   2e102:	fb03 5000 	mla	r0, r3, r0, r5
   2e106:	8843      	ldrh	r3, [r0, #2]
   2e108:	42bb      	cmp	r3, r7
   2e10a:	d141      	bne.n	2e190 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   2e10c:	4f23      	ldr	r7, [pc, #140]	; (2e19c <hci_cmd_done+0xb8>)
   2e10e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2e112:	b120      	cbz	r0, 2e11e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2e114:	f015 ffce 	bl	440b4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2e118:	2300      	movs	r3, #0
   2e11a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2e11e:	4620      	mov	r0, r4
   2e120:	f015 ff0c 	bl	43f3c <net_buf_id>
   2e124:	270c      	movs	r7, #12
   2e126:	fb07 5000 	mla	r0, r7, r0, r5
   2e12a:	6843      	ldr	r3, [r0, #4]
   2e12c:	b19b      	cbz	r3, 2e156 <hci_cmd_done+0x72>
   2e12e:	b996      	cbnz	r6, 2e156 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2e130:	4620      	mov	r0, r4
   2e132:	f015 ff03 	bl	43f3c <net_buf_id>
   2e136:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e13a:	2101      	movs	r1, #1
   2e13c:	6842      	ldr	r2, [r0, #4]
   2e13e:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   2e142:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e144:	f003 071f 	and.w	r7, r3, #31
   2e148:	40b9      	lsls	r1, r7
	if (val) {
   2e14a:	095b      	lsrs	r3, r3, #5
   2e14c:	b1d2      	cbz	r2, 2e184 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e14e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2e152:	f01e fc37 	bl	4c9c4 <atomic_or>
	if (cmd(buf)->sync) {
   2e156:	4620      	mov	r0, r4
   2e158:	f015 fef0 	bl	43f3c <net_buf_id>
   2e15c:	270c      	movs	r7, #12
   2e15e:	fb07 5000 	mla	r0, r7, r0, r5
   2e162:	6883      	ldr	r3, [r0, #8]
   2e164:	b1a3      	cbz	r3, 2e190 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   2e166:	4620      	mov	r0, r4
   2e168:	f015 fee8 	bl	43f3c <net_buf_id>
   2e16c:	4378      	muls	r0, r7
   2e16e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2e170:	4620      	mov	r0, r4
   2e172:	f015 fee3 	bl	43f3c <net_buf_id>
   2e176:	fb07 5500 	mla	r5, r7, r0, r5
   2e17a:	68a8      	ldr	r0, [r5, #8]
}
   2e17c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2e180:	f01a bb96 	b.w	488b0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e184:	43c9      	mvns	r1, r1
   2e186:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2e18a:	f01e fc2a 	bl	4c9e2 <atomic_and>
   2e18e:	e7e2      	b.n	2e156 <hci_cmd_done+0x72>
   2e190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e192:	bf00      	nop
   2e194:	200015c8 	.word	0x200015c8
   2e198:	20004950 	.word	0x20004950
   2e19c:	20000040 	.word	0x20000040

0002e1a0 <hci_cmd_status>:
{
   2e1a0:	b538      	push	{r3, r4, r5, lr}
   2e1a2:	2104      	movs	r1, #4
   2e1a4:	4604      	mov	r4, r0
   2e1a6:	3008      	adds	r0, #8
   2e1a8:	f022 fadf 	bl	5076a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2e1ac:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2e1ae:	7801      	ldrb	r1, [r0, #0]
   2e1b0:	8840      	ldrh	r0, [r0, #2]
   2e1b2:	4622      	mov	r2, r4
   2e1b4:	f7ff ff96 	bl	2e0e4 <hci_cmd_done>
	if (ncmd) {
   2e1b8:	b125      	cbz	r5, 2e1c4 <hci_cmd_status+0x24>
   2e1ba:	4803      	ldr	r0, [pc, #12]	; (2e1c8 <hci_cmd_status+0x28>)
}
   2e1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e1c0:	f01a bb76 	b.w	488b0 <z_impl_k_sem_give>
   2e1c4:	bd38      	pop	{r3, r4, r5, pc}
   2e1c6:	bf00      	nop
   2e1c8:	20000160 	.word	0x20000160

0002e1cc <hci_cmd_complete>:
{
   2e1cc:	b538      	push	{r3, r4, r5, lr}
   2e1ce:	2103      	movs	r1, #3
   2e1d0:	4604      	mov	r4, r0
   2e1d2:	3008      	adds	r0, #8
   2e1d4:	f022 fac9 	bl	5076a <net_buf_simple_pull_mem>
	status = buf->data[0];
   2e1d8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2e1da:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2e1dc:	7819      	ldrb	r1, [r3, #0]
   2e1de:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2e1e2:	4622      	mov	r2, r4
   2e1e4:	f7ff ff7e 	bl	2e0e4 <hci_cmd_done>
	if (ncmd) {
   2e1e8:	b125      	cbz	r5, 2e1f4 <hci_cmd_complete+0x28>
   2e1ea:	4803      	ldr	r0, [pc, #12]	; (2e1f8 <hci_cmd_complete+0x2c>)
}
   2e1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e1f0:	f01a bb5e 	b.w	488b0 <z_impl_k_sem_give>
   2e1f4:	bd38      	pop	{r3, r4, r5, pc}
   2e1f6:	bf00      	nop
   2e1f8:	20000160 	.word	0x20000160

0002e1fc <hci_tx_thread>:
{
   2e1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2e200:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2e30c <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   2e204:	f8df a108 	ldr.w	sl, [pc, #264]	; 2e310 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   2e208:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2e20c:	4841      	ldr	r0, [pc, #260]	; (2e314 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   2e20e:	f36f 3352 	bfc	r3, #13, #6
   2e212:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2e216:	f001 ff85 	bl	30124 <bt_conn_prepare_events>
   2e21a:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2e21c:	483b      	ldr	r0, [pc, #236]	; (2e30c <hci_tx_thread+0x110>)
   2e21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e226:	4629      	mov	r1, r5
   2e228:	f01b faa4 	bl	49774 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2e22c:	b160      	cbz	r0, 2e248 <hci_tx_thread+0x4c>
   2e22e:	493a      	ldr	r1, [pc, #232]	; (2e318 <hci_tx_thread+0x11c>)
   2e230:	483a      	ldr	r0, [pc, #232]	; (2e31c <hci_tx_thread+0x120>)
   2e232:	f640 1393 	movw	r3, #2451	; 0x993
   2e236:	4652      	mov	r2, sl
   2e238:	f01c f935 	bl	4a4a6 <printk>
   2e23c:	4040      	eors	r0, r0
   2e23e:	f380 8811 	msr	BASEPRI, r0
   2e242:	f04f 0003 	mov.w	r0, #3
   2e246:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2e248:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2e320 <hci_tx_thread+0x124>
{
   2e24c:	4e2f      	ldr	r6, [pc, #188]	; (2e30c <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   2e24e:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   2e252:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
   2e256:	b915      	cbnz	r5, 2e25e <hci_tx_thread+0x62>
	z_impl_k_yield();
   2e258:	f01a ff86 	bl	49168 <z_impl_k_yield>
	while (1) {
   2e25c:	e7d4      	b.n	2e208 <hci_tx_thread+0xc>
		switch (ev->state) {
   2e25e:	68f3      	ldr	r3, [r6, #12]
   2e260:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2e264:	2b04      	cmp	r3, #4
   2e266:	d147      	bne.n	2e2f8 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2e268:	7b33      	ldrb	r3, [r6, #12]
   2e26a:	2b00      	cmp	r3, #0
   2e26c:	d147      	bne.n	2e2fe <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2e26e:	2200      	movs	r2, #0
   2e270:	2300      	movs	r3, #0
   2e272:	4648      	mov	r0, r9
   2e274:	f022 f9e5 	bl	50642 <net_buf_get>
	BT_ASSERT(buf);
   2e278:	4604      	mov	r4, r0
   2e27a:	b960      	cbnz	r0, 2e296 <hci_tx_thread+0x9a>
   2e27c:	4929      	ldr	r1, [pc, #164]	; (2e324 <hci_tx_thread+0x128>)
   2e27e:	4827      	ldr	r0, [pc, #156]	; (2e31c <hci_tx_thread+0x120>)
   2e280:	f640 132a 	movw	r3, #2346	; 0x92a
   2e284:	4652      	mov	r2, sl
   2e286:	f01c f90e 	bl	4a4a6 <printk>
   2e28a:	4040      	eors	r0, r0
   2e28c:	f380 8811 	msr	BASEPRI, r0
   2e290:	f04f 0003 	mov.w	r0, #3
   2e294:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   2e296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e29a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e29e:	4658      	mov	r0, fp
   2e2a0:	f01a fb2c 	bl	488fc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   2e2a4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2e2a8:	b120      	cbz	r0, 2e2b4 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   2e2aa:	f015 ff03 	bl	440b4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2e2ae:	2300      	movs	r3, #0
   2e2b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2e2b4:	4620      	mov	r0, r4
   2e2b6:	f022 f9f5 	bl	506a4 <net_buf_ref>
   2e2ba:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2e2be:	4620      	mov	r0, r4
   2e2c0:	f7ff fc66 	bl	2db90 <bt_hci_ecc_send>
	if (err) {
   2e2c4:	b1c0      	cbz	r0, 2e2f8 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   2e2c6:	4818      	ldr	r0, [pc, #96]	; (2e328 <hci_tx_thread+0x12c>)
   2e2c8:	f01a faf2 	bl	488b0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2e2cc:	4620      	mov	r0, r4
   2e2ce:	f015 fe35 	bl	43f3c <net_buf_id>
   2e2d2:	4b16      	ldr	r3, [pc, #88]	; (2e32c <hci_tx_thread+0x130>)
   2e2d4:	220c      	movs	r2, #12
   2e2d6:	fb02 3000 	mla	r0, r2, r0, r3
   2e2da:	211f      	movs	r1, #31
   2e2dc:	8840      	ldrh	r0, [r0, #2]
   2e2de:	4622      	mov	r2, r4
   2e2e0:	f7ff ff00 	bl	2e0e4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2e2e4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2e2e8:	f015 fee4 	bl	440b4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2e2ec:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2e2ee:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2e2f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2e2f4:	f015 fede 	bl	440b4 <net_buf_unref>
	for (; count; ev++, count--) {
   2e2f8:	3614      	adds	r6, #20
   2e2fa:	3d01      	subs	r5, #1
   2e2fc:	e7ab      	b.n	2e256 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2e2fe:	2b01      	cmp	r3, #1
   2e300:	d1fa      	bne.n	2e2f8 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   2e302:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2e304:	3838      	subs	r0, #56	; 0x38
   2e306:	f002 fbb7 	bl	30a78 <bt_conn_process_tx>
   2e30a:	e7f5      	b.n	2e2f8 <hci_tx_thread+0xfc>
   2e30c:	20000908 	.word	0x20000908
   2e310:	00056915 	.word	0x00056915
   2e314:	2000091c 	.word	0x2000091c
   2e318:	00056949 	.word	0x00056949
   2e31c:	00056952 	.word	0x00056952
   2e320:	2000017c 	.word	0x2000017c
   2e324:	0005696f 	.word	0x0005696f
   2e328:	20000160 	.word	0x20000160
   2e32c:	20004950 	.word	0x20004950

0002e330 <bt_hci_cmd_state_set_init>:
{
   2e330:	b510      	push	{r4, lr}
	state->bit = bit;
   2e332:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2e336:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2e33a:	720b      	strb	r3, [r1, #8]
{
   2e33c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2e33e:	f015 fdfd 	bl	43f3c <net_buf_id>
   2e342:	4b03      	ldr	r3, [pc, #12]	; (2e350 <bt_hci_cmd_state_set_init+0x20>)
   2e344:	220c      	movs	r2, #12
   2e346:	fb02 3300 	mla	r3, r2, r0, r3
   2e34a:	605c      	str	r4, [r3, #4]
}
   2e34c:	bd10      	pop	{r4, pc}
   2e34e:	bf00      	nop
   2e350:	20004950 	.word	0x20004950

0002e354 <bt_hci_cmd_create>:
{
   2e354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2e358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e360:	4606      	mov	r6, r0
   2e362:	4817      	ldr	r0, [pc, #92]	; (2e3c0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2e364:	4d17      	ldr	r5, [pc, #92]	; (2e3c4 <bt_hci_cmd_create+0x70>)
{
   2e366:	460f      	mov	r7, r1
   2e368:	f022 f966 	bl	50638 <net_buf_alloc_fixed>
   2e36c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2e36e:	f100 0a08 	add.w	sl, r0, #8
   2e372:	2100      	movs	r1, #0
   2e374:	f04f 0800 	mov.w	r8, #0
   2e378:	4650      	mov	r0, sl
   2e37a:	f022 f982 	bl	50682 <net_buf_simple_reserve>
   2e37e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2e382:	4620      	mov	r0, r4
   2e384:	f015 fdda 	bl	43f3c <net_buf_id>
   2e388:	f04f 090c 	mov.w	r9, #12
   2e38c:	fb09 5000 	mla	r0, r9, r0, r5
   2e390:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2e392:	4620      	mov	r0, r4
   2e394:	f015 fdd2 	bl	43f3c <net_buf_id>
   2e398:	fb09 5000 	mla	r0, r9, r0, r5
   2e39c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2e3a0:	4620      	mov	r0, r4
   2e3a2:	f015 fdcb 	bl	43f3c <net_buf_id>
   2e3a6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2e3aa:	2103      	movs	r1, #3
   2e3ac:	f8c5 8004 	str.w	r8, [r5, #4]
   2e3b0:	4650      	mov	r0, sl
   2e3b2:	f022 f9a9 	bl	50708 <net_buf_simple_add>
	hdr->param_len = param_len;
   2e3b6:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2e3b8:	8006      	strh	r6, [r0, #0]
}
   2e3ba:	4620      	mov	r0, r4
   2e3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e3c0:	200015c8 	.word	0x200015c8
   2e3c4:	20004950 	.word	0x20004950

0002e3c8 <bt_hci_cmd_send>:
{
   2e3c8:	b538      	push	{r3, r4, r5, lr}
   2e3ca:	4605      	mov	r5, r0
	if (!buf) {
   2e3cc:	460c      	mov	r4, r1
   2e3ce:	b919      	cbnz	r1, 2e3d8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2e3d0:	f7ff ffc0 	bl	2e354 <bt_hci_cmd_create>
		if (!buf) {
   2e3d4:	4604      	mov	r4, r0
   2e3d6:	b198      	cbz	r0, 2e400 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2e3d8:	f640 4335 	movw	r3, #3125	; 0xc35
   2e3dc:	429d      	cmp	r5, r3
   2e3de:	d109      	bne.n	2e3f4 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2e3e0:	4620      	mov	r0, r4
   2e3e2:	f7ff fbd5 	bl	2db90 <bt_hci_ecc_send>
		if (err) {
   2e3e6:	4605      	mov	r5, r0
   2e3e8:	b110      	cbz	r0, 2e3f0 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   2e3ea:	4620      	mov	r0, r4
   2e3ec:	f015 fe62 	bl	440b4 <net_buf_unref>
}
   2e3f0:	4628      	mov	r0, r5
   2e3f2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2e3f4:	4804      	ldr	r0, [pc, #16]	; (2e408 <bt_hci_cmd_send+0x40>)
   2e3f6:	4621      	mov	r1, r4
   2e3f8:	f022 f947 	bl	5068a <net_buf_put>
	return 0;
   2e3fc:	2500      	movs	r5, #0
   2e3fe:	e7f7      	b.n	2e3f0 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2e400:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2e404:	e7f4      	b.n	2e3f0 <bt_hci_cmd_send+0x28>
   2e406:	bf00      	nop
   2e408:	2000017c 	.word	0x2000017c

0002e40c <bt_hci_cmd_send_sync>:
{
   2e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e40e:	4615      	mov	r5, r2
   2e410:	b087      	sub	sp, #28
	if (!buf) {
   2e412:	460c      	mov	r4, r1
   2e414:	b921      	cbnz	r1, 2e420 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2e416:	f7ff ff9d 	bl	2e354 <bt_hci_cmd_create>
		if (!buf) {
   2e41a:	4604      	mov	r4, r0
   2e41c:	2800      	cmp	r0, #0
   2e41e:	d048      	beq.n	2e4b2 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2e420:	2201      	movs	r2, #1
   2e422:	2100      	movs	r1, #0
   2e424:	4668      	mov	r0, sp
   2e426:	f023 f9f8 	bl	5181a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2e42a:	4620      	mov	r0, r4
   2e42c:	f015 fd86 	bl	43f3c <net_buf_id>
   2e430:	4f21      	ldr	r7, [pc, #132]	; (2e4b8 <bt_hci_cmd_send_sync+0xac>)
   2e432:	230c      	movs	r3, #12
   2e434:	fb03 7000 	mla	r0, r3, r0, r7
   2e438:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2e43c:	4620      	mov	r0, r4
   2e43e:	f022 f931 	bl	506a4 <net_buf_ref>
   2e442:	4601      	mov	r1, r0
   2e444:	481d      	ldr	r0, [pc, #116]	; (2e4bc <bt_hci_cmd_send_sync+0xb0>)
   2e446:	f022 f920 	bl	5068a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2e44a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2e44e:	2300      	movs	r3, #0
   2e450:	4668      	mov	r0, sp
   2e452:	f01a fa53 	bl	488fc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2e456:	4606      	mov	r6, r0
   2e458:	b180      	cbz	r0, 2e47c <bt_hci_cmd_send_sync+0x70>
   2e45a:	4a19      	ldr	r2, [pc, #100]	; (2e4c0 <bt_hci_cmd_send_sync+0xb4>)
   2e45c:	4919      	ldr	r1, [pc, #100]	; (2e4c4 <bt_hci_cmd_send_sync+0xb8>)
   2e45e:	481a      	ldr	r0, [pc, #104]	; (2e4c8 <bt_hci_cmd_send_sync+0xbc>)
   2e460:	f240 1331 	movw	r3, #305	; 0x131
   2e464:	f01c f81f 	bl	4a4a6 <printk>
   2e468:	4818      	ldr	r0, [pc, #96]	; (2e4cc <bt_hci_cmd_send_sync+0xc0>)
   2e46a:	4631      	mov	r1, r6
   2e46c:	f01c f81b 	bl	4a4a6 <printk>
   2e470:	4040      	eors	r0, r0
   2e472:	f380 8811 	msr	BASEPRI, r0
   2e476:	f04f 0003 	mov.w	r0, #3
   2e47a:	df02      	svc	2
	status = cmd(buf)->status;
   2e47c:	4620      	mov	r0, r4
   2e47e:	f015 fd5d 	bl	43f3c <net_buf_id>
   2e482:	230c      	movs	r3, #12
   2e484:	4358      	muls	r0, r3
   2e486:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2e488:	b156      	cbz	r6, 2e4a0 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2e48a:	4620      	mov	r0, r4
   2e48c:	f015 fe12 	bl	440b4 <net_buf_unref>
			return -EIO;
   2e490:	2e09      	cmp	r6, #9
   2e492:	bf0c      	ite	eq
   2e494:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   2e498:	f06f 0004 	mvnne.w	r0, #4
}
   2e49c:	b007      	add	sp, #28
   2e49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2e4a0:	b115      	cbz	r5, 2e4a8 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2e4a2:	602c      	str	r4, [r5, #0]
	return 0;
   2e4a4:	4630      	mov	r0, r6
   2e4a6:	e7f9      	b.n	2e49c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2e4a8:	4620      	mov	r0, r4
   2e4aa:	f015 fe03 	bl	440b4 <net_buf_unref>
	return 0;
   2e4ae:	4628      	mov	r0, r5
   2e4b0:	e7f4      	b.n	2e49c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   2e4b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e4b6:	e7f1      	b.n	2e49c <bt_hci_cmd_send_sync+0x90>
   2e4b8:	20004950 	.word	0x20004950
   2e4bc:	2000017c 	.word	0x2000017c
   2e4c0:	00056915 	.word	0x00056915
   2e4c4:	00056949 	.word	0x00056949
   2e4c8:	00056952 	.word	0x00056952
   2e4cc:	00056973 	.word	0x00056973

0002e4d0 <bt_get_phy>:
	switch (hci_phy) {
   2e4d0:	3801      	subs	r0, #1
   2e4d2:	b2c0      	uxtb	r0, r0
   2e4d4:	2802      	cmp	r0, #2
   2e4d6:	bf9a      	itte	ls
   2e4d8:	4b01      	ldrls	r3, [pc, #4]	; (2e4e0 <bt_get_phy+0x10>)
   2e4da:	5c18      	ldrbls	r0, [r3, r0]
{
   2e4dc:	2000      	movhi	r0, #0
}
   2e4de:	4770      	bx	lr
   2e4e0:	00056a1c 	.word	0x00056a1c

0002e4e4 <bt_le_create_conn_legacy>:
{
   2e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e4e8:	b086      	sub	sp, #24
   2e4ea:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   2e4ec:	f10d 010b 	add.w	r1, sp, #11
   2e4f0:	2000      	movs	r0, #0
   2e4f2:	f000 fe6b 	bl	2f1cc <bt_id_set_create_conn_own_addr>
	if (err) {
   2e4f6:	4605      	mov	r5, r0
   2e4f8:	2800      	cmp	r0, #0
   2e4fa:	d147      	bne.n	2e58c <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   2e4fc:	2119      	movs	r1, #25
   2e4fe:	f242 000d 	movw	r0, #8205	; 0x200d
   2e502:	f7ff ff27 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2e506:	4607      	mov	r7, r0
   2e508:	2800      	cmp	r0, #0
   2e50a:	d046      	beq.n	2e59a <bt_le_create_conn_legacy+0xb6>
   2e50c:	2119      	movs	r1, #25
   2e50e:	3008      	adds	r0, #8
   2e510:	f022 f8fa 	bl	50708 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   2e514:	4629      	mov	r1, r5
   2e516:	4604      	mov	r4, r0
   2e518:	2219      	movs	r2, #25
   2e51a:	f01e f8d7 	bl	4c6cc <memset>
		if (!bt_dev.le.rl_size ||
   2e51e:	4d20      	ldr	r5, [pc, #128]	; (2e5a0 <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
   2e520:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2e524:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
   2e526:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2e52a:	b39b      	cbz	r3, 2e594 <bt_le_create_conn_legacy+0xb0>
   2e52c:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   2e530:	429a      	cmp	r2, r3
   2e532:	d82f      	bhi.n	2e594 <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   2e534:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2e538:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2e53a:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2e53e:	f01e fa3e 	bl	4c9be <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2e542:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   2e546:	89ab      	ldrh	r3, [r5, #12]
   2e548:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   2e54a:	89eb      	ldrh	r3, [r5, #14]
   2e54c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   2e54e:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   2e552:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   2e556:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   2e55a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   2e55e:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   2e562:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   2e566:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   2e56a:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2e56e:	2301      	movs	r3, #1
   2e570:	4a0c      	ldr	r2, [pc, #48]	; (2e5a4 <bt_le_create_conn_legacy+0xc0>)
   2e572:	9300      	str	r3, [sp, #0]
   2e574:	a903      	add	r1, sp, #12
   2e576:	230b      	movs	r3, #11
   2e578:	4638      	mov	r0, r7
   2e57a:	f7ff fed9 	bl	2e330 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   2e57e:	4642      	mov	r2, r8
   2e580:	4639      	mov	r1, r7
   2e582:	f242 000d 	movw	r0, #8205	; 0x200d
   2e586:	f7ff ff41 	bl	2e40c <bt_hci_cmd_send_sync>
   2e58a:	4605      	mov	r5, r0
}
   2e58c:	4628      	mov	r0, r5
   2e58e:	b006      	add	sp, #24
   2e590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
   2e594:	f106 0196 	add.w	r1, r6, #150	; 0x96
   2e598:	e7ce      	b.n	2e538 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
   2e59a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2e59e:	e7f5      	b.n	2e58c <bt_le_create_conn_legacy+0xa8>
   2e5a0:	20000040 	.word	0x20000040
   2e5a4:	2000010c 	.word	0x2000010c

0002e5a8 <bt_le_create_conn_cancel>:
{
   2e5a8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2e5aa:	2100      	movs	r1, #0
{
   2e5ac:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2e5ae:	f242 000e 	movw	r0, #8206	; 0x200e
   2e5b2:	f7ff fecf 	bl	2e354 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2e5b6:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2e5b8:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2e5ba:	230b      	movs	r3, #11
   2e5bc:	a903      	add	r1, sp, #12
   2e5be:	4a06      	ldr	r2, [pc, #24]	; (2e5d8 <bt_le_create_conn_cancel+0x30>)
   2e5c0:	9500      	str	r5, [sp, #0]
   2e5c2:	f7ff feb5 	bl	2e330 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   2e5c6:	462a      	mov	r2, r5
   2e5c8:	4621      	mov	r1, r4
   2e5ca:	f242 000e 	movw	r0, #8206	; 0x200e
   2e5ce:	f7ff ff1d 	bl	2e40c <bt_hci_cmd_send_sync>
}
   2e5d2:	b007      	add	sp, #28
   2e5d4:	bd30      	pop	{r4, r5, pc}
   2e5d6:	bf00      	nop
   2e5d8:	2000010c 	.word	0x2000010c

0002e5dc <conn_auto_initiate>:
{
   2e5dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2e5de:	7b43      	ldrb	r3, [r0, #13]
   2e5e0:	2b07      	cmp	r3, #7
{
   2e5e2:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2e5e4:	d157      	bne.n	2e696 <conn_auto_initiate+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e5e6:	f3bf 8f5b 	dmb	ish
   2e5ea:	6843      	ldr	r3, [r0, #4]
   2e5ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2e5f0:	049b      	lsls	r3, r3, #18
   2e5f2:	f100 0604 	add.w	r6, r0, #4
   2e5f6:	d41b      	bmi.n	2e630 <conn_auto_initiate+0x54>
   2e5f8:	78c3      	ldrb	r3, [r0, #3]
   2e5fa:	b123      	cbz	r3, 2e606 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2e5fc:	4b27      	ldr	r3, [pc, #156]	; (2e69c <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2e5fe:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2e602:	071d      	lsls	r5, r3, #28
   2e604:	d514      	bpl.n	2e630 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2e606:	2102      	movs	r1, #2
   2e608:	f242 0016 	movw	r0, #8214	; 0x2016
   2e60c:	f7ff fea2 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2e610:	4605      	mov	r5, r0
   2e612:	b168      	cbz	r0, 2e630 <conn_auto_initiate+0x54>
   2e614:	2102      	movs	r1, #2
   2e616:	3008      	adds	r0, #8
   2e618:	f022 f876 	bl	50708 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e61c:	8823      	ldrh	r3, [r4, #0]
   2e61e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2e620:	4629      	mov	r1, r5
   2e622:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2e626:	b004      	add	sp, #16
   2e628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2e62c:	f7ff becc 	b.w	2e3c8 <bt_hci_cmd_send>
   2e630:	f3bf 8f5b 	dmb	ish
   2e634:	6863      	ldr	r3, [r4, #4]
   2e636:	4d19      	ldr	r5, [pc, #100]	; (2e69c <conn_auto_initiate+0xc0>)
   2e638:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2e63c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2e640:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2e644:	d111      	bne.n	2e66a <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2e646:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2e64a:	07d8      	lsls	r0, r3, #31
   2e64c:	d50d      	bpl.n	2e66a <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2e64e:	2302      	movs	r3, #2
   2e650:	9100      	str	r1, [sp, #0]
   2e652:	461a      	mov	r2, r3
   2e654:	4620      	mov	r0, r4
   2e656:	f01e fbc6 	bl	4cde6 <bt_le_set_phy>
		if (!err) {
   2e65a:	b930      	cbnz	r0, 2e66a <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e65c:	2180      	movs	r1, #128	; 0x80
   2e65e:	4630      	mov	r0, r6
}
   2e660:	b004      	add	sp, #16
   2e662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e666:	f01e b9ad 	b.w	4c9c4 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2e66a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2e66e:	069a      	lsls	r2, r3, #26
   2e670:	d511      	bpl.n	2e696 <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2e672:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2e676:	689b      	ldr	r3, [r3, #8]
   2e678:	079b      	lsls	r3, r3, #30
   2e67a:	d50c      	bpl.n	2e696 <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2e67c:	f10d 010e 	add.w	r1, sp, #14
   2e680:	a803      	add	r0, sp, #12
   2e682:	f01e fb5e 	bl	4cd42 <hci_le_read_max_data_len>
			if (!err) {
   2e686:	b930      	cbnz	r0, 2e696 <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
   2e688:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2e68c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2e690:	4620      	mov	r0, r4
   2e692:	f01e fb8b 	bl	4cdac <bt_le_set_data_len>
}
   2e696:	b004      	add	sp, #16
   2e698:	bd70      	pop	{r4, r5, r6, pc}
   2e69a:	bf00      	nop
   2e69c:	20000040 	.word	0x20000040

0002e6a0 <bt_hci_le_enh_conn_complete>:
{
   2e6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2e6a4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   2e6a8:	4985      	ldr	r1, [pc, #532]	; (2e8c0 <bt_hci_le_enh_conn_complete+0x220>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2e6aa:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   2e6ae:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   2e6b2:	4605      	mov	r5, r0
   2e6b4:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2e6b6:	fa1f f887 	uxth.w	r8, r7
	handle |= ~BT_ACL_HANDLE_MASK;
   2e6ba:	b29b      	uxth	r3, r3
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2e6bc:	2200      	movs	r2, #0
   2e6be:	4608      	mov	r0, r1
		if (disconnected_handles[i] == handle) {
   2e6c0:	f831 4b02 	ldrh.w	r4, [r1], #2
   2e6c4:	42a3      	cmp	r3, r4
   2e6c6:	d120      	bne.n	2e70a <bt_hci_le_enh_conn_complete+0x6a>
			disconnected_handles[i] = 0;
   2e6c8:	2300      	movs	r3, #0
   2e6ca:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			return true;
   2e6ce:	2601      	movs	r6, #1
	bt_id_pending_keys_update();
   2e6d0:	f000 fb36 	bl	2ed40 <bt_id_pending_keys_update>
	if (evt->status) {
   2e6d4:	782c      	ldrb	r4, [r5, #0]
   2e6d6:	2c00      	cmp	r4, #0
   2e6d8:	d03d      	beq.n	2e756 <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e6da:	2c3c      	cmp	r4, #60	; 0x3c
   2e6dc:	d11a      	bne.n	2e714 <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e6de:	f000 fe99 	bl	2f414 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e6e2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2e6e6:	3010      	adds	r0, #16
   2e6e8:	f01e f97b 	bl	4c9e2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2e6ec:	2000      	movs	r0, #0
   2e6ee:	f7ff fcdb 	bl	2e0a8 <find_pending_connect.part.0>
		if (!conn) {
   2e6f2:	4605      	mov	r5, r0
   2e6f4:	b360      	cbz	r0, 2e750 <bt_hci_le_enh_conn_complete+0xb0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2e6f6:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e6f8:	2100      	movs	r1, #0
   2e6fa:	f001 fd57 	bl	301ac <bt_conn_set_state>
		bt_conn_unref(conn);
   2e6fe:	4628      	mov	r0, r5
}
   2e700:	b005      	add	sp, #20
   2e702:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e706:	f01f b815 	b.w	4d734 <bt_conn_unref>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2e70a:	3201      	adds	r2, #1
   2e70c:	2a06      	cmp	r2, #6
   2e70e:	d1d7      	bne.n	2e6c0 <bt_hci_le_enh_conn_complete+0x20>
	return false;
   2e710:	2600      	movs	r6, #0
   2e712:	e7dd      	b.n	2e6d0 <bt_hci_le_enh_conn_complete+0x30>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e714:	2c02      	cmp	r4, #2
   2e716:	d11b      	bne.n	2e750 <bt_hci_le_enh_conn_complete+0xb0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e718:	2100      	movs	r1, #0
   2e71a:	2206      	movs	r2, #6
   2e71c:	4608      	mov	r0, r1
   2e71e:	f001 ff6b 	bl	305f8 <bt_conn_lookup_state_le>
	if (!conn) {
   2e722:	4605      	mov	r5, r0
   2e724:	b188      	cbz	r0, 2e74a <bt_hci_le_enh_conn_complete+0xaa>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   2e726:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e728:	2100      	movs	r1, #0
   2e72a:	f001 fd3f 	bl	301ac <bt_conn_set_state>
   2e72e:	f3bf 8f5b 	dmb	ish
   2e732:	686b      	ldr	r3, [r5, #4]
   2e734:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   2e738:	07da      	lsls	r2, r3, #31
   2e73a:	d503      	bpl.n	2e744 <bt_hci_le_enh_conn_complete+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2e73c:	4621      	mov	r1, r4
   2e73e:	4628      	mov	r0, r5
   2e740:	f001 fd34 	bl	301ac <bt_conn_set_state>
	bt_conn_unref(conn);
   2e744:	4628      	mov	r0, r5
   2e746:	f01e fff5 	bl	4d734 <bt_conn_unref>
			bt_le_scan_update(false);
   2e74a:	2000      	movs	r0, #0
   2e74c:	f001 f8f2 	bl	2f934 <bt_le_scan_update>
}
   2e750:	b005      	add	sp, #20
   2e752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e756:	792b      	ldrb	r3, [r5, #4]
   2e758:	3b02      	subs	r3, #2
   2e75a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e75c:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e760:	d834      	bhi.n	2e7cc <bt_hci_le_enh_conn_complete+0x12c>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e762:	4649      	mov	r1, r9
   2e764:	a802      	add	r0, sp, #8
   2e766:	f01e f92a 	bl	4c9be <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2e76a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2e76e:	2206      	movs	r2, #6
   2e770:	3b02      	subs	r3, #2
   2e772:	f105 0111 	add.w	r1, r5, #17
   2e776:	f10d 0001 	add.w	r0, sp, #1
   2e77a:	f88d 3008 	strb.w	r3, [sp, #8]
   2e77e:	f01d ff9a 	bl	4c6b6 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2e782:	2301      	movs	r3, #1
   2e784:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   2e788:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   2e78a:	bb90      	cbnz	r0, 2e7f2 <bt_hci_le_enh_conn_complete+0x152>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e78c:	2206      	movs	r2, #6
   2e78e:	a902      	add	r1, sp, #8
   2e790:	f001 ff32 	bl	305f8 <bt_conn_lookup_state_le>
   2e794:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e796:	78eb      	ldrb	r3, [r5, #3]
   2e798:	2b01      	cmp	r3, #1
   2e79a:	d10a      	bne.n	2e7b2 <bt_hci_le_enh_conn_complete+0x112>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e79c:	f000 fe3a 	bl	2f414 <bt_le_adv_lookup_legacy>
   2e7a0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2e7a4:	4681      	mov	r9, r0
   2e7a6:	3010      	adds	r0, #16
   2e7a8:	f01e f91b 	bl	4c9e2 <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2e7ac:	4648      	mov	r0, r9
   2e7ae:	f01e fed2 	bl	4d556 <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e7b2:	78eb      	ldrb	r3, [r5, #3]
   2e7b4:	b923      	cbnz	r3, 2e7c0 <bt_hci_le_enh_conn_complete+0x120>
   2e7b6:	4843      	ldr	r0, [pc, #268]	; (2e8c4 <bt_hci_le_enh_conn_complete+0x224>)
   2e7b8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2e7bc:	f01e f911 	bl	4c9e2 <atomic_and>
	if (!conn) {
   2e7c0:	b9fc      	cbnz	r4, 2e802 <bt_hci_le_enh_conn_complete+0x162>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2e7c2:	211f      	movs	r1, #31
   2e7c4:	4640      	mov	r0, r8
   2e7c6:	f01e fad6 	bl	4cd76 <bt_hci_disconnect>
		return;
   2e7ca:	e7c1      	b.n	2e750 <bt_hci_le_enh_conn_complete+0xb0>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2e7cc:	78eb      	ldrb	r3, [r5, #3]
   2e7ce:	2b01      	cmp	r3, #1
   2e7d0:	bf04      	itt	eq
   2e7d2:	4b3d      	ldreq	r3, [pc, #244]	; (2e8c8 <bt_hci_le_enh_conn_complete+0x228>)
   2e7d4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2e7d8:	4649      	mov	r1, r9
   2e7da:	4620      	mov	r0, r4
   2e7dc:	f01e fd2a 	bl	4d234 <bt_lookup_id_addr>
   2e7e0:	4601      	mov	r1, r0
   2e7e2:	a802      	add	r0, sp, #8
   2e7e4:	f01e f8eb 	bl	4c9be <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   2e7e8:	4649      	mov	r1, r9
   2e7ea:	4668      	mov	r0, sp
   2e7ec:	f01e f8e7 	bl	4c9be <bt_addr_le_copy>
   2e7f0:	e7ca      	b.n	2e788 <bt_hci_le_enh_conn_complete+0xe8>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2e7f2:	2801      	cmp	r0, #1
   2e7f4:	d103      	bne.n	2e7fe <bt_hci_le_enh_conn_complete+0x15e>
   2e7f6:	a802      	add	r0, sp, #8
   2e7f8:	f7ff fc56 	bl	2e0a8 <find_pending_connect.part.0>
   2e7fc:	e7ca      	b.n	2e794 <bt_hci_le_enh_conn_complete+0xf4>
	return NULL;
   2e7fe:	2400      	movs	r4, #0
   2e800:	e7c9      	b.n	2e796 <bt_hci_le_enh_conn_complete+0xf6>
	conn->handle = handle;
   2e802:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e804:	a902      	add	r1, sp, #8
	conn->handle = handle;
   2e806:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e80a:	f01e f8d8 	bl	4c9be <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2e80e:	7e2a      	ldrb	r2, [r5, #24]
   2e810:	7deb      	ldrb	r3, [r5, #23]
   2e812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e816:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2e81a:	7eaa      	ldrb	r2, [r5, #26]
   2e81c:	7e6b      	ldrb	r3, [r5, #25]
   2e81e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e822:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2e826:	7f2a      	ldrb	r2, [r5, #28]
   2e828:	7eeb      	ldrb	r3, [r5, #27]
   2e82a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e82e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2e832:	78eb      	ldrb	r3, [r5, #3]
   2e834:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2e836:	2200      	movs	r2, #0
   2e838:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e83a:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2e83c:	f240 1201 	movw	r2, #257	; 0x101
   2e840:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e844:	d115      	bne.n	2e872 <bt_hci_le_enh_conn_complete+0x1d2>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   2e846:	4669      	mov	r1, sp
   2e848:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e84c:	f01e f8b7 	bl	4c9be <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e850:	f000 fde0 	bl	2f414 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2e854:	7a21      	ldrb	r1, [r4, #8]
   2e856:	4d1c      	ldr	r5, [pc, #112]	; (2e8c8 <bt_hci_le_enh_conn_complete+0x228>)
   2e858:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2e85c:	4429      	add	r1, r5
   2e85e:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e862:	f01e f8ac 	bl	4c9be <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2e866:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2e86a:	065b      	lsls	r3, r3, #25
   2e86c:	d501      	bpl.n	2e872 <bt_hci_le_enh_conn_complete+0x1d2>
			bt_le_adv_resume();
   2e86e:	f000 ff8d 	bl	2f78c <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e872:	78e3      	ldrb	r3, [r4, #3]
   2e874:	b96b      	cbnz	r3, 2e892 <bt_hci_le_enh_conn_complete+0x1f2>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   2e876:	4669      	mov	r1, sp
   2e878:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e87c:	f01e f89f 	bl	4c9be <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   2e880:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   2e882:	4b11      	ldr	r3, [pc, #68]	; (2e8c8 <bt_hci_le_enh_conn_complete+0x228>)
					&bt_dev.id_addr[conn->id]);
   2e884:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   2e888:	4419      	add	r1, r3
   2e88a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e88e:	f01e f896 	bl	4c9be <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2e892:	2107      	movs	r1, #7
   2e894:	4620      	mov	r0, r4
   2e896:	f001 fc89 	bl	301ac <bt_conn_set_state>
	if (is_disconnected) {
   2e89a:	b11e      	cbz	r6, 2e8a4 <bt_hci_le_enh_conn_complete+0x204>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2e89c:	2101      	movs	r1, #1
   2e89e:	4620      	mov	r0, r4
   2e8a0:	f001 fc84 	bl	301ac <bt_conn_set_state>
	bt_conn_connected(conn);
   2e8a4:	4620      	mov	r0, r4
   2e8a6:	f01e ff80 	bl	4d7aa <bt_conn_connected>
	conn_auto_initiate(conn);
   2e8aa:	4620      	mov	r0, r4
   2e8ac:	f7ff fe96 	bl	2e5dc <conn_auto_initiate>
	bt_conn_unref(conn);
   2e8b0:	4620      	mov	r0, r4
   2e8b2:	f01e ff3f 	bl	4d734 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e8b6:	78e3      	ldrb	r3, [r4, #3]
   2e8b8:	2b00      	cmp	r3, #0
   2e8ba:	f47f af49 	bne.w	2e750 <bt_hci_le_enh_conn_complete+0xb0>
   2e8be:	e744      	b.n	2e74a <bt_hci_le_enh_conn_complete+0xaa>
   2e8c0:	20007570 	.word	0x20007570
   2e8c4:	2000010c 	.word	0x2000010c
   2e8c8:	20000040 	.word	0x20000040

0002e8cc <bt_unpair>:
{
   2e8cc:	b530      	push	{r4, r5, lr}
   2e8ce:	b085      	sub	sp, #20
   2e8d0:	460d      	mov	r5, r1
   2e8d2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   2e8d6:	b9d0      	cbnz	r0, 2e90e <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e8d8:	b949      	cbnz	r1, 2e8ee <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   2e8da:	490e      	ldr	r1, [pc, #56]	; (2e914 <bt_unpair+0x48>)
   2e8dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e8e0:	f10d 0207 	add.w	r2, sp, #7
   2e8e4:	f005 fc88 	bl	341f8 <bt_foreach_bond>
		return 0;
   2e8e8:	2000      	movs	r0, #0
}
   2e8ea:	b005      	add	sp, #20
   2e8ec:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e8ee:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   2e8f0:	2207      	movs	r2, #7
   2e8f2:	f8cd 000b 	str.w	r0, [sp, #11]
   2e8f6:	a902      	add	r1, sp, #8
   2e8f8:	4628      	mov	r0, r5
   2e8fa:	f01d fecb 	bl	4c694 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e8fe:	2800      	cmp	r0, #0
   2e900:	d0eb      	beq.n	2e8da <bt_unpair+0xe>
	unpair(id, addr);
   2e902:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e906:	4629      	mov	r1, r5
   2e908:	f7ff fb62 	bl	2dfd0 <unpair>
	return 0;
   2e90c:	e7ec      	b.n	2e8e8 <bt_unpair+0x1c>
		return -EINVAL;
   2e90e:	f06f 0015 	mvn.w	r0, #21
   2e912:	e7ea      	b.n	2e8ea <bt_unpair+0x1e>
   2e914:	0004ca01 	.word	0x0004ca01

0002e918 <bt_security_err_get>:
	switch (hci_err) {
   2e918:	2829      	cmp	r0, #41	; 0x29
   2e91a:	bf9a      	itte	ls
   2e91c:	4b01      	ldrls	r3, [pc, #4]	; (2e924 <bt_security_err_get+0xc>)
   2e91e:	5c18      	ldrbls	r0, [r3, r0]
{
   2e920:	2009      	movhi	r0, #9
}
   2e922:	4770      	bx	lr
   2e924:	00056a1f 	.word	0x00056a1f

0002e928 <hci_event_prio>:
{
   2e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e92c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2e92e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2e932:	4630      	mov	r0, r6
   2e934:	f021 ff31 	bl	5079a <net_buf_simple_headroom>
	state->len = buf->len;
   2e938:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e93c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2e940:	4605      	mov	r5, r0
   2e942:	d80c      	bhi.n	2e95e <hci_event_prio+0x36>
   2e944:	4a1c      	ldr	r2, [pc, #112]	; (2e9b8 <hci_event_prio+0x90>)
   2e946:	491d      	ldr	r1, [pc, #116]	; (2e9bc <hci_event_prio+0x94>)
   2e948:	481d      	ldr	r0, [pc, #116]	; (2e9c0 <hci_event_prio+0x98>)
   2e94a:	f640 532f 	movw	r3, #3375	; 0xd2f
   2e94e:	f01b fdaa 	bl	4a4a6 <printk>
   2e952:	4040      	eors	r0, r0
   2e954:	f380 8811 	msr	BASEPRI, r0
   2e958:	f04f 0003 	mov.w	r0, #3
   2e95c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e95e:	4630      	mov	r0, r6
   2e960:	2102      	movs	r1, #2
   2e962:	f021 ff02 	bl	5076a <net_buf_simple_pull_mem>
   2e966:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e968:	7800      	ldrb	r0, [r0, #0]
   2e96a:	f01d ffe9 	bl	4c940 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e96e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e970:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e972:	d40c      	bmi.n	2e98e <hci_event_prio+0x66>
   2e974:	4a10      	ldr	r2, [pc, #64]	; (2e9b8 <hci_event_prio+0x90>)
   2e976:	4913      	ldr	r1, [pc, #76]	; (2e9c4 <hci_event_prio+0x9c>)
   2e978:	4811      	ldr	r0, [pc, #68]	; (2e9c0 <hci_event_prio+0x98>)
   2e97a:	f640 5333 	movw	r3, #3379	; 0xd33
   2e97e:	f01b fd92 	bl	4a4a6 <printk>
   2e982:	4040      	eors	r0, r0
   2e984:	f380 8811 	msr	BASEPRI, r0
   2e988:	f04f 0003 	mov.w	r0, #3
   2e98c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2e98e:	2305      	movs	r3, #5
   2e990:	4a0d      	ldr	r2, [pc, #52]	; (2e9c8 <hci_event_prio+0xa0>)
   2e992:	7838      	ldrb	r0, [r7, #0]
   2e994:	4621      	mov	r1, r4
   2e996:	f01d ffe5 	bl	4c964 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2e99a:	07b3      	lsls	r3, r6, #30
   2e99c:	d507      	bpl.n	2e9ae <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2e99e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2e9a0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2e9a4:	fa10 f585 	uxtah	r5, r0, r5
   2e9a8:	60a5      	str	r5, [r4, #8]
}
   2e9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2e9ae:	4620      	mov	r0, r4
}
   2e9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2e9b4:	f015 bb7e 	b.w	440b4 <net_buf_unref>
   2e9b8:	00056915 	.word	0x00056915
   2e9bc:	00056993 	.word	0x00056993
   2e9c0:	00056952 	.word	0x00056952
   2e9c4:	000569ac 	.word	0x000569ac
   2e9c8:	00054dc4 	.word	0x00054dc4

0002e9cc <bt_recv>:
{
   2e9cc:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2e9ce:	4d3b      	ldr	r5, [pc, #236]	; (2eabc <bt_recv+0xf0>)
   2e9d0:	682b      	ldr	r3, [r5, #0]
{
   2e9d2:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2e9d4:	b913      	cbnz	r3, 2e9dc <bt_recv+0x10>
	return z_impl_z_current_get();
   2e9d6:	f01a fc69 	bl	492ac <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2e9da:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e9dc:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2e9de:	2b01      	cmp	r3, #1
   2e9e0:	d036      	beq.n	2ea50 <bt_recv+0x84>
   2e9e2:	2b03      	cmp	r3, #3
   2e9e4:	d163      	bne.n	2eaae <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e9e6:	89a3      	ldrh	r3, [r4, #12]
   2e9e8:	2b03      	cmp	r3, #3
   2e9ea:	d80c      	bhi.n	2ea06 <bt_recv+0x3a>
   2e9ec:	4a34      	ldr	r2, [pc, #208]	; (2eac0 <bt_recv+0xf4>)
   2e9ee:	4935      	ldr	r1, [pc, #212]	; (2eac4 <bt_recv+0xf8>)
   2e9f0:	4835      	ldr	r0, [pc, #212]	; (2eac8 <bt_recv+0xfc>)
   2e9f2:	f240 13b5 	movw	r3, #437	; 0x1b5
   2e9f6:	f01b fd56 	bl	4a4a6 <printk>
   2e9fa:	4040      	eors	r0, r0
   2e9fc:	f380 8811 	msr	BASEPRI, r0
   2ea00:	f04f 0003 	mov.w	r0, #3
   2ea04:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2ea06:	2104      	movs	r1, #4
   2ea08:	f104 0008 	add.w	r0, r4, #8
   2ea0c:	f021 fead 	bl	5076a <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2ea10:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2ea12:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2ea14:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2ea16:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2ea18:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2ea1a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2ea1e:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2ea20:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2ea22:	d003      	beq.n	2ea2c <bt_recv+0x60>
	net_buf_unref(buf);
   2ea24:	4620      	mov	r0, r4
   2ea26:	f015 fb45 	bl	440b4 <net_buf_unref>
   2ea2a:	e00f      	b.n	2ea4c <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2ea2c:	f001 fbb6 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   2ea30:	4605      	mov	r5, r0
   2ea32:	2800      	cmp	r0, #0
   2ea34:	d0f6      	beq.n	2ea24 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2ea36:	f001 fc87 	bl	30348 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2ea3a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2ea3c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2ea3e:	4621      	mov	r1, r4
   2ea40:	4628      	mov	r0, r5
   2ea42:	f01e fe0f 	bl	4d664 <bt_conn_recv>
	bt_conn_unref(conn);
   2ea46:	4628      	mov	r0, r5
   2ea48:	f01e fe74 	bl	4d734 <bt_conn_unref>
		return 0;
   2ea4c:	2000      	movs	r0, #0
}
   2ea4e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2ea50:	89a3      	ldrh	r3, [r4, #12]
   2ea52:	2b01      	cmp	r3, #1
   2ea54:	d80c      	bhi.n	2ea70 <bt_recv+0xa4>
   2ea56:	4a1a      	ldr	r2, [pc, #104]	; (2eac0 <bt_recv+0xf4>)
   2ea58:	491a      	ldr	r1, [pc, #104]	; (2eac4 <bt_recv+0xf8>)
   2ea5a:	481b      	ldr	r0, [pc, #108]	; (2eac8 <bt_recv+0xfc>)
   2ea5c:	f640 1317 	movw	r3, #2327	; 0x917
   2ea60:	f01b fd21 	bl	4a4a6 <printk>
   2ea64:	4040      	eors	r0, r0
   2ea66:	f380 8811 	msr	BASEPRI, r0
   2ea6a:	f04f 0003 	mov.w	r0, #3
   2ea6e:	df02      	svc	2
   2ea70:	2102      	movs	r1, #2
   2ea72:	f104 0008 	add.w	r0, r4, #8
   2ea76:	f021 fe78 	bl	5076a <net_buf_simple_pull_mem>
   2ea7a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2ea7c:	7800      	ldrb	r0, [r0, #0]
   2ea7e:	f01d ff5f 	bl	4c940 <bt_hci_evt_get_flags>
   2ea82:	0783      	lsls	r3, r0, #30
   2ea84:	d40c      	bmi.n	2eaa0 <bt_recv+0xd4>
   2ea86:	4a0e      	ldr	r2, [pc, #56]	; (2eac0 <bt_recv+0xf4>)
   2ea88:	4910      	ldr	r1, [pc, #64]	; (2eacc <bt_recv+0x100>)
   2ea8a:	480f      	ldr	r0, [pc, #60]	; (2eac8 <bt_recv+0xfc>)
   2ea8c:	f640 131b 	movw	r3, #2331	; 0x91b
   2ea90:	f01b fd09 	bl	4a4a6 <printk>
   2ea94:	4040      	eors	r0, r0
   2ea96:	f380 8811 	msr	BASEPRI, r0
   2ea9a:	f04f 0003 	mov.w	r0, #3
   2ea9e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2eaa0:	4a0b      	ldr	r2, [pc, #44]	; (2ead0 <bt_recv+0x104>)
   2eaa2:	7828      	ldrb	r0, [r5, #0]
   2eaa4:	2306      	movs	r3, #6
   2eaa6:	4621      	mov	r1, r4
   2eaa8:	f01d ff5c 	bl	4c964 <handle_event>
   2eaac:	e7ba      	b.n	2ea24 <bt_recv+0x58>
		net_buf_unref(buf);
   2eaae:	4620      	mov	r0, r4
   2eab0:	f015 fb00 	bl	440b4 <net_buf_unref>
		return -EINVAL;
   2eab4:	f06f 0015 	mvn.w	r0, #21
   2eab8:	e7c9      	b.n	2ea4e <bt_recv+0x82>
   2eaba:	bf00      	nop
   2eabc:	2000494c 	.word	0x2000494c
   2eac0:	00056915 	.word	0x00056915
   2eac4:	00056993 	.word	0x00056993
   2eac8:	00056952 	.word	0x00056952
   2eacc:	000569c5 	.word	0x000569c5
   2ead0:	00054d94 	.word	0x00054d94

0002ead4 <bt_recv_prio>:
{
   2ead4:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2ead6:	7d03      	ldrb	r3, [r0, #20]
   2ead8:	2b01      	cmp	r3, #1
{
   2eada:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2eadc:	d00c      	beq.n	2eaf8 <bt_recv_prio+0x24>
   2eade:	4a09      	ldr	r2, [pc, #36]	; (2eb04 <bt_recv_prio+0x30>)
   2eae0:	4909      	ldr	r1, [pc, #36]	; (2eb08 <bt_recv_prio+0x34>)
   2eae2:	480a      	ldr	r0, [pc, #40]	; (2eb0c <bt_recv_prio+0x38>)
   2eae4:	f640 537c 	movw	r3, #3452	; 0xd7c
   2eae8:	f01b fcdd 	bl	4a4a6 <printk>
   2eaec:	4040      	eors	r0, r0
   2eaee:	f380 8811 	msr	BASEPRI, r0
   2eaf2:	f04f 0003 	mov.w	r0, #3
   2eaf6:	df02      	svc	2
	hci_event_prio(buf);
   2eaf8:	4620      	mov	r0, r4
   2eafa:	f7ff ff15 	bl	2e928 <hci_event_prio>
}
   2eafe:	2000      	movs	r0, #0
   2eb00:	bd10      	pop	{r4, pc}
   2eb02:	bf00      	nop
   2eb04:	00056915 	.word	0x00056915
   2eb08:	000569f3 	.word	0x000569f3
   2eb0c:	00056952 	.word	0x00056952

0002eb10 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2eb10:	4a08      	ldr	r2, [pc, #32]	; (2eb34 <bt_hci_driver_register+0x24>)
{
   2eb12:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2eb14:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2eb18:	b930      	cbnz	r0, 2eb28 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2eb1a:	68d9      	ldr	r1, [r3, #12]
   2eb1c:	b139      	cbz	r1, 2eb2e <bt_hci_driver_register+0x1e>
   2eb1e:	6919      	ldr	r1, [r3, #16]
   2eb20:	b129      	cbz	r1, 2eb2e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2eb22:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2eb26:	4770      	bx	lr
		return -EALREADY;
   2eb28:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2eb2c:	4770      	bx	lr
		return -EINVAL;
   2eb2e:	f06f 0015 	mvn.w	r0, #21
}
   2eb32:	4770      	bx	lr
   2eb34:	20000040 	.word	0x20000040

0002eb38 <bt_finalize_init>:
{
   2eb38:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2eb3a:	4804      	ldr	r0, [pc, #16]	; (2eb4c <bt_finalize_init+0x14>)
   2eb3c:	2102      	movs	r1, #2
   2eb3e:	f01d ff41 	bl	4c9c4 <atomic_or>
}
   2eb42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   2eb46:	2000      	movs	r0, #0
   2eb48:	f000 bef4 	b.w	2f934 <bt_le_scan_update>
   2eb4c:	2000010c 	.word	0x2000010c

0002eb50 <init_work>:

static void init_work(struct k_work *work)
{
   2eb50:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2eb52:	f7f7 fc45 	bl	263e0 <bt_init>
	if (ready_cb) {
   2eb56:	4b03      	ldr	r3, [pc, #12]	; (2eb64 <init_work+0x14>)
   2eb58:	681b      	ldr	r3, [r3, #0]
   2eb5a:	b113      	cbz	r3, 2eb62 <init_work+0x12>
		ready_cb(err);
	}
}
   2eb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2eb60:	4718      	bx	r3
}
   2eb62:	bd10      	pop	{r4, pc}
   2eb64:	20004968 	.word	0x20004968

0002eb68 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2eb68:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2eb6a:	4d22      	ldr	r5, [pc, #136]	; (2ebf4 <bt_enable+0x8c>)
   2eb6c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2eb70:	b088      	sub	sp, #32
   2eb72:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2eb74:	2b00      	cmp	r3, #0
   2eb76:	d037      	beq.n	2ebe8 <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2eb78:	2101      	movs	r1, #1
   2eb7a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2eb7e:	f01d ff21 	bl	4c9c4 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2eb82:	07c3      	lsls	r3, r0, #31
   2eb84:	d433      	bmi.n	2ebee <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2eb86:	f01d fe82 	bl	4c88e <bt_settings_init>
		if (err) {
   2eb8a:	4604      	mov	r4, r0
   2eb8c:	bb48      	cbnz	r0, 2ebe2 <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2eb8e:	4b1a      	ldr	r3, [pc, #104]	; (2ebf8 <bt_enable+0x90>)
   2eb90:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2eb92:	2200      	movs	r2, #0
   2eb94:	2300      	movs	r3, #0
   2eb96:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2eb9a:	f06f 0308 	mvn.w	r3, #8
   2eb9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2eba2:	e9cd 0000 	strd	r0, r0, [sp]
   2eba6:	9004      	str	r0, [sp, #16]
   2eba8:	4b14      	ldr	r3, [pc, #80]	; (2ebfc <bt_enable+0x94>)
   2ebaa:	4915      	ldr	r1, [pc, #84]	; (2ec00 <bt_enable+0x98>)
   2ebac:	4815      	ldr	r0, [pc, #84]	; (2ec04 <bt_enable+0x9c>)
   2ebae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2ebb2:	f019 fc3b 	bl	4842c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2ebb6:	4914      	ldr	r1, [pc, #80]	; (2ec08 <bt_enable+0xa0>)
   2ebb8:	4812      	ldr	r0, [pc, #72]	; (2ec04 <bt_enable+0x9c>)
   2ebba:	f022 fd46 	bl	5164a <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2ebbe:	f7ff f855 	bl	2dc6c <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2ebc2:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2ebc6:	68db      	ldr	r3, [r3, #12]
   2ebc8:	4798      	blx	r3
	if (err) {
   2ebca:	4604      	mov	r4, r0
   2ebcc:	b948      	cbnz	r0, 2ebe2 <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2ebce:	b926      	cbnz	r6, 2ebda <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2ebd0:	b008      	add	sp, #32
   2ebd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2ebd6:	f7f7 bc03 	b.w	263e0 <bt_init>
	k_work_submit(&bt_dev.init);
   2ebda:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2ebde:	f019 ffd3 	bl	48b88 <k_work_submit>
}
   2ebe2:	4620      	mov	r0, r4
   2ebe4:	b008      	add	sp, #32
   2ebe6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2ebe8:	f06f 0412 	mvn.w	r4, #18
   2ebec:	e7f9      	b.n	2ebe2 <bt_enable+0x7a>
		return -EALREADY;
   2ebee:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2ebf2:	e7f6      	b.n	2ebe2 <bt_enable+0x7a>
   2ebf4:	20000040 	.word	0x20000040
   2ebf8:	20004968 	.word	0x20004968
   2ebfc:	0002e1fd 	.word	0x0002e1fd
   2ec00:	20008020 	.word	0x20008020
   2ec04:	20001cb8 	.word	0x20001cb8
   2ec08:	00056a16 	.word	0x00056a16

0002ec0c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2ec0c:	4800      	ldr	r0, [pc, #0]	; (2ec10 <bt_get_name+0x4>)
   2ec0e:	4770      	bx	lr
   2ec10:	000565c5 	.word	0x000565c5

0002ec14 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2ec14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2ec16:	4f0b      	ldr	r7, [pc, #44]	; (2ec44 <id_find+0x30>)
{
   2ec18:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2ec1a:	2500      	movs	r5, #0
   2ec1c:	79fb      	ldrb	r3, [r7, #7]
   2ec1e:	b2ec      	uxtb	r4, r5
   2ec20:	42a3      	cmp	r3, r4
   2ec22:	d802      	bhi.n	2ec2a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2ec24:	f06f 0401 	mvn.w	r4, #1
   2ec28:	e009      	b.n	2ec3e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2ec2a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   2ec2e:	2207      	movs	r2, #7
   2ec30:	4439      	add	r1, r7
   2ec32:	4630      	mov	r0, r6
   2ec34:	f01d fd2e 	bl	4c694 <memcmp>
   2ec38:	3501      	adds	r5, #1
   2ec3a:	2800      	cmp	r0, #0
   2ec3c:	d1ee      	bne.n	2ec1c <id_find+0x8>
}
   2ec3e:	4620      	mov	r0, r4
   2ec40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ec42:	bf00      	nop
   2ec44:	20000040 	.word	0x20000040

0002ec48 <set_random_address>:
{
   2ec48:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2ec4a:	4914      	ldr	r1, [pc, #80]	; (2ec9c <set_random_address+0x54>)
   2ec4c:	2206      	movs	r2, #6
   2ec4e:	4605      	mov	r5, r0
   2ec50:	f01d fd20 	bl	4c694 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2ec54:	4604      	mov	r4, r0
   2ec56:	b1e0      	cbz	r0, 2ec92 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2ec58:	2106      	movs	r1, #6
   2ec5a:	f242 0005 	movw	r0, #8197	; 0x2005
   2ec5e:	f7ff fb79 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2ec62:	4604      	mov	r4, r0
   2ec64:	b1b8      	cbz	r0, 2ec96 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ec66:	2206      	movs	r2, #6
   2ec68:	4629      	mov	r1, r5
   2ec6a:	3008      	adds	r0, #8
   2ec6c:	f021 fd52 	bl	50714 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2ec70:	4621      	mov	r1, r4
   2ec72:	2200      	movs	r2, #0
   2ec74:	f242 0005 	movw	r0, #8197	; 0x2005
   2ec78:	f7ff fbc8 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2ec7c:	4604      	mov	r4, r0
   2ec7e:	b940      	cbnz	r0, 2ec92 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   2ec80:	2206      	movs	r2, #6
   2ec82:	4806      	ldr	r0, [pc, #24]	; (2ec9c <set_random_address+0x54>)
   2ec84:	4629      	mov	r1, r5
   2ec86:	f01d fd16 	bl	4c6b6 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2ec8a:	4b05      	ldr	r3, [pc, #20]	; (2eca0 <set_random_address+0x58>)
   2ec8c:	2201      	movs	r2, #1
   2ec8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   2ec92:	4620      	mov	r0, r4
   2ec94:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2ec96:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2ec9a:	e7fa      	b.n	2ec92 <set_random_address+0x4a>
   2ec9c:	200000a1 	.word	0x200000a1
   2eca0:	20000040 	.word	0x20000040

0002eca4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2eca4:	b530      	push	{r4, r5, lr}
   2eca6:	4604      	mov	r4, r0
   2eca8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2ecaa:	460d      	mov	r5, r1
   2ecac:	b1e1      	cbz	r1, 2ece8 <id_create.constprop.0+0x44>
   2ecae:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2ecb0:	2207      	movs	r2, #7
   2ecb2:	a902      	add	r1, sp, #8
   2ecb4:	4628      	mov	r0, r5
   2ecb6:	9302      	str	r3, [sp, #8]
   2ecb8:	f8cd 300b 	str.w	r3, [sp, #11]
   2ecbc:	f01d fcea 	bl	4c694 <memcmp>
   2ecc0:	b190      	cbz	r0, 2ece8 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2ecc2:	4816      	ldr	r0, [pc, #88]	; (2ed1c <id_create.constprop.0+0x78>)
   2ecc4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2ecc8:	4629      	mov	r1, r5
   2ecca:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2eccc:	f01e fa25 	bl	4d11a <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ecd0:	4813      	ldr	r0, [pc, #76]	; (2ed20 <id_create.constprop.0+0x7c>)
   2ecd2:	f01e fa25 	bl	4d120 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2ecd6:	0782      	lsls	r2, r0, #30
   2ecd8:	f3c0 0340 	ubfx	r3, r0, #1, #1
   2ecdc:	d51b      	bpl.n	2ed16 <id_create.constprop.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2ecde:	f7ff f859 	bl	2dd94 <bt_settings_save_id>
	}

	return 0;
   2ece2:	2000      	movs	r0, #0
}
   2ece4:	b005      	add	sp, #20
   2ece6:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2ece8:	4668      	mov	r0, sp
   2ecea:	f01d fe1b 	bl	4c924 <bt_addr_le_create_static>
			if (err) {
   2ecee:	2800      	cmp	r0, #0
   2ecf0:	d1f8      	bne.n	2ece4 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   2ecf2:	4668      	mov	r0, sp
   2ecf4:	f7ff ff8e 	bl	2ec14 <id_find>
   2ecf8:	2800      	cmp	r0, #0
   2ecfa:	daf5      	bge.n	2ece8 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2ecfc:	4807      	ldr	r0, [pc, #28]	; (2ed1c <id_create.constprop.0+0x78>)
   2ecfe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2ed02:	4404      	add	r4, r0
   2ed04:	4669      	mov	r1, sp
   2ed06:	4620      	mov	r0, r4
   2ed08:	f01e fa07 	bl	4d11a <bt_addr_le_copy>
		if (addr) {
   2ed0c:	2d00      	cmp	r5, #0
   2ed0e:	d0df      	beq.n	2ecd0 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2ed10:	4621      	mov	r1, r4
   2ed12:	4628      	mov	r0, r5
   2ed14:	e7da      	b.n	2eccc <id_create.constprop.0+0x28>
	return 0;
   2ed16:	4618      	mov	r0, r3
   2ed18:	e7e4      	b.n	2ece4 <id_create.constprop.0+0x40>
   2ed1a:	bf00      	nop
   2ed1c:	20000040 	.word	0x20000040
   2ed20:	2000010c 	.word	0x2000010c

0002ed24 <bt_id_adv_random_addr_check>:
{
   2ed24:	b508      	push	{r3, lr}
   2ed26:	4805      	ldr	r0, [pc, #20]	; (2ed3c <bt_id_adv_random_addr_check+0x18>)
   2ed28:	f01e f9fa 	bl	4d120 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   2ed2c:	0503      	lsls	r3, r0, #20
   2ed2e:	d402      	bmi.n	2ed36 <bt_id_adv_random_addr_check+0x12>
   2ed30:	4802      	ldr	r0, [pc, #8]	; (2ed3c <bt_id_adv_random_addr_check+0x18>)
   2ed32:	f01e f9f5 	bl	4d120 <atomic_get>
}
   2ed36:	2001      	movs	r0, #1
   2ed38:	bd08      	pop	{r3, pc}
   2ed3a:	bf00      	nop
   2ed3c:	2000010c 	.word	0x2000010c

0002ed40 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ed40:	4b0a      	ldr	r3, [pc, #40]	; (2ed6c <bt_id_pending_keys_update+0x2c>)
   2ed42:	f3bf 8f5b 	dmb	ish
   2ed46:	e853 2f00 	ldrex	r2, [r3]
   2ed4a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2ed4e:	e843 1000 	strex	r0, r1, [r3]
   2ed52:	2800      	cmp	r0, #0
   2ed54:	d1f7      	bne.n	2ed46 <bt_id_pending_keys_update+0x6>
   2ed56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2ed5a:	0493      	lsls	r3, r2, #18
   2ed5c:	d504      	bpl.n	2ed68 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2ed5e:	4904      	ldr	r1, [pc, #16]	; (2ed70 <bt_id_pending_keys_update+0x30>)
   2ed60:	2200      	movs	r2, #0
   2ed62:	2002      	movs	r0, #2
   2ed64:	f005 ba68 	b.w	34238 <bt_keys_foreach>
}
   2ed68:	4770      	bx	lr
   2ed6a:	bf00      	nop
   2ed6c:	2000010c 	.word	0x2000010c
   2ed70:	0004d29f 	.word	0x0004d29f

0002ed74 <bt_id_add>:
{
   2ed74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2ed78:	4c4e      	ldr	r4, [pc, #312]	; (2eeb4 <bt_id_add+0x140>)
   2ed7a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2ed7e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2ed82:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2ed84:	b10a      	cbz	r2, 2ed8a <bt_id_add+0x16>
   2ed86:	429a      	cmp	r2, r3
   2ed88:	d209      	bcs.n	2ed9e <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   2ed8a:	3301      	adds	r3, #1
   2ed8c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2ed90:	7a2b      	ldrb	r3, [r5, #8]
   2ed92:	f043 0304 	orr.w	r3, r3, #4
   2ed96:	722b      	strb	r3, [r5, #8]
}
   2ed98:	b002      	add	sp, #8
   2ed9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2ed9e:	2100      	movs	r1, #0
   2eda0:	2206      	movs	r2, #6
   2eda2:	4608      	mov	r0, r1
   2eda4:	f001 fc28 	bl	305f8 <bt_conn_lookup_state_le>
	if (conn) {
   2eda8:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
   2edac:	4606      	mov	r6, r0
   2edae:	b1a0      	cbz	r0, 2edda <bt_id_add+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2edb0:	f3bf 8f5b 	dmb	ish
   2edb4:	e853 2f00 	ldrex	r2, [r3]
   2edb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2edbc:	e843 2100 	strex	r1, r2, [r3]
   2edc0:	2900      	cmp	r1, #0
   2edc2:	d1f7      	bne.n	2edb4 <bt_id_add+0x40>
   2edc4:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2edc8:	7a2b      	ldrb	r3, [r5, #8]
   2edca:	f043 0301 	orr.w	r3, r3, #1
   2edce:	722b      	strb	r3, [r5, #8]
}
   2edd0:	b002      	add	sp, #8
   2edd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2edd6:	f01e bcad 	b.w	4d734 <bt_conn_unref>
   2edda:	4618      	mov	r0, r3
   2eddc:	f01e f9a0 	bl	4d120 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2ede0:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ede2:	f3c0 1740 	ubfx	r7, r0, #5, #1
   2ede6:	4834      	ldr	r0, [pc, #208]	; (2eeb8 <bt_id_add+0x144>)
   2ede8:	f000 fb0e 	bl	2f408 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2edec:	b117      	cbz	r7, 2edf4 <bt_id_add+0x80>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2edee:	4630      	mov	r0, r6
   2edf0:	f01e fbc5 	bl	4d57e <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   2edf4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2edf8:	b9b3      	cbnz	r3, 2ee28 <bt_id_add+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2edfa:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2edfe:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2ee02:	429a      	cmp	r2, r3
   2ee04:	d123      	bne.n	2ee4e <bt_id_add+0xda>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2ee06:	2200      	movs	r2, #0
   2ee08:	4611      	mov	r1, r2
   2ee0a:	f242 0029 	movw	r0, #8233	; 0x2029
   2ee0e:	f7ff fafd 	bl	2e40c <bt_hci_cmd_send_sync>
		if (err) {
   2ee12:	b970      	cbnz	r0, 2ee32 <bt_id_add+0xbe>
		bt_dev.le.rl_entries++;
   2ee14:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2ee18:	3301      	adds	r3, #1
   2ee1a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2ee1e:	7a2b      	ldrb	r3, [r5, #8]
   2ee20:	f043 0304 	orr.w	r3, r3, #4
   2ee24:	722b      	strb	r3, [r5, #8]
		goto done;
   2ee26:	e004      	b.n	2ee32 <bt_id_add+0xbe>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2ee28:	2000      	movs	r0, #0
   2ee2a:	f01e f9c5 	bl	4d1b8 <addr_res_enable>
		if (err) {
   2ee2e:	2800      	cmp	r0, #0
   2ee30:	d0e3      	beq.n	2edfa <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2ee32:	2001      	movs	r0, #1
   2ee34:	f01e f9c0 	bl	4d1b8 <addr_res_enable>
	if (scan_enabled) {
   2ee38:	b117      	cbz	r7, 2ee40 <bt_id_add+0xcc>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2ee3a:	2001      	movs	r0, #1
   2ee3c:	f01e fb9f 	bl	4d57e <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2ee40:	481e      	ldr	r0, [pc, #120]	; (2eebc <bt_id_add+0x148>)
   2ee42:	2100      	movs	r1, #0
}
   2ee44:	b002      	add	sp, #8
   2ee46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2ee4a:	f000 badd 	b.w	2f408 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2ee4e:	f105 0801 	add.w	r8, r5, #1
   2ee52:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2ee56:	4640      	mov	r0, r8
   2ee58:	f01e f97d 	bl	4d156 <hci_id_add.constprop.0>
	if (err) {
   2ee5c:	4606      	mov	r6, r0
   2ee5e:	2800      	cmp	r0, #0
   2ee60:	d1e7      	bne.n	2ee32 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   2ee62:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2ee66:	3301      	adds	r3, #1
   2ee68:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2ee6c:	7a2b      	ldrb	r3, [r5, #8]
   2ee6e:	f043 0304 	orr.w	r3, r3, #4
   2ee72:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2ee74:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2ee78:	075b      	lsls	r3, r3, #29
   2ee7a:	d5da      	bpl.n	2ee32 <bt_id_add+0xbe>
	bt_addr_le_copy(&cp.id_addr, addr);
   2ee7c:	4641      	mov	r1, r8
   2ee7e:	4668      	mov	r0, sp
   2ee80:	f01e f94b 	bl	4d11a <bt_addr_le_copy>
	cp.mode = mode;
   2ee84:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2ee86:	2108      	movs	r1, #8
   2ee88:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2ee8c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2ee90:	f7ff fa60 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2ee94:	4604      	mov	r4, r0
   2ee96:	2800      	cmp	r0, #0
   2ee98:	d0cb      	beq.n	2ee32 <bt_id_add+0xbe>
   2ee9a:	2208      	movs	r2, #8
   2ee9c:	4669      	mov	r1, sp
   2ee9e:	4410      	add	r0, r2
   2eea0:	f021 fc38 	bl	50714 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2eea4:	4632      	mov	r2, r6
   2eea6:	4621      	mov	r1, r4
   2eea8:	f242 004e 	movw	r0, #8270	; 0x204e
   2eeac:	f7ff faae 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2eeb0:	e7bf      	b.n	2ee32 <bt_id_add+0xbe>
   2eeb2:	bf00      	nop
   2eeb4:	20000040 	.word	0x20000040
   2eeb8:	0004d1fd 	.word	0x0004d1fd
   2eebc:	0004d12d 	.word	0x0004d12d

0002eec0 <bt_id_del>:
{
   2eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   2eec4:	4d45      	ldr	r5, [pc, #276]	; (2efdc <bt_id_del+0x11c>)
   2eec6:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2eeca:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   2eece:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   2eed0:	b112      	cbz	r2, 2eed8 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2eed2:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2eed4:	4293      	cmp	r3, r2
   2eed6:	dd08      	ble.n	2eeea <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2eed8:	3b01      	subs	r3, #1
   2eeda:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2eede:	7a23      	ldrb	r3, [r4, #8]
   2eee0:	f023 0304 	bic.w	r3, r3, #4
   2eee4:	7223      	strb	r3, [r4, #8]
}
   2eee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2eeea:	2100      	movs	r1, #0
   2eeec:	2206      	movs	r2, #6
   2eeee:	4608      	mov	r0, r1
   2eef0:	f001 fb82 	bl	305f8 <bt_conn_lookup_state_le>
	if (conn) {
   2eef4:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   2eef8:	4606      	mov	r6, r0
   2eefa:	b198      	cbz	r0, 2ef24 <bt_id_del+0x64>
   2eefc:	f3bf 8f5b 	dmb	ish
   2ef00:	e853 2f00 	ldrex	r2, [r3]
   2ef04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2ef08:	e843 2100 	strex	r1, r2, [r3]
   2ef0c:	2900      	cmp	r1, #0
   2ef0e:	d1f7      	bne.n	2ef00 <bt_id_del+0x40>
   2ef10:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2ef14:	7a23      	ldrb	r3, [r4, #8]
   2ef16:	f043 0302 	orr.w	r3, r3, #2
   2ef1a:	7223      	strb	r3, [r4, #8]
}
   2ef1c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2ef20:	f01e bc08 	b.w	4d734 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ef24:	4618      	mov	r0, r3
   2ef26:	f01e f8fb 	bl	4d120 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2ef2a:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ef2c:	f3c0 1840 	ubfx	r8, r0, #5, #1
   2ef30:	482b      	ldr	r0, [pc, #172]	; (2efe0 <bt_id_del+0x120>)
   2ef32:	f000 fa69 	bl	2f408 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2ef36:	f1b8 0f00 	cmp.w	r8, #0
   2ef3a:	d002      	beq.n	2ef42 <bt_id_del+0x82>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2ef3c:	4630      	mov	r0, r6
   2ef3e:	f01e fb1e 	bl	4d57e <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2ef42:	2000      	movs	r0, #0
   2ef44:	f01e f938 	bl	4d1b8 <addr_res_enable>
	if (err) {
   2ef48:	4607      	mov	r7, r0
   2ef4a:	b988      	cbnz	r0, 2ef70 <bt_id_del+0xb0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2ef4c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2ef50:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   2ef54:	429a      	cmp	r2, r3
   2ef56:	d21d      	bcs.n	2ef94 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
   2ef58:	3b01      	subs	r3, #1
   2ef5a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2ef5e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2ef60:	4920      	ldr	r1, [pc, #128]	; (2efe4 <bt_id_del+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2ef62:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2ef66:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2ef68:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2ef6a:	2002      	movs	r0, #2
   2ef6c:	f005 f964 	bl	34238 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2ef70:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2ef74:	b113      	cbz	r3, 2ef7c <bt_id_del+0xbc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2ef76:	2001      	movs	r0, #1
   2ef78:	f01e f91e 	bl	4d1b8 <addr_res_enable>
	if (scan_enabled) {
   2ef7c:	f1b8 0f00 	cmp.w	r8, #0
   2ef80:	d002      	beq.n	2ef88 <bt_id_del+0xc8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2ef82:	2001      	movs	r0, #1
   2ef84:	f01e fafb 	bl	4d57e <bt_le_scan_set_enable>
}
   2ef88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2ef8c:	4816      	ldr	r0, [pc, #88]	; (2efe8 <bt_id_del+0x128>)
   2ef8e:	2100      	movs	r1, #0
   2ef90:	f000 ba3a 	b.w	2f408 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2ef94:	2107      	movs	r1, #7
   2ef96:	f242 0028 	movw	r0, #8232	; 0x2028
   2ef9a:	f7ff f9db 	bl	2e354 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2ef9e:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   2efa2:	4606      	mov	r6, r0
   2efa4:	2800      	cmp	r0, #0
   2efa6:	d0e3      	beq.n	2ef70 <bt_id_del+0xb0>
	return net_buf_simple_add(&buf->b, len);
   2efa8:	2107      	movs	r1, #7
   2efaa:	3008      	adds	r0, #8
   2efac:	f021 fbac 	bl	50708 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2efb0:	4649      	mov	r1, r9
   2efb2:	f01e f8b2 	bl	4d11a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2efb6:	463a      	mov	r2, r7
   2efb8:	4631      	mov	r1, r6
   2efba:	f242 0028 	movw	r0, #8232	; 0x2028
   2efbe:	f7ff fa25 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2efc2:	2800      	cmp	r0, #0
   2efc4:	d1d4      	bne.n	2ef70 <bt_id_del+0xb0>
	bt_dev.le.rl_entries--;
   2efc6:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2efca:	3b01      	subs	r3, #1
   2efcc:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2efd0:	7a23      	ldrb	r3, [r4, #8]
   2efd2:	f023 0304 	bic.w	r3, r3, #4
   2efd6:	7223      	strb	r3, [r4, #8]
   2efd8:	e7ca      	b.n	2ef70 <bt_id_del+0xb0>
   2efda:	bf00      	nop
   2efdc:	20000040 	.word	0x20000040
   2efe0:	0004d1fd 	.word	0x0004d1fd
   2efe4:	0004d1a7 	.word	0x0004d1a7
   2efe8:	0004d12d 	.word	0x0004d12d

0002efec <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2efec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2efee:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2eff0:	4605      	mov	r5, r0
   2eff2:	b918      	cbnz	r0, 2effc <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2eff4:	b1ec      	cbz	r4, 2f032 <bt_id_create+0x46>
		return -EINVAL;
   2eff6:	f06f 0015 	mvn.w	r0, #21
   2effa:	e018      	b.n	2f02e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2effc:	2300      	movs	r3, #0
   2effe:	2207      	movs	r2, #7
   2f000:	4669      	mov	r1, sp
   2f002:	9300      	str	r3, [sp, #0]
   2f004:	f8cd 3003 	str.w	r3, [sp, #3]
   2f008:	f01d fb44 	bl	4c694 <memcmp>
   2f00c:	2800      	cmp	r0, #0
   2f00e:	d0f1      	beq.n	2eff4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2f010:	782b      	ldrb	r3, [r5, #0]
   2f012:	2b01      	cmp	r3, #1
   2f014:	d1ef      	bne.n	2eff6 <bt_id_create+0xa>
   2f016:	79ab      	ldrb	r3, [r5, #6]
   2f018:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f01c:	2bc0      	cmp	r3, #192	; 0xc0
   2f01e:	d1ea      	bne.n	2eff6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2f020:	4628      	mov	r0, r5
   2f022:	f7ff fdf7 	bl	2ec14 <id_find>
   2f026:	2800      	cmp	r0, #0
   2f028:	dbe4      	blt.n	2eff4 <bt_id_create+0x8>
			return -EALREADY;
   2f02a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2f02e:	b002      	add	sp, #8
   2f030:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2f032:	4e12      	ldr	r6, [pc, #72]	; (2f07c <bt_id_create+0x90>)
   2f034:	79f3      	ldrb	r3, [r6, #7]
   2f036:	2b01      	cmp	r3, #1
   2f038:	d01c      	beq.n	2f074 <bt_id_create+0x88>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f03a:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2f03e:	f01e f86f 	bl	4d120 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2f042:	07c3      	lsls	r3, r0, #31
   2f044:	d40b      	bmi.n	2f05e <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2f046:	2d00      	cmp	r5, #0
   2f048:	d0d5      	beq.n	2eff6 <bt_id_create+0xa>
   2f04a:	2207      	movs	r2, #7
   2f04c:	4669      	mov	r1, sp
   2f04e:	4628      	mov	r0, r5
   2f050:	9400      	str	r4, [sp, #0]
   2f052:	f8cd 4003 	str.w	r4, [sp, #3]
   2f056:	f01d fb1d 	bl	4c694 <memcmp>
   2f05a:	2800      	cmp	r0, #0
   2f05c:	d0cb      	beq.n	2eff6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2f05e:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2f060:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2f062:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2f064:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2f066:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2f068:	f7ff fe1c 	bl	2eca4 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2f06c:	2800      	cmp	r0, #0
   2f06e:	bf08      	it	eq
   2f070:	4620      	moveq	r0, r4
   2f072:	e7dc      	b.n	2f02e <bt_id_create+0x42>
		return -ENOMEM;
   2f074:	f06f 000b 	mvn.w	r0, #11
   2f078:	e7d9      	b.n	2f02e <bt_id_create+0x42>
   2f07a:	bf00      	nop
   2f07c:	20000040 	.word	0x20000040

0002f080 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2f080:	b570      	push	{r4, r5, r6, lr}
   2f082:	b086      	sub	sp, #24
   2f084:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2f086:	aa01      	add	r2, sp, #4
   2f088:	2100      	movs	r1, #0
   2f08a:	f241 0009 	movw	r0, #4105	; 0x1009
   2f08e:	f7ff f9bd 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2f092:	4604      	mov	r4, r0
   2f094:	b970      	cbnz	r0, 2f0b4 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2f096:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2f098:	9002      	str	r0, [sp, #8]
   2f09a:	689d      	ldr	r5, [r3, #8]
   2f09c:	f8ad 000c 	strh.w	r0, [sp, #12]
   2f0a0:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2f0a2:	2206      	movs	r2, #6
   2f0a4:	a902      	add	r1, sp, #8
   2f0a6:	4628      	mov	r0, r5
   2f0a8:	f01d faf4 	bl	4c694 <memcmp>
   2f0ac:	b920      	cbnz	r0, 2f0b8 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2f0ae:	9801      	ldr	r0, [sp, #4]
   2f0b0:	f015 f800 	bl	440b4 <net_buf_unref>
		return 0U;
   2f0b4:	2000      	movs	r0, #0
   2f0b6:	e016      	b.n	2f0e6 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2f0b8:	4b0c      	ldr	r3, [pc, #48]	; (2f0ec <bt_id_read_public_addr+0x6c>)
   2f0ba:	6818      	ldr	r0, [r3, #0]
   2f0bc:	9004      	str	r0, [sp, #16]
   2f0be:	889b      	ldrh	r3, [r3, #4]
   2f0c0:	f8ad 3014 	strh.w	r3, [sp, #20]
   2f0c4:	2206      	movs	r2, #6
   2f0c6:	a904      	add	r1, sp, #16
   2f0c8:	4628      	mov	r0, r5
   2f0ca:	f01d fae3 	bl	4c694 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2f0ce:	2800      	cmp	r0, #0
   2f0d0:	d0ed      	beq.n	2f0ae <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2f0d2:	2206      	movs	r2, #6
   2f0d4:	4629      	mov	r1, r5
   2f0d6:	1c70      	adds	r0, r6, #1
   2f0d8:	f01d faed 	bl	4c6b6 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   2f0dc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2f0de:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2f0e0:	f014 ffe8 	bl	440b4 <net_buf_unref>
	return 1U;
   2f0e4:	2001      	movs	r0, #1
}
   2f0e6:	b006      	add	sp, #24
   2f0e8:	bd70      	pop	{r4, r5, r6, pc}
   2f0ea:	bf00      	nop
   2f0ec:	00052b11 	.word	0x00052b11

0002f0f0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2f0f0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2f0f2:	4668      	mov	r0, sp
   2f0f4:	f7ff ffc4 	bl	2f080 <bt_id_read_public_addr>
   2f0f8:	4b04      	ldr	r3, [pc, #16]	; (2f10c <bt_setup_public_id_addr+0x1c>)
   2f0fa:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2f0fc:	b118      	cbz	r0, 2f106 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2f0fe:	4669      	mov	r1, sp
   2f100:	2000      	movs	r0, #0
   2f102:	f7ff fdcf 	bl	2eca4 <id_create.constprop.0>
}
   2f106:	b003      	add	sp, #12
   2f108:	f85d fb04 	ldr.w	pc, [sp], #4
   2f10c:	20000040 	.word	0x20000040

0002f110 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2f110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2f114:	4b15      	ldr	r3, [pc, #84]	; (2f16c <bt_read_static_addr+0x5c>)
   2f116:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   2f11a:	f014 0401 	ands.w	r4, r4, #1
{
   2f11e:	4607      	mov	r7, r0
   2f120:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2f122:	d015      	beq.n	2f150 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2f124:	aa01      	add	r2, sp, #4
   2f126:	2100      	movs	r1, #0
   2f128:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2f12c:	f7ff f96e 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2f130:	4605      	mov	r5, r0
   2f132:	b9c8      	cbnz	r0, 2f168 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   2f134:	9b01      	ldr	r3, [sp, #4]
   2f136:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2f138:	785c      	ldrb	r4, [r3, #1]
   2f13a:	42b4      	cmp	r4, r6
   2f13c:	bf28      	it	cs
   2f13e:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2f140:	f04f 0816 	mov.w	r8, #22
   2f144:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2f146:	42a5      	cmp	r5, r4
   2f148:	db06      	blt.n	2f158 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   2f14a:	9801      	ldr	r0, [sp, #4]
   2f14c:	f014 ffb2 	bl	440b4 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2f150:	4620      	mov	r0, r4
   2f152:	b002      	add	sp, #8
   2f154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2f158:	fb08 7005 	mla	r0, r8, r5, r7
   2f15c:	2216      	movs	r2, #22
   2f15e:	4631      	mov	r1, r6
   2f160:	f01d faa9 	bl	4c6b6 <memcpy>
	for (i = 0; i < cnt; i++) {
   2f164:	3501      	adds	r5, #1
   2f166:	e7ee      	b.n	2f146 <bt_read_static_addr+0x36>
		return 0;
   2f168:	2400      	movs	r4, #0
   2f16a:	e7f1      	b.n	2f150 <bt_read_static_addr+0x40>
   2f16c:	20000040 	.word	0x20000040

0002f170 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2f170:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2f172:	4e15      	ldr	r6, [pc, #84]	; (2f1c8 <bt_setup_random_id_addr+0x58>)
   2f174:	79f4      	ldrb	r4, [r6, #7]
{
   2f176:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2f178:	b9f4      	cbnz	r4, 2f1b8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2f17a:	2101      	movs	r1, #1
   2f17c:	a802      	add	r0, sp, #8
   2f17e:	f7ff ffc7 	bl	2f110 <bt_read_static_addr>
   2f182:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2f184:	b1c0      	cbz	r0, 2f1b8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2f186:	2716      	movs	r7, #22
   2f188:	ab02      	add	r3, sp, #8
   2f18a:	b2e5      	uxtb	r5, r4
   2f18c:	fb07 3105 	mla	r1, r7, r5, r3
   2f190:	2206      	movs	r2, #6
   2f192:	f10d 0001 	add.w	r0, sp, #1
   2f196:	f01d fa8e 	bl	4c6b6 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2f19a:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   2f19c:	4669      	mov	r1, sp
   2f19e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2f1a0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2f1a4:	f7ff fd7e 	bl	2eca4 <id_create.constprop.0>
				if (err) {
   2f1a8:	b920      	cbnz	r0, 2f1b4 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2f1aa:	79f2      	ldrb	r2, [r6, #7]
   2f1ac:	3401      	adds	r4, #1
   2f1ae:	b2e3      	uxtb	r3, r4
   2f1b0:	429a      	cmp	r2, r3
   2f1b2:	d8e9      	bhi.n	2f188 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   2f1b4:	b009      	add	sp, #36	; 0x24
   2f1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   2f1b8:	2100      	movs	r1, #0
   2f1ba:	4608      	mov	r0, r1
}
   2f1bc:	b009      	add	sp, #36	; 0x24
   2f1be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2f1c2:	f7ff bf13 	b.w	2efec <bt_id_create>
   2f1c6:	bf00      	nop
   2f1c8:	20000040 	.word	0x20000040

0002f1cc <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   2f1cc:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2f1ce:	4c07      	ldr	r4, [pc, #28]	; (2f1ec <bt_id_set_create_conn_own_addr+0x20>)
   2f1d0:	7823      	ldrb	r3, [r4, #0]
   2f1d2:	2b01      	cmp	r3, #1
{
   2f1d4:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2f1d6:	d003      	beq.n	2f1e0 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   2f1d8:	7823      	ldrb	r3, [r4, #0]
   2f1da:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   2f1dc:	2000      	movs	r0, #0
}
   2f1de:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   2f1e0:	1c60      	adds	r0, r4, #1
   2f1e2:	f7ff fd31 	bl	2ec48 <set_random_address>
			if (err) {
   2f1e6:	2800      	cmp	r0, #0
   2f1e8:	d0f6      	beq.n	2f1d8 <bt_id_set_create_conn_own_addr+0xc>
   2f1ea:	e7f8      	b.n	2f1de <bt_id_set_create_conn_own_addr+0x12>
   2f1ec:	20000040 	.word	0x20000040

0002f1f0 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   2f1f0:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   2f1f2:	4b0b      	ldr	r3, [pc, #44]	; (2f220 <bt_id_set_scan_own_addr+0x30>)
   2f1f4:	781b      	ldrb	r3, [r3, #0]
   2f1f6:	700b      	strb	r3, [r1, #0]
{
   2f1f8:	4606      	mov	r6, r0
   2f1fa:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   2f1fc:	f01d fff4 	bl	4d1e8 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   2f200:	b928      	cbnz	r0, 2f20e <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   2f202:	f01e f81f 	bl	4d244 <bt_id_set_private_addr>
			if (err) {
   2f206:	4604      	mov	r4, r0
   2f208:	b918      	cbnz	r0, 2f212 <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   2f20a:	2301      	movs	r3, #1
   2f20c:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
   2f20e:	2400      	movs	r4, #0
   2f210:	e004      	b.n	2f21c <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
   2f212:	b91e      	cbnz	r6, 2f21c <bt_id_set_scan_own_addr+0x2c>
   2f214:	f01d ffe8 	bl	4d1e8 <is_adv_using_rand_addr>
   2f218:	2800      	cmp	r0, #0
   2f21a:	d1f6      	bne.n	2f20a <bt_id_set_scan_own_addr+0x1a>
}
   2f21c:	4620      	mov	r0, r4
   2f21e:	bd70      	pop	{r4, r5, r6, pc}
   2f220:	20000040 	.word	0x20000040

0002f224 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2f224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2f228:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   2f22c:	7806      	ldrb	r6, [r0, #0]
{
   2f22e:	4680      	mov	r8, r0
   2f230:	460d      	mov	r5, r1
   2f232:	4691      	mov	r9, r2
   2f234:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2f236:	d02b      	beq.n	2f290 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2f238:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2f2f0 <bt_id_set_adv_own_addr+0xcc>
   2f23c:	b12a      	cbz	r2, 2f24a <bt_id_set_adv_own_addr+0x26>
   2f23e:	0688      	lsls	r0, r1, #26
   2f240:	d503      	bpl.n	2f24a <bt_id_set_adv_own_addr+0x26>
   2f242:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   2f246:	0659      	lsls	r1, r3, #25
   2f248:	d54f      	bpl.n	2f2ea <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2f24a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   2f24e:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   2f252:	f818 3003 	ldrb.w	r3, [r8, r3]
   2f256:	2b01      	cmp	r3, #1
   2f258:	d009      	beq.n	2f26e <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2f25a:	ebaa 0606 	sub.w	r6, sl, r6
   2f25e:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2f262:	f1b9 0f00 	cmp.w	r9, #0
   2f266:	d10e      	bne.n	2f286 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2f268:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   2f26a:	2400      	movs	r4, #0
   2f26c:	e008      	b.n	2f280 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2f26e:	2007      	movs	r0, #7
   2f270:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   2f274:	4440      	add	r0, r8
   2f276:	f7ff fce7 	bl	2ec48 <set_random_address>
				if (err) {
   2f27a:	4604      	mov	r4, r0
   2f27c:	2800      	cmp	r0, #0
   2f27e:	d0ec      	beq.n	2f25a <bt_id_set_adv_own_addr+0x36>
}
   2f280:	4620      	mov	r0, r4
   2f282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2f286:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2f288:	bf48      	it	mi
   2f28a:	f043 0302 	orrmi.w	r3, r3, #2
   2f28e:	e7eb      	b.n	2f268 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2f290:	f011 0504 	ands.w	r5, r1, #4
   2f294:	d014      	beq.n	2f2c0 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2f296:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2f2f0 <bt_id_set_adv_own_addr+0xcc>
   2f29a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   2f29e:	00f5      	lsls	r5, r6, #3
   2f2a0:	f818 3003 	ldrb.w	r3, [r8, r3]
   2f2a4:	2b01      	cmp	r3, #1
   2f2a6:	d106      	bne.n	2f2b6 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2f2a8:	2007      	movs	r0, #7
   2f2aa:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   2f2ae:	4440      	add	r0, r8
   2f2b0:	f7ff fcca 	bl	2ec48 <set_random_address>
   2f2b4:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
   2f2b6:	1bad      	subs	r5, r5, r6
   2f2b8:	f818 3005 	ldrb.w	r3, [r8, r5]
   2f2bc:	703b      	strb	r3, [r7, #0]
   2f2be:	e7df      	b.n	2f280 <bt_id_set_adv_own_addr+0x5c>
   2f2c0:	480c      	ldr	r0, [pc, #48]	; (2f2f4 <bt_id_set_adv_own_addr+0xd0>)
   2f2c2:	f01d ff2d 	bl	4d120 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2f2c6:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f2c8:	f3c0 1640 	ubfx	r6, r0, #5, #1
   2f2cc:	d502      	bpl.n	2f2d4 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2f2ce:	4628      	mov	r0, r5
   2f2d0:	f01e f955 	bl	4d57e <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   2f2d4:	4640      	mov	r0, r8
   2f2d6:	f01d ffc7 	bl	4d268 <bt_id_set_adv_private_addr>
   2f2da:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2f2dc:	2001      	movs	r0, #1
   2f2de:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
   2f2e0:	2e00      	cmp	r6, #0
   2f2e2:	d0cd      	beq.n	2f280 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2f2e4:	f01e f94b 	bl	4d57e <bt_le_scan_set_enable>
		if (err) {
   2f2e8:	e7ca      	b.n	2f280 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
   2f2ea:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f2ee:	e7c7      	b.n	2f280 <bt_id_set_adv_own_addr+0x5c>
   2f2f0:	20000040 	.word	0x20000040
   2f2f4:	2000010c 	.word	0x2000010c

0002f2f8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2f2f8:	6843      	ldr	r3, [r0, #4]
{
   2f2fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f2fc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2f2fe:	0558      	lsls	r0, r3, #21
   2f300:	d502      	bpl.n	2f308 <valid_adv_param+0x10>
		return false;
   2f302:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   2f304:	b003      	add	sp, #12
   2f306:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2f308:	6922      	ldr	r2, [r4, #16]
   2f30a:	b10a      	cbz	r2, 2f310 <valid_adv_param+0x18>
   2f30c:	07d9      	lsls	r1, r3, #31
   2f30e:	d5f8      	bpl.n	2f302 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   2f310:	4d1a      	ldr	r5, [pc, #104]	; (2f37c <valid_adv_param+0x84>)
   2f312:	7820      	ldrb	r0, [r4, #0]
   2f314:	79eb      	ldrb	r3, [r5, #7]
   2f316:	4283      	cmp	r3, r0
   2f318:	d9f3      	bls.n	2f302 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2f31a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2f31e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2f320:	2207      	movs	r2, #7
   2f322:	4669      	mov	r1, sp
   2f324:	4428      	add	r0, r5
   2f326:	9300      	str	r3, [sp, #0]
   2f328:	f8cd 3003 	str.w	r3, [sp, #3]
   2f32c:	f01d f9b2 	bl	4c694 <memcmp>
	if (param->id >= bt_dev.id_count ||
   2f330:	2800      	cmp	r0, #0
   2f332:	d0e6      	beq.n	2f302 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2f334:	6860      	ldr	r0, [r4, #4]
   2f336:	07c2      	lsls	r2, r0, #31
   2f338:	d406      	bmi.n	2f348 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2f33a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2f33e:	2b08      	cmp	r3, #8
   2f340:	d802      	bhi.n	2f348 <valid_adv_param+0x50>
   2f342:	68a3      	ldr	r3, [r4, #8]
   2f344:	2b9f      	cmp	r3, #159	; 0x9f
   2f346:	d9dc      	bls.n	2f302 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2f348:	f010 0f30 	tst.w	r0, #48	; 0x30
   2f34c:	d002      	beq.n	2f354 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2f34e:	6923      	ldr	r3, [r4, #16]
   2f350:	2b00      	cmp	r3, #0
   2f352:	d0d6      	beq.n	2f302 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2f354:	06c3      	lsls	r3, r0, #27
   2f356:	d401      	bmi.n	2f35c <valid_adv_param+0x64>
   2f358:	6923      	ldr	r3, [r4, #16]
   2f35a:	b943      	cbnz	r3, 2f36e <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2f35c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2f360:	429a      	cmp	r2, r3
   2f362:	d8ce      	bhi.n	2f302 <valid_adv_param+0xa>
   2f364:	2a1f      	cmp	r2, #31
   2f366:	d9cc      	bls.n	2f302 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2f368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2f36c:	d8c9      	bhi.n	2f302 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2f36e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2f372:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2f376:	bf18      	it	ne
   2f378:	2001      	movne	r0, #1
   2f37a:	e7c3      	b.n	2f304 <valid_adv_param+0xc>
   2f37c:	20000040 	.word	0x20000040

0002f380 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2f380:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2f382:	4606      	mov	r6, r0
   2f384:	4b1e      	ldr	r3, [pc, #120]	; (2f400 <le_adv_start_add_conn+0x80>)
   2f386:	f816 2b09 	ldrb.w	r2, [r6], #9
   2f38a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2f38e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2f390:	2300      	movs	r3, #0
{
   2f392:	4605      	mov	r5, r0
   2f394:	2207      	movs	r2, #7
   2f396:	460f      	mov	r7, r1
   2f398:	4630      	mov	r0, r6
   2f39a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2f39c:	9300      	str	r3, [sp, #0]
   2f39e:	f8cd 3003 	str.w	r3, [sp, #3]
   2f3a2:	f01d f977 	bl	4c694 <memcmp>
   2f3a6:	782a      	ldrb	r2, [r5, #0]
   2f3a8:	4604      	mov	r4, r0
   2f3aa:	b9a8      	cbnz	r0, 2f3d8 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2f3ac:	4b15      	ldr	r3, [pc, #84]	; (2f404 <le_adv_start_add_conn+0x84>)
   2f3ae:	6818      	ldr	r0, [r3, #0]
   2f3b0:	8899      	ldrh	r1, [r3, #4]
   2f3b2:	9002      	str	r0, [sp, #8]
   2f3b4:	799b      	ldrb	r3, [r3, #6]
   2f3b6:	f8ad 100c 	strh.w	r1, [sp, #12]
   2f3ba:	4610      	mov	r0, r2
   2f3bc:	a902      	add	r1, sp, #8
   2f3be:	f88d 300e 	strb.w	r3, [sp, #14]
   2f3c2:	f001 f8d9 	bl	30578 <bt_conn_add_le>
		if (!conn) {
   2f3c6:	4605      	mov	r5, r0
   2f3c8:	b1b8      	cbz	r0, 2f3fa <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2f3ca:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2f3cc:	f000 feee 	bl	301ac <bt_conn_set_state>
	*out_conn = conn;
   2f3d0:	603d      	str	r5, [r7, #0]
	return 0;
}
   2f3d2:	4620      	mov	r0, r4
   2f3d4:	b005      	add	sp, #20
   2f3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2f3d8:	4631      	mov	r1, r6
   2f3da:	4610      	mov	r0, r2
   2f3dc:	f01e fa73 	bl	4d8c6 <bt_conn_exists_le>
   2f3e0:	4604      	mov	r4, r0
   2f3e2:	b938      	cbnz	r0, 2f3f4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2f3e4:	7828      	ldrb	r0, [r5, #0]
   2f3e6:	4631      	mov	r1, r6
   2f3e8:	f001 f8c6 	bl	30578 <bt_conn_add_le>
	if (!conn) {
   2f3ec:	4605      	mov	r5, r0
   2f3ee:	b120      	cbz	r0, 2f3fa <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2f3f0:	2105      	movs	r1, #5
   2f3f2:	e7eb      	b.n	2f3cc <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2f3f4:	f06f 0415 	mvn.w	r4, #21
   2f3f8:	e7eb      	b.n	2f3d2 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2f3fa:	f06f 040b 	mvn.w	r4, #11
   2f3fe:	e7e8      	b.n	2f3d2 <le_adv_start_add_conn+0x52>
   2f400:	20000040 	.word	0x20000040
   2f404:	00052b17 	.word	0x00052b17

0002f408 <bt_le_ext_adv_foreach>:
{
   2f408:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2f40a:	4801      	ldr	r0, [pc, #4]	; (2f410 <bt_le_ext_adv_foreach+0x8>)
   2f40c:	4718      	bx	r3
   2f40e:	bf00      	nop
   2f410:	20000058 	.word	0x20000058

0002f414 <bt_le_adv_lookup_legacy>:
}
   2f414:	4800      	ldr	r0, [pc, #0]	; (2f418 <bt_le_adv_lookup_legacy+0x4>)
   2f416:	4770      	bx	lr
   2f418:	20000058 	.word	0x20000058

0002f41c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2f41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2f420:	690e      	ldr	r6, [r1, #16]
{
   2f422:	b08f      	sub	sp, #60	; 0x3c
   2f424:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2f426:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2f428:	ebb6 0903 	subs.w	r9, r6, r3
{
   2f42c:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f42e:	488c      	ldr	r0, [pc, #560]	; (2f660 <bt_le_adv_start_legacy+0x244>)
   2f430:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2f432:	bf18      	it	ne
   2f434:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   2f438:	9307      	str	r3, [sp, #28]
   2f43a:	f01d ff51 	bl	4d2e0 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f43e:	0787      	lsls	r7, r0, #30
{
   2f440:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f442:	f140 8102 	bpl.w	2f64a <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2f446:	4608      	mov	r0, r1
   2f448:	f7ff ff56 	bl	2f2f8 <valid_adv_param>
   2f44c:	b928      	cbnz	r0, 2f45a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   2f44e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2f452:	4658      	mov	r0, fp
   2f454:	b00f      	add	sp, #60	; 0x3c
   2f456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2f45a:	4620      	mov	r0, r4
   2f45c:	f7ff fc62 	bl	2ed24 <bt_id_adv_random_addr_check>
   2f460:	4680      	mov	r8, r0
   2f462:	2800      	cmp	r0, #0
   2f464:	d0f3      	beq.n	2f44e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2f466:	f105 0710 	add.w	r7, r5, #16
   2f46a:	4638      	mov	r0, r7
   2f46c:	f01d ff38 	bl	4d2e0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f470:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2f474:	0640      	lsls	r0, r0, #25
   2f476:	f100 80eb 	bmi.w	2f650 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   2f47a:	220f      	movs	r2, #15
   2f47c:	4659      	mov	r1, fp
   2f47e:	a80a      	add	r0, sp, #40	; 0x28
   2f480:	f01d f924 	bl	4c6cc <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2f484:	68a3      	ldr	r3, [r4, #8]
   2f486:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2f48a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2f48c:	68e3      	ldr	r3, [r4, #12]
   2f48e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2f492:	f01d ff16 	bl	4d2c2 <get_adv_channel_map>
	if (adv->id != param->id) {
   2f496:	782a      	ldrb	r2, [r5, #0]
   2f498:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2f49a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2f49e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2f4a0:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2f4a4:	d004      	beq.n	2f4b0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f4a6:	486e      	ldr	r0, [pc, #440]	; (2f660 <bt_le_adv_start_legacy+0x244>)
   2f4a8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2f4ac:	f01d ff1e 	bl	4d2ec <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2f4b0:	4a6c      	ldr	r2, [pc, #432]	; (2f664 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   2f4b2:	7823      	ldrb	r3, [r4, #0]
   2f4b4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2f4b6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2f4ba:	6861      	ldr	r1, [r4, #4]
   2f4bc:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2f4c0:	464a      	mov	r2, r9
   2f4c2:	4628      	mov	r0, r5
   2f4c4:	f7ff feae 	bl	2f224 <bt_id_set_adv_own_addr>
	if (err) {
   2f4c8:	4683      	mov	fp, r0
   2f4ca:	2800      	cmp	r0, #0
   2f4cc:	d1c1      	bne.n	2f452 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2f4ce:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2f4d2:	2e00      	cmp	r6, #0
   2f4d4:	d049      	beq.n	2f56a <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   2f4d6:	6921      	ldr	r1, [r4, #16]
   2f4d8:	2207      	movs	r2, #7
   2f4da:	f01d f8ec 	bl	4c6b6 <memcpy>
	name_type = get_adv_name_type_param(param);
   2f4de:	4620      	mov	r0, r4
   2f4e0:	f01e f802 	bl	4d4e8 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2f4e4:	6863      	ldr	r3, [r4, #4]
   2f4e6:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   2f4e8:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2f4ea:	d547      	bpl.n	2f57c <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   2f4ec:	2e00      	cmp	r6, #0
   2f4ee:	d042      	beq.n	2f576 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   2f4f0:	f013 0f10 	tst.w	r3, #16
   2f4f4:	bf14      	ite	ne
   2f4f6:	2304      	movne	r3, #4
   2f4f8:	2301      	moveq	r3, #1
   2f4fa:	6921      	ldr	r1, [r4, #16]
   2f4fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2f500:	2207      	movs	r2, #7
   2f502:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2f506:	f01d f8d6 	bl	4c6b6 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2f50a:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2f50e:	210f      	movs	r1, #15
   2f510:	f242 0006 	movw	r0, #8198	; 0x2006
   2f514:	f7fe ff1e 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2f518:	4683      	mov	fp, r0
   2f51a:	2800      	cmp	r0, #0
   2f51c:	f000 809b 	beq.w	2f656 <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f520:	220f      	movs	r2, #15
   2f522:	a90a      	add	r1, sp, #40	; 0x28
   2f524:	3008      	adds	r0, #8
   2f526:	f021 f8f5 	bl	50714 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2f52a:	2200      	movs	r2, #0
   2f52c:	4659      	mov	r1, fp
   2f52e:	f242 0006 	movw	r0, #8198	; 0x2006
   2f532:	f7fe ff6b 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2f536:	2800      	cmp	r0, #0
   2f538:	f040 8090 	bne.w	2f65c <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   2f53c:	b376      	cbz	r6, 2f59c <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2f53e:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2f540:	07db      	lsls	r3, r3, #31
   2f542:	d439      	bmi.n	2f5b8 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2f544:	2101      	movs	r1, #1
   2f546:	4628      	mov	r0, r5
   2f548:	f01d ffde 	bl	4d508 <bt_le_adv_set_enable_legacy>
	if (err) {
   2f54c:	4683      	mov	fp, r0
   2f54e:	9807      	ldr	r0, [sp, #28]
   2f550:	f1bb 0f00 	cmp.w	fp, #0
   2f554:	d073      	beq.n	2f63e <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2f556:	2800      	cmp	r0, #0
   2f558:	f43f af7b 	beq.w	2f452 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f55c:	2100      	movs	r1, #0
   2f55e:	f000 fe25 	bl	301ac <bt_conn_set_state>
			bt_conn_unref(conn);
   2f562:	9807      	ldr	r0, [sp, #28]
   2f564:	f01e f8e6 	bl	4d734 <bt_conn_unref>
   2f568:	e773      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2f56a:	9608      	str	r6, [sp, #32]
   2f56c:	2207      	movs	r2, #7
   2f56e:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   2f572:	a908      	add	r1, sp, #32
   2f574:	e7b1      	b.n	2f4da <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   2f576:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   2f57a:	e7c8      	b.n	2f50e <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2f57c:	059a      	lsls	r2, r3, #22
   2f57e:	d403      	bmi.n	2f588 <bt_le_adv_start_legacy+0x16c>
   2f580:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2f582:	b90b      	cbnz	r3, 2f588 <bt_le_adv_start_legacy+0x16c>
   2f584:	2802      	cmp	r0, #2
   2f586:	d103      	bne.n	2f590 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2f588:	2302      	movs	r3, #2
   2f58a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2f58e:	e7be      	b.n	2f50e <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2f590:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2f592:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2f596:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2f59a:	e7b8      	b.n	2f50e <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2f59c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2f59e:	9300      	str	r3, [sp, #0]
   2f5a0:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2f5a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2f5a6:	9905      	ldr	r1, [sp, #20]
   2f5a8:	4652      	mov	r2, sl
   2f5aa:	4628      	mov	r0, r5
   2f5ac:	f01d ff25 	bl	4d3fa <le_adv_update.constprop.0>
		if (err) {
   2f5b0:	4683      	mov	fp, r0
   2f5b2:	2800      	cmp	r0, #0
   2f5b4:	d0c3      	beq.n	2f53e <bt_le_adv_start_legacy+0x122>
   2f5b6:	e74c      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   2f5b8:	a907      	add	r1, sp, #28
   2f5ba:	4628      	mov	r0, r5
   2f5bc:	f7ff fee0 	bl	2f380 <le_adv_start_add_conn>
		if (err) {
   2f5c0:	4683      	mov	fp, r0
   2f5c2:	2800      	cmp	r0, #0
   2f5c4:	d0be      	beq.n	2f544 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   2f5c6:	f110 0f0c 	cmn.w	r0, #12
   2f5ca:	f47f af42 	bne.w	2f452 <bt_le_adv_start_legacy+0x36>
   2f5ce:	2e00      	cmp	r6, #0
   2f5d0:	f47f af3f 	bne.w	2f452 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2f5d4:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2f5d6:	0798      	lsls	r0, r3, #30
   2f5d8:	f53f af3b 	bmi.w	2f452 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2f5dc:	6862      	ldr	r2, [r4, #4]
   2f5de:	f082 0202 	eor.w	r2, r2, #2
   2f5e2:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   2f5e6:	f00b 0201 	and.w	r2, fp, #1
   2f5ea:	210d      	movs	r1, #13
   2f5ec:	4638      	mov	r0, r7
   2f5ee:	f01d feed 	bl	4d3cc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2f5f2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2f5f6:	425a      	negs	r2, r3
   2f5f8:	415a      	adcs	r2, r3
   2f5fa:	2107      	movs	r1, #7
   2f5fc:	4638      	mov	r0, r7
   2f5fe:	f01d fee5 	bl	4d3cc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2f602:	f1a9 0102 	sub.w	r1, r9, #2
   2f606:	424a      	negs	r2, r1
   2f608:	414a      	adcs	r2, r1
   2f60a:	4638      	mov	r0, r7
   2f60c:	2108      	movs	r1, #8
   2f60e:	f01d fedd 	bl	4d3cc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2f612:	6862      	ldr	r2, [r4, #4]
   2f614:	2109      	movs	r1, #9
   2f616:	f002 0201 	and.w	r2, r2, #1
   2f61a:	4638      	mov	r0, r7
   2f61c:	f01d fed6 	bl	4d3cc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2f620:	4642      	mov	r2, r8
   2f622:	210a      	movs	r1, #10
   2f624:	4638      	mov	r0, r7
   2f626:	f01d fed1 	bl	4d3cc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2f62a:	6862      	ldr	r2, [r4, #4]
   2f62c:	210c      	movs	r1, #12
   2f62e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2f632:	4638      	mov	r0, r7
   2f634:	f01d feca 	bl	4d3cc <atomic_set_bit_to>
	return 0;
   2f638:	f04f 0b00 	mov.w	fp, #0
   2f63c:	e709      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2f63e:	b108      	cbz	r0, 2f644 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   2f640:	f01e f878 	bl	4d734 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2f644:	2e00      	cmp	r6, #0
   2f646:	d1ce      	bne.n	2f5e6 <bt_le_adv_start_legacy+0x1ca>
   2f648:	e7c8      	b.n	2f5dc <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   2f64a:	f06f 0b0a 	mvn.w	fp, #10
   2f64e:	e700      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   2f650:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2f654:	e6fd      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   2f656:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2f65a:	e6fa      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
   2f65c:	4683      	mov	fp, r0
   2f65e:	e6f8      	b.n	2f452 <bt_le_adv_start_legacy+0x36>
   2f660:	2000010c 	.word	0x2000010c
   2f664:	20000040 	.word	0x20000040

0002f668 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2f668:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f66a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2f66c:	9a06      	ldr	r2, [sp, #24]
{
   2f66e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2f670:	e9cd 3200 	strd	r3, r2, [sp]
   2f674:	462b      	mov	r3, r5
   2f676:	460a      	mov	r2, r1
   2f678:	4601      	mov	r1, r0
   2f67a:	4811      	ldr	r0, [pc, #68]	; (2f6c0 <bt_le_adv_start+0x58>)
   2f67c:	f7ff fece 	bl	2f41c <bt_le_adv_start_legacy>
   2f680:	4621      	mov	r1, r4
   2f682:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2f684:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2f686:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2f68a:	429d      	cmp	r5, r3
   2f68c:	d102      	bne.n	2f694 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2f68e:	4630      	mov	r0, r6
   2f690:	b002      	add	sp, #8
   2f692:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2f694:	880a      	ldrh	r2, [r1, #0]
   2f696:	4282      	cmp	r2, r0
   2f698:	d104      	bne.n	2f6a4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2f69a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2f69c:	b112      	cbz	r2, 2f6a4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2f69e:	7812      	ldrb	r2, [r2, #0]
   2f6a0:	07d2      	lsls	r2, r2, #31
   2f6a2:	d402      	bmi.n	2f6aa <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2f6a4:	3301      	adds	r3, #1
   2f6a6:	3108      	adds	r1, #8
   2f6a8:	e7ef      	b.n	2f68a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2f6aa:	4906      	ldr	r1, [pc, #24]	; (2f6c4 <bt_le_adv_start+0x5c>)
   2f6ac:	4806      	ldr	r0, [pc, #24]	; (2f6c8 <bt_le_adv_start+0x60>)
   2f6ae:	f022 f96a 	bl	51986 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2f6b2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2f6b6:	2300      	movs	r3, #0
   2f6b8:	4803      	ldr	r0, [pc, #12]	; (2f6c8 <bt_le_adv_start+0x60>)
   2f6ba:	f019 fb01 	bl	48cc0 <k_work_reschedule>
   2f6be:	e7e6      	b.n	2f68e <bt_le_adv_start+0x26>
   2f6c0:	20000058 	.word	0x20000058
   2f6c4:	0004d55d 	.word	0x0004d55d
   2f6c8:	20000070 	.word	0x20000070

0002f6cc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2f6cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2f6ce:	4829      	ldr	r0, [pc, #164]	; (2f774 <bt_le_adv_stop+0xa8>)
   2f6d0:	f01d ff41 	bl	4d556 <bt_le_lim_adv_cancel_timeout>
   2f6d4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2f6d8:	4827      	ldr	r0, [pc, #156]	; (2f778 <bt_le_adv_stop+0xac>)
   2f6da:	f01d fe07 	bl	4d2ec <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f6de:	4826      	ldr	r0, [pc, #152]	; (2f778 <bt_le_adv_stop+0xac>)
   2f6e0:	f01d fdfe 	bl	4d2e0 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2f6e4:	0641      	lsls	r1, r0, #25
   2f6e6:	d403      	bmi.n	2f6f0 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   2f6e8:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2f6ea:	4620      	mov	r0, r4
   2f6ec:	b004      	add	sp, #16
   2f6ee:	bd10      	pop	{r4, pc}
   2f6f0:	4821      	ldr	r0, [pc, #132]	; (2f778 <bt_le_adv_stop+0xac>)
   2f6f2:	f01d fdf5 	bl	4d2e0 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2f6f6:	0582      	lsls	r2, r0, #22
   2f6f8:	d521      	bpl.n	2f73e <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2f6fa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2f6fc:	481f      	ldr	r0, [pc, #124]	; (2f77c <bt_le_adv_stop+0xb0>)
   2f6fe:	9300      	str	r3, [sp, #0]
   2f700:	2207      	movs	r2, #7
   2f702:	4669      	mov	r1, sp
   2f704:	f8cd 3003 	str.w	r3, [sp, #3]
   2f708:	f01c ffc4 	bl	4c694 <memcmp>
   2f70c:	4b1c      	ldr	r3, [pc, #112]	; (2f780 <bt_le_adv_stop+0xb4>)
   2f70e:	bb60      	cbnz	r0, 2f76a <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2f710:	4a1c      	ldr	r2, [pc, #112]	; (2f784 <bt_le_adv_stop+0xb8>)
   2f712:	8891      	ldrh	r1, [r2, #4]
   2f714:	6810      	ldr	r0, [r2, #0]
   2f716:	7992      	ldrb	r2, [r2, #6]
   2f718:	f8ad 100c 	strh.w	r1, [sp, #12]
   2f71c:	f88d 200e 	strb.w	r2, [sp, #14]
   2f720:	9002      	str	r0, [sp, #8]
   2f722:	2204      	movs	r2, #4
   2f724:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f726:	7e18      	ldrb	r0, [r3, #24]
   2f728:	f000 ff66 	bl	305f8 <bt_conn_lookup_state_le>
   2f72c:	4604      	mov	r4, r0
	if (conn) {
   2f72e:	b130      	cbz	r0, 2f73e <bt_le_adv_stop+0x72>
		conn->err = status;
   2f730:	2100      	movs	r1, #0
   2f732:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f734:	f000 fd3a 	bl	301ac <bt_conn_set_state>
		bt_conn_unref(conn);
   2f738:	4620      	mov	r0, r4
   2f73a:	f01d fffb 	bl	4d734 <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
   2f73e:	480d      	ldr	r0, [pc, #52]	; (2f774 <bt_le_adv_stop+0xa8>)
   2f740:	2100      	movs	r1, #0
   2f742:	f01d fee1 	bl	4d508 <bt_le_adv_set_enable_legacy>
		if (err) {
   2f746:	4604      	mov	r4, r0
   2f748:	2800      	cmp	r0, #0
   2f74a:	d1ce      	bne.n	2f6ea <bt_le_adv_stop+0x1e>
   2f74c:	480e      	ldr	r0, [pc, #56]	; (2f788 <bt_le_adv_stop+0xbc>)
   2f74e:	f01d fdc7 	bl	4d2e0 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f752:	0683      	lsls	r3, r0, #26
   2f754:	d5c8      	bpl.n	2f6e8 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2f756:	4620      	mov	r0, r4
   2f758:	f01d ff11 	bl	4d57e <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   2f75c:	4620      	mov	r0, r4
   2f75e:	f01d fd71 	bl	4d244 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2f762:	2001      	movs	r0, #1
   2f764:	f01d ff0b 	bl	4d57e <bt_le_scan_set_enable>
   2f768:	e7bf      	b.n	2f6ea <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f76a:	2205      	movs	r2, #5
   2f76c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2f770:	e7d9      	b.n	2f726 <bt_le_adv_stop+0x5a>
   2f772:	bf00      	nop
   2f774:	20000058 	.word	0x20000058
   2f778:	20000068 	.word	0x20000068
   2f77c:	20000061 	.word	0x20000061
   2f780:	20000040 	.word	0x20000040
   2f784:	00052b17 	.word	0x00052b17
   2f788:	2000010c 	.word	0x2000010c

0002f78c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2f78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f78e:	481e      	ldr	r0, [pc, #120]	; (2f808 <bt_le_adv_resume+0x7c>)
   2f790:	4c1d      	ldr	r4, [pc, #116]	; (2f808 <bt_le_adv_resume+0x7c>)
   2f792:	f01d fda5 	bl	4d2e0 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2f796:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   2f79a:	d032      	beq.n	2f802 <bt_le_adv_resume+0x76>
   2f79c:	4620      	mov	r0, r4
   2f79e:	f01d fd9f 	bl	4d2e0 <atomic_get>
   2f7a2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f7a4:	f3c0 1580 	ubfx	r5, r0, #6, #1
   2f7a8:	d42b      	bmi.n	2f802 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f7aa:	4620      	mov	r0, r4
   2f7ac:	f01d fd98 	bl	4d2e0 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2f7b0:	0583      	lsls	r3, r0, #22
   2f7b2:	d526      	bpl.n	2f802 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2f7b4:	a901      	add	r1, sp, #4
   2f7b6:	f1a4 0010 	sub.w	r0, r4, #16
   2f7ba:	f7ff fde1 	bl	2f380 <le_adv_start_add_conn>
	if (err) {
   2f7be:	bb00      	cbnz	r0, 2f802 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2f7c0:	2101      	movs	r1, #1
   2f7c2:	f1a4 0010 	sub.w	r0, r4, #16
   2f7c6:	f01d fe9f 	bl	4d508 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   2f7ca:	b150      	cbz	r0, 2f7e2 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f7cc:	4629      	mov	r1, r5
   2f7ce:	9801      	ldr	r0, [sp, #4]
   2f7d0:	f000 fcec 	bl	301ac <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f7d4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2f7d8:	4620      	mov	r0, r4
   2f7da:	f01d fd87 	bl	4d2ec <atomic_and>
	return (old & mask) != 0;
   2f7de:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2f7e2:	9801      	ldr	r0, [sp, #4]
   2f7e4:	f01d ffa6 	bl	4d734 <bt_conn_unref>
	if (persist_paused) {
   2f7e8:	b15d      	cbz	r5, 2f802 <bt_le_adv_resume+0x76>
   2f7ea:	f3bf 8f5b 	dmb	ish
   2f7ee:	e854 3f00 	ldrex	r3, [r4]
   2f7f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2f7f6:	e844 3200 	strex	r2, r3, [r4]
   2f7fa:	2a00      	cmp	r2, #0
   2f7fc:	d1f7      	bne.n	2f7ee <bt_le_adv_resume+0x62>
   2f7fe:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2f802:	b003      	add	sp, #12
   2f804:	bd30      	pop	{r4, r5, pc}
   2f806:	bf00      	nop
   2f808:	20000068 	.word	0x20000068

0002f80c <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f80c:	4b03      	ldr	r3, [pc, #12]	; (2f81c <atomic_get.constprop.0+0x10>)
   2f80e:	f3bf 8f5b 	dmb	ish
   2f812:	6818      	ldr	r0, [r3, #0]
   2f814:	f3bf 8f5b 	dmb	ish
}
   2f818:	4770      	bx	lr
   2f81a:	bf00      	nop
   2f81c:	2000010c 	.word	0x2000010c

0002f820 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   2f820:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f822:	2102      	movs	r1, #2
{
   2f824:	b087      	sub	sp, #28
   2f826:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f828:	f242 000c 	movw	r0, #8204	; 0x200c
   2f82c:	f7fe fd92 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2f830:	4605      	mov	r5, r0
   2f832:	b308      	cbz	r0, 2f878 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   2f834:	2102      	movs	r1, #2
   2f836:	3008      	adds	r0, #8
   2f838:	f020 ff66 	bl	50708 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   2f83c:	2c01      	cmp	r4, #1
   2f83e:	4602      	mov	r2, r0
   2f840:	d117      	bne.n	2f872 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f842:	f7ff ffe3 	bl	2f80c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f846:	f3c0 2000 	ubfx	r0, r0, #8, #1
   2f84a:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f84c:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   2f84e:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f850:	425c      	negs	r4, r3
   2f852:	415c      	adcs	r4, r3
   2f854:	4a0a      	ldr	r2, [pc, #40]	; (2f880 <bt_le_scan_set_enable_legacy+0x60>)
   2f856:	9400      	str	r4, [sp, #0]
   2f858:	a903      	add	r1, sp, #12
   2f85a:	4628      	mov	r0, r5
   2f85c:	2305      	movs	r3, #5
   2f85e:	f7fe fd67 	bl	2e330 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   2f862:	2200      	movs	r2, #0
   2f864:	4629      	mov	r1, r5
   2f866:	f242 000c 	movw	r0, #8204	; 0x200c
   2f86a:	f7fe fdcf 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   2f86e:	b007      	add	sp, #28
   2f870:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   2f872:	2300      	movs	r3, #0
   2f874:	7043      	strb	r3, [r0, #1]
   2f876:	e7e9      	b.n	2f84c <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   2f878:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f87c:	e7f7      	b.n	2f86e <bt_le_scan_set_enable_legacy+0x4e>
   2f87e:	bf00      	nop
   2f880:	2000010c 	.word	0x2000010c

0002f884 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   2f884:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f886:	4605      	mov	r5, r0
   2f888:	4614      	mov	r4, r2
   2f88a:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   2f88c:	2207      	movs	r2, #7
   2f88e:	2100      	movs	r1, #0
   2f890:	4668      	mov	r0, sp
   2f892:	f01c ff1b 	bl	4c6cc <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   2f896:	2300      	movs	r3, #0
   2f898:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f89c:	1e6b      	subs	r3, r5, #1
   2f89e:	4258      	negs	r0, r3
   2f8a0:	f10d 0105 	add.w	r1, sp, #5
   2f8a4:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   2f8a6:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   2f8aa:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   2f8ae:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f8b2:	f7ff fc9d 	bl	2f1f0 <bt_id_set_scan_own_addr>
	if (err) {
   2f8b6:	4604      	mov	r4, r0
   2f8b8:	bb38      	cbnz	r0, 2f90a <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   2f8ba:	2107      	movs	r1, #7
   2f8bc:	f242 000b 	movw	r0, #8203	; 0x200b
   2f8c0:	f7fe fd48 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2f8c4:	4606      	mov	r6, r0
   2f8c6:	b348      	cbz	r0, 2f91c <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f8c8:	2207      	movs	r2, #7
   2f8ca:	4669      	mov	r1, sp
   2f8cc:	3008      	adds	r0, #8
   2f8ce:	f020 ff21 	bl	50714 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   2f8d2:	4622      	mov	r2, r4
   2f8d4:	4631      	mov	r1, r6
   2f8d6:	f242 000b 	movw	r0, #8203	; 0x200b
   2f8da:	f7fe fd97 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2f8de:	4604      	mov	r4, r0
   2f8e0:	b998      	cbnz	r0, 2f90a <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   2f8e2:	2001      	movs	r0, #1
   2f8e4:	f7ff ff9c 	bl	2f820 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   2f8e8:	4604      	mov	r4, r0
   2f8ea:	b970      	cbnz	r0, 2f90a <start_le_scan_legacy+0x86>
	if (val) {
   2f8ec:	2d01      	cmp	r5, #1
   2f8ee:	d10f      	bne.n	2f910 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f8f0:	f3bf 8f5b 	dmb	ish
   2f8f4:	4b0b      	ldr	r3, [pc, #44]	; (2f924 <start_le_scan_legacy+0xa0>)
   2f8f6:	e853 2f00 	ldrex	r2, [r3]
   2f8fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2f8fe:	e843 2100 	strex	r1, r2, [r3]
   2f902:	2900      	cmp	r1, #0
   2f904:	d1f7      	bne.n	2f8f6 <start_le_scan_legacy+0x72>
   2f906:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   2f90a:	4620      	mov	r0, r4
   2f90c:	b002      	add	sp, #8
   2f90e:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f910:	f06f 0180 	mvn.w	r1, #128	; 0x80
   2f914:	4803      	ldr	r0, [pc, #12]	; (2f924 <start_le_scan_legacy+0xa0>)
   2f916:	f01d fe23 	bl	4d560 <atomic_and>
   2f91a:	e7f6      	b.n	2f90a <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   2f91c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f920:	e7f3      	b.n	2f90a <start_le_scan_legacy+0x86>
   2f922:	bf00      	nop
   2f924:	2000010c 	.word	0x2000010c

0002f928 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   2f928:	4b01      	ldr	r3, [pc, #4]	; (2f930 <bt_scan_reset+0x8>)
   2f92a:	2200      	movs	r2, #0
   2f92c:	601a      	str	r2, [r3, #0]
}
   2f92e:	4770      	bx	lr
   2f930:	20004974 	.word	0x20004974

0002f934 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   2f934:	b538      	push	{r3, r4, r5, lr}
   2f936:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f938:	f7ff ff68 	bl	2f80c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f93c:	0641      	lsls	r1, r0, #25
   2f93e:	f3c0 1280 	ubfx	r2, r0, #6, #1
   2f942:	d501      	bpl.n	2f948 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   2f944:	2000      	movs	r0, #0
   2f946:	e031      	b.n	2f9ac <bt_le_scan_update+0x78>
   2f948:	f7ff ff60 	bl	2f80c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f94c:	0683      	lsls	r3, r0, #26
   2f94e:	d428      	bmi.n	2f9a2 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f950:	2100      	movs	r1, #0
   2f952:	2206      	movs	r2, #6
   2f954:	4608      	mov	r0, r1
   2f956:	f000 fe4f 	bl	305f8 <bt_conn_lookup_state_le>
		if (conn) {
   2f95a:	4604      	mov	r4, r0
   2f95c:	bb38      	cbnz	r0, 2f9ae <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f95e:	2202      	movs	r2, #2
   2f960:	4601      	mov	r1, r0
   2f962:	f000 fe49 	bl	305f8 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   2f966:	2800      	cmp	r0, #0
   2f968:	d0ec      	beq.n	2f944 <bt_le_scan_update+0x10>
   2f96a:	f3bf 8f5b 	dmb	ish
   2f96e:	4b11      	ldr	r3, [pc, #68]	; (2f9b4 <bt_le_scan_update+0x80>)
   2f970:	e853 2f00 	ldrex	r2, [r3]
   2f974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2f978:	e843 2100 	strex	r1, r2, [r3]
   2f97c:	2900      	cmp	r1, #0
   2f97e:	d1f7      	bne.n	2f970 <bt_le_scan_update+0x3c>
   2f980:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   2f984:	f01d fed6 	bl	4d734 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   2f988:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f98a:	4620      	mov	r0, r4
   2f98c:	bf18      	it	ne
   2f98e:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   2f990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f994:	bf0a      	itet	eq
   2f996:	2212      	moveq	r2, #18
   2f998:	2160      	movne	r1, #96	; 0x60
   2f99a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   2f99e:	f7ff bf71 	b.w	2f884 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   2f9a2:	4610      	mov	r0, r2
   2f9a4:	f7ff ff3c 	bl	2f820 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f9a8:	2800      	cmp	r0, #0
   2f9aa:	d0d1      	beq.n	2f950 <bt_le_scan_update+0x1c>
}
   2f9ac:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   2f9ae:	f01d fec1 	bl	4d734 <bt_conn_unref>
   2f9b2:	e7c7      	b.n	2f944 <bt_le_scan_update+0x10>
   2f9b4:	2000010c 	.word	0x2000010c

0002f9b8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   2f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   2f9bc:	f100 0808 	add.w	r8, r0, #8
   2f9c0:	b08d      	sub	sp, #52	; 0x34
   2f9c2:	4604      	mov	r4, r0
   2f9c4:	4640      	mov	r0, r8
   2f9c6:	f020 fed8 	bl	5077a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   2f9ca:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 2fb78 <bt_hci_le_adv_report+0x1c0>
   2f9ce:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   2f9d0:	b916      	cbnz	r6, 2f9d8 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   2f9d2:	b00d      	add	sp, #52	; 0x34
   2f9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   2f9d8:	89a3      	ldrh	r3, [r4, #12]
   2f9da:	2b08      	cmp	r3, #8
   2f9dc:	d9f9      	bls.n	2f9d2 <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f9de:	2109      	movs	r1, #9
   2f9e0:	4640      	mov	r0, r8
   2f9e2:	f020 fec2 	bl	5076a <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   2f9e6:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   2f9e8:	237f      	movs	r3, #127	; 0x7f
   2f9ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   2f9ee:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f9f0:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   2f9f2:	7a5b      	ldrb	r3, [r3, #9]
   2f9f4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   2f9f8:	23ff      	movs	r3, #255	; 0xff
   2f9fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   2f9fe:	2300      	movs	r3, #0
   2fa00:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2fa04:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   2fa08:	7802      	ldrb	r2, [r0, #0]
   2fa0a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   2fa0e:	2a04      	cmp	r2, #4
   2fa10:	bf9c      	itt	ls
   2fa12:	4b5a      	ldrls	r3, [pc, #360]	; (2fb7c <bt_hci_le_adv_report+0x1c4>)
   2fa14:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   2fa16:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2fa1a:	b28b      	uxth	r3, r1
   2fa1c:	4605      	mov	r5, r0
   2fa1e:	f100 0901 	add.w	r9, r0, #1
   2fa22:	9301      	str	r3, [sp, #4]
   2fa24:	f7ff fef2 	bl	2f80c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2fa28:	0647      	lsls	r7, r0, #25
   2fa2a:	d50b      	bpl.n	2fa44 <bt_hci_le_adv_report+0x8c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2fa2c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2fa30:	0758      	lsls	r0, r3, #29
   2fa32:	d507      	bpl.n	2fa44 <bt_hci_le_adv_report+0x8c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   2fa34:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   2fa36:	4640      	mov	r0, r8
   2fa38:	3101      	adds	r1, #1
   2fa3a:	3e01      	subs	r6, #1
   2fa3c:	f020 fe8d 	bl	5075a <net_buf_simple_pull>
   2fa40:	b2f6      	uxtb	r6, r6
   2fa42:	e7c5      	b.n	2f9d0 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   2fa44:	786b      	ldrb	r3, [r5, #1]
   2fa46:	1e9a      	subs	r2, r3, #2
   2fa48:	2a01      	cmp	r2, #1
   2fa4a:	d848      	bhi.n	2fade <bt_hci_le_adv_report+0x126>
	memcpy(dst, src, sizeof(*dst));
   2fa4c:	2207      	movs	r2, #7
   2fa4e:	4649      	mov	r1, r9
   2fa50:	a804      	add	r0, sp, #16
   2fa52:	f01c fe30 	bl	4c6b6 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2fa56:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2fa5a:	3b02      	subs	r3, #2
   2fa5c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   2fa60:	ab04      	add	r3, sp, #16
   2fa62:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   2fa64:	f8da 3000 	ldr.w	r3, [sl]
   2fa68:	b1a3      	cbz	r3, 2fa94 <bt_hci_le_adv_report+0xdc>
	state->offset = net_buf_simple_headroom(buf);
   2fa6a:	4640      	mov	r0, r8
   2fa6c:	f020 fe95 	bl	5079a <net_buf_simple_headroom>
		buf->len = len;
   2fa70:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   2fa72:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2fa74:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
   2fa78:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2fa7a:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2fa7c:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   2fa80:	f8da c000 	ldr.w	ip, [sl]
   2fa84:	a804      	add	r0, sp, #16
   2fa86:	4643      	mov	r3, r8
   2fa88:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   2fa8a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2fa8c:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2fa8e:	fa10 f08b 	uxtah	r0, r0, fp
   2fa92:	60a0      	str	r0, [r4, #8]
	return list->head;
   2fa94:	4b3a      	ldr	r3, [pc, #232]	; (2fb80 <bt_hci_le_adv_report+0x1c8>)
   2fa96:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2fa98:	2a00      	cmp	r2, #0
   2fa9a:	d033      	beq.n	2fb04 <bt_hci_le_adv_report+0x14c>
	return node->next;
   2fa9c:	f852 7908 	ldr.w	r7, [r2], #-8
   2faa0:	b107      	cbz	r7, 2faa4 <bt_hci_le_adv_report+0xec>
   2faa2:	3f08      	subs	r7, #8
		if (listener->recv) {
   2faa4:	6813      	ldr	r3, [r2, #0]
   2faa6:	9203      	str	r2, [sp, #12]
   2faa8:	b193      	cbz	r3, 2fad0 <bt_hci_le_adv_report+0x118>
	state->offset = net_buf_simple_headroom(buf);
   2faaa:	4640      	mov	r0, r8
   2faac:	f020 fe75 	bl	5079a <net_buf_simple_headroom>
	state->len = buf->len;
   2fab0:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   2fab2:	9a03      	ldr	r2, [sp, #12]
   2fab4:	9302      	str	r3, [sp, #8]
			buf->len = len;
   2fab6:	9b01      	ldr	r3, [sp, #4]
   2fab8:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2faba:	4683      	mov	fp, r0
			listener->recv(info, buf);
   2fabc:	6812      	ldr	r2, [r2, #0]
   2fabe:	a808      	add	r0, sp, #32
   2fac0:	4641      	mov	r1, r8
   2fac2:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   2fac4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2fac6:	9b02      	ldr	r3, [sp, #8]
   2fac8:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2faca:	fa10 f08b 	uxtah	r0, r0, fp
   2face:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2fad0:	b1c7      	cbz	r7, 2fb04 <bt_hci_le_adv_report+0x14c>
   2fad2:	68bb      	ldr	r3, [r7, #8]
   2fad4:	b103      	cbz	r3, 2fad8 <bt_hci_le_adv_report+0x120>
   2fad6:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   2fad8:	463a      	mov	r2, r7
   2fada:	461f      	mov	r7, r3
   2fadc:	e7e2      	b.n	2faa4 <bt_hci_le_adv_report+0xec>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   2fade:	2bff      	cmp	r3, #255	; 0xff
   2fae0:	d109      	bne.n	2faf6 <bt_hci_le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   2fae2:	2300      	movs	r3, #0
   2fae4:	9306      	str	r3, [sp, #24]
   2fae6:	2207      	movs	r2, #7
   2fae8:	f8cd 301b 	str.w	r3, [sp, #27]
   2faec:	a906      	add	r1, sp, #24
   2faee:	a804      	add	r0, sp, #16
   2faf0:	f01c fde1 	bl	4c6b6 <memcpy>
}
   2faf4:	e7b4      	b.n	2fa60 <bt_hci_le_adv_report+0xa8>
		bt_addr_le_copy(&id_addr,
   2faf6:	4649      	mov	r1, r9
   2faf8:	2000      	movs	r0, #0
   2fafa:	f01d fb9b 	bl	4d234 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2fafe:	2207      	movs	r2, #7
   2fb00:	4601      	mov	r1, r0
   2fb02:	e7f4      	b.n	2faee <bt_hci_le_adv_report+0x136>
	check_pending_conn(&id_addr, addr, info->adv_props);
   2fb04:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2fb08:	f7ff fe80 	bl	2f80c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2fb0c:	0641      	lsls	r1, r0, #25
   2fb0e:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2fb12:	d48f      	bmi.n	2fa34 <bt_hci_le_adv_report+0x7c>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   2fb14:	07d2      	lsls	r2, r2, #31
   2fb16:	d58d      	bpl.n	2fa34 <bt_hci_le_adv_report+0x7c>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   2fb18:	2202      	movs	r2, #2
   2fb1a:	a904      	add	r1, sp, #16
   2fb1c:	4658      	mov	r0, fp
   2fb1e:	f000 fd6b 	bl	305f8 <bt_conn_lookup_state_le>
	if (!conn) {
   2fb22:	4607      	mov	r7, r0
   2fb24:	2800      	cmp	r0, #0
   2fb26:	d085      	beq.n	2fa34 <bt_hci_le_adv_report+0x7c>
   2fb28:	f7ff fe70 	bl	2f80c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2fb2c:	0683      	lsls	r3, r0, #26
   2fb2e:	d411      	bmi.n	2fb54 <bt_hci_le_adv_report+0x19c>
   2fb30:	2207      	movs	r2, #7
   2fb32:	4649      	mov	r1, r9
   2fb34:	f107 0096 	add.w	r0, r7, #150	; 0x96
   2fb38:	f01c fdbd 	bl	4c6b6 <memcpy>
	if (bt_le_create_conn(conn)) {
   2fb3c:	4638      	mov	r0, r7
   2fb3e:	f01d f918 	bl	4cd72 <bt_le_create_conn>
   2fb42:	b960      	cbnz	r0, 2fb5e <bt_hci_le_adv_report+0x1a6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   2fb44:	4638      	mov	r0, r7
   2fb46:	2106      	movs	r1, #6
   2fb48:	f000 fb30 	bl	301ac <bt_conn_set_state>
	bt_conn_unref(conn);
   2fb4c:	4638      	mov	r0, r7
   2fb4e:	f01d fdf1 	bl	4d734 <bt_conn_unref>
	return;
   2fb52:	e76f      	b.n	2fa34 <bt_hci_le_adv_report+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   2fb54:	4658      	mov	r0, fp
   2fb56:	f7ff fe63 	bl	2f820 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2fb5a:	2800      	cmp	r0, #0
   2fb5c:	d0e8      	beq.n	2fb30 <bt_hci_le_adv_report+0x178>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   2fb5e:	231f      	movs	r3, #31
   2fb60:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2fb62:	2100      	movs	r1, #0
   2fb64:	4638      	mov	r0, r7
   2fb66:	f000 fb21 	bl	301ac <bt_conn_set_state>
	bt_conn_unref(conn);
   2fb6a:	4638      	mov	r0, r7
   2fb6c:	f01d fde2 	bl	4d734 <bt_conn_unref>
	bt_le_scan_update(false);
   2fb70:	2000      	movs	r0, #0
   2fb72:	f7ff fedf 	bl	2f934 <bt_le_scan_update>
   2fb76:	e75d      	b.n	2fa34 <bt_hci_le_adv_report+0x7c>
   2fb78:	20004974 	.word	0x20004974
   2fb7c:	00056a49 	.word	0x00056a49
   2fb80:	2000496c 	.word	0x2000496c

0002fb84 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   2fb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fb88:	4605      	mov	r5, r0
   2fb8a:	f7ff fe3f 	bl	2f80c <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fb8e:	0780      	lsls	r0, r0, #30
{
   2fb90:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fb92:	d56f      	bpl.n	2fc74 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   2fb94:	782a      	ldrb	r2, [r5, #0]
   2fb96:	2a01      	cmp	r2, #1
   2fb98:	d904      	bls.n	2fba4 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   2fb9a:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   2fb9e:	4620      	mov	r0, r4
   2fba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   2fba4:	686b      	ldr	r3, [r5, #4]
   2fba6:	f033 030f 	bics.w	r3, r3, #15
   2fbaa:	d1f6      	bne.n	2fb9a <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   2fbac:	8928      	ldrh	r0, [r5, #8]
   2fbae:	1f03      	subs	r3, r0, #4
   2fbb0:	b29b      	uxth	r3, r3
   2fbb2:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   2fbb6:	42a3      	cmp	r3, r4
   2fbb8:	d8ef      	bhi.n	2fb9a <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   2fbba:	8969      	ldrh	r1, [r5, #10]
   2fbbc:	1f0b      	subs	r3, r1, #4
   2fbbe:	b29b      	uxth	r3, r3
   2fbc0:	42a3      	cmp	r3, r4
   2fbc2:	d8ea      	bhi.n	2fb9a <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   2fbc4:	4288      	cmp	r0, r1
   2fbc6:	d3e8      	bcc.n	2fb9a <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2fbc8:	b99a      	cbnz	r2, 2fbf2 <bt_le_scan_start+0x6e>
   2fbca:	f3bf 8f5b 	dmb	ish
   2fbce:	4e2b      	ldr	r6, [pc, #172]	; (2fc7c <bt_le_scan_start+0xf8>)
   2fbd0:	e856 0f00 	ldrex	r0, [r6]
   2fbd4:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   2fbd8:	e846 3200 	strex	r2, r3, [r6]
   2fbdc:	2a00      	cmp	r2, #0
   2fbde:	d1f7      	bne.n	2fbd0 <bt_le_scan_start+0x4c>
   2fbe0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2fbe4:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   2fbe8:	46b0      	mov	r8, r6
   2fbea:	d007      	beq.n	2fbfc <bt_le_scan_start+0x78>
		return -EALREADY;
   2fbec:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2fbf0:	e7d5      	b.n	2fb9e <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2fbf2:	f01d fb4b 	bl	4d28c <bt_id_scan_random_addr_check>
   2fbf6:	2800      	cmp	r0, #0
   2fbf8:	d1e7      	bne.n	2fbca <bt_le_scan_start+0x46>
   2fbfa:	e7ce      	b.n	2fb9a <bt_le_scan_start+0x16>
   2fbfc:	f7ff fe06 	bl	2f80c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2fc00:	0681      	lsls	r1, r0, #26
   2fc02:	d50a      	bpl.n	2fc1a <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   2fc04:	4610      	mov	r0, r2
   2fc06:	f7ff fe0b 	bl	2f820 <bt_le_scan_set_enable_legacy>
		if (err) {
   2fc0a:	4604      	mov	r4, r0
   2fc0c:	b128      	cbz	r0, 2fc1a <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fc0e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fc12:	4630      	mov	r0, r6
   2fc14:	f01d fca4 	bl	4d560 <atomic_and>
		return err;
   2fc18:	e7c1      	b.n	2fb9e <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   2fc1a:	686b      	ldr	r3, [r5, #4]
	if (val) {
   2fc1c:	07db      	lsls	r3, r3, #31
   2fc1e:	d515      	bpl.n	2fc4c <bt_le_scan_start+0xc8>
   2fc20:	f3bf 8f5b 	dmb	ish
   2fc24:	e858 3f00 	ldrex	r3, [r8]
   2fc28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2fc2c:	e848 3200 	strex	r2, r3, [r8]
   2fc30:	2a00      	cmp	r2, #0
   2fc32:	d1f7      	bne.n	2fc24 <bt_le_scan_start+0xa0>
   2fc34:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   2fc38:	89ab      	ldrh	r3, [r5, #12]
   2fc3a:	b16b      	cbz	r3, 2fc58 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fc3c:	480f      	ldr	r0, [pc, #60]	; (2fc7c <bt_le_scan_start+0xf8>)
   2fc3e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fc42:	f01d fc8d 	bl	4d560 <atomic_and>
			return -ENOTSUP;
   2fc46:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2fc4a:	e7a8      	b.n	2fb9e <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fc4c:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2fc50:	480a      	ldr	r0, [pc, #40]	; (2fc7c <bt_le_scan_start+0xf8>)
   2fc52:	f01d fc85 	bl	4d560 <atomic_and>
   2fc56:	e7ef      	b.n	2fc38 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   2fc58:	896a      	ldrh	r2, [r5, #10]
   2fc5a:	8929      	ldrh	r1, [r5, #8]
   2fc5c:	7828      	ldrb	r0, [r5, #0]
   2fc5e:	f7ff fe11 	bl	2f884 <start_le_scan_legacy>
	if (err) {
   2fc62:	4604      	mov	r4, r0
   2fc64:	b118      	cbz	r0, 2fc6e <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fc66:	4805      	ldr	r0, [pc, #20]	; (2fc7c <bt_le_scan_start+0xf8>)
   2fc68:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fc6c:	e7d2      	b.n	2fc14 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   2fc6e:	4b04      	ldr	r3, [pc, #16]	; (2fc80 <bt_le_scan_start+0xfc>)
   2fc70:	601f      	str	r7, [r3, #0]
	return 0;
   2fc72:	e794      	b.n	2fb9e <bt_le_scan_start+0x1a>
		return -EAGAIN;
   2fc74:	f06f 040a 	mvn.w	r4, #10
   2fc78:	e791      	b.n	2fb9e <bt_le_scan_start+0x1a>
   2fc7a:	bf00      	nop
   2fc7c:	2000010c 	.word	0x2000010c
   2fc80:	20004974 	.word	0x20004974

0002fc84 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   2fc84:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fc86:	4808      	ldr	r0, [pc, #32]	; (2fca8 <bt_le_scan_stop+0x24>)
   2fc88:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fc8c:	f01d fc68 	bl	4d560 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2fc90:	0643      	lsls	r3, r0, #25
   2fc92:	d506      	bpl.n	2fca2 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   2fc94:	4b05      	ldr	r3, [pc, #20]	; (2fcac <bt_le_scan_stop+0x28>)
   2fc96:	2000      	movs	r0, #0
   2fc98:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   2fc9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   2fc9e:	f7ff be49 	b.w	2f934 <bt_le_scan_update>
}
   2fca2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2fca6:	bd08      	pop	{r3, pc}
   2fca8:	2000010c 	.word	0x2000010c
   2fcac:	20004974 	.word	0x20004974

0002fcb0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2fcb0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2fcb2:	4904      	ldr	r1, [pc, #16]	; (2fcc4 <bt_pub_key_is_debug+0x14>)
   2fcb4:	2240      	movs	r2, #64	; 0x40
   2fcb6:	f01c fced 	bl	4c694 <memcmp>
}
   2fcba:	fab0 f080 	clz	r0, r0
   2fcbe:	0940      	lsrs	r0, r0, #5
   2fcc0:	bd08      	pop	{r3, pc}
   2fcc2:	bf00      	nop
   2fcc4:	00056a4e 	.word	0x00056a4e

0002fcc8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2fcc8:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2fcca:	4b31      	ldr	r3, [pc, #196]	; (2fd90 <bt_pub_key_gen+0xc8>)
   2fccc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2fcd0:	f003 0306 	and.w	r3, r3, #6
   2fcd4:	2b06      	cmp	r3, #6
   2fcd6:	d152      	bne.n	2fd7e <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2fcd8:	2800      	cmp	r0, #0
   2fcda:	d053      	beq.n	2fd84 <bt_pub_key_gen+0xbc>
	return list->head;
   2fcdc:	4e2d      	ldr	r6, [pc, #180]	; (2fd94 <bt_pub_key_gen+0xcc>)
   2fcde:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fce0:	b132      	cbz	r2, 2fcf0 <bt_pub_key_gen+0x28>
   2fce2:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2fce4:	4298      	cmp	r0, r3
   2fce6:	d050      	beq.n	2fd8a <bt_pub_key_gen+0xc2>
	return node->next;
   2fce8:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fcea:	b10b      	cbz	r3, 2fcf0 <bt_pub_key_gen+0x28>
   2fcec:	3b04      	subs	r3, #4
   2fcee:	e7f9      	b.n	2fce4 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2fcf0:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2fcf2:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2fcf4:	1d03      	adds	r3, r0, #4
	list->head = node;
   2fcf6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2fcf8:	b902      	cbnz	r2, 2fcfc <bt_pub_key_gen+0x34>
	list->tail = node;
   2fcfa:	6073      	str	r3, [r6, #4]
   2fcfc:	4c26      	ldr	r4, [pc, #152]	; (2fd98 <bt_pub_key_gen+0xd0>)
   2fcfe:	f3bf 8f5b 	dmb	ish
   2fd02:	e854 2f00 	ldrex	r2, [r4]
   2fd06:	f042 0310 	orr.w	r3, r2, #16
   2fd0a:	e844 3100 	strex	r1, r3, [r4]
   2fd0e:	2900      	cmp	r1, #0
   2fd10:	d1f7      	bne.n	2fd02 <bt_pub_key_gen+0x3a>
   2fd12:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2fd16:	f012 0210 	ands.w	r2, r2, #16
   2fd1a:	d002      	beq.n	2fd22 <bt_pub_key_gen+0x5a>
		return 0;
   2fd1c:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   2fd1e:	4628      	mov	r0, r5
   2fd20:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fd22:	f3bf 8f5b 	dmb	ish
   2fd26:	e854 3f00 	ldrex	r3, [r4]
   2fd2a:	f023 0308 	bic.w	r3, r3, #8
   2fd2e:	e844 3100 	strex	r1, r3, [r4]
   2fd32:	2900      	cmp	r1, #0
   2fd34:	d1f7      	bne.n	2fd26 <bt_pub_key_gen+0x5e>
   2fd36:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2fd3a:	4611      	mov	r1, r2
   2fd3c:	f242 0025 	movw	r0, #8229	; 0x2025
   2fd40:	f7fe fb64 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2fd44:	4605      	mov	r5, r0
   2fd46:	2800      	cmp	r0, #0
   2fd48:	d0e8      	beq.n	2fd1c <bt_pub_key_gen+0x54>
   2fd4a:	f3bf 8f5b 	dmb	ish
   2fd4e:	e854 3f00 	ldrex	r3, [r4]
   2fd52:	f023 0310 	bic.w	r3, r3, #16
   2fd56:	e844 3200 	strex	r2, r3, [r4]
   2fd5a:	2a00      	cmp	r2, #0
   2fd5c:	d1f7      	bne.n	2fd4e <bt_pub_key_gen+0x86>
   2fd5e:	f3bf 8f5b 	dmb	ish
	return list->head;
   2fd62:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fd64:	b13c      	cbz	r4, 2fd76 <bt_pub_key_gen+0xae>
			if (cb->func) {
   2fd66:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fd6a:	3c04      	subs	r4, #4
			if (cb->func) {
   2fd6c:	b10b      	cbz	r3, 2fd72 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2fd6e:	2000      	movs	r0, #0
   2fd70:	4798      	blx	r3
	return node->next;
   2fd72:	6864      	ldr	r4, [r4, #4]
   2fd74:	e7f6      	b.n	2fd64 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2fd76:	2300      	movs	r3, #0
	list->tail = NULL;
   2fd78:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2fd7c:	e7cf      	b.n	2fd1e <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2fd7e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2fd82:	e7cc      	b.n	2fd1e <bt_pub_key_gen+0x56>
		return -EINVAL;
   2fd84:	f06f 0515 	mvn.w	r5, #21
   2fd88:	e7c9      	b.n	2fd1e <bt_pub_key_gen+0x56>
			return -EALREADY;
   2fd8a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2fd8e:	e7c6      	b.n	2fd1e <bt_pub_key_gen+0x56>
   2fd90:	20000040 	.word	0x20000040
   2fd94:	2000497c 	.word	0x2000497c
   2fd98:	2000010c 	.word	0x2000010c

0002fd9c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2fd9c:	4b05      	ldr	r3, [pc, #20]	; (2fdb4 <bt_pub_key_get+0x18>)
   2fd9e:	f3bf 8f5b 	dmb	ish
   2fda2:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2fda4:	4804      	ldr	r0, [pc, #16]	; (2fdb8 <bt_pub_key_get+0x1c>)
   2fda6:	f3bf 8f5b 	dmb	ish
		return pub_key;
   2fdaa:	f013 0f08 	tst.w	r3, #8
}
   2fdae:	bf08      	it	eq
   2fdb0:	2000      	moveq	r0, #0
   2fdb2:	4770      	bx	lr
   2fdb4:	2000010c 	.word	0x2000010c
   2fdb8:	20007747 	.word	0x20007747

0002fdbc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2fdbe:	4d1f      	ldr	r5, [pc, #124]	; (2fe3c <bt_dh_key_gen+0x80>)
   2fdc0:	682b      	ldr	r3, [r5, #0]
   2fdc2:	428b      	cmp	r3, r1
{
   2fdc4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2fdc6:	d032      	beq.n	2fe2e <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2fdc8:	b113      	cbz	r3, 2fdd0 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2fdca:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2fdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fdd0:	4b1b      	ldr	r3, [pc, #108]	; (2fe40 <bt_dh_key_gen+0x84>)
   2fdd2:	f3bf 8f5b 	dmb	ish
   2fdd6:	681a      	ldr	r2, [r3, #0]
   2fdd8:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2fddc:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2fde0:	06d2      	lsls	r2, r2, #27
   2fde2:	d4f2      	bmi.n	2fdca <bt_dh_key_gen+0xe>
   2fde4:	f3bf 8f5b 	dmb	ish
   2fde8:	681b      	ldr	r3, [r3, #0]
   2fdea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2fdee:	071b      	lsls	r3, r3, #28
   2fdf0:	d520      	bpl.n	2fe34 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2fdf2:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2fdf4:	f242 0026 	movw	r0, #8230	; 0x2026
   2fdf8:	2140      	movs	r1, #64	; 0x40
   2fdfa:	f7fe faab 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   2fdfe:	4604      	mov	r4, r0
   2fe00:	b190      	cbz	r0, 2fe28 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2fe02:	2140      	movs	r1, #64	; 0x40
   2fe04:	3008      	adds	r0, #8
   2fe06:	f020 fc7f 	bl	50708 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2fe0a:	2240      	movs	r2, #64	; 0x40
   2fe0c:	4631      	mov	r1, r6
   2fe0e:	f01c fc52 	bl	4c6b6 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2fe12:	463a      	mov	r2, r7
   2fe14:	4621      	mov	r1, r4
   2fe16:	f242 0026 	movw	r0, #8230	; 0x2026
   2fe1a:	f7fe faf7 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   2fe1e:	2800      	cmp	r0, #0
   2fe20:	d0d5      	beq.n	2fdce <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2fe22:	2300      	movs	r3, #0
   2fe24:	602b      	str	r3, [r5, #0]
		return err;
   2fe26:	e7d2      	b.n	2fdce <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2fe28:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fe2c:	e7f9      	b.n	2fe22 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2fe2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2fe32:	e7cc      	b.n	2fdce <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2fe34:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2fe38:	e7c9      	b.n	2fdce <bt_dh_key_gen+0x12>
   2fe3a:	bf00      	nop
   2fe3c:	20004978 	.word	0x20004978
   2fe40:	2000010c 	.word	0x2000010c

0002fe44 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fe46:	4c1b      	ldr	r4, [pc, #108]	; (2feb4 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2fe48:	6886      	ldr	r6, [r0, #8]
   2fe4a:	f3bf 8f5b 	dmb	ish
   2fe4e:	e854 3f00 	ldrex	r3, [r4]
   2fe52:	f023 0310 	bic.w	r3, r3, #16
   2fe56:	e844 3200 	strex	r2, r3, [r4]
   2fe5a:	2a00      	cmp	r2, #0
   2fe5c:	d1f7      	bne.n	2fe4e <bt_hci_evt_le_pkey_complete+0xa>
   2fe5e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2fe62:	7833      	ldrb	r3, [r6, #0]
   2fe64:	b983      	cbnz	r3, 2fe88 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2fe66:	4814      	ldr	r0, [pc, #80]	; (2feb8 <bt_hci_evt_le_pkey_complete+0x74>)
   2fe68:	2240      	movs	r2, #64	; 0x40
   2fe6a:	1c71      	adds	r1, r6, #1
   2fe6c:	f01c fc23 	bl	4c6b6 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2fe70:	f3bf 8f5b 	dmb	ish
   2fe74:	e854 3f00 	ldrex	r3, [r4]
   2fe78:	f043 0308 	orr.w	r3, r3, #8
   2fe7c:	e844 3200 	strex	r2, r3, [r4]
   2fe80:	2a00      	cmp	r2, #0
   2fe82:	d1f7      	bne.n	2fe74 <bt_hci_evt_le_pkey_complete+0x30>
   2fe84:	f3bf 8f5b 	dmb	ish
	return list->head;
   2fe88:	4d0c      	ldr	r5, [pc, #48]	; (2febc <bt_hci_evt_le_pkey_complete+0x78>)
   2fe8a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fe8c:	b16c      	cbz	r4, 2feaa <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2fe8e:	4f0a      	ldr	r7, [pc, #40]	; (2feb8 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fe90:	3c04      	subs	r4, #4
		if (cb->func) {
   2fe92:	6823      	ldr	r3, [r4, #0]
   2fe94:	b12b      	cbz	r3, 2fea2 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2fe96:	7832      	ldrb	r2, [r6, #0]
   2fe98:	2a00      	cmp	r2, #0
   2fe9a:	bf0c      	ite	eq
   2fe9c:	4638      	moveq	r0, r7
   2fe9e:	2000      	movne	r0, #0
   2fea0:	4798      	blx	r3
	return node->next;
   2fea2:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2fea4:	b10c      	cbz	r4, 2feaa <bt_hci_evt_le_pkey_complete+0x66>
   2fea6:	3c04      	subs	r4, #4
   2fea8:	e7f3      	b.n	2fe92 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2feaa:	2300      	movs	r3, #0
	list->tail = NULL;
   2feac:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2feb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2feb2:	bf00      	nop
   2feb4:	2000010c 	.word	0x2000010c
   2feb8:	20007747 	.word	0x20007747
   2febc:	2000497c 	.word	0x2000497c

0002fec0 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2fec0:	4905      	ldr	r1, [pc, #20]	; (2fed8 <bt_hci_evt_le_dhkey_complete+0x18>)
   2fec2:	680b      	ldr	r3, [r1, #0]
   2fec4:	b133      	cbz	r3, 2fed4 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2fec6:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2fec8:	2000      	movs	r0, #0
   2feca:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2fecc:	7811      	ldrb	r1, [r2, #0]
   2fece:	b901      	cbnz	r1, 2fed2 <bt_hci_evt_le_dhkey_complete+0x12>
   2fed0:	1c50      	adds	r0, r2, #1
   2fed2:	4718      	bx	r3
	}
}
   2fed4:	4770      	bx	lr
   2fed6:	bf00      	nop
   2fed8:	20004978 	.word	0x20004978

0002fedc <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2fedc:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2fede:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2fee2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2fee4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2fee6:	4801      	ldr	r0, [pc, #4]	; (2feec <tx_free+0x10>)
   2fee8:	f021 bc46 	b.w	51778 <k_queue_append>
   2feec:	200014fc 	.word	0x200014fc

0002fef0 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2fef0:	4b0e      	ldr	r3, [pc, #56]	; (2ff2c <notify_connected+0x3c>)
{
   2fef2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2fef4:	681d      	ldr	r5, [r3, #0]
{
   2fef6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2fef8:	b955      	cbnz	r5, 2ff10 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fefa:	4d0d      	ldr	r5, [pc, #52]	; (2ff30 <notify_connected+0x40>)
   2fefc:	4e0d      	ldr	r6, [pc, #52]	; (2ff34 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2fefe:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ff00:	42b5      	cmp	r5, r6
   2ff02:	d30c      	bcc.n	2ff1e <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2ff04:	b989      	cbnz	r1, 2ff2a <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2ff06:	4620      	mov	r0, r4
	}
}
   2ff08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2ff0c:	f002 bed2 	b.w	32cb4 <bt_gatt_connected>
		if (cb->connected) {
   2ff10:	682b      	ldr	r3, [r5, #0]
   2ff12:	b113      	cbz	r3, 2ff1a <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2ff14:	7b21      	ldrb	r1, [r4, #12]
   2ff16:	4620      	mov	r0, r4
   2ff18:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ff1a:	69ed      	ldr	r5, [r5, #28]
   2ff1c:	e7ec      	b.n	2fef8 <notify_connected+0x8>
		if (cb->connected) {
   2ff1e:	682b      	ldr	r3, [r5, #0]
   2ff20:	b10b      	cbz	r3, 2ff26 <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2ff22:	4620      	mov	r0, r4
   2ff24:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ff26:	3520      	adds	r5, #32
   2ff28:	e7e9      	b.n	2fefe <notify_connected+0xe>
}
   2ff2a:	bd70      	pop	{r4, r5, r6, pc}
   2ff2c:	20004988 	.word	0x20004988
   2ff30:	00052820 	.word	0x00052820
   2ff34:	00052820 	.word	0x00052820

0002ff38 <send_frag>:
{
   2ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2ff3c:	694d      	ldr	r5, [r1, #20]
{
   2ff3e:	4604      	mov	r4, r0
   2ff40:	460e      	mov	r6, r1
   2ff42:	4690      	mov	r8, r2
   2ff44:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   2ff46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ff4a:	483e      	ldr	r0, [pc, #248]	; (30044 <send_frag+0x10c>)
   2ff4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ff50:	f018 fcd4 	bl	488fc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2ff54:	7b63      	ldrb	r3, [r4, #13]
   2ff56:	2b07      	cmp	r3, #7
   2ff58:	d146      	bne.n	2ffe8 <send_frag+0xb0>
	__asm__ volatile(
   2ff5a:	f04f 0320 	mov.w	r3, #32
   2ff5e:	f3ef 8211 	mrs	r2, BASEPRI
   2ff62:	f383 8812 	msr	BASEPRI_MAX, r3
   2ff66:	f3bf 8f6f 	isb	sy
	if (tx) {
   2ff6a:	69a3      	ldr	r3, [r4, #24]
   2ff6c:	2d00      	cmp	r5, #0
   2ff6e:	d04d      	beq.n	3000c <send_frag+0xd4>
	parent->next = child;
   2ff70:	2100      	movs	r1, #0
   2ff72:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2ff74:	2b00      	cmp	r3, #0
   2ff76:	d146      	bne.n	30006 <send_frag+0xce>
	list->head = node;
   2ff78:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2ff7c:	f382 8811 	msr	BASEPRI, r2
   2ff80:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2ff84:	2104      	movs	r1, #4
   2ff86:	f106 0008 	add.w	r0, r6, #8
   2ff8a:	f020 fbde 	bl	5074a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2ff8e:	8823      	ldrh	r3, [r4, #0]
   2ff90:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   2ff94:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ff98:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2ff9a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ff9e:	3b04      	subs	r3, #4
   2ffa0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2ffa2:	2302      	movs	r3, #2
   2ffa4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2ffa6:	4630      	mov	r0, r6
   2ffa8:	f01d f84e 	bl	4d048 <bt_send>
	if (err) {
   2ffac:	2800      	cmp	r0, #0
   2ffae:	d047      	beq.n	30040 <send_frag+0x108>
	__asm__ volatile(
   2ffb0:	f04f 0320 	mov.w	r3, #32
   2ffb4:	f3ef 8011 	mrs	r0, BASEPRI
   2ffb8:	f383 8812 	msr	BASEPRI_MAX, r3
   2ffbc:	f3bf 8f6f 	isb	sy
		if (tx) {
   2ffc0:	2d00      	cmp	r5, #0
   2ffc2:	d037      	beq.n	30034 <send_frag+0xfc>
	return list->head;
   2ffc4:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ffc6:	2200      	movs	r2, #0
   2ffc8:	b153      	cbz	r3, 2ffe0 <send_frag+0xa8>
   2ffca:	429d      	cmp	r5, r3
   2ffcc:	d12f      	bne.n	3002e <send_frag+0xf6>
	return node->next;
   2ffce:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   2ffd0:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2ffd2:	bb3a      	cbnz	r2, 30024 <send_frag+0xec>
   2ffd4:	42a9      	cmp	r1, r5
	list->head = node;
   2ffd6:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2ffd8:	d100      	bne.n	2ffdc <send_frag+0xa4>
	list->tail = node;
   2ffda:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   2ffdc:	2300      	movs	r3, #0
   2ffde:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2ffe0:	f380 8811 	msr	BASEPRI, r0
   2ffe4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2ffe8:	4816      	ldr	r0, [pc, #88]	; (30044 <send_frag+0x10c>)
   2ffea:	f018 fc61 	bl	488b0 <z_impl_k_sem_give>
	if (tx) {
   2ffee:	b115      	cbz	r5, 2fff6 <send_frag+0xbe>
		tx_free(tx);
   2fff0:	4628      	mov	r0, r5
   2fff2:	f7ff ff73 	bl	2fedc <tx_free>
	if (always_consume) {
   2fff6:	b11f      	cbz	r7, 30000 <send_frag+0xc8>
		net_buf_unref(buf);
   2fff8:	4630      	mov	r0, r6
   2fffa:	f014 f85b 	bl	440b4 <net_buf_unref>
	return false;
   2fffe:	2700      	movs	r7, #0
}
   30000:	4638      	mov	r0, r7
   30002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30006:	601d      	str	r5, [r3, #0]
	list->tail = node;
   30008:	61a5      	str	r5, [r4, #24]
}
   3000a:	e7b7      	b.n	2ff7c <send_frag+0x44>
		if (tail_tx) {
   3000c:	b133      	cbz	r3, 3001c <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   3000e:	f103 090c 	add.w	r9, r3, #12
   30012:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   30014:	3301      	adds	r3, #1
   30016:	f8c9 3000 	str.w	r3, [r9]
   3001a:	e7af      	b.n	2ff7c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   3001c:	69e3      	ldr	r3, [r4, #28]
   3001e:	f104 091c 	add.w	r9, r4, #28
   30022:	e7f7      	b.n	30014 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   30024:	42a9      	cmp	r1, r5
	parent->next = child;
   30026:	6013      	str	r3, [r2, #0]
	list->tail = node;
   30028:	bf08      	it	eq
   3002a:	61a2      	streq	r2, [r4, #24]
}
   3002c:	e7d6      	b.n	2ffdc <send_frag+0xa4>
	return node->next;
   3002e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30030:	681b      	ldr	r3, [r3, #0]
   30032:	e7c9      	b.n	2ffc8 <send_frag+0x90>
			(*pending_no_cb)--;
   30034:	f8d9 3000 	ldr.w	r3, [r9]
   30038:	3b01      	subs	r3, #1
   3003a:	f8c9 3000 	str.w	r3, [r9]
   3003e:	e7cf      	b.n	2ffe0 <send_frag+0xa8>
	return true;
   30040:	2701      	movs	r7, #1
   30042:	e7dd      	b.n	30000 <send_frag+0xc8>
   30044:	20000140 	.word	0x20000140

00030048 <bt_conn_get_pkts>:
}
   30048:	4800      	ldr	r0, [pc, #0]	; (3004c <bt_conn_get_pkts+0x4>)
   3004a:	4770      	bx	lr
   3004c:	20000140 	.word	0x20000140

00030050 <bt_conn_new>:
{
   30050:	b538      	push	{r3, r4, r5, lr}
   30052:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   30054:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   30056:	2501      	movs	r5, #1
   30058:	428b      	cmp	r3, r1
   3005a:	d102      	bne.n	30062 <bt_conn_new+0x12>
		return NULL;
   3005c:	2400      	movs	r4, #0
}
   3005e:	4620      	mov	r0, r4
   30060:	bd38      	pop	{r3, r4, r5, pc}
   30062:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   30066:	f3bf 8f5b 	dmb	ish
   3006a:	e852 0f00 	ldrex	r0, [r2]
   3006e:	2800      	cmp	r0, #0
   30070:	d104      	bne.n	3007c <bt_conn_new+0x2c>
   30072:	e842 5c00 	strex	ip, r5, [r2]
   30076:	f1bc 0f00 	cmp.w	ip, #0
   3007a:	d1f6      	bne.n	3006a <bt_conn_new+0x1a>
   3007c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   30080:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   30084:	d002      	beq.n	3008c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   30086:	3301      	adds	r3, #1
   30088:	4604      	mov	r4, r0
   3008a:	e7e5      	b.n	30058 <bt_conn_new+0x8>
	if (!conn) {
   3008c:	2c00      	cmp	r4, #0
   3008e:	d0e6      	beq.n	3005e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   30090:	22bc      	movs	r2, #188	; 0xbc
   30092:	2100      	movs	r1, #0
   30094:	4620      	mov	r0, r4
   30096:	f01c fb19 	bl	4c6cc <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   3009a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3009e:	4904      	ldr	r1, [pc, #16]	; (300b0 <bt_conn_new+0x60>)
   300a0:	f021 fc71 	bl	51986 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   300a4:	4903      	ldr	r1, [pc, #12]	; (300b4 <bt_conn_new+0x64>)
   300a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   300aa:	f021 fc36 	bl	5191a <k_work_init>
	return conn;
   300ae:	e7d6      	b.n	3005e <bt_conn_new+0xe>
   300b0:	00030931 	.word	0x00030931
   300b4:	0004d611 	.word	0x0004d611

000300b8 <bt_conn_send_cb>:
{
   300b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   300ba:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   300bc:	7b43      	ldrb	r3, [r0, #13]
   300be:	2b07      	cmp	r3, #7
{
   300c0:	4604      	mov	r4, r0
   300c2:	460d      	mov	r5, r1
   300c4:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   300c6:	d114      	bne.n	300f2 <bt_conn_send_cb+0x3a>
	if (cb) {
   300c8:	b312      	cbz	r2, 30110 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   300ca:	f019 f8ef 	bl	492ac <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   300ce:	4b13      	ldr	r3, [pc, #76]	; (3011c <bt_conn_send_cb+0x64>)
   300d0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   300d2:	4813      	ldr	r0, [pc, #76]	; (30120 <bt_conn_send_cb+0x68>)
   300d4:	bf07      	ittee	eq
   300d6:	2200      	moveq	r2, #0
   300d8:	2300      	moveq	r3, #0
   300da:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   300de:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   300e2:	f018 fbb1 	bl	48848 <z_impl_k_queue_get>
		if (!tx) {
   300e6:	b1a8      	cbz	r0, 30114 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   300e8:	7b63      	ldrb	r3, [r4, #13]
   300ea:	2b07      	cmp	r3, #7
   300ec:	d004      	beq.n	300f8 <bt_conn_send_cb+0x40>
			tx_free(tx);
   300ee:	f7ff fef5 	bl	2fedc <tx_free>
		return -ENOTCONN;
   300f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   300f6:	e00a      	b.n	3010e <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   300f8:	2300      	movs	r3, #0
		tx->user_data = user_data;
   300fa:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   300fe:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   30100:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   30102:	f104 0038 	add.w	r0, r4, #56	; 0x38
   30106:	4629      	mov	r1, r5
   30108:	f020 fabf 	bl	5068a <net_buf_put>
	return 0;
   3010c:	2000      	movs	r0, #0
}
   3010e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   30110:	614a      	str	r2, [r1, #20]
   30112:	e7f6      	b.n	30102 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   30114:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30118:	e7f9      	b.n	3010e <bt_conn_send_cb+0x56>
   3011a:	bf00      	nop
   3011c:	20004310 	.word	0x20004310
   30120:	200014fc 	.word	0x200014fc

00030124 <bt_conn_prepare_events>:
{
   30124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn_change.signaled = 0U;
   30128:	4b1a      	ldr	r3, [pc, #104]	; (30194 <bt_conn_prepare_events+0x70>)
   3012a:	4c1b      	ldr	r4, [pc, #108]	; (30198 <bt_conn_prepare_events+0x74>)
   3012c:	2500      	movs	r5, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   3012e:	462a      	mov	r2, r5
   30130:	2101      	movs	r1, #1
{
   30132:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   30134:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   30136:	f021 ff46 	bl	51fc6 <k_poll_event_init>
   3013a:	2601      	movs	r6, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   3013c:	f04f 0914 	mov.w	r9, #20
	if (!atomic_get(&conn->ref)) {
   30140:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
		if (!conn_prepare_events(conn, &events[ev_count])) {
   30144:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   30148:	f01d fa2a 	bl	4d5a0 <atomic_get>
   3014c:	b158      	cbz	r0, 30166 <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   3014e:	7b63      	ldrb	r3, [r4, #13]
   30150:	b98b      	cbnz	r3, 30176 <bt_conn_prepare_events+0x52>
   30152:	f06f 0140 	mvn.w	r1, #64	; 0x40
   30156:	1d20      	adds	r0, r4, #4
   30158:	f01d fa13 	bl	4d582 <atomic_and>
   3015c:	0643      	lsls	r3, r0, #25
   3015e:	d50a      	bpl.n	30176 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   30160:	4620      	mov	r0, r4
   30162:	f01d fa61 	bl	4d628 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30166:	3501      	adds	r5, #1
   30168:	2d06      	cmp	r5, #6
   3016a:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   3016e:	d1e7      	bne.n	30140 <bt_conn_prepare_events+0x1c>
}
   30170:	4630      	mov	r0, r6
   30172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   30176:	7b63      	ldrb	r3, [r4, #13]
   30178:	2b07      	cmp	r3, #7
   3017a:	d1f4      	bne.n	30166 <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   3017c:	f104 0338 	add.w	r3, r4, #56	; 0x38
   30180:	2200      	movs	r2, #0
   30182:	2104      	movs	r1, #4
   30184:	4640      	mov	r0, r8
   30186:	f021 ff1e 	bl	51fc6 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   3018a:	2301      	movs	r3, #1
   3018c:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   30190:	441e      	add	r6, r3
   30192:	e7e8      	b.n	30166 <bt_conn_prepare_events+0x42>
   30194:	200009a8 	.word	0x200009a8
   30198:	20001d38 	.word	0x20001d38

0003019c <bt_conn_lookup_handle>:
{
   3019c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   3019e:	2106      	movs	r1, #6
   301a0:	4801      	ldr	r0, [pc, #4]	; (301a8 <bt_conn_lookup_handle+0xc>)
   301a2:	f01d bae0 	b.w	4d766 <conn_lookup_handle>
   301a6:	bf00      	nop
   301a8:	20001d38 	.word	0x20001d38

000301ac <bt_conn_set_state>:
{
   301ac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   301ae:	7b45      	ldrb	r5, [r0, #13]
   301b0:	428d      	cmp	r5, r1
{
   301b2:	4604      	mov	r4, r0
	if (conn->state == state) {
   301b4:	f000 80c1 	beq.w	3033a <bt_conn_set_state+0x18e>
	conn->state = state;
   301b8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   301ba:	b15d      	cbz	r5, 301d4 <bt_conn_set_state+0x28>
   301bc:	2d06      	cmp	r5, #6
   301be:	d00f      	beq.n	301e0 <bt_conn_set_state+0x34>
	switch (conn->state) {
   301c0:	7b63      	ldrb	r3, [r4, #13]
   301c2:	2b07      	cmp	r3, #7
   301c4:	f200 80b9 	bhi.w	3033a <bt_conn_set_state+0x18e>
   301c8:	e8df f003 	tbb	[pc, r3]
   301cc:	b7b71143 	.word	0xb7b71143
   301d0:	2879b7b7 	.word	0x2879b7b7
		if (conn->type != BT_CONN_TYPE_ISO) {
   301d4:	7883      	ldrb	r3, [r0, #2]
   301d6:	2b08      	cmp	r3, #8
   301d8:	d0f2      	beq.n	301c0 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   301da:	f01d fa90 	bl	4d6fe <bt_conn_ref>
   301de:	e7ef      	b.n	301c0 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   301e0:	7883      	ldrb	r3, [r0, #2]
   301e2:	2b01      	cmp	r3, #1
   301e4:	d1ec      	bne.n	301c0 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   301e6:	3058      	adds	r0, #88	; 0x58
   301e8:	f021 fbdb 	bl	519a2 <k_work_cancel_delayable>
   301ec:	e7e8      	b.n	301c0 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   301ee:	4d53      	ldr	r5, [pc, #332]	; (3033c <bt_conn_set_state+0x190>)
		tx->pending_no_cb = 0U;
   301f0:	2600      	movs	r6, #0
	__asm__ volatile(
   301f2:	f04f 0320 	mov.w	r3, #32
   301f6:	f3ef 8211 	mrs	r2, BASEPRI
   301fa:	f383 8812 	msr	BASEPRI_MAX, r3
   301fe:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   30202:	69e3      	ldr	r3, [r4, #28]
   30204:	2b00      	cmp	r3, #0
   30206:	d079      	beq.n	302fc <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
   30208:	3b01      	subs	r3, #1
   3020a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   3020c:	f382 8811 	msr	BASEPRI, r2
   30210:	f3bf 8f6f 	isb	sy
   30214:	4628      	mov	r0, r5
   30216:	f018 fb4b 	bl	488b0 <z_impl_k_sem_give>
}
   3021a:	e7ea      	b.n	301f2 <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
   3021c:	78a3      	ldrb	r3, [r4, #2]
   3021e:	2b04      	cmp	r3, #4
   30220:	f000 808b 	beq.w	3033a <bt_conn_set_state+0x18e>
	z_impl_k_queue_init(queue);
   30224:	f104 0038 	add.w	r0, r4, #56	; 0x38
   30228:	f021 fa9a 	bl	51760 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   3022c:	4844      	ldr	r0, [pc, #272]	; (30340 <bt_conn_set_state+0x194>)
   3022e:	2100      	movs	r1, #0
   30230:	f019 fafc 	bl	4982c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   30234:	2300      	movs	r3, #0
	list->tail = NULL;
   30236:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3023a:	78e3      	ldrb	r3, [r4, #3]
   3023c:	2b01      	cmp	r3, #1
   3023e:	d17c      	bne.n	3033a <bt_conn_set_state+0x18e>
			k_work_schedule(&conn->deferred_work,
   30240:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   30244:	2300      	movs	r3, #0
   30246:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   3024a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   3024e:	f018 bd03 	b.w	48c58 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   30252:	78a3      	ldrb	r3, [r4, #2]
   30254:	2b04      	cmp	r3, #4
   30256:	d104      	bne.n	30262 <bt_conn_set_state+0xb6>
			bt_conn_unref(conn);
   30258:	4620      	mov	r0, r4
}
   3025a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   3025e:	f01d ba69 	b.w	4d734 <bt_conn_unref>
		switch (old_state) {
   30262:	3d01      	subs	r5, #1
   30264:	2d05      	cmp	r5, #5
   30266:	d868      	bhi.n	3033a <bt_conn_set_state+0x18e>
   30268:	a301      	add	r3, pc, #4	; (adr r3, 30270 <bt_conn_set_state+0xc4>)
   3026a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   3026e:	bf00      	nop
   30270:	00030289 	.word	0x00030289
   30274:	000302b1 	.word	0x000302b1
   30278:	00030259 	.word	0x00030259
   3027c:	00030259 	.word	0x00030259
   30280:	000302b1 	.word	0x000302b1
   30284:	000302b1 	.word	0x000302b1
			tx_notify(conn);
   30288:	4620      	mov	r0, r4
   3028a:	f01d f99e 	bl	4d5ca <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   3028e:	78a3      	ldrb	r3, [r4, #2]
   30290:	2b01      	cmp	r3, #1
   30292:	d103      	bne.n	3029c <bt_conn_set_state+0xf0>
				k_work_cancel_delayable(&conn->deferred_work);
   30294:	f104 0058 	add.w	r0, r4, #88	; 0x58
   30298:	f021 fb83 	bl	519a2 <k_work_cancel_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3029c:	2140      	movs	r1, #64	; 0x40
   3029e:	1d20      	adds	r0, r4, #4
   302a0:	f01d f984 	bl	4d5ac <atomic_or>
   302a4:	4826      	ldr	r0, [pc, #152]	; (30340 <bt_conn_set_state+0x194>)
}
   302a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   302aa:	2100      	movs	r1, #0
   302ac:	f019 babe 	b.w	4982c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   302b0:	7b23      	ldrb	r3, [r4, #12]
   302b2:	2b00      	cmp	r3, #0
   302b4:	d0d0      	beq.n	30258 <bt_conn_set_state+0xac>
				notify_connected(conn);
   302b6:	4620      	mov	r0, r4
   302b8:	f7ff fe1a 	bl	2fef0 <notify_connected>
   302bc:	e7cc      	b.n	30258 <bt_conn_set_state+0xac>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   302be:	78a3      	ldrb	r3, [r4, #2]
   302c0:	2b01      	cmp	r3, #1
   302c2:	d13a      	bne.n	3033a <bt_conn_set_state+0x18e>
					K_MSEC(10 * bt_dev.create_param.timeout));
   302c4:	4b1f      	ldr	r3, [pc, #124]	; (30344 <bt_conn_set_state+0x198>)
   302c6:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   302c8:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   302ca:	b1a8      	cbz	r0, 302f8 <bt_conn_set_state+0x14c>
   302cc:	230a      	movs	r3, #10
   302ce:	4358      	muls	r0, r3
   302d0:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   302d2:	03c9      	lsls	r1, r1, #15
   302d4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   302d8:	f240 33e7 	movw	r3, #999	; 0x3e7
   302dc:	03c0      	lsls	r0, r0, #15
   302de:	18c0      	adds	r0, r0, r3
   302e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   302e4:	f04f 0300 	mov.w	r3, #0
   302e8:	f141 0100 	adc.w	r1, r1, #0
   302ec:	f7f5 ff08 	bl	26100 <__aeabi_uldivmod>
   302f0:	4602      	mov	r2, r0
   302f2:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   302f4:	4620      	mov	r0, r4
   302f6:	e7a8      	b.n	3024a <bt_conn_set_state+0x9e>
					K_MSEC(10 * bt_dev.create_param.timeout));
   302f8:	4601      	mov	r1, r0
   302fa:	e7ea      	b.n	302d2 <bt_conn_set_state+0x126>
	return list->head;
   302fc:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   302fe:	b128      	cbz	r0, 3030c <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30300:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   30302:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   30304:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30306:	4288      	cmp	r0, r1
	list->tail = node;
   30308:	bf08      	it	eq
   3030a:	61a3      	streq	r3, [r4, #24]
   3030c:	f382 8811 	msr	BASEPRI, r2
   30310:	f3bf 8f6f 	isb	sy
		if (!node) {
   30314:	b188      	cbz	r0, 3033a <bt_conn_set_state+0x18e>
	__asm__ volatile(
   30316:	f04f 0220 	mov.w	r2, #32
   3031a:	f3ef 8311 	mrs	r3, BASEPRI
   3031e:	f382 8812 	msr	BASEPRI_MAX, r2
   30322:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   30326:	68c2      	ldr	r2, [r0, #12]
   30328:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   3032a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   3032c:	f383 8811 	msr	BASEPRI, r3
   30330:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   30334:	f7ff fdd2 	bl	2fedc <tx_free>
   30338:	e76c      	b.n	30214 <bt_conn_set_state+0x68>
}
   3033a:	bd70      	pop	{r4, r5, r6, pc}
   3033c:	20000140 	.word	0x20000140
   30340:	200009a8 	.word	0x200009a8
   30344:	20000040 	.word	0x20000040

00030348 <bt_conn_index>:
		index = conn - acl_conns;
   30348:	4b03      	ldr	r3, [pc, #12]	; (30358 <bt_conn_index+0x10>)
   3034a:	1ac0      	subs	r0, r0, r3
   3034c:	4b03      	ldr	r3, [pc, #12]	; (3035c <bt_conn_index+0x14>)
   3034e:	1180      	asrs	r0, r0, #6
   30350:	4358      	muls	r0, r3
}
   30352:	b2c0      	uxtb	r0, r0
   30354:	4770      	bx	lr
   30356:	bf00      	nop
   30358:	20001d38 	.word	0x20001d38
   3035c:	aaaaaaab 	.word	0xaaaaaaab

00030360 <bt_conn_create_pdu_timeout>:
{
   30360:	b538      	push	{r3, r4, r5, lr}
   30362:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   30364:	4906      	ldr	r1, [pc, #24]	; (30380 <bt_conn_create_pdu_timeout+0x20>)
   30366:	2800      	cmp	r0, #0
   30368:	bf08      	it	eq
   3036a:	4608      	moveq	r0, r1
   3036c:	f020 f964 	bl	50638 <net_buf_alloc_fixed>
	if (!buf) {
   30370:	4604      	mov	r4, r0
   30372:	b118      	cbz	r0, 3037c <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   30374:	1d29      	adds	r1, r5, #4
   30376:	3008      	adds	r0, #8
   30378:	f020 f983 	bl	50682 <net_buf_simple_reserve>
}
   3037c:	4620      	mov	r0, r4
   3037e:	bd38      	pop	{r3, r4, r5, pc}
   30380:	20001544 	.word	0x20001544

00030384 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   30384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   30386:	1d03      	adds	r3, r0, #4
{
   30388:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3038a:	4618      	mov	r0, r3
   3038c:	f01d f908 	bl	4d5a0 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   30390:	0582      	lsls	r2, r0, #22
   30392:	d512      	bpl.n	303ba <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   30394:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   30398:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   3039c:	4291      	cmp	r1, r2
   3039e:	d80c      	bhi.n	303ba <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   303a0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   303a4:	4291      	cmp	r1, r2
   303a6:	d308      	bcc.n	303ba <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   303a8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   303ac:	4291      	cmp	r1, r2
   303ae:	d104      	bne.n	303ba <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   303b0:	f46f 7100 	mvn.w	r1, #512	; 0x200
   303b4:	4618      	mov	r0, r3
   303b6:	f01d f8e4 	bl	4d582 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   303ba:	4b10      	ldr	r3, [pc, #64]	; (303fc <notify_le_param_updated+0x78>)
   303bc:	681d      	ldr	r5, [r3, #0]
   303be:	b925      	cbnz	r5, 303ca <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   303c0:	4d0f      	ldr	r5, [pc, #60]	; (30400 <notify_le_param_updated+0x7c>)
   303c2:	4f10      	ldr	r7, [pc, #64]	; (30404 <notify_le_param_updated+0x80>)
   303c4:	42bd      	cmp	r5, r7
   303c6:	d30c      	bcc.n	303e2 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   303c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   303ca:	68ee      	ldr	r6, [r5, #12]
   303cc:	b13e      	cbz	r6, 303de <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   303ce:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   303d2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   303d6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   303da:	4620      	mov	r0, r4
   303dc:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   303de:	69ed      	ldr	r5, [r5, #28]
   303e0:	e7ed      	b.n	303be <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   303e2:	68ee      	ldr	r6, [r5, #12]
   303e4:	b13e      	cbz	r6, 303f6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   303e6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   303ea:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   303ee:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   303f2:	4620      	mov	r0, r4
   303f4:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   303f6:	3520      	adds	r5, #32
   303f8:	e7e4      	b.n	303c4 <notify_le_param_updated+0x40>
   303fa:	bf00      	nop
   303fc:	20004988 	.word	0x20004988
   30400:	00052820 	.word	0x00052820
   30404:	00052820 	.word	0x00052820

00030408 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   30408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   3040a:	4b0d      	ldr	r3, [pc, #52]	; (30440 <notify_le_phy_updated+0x38>)
   3040c:	681d      	ldr	r5, [r3, #0]
{
   3040e:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   30410:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   30414:	b935      	cbnz	r5, 30424 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   30416:	4d0b      	ldr	r5, [pc, #44]	; (30444 <notify_le_phy_updated+0x3c>)
   30418:	4e0b      	ldr	r6, [pc, #44]	; (30448 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   3041a:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3041e:	42b5      	cmp	r5, r6
   30420:	d307      	bcc.n	30432 <notify_le_phy_updated+0x2a>
		}
	}
}
   30422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   30424:	69ab      	ldr	r3, [r5, #24]
   30426:	b113      	cbz	r3, 3042e <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   30428:	4631      	mov	r1, r6
   3042a:	4620      	mov	r0, r4
   3042c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   3042e:	69ed      	ldr	r5, [r5, #28]
   30430:	e7f0      	b.n	30414 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   30432:	69ab      	ldr	r3, [r5, #24]
   30434:	b113      	cbz	r3, 3043c <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   30436:	4639      	mov	r1, r7
   30438:	4620      	mov	r0, r4
   3043a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3043c:	3520      	adds	r5, #32
   3043e:	e7ee      	b.n	3041e <notify_le_phy_updated+0x16>
   30440:	20004988 	.word	0x20004988
   30444:	00052820 	.word	0x00052820
   30448:	00052820 	.word	0x00052820

0003044c <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   3044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30450:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   30452:	4608      	mov	r0, r1
{
   30454:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   30456:	f01c fd6f 	bl	4cf38 <bt_le_conn_params_valid>
   3045a:	4605      	mov	r5, r0
   3045c:	b918      	cbnz	r0, 30466 <le_param_req+0x1a>
		return false;
   3045e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   30460:	4628      	mov	r0, r5
   30462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   30466:	4b13      	ldr	r3, [pc, #76]	; (304b4 <le_param_req+0x68>)
   30468:	681e      	ldr	r6, [r3, #0]
   3046a:	b946      	cbnz	r6, 3047e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3046c:	4e12      	ldr	r6, [pc, #72]	; (304b8 <le_param_req+0x6c>)
   3046e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 304bc <le_param_req+0x70>
   30472:	4546      	cmp	r6, r8
   30474:	d2f4      	bcs.n	30460 <le_param_req+0x14>
		if (!cb->le_param_req) {
   30476:	68b3      	ldr	r3, [r6, #8]
   30478:	b983      	cbnz	r3, 3049c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3047a:	3620      	adds	r6, #32
   3047c:	e7f9      	b.n	30472 <le_param_req+0x26>
		if (!cb->le_param_req) {
   3047e:	68b3      	ldr	r3, [r6, #8]
   30480:	b90b      	cbnz	r3, 30486 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   30482:	69f6      	ldr	r6, [r6, #28]
   30484:	e7f1      	b.n	3046a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   30486:	4621      	mov	r1, r4
   30488:	4638      	mov	r0, r7
   3048a:	4798      	blx	r3
   3048c:	2800      	cmp	r0, #0
   3048e:	d0e6      	beq.n	3045e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   30490:	4620      	mov	r0, r4
   30492:	f01c fd51 	bl	4cf38 <bt_le_conn_params_valid>
   30496:	2800      	cmp	r0, #0
   30498:	d1f3      	bne.n	30482 <le_param_req+0x36>
   3049a:	e7e0      	b.n	3045e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   3049c:	4621      	mov	r1, r4
   3049e:	4638      	mov	r0, r7
   304a0:	4798      	blx	r3
   304a2:	2800      	cmp	r0, #0
   304a4:	d0db      	beq.n	3045e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   304a6:	4620      	mov	r0, r4
   304a8:	f01c fd46 	bl	4cf38 <bt_le_conn_params_valid>
   304ac:	2800      	cmp	r0, #0
   304ae:	d1e4      	bne.n	3047a <le_param_req+0x2e>
   304b0:	e7d5      	b.n	3045e <le_param_req+0x12>
   304b2:	bf00      	nop
   304b4:	20004988 	.word	0x20004988
   304b8:	00052820 	.word	0x00052820
   304bc:	00052820 	.word	0x00052820

000304c0 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   304c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   304c4:	78c3      	ldrb	r3, [r0, #3]
{
   304c6:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   304c8:	b973      	cbnz	r3, 304e8 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   304ca:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   304ce:	4b10      	ldr	r3, [pc, #64]	; (30510 <bt_conn_identity_resolved+0x50>)
   304d0:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   304d2:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   304d6:	b955      	cbnz	r5, 304ee <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   304d8:	4d0e      	ldr	r5, [pc, #56]	; (30514 <bt_conn_identity_resolved+0x54>)
   304da:	4f0f      	ldr	r7, [pc, #60]	; (30518 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   304dc:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   304e0:	42bd      	cmp	r5, r7
   304e2:	d30c      	bcc.n	304fe <bt_conn_identity_resolved+0x3e>
		}
	}
}
   304e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   304e8:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   304ec:	e7ef      	b.n	304ce <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   304ee:	692b      	ldr	r3, [r5, #16]
   304f0:	b11b      	cbz	r3, 304fa <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   304f2:	463a      	mov	r2, r7
   304f4:	4631      	mov	r1, r6
   304f6:	4620      	mov	r0, r4
   304f8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   304fa:	69ed      	ldr	r5, [r5, #28]
   304fc:	e7eb      	b.n	304d6 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   304fe:	692b      	ldr	r3, [r5, #16]
   30500:	b11b      	cbz	r3, 3050a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   30502:	4642      	mov	r2, r8
   30504:	4631      	mov	r1, r6
   30506:	4620      	mov	r0, r4
   30508:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3050a:	3520      	adds	r5, #32
   3050c:	e7e8      	b.n	304e0 <bt_conn_identity_resolved+0x20>
   3050e:	bf00      	nop
   30510:	20004988 	.word	0x20004988
   30514:	00052820 	.word	0x00052820
   30518:	00052820 	.word	0x00052820

0003051c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   3051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   3051e:	7a43      	ldrb	r3, [r0, #9]
   30520:	7283      	strb	r3, [r0, #10]
{
   30522:	4604      	mov	r4, r0
   30524:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   30526:	f01d faca 	bl	4dabe <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   3052a:	4b0c      	ldr	r3, [pc, #48]	; (3055c <bt_conn_security_changed+0x40>)
   3052c:	681d      	ldr	r5, [r3, #0]
   3052e:	b925      	cbnz	r5, 3053a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   30530:	4d0b      	ldr	r5, [pc, #44]	; (30560 <bt_conn_security_changed+0x44>)
   30532:	4f0c      	ldr	r7, [pc, #48]	; (30564 <bt_conn_security_changed+0x48>)
   30534:	42bd      	cmp	r5, r7
   30536:	d308      	bcc.n	3054a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   30538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   3053a:	696b      	ldr	r3, [r5, #20]
   3053c:	b11b      	cbz	r3, 30546 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   3053e:	7a61      	ldrb	r1, [r4, #9]
   30540:	4632      	mov	r2, r6
   30542:	4620      	mov	r0, r4
   30544:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   30546:	69ed      	ldr	r5, [r5, #28]
   30548:	e7f1      	b.n	3052e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   3054a:	696b      	ldr	r3, [r5, #20]
   3054c:	b11b      	cbz	r3, 30556 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   3054e:	7a61      	ldrb	r1, [r4, #9]
   30550:	4632      	mov	r2, r6
   30552:	4620      	mov	r0, r4
   30554:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   30556:	3520      	adds	r5, #32
   30558:	e7ec      	b.n	30534 <bt_conn_security_changed+0x18>
   3055a:	bf00      	nop
   3055c:	20004988 	.word	0x20004988
   30560:	00052820 	.word	0x00052820
   30564:	00052820 	.word	0x00052820

00030568 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   30568:	4b02      	ldr	r3, [pc, #8]	; (30574 <bt_conn_cb_register+0xc>)
   3056a:	681a      	ldr	r2, [r3, #0]
   3056c:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   3056e:	6018      	str	r0, [r3, #0]
}
   30570:	4770      	bx	lr
   30572:	bf00      	nop
   30574:	20004988 	.word	0x20004988

00030578 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   30578:	b570      	push	{r4, r5, r6, lr}
   3057a:	4606      	mov	r6, r0
   3057c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   3057e:	480a      	ldr	r0, [pc, #40]	; (305a8 <bt_conn_add_le+0x30>)
   30580:	2106      	movs	r1, #6
   30582:	f7ff fd65 	bl	30050 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   30586:	4604      	mov	r4, r0
   30588:	b160      	cbz	r0, 305a4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   3058a:	7206      	strb	r6, [r0, #8]
   3058c:	2207      	movs	r2, #7
   3058e:	4629      	mov	r1, r5
   30590:	3088      	adds	r0, #136	; 0x88
   30592:	f01c f890 	bl	4c6b6 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   30596:	2301      	movs	r3, #1
   30598:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   3059a:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   3059c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   3059e:	4b03      	ldr	r3, [pc, #12]	; (305ac <bt_conn_add_le+0x34>)
   305a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   305a4:	4620      	mov	r0, r4
   305a6:	bd70      	pop	{r4, r5, r6, pc}
   305a8:	20001d38 	.word	0x20001d38
   305ac:	00280018 	.word	0x00280018

000305b0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   305b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   305b4:	4e0f      	ldr	r6, [pc, #60]	; (305f4 <bt_conn_lookup_addr_le+0x44>)
   305b6:	4607      	mov	r7, r0
   305b8:	4688      	mov	r8, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   305ba:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   305bc:	4630      	mov	r0, r6
   305be:	f01d f89e 	bl	4d6fe <bt_conn_ref>

		if (!conn) {
   305c2:	4604      	mov	r4, r0
   305c4:	b120      	cbz	r0, 305d0 <bt_conn_lookup_addr_le+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   305c6:	7883      	ldrb	r3, [r0, #2]
   305c8:	2b01      	cmp	r3, #1
   305ca:	d00a      	beq.n	305e2 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   305cc:	f01d f8b2 	bl	4d734 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   305d0:	3501      	adds	r5, #1
   305d2:	2d06      	cmp	r5, #6
   305d4:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   305d8:	d1f0      	bne.n	305bc <bt_conn_lookup_addr_le+0xc>
		}

		return conn;
	}

	return NULL;
   305da:	2400      	movs	r4, #0
}
   305dc:	4620      	mov	r0, r4
   305de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   305e2:	4642      	mov	r2, r8
   305e4:	4639      	mov	r1, r7
   305e6:	f01d f94e 	bl	4d886 <bt_conn_is_peer_addr_le>
   305ea:	2800      	cmp	r0, #0
   305ec:	d1f6      	bne.n	305dc <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   305ee:	4620      	mov	r0, r4
   305f0:	e7ec      	b.n	305cc <bt_conn_lookup_addr_le+0x1c>
   305f2:	bf00      	nop
   305f4:	20001d38 	.word	0x20001d38

000305f8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   305f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   305fc:	f8df a050 	ldr.w	sl, [pc, #80]	; 30650 <bt_conn_lookup_state_le+0x58>
{
   30600:	4606      	mov	r6, r0
   30602:	460f      	mov	r7, r1
   30604:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30606:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   30608:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   3060c:	fb09 a005 	mla	r0, r9, r5, sl
   30610:	f01d f875 	bl	4d6fe <bt_conn_ref>

		if (!conn) {
   30614:	4604      	mov	r4, r0
   30616:	b120      	cbz	r0, 30622 <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   30618:	7883      	ldrb	r3, [r0, #2]
   3061a:	2b01      	cmp	r3, #1
   3061c:	d006      	beq.n	3062c <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   3061e:	f01d f889 	bl	4d734 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30622:	3501      	adds	r5, #1
   30624:	2d06      	cmp	r5, #6
   30626:	d1f1      	bne.n	3060c <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   30628:	2400      	movs	r4, #0
   3062a:	e00d      	b.n	30648 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   3062c:	b137      	cbz	r7, 3063c <bt_conn_lookup_state_le+0x44>
   3062e:	463a      	mov	r2, r7
   30630:	4631      	mov	r1, r6
   30632:	f01d f928 	bl	4d886 <bt_conn_is_peer_addr_le>
   30636:	b908      	cbnz	r0, 3063c <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   30638:	4620      	mov	r0, r4
   3063a:	e7f0      	b.n	3061e <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   3063c:	7b63      	ldrb	r3, [r4, #13]
   3063e:	4543      	cmp	r3, r8
   30640:	d1fa      	bne.n	30638 <bt_conn_lookup_state_le+0x40>
   30642:	7a23      	ldrb	r3, [r4, #8]
   30644:	42b3      	cmp	r3, r6
   30646:	d1f7      	bne.n	30638 <bt_conn_lookup_state_le+0x40>
}
   30648:	4620      	mov	r0, r4
   3064a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3064e:	bf00      	nop
   30650:	20001d38 	.word	0x20001d38

00030654 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   30654:	b510      	push	{r4, lr}
	info->type = conn->type;
   30656:	7882      	ldrb	r2, [r0, #2]
   30658:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   3065a:	78c4      	ldrb	r4, [r0, #3]
   3065c:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   3065e:	7a03      	ldrb	r3, [r0, #8]
   30660:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   30662:	2a01      	cmp	r2, #1
   30664:	d11e      	bne.n	306a4 <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   30666:	f100 0288 	add.w	r2, r0, #136	; 0x88
   3066a:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   3066c:	4a0f      	ldr	r2, [pc, #60]	; (306ac <bt_conn_get_info+0x58>)
   3066e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   30672:	4413      	add	r3, r2
   30674:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   30676:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   3067a:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   3067e:	b974      	cbnz	r4, 3069e <bt_conn_get_info+0x4a>
			info->le.remote = &conn->le.resp_addr;
   30680:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   30684:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   30688:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   3068a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   3068e:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   30690:	30b8      	adds	r0, #184	; 0xb8
		info->le.timeout = conn->le.timeout;
   30692:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   30696:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
   30698:	61c8      	str	r0, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   3069a:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   3069c:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   3069e:	e9c1 2303 	strd	r2, r3, [r1, #12]
   306a2:	e7ef      	b.n	30684 <bt_conn_get_info+0x30>
	return -EINVAL;
   306a4:	f06f 0015 	mvn.w	r0, #21
   306a8:	e7f8      	b.n	3069c <bt_conn_get_info+0x48>
   306aa:	bf00      	nop
   306ac:	20000040 	.word	0x20000040

000306b0 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   306b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   306b4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   306b6:	4850      	ldr	r0, [pc, #320]	; (307f8 <bt_conn_le_create+0x148>)
   306b8:	f01c ff72 	bl	4d5a0 <atomic_get>
   306bc:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   306be:	0781      	lsls	r1, r0, #30
{
   306c0:	4615      	mov	r5, r2
   306c2:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   306c4:	d405      	bmi.n	306d2 <bt_conn_le_create+0x22>
		return -EAGAIN;
   306c6:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   306ca:	4628      	mov	r0, r5
   306cc:	b002      	add	sp, #8
   306ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   306d2:	4610      	mov	r0, r2
   306d4:	f01c fc30 	bl	4cf38 <bt_le_conn_params_valid>
   306d8:	b910      	cbnz	r0, 306e0 <bt_conn_le_create+0x30>
		return -EINVAL;
   306da:	f06f 0515 	mvn.w	r5, #21
   306de:	e7f4      	b.n	306ca <bt_conn_le_create+0x1a>
   306e0:	4845      	ldr	r0, [pc, #276]	; (307f8 <bt_conn_le_create+0x148>)
   306e2:	f01c ff5d 	bl	4d5a0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   306e6:	0642      	lsls	r2, r0, #25
   306e8:	d4ed      	bmi.n	306c6 <bt_conn_le_create+0x16>
   306ea:	4843      	ldr	r0, [pc, #268]	; (307f8 <bt_conn_le_create+0x148>)
   306ec:	f01c ff58 	bl	4d5a0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   306f0:	0503      	lsls	r3, r0, #20
   306f2:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   306f6:	d478      	bmi.n	307ea <bt_conn_le_create+0x13a>
	if (!bt_id_scan_random_addr_check()) {
   306f8:	f01c fdc8 	bl	4d28c <bt_id_scan_random_addr_check>
   306fc:	2800      	cmp	r0, #0
   306fe:	d0ec      	beq.n	306da <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   30700:	4621      	mov	r1, r4
   30702:	4640      	mov	r0, r8
   30704:	f01d f8df 	bl	4d8c6 <bt_conn_exists_le>
   30708:	2800      	cmp	r0, #0
   3070a:	d1e6      	bne.n	306da <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   3070c:	7823      	ldrb	r3, [r4, #0]
   3070e:	3b02      	subs	r3, #2
   30710:	2b01      	cmp	r3, #1
   30712:	d849      	bhi.n	307a8 <bt_conn_le_create+0xf8>
   30714:	2207      	movs	r2, #7
   30716:	4621      	mov	r1, r4
   30718:	4668      	mov	r0, sp
   3071a:	f01b ffcc 	bl	4c6b6 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   3071e:	f89d 3000 	ldrb.w	r3, [sp]
   30722:	3b02      	subs	r3, #2
   30724:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   30728:	4669      	mov	r1, sp
   3072a:	2000      	movs	r0, #0
   3072c:	f7ff ff24 	bl	30578 <bt_conn_add_le>
	if (!conn) {
   30730:	4604      	mov	r4, r0
   30732:	2800      	cmp	r0, #0
   30734:	d05c      	beq.n	307f0 <bt_conn_le_create+0x140>
	conn->le.interval_min = param->interval_min;
   30736:	882b      	ldrh	r3, [r5, #0]
   30738:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   3073c:	886b      	ldrh	r3, [r5, #2]
   3073e:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   30742:	88ab      	ldrh	r3, [r5, #4]
   30744:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   30748:	88eb      	ldrh	r3, [r5, #6]
   3074a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   3074e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   30752:	4d2a      	ldr	r5, [pc, #168]	; (307fc <bt_conn_le_create+0x14c>)
   30754:	f105 0c08 	add.w	ip, r5, #8
   30758:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   3075c:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   3075e:	2b00      	cmp	r3, #0
   30760:	bf08      	it	eq
   30762:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   30766:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   30768:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   3076a:	b903      	cbnz	r3, 3076e <bt_conn_le_create+0xbe>
   3076c:	89ab      	ldrh	r3, [r5, #12]
   3076e:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   30770:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   30772:	b903      	cbnz	r3, 30776 <bt_conn_le_create+0xc6>
   30774:	89eb      	ldrh	r3, [r5, #14]
   30776:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   30778:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   3077c:	b11b      	cbz	r3, 30786 <bt_conn_le_create+0xd6>
   3077e:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   30782:	429a      	cmp	r2, r3
   30784:	d919      	bls.n	307ba <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   30786:	2102      	movs	r1, #2
   30788:	4620      	mov	r0, r4
   3078a:	f7ff fd0f 	bl	301ac <bt_conn_set_state>
		err = bt_le_scan_update(true);
   3078e:	2001      	movs	r0, #1
   30790:	f7ff f8d0 	bl	2f934 <bt_le_scan_update>
		if (err) {
   30794:	4605      	mov	r5, r0
   30796:	b330      	cbz	r0, 307e6 <bt_conn_le_create+0x136>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   30798:	4620      	mov	r0, r4
   3079a:	2100      	movs	r1, #0
   3079c:	f7ff fd06 	bl	301ac <bt_conn_set_state>
			bt_conn_unref(conn);
   307a0:	4620      	mov	r0, r4
   307a2:	f01c ffc7 	bl	4d734 <bt_conn_unref>
			return err;
   307a6:	e790      	b.n	306ca <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   307a8:	4621      	mov	r1, r4
   307aa:	f01c fd43 	bl	4d234 <bt_lookup_id_addr>
   307ae:	2207      	movs	r2, #7
   307b0:	4601      	mov	r1, r0
   307b2:	4668      	mov	r0, sp
   307b4:	f01b ff7f 	bl	4c6b6 <memcpy>
}
   307b8:	e7b6      	b.n	30728 <bt_conn_le_create+0x78>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   307ba:	2106      	movs	r1, #6
   307bc:	4620      	mov	r0, r4
   307be:	f7ff fcf5 	bl	301ac <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   307c2:	4620      	mov	r0, r4
   307c4:	f01c fad5 	bl	4cd72 <bt_le_create_conn>
	if (err) {
   307c8:	4605      	mov	r5, r0
   307ca:	b160      	cbz	r0, 307e6 <bt_conn_le_create+0x136>
		conn->err = 0;
   307cc:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   307ce:	4631      	mov	r1, r6
   307d0:	4620      	mov	r0, r4
		conn->err = 0;
   307d2:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   307d4:	f7ff fcea 	bl	301ac <bt_conn_set_state>
		bt_conn_unref(conn);
   307d8:	4620      	mov	r0, r4
   307da:	f01c ffab 	bl	4d734 <bt_conn_unref>
		bt_le_scan_update(false);
   307de:	4630      	mov	r0, r6
   307e0:	f7ff f8a8 	bl	2f934 <bt_le_scan_update>
		return err;
   307e4:	e771      	b.n	306ca <bt_conn_le_create+0x1a>
	*ret_conn = conn;
   307e6:	603c      	str	r4, [r7, #0]
	return 0;
   307e8:	e76f      	b.n	306ca <bt_conn_le_create+0x1a>
		return -EALREADY;
   307ea:	f06f 0577 	mvn.w	r5, #119	; 0x77
   307ee:	e76c      	b.n	306ca <bt_conn_le_create+0x1a>
		return -ENOMEM;
   307f0:	f06f 050b 	mvn.w	r5, #11
   307f4:	e769      	b.n	306ca <bt_conn_le_create+0x1a>
   307f6:	bf00      	nop
   307f8:	2000010c 	.word	0x2000010c
   307fc:	20000040 	.word	0x20000040

00030800 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   30800:	b570      	push	{r4, r5, r6, lr}
   30802:	4606      	mov	r6, r0
   30804:	482f      	ldr	r0, [pc, #188]	; (308c4 <bt_le_set_auto_conn+0xc4>)
   30806:	f01c fecb 	bl	4d5a0 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3080a:	0780      	lsls	r0, r0, #30
{
   3080c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3080e:	d553      	bpl.n	308b8 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   30810:	b929      	cbnz	r1, 3081e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   30812:	f01c fd3b 	bl	4d28c <bt_id_scan_random_addr_check>
   30816:	b940      	cbnz	r0, 3082a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   30818:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   3081c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   3081e:	4608      	mov	r0, r1
   30820:	f01c fb8a 	bl	4cf38 <bt_le_conn_params_valid>
   30824:	2800      	cmp	r0, #0
   30826:	d1f4      	bne.n	30812 <bt_le_set_auto_conn+0x12>
   30828:	e7f6      	b.n	30818 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   3082a:	4631      	mov	r1, r6
   3082c:	2000      	movs	r0, #0
   3082e:	f7ff febf 	bl	305b0 <bt_conn_lookup_addr_le>
	if (!conn) {
   30832:	4604      	mov	r4, r0
   30834:	b928      	cbnz	r0, 30842 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   30836:	4631      	mov	r1, r6
   30838:	f7ff fe9e 	bl	30578 <bt_conn_add_le>
		if (!conn) {
   3083c:	4604      	mov	r4, r0
   3083e:	2800      	cmp	r0, #0
   30840:	d03d      	beq.n	308be <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   30842:	1d20      	adds	r0, r4, #4
	if (param) {
   30844:	b33d      	cbz	r5, 30896 <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   30846:	882b      	ldrh	r3, [r5, #0]
   30848:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   3084c:	886b      	ldrh	r3, [r5, #2]
   3084e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   30852:	88ab      	ldrh	r3, [r5, #4]
   30854:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   30858:	88eb      	ldrh	r3, [r5, #6]
   3085a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   3085e:	2101      	movs	r1, #1
   30860:	f01c fea4 	bl	4d5ac <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   30864:	07c1      	lsls	r1, r0, #31
   30866:	d402      	bmi.n	3086e <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   30868:	4620      	mov	r0, r4
   3086a:	f01c ff48 	bl	4d6fe <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   3086e:	7b63      	ldrb	r3, [r4, #13]
   30870:	b963      	cbnz	r3, 3088c <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   30872:	4814      	ldr	r0, [pc, #80]	; (308c4 <bt_le_set_auto_conn+0xc4>)
   30874:	f01c fe94 	bl	4d5a0 <atomic_get>
   30878:	0783      	lsls	r3, r0, #30
   3087a:	d507      	bpl.n	3088c <bt_le_set_auto_conn+0x8c>
		if (param) {
   3087c:	b11d      	cbz	r5, 30886 <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   3087e:	2102      	movs	r1, #2
   30880:	4620      	mov	r0, r4
   30882:	f7ff fc93 	bl	301ac <bt_conn_set_state>
		bt_le_scan_update(false);
   30886:	2000      	movs	r0, #0
   30888:	f7ff f854 	bl	2f934 <bt_le_scan_update>
	bt_conn_unref(conn);
   3088c:	4620      	mov	r0, r4
   3088e:	f01c ff51 	bl	4d734 <bt_conn_unref>
	return 0;
   30892:	2000      	movs	r0, #0
   30894:	e7c2      	b.n	3081c <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30896:	f06f 0101 	mvn.w	r1, #1
   3089a:	f01c fe72 	bl	4d582 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   3089e:	07c2      	lsls	r2, r0, #31
   308a0:	d5e5      	bpl.n	3086e <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   308a2:	4620      	mov	r0, r4
   308a4:	f01c ff46 	bl	4d734 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   308a8:	7b63      	ldrb	r3, [r4, #13]
   308aa:	2b02      	cmp	r3, #2
   308ac:	d1df      	bne.n	3086e <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   308ae:	4629      	mov	r1, r5
   308b0:	4620      	mov	r0, r4
   308b2:	f7ff fc7b 	bl	301ac <bt_conn_set_state>
   308b6:	e7da      	b.n	3086e <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   308b8:	f06f 000a 	mvn.w	r0, #10
   308bc:	e7ae      	b.n	3081c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   308be:	f06f 000b 	mvn.w	r0, #11
   308c2:	e7ab      	b.n	3081c <bt_le_set_auto_conn+0x1c>
   308c4:	2000010c 	.word	0x2000010c

000308c8 <send_conn_le_param_update>:
{
   308c8:	b538      	push	{r3, r4, r5, lr}
   308ca:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   308cc:	4608      	mov	r0, r1
{
   308ce:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   308d0:	f01c fb32 	bl	4cf38 <bt_le_conn_params_valid>
   308d4:	b338      	cbz	r0, 30926 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   308d6:	4b15      	ldr	r3, [pc, #84]	; (3092c <send_conn_le_param_update+0x64>)
   308d8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   308dc:	0799      	lsls	r1, r3, #30
   308de:	d407      	bmi.n	308f0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   308e0:	78e3      	ldrb	r3, [r4, #3]
   308e2:	b173      	cbz	r3, 30902 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   308e4:	4629      	mov	r1, r5
   308e6:	4620      	mov	r0, r4
}
   308e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   308ec:	f000 b9ee 	b.w	30ccc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   308f0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   308f4:	079a      	lsls	r2, r3, #30
   308f6:	d5f3      	bpl.n	308e0 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   308f8:	1d20      	adds	r0, r4, #4
   308fa:	f01c fe51 	bl	4d5a0 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   308fe:	0543      	lsls	r3, r0, #21
   30900:	d4ee      	bmi.n	308e0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   30902:	4629      	mov	r1, r5
   30904:	4620      	mov	r0, r4
   30906:	f01d f847 	bl	4d998 <bt_conn_le_conn_update>
		if (rc == 0) {
   3090a:	b958      	cbnz	r0, 30924 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   3090c:	882b      	ldrh	r3, [r5, #0]
   3090e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   30912:	886b      	ldrh	r3, [r5, #2]
   30914:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   30918:	88ab      	ldrh	r3, [r5, #4]
   3091a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   3091e:	88eb      	ldrh	r3, [r5, #6]
   30920:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   30924:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   30926:	f06f 0015 	mvn.w	r0, #21
   3092a:	e7fb      	b.n	30924 <send_conn_le_param_update+0x5c>
   3092c:	20000040 	.word	0x20000040

00030930 <deferred_work>:
{
   30930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   30932:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   30936:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   30938:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   3093c:	b9fb      	cbnz	r3, 3097e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   3093e:	4628      	mov	r0, r5
   30940:	f01d f8ac 	bl	4da9c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   30944:	4b2a      	ldr	r3, [pc, #168]	; (309f0 <deferred_work+0xc0>)
   30946:	681e      	ldr	r6, [r3, #0]
   30948:	b94e      	cbnz	r6, 3095e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3094a:	4e2a      	ldr	r6, [pc, #168]	; (309f4 <deferred_work+0xc4>)
   3094c:	4f2a      	ldr	r7, [pc, #168]	; (309f8 <deferred_work+0xc8>)
   3094e:	42be      	cmp	r6, r7
   30950:	d30d      	bcc.n	3096e <deferred_work+0x3e>
		bt_conn_unref(conn);
   30952:	4628      	mov	r0, r5
}
   30954:	b003      	add	sp, #12
   30956:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   3095a:	f01c beeb 	b.w	4d734 <bt_conn_unref>
		if (cb->disconnected) {
   3095e:	6873      	ldr	r3, [r6, #4]
   30960:	b11b      	cbz	r3, 3096a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   30962:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   30966:	4628      	mov	r0, r5
   30968:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   3096a:	69f6      	ldr	r6, [r6, #28]
   3096c:	e7ec      	b.n	30948 <deferred_work+0x18>
		if (cb->disconnected) {
   3096e:	6873      	ldr	r3, [r6, #4]
   30970:	b11b      	cbz	r3, 3097a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   30972:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   30976:	4628      	mov	r0, r5
   30978:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3097a:	3620      	adds	r6, #32
   3097c:	e7e7      	b.n	3094e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   3097e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   30982:	2b01      	cmp	r3, #1
   30984:	d132      	bne.n	309ec <deferred_work+0xbc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   30986:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   3098a:	b923      	cbnz	r3, 30996 <deferred_work+0x66>
}
   3098c:	b003      	add	sp, #12
   3098e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   30992:	f7fd be09 	b.w	2e5a8 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   30996:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3099a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   3099e:	4630      	mov	r0, r6
   309a0:	f01c fdef 	bl	4d582 <atomic_and>
   309a4:	0583      	lsls	r3, r0, #22
   309a6:	d51b      	bpl.n	309e0 <deferred_work+0xb0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   309a8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   309ac:	f8ad 3000 	strh.w	r3, [sp]
   309b0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   309b4:	f8ad 3002 	strh.w	r3, [sp, #2]
   309b8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   309bc:	f8ad 3004 	strh.w	r3, [sp, #4]
   309c0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   309c4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   309c8:	4669      	mov	r1, sp
   309ca:	4628      	mov	r0, r5
   309cc:	f7ff ff7c 	bl	308c8 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   309d0:	f44f 7180 	mov.w	r1, #256	; 0x100
   309d4:	4630      	mov	r0, r6
}
   309d6:	b003      	add	sp, #12
   309d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   309dc:	f01c bde6 	b.w	4d5ac <atomic_or>
		param = BT_LE_CONN_PARAM(
   309e0:	4a06      	ldr	r2, [pc, #24]	; (309fc <deferred_work+0xcc>)
   309e2:	6810      	ldr	r0, [r2, #0]
   309e4:	6851      	ldr	r1, [r2, #4]
   309e6:	466b      	mov	r3, sp
   309e8:	c303      	stmia	r3!, {r0, r1}
   309ea:	e7ed      	b.n	309c8 <deferred_work+0x98>
}
   309ec:	b003      	add	sp, #12
   309ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   309f0:	20004988 	.word	0x20004988
   309f4:	00052820 	.word	0x00052820
   309f8:	00052820 	.word	0x00052820
   309fc:	00052b02 	.word	0x00052b02

00030a00 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   30a00:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   30a02:	4801      	ldr	r0, [pc, #4]	; (30a08 <bt_conn_create_frag_timeout+0x8>)
   30a04:	f7ff bcac 	b.w	30360 <bt_conn_create_pdu_timeout>
   30a08:	2000159c 	.word	0x2000159c

00030a0c <create_frag>:
{
   30a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a10:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   30a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30a1a:	2000      	movs	r0, #0
{
   30a1c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   30a1e:	f7ff ffef 	bl	30a00 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   30a22:	7b73      	ldrb	r3, [r6, #13]
   30a24:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   30a26:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   30a28:	f04f 0600 	mov.w	r6, #0
   30a2c:	d005      	beq.n	30a3a <create_frag+0x2e>
		net_buf_unref(frag);
   30a2e:	f013 fb41 	bl	440b4 <net_buf_unref>
		return NULL;
   30a32:	4635      	mov	r5, r6
}
   30a34:	4628      	mov	r0, r5
   30a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   30a3a:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   30a3c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   30a40:	4e0c      	ldr	r6, [pc, #48]	; (30a74 <create_frag+0x68>)
   30a42:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   30a44:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   30a48:	f01f feab 	bl	507a2 <net_buf_simple_tailroom>
   30a4c:	4580      	cmp	r8, r0
   30a4e:	d20c      	bcs.n	30a6a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   30a50:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   30a54:	f854 1f08 	ldr.w	r1, [r4, #8]!
   30a58:	4632      	mov	r2, r6
   30a5a:	4638      	mov	r0, r7
   30a5c:	f01f fe5a 	bl	50714 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   30a60:	4631      	mov	r1, r6
   30a62:	4620      	mov	r0, r4
   30a64:	f01f fe79 	bl	5075a <net_buf_simple_pull>
   30a68:	e7e4      	b.n	30a34 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   30a6a:	4638      	mov	r0, r7
   30a6c:	f01f fe99 	bl	507a2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   30a70:	b286      	uxth	r6, r0
   30a72:	e7ef      	b.n	30a54 <create_frag+0x48>
   30a74:	20000040 	.word	0x20000040

00030a78 <bt_conn_process_tx>:
{
   30a78:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   30a7a:	7b43      	ldrb	r3, [r0, #13]
{
   30a7c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   30a7e:	b95b      	cbnz	r3, 30a98 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30a80:	f06f 0140 	mvn.w	r1, #64	; 0x40
   30a84:	3004      	adds	r0, #4
   30a86:	f01c fd7c 	bl	4d582 <atomic_and>
   30a8a:	0643      	lsls	r3, r0, #25
   30a8c:	d504      	bpl.n	30a98 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   30a8e:	4620      	mov	r0, r4
}
   30a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   30a94:	f01c bdc8 	b.w	4d628 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   30a98:	2200      	movs	r2, #0
   30a9a:	2300      	movs	r3, #0
   30a9c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   30aa0:	f01f fdcf 	bl	50642 <net_buf_get>
	BT_ASSERT(buf);
   30aa4:	4605      	mov	r5, r0
   30aa6:	b960      	cbnz	r0, 30ac2 <bt_conn_process_tx+0x4a>
   30aa8:	4a1f      	ldr	r2, [pc, #124]	; (30b28 <bt_conn_process_tx+0xb0>)
   30aaa:	4920      	ldr	r1, [pc, #128]	; (30b2c <bt_conn_process_tx+0xb4>)
   30aac:	4820      	ldr	r0, [pc, #128]	; (30b30 <bt_conn_process_tx+0xb8>)
   30aae:	f240 23e7 	movw	r3, #743	; 0x2e7
   30ab2:	f019 fcf8 	bl	4a4a6 <printk>
   30ab6:	4040      	eors	r0, r0
   30ab8:	f380 8811 	msr	BASEPRI, r0
   30abc:	f04f 0003 	mov.w	r0, #3
   30ac0:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   30ac2:	4e1c      	ldr	r6, [pc, #112]	; (30b34 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   30ac4:	89aa      	ldrh	r2, [r5, #12]
   30ac6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   30aca:	429a      	cmp	r2, r3
   30acc:	d807      	bhi.n	30ade <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   30ace:	2300      	movs	r3, #0
   30ad0:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   30ad2:	4629      	mov	r1, r5
   30ad4:	4620      	mov	r0, r4
   30ad6:	f7ff fa2f 	bl	2ff38 <send_frag>
	if (!send_buf(conn, buf)) {
   30ada:	b130      	cbz	r0, 30aea <bt_conn_process_tx+0x72>
}
   30adc:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   30ade:	4629      	mov	r1, r5
   30ae0:	4620      	mov	r0, r4
   30ae2:	f7ff ff93 	bl	30a0c <create_frag>
	if (!frag) {
   30ae6:	4601      	mov	r1, r0
   30ae8:	b920      	cbnz	r0, 30af4 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   30aea:	4628      	mov	r0, r5
}
   30aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   30af0:	f013 bae0 	b.w	440b4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   30af4:	2301      	movs	r3, #1
   30af6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   30af8:	4620      	mov	r0, r4
   30afa:	f7ff fa1d 	bl	2ff38 <send_frag>
   30afe:	2800      	cmp	r0, #0
   30b00:	d0f3      	beq.n	30aea <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   30b02:	89aa      	ldrh	r2, [r5, #12]
   30b04:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   30b08:	429a      	cmp	r2, r3
   30b0a:	d802      	bhi.n	30b12 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   30b0c:	2300      	movs	r3, #0
   30b0e:	2203      	movs	r2, #3
   30b10:	e7df      	b.n	30ad2 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   30b12:	4629      	mov	r1, r5
   30b14:	4620      	mov	r0, r4
   30b16:	f7ff ff79 	bl	30a0c <create_frag>
		if (!frag) {
   30b1a:	4601      	mov	r1, r0
   30b1c:	2800      	cmp	r0, #0
   30b1e:	d0e4      	beq.n	30aea <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   30b20:	2301      	movs	r3, #1
   30b22:	461a      	mov	r2, r3
   30b24:	e7e8      	b.n	30af8 <bt_conn_process_tx+0x80>
   30b26:	bf00      	nop
   30b28:	00056a8e 	.word	0x00056a8e
   30b2c:	0005696f 	.word	0x0005696f
   30b30:	00056952 	.word	0x00056952
   30b34:	20000040 	.word	0x20000040

00030b38 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   30b38:	4b0c      	ldr	r3, [pc, #48]	; (30b6c <bt_conn_auth_cb_register+0x34>)
   30b3a:	b908      	cbnz	r0, 30b40 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   30b3c:	6018      	str	r0, [r3, #0]
		return 0;
   30b3e:	4770      	bx	lr
	}

	if (bt_auth) {
   30b40:	681a      	ldr	r2, [r3, #0]
   30b42:	b962      	cbnz	r2, 30b5e <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   30b44:	6942      	ldr	r2, [r0, #20]
   30b46:	b93a      	cbnz	r2, 30b58 <bt_conn_auth_cb_register+0x20>
   30b48:	6842      	ldr	r2, [r0, #4]
   30b4a:	b95a      	cbnz	r2, 30b64 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   30b4c:	6882      	ldr	r2, [r0, #8]
   30b4e:	b94a      	cbnz	r2, 30b64 <bt_conn_auth_cb_register+0x2c>
   30b50:	68c2      	ldr	r2, [r0, #12]
   30b52:	b93a      	cbnz	r2, 30b64 <bt_conn_auth_cb_register+0x2c>
   30b54:	6982      	ldr	r2, [r0, #24]
   30b56:	b92a      	cbnz	r2, 30b64 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   30b58:	6018      	str	r0, [r3, #0]
	return 0;
   30b5a:	2000      	movs	r0, #0
   30b5c:	4770      	bx	lr
		return -EALREADY;
   30b5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   30b62:	4770      	bx	lr
		return -EINVAL;
   30b64:	f06f 0015 	mvn.w	r0, #21
}
   30b68:	4770      	bx	lr
   30b6a:	bf00      	nop
   30b6c:	20004984 	.word	0x20004984

00030b70 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   30b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   30b72:	4917      	ldr	r1, [pc, #92]	; (30bd0 <bt_conn_init+0x60>)
   30b74:	4817      	ldr	r0, [pc, #92]	; (30bd4 <bt_conn_init+0x64>)
   30b76:	f020 fdff 	bl	51778 <k_queue_append>
   30b7a:	4917      	ldr	r1, [pc, #92]	; (30bd8 <bt_conn_init+0x68>)
   30b7c:	4815      	ldr	r0, [pc, #84]	; (30bd4 <bt_conn_init+0x64>)
   30b7e:	f020 fdfb 	bl	51778 <k_queue_append>
   30b82:	4916      	ldr	r1, [pc, #88]	; (30bdc <bt_conn_init+0x6c>)
   30b84:	4813      	ldr	r0, [pc, #76]	; (30bd4 <bt_conn_init+0x64>)
   30b86:	f020 fdf7 	bl	51778 <k_queue_append>
	}

	bt_att_init();
   30b8a:	f01d fcb3 	bl	4e4f4 <bt_att_init>

	err = bt_smp_init();
   30b8e:	f003 fad3 	bl	34138 <bt_smp_init>
	if (err) {
   30b92:	4605      	mov	r5, r0
   30b94:	b9d0      	cbnz	r0, 30bcc <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   30b96:	f01d f879 	bl	4dc8c <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30b9a:	4f11      	ldr	r7, [pc, #68]	; (30be0 <bt_conn_init+0x70>)
   30b9c:	462e      	mov	r6, r5
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   30b9e:	4638      	mov	r0, r7
   30ba0:	f01c fdad 	bl	4d6fe <bt_conn_ref>

			if (!conn) {
   30ba4:	4604      	mov	r4, r0
   30ba6:	b160      	cbz	r0, 30bc2 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   30ba8:	3004      	adds	r0, #4
   30baa:	f01c fcf9 	bl	4d5a0 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   30bae:	07c3      	lsls	r3, r0, #31
   30bb0:	d504      	bpl.n	30bbc <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   30bb2:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   30bb4:	2102      	movs	r1, #2
   30bb6:	4620      	mov	r0, r4
   30bb8:	f7ff faf8 	bl	301ac <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   30bbc:	4620      	mov	r0, r4
   30bbe:	f01c fdb9 	bl	4d734 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30bc2:	3601      	adds	r6, #1
   30bc4:	2e06      	cmp	r6, #6
   30bc6:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   30bca:	d1e8      	bne.n	30b9e <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   30bcc:	4628      	mov	r0, r5
   30bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30bd0:	2000498c 	.word	0x2000498c
   30bd4:	200014fc 	.word	0x200014fc
   30bd8:	2000499c 	.word	0x2000499c
   30bdc:	200049ac 	.word	0x200049ac
   30be0:	20001d38 	.word	0x20001d38

00030be4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   30be4:	4b09      	ldr	r3, [pc, #36]	; (30c0c <l2cap_accept+0x28>)
{
   30be6:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   30be8:	2200      	movs	r2, #0
   30bea:	25e8      	movs	r5, #232	; 0xe8
		if (l2cap->chan.chan.conn) {
   30bec:	fb05 f402 	mul.w	r4, r5, r2
   30bf0:	58e0      	ldr	r0, [r4, r3]
   30bf2:	b128      	cbz	r0, 30c00 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   30bf4:	3201      	adds	r2, #1
   30bf6:	2a06      	cmp	r2, #6
   30bf8:	d1f8      	bne.n	30bec <l2cap_accept+0x8>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   30bfa:	f06f 000b 	mvn.w	r0, #11
}
   30bfe:	bd30      	pop	{r4, r5, pc}
		l2cap->chan.chan.ops = &ops;
   30c00:	4423      	add	r3, r4
   30c02:	4a03      	ldr	r2, [pc, #12]	; (30c10 <l2cap_accept+0x2c>)
   30c04:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   30c06:	600b      	str	r3, [r1, #0]
		return 0;
   30c08:	e7f9      	b.n	30bfe <l2cap_accept+0x1a>
   30c0a:	bf00      	nop
   30c0c:	200021b8 	.word	0x200021b8
   30c10:	00054e0c 	.word	0x00054e0c

00030c14 <bt_l2cap_connected>:
{
   30c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30c18:	4e29      	ldr	r6, [pc, #164]	; (30cc0 <bt_l2cap_connected+0xac>)
   30c1a:	4f2a      	ldr	r7, [pc, #168]	; (30cc4 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30c1c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 30cc8 <bt_l2cap_connected+0xb4>
{
   30c20:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30c22:	42be      	cmp	r6, r7
   30c24:	d302      	bcc.n	30c2c <bt_l2cap_connected+0x18>
}
   30c26:	b003      	add	sp, #12
   30c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   30c2c:	6873      	ldr	r3, [r6, #4]
   30c2e:	a901      	add	r1, sp, #4
   30c30:	4620      	mov	r0, r4
   30c32:	4798      	blx	r3
   30c34:	2800      	cmp	r0, #0
   30c36:	db3d      	blt.n	30cb4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   30c38:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   30c3a:	8833      	ldrh	r3, [r6, #0]
   30c3c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   30c40:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30c44:	4641      	mov	r1, r8
   30c46:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   30c4a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30c4e:	f020 fe9a 	bl	51986 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   30c52:	f3bf 8f5b 	dmb	ish
   30c56:	f105 0368 	add.w	r3, r5, #104	; 0x68
   30c5a:	2200      	movs	r2, #0
   30c5c:	e853 1f00 	ldrex	r1, [r3]
   30c60:	e843 2000 	strex	r0, r2, [r3]
   30c64:	2800      	cmp	r0, #0
   30c66:	d1f9      	bne.n	30c5c <bt_l2cap_connected+0x48>
   30c68:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   30c6c:	60aa      	str	r2, [r5, #8]
	return list->tail;
   30c6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   30c70:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   30c74:	bb02      	cbnz	r2, 30cb8 <bt_l2cap_connected+0xa4>
	list->head = node;
   30c76:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   30c7a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   30c7c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   30c7e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   30c80:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   30c84:	681b      	ldr	r3, [r3, #0]
   30c86:	b103      	cbz	r3, 30c8a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   30c88:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30c8a:	9b01      	ldr	r3, [sp, #4]
   30c8c:	f3bf 8f5b 	dmb	ish
   30c90:	3368      	adds	r3, #104	; 0x68
   30c92:	e853 2f00 	ldrex	r2, [r3]
   30c96:	f042 0201 	orr.w	r2, r2, #1
   30c9a:	e843 2100 	strex	r1, r2, [r3]
   30c9e:	2900      	cmp	r1, #0
   30ca0:	d1f7      	bne.n	30c92 <bt_l2cap_connected+0x7e>
   30ca2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   30ca6:	9801      	ldr	r0, [sp, #4]
   30ca8:	6843      	ldr	r3, [r0, #4]
   30caa:	699b      	ldr	r3, [r3, #24]
   30cac:	b113      	cbz	r3, 30cb4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   30cae:	f100 0168 	add.w	r1, r0, #104	; 0x68
   30cb2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30cb4:	360c      	adds	r6, #12
   30cb6:	e7b4      	b.n	30c22 <bt_l2cap_connected+0xe>
	parent->next = child;
   30cb8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   30cba:	6563      	str	r3, [r4, #84]	; 0x54
}
   30cbc:	e7dd      	b.n	30c7a <bt_l2cap_connected+0x66>
   30cbe:	bf00      	nop
   30cc0:	000527fc 	.word	0x000527fc
   30cc4:	00052820 	.word	0x00052820
   30cc8:	0004da83 	.word	0x0004da83

00030ccc <bt_l2cap_update_conn_param>:
{
   30ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30cce:	460d      	mov	r5, r1
	ident++;
   30cd0:	4916      	ldr	r1, [pc, #88]	; (30d2c <bt_l2cap_update_conn_param+0x60>)
   30cd2:	780b      	ldrb	r3, [r1, #0]
   30cd4:	3301      	adds	r3, #1
	if (!ident) {
   30cd6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   30cda:	bf08      	it	eq
   30cdc:	2301      	moveq	r3, #1
   30cde:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   30ce0:	7809      	ldrb	r1, [r1, #0]
{
   30ce2:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   30ce4:	2208      	movs	r2, #8
   30ce6:	2012      	movs	r0, #18
   30ce8:	f01c fe82 	bl	4d9f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   30cec:	4604      	mov	r4, r0
   30cee:	b1d0      	cbz	r0, 30d26 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   30cf0:	2108      	movs	r1, #8
   30cf2:	4408      	add	r0, r1
   30cf4:	f01f fd08 	bl	50708 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   30cf8:	882b      	ldrh	r3, [r5, #0]
   30cfa:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   30cfc:	886b      	ldrh	r3, [r5, #2]
   30cfe:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   30d00:	88ab      	ldrh	r3, [r5, #4]
   30d02:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   30d04:	88eb      	ldrh	r3, [r5, #6]
   30d06:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   30d08:	2300      	movs	r3, #0
   30d0a:	9300      	str	r3, [sp, #0]
   30d0c:	4622      	mov	r2, r4
   30d0e:	2105      	movs	r1, #5
   30d10:	4630      	mov	r0, r6
   30d12:	f01c feec 	bl	4daee <bt_l2cap_send_cb>
	if (err) {
   30d16:	4605      	mov	r5, r0
   30d18:	b110      	cbz	r0, 30d20 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   30d1a:	4620      	mov	r0, r4
   30d1c:	f013 f9ca 	bl	440b4 <net_buf_unref>
}
   30d20:	4628      	mov	r0, r5
   30d22:	b002      	add	sp, #8
   30d24:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   30d26:	f06f 050b 	mvn.w	r5, #11
   30d2a:	e7f9      	b.n	30d20 <bt_l2cap_update_conn_param+0x54>
   30d2c:	20007787 	.word	0x20007787

00030d30 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   30d30:	4b02      	ldr	r3, [pc, #8]	; (30d3c <att_cfm_sent+0xc>)
   30d32:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   30d36:	f01c bfbc 	b.w	4dcb2 <att_sent>
   30d3a:	bf00      	nop
   30d3c:	0004e265 	.word	0x0004e265

00030d40 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   30d40:	4b02      	ldr	r3, [pc, #8]	; (30d4c <att_rsp_sent+0xc>)
   30d42:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   30d46:	f01c bfb4 	b.w	4dcb2 <att_sent>
   30d4a:	bf00      	nop
   30d4c:	0004e249 	.word	0x0004e249

00030d50 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   30d50:	4b02      	ldr	r3, [pc, #8]	; (30d5c <att_req_sent+0xc>)
   30d52:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   30d56:	f01c bfac 	b.w	4dcb2 <att_sent>
   30d5a:	bf00      	nop
   30d5c:	0004dffd 	.word	0x0004dffd

00030d60 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   30d60:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   30d62:	3808      	subs	r0, #8
   30d64:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   30d66:	a901      	add	r1, sp, #4
   30d68:	4802      	ldr	r0, [pc, #8]	; (30d74 <bt_att_released+0x14>)
   30d6a:	f020 fc3f 	bl	515ec <k_mem_slab_free>
}
   30d6e:	b003      	add	sp, #12
   30d70:	f85d fb04 	ldr.w	pc, [sp], #4
   30d74:	200012ec 	.word	0x200012ec

00030d78 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   30d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   30d7a:	2300      	movs	r3, #0
{
   30d7c:	4607      	mov	r7, r0
   30d7e:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   30d80:	481e      	ldr	r0, [pc, #120]	; (30dfc <bt_att_accept+0x84>)
   30d82:	2200      	movs	r2, #0
   30d84:	4669      	mov	r1, sp
   30d86:	f017 faf3 	bl	48370 <k_mem_slab_alloc>
   30d8a:	4604      	mov	r4, r0
   30d8c:	b120      	cbz	r0, 30d98 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   30d8e:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   30d92:	4620      	mov	r0, r4
   30d94:	b003      	add	sp, #12
   30d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   30d98:	4601      	mov	r1, r0
   30d9a:	222c      	movs	r2, #44	; 0x2c
   30d9c:	9800      	ldr	r0, [sp, #0]
   30d9e:	f01b fc95 	bl	4c6cc <memset>
	att->conn = conn;
   30da2:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   30da4:	4816      	ldr	r0, [pc, #88]	; (30e00 <bt_att_accept+0x88>)
	list->tail = NULL;
   30da6:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   30da8:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   30dac:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   30db0:	2200      	movs	r2, #0
   30db2:	2300      	movs	r3, #0
   30db4:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   30db6:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   30db8:	f017 fada 	bl	48370 <k_mem_slab_alloc>
   30dbc:	4604      	mov	r4, r0
   30dbe:	2800      	cmp	r0, #0
   30dc0:	d1e5      	bne.n	30d8e <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   30dc2:	4601      	mov	r1, r0
   30dc4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   30dc8:	9801      	ldr	r0, [sp, #4]
   30dca:	f01b fc7f 	bl	4c6cc <memset>
	chan->chan.chan.ops = &ops;
   30dce:	9801      	ldr	r0, [sp, #4]
   30dd0:	4b0c      	ldr	r3, [pc, #48]	; (30e04 <bt_att_accept+0x8c>)
   30dd2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   30dd4:	30f8      	adds	r0, #248	; 0xf8
   30dd6:	f020 fcc3 	bl	51760 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   30dda:	9b01      	ldr	r3, [sp, #4]
   30ddc:	f3bf 8f5b 	dmb	ish
   30de0:	33f0      	adds	r3, #240	; 0xf0
   30de2:	e853 2f00 	ldrex	r2, [r3]
   30de6:	e843 4100 	strex	r1, r4, [r3]
   30dea:	2900      	cmp	r1, #0
   30dec:	d1f9      	bne.n	30de2 <bt_att_accept+0x6a>
   30dee:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   30df2:	9b01      	ldr	r3, [sp, #4]
   30df4:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   30df8:	6033      	str	r3, [r6, #0]
	return 0;
   30dfa:	e7ca      	b.n	30d92 <bt_att_accept+0x1a>
   30dfc:	200012d0 	.word	0x200012d0
   30e00:	200012ec 	.word	0x200012ec
   30e04:	200009b8 	.word	0x200009b8

00030e08 <read_group_cb>:
{
   30e08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30e0c:	4605      	mov	r5, r0
   30e0e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30e10:	f04f 0800 	mov.w	r8, #0
   30e14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30e18:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   30e1a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30e1c:	f88d 8008 	strb.w	r8, [sp, #8]
   30e20:	a902      	add	r1, sp, #8
{
   30e22:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30e24:	f8ad 300a 	strh.w	r3, [sp, #10]
   30e28:	f01b fd33 	bl	4c892 <bt_uuid_cmp>
   30e2c:	b1a0      	cbz	r0, 30e58 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   30e2e:	f642 0301 	movw	r3, #10241	; 0x2801
   30e32:	6828      	ldr	r0, [r5, #0]
   30e34:	f88d 800c 	strb.w	r8, [sp, #12]
   30e38:	a903      	add	r1, sp, #12
   30e3a:	f8ad 300e 	strh.w	r3, [sp, #14]
   30e3e:	f01b fd28 	bl	4c892 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30e42:	b148      	cbz	r0, 30e58 <read_group_cb+0x50>
		if (data->group &&
   30e44:	6923      	ldr	r3, [r4, #16]
   30e46:	b11b      	cbz	r3, 30e50 <read_group_cb+0x48>
   30e48:	885a      	ldrh	r2, [r3, #2]
   30e4a:	42b2      	cmp	r2, r6
   30e4c:	d200      	bcs.n	30e50 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   30e4e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   30e50:	2001      	movs	r0, #1
}
   30e52:	b004      	add	sp, #16
   30e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30e58:	6861      	ldr	r1, [r4, #4]
   30e5a:	6828      	ldr	r0, [r5, #0]
   30e5c:	f01b fd19 	bl	4c892 <bt_uuid_cmp>
   30e60:	b110      	cbz	r0, 30e68 <read_group_cb+0x60>
		data->group = NULL;
   30e62:	2300      	movs	r3, #0
   30e64:	6123      	str	r3, [r4, #16]
   30e66:	e7f3      	b.n	30e50 <read_group_cb+0x48>
	if (data->rsp->len &&
   30e68:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   30e6a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   30e6c:	781a      	ldrb	r2, [r3, #0]
   30e6e:	b13a      	cbz	r2, 30e80 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   30e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   30e74:	8981      	ldrh	r1, [r0, #12]
   30e76:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   30e78:	4293      	cmp	r3, r2
   30e7a:	da01      	bge.n	30e80 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   30e7c:	2000      	movs	r0, #0
   30e7e:	e7e8      	b.n	30e52 <read_group_cb+0x4a>
   30e80:	2104      	movs	r1, #4
   30e82:	3008      	adds	r0, #8
   30e84:	f01f fc40 	bl	50708 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30e88:	4b09      	ldr	r3, [pc, #36]	; (30eb0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   30e8a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30e8c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   30e8e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   30e90:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30e92:	4629      	mov	r1, r5
   30e94:	9300      	str	r3, [sp, #0]
   30e96:	9401      	str	r4, [sp, #4]
   30e98:	2300      	movs	r3, #0
   30e9a:	4638      	mov	r0, r7
   30e9c:	f01d f8eb 	bl	4e076 <att_chan_read>
	if (read < 0) {
   30ea0:	2800      	cmp	r0, #0
   30ea2:	dbeb      	blt.n	30e7c <read_group_cb+0x74>
	if (!data->group) {
   30ea4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   30ea6:	3800      	subs	r0, #0
   30ea8:	bf18      	it	ne
   30eaa:	2001      	movne	r0, #1
   30eac:	e7d1      	b.n	30e52 <read_group_cb+0x4a>
   30eae:	bf00      	nop
   30eb0:	0004dfb1 	.word	0x0004dfb1

00030eb4 <chan_send>:
{
   30eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   30eb8:	688b      	ldr	r3, [r1, #8]
   30eba:	781b      	ldrb	r3, [r3, #0]
   30ebc:	2bd2      	cmp	r3, #210	; 0xd2
{
   30ebe:	4606      	mov	r6, r0
   30ec0:	460c      	mov	r4, r1
   30ec2:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   30ec4:	d10c      	bne.n	30ee0 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   30ec6:	6803      	ldr	r3, [r0, #0]
   30ec8:	6818      	ldr	r0, [r3, #0]
   30eca:	f01f f8fa 	bl	500c2 <bt_smp_sign>
		if (err) {
   30ece:	4605      	mov	r5, r0
   30ed0:	b130      	cbz	r0, 30ee0 <chan_send+0x2c>
			net_buf_unref(buf);
   30ed2:	4620      	mov	r0, r4
   30ed4:	f013 f8ee 	bl	440b4 <net_buf_unref>
}
   30ed8:	4628      	mov	r0, r5
   30eda:	b003      	add	sp, #12
   30edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   30ee0:	f104 0008 	add.w	r0, r4, #8
   30ee4:	f01f fc59 	bl	5079a <net_buf_simple_headroom>
	state->len = buf->len;
   30ee8:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   30eec:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   30eee:	b957      	cbnz	r7, 30f06 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   30ef0:	68a3      	ldr	r3, [r4, #8]
   30ef2:	7818      	ldrb	r0, [r3, #0]
   30ef4:	f01c fef5 	bl	4dce2 <att_op_get_type>
   30ef8:	3801      	subs	r0, #1
   30efa:	b2c0      	uxtb	r0, r0
   30efc:	2804      	cmp	r0, #4
   30efe:	bf9c      	itt	ls
   30f00:	4b13      	ldrls	r3, [pc, #76]	; (30f50 <chan_send+0x9c>)
   30f02:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30f06:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   30f08:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30f0c:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   30f0e:	4b11      	ldr	r3, [pc, #68]	; (30f54 <chan_send+0xa0>)
   30f10:	429f      	cmp	r7, r3
   30f12:	d018      	beq.n	30f46 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   30f14:	4b10      	ldr	r3, [pc, #64]	; (30f58 <chan_send+0xa4>)
   30f16:	429f      	cmp	r7, r3
   30f18:	d017      	beq.n	30f4a <chan_send+0x96>
		return att_sent;
   30f1a:	4910      	ldr	r1, [pc, #64]	; (30f5c <chan_send+0xa8>)
   30f1c:	4b10      	ldr	r3, [pc, #64]	; (30f60 <chan_send+0xac>)
   30f1e:	4a11      	ldr	r2, [pc, #68]	; (30f64 <chan_send+0xb0>)
   30f20:	428f      	cmp	r7, r1
   30f22:	bf18      	it	ne
   30f24:	4613      	movne	r3, r2
			       &chan->chan.chan);
   30f26:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30f28:	9600      	str	r6, [sp, #0]
   30f2a:	4622      	mov	r2, r4
   30f2c:	2104      	movs	r1, #4
   30f2e:	f01c fdde 	bl	4daee <bt_l2cap_send_cb>
	if (err) {
   30f32:	4605      	mov	r5, r0
   30f34:	2800      	cmp	r0, #0
   30f36:	d0cf      	beq.n	30ed8 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   30f38:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   30f3a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   30f3e:	fa10 f088 	uxtah	r0, r0, r8
   30f42:	60a0      	str	r0, [r4, #8]
}
   30f44:	e7c8      	b.n	30ed8 <chan_send+0x24>
		return att_rsp_sent;
   30f46:	4b08      	ldr	r3, [pc, #32]	; (30f68 <chan_send+0xb4>)
   30f48:	e7ed      	b.n	30f26 <chan_send+0x72>
		return att_cfm_sent;
   30f4a:	4b08      	ldr	r3, [pc, #32]	; (30f6c <chan_send+0xb8>)
   30f4c:	e7eb      	b.n	30f26 <chan_send+0x72>
   30f4e:	bf00      	nop
   30f50:	00054e30 	.word	0x00054e30
   30f54:	0004e249 	.word	0x0004e249
   30f58:	0004e265 	.word	0x0004e265
   30f5c:	0004dffd 	.word	0x0004dffd
   30f60:	00030d51 	.word	0x00030d51
   30f64:	0004dcb3 	.word	0x0004dcb3
   30f68:	00030d41 	.word	0x00030d41
   30f6c:	00030d31 	.word	0x00030d31

00030f70 <read_type_cb>:
{
   30f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   30f74:	f8d2 8000 	ldr.w	r8, [r2]
{
   30f78:	4606      	mov	r6, r0
   30f7a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30f7c:	6800      	ldr	r0, [r0, #0]
   30f7e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   30f80:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   30f84:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30f86:	f01b fc84 	bl	4c892 <bt_uuid_cmp>
   30f8a:	4607      	mov	r7, r0
   30f8c:	2800      	cmp	r0, #0
   30f8e:	d13e      	bne.n	3100e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30f90:	4628      	mov	r0, r5
   30f92:	2215      	movs	r2, #21
   30f94:	4631      	mov	r1, r6
   30f96:	f01e f85a 	bl	4f04e <bt_gatt_check_perm>
   30f9a:	4605      	mov	r5, r0
   30f9c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   30f9e:	b148      	cbz	r0, 30fb4 <read_type_cb+0x44>
		if (data->rsp->len) {
   30fa0:	68e3      	ldr	r3, [r4, #12]
   30fa2:	781b      	ldrb	r3, [r3, #0]
   30fa4:	b923      	cbnz	r3, 30fb0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   30fa6:	2500      	movs	r5, #0
}
   30fa8:	4628      	mov	r0, r5
   30faa:	b003      	add	sp, #12
   30fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   30fb0:	7527      	strb	r7, [r4, #20]
   30fb2:	e7f8      	b.n	30fa6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   30fb4:	68a0      	ldr	r0, [r4, #8]
   30fb6:	f01f fb79 	bl	506ac <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   30fba:	2102      	movs	r1, #2
   30fbc:	3008      	adds	r0, #8
   30fbe:	f01f fba3 	bl	50708 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   30fc2:	4b14      	ldr	r3, [pc, #80]	; (31014 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   30fc4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   30fc6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   30fc8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   30fcc:	4631      	mov	r1, r6
   30fce:	9300      	str	r3, [sp, #0]
   30fd0:	9401      	str	r4, [sp, #4]
   30fd2:	462b      	mov	r3, r5
   30fd4:	4640      	mov	r0, r8
   30fd6:	f01d f84e 	bl	4e076 <att_chan_read>
	if (read < 0) {
   30fda:	2800      	cmp	r0, #0
   30fdc:	da07      	bge.n	30fee <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   30fde:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   30fe2:	bf26      	itte	cs
   30fe4:	4240      	negcs	r0, r0
   30fe6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   30fe8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   30fea:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   30fec:	e7dc      	b.n	30fa8 <read_type_cb+0x38>
	if (!data->item) {
   30fee:	6923      	ldr	r3, [r4, #16]
   30ff0:	2b00      	cmp	r3, #0
   30ff2:	d0d8      	beq.n	30fa6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   30ff4:	68a0      	ldr	r0, [r4, #8]
   30ff6:	f01c fe54 	bl	4dca2 <net_buf_frags_len>
   30ffa:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   30ffe:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   31000:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   31002:	7818      	ldrb	r0, [r3, #0]
   31004:	4285      	cmp	r5, r0
   31006:	bf94      	ite	ls
   31008:	2500      	movls	r5, #0
   3100a:	2501      	movhi	r5, #1
   3100c:	e7cc      	b.n	30fa8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   3100e:	2501      	movs	r5, #1
   31010:	e7ca      	b.n	30fa8 <read_type_cb+0x38>
   31012:	bf00      	nop
   31014:	0004dcbf 	.word	0x0004dcbf

00031018 <bt_att_connected>:
{
   31018:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   3101a:	4606      	mov	r6, r0
{
   3101c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   3101e:	2104      	movs	r1, #4
   31020:	f856 0908 	ldr.w	r0, [r6], #-8
   31024:	f01c fe01 	bl	4dc2a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   31028:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   3102c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3102e:	b91b      	cbnz	r3, 31038 <bt_att_connected+0x20>
   31030:	f105 000c 	add.w	r0, r5, #12
   31034:	f020 fb94 	bl	51760 <z_impl_k_queue_init>
	parent->next = child;
   31038:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   3103a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   3103e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   31040:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   31044:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   31046:	b902      	cbnz	r2, 3104a <bt_att_connected+0x32>
	list->tail = node;
   31048:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3104a:	f3bf 8f5b 	dmb	ish
   3104e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   31052:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   31056:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   31058:	bf58      	it	pl
   3105a:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   3105c:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   3105e:	bf5c      	itt	pl
   31060:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   31064:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   31068:	f01c fe81 	bl	4dd6e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   3106c:	f504 7084 	add.w	r0, r4, #264	; 0x108
   31070:	4902      	ldr	r1, [pc, #8]	; (3107c <bt_att_connected+0x64>)
}
   31072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   31076:	f020 bc86 	b.w	51986 <k_work_init_delayable>
   3107a:	bf00      	nop
   3107c:	0004e5e5 	.word	0x0004e5e5

00031080 <att_indicate>:
{
   31080:	b570      	push	{r4, r5, r6, lr}
   31082:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   31084:	f101 0008 	add.w	r0, r1, #8
   31088:	460d      	mov	r5, r1
   3108a:	f01f fb7e 	bl	5078a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   3108e:	6826      	ldr	r6, [r4, #0]
   31090:	89ab      	ldrh	r3, [r5, #12]
   31092:	68aa      	ldr	r2, [r5, #8]
   31094:	4601      	mov	r1, r0
   31096:	6830      	ldr	r0, [r6, #0]
   31098:	f01e faf5 	bl	4f686 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   3109c:	211e      	movs	r1, #30
   3109e:	2200      	movs	r2, #0
   310a0:	4620      	mov	r0, r4
   310a2:	f01d f9a0 	bl	4e3e6 <bt_att_chan_create_pdu>
	if (!buf) {
   310a6:	4601      	mov	r1, r0
   310a8:	b118      	cbz	r0, 310b2 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   310aa:	4a03      	ldr	r2, [pc, #12]	; (310b8 <att_indicate+0x38>)
   310ac:	4620      	mov	r0, r4
   310ae:	f01d f8a3 	bl	4e1f8 <bt_att_chan_send_rsp>
}
   310b2:	2000      	movs	r0, #0
   310b4:	bd70      	pop	{r4, r5, r6, pc}
   310b6:	bf00      	nop
   310b8:	0004e265 	.word	0x0004e265

000310bc <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   310bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   310c0:	4688      	mov	r8, r1
   310c2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   310c4:	2101      	movs	r1, #1
   310c6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   310c8:	4605      	mov	r5, r0
   310ca:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   310cc:	f01d f98b 	bl	4e3e6 <bt_att_chan_create_pdu>
	if (!buf) {
   310d0:	4604      	mov	r4, r0
   310d2:	b178      	cbz	r0, 310f4 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   310d4:	2104      	movs	r1, #4
   310d6:	3008      	adds	r0, #8
   310d8:	f01f fb16 	bl	50708 <net_buf_simple_add>
	rsp->request = req;
   310dc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   310e0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   310e2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   310e6:	4621      	mov	r1, r4
   310e8:	4628      	mov	r0, r5
   310ea:	4a03      	ldr	r2, [pc, #12]	; (310f8 <send_err_rsp.part.0+0x3c>)
}
   310ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   310f0:	f01d b882 	b.w	4e1f8 <bt_att_chan_send_rsp>
}
   310f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   310f8:	0004e249 	.word	0x0004e249

000310fc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   310fc:	898b      	ldrh	r3, [r1, #12]
{
   310fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31102:	4604      	mov	r4, r0
   31104:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   31106:	2b00      	cmp	r3, #0
   31108:	d060      	beq.n	311cc <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
   3110a:	2101      	movs	r1, #1
   3110c:	f105 0008 	add.w	r0, r5, #8
   31110:	f01f fb2b 	bl	5076a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   31114:	f854 3c08 	ldr.w	r3, [r4, #-8]
   31118:	4607      	mov	r7, r0
   3111a:	2b00      	cmp	r3, #0
   3111c:	d056      	beq.n	311cc <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
   3111e:	7801      	ldrb	r1, [r0, #0]
   31120:	4a2e      	ldr	r2, [pc, #184]	; (311dc <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   31122:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   31126:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   31128:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   3112c:	4288      	cmp	r0, r1
   3112e:	d11b      	bne.n	31168 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   31130:	00d9      	lsls	r1, r3, #3
   31132:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   31136:	f893 8002 	ldrb.w	r8, [r3, #2]
   3113a:	f1b8 0f01 	cmp.w	r8, #1
   3113e:	d023      	beq.n	31188 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
   31140:	f1b8 0f05 	cmp.w	r8, #5
   31144:	d131      	bne.n	311aa <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   31146:	f3bf 8f5b 	dmb	ish
   3114a:	34e8      	adds	r4, #232	; 0xe8
   3114c:	e854 3f00 	ldrex	r3, [r4]
   31150:	f043 0002 	orr.w	r0, r3, #2
   31154:	e844 0c00 	strex	ip, r0, [r4]
   31158:	f1bc 0f00 	cmp.w	ip, #0
   3115c:	d1f6      	bne.n	3114c <bt_att_recv+0x50>
   3115e:	f3bf 8f5b 	dmb	ish
   31162:	f013 0f02 	tst.w	r3, #2
   31166:	e01f      	b.n	311a8 <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   31168:	3301      	adds	r3, #1
   3116a:	2b1c      	cmp	r3, #28
   3116c:	d1dc      	bne.n	31128 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   3116e:	4608      	mov	r0, r1
   31170:	f01c fdb7 	bl	4dce2 <att_op_get_type>
   31174:	b350      	cbz	r0, 311cc <bt_att_recv+0xd0>
   31176:	2805      	cmp	r0, #5
   31178:	d028      	beq.n	311cc <bt_att_recv+0xd0>
	if (!req) {
   3117a:	b339      	cbz	r1, 311cc <bt_att_recv+0xd0>
   3117c:	2306      	movs	r3, #6
   3117e:	2200      	movs	r2, #0
   31180:	4630      	mov	r0, r6
   31182:	f7ff ff9b 	bl	310bc <send_err_rsp.part.0>
   31186:	e021      	b.n	311cc <bt_att_recv+0xd0>
   31188:	34e8      	adds	r4, #232	; 0xe8
   3118a:	f3bf 8f5b 	dmb	ish
   3118e:	e854 3f00 	ldrex	r3, [r4]
   31192:	f043 0001 	orr.w	r0, r3, #1
   31196:	e844 0c00 	strex	ip, r0, [r4]
   3119a:	f1bc 0f00 	cmp.w	ip, #0
   3119e:	d1f6      	bne.n	3118e <bt_att_recv+0x92>
   311a0:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   311a4:	f013 0f01 	tst.w	r3, #1
   311a8:	d110      	bne.n	311cc <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
   311aa:	440a      	add	r2, r1
   311ac:	89a9      	ldrh	r1, [r5, #12]
   311ae:	7853      	ldrb	r3, [r2, #1]
   311b0:	4299      	cmp	r1, r3
   311b2:	d30e      	bcc.n	311d2 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
   311b4:	6853      	ldr	r3, [r2, #4]
   311b6:	4629      	mov	r1, r5
   311b8:	4630      	mov	r0, r6
   311ba:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   311bc:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   311c0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   311c2:	d103      	bne.n	311cc <bt_att_recv+0xd0>
   311c4:	b110      	cbz	r0, 311cc <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
   311c6:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   311c8:	2900      	cmp	r1, #0
   311ca:	d1d8      	bne.n	3117e <bt_att_recv+0x82>
}
   311cc:	2000      	movs	r0, #0
   311ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   311d2:	f1b8 0f01 	cmp.w	r8, #1
   311d6:	d1f9      	bne.n	311cc <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
   311d8:	2304      	movs	r3, #4
   311da:	e7f4      	b.n	311c6 <bt_att_recv+0xca>
   311dc:	00054e44 	.word	0x00054e44

000311e0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   311e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   311e4:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   311e6:	6803      	ldr	r3, [r0, #0]
   311e8:	460e      	mov	r6, r1
   311ea:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   311ec:	b087      	sub	sp, #28
   311ee:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   311f0:	bf18      	it	ne
   311f2:	2101      	movne	r1, #1
   311f4:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   311f6:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   311f8:	f01e fab5 	bl	4f766 <bt_gatt_change_aware>
   311fc:	2800      	cmp	r0, #0
   311fe:	d04b      	beq.n	31298 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   31200:	2f00      	cmp	r7, #0
   31202:	d04b      	beq.n	3129c <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   31204:	2218      	movs	r2, #24
   31206:	2100      	movs	r1, #0
   31208:	4668      	mov	r0, sp
   3120a:	f01b fa5f 	bl	4c6cc <memset>
	if (rsp) {
   3120e:	f1b8 0f00 	cmp.w	r8, #0
   31212:	d122      	bne.n	3125a <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   31214:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   31216:	4a22      	ldr	r2, [pc, #136]	; (312a0 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   31218:	681b      	ldr	r3, [r3, #0]
   3121a:	9300      	str	r3, [sp, #0]
	data.value = value;
   3121c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3121e:	9303      	str	r3, [sp, #12]
	data.len = len;
   31220:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   31224:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   31228:	2301      	movs	r3, #1
   3122a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   3122e:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   31232:	466b      	mov	r3, sp
   31234:	4639      	mov	r1, r7
   31236:	4638      	mov	r0, r7
	data.req = req;
   31238:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   3123c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   31240:	f01c fdcb 	bl	4ddda <bt_gatt_foreach_attr>
	if (data.err) {
   31244:	f89d 4014 	ldrb.w	r4, [sp, #20]
   31248:	b1f4      	cbz	r4, 31288 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   3124a:	f1b8 0f00 	cmp.w	r8, #0
   3124e:	d10e      	bne.n	3126e <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   31250:	2400      	movs	r4, #0
}
   31252:	4620      	mov	r0, r4
   31254:	b007      	add	sp, #28
   31256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   3125a:	2200      	movs	r2, #0
   3125c:	4641      	mov	r1, r8
   3125e:	4628      	mov	r0, r5
   31260:	f01d f8c1 	bl	4e3e6 <bt_att_chan_create_pdu>
   31264:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   31266:	2800      	cmp	r0, #0
   31268:	d1d4      	bne.n	31214 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   3126a:	240e      	movs	r4, #14
   3126c:	e7f1      	b.n	31252 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   3126e:	9801      	ldr	r0, [sp, #4]
   31270:	f012 ff20 	bl	440b4 <net_buf_unref>
	if (!req) {
   31274:	2e00      	cmp	r6, #0
   31276:	d0eb      	beq.n	31250 <att_write_rsp.constprop.0+0x70>
   31278:	f89d 3014 	ldrb.w	r3, [sp, #20]
   3127c:	463a      	mov	r2, r7
   3127e:	4631      	mov	r1, r6
   31280:	4628      	mov	r0, r5
   31282:	f7ff ff1b 	bl	310bc <send_err_rsp.part.0>
   31286:	e7e3      	b.n	31250 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   31288:	9901      	ldr	r1, [sp, #4]
   3128a:	2900      	cmp	r1, #0
   3128c:	d0e0      	beq.n	31250 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   3128e:	4a05      	ldr	r2, [pc, #20]	; (312a4 <att_write_rsp.constprop.0+0xc4>)
   31290:	4628      	mov	r0, r5
   31292:	f01c ffb1 	bl	4e1f8 <bt_att_chan_send_rsp>
   31296:	e7dc      	b.n	31252 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   31298:	2412      	movs	r4, #18
   3129a:	e7da      	b.n	31252 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   3129c:	2401      	movs	r4, #1
   3129e:	e7d8      	b.n	31252 <att_write_rsp.constprop.0+0x72>
   312a0:	0004e013 	.word	0x0004e013
   312a4:	0004e249 	.word	0x0004e249

000312a8 <att_read_group_req>:
{
   312a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   312ac:	898c      	ldrh	r4, [r1, #12]
   312ae:	3c04      	subs	r4, #4
   312b0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   312b2:	2c02      	cmp	r4, #2
{
   312b4:	4605      	mov	r5, r0
   312b6:	b08c      	sub	sp, #48	; 0x30
   312b8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   312ba:	d001      	beq.n	312c0 <att_read_group_req+0x18>
   312bc:	2c10      	cmp	r4, #16
   312be:	d16f      	bne.n	313a0 <att_read_group_req+0xf8>
   312c0:	2104      	movs	r1, #4
   312c2:	3008      	adds	r0, #8
   312c4:	f01f fa51 	bl	5076a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   312c8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   312cc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   312ce:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   312d0:	1d01      	adds	r1, r0, #4
   312d2:	4622      	mov	r2, r4
   312d4:	4640      	mov	r0, r8
   312d6:	f01b fb0a 	bl	4c8ee <bt_uuid_create>
   312da:	2800      	cmp	r0, #0
   312dc:	d062      	beq.n	313a4 <att_read_group_req+0xfc>
	if (!start || !end) {
   312de:	2e00      	cmp	r6, #0
   312e0:	d03a      	beq.n	31358 <att_read_group_req+0xb0>
   312e2:	2400      	movs	r4, #0
   312e4:	2f00      	cmp	r7, #0
   312e6:	d036      	beq.n	31356 <att_read_group_req+0xae>
	if (start > end) {
   312e8:	42be      	cmp	r6, r7
   312ea:	d835      	bhi.n	31358 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   312ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   312f0:	a901      	add	r1, sp, #4
   312f2:	4640      	mov	r0, r8
   312f4:	f88d 4004 	strb.w	r4, [sp, #4]
   312f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   312fc:	f01b fac9 	bl	4c892 <bt_uuid_cmp>
   31300:	2800      	cmp	r0, #0
   31302:	d134      	bne.n	3136e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   31304:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   31306:	2214      	movs	r2, #20
   31308:	2100      	movs	r1, #0
   3130a:	a807      	add	r0, sp, #28
   3130c:	f01b f9de 	bl	4c6cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   31310:	2201      	movs	r2, #1
   31312:	2111      	movs	r1, #17
   31314:	4620      	mov	r0, r4
   31316:	f01d f8b1 	bl	4e47c <bt_att_create_pdu>
   3131a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   3131c:	2800      	cmp	r0, #0
   3131e:	d041      	beq.n	313a4 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   31320:	2101      	movs	r1, #1
   31322:	3008      	adds	r0, #8
	data.uuid = uuid;
   31324:	e9cd 5807 	strd	r5, r8, [sp, #28]
   31328:	f01f f9ee 	bl	50708 <net_buf_simple_add>
	data.rsp->len = 0U;
   3132c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   31330:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   31332:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   31334:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   31338:	4a1b      	ldr	r2, [pc, #108]	; (313a8 <att_read_group_req+0x100>)
	data.group = NULL;
   3133a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   3133e:	4639      	mov	r1, r7
   31340:	4630      	mov	r0, r6
   31342:	f01c fd4a 	bl	4ddda <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   31346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31348:	781c      	ldrb	r4, [r3, #0]
   3134a:	bb1c      	cbnz	r4, 31394 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   3134c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3134e:	f012 feb1 	bl	440b4 <net_buf_unref>
	if (!req) {
   31352:	230a      	movs	r3, #10
   31354:	e018      	b.n	31388 <att_read_group_req+0xe0>
			*err = 0U;
   31356:	463e      	mov	r6, r7
	if (!req) {
   31358:	2301      	movs	r3, #1
   3135a:	4632      	mov	r2, r6
   3135c:	2110      	movs	r1, #16
   3135e:	4628      	mov	r0, r5
   31360:	f7ff feac 	bl	310bc <send_err_rsp.part.0>
		return 0;
   31364:	2400      	movs	r4, #0
}
   31366:	4620      	mov	r0, r4
   31368:	b00c      	add	sp, #48	; 0x30
   3136a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   3136e:	f642 0301 	movw	r3, #10241	; 0x2801
   31372:	a907      	add	r1, sp, #28
   31374:	4640      	mov	r0, r8
   31376:	f88d 401c 	strb.w	r4, [sp, #28]
   3137a:	f8ad 301e 	strh.w	r3, [sp, #30]
   3137e:	f01b fa88 	bl	4c892 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   31382:	2800      	cmp	r0, #0
   31384:	d0be      	beq.n	31304 <att_read_group_req+0x5c>
	if (!req) {
   31386:	2310      	movs	r3, #16
   31388:	4632      	mov	r2, r6
   3138a:	2110      	movs	r1, #16
   3138c:	4628      	mov	r0, r5
   3138e:	f7ff fe95 	bl	310bc <send_err_rsp.part.0>
		return 0;
   31392:	e7e8      	b.n	31366 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   31394:	4a05      	ldr	r2, [pc, #20]	; (313ac <att_read_group_req+0x104>)
   31396:	9909      	ldr	r1, [sp, #36]	; 0x24
   31398:	4628      	mov	r0, r5
   3139a:	f01c ff2d 	bl	4e1f8 <bt_att_chan_send_rsp>
	return 0;
   3139e:	e7e1      	b.n	31364 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   313a0:	2404      	movs	r4, #4
   313a2:	e7e0      	b.n	31366 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   313a4:	240e      	movs	r4, #14
   313a6:	e7de      	b.n	31366 <att_read_group_req+0xbe>
   313a8:	00030e09 	.word	0x00030e09
   313ac:	0004e249 	.word	0x0004e249

000313b0 <att_read_mult_req>:
{
   313b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   313b4:	6886      	ldr	r6, [r0, #8]
{
   313b6:	b085      	sub	sp, #20
   313b8:	4604      	mov	r4, r0
   313ba:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   313bc:	4630      	mov	r0, r6
   313be:	2101      	movs	r1, #1
   313c0:	f01e f9d1 	bl	4f766 <bt_gatt_change_aware>
   313c4:	2800      	cmp	r0, #0
   313c6:	d038      	beq.n	3143a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   313c8:	2210      	movs	r2, #16
   313ca:	2100      	movs	r1, #0
   313cc:	4668      	mov	r0, sp
   313ce:	f01b f97d 	bl	4c6cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   313d2:	2200      	movs	r2, #0
   313d4:	210f      	movs	r1, #15
   313d6:	4630      	mov	r0, r6
   313d8:	f01d f850 	bl	4e47c <bt_att_create_pdu>
   313dc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   313de:	b370      	cbz	r0, 3143e <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   313e0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 31444 <att_read_mult_req+0x94>
	data.chan = chan;
   313e4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   313e6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   313ea:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   313ee:	89ab      	ldrh	r3, [r5, #12]
   313f0:	2b01      	cmp	r3, #1
   313f2:	d805      	bhi.n	31400 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   313f4:	4a14      	ldr	r2, [pc, #80]	; (31448 <att_read_mult_req+0x98>)
   313f6:	9902      	ldr	r1, [sp, #8]
   313f8:	4620      	mov	r0, r4
   313fa:	f01c fefd 	bl	4e1f8 <bt_att_chan_send_rsp>
   313fe:	e018      	b.n	31432 <att_read_mult_req+0x82>
   31400:	4638      	mov	r0, r7
   31402:	f01f f9c2 	bl	5078a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   31406:	466b      	mov	r3, sp
   31408:	464a      	mov	r2, r9
   3140a:	4601      	mov	r1, r0
   3140c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   3140e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   31412:	f01c fce2 	bl	4ddda <bt_gatt_foreach_attr>
		if (data.err) {
   31416:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3141a:	2b00      	cmp	r3, #0
   3141c:	d0e7      	beq.n	313ee <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   3141e:	9802      	ldr	r0, [sp, #8]
   31420:	f012 fe48 	bl	440b4 <net_buf_unref>
	if (!req) {
   31424:	f89d 300c 	ldrb.w	r3, [sp, #12]
   31428:	4632      	mov	r2, r6
   3142a:	210e      	movs	r1, #14
   3142c:	4620      	mov	r0, r4
   3142e:	f7ff fe45 	bl	310bc <send_err_rsp.part.0>
	return 0;
   31432:	2000      	movs	r0, #0
}
   31434:	b005      	add	sp, #20
   31436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   3143a:	2012      	movs	r0, #18
   3143c:	e7fa      	b.n	31434 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   3143e:	200e      	movs	r0, #14
   31440:	e7f8      	b.n	31434 <att_read_mult_req+0x84>
   31442:	bf00      	nop
   31444:	0004e281 	.word	0x0004e281
   31448:	0004e249 	.word	0x0004e249

0003144c <att_read_rsp>:
{
   3144c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   31450:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   31454:	4605      	mov	r5, r0
   31456:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   31458:	4640      	mov	r0, r8
   3145a:	2101      	movs	r1, #1
{
   3145c:	4614      	mov	r4, r2
   3145e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   31460:	f01e f981 	bl	4f766 <bt_gatt_change_aware>
   31464:	b390      	cbz	r0, 314cc <att_read_rsp+0x80>
	if (!handle) {
   31466:	b39e      	cbz	r6, 314d0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   31468:	2210      	movs	r2, #16
   3146a:	2100      	movs	r1, #0
   3146c:	4668      	mov	r0, sp
   3146e:	f01b f92d 	bl	4c6cc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   31472:	2200      	movs	r2, #0
   31474:	4621      	mov	r1, r4
   31476:	4640      	mov	r0, r8
   31478:	f01d f800 	bl	4e47c <bt_att_create_pdu>
   3147c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   3147e:	b348      	cbz	r0, 314d4 <att_read_rsp+0x88>
	data.offset = offset;
   31480:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   31484:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   31488:	2301      	movs	r3, #1
   3148a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3148e:	4a12      	ldr	r2, [pc, #72]	; (314d8 <att_read_rsp+0x8c>)
	data.chan = chan;
   31490:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   31492:	466b      	mov	r3, sp
   31494:	4631      	mov	r1, r6
   31496:	4630      	mov	r0, r6
   31498:	f01c fc9f 	bl	4ddda <bt_gatt_foreach_attr>
	if (data.err) {
   3149c:	f89d 400c 	ldrb.w	r4, [sp, #12]
   314a0:	b174      	cbz	r4, 314c0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   314a2:	9802      	ldr	r0, [sp, #8]
   314a4:	f012 fe06 	bl	440b4 <net_buf_unref>
	if (!req) {
   314a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   314ac:	4632      	mov	r2, r6
   314ae:	4639      	mov	r1, r7
   314b0:	4628      	mov	r0, r5
   314b2:	f7ff fe03 	bl	310bc <send_err_rsp.part.0>
		return 0;
   314b6:	2400      	movs	r4, #0
}
   314b8:	4620      	mov	r0, r4
   314ba:	b004      	add	sp, #16
   314bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   314c0:	4a06      	ldr	r2, [pc, #24]	; (314dc <att_read_rsp+0x90>)
   314c2:	9902      	ldr	r1, [sp, #8]
   314c4:	4628      	mov	r0, r5
   314c6:	f01c fe97 	bl	4e1f8 <bt_att_chan_send_rsp>
	return 0;
   314ca:	e7f5      	b.n	314b8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   314cc:	2412      	movs	r4, #18
   314ce:	e7f3      	b.n	314b8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   314d0:	2401      	movs	r4, #1
   314d2:	e7f1      	b.n	314b8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   314d4:	240e      	movs	r4, #14
   314d6:	e7ef      	b.n	314b8 <att_read_rsp+0x6c>
   314d8:	0004e281 	.word	0x0004e281
   314dc:	0004e249 	.word	0x0004e249

000314e0 <att_read_type_req>:
{
   314e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   314e4:	898c      	ldrh	r4, [r1, #12]
   314e6:	3c04      	subs	r4, #4
   314e8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   314ea:	2c02      	cmp	r4, #2
{
   314ec:	4605      	mov	r5, r0
   314ee:	b08c      	sub	sp, #48	; 0x30
   314f0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   314f2:	d001      	beq.n	314f8 <att_read_type_req+0x18>
   314f4:	2c10      	cmp	r4, #16
   314f6:	d150      	bne.n	3159a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   314f8:	2104      	movs	r1, #4
   314fa:	3008      	adds	r0, #8
   314fc:	f01f f935 	bl	5076a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   31500:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   31504:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   31506:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   31508:	1d01      	adds	r1, r0, #4
   3150a:	4622      	mov	r2, r4
   3150c:	4640      	mov	r0, r8
   3150e:	f01b f9ee 	bl	4c8ee <bt_uuid_create>
   31512:	b188      	cbz	r0, 31538 <att_read_type_req+0x58>
	if (!start || !end) {
   31514:	b19e      	cbz	r6, 3153e <att_read_type_req+0x5e>
   31516:	b18f      	cbz	r7, 3153c <att_read_type_req+0x5c>
	if (start > end) {
   31518:	42b7      	cmp	r7, r6
   3151a:	d310      	bcc.n	3153e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   3151c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   3151e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   31520:	2100      	movs	r1, #0
   31522:	eb0d 0002 	add.w	r0, sp, r2
   31526:	f01b f8d1 	bl	4c6cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   3152a:	2201      	movs	r2, #1
   3152c:	2109      	movs	r1, #9
   3152e:	4620      	mov	r0, r4
   31530:	f01c ffa4 	bl	4e47c <bt_att_create_pdu>
   31534:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   31536:	b968      	cbnz	r0, 31554 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   31538:	240e      	movs	r4, #14
   3153a:	e007      	b.n	3154c <att_read_type_req+0x6c>
			*err = 0U;
   3153c:	463e      	mov	r6, r7
	if (!req) {
   3153e:	2301      	movs	r3, #1
   31540:	4632      	mov	r2, r6
   31542:	2108      	movs	r1, #8
   31544:	4628      	mov	r0, r5
   31546:	f7ff fdb9 	bl	310bc <send_err_rsp.part.0>
		return 0;
   3154a:	2400      	movs	r4, #0
}
   3154c:	4620      	mov	r0, r4
   3154e:	b00c      	add	sp, #48	; 0x30
   31550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   31554:	2101      	movs	r1, #1
   31556:	3008      	adds	r0, #8
	data.uuid = uuid;
   31558:	e9cd 5806 	strd	r5, r8, [sp, #24]
   3155c:	f01f f8d4 	bl	50708 <net_buf_simple_add>
	data.rsp->len = 0U;
   31560:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   31564:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   31566:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   31568:	4a0d      	ldr	r2, [pc, #52]	; (315a0 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   3156a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   3156e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   31570:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   31574:	4630      	mov	r0, r6
   31576:	ab06      	add	r3, sp, #24
   31578:	f01c fc2f 	bl	4ddda <bt_gatt_foreach_attr>
	if (data.err) {
   3157c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   31580:	b12c      	cbz	r4, 3158e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   31582:	9808      	ldr	r0, [sp, #32]
   31584:	f012 fd96 	bl	440b4 <net_buf_unref>
	if (!req) {
   31588:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   3158c:	e7d8      	b.n	31540 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   3158e:	4a05      	ldr	r2, [pc, #20]	; (315a4 <att_read_type_req+0xc4>)
   31590:	9908      	ldr	r1, [sp, #32]
   31592:	4628      	mov	r0, r5
   31594:	f01c fe30 	bl	4e1f8 <bt_att_chan_send_rsp>
	return 0;
   31598:	e7d8      	b.n	3154c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   3159a:	2404      	movs	r4, #4
   3159c:	e7d6      	b.n	3154c <att_read_type_req+0x6c>
   3159e:	bf00      	nop
   315a0:	00030f71 	.word	0x00030f71
   315a4:	0004e249 	.word	0x0004e249

000315a8 <att_find_type_req>:
{
   315a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   315ac:	4688      	mov	r8, r1
   315ae:	b086      	sub	sp, #24
   315b0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   315b2:	2106      	movs	r1, #6
   315b4:	f108 0008 	add.w	r0, r8, #8
   315b8:	f01f f8d7 	bl	5076a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   315bc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   315be:	b317      	cbz	r7, 31606 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   315c0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   315c4:	f1b9 0f00 	cmp.w	r9, #0
   315c8:	d01c      	beq.n	31604 <att_find_type_req+0x5c>
	if (start > end) {
   315ca:	454f      	cmp	r7, r9
   315cc:	d81b      	bhi.n	31606 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   315ce:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   315d0:	f8ad 3002 	strh.w	r3, [sp, #2]
   315d4:	2400      	movs	r4, #0
   315d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   315da:	a901      	add	r1, sp, #4
   315dc:	4668      	mov	r0, sp
	value = buf->data;
   315de:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   315e2:	f88d 4000 	strb.w	r4, [sp]
   315e6:	f88d 4004 	strb.w	r4, [sp, #4]
   315ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   315ee:	f01b f950 	bl	4c892 <bt_uuid_cmp>
   315f2:	4606      	mov	r6, r0
   315f4:	b190      	cbz	r0, 3161c <att_find_type_req+0x74>
	if (!req) {
   315f6:	230a      	movs	r3, #10
   315f8:	463a      	mov	r2, r7
   315fa:	2106      	movs	r1, #6
   315fc:	4628      	mov	r0, r5
   315fe:	f7ff fd5d 	bl	310bc <send_err_rsp.part.0>
		return 0;
   31602:	e007      	b.n	31614 <att_find_type_req+0x6c>
			*err = 0U;
   31604:	464f      	mov	r7, r9
	if (!req) {
   31606:	2301      	movs	r3, #1
   31608:	463a      	mov	r2, r7
   3160a:	2106      	movs	r1, #6
   3160c:	4628      	mov	r0, r5
   3160e:	f7ff fd55 	bl	310bc <send_err_rsp.part.0>
		return 0;
   31612:	2400      	movs	r4, #0
}
   31614:	4620      	mov	r0, r4
   31616:	b006      	add	sp, #24
   31618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   3161c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   31620:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   31624:	4601      	mov	r1, r0
   31626:	2214      	movs	r2, #20
   31628:	a801      	add	r0, sp, #4
   3162a:	f01b f84f 	bl	4c6cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   3162e:	4632      	mov	r2, r6
   31630:	2107      	movs	r1, #7
   31632:	4640      	mov	r0, r8
   31634:	f01c ff22 	bl	4e47c <bt_att_create_pdu>
   31638:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   3163a:	b1e0      	cbz	r0, 31676 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   3163c:	230a      	movs	r3, #10
   3163e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31642:	4a0e      	ldr	r2, [pc, #56]	; (3167c <att_find_type_req+0xd4>)
	data.value_len = value_len;
   31644:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31648:	ab01      	add	r3, sp, #4
   3164a:	4649      	mov	r1, r9
   3164c:	4638      	mov	r0, r7
	data.value = value;
   3164e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   31652:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31654:	f01c fbc1 	bl	4ddda <bt_gatt_foreach_attr>
	if (data.err) {
   31658:	f89d 4015 	ldrb.w	r4, [sp, #21]
   3165c:	b12c      	cbz	r4, 3166a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   3165e:	9802      	ldr	r0, [sp, #8]
   31660:	f012 fd28 	bl	440b4 <net_buf_unref>
	if (!req) {
   31664:	f89d 3015 	ldrb.w	r3, [sp, #21]
   31668:	e7ce      	b.n	31608 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   3166a:	4a05      	ldr	r2, [pc, #20]	; (31680 <att_find_type_req+0xd8>)
   3166c:	9902      	ldr	r1, [sp, #8]
   3166e:	4628      	mov	r0, r5
   31670:	f01c fdc2 	bl	4e1f8 <bt_att_chan_send_rsp>
	return 0;
   31674:	e7ce      	b.n	31614 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   31676:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   31678:	e7cc      	b.n	31614 <att_find_type_req+0x6c>
   3167a:	bf00      	nop
   3167c:	0004ddf1 	.word	0x0004ddf1
   31680:	0004e249 	.word	0x0004e249

00031684 <att_find_info_req>:
{
   31684:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   31686:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   31688:	881e      	ldrh	r6, [r3, #0]
{
   3168a:	b085      	sub	sp, #20
   3168c:	4605      	mov	r5, r0
	if (!start || !end) {
   3168e:	b19e      	cbz	r6, 316b8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   31690:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   31692:	b184      	cbz	r4, 316b6 <att_find_info_req+0x32>
	if (start > end) {
   31694:	42b4      	cmp	r4, r6
   31696:	d30f      	bcc.n	316b8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   31698:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   3169a:	2210      	movs	r2, #16
   3169c:	2100      	movs	r1, #0
   3169e:	4668      	mov	r0, sp
   316a0:	f01b f814 	bl	4c6cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   316a4:	2200      	movs	r2, #0
   316a6:	2105      	movs	r1, #5
   316a8:	4638      	mov	r0, r7
   316aa:	f01c fee7 	bl	4e47c <bt_att_create_pdu>
   316ae:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   316b0:	b958      	cbnz	r0, 316ca <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   316b2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   316b4:	e007      	b.n	316c6 <att_find_info_req+0x42>
			*err = 0U;
   316b6:	4626      	mov	r6, r4
	if (!req) {
   316b8:	2301      	movs	r3, #1
   316ba:	4632      	mov	r2, r6
   316bc:	2104      	movs	r1, #4
   316be:	4628      	mov	r0, r5
   316c0:	f7ff fcfc 	bl	310bc <send_err_rsp.part.0>
	return 0;
   316c4:	2000      	movs	r0, #0
}
   316c6:	b005      	add	sp, #20
   316c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   316ca:	4621      	mov	r1, r4
   316cc:	4a09      	ldr	r2, [pc, #36]	; (316f4 <att_find_info_req+0x70>)
	data.chan = chan;
   316ce:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   316d0:	466b      	mov	r3, sp
   316d2:	4630      	mov	r0, r6
   316d4:	f01c fb81 	bl	4ddda <bt_gatt_foreach_attr>
	if (!data.rsp) {
   316d8:	9c02      	ldr	r4, [sp, #8]
   316da:	b924      	cbnz	r4, 316e6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   316dc:	9801      	ldr	r0, [sp, #4]
   316de:	f012 fce9 	bl	440b4 <net_buf_unref>
	if (!req) {
   316e2:	230a      	movs	r3, #10
   316e4:	e7e9      	b.n	316ba <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   316e6:	4a04      	ldr	r2, [pc, #16]	; (316f8 <att_find_info_req+0x74>)
   316e8:	9901      	ldr	r1, [sp, #4]
   316ea:	4628      	mov	r0, r5
   316ec:	f01c fd84 	bl	4e1f8 <bt_att_chan_send_rsp>
   316f0:	e7e8      	b.n	316c4 <att_find_info_req+0x40>
   316f2:	bf00      	nop
   316f4:	0004df19 	.word	0x0004df19
   316f8:	0004e249 	.word	0x0004e249

000316fc <att_mtu_req>:
{
   316fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   316fe:	6803      	ldr	r3, [r0, #0]
{
   31700:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   31702:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   31704:	f3bf 8f5b 	dmb	ish
   31708:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   3170c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   31710:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   31714:	071b      	lsls	r3, r3, #28
   31716:	d421      	bmi.n	3175c <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   31718:	688b      	ldr	r3, [r1, #8]
   3171a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   3171c:	2e16      	cmp	r6, #22
   3171e:	d91f      	bls.n	31760 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   31720:	2202      	movs	r2, #2
   31722:	2103      	movs	r1, #3
   31724:	f01c feaa 	bl	4e47c <bt_att_create_pdu>
	if (!pdu) {
   31728:	4607      	mov	r7, r0
   3172a:	b1d8      	cbz	r0, 31764 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   3172c:	2102      	movs	r1, #2
   3172e:	3008      	adds	r0, #8
   31730:	f01e ffea 	bl	50708 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   31734:	2341      	movs	r3, #65	; 0x41
   31736:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   31738:	4a0b      	ldr	r2, [pc, #44]	; (31768 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   3173a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   3173c:	4639      	mov	r1, r7
   3173e:	4620      	mov	r0, r4
   31740:	f01c fd5a 	bl	4e1f8 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   31744:	2e41      	cmp	r6, #65	; 0x41
   31746:	bf28      	it	cs
   31748:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   3174a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   3174c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   31750:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   31754:	f01c fb0b 	bl	4dd6e <att_chan_mtu_updated>
	return 0;
   31758:	4628      	mov	r0, r5
}
   3175a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   3175c:	2006      	movs	r0, #6
   3175e:	e7fc      	b.n	3175a <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   31760:	2004      	movs	r0, #4
   31762:	e7fa      	b.n	3175a <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   31764:	200e      	movs	r0, #14
   31766:	e7f8      	b.n	3175a <att_mtu_req+0x5e>
   31768:	0004e249 	.word	0x0004e249

0003176c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   3176c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   3176e:	2300      	movs	r3, #0
{
   31770:	4605      	mov	r5, r0
   31772:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   31774:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   31776:	f017 fd99 	bl	492ac <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   3177a:	4b0b      	ldr	r3, [pc, #44]	; (317a8 <bt_att_req_alloc+0x3c>)
   3177c:	681b      	ldr	r3, [r3, #0]
   3177e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   31780:	bf04      	itt	eq
   31782:	2500      	moveq	r5, #0
   31784:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   31786:	a901      	add	r1, sp, #4
   31788:	4808      	ldr	r0, [pc, #32]	; (317ac <bt_att_req_alloc+0x40>)
   3178a:	462a      	mov	r2, r5
   3178c:	4623      	mov	r3, r4
   3178e:	f016 fdef 	bl	48370 <k_mem_slab_alloc>
   31792:	4601      	mov	r1, r0
   31794:	b930      	cbnz	r0, 317a4 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   31796:	9801      	ldr	r0, [sp, #4]
   31798:	221c      	movs	r2, #28
   3179a:	f01a ff97 	bl	4c6cc <memset>

	return req;
   3179e:	9801      	ldr	r0, [sp, #4]
}
   317a0:	b003      	add	sp, #12
   317a2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   317a4:	2000      	movs	r0, #0
   317a6:	e7fb      	b.n	317a0 <bt_att_req_alloc+0x34>
   317a8:	2000494c 	.word	0x2000494c
   317ac:	20001324 	.word	0x20001324

000317b0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   317b0:	b507      	push	{r0, r1, r2, lr}
   317b2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   317b4:	6880      	ldr	r0, [r0, #8]
   317b6:	b120      	cbz	r0, 317c2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   317b8:	f012 fc7c 	bl	440b4 <net_buf_unref>
		req->buf = NULL;
   317bc:	9b01      	ldr	r3, [sp, #4]
   317be:	2200      	movs	r2, #0
   317c0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   317c2:	4803      	ldr	r0, [pc, #12]	; (317d0 <bt_att_req_free+0x20>)
   317c4:	a901      	add	r1, sp, #4
   317c6:	f01f ff11 	bl	515ec <k_mem_slab_free>
}
   317ca:	b003      	add	sp, #12
   317cc:	f85d fb04 	ldr.w	pc, [sp], #4
   317d0:	20001324 	.word	0x20001324

000317d4 <att_handle_rsp>:
{
   317d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   317d8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   317da:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   317de:	4688      	mov	r8, r1
   317e0:	4691      	mov	r9, r2
   317e2:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   317e4:	f020 f8dd 	bl	519a2 <k_work_cancel_delayable>
	if (!chan->req) {
   317e8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   317ec:	2600      	movs	r6, #0
   317ee:	b1f0      	cbz	r0, 3182e <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   317f0:	4b10      	ldr	r3, [pc, #64]	; (31834 <att_handle_rsp+0x60>)
   317f2:	4298      	cmp	r0, r3
   317f4:	d112      	bne.n	3181c <att_handle_rsp+0x48>
		chan->req = NULL;
   317f6:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   317fa:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   317fc:	6820      	ldr	r0, [r4, #0]
   317fe:	f01c fda6 	bl	4e34e <att_req_send_process>
	if (func) {
   31802:	b13d      	cbz	r5, 31814 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   31804:	6820      	ldr	r0, [r4, #0]
   31806:	f8cd a000 	str.w	sl, [sp]
   3180a:	6800      	ldr	r0, [r0, #0]
   3180c:	464b      	mov	r3, r9
   3180e:	4642      	mov	r2, r8
   31810:	4639      	mov	r1, r7
   31812:	47a8      	blx	r5
}
   31814:	2000      	movs	r0, #0
   31816:	b002      	add	sp, #8
   31818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   3181c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   3181e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   31820:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   31824:	f7ff ffc4 	bl	317b0 <bt_att_req_free>
	chan->req = NULL;
   31828:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   3182c:	e7e6      	b.n	317fc <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   3182e:	4605      	mov	r5, r0
   31830:	e7e4      	b.n	317fc <att_handle_rsp+0x28>
   31832:	bf00      	nop
   31834:	200049bc 	.word	0x200049bc

00031838 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   31838:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
   3183c:	b570      	push	{r4, r5, r6, lr}
   3183e:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   31840:	b313      	cbz	r3, 31888 <att_error_rsp+0x50>
   31842:	4a16      	ldr	r2, [pc, #88]	; (3189c <att_error_rsp+0x64>)
   31844:	4293      	cmp	r3, r2
   31846:	d01f      	beq.n	31888 <att_error_rsp+0x50>
	err = rsp->error;
   31848:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   3184a:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
   3184c:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
   3184e:	2d05      	cmp	r5, #5
   31850:	d006      	beq.n	31860 <att_error_rsp+0x28>
   31852:	2d0f      	cmp	r5, #15
   31854:	d119      	bne.n	3188a <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   31856:	7a43      	ldrb	r3, [r0, #9]
   31858:	2b01      	cmp	r3, #1
   3185a:	d816      	bhi.n	3188a <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   3185c:	2102      	movs	r1, #2
   3185e:	e007      	b.n	31870 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   31860:	7a43      	ldrb	r3, [r0, #9]
   31862:	2b01      	cmp	r3, #1
   31864:	d9fa      	bls.n	3185c <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   31866:	2b02      	cmp	r3, #2
   31868:	d00c      	beq.n	31884 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   3186a:	2b03      	cmp	r3, #3
   3186c:	d10d      	bne.n	3188a <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   3186e:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   31870:	f01b ffdf 	bl	4d832 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   31874:	b948      	cbnz	r0, 3188a <att_error_rsp+0x52>
		chan->req->retrying = true;
   31876:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   3187a:	7c13      	ldrb	r3, [r2, #16]
   3187c:	f043 0301 	orr.w	r3, r3, #1
   31880:	7413      	strb	r3, [r2, #16]
}
   31882:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   31884:	2103      	movs	r1, #3
   31886:	e7f3      	b.n	31870 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   31888:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   3188a:	2200      	movs	r2, #0
   3188c:	462b      	mov	r3, r5
   3188e:	4620      	mov	r0, r4
   31890:	4611      	mov	r1, r2
}
   31892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   31896:	f7ff bf9d 	b.w	317d4 <att_handle_rsp>
   3189a:	bf00      	nop
   3189c:	200049bc 	.word	0x200049bc

000318a0 <bt_att_disconnected>:
{
   318a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   318a2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   318a6:	b085      	sub	sp, #20
   318a8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   318aa:	2d00      	cmp	r5, #0
   318ac:	d04d      	beq.n	3194a <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   318ae:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   318b2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   318b6:	f01c fcad 	bl	4e214 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   318ba:	f1a4 0608 	sub.w	r6, r4, #8
   318be:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   318c2:	2200      	movs	r2, #0
   318c4:	2300      	movs	r3, #0
   318c6:	4638      	mov	r0, r7
   318c8:	f01e febb 	bl	50642 <net_buf_get>
   318cc:	4602      	mov	r2, r0
   318ce:	bb18      	cbnz	r0, 31918 <bt_att_disconnected+0x78>
	if (chan->req) {
   318d0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   318d4:	b123      	cbz	r3, 318e0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   318d6:	4601      	mov	r1, r0
   318d8:	230e      	movs	r3, #14
   318da:	4630      	mov	r0, r6
   318dc:	f7ff ff7a 	bl	317d4 <att_handle_rsp>
	chan->att = NULL;
   318e0:	2300      	movs	r3, #0
   318e2:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   318e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   318e8:	2b00      	cmp	r3, #0
   318ea:	d12e      	bne.n	3194a <bt_att_disconnected+0xaa>
	att_reset(att);
   318ec:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   318ee:	9803      	ldr	r0, [sp, #12]
   318f0:	2200      	movs	r2, #0
   318f2:	2300      	movs	r3, #0
   318f4:	300c      	adds	r0, #12
   318f6:	f01e fea4 	bl	50642 <net_buf_get>
   318fa:	b980      	cbnz	r0, 3191e <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   318fc:	9803      	ldr	r0, [sp, #12]
	return list->head;
   318fe:	6845      	ldr	r5, [r0, #4]
   31900:	b985      	cbnz	r5, 31924 <bt_att_disconnected+0x84>
	att->conn = NULL;
   31902:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   31904:	a903      	add	r1, sp, #12
   31906:	4812      	ldr	r0, [pc, #72]	; (31950 <bt_att_disconnected+0xb0>)
   31908:	f01f fe70 	bl	515ec <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   3190c:	6820      	ldr	r0, [r4, #0]
}
   3190e:	b005      	add	sp, #20
   31910:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   31914:	f001 bb3e 	b.w	32f94 <bt_gatt_disconnected>
		net_buf_unref(buf);
   31918:	f012 fbcc 	bl	440b4 <net_buf_unref>
   3191c:	e7d1      	b.n	318c2 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   3191e:	f012 fbc9 	bl	440b4 <net_buf_unref>
   31922:	e7e4      	b.n	318ee <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31924:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   31926:	686e      	ldr	r6, [r5, #4]
	return node->next;
   31928:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   3192a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3192c:	4295      	cmp	r5, r2
	list->tail = node;
   3192e:	bf08      	it	eq
   31930:	6083      	streq	r3, [r0, #8]
   31932:	b136      	cbz	r6, 31942 <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   31934:	69ab      	ldr	r3, [r5, #24]
   31936:	9300      	str	r3, [sp, #0]
   31938:	2300      	movs	r3, #0
   3193a:	6800      	ldr	r0, [r0, #0]
   3193c:	461a      	mov	r2, r3
   3193e:	210e      	movs	r1, #14
   31940:	47b0      	blx	r6
		bt_att_req_free(req);
   31942:	4628      	mov	r0, r5
   31944:	f7ff ff34 	bl	317b0 <bt_att_req_free>
   31948:	e7d8      	b.n	318fc <bt_att_disconnected+0x5c>
}
   3194a:	b005      	add	sp, #20
   3194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3194e:	bf00      	nop
   31950:	200012d0 	.word	0x200012d0

00031954 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   31954:	b510      	push	{r4, lr}
   31956:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   31958:	b330      	cbz	r0, 319a8 <bt_att_req_cancel+0x54>
   3195a:	b329      	cbz	r1, 319a8 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
   3195c:	f01c fb38 	bl	4dfd0 <att_get>
	if (!att) {
   31960:	b310      	cbz	r0, 319a8 <bt_att_req_cancel+0x54>
	return list->head;
   31962:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31964:	b153      	cbz	r3, 3197c <bt_att_req_cancel+0x28>
   31966:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
   3196a:	681b      	ldr	r3, [r3, #0]
   3196c:	b10b      	cbz	r3, 31972 <bt_att_req_cancel+0x1e>
   3196e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   31972:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
   31976:	4294      	cmp	r4, r2
   31978:	d006      	beq.n	31988 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3197a:	b96b      	cbnz	r3, 31998 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   3197c:	3004      	adds	r0, #4
   3197e:	4621      	mov	r1, r4
   31980:	f01c fc48 	bl	4e214 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
   31984:	4620      	mov	r0, r4
   31986:	e003      	b.n	31990 <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
   31988:	4b08      	ldr	r3, [pc, #32]	; (319ac <bt_att_req_cancel+0x58>)
   3198a:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
   3198e:	4620      	mov	r0, r4
}
   31990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   31994:	f7ff bf0c 	b.w	317b0 <bt_att_req_free>
   31998:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3199c:	b10a      	cbz	r2, 319a2 <bt_att_req_cancel+0x4e>
   3199e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   319a2:	4619      	mov	r1, r3
   319a4:	4613      	mov	r3, r2
   319a6:	e7e4      	b.n	31972 <bt_att_req_cancel+0x1e>
}
   319a8:	bd10      	pop	{r4, pc}
   319aa:	bf00      	nop
   319ac:	200049bc 	.word	0x200049bc

000319b0 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   319b0:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   319b2:	4904      	ldr	r1, [pc, #16]	; (319c4 <db_hash_set+0x14>)
{
   319b4:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   319b6:	4618      	mov	r0, r3
   319b8:	2210      	movs	r2, #16
   319ba:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   319bc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   319c0:	bd10      	pop	{r4, pc}
   319c2:	bf00      	nop
   319c4:	20002738 	.word	0x20002738

000319c8 <find_cf_cfg>:
{
   319c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   319ca:	4d0f      	ldr	r5, [pc, #60]	; (31a08 <find_cf_cfg+0x40>)
   319cc:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   319ce:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   319d0:	462f      	mov	r7, r5
		if (!conn) {
   319d2:	1c6a      	adds	r2, r5, #1
   319d4:	b954      	cbnz	r4, 319ec <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   319d6:	4669      	mov	r1, sp
   319d8:	4610      	mov	r0, r2
   319da:	9400      	str	r4, [sp, #0]
   319dc:	f8cd 4003 	str.w	r4, [sp, #3]
   319e0:	f01c ff14 	bl	4e80c <bt_addr_le_cmp>
   319e4:	b940      	cbnz	r0, 319f8 <find_cf_cfg+0x30>
}
   319e6:	4638      	mov	r0, r7
   319e8:	b003      	add	sp, #12
   319ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   319ec:	7829      	ldrb	r1, [r5, #0]
   319ee:	4620      	mov	r0, r4
   319f0:	f01b ff49 	bl	4d886 <bt_conn_is_peer_addr_le>
   319f4:	2800      	cmp	r0, #0
   319f6:	d1f6      	bne.n	319e6 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   319f8:	3601      	adds	r6, #1
   319fa:	2e0c      	cmp	r6, #12
   319fc:	f105 0510 	add.w	r5, r5, #16
   31a00:	d1e6      	bne.n	319d0 <find_cf_cfg+0x8>
	return NULL;
   31a02:	2700      	movs	r7, #0
   31a04:	e7ef      	b.n	319e6 <find_cf_cfg+0x1e>
   31a06:	bf00      	nop
   31a08:	200049e0 	.word	0x200049e0

00031a0c <find_sc_cfg>:
{
   31a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31a0e:	4d0b      	ldr	r5, [pc, #44]	; (31a3c <find_sc_cfg+0x30>)
   31a10:	4606      	mov	r6, r0
   31a12:	460f      	mov	r7, r1
   31a14:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   31a16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   31a1a:	42b3      	cmp	r3, r6
   31a1c:	d107      	bne.n	31a2e <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   31a1e:	4639      	mov	r1, r7
   31a20:	4628      	mov	r0, r5
   31a22:	f01c fef3 	bl	4e80c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   31a26:	b910      	cbnz	r0, 31a2e <find_sc_cfg+0x22>
			return &sc_cfg[i];
   31a28:	4805      	ldr	r0, [pc, #20]	; (31a40 <find_sc_cfg+0x34>)
   31a2a:	4420      	add	r0, r4
}
   31a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31a2e:	340c      	adds	r4, #12
   31a30:	2c90      	cmp	r4, #144	; 0x90
   31a32:	f105 050c 	add.w	r5, r5, #12
   31a36:	d1ee      	bne.n	31a16 <find_sc_cfg+0xa>
	return NULL;
   31a38:	2000      	movs	r0, #0
   31a3a:	e7f7      	b.n	31a2c <find_sc_cfg+0x20>
   31a3c:	20007583 	.word	0x20007583
   31a40:	20007582 	.word	0x20007582

00031a44 <gatt_sub_find>:
{
   31a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31a46:	4d0f      	ldr	r5, [pc, #60]	; (31a84 <gatt_sub_find+0x40>)
   31a48:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   31a4a:	2600      	movs	r6, #0
		struct gatt_sub *sub = &subscriptions[i];
   31a4c:	462f      	mov	r7, r5
		if (!conn) {
   31a4e:	1c6a      	adds	r2, r5, #1
   31a50:	b954      	cbnz	r4, 31a68 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   31a52:	4669      	mov	r1, sp
   31a54:	4610      	mov	r0, r2
   31a56:	9400      	str	r4, [sp, #0]
   31a58:	f8cd 4003 	str.w	r4, [sp, #3]
   31a5c:	f01c fed6 	bl	4e80c <bt_addr_le_cmp>
   31a60:	b940      	cbnz	r0, 31a74 <gatt_sub_find+0x30>
}
   31a62:	4638      	mov	r0, r7
   31a64:	b003      	add	sp, #12
   31a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   31a68:	7829      	ldrb	r1, [r5, #0]
   31a6a:	4620      	mov	r0, r4
   31a6c:	f01b ff0b 	bl	4d886 <bt_conn_is_peer_addr_le>
   31a70:	2800      	cmp	r0, #0
   31a72:	d1f6      	bne.n	31a62 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   31a74:	3601      	adds	r6, #1
   31a76:	2e0c      	cmp	r6, #12
   31a78:	f105 0510 	add.w	r5, r5, #16
   31a7c:	d1e6      	bne.n	31a4c <gatt_sub_find+0x8>
	return NULL;
   31a7e:	2700      	movs	r7, #0
   31a80:	e7ef      	b.n	31a62 <gatt_sub_find+0x1e>
   31a82:	bf00      	nop
   31a84:	20004b38 	.word	0x20004b38

00031a88 <find_cf_cfg_by_addr>:
{
   31a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31a8a:	4d0b      	ldr	r5, [pc, #44]	; (31ab8 <find_cf_cfg_by_addr+0x30>)
   31a8c:	4606      	mov	r6, r0
   31a8e:	460f      	mov	r7, r1
   31a90:	2400      	movs	r4, #0
			if (id == cf_cfg[i].id &&
   31a92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   31a96:	42b3      	cmp	r3, r6
   31a98:	d107      	bne.n	31aaa <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   31a9a:	4629      	mov	r1, r5
   31a9c:	4638      	mov	r0, r7
   31a9e:	f01c feb5 	bl	4e80c <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   31aa2:	b910      	cbnz	r0, 31aaa <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   31aa4:	4805      	ldr	r0, [pc, #20]	; (31abc <find_cf_cfg_by_addr+0x34>)
   31aa6:	4420      	add	r0, r4
}
   31aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   31aaa:	3410      	adds	r4, #16
   31aac:	2cc0      	cmp	r4, #192	; 0xc0
   31aae:	f105 0510 	add.w	r5, r5, #16
   31ab2:	d1ee      	bne.n	31a92 <find_cf_cfg_by_addr+0xa>
	return NULL;
   31ab4:	2000      	movs	r0, #0
   31ab6:	e7f7      	b.n	31aa8 <find_cf_cfg_by_addr+0x20>
   31ab8:	200049e1 	.word	0x200049e1
   31abc:	200049e0 	.word	0x200049e0

00031ac0 <sc_store>:
{
   31ac0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   31ac2:	4605      	mov	r5, r0
{
   31ac4:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   31ac6:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   31aca:	4604      	mov	r4, r0
	if (cfg->id) {
   31acc:	b19a      	cbz	r2, 31af6 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   31ace:	ae02      	add	r6, sp, #8
   31ad0:	2104      	movs	r1, #4
   31ad2:	4630      	mov	r0, r6
   31ad4:	f018 fc34 	bl	4a340 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   31ad8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   31ada:	462b      	mov	r3, r5
   31adc:	a803      	add	r0, sp, #12
   31ade:	4a07      	ldr	r2, [pc, #28]	; (31afc <sc_store+0x3c>)
   31ae0:	2124      	movs	r1, #36	; 0x24
   31ae2:	f7fc f927 	bl	2dd34 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   31ae6:	2204      	movs	r2, #4
   31ae8:	f104 0108 	add.w	r1, r4, #8
   31aec:	a803      	add	r0, sp, #12
   31aee:	f7fa ff3b 	bl	2c968 <settings_save_one>
}
   31af2:	b00c      	add	sp, #48	; 0x30
   31af4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   31af6:	9200      	str	r2, [sp, #0]
   31af8:	e7ef      	b.n	31ada <sc_store+0x1a>
   31afa:	bf00      	nop
   31afc:	00056ad6 	.word	0x00056ad6

00031b00 <db_hash_commit>:

static int db_hash_commit(void)
{
   31b00:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31b02:	2108      	movs	r1, #8
   31b04:	4804      	ldr	r0, [pc, #16]	; (31b18 <db_hash_commit+0x18>)
   31b06:	f01c fe72 	bl	4e7ee <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   31b0a:	2200      	movs	r2, #0
   31b0c:	2300      	movs	r3, #0
   31b0e:	4803      	ldr	r0, [pc, #12]	; (31b1c <db_hash_commit+0x1c>)
   31b10:	f017 f8d6 	bl	48cc0 <k_work_reschedule>

	return 0;
}
   31b14:	2000      	movs	r0, #0
   31b16:	bd08      	pop	{r3, pc}
   31b18:	20002838 	.word	0x20002838
   31b1c:	20002748 	.word	0x20002748

00031b20 <bt_gatt_attr_write_ccc>:
{
   31b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31b24:	4698      	mov	r8, r3
   31b26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   31b2a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   31b2e:	4606      	mov	r6, r0
   31b30:	4689      	mov	r9, r1
	if (offset) {
   31b32:	2b00      	cmp	r3, #0
   31b34:	d15e      	bne.n	31bf4 <bt_gatt_attr_write_ccc+0xd4>
	if (!len || len > sizeof(uint16_t)) {
   31b36:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   31b3a:	2b01      	cmp	r3, #1
   31b3c:	d85d      	bhi.n	31bfa <bt_gatt_attr_write_ccc+0xda>
		value = *(uint8_t *)buf;
   31b3e:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   31b40:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   31b44:	4651      	mov	r1, sl
   31b46:	bf14      	ite	ne
   31b48:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   31b4a:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   31b4c:	f01c fe61 	bl	4e812 <find_ccc_cfg>
	if (!cfg) {
   31b50:	4605      	mov	r5, r0
   31b52:	b980      	cbnz	r0, 31b76 <bt_gatt_attr_write_ccc+0x56>
		if (!value) {
   31b54:	b917      	cbnz	r7, 31b5c <bt_gatt_attr_write_ccc+0x3c>
			return len;
   31b56:	4640      	mov	r0, r8
}
   31b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   31b5c:	4651      	mov	r1, sl
   31b5e:	f01c fe58 	bl	4e812 <find_ccc_cfg>
		if (!cfg) {
   31b62:	4605      	mov	r5, r0
   31b64:	2800      	cmp	r0, #0
   31b66:	d04b      	beq.n	31c00 <bt_gatt_attr_write_ccc+0xe0>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   31b68:	f106 0188 	add.w	r1, r6, #136	; 0x88
   31b6c:	3001      	adds	r0, #1
   31b6e:	f01c fe89 	bl	4e884 <bt_addr_le_copy>
		cfg->id = conn->id;
   31b72:	7a33      	ldrb	r3, [r6, #8]
   31b74:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   31b76:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
   31b7a:	bb7b      	cbnz	r3, 31bdc <bt_gatt_attr_write_ccc+0xbc>
	if (cfg->value != ccc->value) {
   31b7c:	f8ba 303c 	ldrh.w	r3, [sl, #60]	; 0x3c
	value_changed = cfg->value != value;
   31b80:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   31b82:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   31b84:	42bb      	cmp	r3, r7
   31b86:	d003      	beq.n	31b90 <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   31b88:	4651      	mov	r1, sl
   31b8a:	4648      	mov	r0, r9
   31b8c:	f01c fda4 	bl	4e6d8 <gatt_ccc_changed>
	if (value_changed) {
   31b90:	42bc      	cmp	r4, r7
   31b92:	d01d      	beq.n	31bd0 <bt_gatt_attr_write_ccc+0xb0>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   31b94:	4630      	mov	r0, r6
   31b96:	f7fe fbd7 	bl	30348 <bt_conn_index>
   31b9a:	4c1b      	ldr	r4, [pc, #108]	; (31c08 <bt_gatt_attr_write_ccc+0xe8>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   31b9c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   31ba0:	429e      	cmp	r6, r3
   31ba2:	d015      	beq.n	31bd0 <bt_gatt_attr_write_ccc+0xb0>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31ba4:	7a30      	ldrb	r0, [r6, #8]
   31ba6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   31baa:	f01b fa4f 	bl	4d04c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   31bae:	b178      	cbz	r0, 31bd0 <bt_gatt_attr_write_ccc+0xb0>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   31bb0:	4630      	mov	r0, r6
   31bb2:	f7fe fbc9 	bl	30348 <bt_conn_index>
   31bb6:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   31bb8:	4630      	mov	r0, r6
   31bba:	f01b fda0 	bl	4d6fe <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   31bbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   31bc2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   31bc6:	2300      	movs	r3, #0
   31bc8:	f104 0018 	add.w	r0, r4, #24
   31bcc:	f017 f878 	bl	48cc0 <k_work_reschedule>
	if (!value) {
   31bd0:	2f00      	cmp	r7, #0
   31bd2:	d1c0      	bne.n	31b56 <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   31bd4:	4628      	mov	r0, r5
   31bd6:	f01c fe9e 	bl	4e916 <clear_ccc_cfg>
   31bda:	e7bc      	b.n	31b56 <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   31bdc:	463a      	mov	r2, r7
   31bde:	4649      	mov	r1, r9
   31be0:	4630      	mov	r0, r6
   31be2:	4798      	blx	r3
		if (write < 0) {
   31be4:	2800      	cmp	r0, #0
   31be6:	dbb7      	blt.n	31b58 <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   31be8:	1e44      	subs	r4, r0, #1
   31bea:	2c01      	cmp	r4, #1
   31bec:	d9c6      	bls.n	31b7c <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   31bee:	f06f 000d 	mvn.w	r0, #13
   31bf2:	e7b1      	b.n	31b58 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   31bf4:	f06f 0006 	mvn.w	r0, #6
   31bf8:	e7ae      	b.n	31b58 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   31bfa:	f06f 000c 	mvn.w	r0, #12
   31bfe:	e7ab      	b.n	31b58 <bt_gatt_attr_write_ccc+0x38>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   31c00:	f06f 0010 	mvn.w	r0, #16
   31c04:	e7a8      	b.n	31b58 <bt_gatt_attr_write_ccc+0x38>
   31c06:	bf00      	nop
   31c08:	200027a0 	.word	0x200027a0

00031c0c <gatt_write_ccc>:
{
   31c0c:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   31c0e:	2312      	movs	r3, #18
{
   31c10:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   31c12:	2104      	movs	r1, #4
   31c14:	e9cd 3100 	strd	r3, r1, [sp]
   31c18:	4b03      	ldr	r3, [pc, #12]	; (31c28 <gatt_write_ccc+0x1c>)
   31c1a:	4904      	ldr	r1, [pc, #16]	; (31c2c <gatt_write_ccc+0x20>)
   31c1c:	f01c ff2c 	bl	4ea78 <gatt_req_send>
}
   31c20:	b003      	add	sp, #12
   31c22:	f85d fb04 	ldr.w	pc, [sp], #4
   31c26:	bf00      	nop
   31c28:	0004ef05 	.word	0x0004ef05
   31c2c:	0004ea0f 	.word	0x0004ea0f

00031c30 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   31c30:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   31c32:	6881      	ldr	r1, [r0, #8]
{
   31c34:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31c36:	4a07      	ldr	r2, [pc, #28]	; (31c54 <remove_peer_from_attr+0x24>)
   31c38:	4291      	cmp	r1, r2
   31c3a:	d109      	bne.n	31c50 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   31c3c:	791a      	ldrb	r2, [r3, #4]
   31c3e:	6819      	ldr	r1, [r3, #0]
   31c40:	68c0      	ldr	r0, [r0, #12]
   31c42:	f01c fe05 	bl	4e850 <ccc_find_cfg>
	if (cfg) {
   31c46:	b118      	cbz	r0, 31c50 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   31c48:	220a      	movs	r2, #10
   31c4a:	2100      	movs	r1, #0
   31c4c:	f01a fd3e 	bl	4c6cc <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   31c50:	2001      	movs	r0, #1
   31c52:	bd08      	pop	{r3, pc}
   31c54:	00031b21 	.word	0x00031b21

00031c58 <ccc_load>:
{
   31c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31c5a:	4b21      	ldr	r3, [pc, #132]	; (31ce0 <ccc_load+0x88>)
{
   31c5c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31c5e:	6882      	ldr	r2, [r0, #8]
   31c60:	429a      	cmp	r2, r3
   31c62:	d002      	beq.n	31c6a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   31c64:	2001      	movs	r0, #1
}
   31c66:	b002      	add	sp, #8
   31c68:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   31c6a:	68a3      	ldr	r3, [r4, #8]
   31c6c:	68c6      	ldr	r6, [r0, #12]
   31c6e:	b94b      	cbnz	r3, 31c84 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   31c70:	7922      	ldrb	r2, [r4, #4]
   31c72:	6821      	ldr	r1, [r4, #0]
   31c74:	4630      	mov	r0, r6
   31c76:	f01c fdeb 	bl	4e850 <ccc_find_cfg>
	if (!cfg) {
   31c7a:	2800      	cmp	r0, #0
   31c7c:	d0f2      	beq.n	31c64 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   31c7e:	f01c fe4a 	bl	4e916 <clear_ccc_cfg>
   31c82:	e7ef      	b.n	31c64 <ccc_load+0xc>
	} else if (!load->count) {
   31c84:	68e0      	ldr	r0, [r4, #12]
   31c86:	2800      	cmp	r0, #0
   31c88:	d0ed      	beq.n	31c66 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   31c8a:	881b      	ldrh	r3, [r3, #0]
   31c8c:	4299      	cmp	r1, r3
   31c8e:	d00a      	beq.n	31ca6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   31c90:	d9e8      	bls.n	31c64 <ccc_load+0xc>
	load->count--;
   31c92:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   31c94:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   31c96:	3801      	subs	r0, #1
	load->entry++;
   31c98:	3304      	adds	r3, #4
	load->count--;
   31c9a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   31c9c:	3800      	subs	r0, #0
	load->entry++;
   31c9e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   31ca0:	bf18      	it	ne
   31ca2:	2001      	movne	r0, #1
   31ca4:	e7df      	b.n	31c66 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   31ca6:	7922      	ldrb	r2, [r4, #4]
   31ca8:	6821      	ldr	r1, [r4, #0]
   31caa:	4630      	mov	r0, r6
   31cac:	f01c fdd0 	bl	4e850 <ccc_find_cfg>
	if (!cfg) {
   31cb0:	4605      	mov	r5, r0
   31cb2:	b980      	cbnz	r0, 31cd6 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   31cb4:	9000      	str	r0, [sp, #0]
   31cb6:	4602      	mov	r2, r0
   31cb8:	f8cd 0003 	str.w	r0, [sp, #3]
   31cbc:	4669      	mov	r1, sp
   31cbe:	4630      	mov	r0, r6
   31cc0:	f01c fdc6 	bl	4e850 <ccc_find_cfg>
		if (!cfg) {
   31cc4:	4605      	mov	r5, r0
   31cc6:	2800      	cmp	r0, #0
   31cc8:	d0e3      	beq.n	31c92 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   31cca:	6821      	ldr	r1, [r4, #0]
   31ccc:	3001      	adds	r0, #1
   31cce:	f01c fdd9 	bl	4e884 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   31cd2:	7923      	ldrb	r3, [r4, #4]
   31cd4:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   31cd6:	68a3      	ldr	r3, [r4, #8]
   31cd8:	885b      	ldrh	r3, [r3, #2]
   31cda:	812b      	strh	r3, [r5, #8]
   31cdc:	e7d9      	b.n	31c92 <ccc_load+0x3a>
   31cde:	bf00      	nop
   31ce0:	00031b21 	.word	0x00031b21

00031ce4 <convert_to_id_on_match>:
{
   31ce4:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31ce6:	4b0b      	ldr	r3, [pc, #44]	; (31d14 <convert_to_id_on_match+0x30>)
{
   31ce8:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31cea:	6882      	ldr	r2, [r0, #8]
   31cec:	429a      	cmp	r2, r3
   31cee:	d10e      	bne.n	31d0e <convert_to_id_on_match+0x2a>
   31cf0:	68c5      	ldr	r5, [r0, #12]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31cf2:	1c6c      	adds	r4, r5, #1
   31cf4:	353d      	adds	r5, #61	; 0x3d
		if (bt_addr_le_cmp(&ccc->cfg[i].peer, match->private_addr) == 0) {
   31cf6:	6831      	ldr	r1, [r6, #0]
   31cf8:	4620      	mov	r0, r4
   31cfa:	f01c fd87 	bl	4e80c <bt_addr_le_cmp>
   31cfe:	b918      	cbnz	r0, 31d08 <convert_to_id_on_match+0x24>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   31d00:	6871      	ldr	r1, [r6, #4]
   31d02:	4620      	mov	r0, r4
   31d04:	f01c fdbe 	bl	4e884 <bt_addr_le_copy>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31d08:	340a      	adds	r4, #10
   31d0a:	42ac      	cmp	r4, r5
   31d0c:	d1f3      	bne.n	31cf6 <convert_to_id_on_match+0x12>
}
   31d0e:	2001      	movs	r0, #1
   31d10:	bd70      	pop	{r4, r5, r6, pc}
   31d12:	bf00      	nop
   31d14:	00031b21 	.word	0x00031b21

00031d18 <ccc_save>:
{
   31d18:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31d1a:	4b0c      	ldr	r3, [pc, #48]	; (31d4c <ccc_save+0x34>)
{
   31d1c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31d1e:	6882      	ldr	r2, [r0, #8]
   31d20:	429a      	cmp	r2, r3
{
   31d22:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   31d24:	d10f      	bne.n	31d46 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   31d26:	7922      	ldrb	r2, [r4, #4]
   31d28:	6821      	ldr	r1, [r4, #0]
   31d2a:	68c0      	ldr	r0, [r0, #12]
   31d2c:	f01c fd90 	bl	4e850 <ccc_find_cfg>
	if (!cfg) {
   31d30:	b148      	cbz	r0, 31d46 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   31d32:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   31d36:	8901      	ldrh	r1, [r0, #8]
   31d38:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   31d3c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   31d3e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   31d40:	8151      	strh	r1, [r2, #10]
	save->count++;
   31d42:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   31d46:	2001      	movs	r0, #1
   31d48:	bd38      	pop	{r3, r4, r5, pc}
   31d4a:	bf00      	nop
   31d4c:	00031b21 	.word	0x00031b21

00031d50 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   31d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   31d52:	b08d      	sub	sp, #52	; 0x34
   31d54:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   31d56:	f7ff fe37 	bl	319c8 <find_cf_cfg>
					       &conn->le.dst, id_str);
   31d5a:	f105 0688 	add.w	r6, r5, #136	; 0x88
	if (!cfg) {
   31d5e:	4604      	mov	r4, r0
   31d60:	b300      	cbz	r0, 31da4 <bt_gatt_store_cf.isra.0+0x54>
		if (conn->id) {
   31d62:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   31d64:	3408      	adds	r4, #8
		if (conn->id) {
   31d66:	b1fa      	cbz	r2, 31da8 <bt_gatt_store_cf.isra.0+0x58>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   31d68:	af02      	add	r7, sp, #8
   31d6a:	2104      	movs	r1, #4
   31d6c:	4638      	mov	r0, r7
   31d6e:	f018 fae7 	bl	4a340 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   31d72:	4633      	mov	r3, r6
   31d74:	4a0d      	ldr	r2, [pc, #52]	; (31dac <bt_gatt_store_cf.isra.0+0x5c>)
   31d76:	9700      	str	r7, [sp, #0]
   31d78:	2124      	movs	r1, #36	; 0x24
   31d7a:	a803      	add	r0, sp, #12
   31d7c:	f7fb ffda 	bl	2dd34 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   31d80:	7a2b      	ldrb	r3, [r5, #8]
   31d82:	2501      	movs	r5, #1
   31d84:	b93b      	cbnz	r3, 31d96 <bt_gatt_store_cf.isra.0+0x46>
		bt_settings_encode_key(key, sizeof(key), "cf",
   31d86:	2300      	movs	r3, #0
   31d88:	9300      	str	r3, [sp, #0]
   31d8a:	4a08      	ldr	r2, [pc, #32]	; (31dac <bt_gatt_store_cf.isra.0+0x5c>)
   31d8c:	4633      	mov	r3, r6
   31d8e:	2124      	movs	r1, #36	; 0x24
   31d90:	a803      	add	r0, sp, #12
   31d92:	f7fb ffcf 	bl	2dd34 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   31d96:	462a      	mov	r2, r5
   31d98:	4621      	mov	r1, r4
   31d9a:	a803      	add	r0, sp, #12
   31d9c:	f7fa fde4 	bl	2c968 <settings_save_one>
}
   31da0:	b00d      	add	sp, #52	; 0x34
   31da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   31da4:	4605      	mov	r5, r0
   31da6:	e7ee      	b.n	31d86 <bt_gatt_store_cf.isra.0+0x36>
   31da8:	2501      	movs	r5, #1
   31daa:	e7ec      	b.n	31d86 <bt_gatt_store_cf.isra.0+0x36>
   31dac:	00056ad0 	.word	0x00056ad0

00031db0 <bt_gatt_clear_sc>:
{
   31db0:	b570      	push	{r4, r5, r6, lr}
   31db2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   31db4:	f7ff fe2a 	bl	31a0c <find_sc_cfg>
	if (!cfg) {
   31db8:	4604      	mov	r4, r0
   31dba:	b1b8      	cbz	r0, 31dec <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   31dbc:	4605      	mov	r5, r0
   31dbe:	f815 2b01 	ldrb.w	r2, [r5], #1
   31dc2:	b1b2      	cbz	r2, 31df2 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   31dc4:	ae02      	add	r6, sp, #8
   31dc6:	2104      	movs	r1, #4
   31dc8:	4630      	mov	r0, r6
   31dca:	f018 fab9 	bl	4a340 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   31dce:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   31dd0:	4a09      	ldr	r2, [pc, #36]	; (31df8 <bt_gatt_clear_sc+0x48>)
   31dd2:	2124      	movs	r1, #36	; 0x24
   31dd4:	462b      	mov	r3, r5
   31dd6:	a803      	add	r0, sp, #12
   31dd8:	f7fb ffac 	bl	2dd34 <bt_settings_encode_key>
		err = settings_delete(key);
   31ddc:	a803      	add	r0, sp, #12
   31dde:	f019 f978 	bl	4b0d2 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   31de2:	220c      	movs	r2, #12
   31de4:	2100      	movs	r1, #0
   31de6:	4620      	mov	r0, r4
   31de8:	f01a fc70 	bl	4c6cc <memset>
}
   31dec:	2000      	movs	r0, #0
   31dee:	b00c      	add	sp, #48	; 0x30
   31df0:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   31df2:	9200      	str	r2, [sp, #0]
   31df4:	e7ec      	b.n	31dd0 <bt_gatt_clear_sc+0x20>
   31df6:	bf00      	nop
   31df8:	00056ad6 	.word	0x00056ad6

00031dfc <disconnected_cb>:
{
   31dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31e00:	4b25      	ldr	r3, [pc, #148]	; (31e98 <disconnected_cb+0x9c>)
{
   31e02:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31e04:	6882      	ldr	r2, [r0, #8]
   31e06:	429a      	cmp	r2, r3
{
   31e08:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31e0a:	d12f      	bne.n	31e6c <disconnected_cb+0x70>
	ccc = attr->user_data;
   31e0c:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   31e0e:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   31e10:	b363      	cbz	r3, 31e6c <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   31e12:	f8df b088 	ldr.w	fp, [pc, #136]	; 31e9c <disconnected_cb+0xa0>
   31e16:	1c6c      	adds	r4, r5, #1
   31e18:	f105 0a3d 	add.w	sl, r5, #61	; 0x3d
	value_used = false;
   31e1c:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31e20:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   31e24:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   31e28:	b19b      	cbz	r3, 31e52 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   31e2a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   31e2e:	4622      	mov	r2, r4
   31e30:	4630      	mov	r0, r6
   31e32:	f01b fd28 	bl	4d886 <bt_conn_is_peer_addr_le>
   31e36:	b9e0      	cbnz	r0, 31e72 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31e38:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   31e3c:	4621      	mov	r1, r4
   31e3e:	f7fe fbb7 	bl	305b0 <bt_conn_lookup_addr_le>
			if (tmp) {
   31e42:	b130      	cbz	r0, 31e52 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   31e44:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   31e46:	2b07      	cmp	r3, #7
   31e48:	bf08      	it	eq
   31e4a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   31e4e:	f01b fc71 	bl	4d734 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31e52:	340a      	adds	r4, #10
   31e54:	45a2      	cmp	sl, r4
   31e56:	d1e5      	bne.n	31e24 <disconnected_cb+0x28>
	if (!value_used) {
   31e58:	f1b8 0f00 	cmp.w	r8, #0
   31e5c:	d106      	bne.n	31e6c <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   31e5e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		ccc->value = 0U;
   31e60:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
		if (ccc->cfg_changed) {
   31e64:	b113      	cbz	r3, 31e6c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   31e66:	4641      	mov	r1, r8
   31e68:	4638      	mov	r0, r7
   31e6a:	4798      	blx	r3
}
   31e6c:	2001      	movs	r0, #1
   31e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31e72:	7a30      	ldrb	r0, [r6, #8]
   31e74:	4649      	mov	r1, r9
   31e76:	f01b f8e9 	bl	4d04c <bt_addr_le_is_bonded>
   31e7a:	b940      	cbnz	r0, 31e8e <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   31e7c:	455d      	cmp	r5, fp
   31e7e:	d102      	bne.n	31e86 <disconnected_cb+0x8a>
					sc_clear(conn);
   31e80:	4630      	mov	r0, r6
   31e82:	f01c ff4d 	bl	4ed20 <sc_clear>
				clear_ccc_cfg(cfg);
   31e86:	1e60      	subs	r0, r4, #1
   31e88:	f01c fd45 	bl	4e916 <clear_ccc_cfg>
   31e8c:	e7e1      	b.n	31e52 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   31e8e:	4649      	mov	r1, r9
   31e90:	4620      	mov	r0, r4
   31e92:	f01c fcf7 	bl	4e884 <bt_addr_le_copy>
   31e96:	e7dc      	b.n	31e52 <disconnected_cb+0x56>
   31e98:	00031b21 	.word	0x00031b21
   31e9c:	20000a2c 	.word	0x20000a2c

00031ea0 <sc_commit>:
{
   31ea0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31ea2:	4809      	ldr	r0, [pc, #36]	; (31ec8 <sc_commit+0x28>)
   31ea4:	f06f 0102 	mvn.w	r1, #2
   31ea8:	f01c fda2 	bl	4e9f0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31eac:	4806      	ldr	r0, [pc, #24]	; (31ec8 <sc_commit+0x28>)
   31eae:	f01c fc43 	bl	4e738 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31eb2:	07c3      	lsls	r3, r0, #31
   31eb4:	d505      	bpl.n	31ec2 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   31eb6:	4805      	ldr	r0, [pc, #20]	; (31ecc <sc_commit+0x2c>)
   31eb8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31ebc:	2300      	movs	r3, #0
   31ebe:	f016 feff 	bl	48cc0 <k_work_reschedule>
}
   31ec2:	2000      	movs	r0, #0
   31ec4:	bd08      	pop	{r3, pc}
   31ec6:	bf00      	nop
   31ec8:	20002838 	.word	0x20002838
   31ecc:	20002808 	.word	0x20002808

00031ed0 <sc_indicate_rsp>:
{
   31ed0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31ed2:	f06f 0102 	mvn.w	r1, #2
   31ed6:	4604      	mov	r4, r0
   31ed8:	480d      	ldr	r0, [pc, #52]	; (31f10 <sc_indicate_rsp+0x40>)
   31eda:	f01c fd89 	bl	4e9f0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31ede:	480c      	ldr	r0, [pc, #48]	; (31f10 <sc_indicate_rsp+0x40>)
   31ee0:	f01c fc2a 	bl	4e738 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31ee4:	07c2      	lsls	r2, r0, #31
   31ee6:	d504      	bpl.n	31ef2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   31ee8:	480a      	ldr	r0, [pc, #40]	; (31f14 <sc_indicate_rsp+0x44>)
   31eea:	2200      	movs	r2, #0
   31eec:	2300      	movs	r3, #0
   31eee:	f016 fee7 	bl	48cc0 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   31ef2:	4620      	mov	r0, r4
   31ef4:	f7ff fd68 	bl	319c8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   31ef8:	b140      	cbz	r0, 31f0c <sc_indicate_rsp+0x3c>
   31efa:	7a03      	ldrb	r3, [r0, #8]
   31efc:	07db      	lsls	r3, r3, #31
   31efe:	d505      	bpl.n	31f0c <sc_indicate_rsp+0x3c>
}
   31f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31f04:	2101      	movs	r1, #1
   31f06:	300c      	adds	r0, #12
   31f08:	f01c bc71 	b.w	4e7ee <atomic_or>
   31f0c:	bd10      	pop	{r4, pc}
   31f0e:	bf00      	nop
   31f10:	20002838 	.word	0x20002838
   31f14:	20002808 	.word	0x20002808

00031f18 <bt_gatt_init>:
{
   31f18:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   31f1a:	4b26      	ldr	r3, [pc, #152]	; (31fb4 <bt_gatt_init+0x9c>)
   31f1c:	f3bf 8f5b 	dmb	ish
   31f20:	2201      	movs	r2, #1
   31f22:	e853 1f00 	ldrex	r1, [r3]
   31f26:	2900      	cmp	r1, #0
   31f28:	d103      	bne.n	31f32 <bt_gatt_init+0x1a>
   31f2a:	e843 2000 	strex	r0, r2, [r3]
   31f2e:	2800      	cmp	r0, #0
   31f30:	d1f7      	bne.n	31f22 <bt_gatt_init+0xa>
   31f32:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   31f36:	d13b      	bne.n	31fb0 <bt_gatt_init+0x98>
   31f38:	f3bf 8f5b 	dmb	ish
   31f3c:	4b1e      	ldr	r3, [pc, #120]	; (31fb8 <bt_gatt_init+0xa0>)
   31f3e:	e853 1f00 	ldrex	r1, [r3]
   31f42:	2900      	cmp	r1, #0
   31f44:	d103      	bne.n	31f4e <bt_gatt_init+0x36>
   31f46:	e843 2000 	strex	r0, r2, [r3]
   31f4a:	2800      	cmp	r0, #0
   31f4c:	d1f7      	bne.n	31f3e <bt_gatt_init+0x26>
   31f4e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   31f52:	d108      	bne.n	31f66 <bt_gatt_init+0x4e>
   31f54:	4919      	ldr	r1, [pc, #100]	; (31fbc <bt_gatt_init+0xa4>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   31f56:	4a1a      	ldr	r2, [pc, #104]	; (31fc0 <bt_gatt_init+0xa8>)
   31f58:	880b      	ldrh	r3, [r1, #0]
   31f5a:	4c1a      	ldr	r4, [pc, #104]	; (31fc4 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
   31f5c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   31f5e:	42a2      	cmp	r2, r4
   31f60:	d320      	bcc.n	31fa4 <bt_gatt_init+0x8c>
   31f62:	b100      	cbz	r0, 31f66 <bt_gatt_init+0x4e>
   31f64:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   31f66:	4b18      	ldr	r3, [pc, #96]	; (31fc8 <bt_gatt_init+0xb0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   31f68:	4918      	ldr	r1, [pc, #96]	; (31fcc <bt_gatt_init+0xb4>)
   31f6a:	4819      	ldr	r0, [pc, #100]	; (31fd0 <bt_gatt_init+0xb8>)
   31f6c:	2200      	movs	r2, #0
	list->tail = NULL;
   31f6e:	e9c3 2200 	strd	r2, r2, [r3]
   31f72:	f01f fd08 	bl	51986 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   31f76:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31f7a:	2300      	movs	r3, #0
   31f7c:	4814      	ldr	r0, [pc, #80]	; (31fd0 <bt_gatt_init+0xb8>)
   31f7e:	f016 fe6b 	bl	48c58 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   31f82:	4914      	ldr	r1, [pc, #80]	; (31fd4 <bt_gatt_init+0xbc>)
   31f84:	4814      	ldr	r0, [pc, #80]	; (31fd8 <bt_gatt_init+0xc0>)
   31f86:	f01f fcfe 	bl	51986 <k_work_init_delayable>
   31f8a:	2102      	movs	r1, #2
   31f8c:	4813      	ldr	r0, [pc, #76]	; (31fdc <bt_gatt_init+0xc4>)
   31f8e:	f01c fc2e 	bl	4e7ee <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   31f92:	4813      	ldr	r0, [pc, #76]	; (31fe0 <bt_gatt_init+0xc8>)
   31f94:	4913      	ldr	r1, [pc, #76]	; (31fe4 <bt_gatt_init+0xcc>)
   31f96:	f01f fcf6 	bl	51986 <k_work_init_delayable>
}
   31f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   31f9e:	4812      	ldr	r0, [pc, #72]	; (31fe8 <bt_gatt_init+0xd0>)
   31fa0:	f7fe bae2 	b.w	30568 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   31fa4:	6850      	ldr	r0, [r2, #4]
   31fa6:	4403      	add	r3, r0
   31fa8:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   31faa:	3208      	adds	r2, #8
   31fac:	2001      	movs	r0, #1
   31fae:	e7d6      	b.n	31f5e <bt_gatt_init+0x46>
}
   31fb0:	bd10      	pop	{r4, pc}
   31fb2:	bf00      	nop
   31fb4:	20004aa0 	.word	0x20004aa0
   31fb8:	20004b34 	.word	0x20004b34
   31fbc:	20007580 	.word	0x20007580
   31fc0:	00052820 	.word	0x00052820
   31fc4:	00052848 	.word	0x00052848
   31fc8:	200049d8 	.word	0x200049d8
   31fcc:	00032175 	.word	0x00032175
   31fd0:	20002748 	.word	0x20002748
   31fd4:	0003245d 	.word	0x0003245d
   31fd8:	20002808 	.word	0x20002808
   31fdc:	20002838 	.word	0x20002838
   31fe0:	200027b8 	.word	0x200027b8
   31fe4:	0004f7b5 	.word	0x0004f7b5
   31fe8:	20000a0c 	.word	0x20000a0c

00031fec <bt_gatt_attr_get_handle>:
{
   31fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   31ff0:	4603      	mov	r3, r0
   31ff2:	b148      	cbz	r0, 32008 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   31ff4:	8a00      	ldrh	r0, [r0, #16]
   31ff6:	b938      	cbnz	r0, 32008 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31ff8:	4912      	ldr	r1, [pc, #72]	; (32044 <bt_gatt_attr_get_handle+0x58>)
   31ffa:	f8df e04c 	ldr.w	lr, [pc, #76]	; 32048 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   31ffe:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   32000:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   32004:	4571      	cmp	r1, lr
   32006:	d301      	bcc.n	3200c <bt_gatt_attr_get_handle+0x20>
}
   32008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   3200c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   32010:	42bb      	cmp	r3, r7
   32012:	d304      	bcc.n	3201e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   32014:	fb0c 7206 	mla	r2, ip, r6, r7
   32018:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   3201a:	4293      	cmp	r3, r2
   3201c:	d90e      	bls.n	3203c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   3201e:	19a2      	adds	r2, r4, r6
   32020:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   32022:	3108      	adds	r1, #8
   32024:	4614      	mov	r4, r2
   32026:	e7ed      	b.n	32004 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   32028:	fb0c 7805 	mla	r8, ip, r5, r7
   3202c:	4543      	cmp	r3, r8
   3202e:	d007      	beq.n	32040 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   32030:	3501      	adds	r5, #1
   32032:	1962      	adds	r2, r4, r5
   32034:	42b5      	cmp	r5, r6
   32036:	b292      	uxth	r2, r2
   32038:	d1f6      	bne.n	32028 <bt_gatt_attr_get_handle+0x3c>
   3203a:	e7f2      	b.n	32022 <bt_gatt_attr_get_handle+0x36>
   3203c:	2500      	movs	r5, #0
   3203e:	e7f8      	b.n	32032 <bt_gatt_attr_get_handle+0x46>
   32040:	4610      	mov	r0, r2
   32042:	e7e1      	b.n	32008 <bt_gatt_attr_get_handle+0x1c>
   32044:	00052820 	.word	0x00052820
   32048:	00052848 	.word	0x00052848

0003204c <bt_gatt_foreach_attr_type>:
{
   3204c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32050:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   32054:	9100      	str	r1, [sp, #0]
   32056:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   32058:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3205c:	2d00      	cmp	r5, #0
   3205e:	bf08      	it	eq
   32060:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   32062:	4b24      	ldr	r3, [pc, #144]	; (320f4 <bt_gatt_foreach_attr_type+0xa8>)
   32064:	881b      	ldrh	r3, [r3, #0]
   32066:	4283      	cmp	r3, r0
{
   32068:	4607      	mov	r7, r0
   3206a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   3206c:	d23c      	bcs.n	320e8 <bt_gatt_foreach_attr_type+0x9c>
}
   3206e:	b003      	add	sp, #12
   32070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   32074:	6873      	ldr	r3, [r6, #4]
   32076:	4423      	add	r3, r4
   32078:	42bb      	cmp	r3, r7
   3207a:	d232      	bcs.n	320e2 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   3207c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3207e:	3608      	adds	r6, #8
   32080:	4b1d      	ldr	r3, [pc, #116]	; (320f8 <bt_gatt_foreach_attr_type+0xac>)
   32082:	429e      	cmp	r6, r3
   32084:	d3f6      	bcc.n	32074 <bt_gatt_foreach_attr_type+0x28>
   32086:	e7f2      	b.n	3206e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   32088:	5889      	ldr	r1, [r1, r2]
   3208a:	9301      	str	r3, [sp, #4]
   3208c:	4640      	mov	r0, r8
   3208e:	f01a fc00 	bl	4c892 <bt_uuid_cmp>
   32092:	9b01      	ldr	r3, [sp, #4]
   32094:	b190      	cbz	r0, 320bc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   32096:	3401      	adds	r4, #1
   32098:	f10a 0a01 	add.w	sl, sl, #1
   3209c:	b2a4      	uxth	r4, r4
   3209e:	6873      	ldr	r3, [r6, #4]
   320a0:	4553      	cmp	r3, sl
   320a2:	d9ec      	bls.n	3207e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   320a4:	9b00      	ldr	r3, [sp, #0]
   320a6:	429c      	cmp	r4, r3
   320a8:	d8e1      	bhi.n	3206e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   320aa:	42bc      	cmp	r4, r7
   320ac:	d3f3      	bcc.n	32096 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   320ae:	6831      	ldr	r1, [r6, #0]
   320b0:	fb0b f20a 	mul.w	r2, fp, sl
   320b4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   320b6:	f1b8 0f00 	cmp.w	r8, #0
   320ba:	d1e5      	bne.n	32088 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   320bc:	f1b9 0f00 	cmp.w	r9, #0
   320c0:	d10b      	bne.n	320da <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   320c2:	3d01      	subs	r5, #1
   320c4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   320c6:	4618      	mov	r0, r3
   320c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   320ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   320cc:	4621      	mov	r1, r4
   320ce:	4798      	blx	r3
	if (!*num_matches) {
   320d0:	2d00      	cmp	r5, #0
   320d2:	d0cc      	beq.n	3206e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   320d4:	2800      	cmp	r0, #0
   320d6:	d1de      	bne.n	32096 <bt_gatt_foreach_attr_type+0x4a>
   320d8:	e7c9      	b.n	3206e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   320da:	68da      	ldr	r2, [r3, #12]
   320dc:	4591      	cmp	r9, r2
   320de:	d1da      	bne.n	32096 <bt_gatt_foreach_attr_type+0x4a>
   320e0:	e7ef      	b.n	320c2 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   320e2:	f04f 0a00 	mov.w	sl, #0
   320e6:	e7da      	b.n	3209e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   320e8:	4e04      	ldr	r6, [pc, #16]	; (320fc <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   320ea:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   320ec:	f04f 0b14 	mov.w	fp, #20
   320f0:	e7c6      	b.n	32080 <bt_gatt_foreach_attr_type+0x34>
   320f2:	bf00      	nop
   320f4:	20007580 	.word	0x20007580
   320f8:	00052848 	.word	0x00052848
   320fc:	00052820 	.word	0x00052820

00032100 <db_hash_gen>:
{
   32100:	b530      	push	{r4, r5, lr}
   32102:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   32104:	2300      	movs	r3, #0
{
   32106:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   32108:	aa1c      	add	r2, sp, #112	; 0x70
   3210a:	4669      	mov	r1, sp
   3210c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   3210e:	e9cd 3300 	strd	r3, r3, [sp]
   32112:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   32116:	f01a f93a 	bl	4c38e <tc_cmac_setup>
   3211a:	b308      	cbz	r0, 32160 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   3211c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32120:	2001      	movs	r0, #1
   32122:	4a10      	ldr	r2, [pc, #64]	; (32164 <db_hash_gen+0x64>)
   32124:	ab04      	add	r3, sp, #16
   32126:	f01c ff87 	bl	4f038 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   3212a:	480f      	ldr	r0, [pc, #60]	; (32168 <db_hash_gen+0x68>)
   3212c:	a904      	add	r1, sp, #16
   3212e:	f01a f9c4 	bl	4c4ba <tc_cmac_final>
   32132:	b1a8      	cbz	r0, 32160 <db_hash_gen+0x60>
   32134:	4b0c      	ldr	r3, [pc, #48]	; (32168 <db_hash_gen+0x68>)
   32136:	2208      	movs	r2, #8
   32138:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   3213c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3213e:	780d      	ldrb	r5, [r1, #0]
   32140:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   32144:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   32146:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   3214a:	d1f7      	bne.n	3213c <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   3214c:	b124      	cbz	r4, 32158 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   3214e:	4906      	ldr	r1, [pc, #24]	; (32168 <db_hash_gen+0x68>)
   32150:	4806      	ldr	r0, [pc, #24]	; (3216c <db_hash_gen+0x6c>)
   32152:	2210      	movs	r2, #16
   32154:	f7fa fc08 	bl	2c968 <settings_save_one>
   32158:	4805      	ldr	r0, [pc, #20]	; (32170 <db_hash_gen+0x70>)
   3215a:	2104      	movs	r1, #4
   3215c:	f01c fb47 	bl	4e7ee <atomic_or>
}
   32160:	b049      	add	sp, #292	; 0x124
   32162:	bd30      	pop	{r4, r5, pc}
   32164:	0004e745 	.word	0x0004e745
   32168:	20002728 	.word	0x20002728
   3216c:	00056abe 	.word	0x00056abe
   32170:	20002838 	.word	0x20002838

00032174 <db_hash_process>:
{
   32174:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32176:	4829      	ldr	r0, [pc, #164]	; (3221c <db_hash_process+0xa8>)
   32178:	f06f 0108 	mvn.w	r1, #8
   3217c:	f01c fc38 	bl	4e9f0 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   32180:	0700      	lsls	r0, r0, #28
   32182:	d545      	bpl.n	32210 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   32184:	4825      	ldr	r0, [pc, #148]	; (3221c <db_hash_process+0xa8>)
   32186:	f01c fad7 	bl	4e738 <atomic_get>
   3218a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   3218c:	0759      	lsls	r1, r3, #29
   3218e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   32192:	d401      	bmi.n	32198 <db_hash_process+0x24>
			db_hash_gen(false);
   32194:	f7ff ffb4 	bl	32100 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   32198:	4921      	ldr	r1, [pc, #132]	; (32220 <db_hash_process+0xac>)
   3219a:	2210      	movs	r2, #16
   3219c:	1888      	adds	r0, r1, r2
   3219e:	f01a fa79 	bl	4c694 <memcmp>
   321a2:	b948      	cbnz	r0, 321b8 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   321a4:	481f      	ldr	r0, [pc, #124]	; (32224 <db_hash_process+0xb0>)
   321a6:	f01f fbfc 	bl	519a2 <k_work_cancel_delayable>
}
   321aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   321ae:	481b      	ldr	r0, [pc, #108]	; (3221c <db_hash_process+0xa8>)
   321b0:	f06f 0101 	mvn.w	r1, #1
   321b4:	f01c bc1c 	b.w	4e9f0 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   321b8:	4c1b      	ldr	r4, [pc, #108]	; (32228 <db_hash_process+0xb4>)
   321ba:	2101      	movs	r1, #1
   321bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   321c0:	f01c fb15 	bl	4e7ee <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   321c4:	07c2      	lsls	r2, r0, #31
   321c6:	d413      	bmi.n	321f0 <db_hash_process+0x7c>
		gatt_sc.start = start;
   321c8:	4b18      	ldr	r3, [pc, #96]	; (3222c <db_hash_process+0xb8>)
   321ca:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   321cc:	4813      	ldr	r0, [pc, #76]	; (3221c <db_hash_process+0xa8>)
   321ce:	f01c fab3 	bl	4e738 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   321d2:	0783      	lsls	r3, r0, #30
   321d4:	d405      	bmi.n	321e2 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   321d6:	4813      	ldr	r0, [pc, #76]	; (32224 <db_hash_process+0xb0>)
   321d8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   321dc:	2300      	movs	r3, #0
   321de:	f016 fd6f 	bl	48cc0 <k_work_reschedule>
}
   321e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   321e6:	490e      	ldr	r1, [pc, #56]	; (32220 <db_hash_process+0xac>)
   321e8:	4811      	ldr	r0, [pc, #68]	; (32230 <db_hash_process+0xbc>)
   321ea:	2210      	movs	r2, #16
   321ec:	f7fa bbbc 	b.w	2c968 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   321f0:	8b23      	ldrh	r3, [r4, #24]
   321f2:	8b62      	ldrh	r2, [r4, #26]
   321f4:	2b01      	cmp	r3, #1
   321f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   321fa:	d805      	bhi.n	32208 <db_hash_process+0x94>
   321fc:	429a      	cmp	r2, r3
   321fe:	d0f0      	beq.n	321e2 <db_hash_process+0x6e>
		*end = new_end;
   32200:	f64f 73ff 	movw	r3, #65535	; 0xffff
   32204:	8363      	strh	r3, [r4, #26]
   32206:	e7e1      	b.n	321cc <db_hash_process+0x58>
	if (*end < new_end) {
   32208:	429a      	cmp	r2, r3
		*start = new_start;
   3220a:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   3220c:	d0de      	beq.n	321cc <db_hash_process+0x58>
   3220e:	e7f7      	b.n	32200 <db_hash_process+0x8c>
}
   32210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   32214:	2001      	movs	r0, #1
   32216:	f7ff bf73 	b.w	32100 <db_hash_gen>
   3221a:	bf00      	nop
   3221c:	20002838 	.word	0x20002838
   32220:	20002728 	.word	0x20002728
   32224:	20002808 	.word	0x20002808
   32228:	200027e8 	.word	0x200027e8
   3222c:	ffff0001 	.word	0xffff0001
   32230:	00056abe 	.word	0x00056abe

00032234 <ccc_set_direct>:
{
   32234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32238:	b0b8      	sub	sp, #224	; 0xe0
   3223a:	460f      	mov	r7, r1
   3223c:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   3223e:	4922      	ldr	r1, [pc, #136]	; (322c8 <ccc_set_direct+0x94>)
   32240:	983e      	ldr	r0, [sp, #248]	; 0xf8
   32242:	466a      	mov	r2, sp
{
   32244:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   32246:	f018 ff48 	bl	4b0da <settings_name_steq>
   3224a:	2800      	cmp	r0, #0
   3224c:	d038      	beq.n	322c0 <ccc_set_direct+0x8c>
		return ccc_set(name, len, read_cb, cb_arg);
   3224e:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   32250:	a901      	add	r1, sp, #4
   32252:	4620      	mov	r0, r4
   32254:	f018 ff64 	bl	4b120 <settings_name_next>
		if (!name) {
   32258:	b164      	cbz	r4, 32274 <ccc_set_direct+0x40>
		} else if (!next) {
   3225a:	9801      	ldr	r0, [sp, #4]
   3225c:	b970      	cbnz	r0, 3227c <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   3225e:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   32262:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   32264:	4620      	mov	r0, r4
   32266:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   32268:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   3226c:	f01a faeb 	bl	4c846 <bt_settings_decode_key>
		if (err) {
   32270:	4604      	mov	r4, r0
   32272:	b150      	cbz	r0, 3228a <ccc_set_direct+0x56>
			return -EINVAL;
   32274:	f06f 0015 	mvn.w	r0, #21
   32278:	4604      	mov	r4, r0
   3227a:	e01a      	b.n	322b2 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   3227c:	220a      	movs	r2, #10
   3227e:	2100      	movs	r1, #0
   32280:	f01a f961 	bl	4c546 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   32284:	2800      	cmp	r0, #0
   32286:	d0ea      	beq.n	3225e <ccc_set_direct+0x2a>
   32288:	e7f4      	b.n	32274 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   3228a:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   3228e:	b1a7      	cbz	r7, 322ba <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   32290:	af08      	add	r7, sp, #32
   32292:	22c0      	movs	r2, #192	; 0xc0
   32294:	4639      	mov	r1, r7
   32296:	4630      	mov	r0, r6
   32298:	47a8      	blx	r5
			if (len < 0) {
   3229a:	2800      	cmp	r0, #0
   3229c:	dbec      	blt.n	32278 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   3229e:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
   322a0:	9706      	str	r7, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   322a2:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   322a4:	4a09      	ldr	r2, [pc, #36]	; (322cc <ccc_set_direct+0x98>)
   322a6:	ab04      	add	r3, sp, #16
   322a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   322ac:	2001      	movs	r0, #1
   322ae:	f01c fec3 	bl	4f038 <bt_gatt_foreach_attr>
}
   322b2:	4620      	mov	r0, r4
   322b4:	b038      	add	sp, #224	; 0xe0
   322b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.count = 0;
   322ba:	e9cd 0006 	strd	r0, r0, [sp, #24]
   322be:	e7f1      	b.n	322a4 <ccc_set_direct+0x70>
			return -EINVAL;
   322c0:	f06f 0415 	mvn.w	r4, #21
   322c4:	e7f5      	b.n	322b2 <ccc_set_direct+0x7e>
   322c6:	bf00      	nop
   322c8:	00056ac6 	.word	0x00056ac6
   322cc:	00031c59 	.word	0x00031c59

000322d0 <gatt_indicate>:
{
   322d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   322d4:	4615      	mov	r5, r2
   322d6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   322d8:	2214      	movs	r2, #20
   322da:	6869      	ldr	r1, [r5, #4]
{
   322dc:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   322de:	f01c feb6 	bl	4f04e <bt_gatt_check_perm>
   322e2:	4607      	mov	r7, r0
   322e4:	2800      	cmp	r0, #0
   322e6:	d13c      	bne.n	32362 <_flash_used+0x46>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   322e8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   322ec:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   322ee:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   322f0:	f7ff fa3c 	bl	3176c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   322f4:	3602      	adds	r6, #2
	if (!req) {
   322f6:	4604      	mov	r4, r0
   322f8:	b920      	cbnz	r0, 32304 <gatt_indicate+0x34>
		return -ENOMEM;
   322fa:	f06f 050b 	mvn.w	r5, #11
}
   322fe:	4628      	mov	r0, r5
   32300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   32304:	4b18      	ldr	r3, [pc, #96]	; (32368 <_flash_used+0x4c>)
	req->len = len;
   32306:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   32308:	211d      	movs	r1, #29
   3230a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   3230c:	60c7      	str	r7, [r0, #12]
	req->func = func;
   3230e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   32310:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   32312:	4632      	mov	r2, r6
   32314:	4640      	mov	r0, r8
   32316:	f01c f8b1 	bl	4e47c <bt_att_create_pdu>
	if (!buf) {
   3231a:	4606      	mov	r6, r0
   3231c:	b918      	cbnz	r0, 32326 <_flash_used+0xa>
		bt_att_req_free(req);
   3231e:	4620      	mov	r0, r4
   32320:	f7ff fa46 	bl	317b0 <bt_att_req_free>
   32324:	e7e9      	b.n	322fa <gatt_indicate+0x2a>
   32326:	f100 0a08 	add.w	sl, r0, #8
   3232a:	2102      	movs	r1, #2
   3232c:	4650      	mov	r0, sl
   3232e:	f01e f9eb 	bl	50708 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   32332:	4607      	mov	r7, r0
   32334:	8aa9      	ldrh	r1, [r5, #20]
   32336:	f827 9b02 	strh.w	r9, [r7], #2
   3233a:	4650      	mov	r0, sl
   3233c:	f01e f9e4 	bl	50708 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   32340:	8aaa      	ldrh	r2, [r5, #20]
   32342:	6929      	ldr	r1, [r5, #16]
   32344:	4638      	mov	r0, r7
   32346:	f01a f9b6 	bl	4c6b6 <memcpy>
	req->buf = buf;
   3234a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   3234c:	4621      	mov	r1, r4
   3234e:	4640      	mov	r0, r8
   32350:	f01c f993 	bl	4e67a <bt_att_req_send>
	if (err) {
   32354:	4605      	mov	r5, r0
   32356:	2800      	cmp	r0, #0
   32358:	d0d1      	beq.n	322fe <gatt_indicate+0x2e>
		bt_att_req_free(req);
   3235a:	4620      	mov	r0, r4
   3235c:	f7ff fa28 	bl	317b0 <bt_att_req_free>
   32360:	e7cd      	b.n	322fe <gatt_indicate+0x2e>
		return -EPERM;
   32362:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32366:	e7ca      	b.n	322fe <gatt_indicate+0x2e>
   32368:	0004e707 	.word	0x0004e707

0003236c <bt_gatt_indicate>:
{
   3236c:	b530      	push	{r4, r5, lr}
   3236e:	4604      	mov	r4, r0
   32370:	b08b      	sub	sp, #44	; 0x2c
   32372:	4837      	ldr	r0, [pc, #220]	; (32450 <bt_gatt_indicate+0xe4>)
   32374:	f01c f9e0 	bl	4e738 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   32378:	0782      	lsls	r2, r0, #30
{
   3237a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3237c:	d561      	bpl.n	32442 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   3237e:	b114      	cbz	r4, 32386 <bt_gatt_indicate+0x1a>
   32380:	7b63      	ldrb	r3, [r4, #13]
   32382:	2b07      	cmp	r3, #7
   32384:	d160      	bne.n	32448 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   32386:	6868      	ldr	r0, [r5, #4]
   32388:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   3238a:	f7ff fe2f 	bl	31fec <bt_gatt_attr_get_handle>
	if (params->uuid) {
   3238e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   32390:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   32394:	b33a      	cbz	r2, 323e6 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   32396:	a905      	add	r1, sp, #20
   32398:	9102      	str	r1, [sp, #8]
   3239a:	492e      	ldr	r1, [pc, #184]	; (32454 <bt_gatt_indicate+0xe8>)
   3239c:	9101      	str	r1, [sp, #4]
   3239e:	2101      	movs	r1, #1
	found->attr = NULL;
   323a0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   323a2:	9100      	str	r1, [sp, #0]
   323a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   323a8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   323aa:	f7ff fe4f 	bl	3204c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   323ae:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   323b0:	b91b      	cbnz	r3, 323ba <bt_gatt_indicate+0x4e>
			return -ENOENT;
   323b2:	f06f 0001 	mvn.w	r0, #1
}
   323b6:	b00b      	add	sp, #44	; 0x2c
   323b8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   323ba:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   323bc:	9b05      	ldr	r3, [sp, #20]
   323be:	6818      	ldr	r0, [r3, #0]
   323c0:	2300      	movs	r3, #0
   323c2:	f88d 3010 	strb.w	r3, [sp, #16]
   323c6:	a904      	add	r1, sp, #16
   323c8:	f642 0303 	movw	r3, #10243	; 0x2803
   323cc:	f8ad 3012 	strh.w	r3, [sp, #18]
   323d0:	f01a fa5f 	bl	4c892 <bt_uuid_cmp>
   323d4:	b970      	cbnz	r0, 323f4 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   323d6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   323d8:	68c3      	ldr	r3, [r0, #12]
   323da:	799b      	ldrb	r3, [r3, #6]
   323dc:	069b      	lsls	r3, r3, #26
   323de:	d405      	bmi.n	323ec <bt_gatt_indicate+0x80>
			return -EINVAL;
   323e0:	f06f 0015 	mvn.w	r0, #21
   323e4:	e7e7      	b.n	323b6 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   323e6:	2800      	cmp	r0, #0
   323e8:	d1e8      	bne.n	323bc <bt_gatt_indicate+0x50>
   323ea:	e7e2      	b.n	323b2 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   323ec:	f01c fdd6 	bl	4ef9c <bt_gatt_attr_value_handle>
   323f0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   323f4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   323f8:	b13c      	cbz	r4, 3240a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   323fa:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   323fc:	4601      	mov	r1, r0
		params->_ref = 1;
   323fe:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   32400:	462a      	mov	r2, r5
   32402:	4620      	mov	r0, r4
   32404:	f7ff ff64 	bl	322d0 <gatt_indicate>
   32408:	e7d5      	b.n	323b6 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   3240a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   3240e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   32410:	2302      	movs	r3, #2
   32412:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   32416:	f642 1302 	movw	r3, #10498	; 0x2902
   3241a:	f8ad 3012 	strh.w	r3, [sp, #18]
   3241e:	ab05      	add	r3, sp, #20
   32420:	9302      	str	r3, [sp, #8]
   32422:	4b0d      	ldr	r3, [pc, #52]	; (32458 <bt_gatt_indicate+0xec>)
   32424:	9301      	str	r3, [sp, #4]
   32426:	2301      	movs	r3, #1
   32428:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   3242a:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   3242c:	4623      	mov	r3, r4
   3242e:	aa04      	add	r2, sp, #16
   32430:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   32434:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   32436:	f88d 4010 	strb.w	r4, [sp, #16]
   3243a:	f7ff fe07 	bl	3204c <bt_gatt_foreach_attr_type>
	return data.err;
   3243e:	9807      	ldr	r0, [sp, #28]
   32440:	e7b9      	b.n	323b6 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   32442:	f06f 000a 	mvn.w	r0, #10
   32446:	e7b6      	b.n	323b6 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   32448:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3244c:	e7b3      	b.n	323b6 <bt_gatt_indicate+0x4a>
   3244e:	bf00      	nop
   32450:	2000010c 	.word	0x2000010c
   32454:	0004e72d 	.word	0x0004e72d
   32458:	000325a9 	.word	0x000325a9

0003245c <sc_process>:
{
   3245c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   3245e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   32462:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   32466:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   3246a:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   3246c:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   32470:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   32474:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32478:	f06f 0101 	mvn.w	r1, #1
   3247c:	4628      	mov	r0, r5
   3247e:	f01c fab7 	bl	4e9f0 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   32482:	4b0d      	ldr	r3, [pc, #52]	; (324b8 <sc_process+0x5c>)
   32484:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   32488:	4b0c      	ldr	r3, [pc, #48]	; (324bc <sc_process+0x60>)
   3248a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   3248e:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   32490:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   32492:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   32496:	2304      	movs	r3, #4
	sc->start = 0U;
   32498:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   3249c:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   324a0:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   324a4:	4631      	mov	r1, r6
   324a6:	f7ff ff61 	bl	3236c <bt_gatt_indicate>
   324aa:	b918      	cbnz	r0, 324b4 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   324ac:	2102      	movs	r1, #2
   324ae:	4628      	mov	r0, r5
   324b0:	f01c f99d 	bl	4e7ee <atomic_or>
}
   324b4:	b002      	add	sp, #8
   324b6:	bd70      	pop	{r4, r5, r6, pc}
   324b8:	00054f4c 	.word	0x00054f4c
   324bc:	00031ed1 	.word	0x00031ed1

000324c0 <bt_gatt_notify_cb>:
{
   324c0:	b530      	push	{r4, r5, lr}
   324c2:	4604      	mov	r4, r0
   324c4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   324c6:	4835      	ldr	r0, [pc, #212]	; (3259c <bt_gatt_notify_cb+0xdc>)
   324c8:	f01c f936 	bl	4e738 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   324cc:	0782      	lsls	r2, r0, #30
{
   324ce:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   324d0:	d55d      	bpl.n	3258e <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   324d2:	b114      	cbz	r4, 324da <bt_gatt_notify_cb+0x1a>
   324d4:	7b63      	ldrb	r3, [r4, #13]
   324d6:	2b07      	cmp	r3, #7
   324d8:	d15c      	bne.n	32594 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   324da:	6868      	ldr	r0, [r5, #4]
   324dc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   324de:	f7ff fd85 	bl	31fec <bt_gatt_attr_get_handle>
	if (params->uuid) {
   324e2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   324e4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   324e8:	b33a      	cbz	r2, 3253a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   324ea:	a905      	add	r1, sp, #20
   324ec:	9102      	str	r1, [sp, #8]
   324ee:	492c      	ldr	r1, [pc, #176]	; (325a0 <bt_gatt_notify_cb+0xe0>)
   324f0:	9101      	str	r1, [sp, #4]
   324f2:	2101      	movs	r1, #1
	found->attr = NULL;
   324f4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   324f6:	9100      	str	r1, [sp, #0]
   324f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   324fc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   324fe:	f7ff fda5 	bl	3204c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   32502:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   32504:	b91b      	cbnz	r3, 3250e <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   32506:	f06f 0001 	mvn.w	r0, #1
}
   3250a:	b00b      	add	sp, #44	; 0x2c
   3250c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   3250e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   32510:	9b05      	ldr	r3, [sp, #20]
   32512:	6818      	ldr	r0, [r3, #0]
   32514:	2300      	movs	r3, #0
   32516:	f88d 3010 	strb.w	r3, [sp, #16]
   3251a:	a904      	add	r1, sp, #16
   3251c:	f642 0303 	movw	r3, #10243	; 0x2803
   32520:	f8ad 3012 	strh.w	r3, [sp, #18]
   32524:	f01a f9b5 	bl	4c892 <bt_uuid_cmp>
   32528:	b970      	cbnz	r0, 32548 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   3252a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   3252c:	68c3      	ldr	r3, [r0, #12]
   3252e:	799b      	ldrb	r3, [r3, #6]
   32530:	06db      	lsls	r3, r3, #27
   32532:	d405      	bmi.n	32540 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   32534:	f06f 0015 	mvn.w	r0, #21
   32538:	e7e7      	b.n	3250a <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   3253a:	2800      	cmp	r0, #0
   3253c:	d1e8      	bne.n	32510 <bt_gatt_notify_cb+0x50>
   3253e:	e7e2      	b.n	32506 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   32540:	f01c fd2c 	bl	4ef9c <bt_gatt_attr_value_handle>
   32544:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   32548:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   3254c:	b12c      	cbz	r4, 3255a <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   3254e:	4601      	mov	r1, r0
   32550:	462a      	mov	r2, r5
   32552:	4620      	mov	r0, r4
   32554:	f01c fda6 	bl	4f0a4 <gatt_notify>
   32558:	e7d7      	b.n	3250a <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   3255a:	f642 1202 	movw	r2, #10498	; 0x2902
   3255e:	f8ad 2012 	strh.w	r2, [sp, #18]
   32562:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   32564:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   32568:	9202      	str	r2, [sp, #8]
   3256a:	4a0e      	ldr	r2, [pc, #56]	; (325a4 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   3256c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   3256e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   32570:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   32574:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   32578:	aa04      	add	r2, sp, #16
   3257a:	4623      	mov	r3, r4
   3257c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   32580:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   32582:	f88d 4010 	strb.w	r4, [sp, #16]
   32586:	f7ff fd61 	bl	3204c <bt_gatt_foreach_attr_type>
	return data.err;
   3258a:	9807      	ldr	r0, [sp, #28]
   3258c:	e7bd      	b.n	3250a <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   3258e:	f06f 000a 	mvn.w	r0, #10
   32592:	e7ba      	b.n	3250a <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   32594:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   32598:	e7b7      	b.n	3250a <bt_gatt_notify_cb+0x4a>
   3259a:	bf00      	nop
   3259c:	2000010c 	.word	0x2000010c
   325a0:	0004e72d 	.word	0x0004e72d
   325a4:	000325a9 	.word	0x000325a9

000325a8 <notify_cb>:
{
   325a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   325ac:	4b3e      	ldr	r3, [pc, #248]	; (326a8 <notify_cb+0x100>)
{
   325ae:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   325b0:	6882      	ldr	r2, [r0, #8]
   325b2:	429a      	cmp	r2, r3
{
   325b4:	b085      	sub	sp, #20
   325b6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   325b8:	d005      	beq.n	325c6 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   325ba:	f04f 0801 	mov.w	r8, #1
}
   325be:	4640      	mov	r0, r8
   325c0:	b005      	add	sp, #20
   325c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   325c6:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   325ca:	4b38      	ldr	r3, [pc, #224]	; (326ac <notify_cb+0x104>)
   325cc:	4599      	cmp	r9, r3
   325ce:	d01a      	beq.n	32606 <notify_cb+0x5e>
   325d0:	f109 0601 	add.w	r6, r9, #1
   325d4:	f109 0a3d 	add.w	sl, r9, #61	; 0x3d
		data->err = 0;
   325d8:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
   325dc:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   325e0:	89a3      	ldrh	r3, [r4, #12]
   325e2:	429a      	cmp	r2, r3
   325e4:	d10b      	bne.n	325fe <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   325e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   325ea:	4631      	mov	r1, r6
   325ec:	f7fd ffe0 	bl	305b0 <bt_conn_lookup_addr_le>
		if (!conn) {
   325f0:	4605      	mov	r5, r0
   325f2:	b120      	cbz	r0, 325fe <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
   325f4:	7b43      	ldrb	r3, [r0, #13]
   325f6:	2b07      	cmp	r3, #7
   325f8:	d02a      	beq.n	32650 <notify_cb+0xa8>
			bt_conn_unref(conn);
   325fa:	f01b f89b 	bl	4d734 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   325fe:	360a      	adds	r6, #10
   32600:	4556      	cmp	r6, sl
   32602:	d1eb      	bne.n	325dc <notify_cb+0x34>
   32604:	e7d9      	b.n	325ba <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   32606:	2600      	movs	r6, #0
   32608:	4d29      	ldr	r5, [pc, #164]	; (326b0 <notify_cb+0x108>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   3260a:	46b0      	mov	r8, r6
   3260c:	a902      	add	r1, sp, #8
   3260e:	4628      	mov	r0, r5
   32610:	f8cd 8008 	str.w	r8, [sp, #8]
   32614:	f8cd 800b 	str.w	r8, [sp, #11]
   32618:	f01c f8f8 	bl	4e80c <bt_addr_le_cmp>
   3261c:	b178      	cbz	r0, 3263e <notify_cb+0x96>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   3261e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   32622:	2207      	movs	r2, #7
   32624:	4629      	mov	r1, r5
   32626:	f7fd ffe7 	bl	305f8 <bt_conn_lookup_state_le>
			if (!conn) {
   3262a:	b970      	cbnz	r0, 3264a <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
   3262c:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   3262e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   32632:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   32634:	4629      	mov	r1, r5
   32636:	8853      	ldrh	r3, [r2, #2]
   32638:	8812      	ldrh	r2, [r2, #0]
   3263a:	f01c f9a5 	bl	4e988 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   3263e:	3601      	adds	r6, #1
   32640:	2e0c      	cmp	r6, #12
   32642:	f105 050c 	add.w	r5, r5, #12
   32646:	d1e1      	bne.n	3260c <notify_cb+0x64>
   32648:	e7c2      	b.n	325d0 <notify_cb+0x28>
			bt_conn_unref(conn);
   3264a:	f01b f873 	bl	4d734 <bt_conn_unref>
   3264e:	e7f6      	b.n	3263e <notify_cb+0x96>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   32650:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
   32654:	b123      	cbz	r3, 32660 <notify_cb+0xb8>
   32656:	4639      	mov	r1, r7
   32658:	4798      	blx	r3
   3265a:	b908      	cbnz	r0, 32660 <notify_cb+0xb8>
			bt_conn_unref(conn);
   3265c:	4628      	mov	r0, r5
   3265e:	e7cc      	b.n	325fa <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
   32660:	2214      	movs	r2, #20
   32662:	4639      	mov	r1, r7
   32664:	4628      	mov	r0, r5
   32666:	f01c fcf2 	bl	4f04e <bt_gatt_check_perm>
   3266a:	4680      	mov	r8, r0
   3266c:	2800      	cmp	r0, #0
   3266e:	d1c6      	bne.n	325fe <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
   32670:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   32672:	88a1      	ldrh	r1, [r4, #4]
   32674:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   32676:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   32678:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   3267a:	d111      	bne.n	326a0 <notify_cb+0xf8>
			err = gatt_indicate(conn, data->handle,
   3267c:	f7ff fe28 	bl	322d0 <gatt_indicate>
			if (err == 0) {
   32680:	4603      	mov	r3, r0
   32682:	b918      	cbnz	r0, 3268c <notify_cb+0xe4>
				data->ind_params->_ref++;
   32684:	6921      	ldr	r1, [r4, #16]
   32686:	7d8a      	ldrb	r2, [r1, #22]
   32688:	3201      	adds	r2, #1
   3268a:	758a      	strb	r2, [r1, #22]
		bt_conn_unref(conn);
   3268c:	4628      	mov	r0, r5
   3268e:	9301      	str	r3, [sp, #4]
   32690:	f01b f850 	bl	4d734 <bt_conn_unref>
		if (err < 0) {
   32694:	9b01      	ldr	r3, [sp, #4]
   32696:	2b00      	cmp	r3, #0
   32698:	db91      	blt.n	325be <notify_cb+0x16>
		data->err = 0;
   3269a:	f8c4 b008 	str.w	fp, [r4, #8]
   3269e:	e7ae      	b.n	325fe <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   326a0:	f01c fd00 	bl	4f0a4 <gatt_notify>
   326a4:	4603      	mov	r3, r0
   326a6:	e7f1      	b.n	3268c <notify_cb+0xe4>
   326a8:	00031b21 	.word	0x00031b21
   326ac:	20000a2c 	.word	0x20000a2c
   326b0:	20007583 	.word	0x20007583

000326b4 <update_ccc>:
{
   326b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   326b8:	4b31      	ldr	r3, [pc, #196]	; (32780 <update_ccc+0xcc>)
{
   326ba:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   326bc:	6882      	ldr	r2, [r0, #8]
   326be:	429a      	cmp	r2, r3
{
   326c0:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   326c2:	d159      	bne.n	32778 <update_ccc+0xc4>
	ccc = attr->user_data;
   326c4:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   326c8:	683c      	ldr	r4, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   326ca:	f108 0501 	add.w	r5, r8, #1
   326ce:	f108 093d 	add.w	r9, r8, #61	; 0x3d
		if (!cfg->value ||
   326d2:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   326d6:	b1f3      	cbz	r3, 32716 <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   326d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   326dc:	462a      	mov	r2, r5
   326de:	4620      	mov	r0, r4
   326e0:	f01b f8d1 	bl	4d886 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   326e4:	b1b8      	cbz	r0, 32716 <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   326e6:	222a      	movs	r2, #42	; 0x2a
   326e8:	4631      	mov	r1, r6
   326ea:	4620      	mov	r0, r4
   326ec:	f01c fcaf 	bl	4f04e <bt_gatt_check_perm>
		if (err) {
   326f0:	b1a8      	cbz	r0, 3271e <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   326f2:	2803      	cmp	r0, #3
   326f4:	d00f      	beq.n	32716 <update_ccc+0x62>
				sec = BT_SECURITY_L3;
   326f6:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   326f8:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   326fa:	bf14      	ite	ne
   326fc:	f04f 0a02 	movne.w	sl, #2
   32700:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
   32704:	f01b f8bd 	bl	4d882 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   32708:	4582      	cmp	sl, r0
   3270a:	d908      	bls.n	3271e <update_ccc+0x6a>
				if (data->sec < sec) {
   3270c:	793b      	ldrb	r3, [r7, #4]
   3270e:	4553      	cmp	r3, sl
   32710:	d201      	bcs.n	32716 <update_ccc+0x62>
					data->sec = sec;
   32712:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   32716:	350a      	adds	r5, #10
   32718:	454d      	cmp	r5, r9
   3271a:	d1da      	bne.n	326d2 <update_ccc+0x1e>
   3271c:	e02c      	b.n	32778 <update_ccc+0xc4>
		gatt_ccc_changed(attr, ccc);
   3271e:	4641      	mov	r1, r8
   32720:	4630      	mov	r0, r6
   32722:	f01b ffd9 	bl	4e6d8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   32726:	4b17      	ldr	r3, [pc, #92]	; (32784 <update_ccc+0xd0>)
   32728:	4598      	cmp	r8, r3
   3272a:	d125      	bne.n	32778 <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   3272c:	7a20      	ldrb	r0, [r4, #8]
   3272e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   32732:	f7ff f96b 	bl	31a0c <find_sc_cfg>
	if (!cfg) {
   32736:	b1f8      	cbz	r0, 32778 <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
   32738:	8902      	ldrh	r2, [r0, #8]
   3273a:	8943      	ldrh	r3, [r0, #10]
   3273c:	ea52 0103 	orrs.w	r1, r2, r3
   32740:	d01a      	beq.n	32778 <update_ccc+0xc4>
	index = bt_conn_index(conn);
   32742:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   32744:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   32748:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   3274c:	f7fd fdfc 	bl	30348 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   32750:	490d      	ldr	r1, [pc, #52]	; (32788 <update_ccc+0xd4>)
   32752:	4a0e      	ldr	r2, [pc, #56]	; (3278c <update_ccc+0xd8>)
   32754:	2318      	movs	r3, #24
   32756:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3275a:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   3275c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   3275e:	4a0c      	ldr	r2, [pc, #48]	; (32790 <update_ccc+0xdc>)
   32760:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   32762:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   32764:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   32768:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   3276a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3276c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   32770:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   32772:	4620      	mov	r0, r4
   32774:	f7ff fdfa 	bl	3236c <bt_gatt_indicate>
}
   32778:	2001      	movs	r0, #1
   3277a:	b002      	add	sp, #8
   3277c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32780:	00031b21 	.word	0x00031b21
   32784:	20000a2c 	.word	0x20000a2c
   32788:	20004aa4 	.word	0x20004aa4
   3278c:	00054f4c 	.word	0x00054f4c
   32790:	0004ef2f 	.word	0x0004ef2f

00032794 <bt_gatt_discover>:
{
   32794:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   32796:	7b43      	ldrb	r3, [r0, #13]
   32798:	2b07      	cmp	r3, #7
{
   3279a:	b086      	sub	sp, #24
   3279c:	4605      	mov	r5, r0
   3279e:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   327a0:	f040 809a 	bne.w	328d8 <bt_gatt_discover+0x144>
	switch (params->type) {
   327a4:	7c0b      	ldrb	r3, [r1, #16]
   327a6:	2b06      	cmp	r3, #6
   327a8:	d823      	bhi.n	327f2 <bt_gatt_discover+0x5e>
   327aa:	e8df f003 	tbb	[pc, r3]
   327ae:	0404      	.short	0x0404
   327b0:	8e5c5454 	.word	0x8e5c5454
   327b4:	20          	.byte	0x20
   327b5:	00          	.byte	0x00
		if (params->uuid) {
   327b6:	680b      	ldr	r3, [r1, #0]
   327b8:	b18b      	cbz	r3, 327de <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
   327ba:	781b      	ldrb	r3, [r3, #0]
   327bc:	b16b      	cbz	r3, 327da <bt_gatt_discover+0x46>
   327be:	2b02      	cmp	r3, #2
   327c0:	d117      	bne.n	327f2 <bt_gatt_discover+0x5e>
   327c2:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   327c4:	9301      	str	r3, [sp, #4]
   327c6:	2306      	movs	r3, #6
   327c8:	9300      	str	r3, [sp, #0]
   327ca:	4945      	ldr	r1, [pc, #276]	; (328e0 <bt_gatt_discover+0x14c>)
   327cc:	4b45      	ldr	r3, [pc, #276]	; (328e4 <bt_gatt_discover+0x150>)
   327ce:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   327d0:	4628      	mov	r0, r5
   327d2:	f01c f951 	bl	4ea78 <gatt_req_send>
}
   327d6:	b006      	add	sp, #24
   327d8:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
   327da:	2308      	movs	r3, #8
   327dc:	e7f2      	b.n	327c4 <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   327de:	2310      	movs	r3, #16
   327e0:	2104      	movs	r1, #4
   327e2:	e9cd 3100 	strd	r3, r1, [sp]
   327e6:	4622      	mov	r2, r4
   327e8:	4b3f      	ldr	r3, [pc, #252]	; (328e8 <bt_gatt_discover+0x154>)
   327ea:	4940      	ldr	r1, [pc, #256]	; (328ec <bt_gatt_discover+0x158>)
   327ec:	e7f0      	b.n	327d0 <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   327ee:	6808      	ldr	r0, [r1, #0]
   327f0:	b910      	cbnz	r0, 327f8 <bt_gatt_discover+0x64>
	switch (params->uuid->type) {
   327f2:	f06f 0015 	mvn.w	r0, #21
   327f6:	e7ee      	b.n	327d6 <bt_gatt_discover+0x42>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   327f8:	7806      	ldrb	r6, [r0, #0]
   327fa:	2e00      	cmp	r6, #0
   327fc:	d1f9      	bne.n	327f2 <bt_gatt_discover+0x5e>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   327fe:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   32802:	a902      	add	r1, sp, #8
   32804:	f88d 6008 	strb.w	r6, [sp, #8]
   32808:	f8ad 300a 	strh.w	r3, [sp, #10]
   3280c:	f01a f841 	bl	4c892 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   32810:	b308      	cbz	r0, 32856 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   32812:	f642 1302 	movw	r3, #10498	; 0x2902
   32816:	6820      	ldr	r0, [r4, #0]
   32818:	f88d 600c 	strb.w	r6, [sp, #12]
   3281c:	a903      	add	r1, sp, #12
   3281e:	f8ad 300e 	strh.w	r3, [sp, #14]
   32822:	f01a f836 	bl	4c892 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   32826:	b1b0      	cbz	r0, 32856 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   32828:	f642 1303 	movw	r3, #10499	; 0x2903
   3282c:	6820      	ldr	r0, [r4, #0]
   3282e:	f88d 6010 	strb.w	r6, [sp, #16]
   32832:	a904      	add	r1, sp, #16
   32834:	f8ad 3012 	strh.w	r3, [sp, #18]
   32838:	f01a f82b 	bl	4c892 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   3283c:	b158      	cbz	r0, 32856 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   3283e:	f642 1304 	movw	r3, #10500	; 0x2904
   32842:	6820      	ldr	r0, [r4, #0]
   32844:	f88d 6014 	strb.w	r6, [sp, #20]
   32848:	a905      	add	r1, sp, #20
   3284a:	f8ad 3016 	strh.w	r3, [sp, #22]
   3284e:	f01a f820 	bl	4c892 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   32852:	2800      	cmp	r0, #0
   32854:	d1cd      	bne.n	327f2 <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   32856:	2308      	movs	r3, #8
   32858:	2204      	movs	r2, #4
   3285a:	e9cd 3200 	strd	r3, r2, [sp]
   3285e:	4924      	ldr	r1, [pc, #144]	; (328f0 <bt_gatt_discover+0x15c>)
   32860:	4b24      	ldr	r3, [pc, #144]	; (328f4 <bt_gatt_discover+0x160>)
   32862:	4622      	mov	r2, r4
   32864:	e7b4      	b.n	327d0 <bt_gatt_discover+0x3c>
		if (params->uuid &&
   32866:	6808      	ldr	r0, [r1, #0]
   32868:	b378      	cbz	r0, 328ca <bt_gatt_discover+0x136>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   3286a:	2600      	movs	r6, #0
   3286c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   32870:	a902      	add	r1, sp, #8
   32872:	f88d 6008 	strb.w	r6, [sp, #8]
   32876:	f8ad 300a 	strh.w	r3, [sp, #10]
   3287a:	f01a f80a 	bl	4c892 <bt_uuid_cmp>
		if (params->uuid &&
   3287e:	2800      	cmp	r0, #0
   32880:	d0b7      	beq.n	327f2 <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   32882:	f642 0301 	movw	r3, #10241	; 0x2801
   32886:	6820      	ldr	r0, [r4, #0]
   32888:	f88d 600c 	strb.w	r6, [sp, #12]
   3288c:	a903      	add	r1, sp, #12
   3288e:	f8ad 300e 	strh.w	r3, [sp, #14]
   32892:	f019 fffe 	bl	4c892 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   32896:	2800      	cmp	r0, #0
   32898:	d0ab      	beq.n	327f2 <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   3289a:	f642 0302 	movw	r3, #10242	; 0x2802
   3289e:	6820      	ldr	r0, [r4, #0]
   328a0:	f88d 6010 	strb.w	r6, [sp, #16]
   328a4:	a904      	add	r1, sp, #16
   328a6:	f8ad 3012 	strh.w	r3, [sp, #18]
   328aa:	f019 fff2 	bl	4c892 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   328ae:	2800      	cmp	r0, #0
   328b0:	d09f      	beq.n	327f2 <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   328b2:	f642 0303 	movw	r3, #10243	; 0x2803
   328b6:	6820      	ldr	r0, [r4, #0]
   328b8:	f88d 6014 	strb.w	r6, [sp, #20]
   328bc:	a905      	add	r1, sp, #20
   328be:	f8ad 3016 	strh.w	r3, [sp, #22]
   328c2:	f019 ffe6 	bl	4c892 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   328c6:	2800      	cmp	r0, #0
   328c8:	d093      	beq.n	327f2 <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   328ca:	2304      	movs	r3, #4
   328cc:	e9cd 3300 	strd	r3, r3, [sp]
   328d0:	4909      	ldr	r1, [pc, #36]	; (328f8 <bt_gatt_discover+0x164>)
   328d2:	4b0a      	ldr	r3, [pc, #40]	; (328fc <bt_gatt_discover+0x168>)
   328d4:	4622      	mov	r2, r4
   328d6:	e77b      	b.n	327d0 <bt_gatt_discover+0x3c>
		return -ENOTCONN;
   328d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   328dc:	e77b      	b.n	327d6 <bt_gatt_discover+0x42>
   328de:	bf00      	nop
   328e0:	0004f145 	.word	0x0004f145
   328e4:	0004ecd5 	.word	0x0004ecd5
   328e8:	0004eb19 	.word	0x0004eb19
   328ec:	0004f1e3 	.word	0x0004f1e3
   328f0:	00032901 	.word	0x00032901
   328f4:	0004eb49 	.word	0x0004eb49
   328f8:	0004f369 	.word	0x0004f369
   328fc:	0004eb01 	.word	0x0004eb01

00032900 <gatt_read_type_rsp>:
{
   32900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32904:	b093      	sub	sp, #76	; 0x4c
   32906:	4680      	mov	r8, r0
   32908:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   3290a:	4617      	mov	r7, r2
	if (err) {
   3290c:	b131      	cbz	r1, 3291c <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   3290e:	686b      	ldr	r3, [r5, #4]
   32910:	462a      	mov	r2, r5
   32912:	2100      	movs	r1, #0
}
   32914:	b013      	add	sp, #76	; 0x4c
   32916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   3291a:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   3291c:	7c2a      	ldrb	r2, [r5, #16]
   3291e:	2a02      	cmp	r2, #2
   32920:	d177      	bne.n	32a12 <gatt_read_type_rsp+0x112>
	switch (rsp->len) {
   32922:	7838      	ldrb	r0, [r7, #0]
   32924:	2806      	cmp	r0, #6
   32926:	d01a      	beq.n	3295e <gatt_read_type_rsp+0x5e>
   32928:	2808      	cmp	r0, #8
   3292a:	d179      	bne.n	32a20 <gatt_read_type_rsp+0x120>
		u.uuid.type = BT_UUID_TYPE_16;
   3292c:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32930:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   32932:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   32934:	b2a4      	uxth	r4, r4
   32936:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   3293a:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3293e:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   32940:	783b      	ldrb	r3, [r7, #0]
   32942:	42a3      	cmp	r3, r4
   32944:	d90e      	bls.n	32964 <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
   32946:	2c00      	cmp	r4, #0
   32948:	d16a      	bne.n	32a20 <gatt_read_type_rsp+0x120>
   3294a:	2e00      	cmp	r6, #0
   3294c:	d068      	beq.n	32a20 <gatt_read_type_rsp+0x120>
	gatt_discover_next(conn, handle, params);
   3294e:	462a      	mov	r2, r5
   32950:	4631      	mov	r1, r6
   32952:	4640      	mov	r0, r8
}
   32954:	b013      	add	sp, #76	; 0x4c
   32956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   3295a:	f01c bbd6 	b.w	4f10a <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   3295e:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
   32962:	e7e5      	b.n	32930 <gatt_read_type_rsp+0x30>
		handle = sys_le16_to_cpu(data->handle);
   32964:	f8b9 3000 	ldrh.w	r3, [r9]
   32968:	b29e      	uxth	r6, r3
		if (!handle) {
   3296a:	2e00      	cmp	r6, #0
   3296c:	d058      	beq.n	32a20 <gatt_read_type_rsp+0x120>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   3296e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   32972:	f8ad 201c 	strh.w	r2, [sp, #28]
   32976:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   32978:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   3297c:	f8ad 201e 	strh.w	r2, [sp, #30]
   32980:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   32982:	f89d 2020 	ldrb.w	r2, [sp, #32]
   32986:	b172      	cbz	r2, 329a6 <gatt_read_type_rsp+0xa6>
   32988:	2a02      	cmp	r2, #2
   3298a:	d017      	beq.n	329bc <gatt_read_type_rsp+0xbc>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   3298c:	6829      	ldr	r1, [r5, #0]
   3298e:	b339      	cbz	r1, 329e0 <gatt_read_type_rsp+0xe0>
   32990:	4650      	mov	r0, sl
   32992:	9303      	str	r3, [sp, #12]
   32994:	f019 ff7d 	bl	4c892 <bt_uuid_cmp>
   32998:	9b03      	ldr	r3, [sp, #12]
   3299a:	b308      	cbz	r0, 329e0 <gatt_read_type_rsp+0xe0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   3299c:	783a      	ldrb	r2, [r7, #0]
   3299e:	1aa4      	subs	r4, r4, r2
   329a0:	b2a4      	uxth	r4, r4
   329a2:	4491      	add	r9, r2
   329a4:	e7cc      	b.n	32940 <gatt_read_type_rsp+0x40>
			value.uuid = &u.uuid;
   329a6:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   329aa:	f899 2006 	ldrb.w	r2, [r9, #6]
   329ae:	f899 1007 	ldrb.w	r1, [r9, #7]
   329b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   329b6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   329ba:	e7e7      	b.n	3298c <gatt_read_type_rsp+0x8c>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   329bc:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   329be:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   329c0:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   329c2:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   329c4:	4979      	ldr	r1, [pc, #484]	; (32bac <gatt_read_type_rsp+0x2ac>)
   329c6:	9201      	str	r2, [sp, #4]
   329c8:	9300      	str	r3, [sp, #0]
   329ca:	462a      	mov	r2, r5
   329cc:	4b78      	ldr	r3, [pc, #480]	; (32bb0 <gatt_read_type_rsp+0x2b0>)
   329ce:	4640      	mov	r0, r8
   329d0:	f01c f852 	bl	4ea78 <gatt_req_send>
			return read_included_uuid(conn, params);
   329d4:	b286      	uxth	r6, r0
	if (!handle) {
   329d6:	2e00      	cmp	r6, #0
   329d8:	d1b9      	bne.n	3294e <gatt_read_type_rsp+0x4e>
}
   329da:	b013      	add	sp, #76	; 0x4c
   329dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   329e0:	f642 0202 	movw	r2, #10242	; 0x2802
   329e4:	f8ad 2016 	strh.w	r2, [sp, #22]
   329e8:	aa05      	add	r2, sp, #20
   329ea:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   329ee:	aa06      	add	r2, sp, #24
   329f0:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   329f2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   329f6:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   329fa:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   329fc:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   32a00:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32a04:	462a      	mov	r2, r5
   32a06:	a90d      	add	r1, sp, #52	; 0x34
   32a08:	4640      	mov	r0, r8
   32a0a:	4798      	blx	r3
   32a0c:	2800      	cmp	r0, #0
   32a0e:	d1c5      	bne.n	3299c <gatt_read_type_rsp+0x9c>
   32a10:	e7e3      	b.n	329da <gatt_read_type_rsp+0xda>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   32a12:	2a03      	cmp	r2, #3
   32a14:	d164      	bne.n	32ae0 <gatt_read_type_rsp+0x1e0>
	switch (rsp->len) {
   32a16:	783a      	ldrb	r2, [r7, #0]
   32a18:	2a07      	cmp	r2, #7
   32a1a:	d007      	beq.n	32a2c <gatt_read_type_rsp+0x12c>
   32a1c:	2a15      	cmp	r2, #21
   32a1e:	d027      	beq.n	32a70 <gatt_read_type_rsp+0x170>
	params->func(conn, NULL, params);
   32a20:	686b      	ldr	r3, [r5, #4]
   32a22:	462a      	mov	r2, r5
   32a24:	2100      	movs	r1, #0
   32a26:	4640      	mov	r0, r8
   32a28:	4798      	blx	r3
	if (!handle) {
   32a2a:	e7d6      	b.n	329da <gatt_read_type_rsp+0xda>
		u.uuid.type = BT_UUID_TYPE_16;
   32a2c:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32a30:	1e5c      	subs	r4, r3, #1
   32a32:	b2a4      	uxth	r4, r4
   32a34:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   32a38:	2600      	movs	r6, #0
   32a3a:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   32a3e:	783b      	ldrb	r3, [r7, #0]
   32a40:	42a3      	cmp	r3, r4
   32a42:	d880      	bhi.n	32946 <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
   32a44:	f8b9 b000 	ldrh.w	fp, [r9]
   32a48:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   32a4c:	2e00      	cmp	r6, #0
   32a4e:	d0e7      	beq.n	32a20 <gatt_read_type_rsp+0x120>
		switch (u.uuid.type) {
   32a50:	f89d 3020 	ldrb.w	r3, [sp, #32]
   32a54:	b183      	cbz	r3, 32a78 <gatt_read_type_rsp+0x178>
   32a56:	2b02      	cmp	r3, #2
   32a58:	d017      	beq.n	32a8a <gatt_read_type_rsp+0x18a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   32a5a:	6829      	ldr	r1, [r5, #0]
   32a5c:	b1e9      	cbz	r1, 32a9a <gatt_read_type_rsp+0x19a>
   32a5e:	4650      	mov	r0, sl
   32a60:	f019 ff17 	bl	4c892 <bt_uuid_cmp>
   32a64:	b1c8      	cbz	r0, 32a9a <gatt_read_type_rsp+0x19a>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32a66:	783a      	ldrb	r2, [r7, #0]
   32a68:	1aa4      	subs	r4, r4, r2
   32a6a:	b2a4      	uxth	r4, r4
   32a6c:	4491      	add	r9, r2
   32a6e:	e7e6      	b.n	32a3e <gatt_read_type_rsp+0x13e>
		u.uuid.type = BT_UUID_TYPE_128;
   32a70:	2202      	movs	r2, #2
   32a72:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
   32a76:	e7db      	b.n	32a30 <gatt_read_type_rsp+0x130>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   32a78:	f899 3005 	ldrb.w	r3, [r9, #5]
   32a7c:	f899 2006 	ldrb.w	r2, [r9, #6]
   32a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   32a84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   32a88:	e7e7      	b.n	32a5a <gatt_read_type_rsp+0x15a>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   32a8a:	2210      	movs	r2, #16
   32a8c:	f109 0105 	add.w	r1, r9, #5
   32a90:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   32a94:	f019 fe0f 	bl	4c6b6 <memcpy>
			break;
   32a98:	e7df      	b.n	32a5a <gatt_read_type_rsp+0x15a>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   32a9a:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   32a9e:	f899 3002 	ldrb.w	r3, [r9, #2]
   32aa2:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32aa6:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   32aaa:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32aae:	f8ad 2016 	strh.w	r2, [sp, #22]
   32ab2:	2300      	movs	r3, #0
   32ab4:	aa05      	add	r2, sp, #20
   32ab6:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   32aba:	aa06      	add	r2, sp, #24
   32abc:	f88d 3014 	strb.w	r3, [sp, #20]
   32ac0:	930f      	str	r3, [sp, #60]	; 0x3c
   32ac2:	9210      	str	r2, [sp, #64]	; 0x40
   32ac4:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   32ac8:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32acc:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
   32ace:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32ad2:	462a      	mov	r2, r5
   32ad4:	a90d      	add	r1, sp, #52	; 0x34
   32ad6:	4640      	mov	r0, r8
   32ad8:	4798      	blx	r3
   32ada:	2800      	cmp	r0, #0
   32adc:	d1c3      	bne.n	32a66 <gatt_read_type_rsp+0x166>
   32ade:	e77c      	b.n	329da <gatt_read_type_rsp+0xda>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   32ae0:	682a      	ldr	r2, [r5, #0]
   32ae2:	7816      	ldrb	r6, [r2, #0]
   32ae4:	b976      	cbnz	r6, 32b04 <gatt_read_type_rsp+0x204>
	uuid_val = BT_UUID_16(params->uuid)->val;
   32ae6:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32ae8:	1e5c      	subs	r4, r3, #1
   32aea:	b2a4      	uxth	r4, r4
   32aec:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   32af0:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32af4:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   32af6:	783b      	ldrb	r3, [r7, #0]
   32af8:	42a3      	cmp	r3, r4
   32afa:	d908      	bls.n	32b0e <gatt_read_type_rsp+0x20e>
	if (length == 0U && handle) {
   32afc:	b914      	cbnz	r4, 32b04 <gatt_read_type_rsp+0x204>
   32afe:	2e00      	cmp	r6, #0
   32b00:	f47f af25 	bne.w	3294e <gatt_read_type_rsp+0x4e>
	params->func(conn, NULL, params);
   32b04:	686b      	ldr	r3, [r5, #4]
   32b06:	462a      	mov	r2, r5
   32b08:	2100      	movs	r1, #0
   32b0a:	4640      	mov	r0, r8
   32b0c:	e702      	b.n	32914 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   32b0e:	f8b9 2000 	ldrh.w	r2, [r9]
   32b12:	b296      	uxth	r6, r2
		if (!handle) {
   32b14:	2e00      	cmp	r6, #0
   32b16:	d0f5      	beq.n	32b04 <gatt_read_type_rsp+0x204>
		switch (uuid_val) {
   32b18:	f1bb 0f04 	cmp.w	fp, #4
   32b1c:	d8f2      	bhi.n	32b04 <gatt_read_type_rsp+0x204>
   32b1e:	a301      	add	r3, pc, #4	; (adr r3, 32b24 <gatt_read_type_rsp+0x224>)
   32b20:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   32b24:	00032b39 	.word	0x00032b39
   32b28:	00032b05 	.word	0x00032b05
   32b2c:	00032b39 	.word	0x00032b39
   32b30:	00032b39 	.word	0x00032b39
   32b34:	00032b71 	.word	0x00032b71
			value.scc.flags = sys_get_le16(data->value);
   32b38:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   32b3c:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32b40:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   32b42:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32b46:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   32b4a:	ab08      	add	r3, sp, #32
   32b4c:	9310      	str	r3, [sp, #64]	; 0x40
   32b4e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32b52:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32b54:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32b58:	462a      	mov	r2, r5
   32b5a:	a90d      	add	r1, sp, #52	; 0x34
   32b5c:	4640      	mov	r0, r8
   32b5e:	4798      	blx	r3
   32b60:	2800      	cmp	r0, #0
   32b62:	f43f af3a 	beq.w	329da <gatt_read_type_rsp+0xda>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32b66:	783a      	ldrb	r2, [r7, #0]
   32b68:	1aa4      	subs	r4, r4, r2
   32b6a:	b2a4      	uxth	r4, r4
   32b6c:	4491      	add	r9, r2
   32b6e:	e7c2      	b.n	32af6 <gatt_read_type_rsp+0x1f6>
			value.cpf.format = cpf->format;
   32b70:	f899 3002 	ldrb.w	r3, [r9, #2]
   32b74:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   32b78:	f899 3003 	ldrb.w	r3, [r9, #3]
   32b7c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   32b80:	f899 1005 	ldrb.w	r1, [r9, #5]
   32b84:	f899 3004 	ldrb.w	r3, [r9, #4]
   32b88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   32b8c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   32b90:	f899 3006 	ldrb.w	r3, [r9, #6]
   32b94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   32b98:	f899 3007 	ldrb.w	r3, [r9, #7]
   32b9c:	f899 1008 	ldrb.w	r1, [r9, #8]
   32ba0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   32ba4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   32ba8:	e7ca      	b.n	32b40 <gatt_read_type_rsp+0x240>
   32baa:	bf00      	nop
   32bac:	0004f2df 	.word	0x0004f2df
   32bb0:	0004eaed 	.word	0x0004eaed

00032bb4 <bt_gatt_subscribe>:
{
   32bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   32bb6:	7b43      	ldrb	r3, [r0, #13]
   32bb8:	2b07      	cmp	r3, #7
{
   32bba:	4605      	mov	r5, r0
   32bbc:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   32bbe:	d16c      	bne.n	32c9a <bt_gatt_subscribe+0xe6>
	sub = gatt_sub_find(conn);
   32bc0:	f7fe ff40 	bl	31a44 <gatt_sub_find>
	if (!sub) {
   32bc4:	4604      	mov	r4, r0
   32bc6:	b958      	cbnz	r0, 32be0 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   32bc8:	f7fe ff3c 	bl	31a44 <gatt_sub_find>
		if (sub) {
   32bcc:	4604      	mov	r4, r0
   32bce:	2800      	cmp	r0, #0
   32bd0:	d066      	beq.n	32ca0 <bt_gatt_subscribe+0xec>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32bd2:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32bd6:	3001      	adds	r0, #1
   32bd8:	f01b fe54 	bl	4e884 <bt_addr_le_copy>
			sub->id = conn->id;
   32bdc:	7a2b      	ldrb	r3, [r5, #8]
   32bde:	7023      	strb	r3, [r4, #0]
	return list->head;
   32be0:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32be2:	b90a      	cbnz	r2, 32be8 <bt_gatt_subscribe+0x34>
   32be4:	4613      	mov	r3, r2
   32be6:	e001      	b.n	32bec <bt_gatt_subscribe+0x38>
   32be8:	f1a2 031c 	sub.w	r3, r2, #28
   32bec:	2700      	movs	r7, #0
   32bee:	e014      	b.n	32c1a <bt_gatt_subscribe+0x66>
		if (tmp == params) {
   32bf0:	42b3      	cmp	r3, r6
   32bf2:	d106      	bne.n	32c02 <bt_gatt_subscribe+0x4e>
	if (gatt_sub_is_empty(sub)) {
   32bf4:	b912      	cbnz	r2, 32bfc <bt_gatt_subscribe+0x48>
		gatt_sub_free(sub);
   32bf6:	4620      	mov	r0, r4
   32bf8:	f01b fe9b 	bl	4e932 <gatt_sub_free>
			return -EALREADY;
   32bfc:	f06f 0577 	mvn.w	r5, #119	; 0x77
   32c00:	e032      	b.n	32c68 <bt_gatt_subscribe+0xb4>
		if (tmp->value_handle == params->value_handle &&
   32c02:	8918      	ldrh	r0, [r3, #8]
   32c04:	8931      	ldrh	r1, [r6, #8]
   32c06:	4288      	cmp	r0, r1
   32c08:	d104      	bne.n	32c14 <bt_gatt_subscribe+0x60>
   32c0a:	8a98      	ldrh	r0, [r3, #20]
   32c0c:	8ab1      	ldrh	r1, [r6, #20]
			has_subscription = true;
   32c0e:	4288      	cmp	r0, r1
   32c10:	bf28      	it	cs
   32c12:	2701      	movcs	r7, #1
	return node->next;
   32c14:	69db      	ldr	r3, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32c16:	b113      	cbz	r3, 32c1e <bt_gatt_subscribe+0x6a>
   32c18:	3b1c      	subs	r3, #28
   32c1a:	2b00      	cmp	r3, #0
   32c1c:	d1e8      	bne.n	32bf0 <bt_gatt_subscribe+0x3c>
	if (!has_subscription) {
   32c1e:	2f00      	cmp	r7, #0
   32c20:	d132      	bne.n	32c88 <bt_gatt_subscribe+0xd4>
		if (!params->ccc_handle) {
   32c22:	8973      	ldrh	r3, [r6, #10]
   32c24:	bb1b      	cbnz	r3, 32c6e <bt_gatt_subscribe+0xba>
	memcpy(&ccc_uuid, BT_UUID_GATT_CCC, sizeof(ccc_uuid));
   32c26:	4c21      	ldr	r4, [pc, #132]	; (32cac <bt_gatt_subscribe+0xf8>)
   32c28:	f88d 7004 	strb.w	r7, [sp, #4]
   32c2c:	2204      	movs	r2, #4
   32c2e:	f642 1302 	movw	r3, #10498	; 0x2902
   32c32:	eb0d 0102 	add.w	r1, sp, r2
   32c36:	4620      	mov	r0, r4
   32c38:	f8ad 3006 	strh.w	r3, [sp, #6]
   32c3c:	f019 fd3b 	bl	4c6b6 <memcpy>
	memset(params->disc_params, 0, sizeof(*params->disc_params));
   32c40:	2218      	movs	r2, #24
   32c42:	4639      	mov	r1, r7
   32c44:	6930      	ldr	r0, [r6, #16]
   32c46:	f019 fd41 	bl	4c6cc <memset>
	params->disc_params->sub_params = params;
   32c4a:	6931      	ldr	r1, [r6, #16]
	params->disc_params->type = BT_GATT_DISCOVER_DESCRIPTOR;
   32c4c:	2304      	movs	r3, #4
   32c4e:	740b      	strb	r3, [r1, #16]
	params->disc_params->start_handle = params->value_handle;
   32c50:	8933      	ldrh	r3, [r6, #8]
   32c52:	810b      	strh	r3, [r1, #8]
	params->disc_params->end_handle = params->end_handle;
   32c54:	89b3      	ldrh	r3, [r6, #12]
   32c56:	81cb      	strh	r3, [r1, #14]
	params->disc_params->func = gatt_ccc_discover_cb;
   32c58:	4b15      	ldr	r3, [pc, #84]	; (32cb0 <bt_gatt_subscribe+0xfc>)
	params->disc_params->sub_params = params;
   32c5a:	614e      	str	r6, [r1, #20]
	err = bt_gatt_discover(conn, params->disc_params);
   32c5c:	4628      	mov	r0, r5
	params->disc_params->uuid = &ccc_uuid.uuid;
   32c5e:	600c      	str	r4, [r1, #0]
	params->disc_params->func = gatt_ccc_discover_cb;
   32c60:	604b      	str	r3, [r1, #4]
	err = bt_gatt_discover(conn, params->disc_params);
   32c62:	f7ff fd97 	bl	32794 <bt_gatt_discover>
   32c66:	4605      	mov	r5, r0
}
   32c68:	4628      	mov	r0, r5
   32c6a:	b003      	add	sp, #12
   32c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = gatt_write_ccc(conn, params);
   32c6e:	4628      	mov	r0, r5
   32c70:	4631      	mov	r1, r6
   32c72:	f7fe ffcb 	bl	31c0c <gatt_write_ccc>
		if (err) {
   32c76:	4605      	mov	r5, r0
   32c78:	b130      	cbz	r0, 32c88 <bt_gatt_subscribe+0xd4>
	if (gatt_sub_is_empty(sub)) {
   32c7a:	68a3      	ldr	r3, [r4, #8]
   32c7c:	2b00      	cmp	r3, #0
   32c7e:	d1f3      	bne.n	32c68 <bt_gatt_subscribe+0xb4>
		gatt_sub_free(sub);
   32c80:	4620      	mov	r0, r4
   32c82:	f01b fe56 	bl	4e932 <gatt_sub_free>
   32c86:	e7ef      	b.n	32c68 <bt_gatt_subscribe+0xb4>
Z_GENLIST_PREPEND(slist, snode)
   32c88:	68e5      	ldr	r5, [r4, #12]
	parent->next = child;
   32c8a:	68a2      	ldr	r2, [r4, #8]
   32c8c:	61f2      	str	r2, [r6, #28]
	sys_slist_prepend(&sub->list, &params->node);
   32c8e:	f106 031c 	add.w	r3, r6, #28
	list->head = node;
   32c92:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   32c94:	b93d      	cbnz	r5, 32ca6 <bt_gatt_subscribe+0xf2>
	list->tail = node;
   32c96:	60e3      	str	r3, [r4, #12]
}
   32c98:	e7e6      	b.n	32c68 <bt_gatt_subscribe+0xb4>
		return -ENOTCONN;
   32c9a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   32c9e:	e7e3      	b.n	32c68 <bt_gatt_subscribe+0xb4>
		return -ENOMEM;
   32ca0:	f06f 050b 	mvn.w	r5, #11
   32ca4:	e7e0      	b.n	32c68 <bt_gatt_subscribe+0xb4>
	return 0;
   32ca6:	2500      	movs	r5, #0
   32ca8:	e7de      	b.n	32c68 <bt_gatt_subscribe+0xb4>
   32caa:	bf00      	nop
   32cac:	2000757c 	.word	0x2000757c
   32cb0:	0004f52d 	.word	0x0004f52d

00032cb4 <bt_gatt_connected>:
{
   32cb4:	b570      	push	{r4, r5, r6, lr}
   32cb6:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32cb8:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   32cbc:	4604      	mov	r4, r0
	data.conn = conn;
   32cbe:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   32cc0:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32cc2:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   32cc4:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32cc8:	4631      	mov	r1, r6
   32cca:	f01a f9bf 	bl	4d04c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   32cce:	b198      	cbz	r0, 32cf8 <bt_gatt_connected+0x44>
		if (conn->id) {
   32cd0:	7a22      	ldrb	r2, [r4, #8]
   32cd2:	2a00      	cmp	r2, #0
   32cd4:	d03b      	beq.n	32d4e <bt_gatt_connected+0x9a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   32cd6:	ad02      	add	r5, sp, #8
   32cd8:	2104      	movs	r1, #4
   32cda:	4628      	mov	r0, r5
   32cdc:	f017 fb30 	bl	4a340 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32ce0:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32ce2:	4a1d      	ldr	r2, [pc, #116]	; (32d58 <bt_gatt_connected+0xa4>)
   32ce4:	2124      	movs	r1, #36	; 0x24
   32ce6:	a805      	add	r0, sp, #20
   32ce8:	4633      	mov	r3, r6
   32cea:	f7fb f823 	bl	2dd34 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   32cee:	aa05      	add	r2, sp, #20
   32cf0:	491a      	ldr	r1, [pc, #104]	; (32d5c <bt_gatt_connected+0xa8>)
   32cf2:	4610      	mov	r0, r2
   32cf4:	f7f9 fe98 	bl	2ca28 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32cf8:	ab03      	add	r3, sp, #12
   32cfa:	4a19      	ldr	r2, [pc, #100]	; (32d60 <bt_gatt_connected+0xac>)
   32cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32d00:	2001      	movs	r0, #1
   32d02:	f01c f999 	bl	4f038 <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   32d06:	78e3      	ldrb	r3, [r4, #3]
   32d08:	b94b      	cbnz	r3, 32d1e <bt_gatt_connected+0x6a>
	    bt_conn_get_security(conn) < data.sec) {
   32d0a:	4620      	mov	r0, r4
   32d0c:	f01a fdb9 	bl	4d882 <bt_conn_get_security>
   32d10:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   32d14:	4288      	cmp	r0, r1
   32d16:	d202      	bcs.n	32d1e <bt_gatt_connected+0x6a>
		int err = bt_conn_set_security(conn, data.sec);
   32d18:	4620      	mov	r0, r4
   32d1a:	f01a fd8a 	bl	4d832 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   32d1e:	4620      	mov	r0, r4
   32d20:	f7fe fe90 	bl	31a44 <gatt_sub_find>
	if (!sub) {
   32d24:	b1a8      	cbz	r0, 32d52 <bt_gatt_connected+0x9e>
	return list->head;
   32d26:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   32d28:	b19d      	cbz	r5, 32d52 <bt_gatt_connected+0x9e>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32d2a:	7a20      	ldrb	r0, [r4, #8]
   32d2c:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   32d2e:	3d1c      	subs	r5, #28
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32d30:	f01a f98c 	bl	4d04c <bt_addr_le_is_bonded>
   32d34:	b148      	cbz	r0, 32d4a <bt_gatt_connected+0x96>
   32d36:	f105 0018 	add.w	r0, r5, #24
   32d3a:	f01b fcfd 	bl	4e738 <atomic_get>
   32d3e:	0783      	lsls	r3, r0, #30
   32d40:	d403      	bmi.n	32d4a <bt_gatt_connected+0x96>
			gatt_write_ccc(conn, params);
   32d42:	4629      	mov	r1, r5
   32d44:	4620      	mov	r0, r4
   32d46:	f7fe ff61 	bl	31c0c <gatt_write_ccc>
	return node->next;
   32d4a:	69ed      	ldr	r5, [r5, #28]
   32d4c:	e7ec      	b.n	32d28 <bt_gatt_connected+0x74>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32d4e:	9200      	str	r2, [sp, #0]
   32d50:	e7c7      	b.n	32ce2 <bt_gatt_connected+0x2e>
}
   32d52:	b00e      	add	sp, #56	; 0x38
   32d54:	bd70      	pop	{r4, r5, r6, pc}
   32d56:	bf00      	nop
   32d58:	00056ac9 	.word	0x00056ac9
   32d5c:	00032235 	.word	0x00032235
   32d60:	000326b5 	.word	0x000326b5

00032d64 <bt_gatt_att_max_mtu_changed>:
{
   32d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   32d66:	4b08      	ldr	r3, [pc, #32]	; (32d88 <bt_gatt_att_max_mtu_changed+0x24>)
   32d68:	681c      	ldr	r4, [r3, #0]
   32d6a:	4605      	mov	r5, r0
   32d6c:	460e      	mov	r6, r1
   32d6e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   32d70:	b14c      	cbz	r4, 32d86 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   32d72:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   32d76:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   32d78:	b11b      	cbz	r3, 32d82 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   32d7a:	463a      	mov	r2, r7
   32d7c:	4631      	mov	r1, r6
   32d7e:	4628      	mov	r0, r5
   32d80:	4798      	blx	r3
	return node->next;
   32d82:	6864      	ldr	r4, [r4, #4]
   32d84:	e7f4      	b.n	32d70 <bt_gatt_att_max_mtu_changed+0xc>
}
   32d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32d88:	200049d8 	.word	0x200049d8

00032d8c <bt_gatt_encrypt_change>:
{
   32d8c:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32d8e:	4a06      	ldr	r2, [pc, #24]	; (32da8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   32d90:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32d92:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   32d94:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32d96:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   32d9a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32d9e:	f01c f94b 	bl	4f038 <bt_gatt_foreach_attr>
}
   32da2:	b003      	add	sp, #12
   32da4:	f85d fb04 	ldr.w	pc, [sp], #4
   32da8:	000326b5 	.word	0x000326b5

00032dac <db_hash_read>:
{
   32dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   32dae:	4914      	ldr	r1, [pc, #80]	; (32e00 <db_hash_read+0x54>)
{
   32db0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   32db4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   32db6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   32dba:	461f      	mov	r7, r3
   32dbc:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   32dbe:	f01e fe04 	bl	519ca <k_work_cancel_delayable_sync>
   32dc2:	4810      	ldr	r0, [pc, #64]	; (32e04 <db_hash_read+0x58>)
   32dc4:	f01b fcb8 	bl	4e738 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   32dc8:	0743      	lsls	r3, r0, #29
   32dca:	d402      	bmi.n	32dd2 <db_hash_read+0x26>
		db_hash_gen(true);
   32dcc:	2001      	movs	r0, #1
   32dce:	f7ff f997 	bl	32100 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   32dd2:	2101      	movs	r1, #1
   32dd4:	4620      	mov	r0, r4
   32dd6:	f01c fcc6 	bl	4f766 <bt_gatt_change_aware>
	if (offset > value_len) {
   32dda:	2e10      	cmp	r6, #16
   32ddc:	d80c      	bhi.n	32df8 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   32dde:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   32de2:	4909      	ldr	r1, [pc, #36]	; (32e08 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   32de4:	42bc      	cmp	r4, r7
   32de6:	bfa8      	it	ge
   32de8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   32dea:	4622      	mov	r2, r4
   32dec:	4431      	add	r1, r6
   32dee:	4628      	mov	r0, r5
   32df0:	f019 fc61 	bl	4c6b6 <memcpy>
}
   32df4:	4620      	mov	r0, r4
   32df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   32df8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   32dfc:	e7fa      	b.n	32df4 <db_hash_read+0x48>
   32dfe:	bf00      	nop
   32e00:	20002778 	.word	0x20002778
   32e04:	20002838 	.word	0x20002838
   32e08:	20002728 	.word	0x20002728

00032e0c <bt_gatt_store_ccc>:
{
   32e0c:	b570      	push	{r4, r5, r6, lr}
   32e0e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   32e10:	2300      	movs	r3, #0
{
   32e12:	4604      	mov	r4, r0
   32e14:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   32e16:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   32e18:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   32e1c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   32e1e:	4a11      	ldr	r2, [pc, #68]	; (32e64 <bt_gatt_store_ccc+0x58>)
   32e20:	ab0d      	add	r3, sp, #52	; 0x34
   32e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32e26:	2001      	movs	r0, #1
   32e28:	f01c f906 	bl	4f038 <bt_gatt_foreach_attr>
	if (id) {
   32e2c:	b1ac      	cbz	r4, 32e5a <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   32e2e:	ae03      	add	r6, sp, #12
   32e30:	4622      	mov	r2, r4
   32e32:	2104      	movs	r1, #4
   32e34:	4630      	mov	r0, r6
   32e36:	f017 fa83 	bl	4a340 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   32e3a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   32e3c:	4a0a      	ldr	r2, [pc, #40]	; (32e68 <bt_gatt_store_ccc+0x5c>)
   32e3e:	462b      	mov	r3, r5
   32e40:	2124      	movs	r1, #36	; 0x24
   32e42:	a804      	add	r0, sp, #16
   32e44:	f7fa ff76 	bl	2dd34 <bt_settings_encode_key>
	if (save.count) {
   32e48:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   32e4a:	b142      	cbz	r2, 32e5e <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   32e4c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   32e4e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   32e50:	a804      	add	r0, sp, #16
   32e52:	f7f9 fd89 	bl	2c968 <settings_save_one>
}
   32e56:	b040      	add	sp, #256	; 0x100
   32e58:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   32e5a:	9400      	str	r4, [sp, #0]
   32e5c:	e7ee      	b.n	32e3c <bt_gatt_store_ccc+0x30>
		str = NULL;
   32e5e:	4611      	mov	r1, r2
   32e60:	e7f6      	b.n	32e50 <bt_gatt_store_ccc+0x44>
   32e62:	bf00      	nop
   32e64:	00031d19 	.word	0x00031d19
   32e68:	00056ac9 	.word	0x00056ac9

00032e6c <bt_gatt_identity_resolved>:
{
   32e6c:	b513      	push	{r0, r1, r4, lr}
   32e6e:	4604      	mov	r4, r0
	struct addr_match user_data = {
   32e70:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   32e74:	466b      	mov	r3, sp
   32e76:	4a08      	ldr	r2, [pc, #32]	; (32e98 <bt_gatt_identity_resolved+0x2c>)
   32e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32e7c:	2001      	movs	r0, #1
   32e7e:	f01c f8db 	bl	4f038 <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   32e82:	f104 0188 	add.w	r1, r4, #136	; 0x88
   32e86:	7a20      	ldrb	r0, [r4, #8]
   32e88:	f7ff ffc0 	bl	32e0c <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   32e8c:	4620      	mov	r0, r4
   32e8e:	f7fe ff5f 	bl	31d50 <bt_gatt_store_cf.isra.0>
}
   32e92:	b002      	add	sp, #8
   32e94:	bd10      	pop	{r4, pc}
   32e96:	bf00      	nop
   32e98:	00031ce5 	.word	0x00031ce5

00032e9c <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   32e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32e9e:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   32ea0:	ae03      	add	r6, sp, #12
{
   32ea2:	4604      	mov	r4, r0
   32ea4:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   32ea6:	9103      	str	r1, [sp, #12]
   32ea8:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   32eac:	4a34      	ldr	r2, [pc, #208]	; (32f80 <bt_gatt_clear+0xe4>)
   32eae:	4633      	mov	r3, r6
   32eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32eb4:	2001      	movs	r0, #1
   32eb6:	f01c f8bf 	bl	4f038 <bt_gatt_foreach_attr>
		if (id) {
   32eba:	2c00      	cmp	r4, #0
   32ebc:	d03e      	beq.n	32f3c <bt_gatt_clear+0xa0>
			u8_to_dec(id_str, sizeof(id_str), id);
   32ebe:	af02      	add	r7, sp, #8
   32ec0:	4622      	mov	r2, r4
   32ec2:	2104      	movs	r1, #4
   32ec4:	4638      	mov	r0, r7
   32ec6:	f017 fa3b 	bl	4a340 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32eca:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32ecc:	4a2d      	ldr	r2, [pc, #180]	; (32f84 <bt_gatt_clear+0xe8>)
   32ece:	462b      	mov	r3, r5
   32ed0:	2124      	movs	r1, #36	; 0x24
   32ed2:	a805      	add	r0, sp, #20
   32ed4:	f7fa ff2e 	bl	2dd34 <bt_settings_encode_key>
		return settings_delete(key);
   32ed8:	a805      	add	r0, sp, #20
   32eda:	f018 f8fa 	bl	4b0d2 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   32ede:	2800      	cmp	r0, #0
   32ee0:	db2a      	blt.n	32f38 <bt_gatt_clear+0x9c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   32ee2:	4629      	mov	r1, r5
   32ee4:	4620      	mov	r0, r4
   32ee6:	f7fe ff63 	bl	31db0 <bt_gatt_clear_sc>
		if (err < 0) {
   32eea:	2800      	cmp	r0, #0
   32eec:	db24      	blt.n	32f38 <bt_gatt_clear+0x9c>
	cfg = find_cf_cfg_by_addr(id, addr);
   32eee:	4629      	mov	r1, r5
   32ef0:	4620      	mov	r0, r4
   32ef2:	f7fe fdc9 	bl	31a88 <find_cf_cfg_by_addr>
	if (cfg) {
   32ef6:	b108      	cbz	r0, 32efc <bt_gatt_clear+0x60>
		clear_cf_cfg(cfg);
   32ef8:	f01b fe8d 	bl	4ec16 <clear_cf_cfg>
		if (id) {
   32efc:	b304      	cbz	r4, 32f40 <bt_gatt_clear+0xa4>
			u8_to_dec(id_str, sizeof(id_str), id);
   32efe:	4622      	mov	r2, r4
   32f00:	2104      	movs	r1, #4
   32f02:	4630      	mov	r0, r6
   32f04:	f017 fa1c 	bl	4a340 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32f08:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   32f0a:	4a1f      	ldr	r2, [pc, #124]	; (32f88 <bt_gatt_clear+0xec>)
   32f0c:	462b      	mov	r3, r5
   32f0e:	2124      	movs	r1, #36	; 0x24
   32f10:	a805      	add	r0, sp, #20
   32f12:	f7fa ff0f 	bl	2dd34 <bt_settings_encode_key>
		return settings_delete(key);
   32f16:	a805      	add	r0, sp, #20
   32f18:	f018 f8db 	bl	4b0d2 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   32f1c:	2800      	cmp	r0, #0
   32f1e:	db0b      	blt.n	32f38 <bt_gatt_clear+0x9c>
   32f20:	4f1a      	ldr	r7, [pc, #104]	; (32f8c <bt_gatt_clear+0xf0>)
   32f22:	2600      	movs	r6, #0
		if (id == sub->id &&
   32f24:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   32f28:	42a3      	cmp	r3, r4
   32f2a:	d00b      	beq.n	32f44 <bt_gatt_clear+0xa8>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   32f2c:	3610      	adds	r6, #16
   32f2e:	2ec0      	cmp	r6, #192	; 0xc0
   32f30:	f107 0710 	add.w	r7, r7, #16
   32f34:	d1f6      	bne.n	32f24 <bt_gatt_clear+0x88>

	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
   32f36:	2000      	movs	r0, #0
}
   32f38:	b00f      	add	sp, #60	; 0x3c
   32f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32f3c:	9400      	str	r4, [sp, #0]
   32f3e:	e7c5      	b.n	32ecc <bt_gatt_clear+0x30>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32f40:	9400      	str	r4, [sp, #0]
   32f42:	e7e2      	b.n	32f0a <bt_gatt_clear+0x6e>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   32f44:	4639      	mov	r1, r7
   32f46:	4628      	mov	r0, r5
   32f48:	f01b fc60 	bl	4e80c <bt_addr_le_cmp>
		if (id == sub->id &&
   32f4c:	2800      	cmp	r0, #0
   32f4e:	d1ed      	bne.n	32f2c <bt_gatt_clear+0x90>
		struct gatt_sub *sub = &subscriptions[i];
   32f50:	4d0f      	ldr	r5, [pc, #60]	; (32f90 <bt_gatt_clear+0xf4>)
   32f52:	4435      	add	r5, r6
	return list->head;
   32f54:	68ab      	ldr	r3, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   32f56:	2b00      	cmp	r3, #0
   32f58:	d0ed      	beq.n	32f36 <bt_gatt_clear+0x9a>
	return node->next;
   32f5a:	f853 491c 	ldr.w	r4, [r3], #-28
   32f5e:	b104      	cbz	r4, 32f62 <bt_gatt_clear+0xc6>
   32f60:	3c1c      	subs	r4, #28
		params->value = 0U;
   32f62:	2600      	movs	r6, #0
		gatt_sub_remove(NULL, sub, prev, params);
   32f64:	2200      	movs	r2, #0
		params->value = 0U;
   32f66:	829e      	strh	r6, [r3, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   32f68:	4629      	mov	r1, r5
   32f6a:	4610      	mov	r0, r2
   32f6c:	f01b fced 	bl	4e94a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   32f70:	2c00      	cmp	r4, #0
   32f72:	d0e0      	beq.n	32f36 <bt_gatt_clear+0x9a>
   32f74:	69e2      	ldr	r2, [r4, #28]
   32f76:	b102      	cbz	r2, 32f7a <bt_gatt_clear+0xde>
   32f78:	3a1c      	subs	r2, #28
		if (err < 0) {
   32f7a:	4623      	mov	r3, r4
   32f7c:	4614      	mov	r4, r2
   32f7e:	e7f1      	b.n	32f64 <bt_gatt_clear+0xc8>
   32f80:	00031c31 	.word	0x00031c31
   32f84:	00056ac9 	.word	0x00056ac9
   32f88:	00056ad0 	.word	0x00056ad0
   32f8c:	20004b39 	.word	0x20004b39
   32f90:	20004b38 	.word	0x20004b38

00032f94 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   32f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   32f98:	4603      	mov	r3, r0
   32f9a:	4a48      	ldr	r2, [pc, #288]	; (330bc <bt_gatt_disconnected+0x128>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   32f9c:	4e48      	ldr	r6, [pc, #288]	; (330c0 <bt_gatt_disconnected+0x12c>)
{
   32f9e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   32fa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32fa4:	2001      	movs	r0, #1
   32fa6:	f01c f847 	bl	4f038 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   32faa:	4620      	mov	r0, r4
   32fac:	f7fd f9cc 	bl	30348 <bt_conn_index>
   32fb0:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   32fb2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   32fb6:	b120      	cbz	r0, 32fc2 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   32fb8:	f01a fbbc 	bl	4d734 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   32fbc:	2300      	movs	r3, #0
   32fbe:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32fc2:	4a3f      	ldr	r2, [pc, #252]	; (330c0 <bt_gatt_disconnected+0x12c>)
   32fc4:	2300      	movs	r3, #0
		if (gatt_ccc_store.conn_list[i]) {
   32fc6:	f852 1b04 	ldr.w	r1, [r2], #4
   32fca:	b929      	cbnz	r1, 32fd8 <bt_gatt_disconnected+0x44>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32fcc:	3301      	adds	r3, #1
   32fce:	2b06      	cmp	r3, #6
   32fd0:	d1f9      	bne.n	32fc6 <bt_gatt_disconnected+0x32>

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   32fd2:	483c      	ldr	r0, [pc, #240]	; (330c4 <bt_gatt_disconnected+0x130>)
   32fd4:	f01e fce5 	bl	519a2 <k_work_cancel_delayable>
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32fd8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   32fdc:	7a20      	ldrb	r0, [r4, #8]
   32fde:	4631      	mov	r1, r6
   32fe0:	f01a f834 	bl	4d04c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   32fe4:	b130      	cbz	r0, 32ff4 <bt_gatt_disconnected+0x60>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   32fe6:	7a20      	ldrb	r0, [r4, #8]
   32fe8:	4631      	mov	r1, r6
   32fea:	f7ff ff0f 	bl	32e0c <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   32fee:	4620      	mov	r0, r4
   32ff0:	f7fe feae 	bl	31d50 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32ff4:	7a20      	ldrb	r0, [r4, #8]
   32ff6:	4631      	mov	r1, r6
   32ff8:	f01a f828 	bl	4d04c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   32ffc:	b150      	cbz	r0, 33014 <bt_gatt_disconnected+0x80>
		struct addr_with_id addr_with_id = {
   32ffe:	7a23      	ldrb	r3, [r4, #8]
   33000:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   33004:	4a30      	ldr	r2, [pc, #192]	; (330c8 <bt_gatt_disconnected+0x134>)
		struct addr_with_id addr_with_id = {
   33006:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   33008:	466b      	mov	r3, sp
   3300a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3300e:	2001      	movs	r0, #1
   33010:	f01c f812 	bl	4f038 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   33014:	4620      	mov	r0, r4
   33016:	f7fe fd15 	bl	31a44 <gatt_sub_find>
	if (!sub) {
   3301a:	4680      	mov	r8, r0
   3301c:	b370      	cbz	r0, 3307c <bt_gatt_disconnected+0xe8>
	return list->head;
   3301e:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   33020:	b365      	cbz	r5, 3307c <bt_gatt_disconnected+0xe8>
	return node->next;
   33022:	f855 791c 	ldr.w	r7, [r5], #-28
   33026:	b107      	cbz	r7, 3302a <bt_gatt_disconnected+0x96>
   33028:	3f1c      	subs	r7, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   3302a:	f04f 0900 	mov.w	r9, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   3302e:	f108 0a01 	add.w	sl, r8, #1
			params->value = 0U;
   33032:	46cb      	mov	fp, r9
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   33034:	7a20      	ldrb	r0, [r4, #8]
   33036:	4631      	mov	r1, r6
   33038:	f01a f808 	bl	4d04c <bt_addr_le_is_bonded>
   3303c:	b970      	cbnz	r0, 3305c <bt_gatt_disconnected+0xc8>
			params->value = 0U;
   3303e:	f8a5 b014 	strh.w	fp, [r5, #20]
			gatt_sub_remove(conn, sub, prev, params);
   33042:	462b      	mov	r3, r5
   33044:	464a      	mov	r2, r9
   33046:	4641      	mov	r1, r8
   33048:	4620      	mov	r0, r4
   3304a:	f01b fc7e 	bl	4e94a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3304e:	b1af      	cbz	r7, 3307c <bt_gatt_disconnected+0xe8>
   33050:	69fb      	ldr	r3, [r7, #28]
   33052:	b103      	cbz	r3, 33056 <bt_gatt_disconnected+0xc2>
   33054:	3b1c      	subs	r3, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   33056:	463d      	mov	r5, r7
   33058:	461f      	mov	r7, r3
   3305a:	e7eb      	b.n	33034 <bt_gatt_disconnected+0xa0>
   3305c:	f105 0018 	add.w	r0, r5, #24
   33060:	f01b fb6a 	bl	4e738 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   33064:	07c3      	lsls	r3, r0, #31
   33066:	d4ea      	bmi.n	3303e <bt_gatt_disconnected+0xaa>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   33068:	f898 3001 	ldrb.w	r3, [r8, #1]
   3306c:	b11b      	cbz	r3, 33076 <bt_gatt_disconnected+0xe2>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   3306e:	4631      	mov	r1, r6
   33070:	4650      	mov	r0, sl
   33072:	f01b fc07 	bl	4e884 <bt_addr_le_copy>
			prev = &params->node;
   33076:	f105 091c 	add.w	r9, r5, #28
   3307a:	e7e8      	b.n	3304e <bt_gatt_disconnected+0xba>
	cfg = find_cf_cfg(conn);
   3307c:	4620      	mov	r0, r4
   3307e:	f7fe fca3 	bl	319c8 <find_cf_cfg>
	if (!cfg) {
   33082:	4605      	mov	r5, r0
   33084:	b1b8      	cbz	r0, 330b6 <bt_gatt_disconnected+0x122>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   33086:	7a20      	ldrb	r0, [r4, #8]
   33088:	4631      	mov	r1, r6
   3308a:	f019 ffdf 	bl	4d04c <bt_addr_le_is_bonded>
   3308e:	b928      	cbnz	r0, 3309c <bt_gatt_disconnected+0x108>
		clear_cf_cfg(cfg);
   33090:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   33092:	b003      	add	sp, #12
   33094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   33098:	f01b bdbd 	b.w	4ec16 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   3309c:	4631      	mov	r1, r6
   3309e:	1c68      	adds	r0, r5, #1
   330a0:	f01b fbf0 	bl	4e884 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   330a4:	f06f 0102 	mvn.w	r1, #2
   330a8:	f105 000c 	add.w	r0, r5, #12
}
   330ac:	b003      	add	sp, #12
   330ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   330b2:	f01b bc9d 	b.w	4e9f0 <atomic_and>
   330b6:	b003      	add	sp, #12
   330b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   330bc:	00031dfd 	.word	0x00031dfd
   330c0:	200027a0 	.word	0x200027a0
   330c4:	200027b8 	.word	0x200027b8
   330c8:	00031c31 	.word	0x00031c31

000330cc <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   330cc:	4b10      	ldr	r3, [pc, #64]	; (33110 <get_io_capa+0x44>)
   330ce:	681b      	ldr	r3, [r3, #0]
   330d0:	b1bb      	cbz	r3, 33102 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   330d2:	685a      	ldr	r2, [r3, #4]
   330d4:	b142      	cbz	r2, 330e8 <get_io_capa+0x1c>
   330d6:	6899      	ldr	r1, [r3, #8]
   330d8:	b131      	cbz	r1, 330e8 <get_io_capa+0x1c>
   330da:	68d9      	ldr	r1, [r3, #12]
   330dc:	b911      	cbnz	r1, 330e4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   330de:	490d      	ldr	r1, [pc, #52]	; (33114 <get_io_capa+0x48>)
   330e0:	7809      	ldrb	r1, [r1, #0]
   330e2:	b939      	cbnz	r1, 330f4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   330e4:	2004      	movs	r0, #4
   330e6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   330e8:	490a      	ldr	r1, [pc, #40]	; (33114 <get_io_capa+0x48>)
   330ea:	7809      	ldrb	r1, [r1, #0]
   330ec:	b111      	cbz	r1, 330f4 <get_io_capa+0x28>
   330ee:	b10a      	cbz	r2, 330f4 <get_io_capa+0x28>
   330f0:	68d9      	ldr	r1, [r3, #12]
   330f2:	b941      	cbnz	r1, 33106 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   330f4:	689b      	ldr	r3, [r3, #8]
   330f6:	b943      	cbnz	r3, 3310a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   330f8:	2a00      	cmp	r2, #0
   330fa:	bf0c      	ite	eq
   330fc:	2003      	moveq	r0, #3
   330fe:	2000      	movne	r0, #0
   33100:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   33102:	2003      	movs	r0, #3
   33104:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   33106:	2001      	movs	r0, #1
   33108:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   3310a:	2002      	movs	r0, #2
	}
}
   3310c:	4770      	bx	lr
   3310e:	bf00      	nop
   33110:	20004984 	.word	0x20004984
   33114:	20007789 	.word	0x20007789

00033118 <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
   33118:	b510      	push	{r4, lr}
   3311a:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   3311c:	7b03      	ldrb	r3, [r0, #12]
   3311e:	7cc1      	ldrb	r1, [r0, #19]
   33120:	ea03 0201 	and.w	r2, r3, r1
   33124:	0712      	lsls	r2, r2, #28
   33126:	d504      	bpl.n	33132 <get_pair_method+0x1a>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   33128:	7ac2      	ldrb	r2, [r0, #11]
   3312a:	7c80      	ldrb	r0, [r0, #18]
   3312c:	4302      	orrs	r2, r0
   3312e:	07d2      	lsls	r2, r2, #31
   33130:	d40e      	bmi.n	33150 <get_pair_method+0x38>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   33132:	2c04      	cmp	r4, #4
   33134:	d80e      	bhi.n	33154 <get_pair_method+0x3c>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   33136:	ea43 0001 	orr.w	r0, r3, r1
   3313a:	f010 0004 	ands.w	r0, r0, #4
   3313e:	d006      	beq.n	3314e <get_pair_method+0x36>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
   33140:	f7ff ffc4 	bl	330cc <get_io_capa>
   33144:	4904      	ldr	r1, [pc, #16]	; (33158 <get_pair_method+0x40>)
   33146:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   3314a:	440c      	add	r4, r1
   3314c:	5c20      	ldrb	r0, [r4, r0]
#else
	return JUST_WORKS;
#endif
}
   3314e:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   33150:	2005      	movs	r0, #5
   33152:	e7fc      	b.n	3314e <get_pair_method+0x36>
		return JUST_WORKS;
   33154:	2000      	movs	r0, #0
   33156:	e7fa      	b.n	3314e <get_pair_method+0x36>
   33158:	00056af9 	.word	0x00056af9

0003315c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   3315c:	b530      	push	{r4, r5, lr}
   3315e:	4c0c      	ldr	r4, [pc, #48]	; (33190 <bt_smp_accept+0x34>)
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33160:	2300      	movs	r3, #0
   33162:	4622      	mov	r2, r4
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   33164:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33168:	b138      	cbz	r0, 3317a <bt_smp_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   3316a:	3301      	adds	r3, #1
   3316c:	2b06      	cmp	r3, #6
   3316e:	f504 7402 	add.w	r4, r4, #520	; 0x208
   33172:	d1f7      	bne.n	33164 <bt_smp_accept+0x8>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   33174:	f06f 000b 	mvn.w	r0, #11
}
   33178:	bd30      	pop	{r4, r5, pc}
		smp->chan.chan.ops = &ops;
   3317a:	f44f 7402 	mov.w	r4, #520	; 0x208
   3317e:	4363      	muls	r3, r4
   33180:	18d4      	adds	r4, r2, r3
		*chan = &smp->chan.chan;
   33182:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   33184:	4d03      	ldr	r5, [pc, #12]	; (33194 <bt_smp_accept+0x38>)
   33186:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		*chan = &smp->chan.chan;
   3318a:	4413      	add	r3, r2
   3318c:	600b      	str	r3, [r1, #0]
		return 0;
   3318e:	e7f3      	b.n	33178 <bt_smp_accept+0x1c>
   33190:	20002840 	.word	0x20002840
   33194:	000550c8 	.word	0x000550c8

00033198 <smp_find>:
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   33198:	4a08      	ldr	r2, [pc, #32]	; (331bc <smp_find+0x24>)
{
   3319a:	b510      	push	{r4, lr}
   3319c:	4601      	mov	r1, r0
   3319e:	2300      	movs	r3, #0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   331a0:	1d14      	adds	r4, r2, #4
   331a2:	18e0      	adds	r0, r4, r3
   331a4:	f01c fb55 	bl	4f852 <atomic_test_bit>
   331a8:	b108      	cbz	r0, 331ae <smp_find+0x16>
			return &bt_smp_pool[i];
   331aa:	18d0      	adds	r0, r2, r3
}
   331ac:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   331ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
   331b2:	f5b3 6f43 	cmp.w	r3, #3120	; 0xc30
   331b6:	d1f4      	bne.n	331a2 <smp_find+0xa>
   331b8:	e7f8      	b.n	331ac <smp_find+0x14>
   331ba:	bf00      	nop
   331bc:	20002840 	.word	0x20002840

000331c0 <smp_g2>:
{
   331c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   331c2:	b099      	sub	sp, #100	; 0x64
   331c4:	4614      	mov	r4, r2
   331c6:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
   331c8:	2220      	movs	r2, #32
   331ca:	4601      	mov	r1, r0
   331cc:	a804      	add	r0, sp, #16
{
   331ce:	461e      	mov	r6, r3
   331d0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   331d2:	f01c fb0d 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   331d6:	2220      	movs	r2, #32
   331d8:	4639      	mov	r1, r7
   331da:	a80c      	add	r0, sp, #48	; 0x30
   331dc:	f01c fb08 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   331e0:	2210      	movs	r2, #16
   331e2:	4631      	mov	r1, r6
   331e4:	a814      	add	r0, sp, #80	; 0x50
   331e6:	f01c fb03 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   331ea:	4621      	mov	r1, r4
   331ec:	2210      	movs	r2, #16
   331ee:	4668      	mov	r0, sp
   331f0:	f01c fafe 	bl	4f7f0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   331f4:	466b      	mov	r3, sp
   331f6:	2250      	movs	r2, #80	; 0x50
   331f8:	a904      	add	r1, sp, #16
   331fa:	4618      	mov	r0, r3
   331fc:	f01c fb88 	bl	4f910 <bt_smp_aes_cmac>
	if (err) {
   33200:	4604      	mov	r4, r0
   33202:	b960      	cbnz	r0, 3321e <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   33204:	2204      	movs	r2, #4
   33206:	a903      	add	r1, sp, #12
   33208:	4628      	mov	r0, r5
   3320a:	f019 fa54 	bl	4c6b6 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   3320e:	682b      	ldr	r3, [r5, #0]
   33210:	4a04      	ldr	r2, [pc, #16]	; (33224 <smp_g2+0x64>)
   33212:	ba1b      	rev	r3, r3
   33214:	fbb3 f1f2 	udiv	r1, r3, r2
   33218:	fb02 3311 	mls	r3, r2, r1, r3
   3321c:	602b      	str	r3, [r5, #0]
}
   3321e:	4620      	mov	r0, r4
   33220:	b019      	add	sp, #100	; 0x64
   33222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33224:	000f4240 	.word	0x000f4240

00033228 <get_auth.constprop.0>:
	if (sc_supported) {
   33228:	4b0c      	ldr	r3, [pc, #48]	; (3325c <get_auth.constprop.0+0x34>)
   3322a:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   3322c:	b510      	push	{r4, lr}
	if (sc_supported) {
   3322e:	b17b      	cbz	r3, 33250 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   33230:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   33234:	f7ff ff4a 	bl	330cc <get_io_capa>
	if (bondable) {
   33238:	4b09      	ldr	r3, [pc, #36]	; (33260 <get_auth.constprop.0+0x38>)
   3323a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   3323c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   3323e:	bf0c      	ite	eq
   33240:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   33244:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   33248:	b12b      	cbz	r3, 33256 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   3324a:	f044 0001 	orr.w	r0, r4, #1
}
   3324e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   33250:	f000 0407 	and.w	r4, r0, #7
   33254:	e7ee      	b.n	33234 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   33256:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   3325a:	e7f8      	b.n	3324e <get_auth.constprop.0+0x26>
   3325c:	20007789 	.word	0x20007789
   33260:	200011a8 	.word	0x200011a8

00033264 <smp_f5>:
{
   33264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33268:	b09a      	sub	sp, #104	; 0x68
   3326a:	461d      	mov	r5, r3
   3326c:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   33270:	4b2e      	ldr	r3, [pc, #184]	; (3332c <smp_f5+0xc8>)
{
   33272:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
   33274:	aa0c      	add	r2, sp, #48	; 0x30
{
   33276:	4684      	mov	ip, r0
   33278:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
   3327a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   3327e:	4690      	mov	r8, r2
   33280:	6818      	ldr	r0, [r3, #0]
   33282:	6859      	ldr	r1, [r3, #4]
   33284:	4614      	mov	r4, r2
   33286:	c403      	stmia	r4!, {r0, r1}
   33288:	3308      	adds	r3, #8
   3328a:	4573      	cmp	r3, lr
   3328c:	4622      	mov	r2, r4
   3328e:	d1f7      	bne.n	33280 <smp_f5+0x1c>
   33290:	6818      	ldr	r0, [r3, #0]
   33292:	791b      	ldrb	r3, [r3, #4]
   33294:	6020      	str	r0, [r4, #0]
   33296:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   33298:	4661      	mov	r1, ip
   3329a:	2220      	movs	r2, #32
   3329c:	a804      	add	r0, sp, #16
   3329e:	f01c faa7 	bl	4f7f0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   332a2:	4823      	ldr	r0, [pc, #140]	; (33330 <smp_f5+0xcc>)
   332a4:	466b      	mov	r3, sp
   332a6:	2220      	movs	r2, #32
   332a8:	a904      	add	r1, sp, #16
   332aa:	f01c fb31 	bl	4f910 <bt_smp_aes_cmac>
	if (err) {
   332ae:	4604      	mov	r4, r0
   332b0:	bbc0      	cbnz	r0, 33324 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   332b2:	2210      	movs	r2, #16
   332b4:	4651      	mov	r1, sl
   332b6:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   332ba:	f01c fa99 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   332be:	2210      	movs	r2, #16
   332c0:	4631      	mov	r1, r6
   332c2:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   332c6:	f01c fa93 	bl	4f7f0 <sys_memcpy_swap>
	m[37] = a1->type;
   332ca:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   332cc:	2206      	movs	r2, #6
	m[37] = a1->type;
   332ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   332d2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   332d6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   332da:	f01c fa89 	bl	4f7f0 <sys_memcpy_swap>
	m[44] = a2->type;
   332de:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   332e0:	2206      	movs	r2, #6
	m[44] = a2->type;
   332e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   332e6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   332ea:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   332ee:	f01c fa7f 	bl	4f7f0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   332f2:	464b      	mov	r3, r9
   332f4:	2235      	movs	r2, #53	; 0x35
   332f6:	4641      	mov	r1, r8
   332f8:	4668      	mov	r0, sp
   332fa:	f01c fb09 	bl	4f910 <bt_smp_aes_cmac>
	if (err) {
   332fe:	4604      	mov	r4, r0
   33300:	b980      	cbnz	r0, 33324 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   33302:	4648      	mov	r0, r9
   33304:	f01c fb6c 	bl	4f9e0 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   33308:	2301      	movs	r3, #1
   3330a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   3330e:	2235      	movs	r2, #53	; 0x35
   33310:	463b      	mov	r3, r7
   33312:	4641      	mov	r1, r8
   33314:	4668      	mov	r0, sp
   33316:	f01c fafb 	bl	4f910 <bt_smp_aes_cmac>
	if (err) {
   3331a:	4604      	mov	r4, r0
   3331c:	b910      	cbnz	r0, 33324 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   3331e:	4638      	mov	r0, r7
   33320:	f01c fb5e 	bl	4f9e0 <sys_mem_swap.constprop.0>
}
   33324:	4620      	mov	r0, r4
   33326:	b01a      	add	sp, #104	; 0x68
   33328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3332c:	00052b1e 	.word	0x00052b1e
   33330:	00056b12 	.word	0x00056b12

00033334 <sc_smp_check_confirm>:
{
   33334:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   33336:	7a03      	ldrb	r3, [r0, #8]
{
   33338:	b087      	sub	sp, #28
   3333a:	4604      	mov	r4, r0
	switch (smp->method) {
   3333c:	2b05      	cmp	r3, #5
   3333e:	d828      	bhi.n	33392 <sc_smp_check_confirm+0x5e>
   33340:	e8df f003 	tbb	[pc, r3]
   33344:	23030323 	.word	0x23030323
   33348:	2527      	.short	0x2527
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   3334a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   3334e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   33352:	40d3      	lsrs	r3, r2
   33354:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   33358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   3335c:	490e      	ldr	r1, [pc, #56]	; (33398 <sc_smp_check_confirm+0x64>)
   3335e:	ad02      	add	r5, sp, #8
   33360:	9500      	str	r5, [sp, #0]
   33362:	6809      	ldr	r1, [r1, #0]
   33364:	f104 0237 	add.w	r2, r4, #55	; 0x37
   33368:	f104 0057 	add.w	r0, r4, #87	; 0x57
   3336c:	f01c fb92 	bl	4fa94 <smp_f4>
   33370:	b978      	cbnz	r0, 33392 <sc_smp_check_confirm+0x5e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   33372:	2210      	movs	r2, #16
   33374:	4629      	mov	r1, r5
   33376:	f104 0017 	add.w	r0, r4, #23
   3337a:	f019 f98b 	bl	4c694 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
   3337e:	2800      	cmp	r0, #0
   33380:	bf0c      	ite	eq
   33382:	2000      	moveq	r0, #0
   33384:	2004      	movne	r0, #4
}
   33386:	b007      	add	sp, #28
   33388:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   3338a:	2300      	movs	r3, #0
   3338c:	e7e6      	b.n	3335c <sc_smp_check_confirm+0x28>
		return 0;
   3338e:	2000      	movs	r0, #0
   33390:	e7f9      	b.n	33386 <sc_smp_check_confirm+0x52>
		return BT_SMP_ERR_UNSPECIFIED;
   33392:	2008      	movs	r0, #8
   33394:	e7f7      	b.n	33386 <sc_smp_check_confirm+0x52>
   33396:	bf00      	nop
   33398:	20004bf8 	.word	0x20004bf8

0003339c <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   3339c:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   3339e:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   333a0:	d00a      	beq.n	333b8 <sec_level_reachable.isra.0+0x1c>
   333a2:	d805      	bhi.n	333b0 <sec_level_reachable.isra.0+0x14>
   333a4:	3801      	subs	r0, #1
   333a6:	2801      	cmp	r0, #1
   333a8:	bf8c      	ite	hi
   333aa:	2000      	movhi	r0, #0
   333ac:	2001      	movls	r0, #1
}
   333ae:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   333b0:	2804      	cmp	r0, #4
   333b2:	d010      	beq.n	333d6 <sec_level_reachable.isra.0+0x3a>
   333b4:	2000      	movs	r0, #0
   333b6:	e7fa      	b.n	333ae <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   333b8:	f7ff fe88 	bl	330cc <get_io_capa>
   333bc:	2803      	cmp	r0, #3
   333be:	d108      	bne.n	333d2 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   333c0:	4b0c      	ldr	r3, [pc, #48]	; (333f4 <sec_level_reachable.isra.0+0x58>)
   333c2:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   333c4:	2800      	cmp	r0, #0
   333c6:	d0f2      	beq.n	333ae <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   333c8:	6900      	ldr	r0, [r0, #16]
   333ca:	3800      	subs	r0, #0
   333cc:	bf18      	it	ne
   333ce:	2001      	movne	r0, #1
   333d0:	e7ed      	b.n	333ae <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   333d2:	2001      	movs	r0, #1
   333d4:	e7eb      	b.n	333ae <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   333d6:	f7ff fe79 	bl	330cc <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   333da:	2803      	cmp	r0, #3
   333dc:	d104      	bne.n	333e8 <sec_level_reachable.isra.0+0x4c>
   333de:	4b05      	ldr	r3, [pc, #20]	; (333f4 <sec_level_reachable.isra.0+0x58>)
   333e0:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   333e2:	b118      	cbz	r0, 333ec <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   333e4:	6900      	ldr	r0, [r0, #16]
   333e6:	b108      	cbz	r0, 333ec <sec_level_reachable.isra.0+0x50>
   333e8:	4b03      	ldr	r3, [pc, #12]	; (333f8 <sec_level_reachable.isra.0+0x5c>)
   333ea:	7818      	ldrb	r0, [r3, #0]
   333ec:	f000 0001 	and.w	r0, r0, #1
   333f0:	e7dd      	b.n	333ae <sec_level_reachable.isra.0+0x12>
   333f2:	bf00      	nop
   333f4:	20004984 	.word	0x20004984
   333f8:	20007789 	.word	0x20007789

000333fc <display_passkey>:
{
   333fc:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   333fe:	2104      	movs	r1, #4
{
   33400:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   33402:	30d8      	adds	r0, #216	; 0xd8
   33404:	f004 f97e 	bl	37704 <bt_rand>
   33408:	4605      	mov	r5, r0
   3340a:	b9e0      	cbnz	r0, 33446 <display_passkey+0x4a>
	if (bt_auth && bt_auth->passkey_display) {
   3340c:	4e0f      	ldr	r6, [pc, #60]	; (3344c <display_passkey+0x50>)
		smp->passkey %= 1000000;
   3340e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   33412:	4a0f      	ldr	r2, [pc, #60]	; (33450 <display_passkey+0x54>)
	smp->passkey_round = 0U;
   33414:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   33418:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
   3341a:	fbb3 f1f2 	udiv	r1, r3, r2
   3341e:	fb02 3311 	mls	r3, r2, r1, r3
   33422:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   33426:	b168      	cbz	r0, 33444 <display_passkey+0x48>
   33428:	6840      	ldr	r0, [r0, #4]
   3342a:	b158      	cbz	r0, 33444 <display_passkey+0x48>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   3342c:	210b      	movs	r1, #11
   3342e:	1d20      	adds	r0, r4, #4
   33430:	f01c fb55 	bl	4fade <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   33434:	6833      	ldr	r3, [r6, #0]
   33436:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3343a:	685b      	ldr	r3, [r3, #4]
   3343c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   33440:	4798      	blx	r3
	return 0;
   33442:	4628      	mov	r0, r5
}
   33444:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   33446:	2008      	movs	r0, #8
   33448:	e7fc      	b.n	33444 <display_passkey+0x48>
   3344a:	bf00      	nop
   3344c:	20004984 	.word	0x20004984
   33450:	000f4240 	.word	0x000f4240

00033454 <smp_init>:
{
   33454:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   33456:	22f0      	movs	r2, #240	; 0xf0
{
   33458:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   3345a:	2100      	movs	r1, #0
   3345c:	f019 f936 	bl	4c6cc <memset>
	if (bt_rand(smp->prnd, 16)) {
   33460:	2110      	movs	r1, #16
   33462:	f105 0027 	add.w	r0, r5, #39	; 0x27
   33466:	f004 f94d 	bl	37704 <bt_rand>
   3346a:	4604      	mov	r4, r0
   3346c:	b948      	cbnz	r0, 33482 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   3346e:	2105      	movs	r1, #5
   33470:	4628      	mov	r0, r5
   33472:	f01c fb34 	bl	4fade <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   33476:	f7fc fc91 	bl	2fd9c <bt_pub_key_get>
   3347a:	4b03      	ldr	r3, [pc, #12]	; (33488 <smp_init+0x34>)
   3347c:	6018      	str	r0, [r3, #0]
}
   3347e:	4620      	mov	r0, r4
   33480:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   33482:	2408      	movs	r4, #8
   33484:	e7fb      	b.n	3347e <smp_init+0x2a>
   33486:	bf00      	nop
   33488:	20004bf8 	.word	0x20004bf8

0003348c <smp_dhkey_generate>:
{
   3348c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   3348e:	1d05      	adds	r5, r0, #4
{
   33490:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   33492:	2108      	movs	r1, #8
   33494:	4628      	mov	r0, r5
   33496:	f01c fb22 	bl	4fade <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   3349a:	4906      	ldr	r1, [pc, #24]	; (334b4 <smp_dhkey_generate+0x28>)
   3349c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   334a0:	f7fc fc8c 	bl	2fdbc <bt_dh_key_gen>
	if (err) {
   334a4:	b120      	cbz	r0, 334b0 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   334a6:	4628      	mov	r0, r5
   334a8:	2108      	movs	r1, #8
   334aa:	f01c fa22 	bl	4f8f2 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   334ae:	2008      	movs	r0, #8
}
   334b0:	bd38      	pop	{r3, r4, r5, pc}
   334b2:	bf00      	nop
   334b4:	00050285 	.word	0x00050285

000334b8 <smp_send_pairing_req>:
{
   334b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   334bc:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   334be:	f01c f9c1 	bl	4f844 <smp_chan_get>
	if (!smp) {
   334c2:	4606      	mov	r6, r0
   334c4:	2800      	cmp	r0, #0
   334c6:	d071      	beq.n	335ac <smp_send_pairing_req+0xf4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   334c8:	1d07      	adds	r7, r0, #4
   334ca:	2104      	movs	r1, #4
   334cc:	4638      	mov	r0, r7
   334ce:	f01c f9c0 	bl	4f852 <atomic_test_bit>
   334d2:	4604      	mov	r4, r0
   334d4:	2800      	cmp	r0, #0
   334d6:	d16c      	bne.n	335b2 <smp_send_pairing_req+0xfa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   334d8:	2102      	movs	r1, #2
   334da:	4638      	mov	r0, r7
   334dc:	f01c f9b9 	bl	4f852 <atomic_test_bit>
   334e0:	b930      	cbnz	r0, 334f0 <smp_send_pairing_req+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   334e2:	2103      	movs	r1, #3
   334e4:	4638      	mov	r0, r7
   334e6:	f01c f9b4 	bl	4f852 <atomic_test_bit>
   334ea:	b120      	cbz	r0, 334f6 <smp_send_pairing_req+0x3e>
		return -EBUSY;
   334ec:	f06f 040f 	mvn.w	r4, #15
}
   334f0:	4620      	mov	r0, r4
   334f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   334f6:	2101      	movs	r1, #1
   334f8:	4638      	mov	r0, r7
   334fa:	f01c f9aa 	bl	4f852 <atomic_test_bit>
   334fe:	2800      	cmp	r0, #0
   33500:	d1f4      	bne.n	334ec <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
   33502:	7aa8      	ldrb	r0, [r5, #10]
   33504:	f7ff ff4a 	bl	3339c <sec_level_reachable.isra.0>
   33508:	2800      	cmp	r0, #0
   3350a:	d055      	beq.n	335b8 <smp_send_pairing_req+0x100>
	if (!conn->le.keys) {
   3350c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33510:	b13b      	cbz	r3, 33522 <smp_send_pairing_req+0x6a>
	if (smp_init(smp)) {
   33512:	4630      	mov	r0, r6
   33514:	f7ff ff9e 	bl	33454 <smp_init>
   33518:	4604      	mov	r4, r0
   3351a:	b170      	cbz	r0, 3353a <smp_send_pairing_req+0x82>
		return -ENOBUFS;
   3351c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   33520:	e7e6      	b.n	334f0 <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   33522:	7a28      	ldrb	r0, [r5, #8]
   33524:	f105 0188 	add.w	r1, r5, #136	; 0x88
   33528:	f000 fe22 	bl	34170 <bt_keys_get_addr>
   3352c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   33530:	2800      	cmp	r0, #0
   33532:	d1ee      	bne.n	33512 <smp_send_pairing_req+0x5a>
			return -ENOMEM;
   33534:	f06f 040b 	mvn.w	r4, #11
   33538:	e7da      	b.n	334f0 <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   3353a:	2101      	movs	r1, #1
   3353c:	4630      	mov	r0, r6
   3353e:	f01c fb12 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   33542:	4680      	mov	r8, r0
   33544:	2800      	cmp	r0, #0
   33546:	d0e9      	beq.n	3351c <smp_send_pairing_req+0x64>
   33548:	2106      	movs	r1, #6
   3354a:	3008      	adds	r0, #8
   3354c:	f01d f8dc 	bl	50708 <net_buf_simple_add>
   33550:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   33552:	2009      	movs	r0, #9
   33554:	f7ff fe68 	bl	33228 <get_auth.constprop.0>
   33558:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
   3355a:	f7ff fdb7 	bl	330cc <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   3355e:	4b18      	ldr	r3, [pc, #96]	; (335c0 <smp_send_pairing_req+0x108>)
	req->io_capability = get_io_capa();
   33560:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33562:	781b      	ldrb	r3, [r3, #0]
   33564:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   33566:	2310      	movs	r3, #16
   33568:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
   3356a:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
   3356e:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
   33570:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
   33574:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   33576:	f885 9005 	strb.w	r9, [r5, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   3357a:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   3357c:	7273      	strb	r3, [r6, #9]
	smp->local_dist = SEND_KEYS;
   3357e:	f8a6 20e8 	strh.w	r2, [r6, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   33582:	f106 000a 	add.w	r0, r6, #10
   33586:	2206      	movs	r2, #6
   33588:	f019 f895 	bl	4c6b6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   3358c:	4641      	mov	r1, r8
   3358e:	4630      	mov	r0, r6
   33590:	f01c fa0a 	bl	4f9a8 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   33594:	4630      	mov	r0, r6
   33596:	2102      	movs	r1, #2
   33598:	f01c faa1 	bl	4fade <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   3359c:	210b      	movs	r1, #11
   3359e:	f01c fa9e 	bl	4fade <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   335a2:	4649      	mov	r1, r9
   335a4:	4638      	mov	r0, r7
   335a6:	f01c fa9a 	bl	4fade <atomic_set_bit>
	return 0;
   335aa:	e7a1      	b.n	334f0 <smp_send_pairing_req+0x38>
		return -ENOTCONN;
   335ac:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   335b0:	e79e      	b.n	334f0 <smp_send_pairing_req+0x38>
		return -EIO;
   335b2:	f06f 0404 	mvn.w	r4, #4
   335b6:	e79b      	b.n	334f0 <smp_send_pairing_req+0x38>
		return -EINVAL;
   335b8:	f06f 0415 	mvn.w	r4, #21
   335bc:	e798      	b.n	334f0 <smp_send_pairing_req+0x38>
   335be:	bf00      	nop
   335c0:	20007788 	.word	0x20007788

000335c4 <smp_security_request>:
{
   335c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   335c6:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   335c8:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   335cc:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   335ce:	4620      	mov	r0, r4
   335d0:	2102      	movs	r1, #2
   335d2:	f01c f93e 	bl	4f852 <atomic_test_bit>
   335d6:	b108      	cbz	r0, 335dc <smp_security_request+0x18>
	return 0;
   335d8:	2000      	movs	r0, #0
   335da:	e04a      	b.n	33672 <smp_security_request+0xae>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   335dc:	2103      	movs	r1, #3
   335de:	4620      	mov	r0, r4
   335e0:	f01c f937 	bl	4f852 <atomic_test_bit>
   335e4:	2800      	cmp	r0, #0
   335e6:	d1f7      	bne.n	335d8 <smp_security_request+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   335e8:	2101      	movs	r1, #1
   335ea:	4620      	mov	r0, r4
   335ec:	f01c f931 	bl	4f852 <atomic_test_bit>
   335f0:	2800      	cmp	r0, #0
   335f2:	d1f1      	bne.n	335d8 <smp_security_request+0x14>
	if (sc_supported) {
   335f4:	4a23      	ldr	r2, [pc, #140]	; (33684 <smp_security_request+0xc0>)
   335f6:	7812      	ldrb	r2, [r2, #0]
   335f8:	2a00      	cmp	r2, #0
   335fa:	d041      	beq.n	33680 <smp_security_request+0xbc>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   335fc:	781e      	ldrb	r6, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   335fe:	0737      	lsls	r7, r6, #28
   33600:	d53e      	bpl.n	33680 <smp_security_request+0xbc>
	if (conn->le.keys) {
   33602:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33606:	b153      	cbz	r3, 3361e <smp_security_request+0x5a>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   33608:	89db      	ldrh	r3, [r3, #14]
   3360a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   3360e:	b9bb      	cbnz	r3, 33640 <smp_security_request+0x7c>
	if (smp_send_pairing_req(conn) < 0) {
   33610:	4628      	mov	r0, r5
   33612:	f7ff ff51 	bl	334b8 <smp_send_pairing_req>
   33616:	2800      	cmp	r0, #0
   33618:	db2a      	blt.n	33670 <smp_security_request+0xac>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   3361a:	210f      	movs	r1, #15
   3361c:	e02c      	b.n	33678 <smp_security_request+0xb4>
					     &conn->le.dst);
   3361e:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   33622:	7a29      	ldrb	r1, [r5, #8]
   33624:	463a      	mov	r2, r7
   33626:	2020      	movs	r0, #32
   33628:	f000 fe26 	bl	34278 <bt_keys_find>
   3362c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   33630:	b930      	cbnz	r0, 33640 <smp_security_request+0x7c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   33632:	7a29      	ldrb	r1, [r5, #8]
   33634:	463a      	mov	r2, r7
   33636:	2004      	movs	r0, #4
   33638:	f000 fe1e 	bl	34278 <bt_keys_find>
   3363c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
   33640:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   33644:	2900      	cmp	r1, #0
   33646:	d0e3      	beq.n	33610 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   33648:	0770      	lsls	r0, r6, #29
   3364a:	d502      	bpl.n	33652 <smp_security_request+0x8e>
   3364c:	7b4b      	ldrb	r3, [r1, #13]
   3364e:	07da      	lsls	r2, r3, #31
   33650:	d5de      	bpl.n	33610 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   33652:	89cb      	ldrh	r3, [r1, #14]
   33654:	069b      	lsls	r3, r3, #26
   33656:	d5db      	bpl.n	33610 <smp_security_request+0x4c>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   33658:	7b0b      	ldrb	r3, [r1, #12]
   3365a:	9300      	str	r3, [sp, #0]
   3365c:	f101 0218 	add.w	r2, r1, #24
   33660:	f101 031a 	add.w	r3, r1, #26
   33664:	4628      	mov	r0, r5
   33666:	3110      	adds	r1, #16
   33668:	f01a f8a8 	bl	4d7bc <bt_conn_le_start_encryption>
   3366c:	2800      	cmp	r0, #0
   3366e:	da02      	bge.n	33676 <smp_security_request+0xb2>
		return BT_SMP_ERR_UNSPECIFIED;
   33670:	2008      	movs	r0, #8
}
   33672:	b003      	add	sp, #12
   33674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   33676:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   33678:	4620      	mov	r0, r4
   3367a:	f01c fa30 	bl	4fade <atomic_set_bit>
   3367e:	e7ab      	b.n	335d8 <smp_security_request+0x14>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33680:	2003      	movs	r0, #3
   33682:	e7f6      	b.n	33672 <smp_security_request+0xae>
   33684:	20007789 	.word	0x20007789

00033688 <sc_send_public_key>:
{
   33688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   3368a:	210c      	movs	r1, #12
{
   3368c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   3368e:	f01c fa6a 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   33692:	4604      	mov	r4, r0
   33694:	b1a8      	cbz	r0, 336c2 <sc_send_public_key+0x3a>
   33696:	2140      	movs	r1, #64	; 0x40
   33698:	3008      	adds	r0, #8
   3369a:	f01d f835 	bl	50708 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   3369e:	4f0a      	ldr	r7, [pc, #40]	; (336c8 <sc_send_public_key+0x40>)
   336a0:	2220      	movs	r2, #32
   336a2:	6839      	ldr	r1, [r7, #0]
   336a4:	4606      	mov	r6, r0
   336a6:	f019 f806 	bl	4c6b6 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   336aa:	6839      	ldr	r1, [r7, #0]
   336ac:	2220      	movs	r2, #32
   336ae:	4411      	add	r1, r2
   336b0:	18b0      	adds	r0, r6, r2
   336b2:	f019 f800 	bl	4c6b6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   336b6:	4628      	mov	r0, r5
   336b8:	4621      	mov	r1, r4
   336ba:	f01c f975 	bl	4f9a8 <smp_send.constprop.0>
	return 0;
   336be:	2000      	movs	r0, #0
}
   336c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   336c2:	2008      	movs	r0, #8
   336c4:	e7fc      	b.n	336c0 <sc_send_public_key+0x38>
   336c6:	bf00      	nop
   336c8:	20004bf8 	.word	0x20004bf8

000336cc <smp_send_pairing_confirm>:
{
   336cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   336ce:	7a04      	ldrb	r4, [r0, #8]
   336d0:	2c02      	cmp	r4, #2
{
   336d2:	4605      	mov	r5, r0
	switch (smp->method) {
   336d4:	d823      	bhi.n	3371e <smp_send_pairing_confirm+0x52>
   336d6:	b144      	cbz	r4, 336ea <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   336d8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   336dc:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   336e0:	40dc      	lsrs	r4, r3
   336e2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   336e6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   336ea:	2103      	movs	r1, #3
   336ec:	4628      	mov	r0, r5
   336ee:	f01c fa3a 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!buf) {
   336f2:	4606      	mov	r6, r0
   336f4:	b1a8      	cbz	r0, 33722 <smp_send_pairing_confirm+0x56>
   336f6:	2110      	movs	r1, #16
   336f8:	3008      	adds	r0, #8
   336fa:	f01d f805 	bl	50708 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   336fe:	9000      	str	r0, [sp, #0]
   33700:	480f      	ldr	r0, [pc, #60]	; (33740 <smp_send_pairing_confirm+0x74>)
   33702:	4623      	mov	r3, r4
   33704:	6800      	ldr	r0, [r0, #0]
   33706:	f105 0227 	add.w	r2, r5, #39	; 0x27
   3370a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   3370e:	f01c f9c1 	bl	4fa94 <smp_f4>
   33712:	4604      	mov	r4, r0
   33714:	b148      	cbz	r0, 3372a <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
   33716:	4630      	mov	r0, r6
   33718:	f010 fccc 	bl	440b4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   3371c:	e001      	b.n	33722 <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   3371e:	2c03      	cmp	r4, #3
   33720:	d001      	beq.n	33726 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
   33722:	2008      	movs	r0, #8
   33724:	e00a      	b.n	3373c <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
   33726:	2400      	movs	r4, #0
   33728:	e7df      	b.n	336ea <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   3372a:	4631      	mov	r1, r6
   3372c:	4628      	mov	r0, r5
   3372e:	f01c f93b 	bl	4f9a8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   33732:	1d28      	adds	r0, r5, #4
   33734:	4621      	mov	r1, r4
   33736:	f01c f8dc 	bl	4f8f2 <atomic_clear_bit>
	return 0;
   3373a:	4620      	mov	r0, r4
}
   3373c:	b002      	add	sp, #8
   3373e:	bd70      	pop	{r4, r5, r6, pc}
   33740:	20004bf8 	.word	0x20004bf8

00033744 <smp_pairing_random>:
{
   33744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   33746:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   33748:	f100 0637 	add.w	r6, r0, #55	; 0x37
   3374c:	6889      	ldr	r1, [r1, #8]
   3374e:	2210      	movs	r2, #16
   33750:	4630      	mov	r0, r6
   33752:	f018 ffb0 	bl	4c6b6 <memcpy>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   33756:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   3375a:	78db      	ldrb	r3, [r3, #3]
   3375c:	2b00      	cmp	r3, #0
   3375e:	d156      	bne.n	3380e <smp_pairing_random+0xca>
		err = sc_smp_check_confirm(smp);
   33760:	4620      	mov	r0, r4
   33762:	f7ff fde7 	bl	33334 <sc_smp_check_confirm>
		if (err) {
   33766:	4605      	mov	r5, r0
   33768:	2800      	cmp	r0, #0
   3376a:	d147      	bne.n	337fc <smp_pairing_random+0xb8>
		switch (smp->method) {
   3376c:	7a23      	ldrb	r3, [r4, #8]
   3376e:	2b05      	cmp	r3, #5
   33770:	f200 809f 	bhi.w	338b2 <smp_pairing_random+0x16e>
   33774:	e8df f003 	tbb	[pc, r3]
   33778:	03202038 	.word	0x03202038
   3377c:	389d      	.short	0x389d
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   3377e:	ab03      	add	r3, sp, #12
   33780:	485e      	ldr	r0, [pc, #376]	; (338fc <smp_pairing_random+0x1b8>)
   33782:	9300      	str	r3, [sp, #0]
   33784:	6800      	ldr	r0, [r0, #0]
   33786:	4633      	mov	r3, r6
   33788:	f104 0227 	add.w	r2, r4, #39	; 0x27
   3378c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   33790:	f7ff fd16 	bl	331c0 <smp_g2>
   33794:	2800      	cmp	r0, #0
   33796:	f040 808c 	bne.w	338b2 <smp_pairing_random+0x16e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   3379a:	210a      	movs	r1, #10
   3379c:	1d20      	adds	r0, r4, #4
   3379e:	f01c f99e 	bl	4fade <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   337a2:	2109      	movs	r1, #9
   337a4:	f01c f99b 	bl	4fade <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   337a8:	4b55      	ldr	r3, [pc, #340]	; (33900 <smp_pairing_random+0x1bc>)
   337aa:	9903      	ldr	r1, [sp, #12]
   337ac:	681b      	ldr	r3, [r3, #0]
   337ae:	68db      	ldr	r3, [r3, #12]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   337b0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   337b4:	4798      	blx	r3
			return 0;
   337b6:	e021      	b.n	337fc <smp_pairing_random+0xb8>
			smp->passkey_round++;
   337b8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   337bc:	3301      	adds	r3, #1
   337be:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   337c0:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   337c2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   337c6:	d00f      	beq.n	337e8 <smp_pairing_random+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   337c8:	2110      	movs	r1, #16
   337ca:	f104 0027 	add.w	r0, r4, #39	; 0x27
   337ce:	f003 ff99 	bl	37704 <bt_rand>
   337d2:	2800      	cmp	r0, #0
   337d4:	d16d      	bne.n	338b2 <smp_pairing_random+0x16e>
			atomic_set_bit(smp->allowed_cmds,
   337d6:	2103      	movs	r1, #3
   337d8:	4620      	mov	r0, r4
   337da:	f01c f980 	bl	4fade <atomic_set_bit>
}
   337de:	b004      	add	sp, #16
   337e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_confirm(smp);
   337e4:	f7ff bf72 	b.w	336cc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   337e8:	1d23      	adds	r3, r4, #4
   337ea:	2107      	movs	r1, #7
   337ec:	4618      	mov	r0, r3
   337ee:	f01c f830 	bl	4f852 <atomic_test_bit>
   337f2:	b130      	cbz	r0, 33802 <smp_pairing_random+0xbe>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   337f4:	2109      	movs	r1, #9
   337f6:	4618      	mov	r0, r3
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   337f8:	f01c f971 	bl	4fade <atomic_set_bit>
}
   337fc:	4628      	mov	r0, r5
   337fe:	b004      	add	sp, #16
   33800:	bd70      	pop	{r4, r5, r6, pc}
		return compute_and_send_central_dhcheck(smp);
   33802:	4620      	mov	r0, r4
}
   33804:	b004      	add	sp, #16
   33806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_send_central_dhcheck(smp);
   3380a:	f01c b9fb 	b.w	4fc04 <compute_and_send_central_dhcheck>
	switch (smp->method) {
   3380e:	7a23      	ldrb	r3, [r4, #8]
   33810:	2b05      	cmp	r3, #5
   33812:	d84e      	bhi.n	338b2 <smp_pairing_random+0x16e>
   33814:	e8df f003 	tbb	[pc, r3]
   33818:	0328281b 	.word	0x0328281b
   3381c:	4f4d      	.short	0x4f4d
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   3381e:	ab03      	add	r3, sp, #12
   33820:	4936      	ldr	r1, [pc, #216]	; (338fc <smp_pairing_random+0x1b8>)
   33822:	9300      	str	r3, [sp, #0]
   33824:	6809      	ldr	r1, [r1, #0]
   33826:	f104 0327 	add.w	r3, r4, #39	; 0x27
   3382a:	4632      	mov	r2, r6
   3382c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   33830:	f7ff fcc6 	bl	331c0 <smp_g2>
   33834:	2800      	cmp	r0, #0
   33836:	d13c      	bne.n	338b2 <smp_pairing_random+0x16e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33838:	210a      	movs	r1, #10
   3383a:	1d20      	adds	r0, r4, #4
   3383c:	f01c f94f 	bl	4fade <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   33840:	4b2f      	ldr	r3, [pc, #188]	; (33900 <smp_pairing_random+0x1bc>)
   33842:	9903      	ldr	r1, [sp, #12]
   33844:	681b      	ldr	r3, [r3, #0]
   33846:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3384a:	68db      	ldr	r3, [r3, #12]
   3384c:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   3384e:	210d      	movs	r1, #13
   33850:	4620      	mov	r0, r4
   33852:	f01c f944 	bl	4fade <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   33856:	2110      	movs	r1, #16
   33858:	1d20      	adds	r0, r4, #4
   3385a:	f01c f940 	bl	4fade <atomic_set_bit>
	return smp_send_pairing_random(smp);
   3385e:	4620      	mov	r0, r4
   33860:	f01c f9a0 	bl	4fba4 <smp_send_pairing_random>
   33864:	4605      	mov	r5, r0
   33866:	e7c9      	b.n	337fc <smp_pairing_random+0xb8>
		err = sc_smp_check_confirm(smp);
   33868:	4620      	mov	r0, r4
   3386a:	f7ff fd63 	bl	33334 <sc_smp_check_confirm>
		if (err) {
   3386e:	4605      	mov	r5, r0
   33870:	2800      	cmp	r0, #0
   33872:	d1c3      	bne.n	337fc <smp_pairing_random+0xb8>
		atomic_set_bit(smp->allowed_cmds,
   33874:	2103      	movs	r1, #3
   33876:	4620      	mov	r0, r4
   33878:	f01c f931 	bl	4fade <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   3387c:	f01c f992 	bl	4fba4 <smp_send_pairing_random>
		if (err) {
   33880:	4605      	mov	r5, r0
   33882:	2800      	cmp	r0, #0
   33884:	d1ba      	bne.n	337fc <smp_pairing_random+0xb8>
		smp->passkey_round++;
   33886:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   3388a:	3301      	adds	r3, #1
   3388c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   3388e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   33890:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   33894:	d106      	bne.n	338a4 <smp_pairing_random+0x160>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   33896:	210d      	movs	r1, #13
   33898:	4620      	mov	r0, r4
   3389a:	f01c f920 	bl	4fade <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   3389e:	2110      	movs	r1, #16
   338a0:	1d20      	adds	r0, r4, #4
   338a2:	e7a9      	b.n	337f8 <smp_pairing_random+0xb4>
		if (bt_rand(smp->prnd, 16)) {
   338a4:	2110      	movs	r1, #16
   338a6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   338aa:	f003 ff2b 	bl	37704 <bt_rand>
   338ae:	2800      	cmp	r0, #0
   338b0:	d0a4      	beq.n	337fc <smp_pairing_random+0xb8>
			return BT_SMP_ERR_UNSPECIFIED;
   338b2:	2508      	movs	r5, #8
   338b4:	e7a2      	b.n	337fc <smp_pairing_random+0xb8>
		if (bt_rand(smp->prnd, 16)) {
   338b6:	2110      	movs	r1, #16
   338b8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   338bc:	f003 ff22 	bl	37704 <bt_rand>
   338c0:	4605      	mov	r5, r0
   338c2:	2800      	cmp	r0, #0
   338c4:	d1f5      	bne.n	338b2 <smp_pairing_random+0x16e>
		if (bt_auth && bt_auth->oob_data_request) {
   338c6:	4e0e      	ldr	r6, [pc, #56]	; (33900 <smp_pairing_random+0x1bc>)
   338c8:	6833      	ldr	r3, [r6, #0]
   338ca:	b1a3      	cbz	r3, 338f6 <smp_pairing_random+0x1b2>
   338cc:	691b      	ldr	r3, [r3, #16]
   338ce:	b193      	cbz	r3, 338f6 <smp_pairing_random+0x1b2>
			struct bt_conn_oob_info info = {
   338d0:	4b0c      	ldr	r3, [pc, #48]	; (33904 <smp_pairing_random+0x1c0>)
			le_sc_oob_config_set(smp, &info);
   338d2:	a903      	add	r1, sp, #12
			struct bt_conn_oob_info info = {
   338d4:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   338d8:	f8ad 300c 	strh.w	r3, [sp, #12]
			le_sc_oob_config_set(smp, &info);
   338dc:	4620      	mov	r0, r4
   338de:	f01b ff93 	bl	4f808 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   338e2:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
   338e4:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   338e8:	1d20      	adds	r0, r4, #4
   338ea:	f01c f8f8 	bl	4fade <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   338ee:	6833      	ldr	r3, [r6, #0]
   338f0:	a903      	add	r1, sp, #12
   338f2:	691b      	ldr	r3, [r3, #16]
   338f4:	e75c      	b.n	337b0 <smp_pairing_random+0x6c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   338f6:	2502      	movs	r5, #2
   338f8:	e780      	b.n	337fc <smp_pairing_random+0xb8>
   338fa:	bf00      	nop
   338fc:	20004bf8 	.word	0x20004bf8
   33900:	20004984 	.word	0x20004984
   33904:	00052b1e 	.word	0x00052b1e

00033908 <smp_public_key_periph>:
{
   33908:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   3390a:	1d05      	adds	r5, r0, #4
{
   3390c:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   3390e:	210e      	movs	r1, #14
   33910:	4628      	mov	r0, r5
   33912:	f01b ff9e 	bl	4f852 <atomic_test_bit>
   33916:	b120      	cbz	r0, 33922 <smp_public_key_periph+0x1a>
	err = sc_send_public_key(smp);
   33918:	4620      	mov	r0, r4
   3391a:	f7ff feb5 	bl	33688 <sc_send_public_key>
	if (err) {
   3391e:	b158      	cbz	r0, 33938 <smp_public_key_periph+0x30>
}
   33920:	bd38      	pop	{r3, r4, r5, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   33922:	4b26      	ldr	r3, [pc, #152]	; (339bc <smp_public_key_periph+0xb4>)
   33924:	2220      	movs	r2, #32
   33926:	6819      	ldr	r1, [r3, #0]
   33928:	f104 0057 	add.w	r0, r4, #87	; 0x57
   3392c:	f018 feb2 	bl	4c694 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   33930:	2800      	cmp	r0, #0
   33932:	d1f1      	bne.n	33918 <smp_public_key_periph+0x10>
	switch (smp->method) {
   33934:	2008      	movs	r0, #8
   33936:	e7f3      	b.n	33920 <smp_public_key_periph+0x18>
   33938:	7a23      	ldrb	r3, [r4, #8]
   3393a:	2b05      	cmp	r3, #5
   3393c:	d8fa      	bhi.n	33934 <smp_public_key_periph+0x2c>
   3393e:	a201      	add	r2, pc, #4	; (adr r2, 33944 <smp_public_key_periph+0x3c>)
   33940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   33944:	0003395d 	.word	0x0003395d
   33948:	00033991 	.word	0x00033991
   3394c:	00033977 	.word	0x00033977
   33950:	0003395d 	.word	0x0003395d
   33954:	00033935 	.word	0x00033935
   33958:	000339b5 	.word	0x000339b5
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   3395c:	2104      	movs	r1, #4
   3395e:	4620      	mov	r0, r4
   33960:	f01c f8bd 	bl	4fade <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   33964:	f7ff feb2 	bl	336cc <smp_send_pairing_confirm>
		if (err) {
   33968:	2800      	cmp	r0, #0
   3396a:	d1d9      	bne.n	33920 <smp_public_key_periph+0x18>
	return generate_dhkey(smp);
   3396c:	4620      	mov	r0, r4
}
   3396e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   33972:	f01c b8c8 	b.w	4fb06 <generate_dhkey>
		err = display_passkey(smp);
   33976:	4620      	mov	r0, r4
   33978:	f7ff fd40 	bl	333fc <display_passkey>
		if (err) {
   3397c:	2800      	cmp	r0, #0
   3397e:	d1cf      	bne.n	33920 <smp_public_key_periph+0x18>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   33980:	2103      	movs	r1, #3
   33982:	4620      	mov	r0, r4
   33984:	f01c f8ab 	bl	4fade <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   33988:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   3398a:	f01c f8a8 	bl	4fade <atomic_set_bit>
		break;
   3398e:	e7ed      	b.n	3396c <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   33990:	4620      	mov	r0, r4
   33992:	2103      	movs	r1, #3
   33994:	f01c f8a3 	bl	4fade <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   33998:	210e      	movs	r1, #14
   3399a:	f01c f8a0 	bl	4fade <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   3399e:	4628      	mov	r0, r5
   339a0:	210a      	movs	r1, #10
   339a2:	f01c f89c 	bl	4fade <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   339a6:	4b06      	ldr	r3, [pc, #24]	; (339c0 <smp_public_key_periph+0xb8>)
   339a8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   339ac:	681b      	ldr	r3, [r3, #0]
   339ae:	689b      	ldr	r3, [r3, #8]
   339b0:	4798      	blx	r3
		break;
   339b2:	e7db      	b.n	3396c <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   339b4:	2104      	movs	r1, #4
   339b6:	4620      	mov	r0, r4
   339b8:	e7e7      	b.n	3398a <smp_public_key_periph+0x82>
   339ba:	bf00      	nop
   339bc:	20004bf8 	.word	0x20004bf8
   339c0:	20004984 	.word	0x20004984

000339c4 <smp_public_key>:
{
   339c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   339c6:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   339c8:	f100 0757 	add.w	r7, r0, #87	; 0x57
{
   339cc:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   339ce:	2220      	movs	r2, #32
   339d0:	4629      	mov	r1, r5
   339d2:	4638      	mov	r0, r7
   339d4:	f018 fe6f 	bl	4c6b6 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   339d8:	2220      	movs	r2, #32
   339da:	18a9      	adds	r1, r5, r2
   339dc:	f104 0077 	add.w	r0, r4, #119	; 0x77
   339e0:	f018 fe69 	bl	4c6b6 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   339e4:	4638      	mov	r0, r7
   339e6:	f7fc f963 	bl	2fcb0 <bt_pub_key_is_debug>
   339ea:	b998      	cbnz	r0, 33a14 <smp_public_key+0x50>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   339ec:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   339f0:	78db      	ldrb	r3, [r3, #3]
   339f2:	2b00      	cmp	r3, #0
   339f4:	f040 8081 	bne.w	33afa <smp_public_key+0x136>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   339f8:	1d26      	adds	r6, r4, #4
   339fa:	210e      	movs	r1, #14
   339fc:	4630      	mov	r0, r6
   339fe:	f01b ff28 	bl	4f852 <atomic_test_bit>
   33a02:	b330      	cbz	r0, 33a52 <smp_public_key+0x8e>
		switch (smp->method) {
   33a04:	7a23      	ldrb	r3, [r4, #8]
   33a06:	2b05      	cmp	r3, #5
   33a08:	d82b      	bhi.n	33a62 <smp_public_key+0x9e>
   33a0a:	e8df f003 	tbb	[pc, r3]
   33a0e:	472c      	.short	0x472c
   33a10:	532a2c31 	.word	0x532a2c31
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   33a14:	210e      	movs	r1, #14
   33a16:	1d20      	adds	r0, r4, #4
   33a18:	f01c f861 	bl	4fade <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   33a1c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   33a20:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33a24:	b933      	cbnz	r3, 33a34 <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   33a26:	7a28      	ldrb	r0, [r5, #8]
   33a28:	f105 0188 	add.w	r1, r5, #136	; 0x88
   33a2c:	f000 fba0 	bl	34170 <bt_keys_get_addr>
   33a30:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   33a34:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33a38:	2b00      	cmp	r3, #0
   33a3a:	d0d7      	beq.n	339ec <smp_public_key+0x28>
   33a3c:	89da      	ldrh	r2, [r3, #14]
   33a3e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   33a42:	2a00      	cmp	r2, #0
   33a44:	d0d2      	beq.n	339ec <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   33a46:	7b5b      	ldrb	r3, [r3, #13]
   33a48:	079b      	lsls	r3, r3, #30
   33a4a:	d4cf      	bmi.n	339ec <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33a4c:	2003      	movs	r0, #3
}
   33a4e:	b003      	add	sp, #12
   33a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   33a52:	4b32      	ldr	r3, [pc, #200]	; (33b1c <smp_public_key+0x158>)
   33a54:	2220      	movs	r2, #32
   33a56:	6819      	ldr	r1, [r3, #0]
   33a58:	4638      	mov	r0, r7
   33a5a:	f018 fe1b 	bl	4c694 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   33a5e:	2800      	cmp	r0, #0
   33a60:	d1d0      	bne.n	33a04 <smp_public_key+0x40>
		switch (smp->method) {
   33a62:	2008      	movs	r0, #8
   33a64:	e7f3      	b.n	33a4e <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   33a66:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   33a68:	4620      	mov	r0, r4
   33a6a:	f01c f838 	bl	4fade <atomic_set_bit>
			break;
   33a6e:	e00f      	b.n	33a90 <smp_public_key+0xcc>
			err = display_passkey(smp);
   33a70:	4620      	mov	r0, r4
   33a72:	f7ff fcc3 	bl	333fc <display_passkey>
			if (err) {
   33a76:	2800      	cmp	r0, #0
   33a78:	d1e9      	bne.n	33a4e <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   33a7a:	2103      	movs	r1, #3
   33a7c:	4620      	mov	r0, r4
   33a7e:	f01c f82e 	bl	4fade <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   33a82:	210e      	movs	r1, #14
   33a84:	f01c f82b 	bl	4fade <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   33a88:	f7ff fe20 	bl	336cc <smp_send_pairing_confirm>
			if (err) {
   33a8c:	2800      	cmp	r0, #0
   33a8e:	d1de      	bne.n	33a4e <smp_public_key+0x8a>
		return generate_dhkey(smp);
   33a90:	4620      	mov	r0, r4
}
   33a92:	b003      	add	sp, #12
   33a94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   33a98:	f01c b835 	b.w	4fb06 <generate_dhkey>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33a9c:	210a      	movs	r1, #10
   33a9e:	4630      	mov	r0, r6
   33aa0:	f01c f81d 	bl	4fade <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   33aa4:	4b1e      	ldr	r3, [pc, #120]	; (33b20 <smp_public_key+0x15c>)
   33aa6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33aaa:	681b      	ldr	r3, [r3, #0]
   33aac:	689b      	ldr	r3, [r3, #8]
   33aae:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   33ab0:	210e      	movs	r1, #14
   33ab2:	e7d9      	b.n	33a68 <smp_public_key+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   33ab4:	2110      	movs	r1, #16
   33ab6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33aba:	f003 fe23 	bl	37704 <bt_rand>
   33abe:	4605      	mov	r5, r0
   33ac0:	2800      	cmp	r0, #0
   33ac2:	d1ce      	bne.n	33a62 <smp_public_key+0x9e>
			if (bt_auth && bt_auth->oob_data_request) {
   33ac4:	4f16      	ldr	r7, [pc, #88]	; (33b20 <smp_public_key+0x15c>)
   33ac6:	683b      	ldr	r3, [r7, #0]
   33ac8:	b333      	cbz	r3, 33b18 <smp_public_key+0x154>
   33aca:	691b      	ldr	r3, [r3, #16]
   33acc:	b323      	cbz	r3, 33b18 <smp_public_key+0x154>
				struct bt_conn_oob_info info = {
   33ace:	4b15      	ldr	r3, [pc, #84]	; (33b24 <smp_public_key+0x160>)
				le_sc_oob_config_set(smp, &info);
   33ad0:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   33ad2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   33ad6:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   33ada:	4620      	mov	r0, r4
   33adc:	f01b fe94 	bl	4f808 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   33ae0:	4630      	mov	r0, r6
				smp->oobd_remote = NULL;
   33ae2:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   33ae6:	210c      	movs	r1, #12
   33ae8:	f01b fff9 	bl	4fade <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   33aec:	683b      	ldr	r3, [r7, #0]
   33aee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33af2:	691b      	ldr	r3, [r3, #16]
   33af4:	a901      	add	r1, sp, #4
   33af6:	4798      	blx	r3
			break;
   33af8:	e7ca      	b.n	33a90 <smp_public_key+0xcc>
	if (!sc_public_key) {
   33afa:	4b08      	ldr	r3, [pc, #32]	; (33b1c <smp_public_key+0x158>)
   33afc:	681d      	ldr	r5, [r3, #0]
   33afe:	b92d      	cbnz	r5, 33b0c <smp_public_key+0x148>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   33b00:	1d20      	adds	r0, r4, #4
   33b02:	2106      	movs	r1, #6
   33b04:	f01b ffeb 	bl	4fade <atomic_set_bit>
		return 0;
   33b08:	4628      	mov	r0, r5
   33b0a:	e7a0      	b.n	33a4e <smp_public_key+0x8a>
	err = smp_public_key_periph(smp);
   33b0c:	4620      	mov	r0, r4
}
   33b0e:	b003      	add	sp, #12
   33b10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_periph(smp);
   33b14:	f7ff bef8 	b.w	33908 <smp_public_key_periph>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   33b18:	2002      	movs	r0, #2
   33b1a:	e798      	b.n	33a4e <smp_public_key+0x8a>
   33b1c:	20004bf8 	.word	0x20004bf8
   33b20:	20004984 	.word	0x20004984
   33b24:	00052b1e 	.word	0x00052b1e

00033b28 <bt_smp_connected>:
{
   33b28:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   33b2a:	4905      	ldr	r1, [pc, #20]	; (33b40 <bt_smp_connected+0x18>)
   33b2c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   33b30:	30e8      	adds	r0, #232	; 0xe8
   33b32:	f01d ff28 	bl	51986 <k_work_init_delayable>
	smp_reset(smp);
   33b36:	4620      	mov	r0, r4
}
   33b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   33b3c:	f01c ba17 	b.w	4ff6e <smp_reset>
   33b40:	00050481 	.word	0x00050481

00033b44 <smp_pairing_accept_query>:
	if (bt_auth && bt_auth->pairing_accept) {
   33b44:	4b13      	ldr	r3, [pc, #76]	; (33b94 <smp_pairing_accept_query+0x50>)
   33b46:	681b      	ldr	r3, [r3, #0]
{
   33b48:	b507      	push	{r0, r1, r2, lr}
	if (bt_auth && bt_auth->pairing_accept) {
   33b4a:	b1f3      	cbz	r3, 33b8a <smp_pairing_accept_query+0x46>
   33b4c:	681b      	ldr	r3, [r3, #0]
   33b4e:	b1f3      	cbz	r3, 33b8e <smp_pairing_accept_query+0x4a>
		const struct bt_conn_pairing_feat feat = {
   33b50:	780a      	ldrb	r2, [r1, #0]
   33b52:	f88d 2000 	strb.w	r2, [sp]
   33b56:	784a      	ldrb	r2, [r1, #1]
   33b58:	f88d 2001 	strb.w	r2, [sp, #1]
   33b5c:	788a      	ldrb	r2, [r1, #2]
   33b5e:	f88d 2002 	strb.w	r2, [sp, #2]
   33b62:	78ca      	ldrb	r2, [r1, #3]
   33b64:	f88d 2003 	strb.w	r2, [sp, #3]
   33b68:	790a      	ldrb	r2, [r1, #4]
   33b6a:	f88d 2004 	strb.w	r2, [sp, #4]
   33b6e:	794a      	ldrb	r2, [r1, #5]
   33b70:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   33b74:	4669      	mov	r1, sp
   33b76:	4798      	blx	r3
	switch (auth_err) {
   33b78:	3801      	subs	r0, #1
   33b7a:	b2c0      	uxtb	r0, r0
   33b7c:	2808      	cmp	r0, #8
   33b7e:	d804      	bhi.n	33b8a <smp_pairing_accept_query+0x46>
   33b80:	4b05      	ldr	r3, [pc, #20]	; (33b98 <smp_pairing_accept_query+0x54>)
   33b82:	5c18      	ldrb	r0, [r3, r0]
}
   33b84:	b003      	add	sp, #12
   33b86:	f85d fb04 	ldr.w	pc, [sp], #4
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   33b8a:	2000      	movs	r0, #0
   33b8c:	e7fa      	b.n	33b84 <smp_pairing_accept_query+0x40>
	return 0;
   33b8e:	4618      	mov	r0, r3
   33b90:	e7f8      	b.n	33b84 <smp_pairing_accept_query+0x40>
   33b92:	bf00      	nop
   33b94:	20004984 	.word	0x20004984
   33b98:	00056ae8 	.word	0x00056ae8

00033b9c <smp_pairing_rsp>:
{
   33b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   33ba0:	688e      	ldr	r6, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33ba2:	78f3      	ldrb	r3, [r6, #3]
   33ba4:	3b07      	subs	r3, #7
   33ba6:	2b09      	cmp	r3, #9
{
   33ba8:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33baa:	f200 8086 	bhi.w	33cba <smp_pairing_rsp+0x11e>
	smp->local_dist &= rsp->init_key_dist;
   33bae:	7932      	ldrb	r2, [r6, #4]
   33bb0:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   33bb4:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   33bb8:	4013      	ands	r3, r2
   33bba:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   33bbe:	7972      	ldrb	r2, [r6, #5]
   33bc0:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   33bc4:	4013      	ands	r3, r2
   33bc6:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33bca:	2302      	movs	r3, #2
   33bcc:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   33bce:	2206      	movs	r2, #6
   33bd0:	4631      	mov	r1, r6
   33bd2:	3011      	adds	r0, #17
   33bd4:	f018 fd6f 	bl	4c6b6 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   33bd8:	78b3      	ldrb	r3, [r6, #2]
   33bda:	071f      	lsls	r7, r3, #28
   33bdc:	d506      	bpl.n	33bec <smp_pairing_rsp+0x50>
   33bde:	7b23      	ldrb	r3, [r4, #12]
   33be0:	071d      	lsls	r5, r3, #28
   33be2:	d503      	bpl.n	33bec <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   33be4:	2105      	movs	r1, #5
   33be6:	1d20      	adds	r0, r4, #4
   33be8:	f01b ff79 	bl	4fade <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   33bec:	78b3      	ldrb	r3, [r6, #2]
   33bee:	0698      	lsls	r0, r3, #26
   33bf0:	d506      	bpl.n	33c00 <smp_pairing_rsp+0x64>
   33bf2:	7b23      	ldrb	r3, [r4, #12]
   33bf4:	0699      	lsls	r1, r3, #26
   33bf6:	d503      	bpl.n	33c00 <smp_pairing_rsp+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33bf8:	2114      	movs	r1, #20
   33bfa:	1d20      	adds	r0, r4, #4
   33bfc:	f01b ff6f 	bl	4fade <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   33c00:	78b3      	ldrb	r3, [r6, #2]
   33c02:	07da      	lsls	r2, r3, #31
   33c04:	d506      	bpl.n	33c14 <smp_pairing_rsp+0x78>
   33c06:	7b23      	ldrb	r3, [r4, #12]
   33c08:	07db      	lsls	r3, r3, #31
   33c0a:	d503      	bpl.n	33c14 <smp_pairing_rsp+0x78>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   33c0c:	210d      	movs	r1, #13
   33c0e:	1d20      	adds	r0, r4, #4
   33c10:	f01b ff65 	bl	4fade <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   33c14:	7831      	ldrb	r1, [r6, #0]
   33c16:	4620      	mov	r0, r4
   33c18:	f7ff fa7e 	bl	33118 <get_pair_method>
   33c1c:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   33c1e:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   33c22:	4620      	mov	r0, r4
   33c24:	f01b fe1e 	bl	4f864 <update_keys_check>
   33c28:	b918      	cbnz	r0, 33c32 <smp_pairing_rsp+0x96>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33c2a:	2503      	movs	r5, #3
}
   33c2c:	4628      	mov	r0, r5
   33c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = remote_sec_level_reachable(smp);
   33c32:	4620      	mov	r0, r4
   33c34:	f01b fe37 	bl	4f8a6 <remote_sec_level_reachable>
	if (err) {
   33c38:	4605      	mov	r5, r0
   33c3a:	2800      	cmp	r0, #0
   33c3c:	d1f6      	bne.n	33c2c <smp_pairing_rsp+0x90>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33c3e:	1d27      	adds	r7, r4, #4
   33c40:	2105      	movs	r1, #5
   33c42:	4638      	mov	r0, r7
   33c44:	f01b fe05 	bl	4f852 <atomic_test_bit>
   33c48:	2800      	cmp	r0, #0
   33c4a:	d0ee      	beq.n	33c2a <smp_pairing_rsp+0x8e>
	smp->remote_dist &= RECV_KEYS_SC;
   33c4c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
   33c50:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   33c54:	f003 0302 	and.w	r3, r3, #2
   33c58:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		err = smp_pairing_accept_query(conn, rsp);
   33c5c:	4631      	mov	r1, r6
   33c5e:	4640      	mov	r0, r8
   33c60:	f7ff ff70 	bl	33b44 <smp_pairing_accept_query>
		if (err) {
   33c64:	4605      	mov	r5, r0
   33c66:	2800      	cmp	r0, #0
   33c68:	d1e0      	bne.n	33c2c <smp_pairing_rsp+0x90>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33c6a:	7a23      	ldrb	r3, [r4, #8]
   33c6c:	b993      	cbnz	r3, 33c94 <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33c6e:	210f      	movs	r1, #15
   33c70:	4638      	mov	r0, r7
   33c72:	f01b fdee 	bl	4f852 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33c76:	b168      	cbz	r0, 33c94 <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33c78:	4e11      	ldr	r6, [pc, #68]	; (33cc0 <smp_pairing_rsp+0x124>)
   33c7a:	6833      	ldr	r3, [r6, #0]
   33c7c:	b153      	cbz	r3, 33c94 <smp_pairing_rsp+0xf8>
	    bt_auth && bt_auth->pairing_confirm) {
   33c7e:	699b      	ldr	r3, [r3, #24]
   33c80:	b143      	cbz	r3, 33c94 <smp_pairing_rsp+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33c82:	4638      	mov	r0, r7
   33c84:	210a      	movs	r1, #10
   33c86:	f01b ff2a 	bl	4fade <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   33c8a:	6833      	ldr	r3, [r6, #0]
   33c8c:	4640      	mov	r0, r8
   33c8e:	699b      	ldr	r3, [r3, #24]
   33c90:	4798      	blx	r3
		return 0;
   33c92:	e7cb      	b.n	33c2c <smp_pairing_rsp+0x90>
	if (!sc_public_key) {
   33c94:	4b0b      	ldr	r3, [pc, #44]	; (33cc4 <smp_pairing_rsp+0x128>)
   33c96:	681b      	ldr	r3, [r3, #0]
   33c98:	b923      	cbnz	r3, 33ca4 <smp_pairing_rsp+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   33c9a:	2106      	movs	r1, #6
   33c9c:	4638      	mov	r0, r7
   33c9e:	f01b ff1e 	bl	4fade <atomic_set_bit>
		return 0;
   33ca2:	e7c3      	b.n	33c2c <smp_pairing_rsp+0x90>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   33ca4:	4620      	mov	r0, r4
   33ca6:	210c      	movs	r1, #12
   33ca8:	f01b ff19 	bl	4fade <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   33cac:	210b      	movs	r1, #11
   33cae:	f01b fe20 	bl	4f8f2 <atomic_clear_bit>
}
   33cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   33cb6:	f7ff bce7 	b.w	33688 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33cba:	2506      	movs	r5, #6
   33cbc:	e7b6      	b.n	33c2c <smp_pairing_rsp+0x90>
   33cbe:	bf00      	nop
   33cc0:	20004984 	.word	0x20004984
   33cc4:	20004bf8 	.word	0x20004bf8

00033cc8 <smp_pairing_req>:
{
   33cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   33ccc:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33cce:	78f3      	ldrb	r3, [r6, #3]
   33cd0:	3b07      	subs	r3, #7
   33cd2:	2b09      	cmp	r3, #9
{
   33cd4:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33cd6:	f200 80b9 	bhi.w	33e4c <smp_pairing_req+0x184>
	struct bt_conn *conn = smp->chan.chan.conn;
   33cda:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   33cde:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   33ce2:	b15b      	cbz	r3, 33cfc <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   33ce4:	1d27      	adds	r7, r4, #4
   33ce6:	210f      	movs	r1, #15
   33ce8:	4638      	mov	r0, r7
   33cea:	f01b fdb2 	bl	4f852 <atomic_test_bit>
   33cee:	b998      	cbnz	r0, 33d18 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   33cf0:	4620      	mov	r0, r4
   33cf2:	f7ff fbaf 	bl	33454 <smp_init>
		if (ret) {
   33cf6:	b178      	cbz	r0, 33d18 <smp_pairing_req+0x50>
			return ret;
   33cf8:	b2c5      	uxtb	r5, r0
   33cfa:	e00a      	b.n	33d12 <smp_pairing_req+0x4a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   33cfc:	f898 0008 	ldrb.w	r0, [r8, #8]
   33d00:	f108 0188 	add.w	r1, r8, #136	; 0x88
   33d04:	f000 fa34 	bl	34170 <bt_keys_get_addr>
   33d08:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   33d0c:	2800      	cmp	r0, #0
   33d0e:	d1e9      	bne.n	33ce4 <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   33d10:	2508      	movs	r5, #8
}
   33d12:	4628      	mov	r0, r5
   33d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   33d18:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   33d1a:	2206      	movs	r2, #6
   33d1c:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   33d1e:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   33d20:	f104 000a 	add.w	r0, r4, #10
   33d24:	f018 fcc7 	bl	4c6b6 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33d28:	2302      	movs	r3, #2
   33d2a:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   33d2c:	78b0      	ldrb	r0, [r6, #2]
   33d2e:	f7ff fa7b 	bl	33228 <get_auth.constprop.0>
   33d32:	74e0      	strb	r0, [r4, #19]
   33d34:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   33d36:	f7ff f9c9 	bl	330cc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33d3a:	4b45      	ldr	r3, [pc, #276]	; (33e50 <smp_pairing_req+0x188>)
	rsp->io_capability = get_io_capa();
   33d3c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33d3e:	781b      	ldrb	r3, [r3, #0]
   33d40:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   33d42:	2310      	movs	r3, #16
   33d44:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   33d46:	7933      	ldrb	r3, [r6, #4]
   33d48:	f003 0303 	and.w	r3, r3, #3
   33d4c:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   33d4e:	7973      	ldrb	r3, [r6, #5]
   33d50:	f003 0301 	and.w	r3, r3, #1
   33d54:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   33d56:	072b      	lsls	r3, r5, #28
   33d58:	d50c      	bpl.n	33d74 <smp_pairing_req+0xac>
   33d5a:	78b3      	ldrb	r3, [r6, #2]
   33d5c:	071d      	lsls	r5, r3, #28
   33d5e:	d509      	bpl.n	33d74 <smp_pairing_req+0xac>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   33d60:	2105      	movs	r1, #5
   33d62:	4638      	mov	r0, r7
   33d64:	f01b febb 	bl	4fade <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   33d68:	7d63      	ldrb	r3, [r4, #21]
   33d6a:	f003 0302 	and.w	r3, r3, #2
   33d6e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   33d70:	2300      	movs	r3, #0
   33d72:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   33d74:	7ce3      	ldrb	r3, [r4, #19]
   33d76:	0698      	lsls	r0, r3, #26
   33d78:	d506      	bpl.n	33d88 <smp_pairing_req+0xc0>
   33d7a:	78b3      	ldrb	r3, [r6, #2]
   33d7c:	0699      	lsls	r1, r3, #26
   33d7e:	d503      	bpl.n	33d88 <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33d80:	2114      	movs	r1, #20
   33d82:	4638      	mov	r0, r7
   33d84:	f01b feab 	bl	4fade <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   33d88:	7da3      	ldrb	r3, [r4, #22]
   33d8a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   33d8e:	7d63      	ldrb	r3, [r4, #21]
   33d90:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   33d94:	7ce3      	ldrb	r3, [r4, #19]
   33d96:	07da      	lsls	r2, r3, #31
   33d98:	d506      	bpl.n	33da8 <smp_pairing_req+0xe0>
   33d9a:	78b3      	ldrb	r3, [r6, #2]
   33d9c:	07db      	lsls	r3, r3, #31
   33d9e:	d503      	bpl.n	33da8 <smp_pairing_req+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   33da0:	210d      	movs	r1, #13
   33da2:	4638      	mov	r0, r7
   33da4:	f01b fe9b 	bl	4fade <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   33da8:	2103      	movs	r1, #3
   33daa:	4638      	mov	r0, r7
   33dac:	f01b fe97 	bl	4fade <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   33db0:	7831      	ldrb	r1, [r6, #0]
   33db2:	4620      	mov	r0, r4
   33db4:	f7ff f9b0 	bl	33118 <get_pair_method>
   33db8:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   33dba:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   33dbe:	4620      	mov	r0, r4
   33dc0:	f01b fd50 	bl	4f864 <update_keys_check>
   33dc4:	b908      	cbnz	r0, 33dca <smp_pairing_req+0x102>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33dc6:	2503      	movs	r5, #3
   33dc8:	e7a3      	b.n	33d12 <smp_pairing_req+0x4a>
	err = remote_sec_level_reachable(smp);
   33dca:	4620      	mov	r0, r4
   33dcc:	f01b fd6b 	bl	4f8a6 <remote_sec_level_reachable>
	if (err) {
   33dd0:	4605      	mov	r5, r0
   33dd2:	2800      	cmp	r0, #0
   33dd4:	d19d      	bne.n	33d12 <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33dd6:	2105      	movs	r1, #5
   33dd8:	4638      	mov	r0, r7
   33dda:	f01b fd3a 	bl	4f852 <atomic_test_bit>
   33dde:	2800      	cmp	r0, #0
   33de0:	d0f1      	beq.n	33dc6 <smp_pairing_req+0xfe>
		err = smp_pairing_accept_query(conn, req);
   33de2:	4631      	mov	r1, r6
   33de4:	4640      	mov	r0, r8
   33de6:	f7ff fead 	bl	33b44 <smp_pairing_accept_query>
		if (err) {
   33dea:	4605      	mov	r5, r0
   33dec:	2800      	cmp	r0, #0
   33dee:	d190      	bne.n	33d12 <smp_pairing_req+0x4a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33df0:	7a23      	ldrb	r3, [r4, #8]
   33df2:	b993      	cbnz	r3, 33e1a <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33df4:	210f      	movs	r1, #15
   33df6:	4638      	mov	r0, r7
   33df8:	f01b fd2b 	bl	4f852 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33dfc:	b968      	cbnz	r0, 33e1a <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33dfe:	4e15      	ldr	r6, [pc, #84]	; (33e54 <smp_pairing_req+0x18c>)
   33e00:	6833      	ldr	r3, [r6, #0]
   33e02:	b153      	cbz	r3, 33e1a <smp_pairing_req+0x152>
	    bt_auth && bt_auth->pairing_confirm) {
   33e04:	699b      	ldr	r3, [r3, #24]
   33e06:	b143      	cbz	r3, 33e1a <smp_pairing_req+0x152>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33e08:	4638      	mov	r0, r7
   33e0a:	210a      	movs	r1, #10
   33e0c:	f01b fe67 	bl	4fade <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   33e10:	6833      	ldr	r3, [r6, #0]
   33e12:	4640      	mov	r0, r8
   33e14:	699b      	ldr	r3, [r3, #24]
   33e16:	4798      	blx	r3
		return 0;
   33e18:	e77b      	b.n	33d12 <smp_pairing_req+0x4a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   33e1a:	210c      	movs	r1, #12
   33e1c:	4620      	mov	r0, r4
   33e1e:	f01b fe5e 	bl	4fade <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   33e22:	2102      	movs	r1, #2
   33e24:	f01b fe9f 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   33e28:	4606      	mov	r6, r0
   33e2a:	2800      	cmp	r0, #0
   33e2c:	f43f af70 	beq.w	33d10 <smp_pairing_req+0x48>
   33e30:	2106      	movs	r1, #6
   33e32:	3008      	adds	r0, #8
   33e34:	f01c fc68 	bl	50708 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   33e38:	f104 0111 	add.w	r1, r4, #17
   33e3c:	2206      	movs	r2, #6
   33e3e:	f018 fc3a 	bl	4c6b6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   33e42:	4631      	mov	r1, r6
   33e44:	4620      	mov	r0, r4
   33e46:	f01b fdaf 	bl	4f9a8 <smp_send.constprop.0>
	return 0;
   33e4a:	e762      	b.n	33d12 <smp_pairing_req+0x4a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33e4c:	2506      	movs	r5, #6
   33e4e:	e760      	b.n	33d12 <smp_pairing_req+0x4a>
   33e50:	20007788 	.word	0x20007788
   33e54:	20004984 	.word	0x20004984

00033e58 <smp_pairing_complete>:
{
   33e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   33e5a:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   33e5e:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   33e60:	1d07      	adds	r7, r0, #4
	if (!status) {
   33e62:	b9e9      	cbnz	r1, 33ea0 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   33e64:	210d      	movs	r1, #13
   33e66:	4638      	mov	r0, r7
   33e68:	f01b fcf3 	bl	4f852 <atomic_test_bit>
		if (bond_flag) {
   33e6c:	4606      	mov	r6, r0
   33e6e:	b118      	cbz	r0, 33e78 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   33e70:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   33e74:	f000 fabe 	bl	343f4 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   33e78:	4b24      	ldr	r3, [pc, #144]	; (33f0c <smp_pairing_complete+0xb4>)
   33e7a:	681b      	ldr	r3, [r3, #0]
   33e7c:	b123      	cbz	r3, 33e88 <smp_pairing_complete+0x30>
   33e7e:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   33e80:	b113      	cbz	r3, 33e88 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   33e82:	4631      	mov	r1, r6
   33e84:	4620      	mov	r0, r4
   33e86:	4798      	blx	r3
	smp_reset(smp);
   33e88:	4628      	mov	r0, r5
   33e8a:	f01c f870 	bl	4ff6e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   33e8e:	7a62      	ldrb	r2, [r4, #9]
   33e90:	7aa3      	ldrb	r3, [r4, #10]
   33e92:	429a      	cmp	r2, r3
   33e94:	d039      	beq.n	33f0a <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   33e96:	4620      	mov	r0, r4
}
   33e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   33e9c:	f01c b914 	b.w	500c8 <bt_smp_start_security>
	switch (smp_err) {
   33ea0:	3901      	subs	r1, #1
   33ea2:	b2c9      	uxtb	r1, r1
   33ea4:	290e      	cmp	r1, #14
   33ea6:	bf9c      	itt	ls
   33ea8:	4b19      	ldrls	r3, [pc, #100]	; (33f10 <smp_pairing_complete+0xb8>)
   33eaa:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   33eac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   33eb0:	bf88      	it	hi
   33eb2:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   33eb4:	b143      	cbz	r3, 33ec8 <smp_pairing_complete+0x70>
   33eb6:	7b1b      	ldrb	r3, [r3, #12]
   33eb8:	bb03      	cbnz	r3, 33efc <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   33eba:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   33ebe:	f000 fa71 	bl	343a4 <bt_keys_clear>
			conn->le.keys = NULL;
   33ec2:	2300      	movs	r3, #0
   33ec4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33ec8:	2102      	movs	r1, #2
   33eca:	4638      	mov	r0, r7
   33ecc:	f01b fcc1 	bl	4f852 <atomic_test_bit>
   33ed0:	b940      	cbnz	r0, 33ee4 <smp_pairing_complete+0x8c>
	switch (err) {
   33ed2:	2e07      	cmp	r6, #7
   33ed4:	bf96      	itet	ls
   33ed6:	4b0f      	ldrls	r3, [pc, #60]	; (33f14 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33ed8:	211f      	movhi	r1, #31
   33eda:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   33edc:	4632      	mov	r2, r6
   33ede:	4620      	mov	r0, r4
   33ee0:	f7fc fb1c 	bl	3051c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   33ee4:	2103      	movs	r1, #3
   33ee6:	4638      	mov	r0, r7
   33ee8:	f01b fcb3 	bl	4f852 <atomic_test_bit>
   33eec:	2800      	cmp	r0, #0
   33eee:	d0cb      	beq.n	33e88 <smp_pairing_complete+0x30>
   33ef0:	4b06      	ldr	r3, [pc, #24]	; (33f0c <smp_pairing_complete+0xb4>)
   33ef2:	681b      	ldr	r3, [r3, #0]
   33ef4:	2b00      	cmp	r3, #0
   33ef6:	d0c7      	beq.n	33e88 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   33ef8:	6a1b      	ldr	r3, [r3, #32]
   33efa:	e7c1      	b.n	33e80 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   33efc:	2102      	movs	r1, #2
   33efe:	4638      	mov	r0, r7
   33f00:	f01b fca7 	bl	4f852 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   33f04:	2800      	cmp	r0, #0
   33f06:	d1d8      	bne.n	33eba <smp_pairing_complete+0x62>
   33f08:	e7de      	b.n	33ec8 <smp_pairing_complete+0x70>
}
   33f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33f0c:	20004984 	.word	0x20004984
   33f10:	00056ad9 	.word	0x00056ad9
   33f14:	00056af1 	.word	0x00056af1

00033f18 <bt_smp_recv>:
{
   33f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   33f1a:	898b      	ldrh	r3, [r1, #12]
{
   33f1c:	4607      	mov	r7, r0
   33f1e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   33f20:	b393      	cbz	r3, 33f88 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   33f22:	2101      	movs	r1, #1
   33f24:	f105 0008 	add.w	r0, r5, #8
   33f28:	f01c fc1f 	bl	5076a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   33f2c:	2104      	movs	r1, #4
   33f2e:	4606      	mov	r6, r0
   33f30:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   33f34:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   33f38:	f01b fc8b 	bl	4f852 <atomic_test_bit>
   33f3c:	bb20      	cbnz	r0, 33f88 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   33f3e:	7831      	ldrb	r1, [r6, #0]
   33f40:	290e      	cmp	r1, #14
   33f42:	d821      	bhi.n	33f88 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   33f44:	4f11      	ldr	r7, [pc, #68]	; (33f8c <bt_smp_recv+0x74>)
   33f46:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   33f4a:	b923      	cbnz	r3, 33f56 <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   33f4c:	2107      	movs	r1, #7
		smp_error(smp, err);
   33f4e:	4620      	mov	r0, r4
   33f50:	f01c f960 	bl	50214 <smp_error>
   33f54:	e018      	b.n	33f88 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   33f56:	4620      	mov	r0, r4
   33f58:	f01b fff1 	bl	4ff3e <atomic_test_and_clear_bit>
   33f5c:	7833      	ldrb	r3, [r6, #0]
   33f5e:	b918      	cbnz	r0, 33f68 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   33f60:	2b05      	cmp	r3, #5
   33f62:	d011      	beq.n	33f88 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   33f64:	2108      	movs	r1, #8
   33f66:	e7f2      	b.n	33f4e <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   33f68:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   33f6c:	89a9      	ldrh	r1, [r5, #12]
   33f6e:	7912      	ldrb	r2, [r2, #4]
   33f70:	4291      	cmp	r1, r2
   33f72:	d001      	beq.n	33f78 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   33f74:	210a      	movs	r1, #10
   33f76:	e7ea      	b.n	33f4e <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   33f78:	4629      	mov	r1, r5
   33f7a:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   33f7e:	4620      	mov	r0, r4
   33f80:	4798      	blx	r3
	if (err) {
   33f82:	4601      	mov	r1, r0
   33f84:	2800      	cmp	r0, #0
   33f86:	d1e2      	bne.n	33f4e <bt_smp_recv+0x36>
}
   33f88:	2000      	movs	r0, #0
   33f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33f8c:	00055050 	.word	0x00055050

00033f90 <bt_smp_pkey_ready>:
{
   33f90:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   33f92:	4b16      	ldr	r3, [pc, #88]	; (33fec <bt_smp_pkey_ready+0x5c>)
   33f94:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   33f96:	b1f0      	cbz	r0, 33fd6 <bt_smp_pkey_ready+0x46>
	z_impl_k_sem_give(sem);
   33f98:	4815      	ldr	r0, [pc, #84]	; (33ff0 <bt_smp_pkey_ready+0x60>)
   33f9a:	4c16      	ldr	r4, [pc, #88]	; (33ff4 <bt_smp_pkey_ready+0x64>)
   33f9c:	f014 fc88 	bl	488b0 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33fa0:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   33fa2:	2106      	movs	r1, #6
   33fa4:	1d20      	adds	r0, r4, #4
   33fa6:	f01b fc54 	bl	4f852 <atomic_test_bit>
   33faa:	b178      	cbz	r0, 33fcc <bt_smp_pkey_ready+0x3c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   33fac:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33fb0:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   33fb2:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33fb4:	b983      	cbnz	r3, 33fd8 <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
   33fb6:	f7ff fb67 	bl	33688 <sc_send_public_key>
			if (err) {
   33fba:	4601      	mov	r1, r0
   33fbc:	b110      	cbz	r0, 33fc4 <bt_smp_pkey_ready+0x34>
				smp_error(smp, err);
   33fbe:	4620      	mov	r0, r4
   33fc0:	f01c f928 	bl	50214 <smp_error>
			atomic_set_bit(smp->allowed_cmds,
   33fc4:	210c      	movs	r1, #12
   33fc6:	4620      	mov	r0, r4
   33fc8:	f01b fd89 	bl	4fade <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33fcc:	3501      	adds	r5, #1
   33fce:	2d06      	cmp	r5, #6
   33fd0:	f504 7402 	add.w	r4, r4, #520	; 0x208
   33fd4:	d1e5      	bne.n	33fa2 <bt_smp_pkey_ready+0x12>
}
   33fd6:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_periph(smp);
   33fd8:	f7ff fc96 	bl	33908 <smp_public_key_periph>
		if (err) {
   33fdc:	4601      	mov	r1, r0
   33fde:	2800      	cmp	r0, #0
   33fe0:	d0f4      	beq.n	33fcc <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   33fe2:	4620      	mov	r0, r4
   33fe4:	f01c f916 	bl	50214 <smp_error>
   33fe8:	e7f0      	b.n	33fcc <bt_smp_pkey_ready+0x3c>
   33fea:	bf00      	nop
   33fec:	20004bf8 	.word	0x20004bf8
   33ff0:	200014cc 	.word	0x200014cc
   33ff4:	20002840 	.word	0x20002840

00033ff8 <smp_pairing_failed>:
{
   33ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33ffa:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   33ffc:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   34000:	688e      	ldr	r6, [r1, #8]
{
   34002:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   34004:	210a      	movs	r1, #10
   34006:	4628      	mov	r0, r5
   34008:	f01b ff99 	bl	4ff3e <atomic_test_and_clear_bit>
   3400c:	b140      	cbz	r0, 34020 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   3400e:	4b0b      	ldr	r3, [pc, #44]	; (3403c <smp_pairing_failed+0x44>)
   34010:	681b      	ldr	r3, [r3, #0]
   34012:	b963      	cbnz	r3, 3402e <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   34014:	4620      	mov	r0, r4
   34016:	7831      	ldrb	r1, [r6, #0]
   34018:	f7ff ff1e 	bl	33e58 <smp_pairing_complete>
}
   3401c:	2000      	movs	r0, #0
   3401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   34020:	210b      	movs	r1, #11
   34022:	4628      	mov	r0, r5
   34024:	f01b ff8b 	bl	4ff3e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   34028:	2800      	cmp	r0, #0
   3402a:	d1f0      	bne.n	3400e <smp_pairing_failed+0x16>
   3402c:	e7f2      	b.n	34014 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   3402e:	695b      	ldr	r3, [r3, #20]
   34030:	2b00      	cmp	r3, #0
   34032:	d0ef      	beq.n	34014 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   34034:	4638      	mov	r0, r7
   34036:	4798      	blx	r3
   34038:	e7ec      	b.n	34014 <smp_pairing_failed+0x1c>
   3403a:	bf00      	nop
   3403c:	20004984 	.word	0x20004984

00034040 <bt_smp_encrypt_change>:
{
   34040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   34044:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   34046:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   3404a:	4604      	mov	r4, r0
   3404c:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3404e:	4630      	mov	r0, r6
   34050:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   34052:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   34056:	f01b ff72 	bl	4ff3e <atomic_test_and_clear_bit>
   3405a:	2800      	cmp	r0, #0
   3405c:	d05f      	beq.n	3411e <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   3405e:	b1cf      	cbz	r7, 34094 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   34060:	2103      	movs	r1, #3
   34062:	4630      	mov	r0, r6
   34064:	f01b fbf5 	bl	4f852 <atomic_test_bit>
   34068:	2800      	cmp	r0, #0
   3406a:	d058      	beq.n	3411e <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   3406c:	4638      	mov	r0, r7
   3406e:	f7fa fc53 	bl	2e918 <bt_security_err_get>
	switch (auth_err) {
   34072:	3801      	subs	r0, #1
   34074:	b2c0      	uxtb	r0, r0
   34076:	2808      	cmp	r0, #8
   34078:	bf9a      	itte	ls
   3407a:	4b2e      	ldrls	r3, [pc, #184]	; (34134 <bt_smp_encrypt_change+0xf4>)
   3407c:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   3407e:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   34080:	2102      	movs	r1, #2
   34082:	4630      	mov	r0, r6
   34084:	f01b fd2b 	bl	4fade <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   34088:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   3408a:	4628      	mov	r0, r5
}
   3408c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   34090:	f7ff bee2 	b.w	33e58 <smp_pairing_complete>
	if (!conn->encrypt) {
   34094:	f898 300b 	ldrb.w	r3, [r8, #11]
   34098:	2b00      	cmp	r3, #0
   3409a:	d040      	beq.n	3411e <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3409c:	2103      	movs	r1, #3
   3409e:	4630      	mov	r0, r6
   340a0:	f01b fbd7 	bl	4f852 <atomic_test_bit>
   340a4:	b920      	cbnz	r0, 340b0 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   340a6:	4628      	mov	r0, r5
}
   340a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   340ac:	f01b bf5f 	b.w	4ff6e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   340b0:	2105      	movs	r1, #5
   340b2:	4630      	mov	r0, r6
   340b4:	f01b fbcd 	bl	4f852 <atomic_test_bit>
   340b8:	b1b8      	cbz	r0, 340ea <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   340ba:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   340be:	071f      	lsls	r7, r3, #28
   340c0:	d507      	bpl.n	340d2 <bt_smp_encrypt_change+0x92>
   340c2:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   340c6:	0718      	lsls	r0, r3, #28
   340c8:	d503      	bpl.n	340d2 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   340ca:	2111      	movs	r1, #17
   340cc:	4630      	mov	r0, r6
   340ce:	f01b fd06 	bl	4fade <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   340d2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   340d6:	f023 0308 	bic.w	r3, r3, #8
   340da:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   340de:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   340e2:	f023 0308 	bic.w	r3, r3, #8
   340e6:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   340ea:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   340ee:	07d9      	lsls	r1, r3, #31
   340f0:	d517      	bpl.n	34122 <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   340f2:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   340f4:	4628      	mov	r0, r5
   340f6:	f01b fcf2 	bl	4fade <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   340fa:	2102      	movs	r1, #2
   340fc:	4630      	mov	r0, r6
   340fe:	f01b fcee 	bl	4fade <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   34102:	f898 3003 	ldrb.w	r3, [r8, #3]
   34106:	b913      	cbnz	r3, 3410e <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   34108:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3410c:	b93b      	cbnz	r3, 3411e <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
   3410e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   34110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   34114:	b11b      	cbz	r3, 3411e <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   34116:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   3411a:	2900      	cmp	r1, #0
   3411c:	d0b5      	beq.n	3408a <bt_smp_encrypt_change+0x4a>
}
   3411e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   34122:	079a      	lsls	r2, r3, #30
   34124:	d501      	bpl.n	3412a <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   34126:	2108      	movs	r1, #8
   34128:	e7e4      	b.n	340f4 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   3412a:	075b      	lsls	r3, r3, #29
   3412c:	d5e5      	bpl.n	340fa <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   3412e:	210a      	movs	r1, #10
   34130:	e7e0      	b.n	340f4 <bt_smp_encrypt_change+0xb4>
   34132:	bf00      	nop
   34134:	00056ae8 	.word	0x00056ae8

00034138 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   34138:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   3413a:	4b0a      	ldr	r3, [pc, #40]	; (34164 <bt_smp_init+0x2c>)
   3413c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   34140:	f003 0306 	and.w	r3, r3, #6
   34144:	2b06      	cmp	r3, #6
   34146:	4b08      	ldr	r3, [pc, #32]	; (34168 <bt_smp_init+0x30>)
   34148:	bf0c      	ite	eq
   3414a:	2201      	moveq	r2, #1
   3414c:	2200      	movne	r2, #0
   3414e:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   34150:	d104      	bne.n	3415c <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   34152:	4806      	ldr	r0, [pc, #24]	; (3416c <bt_smp_init+0x34>)
   34154:	f7fb fdb8 	bl	2fcc8 <bt_pub_key_gen>
	}

	return smp_self_test();
   34158:	2000      	movs	r0, #0
}
   3415a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   3415c:	f06f 0001 	mvn.w	r0, #1
   34160:	e7fb      	b.n	3415a <bt_smp_init+0x22>
   34162:	bf00      	nop
   34164:	20000040 	.word	0x20000040
   34168:	20007789 	.word	0x20007789
   3416c:	20000a78 	.word	0x20000a78

00034170 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   34170:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   34174:	2500      	movs	r5, #0
   34176:	4e1e      	ldr	r6, [pc, #120]	; (341f0 <bt_keys_get_addr+0x80>)
{
   34178:	4680      	mov	r8, r0
   3417a:	460f      	mov	r7, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   3417c:	2406      	movs	r4, #6

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   3417e:	46a9      	mov	r9, r5
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   34180:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   34184:	4543      	cmp	r3, r8
   34186:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   3418a:	d021      	beq.n	341d0 <bt_keys_get_addr+0x60>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   3418c:	2c06      	cmp	r4, #6
   3418e:	d10b      	bne.n	341a8 <bt_keys_get_addr+0x38>
	return memcmp(a, b, sizeof(*a));
   34190:	2207      	movs	r2, #7
   34192:	4669      	mov	r1, sp
   34194:	4630      	mov	r0, r6
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   34196:	f8cd 9000 	str.w	r9, [sp]
   3419a:	f8cd 9003 	str.w	r9, [sp, #3]
   3419e:	f018 fa79 	bl	4c694 <memcmp>
			first_free_slot = i;
   341a2:	2800      	cmp	r0, #0
   341a4:	bf08      	it	eq
   341a6:	462c      	moveq	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   341a8:	3501      	adds	r5, #1
   341aa:	2d06      	cmp	r5, #6
   341ac:	f106 0640 	add.w	r6, r6, #64	; 0x40
   341b0:	d1e6      	bne.n	34180 <bt_keys_get_addr+0x10>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   341b2:	2c06      	cmp	r4, #6
   341b4:	d019      	beq.n	341ea <bt_keys_get_addr+0x7a>
		keys = &key_pool[first_free_slot];
   341b6:	480f      	ldr	r0, [pc, #60]	; (341f4 <bt_keys_get_addr+0x84>)
   341b8:	01a3      	lsls	r3, r4, #6
	memcpy(dst, src, sizeof(*dst));
   341ba:	2207      	movs	r2, #7
		keys->id = id;
   341bc:	f800 8003 	strb.w	r8, [r0, r3]
		bt_addr_le_copy(&keys->addr, addr);
   341c0:	3301      	adds	r3, #1
		keys = &key_pool[first_free_slot];
   341c2:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   341c6:	4639      	mov	r1, r7
   341c8:	4418      	add	r0, r3
   341ca:	f018 fa74 	bl	4c6b6 <memcpy>
}
   341ce:	e008      	b.n	341e2 <bt_keys_get_addr+0x72>
	return memcmp(a, b, sizeof(*a));
   341d0:	2207      	movs	r2, #7
   341d2:	4639      	mov	r1, r7
   341d4:	4630      	mov	r0, r6
   341d6:	f018 fa5d 	bl	4c694 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   341da:	2800      	cmp	r0, #0
   341dc:	d1d6      	bne.n	3418c <bt_keys_get_addr+0x1c>
		keys = &key_pool[i];
   341de:	4c05      	ldr	r4, [pc, #20]	; (341f4 <bt_keys_get_addr+0x84>)
   341e0:	4454      	add	r4, sl
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   341e2:	4620      	mov	r0, r4
   341e4:	b002      	add	sp, #8
   341e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return NULL;
   341ea:	2400      	movs	r4, #0
   341ec:	e7f9      	b.n	341e2 <bt_keys_get_addr+0x72>
   341ee:	bf00      	nop
   341f0:	20004bfd 	.word	0x20004bfd
   341f4:	20004bfc 	.word	0x20004bfc

000341f8 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   341f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   341fc:	4c0d      	ldr	r4, [pc, #52]	; (34234 <bt_foreach_bond+0x3c>)
   341fe:	4605      	mov	r5, r0
   34200:	460e      	mov	r6, r1
   34202:	4617      	mov	r7, r2
   34204:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   34208:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   3420c:	b15b      	cbz	r3, 34226 <bt_foreach_bond+0x2e>
   3420e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   34212:	42ab      	cmp	r3, r5
   34214:	d107      	bne.n	34226 <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   34216:	4621      	mov	r1, r4
   34218:	2207      	movs	r2, #7
   3421a:	4668      	mov	r0, sp
   3421c:	f018 fa4b 	bl	4c6b6 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   34220:	4639      	mov	r1, r7
   34222:	4668      	mov	r0, sp
   34224:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   34226:	3440      	adds	r4, #64	; 0x40
   34228:	4544      	cmp	r4, r8
   3422a:	d1ed      	bne.n	34208 <bt_foreach_bond+0x10>
		}
	}
}
   3422c:	b002      	add	sp, #8
   3422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34232:	bf00      	nop
   34234:	20004bfd 	.word	0x20004bfd

00034238 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   34238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3423c:	4c08      	ldr	r4, [pc, #32]	; (34260 <bt_keys_foreach+0x28>)
   3423e:	4605      	mov	r5, r0
   34240:	460e      	mov	r6, r1
   34242:	4617      	mov	r7, r2
   34244:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   34248:	89e3      	ldrh	r3, [r4, #14]
   3424a:	422b      	tst	r3, r5
   3424c:	d002      	beq.n	34254 <bt_keys_foreach+0x1c>
			func(&key_pool[i], data);
   3424e:	4639      	mov	r1, r7
   34250:	4620      	mov	r0, r4
   34252:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   34254:	3440      	adds	r4, #64	; 0x40
   34256:	4544      	cmp	r4, r8
   34258:	d1f6      	bne.n	34248 <bt_keys_foreach+0x10>
		}
	}
}
   3425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3425e:	bf00      	nop
   34260:	20004bfc 	.word	0x20004bfc

00034264 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   34264:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   34266:	4903      	ldr	r1, [pc, #12]	; (34274 <keys_commit+0x10>)
   34268:	2200      	movs	r2, #0
   3426a:	2002      	movs	r0, #2
   3426c:	f7ff ffe4 	bl	34238 <bt_keys_foreach>
	}

	return 0;
}
   34270:	2000      	movs	r0, #0
   34272:	bd08      	pop	{r3, pc}
   34274:	00050583 	.word	0x00050583

00034278 <bt_keys_find>:
{
   34278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3427c:	4c0f      	ldr	r4, [pc, #60]	; (342bc <bt_keys_find+0x44>)
   3427e:	4606      	mov	r6, r0
   34280:	460f      	mov	r7, r1
   34282:	4690      	mov	r8, r2
   34284:	2500      	movs	r5, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   34286:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   3428a:	4233      	tst	r3, r6
   3428c:	d00d      	beq.n	342aa <bt_keys_find+0x32>
   3428e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   34292:	42bb      	cmp	r3, r7
   34294:	d109      	bne.n	342aa <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   34296:	2207      	movs	r2, #7
   34298:	4641      	mov	r1, r8
   3429a:	4620      	mov	r0, r4
   3429c:	f018 f9fa 	bl	4c694 <memcmp>
   342a0:	b918      	cbnz	r0, 342aa <bt_keys_find+0x32>
			return &key_pool[i];
   342a2:	4807      	ldr	r0, [pc, #28]	; (342c0 <bt_keys_find+0x48>)
   342a4:	4428      	add	r0, r5
}
   342a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   342aa:	3540      	adds	r5, #64	; 0x40
   342ac:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
   342b0:	f104 0440 	add.w	r4, r4, #64	; 0x40
   342b4:	d1e7      	bne.n	34286 <bt_keys_find+0xe>
	return NULL;
   342b6:	2000      	movs	r0, #0
   342b8:	e7f5      	b.n	342a6 <bt_keys_find+0x2e>
   342ba:	bf00      	nop
   342bc:	20004bfd 	.word	0x20004bfd
   342c0:	20004bfc 	.word	0x20004bfc

000342c4 <bt_keys_find_irk>:
{
   342c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   342c8:	780b      	ldrb	r3, [r1, #0]
   342ca:	2b01      	cmp	r3, #1
   342cc:	4607      	mov	r7, r0
   342ce:	460c      	mov	r4, r1
   342d0:	d002      	beq.n	342d8 <bt_keys_find_irk+0x14>
		return NULL;
   342d2:	2000      	movs	r0, #0
}
   342d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   342d8:	798b      	ldrb	r3, [r1, #6]
   342da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   342de:	2b40      	cmp	r3, #64	; 0x40
   342e0:	d1f7      	bne.n	342d2 <bt_keys_find_irk+0xe>
   342e2:	4d1e      	ldr	r5, [pc, #120]	; (3435c <bt_keys_find_irk+0x98>)
   342e4:	2600      	movs	r6, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   342e6:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   342ea:	f835 3c2c 	ldrh.w	r3, [r5, #-44]
   342ee:	079a      	lsls	r2, r3, #30
   342f0:	d50c      	bpl.n	3430c <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   342f2:	f815 3c3a 	ldrb.w	r3, [r5, #-58]
   342f6:	42bb      	cmp	r3, r7
   342f8:	d108      	bne.n	3430c <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   342fa:	2206      	movs	r2, #6
   342fc:	4629      	mov	r1, r5
   342fe:	4640      	mov	r0, r8
   34300:	f018 f9c8 	bl	4c694 <memcmp>
   34304:	b910      	cbnz	r0, 3430c <bt_keys_find_irk+0x48>
			return &key_pool[i];
   34306:	4816      	ldr	r0, [pc, #88]	; (34360 <bt_keys_find_irk+0x9c>)
   34308:	4430      	add	r0, r6
   3430a:	e7e3      	b.n	342d4 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   3430c:	3640      	adds	r6, #64	; 0x40
   3430e:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
   34312:	f105 0540 	add.w	r5, r5, #64	; 0x40
   34316:	d1e8      	bne.n	342ea <bt_keys_find_irk+0x26>
   34318:	4d12      	ldr	r5, [pc, #72]	; (34364 <bt_keys_find_irk+0xa0>)
   3431a:	2600      	movs	r6, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   3431c:	3401      	adds	r4, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   3431e:	f835 3c1c 	ldrh.w	r3, [r5, #-28]
   34322:	079b      	lsls	r3, r3, #30
   34324:	d512      	bpl.n	3434c <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   34326:	f815 3c2a 	ldrb.w	r3, [r5, #-42]
   3432a:	42bb      	cmp	r3, r7
   3432c:	d10e      	bne.n	3434c <bt_keys_find_irk+0x88>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   3432e:	4621      	mov	r1, r4
   34330:	4628      	mov	r0, r5
   34332:	f018 fa1c 	bl	4c76e <bt_rpa_irk_matches>
   34336:	b148      	cbz	r0, 3434c <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   34338:	4d09      	ldr	r5, [pc, #36]	; (34360 <bt_keys_find_irk+0x9c>)
   3433a:	f106 003a 	add.w	r0, r6, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   3433e:	2206      	movs	r2, #6
   34340:	4621      	mov	r1, r4
   34342:	4428      	add	r0, r5
   34344:	f018 f9b7 	bl	4c6b6 <memcpy>
			return &key_pool[i];
   34348:	19a8      	adds	r0, r5, r6
   3434a:	e7c3      	b.n	342d4 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   3434c:	3640      	adds	r6, #64	; 0x40
   3434e:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
   34352:	f105 0540 	add.w	r5, r5, #64	; 0x40
   34356:	d1e2      	bne.n	3431e <bt_keys_find_irk+0x5a>
   34358:	e7bb      	b.n	342d2 <bt_keys_find_irk+0xe>
   3435a:	bf00      	nop
   3435c:	20004c36 	.word	0x20004c36
   34360:	20004bfc 	.word	0x20004bfc
   34364:	20004c26 	.word	0x20004c26

00034368 <bt_keys_find_addr>:
{
   34368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3436a:	4d0c      	ldr	r5, [pc, #48]	; (3439c <bt_keys_find_addr+0x34>)
   3436c:	4606      	mov	r6, r0
   3436e:	460f      	mov	r7, r1
   34370:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   34372:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   34376:	42b3      	cmp	r3, r6
   34378:	d108      	bne.n	3438c <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   3437a:	2207      	movs	r2, #7
   3437c:	4639      	mov	r1, r7
   3437e:	4628      	mov	r0, r5
   34380:	f018 f988 	bl	4c694 <memcmp>
   34384:	b910      	cbnz	r0, 3438c <bt_keys_find_addr+0x24>
			return &key_pool[i];
   34386:	4806      	ldr	r0, [pc, #24]	; (343a0 <bt_keys_find_addr+0x38>)
   34388:	4420      	add	r0, r4
}
   3438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   3438c:	3440      	adds	r4, #64	; 0x40
   3438e:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   34392:	f105 0540 	add.w	r5, r5, #64	; 0x40
   34396:	d1ec      	bne.n	34372 <bt_keys_find_addr+0xa>
	return NULL;
   34398:	2000      	movs	r0, #0
   3439a:	e7f6      	b.n	3438a <bt_keys_find_addr+0x22>
   3439c:	20004bfd 	.word	0x20004bfd
   343a0:	20004bfc 	.word	0x20004bfc

000343a4 <bt_keys_clear>:
{
   343a4:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   343a6:	7a03      	ldrb	r3, [r0, #8]
   343a8:	075b      	lsls	r3, r3, #29
{
   343aa:	b08c      	sub	sp, #48	; 0x30
   343ac:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   343ae:	d501      	bpl.n	343b4 <bt_keys_clear+0x10>
		bt_id_del(keys);
   343b0:	f7fa fd86 	bl	2eec0 <bt_id_del>
		if (keys->id) {
   343b4:	4625      	mov	r5, r4
   343b6:	f815 2b01 	ldrb.w	r2, [r5], #1
   343ba:	b1b2      	cbz	r2, 343ea <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   343bc:	ae02      	add	r6, sp, #8
   343be:	2104      	movs	r1, #4
   343c0:	4630      	mov	r0, r6
   343c2:	f015 ffbd 	bl	4a340 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   343c6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   343c8:	4a09      	ldr	r2, [pc, #36]	; (343f0 <bt_keys_clear+0x4c>)
   343ca:	462b      	mov	r3, r5
   343cc:	2124      	movs	r1, #36	; 0x24
   343ce:	a803      	add	r0, sp, #12
   343d0:	f7f9 fcb0 	bl	2dd34 <bt_settings_encode_key>
		settings_delete(key);
   343d4:	a803      	add	r0, sp, #12
   343d6:	f016 fe7c 	bl	4b0d2 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   343da:	2240      	movs	r2, #64	; 0x40
   343dc:	2100      	movs	r1, #0
   343de:	4620      	mov	r0, r4
}
   343e0:	b00c      	add	sp, #48	; 0x30
   343e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   343e6:	f018 b971 	b.w	4c6cc <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   343ea:	9200      	str	r2, [sp, #0]
   343ec:	e7ec      	b.n	343c8 <bt_keys_clear+0x24>
   343ee:	bf00      	nop
   343f0:	00056b25 	.word	0x00056b25

000343f4 <bt_keys_store>:
{
   343f4:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   343f6:	4605      	mov	r5, r0
{
   343f8:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   343fa:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   343fe:	4604      	mov	r4, r0
	if (keys->id) {
   34400:	b19a      	cbz	r2, 3442a <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   34402:	ae02      	add	r6, sp, #8
   34404:	2104      	movs	r1, #4
   34406:	4630      	mov	r0, r6
   34408:	f015 ff9a 	bl	4a340 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   3440c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   3440e:	462b      	mov	r3, r5
   34410:	a803      	add	r0, sp, #12
   34412:	4a07      	ldr	r2, [pc, #28]	; (34430 <bt_keys_store+0x3c>)
   34414:	2124      	movs	r1, #36	; 0x24
   34416:	f7f9 fc8d 	bl	2dd34 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   3441a:	2234      	movs	r2, #52	; 0x34
   3441c:	f104 010c 	add.w	r1, r4, #12
   34420:	a803      	add	r0, sp, #12
   34422:	f7f8 faa1 	bl	2c968 <settings_save_one>
}
   34426:	b00c      	add	sp, #48	; 0x30
   34428:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   3442a:	9200      	str	r2, [sp, #0]
   3442c:	e7ef      	b.n	3440e <bt_keys_store+0x1a>
   3442e:	bf00      	nop
   34430:	00056b25 	.word	0x00056b25

00034434 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   34434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34438:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   3443a:	1dc2      	adds	r2, r0, #7
   3443c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   34440:	1e75      	subs	r5, r6, #1
{
   34442:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   34444:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   34446:	6018      	str	r0, [r3, #0]
{
   34448:	b082      	sub	sp, #8
   3444a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   3444c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   3444e:	2100      	movs	r1, #0
   34450:	2204      	movs	r2, #4
   34452:	fb07 0005 	mla	r0, r7, r5, r0
   34456:	f018 f939 	bl	4c6cc <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   3445a:	b1bd      	cbz	r5, 3448c <mem_init+0x58>
   3445c:	3e02      	subs	r6, #2
   3445e:	b2b6      	uxth	r6, r6
   34460:	fb06 7307 	mla	r3, r6, r7, r7
   34464:	fb06 f807 	mul.w	r8, r6, r7
   34468:	441c      	add	r4, r3
   3446a:	eba8 0803 	sub.w	r8, r8, r3
   3446e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   34470:	2204      	movs	r2, #4
   34472:	eb04 0008 	add.w	r0, r4, r8
   34476:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   3447a:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   3447c:	f018 f91b 	bl	4c6b6 <memcpy>
	while (mem_count--) {
   34480:	42b5      	cmp	r5, r6
   34482:	eba4 0407 	sub.w	r4, r4, r7
   34486:	f105 0501 	add.w	r5, r5, #1
   3448a:	d1f1      	bne.n	34470 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   3448c:	b002      	add	sp, #8
   3448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34492:	bf00      	nop

00034494 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   34494:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   34496:	6805      	ldr	r5, [r0, #0]
{
   34498:	b082      	sub	sp, #8
	if (*mem_head) {
   3449a:	b195      	cbz	r5, 344c2 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   3449c:	1deb      	adds	r3, r5, #7
   3449e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   344a2:	2204      	movs	r2, #4
   344a4:	4604      	mov	r4, r0
   344a6:	4629      	mov	r1, r5
   344a8:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   344ac:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   344ae:	f018 f902 	bl	4c6b6 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   344b2:	9b01      	ldr	r3, [sp, #4]
   344b4:	b123      	cbz	r3, 344c0 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   344b6:	1dda      	adds	r2, r3, #7
   344b8:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   344bc:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   344be:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   344c0:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   344c2:	4628      	mov	r0, r5
   344c4:	b002      	add	sp, #8
   344c6:	bd70      	pop	{r4, r5, r6, pc}

000344c8 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   344c8:	680b      	ldr	r3, [r1, #0]
{
   344ca:	b570      	push	{r4, r5, r6, lr}
   344cc:	460c      	mov	r4, r1
   344ce:	4605      	mov	r5, r0
	if (*mem_head) {
   344d0:	b183      	cbz	r3, 344f4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   344d2:	3307      	adds	r3, #7
   344d4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   344d8:	881e      	ldrh	r6, [r3, #0]
   344da:	3601      	adds	r6, #1
   344dc:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   344de:	2204      	movs	r2, #4
   344e0:	4621      	mov	r1, r4
   344e2:	4628      	mov	r0, r5
   344e4:	f018 f8e7 	bl	4c6b6 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   344e8:	1deb      	adds	r3, r5, #7
   344ea:	f023 0303 	bic.w	r3, r3, #3
   344ee:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   344f0:	6025      	str	r5, [r4, #0]
}
   344f2:	bd70      	pop	{r4, r5, r6, pc}
   344f4:	2601      	movs	r6, #1
   344f6:	e7f2      	b.n	344de <mem_release+0x16>

000344f8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   344f8:	fb02 0001 	mla	r0, r2, r1, r0
   344fc:	4770      	bx	lr
   344fe:	bf00      	nop

00034500 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   34500:	1a40      	subs	r0, r0, r1
   34502:	b280      	uxth	r0, r0
}
   34504:	fbb0 f0f2 	udiv	r0, r0, r2
   34508:	4770      	bx	lr
   3450a:	bf00      	nop

0003450c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   3450c:	1e53      	subs	r3, r2, #1
	src += len;
   3450e:	4411      	add	r1, r2
	while (len--) {
   34510:	b29b      	uxth	r3, r3
   34512:	b142      	cbz	r2, 34526 <mem_rcopy+0x1a>
   34514:	43db      	mvns	r3, r3
   34516:	3801      	subs	r0, #1
   34518:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   3451a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   3451e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   34522:	4291      	cmp	r1, r2
   34524:	d1f9      	bne.n	3451a <mem_rcopy+0xe>
	}
}
   34526:	4770      	bx	lr

00034528 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   34528:	4401      	add	r1, r0
   3452a:	e002      	b.n	34532 <mem_nz+0xa>
		if (*src++) {
   3452c:	f810 3b01 	ldrb.w	r3, [r0], #1
   34530:	b91b      	cbnz	r3, 3453a <mem_nz+0x12>
	while (len--) {
   34532:	4288      	cmp	r0, r1
   34534:	d1fa      	bne.n	3452c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   34536:	2000      	movs	r0, #0
   34538:	4770      	bx	lr
			return 1;
   3453a:	2001      	movs	r0, #1
}
   3453c:	4770      	bx	lr
   3453e:	bf00      	nop

00034540 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   34540:	6010      	str	r0, [r2, #0]
   34542:	6008      	str	r0, [r1, #0]

	return link;
}
   34544:	4770      	bx	lr
   34546:	bf00      	nop

00034548 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   34548:	680a      	ldr	r2, [r1, #0]
{
   3454a:	4603      	mov	r3, r0
	if (*head != *tail) {
   3454c:	6800      	ldr	r0, [r0, #0]
   3454e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   34550:	bf05      	ittet	eq
   34552:	2200      	moveq	r2, #0
   34554:	600a      	streq	r2, [r1, #0]
		return NULL;
   34556:	2000      	movne	r0, #0
	*head = *tail = NULL;
   34558:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   3455a:	4770      	bx	lr

0003455c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   3455c:	f8d2 c000 	ldr.w	ip, [r2]
   34560:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   34564:	f8d2 c000 	ldr.w	ip, [r2]
   34568:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   3456c:	6010      	str	r0, [r2, #0]

	return link;
}
   3456e:	4770      	bx	lr

00034570 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   34570:	4288      	cmp	r0, r1
   34572:	d003      	beq.n	3457c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   34574:	b11a      	cbz	r2, 3457e <memq_peek+0xe>
		*mem = head->mem;
   34576:	6843      	ldr	r3, [r0, #4]
   34578:	6013      	str	r3, [r2, #0]
   3457a:	4770      	bx	lr
		return NULL;
   3457c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   3457e:	4770      	bx	lr

00034580 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   34580:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   34582:	4283      	cmp	r3, r0
   34584:	d009      	beq.n	3459a <memq_dequeue+0x1a>
	if (mem) {
   34586:	b12a      	cbz	r2, 34594 <memq_dequeue+0x14>
		*mem = head->mem;
   34588:	6858      	ldr	r0, [r3, #4]
   3458a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   3458c:	681a      	ldr	r2, [r3, #0]
   3458e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   34590:	4618      	mov	r0, r3
   34592:	4770      	bx	lr
	if (old_head == NULL) {
   34594:	2b00      	cmp	r3, #0
   34596:	d1f9      	bne.n	3458c <memq_dequeue+0xc>
   34598:	e7fa      	b.n	34590 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   3459a:	2300      	movs	r3, #0
   3459c:	e7f8      	b.n	34590 <memq_dequeue+0x10>
   3459e:	bf00      	nop

000345a0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   345a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   345a4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 345d8 <mayfly_init+0x38>
   345a8:	4e0c      	ldr	r6, [pc, #48]	; (345dc <mayfly_init+0x3c>)
   345aa:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   345ac:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   345b0:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   345b2:	1d22      	adds	r2, r4, #4
   345b4:	4621      	mov	r1, r4
   345b6:	4628      	mov	r0, r5
		while (caller_id--) {
   345b8:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   345ba:	f7ff ffc1 	bl	34540 <memq_init>
		while (caller_id--) {
   345be:	42b4      	cmp	r4, r6
   345c0:	f1a5 0508 	sub.w	r5, r5, #8
   345c4:	d1f5      	bne.n	345b2 <mayfly_init+0x12>
	while (callee_id--) {
   345c6:	3f04      	subs	r7, #4
   345c8:	1d3b      	adds	r3, r7, #4
   345ca:	f1a8 0820 	sub.w	r8, r8, #32
   345ce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   345d2:	d1eb      	bne.n	345ac <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   345d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   345d8:	20004df4 	.word	0x20004df4
   345dc:	20004e84 	.word	0x20004e84

000345e0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   345e0:	b410      	push	{r4}
   345e2:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   345e4:	4c15      	ldr	r4, [pc, #84]	; (3463c <mayfly_enable+0x5c>)
{
   345e6:	468c      	mov	ip, r1
	if (enable) {
   345e8:	b192      	cbz	r2, 34610 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   345ea:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   345ee:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   345f2:	0100      	lsls	r0, r0, #4
   345f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   345f8:	4421      	add	r1, r4
   345fa:	7a48      	ldrb	r0, [r1, #9]
   345fc:	7a0c      	ldrb	r4, [r1, #8]
   345fe:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   34600:	bf04      	itt	eq
   34602:	3001      	addeq	r0, #1
   34604:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   34606:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   34608:	4661      	mov	r1, ip
   3460a:	4618      	mov	r0, r3
   3460c:	f00f ba76 	b.w	43afc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   34610:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   34614:	0112      	lsls	r2, r2, #4
   34616:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   3461a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3461e:	4423      	add	r3, r4
   34620:	7a9c      	ldrb	r4, [r3, #10]
   34622:	7ada      	ldrb	r2, [r3, #11]
   34624:	42a2      	cmp	r2, r4
   34626:	d001      	beq.n	3462c <mayfly_enable+0x4c>
}
   34628:	bc10      	pop	{r4}
   3462a:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   3462c:	3201      	adds	r2, #1
   3462e:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   34630:	4b03      	ldr	r3, [pc, #12]	; (34640 <mayfly_enable+0x60>)
   34632:	2201      	movs	r2, #1
   34634:	545a      	strb	r2, [r3, r1]
}
   34636:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   34638:	f00f bab6 	b.w	43ba8 <mayfly_pend>
   3463c:	20004e00 	.word	0x20004e00
   34640:	20004dfc 	.word	0x20004dfc

00034644 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   34644:	b570      	push	{r4, r5, r6, lr}
   34646:	b082      	sub	sp, #8
   34648:	4606      	mov	r6, r0
   3464a:	9101      	str	r1, [sp, #4]
   3464c:	461c      	mov	r4, r3
   3464e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   34650:	b32a      	cbz	r2, 3469e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   34652:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   34654:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   34656:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   34658:	f012 0203 	ands.w	r2, r2, #3
   3465c:	d005      	beq.n	3466a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   3465e:	2a01      	cmp	r2, #1
   34660:	d042      	beq.n	346e8 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   34662:	3301      	adds	r3, #1
   34664:	b2db      	uxtb	r3, r3
   34666:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   34668:	e00f      	b.n	3468a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   3466a:	3301      	adds	r3, #1
   3466c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   3466e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   34670:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   34672:	2304      	movs	r3, #4
   34674:	fb11 3105 	smlabb	r1, r1, r5, r3
   34678:	4a1c      	ldr	r2, [pc, #112]	; (346ec <mayfly_enqueue+0xa8>)
   3467a:	6860      	ldr	r0, [r4, #4]
   3467c:	230c      	movs	r3, #12
   3467e:	fb13 1306 	smlabb	r3, r3, r6, r1
   34682:	441a      	add	r2, r3
   34684:	4621      	mov	r1, r4
   34686:	f7ff ff69 	bl	3455c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   3468a:	4b19      	ldr	r3, [pc, #100]	; (346f0 <mayfly_enqueue+0xac>)
   3468c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   3468e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   34690:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   34692:	4629      	mov	r1, r5
   34694:	f00f fa88 	bl	43ba8 <mayfly_pend>

	return 0;
   34698:	2000      	movs	r0, #0
}
   3469a:	b002      	add	sp, #8
   3469c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   3469e:	f00f fa6d 	bl	43b7c <mayfly_prio_is_equal>
   346a2:	2800      	cmp	r0, #0
   346a4:	d0d5      	beq.n	34652 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   346a6:	4629      	mov	r1, r5
   346a8:	4630      	mov	r0, r6
   346aa:	f00f fa47 	bl	43b3c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   346ae:	2800      	cmp	r0, #0
   346b0:	d0cf      	beq.n	34652 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   346b2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   346b6:	0112      	lsls	r2, r2, #4
   346b8:	490c      	ldr	r1, [pc, #48]	; (346ec <mayfly_enqueue+0xa8>)
   346ba:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   346be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   346c2:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   346c4:	7a9a      	ldrb	r2, [r3, #10]
   346c6:	7adb      	ldrb	r3, [r3, #11]
   346c8:	429a      	cmp	r2, r3
   346ca:	d1c2      	bne.n	34652 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   346cc:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   346ce:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   346d0:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   346d2:	0792      	lsls	r2, r2, #30
   346d4:	d002      	beq.n	346dc <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   346d6:	3302      	adds	r3, #2
   346d8:	b2db      	uxtb	r3, r3
   346da:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   346dc:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   346e0:	4798      	blx	r3
		return 0;
   346e2:	2000      	movs	r0, #0
}
   346e4:	b002      	add	sp, #8
   346e6:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   346e8:	4610      	mov	r0, r2
   346ea:	e7d6      	b.n	3469a <mayfly_enqueue+0x56>
   346ec:	20004e00 	.word	0x20004e00
   346f0:	20004dfc 	.word	0x20004dfc

000346f4 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   346f4:	4a50      	ldr	r2, [pc, #320]	; (34838 <mayfly_run+0x144>)
   346f6:	5c13      	ldrb	r3, [r2, r0]
   346f8:	2b00      	cmp	r3, #0
   346fa:	f000 809b 	beq.w	34834 <mayfly_run+0x140>
{
   346fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   34702:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   34704:	4f4d      	ldr	r7, [pc, #308]	; (3483c <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   34706:	5413      	strb	r3, [r2, r0]
{
   34708:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   3470a:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3470c:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   34710:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   34714:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   34718:	9303      	str	r3, [sp, #12]
   3471a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3471e:	f10b 0804 	add.w	r8, fp, #4
   34722:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   34726:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   3472a:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   3472c:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   34730:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   34732:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   34734:	f7ff ff1c 	bl	34570 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   34738:	f107 0624 	add.w	r6, r7, #36	; 0x24
   3473c:	4683      	mov	fp, r0
   3473e:	2800      	cmp	r0, #0
   34740:	d034      	beq.n	347ac <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   34742:	9c05      	ldr	r4, [sp, #20]
   34744:	7863      	ldrb	r3, [r4, #1]
   34746:	7825      	ldrb	r5, [r4, #0]
   34748:	1aed      	subs	r5, r5, r3
   3474a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   3474e:	2d01      	cmp	r5, #1
   34750:	d106      	bne.n	34760 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   34752:	3b01      	subs	r3, #1
   34754:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   34756:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   3475a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   3475c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   3475e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   34760:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   34762:	1ac3      	subs	r3, r0, r3
   34764:	f003 0303 	and.w	r3, r3, #3
   34768:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   3476a:	f04f 0200 	mov.w	r2, #0
   3476e:	4631      	mov	r1, r6
	req = m->_req;
   34770:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   34774:	d00f      	beq.n	34796 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   34776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   34778:	f7ff ff02 	bl	34580 <memq_dequeue>
		ack = m->_ack;
   3477c:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   34780:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   34782:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   34786:	eba3 030c 	sub.w	r3, r3, ip
   3478a:	f003 0303 	and.w	r3, r3, #3
   3478e:	2b01      	cmp	r3, #1
		m->_ack = req;
   34790:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   34794:	d046      	beq.n	34824 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   34796:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   3479a:	aa05      	add	r2, sp, #20
   3479c:	f7ff fee8 	bl	34570 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   347a0:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   347a2:	9000      	str	r0, [sp, #0]
   347a4:	4683      	mov	fp, r0
			if (state == 1U) {
   347a6:	d02b      	beq.n	34800 <mayfly_run+0x10c>
		while (link) {
   347a8:	2800      	cmp	r0, #0
   347aa:	d1ca      	bne.n	34742 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   347ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   347b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   347b4:	429a      	cmp	r2, r3
   347b6:	d003      	beq.n	347c0 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   347b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   347bc:	2301      	movs	r3, #1
   347be:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   347c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   347c4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   347c8:	429a      	cmp	r2, r3
   347ca:	d003      	beq.n	347d4 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   347cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   347d0:	2301      	movs	r3, #1
   347d2:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   347d4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   347d8:	fa5f f989 	uxtb.w	r9, r9
   347dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   347e0:	f1a7 070c 	sub.w	r7, r7, #12
   347e4:	d1a1      	bne.n	3472a <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   347e6:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   347ea:	b1c3      	cbz	r3, 3481e <mayfly_run+0x12a>
   347ec:	9b03      	ldr	r3, [sp, #12]
   347ee:	b9b3      	cbnz	r3, 3481e <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   347f0:	461a      	mov	r2, r3
   347f2:	4651      	mov	r1, sl
   347f4:	4650      	mov	r0, sl
	}
}
   347f6:	b007      	add	sp, #28
   347f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   347fc:	f00f b97e 	b.w	43afc <mayfly_enable_cb>
				if (caller_id || link) {
   34800:	f1b9 0f00 	cmp.w	r9, #0
   34804:	d101      	bne.n	3480a <mayfly_run+0x116>
   34806:	2800      	cmp	r0, #0
   34808:	d0d0      	beq.n	347ac <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   3480a:	f8dd a008 	ldr.w	sl, [sp, #8]
   3480e:	4a0a      	ldr	r2, [pc, #40]	; (34838 <mayfly_run+0x144>)
   34810:	2301      	movs	r3, #1
   34812:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   34816:	4651      	mov	r1, sl
   34818:	4650      	mov	r0, sl
   3481a:	f00f f9c5 	bl	43ba8 <mayfly_pend>
}
   3481e:	b007      	add	sp, #28
   34820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   34824:	4642      	mov	r2, r8
   34826:	4621      	mov	r1, r4
   34828:	4658      	mov	r0, fp
			m->_ack = ack;
   3482a:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3482e:	f7ff fe95 	bl	3455c <memq_enqueue>
   34832:	e7b0      	b.n	34796 <mayfly_run+0xa2>
   34834:	4770      	bx	lr
   34836:	bf00      	nop
   34838:	20004dfc 	.word	0x20004dfc
   3483c:	20004e00 	.word	0x20004e00

00034840 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   34840:	1e4b      	subs	r3, r1, #1
   34842:	b2db      	uxtb	r3, r3
   34844:	b171      	cbz	r1, 34864 <util_ones_count_get+0x24>
   34846:	1e41      	subs	r1, r0, #1
   34848:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   3484c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   3484e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   34852:	b123      	cbz	r3, 3485e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   34854:	1e5a      	subs	r2, r3, #1
			one_count++;
   34856:	3001      	adds	r0, #1
		while (bite) {
   34858:	4013      	ands	r3, r2
			one_count++;
   3485a:	b2c0      	uxtb	r0, r0
		while (bite) {
   3485c:	d1fa      	bne.n	34854 <util_ones_count_get+0x14>
	while (octets_len--) {
   3485e:	4561      	cmp	r1, ip
   34860:	d1f5      	bne.n	3484e <util_ones_count_get+0xe>
   34862:	4770      	bx	lr
	uint8_t one_count = 0U;
   34864:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   34866:	4770      	bx	lr

00034868 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   34868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   3486c:	4d48      	ldr	r5, [pc, #288]	; (34990 <util_aa_le32+0x128>)
{
   3486e:	b083      	sub	sp, #12
   34870:	4607      	mov	r7, r0
   34872:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   34874:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   34876:	2104      	movs	r1, #4
   34878:	4638      	mov	r0, r7
   3487a:	f00c f925 	bl	40ac8 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   3487e:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   34880:	231e      	movs	r3, #30
   34882:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   34886:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   3488a:	f04f 0901 	mov.w	r9, #1
   3488e:	e00c      	b.n	348aa <util_aa_le32+0x42>
			transitions++;
   34890:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   34894:	2b1b      	cmp	r3, #27
			transitions++;
   34896:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   34898:	d967      	bls.n	3496a <util_aa_le32+0x102>
				consecutive_cnt = 1U;
   3489a:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   3489e:	2919      	cmp	r1, #25
   348a0:	d04e      	beq.n	34940 <util_aa_le32+0xd8>
   348a2:	468e      	mov	lr, r1
   348a4:	4694      	mov	ip, r2
	while (bit_idx--) {
   348a6:	3b01      	subs	r3, #1
   348a8:	d31e      	bcc.n	348e8 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   348aa:	fa20 f203 	lsr.w	r2, r0, r3
   348ae:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   348b2:	4594      	cmp	ip, r2
   348b4:	d1ec      	bne.n	34890 <util_aa_le32+0x28>
			consecutive_cnt++;
   348b6:	f109 0801 	add.w	r8, r9, #1
   348ba:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   348be:	f1b8 0f06 	cmp.w	r8, #6
   348c2:	d90d      	bls.n	348e0 <util_aa_le32+0x78>
   348c4:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
   348c6:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
   348ca:	b3a2      	cbz	r2, 34936 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   348cc:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   348d0:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   348d4:	4571      	cmp	r1, lr
   348d6:	d1e6      	bne.n	348a6 <util_aa_le32+0x3e>
				transitions++;
   348d8:	3101      	adds	r1, #1
   348da:	b2c9      	uxtb	r1, r1
   348dc:	4662      	mov	r2, ip
   348de:	e7dc      	b.n	3489a <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   348e0:	d149      	bne.n	34976 <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   348e2:	46c1      	mov	r9, r8
	while (bit_idx--) {
   348e4:	3b01      	subs	r3, #1
   348e6:	d2e0      	bcs.n	348aa <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   348e8:	ea80 0305 	eor.w	r3, r0, r5
   348ec:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   348ee:	f10d 0c04 	add.w	ip, sp, #4
   348f2:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   348f6:	2200      	movs	r2, #0
		bite = *octets;
   348f8:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   348fc:	b123      	cbz	r3, 34908 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   348fe:	1e59      	subs	r1, r3, #1
			one_count++;
   34900:	3201      	adds	r2, #1
		while (bite) {
   34902:	400b      	ands	r3, r1
			one_count++;
   34904:	b2d2      	uxtb	r2, r2
		while (bite) {
   34906:	d1fa      	bne.n	348fe <util_aa_le32+0x96>
	while (octets_len--) {
   34908:	45e6      	cmp	lr, ip
   3490a:	d1f5      	bne.n	348f8 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   3490c:	2a01      	cmp	r2, #1
   3490e:	d909      	bls.n	34924 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   34910:	b283      	uxth	r3, r0
   34912:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   34916:	ea4f 4210 	mov.w	r2, r0, lsr #16
   3491a:	d11b      	bne.n	34954 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   3491c:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   3491e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   34922:	d117      	bne.n	34954 <util_aa_le32+0xec>
	if (!retry) {
   34924:	3e01      	subs	r6, #1
   34926:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   3492a:	d1a4      	bne.n	34876 <util_aa_le32+0xe>
		return -EFAULT;
   3492c:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   34930:	b003      	add	sp, #12
   34932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   34936:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   3493a:	f04f 0c01 	mov.w	ip, #1
   3493e:	e7c9      	b.n	348d4 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   34940:	3301      	adds	r3, #1
   34942:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   34946:	b112      	cbz	r2, 3494e <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
   34948:	425b      	negs	r3, r3
   3494a:	4018      	ands	r0, r3
   3494c:	e7cc      	b.n	348e8 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   3494e:	3b01      	subs	r3, #1
   34950:	4318      	orrs	r0, r3
   34952:	e7c9      	b.n	348e8 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   34954:	f3c0 2107 	ubfx	r1, r0, #8, #8
   34958:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   3495a:	7038      	strb	r0, [r7, #0]
	return 0;
   3495c:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   3495e:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   34960:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   34962:	70fb      	strb	r3, [r7, #3]
}
   34964:	b003      	add	sp, #12
   34966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   3496a:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   3496e:	2901      	cmp	r1, #1
   34970:	d9a9      	bls.n	348c6 <util_aa_le32+0x5e>
   34972:	46c1      	mov	r9, r8
   34974:	e793      	b.n	3489e <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   34976:	2b1c      	cmp	r3, #28
   34978:	d904      	bls.n	34984 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   3497a:	2b1b      	cmp	r3, #27
   3497c:	d906      	bls.n	3498c <util_aa_le32+0x124>
   3497e:	4694      	mov	ip, r2
   34980:	46c1      	mov	r9, r8
   34982:	e7af      	b.n	348e4 <util_aa_le32+0x7c>
   34984:	f1be 0f00 	cmp.w	lr, #0
   34988:	d09c      	beq.n	348c4 <util_aa_le32+0x5c>
   3498a:	e7f6      	b.n	3497a <util_aa_le32+0x112>
   3498c:	4671      	mov	r1, lr
   3498e:	e7ee      	b.n	3496e <util_aa_le32+0x106>
   34990:	8e89bed6 	.word	0x8e89bed6

00034994 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   34994:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   34996:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   34998:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   3499a:	2bff      	cmp	r3, #255	; 0xff
   3499c:	d014      	beq.n	349c8 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   3499e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   349a2:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   349a4:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   349a8:	d028      	beq.n	349fc <ticker_dequeue+0x68>
	total = 0U;
   349aa:	f04f 0c00 	mov.w	ip, #0
   349ae:	e001      	b.n	349b4 <ticker_dequeue+0x20>
		if (current == id) {
   349b0:	4299      	cmp	r1, r3
   349b2:	d00b      	beq.n	349cc <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   349b4:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   349b6:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   349b8:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   349ba:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   349bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   349c0:	44a4      	add	ip, r4
		ticker_current = &node[current];
   349c2:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   349c6:	d1f3      	bne.n	349b0 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   349c8:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   349ca:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   349cc:	4571      	cmp	r1, lr
   349ce:	d018      	beq.n	34a02 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   349d0:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   349d2:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   349d4:	fa0f fe8e 	sxth.w	lr, lr
   349d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   349dc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   349e0:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   349e4:	7813      	ldrb	r3, [r2, #0]
   349e6:	2bff      	cmp	r3, #255	; 0xff
   349e8:	d006      	beq.n	349f8 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   349ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   349ee:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   349f2:	68ab      	ldr	r3, [r5, #8]
   349f4:	4403      	add	r3, r0
   349f6:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   349f8:	4460      	add	r0, ip
}
   349fa:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   349fc:	469e      	mov	lr, r3
	total = 0U;
   349fe:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   34a02:	7813      	ldrb	r3, [r2, #0]
   34a04:	7743      	strb	r3, [r0, #29]
   34a06:	e7e4      	b.n	349d2 <ticker_dequeue+0x3e>

00034a08 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   34a08:	eba2 0c01 	sub.w	ip, r2, r1
   34a0c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   34a10:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   34a12:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   34a14:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   34a16:	d10a      	bne.n	34a2e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a18:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   34a1c:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   34a1e:	42a3      	cmp	r3, r4
   34a20:	d914      	bls.n	34a4c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   34a22:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   34a24:	2100      	movs	r1, #0
}
   34a26:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   34a28:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   34a2a:	6141      	str	r1, [r0, #20]
}
   34a2c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a2e:	1a89      	subs	r1, r1, r2
   34a30:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   34a34:	428b      	cmp	r3, r1
   34a36:	d806      	bhi.n	34a46 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   34a38:	4421      	add	r1, r4
   34a3a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   34a3c:	2300      	movs	r3, #0
}
   34a3e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   34a40:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   34a42:	6141      	str	r1, [r0, #20]
}
   34a44:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   34a46:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   34a48:	42a3      	cmp	r3, r4
   34a4a:	d8ea      	bhi.n	34a22 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   34a4c:	1ae1      	subs	r1, r4, r3
   34a4e:	e7f5      	b.n	34a3c <ticks_to_expire_prep+0x34>

00034a50 <ticker_job_list_insert>:
{
   34a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a54:	b087      	sub	sp, #28
   34a56:	4603      	mov	r3, r0
	count_user = instance->count_user;
   34a58:	7a42      	ldrb	r2, [r0, #9]
{
   34a5a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   34a5c:	6800      	ldr	r0, [r0, #0]
   34a5e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   34a60:	6858      	ldr	r0, [r3, #4]
   34a62:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   34a64:	2a00      	cmp	r2, #0
   34a66:	f000 80f4 	beq.w	34c52 <ticker_job_list_insert+0x202>
   34a6a:	1e53      	subs	r3, r2, #1
   34a6c:	b2db      	uxtb	r3, r3
   34a6e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   34a72:	460f      	mov	r7, r1
   34a74:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   34a76:	9b03      	ldr	r3, [sp, #12]
   34a78:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   34a7a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   34a7c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   34a7e:	2fff      	cmp	r7, #255	; 0xff
   34a80:	d05e      	beq.n	34b40 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   34a82:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   34a86:	9b02      	ldr	r3, [sp, #8]
   34a88:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   34a8c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   34a8e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   34a92:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   34a96:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   34a98:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   34a9a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   34a9e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   34aa2:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   34aa6:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   34aa8:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34aac:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   34aae:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34ab2:	d10f      	bne.n	34ad4 <ticker_job_list_insert+0x84>
   34ab4:	e0c8      	b.n	34c48 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   34ab6:	1a09      	subs	r1, r1, r0
   34ab8:	d106      	bne.n	34ac8 <ticker_job_list_insert+0x78>
   34aba:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   34abe:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   34ac2:	45e2      	cmp	sl, ip
   34ac4:	f200 8086 	bhi.w	34bd4 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   34ac8:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34acc:	2bff      	cmp	r3, #255	; 0xff
   34ace:	4691      	mov	r9, r2
   34ad0:	d072      	beq.n	34bb8 <ticker_job_list_insert+0x168>
   34ad2:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   34ad4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   34ad8:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   34adc:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   34ade:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34ae2:	4288      	cmp	r0, r1
   34ae4:	d9e7      	bls.n	34ab6 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   34ae6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   34aea:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   34aee:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   34af2:	d166      	bne.n	34bc2 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   34af4:	9b01      	ldr	r3, [sp, #4]
   34af6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   34afa:	2aff      	cmp	r2, #255	; 0xff
   34afc:	d008      	beq.n	34b10 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   34afe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34b02:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   34b06:	f8de 3008 	ldr.w	r3, [lr, #8]
   34b0a:	1a5b      	subs	r3, r3, r1
   34b0c:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   34b10:	78a3      	ldrb	r3, [r4, #2]
   34b12:	3301      	adds	r3, #1
   34b14:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   34b16:	2d00      	cmp	r5, #0
   34b18:	d0b1      	beq.n	34a7e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34b1a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   34b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34b20:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   34b22:	2200      	movs	r2, #0
   34b24:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   34b26:	b113      	cbz	r3, 34b2e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34b28:	6b29      	ldr	r1, [r5, #48]	; 0x30
   34b2a:	4610      	mov	r0, r2
   34b2c:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34b2e:	6863      	ldr	r3, [r4, #4]
   34b30:	2b00      	cmp	r3, #0
   34b32:	d1a4      	bne.n	34a7e <ticker_job_list_insert+0x2e>
					ticker->op_context =
   34b34:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   34b38:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   34b3a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   34b3e:	d1a0      	bne.n	34a82 <ticker_job_list_insert+0x32>
   34b40:	9b03      	ldr	r3, [sp, #12]
   34b42:	7898      	ldrb	r0, [r3, #2]
   34b44:	42b0      	cmp	r0, r6
   34b46:	d02f      	beq.n	34ba8 <ticker_job_list_insert+0x158>
   34b48:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   34b4c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   34b50:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   34b54:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34b58:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   34b5c:	3601      	adds	r6, #1
   34b5e:	b2f6      	uxtb	r6, r6
					first = 0U;
   34b60:	42b1      	cmp	r1, r6
   34b62:	bf08      	it	eq
   34b64:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34b66:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   34b68:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34b6c:	d11a      	bne.n	34ba4 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   34b6e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   34b72:	9902      	ldr	r1, [sp, #8]
   34b74:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   34b78:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   34b7c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   34b80:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   34b82:	7863      	ldrb	r3, [r4, #1]
   34b84:	1a5b      	subs	r3, r3, r1
   34b86:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   34b8a:	d025      	beq.n	34bd8 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34b8c:	f04f 0300 	mov.w	r3, #0
   34b90:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   34b94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34b96:	2001      	movs	r0, #1
	user_op->status = status;
   34b98:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   34b9a:	b10b      	cbz	r3, 34ba0 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34b9c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   34b9e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   34ba0:	f89b 0002 	ldrb.w	r0, [fp, #2]
   34ba4:	42b0      	cmp	r0, r6
   34ba6:	d1d1      	bne.n	34b4c <ticker_job_list_insert+0xfc>
	while (count_user--) {
   34ba8:	9a03      	ldr	r2, [sp, #12]
   34baa:	9905      	ldr	r1, [sp, #20]
   34bac:	4291      	cmp	r1, r2
   34bae:	f1a2 0308 	sub.w	r3, r2, #8
   34bb2:	d04e      	beq.n	34c52 <ticker_job_list_insert+0x202>
   34bb4:	9303      	str	r3, [sp, #12]
   34bb6:	e75e      	b.n	34a76 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   34bb8:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   34bbc:	f88b 3000 	strb.w	r3, [fp]
   34bc0:	461a      	mov	r2, r3
		node[previous].next = id;
   34bc2:	fa0f f989 	sxth.w	r9, r9
   34bc6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   34bca:	ea4f 1909 	mov.w	r9, r9, lsl #4
   34bce:	f80e 8009 	strb.w	r8, [lr, r9]
   34bd2:	e792      	b.n	34afa <ticker_job_list_insert+0xaa>
   34bd4:	4601      	mov	r1, r0
   34bd6:	e786      	b.n	34ae6 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34bd8:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   34bda:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   34bdc:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   34be0:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   34be2:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34be6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   34bea:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   34bec:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   34bf0:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   34bf4:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34bf8:	d024      	beq.n	34c44 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   34bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34bfe:	1ad3      	subs	r3, r2, r3
   34c00:	fab3 f383 	clz	r3, r3
   34c04:	095b      	lsrs	r3, r3, #5
   34c06:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   34c0a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   34c0e:	429a      	cmp	r2, r3
   34c10:	bf88      	it	hi
   34c12:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   34c14:	69ab      	ldr	r3, [r5, #24]
   34c16:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   34c18:	69eb      	ldr	r3, [r5, #28]
   34c1a:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   34c1c:	6a2b      	ldr	r3, [r5, #32]
   34c1e:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   34c20:	68ab      	ldr	r3, [r5, #8]
   34c22:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   34c24:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   34c26:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   34c28:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   34c2a:	686a      	ldr	r2, [r5, #4]
   34c2c:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   34c2e:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   34c30:	f7ff feea 	bl	34a08 <ticks_to_expire_prep>
	ticker->force = 1U;
   34c34:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   34c38:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   34c3c:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   34c40:	70e3      	strb	r3, [r4, #3]
}
   34c42:	e729      	b.n	34a98 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   34c44:	461a      	mov	r2, r3
   34c46:	e7e5      	b.n	34c14 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   34c48:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   34c4c:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   34c50:	e75e      	b.n	34b10 <ticker_job_list_insert+0xc0>
}
   34c52:	b007      	add	sp, #28
   34c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00034c58 <ticker_worker>:
{
   34c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   34c5c:	7f82      	ldrb	r2, [r0, #30]
{
   34c5e:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   34c60:	2301      	movs	r3, #1
	if (instance->job_guard) {
   34c62:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   34c64:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   34c66:	2a00      	cmp	r2, #0
   34c68:	d15b      	bne.n	34d22 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   34c6a:	7f43      	ldrb	r3, [r0, #29]
   34c6c:	2bff      	cmp	r3, #255	; 0xff
   34c6e:	4681      	mov	r9, r0
   34c70:	d056      	beq.n	34d20 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   34c72:	f00e fa41 	bl	430f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34c76:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34c7a:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   34c7e:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34c82:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34c84:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34c86:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34c8a:	f000 813c 	beq.w	34f06 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   34c8e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   34c92:	42bb      	cmp	r3, r7
   34c94:	bf94      	ite	ls
   34c96:	2300      	movls	r3, #0
   34c98:	2301      	movhi	r3, #1
   34c9a:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   34c9c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   34ca0:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   34ca4:	f000 8145 	beq.w	34f32 <ticker_worker+0x2da>
	ticks_expired = 0U;
   34ca8:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   34cac:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   34cb0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   34cb4:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   34cb8:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   34cbc:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   34cbe:	42bb      	cmp	r3, r7
   34cc0:	d837      	bhi.n	34d32 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34cc2:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   34cc4:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   34cc8:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   34cca:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34ccc:	7863      	ldrb	r3, [r4, #1]
   34cce:	1a5b      	subs	r3, r3, r1
   34cd0:	b2db      	uxtb	r3, r3
   34cd2:	2b01      	cmp	r3, #1
   34cd4:	d12a      	bne.n	34d2c <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   34cd6:	69a6      	ldr	r6, [r4, #24]
   34cd8:	2e00      	cmp	r6, #0
   34cda:	d054      	beq.n	34d86 <ticker_worker+0x12e>
   34cdc:	9b03      	ldr	r3, [sp, #12]
   34cde:	2b00      	cmp	r3, #0
   34ce0:	d04c      	beq.n	34d7c <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   34ce2:	8be3      	ldrh	r3, [r4, #30]
   34ce4:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   34ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   34ce8:	b13b      	cbz	r3, 34cfa <ticker_worker+0xa2>
   34cea:	681a      	ldr	r2, [r3, #0]
   34cec:	b11a      	cbz	r2, 34cf6 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   34cee:	7a1a      	ldrb	r2, [r3, #8]
   34cf0:	2a00      	cmp	r2, #0
   34cf2:	f000 80ef 	beq.w	34ed4 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   34cf6:	2200      	movs	r2, #0
   34cf8:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   34cfa:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   34cfc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   34d00:	3201      	adds	r2, #1
   34d02:	b292      	uxth	r2, r2
   34d04:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   34d06:	b178      	cbz	r0, 34d28 <ticker_worker+0xd0>
   34d08:	8ba0      	ldrh	r0, [r4, #28]
   34d0a:	4290      	cmp	r0, r2
   34d0c:	d20c      	bcs.n	34d28 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   34d0e:	2b00      	cmp	r3, #0
   34d10:	f000 80fc 	beq.w	34f0c <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   34d14:	7a1a      	ldrb	r2, [r3, #8]
   34d16:	2a01      	cmp	r2, #1
   34d18:	d006      	beq.n	34d28 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   34d1a:	f04f 0c01 	mov.w	ip, #1
   34d1e:	e036      	b.n	34d8e <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   34d20:	77c2      	strb	r2, [r0, #31]
}
   34d22:	b00f      	add	sp, #60	; 0x3c
   34d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   34d28:	3901      	subs	r1, #1
   34d2a:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   34d2c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   34d30:	d1be      	bne.n	34cb0 <ticker_worker+0x58>
   34d32:	f8dd 9010 	ldr.w	r9, [sp, #16]
   34d36:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   34d38:	f899 300b 	ldrb.w	r3, [r9, #11]
   34d3c:	f899 200a 	ldrb.w	r2, [r9, #10]
   34d40:	429a      	cmp	r2, r3
   34d42:	d10a      	bne.n	34d5a <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   34d44:	3201      	adds	r2, #1
   34d46:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   34d48:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   34d4a:	bf1c      	itt	ne
   34d4c:	4613      	movne	r3, r2
   34d4e:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   34d50:	9a06      	ldr	r2, [sp, #24]
   34d52:	f889 200b 	strb.w	r2, [r9, #11]
   34d56:	bf08      	it	eq
   34d58:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   34d5a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   34d5e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   34d62:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   34d64:	2200      	movs	r2, #0
   34d66:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   34d6a:	464b      	mov	r3, r9
   34d6c:	2201      	movs	r2, #1
   34d6e:	2104      	movs	r1, #4
   34d70:	2003      	movs	r0, #3
   34d72:	46a4      	mov	ip, r4
}
   34d74:	b00f      	add	sp, #60	; 0x3c
   34d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   34d7a:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   34d7c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   34d80:	9307      	str	r3, [sp, #28]
   34d82:	3380      	adds	r3, #128	; 0x80
   34d84:	d141      	bne.n	34e0a <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   34d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34d88:	b1f3      	cbz	r3, 34dc8 <ticker_worker+0x170>
   34d8a:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   34d8e:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   34d90:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   34d92:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34d94:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   34d96:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   34d98:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   34d9a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   34d9c:	2d00      	cmp	r5, #0
   34d9e:	d0c5      	beq.n	34d2c <ticker_worker+0xd4>
					   ticks_expired -
   34da0:	9b04      	ldr	r3, [sp, #16]
   34da2:	6960      	ldr	r0, [r4, #20]
   34da4:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   34da6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34da8:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   34daa:	ebaa 0000 	sub.w	r0, sl, r0
   34dae:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   34db0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   34db4:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   34db6:	f1bc 0f00 	cmp.w	ip, #0
   34dba:	d016      	beq.n	34dea <ticker_worker+0x192>
   34dbc:	e9cd 3600 	strd	r3, r6, [sp]
   34dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34dc4:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34dc6:	e7b1      	b.n	34d2c <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   34dc8:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34dca:	3901      	subs	r1, #1
   34dcc:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   34dce:	2d00      	cmp	r5, #0
   34dd0:	d0ac      	beq.n	34d2c <ticker_worker+0xd4>
			ticks_drift = 0U;
   34dd2:	4619      	mov	r1, r3
					   ticks_expired -
   34dd4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   34dd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34dd8:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   34dda:	ebaa 0003 	sub.w	r0, sl, r3
   34dde:	9b04      	ldr	r3, [sp, #16]
   34de0:	695b      	ldr	r3, [r3, #20]
   34de2:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   34de4:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   34de6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34dea:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   34dee:	e9cd 3600 	strd	r3, r6, [sp]
   34df2:	4663      	mov	r3, ip
   34df4:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   34df6:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   34df8:	2b00      	cmp	r3, #0
   34dfa:	9b03      	ldr	r3, [sp, #12]
   34dfc:	bf18      	it	ne
   34dfe:	2301      	movne	r3, #1
   34e00:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   34e02:	2300      	movs	r3, #0
   34e04:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   34e06:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   34e08:	e790      	b.n	34d2c <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   34e0a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   34e0e:	d0ba      	beq.n	34d86 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   34e10:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   34e12:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   34e14:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   34e16:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   34e18:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   34e1a:	bf28      	it	cs
   34e1c:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   34e1e:	fb02 5005 	mla	r0, r2, r5, r5
   34e22:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   34e24:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   34e26:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   34e2a:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   34e2c:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   34e30:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   34e32:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   34e34:	46a0      	mov	r8, r4
   34e36:	f04f 0c00 	mov.w	ip, #0
   34e3a:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   34e3c:	b21b      	sxth	r3, r3
   34e3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34e42:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   34e46:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   34e48:	f8d2 e008 	ldr.w	lr, [r2, #8]
   34e4c:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   34e4e:	4566      	cmp	r6, ip
   34e50:	d339      	bcc.n	34ec6 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   34e52:	6991      	ldr	r1, [r2, #24]
   34e54:	b399      	cbz	r1, 34ebe <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   34e56:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   34e58:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   34e5a:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   34e5e:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   34e62:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   34e64:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   34e66:	bf28      	it	cs
   34e68:	1a0d      	subcs	r5, r1, r0
					  0U :
   34e6a:	f1b9 0f00 	cmp.w	r9, #0
   34e6e:	d03e      	beq.n	34eee <ticker_worker+0x296>
   34e70:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   34e74:	b3bc      	cbz	r4, 34ee6 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   34e76:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   34e7a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   34e7e:	45f1      	cmp	r9, lr
   34e80:	bf8c      	ite	hi
   34e82:	f04f 0e01 	movhi.w	lr, #1
   34e86:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   34e8a:	bf34      	ite	cc
   34e8c:	f04f 0901 	movcc.w	r9, #1
   34e90:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   34e94:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   34e96:	f892 a003 	ldrb.w	sl, [r2, #3]
   34e9a:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   34e9e:	d30e      	bcc.n	34ebe <ticker_worker+0x266>
   34ea0:	4592      	cmp	sl, r2
   34ea2:	d829      	bhi.n	34ef8 <ticker_worker+0x2a0>
			    (next_force ||
   34ea4:	f117 0f80 	cmn.w	r7, #128	; 0x80
   34ea8:	d026      	beq.n	34ef8 <ticker_worker+0x2a0>
			     next_is_critical ||
   34eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   34eac:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   34eae:	4295      	cmp	r5, r2
   34eb0:	dd02      	ble.n	34eb8 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   34eb2:	f1be 0f00 	cmp.w	lr, #0
   34eb6:	d01f      	beq.n	34ef8 <ticker_worker+0x2a0>
   34eb8:	9a07      	ldr	r2, [sp, #28]
   34eba:	42ba      	cmp	r2, r7
   34ebc:	d019      	beq.n	34ef2 <ticker_worker+0x29a>
			id_head = ticker_next->next;
   34ebe:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   34ec2:	2bff      	cmp	r3, #255	; 0xff
   34ec4:	d1ba      	bne.n	34e3c <ticker_worker+0x1e4>
   34ec6:	4644      	mov	r4, r8
   34ec8:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   34ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
   34ece:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   34ed2:	e758      	b.n	34d86 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   34ed4:	8ba2      	ldrh	r2, [r4, #28]
   34ed6:	9805      	ldr	r0, [sp, #20]
   34ed8:	4282      	cmp	r2, r0
   34eda:	f63f af0c 	bhi.w	34cf6 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   34ede:	f04f 0201 	mov.w	r2, #1
   34ee2:	721a      	strb	r2, [r3, #8]
   34ee4:	e709      	b.n	34cfa <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   34ee6:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   34eea:	46a1      	mov	r9, r4
   34eec:	e7d2      	b.n	34e94 <ticker_worker+0x23c>
					  0U :
   34eee:	46ce      	mov	lr, r9
   34ef0:	e7c0      	b.n	34e74 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   34ef2:	f1b9 0f00 	cmp.w	r9, #0
   34ef6:	d0e2      	beq.n	34ebe <ticker_worker+0x266>
   34ef8:	4644      	mov	r4, r8
   34efa:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   34efe:	990a      	ldr	r1, [sp, #40]	; 0x28
   34f00:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   34f04:	e6ef      	b.n	34ce6 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   34f06:	9b06      	ldr	r3, [sp, #24]
   34f08:	9303      	str	r3, [sp, #12]
   34f0a:	e6c7      	b.n	34c9c <ticker_worker+0x44>
		if (ticker->timeout_func) {
   34f0c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34f0e:	3901      	subs	r1, #1
   34f10:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   34f12:	2d00      	cmp	r5, #0
   34f14:	f43f af0a 	beq.w	34d2c <ticker_worker+0xd4>
			ticks_drift = 0U;
   34f18:	4619      	mov	r1, r3
					   ticks_expired -
   34f1a:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   34f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34f1e:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   34f20:	ebaa 0003 	sub.w	r0, sl, r3
   34f24:	9b04      	ldr	r3, [sp, #16]
   34f26:	695b      	ldr	r3, [r3, #20]
   34f28:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   34f2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   34f2e:	78e3      	ldrb	r3, [r4, #3]
   34f30:	e744      	b.n	34dbc <ticker_worker+0x164>
	ticks_expired = 0U;
   34f32:	2300      	movs	r3, #0
   34f34:	4619      	mov	r1, r3
   34f36:	e6ff      	b.n	34d38 <ticker_worker+0xe0>

00034f38 <ticker_job>:
	if (instance->worker_trigger) {
   34f38:	7fc3      	ldrb	r3, [r0, #31]
   34f3a:	2b00      	cmp	r3, #0
   34f3c:	f040 8431 	bne.w	357a2 <ticker_job+0x86a>
{
   34f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   34f44:	7f82      	ldrb	r2, [r0, #30]
{
   34f46:	b08d      	sub	sp, #52	; 0x34
   34f48:	4683      	mov	fp, r0
	if (instance->job_guard) {
   34f4a:	2a00      	cmp	r2, #0
   34f4c:	f040 808c 	bne.w	35068 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   34f50:	7a83      	ldrb	r3, [r0, #10]
   34f52:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   34f54:	2001      	movs	r0, #1
   34f56:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   34f5a:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   34f5c:	f8db 0014 	ldr.w	r0, [fp, #20]
   34f60:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   34f62:	f000 8440 	beq.w	357e6 <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   34f66:	3301      	adds	r3, #1
   34f68:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   34f6a:	2b02      	cmp	r3, #2
		idx = 0U;
   34f6c:	bf08      	it	eq
   34f6e:	4613      	moveq	r3, r2
		ticks_elapsed =
   34f70:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   34f74:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   34f78:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   34f7c:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   34f7e:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   34f80:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   34f82:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   34f84:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   34f86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   34f8a:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   34f8e:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   34f92:	f8db 3000 	ldr.w	r3, [fp]
   34f96:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   34f98:	f8db 3004 	ldr.w	r3, [fp, #4]
   34f9c:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   34f9e:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   34fa0:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   34fa2:	b2db      	uxtb	r3, r3
   34fa4:	2a00      	cmp	r2, #0
   34fa6:	f000 81d5 	beq.w	35354 <ticker_job+0x41c>
		flag_elapsed = 1U;
   34faa:	2201      	movs	r2, #1
   34fac:	920b      	str	r2, [sp, #44]	; 0x2c
   34fae:	9a05      	ldr	r2, [sp, #20]
   34fb0:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   34fb4:	2300      	movs	r3, #0
   34fb6:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   34fb8:	23ff      	movs	r3, #255	; 0xff
   34fba:	9301      	str	r3, [sp, #4]
   34fbc:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   34fbe:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   34fc2:	f89a c003 	ldrb.w	ip, [sl, #3]
   34fc6:	f89a 7002 	ldrb.w	r7, [sl, #2]
   34fca:	4567      	cmp	r7, ip
   34fcc:	d044      	beq.n	35058 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   34fce:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   34fd2:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   34fd4:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   34fd6:	b2db      	uxtb	r3, r3
				middle = 0U;
   34fd8:	429a      	cmp	r2, r3
   34fda:	bf08      	it	eq
   34fdc:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   34fde:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   34fe2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   34fe6:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34fea:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   34fee:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   34ff0:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34ff4:	d942      	bls.n	3507c <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34ff6:	2808      	cmp	r0, #8
   34ff8:	d842      	bhi.n	35080 <ticker_job+0x148>
			ticker = &node[user_op->id];
   34ffa:	7861      	ldrb	r1, [r4, #1]
   34ffc:	9a00      	ldr	r2, [sp, #0]
   34ffe:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   35002:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   35006:	786a      	ldrb	r2, [r5, #1]
   35008:	f895 e002 	ldrb.w	lr, [r5, #2]
   3500c:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   35010:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   35014:	d034      	beq.n	35080 <ticker_job+0x148>
			    (state == 0U) ||
   35016:	2805      	cmp	r0, #5
   35018:	d041      	beq.n	3509e <ticker_job+0x166>
			if (state == 1U) {
   3501a:	2a01      	cmp	r2, #1
   3501c:	f040 8118 	bne.w	35250 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   35020:	2806      	cmp	r0, #6
   35022:	d006      	beq.n	35032 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   35024:	4658      	mov	r0, fp
   35026:	f7ff fcb5 	bl	34994 <ticker_dequeue>
			ticker->req = ticker->ack;
   3502a:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   3502c:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   3502e:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   35030:	7861      	ldrb	r1, [r4, #1]
   35032:	f89b 301c 	ldrb.w	r3, [fp, #28]
   35036:	428b      	cmp	r3, r1
   35038:	f000 80d9 	beq.w	351ee <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3503c:	2000      	movs	r0, #0
   3503e:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   35042:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   35044:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   35046:	b10b      	cbz	r3, 3504c <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   35048:	6b21      	ldr	r1, [r4, #48]	; 0x30
   3504a:	4798      	blx	r3
		while (user->middle != user->last) {
   3504c:	f89a c003 	ldrb.w	ip, [sl, #3]
   35050:	f89a 7002 	ldrb.w	r7, [sl, #2]
   35054:	4567      	cmp	r7, ip
   35056:	d1ba      	bne.n	34fce <ticker_job+0x96>
	while (count_user--) {
   35058:	9a05      	ldr	r2, [sp, #20]
   3505a:	4552      	cmp	r2, sl
   3505c:	f1aa 0308 	sub.w	r3, sl, #8
   35060:	f000 8107 	beq.w	35272 <ticker_job+0x33a>
   35064:	469a      	mov	sl, r3
   35066:	e7aa      	b.n	34fbe <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   35068:	6a44      	ldr	r4, [r0, #36]	; 0x24
   3506a:	2104      	movs	r1, #4
   3506c:	4603      	mov	r3, r0
   3506e:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   35070:	2004      	movs	r0, #4
   35072:	46a4      	mov	ip, r4
}
   35074:	b00d      	add	sp, #52	; 0x34
   35076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   3507a:	4760      	bx	ip
   3507c:	461f      	mov	r7, r3
   3507e:	e7a4      	b.n	34fca <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   35080:	2200      	movs	r2, #0
   35082:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   35086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   35088:	2001      	movs	r0, #1
   3508a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   3508c:	2a00      	cmp	r2, #0
   3508e:	d0f5      	beq.n	3507c <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   35090:	6b21      	ldr	r1, [r4, #48]	; 0x30
   35092:	4790      	blx	r2
		while (user->middle != user->last) {
   35094:	f89a c003 	ldrb.w	ip, [sl, #3]
   35098:	f89a 7002 	ldrb.w	r7, [sl, #2]
   3509c:	e795      	b.n	34fca <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   3509e:	6860      	ldr	r0, [r4, #4]
   350a0:	b948      	cbnz	r0, 350b6 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   350a2:	68a0      	ldr	r0, [r4, #8]
   350a4:	b938      	cbnz	r0, 350b6 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   350a6:	68e0      	ldr	r0, [r4, #12]
   350a8:	b928      	cbnz	r0, 350b6 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   350aa:	6920      	ldr	r0, [r4, #16]
   350ac:	b918      	cbnz	r0, 350b6 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   350ae:	6960      	ldr	r0, [r4, #20]
   350b0:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   350b4:	d0e4      	beq.n	35080 <ticker_job+0x148>
			if (state == 1U) {
   350b6:	2a01      	cmp	r2, #1
   350b8:	f040 80ca 	bne.w	35250 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   350bc:	4658      	mov	r0, fp
   350be:	f7ff fc69 	bl	34994 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   350c2:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   350c6:	60a8      	str	r0, [r5, #8]
   350c8:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   350ca:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   350cc:	f00e f814 	bl	430f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   350d0:	9b02      	ldr	r3, [sp, #8]
   350d2:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   350d4:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   350d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   350da:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   350dc:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   350de:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   350e0:	f240 80af 	bls.w	35242 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   350e4:	696b      	ldr	r3, [r5, #20]
   350e6:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   350e8:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   350ea:	f8d5 c004 	ldr.w	ip, [r5, #4]
   350ee:	f1bc 0f00 	cmp.w	ip, #0
   350f2:	d051      	beq.n	35198 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   350f4:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   350f6:	2b00      	cmp	r3, #0
   350f8:	d04e      	beq.n	35198 <ticker_job+0x260>
		user_op->params.update.lazy--;
   350fa:	3b01      	subs	r3, #1
   350fc:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   350fe:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   35100:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   35102:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   35104:	d223      	bcs.n	3514e <ticker_job+0x216>
   35106:	f10c 0e01 	add.w	lr, ip, #1
   3510a:	f8cd 8018 	str.w	r8, [sp, #24]
   3510e:	940a      	str	r4, [sp, #40]	; 0x28
   35110:	e018      	b.n	35144 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   35112:	6a69      	ldr	r1, [r5, #36]	; 0x24
   35114:	f8df 8228 	ldr.w	r8, [pc, #552]	; 35340 <ticker_job+0x408>
   35118:	4c8a      	ldr	r4, [pc, #552]	; (35344 <ticker_job+0x40c>)
   3511a:	4488      	add	r8, r1
   3511c:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   3511e:	bf84      	itt	hi
   35120:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   35124:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   35128:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   3512a:	6a2c      	ldr	r4, [r5, #32]
   3512c:	bf94      	ite	ls
   3512e:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   35130:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   35134:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   35136:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   35138:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   3513a:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   3513c:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   3513e:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   35140:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   35142:	d201      	bcs.n	35148 <ticker_job+0x210>
   35144:	429f      	cmp	r7, r3
   35146:	d3e4      	bcc.n	35112 <ticker_job+0x1da>
   35148:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3514c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3514e:	42bb      	cmp	r3, r7
   35150:	d221      	bcs.n	35196 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   35152:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   35156:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   3515a:	9006      	str	r0, [sp, #24]
   3515c:	940a      	str	r4, [sp, #40]	; 0x28
   3515e:	e005      	b.n	3516c <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   35160:	3301      	adds	r3, #1
   35162:	b29b      	uxth	r3, r3
   35164:	4660      	mov	r0, ip
   35166:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   35168:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3516a:	d011      	beq.n	35190 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   3516c:	4874      	ldr	r0, [pc, #464]	; (35340 <ticker_job+0x408>)
   3516e:	4c75      	ldr	r4, [pc, #468]	; (35344 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   35170:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   35172:	1808      	adds	r0, r1, r0
   35174:	42a0      	cmp	r0, r4
   35176:	d8f3      	bhi.n	35160 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   35178:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   3517a:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   3517c:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   35180:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   35182:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   35186:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   35188:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   3518c:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3518e:	d1ed      	bne.n	3516c <ticker_job+0x234>
   35190:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   35192:	6269      	str	r1, [r5, #36]	; 0x24
   35194:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   35196:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   35198:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   3519a:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   3519c:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   3519e:	440a      	add	r2, r1
   351a0:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   351a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   351a4:	4403      	add	r3, r0
   351a6:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   351a8:	b11a      	cbz	r2, 351b2 <ticker_job+0x27a>
   351aa:	6813      	ldr	r3, [r2, #0]
   351ac:	b10b      	cbz	r3, 351b2 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   351ae:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   351b0:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   351b2:	464a      	mov	r2, r9
   351b4:	9902      	ldr	r1, [sp, #8]
   351b6:	4628      	mov	r0, r5
   351b8:	f7ff fc26 	bl	34a08 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   351bc:	68e2      	ldr	r2, [r4, #12]
   351be:	69ab      	ldr	r3, [r5, #24]
   351c0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   351c2:	6922      	ldr	r2, [r4, #16]
   351c4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   351c6:	bf8c      	ite	hi
   351c8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   351ca:	2300      	movls	r3, #0
   351cc:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   351ce:	7da3      	ldrb	r3, [r4, #22]
   351d0:	b103      	cbz	r3, 351d4 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   351d2:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   351d4:	7de3      	ldrb	r3, [r4, #23]
   351d6:	b113      	cbz	r3, 351de <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   351d8:	3b01      	subs	r3, #1
   351da:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   351de:	9b01      	ldr	r3, [sp, #4]
   351e0:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   351e2:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   351e4:	7862      	ldrb	r2, [r4, #1]
   351e6:	9201      	str	r2, [sp, #4]
		ticker->req++;
   351e8:	3301      	adds	r3, #1
   351ea:	706b      	strb	r3, [r5, #1]
   351ec:	e726      	b.n	3503c <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   351ee:	23ff      	movs	r3, #255	; 0xff
   351f0:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   351f4:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   351f8:	2b06      	cmp	r3, #6
   351fa:	d013      	beq.n	35224 <ticker_job+0x2ec>
   351fc:	2b08      	cmp	r3, #8
   351fe:	d011      	beq.n	35224 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   35200:	f00d ff7a 	bl	430f8 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   35204:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   35208:	1a83      	subs	r3, r0, r2
   3520a:	021d      	lsls	r5, r3, #8
   3520c:	d410      	bmi.n	35230 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   3520e:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   35214:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   35216:	f8db 2018 	ldr.w	r2, [fp, #24]
   3521a:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   3521c:	bf88      	it	hi
   3521e:	f8cb 3018 	strhi.w	r3, [fp, #24]
   35222:	e70b      	b.n	3503c <ticker_job+0x104>
				ticks_at_yield =
   35224:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   35226:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   3522a:	1a83      	subs	r3, r0, r2
   3522c:	021d      	lsls	r5, r3, #8
   3522e:	d5ee      	bpl.n	3520e <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35230:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   35232:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   35238:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   3523a:	bf34      	ite	cc
   3523c:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   3523e:	2300      	movcs	r3, #0
   35240:	e7e9      	b.n	35216 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   35242:	696b      	ldr	r3, [r5, #20]
   35244:	1bda      	subs	r2, r3, r7
   35246:	1853      	adds	r3, r2, r1
   35248:	9304      	str	r3, [sp, #16]
   3524a:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   3524c:	2200      	movs	r2, #0
   3524e:	e74c      	b.n	350ea <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   35250:	2104      	movs	r1, #4
   35252:	465b      	mov	r3, fp
   35254:	2201      	movs	r2, #1
   35256:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   3525a:	4608      	mov	r0, r1
   3525c:	47a0      	blx	r4
	while (count_user--) {
   3525e:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   35260:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   35264:	2301      	movs	r3, #1
	while (count_user--) {
   35266:	4552      	cmp	r2, sl
				pending = 1U;
   35268:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   3526a:	f1aa 0308 	sub.w	r3, sl, #8
   3526e:	f47f aef9 	bne.w	35064 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   35272:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   35276:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35278:	1a9b      	subs	r3, r3, r2
   3527a:	bf18      	it	ne
   3527c:	2301      	movne	r3, #1
   3527e:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   35280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35282:	2b00      	cmp	r3, #0
   35284:	d16a      	bne.n	3535c <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   35286:	9901      	ldr	r1, [sp, #4]
   35288:	4658      	mov	r0, fp
   3528a:	f7ff fbe1 	bl	34a50 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   3528e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   35292:	9300      	str	r3, [sp, #0]
   35294:	9b00      	ldr	r3, [sp, #0]
   35296:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35298:	4293      	cmp	r3, r2
   3529a:	f000 826c 	beq.w	35776 <ticker_job+0x83e>
	if (!pending) {
   3529e:	9b08      	ldr	r3, [sp, #32]
   352a0:	2b00      	cmp	r3, #0
   352a2:	f000 81e6 	beq.w	35672 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   352a6:	f89b 301d 	ldrb.w	r3, [fp, #29]
   352aa:	9300      	str	r3, [sp, #0]
   352ac:	9b00      	ldr	r3, [sp, #0]
   352ae:	2bff      	cmp	r3, #255	; 0xff
   352b0:	f000 82c4 	beq.w	3583c <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   352b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   352b6:	2bff      	cmp	r3, #255	; 0xff
   352b8:	f000 82cb 	beq.w	35852 <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   352bc:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   352be:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   352c2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 35348 <ticker_job+0x410>
   352c6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3534c <ticker_job+0x414>
   352ca:	4f21      	ldr	r7, [pc, #132]	; (35350 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   352cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   352d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   352d4:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   352d6:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   352d8:	f00d ff0e 	bl	430f8 <cntr_cnt_get>
		cc = instance->ticks_current;
   352dc:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   352e0:	1b03      	subs	r3, r0, r4
   352e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   352e6:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   352e8:	42b3      	cmp	r3, r6
   352ea:	bf2c      	ite	cs
   352ec:	18e4      	addcs	r4, r4, r3
   352ee:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   352f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   352f4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   352f8:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   352fa:	4620      	mov	r0, r4
   352fc:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   352fe:	f00d fefb 	bl	430f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35302:	eba0 030a 	sub.w	r3, r0, sl
   35306:	eba4 040a 	sub.w	r4, r4, sl
   3530a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   3530e:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35310:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   35314:	42a3      	cmp	r3, r4
		i--;
   35316:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   3531a:	f240 8233 	bls.w	35784 <ticker_job+0x84c>
		LL_ASSERT(i);
   3531e:	2d00      	cmp	r5, #0
   35320:	d1da      	bne.n	352d8 <ticker_job+0x3a0>
   35322:	f640 133e 	movw	r3, #2366	; 0x93e
   35326:	464a      	mov	r2, r9
   35328:	4641      	mov	r1, r8
   3532a:	4638      	mov	r0, r7
   3532c:	f015 f8bb 	bl	4a4a6 <printk>
   35330:	4040      	eors	r0, r0
   35332:	f380 8811 	msr	BASEPRI, r0
   35336:	f04f 0003 	mov.w	r0, #3
   3533a:	df02      	svc	2
   3533c:	e7cc      	b.n	352d8 <ticker_job+0x3a0>
   3533e:	bf00      	nop
   35340:	ff172b5a 	.word	0xff172b5a
   35344:	7f172b59 	.word	0x7f172b59
   35348:	000550ec 	.word	0x000550ec
   3534c:	00055198 	.word	0x00055198
   35350:	0005512c 	.word	0x0005512c
	pending = 0U;
   35354:	9b06      	ldr	r3, [sp, #24]
   35356:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   35358:	23ff      	movs	r3, #255	; 0xff
   3535a:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   3535c:	f00d fecc 	bl	430f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35360:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   35362:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35366:	1ac3      	subs	r3, r0, r3
   35368:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   3536c:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   3536e:	f8db 3000 	ldr.w	r3, [fp]
   35372:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   35374:	d050      	beq.n	35418 <ticker_job+0x4e0>
	ticks_expired = 0U;
   35376:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   35378:	f8df 8290 	ldr.w	r8, [pc, #656]	; 3560c <ticker_job+0x6d4>
   3537c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 35610 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   35380:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   35382:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   35384:	9a00      	ldr	r2, [sp, #0]
   35386:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   3538a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   3538e:	011b      	lsls	r3, r3, #4
   35390:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   35392:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   35394:	429f      	cmp	r7, r3
   35396:	f0c0 8243 	bcc.w	35820 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   3539a:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   3539c:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   353a0:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   353a4:	441a      	add	r2, r3
   353a6:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   353a8:	f8db 2018 	ldr.w	r2, [fp, #24]
   353ac:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   353ae:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   353b2:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   353b6:	bf25      	ittet	cs
   353b8:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   353bc:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   353c0:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   353c2:	2300      	movcs	r3, #0
   353c4:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   353c8:	78a2      	ldrb	r2, [r4, #2]
   353ca:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   353cc:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   353ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   353d0:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   353d2:	1a9b      	subs	r3, r3, r2
   353d4:	b2db      	uxtb	r3, r3
   353d6:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   353d8:	9b00      	ldr	r3, [sp, #0]
   353da:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   353de:	b118      	cbz	r0, 353e8 <ticker_job+0x4b0>
   353e0:	9b05      	ldr	r3, [sp, #20]
   353e2:	2b02      	cmp	r3, #2
   353e4:	f000 8135 	beq.w	35652 <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   353e8:	2300      	movs	r3, #0
   353ea:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   353ec:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   353f0:	2d00      	cmp	r5, #0
   353f2:	f040 80da 	bne.w	355aa <ticker_job+0x672>
   353f6:	b119      	cbz	r1, 35400 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   353f8:	7a09      	ldrb	r1, [r1, #8]
   353fa:	2901      	cmp	r1, #1
   353fc:	f000 8111 	beq.w	35622 <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   35400:	9b05      	ldr	r3, [sp, #20]
   35402:	b123      	cbz	r3, 3540e <ticker_job+0x4d6>
   35404:	2b01      	cmp	r3, #1
   35406:	d045      	beq.n	35494 <ticker_job+0x55c>
   35408:	f1be 0f00 	cmp.w	lr, #0
   3540c:	d142      	bne.n	35494 <ticker_job+0x55c>
			ticker->req = ticker->ack;
   3540e:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   35410:	f89b 601d 	ldrb.w	r6, [fp, #29]
   35414:	2eff      	cmp	r6, #255	; 0xff
   35416:	d1b5      	bne.n	35384 <ticker_job+0x44c>
			flag_compare_update = 1U;
   35418:	9b06      	ldr	r3, [sp, #24]
   3541a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   3541c:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   3541e:	4296      	cmp	r6, r2
   35420:	bf18      	it	ne
   35422:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   35424:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   35426:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   35428:	f7ff fb12 	bl	34a50 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   3542c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   35430:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   35434:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   35438:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   3543a:	9b00      	ldr	r3, [sp, #0]
   3543c:	2bff      	cmp	r3, #255	; 0xff
   3543e:	d00f      	beq.n	35460 <ticker_job+0x528>
   35440:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   35442:	b233      	sxth	r3, r6
   35444:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   35448:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   3544c:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   3544e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   35450:	b117      	cbz	r7, 35458 <ticker_job+0x520>
   35452:	7a39      	ldrb	r1, [r7, #8]
   35454:	2901      	cmp	r1, #1
   35456:	d025      	beq.n	354a4 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   35458:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   3545c:	2eff      	cmp	r6, #255	; 0xff
   3545e:	d1f0      	bne.n	35442 <ticker_job+0x50a>
	return rescheduled;
   35460:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   35464:	2a00      	cmp	r2, #0
   35466:	f43f af15 	beq.w	35294 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   3546a:	9b00      	ldr	r3, [sp, #0]
   3546c:	9909      	ldr	r1, [sp, #36]	; 0x24
   3546e:	428b      	cmp	r3, r1
   35470:	f47f af15 	bne.w	3529e <ticker_job+0x366>
	if (!pending) {
   35474:	9b08      	ldr	r3, [sp, #32]
   35476:	2b00      	cmp	r3, #0
   35478:	f47f af18 	bne.w	352ac <ticker_job+0x374>
	users = &instance->users[0];
   3547c:	f8db 3004 	ldr.w	r3, [fp, #4]
   35480:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   35482:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   35486:	1e5f      	subs	r7, r3, #1
   35488:	b2ff      	uxtb	r7, r7
   3548a:	2b00      	cmp	r3, #0
   3548c:	f43f af0e 	beq.w	352ac <ticker_job+0x374>
			flag_compare_update = 1U;
   35490:	9206      	str	r2, [sp, #24]
   35492:	e0fa      	b.n	3568a <ticker_job+0x752>
			    ticker->fp_op_func) {
   35494:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   35496:	2b00      	cmp	r3, #0
   35498:	d0b9      	beq.n	3540e <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   3549a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3549c:	2001      	movs	r0, #1
   3549e:	4798      	blx	r3
			ticker->req = ticker->ack;
   354a0:	78a2      	ldrb	r2, [r4, #2]
   354a2:	e7b4      	b.n	3540e <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   354a4:	9b01      	ldr	r3, [sp, #4]
   354a6:	7f1b      	ldrb	r3, [r3, #28]
   354a8:	2bff      	cmp	r3, #255	; 0xff
   354aa:	d04b      	beq.n	35544 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   354ac:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   354ae:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   354b0:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   354b2:	4293      	cmp	r3, r2
   354b4:	d946      	bls.n	35544 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   354b6:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   354ba:	687a      	ldr	r2, [r7, #4]
   354bc:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   354be:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   354c2:	1ad3      	subs	r3, r2, r3
   354c4:	9302      	str	r3, [sp, #8]
   354c6:	683b      	ldr	r3, [r7, #0]
   354c8:	429a      	cmp	r2, r3
   354ca:	f080 80bd 	bcs.w	35648 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   354ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   354d2:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   354d6:	f000 80b7 	beq.w	35648 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   354da:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   354de:	45f0      	cmp	r8, lr
   354e0:	f04f 0300 	mov.w	r3, #0
   354e4:	d331      	bcc.n	3554a <ticker_job+0x612>
   354e6:	46f1      	mov	r9, lr
   354e8:	465a      	mov	r2, fp
   354ea:	461c      	mov	r4, r3
   354ec:	e01c      	b.n	35528 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   354ee:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   354f0:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   354f2:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   354f4:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   354f6:	d909      	bls.n	3550c <ticker_job+0x5d4>
				window_end_ticks =
   354f8:	4543      	cmp	r3, r8
   354fa:	bf28      	it	cs
   354fc:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   354fe:	4599      	cmp	r9, r3
   35500:	d204      	bcs.n	3550c <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   35502:	ebb3 030e 	subs.w	r3, r3, lr
   35506:	d001      	beq.n	3550c <ticker_job+0x5d4>
   35508:	459c      	cmp	ip, r3
   3550a:	d91e      	bls.n	3554a <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   3550c:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   3550e:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   35512:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   35516:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   35518:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   3551c:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   3551e:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   35522:	d012      	beq.n	3554a <ticker_job+0x612>
   35524:	45c8      	cmp	r8, r9
   35526:	d310      	bcc.n	3554a <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   35528:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3552c:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   35530:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   35532:	6a81      	ldr	r1, [r0, #40]	; 0x28
   35534:	2900      	cmp	r1, #0
   35536:	d0da      	beq.n	354ee <ticker_job+0x5b6>
   35538:	7a09      	ldrb	r1, [r1, #8]
   3553a:	2901      	cmp	r1, #1
   3553c:	d1d7      	bne.n	354ee <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   3553e:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   35542:	e7eb      	b.n	3551c <ticker_job+0x5e4>
		window_start_ticks = 0U;
   35544:	f04f 0c00 	mov.w	ip, #0
   35548:	e7b7      	b.n	354ba <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   3554a:	9a02      	ldr	r2, [sp, #8]
   3554c:	441a      	add	r2, r3
   3554e:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   35550:	465c      	mov	r4, fp
   35552:	60ab      	str	r3, [r5, #8]
   35554:	f04f 0eff 	mov.w	lr, #255	; 0xff
   35558:	e000      	b.n	3555c <ticker_job+0x624>
   3555a:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   3555c:	b221      	sxth	r1, r4
   3555e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   35562:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   35566:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   35568:	f8dc 0008 	ldr.w	r0, [ip, #8]
   3556c:	4298      	cmp	r0, r3
   3556e:	f080 814d 	bcs.w	3580c <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   35572:	1a1b      	subs	r3, r3, r0
   35574:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   35576:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   3557a:	2aff      	cmp	r2, #255	; 0xff
   3557c:	46a6      	mov	lr, r4
   3557e:	d1ec      	bne.n	3555a <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   35580:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   35582:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   35586:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   3558a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   3558c:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   35590:	f81a 3001 	ldrb.w	r3, [sl, r1]
   35594:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   35596:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   3559a:	8beb      	ldrh	r3, [r5, #30]
   3559c:	3b01      	subs	r3, #1
   3559e:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   355a0:	f04f 0302 	mov.w	r3, #2
   355a4:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   355a6:	2201      	movs	r2, #1
   355a8:	e747      	b.n	3543a <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   355aa:	b111      	cbz	r1, 355b2 <ticker_job+0x67a>
   355ac:	7a0b      	ldrb	r3, [r1, #8]
   355ae:	2b01      	cmp	r3, #1
   355b0:	d037      	beq.n	35622 <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   355b2:	f1be 0f00 	cmp.w	lr, #0
   355b6:	d159      	bne.n	3566c <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   355b8:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   355bc:	4672      	mov	r2, lr
				while (count--) {
   355be:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   355c0:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   355c4:	2100      	movs	r1, #0
   355c6:	9005      	str	r0, [sp, #20]
   355c8:	e004      	b.n	355d4 <ticker_job+0x69c>
   355ca:	4628      	mov	r0, r5
				while (count--) {
   355cc:	3a01      	subs	r2, #1
					ticks_to_expire +=
   355ce:	4401      	add	r1, r0
				while (count--) {
   355d0:	1c50      	adds	r0, r2, #1
   355d2:	d00f      	beq.n	355f4 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   355d4:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   355d6:	eb03 0008 	add.w	r0, r3, r8
   355da:	4548      	cmp	r0, r9
   355dc:	d8f5      	bhi.n	355ca <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   355de:	9805      	ldr	r0, [sp, #20]
   355e0:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   355e4:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   355e6:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   355ea:	4401      	add	r1, r0
				while (count--) {
   355ec:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   355ee:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   355f2:	d1ef      	bne.n	355d4 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   355f4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   355f8:	6263      	str	r3, [r4, #36]	; 0x24
   355fa:	2a00      	cmp	r2, #0
   355fc:	f000 80d2 	beq.w	357a4 <ticker_job+0x86c>
				lazy = 0U;
   35600:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   35602:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   35604:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   35606:	83e2      	strh	r2, [r4, #30]
   35608:	e00d      	b.n	35626 <ticker_job+0x6ee>
   3560a:	bf00      	nop
   3560c:	ff172b5a 	.word	0xff172b5a
   35610:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   35614:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   35618:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   3561c:	2d00      	cmp	r5, #0
   3561e:	f43f aeeb 	beq.w	353f8 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   35622:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   35624:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   35626:	9b07      	ldr	r3, [sp, #28]
   35628:	9a02      	ldr	r2, [sp, #8]
   3562a:	f8db 1014 	ldr.w	r1, [fp, #20]
   3562e:	189a      	adds	r2, r3, r2
   35630:	4620      	mov	r0, r4
   35632:	f7ff f9e9 	bl	34a08 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   35636:	9a00      	ldr	r2, [sp, #0]
   35638:	9904      	ldr	r1, [sp, #16]
   3563a:	9b01      	ldr	r3, [sp, #4]
   3563c:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   3563e:	7863      	ldrb	r3, [r4, #1]
   35640:	9601      	str	r6, [sp, #4]
   35642:	3301      	adds	r3, #1
   35644:	7063      	strb	r3, [r4, #1]
   35646:	e6e3      	b.n	35410 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35648:	9b02      	ldr	r3, [sp, #8]
   3564a:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   3564c:	2300      	movs	r3, #0
   3564e:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   35650:	e7a3      	b.n	3559a <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   35652:	f1be 0f00 	cmp.w	lr, #0
   35656:	f47f aec7 	bne.w	353e8 <ticker_job+0x4b0>
   3565a:	b111      	cbz	r1, 35662 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   3565c:	7a0b      	ldrb	r3, [r1, #8]
   3565e:	2b01      	cmp	r3, #1
   35660:	d0d8      	beq.n	35614 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   35662:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   35666:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   3566a:	e6bd      	b.n	353e8 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   3566c:	7062      	strb	r2, [r4, #1]
   3566e:	2200      	movs	r2, #0
   35670:	e7a5      	b.n	355be <ticker_job+0x686>
	count_user = instance->count_user;
   35672:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   35676:	f8db 2004 	ldr.w	r2, [fp, #4]
   3567a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   3567c:	1e5f      	subs	r7, r3, #1
   3567e:	b2ff      	uxtb	r7, r7
   35680:	2b00      	cmp	r3, #0
   35682:	f43f ae10 	beq.w	352a6 <ticker_job+0x36e>
		flag_compare_update = 1U;
   35686:	2301      	movs	r3, #1
   35688:	9306      	str	r3, [sp, #24]
   3568a:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   3568c:	2600      	movs	r6, #0
   3568e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   35692:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   35696:	787b      	ldrb	r3, [r7, #1]
   35698:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   3569a:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   3569c:	429a      	cmp	r2, r3
   3569e:	d10c      	bne.n	356ba <ticker_job+0x782>
   356a0:	e05b      	b.n	3575a <ticker_job+0x822>
	switch (uop->op) {
   356a2:	2b01      	cmp	r3, #1
   356a4:	d053      	beq.n	3574e <ticker_job+0x816>
			first = user->first + 1;
   356a6:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   356a8:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   356aa:	3301      	adds	r3, #1
   356ac:	b2db      	uxtb	r3, r3
				first = 0U;
   356ae:	4299      	cmp	r1, r3
   356b0:	bf08      	it	eq
   356b2:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   356b4:	429a      	cmp	r2, r3
			user->first = first;
   356b6:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   356b8:	d04f      	beq.n	3575a <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   356ba:	b21b      	sxth	r3, r3
   356bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   356c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   356c4:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   356c8:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   356cc:	2b02      	cmp	r3, #2
   356ce:	d017      	beq.n	35700 <ticker_job+0x7c8>
   356d0:	2b03      	cmp	r3, #3
   356d2:	d1e6      	bne.n	356a2 <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   356d4:	7843      	ldrb	r3, [r0, #1]
   356d6:	f89b 2008 	ldrb.w	r2, [fp, #8]
   356da:	429a      	cmp	r2, r3
   356dc:	d93a      	bls.n	35754 <ticker_job+0x81c>
			node[uop->id].priority =
   356de:	f8db 2000 	ldr.w	r2, [fp]
   356e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   356e6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   356ea:	7902      	ldrb	r2, [r0, #4]
   356ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   356f0:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   356f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   356f4:	b113      	cbz	r3, 356fc <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   356f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   356f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   356fa:	4798      	blx	r3
   356fc:	78fa      	ldrb	r2, [r7, #3]
   356fe:	e7d2      	b.n	356a6 <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   35700:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   35704:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   35708:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   3570c:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   35710:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   35714:	2aff      	cmp	r2, #255	; 0xff
   35716:	d003      	beq.n	35720 <ticker_job+0x7e8>
   35718:	f8d1 8000 	ldr.w	r8, [r1]
   3571c:	4598      	cmp	r8, r3
   3571e:	d023      	beq.n	35768 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   35720:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   35724:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   35726:	f04f 0800 	mov.w	r8, #0
   3572a:	e00a      	b.n	35742 <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   3572c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   35730:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   35734:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   35736:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   3573a:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   3573c:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   3573e:	b911      	cbnz	r1, 35746 <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   35740:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   35742:	2aff      	cmp	r2, #255	; 0xff
   35744:	d1f2      	bne.n	3572c <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   35746:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   3574a:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   3574e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   35750:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   35752:	e7cf      	b.n	356f4 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   35754:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   35758:	e7cb      	b.n	356f2 <ticker_job+0x7ba>
	while (count_user--) {
   3575a:	9a01      	ldr	r2, [sp, #4]
   3575c:	42ba      	cmp	r2, r7
   3575e:	f1a7 0308 	sub.w	r3, r7, #8
   35762:	d00b      	beq.n	3577c <ticker_job+0x844>
   35764:	461f      	mov	r7, r3
   35766:	e796      	b.n	35696 <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   35768:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3576c:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   3576e:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   35772:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   35774:	e7e5      	b.n	35742 <ticker_job+0x80a>
	if (!pending) {
   35776:	9b08      	ldr	r3, [sp, #32]
   35778:	2b00      	cmp	r3, #0
   3577a:	d054      	beq.n	35826 <ticker_job+0x8ee>
	if (flag_compare_update) {
   3577c:	9b06      	ldr	r3, [sp, #24]
   3577e:	2b00      	cmp	r3, #0
   35780:	f47f ad91 	bne.w	352a6 <ticker_job+0x36e>
	if (instance->worker_trigger) {
   35784:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   35788:	2200      	movs	r2, #0
   3578a:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   3578e:	b12b      	cbz	r3, 3579c <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   35790:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   35794:	465b      	mov	r3, fp
   35796:	2201      	movs	r2, #1
   35798:	2103      	movs	r1, #3
   3579a:	e469      	b.n	35070 <ticker_job+0x138>
}
   3579c:	b00d      	add	sp, #52	; 0x34
   3579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   357a2:	4770      	bx	lr
					while (ticks_to_expire <
   357a4:	458a      	cmp	sl, r1
   357a6:	f67f af2c 	bls.w	35602 <ticker_job+0x6ca>
   357aa:	1c68      	adds	r0, r5, #1
   357ac:	9405      	str	r4, [sp, #20]
   357ae:	4604      	mov	r4, r0
   357b0:	e005      	b.n	357be <ticker_job+0x886>
   357b2:	4628      	mov	r0, r5
						ticks_to_expire +=
   357b4:	4401      	add	r1, r0
						lazy++;
   357b6:	3201      	adds	r2, #1
					while (ticks_to_expire <
   357b8:	458a      	cmp	sl, r1
						lazy++;
   357ba:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   357bc:	d910      	bls.n	357e0 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   357be:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   357c0:	eb03 0008 	add.w	r0, r3, r8
   357c4:	4548      	cmp	r0, r9
   357c6:	d8f4      	bhi.n	357b2 <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   357c8:	4620      	mov	r0, r4
   357ca:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   357ce:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   357d0:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   357d4:	3201      	adds	r2, #1
					while (ticks_to_expire <
   357d6:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   357d8:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   357dc:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   357de:	d8ee      	bhi.n	357be <ticker_job+0x886>
   357e0:	9c05      	ldr	r4, [sp, #20]
   357e2:	6263      	str	r3, [r4, #36]	; 0x24
   357e4:	e70d      	b.n	35602 <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   357e6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   357ea:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   357ee:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   357f0:	f8db 3000 	ldr.w	r3, [fp]
   357f4:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   357f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   357fa:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   357fc:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   357fe:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   35800:	b2db      	uxtb	r3, r3
   35802:	b3a1      	cbz	r1, 3586e <ticker_job+0x936>
		flag_elapsed = 0U;
   35804:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   35806:	9203      	str	r2, [sp, #12]
   35808:	f7ff bbd1 	b.w	34fae <ticker_job+0x76>
				node->ticks_to_expire -=
   3580c:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   3580e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   35812:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   35816:	f43f aec0 	beq.w	3559a <ticker_job+0x662>
   3581a:	fa0f f18e 	sxth.w	r1, lr
   3581e:	e6af      	b.n	35580 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   35820:	1bdb      	subs	r3, r3, r7
   35822:	60a3      	str	r3, [r4, #8]
			break;
   35824:	e5f8      	b.n	35418 <ticker_job+0x4e0>
	count_user = instance->count_user;
   35826:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   3582a:	f8db 2004 	ldr.w	r2, [fp, #4]
   3582e:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   35830:	1e5f      	subs	r7, r3, #1
   35832:	b2ff      	uxtb	r7, r7
   35834:	2b00      	cmp	r3, #0
   35836:	f47f af28 	bne.w	3568a <ticker_job+0x752>
   3583a:	e79f      	b.n	3577c <ticker_job+0x844>
		if (cntr_stop() == 0) {
   3583c:	f00d fc36 	bl	430ac <cntr_stop>
   35840:	2800      	cmp	r0, #0
   35842:	d19f      	bne.n	35784 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   35844:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   35848:	f00d fc56 	bl	430f8 <cntr_cnt_get>
   3584c:	f8cb 0014 	str.w	r0, [fp, #20]
   35850:	e798      	b.n	35784 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   35852:	f00d fc51 	bl	430f8 <cntr_cnt_get>
   35856:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   35858:	f00d fc18 	bl	4308c <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   3585c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   35860:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   35862:	2800      	cmp	r0, #0
   35864:	f47f ad2a 	bne.w	352bc <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   35868:	f8cb 4014 	str.w	r4, [fp, #20]
   3586c:	e526      	b.n	352bc <ticker_job+0x384>
	insert_head = TICKER_NULL;
   3586e:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   35870:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   35872:	9301      	str	r3, [sp, #4]
   35874:	e507      	b.n	35286 <ticker_job+0x34e>
   35876:	bf00      	nop

00035878 <ticker_init>:
{
   35878:	b4f0      	push	{r4, r5, r6, r7}
   3587a:	9d04      	ldr	r5, [sp, #16]
   3587c:	f89d 7014 	ldrb.w	r7, [sp, #20]
   35880:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   35882:	2800      	cmp	r0, #0
   35884:	d137      	bne.n	358f6 <ticker_init+0x7e>
	instance->count_node = count_node;
   35886:	4e1d      	ldr	r6, [pc, #116]	; (358fc <ticker_init+0x84>)
	while (count_node--) {
   35888:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   3588c:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   3588e:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   35890:	fa5f fc8c 	uxtb.w	ip, ip
   35894:	b149      	cbz	r1, 358aa <ticker_init+0x32>
   35896:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3589a:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   3589e:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   358a0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   358a4:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   358a8:	d1f9      	bne.n	3589e <ticker_init+0x26>
	while (count_user--) {
   358aa:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   358ac:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   358ae:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   358b0:	b2d2      	uxtb	r2, r2
   358b2:	b183      	cbz	r3, 358d6 <ticker_init+0x5e>
   358b4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   358b8:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   358ba:	4610      	mov	r0, r2
   358bc:	f812 3908 	ldrb.w	r3, [r2], #-8
   358c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   358c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   358c8:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   358ca:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   358ce:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   358d2:	b2df      	uxtb	r7, r3
	while (count_user--) {
   358d4:	d1f0      	bne.n	358b8 <ticker_init+0x40>
	if (count_op) {
   358d6:	b977      	cbnz	r7, 358f6 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   358d8:	9a07      	ldr	r2, [sp, #28]
   358da:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   358dc:	9a08      	ldr	r2, [sp, #32]
   358de:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   358e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   358e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   358e6:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   358e8:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   358ea:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   358ee:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   358f0:	8177      	strh	r7, [r6, #10]
}
   358f2:	bcf0      	pop	{r4, r5, r6, r7}
   358f4:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   358f6:	2001      	movs	r0, #1
}
   358f8:	bcf0      	pop	{r4, r5, r6, r7}
   358fa:	4770      	bx	lr
   358fc:	20004ec0 	.word	0x20004ec0

00035900 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   35900:	4b04      	ldr	r3, [pc, #16]	; (35914 <ticker_is_initialized+0x14>)
   35902:	222c      	movs	r2, #44	; 0x2c
   35904:	fb02 3300 	mla	r3, r2, r0, r3
   35908:	7a18      	ldrb	r0, [r3, #8]
}
   3590a:	3800      	subs	r0, #0
   3590c:	bf18      	it	ne
   3590e:	2001      	movne	r0, #1
   35910:	4770      	bx	lr
   35912:	bf00      	nop
   35914:	20004ec0 	.word	0x20004ec0

00035918 <ticker_trigger>:
	if (instance->sched_cb) {
   35918:	4b0a      	ldr	r3, [pc, #40]	; (35944 <ticker_trigger+0x2c>)
   3591a:	222c      	movs	r2, #44	; 0x2c
   3591c:	fb02 3200 	mla	r2, r2, r0, r3
{
   35920:	b410      	push	{r4}
	if (instance->sched_cb) {
   35922:	6a54      	ldr	r4, [r2, #36]	; 0x24
   35924:	b15c      	cbz	r4, 3593e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   35926:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   3592a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   3592e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   35932:	46a4      	mov	ip, r4
   35934:	2201      	movs	r2, #1
}
   35936:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   35938:	2103      	movs	r1, #3
   3593a:	2002      	movs	r0, #2
   3593c:	4760      	bx	ip
}
   3593e:	bc10      	pop	{r4}
   35940:	4770      	bx	lr
   35942:	bf00      	nop
   35944:	20004ec0 	.word	0x20004ec0

00035948 <ticker_start_ext>:
{
   35948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   3594c:	4e28      	ldr	r6, [pc, #160]	; (359f0 <ticker_start_ext+0xa8>)
{
   3594e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   35952:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   35954:	252c      	movs	r5, #44	; 0x2c
   35956:	fb05 6504 	mla	r5, r5, r4, r6
{
   3595a:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   3595c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   35960:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   35964:	6869      	ldr	r1, [r5, #4]
   35966:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   3596a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   3596e:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   35972:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   35976:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   35978:	f10e 0c01 	add.w	ip, lr, #1
   3597c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35980:	4564      	cmp	r4, ip
   35982:	bf98      	it	ls
   35984:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35988:	4561      	cmp	r1, ip
   3598a:	d02e      	beq.n	359ea <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   3598c:	6879      	ldr	r1, [r7, #4]
   3598e:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   35992:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   35996:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   3599a:	f04f 0904 	mov.w	r9, #4
   3599e:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   359a2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   359a4:	9b08      	ldr	r3, [sp, #32]
   359a6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   359a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   359aa:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   359ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   359ae:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   359b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   359b2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   359b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   359b6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   359b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   359ba:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   359bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   359be:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   359c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   359c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   359c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   359c6:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   359c8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   359ca:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   359cc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   359ce:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   359d2:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   359d6:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   359da:	4798      	blx	r3
   359dc:	4633      	mov	r3, r6
   359de:	4649      	mov	r1, r9
   359e0:	2200      	movs	r2, #0
   359e2:	47a8      	blx	r5
	return user_op->status;
   359e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   359e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   359ea:	2001      	movs	r0, #1
}
   359ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   359f0:	20004ec0 	.word	0x20004ec0

000359f4 <ticker_start>:
{
   359f4:	b510      	push	{r4, lr}
   359f6:	b08a      	sub	sp, #40	; 0x28
   359f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   359fa:	9400      	str	r4, [sp, #0]
{
   359fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   359fe:	9401      	str	r4, [sp, #4]
{
   35a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a02:	9402      	str	r4, [sp, #8]
{
   35a04:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a08:	9403      	str	r4, [sp, #12]
{
   35a0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a0c:	9404      	str	r4, [sp, #16]
{
   35a0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a10:	9405      	str	r4, [sp, #20]
{
   35a12:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a14:	9406      	str	r4, [sp, #24]
{
   35a16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a18:	9407      	str	r4, [sp, #28]
{
   35a1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35a1c:	9408      	str	r4, [sp, #32]
   35a1e:	2400      	movs	r4, #0
   35a20:	9409      	str	r4, [sp, #36]	; 0x24
   35a22:	f7ff ff91 	bl	35948 <ticker_start_ext>
}
   35a26:	b00a      	add	sp, #40	; 0x28
   35a28:	bd10      	pop	{r4, pc}
   35a2a:	bf00      	nop

00035a2c <ticker_update_ext>:
{
   35a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   35a30:	4d28      	ldr	r5, [pc, #160]	; (35ad4 <ticker_update_ext+0xa8>)
{
   35a32:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   35a36:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   35a3a:	4604      	mov	r4, r0
   35a3c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   35a3e:	212c      	movs	r1, #44	; 0x2c
   35a40:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   35a44:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   35a48:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   35a4c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   35a50:	684c      	ldr	r4, [r1, #4]
   35a52:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   35a56:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   35a5a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   35a5e:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   35a60:	f10e 0c01 	add.w	ip, lr, #1
   35a64:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35a68:	45e1      	cmp	r9, ip
   35a6a:	bf98      	it	ls
   35a6c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35a70:	4564      	cmp	r4, ip
{
   35a72:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   35a76:	d02a      	beq.n	35ace <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   35a78:	f8d6 a004 	ldr.w	sl, [r6, #4]
   35a7c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   35a80:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   35a84:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   35a88:	f04f 0b05 	mov.w	fp, #5
   35a8c:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   35a90:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   35a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35a94:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   35a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35a98:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   35a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35a9c:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   35a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   35aa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35aa4:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35aa6:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   35aa8:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   35aaa:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   35aac:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   35aae:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   35ab2:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   35ab6:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35aba:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   35abe:	4798      	blx	r3
   35ac0:	462b      	mov	r3, r5
   35ac2:	2200      	movs	r2, #0
   35ac4:	2104      	movs	r1, #4
   35ac6:	47b0      	blx	r6
	return user_op->status;
   35ac8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   35ace:	2001      	movs	r0, #1
}
   35ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ad4:	20004ec0 	.word	0x20004ec0

00035ad8 <ticker_update>:
{
   35ad8:	b510      	push	{r4, lr}
   35ada:	b088      	sub	sp, #32
   35adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35ade:	9400      	str	r4, [sp, #0]
{
   35ae0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35ae2:	9401      	str	r4, [sp, #4]
{
   35ae4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35ae6:	9402      	str	r4, [sp, #8]
{
   35ae8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35aec:	9403      	str	r4, [sp, #12]
{
   35aee:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35af2:	9404      	str	r4, [sp, #16]
{
   35af4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35af6:	9405      	str	r4, [sp, #20]
{
   35af8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35afa:	9406      	str	r4, [sp, #24]
   35afc:	2400      	movs	r4, #0
   35afe:	9407      	str	r4, [sp, #28]
   35b00:	f7ff ff94 	bl	35a2c <ticker_update_ext>
}
   35b04:	b008      	add	sp, #32
   35b06:	bd10      	pop	{r4, pc}

00035b08 <ticker_stop>:
{
   35b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   35b0c:	4c1e      	ldr	r4, [pc, #120]	; (35b88 <ticker_stop+0x80>)
{
   35b0e:	4684      	mov	ip, r0
   35b10:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   35b12:	212c      	movs	r1, #44	; 0x2c
   35b14:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   35b18:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   35b1c:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   35b20:	684d      	ldr	r5, [r1, #4]
   35b22:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   35b26:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   35b2a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   35b2e:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   35b30:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   35b34:	f10e 0c01 	add.w	ip, lr, #1
   35b38:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35b3c:	4567      	cmp	r7, ip
   35b3e:	bf98      	it	ls
   35b40:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35b44:	4565      	cmp	r5, ip
   35b46:	d01c      	beq.n	35b82 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   35b48:	6877      	ldr	r7, [r6, #4]
   35b4a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   35b4e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   35b52:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   35b56:	f04f 0807 	mov.w	r8, #7
   35b5a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   35b5e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   35b60:	9b06      	ldr	r3, [sp, #24]
   35b62:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35b64:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   35b66:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   35b68:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   35b6a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35b6e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   35b72:	4798      	blx	r3
   35b74:	4623      	mov	r3, r4
   35b76:	2200      	movs	r2, #0
   35b78:	2104      	movs	r1, #4
   35b7a:	47b0      	blx	r6
	return user_op->status;
   35b7c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   35b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   35b82:	2001      	movs	r0, #1
}
   35b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35b88:	20004ec0 	.word	0x20004ec0

00035b8c <ticker_next_slot_get>:
{
   35b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   35b90:	4d20      	ldr	r5, [pc, #128]	; (35c14 <ticker_next_slot_get+0x88>)
{
   35b92:	4684      	mov	ip, r0
   35b94:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   35b96:	212c      	movs	r1, #44	; 0x2c
   35b98:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   35b9c:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   35ba0:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   35ba4:	684c      	ldr	r4, [r1, #4]
   35ba6:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   35baa:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   35bae:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   35bb2:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   35bb4:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   35bb8:	f10e 0c01 	add.w	ip, lr, #1
   35bbc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35bc0:	4567      	cmp	r7, ip
   35bc2:	bf98      	it	ls
   35bc4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35bc8:	4564      	cmp	r4, ip
   35bca:	d020      	beq.n	35c0e <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   35bcc:	6877      	ldr	r7, [r6, #4]
   35bce:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   35bd2:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   35bd6:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   35bda:	f64f 7802 	movw	r8, #65282	; 0xff02
   35bde:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   35be2:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   35be6:	9b06      	ldr	r3, [sp, #24]
   35be8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   35bea:	9b07      	ldr	r3, [sp, #28]
   35bec:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   35bee:	9b08      	ldr	r3, [sp, #32]
   35bf0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35bf2:	2302      	movs	r3, #2
   35bf4:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   35bf6:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35bfa:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   35bfe:	4798      	blx	r3
   35c00:	462b      	mov	r3, r5
   35c02:	2200      	movs	r2, #0
   35c04:	2104      	movs	r1, #4
   35c06:	47b0      	blx	r6
	return user_op->status;
   35c08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   35c0e:	2001      	movs	r0, #1
}
   35c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35c14:	20004ec0 	.word	0x20004ec0

00035c18 <ticker_job_sched>:
{
   35c18:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35c1a:	4d0a      	ldr	r5, [pc, #40]	; (35c44 <ticker_job_sched+0x2c>)
   35c1c:	222c      	movs	r2, #44	; 0x2c
   35c1e:	fb02 5200 	mla	r2, r2, r0, r5
   35c22:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   35c26:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35c28:	4608      	mov	r0, r1
   35c2a:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   35c2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   35c30:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35c34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   35c38:	46b4      	mov	ip, r6
   35c3a:	2200      	movs	r2, #0
}
   35c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35c40:	2104      	movs	r1, #4
   35c42:	4760      	bx	ip
   35c44:	20004ec0 	.word	0x20004ec0

00035c48 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   35c48:	f00d ba56 	b.w	430f8 <cntr_cnt_get>

00035c4c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35c4c:	1a40      	subs	r0, r0, r1
}
   35c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   35c52:	4770      	bx	lr

00035c54 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   35c54:	b570      	push	{r4, r5, r6, lr}
   35c56:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   35c58:	2000      	movs	r0, #0
{
   35c5a:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   35c5c:	f003 fbe8 	bl	39430 <ull_adv_is_enabled>
   35c60:	b998      	cbnz	r0, 35c8a <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   35c62:	f003 fe05 	bl	39870 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   35c66:	f010 0606 	ands.w	r6, r0, #6
   35c6a:	d10e      	bne.n	35c8a <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   35c6c:	b134      	cbz	r4, 35c7c <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   35c6e:	2206      	movs	r2, #6
   35c70:	4629      	mov	r1, r5
   35c72:	4807      	ldr	r0, [pc, #28]	; (35c90 <ll_addr_set+0x3c>)
   35c74:	f016 fd1f 	bl	4c6b6 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   35c78:	4630      	mov	r0, r6
}
   35c7a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   35c7c:	2206      	movs	r2, #6
   35c7e:	4629      	mov	r1, r5
   35c80:	4804      	ldr	r0, [pc, #16]	; (35c94 <ll_addr_set+0x40>)
   35c82:	f016 fd18 	bl	4c6b6 <memcpy>
	return 0;
   35c86:	4620      	mov	r0, r4
}
   35c88:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   35c8a:	200c      	movs	r0, #12
}
   35c8c:	bd70      	pop	{r4, r5, r6, pc}
   35c8e:	bf00      	nop
   35c90:	20004ef4 	.word	0x20004ef4
   35c94:	20004eec 	.word	0x20004eec

00035c98 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35c98:	2801      	cmp	r0, #1
{
   35c9a:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35c9c:	d805      	bhi.n	35caa <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   35c9e:	4a04      	ldr	r2, [pc, #16]	; (35cb0 <ll_addr_get+0x18>)
   35ca0:	4804      	ldr	r0, [pc, #16]	; (35cb4 <ll_addr_get+0x1c>)
   35ca2:	2b00      	cmp	r3, #0
   35ca4:	bf18      	it	ne
   35ca6:	4610      	movne	r0, r2
   35ca8:	4770      	bx	lr
		return NULL;
   35caa:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   35cac:	4770      	bx	lr
   35cae:	bf00      	nop
   35cb0:	20004ef4 	.word	0x20004ef4
   35cb4:	20004eec 	.word	0x20004eec

00035cb8 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35cb8:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   35cba:	b510      	push	{r4, lr}
   35cbc:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35cbe:	d80b      	bhi.n	35cd8 <ll_addr_read+0x20>
	if (addr_type) {
   35cc0:	4608      	mov	r0, r1
		return rnd_addr;
   35cc2:	4c07      	ldr	r4, [pc, #28]	; (35ce0 <ll_addr_read+0x28>)
   35cc4:	4907      	ldr	r1, [pc, #28]	; (35ce4 <ll_addr_read+0x2c>)
   35cc6:	2b00      	cmp	r3, #0
   35cc8:	bf18      	it	ne
   35cca:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   35ccc:	2206      	movs	r2, #6
   35cce:	4621      	mov	r1, r4
   35cd0:	f016 fcf1 	bl	4c6b6 <memcpy>
	}

	return addr;
}
   35cd4:	4620      	mov	r0, r4
   35cd6:	bd10      	pop	{r4, pc}
		return NULL;
   35cd8:	2400      	movs	r4, #0
}
   35cda:	4620      	mov	r0, r4
   35cdc:	bd10      	pop	{r4, pc}
   35cde:	bf00      	nop
   35ce0:	20004eec 	.word	0x20004eec
   35ce4:	20004ef4 	.word	0x20004ef4

00035ce8 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   35ce8:	2802      	cmp	r0, #2
   35cea:	d001      	beq.n	35cf0 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   35cec:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   35cee:	4770      	bx	lr
{
   35cf0:	b538      	push	{r3, r4, r5, lr}
   35cf2:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   35cf4:	4608      	mov	r0, r1
   35cf6:	461d      	mov	r5, r3
   35cf8:	f004 fc7a 	bl	3a5f0 <ll_connected_get>
			if (!conn) {
   35cfc:	b118      	cbz	r0, 35d06 <ll_tx_pwr_lvl_get+0x1e>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   35cfe:	2308      	movs	r3, #8
   35d00:	702b      	strb	r3, [r5, #0]
	return BT_HCI_ERR_SUCCESS;
   35d02:	2000      	movs	r0, #0
}
   35d04:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35d06:	4620      	mov	r0, r4
}
   35d08:	bd38      	pop	{r3, r4, r5, pc}
   35d0a:	bf00      	nop

00035d0c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   35d0c:	2308      	movs	r3, #8
   35d0e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   35d10:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   35d12:	4770      	bx	lr

00035d14 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   35d14:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   35d16:	4802      	ldr	r0, [pc, #8]	; (35d20 <hci_driver_init+0xc>)
   35d18:	f7f8 fefa 	bl	2eb10 <bt_hci_driver_register>

	return 0;
}
   35d1c:	2000      	movs	r0, #0
   35d1e:	bd08      	pop	{r3, pc}
   35d20:	000551b0 	.word	0x000551b0

00035d24 <hci_driver_send>:
{
   35d24:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   35d26:	8983      	ldrh	r3, [r0, #12]
{
   35d28:	b083      	sub	sp, #12
	if (!buf->len) {
   35d2a:	b123      	cbz	r3, 35d36 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   35d2c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   35d2e:	4604      	mov	r4, r0
   35d30:	b1c3      	cbz	r3, 35d64 <hci_driver_send+0x40>
   35d32:	2b02      	cmp	r3, #2
   35d34:	d004      	beq.n	35d40 <hci_driver_send+0x1c>
   35d36:	f06f 0515 	mvn.w	r5, #21
}
   35d3a:	4628      	mov	r0, r5
   35d3c:	b003      	add	sp, #12
   35d3e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   35d40:	a901      	add	r1, sp, #4
   35d42:	f000 ffcb 	bl	36cdc <hci_acl_handle>
	if (evt) {
   35d46:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   35d48:	4605      	mov	r5, r0
	if (evt) {
   35d4a:	b113      	cbz	r3, 35d52 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   35d4c:	4618      	mov	r0, r3
   35d4e:	f7f8 fec1 	bl	2ead4 <bt_recv_prio>
	if (!err) {
   35d52:	2d00      	cmp	r5, #0
   35d54:	d1f1      	bne.n	35d3a <hci_driver_send+0x16>
		net_buf_unref(buf);
   35d56:	4620      	mov	r0, r4
   35d58:	f00e f9ac 	bl	440b4 <net_buf_unref>
   35d5c:	2500      	movs	r5, #0
}
   35d5e:	4628      	mov	r0, r5
   35d60:	b003      	add	sp, #12
   35d62:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   35d64:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   35d66:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   35d68:	f000 faa0 	bl	362ac <hci_cmd_handle>
	if (evt) {
   35d6c:	2800      	cmp	r0, #0
   35d6e:	d0f2      	beq.n	35d56 <hci_driver_send+0x32>
		bt_recv_prio(evt);
   35d70:	f7f8 feb0 	bl	2ead4 <bt_recv_prio>
		if (node_rx) {
   35d74:	9d01      	ldr	r5, [sp, #4]
   35d76:	2d00      	cmp	r5, #0
   35d78:	d0ed      	beq.n	35d56 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35d7a:	4628      	mov	r0, r5
   35d7c:	f001 fc86 	bl	3768c <hci_get_class>
   35d80:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   35d82:	9901      	ldr	r1, [sp, #4]
   35d84:	4801      	ldr	r0, [pc, #4]	; (35d8c <hci_driver_send+0x68>)
   35d86:	f01b fcf7 	bl	51778 <k_queue_append>
	if (!err) {
   35d8a:	e7e4      	b.n	35d56 <hci_driver_send+0x32>
   35d8c:	20001514 	.word	0x20001514

00035d90 <recv_thread>:
{
   35d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   35d92:	4e41      	ldr	r6, [pc, #260]	; (35e98 <recv_thread+0x108>)
		LL_ASSERT(0);
   35d94:	4f41      	ldr	r7, [pc, #260]	; (35e9c <recv_thread+0x10c>)
{
   35d96:	b083      	sub	sp, #12
   35d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35da0:	4630      	mov	r0, r6
   35da2:	f012 fd51 	bl	48848 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   35da6:	2800      	cmp	r0, #0
   35da8:	d0f6      	beq.n	35d98 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   35daa:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   35dac:	9001      	str	r0, [sp, #4]
	switch (class) {
   35dae:	2b04      	cmp	r3, #4
   35db0:	d821      	bhi.n	35df6 <recv_thread+0x66>
   35db2:	2b00      	cmp	r3, #0
   35db4:	d14b      	bne.n	35e4e <recv_thread+0xbe>
		LL_ASSERT(0);
   35db6:	493a      	ldr	r1, [pc, #232]	; (35ea0 <recv_thread+0x110>)
   35db8:	483a      	ldr	r0, [pc, #232]	; (35ea4 <recv_thread+0x114>)
   35dba:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   35dbe:	463a      	mov	r2, r7
   35dc0:	f014 fb71 	bl	4a4a6 <printk>
   35dc4:	4040      	eors	r0, r0
   35dc6:	f380 8811 	msr	BASEPRI, r0
   35dca:	f04f 0003 	mov.w	r0, #3
   35dce:	df02      	svc	2
	node_rx->hdr.next = NULL;
   35dd0:	9b01      	ldr	r3, [sp, #4]
   35dd2:	2200      	movs	r2, #0
   35dd4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35dd6:	a801      	add	r0, sp, #4
   35dd8:	f002 f902 	bl	37fe0 <ll_rx_mem_release>
   35ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35de4:	4630      	mov	r0, r6
   35de6:	f012 fd2f 	bl	48848 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   35dea:	2800      	cmp	r0, #0
   35dec:	d0d4      	beq.n	35d98 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   35dee:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   35df0:	9001      	str	r0, [sp, #4]
	switch (class) {
   35df2:	2b04      	cmp	r3, #4
   35df4:	d9dd      	bls.n	35db2 <recv_thread+0x22>
   35df6:	2b05      	cmp	r3, #5
   35df8:	d1dd      	bne.n	35db6 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   35dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35e02:	2003      	movs	r0, #3
   35e04:	f7f8 f890 	bl	2df28 <bt_buf_get_rx>
   35e08:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   35e0a:	4621      	mov	r1, r4
   35e0c:	9801      	ldr	r0, [sp, #4]
   35e0e:	f000 fff1 	bl	36df4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   35e12:	9b01      	ldr	r3, [sp, #4]
   35e14:	2200      	movs	r2, #0
   35e16:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35e18:	a801      	add	r0, sp, #4
   35e1a:	f002 f8e1 	bl	37fe0 <ll_rx_mem_release>
		while (buf) {
   35e1e:	2c00      	cmp	r4, #0
   35e20:	d0ba      	beq.n	35d98 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   35e22:	4620      	mov	r0, r4
   35e24:	f01a fc3e 	bl	506a4 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   35e28:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   35e2a:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   35e2c:	2000      	movs	r0, #0
   35e2e:	f01a fc5f 	bl	506f0 <net_buf_frag_del>
			if (frag->len) {
   35e32:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   35e34:	4604      	mov	r4, r0
				bt_recv(frag);
   35e36:	4628      	mov	r0, r5
			if (frag->len) {
   35e38:	b133      	cbz	r3, 35e48 <recv_thread+0xb8>
				bt_recv(frag);
   35e3a:	f7f8 fdc7 	bl	2e9cc <bt_recv>
	z_impl_k_yield();
   35e3e:	f013 f993 	bl	49168 <z_impl_k_yield>
		while (buf) {
   35e42:	2c00      	cmp	r4, #0
   35e44:	d1ed      	bne.n	35e22 <recv_thread+0x92>
   35e46:	e7a7      	b.n	35d98 <recv_thread+0x8>
				net_buf_unref(frag);
   35e48:	f00e f934 	bl	440b4 <net_buf_unref>
   35e4c:	e7f7      	b.n	35e3e <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   35e4e:	2b02      	cmp	r3, #2
   35e50:	d013      	beq.n	35e7a <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   35e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35e5a:	2001      	movs	r0, #1
   35e5c:	f7f8 f864 	bl	2df28 <bt_buf_get_rx>
   35e60:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   35e62:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   35e64:	b19c      	cbz	r4, 35e8e <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   35e66:	4621      	mov	r1, r4
   35e68:	f000 fffe 	bl	36e68 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   35e6c:	9b01      	ldr	r3, [sp, #4]
   35e6e:	2200      	movs	r2, #0
   35e70:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35e72:	a801      	add	r0, sp, #4
   35e74:	f002 f8b4 	bl	37fe0 <ll_rx_mem_release>
		while (buf) {
   35e78:	e7d3      	b.n	35e22 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   35e7a:	2200      	movs	r2, #0
   35e7c:	2300      	movs	r3, #0
   35e7e:	2101      	movs	r1, #1
   35e80:	2000      	movs	r0, #0
   35e82:	f7f8 f87b 	bl	2df7c <bt_buf_get_evt>
   35e86:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   35e88:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   35e8a:	2c00      	cmp	r4, #0
   35e8c:	d1eb      	bne.n	35e66 <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   35e8e:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   35e90:	a801      	add	r0, sp, #4
   35e92:	f002 f8a5 	bl	37fe0 <ll_rx_mem_release>
		while (buf) {
   35e96:	e77f      	b.n	35d98 <recv_thread+0x8>
   35e98:	20001514 	.word	0x20001514
   35e9c:	0005514c 	.word	0x0005514c
   35ea0:	0005518c 	.word	0x0005518c
   35ea4:	0005512c 	.word	0x0005512c

00035ea8 <prio_recv_thread>:
{
   35ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   35eac:	4f2e      	ldr	r7, [pc, #184]	; (35f68 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   35eae:	4e2f      	ldr	r6, [pc, #188]	; (35f6c <prio_recv_thread+0xc4>)
{
   35eb0:	b082      	sub	sp, #8
   35eb2:	e00c      	b.n	35ece <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35eb4:	f7f8 f862 	bl	2df7c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35eb8:	4622      	mov	r2, r4
   35eba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35ebe:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35ec0:	f001 fbcc 	bl	3765c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   35ec4:	4620      	mov	r0, r4
   35ec6:	f7f8 fe05 	bl	2ead4 <bt_recv_prio>
	z_impl_k_yield();
   35eca:	f013 f94d 	bl	49168 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35ece:	f10d 0102 	add.w	r1, sp, #2
   35ed2:	a801      	add	r0, sp, #4
   35ed4:	f001 fed4 	bl	37c80 <ll_rx_get>
   35ed8:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35ee2:	2100      	movs	r1, #0
   35ee4:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35ee6:	2c00      	cmp	r4, #0
   35ee8:	d1e4      	bne.n	35eb4 <prio_recv_thread+0xc>
		if (node_rx) {
   35eea:	9b01      	ldr	r3, [sp, #4]
   35eec:	b1b3      	cbz	r3, 35f1c <prio_recv_thread+0x74>
			ll_rx_dequeue();
   35eee:	f001 ffa9 	bl	37e44 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35ef2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   35ef6:	4640      	mov	r0, r8
   35ef8:	f001 fbc8 	bl	3768c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   35efc:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35efe:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   35f02:	796b      	ldrb	r3, [r5, #5]
   35f04:	2b03      	cmp	r3, #3
   35f06:	d102      	bne.n	35f0e <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   35f08:	792b      	ldrb	r3, [r5, #4]
   35f0a:	2b17      	cmp	r3, #23
   35f0c:	d00e      	beq.n	35f2c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   35f0e:	4629      	mov	r1, r5
   35f10:	4630      	mov	r0, r6
   35f12:	f01b fc31 	bl	51778 <k_queue_append>
		if (iso_received || node_rx) {
   35f16:	9b01      	ldr	r3, [sp, #4]
   35f18:	2b00      	cmp	r3, #0
   35f1a:	d1d8      	bne.n	35ece <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   35f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35f24:	4638      	mov	r0, r7
   35f26:	f012 fce9 	bl	488fc <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35f2a:	e7d0      	b.n	35ece <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35f30:	4621      	mov	r1, r4
   35f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35f36:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   35f38:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35f3c:	f7f8 f81e 	bl	2df7c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35f40:	4641      	mov	r1, r8
   35f42:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35f44:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35f46:	f105 001c 	add.w	r0, r5, #28
   35f4a:	f000 ff2b 	bl	36da4 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   35f4e:	4640      	mov	r0, r8
   35f50:	f000 ff48 	bl	36de4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   35f54:	4620      	mov	r0, r4
			if (buf) {
   35f56:	b124      	cbz	r4, 35f62 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   35f58:	f7f8 fdbc 	bl	2ead4 <bt_recv_prio>
					net_buf_unref(buf);
   35f5c:	4620      	mov	r0, r4
   35f5e:	f00e f8a9 	bl	440b4 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   35f62:	9d01      	ldr	r5, [sp, #4]
   35f64:	e7d3      	b.n	35f0e <prio_recv_thread+0x66>
   35f66:	bf00      	nop
   35f68:	200014e4 	.word	0x200014e4
   35f6c:	20001514 	.word	0x20001514

00035f70 <hci_driver_open>:
{
   35f70:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   35f72:	481a      	ldr	r0, [pc, #104]	; (35fdc <hci_driver_open+0x6c>)
{
   35f74:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   35f76:	f002 fcb7 	bl	388e8 <ll_init>
	if (err) {
   35f7a:	4604      	mov	r4, r0
   35f7c:	bb58      	cbnz	r0, 35fd6 <hci_driver_open+0x66>
	hci_init(NULL);
   35f7e:	f001 fb9b 	bl	376b8 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   35f82:	2600      	movs	r6, #0
   35f84:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35f86:	f06f 0209 	mvn.w	r2, #9
   35f8a:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35f8e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35f92:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35f96:	4b12      	ldr	r3, [pc, #72]	; (35fe0 <hci_driver_open+0x70>)
   35f98:	4912      	ldr	r1, [pc, #72]	; (35fe4 <hci_driver_open+0x74>)
   35f9a:	9400      	str	r4, [sp, #0]
   35f9c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   35fa0:	4811      	ldr	r0, [pc, #68]	; (35fe8 <hci_driver_open+0x78>)
   35fa2:	f012 fa43 	bl	4842c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35fa6:	4911      	ldr	r1, [pc, #68]	; (35fec <hci_driver_open+0x7c>)
   35fa8:	480f      	ldr	r0, [pc, #60]	; (35fe8 <hci_driver_open+0x78>)
   35faa:	f01b fb4e 	bl	5164a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35fae:	f06f 0207 	mvn.w	r2, #7
   35fb2:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35fb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35fba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35fbe:	4b0c      	ldr	r3, [pc, #48]	; (35ff0 <hci_driver_open+0x80>)
   35fc0:	490c      	ldr	r1, [pc, #48]	; (35ff4 <hci_driver_open+0x84>)
   35fc2:	9400      	str	r4, [sp, #0]
   35fc4:	f640 0298 	movw	r2, #2200	; 0x898
   35fc8:	480b      	ldr	r0, [pc, #44]	; (35ff8 <hci_driver_open+0x88>)
   35fca:	f012 fa2f 	bl	4842c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35fce:	490b      	ldr	r1, [pc, #44]	; (35ffc <hci_driver_open+0x8c>)
   35fd0:	4809      	ldr	r0, [pc, #36]	; (35ff8 <hci_driver_open+0x88>)
   35fd2:	f01b fb3a 	bl	5164a <z_impl_k_thread_name_set>
}
   35fd6:	4620      	mov	r0, r4
   35fd8:	b008      	add	sp, #32
   35fda:	bdd0      	pop	{r4, r6, r7, pc}
   35fdc:	200014e4 	.word	0x200014e4
   35fe0:	00035ea9 	.word	0x00035ea9
   35fe4:	20008bd0 	.word	0x20008bd0
   35fe8:	20003470 	.word	0x20003470
   35fec:	00055190 	.word	0x00055190
   35ff0:	00035d91 	.word	0x00035d91
   35ff4:	20008d90 	.word	0x20008d90
   35ff8:	200034f0 	.word	0x200034f0
   35ffc:	0005519c 	.word	0x0005519c

00036000 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   36000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   36004:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 360b0 <dup_found.part.0+0xb0>
   36008:	f8d9 3000 	ldr.w	r3, [r9]
   3600c:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   3600e:	4680      	mov	r8, r0
   36010:	460f      	mov	r7, r1
   36012:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   36014:	dd12      	ble.n	3603c <dup_found.part.0+0x3c>
   36016:	4c27      	ldr	r4, [pc, #156]	; (360b4 <dup_found.part.0+0xb4>)
   36018:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   3601a:	4621      	mov	r1, r4
   3601c:	2206      	movs	r2, #6
   3601e:	4630      	mov	r0, r6
   36020:	f016 fb38 	bl	4c694 <memcmp>
   36024:	b918      	cbnz	r0, 3602e <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   36026:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   3602a:	42bb      	cmp	r3, r7
   3602c:	d029      	beq.n	36082 <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
   3602e:	f8d9 3000 	ldr.w	r3, [r9]
   36032:	3501      	adds	r5, #1
   36034:	429d      	cmp	r5, r3
   36036:	f104 0408 	add.w	r4, r4, #8
   3603a:	dbee      	blt.n	3601a <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   3603c:	4d1e      	ldr	r5, [pc, #120]	; (360b8 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   3603e:	4c1f      	ldr	r4, [pc, #124]	; (360bc <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
   36040:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   36044:	4631      	mov	r1, r6
   36046:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   3604a:	1c70      	adds	r0, r6, #1
   3604c:	4420      	add	r0, r4
   3604e:	2206      	movs	r2, #6
   36050:	f016 fb31 	bl	4c6b6 <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   36054:	2301      	movs	r3, #1
   36056:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   3605a:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   3605e:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
   36062:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   36064:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   36066:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   3606a:	dc1c      	bgt.n	360a6 <dup_found.part.0+0xa6>
			dup_count++;
   3606c:	3301      	adds	r3, #1
			dup_curr = dup_count;
   3606e:	461a      	mov	r2, r3
			dup_count++;
   36070:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   36074:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
   36076:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   36078:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   3607a:	bf08      	it	eq
   3607c:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
   3607e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   36082:	4b0e      	ldr	r3, [pc, #56]	; (360bc <dup_found.part.0+0xbc>)
   36084:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   36088:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   3608a:	79ea      	ldrb	r2, [r5, #7]
   3608c:	fa22 f308 	lsr.w	r3, r2, r8
   36090:	f013 0301 	ands.w	r3, r3, #1
   36094:	d1f3      	bne.n	3607e <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
   36096:	fa00 f808 	lsl.w	r8, r0, r8
   3609a:	ea42 0208 	orr.w	r2, r2, r8
   3609e:	71ea      	strb	r2, [r5, #7]
		return false;
   360a0:	4618      	mov	r0, r3
}
   360a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
   360a6:	682a      	ldr	r2, [r5, #0]
   360a8:	3201      	adds	r2, #1
   360aa:	602a      	str	r2, [r5, #0]
   360ac:	e7e3      	b.n	36076 <dup_found.part.0+0x76>
   360ae:	bf00      	nop
   360b0:	20004f00 	.word	0x20004f00
   360b4:	20004f09 	.word	0x20004f09
   360b8:	20004f04 	.word	0x20004f04
   360bc:	20004f08 	.word	0x20004f08

000360c0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   360c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   360c2:	4c19      	ldr	r4, [pc, #100]	; (36128 <le_remote_feat_complete+0x68>)
   360c4:	6864      	ldr	r4, [r4, #4]
   360c6:	00a4      	lsls	r4, r4, #2
   360c8:	d504      	bpl.n	360d4 <le_remote_feat_complete+0x14>
   360ca:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   360cc:	4a17      	ldr	r2, [pc, #92]	; (3612c <le_remote_feat_complete+0x6c>)
   360ce:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   360d0:	0712      	lsls	r2, r2, #28
   360d2:	d400      	bmi.n	360d6 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   360d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   360d6:	f103 0408 	add.w	r4, r3, #8
   360da:	4607      	mov	r7, r0
   360dc:	460e      	mov	r6, r1
   360de:	4620      	mov	r0, r4
   360e0:	2102      	movs	r1, #2
   360e2:	f01a fb11 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   360e6:	233e      	movs	r3, #62	; 0x3e
   360e8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   360ea:	230c      	movs	r3, #12
   360ec:	7043      	strb	r3, [r0, #1]
   360ee:	2101      	movs	r1, #1
   360f0:	4620      	mov	r0, r4
   360f2:	f01a fb09 	bl	50708 <net_buf_simple_add>
   360f6:	4603      	mov	r3, r0
	me->subevent = subevt;
   360f8:	2204      	movs	r2, #4
   360fa:	701a      	strb	r2, [r3, #0]
   360fc:	4620      	mov	r0, r4
   360fe:	210b      	movs	r1, #11
   36100:	f01a fb02 	bl	50708 <net_buf_simple_add>
		memcpy(&sep->features[0],
   36104:	2208      	movs	r2, #8
	sep->status = status;
   36106:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   36108:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   3610c:	b92f      	cbnz	r7, 3611a <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   3610e:	1d31      	adds	r1, r6, #4
   36110:	3003      	adds	r0, #3
}
   36112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   36116:	f016 bace 	b.w	4c6b6 <memcpy>
}
   3611a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   3611e:	2100      	movs	r1, #0
   36120:	3003      	adds	r0, #3
   36122:	f016 bad3 	b.w	4c6cc <memset>
   36126:	bf00      	nop
   36128:	20000198 	.word	0x20000198
   3612c:	200001a0 	.word	0x200001a0

00036130 <hci_vendor_cmd_handle_common>:
{
   36130:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   36132:	3801      	subs	r0, #1
{
   36134:	b087      	sub	sp, #28
   36136:	4615      	mov	r5, r2
	switch (ocf) {
   36138:	2809      	cmp	r0, #9
   3613a:	d806      	bhi.n	3614a <hci_vendor_cmd_handle_common+0x1a>
   3613c:	e8df f000 	tbb	[pc, r0]
   36140:	05432609 	.word	0x05432609
   36144:	6b055705 	.word	0x6b055705
   36148:	9d88      	.short	0x9d88
   3614a:	f06f 0015 	mvn.w	r0, #21
}
   3614e:	b007      	add	sp, #28
   36150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36152:	4b54      	ldr	r3, [pc, #336]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
   36154:	210d      	movs	r1, #13
   36156:	8818      	ldrh	r0, [r3, #0]
   36158:	f016 ffbb 	bl	4d0d2 <bt_hci_cmd_complete_create>
   3615c:	210d      	movs	r1, #13
   3615e:	6028      	str	r0, [r5, #0]
   36160:	3008      	adds	r0, #8
   36162:	f01a fad1 	bl	50708 <net_buf_simple_add>
   36166:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   36168:	2202      	movs	r2, #2
	rp->status = 0x00;
   3616a:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   3616c:	2103      	movs	r1, #3
	rp->status = 0x00;
   3616e:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   36170:	705a      	strb	r2, [r3, #1]
   36172:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   36174:	70da      	strb	r2, [r3, #3]
   36176:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   36178:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   3617a:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   3617c:	71d8      	strb	r0, [r3, #7]
   3617e:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   36180:	7258      	strb	r0, [r3, #9]
   36182:	7298      	strb	r0, [r3, #10]
   36184:	72d8      	strb	r0, [r3, #11]
   36186:	7318      	strb	r0, [r3, #12]
}
   36188:	b007      	add	sp, #28
   3618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3618c:	4b45      	ldr	r3, [pc, #276]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
   3618e:	2141      	movs	r1, #65	; 0x41
   36190:	8818      	ldrh	r0, [r3, #0]
   36192:	f016 ff9e 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36196:	2141      	movs	r1, #65	; 0x41
   36198:	6028      	str	r0, [r5, #0]
   3619a:	3008      	adds	r0, #8
   3619c:	f01a fab4 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   361a0:	2400      	movs	r4, #0
   361a2:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   361a4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   361a6:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   361aa:	4621      	mov	r1, r4
   361ac:	f016 fa8e 	bl	4c6cc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   361b0:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   361b2:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   361b4:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   361b8:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   361bc:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   361be:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   361c0:	70ab      	strb	r3, [r5, #2]
}
   361c2:	b007      	add	sp, #28
   361c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   361c6:	4b37      	ldr	r3, [pc, #220]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
   361c8:	2109      	movs	r1, #9
   361ca:	8818      	ldrh	r0, [r3, #0]
   361cc:	f016 ff81 	bl	4d0d2 <bt_hci_cmd_complete_create>
   361d0:	2109      	movs	r1, #9
   361d2:	6028      	str	r0, [r5, #0]
   361d4:	3008      	adds	r0, #8
   361d6:	f01a fa97 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   361da:	2400      	movs	r4, #0
   361dc:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   361e0:	2208      	movs	r2, #8
   361e2:	4621      	mov	r1, r4
   361e4:	f016 fa72 	bl	4c6cc <memset>
	return 0;
   361e8:	4620      	mov	r0, r4
}
   361ea:	b007      	add	sp, #28
   361ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   361ee:	6889      	ldr	r1, [r1, #8]
   361f0:	2000      	movs	r0, #0
   361f2:	f7ff fd2f 	bl	35c54 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   361f6:	4b2b      	ldr	r3, [pc, #172]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
   361f8:	2101      	movs	r1, #1
   361fa:	8818      	ldrh	r0, [r3, #0]
   361fc:	f016 ff69 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36200:	2101      	movs	r1, #1
   36202:	4604      	mov	r4, r0
   36204:	3008      	adds	r0, #8
   36206:	f01a fa7f 	bl	50708 <net_buf_simple_add>
   3620a:	4603      	mov	r3, r0
	ccst->status = status;
   3620c:	2000      	movs	r0, #0
   3620e:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   36210:	602c      	str	r4, [r5, #0]
}
   36212:	b007      	add	sp, #28
   36214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   36216:	4e24      	ldr	r6, [pc, #144]	; (362a8 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36218:	4f22      	ldr	r7, [pc, #136]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   3621a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   3621c:	f10d 0c04 	add.w	ip, sp, #4
   36220:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   36224:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36226:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   36228:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3622c:	2112      	movs	r1, #18
   3622e:	f016 ff50 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36232:	2112      	movs	r1, #18
   36234:	6028      	str	r0, [r5, #0]
   36236:	3008      	adds	r0, #8
   36238:	f01a fa66 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   3623c:	2400      	movs	r4, #0
   3623e:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   36242:	2211      	movs	r2, #17
   36244:	a901      	add	r1, sp, #4
   36246:	f016 fa36 	bl	4c6b6 <memcpy>
	return 0;
   3624a:	4620      	mov	r0, r4
}
   3624c:	b007      	add	sp, #28
   3624e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36250:	4b14      	ldr	r3, [pc, #80]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
   36252:	2118      	movs	r1, #24
   36254:	8818      	ldrh	r0, [r3, #0]
   36256:	f016 ff3c 	bl	4d0d2 <bt_hci_cmd_complete_create>
   3625a:	2118      	movs	r1, #24
   3625c:	6028      	str	r0, [r5, #0]
   3625e:	3008      	adds	r0, #8
   36260:	f01a fa52 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36264:	2400      	movs	r4, #0
   36266:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   36268:	2101      	movs	r1, #1
	rp->status = 0x00;
   3626a:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   3626e:	f00d fda1 	bl	43db4 <hci_vendor_read_static_addr>
   36272:	7068      	strb	r0, [r5, #1]
	return 0;
   36274:	4620      	mov	r0, r4
}
   36276:	b007      	add	sp, #28
   36278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3627a:	4b0a      	ldr	r3, [pc, #40]	; (362a4 <hci_vendor_cmd_handle_common+0x174>)
   3627c:	2121      	movs	r1, #33	; 0x21
   3627e:	8818      	ldrh	r0, [r3, #0]
   36280:	f016 ff27 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36284:	2121      	movs	r1, #33	; 0x21
   36286:	6028      	str	r0, [r5, #0]
   36288:	3008      	adds	r0, #8
   3628a:	f01a fa3d 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   3628e:	4601      	mov	r1, r0
   36290:	2400      	movs	r4, #0
   36292:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   36296:	3001      	adds	r0, #1
   36298:	f00d fe00 	bl	43e9c <hci_vendor_read_key_hierarchy_roots>
	return 0;
   3629c:	4620      	mov	r0, r4
}
   3629e:	b007      	add	sp, #28
   362a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   362a2:	bf00      	nop
   362a4:	20007612 	.word	0x20007612
   362a8:	000551c4 	.word	0x000551c4

000362ac <hci_cmd_handle>:
{
   362ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   362ae:	8983      	ldrh	r3, [r0, #12]
{
   362b0:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   362b2:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   362b4:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   362b6:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   362b8:	d930      	bls.n	3631c <hci_cmd_handle+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   362ba:	4604      	mov	r4, r0
   362bc:	460e      	mov	r6, r1
   362be:	3008      	adds	r0, #8
   362c0:	2103      	movs	r1, #3
   362c2:	f01a fa52 	bl	5076a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   362c6:	89a2      	ldrh	r2, [r4, #12]
   362c8:	7883      	ldrb	r3, [r0, #2]
   362ca:	429a      	cmp	r2, r3
   362cc:	d326      	bcc.n	3631c <hci_cmd_handle+0x70>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   362ce:	8802      	ldrh	r2, [r0, #0]
   362d0:	4fb5      	ldr	r7, [pc, #724]	; (365a8 <hci_cmd_handle+0x2fc>)
	switch (BT_OGF(_opcode)) {
   362d2:	f3c2 2385 	ubfx	r3, r2, #10, #6
   362d6:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   362d8:	b290      	uxth	r0, r2
   362da:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   362dc:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   362e0:	d809      	bhi.n	362f6 <hci_cmd_handle+0x4a>
   362e2:	b1a3      	cbz	r3, 3630e <hci_cmd_handle+0x62>
   362e4:	3b01      	subs	r3, #1
   362e6:	2b07      	cmp	r3, #7
   362e8:	d811      	bhi.n	3630e <hci_cmd_handle+0x62>
   362ea:	e8df f003 	tbb	[pc, r3]
   362ee:	101b      	.short	0x101b
   362f0:	10104d2a 	.word	0x10104d2a
   362f4:	6510      	.short	0x6510
   362f6:	2b3f      	cmp	r3, #63	; 0x3f
   362f8:	d109      	bne.n	3630e <hci_cmd_handle+0x62>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   362fa:	4621      	mov	r1, r4
   362fc:	aa09      	add	r2, sp, #36	; 0x24
   362fe:	4628      	mov	r0, r5
   36300:	f7ff ff16 	bl	36130 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   36304:	3016      	adds	r0, #22
	return evt;
   36306:	bf18      	it	ne
   36308:	9c09      	ldrne	r4, [sp, #36]	; 0x24
	if (err == -EINVAL) {
   3630a:	d104      	bne.n	36316 <hci_cmd_handle+0x6a>
	return bt_hci_cmd_status_create(_opcode, status);
   3630c:	8838      	ldrh	r0, [r7, #0]
   3630e:	2101      	movs	r1, #1
   36310:	f016 fef1 	bl	4d0f6 <bt_hci_cmd_status_create>
   36314:	4604      	mov	r4, r0
}
   36316:	4620      	mov	r0, r4
   36318:	b00f      	add	sp, #60	; 0x3c
   3631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   3631c:	2400      	movs	r4, #0
}
   3631e:	4620      	mov	r0, r4
   36320:	b00f      	add	sp, #60	; 0x3c
   36322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   36324:	2d06      	cmp	r5, #6
   36326:	f000 846b 	beq.w	36c00 <hci_cmd_handle+0x954>
   3632a:	2d1d      	cmp	r5, #29
   3632c:	d1ef      	bne.n	3630e <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   3632e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   36330:	8818      	ldrh	r0, [r3, #0]
   36332:	f004 faf9 	bl	3a928 <ll_version_ind_send>
   36336:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36338:	8838      	ldrh	r0, [r7, #0]
   3633a:	f016 fedc 	bl	4d0f6 <bt_hci_cmd_status_create>
   3633e:	4604      	mov	r4, r0
}
   36340:	e7e9      	b.n	36316 <hci_cmd_handle+0x6a>
	switch (ocf) {
   36342:	2d63      	cmp	r5, #99	; 0x63
   36344:	f000 848e 	beq.w	36c64 <hci_cmd_handle+0x9b8>
   36348:	f200 80ec 	bhi.w	36524 <hci_cmd_handle+0x278>
   3634c:	2d03      	cmp	r5, #3
   3634e:	f000 8463 	beq.w	36c18 <hci_cmd_handle+0x96c>
   36352:	2d2d      	cmp	r5, #45	; 0x2d
   36354:	f040 80d2 	bne.w	364fc <hci_cmd_handle+0x250>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   36358:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3635a:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   3635c:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   3635e:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36360:	f016 feb7 	bl	4d0d2 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   36364:	2104      	movs	r1, #4
   36366:	9009      	str	r0, [sp, #36]	; 0x24
   36368:	3008      	adds	r0, #8
   3636a:	f01a f9cd 	bl	50708 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   3636e:	b2b4      	uxth	r4, r6
   36370:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   36372:	1cc3      	adds	r3, r0, #3
   36374:	4621      	mov	r1, r4
   36376:	463a      	mov	r2, r7
   36378:	2002      	movs	r0, #2
   3637a:	f7ff fcb5 	bl	35ce8 <ll_tx_pwr_lvl_get>
	rp->status = status;
   3637e:	7028      	strb	r0, [r5, #0]
	return evt;
   36380:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   36382:	f8a5 6001 	strh.w	r6, [r5, #1]
}
   36386:	e7c6      	b.n	36316 <hci_cmd_handle+0x6a>
	switch (ocf) {
   36388:	1e6a      	subs	r2, r5, #1
   3638a:	2a08      	cmp	r2, #8
   3638c:	d8bf      	bhi.n	3630e <hci_cmd_handle+0x62>
   3638e:	a301      	add	r3, pc, #4	; (adr r3, 36394 <hci_cmd_handle+0xe8>)
   36390:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   36394:	00036663 	.word	0x00036663
   36398:	000365b1 	.word	0x000365b1
   3639c:	0003657f 	.word	0x0003657f
   363a0:	0003630f 	.word	0x0003630f
   363a4:	0003630f 	.word	0x0003630f
   363a8:	0003630f 	.word	0x0003630f
   363ac:	0003630f 	.word	0x0003630f
   363b0:	0003630f 	.word	0x0003630f
   363b4:	0003655d 	.word	0x0003655d
	switch (ocf) {
   363b8:	1e6a      	subs	r2, r5, #1
   363ba:	2a4d      	cmp	r2, #77	; 0x4d
   363bc:	d8a7      	bhi.n	3630e <hci_cmd_handle+0x62>
   363be:	a301      	add	r3, pc, #4	; (adr r3, 363c4 <hci_cmd_handle+0x118>)
   363c0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   363c4:	000368e3 	.word	0x000368e3
   363c8:	000368bf 	.word	0x000368bf
   363cc:	00036a13 	.word	0x00036a13
   363d0:	0003630f 	.word	0x0003630f
   363d4:	00036a09 	.word	0x00036a09
   363d8:	000369ed 	.word	0x000369ed
   363dc:	000369d1 	.word	0x000369d1
   363e0:	000369c5 	.word	0x000369c5
   363e4:	000369b9 	.word	0x000369b9
   363e8:	000369af 	.word	0x000369af
   363ec:	00036997 	.word	0x00036997
   363f0:	00036bd5 	.word	0x00036bd5
   363f4:	00036b9b 	.word	0x00036b9b
   363f8:	00036b93 	.word	0x00036b93
   363fc:	00036b6f 	.word	0x00036b6f
   36400:	00036b69 	.word	0x00036b69
   36404:	00036b61 	.word	0x00036b61
   36408:	00036b59 	.word	0x00036b59
   3640c:	00036b31 	.word	0x00036b31
   36410:	00036b29 	.word	0x00036b29
   36414:	00036afd 	.word	0x00036afd
   36418:	00036ae9 	.word	0x00036ae9
   3641c:	00036ab5 	.word	0x00036ab5
   36420:	00036a93 	.word	0x00036a93
   36424:	00036a75 	.word	0x00036a75
   36428:	00036a6b 	.word	0x00036a6b
   3642c:	00036a5b 	.word	0x00036a5b
   36430:	0003688f 	.word	0x0003688f
   36434:	0003630f 	.word	0x0003630f
   36438:	0003630f 	.word	0x0003630f
   3643c:	0003630f 	.word	0x0003630f
   36440:	00036871 	.word	0x00036871
   36444:	00036859 	.word	0x00036859
   36448:	00036849 	.word	0x00036849
   3644c:	00036813 	.word	0x00036813
   36450:	00036807 	.word	0x00036807
   36454:	0003630f 	.word	0x0003630f
   36458:	0003630f 	.word	0x0003630f
   3645c:	000367f9 	.word	0x000367f9
   36460:	000367f1 	.word	0x000367f1
   36464:	000367eb 	.word	0x000367eb
   36468:	000367c9 	.word	0x000367c9
   3646c:	0003679b 	.word	0x0003679b
   36470:	0003676d 	.word	0x0003676d
   36474:	0003674d 	.word	0x0003674d
   36478:	0003673f 	.word	0x0003673f
   3647c:	000366f3 	.word	0x000366f3
   36480:	00036699 	.word	0x00036699
   36484:	00036979 	.word	0x00036979
   36488:	0003691d 	.word	0x0003691d
   3648c:	0003630f 	.word	0x0003630f
   36490:	0003630f 	.word	0x0003630f
   36494:	0003630f 	.word	0x0003630f
   36498:	0003630f 	.word	0x0003630f
   3649c:	0003630f 	.word	0x0003630f
   364a0:	0003630f 	.word	0x0003630f
   364a4:	0003630f 	.word	0x0003630f
   364a8:	0003630f 	.word	0x0003630f
   364ac:	0003630f 	.word	0x0003630f
   364b0:	0003630f 	.word	0x0003630f
   364b4:	0003630f 	.word	0x0003630f
   364b8:	0003630f 	.word	0x0003630f
   364bc:	0003630f 	.word	0x0003630f
   364c0:	0003630f 	.word	0x0003630f
   364c4:	0003630f 	.word	0x0003630f
   364c8:	0003630f 	.word	0x0003630f
   364cc:	0003630f 	.word	0x0003630f
   364d0:	0003630f 	.word	0x0003630f
   364d4:	0003630f 	.word	0x0003630f
   364d8:	0003630f 	.word	0x0003630f
   364dc:	0003630f 	.word	0x0003630f
   364e0:	0003630f 	.word	0x0003630f
   364e4:	0003630f 	.word	0x0003630f
   364e8:	0003630f 	.word	0x0003630f
   364ec:	000368f9 	.word	0x000368f9
   364f0:	0003630f 	.word	0x0003630f
   364f4:	0003630f 	.word	0x0003630f
   364f8:	000368ef 	.word	0x000368ef
	switch (ocf) {
   364fc:	2d01      	cmp	r5, #1
   364fe:	f47f af06 	bne.w	3630e <hci_cmd_handle+0x62>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36502:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   36504:	4b29      	ldr	r3, [pc, #164]	; (365ac <hci_cmd_handle+0x300>)
   36506:	6811      	ldr	r1, [r2, #0]
   36508:	6852      	ldr	r2, [r2, #4]
   3650a:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3650c:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   3650e:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36510:	f016 fddf 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36514:	2101      	movs	r1, #1
   36516:	4604      	mov	r4, r0
   36518:	3008      	adds	r0, #8
   3651a:	f01a f8f5 	bl	50708 <net_buf_simple_add>
	ccst->status = status;
   3651e:	2300      	movs	r3, #0
   36520:	7003      	strb	r3, [r0, #0]
}
   36522:	e6f8      	b.n	36316 <hci_cmd_handle+0x6a>
	switch (ocf) {
   36524:	2d7b      	cmp	r5, #123	; 0x7b
   36526:	f000 83a0 	beq.w	36c6a <hci_cmd_handle+0x9be>
   3652a:	2d7c      	cmp	r5, #124	; 0x7c
   3652c:	f47f aeef 	bne.w	3630e <hci_cmd_handle+0x62>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   36530:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36532:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   36534:	8859      	ldrh	r1, [r3, #2]
   36536:	b2a8      	uxth	r0, r5
   36538:	f004 fb3e 	bl	3abb8 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   3653c:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3653e:	2103      	movs	r1, #3
   36540:	8838      	ldrh	r0, [r7, #0]
   36542:	f016 fdc6 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36546:	2103      	movs	r1, #3
   36548:	4603      	mov	r3, r0
   3654a:	3008      	adds	r0, #8
   3654c:	9309      	str	r3, [sp, #36]	; 0x24
   3654e:	f01a f8db 	bl	50708 <net_buf_simple_add>
	rp->status = status;
   36552:	7004      	strb	r4, [r0, #0]
	return evt;
   36554:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   36556:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   3655a:	e6dc      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3655c:	2107      	movs	r1, #7
   3655e:	f016 fdb8 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36562:	2107      	movs	r1, #7
   36564:	4603      	mov	r3, r0
   36566:	3008      	adds	r0, #8
   36568:	9309      	str	r3, [sp, #36]	; 0x24
   3656a:	f01a f8cd 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   3656e:	4601      	mov	r1, r0
   36570:	2000      	movs	r0, #0
   36572:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   36576:	f7ff fb9f 	bl	35cb8 <ll_addr_read>
	return evt;
   3657a:	9c09      	ldr	r4, [sp, #36]	; 0x24
}
   3657c:	e6cb      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3657e:	2109      	movs	r1, #9
   36580:	f016 fda7 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36584:	2109      	movs	r1, #9
   36586:	4603      	mov	r3, r0
   36588:	3008      	adds	r0, #8
   3658a:	9309      	str	r3, [sp, #36]	; 0x24
   3658c:	f01a f8bc 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36590:	2100      	movs	r1, #0
   36592:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   36594:	2208      	movs	r2, #8
	rp->status = 0x00;
   36596:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   3659a:	f016 f897 	bl	4c6cc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   3659e:	2360      	movs	r3, #96	; 0x60
	return evt;
   365a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->features[4] = (1 << 5) | (1 << 6);
   365a2:	716b      	strb	r3, [r5, #5]
}
   365a4:	e6b7      	b.n	36316 <hci_cmd_handle+0x6a>
   365a6:	bf00      	nop
   365a8:	20007612 	.word	0x20007612
   365ac:	20000198 	.word	0x20000198
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   365b0:	2141      	movs	r1, #65	; 0x41
   365b2:	f016 fd8e 	bl	4d0d2 <bt_hci_cmd_complete_create>
   365b6:	2141      	movs	r1, #65	; 0x41
   365b8:	4603      	mov	r3, r0
   365ba:	3008      	adds	r0, #8
   365bc:	9309      	str	r3, [sp, #36]	; 0x24
   365be:	f01a f8a3 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   365c2:	2100      	movs	r1, #0
   365c4:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   365c6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   365c8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   365cc:	f016 f87e 	bl	4c6cc <memset>
	rp->commands[0] |= BIT(5);
   365d0:	7869      	ldrb	r1, [r5, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
   365d2:	7beb      	ldrb	r3, [r5, #15]
	rp->commands[10] |= BIT(2);
   365d4:	7aea      	ldrb	r2, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   365d6:	79a8      	ldrb	r0, [r5, #6]
	rp->commands[0] |= BIT(5);
   365d8:	f041 0120 	orr.w	r1, r1, #32
   365dc:	7069      	strb	r1, [r5, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
   365de:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
	return evt;
   365e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->commands[14] |= BIT(3) | BIT(5);
   365e4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
   365e8:	f061 010f 	orn	r1, r1, #15
   365ec:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   365f0:	73eb      	strb	r3, [r5, #15]
	rp->commands[35] |= BIT(3);
   365f2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	rp->commands[15] |= BIT(1);
   365f6:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[10] |= BIT(2);
   365f8:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   365fc:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[15] |= BIT(1);
   36600:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   36604:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[10] |= BIT(2);
   36608:	72ea      	strb	r2, [r5, #11]
	rp->commands[39] |= BIT(2);
   3660a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	rp->commands[22] |= BIT(2);
   3660e:	7dea      	ldrb	r2, [r5, #23]
	rp->commands[15] |= BIT(1);
   36610:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   36612:	7eab      	ldrb	r3, [r5, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   36614:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[39] |= BIT(2);
   36618:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[22] |= BIT(2);
   3661c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   36620:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   36624:	71a8      	strb	r0, [r5, #6]
	rp->commands[38] |= BIT(7);
   36626:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
	rp->commands[39] |= BIT(2);
   3662a:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
	rp->commands[22] |= BIT(2);
   3662e:	75ea      	strb	r2, [r5, #23]
	rp->commands[28] |= BIT(3);
   36630:	7f69      	ldrb	r1, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   36632:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   36636:	76ab      	strb	r3, [r5, #26]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   36638:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   3663c:	f060 007f 	orn	r0, r0, #127	; 0x7f
   36640:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
	rp->commands[28] |= BIT(1) | BIT(2);
   36644:	f041 010f 	orr.w	r1, r1, #15
	rp->commands[26] |= BIT(4) | BIT(5);
   36648:	20ff      	movs	r0, #255	; 0xff
	rp->commands[32] |= BIT(4) | BIT(5);
   3664a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   3664e:	f063 0306 	orn	r3, r3, #6
	rp->commands[28] |= BIT(1) | BIT(2);
   36652:	7769      	strb	r1, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   36654:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
   36658:	76e8      	strb	r0, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   3665a:	7728      	strb	r0, [r5, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   3665c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
}
   36660:	e659      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36662:	2109      	movs	r1, #9
   36664:	f016 fd35 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36668:	2109      	movs	r1, #9
   3666a:	4603      	mov	r3, r0
   3666c:	3008      	adds	r0, #8
   3666e:	9309      	str	r3, [sp, #36]	; 0x24
   36670:	f01a f84a 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36674:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   36676:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   36678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   3667c:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   3667e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
   36682:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
   36684:	7083      	strb	r3, [r0, #2]
   36686:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   36688:	2305      	movs	r3, #5
   3668a:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
   3668c:	7101      	strb	r1, [r0, #4]
	return evt;
   3668e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   36690:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   36692:	71c2      	strb	r2, [r0, #7]
   36694:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   36696:	e63e      	b.n	36316 <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
   36698:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3669a:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   3669c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3669e:	f016 fd18 	bl	4d0d2 <bt_hci_cmd_complete_create>
   366a2:	2105      	movs	r1, #5
   366a4:	4603      	mov	r3, r0
   366a6:	3008      	adds	r0, #8
   366a8:	9309      	str	r3, [sp, #36]	; 0x24
   366aa:	f01a f82d 	bl	50708 <net_buf_simple_add>
   366ae:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   366b0:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   366b2:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   366b4:	1ce9      	adds	r1, r5, #3
   366b6:	f004 f9d7 	bl	3aa68 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   366ba:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
   366bc:	7028      	strb	r0, [r5, #0]
   366be:	2b00      	cmp	r3, #0
   366c0:	fa93 f2a3 	rbit	r2, r3
   366c4:	792b      	ldrb	r3, [r5, #4]
   366c6:	fab2 f282 	clz	r2, r2
   366ca:	bf08      	it	eq
   366cc:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   366d0:	2b00      	cmp	r3, #0
   366d2:	fa93 f3a3 	rbit	r3, r3
   366d6:	fab3 f383 	clz	r3, r3
   366da:	f102 0201 	add.w	r2, r2, #1
   366de:	bf08      	it	eq
   366e0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   366e4:	70ea      	strb	r2, [r5, #3]
   366e6:	3301      	adds	r3, #1
	return evt;
   366e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   366ea:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
   366ec:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
   366f0:	e611      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   366f2:	2109      	movs	r1, #9
   366f4:	f016 fced 	bl	4d0d2 <bt_hci_cmd_complete_create>
   366f8:	2109      	movs	r1, #9
   366fa:	4603      	mov	r3, r0
   366fc:	3008      	adds	r0, #8
   366fe:	9309      	str	r3, [sp, #36]	; 0x24
   36700:	f01a f802 	bl	50708 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   36704:	ab0a      	add	r3, sp, #40	; 0x28
   36706:	4605      	mov	r5, r0
   36708:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   3670c:	a908      	add	r1, sp, #32
   3670e:	f10d 001e 	add.w	r0, sp, #30
   36712:	f004 f99d 	bl	3aa50 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   36716:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   3671a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   3671e:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   36722:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   36726:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   3672a:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
   3672e:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   36730:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   36734:	702a      	strb	r2, [r5, #0]
	return evt;
   36736:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   36738:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
   3673c:	e5eb      	b.n	36316 <hci_cmd_handle+0x6a>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   3673e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   36740:	8818      	ldrh	r0, [r3, #0]
   36742:	f009 f9ff 	bl	3fb44 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36746:	8838      	ldrh	r0, [r7, #0]
   36748:	2101      	movs	r1, #1
   3674a:	e6e1      	b.n	36510 <hci_cmd_handle+0x264>
	status = ll_rl_enable(cmd->enable);
   3674c:	68a3      	ldr	r3, [r4, #8]
   3674e:	7818      	ldrb	r0, [r3, #0]
   36750:	f009 f9dc 	bl	3fb0c <ll_rl_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   36754:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36756:	8838      	ldrh	r0, [r7, #0]
   36758:	2101      	movs	r1, #1
   3675a:	f016 fcba 	bl	4d0d2 <bt_hci_cmd_complete_create>
   3675e:	2101      	movs	r1, #1
   36760:	4604      	mov	r4, r0
   36762:	3008      	adds	r0, #8
   36764:	f019 ffd0 	bl	50708 <net_buf_simple_add>
	ccst->status = status;
   36768:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   3676a:	e5d4      	b.n	36316 <hci_cmd_handle+0x6a>
	memcpy(dst, src, sizeof(*dst));
   3676c:	2207      	movs	r2, #7
   3676e:	68a1      	ldr	r1, [r4, #8]
   36770:	a80a      	add	r0, sp, #40	; 0x28
   36772:	f015 ffa0 	bl	4c6b6 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36776:	2107      	movs	r1, #7
   36778:	8838      	ldrh	r0, [r7, #0]
   3677a:	f016 fcaa 	bl	4d0d2 <bt_hci_cmd_complete_create>
   3677e:	2107      	movs	r1, #7
   36780:	4603      	mov	r3, r0
   36782:	3008      	adds	r0, #8
   36784:	9309      	str	r3, [sp, #36]	; 0x24
   36786:	f019 ffbf 	bl	50708 <net_buf_simple_add>
   3678a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   3678c:	1c41      	adds	r1, r0, #1
   3678e:	a80a      	add	r0, sp, #40	; 0x28
   36790:	f009 f98a 	bl	3faa8 <ll_rl_lrpa_get>
   36794:	7020      	strb	r0, [r4, #0]
	return evt;
   36796:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36798:	e5bd      	b.n	36316 <hci_cmd_handle+0x6a>
   3679a:	2207      	movs	r2, #7
   3679c:	68a1      	ldr	r1, [r4, #8]
   3679e:	a80a      	add	r0, sp, #40	; 0x28
   367a0:	f015 ff89 	bl	4c6b6 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   367a4:	2107      	movs	r1, #7
   367a6:	8838      	ldrh	r0, [r7, #0]
   367a8:	f016 fc93 	bl	4d0d2 <bt_hci_cmd_complete_create>
   367ac:	2107      	movs	r1, #7
   367ae:	4603      	mov	r3, r0
   367b0:	3008      	adds	r0, #8
   367b2:	9309      	str	r3, [sp, #36]	; 0x24
   367b4:	f019 ffa8 	bl	50708 <net_buf_simple_add>
   367b8:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   367ba:	1c41      	adds	r1, r0, #1
   367bc:	a80a      	add	r0, sp, #40	; 0x28
   367be:	f009 f939 	bl	3fa34 <ll_rl_crpa_get>
   367c2:	7020      	strb	r0, [r4, #0]
	return evt;
   367c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   367c6:	e5a6      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   367c8:	2102      	movs	r1, #2
   367ca:	f016 fc82 	bl	4d0d2 <bt_hci_cmd_complete_create>
   367ce:	2102      	movs	r1, #2
   367d0:	4603      	mov	r3, r0
   367d2:	3008      	adds	r0, #8
   367d4:	9309      	str	r3, [sp, #36]	; 0x24
   367d6:	f019 ff97 	bl	50708 <net_buf_simple_add>
   367da:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   367dc:	f008 ffca 	bl	3f774 <ll_rl_size_get>
	rp->status = 0x00;
   367e0:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   367e2:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   367e4:	7023      	strb	r3, [r4, #0]
	return evt;
   367e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   367e8:	e595      	b.n	36316 <hci_cmd_handle+0x6a>
	status = ll_rl_clear();
   367ea:	f008 ffc5 	bl	3f778 <ll_rl_clear>
   367ee:	e7b1      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_rl_remove(&cmd->peer_id_addr);
   367f0:	68a0      	ldr	r0, [r4, #8]
   367f2:	f009 f803 	bl	3f7fc <ll_rl_remove>
   367f6:	e7ad      	b.n	36754 <hci_cmd_handle+0x4a8>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   367f8:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   367fa:	f100 0217 	add.w	r2, r0, #23
   367fe:	1dc1      	adds	r1, r0, #7
   36800:	f009 fc62 	bl	400c8 <ll_rl_add>
   36804:	e7a6      	b.n	36754 <hci_cmd_handle+0x4a8>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   36806:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   36808:	8859      	ldrh	r1, [r3, #2]
   3680a:	8818      	ldrh	r0, [r3, #0]
   3680c:	f004 f916 	bl	3aa3c <ll_length_default_set>
   36810:	e7a0      	b.n	36754 <hci_cmd_handle+0x4a8>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36812:	2105      	movs	r1, #5
   36814:	f016 fc5d 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36818:	2105      	movs	r1, #5
   3681a:	4603      	mov	r3, r0
   3681c:	3008      	adds	r0, #8
   3681e:	9309      	str	r3, [sp, #36]	; 0x24
   36820:	f019 ff72 	bl	50708 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   36824:	a90a      	add	r1, sp, #40	; 0x28
   36826:	4605      	mov	r5, r0
   36828:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   3682c:	f004 f8fa 	bl	3aa24 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   36830:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   36834:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
   36838:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   3683a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   3683e:	702a      	strb	r2, [r5, #0]
	return evt;
   36840:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   36842:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
   36846:	e566      	b.n	36316 <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   36848:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3684a:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   3684c:	889a      	ldrh	r2, [r3, #4]
   3684e:	8859      	ldrh	r1, [r3, #2]
   36850:	b2a8      	uxth	r0, r5
   36852:	f004 f891 	bl	3a978 <ll_length_req_send>
   36856:	e671      	b.n	3653c <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   36858:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3685a:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   3685c:	7892      	ldrb	r2, [r2, #2]
   3685e:	2300      	movs	r3, #0
   36860:	e9cd 3301 	strd	r3, r3, [sp, #4]
   36864:	9300      	str	r3, [sp, #0]
   36866:	2102      	movs	r1, #2
   36868:	b2a8      	uxth	r0, r5
   3686a:	f003 ff2f 	bl	3a6cc <ll_conn_update>
   3686e:	e665      	b.n	3653c <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   36870:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   36872:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36874:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   36876:	8853      	ldrh	r3, [r2, #2]
   36878:	9102      	str	r1, [sp, #8]
   3687a:	88d1      	ldrh	r1, [r2, #6]
   3687c:	9101      	str	r1, [sp, #4]
   3687e:	8891      	ldrh	r1, [r2, #4]
   36880:	9100      	str	r1, [sp, #0]
   36882:	2200      	movs	r2, #0
   36884:	2102      	movs	r1, #2
   36886:	b2a8      	uxth	r0, r5
   36888:	f003 ff20 	bl	3a6cc <ll_conn_update>
   3688c:	e656      	b.n	3653c <hci_cmd_handle+0x290>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3688e:	2109      	movs	r1, #9
   36890:	f016 fc1f 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36894:	2109      	movs	r1, #9
   36896:	4603      	mov	r3, r0
   36898:	3008      	adds	r0, #8
   3689a:	9309      	str	r3, [sp, #36]	; 0x24
   3689c:	f019 ff34 	bl	50708 <net_buf_simple_add>
	dst[0] = val;
   368a0:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   368a2:	2200      	movs	r2, #0
   368a4:	213f      	movs	r1, #63	; 0x3f
   368a6:	70c1      	strb	r1, [r0, #3]
   368a8:	7002      	strb	r2, [r0, #0]
   368aa:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   368ac:	7083      	strb	r3, [r0, #2]
   368ae:	2103      	movs	r1, #3
	return evt;
   368b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   368b2:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   368b4:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
   368b6:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   368b8:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   368ba:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   368bc:	e52b      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   368be:	2104      	movs	r1, #4
   368c0:	f016 fc07 	bl	4d0d2 <bt_hci_cmd_complete_create>
   368c4:	2104      	movs	r1, #4
   368c6:	4603      	mov	r3, r0
   368c8:	3008      	adds	r0, #8
   368ca:	9309      	str	r3, [sp, #36]	; 0x24
   368cc:	f019 ff1c 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   368d0:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   368d2:	2103      	movs	r1, #3
	rp->status = 0x00;
   368d4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   368d6:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   368d8:	70c1      	strb	r1, [r0, #3]
	return evt;
   368da:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   368dc:	7042      	strb	r2, [r0, #1]
   368de:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   368e0:	e519      	b.n	36316 <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   368e2:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   368e4:	4bba      	ldr	r3, [pc, #744]	; (36bd0 <hci_cmd_handle+0x924>)
   368e6:	6811      	ldr	r1, [r2, #0]
   368e8:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   368ea:	6019      	str	r1, [r3, #0]
   368ec:	e60e      	b.n	3650c <hci_cmd_handle+0x260>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   368ee:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   368f0:	79c1      	ldrb	r1, [r0, #7]
   368f2:	f009 f931 	bl	3fb58 <ll_priv_mode_set>
   368f6:	e72d      	b.n	36754 <hci_cmd_handle+0x4a8>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   368f8:	2103      	movs	r1, #3
   368fa:	f016 fbea 	bl	4d0d2 <bt_hci_cmd_complete_create>
   368fe:	2103      	movs	r1, #3
   36900:	4603      	mov	r3, r0
   36902:	3008      	adds	r0, #8
   36904:	9309      	str	r3, [sp, #36]	; 0x24
   36906:	f019 feff 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   3690a:	4601      	mov	r1, r0
   3690c:	2300      	movs	r3, #0
   3690e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   36912:	3001      	adds	r0, #1
   36914:	f7ff f9fa 	bl	35d0c <ll_tx_pwr_get>
	return evt;
   36918:	9c09      	ldr	r4, [sp, #36]	; 0x24
   3691a:	e4fc      	b.n	36316 <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   3691c:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   3691e:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   36920:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   36922:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   36924:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   36928:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   3692a:	bf48      	it	mi
   3692c:	f041 0103 	orrmi.w	r1, r1, #3
   36930:	7913      	ldrb	r3, [r2, #4]
   36932:	bf48      	it	mi
   36934:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   36936:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   36938:	bf44      	itt	mi
   3693a:	f043 0303 	orrmi.w	r3, r3, #3
   3693e:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   36940:	ea41 0203 	orr.w	r2, r1, r3
   36944:	f032 0203 	bics.w	r2, r2, #3
   36948:	f040 81b5 	bne.w	36cb6 <hci_cmd_handle+0xa0a>
	if (!(cmd->tx_phys & 0x07) ||
   3694c:	074d      	lsls	r5, r1, #29
   3694e:	f000 81ac 	beq.w	36caa <hci_cmd_handle+0x9fe>
   36952:	075a      	lsls	r2, r3, #29
   36954:	f000 81a9 	beq.w	36caa <hci_cmd_handle+0x9fe>
	if (phy_opts & 0x03) {
   36958:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   3695c:	bf1c      	itt	ne
   3695e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   36962:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   36966:	4630      	mov	r0, r6
   36968:	f004 f8aa 	bl	3aac0 <ll_phy_req_send>
   3696c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3696e:	8838      	ldrh	r0, [r7, #0]
   36970:	f016 fbc1 	bl	4d0f6 <bt_hci_cmd_status_create>
   36974:	4604      	mov	r4, r0
   36976:	e4ce      	b.n	36316 <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   36978:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   3697a:	781a      	ldrb	r2, [r3, #0]
   3697c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   3697e:	bf4a      	itet	mi
   36980:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   36982:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   36984:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   36986:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   36988:	bf4a      	itet	mi
   3698a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   3698c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   3698e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   36990:	f004 f88c 	bl	3aaac <ll_phy_default_set>
   36994:	e6de      	b.n	36754 <hci_cmd_handle+0x4a8>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   36996:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   36998:	7963      	ldrb	r3, [r4, #5]
   3699a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   3699e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   369a2:	7820      	ldrb	r0, [r4, #0]
   369a4:	79a4      	ldrb	r4, [r4, #6]
   369a6:	9400      	str	r4, [sp, #0]
   369a8:	f7f0 fa2e 	bl	26e08 <ll_scan_params_set>
   369ac:	e6d2      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_adv_enable(cmd->enable);
   369ae:	68a3      	ldr	r3, [r4, #8]
   369b0:	7818      	ldrb	r0, [r3, #0]
   369b2:	f7ef ff71 	bl	26898 <ll_adv_enable>
   369b6:	e6cd      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   369b8:	68a1      	ldr	r1, [r4, #8]
   369ba:	f811 0b01 	ldrb.w	r0, [r1], #1
   369be:	f002 fe2f 	bl	39620 <ll_adv_scan_rsp_set>
   369c2:	e6c7      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   369c4:	68a1      	ldr	r1, [r4, #8]
   369c6:	f811 0b01 	ldrb.w	r0, [r1], #1
   369ca:	f002 fddf 	bl	3958c <ll_adv_data_set>
   369ce:	e6c1      	b.n	36754 <hci_cmd_handle+0x4a8>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   369d0:	2102      	movs	r1, #2
   369d2:	f016 fb7e 	bl	4d0d2 <bt_hci_cmd_complete_create>
   369d6:	2102      	movs	r1, #2
   369d8:	4603      	mov	r3, r0
   369da:	3008      	adds	r0, #8
   369dc:	9309      	str	r3, [sp, #36]	; 0x24
   369de:	f019 fe93 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   369e2:	2300      	movs	r3, #0
   369e4:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   369e6:	7043      	strb	r3, [r0, #1]
	return evt;
   369e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   369ea:	e494      	b.n	36316 <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   369ec:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   369ee:	7ba5      	ldrb	r5, [r4, #14]
   369f0:	79a3      	ldrb	r3, [r4, #6]
   369f2:	7962      	ldrb	r2, [r4, #5]
   369f4:	7921      	ldrb	r1, [r4, #4]
   369f6:	8820      	ldrh	r0, [r4, #0]
   369f8:	9502      	str	r5, [sp, #8]
   369fa:	7b65      	ldrb	r5, [r4, #13]
   369fc:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   369fe:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   36a00:	9400      	str	r4, [sp, #0]
   36a02:	f002 fbbf 	bl	39184 <ll_adv_params_set>
   36a06:	e6a5      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   36a08:	68a1      	ldr	r1, [r4, #8]
   36a0a:	2001      	movs	r0, #1
   36a0c:	f7ff f922 	bl	35c54 <ll_addr_set>
   36a10:	e6a0      	b.n	36754 <hci_cmd_handle+0x4a8>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36a12:	2109      	movs	r1, #9
   36a14:	f016 fb5d 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36a18:	2109      	movs	r1, #9
   36a1a:	4603      	mov	r3, r0
   36a1c:	3008      	adds	r0, #8
   36a1e:	9309      	str	r3, [sp, #36]	; 0x24
   36a20:	f019 fe72 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36a24:	2100      	movs	r1, #0
   36a26:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   36a28:	2208      	movs	r2, #8
	rp->status = 0x00;
   36a2a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   36a2e:	f015 fe4d 	bl	4c6cc <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   36a32:	f000 fe6f 	bl	37714 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   36a36:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   36a38:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   36a3c:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   36a3e:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
   36a40:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   36a42:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
   36a44:	70ac      	strb	r4, [r5, #2]
   36a46:	f3c1 2007 	ubfx	r0, r1, #8, #8
   36a4a:	712b      	strb	r3, [r5, #4]
   36a4c:	0a13      	lsrs	r3, r2, #8
	return evt;
   36a4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	dst[0] = val;
   36a50:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
   36a52:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
   36a54:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
   36a56:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
   36a58:	e45d      	b.n	36316 <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
   36a5a:	68a3      	ldr	r3, [r4, #8]
   36a5c:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   36a5e:	2200      	movs	r2, #0
   36a60:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36a62:	b2a8      	uxth	r0, r5
   36a64:	f007 fffe 	bl	3ea64 <ll_start_enc_req_send>
   36a68:	e568      	b.n	3653c <hci_cmd_handle+0x290>
	handle = sys_le16_to_cpu(cmd->handle);
   36a6a:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36a6c:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   36a6e:	f832 5b02 	ldrh.w	r5, [r2], #2
   36a72:	e7f6      	b.n	36a62 <hci_cmd_handle+0x7b6>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   36a74:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   36a76:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   36a78:	f102 030c 	add.w	r3, r2, #12
   36a7c:	f831 0b02 	ldrh.w	r0, [r1], #2
   36a80:	320a      	adds	r2, #10
   36a82:	f008 f905 	bl	3ec90 <ll_enc_req_send>
   36a86:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36a88:	8838      	ldrh	r0, [r7, #0]
   36a8a:	f016 fb34 	bl	4d0f6 <bt_hci_cmd_status_create>
   36a8e:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   36a90:	e441      	b.n	36316 <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36a92:	2109      	movs	r1, #9
   36a94:	f016 fb1d 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36a98:	2109      	movs	r1, #9
   36a9a:	4603      	mov	r3, r0
   36a9c:	3008      	adds	r0, #8
   36a9e:	9309      	str	r3, [sp, #36]	; 0x24
   36aa0:	f019 fe32 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36aa4:	2300      	movs	r3, #0
   36aa6:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   36aaa:	2108      	movs	r1, #8
   36aac:	f00a f80c 	bl	40ac8 <lll_csrand_get>
	return evt;
   36ab0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36ab2:	e430      	b.n	36316 <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   36ab4:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   36ab6:	aa0a      	add	r2, sp, #40	; 0x28
   36ab8:	2300      	movs	r3, #0
   36aba:	f100 0110 	add.w	r1, r0, #16
   36abe:	f00c fb51 	bl	43164 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36ac2:	2111      	movs	r1, #17
   36ac4:	8838      	ldrh	r0, [r7, #0]
   36ac6:	f016 fb04 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36aca:	2111      	movs	r1, #17
   36acc:	4603      	mov	r3, r0
   36ace:	3008      	adds	r0, #8
   36ad0:	9309      	str	r3, [sp, #36]	; 0x24
   36ad2:	f019 fe19 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36ad6:	2300      	movs	r3, #0
   36ad8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   36adc:	2210      	movs	r2, #16
   36ade:	a90a      	add	r1, sp, #40	; 0x28
   36ae0:	f015 fde9 	bl	4c6b6 <memcpy>
	return evt;
   36ae4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36ae6:	e416      	b.n	36316 <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
   36ae8:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   36aea:	8818      	ldrh	r0, [r3, #0]
   36aec:	f003 fef4 	bl	3a8d8 <ll_feature_req_send>
   36af0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36af2:	8838      	ldrh	r0, [r7, #0]
   36af4:	f016 faff 	bl	4d0f6 <bt_hci_cmd_status_create>
   36af8:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   36afa:	e40c      	b.n	36316 <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
   36afc:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36afe:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   36b00:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36b02:	f016 fae6 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36b06:	2108      	movs	r1, #8
   36b08:	4603      	mov	r3, r0
   36b0a:	4408      	add	r0, r1
   36b0c:	9309      	str	r3, [sp, #36]	; 0x24
   36b0e:	f019 fdfb 	bl	50708 <net_buf_simple_add>
   36b12:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   36b14:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   36b16:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   36b18:	f003 fe6e 	bl	3a7f8 <ll_chm_get>
	rp->status = status;
   36b1c:	7028      	strb	r0, [r5, #0]
	return evt;
   36b1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
   36b20:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
   36b24:	f7ff bbf7 	b.w	36316 <hci_cmd_handle+0x6a>
	status = ll_chm_update(&cmd->ch_map[0]);
   36b28:	68a0      	ldr	r0, [r4, #8]
   36b2a:	f008 fb79 	bl	3f220 <ll_chm_update>
   36b2e:	e611      	b.n	36754 <hci_cmd_handle+0x4a8>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   36b30:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   36b32:	890a      	ldrh	r2, [r1, #8]
   36b34:	884b      	ldrh	r3, [r1, #2]
   36b36:	8808      	ldrh	r0, [r1, #0]
   36b38:	9202      	str	r2, [sp, #8]
   36b3a:	88ca      	ldrh	r2, [r1, #6]
   36b3c:	9201      	str	r2, [sp, #4]
   36b3e:	8889      	ldrh	r1, [r1, #4]
   36b40:	9100      	str	r1, [sp, #0]
   36b42:	2200      	movs	r2, #0
   36b44:	4611      	mov	r1, r2
   36b46:	f003 fdc1 	bl	3a6cc <ll_conn_update>
   36b4a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36b4c:	8838      	ldrh	r0, [r7, #0]
   36b4e:	f016 fad2 	bl	4d0f6 <bt_hci_cmd_status_create>
   36b52:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   36b54:	f7ff bbdf 	b.w	36316 <hci_cmd_handle+0x6a>
	status = ll_fal_remove(&cmd->addr);
   36b58:	68a0      	ldr	r0, [r4, #8]
   36b5a:	f008 fd77 	bl	3f64c <ll_fal_remove>
   36b5e:	e5f9      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_fal_add(&cmd->addr);
   36b60:	68a0      	ldr	r0, [r4, #8]
   36b62:	f008 fcd9 	bl	3f518 <ll_fal_add>
   36b66:	e5f5      	b.n	36754 <hci_cmd_handle+0x4a8>
	status = ll_fal_clear();
   36b68:	f008 fcac 	bl	3f4c4 <ll_fal_clear>
   36b6c:	e5f2      	b.n	36754 <hci_cmd_handle+0x4a8>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36b6e:	2102      	movs	r1, #2
   36b70:	f016 faaf 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36b74:	2102      	movs	r1, #2
   36b76:	4603      	mov	r3, r0
   36b78:	3008      	adds	r0, #8
   36b7a:	9309      	str	r3, [sp, #36]	; 0x24
   36b7c:	f019 fdc4 	bl	50708 <net_buf_simple_add>
	rp->status = 0x00;
   36b80:	2300      	movs	r3, #0
   36b82:	7003      	strb	r3, [r0, #0]
   36b84:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   36b86:	f008 fc9b 	bl	3f4c0 <ll_fal_size_get>
   36b8a:	7060      	strb	r0, [r4, #1]
	return evt;
   36b8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36b8e:	f7ff bbc2 	b.w	36316 <hci_cmd_handle+0x6a>
	status = ll_connect_disable(node_rx);
   36b92:	4630      	mov	r0, r6
   36b94:	f008 f82e 	bl	3ebf4 <ll_connect_disable>
   36b98:	e5dc      	b.n	36754 <hci_cmd_handle+0x4a8>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   36b9a:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   36b9c:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   36ba0:	7963      	ldrb	r3, [r4, #5]
   36ba2:	7922      	ldrb	r2, [r4, #4]
   36ba4:	8861      	ldrh	r1, [r4, #2]
   36ba6:	8820      	ldrh	r0, [r4, #0]
   36ba8:	9504      	str	r5, [sp, #16]
   36baa:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   36bae:	9503      	str	r5, [sp, #12]
   36bb0:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   36bb4:	9502      	str	r5, [sp, #8]
   36bb6:	7b25      	ldrb	r5, [r4, #12]
   36bb8:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   36bba:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   36bbc:	9400      	str	r4, [sp, #0]
   36bbe:	f7f1 f847 	bl	27c50 <ll_create_connection>
   36bc2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36bc4:	8838      	ldrh	r0, [r7, #0]
   36bc6:	f016 fa96 	bl	4d0f6 <bt_hci_cmd_status_create>
   36bca:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   36bcc:	f7ff bba3 	b.w	36316 <hci_cmd_handle+0x6a>
   36bd0:	200001a0 	.word	0x200001a0
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   36bd4:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   36bd6:	7818      	ldrb	r0, [r3, #0]
   36bd8:	2800      	cmp	r0, #0
   36bda:	d061      	beq.n	36ca0 <hci_cmd_handle+0x9f4>
   36bdc:	785b      	ldrb	r3, [r3, #1]
   36bde:	2b00      	cmp	r3, #0
   36be0:	d05e      	beq.n	36ca0 <hci_cmd_handle+0x9f4>
			dup_count = 0;
   36be2:	4938      	ldr	r1, [pc, #224]	; (36cc4 <hci_cmd_handle+0xa18>)
			dup_curr = 0U;
   36be4:	4a38      	ldr	r2, [pc, #224]	; (36cc8 <hci_cmd_handle+0xa1c>)
			dup_count = 0;
   36be6:	2300      	movs	r3, #0
   36be8:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   36bea:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   36bec:	f002 fd92 	bl	39714 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   36bf0:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   36bf2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36bf4:	f04f 0101 	mov.w	r1, #1
   36bf8:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   36bfa:	bf08      	it	eq
   36bfc:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36bfe:	e5ac      	b.n	3675a <hci_cmd_handle+0x4ae>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   36c00:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   36c02:	7899      	ldrb	r1, [r3, #2]
   36c04:	8818      	ldrh	r0, [r3, #0]
   36c06:	f003 fe1b 	bl	3a840 <ll_terminate_ind_send>
   36c0a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36c0c:	8838      	ldrh	r0, [r7, #0]
   36c0e:	f016 fa72 	bl	4d0f6 <bt_hci_cmd_status_create>
   36c12:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   36c14:	f7ff bb7f 	b.w	36316 <hci_cmd_handle+0x6a>
	dup_count = DUP_FILTER_DISABLED;
   36c18:	482a      	ldr	r0, [pc, #168]	; (36cc4 <hci_cmd_handle+0xa18>)
	event_mask = DEFAULT_EVENT_MASK;
   36c1a:	492c      	ldr	r1, [pc, #176]	; (36ccc <hci_cmd_handle+0xa20>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   36c1c:	4a2c      	ldr	r2, [pc, #176]	; (36cd0 <hci_cmd_handle+0xa24>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   36c1e:	4b2d      	ldr	r3, [pc, #180]	; (36cd4 <hci_cmd_handle+0xa28>)
	dup_count = DUP_FILTER_DISABLED;
   36c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   36c24:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   36c26:	f641 75ff 	movw	r5, #8191	; 0x1fff
   36c2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   36c2e:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   36c32:	2000      	movs	r0, #0
   36c34:	2100      	movs	r1, #0
   36c36:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   36c3a:	201f      	movs	r0, #31
   36c3c:	2100      	movs	r1, #0
   36c3e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   36c42:	f001 fecb 	bl	389dc <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36c46:	2101      	movs	r1, #1
   36c48:	8838      	ldrh	r0, [r7, #0]
   36c4a:	f016 fa42 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36c4e:	2101      	movs	r1, #1
   36c50:	4604      	mov	r4, r0
   36c52:	3008      	adds	r0, #8
   36c54:	f019 fd58 	bl	50708 <net_buf_simple_add>
	conn_count = 0U;
   36c58:	4a1f      	ldr	r2, [pc, #124]	; (36cd8 <hci_cmd_handle+0xa2c>)
	ccst->status = status;
   36c5a:	2300      	movs	r3, #0
   36c5c:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   36c5e:	6013      	str	r3, [r2, #0]
}
   36c60:	f7ff bb59 	b.w	36316 <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36c64:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   36c66:	4b1a      	ldr	r3, [pc, #104]	; (36cd0 <hci_cmd_handle+0xa24>)
   36c68:	e63d      	b.n	368e6 <hci_cmd_handle+0x63a>
	handle = sys_le16_to_cpu(cmd->handle);
   36c6a:	68a3      	ldr	r3, [r4, #8]
   36c6c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   36c6e:	a90a      	add	r1, sp, #40	; 0x28
   36c70:	b2a8      	uxth	r0, r5
   36c72:	f003 ff7b 	bl	3ab6c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36c76:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   36c78:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36c7a:	8838      	ldrh	r0, [r7, #0]
   36c7c:	f016 fa29 	bl	4d0d2 <bt_hci_cmd_complete_create>
   36c80:	2105      	movs	r1, #5
   36c82:	4603      	mov	r3, r0
   36c84:	3008      	adds	r0, #8
   36c86:	9309      	str	r3, [sp, #36]	; 0x24
   36c88:	f019 fd3e 	bl	50708 <net_buf_simple_add>
	rp->status = status;
   36c8c:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   36c8e:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   36c92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   36c96:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   36c98:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   36c9c:	f7ff bb3b 	b.w	36316 <hci_cmd_handle+0x6a>
		dup_count = DUP_FILTER_DISABLED;
   36ca0:	4b08      	ldr	r3, [pc, #32]	; (36cc4 <hci_cmd_handle+0xa18>)
   36ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36ca6:	601a      	str	r2, [r3, #0]
   36ca8:	e7a0      	b.n	36bec <hci_cmd_handle+0x940>
	return bt_hci_cmd_status_create(_opcode, status);
   36caa:	2112      	movs	r1, #18
   36cac:	f016 fa23 	bl	4d0f6 <bt_hci_cmd_status_create>
   36cb0:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   36cb2:	f7ff bb30 	b.w	36316 <hci_cmd_handle+0x6a>
	return bt_hci_cmd_status_create(_opcode, status);
   36cb6:	2111      	movs	r1, #17
   36cb8:	f016 fa1d 	bl	4d0f6 <bt_hci_cmd_status_create>
   36cbc:	4604      	mov	r4, r0
		return;
   36cbe:	f7ff bb2a 	b.w	36316 <hci_cmd_handle+0x6a>
   36cc2:	bf00      	nop
   36cc4:	20004f00 	.word	0x20004f00
   36cc8:	20004f04 	.word	0x20004f04
   36ccc:	20000198 	.word	0x20000198
   36cd0:	20003570 	.word	0x20003570
   36cd4:	200001a0 	.word	0x200001a0
   36cd8:	20004efc 	.word	0x20004efc

00036cdc <hci_acl_handle>:
{
   36cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   36ce0:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   36ce2:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   36ce4:	2b03      	cmp	r3, #3
	*evt = NULL;
   36ce6:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   36ce8:	d918      	bls.n	36d1c <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
   36cea:	4605      	mov	r5, r0
   36cec:	4688      	mov	r8, r1
   36cee:	3008      	adds	r0, #8
   36cf0:	2104      	movs	r1, #4
   36cf2:	f019 fd3a 	bl	5076a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   36cf6:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   36cf8:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   36cfa:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   36cfe:	42b3      	cmp	r3, r6
   36d00:	d30c      	bcc.n	36d1c <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   36d02:	2e1b      	cmp	r6, #27
   36d04:	d80a      	bhi.n	36d1c <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
   36d06:	f003 fc87 	bl	3a618 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   36d0a:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   36d0e:	4604      	mov	r4, r0
   36d10:	b318      	cbz	r0, 36d5a <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   36d12:	08bb      	lsrs	r3, r7, #2
   36d14:	d102      	bne.n	36d1c <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   36d16:	b1d7      	cbz	r7, 36d4e <hci_acl_handle+0x72>
   36d18:	2f01      	cmp	r7, #1
   36d1a:	d003      	beq.n	36d24 <hci_acl_handle+0x48>
		return -EINVAL;
   36d1c:	f06f 0015 	mvn.w	r0, #21
}
   36d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   36d24:	7903      	ldrb	r3, [r0, #4]
   36d26:	f367 0301 	bfi	r3, r7, #0, #2
   36d2a:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   36d2c:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   36d2e:	68a9      	ldr	r1, [r5, #8]
   36d30:	4632      	mov	r2, r6
   36d32:	1de0      	adds	r0, r4, #7
   36d34:	f015 fcbf 	bl	4c6b6 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   36d38:	4621      	mov	r1, r4
   36d3a:	f3c9 000b 	ubfx	r0, r9, #0, #12
   36d3e:	f003 fc77 	bl	3a630 <ll_tx_mem_enqueue>
   36d42:	2800      	cmp	r0, #0
   36d44:	d0ec      	beq.n	36d20 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
   36d46:	4620      	mov	r0, r4
   36d48:	f003 fc6c 	bl	3a624 <ll_tx_mem_release>
   36d4c:	e7e6      	b.n	36d1c <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   36d4e:	7903      	ldrb	r3, [r0, #4]
   36d50:	2202      	movs	r2, #2
   36d52:	f362 0301 	bfi	r3, r2, #0, #2
   36d56:	7103      	strb	r3, [r0, #4]
		break;
   36d58:	e7e8      	b.n	36d2c <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   36d5a:	4b11      	ldr	r3, [pc, #68]	; (36da0 <hci_acl_handle+0xc4>)
   36d5c:	681b      	ldr	r3, [r3, #0]
   36d5e:	019b      	lsls	r3, r3, #6
   36d60:	d402      	bmi.n	36d68 <hci_acl_handle+0x8c>
		return -ENOBUFS;
   36d62:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36d66:	e7db      	b.n	36d20 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   36d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   36d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36d70:	2001      	movs	r0, #1
   36d72:	f7f7 f8d9 	bl	2df28 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   36d76:	2102      	movs	r1, #2
   36d78:	f8c8 0000 	str.w	r0, [r8]
   36d7c:	3008      	adds	r0, #8
   36d7e:	f019 fcc3 	bl	50708 <net_buf_simple_add>
	hdr->len = len;
   36d82:	2401      	movs	r4, #1
	hdr->evt = evt;
   36d84:	221a      	movs	r2, #26
   36d86:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   36d88:	7044      	strb	r4, [r0, #1]
   36d8a:	f8d8 0000 	ldr.w	r0, [r8]
   36d8e:	4621      	mov	r1, r4
   36d90:	3008      	adds	r0, #8
   36d92:	f019 fcb9 	bl	50708 <net_buf_simple_add>
   36d96:	4603      	mov	r3, r0
		return -ENOBUFS;
   36d98:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   36d9c:	701c      	strb	r4, [r3, #0]
   36d9e:	e7bf      	b.n	36d20 <hci_acl_handle+0x44>
   36da0:	20000198 	.word	0x20000198

00036da4 <hci_disconn_complete_encode>:
{
   36da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   36da6:	4b0e      	ldr	r3, [pc, #56]	; (36de0 <hci_disconn_complete_encode+0x3c>)
   36da8:	681b      	ldr	r3, [r3, #0]
   36daa:	06db      	lsls	r3, r3, #27
   36dac:	d400      	bmi.n	36db0 <hci_disconn_complete_encode+0xc>
}
   36dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36db0:	f102 0408 	add.w	r4, r2, #8
   36db4:	4605      	mov	r5, r0
   36db6:	460e      	mov	r6, r1
   36db8:	4620      	mov	r0, r4
   36dba:	2102      	movs	r1, #2
   36dbc:	f019 fca4 	bl	50708 <net_buf_simple_add>
   36dc0:	4603      	mov	r3, r0
	hdr->len = len;
   36dc2:	2104      	movs	r1, #4
	hdr->evt = evt;
   36dc4:	2205      	movs	r2, #5
	hdr->len = len;
   36dc6:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   36dc8:	701a      	strb	r2, [r3, #0]
   36dca:	4620      	mov	r0, r4
   36dcc:	f019 fc9c 	bl	50708 <net_buf_simple_add>
   36dd0:	2700      	movs	r7, #0
	ep->status = 0x00;
   36dd2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36dd4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   36dd8:	782b      	ldrb	r3, [r5, #0]
   36dda:	70c3      	strb	r3, [r0, #3]
}
   36ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36dde:	bf00      	nop
   36de0:	20000198 	.word	0x20000198

00036de4 <hci_disconn_complete_process>:
	conn_count--;
   36de4:	4a02      	ldr	r2, [pc, #8]	; (36df0 <hci_disconn_complete_process+0xc>)
   36de6:	6813      	ldr	r3, [r2, #0]
   36de8:	3b01      	subs	r3, #1
   36dea:	6013      	str	r3, [r2, #0]
}
   36dec:	4770      	bx	lr
   36dee:	bf00      	nop
   36df0:	20004efc 	.word	0x20004efc

00036df4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   36df4:	7f03      	ldrb	r3, [r0, #28]
   36df6:	f003 0303 	and.w	r3, r3, #3
   36dfa:	3b01      	subs	r3, #1
   36dfc:	2b01      	cmp	r3, #1
{
   36dfe:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   36e00:	d90d      	bls.n	36e1e <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   36e02:	4a16      	ldr	r2, [pc, #88]	; (36e5c <hci_acl_encode+0x68>)
   36e04:	4916      	ldr	r1, [pc, #88]	; (36e60 <hci_acl_encode+0x6c>)
   36e06:	4817      	ldr	r0, [pc, #92]	; (36e64 <hci_acl_encode+0x70>)
   36e08:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   36e0c:	f013 fb4b 	bl	4a4a6 <printk>
   36e10:	4040      	eors	r0, r0
   36e12:	f380 8811 	msr	BASEPRI, r0
   36e16:	f04f 0003 	mov.w	r0, #3
   36e1a:	df02      	svc	2
		break;
	}
}
   36e1c:	bd70      	pop	{r4, r5, r6, pc}
   36e1e:	4604      	mov	r4, r0
   36e20:	f101 0508 	add.w	r5, r1, #8
   36e24:	4628      	mov	r0, r5
   36e26:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   36e28:	88e6      	ldrh	r6, [r4, #6]
   36e2a:	f019 fc6d 	bl	50708 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   36e2e:	7f23      	ldrb	r3, [r4, #28]
   36e30:	f003 0303 	and.w	r3, r3, #3
   36e34:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   36e36:	bf0c      	ite	eq
   36e38:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   36e3c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   36e40:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   36e42:	7f61      	ldrb	r1, [r4, #29]
   36e44:	8041      	strh	r1, [r0, #2]
   36e46:	4628      	mov	r0, r5
   36e48:	f019 fc5e 	bl	50708 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   36e4c:	7f62      	ldrb	r2, [r4, #29]
   36e4e:	f104 011f 	add.w	r1, r4, #31
}
   36e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   36e56:	f015 bc2e 	b.w	4c6b6 <memcpy>
   36e5a:	bf00      	nop
   36e5c:	000551d8 	.word	0x000551d8
   36e60:	0005518c 	.word	0x0005518c
   36e64:	0005512c 	.word	0x0005512c

00036e68 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   36e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36e6c:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   36e70:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36e72:	f1bc 0f03 	cmp.w	ip, #3
{
   36e76:	b089      	sub	sp, #36	; 0x24
   36e78:	4604      	mov	r4, r0
   36e7a:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   36e7c:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36e80:	d01e      	beq.n	36ec0 <hci_evt_encode+0x58>
	switch (node_rx->hdr.type) {
   36e82:	f1ac 0c05 	sub.w	ip, ip, #5
   36e86:	f1bc 0f17 	cmp.w	ip, #23
   36e8a:	d833      	bhi.n	36ef4 <hci_evt_encode+0x8c>
   36e8c:	e8df f01c 	tbh	[pc, ip, lsl #1]
   36e90:	00320042 	.word	0x00320042
   36e94:	00320032 	.word	0x00320032
   36e98:	00320032 	.word	0x00320032
   36e9c:	00320032 	.word	0x00320032
   36ea0:	00320032 	.word	0x00320032
   36ea4:	00320032 	.word	0x00320032
   36ea8:	00320032 	.word	0x00320032
   36eac:	00320032 	.word	0x00320032
   36eb0:	00bf0032 	.word	0x00bf0032
   36eb4:	0125011d 	.word	0x0125011d
   36eb8:	016c0155 	.word	0x016c0155
   36ebc:	01b2017f 	.word	0x01b2017f
	switch (pdu_data->llctrl.opcode) {
   36ec0:	7fc3      	ldrb	r3, [r0, #31]
   36ec2:	3b03      	subs	r3, #3
   36ec4:	2b12      	cmp	r3, #18
   36ec6:	f200 81cd 	bhi.w	37264 <hci_evt_encode+0x3fc>
   36eca:	e8df f013 	tbh	[pc, r3, lsl #1]
   36ece:	024b      	.short	0x024b
   36ed0:	01cb01cb 	.word	0x01cb01cb
   36ed4:	0293027a 	.word	0x0293027a
   36ed8:	020001cb 	.word	0x020001cb
   36edc:	01cb01cb 	.word	0x01cb01cb
   36ee0:	020901cb 	.word	0x020901cb
   36ee4:	022401cb 	.word	0x022401cb
   36ee8:	002001cb 	.word	0x002001cb
   36eec:	01cb01cb 	.word	0x01cb01cb
   36ef0:	01d901d9 	.word	0x01d901d9
		LL_ASSERT(0);
   36ef4:	4ab6      	ldr	r2, [pc, #728]	; (371d0 <hci_evt_encode+0x368>)
   36ef6:	49b7      	ldr	r1, [pc, #732]	; (371d4 <hci_evt_encode+0x36c>)
   36ef8:	48b7      	ldr	r0, [pc, #732]	; (371d8 <hci_evt_encode+0x370>)
   36efa:	f641 43af 	movw	r3, #7343	; 0x1caf
   36efe:	f013 fad2 	bl	4a4a6 <printk>
   36f02:	4040      	eors	r0, r0
   36f04:	f380 8811 	msr	BASEPRI, r0
   36f08:	f04f 0003 	mov.w	r0, #3
   36f0c:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   36f0e:	b009      	add	sp, #36	; 0x24
   36f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36f14:	4ab1      	ldr	r2, [pc, #708]	; (371dc <hci_evt_encode+0x374>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36f16:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   36f18:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   36f1a:	f894 8019 	ldrb.w	r8, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36f22:	425b      	negs	r3, r3
   36f24:	b25f      	sxtb	r7, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36f26:	0c0b      	lsrs	r3, r1, #16
   36f28:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->tx_addr) {
   36f2c:	7f23      	ldrb	r3, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36f2e:	9006      	str	r0, [sp, #24]
	if (adv->tx_addr) {
   36f30:	065a      	lsls	r2, r3, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36f32:	f8ad 101c 	strh.w	r1, [sp, #28]
	direct_report = node_rx->hdr.rx_ftr.direct;
   36f36:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   36f3a:	f100 827c 	bmi.w	37436 <hci_evt_encode+0x5ce>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f3e:	4ba8      	ldr	r3, [pc, #672]	; (371e0 <hci_evt_encode+0x378>)
   36f40:	685b      	ldr	r3, [r3, #4]
   36f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   36f46:	2e00      	cmp	r6, #0
   36f48:	f040 82b0 	bne.w	374ac <hci_evt_encode+0x644>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f4c:	2b00      	cmp	r3, #0
   36f4e:	d0de      	beq.n	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   36f50:	4ba4      	ldr	r3, [pc, #656]	; (371e4 <hci_evt_encode+0x37c>)
   36f52:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f54:	079e      	lsls	r6, r3, #30
   36f56:	d5da      	bpl.n	36f0e <hci_evt_encode+0xa6>
	if (dup_count >= 0) {
   36f58:	4ba3      	ldr	r3, [pc, #652]	; (371e8 <hci_evt_encode+0x380>)
   36f5a:	681b      	ldr	r3, [r3, #0]
   36f5c:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36f5e:	f104 0a1e 	add.w	sl, r4, #30
	if (dup_count >= 0) {
   36f62:	db09      	blt.n	36f78 <hci_evt_encode+0x110>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36f64:	7f20      	ldrb	r0, [r4, #28]
   36f66:	4652      	mov	r2, sl
   36f68:	f3c0 1180 	ubfx	r1, r0, #6, #1
   36f6c:	f000 000f 	and.w	r0, r0, #15
   36f70:	f7ff f846 	bl	36000 <dup_found.part.0>
	if (dup_scan &&
   36f74:	2800      	cmp	r0, #0
   36f76:	d1ca      	bne.n	36f0e <hci_evt_encode+0xa6>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   36f78:	7f23      	ldrb	r3, [r4, #28]
   36f7a:	f003 030f 	and.w	r3, r3, #15
   36f7e:	2b01      	cmp	r3, #1
   36f80:	f000 834e 	beq.w	37620 <hci_evt_encode+0x7b8>
		data_len = (adv->len - BDADDR_SIZE);
   36f84:	7f63      	ldrb	r3, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36f86:	f103 0b06 	add.w	fp, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   36f8a:	f1a3 0906 	sub.w	r9, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36f8e:	fa5f f28b 	uxtb.w	r2, fp
		data_len = (adv->len - BDADDR_SIZE);
   36f92:	fa5f f989 	uxtb.w	r9, r9
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   36f96:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36f98:	9205      	str	r2, [sp, #20]
	return net_buf_add(buf, melen);
   36f9a:	fa5f fb83 	uxtb.w	fp, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36f9e:	464e      	mov	r6, r9
   36fa0:	3508      	adds	r5, #8
   36fa2:	2102      	movs	r1, #2
   36fa4:	4628      	mov	r0, r5
   36fa6:	f019 fbaf 	bl	50708 <net_buf_simple_add>
	hdr->len = len;
   36faa:	9b05      	ldr	r3, [sp, #20]
   36fac:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   36fae:	223e      	movs	r2, #62	; 0x3e
   36fb0:	7002      	strb	r2, [r0, #0]
   36fb2:	2101      	movs	r1, #1
   36fb4:	4628      	mov	r0, r5
   36fb6:	f019 fba7 	bl	50708 <net_buf_simple_add>
   36fba:	4602      	mov	r2, r0
	me->subevent = subevt;
   36fbc:	2302      	movs	r3, #2
   36fbe:	7013      	strb	r3, [r2, #0]
   36fc0:	4659      	mov	r1, fp
   36fc2:	4628      	mov	r0, r5
   36fc4:	f019 fba0 	bl	50708 <net_buf_simple_add>
	sep->num_reports = 1U;
   36fc8:	2301      	movs	r3, #1
   36fca:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   36fcc:	7f23      	ldrb	r3, [r4, #28]
   36fce:	aa08      	add	r2, sp, #32
   36fd0:	f003 030f 	and.w	r3, r3, #15
   36fd4:	4413      	add	r3, r2
   36fd6:	4605      	mov	r5, r0
   36fd8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   36fdc:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   36fde:	f008 fbc9 	bl	3f774 <ll_rl_size_get>
   36fe2:	4580      	cmp	r8, r0
   36fe4:	f080 82ed 	bcs.w	375c2 <hci_evt_encode+0x75a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   36fe8:	4640      	mov	r0, r8
   36fea:	1cea      	adds	r2, r5, #3
   36fec:	1ca9      	adds	r1, r5, #2
   36fee:	f008 fb7b 	bl	3f6e8 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   36ff2:	78ab      	ldrb	r3, [r5, #2]
   36ff4:	3302      	adds	r3, #2
   36ff6:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
   36ff8:	f885 9009 	strb.w	r9, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36ffc:	350a      	adds	r5, #10
   36ffe:	f104 0124 	add.w	r1, r4, #36	; 0x24
   37002:	4632      	mov	r2, r6
   37004:	4628      	mov	r0, r5
   37006:	f015 fb56 	bl	4c6b6 <memcpy>
	*prssi = rssi;
   3700a:	55af      	strb	r7, [r5, r6]
   3700c:	e77f      	b.n	36f0e <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   3700e:	07f8      	lsls	r0, r7, #31
   37010:	f100 8203 	bmi.w	3741a <hci_evt_encode+0x5b2>
	status = cc->status;
   37014:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   37016:	2f00      	cmp	r7, #0
   37018:	f000 81f6 	beq.w	37408 <hci_evt_encode+0x5a0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3701c:	4b70      	ldr	r3, [pc, #448]	; (371e0 <hci_evt_encode+0x378>)
   3701e:	685b      	ldr	r3, [r3, #4]
   37020:	0099      	lsls	r1, r3, #2
   37022:	f57f af74 	bpl.w	36f0e <hci_evt_encode+0xa6>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   37026:	4b6f      	ldr	r3, [pc, #444]	; (371e4 <hci_evt_encode+0x37c>)
   37028:	681b      	ldr	r3, [r3, #0]
   3702a:	f240 2201 	movw	r2, #513	; 0x201
   3702e:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   37030:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   37034:	f43f af6b 	beq.w	36f0e <hci_evt_encode+0xa6>
   37038:	3508      	adds	r5, #8
	if (!status) {
   3703a:	2f00      	cmp	r7, #0
   3703c:	f040 820d 	bne.w	3745a <hci_evt_encode+0x5f2>
		conn_count++;
   37040:	4a6a      	ldr	r2, [pc, #424]	; (371ec <hci_evt_encode+0x384>)
   37042:	6813      	ldr	r3, [r2, #0]
   37044:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   37046:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
   3704a:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   3704c:	f1b8 0f00 	cmp.w	r8, #0
   37050:	f000 8288 	beq.w	37564 <hci_evt_encode+0x6fc>
   37054:	2102      	movs	r1, #2
   37056:	4628      	mov	r0, r5
   37058:	f019 fb56 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   3705c:	233e      	movs	r3, #62	; 0x3e
   3705e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37060:	231f      	movs	r3, #31
   37062:	7043      	strb	r3, [r0, #1]
   37064:	2101      	movs	r1, #1
   37066:	4628      	mov	r0, r5
   37068:	f019 fb4e 	bl	50708 <net_buf_simple_add>
   3706c:	4603      	mov	r3, r0
	me->subevent = subevt;
   3706e:	220a      	movs	r2, #10
   37070:	701a      	strb	r2, [r3, #0]
   37072:	4628      	mov	r0, r5
   37074:	211e      	movs	r1, #30
   37076:	f019 fb47 	bl	50708 <net_buf_simple_add>
		leecc->status = 0x00;
   3707a:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   3707c:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   37080:	7f63      	ldrb	r3, [r4, #29]
   37082:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   37084:	7fa3      	ldrb	r3, [r4, #30]
   37086:	7103      	strb	r3, [r0, #4]
   37088:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   3708a:	4649      	mov	r1, r9
   3708c:	2206      	movs	r2, #6
   3708e:	3005      	adds	r0, #5
   37090:	f015 fb11 	bl	4c6b6 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   37094:	2206      	movs	r2, #6
   37096:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   3709a:	f105 000b 	add.w	r0, r5, #11
   3709e:	f015 fb0a 	bl	4c6b6 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   370a2:	2206      	movs	r2, #6
   370a4:	f104 0125 	add.w	r1, r4, #37	; 0x25
   370a8:	f105 0011 	add.w	r0, r5, #17
   370ac:	f015 fb03 	bl	4c6b6 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   370b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   370b2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   370b4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   370b6:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   370ba:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   370be:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   370c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   370c6:	776b      	strb	r3, [r5, #29]
		return;
   370c8:	e721      	b.n	36f0e <hci_evt_encode+0xa6>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   370ca:	460a      	mov	r2, r1
   370cc:	4638      	mov	r0, r7
   370ce:	4631      	mov	r1, r6
}
   370d0:	b009      	add	sp, #36	; 0x24
   370d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   370d6:	f7ff be65 	b.w	36da4 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   370da:	4b41      	ldr	r3, [pc, #260]	; (371e0 <hci_evt_encode+0x378>)
   370dc:	685b      	ldr	r3, [r3, #4]
   370de:	009a      	lsls	r2, r3, #2
   370e0:	f57f af15 	bpl.w	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   370e4:	4b3f      	ldr	r3, [pc, #252]	; (371e4 <hci_evt_encode+0x37c>)
   370e6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   370e8:	075b      	lsls	r3, r3, #29
   370ea:	f57f af10 	bpl.w	36f0e <hci_evt_encode+0xa6>
   370ee:	3508      	adds	r5, #8
   370f0:	2102      	movs	r1, #2
   370f2:	4628      	mov	r0, r5
   370f4:	f019 fb08 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   370f8:	233e      	movs	r3, #62	; 0x3e
   370fa:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   370fc:	230a      	movs	r3, #10
   370fe:	7043      	strb	r3, [r0, #1]
   37100:	2101      	movs	r1, #1
   37102:	4628      	mov	r0, r5
   37104:	f019 fb00 	bl	50708 <net_buf_simple_add>
   37108:	4603      	mov	r3, r0
	me->subevent = subevt;
   3710a:	2203      	movs	r2, #3
   3710c:	4628      	mov	r0, r5
   3710e:	701a      	strb	r2, [r3, #0]
   37110:	2109      	movs	r1, #9
   37112:	f019 faf9 	bl	50708 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   37116:	07ff      	lsls	r7, r7, #31
   37118:	4605      	mov	r5, r0
   3711a:	f100 8273 	bmi.w	37604 <hci_evt_encode+0x79c>
	sep->status = cu->status;
   3711e:	7f23      	ldrb	r3, [r4, #28]
   37120:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   37122:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   37124:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   37126:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   37128:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   3712c:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   37130:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   37134:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   37138:	e6e9      	b.n	36f0e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   3713a:	4b29      	ldr	r3, [pc, #164]	; (371e0 <hci_evt_encode+0x378>)
   3713c:	685b      	ldr	r3, [r3, #4]
   3713e:	0418      	lsls	r0, r3, #16
   37140:	f04f 0400 	mov.w	r4, #0
   37144:	f57f aee3 	bpl.w	36f0e <hci_evt_encode+0xa6>
   37148:	3508      	adds	r5, #8
   3714a:	2102      	movs	r1, #2
   3714c:	4628      	mov	r0, r5
   3714e:	f019 fadb 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   37152:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   37154:	2103      	movs	r1, #3
	hdr->evt = evt;
   37156:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37158:	7041      	strb	r1, [r0, #1]
   3715a:	4628      	mov	r0, r5
   3715c:	f019 fad4 	bl	50708 <net_buf_simple_add>
	ep->status = 0x00;
   37160:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   37162:	f8a0 6001 	strh.w	r6, [r0, #1]
   37166:	e6d2      	b.n	36f0e <hci_evt_encode+0xa6>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   37168:	4b21      	ldr	r3, [pc, #132]	; (371f0 <hci_evt_encode+0x388>)
   3716a:	681b      	ldr	r3, [r3, #0]
   3716c:	0219      	lsls	r1, r3, #8
   3716e:	f57f aece 	bpl.w	36f0e <hci_evt_encode+0xa6>
   37172:	3508      	adds	r5, #8
   37174:	2102      	movs	r1, #2
   37176:	4628      	mov	r0, r5
   37178:	f019 fac6 	bl	50708 <net_buf_simple_add>
	hdr->len = len;
   3717c:	2102      	movs	r1, #2
	hdr->evt = evt;
   3717e:	2357      	movs	r3, #87	; 0x57
   37180:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37182:	7041      	strb	r1, [r0, #1]
   37184:	4628      	mov	r0, r5
   37186:	f019 fabf 	bl	50708 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   3718a:	8006      	strh	r6, [r0, #0]
   3718c:	e6bf      	b.n	36f0e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3718e:	4b14      	ldr	r3, [pc, #80]	; (371e0 <hci_evt_encode+0x378>)
   37190:	685b      	ldr	r3, [r3, #4]
   37192:	009a      	lsls	r2, r3, #2
   37194:	f57f aebb 	bpl.w	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   37198:	4b12      	ldr	r3, [pc, #72]	; (371e4 <hci_evt_encode+0x37c>)
   3719a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3719c:	031b      	lsls	r3, r3, #12
   3719e:	f57f aeb6 	bpl.w	36f0e <hci_evt_encode+0xa6>
   371a2:	3508      	adds	r5, #8
   371a4:	2102      	movs	r1, #2
   371a6:	4628      	mov	r0, r5
   371a8:	f019 faae 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   371ac:	233e      	movs	r3, #62	; 0x3e
   371ae:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   371b0:	2304      	movs	r3, #4
   371b2:	7043      	strb	r3, [r0, #1]
   371b4:	2101      	movs	r1, #1
   371b6:	4628      	mov	r0, r5
   371b8:	f019 faa6 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   371bc:	2314      	movs	r3, #20
   371be:	7003      	strb	r3, [r0, #0]
   371c0:	2103      	movs	r1, #3
   371c2:	4628      	mov	r0, r5
   371c4:	f019 faa0 	bl	50708 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   371c8:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   371ca:	7f23      	ldrb	r3, [r4, #28]
   371cc:	7083      	strb	r3, [r0, #2]
   371ce:	e69e      	b.n	36f0e <hci_evt_encode+0xa6>
   371d0:	000551d8 	.word	0x000551d8
   371d4:	0005518c 	.word	0x0005518c
   371d8:	0005512c 	.word	0x0005512c
   371dc:	00052af4 	.word	0x00052af4
   371e0:	20000198 	.word	0x20000198
   371e4:	200001a0 	.word	0x200001a0
   371e8:	20004f00 	.word	0x20004f00
   371ec:	20004efc 	.word	0x20004efc
   371f0:	20003570 	.word	0x20003570
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   371f4:	4ba7      	ldr	r3, [pc, #668]	; (37494 <hci_evt_encode+0x62c>)
   371f6:	685b      	ldr	r3, [r3, #4]
   371f8:	009f      	lsls	r7, r3, #2
   371fa:	f57f ae88 	bpl.w	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   371fe:	4ba6      	ldr	r3, [pc, #664]	; (37498 <hci_evt_encode+0x630>)
   37200:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   37202:	0518      	lsls	r0, r3, #20
   37204:	f57f ae83 	bpl.w	36f0e <hci_evt_encode+0xa6>
   37208:	3508      	adds	r5, #8
   3720a:	2102      	movs	r1, #2
   3720c:	4628      	mov	r0, r5
   3720e:	f019 fa7b 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   37212:	233e      	movs	r3, #62	; 0x3e
   37214:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37216:	2306      	movs	r3, #6
   37218:	7043      	strb	r3, [r0, #1]
   3721a:	2101      	movs	r1, #1
   3721c:	4628      	mov	r0, r5
   3721e:	f019 fa73 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   37222:	230c      	movs	r3, #12
   37224:	7003      	strb	r3, [r0, #0]
   37226:	2105      	movs	r1, #5
   37228:	4628      	mov	r0, r5
   3722a:	f019 fa6d 	bl	50708 <net_buf_simple_add>
	sep->status = pu->status;
   3722e:	7f23      	ldrb	r3, [r4, #28]
   37230:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   37232:	f8a0 6001 	strh.w	r6, [r0, #1]
   37236:	7f62      	ldrb	r2, [r4, #29]
   37238:	2a00      	cmp	r2, #0
   3723a:	fa92 f3a2 	rbit	r3, r2
   3723e:	fab3 f383 	clz	r3, r3
   37242:	bf08      	it	eq
   37244:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   37248:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   3724a:	70c3      	strb	r3, [r0, #3]
   3724c:	7fa2      	ldrb	r2, [r4, #30]
   3724e:	fa92 f3a2 	rbit	r3, r2
   37252:	2a00      	cmp	r2, #0
   37254:	fab3 f383 	clz	r3, r3
   37258:	bf08      	it	eq
   3725a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   3725e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   37260:	7103      	strb	r3, [r0, #4]
   37262:	e654      	b.n	36f0e <hci_evt_encode+0xa6>
		LL_ASSERT(0);
   37264:	4a8d      	ldr	r2, [pc, #564]	; (3749c <hci_evt_encode+0x634>)
   37266:	498e      	ldr	r1, [pc, #568]	; (374a0 <hci_evt_encode+0x638>)
   37268:	488e      	ldr	r0, [pc, #568]	; (374a4 <hci_evt_encode+0x63c>)
   3726a:	f641 538f 	movw	r3, #7567	; 0x1d8f
   3726e:	f013 f91a 	bl	4a4a6 <printk>
   37272:	4040      	eors	r0, r0
   37274:	f380 8811 	msr	BASEPRI, r0
   37278:	f04f 0003 	mov.w	r0, #3
   3727c:	df02      	svc	2
}
   3727e:	e646      	b.n	36f0e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   37280:	4b84      	ldr	r3, [pc, #528]	; (37494 <hci_evt_encode+0x62c>)
   37282:	685b      	ldr	r3, [r3, #4]
   37284:	009a      	lsls	r2, r3, #2
   37286:	f57f ae42 	bpl.w	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   3728a:	4b83      	ldr	r3, [pc, #524]	; (37498 <hci_evt_encode+0x630>)
   3728c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3728e:	065b      	lsls	r3, r3, #25
   37290:	f57f ae3d 	bpl.w	36f0e <hci_evt_encode+0xa6>
   37294:	3508      	adds	r5, #8
   37296:	2102      	movs	r1, #2
   37298:	4628      	mov	r0, r5
   3729a:	f019 fa35 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   3729e:	233e      	movs	r3, #62	; 0x3e
   372a0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   372a2:	230b      	movs	r3, #11
   372a4:	7043      	strb	r3, [r0, #1]
   372a6:	2101      	movs	r1, #1
   372a8:	4628      	mov	r0, r5
   372aa:	f019 fa2d 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   372ae:	2307      	movs	r3, #7
   372b0:	7003      	strb	r3, [r0, #0]
   372b2:	210a      	movs	r1, #10
   372b4:	4628      	mov	r0, r5
   372b6:	f019 fa27 	bl	50708 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   372ba:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   372bc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   372be:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   372c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   372c2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   372c4:	8c23      	ldrh	r3, [r4, #32]
   372c6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   372c8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   372ca:	8103      	strh	r3, [r0, #8]
   372cc:	e61f      	b.n	36f0e <hci_evt_encode+0xa6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   372ce:	460b      	mov	r3, r1
   372d0:	4632      	mov	r2, r6
   372d2:	4639      	mov	r1, r7
   372d4:	2000      	movs	r0, #0
}
   372d6:	b009      	add	sp, #36	; 0x24
   372d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   372dc:	f7fe bef0 	b.w	360c0 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   372e0:	4b6c      	ldr	r3, [pc, #432]	; (37494 <hci_evt_encode+0x62c>)
   372e2:	681b      	ldr	r3, [r3, #0]
   372e4:	061f      	lsls	r7, r3, #24
   372e6:	f57f ae12 	bpl.w	36f0e <hci_evt_encode+0xa6>
   372ea:	3508      	adds	r5, #8
   372ec:	2102      	movs	r1, #2
   372ee:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   372f0:	f894 4020 	ldrb.w	r4, [r4, #32]
   372f4:	f019 fa08 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   372f8:	2308      	movs	r3, #8
	hdr->len = len;
   372fa:	2104      	movs	r1, #4
	hdr->evt = evt;
   372fc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   372fe:	7041      	strb	r1, [r0, #1]
   37300:	4628      	mov	r0, r5
   37302:	f019 fa01 	bl	50708 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   37306:	fab4 f384 	clz	r3, r4
   3730a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   3730c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3730e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   37312:	70c3      	strb	r3, [r0, #3]
   37314:	e5fb      	b.n	36f0e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   37316:	4b5f      	ldr	r3, [pc, #380]	; (37494 <hci_evt_encode+0x62c>)
   37318:	685b      	ldr	r3, [r3, #4]
   3731a:	0098      	lsls	r0, r3, #2
   3731c:	f140 8093 	bpl.w	37446 <hci_evt_encode+0x5de>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   37320:	4b5d      	ldr	r3, [pc, #372]	; (37498 <hci_evt_encode+0x630>)
   37322:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   37324:	0699      	lsls	r1, r3, #26
   37326:	f140 808e 	bpl.w	37446 <hci_evt_encode+0x5de>
   3732a:	3508      	adds	r5, #8
   3732c:	2102      	movs	r1, #2
   3732e:	4628      	mov	r0, r5
   37330:	f019 f9ea 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   37334:	233e      	movs	r3, #62	; 0x3e
   37336:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37338:	230b      	movs	r3, #11
   3733a:	7043      	strb	r3, [r0, #1]
   3733c:	2101      	movs	r1, #1
   3733e:	4628      	mov	r0, r5
   37340:	f019 f9e2 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   37344:	2306      	movs	r3, #6
   37346:	7003      	strb	r3, [r0, #0]
   37348:	210a      	movs	r1, #10
   3734a:	4628      	mov	r0, r5
   3734c:	f019 f9dc 	bl	50708 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   37350:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   37352:	8c23      	ldrh	r3, [r4, #32]
   37354:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   37356:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   37358:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   3735a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   3735c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   3735e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   37360:	8103      	strh	r3, [r0, #8]
   37362:	e5d4      	b.n	36f0e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   37364:	4b4b      	ldr	r3, [pc, #300]	; (37494 <hci_evt_encode+0x62c>)
   37366:	685b      	ldr	r3, [r3, #4]
   37368:	0099      	lsls	r1, r3, #2
   3736a:	f57f add0 	bpl.w	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   3736e:	4b4a      	ldr	r3, [pc, #296]	; (37498 <hci_evt_encode+0x630>)
   37370:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   37372:	06da      	lsls	r2, r3, #27
   37374:	f57f adcb 	bpl.w	36f0e <hci_evt_encode+0xa6>
   37378:	3508      	adds	r5, #8
   3737a:	2102      	movs	r1, #2
   3737c:	4628      	mov	r0, r5
   3737e:	f019 f9c3 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   37382:	233e      	movs	r3, #62	; 0x3e
   37384:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37386:	230d      	movs	r3, #13
   37388:	7043      	strb	r3, [r0, #1]
   3738a:	2101      	movs	r1, #1
   3738c:	4628      	mov	r0, r5
   3738e:	f019 f9bb 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   37392:	2305      	movs	r3, #5
   37394:	7003      	strb	r3, [r0, #0]
   37396:	210c      	movs	r1, #12
   37398:	4628      	mov	r0, r5
   3739a:	f019 f9b5 	bl	50708 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   3739e:	f104 0120 	add.w	r1, r4, #32
   373a2:	4605      	mov	r5, r0
   373a4:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   373a6:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   373aa:	f015 f984 	bl	4c6b6 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   373ae:	2202      	movs	r2, #2
   373b0:	f104 0128 	add.w	r1, r4, #40	; 0x28
   373b4:	f105 000a 	add.w	r0, r5, #10
}
   373b8:	b009      	add	sp, #36	; 0x24
   373ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   373be:	f015 b97a 	b.w	4c6b6 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   373c2:	4b34      	ldr	r3, [pc, #208]	; (37494 <hci_evt_encode+0x62c>)
   373c4:	681b      	ldr	r3, [r3, #0]
   373c6:	061b      	lsls	r3, r3, #24
   373c8:	f04f 0400 	mov.w	r4, #0
   373cc:	f57f ad9f 	bpl.w	36f0e <hci_evt_encode+0xa6>
   373d0:	3508      	adds	r5, #8
   373d2:	2102      	movs	r1, #2
   373d4:	4628      	mov	r0, r5
   373d6:	f019 f997 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   373da:	2308      	movs	r3, #8
	hdr->len = len;
   373dc:	2104      	movs	r1, #4
	hdr->evt = evt;
   373de:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   373e0:	7041      	strb	r1, [r0, #1]
   373e2:	4628      	mov	r0, r5
   373e4:	f019 f990 	bl	50708 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   373e8:	2301      	movs	r3, #1
	ep->status = err;
   373ea:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   373ec:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   373f0:	70c3      	strb	r3, [r0, #3]
   373f2:	e58c      	b.n	36f0e <hci_evt_encode+0xa6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   373f4:	f890 3020 	ldrb.w	r3, [r0, #32]
   373f8:	2b0e      	cmp	r3, #14
   373fa:	f47f ad88 	bne.w	36f0e <hci_evt_encode+0xa6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   373fe:	460b      	mov	r3, r1
   37400:	4632      	mov	r2, r6
   37402:	2100      	movs	r1, #0
   37404:	201a      	movs	r0, #26
   37406:	e766      	b.n	372d6 <hci_evt_encode+0x46e>
		ll_rl_crpa_set(cc->peer_addr_type,
   37408:	7fa0      	ldrb	r0, [r4, #30]
   3740a:	f104 0325 	add.w	r3, r4, #37	; 0x25
   3740e:	22ff      	movs	r2, #255	; 0xff
   37410:	f104 011f 	add.w	r1, r4, #31
   37414:	f008 faac 	bl	3f970 <ll_rl_crpa_set>
   37418:	e600      	b.n	3701c <hci_evt_encode+0x1b4>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   3741a:	4a20      	ldr	r2, [pc, #128]	; (3749c <hci_evt_encode+0x634>)
   3741c:	4922      	ldr	r1, [pc, #136]	; (374a8 <hci_evt_encode+0x640>)
   3741e:	4821      	ldr	r0, [pc, #132]	; (374a4 <hci_evt_encode+0x63c>)
   37420:	f641 23f5 	movw	r3, #6901	; 0x1af5
   37424:	f013 f83f 	bl	4a4a6 <printk>
   37428:	4040      	eors	r0, r0
   3742a:	f380 8811 	msr	BASEPRI, r0
   3742e:	f04f 0003 	mov.w	r0, #3
   37432:	df02      	svc	2
   37434:	e5ee      	b.n	37014 <hci_evt_encode+0x1ac>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   37436:	2100      	movs	r1, #0
   37438:	f104 031e 	add.w	r3, r4, #30
   3743c:	4642      	mov	r2, r8
   3743e:	4608      	mov	r0, r1
   37440:	f008 fa96 	bl	3f970 <ll_rl_crpa_set>
   37444:	e57b      	b.n	36f3e <hci_evt_encode+0xd6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   37446:	2300      	movs	r3, #0
   37448:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3744c:	9300      	str	r3, [sp, #0]
   3744e:	221a      	movs	r2, #26
   37450:	2102      	movs	r1, #2
   37452:	4630      	mov	r0, r6
   37454:	f003 f93a 	bl	3a6cc <ll_conn_update>
		return;
   37458:	e559      	b.n	36f0e <hci_evt_encode+0xa6>
   3745a:	2102      	movs	r1, #2
   3745c:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   3745e:	f1b8 0f00 	cmp.w	r8, #0
   37462:	f040 80b8 	bne.w	375d6 <hci_evt_encode+0x76e>
   37466:	f019 f94f 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   3746a:	233e      	movs	r3, #62	; 0x3e
   3746c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3746e:	2313      	movs	r3, #19
   37470:	7043      	strb	r3, [r0, #1]
   37472:	2101      	movs	r1, #1
   37474:	4628      	mov	r0, r5
   37476:	f019 f947 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   3747a:	2301      	movs	r3, #1
   3747c:	7003      	strb	r3, [r0, #0]
   3747e:	2112      	movs	r1, #18
   37480:	4628      	mov	r0, r5
   37482:	f019 f941 	bl	50708 <net_buf_simple_add>
   37486:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   37488:	2212      	movs	r2, #18
   3748a:	4641      	mov	r1, r8
   3748c:	f015 f91e 	bl	4c6cc <memset>
		lecc->status = status;
   37490:	7027      	strb	r7, [r4, #0]
		return;
   37492:	e53c      	b.n	36f0e <hci_evt_encode+0xa6>
   37494:	20000198 	.word	0x20000198
   37498:	200001a0 	.word	0x200001a0
   3749c:	000551d8 	.word	0x000551d8
   374a0:	0005518c 	.word	0x0005518c
   374a4:	0005512c 	.word	0x0005512c
   374a8:	0005523c 	.word	0x0005523c
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   374ac:	2b00      	cmp	r3, #0
   374ae:	f43f ad2e 	beq.w	36f0e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   374b2:	4b64      	ldr	r3, [pc, #400]	; (37644 <hci_evt_encode+0x7dc>)
   374b4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   374b6:	055b      	lsls	r3, r3, #21
   374b8:	f57f ad29 	bpl.w	36f0e <hci_evt_encode+0xa6>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   374bc:	7f23      	ldrb	r3, [r4, #28]
   374be:	f003 030f 	and.w	r3, r3, #15
   374c2:	2b01      	cmp	r3, #1
   374c4:	d00c      	beq.n	374e0 <hci_evt_encode+0x678>
   374c6:	4a60      	ldr	r2, [pc, #384]	; (37648 <hci_evt_encode+0x7e0>)
   374c8:	4960      	ldr	r1, [pc, #384]	; (3764c <hci_evt_encode+0x7e4>)
   374ca:	4861      	ldr	r0, [pc, #388]	; (37650 <hci_evt_encode+0x7e8>)
   374cc:	f241 435a 	movw	r3, #5210	; 0x145a
   374d0:	f012 ffe9 	bl	4a4a6 <printk>
   374d4:	4040      	eors	r0, r0
   374d6:	f380 8811 	msr	BASEPRI, r0
   374da:	f04f 0003 	mov.w	r0, #3
   374de:	df02      	svc	2
	if (dup_count >= 0) {
   374e0:	4b5c      	ldr	r3, [pc, #368]	; (37654 <hci_evt_encode+0x7ec>)
   374e2:	681b      	ldr	r3, [r3, #0]
   374e4:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   374e6:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   374ea:	db0a      	blt.n	37502 <hci_evt_encode+0x69a>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   374ec:	7f20      	ldrb	r0, [r4, #28]
   374ee:	4632      	mov	r2, r6
   374f0:	f3c0 1180 	ubfx	r1, r0, #6, #1
   374f4:	f000 000f 	and.w	r0, r0, #15
   374f8:	f7fe fd82 	bl	36000 <dup_found.part.0>
	if (dup_scan &&
   374fc:	2800      	cmp	r0, #0
   374fe:	f47f ad06 	bne.w	36f0e <hci_evt_encode+0xa6>
   37502:	3508      	adds	r5, #8
   37504:	2102      	movs	r1, #2
   37506:	4628      	mov	r0, r5
   37508:	f019 f8fe 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   3750c:	233e      	movs	r3, #62	; 0x3e
   3750e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37510:	2312      	movs	r3, #18
   37512:	7043      	strb	r3, [r0, #1]
   37514:	2101      	movs	r1, #1
   37516:	4628      	mov	r0, r5
   37518:	f019 f8f6 	bl	50708 <net_buf_simple_add>
   3751c:	4603      	mov	r3, r0
	me->subevent = subevt;
   3751e:	220b      	movs	r2, #11
   37520:	701a      	strb	r2, [r3, #0]
   37522:	4628      	mov	r0, r5
   37524:	2111      	movs	r1, #17
   37526:	f019 f8ef 	bl	50708 <net_buf_simple_add>
	drp->num_reports = 1U;
   3752a:	2301      	movs	r3, #1
   3752c:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   3752e:	7043      	strb	r3, [r0, #1]
   37530:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   37532:	f008 f91f 	bl	3f774 <ll_rl_size_get>
   37536:	4580      	cmp	r8, r0
   37538:	d279      	bcs.n	3762e <hci_evt_encode+0x7c6>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   3753a:	1cea      	adds	r2, r5, #3
   3753c:	4640      	mov	r0, r8
   3753e:	1ca9      	adds	r1, r5, #2
   37540:	f008 f8d2 	bl	3f6e8 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   37544:	78ab      	ldrb	r3, [r5, #2]
   37546:	3302      	adds	r3, #2
   37548:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   3754a:	7f23      	ldrb	r3, [r4, #28]
   3754c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   37550:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   37552:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   37554:	f104 0124 	add.w	r1, r4, #36	; 0x24
   37558:	f105 000a 	add.w	r0, r5, #10
   3755c:	f015 f8ab 	bl	4c6b6 <memcpy>
	dir_info->rssi = rssi;
   37560:	742f      	strb	r7, [r5, #16]
   37562:	e4d4      	b.n	36f0e <hci_evt_encode+0xa6>
   37564:	2102      	movs	r1, #2
   37566:	4628      	mov	r0, r5
   37568:	f019 f8ce 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   3756c:	233e      	movs	r3, #62	; 0x3e
   3756e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37570:	2313      	movs	r3, #19
   37572:	7043      	strb	r3, [r0, #1]
   37574:	2101      	movs	r1, #1
   37576:	4628      	mov	r0, r5
   37578:	f019 f8c6 	bl	50708 <net_buf_simple_add>
   3757c:	4603      	mov	r3, r0
	me->subevent = subevt;
   3757e:	2201      	movs	r2, #1
   37580:	701a      	strb	r2, [r3, #0]
   37582:	4628      	mov	r0, r5
   37584:	2112      	movs	r1, #18
   37586:	f019 f8bf 	bl	50708 <net_buf_simple_add>
	lecc->status = 0x00;
   3758a:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   3758c:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   37590:	7f63      	ldrb	r3, [r4, #29]
   37592:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   37594:	7fa3      	ldrb	r3, [r4, #30]
   37596:	f003 0301 	and.w	r3, r3, #1
   3759a:	4605      	mov	r5, r0
   3759c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   3759e:	4649      	mov	r1, r9
   375a0:	2206      	movs	r2, #6
   375a2:	3005      	adds	r0, #5
   375a4:	f015 f887 	bl	4c6b6 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   375a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   375aa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   375ac:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   375ae:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   375b2:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   375b6:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   375ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   375be:	746b      	strb	r3, [r5, #17]
   375c0:	e4a5      	b.n	36f0e <hci_evt_encode+0xa6>
		adv_info->addr.type = adv->tx_addr;
   375c2:	7f23      	ldrb	r3, [r4, #28]
   375c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   375c8:	4651      	mov	r1, sl
		adv_info->addr.type = adv->tx_addr;
   375ca:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   375cc:	2206      	movs	r2, #6
   375ce:	1ce8      	adds	r0, r5, #3
   375d0:	f015 f871 	bl	4c6b6 <memcpy>
   375d4:	e510      	b.n	36ff8 <hci_evt_encode+0x190>
   375d6:	f019 f897 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   375da:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   375dc:	231f      	movs	r3, #31
	hdr->evt = evt;
   375de:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   375e0:	7043      	strb	r3, [r0, #1]
   375e2:	2101      	movs	r1, #1
   375e4:	4628      	mov	r0, r5
   375e6:	f019 f88f 	bl	50708 <net_buf_simple_add>
	me->subevent = subevt;
   375ea:	230a      	movs	r3, #10
   375ec:	7003      	strb	r3, [r0, #0]
   375ee:	211e      	movs	r1, #30
   375f0:	4628      	mov	r0, r5
   375f2:	f019 f889 	bl	50708 <net_buf_simple_add>
   375f6:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   375f8:	221e      	movs	r2, #30
   375fa:	2100      	movs	r1, #0
   375fc:	f015 f866 	bl	4c6cc <memset>
			leecc->status = status;
   37600:	7027      	strb	r7, [r4, #0]
			return;
   37602:	e484      	b.n	36f0e <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   37604:	4a10      	ldr	r2, [pc, #64]	; (37648 <hci_evt_encode+0x7e0>)
   37606:	4914      	ldr	r1, [pc, #80]	; (37658 <hci_evt_encode+0x7f0>)
   37608:	4811      	ldr	r0, [pc, #68]	; (37650 <hci_evt_encode+0x7e8>)
   3760a:	f641 337a 	movw	r3, #7034	; 0x1b7a
   3760e:	f012 ff4a 	bl	4a4a6 <printk>
   37612:	4040      	eors	r0, r0
   37614:	f380 8811 	msr	BASEPRI, r0
   37618:	f04f 0003 	mov.w	r0, #3
   3761c:	df02      	svc	2
   3761e:	e57e      	b.n	3711e <hci_evt_encode+0x2b6>
   37620:	2600      	movs	r6, #0
   37622:	230c      	movs	r3, #12
   37624:	f04f 0b0b 	mov.w	fp, #11
   37628:	9305      	str	r3, [sp, #20]
		data_len = 0U;
   3762a:	46b1      	mov	r9, r6
   3762c:	e4b8      	b.n	36fa0 <hci_evt_encode+0x138>
		dir_info->addr.type = adv->tx_addr;
   3762e:	7f23      	ldrb	r3, [r4, #28]
   37630:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   37634:	4631      	mov	r1, r6
		dir_info->addr.type = adv->tx_addr;
   37636:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   37638:	2206      	movs	r2, #6
   3763a:	1ce8      	adds	r0, r5, #3
   3763c:	f015 f83b 	bl	4c6b6 <memcpy>
   37640:	e783      	b.n	3754a <hci_evt_encode+0x6e2>
   37642:	bf00      	nop
   37644:	200001a0 	.word	0x200001a0
   37648:	000551d8 	.word	0x000551d8
   3764c:	00055214 	.word	0x00055214
   37650:	0005512c 	.word	0x0005512c
   37654:	20004f00 	.word	0x20004f00
   37658:	00055278 	.word	0x00055278

0003765c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   3765c:	b570      	push	{r4, r5, r6, lr}
   3765e:	f100 0408 	add.w	r4, r0, #8
   37662:	460e      	mov	r6, r1
   37664:	4620      	mov	r0, r4
   37666:	2102      	movs	r1, #2
   37668:	4615      	mov	r5, r2
   3766a:	f019 f84d 	bl	50708 <net_buf_simple_add>
	hdr->evt = evt;
   3766e:	2313      	movs	r3, #19
	hdr->len = len;
   37670:	2105      	movs	r1, #5
	hdr->evt = evt;
   37672:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   37674:	7041      	strb	r1, [r0, #1]
   37676:	4620      	mov	r0, r4
   37678:	f019 f846 	bl	50708 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   3767c:	2301      	movs	r3, #1
   3767e:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   37680:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   37684:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   37688:	bd70      	pop	{r4, r5, r6, pc}
   3768a:	bf00      	nop

0003768c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3768c:	7903      	ldrb	r3, [r0, #4]
   3768e:	2b03      	cmp	r3, #3
   37690:	d008      	beq.n	376a4 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   37692:	3b05      	subs	r3, #5
   37694:	b2db      	uxtb	r3, r3
   37696:	2b17      	cmp	r3, #23
   37698:	d901      	bls.n	3769e <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3769a:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   3769c:	4770      	bx	lr
   3769e:	4a05      	ldr	r2, [pc, #20]	; (376b4 <hci_get_class+0x28>)
   376a0:	5cd0      	ldrb	r0, [r2, r3]
   376a2:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   376a4:	7f03      	ldrb	r3, [r0, #28]
   376a6:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   376aa:	2b03      	cmp	r3, #3
   376ac:	bf0c      	ite	eq
   376ae:	2004      	moveq	r0, #4
   376b0:	2005      	movne	r0, #5
   376b2:	4770      	bx	lr
   376b4:	000552b4 	.word	0x000552b4

000376b8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   376b8:	480d      	ldr	r0, [pc, #52]	; (376f0 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   376ba:	4a0e      	ldr	r2, [pc, #56]	; (376f4 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   376bc:	490e      	ldr	r1, [pc, #56]	; (376f8 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   376be:	4b0f      	ldr	r3, [pc, #60]	; (376fc <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   376c0:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   376c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   376c6:	f641 75ff 	movw	r5, #8191	; 0x1fff
   376ca:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   376ce:	2400      	movs	r4, #0
   376d0:	2500      	movs	r5, #0
   376d2:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   376d6:	4a0a      	ldr	r2, [pc, #40]	; (37700 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   376d8:	241f      	movs	r4, #31
   376da:	2500      	movs	r5, #0
   376dc:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   376e0:	2100      	movs	r1, #0
   376e2:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   376e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   376e8:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   376ea:	601a      	str	r2, [r3, #0]
}
   376ec:	4770      	bx	lr
   376ee:	bf00      	nop
   376f0:	20000198 	.word	0x20000198
   376f4:	20003570 	.word	0x20003570
   376f8:	200001a0 	.word	0x200001a0
   376fc:	20004f00 	.word	0x20004f00
   37700:	20004efc 	.word	0x20004efc

00037704 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   37704:	f009 b9e0 	b.w	40ac8 <lll_csrand_get>

00037708 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   37708:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   3770a:	2300      	movs	r3, #0
   3770c:	f00b fd2a 	bl	43164 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   37710:	2000      	movs	r0, #0
   37712:	bd08      	pop	{r3, pc}

00037714 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   37714:	4801      	ldr	r0, [pc, #4]	; (3771c <ll_feat_get+0x8>)
   37716:	2100      	movs	r1, #0
   37718:	4770      	bx	lr
   3771a:	bf00      	nop
   3771c:	000141ff 	.word	0x000141ff

00037720 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   37720:	b510      	push	{r4, lr}
   37722:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   37724:	f009 fa06 	bl	40b34 <lll_reset>
	LL_ASSERT(!err);
   37728:	b970      	cbnz	r0, 37748 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   3772a:	f009 fe15 	bl	41358 <lll_adv_reset>
	LL_ASSERT(!err);
   3772e:	b9e0      	cbnz	r0, 3776a <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   37730:	f00a fd8e 	bl	42250 <lll_scan_reset>
	LL_ASSERT(!err);
   37734:	bb50      	cbnz	r0, 3778c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   37736:	f00a fec9 	bl	424cc <lll_conn_reset>
	LL_ASSERT(!err);
   3773a:	2800      	cmp	r0, #0
   3773c:	d137      	bne.n	377ae <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   3773e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   37740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37744:	f011 b8b4 	b.w	488b0 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   37748:	4a22      	ldr	r2, [pc, #136]	; (377d4 <perform_lll_reset+0xb4>)
   3774a:	4923      	ldr	r1, [pc, #140]	; (377d8 <perform_lll_reset+0xb8>)
   3774c:	4823      	ldr	r0, [pc, #140]	; (377dc <perform_lll_reset+0xbc>)
   3774e:	f640 0324 	movw	r3, #2084	; 0x824
   37752:	f012 fea8 	bl	4a4a6 <printk>
   37756:	4040      	eors	r0, r0
   37758:	f380 8811 	msr	BASEPRI, r0
   3775c:	f04f 0003 	mov.w	r0, #3
   37760:	df02      	svc	2
	err = lll_adv_reset();
   37762:	f009 fdf9 	bl	41358 <lll_adv_reset>
	LL_ASSERT(!err);
   37766:	2800      	cmp	r0, #0
   37768:	d0e2      	beq.n	37730 <perform_lll_reset+0x10>
   3776a:	4a1a      	ldr	r2, [pc, #104]	; (377d4 <perform_lll_reset+0xb4>)
   3776c:	491a      	ldr	r1, [pc, #104]	; (377d8 <perform_lll_reset+0xb8>)
   3776e:	481b      	ldr	r0, [pc, #108]	; (377dc <perform_lll_reset+0xbc>)
   37770:	f640 0329 	movw	r3, #2089	; 0x829
   37774:	f012 fe97 	bl	4a4a6 <printk>
   37778:	4040      	eors	r0, r0
   3777a:	f380 8811 	msr	BASEPRI, r0
   3777e:	f04f 0003 	mov.w	r0, #3
   37782:	df02      	svc	2
	err = lll_scan_reset();
   37784:	f00a fd64 	bl	42250 <lll_scan_reset>
	LL_ASSERT(!err);
   37788:	2800      	cmp	r0, #0
   3778a:	d0d4      	beq.n	37736 <perform_lll_reset+0x16>
   3778c:	4a11      	ldr	r2, [pc, #68]	; (377d4 <perform_lll_reset+0xb4>)
   3778e:	4912      	ldr	r1, [pc, #72]	; (377d8 <perform_lll_reset+0xb8>)
   37790:	4812      	ldr	r0, [pc, #72]	; (377dc <perform_lll_reset+0xbc>)
   37792:	f640 032f 	movw	r3, #2095	; 0x82f
   37796:	f012 fe86 	bl	4a4a6 <printk>
   3779a:	4040      	eors	r0, r0
   3779c:	f380 8811 	msr	BASEPRI, r0
   377a0:	f04f 0003 	mov.w	r0, #3
   377a4:	df02      	svc	2
	err = lll_conn_reset();
   377a6:	f00a fe91 	bl	424cc <lll_conn_reset>
	LL_ASSERT(!err);
   377aa:	2800      	cmp	r0, #0
   377ac:	d0c7      	beq.n	3773e <perform_lll_reset+0x1e>
   377ae:	4a09      	ldr	r2, [pc, #36]	; (377d4 <perform_lll_reset+0xb4>)
   377b0:	4909      	ldr	r1, [pc, #36]	; (377d8 <perform_lll_reset+0xb8>)
   377b2:	480a      	ldr	r0, [pc, #40]	; (377dc <perform_lll_reset+0xbc>)
   377b4:	f640 0335 	movw	r3, #2101	; 0x835
   377b8:	f012 fe75 	bl	4a4a6 <printk>
   377bc:	4040      	eors	r0, r0
   377be:	f380 8811 	msr	BASEPRI, r0
   377c2:	f04f 0003 	mov.w	r0, #3
   377c6:	df02      	svc	2
   377c8:	4620      	mov	r0, r4
}
   377ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   377ce:	f011 b86f 	b.w	488b0 <z_impl_k_sem_give>
   377d2:	bf00      	nop
   377d4:	000552cc 	.word	0x000552cc
   377d8:	00055308 	.word	0x00055308
   377dc:	0005512c 	.word	0x0005512c

000377e0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   377e0:	6008      	str	r0, [r1, #0]
   377e2:	4801      	ldr	r0, [pc, #4]	; (377e8 <ull_ticker_status_give+0x8>)
   377e4:	f011 b864 	b.w	488b0 <z_impl_k_sem_give>
   377e8:	200055e8 	.word	0x200055e8

000377ec <disabled_cb>:
   377ec:	f011 b860 	b.w	488b0 <z_impl_k_sem_give>

000377f0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   377f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   377f4:	4d2c      	ldr	r5, [pc, #176]	; (378a8 <tx_cmplt_get+0xb8>)
{
   377f6:	460c      	mov	r4, r1
   377f8:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   377fa:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   377fc:	7822      	ldrb	r2, [r4, #0]
   377fe:	782b      	ldrb	r3, [r5, #0]
   37800:	4291      	cmp	r1, r2
   37802:	bf9c      	itt	ls
   37804:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   37806:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   37808:	4591      	cmp	r9, r2
{
   3780a:	4682      	mov	sl, r0
   3780c:	d042      	beq.n	37894 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   3780e:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   37812:	3201      	adds	r2, #1
   37814:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   37816:	4f25      	ldr	r7, [pc, #148]	; (378ac <tx_cmplt_get+0xbc>)
		i = 0U;
   37818:	4291      	cmp	r1, r2
   3781a:	bf08      	it	eq
   3781c:	2200      	moveq	r2, #0

	*idx = i;
   3781e:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   37820:	5afa      	ldrh	r2, [r7, r3]
   37822:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   37824:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   37826:	443b      	add	r3, r7
   37828:	f04f 0b01 	mov.w	fp, #1
   3782c:	f04f 0802 	mov.w	r8, #2
   37830:	e021      	b.n	37876 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   37832:	b362      	cbz	r2, 3788e <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   37834:	7902      	ldrb	r2, [r0, #4]
   37836:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   3783a:	3a01      	subs	r2, #1
   3783c:	2a01      	cmp	r2, #1
   3783e:	d92d      	bls.n	3789c <tx_cmplt_get+0xac>
   37840:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   37844:	f002 feee 	bl	3a624 <ll_tx_mem_release>
	if (*idx >= count) {
   37848:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3784a:	7869      	ldrb	r1, [r5, #1]
   3784c:	7828      	ldrb	r0, [r5, #0]
   3784e:	4299      	cmp	r1, r3
   37850:	bf9c      	itt	ls
   37852:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   37854:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   37856:	454b      	cmp	r3, r9
   37858:	d01d      	beq.n	37896 <tx_cmplt_get+0xa6>
	i = *idx + 1;
   3785a:	1c5a      	adds	r2, r3, #1
   3785c:	b2d2      	uxtb	r2, r2
		i = 0U;
   3785e:	4291      	cmp	r1, r2
   37860:	bf08      	it	eq
   37862:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   37864:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   37868:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   3786a:	5af9      	ldrh	r1, [r7, r3]
   3786c:	f8ba 2000 	ldrh.w	r2, [sl]
   37870:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   37872:	443b      	add	r3, r7
   37874:	d10f      	bne.n	37896 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   37876:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   37878:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   3787a:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   3787e:	d8d8      	bhi.n	37832 <tx_cmplt_get+0x42>
			cmplt++;
   37880:	3601      	adds	r6, #1
   37882:	b2f6      	uxtb	r6, r6
   37884:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   37888:	2a00      	cmp	r2, #0
   3788a:	d0dd      	beq.n	37848 <tx_cmplt_get+0x58>
   3788c:	e7da      	b.n	37844 <tx_cmplt_get+0x54>
   3788e:	f8c3 8004 	str.w	r8, [r3, #4]
   37892:	e7d9      	b.n	37848 <tx_cmplt_get+0x58>
		return 0;
   37894:	2600      	movs	r6, #0

	return cmplt;
}
   37896:	4630      	mov	r0, r6
   37898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   3789c:	3601      	adds	r6, #1
   3789e:	f8c3 b004 	str.w	fp, [r3, #4]
   378a2:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   378a4:	e7ce      	b.n	37844 <tx_cmplt_get+0x54>
   378a6:	bf00      	nop
   378a8:	20000cc4 	.word	0x20000cc4
   378ac:	20000cc8 	.word	0x20000cc8

000378b0 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   378b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   378b4:	4e3c      	ldr	r6, [pc, #240]	; (379a8 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   378b6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 379ac <ull_done+0xfc>
   378ba:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 379b0 <ull_done+0x100>
{
   378be:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   378c0:	e9d6 0100 	ldrd	r0, r1, [r6]
   378c4:	aa01      	add	r2, sp, #4
   378c6:	f7fc fe53 	bl	34570 <memq_peek>
		if (link) {
   378ca:	4604      	mov	r4, r0
   378cc:	2800      	cmp	r0, #0
   378ce:	d03e      	beq.n	3794e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   378d0:	6870      	ldr	r0, [r6, #4]
   378d2:	2200      	movs	r2, #0
   378d4:	4631      	mov	r1, r6
   378d6:	f7fc fe53 	bl	34580 <memq_dequeue>
			rx_demux_event_done(link, done);
   378da:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   378dc:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   378de:	b135      	cbz	r5, 378ee <ull_done+0x3e>
	return hdr->ref;
   378e0:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   378e2:	2b00      	cmp	r3, #0
   378e4:	d052      	beq.n	3798c <ull_done+0xdc>
	return hdr->ref--;
   378e6:	782b      	ldrb	r3, [r5, #0]
   378e8:	3b01      	subs	r3, #1
   378ea:	b2db      	uxtb	r3, r3
   378ec:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   378ee:	f897 3020 	ldrb.w	r3, [r7, #32]
   378f2:	b123      	cbz	r3, 378fe <ull_done+0x4e>
   378f4:	2b01      	cmp	r3, #1
   378f6:	d13b      	bne.n	37970 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   378f8:	4638      	mov	r0, r7
   378fa:	f006 fa4b 	bl	3dd94 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   378fe:	4a2d      	ldr	r2, [pc, #180]	; (379b4 <ull_done+0x104>)
	last = last + 1;
   37900:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   37902:	f892 c001 	ldrb.w	ip, [r2, #1]
   37906:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   37908:	3301      	adds	r3, #1
	done->extra.type = 0U;
   3790a:	2000      	movs	r0, #0
   3790c:	b2db      	uxtb	r3, r3
		last = 0U;
   3790e:	459c      	cmp	ip, r3
   37910:	bf08      	it	eq
   37912:	4603      	moveq	r3, r0
	if (last == first) {
   37914:	4299      	cmp	r1, r3
   37916:	f887 0020 	strb.w	r0, [r7, #32]
   3791a:	d01b      	beq.n	37954 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   3791c:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   3791e:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37920:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37922:	fb00 2101 	mla	r1, r0, r1, r2
   37926:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   37928:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   3792a:	2d00      	cmp	r5, #0
   3792c:	d0c8      	beq.n	378c0 <ull_done+0x10>
	return hdr->ref;
   3792e:	782b      	ldrb	r3, [r5, #0]
   37930:	2b00      	cmp	r3, #0
   37932:	d1c5      	bne.n	378c0 <ull_done+0x10>
   37934:	696b      	ldr	r3, [r5, #20]
   37936:	2b00      	cmp	r3, #0
   37938:	d0c2      	beq.n	378c0 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   3793a:	69a8      	ldr	r0, [r5, #24]
   3793c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   3793e:	e9d6 0100 	ldrd	r0, r1, [r6]
   37942:	aa01      	add	r2, sp, #4
   37944:	f7fc fe14 	bl	34570 <memq_peek>
		if (link) {
   37948:	4604      	mov	r4, r0
   3794a:	2800      	cmp	r0, #0
   3794c:	d1c0      	bne.n	378d0 <ull_done+0x20>
}
   3794e:	b003      	add	sp, #12
   37950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   37954:	4918      	ldr	r1, [pc, #96]	; (379b8 <ull_done+0x108>)
   37956:	4819      	ldr	r0, [pc, #100]	; (379bc <ull_done+0x10c>)
   37958:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   3795c:	4642      	mov	r2, r8
   3795e:	f012 fda2 	bl	4a4a6 <printk>
   37962:	4040      	eors	r0, r0
   37964:	f380 8811 	msr	BASEPRI, r0
   37968:	f04f 0003 	mov.w	r0, #3
   3796c:	df02      	svc	2
   3796e:	e7dc      	b.n	3792a <ull_done+0x7a>
		LL_ASSERT(0);
   37970:	4913      	ldr	r1, [pc, #76]	; (379c0 <ull_done+0x110>)
   37972:	4812      	ldr	r0, [pc, #72]	; (379bc <ull_done+0x10c>)
   37974:	f640 2369 	movw	r3, #2665	; 0xa69
   37978:	4642      	mov	r2, r8
   3797a:	f012 fd94 	bl	4a4a6 <printk>
   3797e:	4040      	eors	r0, r0
   37980:	f380 8811 	msr	BASEPRI, r0
   37984:	f04f 0003 	mov.w	r0, #3
   37988:	df02      	svc	2
		break;
   3798a:	e7b8      	b.n	378fe <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   3798c:	480b      	ldr	r0, [pc, #44]	; (379bc <ull_done+0x10c>)
   3798e:	f640 2312 	movw	r3, #2578	; 0xa12
   37992:	4642      	mov	r2, r8
   37994:	4649      	mov	r1, r9
   37996:	f012 fd86 	bl	4a4a6 <printk>
   3799a:	4040      	eors	r0, r0
   3799c:	f380 8811 	msr	BASEPRI, r0
   379a0:	f04f 0003 	mov.w	r0, #3
   379a4:	df02      	svc	2
   379a6:	e79e      	b.n	378e6 <ull_done+0x36>
   379a8:	200055d4 	.word	0x200055d4
   379ac:	000552cc 	.word	0x000552cc
   379b0:	00055310 	.word	0x00055310
   379b4:	20000b58 	.word	0x20000b58
   379b8:	00055328 	.word	0x00055328
   379bc:	0005512c 	.word	0x0005512c
   379c0:	0005518c 	.word	0x0005518c

000379c4 <rx_alloc>:
{
   379c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   379c8:	4f33      	ldr	r7, [pc, #204]	; (37a98 <rx_alloc+0xd4>)
   379ca:	783e      	ldrb	r6, [r7, #0]
   379cc:	4286      	cmp	r6, r0
   379ce:	bf28      	it	cs
   379d0:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   379d2:	b34e      	cbz	r6, 37a28 <rx_alloc+0x64>
   379d4:	4d31      	ldr	r5, [pc, #196]	; (37a9c <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   379d6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 37aa0 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   379da:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   379dc:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   379e0:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   379e2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   379e4:	3401      	adds	r4, #1
   379e6:	b2e4      	uxtb	r4, r4
		last = 0U;
   379e8:	42a2      	cmp	r2, r4
   379ea:	bf08      	it	eq
   379ec:	2400      	moveq	r4, #0
	if (last == first) {
   379ee:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   379f0:	4640      	mov	r0, r8
   379f2:	d01b      	beq.n	37a2c <rx_alloc+0x68>
   379f4:	f7fc fd4e 	bl	34494 <mem_acquire>
   379f8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   379fa:	4648      	mov	r0, r9
		if (!link) {
   379fc:	f1ba 0f00 	cmp.w	sl, #0
   37a00:	d012      	beq.n	37a28 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   37a02:	f7fc fd47 	bl	34494 <mem_acquire>
		if (!rx) {
   37a06:	2800      	cmp	r0, #0
   37a08:	d03f      	beq.n	37a8a <rx_alloc+0xc6>
		rx->link = link;
   37a0a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37a0e:	78ea      	ldrb	r2, [r5, #3]
   37a10:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37a12:	fb02 5303 	mla	r3, r2, r3, r5
   37a16:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37a18:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   37a1a:	70ec      	strb	r4, [r5, #3]
		max--;
   37a1c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   37a1e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37a20:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   37a24:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37a26:	d1db      	bne.n	379e0 <rx_alloc+0x1c>
}
   37a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   37a2c:	783b      	ldrb	r3, [r7, #0]
   37a2e:	2b00      	cmp	r3, #0
   37a30:	d0fa      	beq.n	37a28 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37a32:	4d1c      	ldr	r5, [pc, #112]	; (37aa4 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   37a34:	4e1c      	ldr	r6, [pc, #112]	; (37aa8 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37a36:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   37a38:	f8df 8064 	ldr.w	r8, [pc, #100]	; 37aa0 <rx_alloc+0xdc>
		link->mem = NULL;
   37a3c:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   37a40:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37a42:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   37a44:	3401      	adds	r4, #1
   37a46:	b2e4      	uxtb	r4, r4
		last = 0U;
   37a48:	42a2      	cmp	r2, r4
   37a4a:	bf08      	it	eq
   37a4c:	2400      	moveq	r4, #0
	if (last == first) {
   37a4e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   37a50:	4630      	mov	r0, r6
   37a52:	d0e9      	beq.n	37a28 <rx_alloc+0x64>
   37a54:	f7fc fd1e 	bl	34494 <mem_acquire>
   37a58:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   37a5a:	4640      	mov	r0, r8
		if (!link) {
   37a5c:	f1ba 0f00 	cmp.w	sl, #0
   37a60:	d0e2      	beq.n	37a28 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   37a62:	f7fc fd17 	bl	34494 <mem_acquire>
		if (!rx) {
   37a66:	b180      	cbz	r0, 37a8a <rx_alloc+0xc6>
		link->mem = NULL;
   37a68:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   37a6c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37a70:	78ea      	ldrb	r2, [r5, #3]
   37a72:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37a74:	fb02 5303 	mla	r3, r2, r3, r5
   37a78:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37a7a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   37a7c:	70ec      	strb	r4, [r5, #3]
   37a7e:	3b01      	subs	r3, #1
   37a80:	b2db      	uxtb	r3, r3
   37a82:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   37a84:	2b00      	cmp	r3, #0
   37a86:	d1db      	bne.n	37a40 <rx_alloc+0x7c>
   37a88:	e7ce      	b.n	37a28 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   37a8a:	4650      	mov	r0, sl
   37a8c:	4906      	ldr	r1, [pc, #24]	; (37aa8 <rx_alloc+0xe4>)
}
   37a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   37a92:	f7fc bd19 	b.w	344c8 <mem_release>
   37a96:	bf00      	nop
   37a98:	20004fec 	.word	0x20004fec
   37a9c:	20000ba8 	.word	0x20000ba8
   37aa0:	200050bc 	.word	0x200050bc
   37aa4:	20000b70 	.word	0x20000b70
   37aa8:	20004ff0 	.word	0x20004ff0

00037aac <rx_demux>:
{
   37aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 37c60 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   37ab4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 37c64 <rx_demux+0x1b8>
		LL_ASSERT(0);
   37ab8:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 37c68 <rx_demux+0x1bc>
   37abc:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 37c6c <rx_demux+0x1c0>
{
   37ac0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   37ac2:	e9d8 0100 	ldrd	r0, r1, [r8]
   37ac6:	aa03      	add	r2, sp, #12
   37ac8:	f7fc fd52 	bl	34570 <memq_peek>
		if (link) {
   37acc:	4605      	mov	r5, r0
   37ace:	2800      	cmp	r0, #0
   37ad0:	d035      	beq.n	37b3e <rx_demux+0x92>
			LL_ASSERT(rx);
   37ad2:	9b03      	ldr	r3, [sp, #12]
   37ad4:	2b00      	cmp	r3, #0
   37ad6:	f000 80a6 	beq.w	37c26 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   37ada:	7818      	ldrb	r0, [r3, #0]
   37adc:	aa04      	add	r2, sp, #16
   37ade:	a902      	add	r1, sp, #8
   37ae0:	f006 fc50 	bl	3e384 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   37ae4:	4604      	mov	r4, r0
   37ae6:	2800      	cmp	r0, #0
   37ae8:	d055      	beq.n	37b96 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   37aea:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   37aee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   37af2:	780f      	ldrb	r7, [r1, #0]
   37af4:	f8ad 200a 	strh.w	r2, [sp, #10]
   37af8:	ae05      	add	r6, sp, #20
   37afa:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   37afc:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   37b00:	f006 fc5a 	bl	3e3b8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   37b04:	4621      	mov	r1, r4
   37b06:	9a05      	ldr	r2, [sp, #20]
   37b08:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   37b0c:	f006 fc9e 	bl	3e44c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   37b10:	4620      	mov	r0, r4
   37b12:	f006 fc0f 	bl	3e334 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   37b16:	4632      	mov	r2, r6
   37b18:	4629      	mov	r1, r5
   37b1a:	4638      	mov	r0, r7
   37b1c:	f006 fc32 	bl	3e384 <ull_conn_ack_by_last_peek>
	} while (link);
   37b20:	4604      	mov	r4, r0
   37b22:	2800      	cmp	r0, #0
   37b24:	d1ec      	bne.n	37b00 <rx_demux+0x54>
	k_sem_give(sem_recv);
   37b26:	f8d9 0000 	ldr.w	r0, [r9]
   37b2a:	f010 fec1 	bl	488b0 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   37b2e:	e9d8 0100 	ldrd	r0, r1, [r8]
   37b32:	aa03      	add	r2, sp, #12
   37b34:	f7fc fd1c 	bl	34570 <memq_peek>
		if (link) {
   37b38:	4605      	mov	r5, r0
   37b3a:	2800      	cmp	r0, #0
   37b3c:	d1c9      	bne.n	37ad2 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   37b3e:	aa04      	add	r2, sp, #16
   37b40:	a902      	add	r1, sp, #8
   37b42:	f10d 0007 	add.w	r0, sp, #7
   37b46:	f006 fc01 	bl	3e34c <ull_conn_ack_peek>
			if (link) {
   37b4a:	4604      	mov	r4, r0
   37b4c:	2800      	cmp	r0, #0
   37b4e:	d067      	beq.n	37c20 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   37b50:	9b04      	ldr	r3, [sp, #16]
   37b52:	9305      	str	r3, [sp, #20]
   37b54:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   37b58:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   37b5c:	f8ad 300a 	strh.w	r3, [sp, #10]
   37b60:	ae05      	add	r6, sp, #20
   37b62:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   37b66:	f006 fc27 	bl	3e3b8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   37b6a:	4621      	mov	r1, r4
   37b6c:	9a05      	ldr	r2, [sp, #20]
   37b6e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   37b72:	f006 fc6b 	bl	3e44c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   37b76:	4620      	mov	r0, r4
   37b78:	f006 fbdc 	bl	3e334 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   37b7c:	4632      	mov	r2, r6
   37b7e:	4629      	mov	r1, r5
   37b80:	4638      	mov	r0, r7
   37b82:	f006 fbff 	bl	3e384 <ull_conn_ack_by_last_peek>
	} while (link);
   37b86:	4604      	mov	r4, r0
   37b88:	2800      	cmp	r0, #0
   37b8a:	d1ec      	bne.n	37b66 <rx_demux+0xba>
	k_sem_give(sem_recv);
   37b8c:	f8d9 0000 	ldr.w	r0, [r9]
   37b90:	f010 fe8e 	bl	488b0 <z_impl_k_sem_give>
			if (nack) {
   37b94:	e7cb      	b.n	37b2e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   37b96:	9b03      	ldr	r3, [sp, #12]
   37b98:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   37b9a:	791b      	ldrb	r3, [r3, #4]
   37b9c:	3b01      	subs	r3, #1
   37b9e:	2b16      	cmp	r3, #22
   37ba0:	d80d      	bhi.n	37bbe <rx_demux+0x112>
   37ba2:	e8df f003 	tbb	[pc, r3]
   37ba6:	0c1a      	.short	0x0c1a
   37ba8:	0c1a0c38 	.word	0x0c1a0c38
   37bac:	0c0c0c0c 	.word	0x0c0c0c0c
   37bb0:	0c0c0c0c 	.word	0x0c0c0c0c
   37bb4:	0c0c0c0c 	.word	0x0c0c0c0c
   37bb8:	2d0c0c0c 	.word	0x2d0c0c0c
   37bbc:	1a          	.byte	0x1a
   37bbd:	00          	.byte	0x00
		LL_ASSERT(0);
   37bbe:	482c      	ldr	r0, [pc, #176]	; (37c70 <rx_demux+0x1c4>)
   37bc0:	f640 13ff 	movw	r3, #2559	; 0x9ff
   37bc4:	4652      	mov	r2, sl
   37bc6:	4659      	mov	r1, fp
   37bc8:	f012 fc6d 	bl	4a4a6 <printk>
   37bcc:	4040      	eors	r0, r0
   37bce:	f380 8811 	msr	BASEPRI, r0
   37bd2:	f04f 0003 	mov.w	r0, #3
   37bd6:	df02      	svc	2
			if (nack) {
   37bd8:	e773      	b.n	37ac2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37bda:	4921      	ldr	r1, [pc, #132]	; (37c60 <rx_demux+0x1b4>)
   37bdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   37be0:	2200      	movs	r2, #0
   37be2:	f7fc fccd 	bl	34580 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37be6:	4b23      	ldr	r3, [pc, #140]	; (37c74 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   37be8:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37bea:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37bec:	4628      	mov	r0, r5
   37bee:	4a22      	ldr	r2, [pc, #136]	; (37c78 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37bf0:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37bf2:	f7fc fcb3 	bl	3455c <memq_enqueue>
	k_sem_give(sem_recv);
   37bf6:	f8d9 0000 	ldr.w	r0, [r9]
   37bfa:	f010 fe59 	bl	488b0 <z_impl_k_sem_give>
			if (nack) {
   37bfe:	e796      	b.n	37b2e <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37c00:	4917      	ldr	r1, [pc, #92]	; (37c60 <rx_demux+0x1b4>)
   37c02:	f8d8 0004 	ldr.w	r0, [r8, #4]
   37c06:	2200      	movs	r2, #0
   37c08:	f7fc fcba 	bl	34580 <memq_dequeue>
		ull_conn_setup(link, rx);
   37c0c:	9905      	ldr	r1, [sp, #20]
   37c0e:	4628      	mov	r0, r5
   37c10:	f003 f894 	bl	3ad3c <ull_conn_setup>
			if (nack) {
   37c14:	e755      	b.n	37ac2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   37c16:	a905      	add	r1, sp, #20
   37c18:	4628      	mov	r0, r5
   37c1a:	f003 f8b7 	bl	3ad8c <ull_conn_rx>
		if (nack) {
   37c1e:	b188      	cbz	r0, 37c44 <rx_demux+0x198>
}
   37c20:	b007      	add	sp, #28
   37c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   37c26:	4915      	ldr	r1, [pc, #84]	; (37c7c <rx_demux+0x1d0>)
   37c28:	4811      	ldr	r0, [pc, #68]	; (37c70 <rx_demux+0x1c4>)
   37c2a:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   37c2e:	4652      	mov	r2, sl
   37c30:	f012 fc39 	bl	4a4a6 <printk>
   37c34:	4040      	eors	r0, r0
   37c36:	f380 8811 	msr	BASEPRI, r0
   37c3a:	f04f 0003 	mov.w	r0, #3
   37c3e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   37c40:	9b03      	ldr	r3, [sp, #12]
   37c42:	e74a      	b.n	37ada <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37c44:	4906      	ldr	r1, [pc, #24]	; (37c60 <rx_demux+0x1b4>)
   37c46:	4602      	mov	r2, r0
   37c48:	f8d8 0004 	ldr.w	r0, [r8, #4]
   37c4c:	f7fc fc98 	bl	34580 <memq_dequeue>
		if (rx) {
   37c50:	9905      	ldr	r1, [sp, #20]
   37c52:	2900      	cmp	r1, #0
   37c54:	f43f af35 	beq.w	37ac2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37c58:	4b06      	ldr	r3, [pc, #24]	; (37c74 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37c5a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37c5c:	78db      	ldrb	r3, [r3, #3]
   37c5e:	e7c6      	b.n	37bee <rx_demux+0x142>
   37c60:	200055dc 	.word	0x200055dc
   37c64:	200055e4 	.word	0x200055e4
   37c68:	000552cc 	.word	0x000552cc
   37c6c:	0005518c 	.word	0x0005518c
   37c70:	0005512c 	.word	0x0005512c
   37c74:	20000cc4 	.word	0x20000cc4
   37c78:	200055d0 	.word	0x200055d0
   37c7c:	00055338 	.word	0x00055338

00037c80 <ll_rx_get>:
{
   37c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37c84:	b085      	sub	sp, #20
   37c86:	e9cd 0100 	strd	r0, r1, [sp]
   37c8a:	4c63      	ldr	r4, [pc, #396]	; (37e18 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   37c8c:	4d63      	ldr	r5, [pc, #396]	; (37e1c <ll_rx_get+0x19c>)
   37c8e:	4e64      	ldr	r6, [pc, #400]	; (37e20 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   37c90:	9a00      	ldr	r2, [sp, #0]
   37c92:	2300      	movs	r3, #0
   37c94:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   37c96:	e9d6 0100 	ldrd	r0, r1, [r6]
   37c9a:	aa03      	add	r2, sp, #12
   37c9c:	f7fc fc68 	bl	34570 <memq_peek>
	if (link) {
   37ca0:	4680      	mov	r8, r0
   37ca2:	2800      	cmp	r0, #0
   37ca4:	f000 809f 	beq.w	37de6 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   37ca8:	9b03      	ldr	r3, [sp, #12]
   37caa:	495e      	ldr	r1, [pc, #376]	; (37e24 <ll_rx_get+0x1a4>)
   37cac:	781a      	ldrb	r2, [r3, #0]
   37cae:	9801      	ldr	r0, [sp, #4]
   37cb0:	f7ff fd9e 	bl	377f0 <tx_cmplt_get>
		if (!cmplt) {
   37cb4:	2800      	cmp	r0, #0
   37cb6:	f040 809b 	bne.w	37df0 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   37cba:	78a3      	ldrb	r3, [r4, #2]
   37cbc:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   37cc0:	78e2      	ldrb	r2, [r4, #3]
   37cc2:	4607      	mov	r7, r0
   37cc4:	f10d 0109 	add.w	r1, sp, #9
   37cc8:	f10d 000a 	add.w	r0, sp, #10
   37ccc:	f7ff fd90 	bl	377f0 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   37cd0:	ea47 0200 	orr.w	r2, r7, r0
   37cd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   37cd8:	d1f2      	bne.n	37cc0 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   37cda:	9b03      	ldr	r3, [sp, #12]
   37cdc:	7919      	ldrb	r1, [r3, #4]
   37cde:	2901      	cmp	r1, #1
   37ce0:	f040 8093 	bne.w	37e0a <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   37ce4:	494e      	ldr	r1, [pc, #312]	; (37e20 <ll_rx_get+0x1a0>)
   37ce6:	6870      	ldr	r0, [r6, #4]
   37ce8:	f7fc fc4a 	bl	34580 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   37cec:	494e      	ldr	r1, [pc, #312]	; (37e28 <ll_rx_get+0x1a8>)
   37cee:	4640      	mov	r0, r8
   37cf0:	f7fc fbea 	bl	344c8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37cf4:	782b      	ldrb	r3, [r5, #0]
   37cf6:	2b0f      	cmp	r3, #15
   37cf8:	d866      	bhi.n	37dc8 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   37cfa:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   37cfc:	494b      	ldr	r1, [pc, #300]	; (37e2c <ll_rx_get+0x1ac>)
   37cfe:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   37d00:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   37d02:	f7fc fbe1 	bl	344c8 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37d06:	782b      	ldrb	r3, [r5, #0]
   37d08:	2b00      	cmp	r3, #0
   37d0a:	d0c1      	beq.n	37c90 <ll_rx_get+0x10>
   37d0c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 37e30 <ll_rx_get+0x1b0>
	last = last + 1;
   37d10:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   37d14:	f898 2001 	ldrb.w	r2, [r8, #1]
   37d18:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   37d1c:	3701      	adds	r7, #1
   37d1e:	b2ff      	uxtb	r7, r7
		last = 0U;
   37d20:	42ba      	cmp	r2, r7
   37d22:	bf08      	it	eq
   37d24:	2700      	moveq	r7, #0
	if (last == first) {
   37d26:	429f      	cmp	r7, r3
   37d28:	d019      	beq.n	37d5e <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   37d2a:	483f      	ldr	r0, [pc, #252]	; (37e28 <ll_rx_get+0x1a8>)
   37d2c:	f7fc fbb2 	bl	34494 <mem_acquire>
		if (!link) {
   37d30:	4681      	mov	r9, r0
   37d32:	2800      	cmp	r0, #0
   37d34:	d0ac      	beq.n	37c90 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   37d36:	483d      	ldr	r0, [pc, #244]	; (37e2c <ll_rx_get+0x1ac>)
   37d38:	f7fc fbac 	bl	34494 <mem_acquire>
		if (!rx) {
   37d3c:	2800      	cmp	r0, #0
   37d3e:	d05a      	beq.n	37df6 <ll_rx_get+0x176>
		rx->link = link;
   37d40:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37d44:	f898 2003 	ldrb.w	r2, [r8, #3]
   37d48:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37d4c:	fb02 8303 	mla	r3, r2, r3, r8
   37d50:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37d52:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   37d54:	f888 7003 	strb.w	r7, [r8, #3]
   37d58:	3b01      	subs	r3, #1
   37d5a:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37d5c:	e798      	b.n	37c90 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 37e34 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   37d62:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 37e28 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37d66:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   37d6a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 37e2c <ll_rx_get+0x1ac>
	if (last == count) {
   37d6e:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37d72:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   37d76:	3701      	adds	r7, #1
   37d78:	b2ff      	uxtb	r7, r7
		last = 0U;
   37d7a:	42ba      	cmp	r2, r7
   37d7c:	bf08      	it	eq
   37d7e:	2700      	moveq	r7, #0
	if (last == first) {
   37d80:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   37d82:	4648      	mov	r0, r9
   37d84:	d084      	beq.n	37c90 <ll_rx_get+0x10>
   37d86:	f7fc fb85 	bl	34494 <mem_acquire>
   37d8a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   37d8c:	4650      	mov	r0, sl
		if (!link) {
   37d8e:	f1bb 0f00 	cmp.w	fp, #0
   37d92:	f43f af7d 	beq.w	37c90 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   37d96:	f7fc fb7d 	bl	34494 <mem_acquire>
		if (!rx) {
   37d9a:	2800      	cmp	r0, #0
   37d9c:	d030      	beq.n	37e00 <ll_rx_get+0x180>
		link->mem = NULL;
   37d9e:	2300      	movs	r3, #0
   37da0:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   37da4:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37da8:	f898 2003 	ldrb.w	r2, [r8, #3]
   37dac:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37db0:	fb02 8303 	mla	r3, r2, r3, r8
   37db4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37db6:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   37db8:	f888 7003 	strb.w	r7, [r8, #3]
   37dbc:	3b01      	subs	r3, #1
   37dbe:	b2db      	uxtb	r3, r3
   37dc0:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   37dc2:	2b00      	cmp	r3, #0
   37dc4:	d1d3      	bne.n	37d6e <ll_rx_get+0xee>
   37dc6:	e763      	b.n	37c90 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37dc8:	4a1b      	ldr	r2, [pc, #108]	; (37e38 <ll_rx_get+0x1b8>)
   37dca:	491c      	ldr	r1, [pc, #112]	; (37e3c <ll_rx_get+0x1bc>)
   37dcc:	481c      	ldr	r0, [pc, #112]	; (37e40 <ll_rx_get+0x1c0>)
   37dce:	f240 6306 	movw	r3, #1542	; 0x606
   37dd2:	f012 fb68 	bl	4a4a6 <printk>
   37dd6:	4040      	eors	r0, r0
   37dd8:	f380 8811 	msr	BASEPRI, r0
   37ddc:	f04f 0003 	mov.w	r0, #3
   37de0:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   37de2:	782b      	ldrb	r3, [r5, #0]
   37de4:	e789      	b.n	37cfa <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   37de6:	78e2      	ldrb	r2, [r4, #3]
   37de8:	490e      	ldr	r1, [pc, #56]	; (37e24 <ll_rx_get+0x1a4>)
   37dea:	9801      	ldr	r0, [sp, #4]
   37dec:	f7ff fd00 	bl	377f0 <tx_cmplt_get>
}
   37df0:	b005      	add	sp, #20
   37df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   37df6:	490c      	ldr	r1, [pc, #48]	; (37e28 <ll_rx_get+0x1a8>)
   37df8:	4648      	mov	r0, r9
   37dfa:	f7fc fb65 	bl	344c8 <mem_release>
			return;
   37dfe:	e747      	b.n	37c90 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   37e00:	4909      	ldr	r1, [pc, #36]	; (37e28 <ll_rx_get+0x1a8>)
   37e02:	4658      	mov	r0, fp
   37e04:	f7fc fb60 	bl	344c8 <mem_release>
			return;
   37e08:	e742      	b.n	37c90 <ll_rx_get+0x10>
			*node_rx = rx;
   37e0a:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   37e0c:	4610      	mov	r0, r2
			*node_rx = rx;
   37e0e:	600b      	str	r3, [r1, #0]
}
   37e10:	b005      	add	sp, #20
   37e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e16:	bf00      	nop
   37e18:	20000cc4 	.word	0x20000cc4
   37e1c:	20004fec 	.word	0x20004fec
   37e20:	200055cc 	.word	0x200055cc
   37e24:	20000cc6 	.word	0x20000cc6
   37e28:	20004ff0 	.word	0x20004ff0
   37e2c:	200050bc 	.word	0x200050bc
   37e30:	20000ba8 	.word	0x20000ba8
   37e34:	20000b70 	.word	0x20000b70
   37e38:	000552cc 	.word	0x000552cc
   37e3c:	0005533c 	.word	0x0005533c
   37e40:	0005512c 	.word	0x0005512c

00037e44 <ll_rx_dequeue>:
{
   37e44:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37e46:	495c      	ldr	r1, [pc, #368]	; (37fb8 <ll_rx_dequeue+0x174>)
{
   37e48:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   37e4a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37e4c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   37e4e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37e50:	aa01      	add	r2, sp, #4
   37e52:	f7fc fb95 	bl	34580 <memq_dequeue>
	LL_ASSERT(link);
   37e56:	4604      	mov	r4, r0
   37e58:	2800      	cmp	r0, #0
   37e5a:	d062      	beq.n	37f22 <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   37e5c:	4957      	ldr	r1, [pc, #348]	; (37fbc <ll_rx_dequeue+0x178>)
   37e5e:	4620      	mov	r0, r4
   37e60:	f7fc fb32 	bl	344c8 <mem_release>
	switch (rx->type) {
   37e64:	9a01      	ldr	r2, [sp, #4]
   37e66:	7913      	ldrb	r3, [r2, #4]
   37e68:	2b1c      	cmp	r3, #28
   37e6a:	d810      	bhi.n	37e8e <ll_rx_dequeue+0x4a>
   37e6c:	e8df f003 	tbb	[pc, r3]
   37e70:	1e0f0f1e 	.word	0x1e0f0f1e
   37e74:	0f0f1e0f 	.word	0x0f0f1e0f
   37e78:	0f0f0f0f 	.word	0x0f0f0f0f
   37e7c:	0f0f0f0f 	.word	0x0f0f0f0f
   37e80:	0f0f0f0f 	.word	0x0f0f0f0f
   37e84:	1e2f0f0f 	.word	0x1e2f0f0f
   37e88:	1e1e1e1e 	.word	0x1e1e1e1e
   37e8c:	1e          	.byte	0x1e
   37e8d:	00          	.byte	0x00
		LL_ASSERT(0);
   37e8e:	4a4c      	ldr	r2, [pc, #304]	; (37fc0 <ll_rx_dequeue+0x17c>)
   37e90:	494c      	ldr	r1, [pc, #304]	; (37fc4 <ll_rx_dequeue+0x180>)
   37e92:	484d      	ldr	r0, [pc, #308]	; (37fc8 <ll_rx_dequeue+0x184>)
   37e94:	f240 43c7 	movw	r3, #1223	; 0x4c7
   37e98:	f012 fb05 	bl	4a4a6 <printk>
   37e9c:	4040      	eors	r0, r0
   37e9e:	f380 8811 	msr	BASEPRI, r0
   37ea2:	f04f 0003 	mov.w	r0, #3
   37ea6:	df02      	svc	2
}
   37ea8:	b002      	add	sp, #8
   37eaa:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   37eac:	2b00      	cmp	r3, #0
   37eae:	d1fb      	bne.n	37ea8 <ll_rx_dequeue+0x64>
   37eb0:	4a43      	ldr	r2, [pc, #268]	; (37fc0 <ll_rx_dequeue+0x17c>)
   37eb2:	4946      	ldr	r1, [pc, #280]	; (37fcc <ll_rx_dequeue+0x188>)
   37eb4:	4844      	ldr	r0, [pc, #272]	; (37fc8 <ll_rx_dequeue+0x184>)
   37eb6:	f240 43c3 	movw	r3, #1219	; 0x4c3
   37eba:	f012 faf4 	bl	4a4a6 <printk>
   37ebe:	4040      	eors	r0, r0
   37ec0:	f380 8811 	msr	BASEPRI, r0
   37ec4:	f04f 0003 	mov.w	r0, #3
   37ec8:	df02      	svc	2
}
   37eca:	b002      	add	sp, #8
   37ecc:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37ece:	7f13      	ldrb	r3, [r2, #28]
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   37ed0:	6895      	ldr	r5, [r2, #8]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37ed2:	2b3c      	cmp	r3, #60	; 0x3c
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   37ed4:	682c      	ldr	r4, [r5, #0]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37ed6:	d032      	beq.n	37f3e <ll_rx_dequeue+0xfa>
   37ed8:	7f53      	ldrb	r3, [r2, #29]
   37eda:	b1d3      	cbz	r3, 37f12 <ll_rx_dequeue+0xce>
				if (adv->node_rx_cc_free) {
   37edc:	6e60      	ldr	r0, [r4, #100]	; 0x64
   37ede:	b120      	cbz	r0, 37eea <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   37ee0:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   37ee2:	493b      	ldr	r1, [pc, #236]	; (37fd0 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   37ee4:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   37ee6:	f7fc faef 	bl	344c8 <mem_release>
			adv->is_enabled = 0U;
   37eea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   37eee:	f36f 0300 	bfc	r3, #0, #1
   37ef2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
   37ef6:	2000      	movs	r0, #0
   37ef8:	f001 fcba 	bl	39870 <ull_scan_is_enabled>
   37efc:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   37efe:	2000      	movs	r0, #0
   37f00:	f001 fa96 	bl	39430 <ull_adv_is_enabled>
			if (!bm) {
   37f04:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   37f08:	d1ce      	bne.n	37ea8 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   37f0a:	f007 feed 	bl	3fce8 <ull_filter_adv_scan_state_cb>
}
   37f0e:	b002      	add	sp, #8
   37f10:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   37f12:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
   37f16:	6223      	str	r3, [r4, #32]
			scan->is_enabled = 0U;
   37f18:	f363 0200 	bfi	r2, r3, #0, #1
   37f1c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   37f20:	e7e9      	b.n	37ef6 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   37f22:	4a27      	ldr	r2, [pc, #156]	; (37fc0 <ll_rx_dequeue+0x17c>)
   37f24:	492b      	ldr	r1, [pc, #172]	; (37fd4 <ll_rx_dequeue+0x190>)
   37f26:	4828      	ldr	r0, [pc, #160]	; (37fc8 <ll_rx_dequeue+0x184>)
   37f28:	f240 33a1 	movw	r3, #929	; 0x3a1
   37f2c:	f012 fabb 	bl	4a4a6 <printk>
   37f30:	4040      	eors	r0, r0
   37f32:	f380 8811 	msr	BASEPRI, r0
   37f36:	f04f 0003 	mov.w	r0, #3
   37f3a:	df02      	svc	2
   37f3c:	e78e      	b.n	37e5c <ll_rx_dequeue+0x18>
				conn_lll = lll->conn;
   37f3e:	686e      	ldr	r6, [r5, #4]
				LL_ASSERT(conn_lll);
   37f40:	b1ee      	cbz	r6, 37f7e <ll_rx_dequeue+0x13a>
				LL_ASSERT(!conn_lll->link_tx_free);
   37f42:	6db3      	ldr	r3, [r6, #88]	; 0x58
				lll->conn = NULL;
   37f44:	2200      	movs	r2, #0
   37f46:	606a      	str	r2, [r5, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   37f48:	b163      	cbz	r3, 37f64 <ll_rx_dequeue+0x120>
   37f4a:	4a1d      	ldr	r2, [pc, #116]	; (37fc0 <ll_rx_dequeue+0x17c>)
   37f4c:	4922      	ldr	r1, [pc, #136]	; (37fd8 <ll_rx_dequeue+0x194>)
   37f4e:	481e      	ldr	r0, [pc, #120]	; (37fc8 <ll_rx_dequeue+0x184>)
   37f50:	f240 431a 	movw	r3, #1050	; 0x41a
   37f54:	f012 faa7 	bl	4a4a6 <printk>
   37f58:	4040      	eors	r0, r0
   37f5a:	f380 8811 	msr	BASEPRI, r0
   37f5e:	f04f 0003 	mov.w	r0, #3
   37f62:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   37f64:	f106 014c 	add.w	r1, r6, #76	; 0x4c
   37f68:	f106 0048 	add.w	r0, r6, #72	; 0x48
   37f6c:	f7fc faec 	bl	34548 <memq_deinit>
				LL_ASSERT(link);
   37f70:	4605      	mov	r5, r0
   37f72:	b190      	cbz	r0, 37f9a <ll_rx_dequeue+0x156>
				ll_conn_release(conn);
   37f74:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   37f76:	65b5      	str	r5, [r6, #88]	; 0x58
				ll_conn_release(conn);
   37f78:	f002 fb24 	bl	3a5c4 <ll_conn_release>
   37f7c:	e7b5      	b.n	37eea <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   37f7e:	4a10      	ldr	r2, [pc, #64]	; (37fc0 <ll_rx_dequeue+0x17c>)
   37f80:	4916      	ldr	r1, [pc, #88]	; (37fdc <ll_rx_dequeue+0x198>)
   37f82:	4811      	ldr	r0, [pc, #68]	; (37fc8 <ll_rx_dequeue+0x184>)
   37f84:	f240 4317 	movw	r3, #1047	; 0x417
   37f88:	f012 fa8d 	bl	4a4a6 <printk>
   37f8c:	4040      	eors	r0, r0
   37f8e:	f380 8811 	msr	BASEPRI, r0
   37f92:	f04f 0003 	mov.w	r0, #3
   37f96:	df02      	svc	2
   37f98:	e7d3      	b.n	37f42 <ll_rx_dequeue+0xfe>
				LL_ASSERT(link);
   37f9a:	4a09      	ldr	r2, [pc, #36]	; (37fc0 <ll_rx_dequeue+0x17c>)
   37f9c:	490d      	ldr	r1, [pc, #52]	; (37fd4 <ll_rx_dequeue+0x190>)
   37f9e:	480a      	ldr	r0, [pc, #40]	; (37fc8 <ll_rx_dequeue+0x184>)
   37fa0:	f240 431d 	movw	r3, #1053	; 0x41d
   37fa4:	f012 fa7f 	bl	4a4a6 <printk>
   37fa8:	4040      	eors	r0, r0
   37faa:	f380 8811 	msr	BASEPRI, r0
   37fae:	f04f 0003 	mov.w	r0, #3
   37fb2:	df02      	svc	2
   37fb4:	e7de      	b.n	37f74 <ll_rx_dequeue+0x130>
   37fb6:	bf00      	nop
   37fb8:	200055cc 	.word	0x200055cc
   37fbc:	20004ff0 	.word	0x20004ff0
   37fc0:	000552cc 	.word	0x000552cc
   37fc4:	0005518c 	.word	0x0005518c
   37fc8:	0005512c 	.word	0x0005512c
   37fcc:	000553a0 	.word	0x000553a0
   37fd0:	200050bc 	.word	0x200050bc
   37fd4:	00055694 	.word	0x00055694
   37fd8:	00055388 	.word	0x00055388
   37fdc:	0005537c 	.word	0x0005537c

00037fe0 <ll_rx_mem_release>:
{
   37fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   37fe4:	6804      	ldr	r4, [r0, #0]
{
   37fe6:	4680      	mov	r8, r0
	while (rx) {
   37fe8:	b344      	cbz	r4, 3803c <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   37fea:	4f5f      	ldr	r7, [pc, #380]	; (38168 <ll_rx_mem_release+0x188>)
   37fec:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3816c <ll_rx_mem_release+0x18c>
   37ff0:	4e5f      	ldr	r6, [pc, #380]	; (38170 <ll_rx_mem_release+0x190>)
		rx = rx->next;
   37ff2:	4625      	mov	r5, r4
   37ff4:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   37ff6:	792b      	ldrb	r3, [r5, #4]
   37ff8:	2b1c      	cmp	r3, #28
   37ffa:	d810      	bhi.n	3801e <ll_rx_mem_release+0x3e>
   37ffc:	e8df f003 	tbb	[pc, r3]
   38000:	3a0f0f3a 	.word	0x3a0f0f3a
   38004:	0f0f3a0f 	.word	0x0f0f3a0f
   38008:	0f0f0f0f 	.word	0x0f0f0f0f
   3800c:	0f0f0f0f 	.word	0x0f0f0f0f
   38010:	0f0f0f0f 	.word	0x0f0f0f0f
   38014:	58260f0f 	.word	0x58260f0f
   38018:	3a3a3a3a 	.word	0x3a3a3a3a
   3801c:	3a          	.byte	0x3a
   3801d:	00          	.byte	0x00
			LL_ASSERT(0);
   3801e:	f240 53fa 	movw	r3, #1530	; 0x5fa
   38022:	463a      	mov	r2, r7
   38024:	4649      	mov	r1, r9
   38026:	4630      	mov	r0, r6
   38028:	f012 fa3d 	bl	4a4a6 <printk>
   3802c:	4040      	eors	r0, r0
   3802e:	f380 8811 	msr	BASEPRI, r0
   38032:	f04f 0003 	mov.w	r0, #3
   38036:	df02      	svc	2
	while (rx) {
   38038:	2c00      	cmp	r4, #0
   3803a:	d1da      	bne.n	37ff2 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   3803c:	2300      	movs	r3, #0
   3803e:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   38042:	20ff      	movs	r0, #255	; 0xff
}
   38044:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   38048:	f7ff bcbc 	b.w	379c4 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   3804c:	7f2b      	ldrb	r3, [r5, #28]
   3804e:	2b3c      	cmp	r3, #60	; 0x3c
   38050:	d064      	beq.n	3811c <ll_rx_mem_release+0x13c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   38052:	2b02      	cmp	r3, #2
   38054:	d06a      	beq.n	3812c <ll_rx_mem_release+0x14c>
				LL_ASSERT(!cc->status);
   38056:	b1db      	cbz	r3, 38090 <ll_rx_mem_release+0xb0>
   38058:	4946      	ldr	r1, [pc, #280]	; (38174 <ll_rx_mem_release+0x194>)
   3805a:	f240 532b 	movw	r3, #1323	; 0x52b
   3805e:	463a      	mov	r2, r7
   38060:	4630      	mov	r0, r6
   38062:	f012 fa20 	bl	4a4a6 <printk>
   38066:	4040      	eors	r0, r0
   38068:	f380 8811 	msr	BASEPRI, r0
   3806c:	f04f 0003 	mov.w	r0, #3
   38070:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   38072:	792b      	ldrb	r3, [r5, #4]
   38074:	b963      	cbnz	r3, 38090 <ll_rx_mem_release+0xb0>
   38076:	4940      	ldr	r1, [pc, #256]	; (38178 <ll_rx_mem_release+0x198>)
   38078:	f240 537d 	movw	r3, #1405	; 0x57d
   3807c:	463a      	mov	r2, r7
   3807e:	4630      	mov	r0, r6
   38080:	f012 fa11 	bl	4a4a6 <printk>
   38084:	4040      	eors	r0, r0
   38086:	f380 8811 	msr	BASEPRI, r0
   3808a:	f04f 0003 	mov.w	r0, #3
   3808e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   38090:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 3817c <ll_rx_mem_release+0x19c>
   38094:	f89a 3000 	ldrb.w	r3, [sl]
   38098:	2b0f      	cmp	r3, #15
   3809a:	d82f      	bhi.n	380fc <ll_rx_mem_release+0x11c>
	mem_link_rx.quota_pdu += delta;
   3809c:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   3809e:	4938      	ldr	r1, [pc, #224]	; (38180 <ll_rx_mem_release+0x1a0>)
	mem_link_rx.quota_pdu += delta;
   380a0:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   380a4:	4628      	mov	r0, r5
   380a6:	f7fc fa0f 	bl	344c8 <mem_release>
	while (rx) {
   380aa:	2c00      	cmp	r4, #0
   380ac:	d1a1      	bne.n	37ff2 <ll_rx_mem_release+0x12>
   380ae:	e7c5      	b.n	3803c <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   380b0:	88e8      	ldrh	r0, [r5, #6]
   380b2:	2805      	cmp	r0, #5
   380b4:	d8c0      	bhi.n	38038 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   380b6:	f002 fa93 	bl	3a5e0 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   380ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   380bc:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   380be:	b163      	cbz	r3, 380da <ll_rx_mem_release+0xfa>
   380c0:	4930      	ldr	r1, [pc, #192]	; (38184 <ll_rx_mem_release+0x1a4>)
   380c2:	f240 53ec 	movw	r3, #1516	; 0x5ec
   380c6:	463a      	mov	r2, r7
   380c8:	4630      	mov	r0, r6
   380ca:	f012 f9ec 	bl	4a4a6 <printk>
   380ce:	4040      	eors	r0, r0
   380d0:	f380 8811 	msr	BASEPRI, r0
   380d4:	f04f 0003 	mov.w	r0, #3
   380d8:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   380da:	f105 0168 	add.w	r1, r5, #104	; 0x68
   380de:	f105 0064 	add.w	r0, r5, #100	; 0x64
   380e2:	f7fc fa31 	bl	34548 <memq_deinit>
				LL_ASSERT(link);
   380e6:	4682      	mov	sl, r0
   380e8:	b378      	cbz	r0, 3814a <ll_rx_mem_release+0x16a>
				conn->lll.link_tx_free = link;
   380ea:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   380ee:	4628      	mov	r0, r5
   380f0:	f002 fa68 	bl	3a5c4 <ll_conn_release>
	while (rx) {
   380f4:	2c00      	cmp	r4, #0
   380f6:	f47f af7c 	bne.w	37ff2 <ll_rx_mem_release+0x12>
   380fa:	e79f      	b.n	3803c <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   380fc:	4922      	ldr	r1, [pc, #136]	; (38188 <ll_rx_mem_release+0x1a8>)
   380fe:	f240 6306 	movw	r3, #1542	; 0x606
   38102:	463a      	mov	r2, r7
   38104:	4630      	mov	r0, r6
   38106:	f012 f9ce 	bl	4a4a6 <printk>
   3810a:	4040      	eors	r0, r0
   3810c:	f380 8811 	msr	BASEPRI, r0
   38110:	f04f 0003 	mov.w	r0, #3
   38114:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   38116:	f89a 3000 	ldrb.w	r3, [sl]
   3811a:	e7bf      	b.n	3809c <ll_rx_mem_release+0xbc>
				mem_release(rx_free, &mem_pdu_rx.free);
   3811c:	4918      	ldr	r1, [pc, #96]	; (38180 <ll_rx_mem_release+0x1a0>)
   3811e:	4628      	mov	r0, r5
   38120:	f7fc f9d2 	bl	344c8 <mem_release>
	while (rx) {
   38124:	2c00      	cmp	r4, #0
   38126:	f47f af64 	bne.w	37ff2 <ll_rx_mem_release+0x12>
   3812a:	e787      	b.n	3803c <ll_rx_mem_release+0x5c>
				ull_central_cleanup(rx_free);
   3812c:	4628      	mov	r0, r5
   3812e:	f006 fe55 	bl	3eddc <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   38132:	2000      	movs	r0, #0
   38134:	f001 f96e 	bl	39414 <ull_adv_is_enabled_get>
   38138:	2800      	cmp	r0, #0
   3813a:	f47f af7d 	bne.w	38038 <ll_rx_mem_release+0x58>
					ull_filter_adv_scan_state_cb(0);
   3813e:	f007 fdd3 	bl	3fce8 <ull_filter_adv_scan_state_cb>
	while (rx) {
   38142:	2c00      	cmp	r4, #0
   38144:	f47f af55 	bne.w	37ff2 <ll_rx_mem_release+0x12>
   38148:	e778      	b.n	3803c <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   3814a:	4910      	ldr	r1, [pc, #64]	; (3818c <ll_rx_mem_release+0x1ac>)
   3814c:	f240 53ef 	movw	r3, #1519	; 0x5ef
   38150:	463a      	mov	r2, r7
   38152:	4630      	mov	r0, r6
   38154:	f012 f9a7 	bl	4a4a6 <printk>
   38158:	4040      	eors	r0, r0
   3815a:	f380 8811 	msr	BASEPRI, r0
   3815e:	f04f 0003 	mov.w	r0, #3
   38162:	df02      	svc	2
   38164:	e7c1      	b.n	380ea <ll_rx_mem_release+0x10a>
   38166:	bf00      	nop
   38168:	000552cc 	.word	0x000552cc
   3816c:	0005518c 	.word	0x0005518c
   38170:	0005512c 	.word	0x0005512c
   38174:	000553c0 	.word	0x000553c0
   38178:	000553cc 	.word	0x000553cc
   3817c:	20004fec 	.word	0x20004fec
   38180:	200050bc 	.word	0x200050bc
   38184:	000553f0 	.word	0x000553f0
   38188:	0005533c 	.word	0x0005533c
   3818c:	00055694 	.word	0x00055694

00038190 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   38190:	4801      	ldr	r0, [pc, #4]	; (38198 <ll_rx_link_alloc+0x8>)
   38192:	f7fc b97f 	b.w	34494 <mem_acquire>
   38196:	bf00      	nop
   38198:	20004ff0 	.word	0x20004ff0

0003819c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   3819c:	4901      	ldr	r1, [pc, #4]	; (381a4 <ll_rx_link_release+0x8>)
   3819e:	f7fc b993 	b.w	344c8 <mem_release>
   381a2:	bf00      	nop
   381a4:	20004ff0 	.word	0x20004ff0

000381a8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   381a8:	4801      	ldr	r0, [pc, #4]	; (381b0 <ll_rx_alloc+0x8>)
   381aa:	f7fc b973 	b.w	34494 <mem_acquire>
   381ae:	bf00      	nop
   381b0:	200050bc 	.word	0x200050bc

000381b4 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   381b4:	4901      	ldr	r1, [pc, #4]	; (381bc <ll_rx_release+0x8>)
   381b6:	f7fc b987 	b.w	344c8 <mem_release>
   381ba:	bf00      	nop
   381bc:	200050bc 	.word	0x200050bc

000381c0 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   381c0:	4b02      	ldr	r3, [pc, #8]	; (381cc <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   381c2:	4a03      	ldr	r2, [pc, #12]	; (381d0 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   381c4:	78db      	ldrb	r3, [r3, #3]
   381c6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   381c8:	f7fc b9c8 	b.w	3455c <memq_enqueue>
   381cc:	20000cc4 	.word	0x20000cc4
   381d0:	200055d0 	.word	0x200055d0

000381d4 <ll_rx_sched>:
	k_sem_give(sem_recv);
   381d4:	4b01      	ldr	r3, [pc, #4]	; (381dc <ll_rx_sched+0x8>)
   381d6:	6818      	ldr	r0, [r3, #0]
   381d8:	f010 bb6a 	b.w	488b0 <z_impl_k_sem_give>
   381dc:	200055e4 	.word	0x200055e4

000381e0 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   381e0:	4b0d      	ldr	r3, [pc, #52]	; (38218 <ll_pdu_rx_alloc_peek+0x38>)
   381e2:	7899      	ldrb	r1, [r3, #2]
   381e4:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   381e6:	4291      	cmp	r1, r2
   381e8:	d80a      	bhi.n	38200 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   381ea:	eba2 0c01 	sub.w	ip, r2, r1
   381ee:	fa5f fc8c 	uxtb.w	ip, ip
   381f2:	4560      	cmp	r0, ip
   381f4:	d802      	bhi.n	381fc <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   381f6:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   381f8:	7818      	ldrb	r0, [r3, #0]
   381fa:	d109      	bne.n	38210 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   381fc:	2000      	movs	r0, #0
}
   381fe:	4770      	bx	lr
		return count - first + last;
   38200:	f893 c001 	ldrb.w	ip, [r3, #1]
   38204:	4462      	add	r2, ip
   38206:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   38208:	b2d2      	uxtb	r2, r2
   3820a:	4290      	cmp	r0, r2
   3820c:	d8f6      	bhi.n	381fc <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   3820e:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   38210:	fb01 3300 	mla	r3, r1, r0, r3
   38214:	6858      	ldr	r0, [r3, #4]
   38216:	4770      	bx	lr
   38218:	20000b70 	.word	0x20000b70

0003821c <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   3821c:	4b09      	ldr	r3, [pc, #36]	; (38244 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   3821e:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   38220:	78da      	ldrb	r2, [r3, #3]
   38222:	7818      	ldrb	r0, [r3, #0]
   38224:	f893 c001 	ldrb.w	ip, [r3, #1]
   38228:	428a      	cmp	r2, r1
   3822a:	d009      	beq.n	38240 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   3822c:	1c4a      	adds	r2, r1, #1
   3822e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   38230:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   38234:	4594      	cmp	ip, r2
   38236:	bf08      	it	eq
   38238:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3823a:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   3823c:	709a      	strb	r2, [r3, #2]

	return mem;
   3823e:	4770      	bx	lr
		return NULL;
   38240:	2000      	movs	r0, #0
}
   38242:	4770      	bx	lr
   38244:	20000b70 	.word	0x20000b70

00038248 <ll_tx_ack_put>:
{
   38248:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   3824a:	4a15      	ldr	r2, [pc, #84]	; (382a0 <ll_tx_ack_put+0x58>)
   3824c:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   38250:	7854      	ldrb	r4, [r2, #1]
   38252:	f892 e002 	ldrb.w	lr, [r2, #2]
   38256:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   38258:	f10c 0301 	add.w	r3, ip, #1
   3825c:	b2db      	uxtb	r3, r3
		last = 0U;
   3825e:	429c      	cmp	r4, r3
   38260:	bf08      	it	eq
   38262:	2300      	moveq	r3, #0
	if (last == first) {
   38264:	459e      	cmp	lr, r3
   38266:	d00a      	beq.n	3827e <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38268:	fb1c fc05 	smulbb	ip, ip, r5
   3826c:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   38270:	f82e 000c 	strh.w	r0, [lr, ip]
   38274:	44f4      	add	ip, lr
	tx->node = node_tx;
   38276:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3827a:	70d3      	strb	r3, [r2, #3]
}
   3827c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   3827e:	4a09      	ldr	r2, [pc, #36]	; (382a4 <ll_tx_ack_put+0x5c>)
   38280:	4909      	ldr	r1, [pc, #36]	; (382a8 <ll_tx_ack_put+0x60>)
   38282:	480a      	ldr	r0, [pc, #40]	; (382ac <ll_tx_ack_put+0x64>)
   38284:	f240 634e 	movw	r3, #1614	; 0x64e
   38288:	f012 f90d 	bl	4a4a6 <printk>
   3828c:	4040      	eors	r0, r0
   3828e:	f380 8811 	msr	BASEPRI, r0
   38292:	f04f 0003 	mov.w	r0, #3
   38296:	df02      	svc	2
	tx->handle = handle;
   38298:	2300      	movs	r3, #0
   3829a:	801b      	strh	r3, [r3, #0]
   3829c:	deff      	udf	#255	; 0xff
   3829e:	bf00      	nop
   382a0:	20000cc4 	.word	0x20000cc4
   382a4:	000552cc 	.word	0x000552cc
   382a8:	00055688 	.word	0x00055688
   382ac:	0005512c 	.word	0x0005512c

000382b0 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   382b0:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   382b2:	230b      	movs	r3, #11
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   382b4:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   382b6:	700b      	strb	r3, [r1, #0]
}
   382b8:	4770      	bx	lr
   382ba:	bf00      	nop

000382bc <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   382bc:	2200      	movs	r2, #0
{
   382be:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   382c0:	4611      	mov	r1, r2
   382c2:	4b0a      	ldr	r3, [pc, #40]	; (382ec <ll_radio_state_abort+0x30>)
   382c4:	2001      	movs	r0, #1
   382c6:	f7fc f9bd 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!ret);
   382ca:	b900      	cbnz	r0, 382ce <ll_radio_state_abort+0x12>
}
   382cc:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   382ce:	4a08      	ldr	r2, [pc, #32]	; (382f0 <ll_radio_state_abort+0x34>)
   382d0:	4908      	ldr	r1, [pc, #32]	; (382f4 <ll_radio_state_abort+0x38>)
   382d2:	4809      	ldr	r0, [pc, #36]	; (382f8 <ll_radio_state_abort+0x3c>)
   382d4:	f240 6366 	movw	r3, #1638	; 0x666
   382d8:	f012 f8e5 	bl	4a4a6 <printk>
   382dc:	4040      	eors	r0, r0
   382de:	f380 8811 	msr	BASEPRI, r0
   382e2:	f04f 0003 	mov.w	r0, #3
   382e6:	df02      	svc	2
}
   382e8:	bd08      	pop	{r3, pc}
   382ea:	bf00      	nop
   382ec:	20000d38 	.word	0x20000d38
   382f0:	000552cc 	.word	0x000552cc
   382f4:	00055408 	.word	0x00055408
   382f8:	0005512c 	.word	0x0005512c

000382fc <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   382fc:	f030 0302 	bics.w	r3, r0, #2
{
   38300:	b510      	push	{r4, lr}
   38302:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38304:	d002      	beq.n	3830c <ull_ticker_status_take+0x10>
   38306:	680b      	ldr	r3, [r1, #0]
   38308:	2b02      	cmp	r3, #2
   3830a:	d008      	beq.n	3831e <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   3830c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38314:	4809      	ldr	r0, [pc, #36]	; (3833c <ull_ticker_status_take+0x40>)
   38316:	f010 faf1 	bl	488fc <z_impl_k_sem_take>
	return *ret_cb;
   3831a:	6820      	ldr	r0, [r4, #0]
}
   3831c:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3831e:	4a08      	ldr	r2, [pc, #32]	; (38340 <ull_ticker_status_take+0x44>)
   38320:	4908      	ldr	r1, [pc, #32]	; (38344 <ull_ticker_status_take+0x48>)
   38322:	4809      	ldr	r0, [pc, #36]	; (38348 <ull_ticker_status_take+0x4c>)
   38324:	f240 6382 	movw	r3, #1666	; 0x682
   38328:	f012 f8bd 	bl	4a4a6 <printk>
   3832c:	4040      	eors	r0, r0
   3832e:	f380 8811 	msr	BASEPRI, r0
   38332:	f04f 0003 	mov.w	r0, #3
   38336:	df02      	svc	2
   38338:	e7e8      	b.n	3830c <ull_ticker_status_take+0x10>
   3833a:	bf00      	nop
   3833c:	200055e8 	.word	0x200055e8
   38340:	000552cc 	.word	0x000552cc
   38344:	00055410 	.word	0x00055410
   38348:	0005512c 	.word	0x0005512c

0003834c <ull_disable_mark>:
	if (!*m) {
   3834c:	4a03      	ldr	r2, [pc, #12]	; (3835c <ull_disable_mark+0x10>)
{
   3834e:	4603      	mov	r3, r0
	if (!*m) {
   38350:	6810      	ldr	r0, [r2, #0]
   38352:	b100      	cbz	r0, 38356 <ull_disable_mark+0xa>
}
   38354:	4770      	bx	lr
		*m = param;
   38356:	6013      	str	r3, [r2, #0]
   38358:	4618      	mov	r0, r3
}
   3835a:	4770      	bx	lr
   3835c:	20004fb8 	.word	0x20004fb8

00038360 <ull_disable_unmark>:
	if (*m && *m == param) {
   38360:	4a04      	ldr	r2, [pc, #16]	; (38374 <ull_disable_unmark+0x14>)
   38362:	6813      	ldr	r3, [r2, #0]
   38364:	b123      	cbz	r3, 38370 <ull_disable_unmark+0x10>
   38366:	4298      	cmp	r0, r3
		*m = NULL;
   38368:	bf06      	itte	eq
   3836a:	2100      	moveq	r1, #0
   3836c:	6011      	streq	r1, [r2, #0]
	return NULL;
   3836e:	2300      	movne	r3, #0
}
   38370:	4618      	mov	r0, r3
   38372:	4770      	bx	lr
   38374:	20004fb8 	.word	0x20004fb8

00038378 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   38378:	4b01      	ldr	r3, [pc, #4]	; (38380 <ull_disable_mark_get+0x8>)
}
   3837a:	6818      	ldr	r0, [r3, #0]
   3837c:	4770      	bx	lr
   3837e:	bf00      	nop
   38380:	20004fb8 	.word	0x20004fb8

00038384 <ull_update_mark>:
	if (!*m) {
   38384:	4a03      	ldr	r2, [pc, #12]	; (38394 <ull_update_mark+0x10>)
{
   38386:	4603      	mov	r3, r0
	if (!*m) {
   38388:	6810      	ldr	r0, [r2, #0]
   3838a:	b100      	cbz	r0, 3838e <ull_update_mark+0xa>
}
   3838c:	4770      	bx	lr
		*m = param;
   3838e:	6013      	str	r3, [r2, #0]
   38390:	4618      	mov	r0, r3
}
   38392:	4770      	bx	lr
   38394:	20004fbc 	.word	0x20004fbc

00038398 <ull_update_unmark>:
	if (*m && *m == param) {
   38398:	4a04      	ldr	r2, [pc, #16]	; (383ac <ull_update_unmark+0x14>)
   3839a:	6813      	ldr	r3, [r2, #0]
   3839c:	b123      	cbz	r3, 383a8 <ull_update_unmark+0x10>
   3839e:	4298      	cmp	r0, r3
		*m = NULL;
   383a0:	bf06      	itte	eq
   383a2:	2100      	moveq	r1, #0
   383a4:	6011      	streq	r1, [r2, #0]
	return NULL;
   383a6:	2300      	movne	r3, #0
}
   383a8:	4618      	mov	r0, r3
   383aa:	4770      	bx	lr
   383ac:	20004fbc 	.word	0x20004fbc

000383b0 <ull_update_mark_get>:
	return mark_get(mark_update);
   383b0:	4b01      	ldr	r3, [pc, #4]	; (383b8 <ull_update_mark_get+0x8>)
}
   383b2:	6818      	ldr	r0, [r3, #0]
   383b4:	4770      	bx	lr
   383b6:	bf00      	nop
   383b8:	20004fbc 	.word	0x20004fbc

000383bc <ull_disable>:
{
   383bc:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   383be:	6805      	ldr	r5, [r0, #0]
   383c0:	782b      	ldrb	r3, [r5, #0]
{
   383c2:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   383c4:	b353      	cbz	r3, 3841c <ull_disable+0x60>
	compiler_barrier();
   383c6:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   383c8:	2201      	movs	r2, #1
   383ca:	2100      	movs	r1, #0
   383cc:	4668      	mov	r0, sp
   383ce:	f019 fa24 	bl	5181a <z_impl_k_sem_init>
   383d2:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   383d4:	4a13      	ldr	r2, [pc, #76]	; (38424 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   383d6:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   383da:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   383dc:	b1f3      	cbz	r3, 3841c <ull_disable+0x60>
	mfy.param = lll;
   383de:	4b12      	ldr	r3, [pc, #72]	; (38428 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   383e0:	2200      	movs	r2, #0
   383e2:	4611      	mov	r1, r2
   383e4:	2003      	movs	r0, #3
	mfy.param = lll;
   383e6:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   383e8:	f7fc f92c 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!ret);
   383ec:	b940      	cbnz	r0, 38400 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   383ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   383f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   383f6:	4668      	mov	r0, sp
   383f8:	f010 fa80 	bl	488fc <z_impl_k_sem_take>
}
   383fc:	b007      	add	sp, #28
   383fe:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   38400:	4a0a      	ldr	r2, [pc, #40]	; (3842c <ull_disable+0x70>)
   38402:	490b      	ldr	r1, [pc, #44]	; (38430 <ull_disable+0x74>)
   38404:	480b      	ldr	r0, [pc, #44]	; (38434 <ull_disable+0x78>)
   38406:	f240 63ff 	movw	r3, #1791	; 0x6ff
   3840a:	f012 f84c 	bl	4a4a6 <printk>
   3840e:	4040      	eors	r0, r0
   38410:	f380 8811 	msr	BASEPRI, r0
   38414:	f04f 0003 	mov.w	r0, #3
   38418:	df02      	svc	2
   3841a:	e7e8      	b.n	383ee <ull_disable+0x32>
		return -EALREADY;
   3841c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   38420:	e7ec      	b.n	383fc <ull_disable+0x40>
   38422:	bf00      	nop
   38424:	000377ed 	.word	0x000377ed
   38428:	20000d28 	.word	0x20000d28
   3842c:	000552cc 	.word	0x000552cc
   38430:	00055408 	.word	0x00055408
   38434:	0005512c 	.word	0x0005512c

00038438 <ull_ticker_stop_with_mark>:
{
   38438:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   3843a:	4e20      	ldr	r6, [pc, #128]	; (384bc <ull_ticker_stop_with_mark+0x84>)
   3843c:	6833      	ldr	r3, [r6, #0]
{
   3843e:	b085      	sub	sp, #20
   38440:	460c      	mov	r4, r1
   38442:	4617      	mov	r7, r2
	if (!*m) {
   38444:	b353      	cbz	r3, 3849c <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   38446:	4299      	cmp	r1, r3
   38448:	d113      	bne.n	38472 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3844a:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   3844c:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3844e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   38450:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38452:	9500      	str	r5, [sp, #0]
   38454:	4b1a      	ldr	r3, [pc, #104]	; (384c0 <ull_ticker_stop_with_mark+0x88>)
   38456:	2103      	movs	r1, #3
   38458:	2000      	movs	r0, #0
   3845a:	f7fd fb55 	bl	35b08 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   3845e:	4629      	mov	r1, r5
   38460:	f7ff ff4c 	bl	382fc <ull_ticker_status_take>
	if (ret) {
   38464:	4605      	mov	r5, r0
   38466:	b140      	cbz	r0, 3847a <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   38468:	6833      	ldr	r3, [r6, #0]
   3846a:	b10b      	cbz	r3, 38470 <ull_ticker_stop_with_mark+0x38>
   3846c:	429c      	cmp	r4, r3
   3846e:	d017      	beq.n	384a0 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   38470:	b304      	cbz	r4, 384b4 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   38472:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   38476:	b005      	add	sp, #20
   38478:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   3847a:	4638      	mov	r0, r7
   3847c:	f7ff ff9e 	bl	383bc <ull_disable>
	if (*m && *m == param) {
   38480:	6833      	ldr	r3, [r6, #0]
   38482:	b10b      	cbz	r3, 38488 <ull_ticker_stop_with_mark+0x50>
   38484:	429c      	cmp	r4, r3
   38486:	d011      	beq.n	384ac <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   38488:	2c00      	cmp	r4, #0
   3848a:	d1f2      	bne.n	38472 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   3848c:	2800      	cmp	r0, #0
   3848e:	d0f2      	beq.n	38476 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   38490:	f110 0f78 	cmn.w	r0, #120	; 0x78
   38494:	bf08      	it	eq
   38496:	2000      	moveq	r0, #0
}
   38498:	b005      	add	sp, #20
   3849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   3849c:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   3849e:	e7d4      	b.n	3844a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   384a0:	2300      	movs	r3, #0
		return -EALREADY;
   384a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   384a6:	6033      	str	r3, [r6, #0]
}
   384a8:	b005      	add	sp, #20
   384aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   384ac:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   384ae:	2800      	cmp	r0, #0
   384b0:	d0e1      	beq.n	38476 <ull_ticker_stop_with_mark+0x3e>
   384b2:	e7ed      	b.n	38490 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   384b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   384b8:	e7dd      	b.n	38476 <ull_ticker_stop_with_mark+0x3e>
   384ba:	bf00      	nop
   384bc:	20004fb8 	.word	0x20004fb8
   384c0:	000377e1 	.word	0x000377e1

000384c4 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   384c4:	4b0d      	ldr	r3, [pc, #52]	; (384fc <ull_pdu_rx_alloc_peek+0x38>)
   384c6:	7899      	ldrb	r1, [r3, #2]
   384c8:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   384ca:	4291      	cmp	r1, r2
   384cc:	d80a      	bhi.n	384e4 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   384ce:	eba2 0c01 	sub.w	ip, r2, r1
   384d2:	fa5f fc8c 	uxtb.w	ip, ip
   384d6:	4560      	cmp	r0, ip
   384d8:	d802      	bhi.n	384e0 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   384da:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   384dc:	7818      	ldrb	r0, [r3, #0]
   384de:	d109      	bne.n	384f4 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   384e0:	2000      	movs	r0, #0
}
   384e2:	4770      	bx	lr
		return count - first + last;
   384e4:	f893 c001 	ldrb.w	ip, [r3, #1]
   384e8:	4462      	add	r2, ip
   384ea:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   384ec:	b2d2      	uxtb	r2, r2
   384ee:	4290      	cmp	r0, r2
   384f0:	d8f6      	bhi.n	384e0 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   384f2:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   384f4:	fb01 3300 	mla	r3, r1, r0, r3
   384f8:	6858      	ldr	r0, [r3, #4]
   384fa:	4770      	bx	lr
   384fc:	20000ba8 	.word	0x20000ba8

00038500 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   38500:	4b09      	ldr	r3, [pc, #36]	; (38528 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   38502:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   38504:	78da      	ldrb	r2, [r3, #3]
   38506:	7818      	ldrb	r0, [r3, #0]
   38508:	f893 c001 	ldrb.w	ip, [r3, #1]
   3850c:	428a      	cmp	r2, r1
   3850e:	d009      	beq.n	38524 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   38510:	1c4a      	adds	r2, r1, #1
   38512:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   38514:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   38518:	4594      	cmp	ip, r2
   3851a:	bf08      	it	eq
   3851c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3851e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   38520:	709a      	strb	r2, [r3, #2]
	return mem;
   38522:	4770      	bx	lr
		return NULL;
   38524:	2000      	movs	r0, #0
}
   38526:	4770      	bx	lr
   38528:	20000ba8 	.word	0x20000ba8

0003852c <ull_rx_put>:
{
   3852c:	b538      	push	{r3, r4, r5, lr}
   3852e:	460c      	mov	r4, r1
   38530:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   38532:	f005 ff05 	bl	3e340 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   38536:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   38538:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   3853a:	4a03      	ldr	r2, [pc, #12]	; (38548 <ull_rx_put+0x1c>)
   3853c:	4628      	mov	r0, r5
}
   3853e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   38542:	f7fc b80b 	b.w	3455c <memq_enqueue>
   38546:	bf00      	nop
   38548:	200055e0 	.word	0x200055e0

0003854c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   3854c:	2201      	movs	r2, #1
   3854e:	4b02      	ldr	r3, [pc, #8]	; (38558 <ull_rx_sched+0xc>)
   38550:	4611      	mov	r1, r2
   38552:	2000      	movs	r0, #0
   38554:	f7fc b876 	b.w	34644 <mayfly_enqueue>
   38558:	20000d18 	.word	0x20000d18

0003855c <ull_prepare_enqueue>:
{
   3855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   38560:	4e15      	ldr	r6, [pc, #84]	; (385b8 <ull_prepare_enqueue+0x5c>)
{
   38562:	f89d a020 	ldrb.w	sl, [sp, #32]
   38566:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   38568:	78f3      	ldrb	r3, [r6, #3]
{
   3856a:	460f      	mov	r7, r1
	last = last + 1;
   3856c:	1c5d      	adds	r5, r3, #1
   3856e:	4611      	mov	r1, r2
	if (last == count) {
   38570:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   38572:	b2ed      	uxtb	r5, r5
		last = 0U;
   38574:	42aa      	cmp	r2, r5
   38576:	bf08      	it	eq
   38578:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   3857a:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   3857c:	42aa      	cmp	r2, r5
{
   3857e:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   38580:	7830      	ldrb	r0, [r6, #0]
   38582:	d015      	beq.n	385b0 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38584:	1d34      	adds	r4, r6, #4
   38586:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   3858a:	2210      	movs	r2, #16
   3858c:	4620      	mov	r0, r4
   3858e:	f014 f892 	bl	4c6b6 <memcpy>
	e->is_resume = is_resume;
   38592:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   38594:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   38596:	f00a 0a01 	and.w	sl, sl, #1
   3859a:	f023 0303 	bic.w	r3, r3, #3
   3859e:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   385a2:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   385a6:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   385a8:	70f5      	strb	r5, [r6, #3]
}
   385aa:	4620      	mov	r0, r4
   385ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   385b0:	2400      	movs	r4, #0
}
   385b2:	4620      	mov	r0, r4
   385b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   385b8:	20000bc0 	.word	0x20000bc0

000385bc <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   385bc:	4b05      	ldr	r3, [pc, #20]	; (385d4 <ull_prepare_dequeue_get+0x18>)
   385be:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   385c0:	78da      	ldrb	r2, [r3, #3]
   385c2:	7819      	ldrb	r1, [r3, #0]
   385c4:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   385c6:	bf1a      	itte	ne
   385c8:	3304      	addne	r3, #4
   385ca:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   385ce:	2000      	moveq	r0, #0
}
   385d0:	4770      	bx	lr
   385d2:	bf00      	nop
   385d4:	20000bc0 	.word	0x20000bc0

000385d8 <ull_prepare_dequeue_iter>:
{
   385d8:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   385da:	4b0d      	ldr	r3, [pc, #52]	; (38610 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   385dc:	7802      	ldrb	r2, [r0, #0]
   385de:	7859      	ldrb	r1, [r3, #1]
   385e0:	f893 c003 	ldrb.w	ip, [r3, #3]
   385e4:	f893 e000 	ldrb.w	lr, [r3]
   385e8:	4291      	cmp	r1, r2
   385ea:	bf9c      	itt	ls
   385ec:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   385ee:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   385f0:	4594      	cmp	ip, r2
   385f2:	d00a      	beq.n	3860a <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   385f4:	1c53      	adds	r3, r2, #1
   385f6:	b2db      	uxtb	r3, r3
		i = 0U;
   385f8:	4299      	cmp	r1, r3
   385fa:	bf08      	it	eq
   385fc:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   385fe:	4905      	ldr	r1, [pc, #20]	; (38614 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   38600:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   38602:	fb02 100e 	mla	r0, r2, lr, r1
}
   38606:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   3860a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   3860c:	e7fb      	b.n	38606 <ull_prepare_dequeue_iter+0x2e>
   3860e:	bf00      	nop
   38610:	20000bc0 	.word	0x20000bc0
   38614:	20000bc4 	.word	0x20000bc4

00038618 <ull_prepare_dequeue>:
{
   38618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   3861c:	4c23      	ldr	r4, [pc, #140]	; (386ac <ull_prepare_dequeue+0x94>)
   3861e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   38620:	78e1      	ldrb	r1, [r4, #3]
   38622:	7823      	ldrb	r3, [r4, #0]
   38624:	4291      	cmp	r1, r2
   38626:	d027      	beq.n	38678 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   38628:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   3862a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 386b0 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   3862e:	f8df b084 	ldr.w	fp, [pc, #132]	; 386b4 <ull_prepare_dequeue+0x9c>
   38632:	f8df a084 	ldr.w	sl, [pc, #132]	; 386b8 <ull_prepare_dequeue+0xa0>
   38636:	4680      	mov	r8, r0
   38638:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   3863c:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   3863e:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   38640:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   38644:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   38648:	d518      	bpl.n	3867c <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   3864a:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   3864c:	78e1      	ldrb	r1, [r4, #3]
   3864e:	7820      	ldrb	r0, [r4, #0]
   38650:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   38654:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   38656:	4291      	cmp	r1, r2
	_first += 1U;
   38658:	b2db      	uxtb	r3, r3
	if (_first == last) {
   3865a:	d00d      	beq.n	38678 <ull_prepare_dequeue+0x60>
		_first = 0U;
   3865c:	459c      	cmp	ip, r3
   3865e:	bf08      	it	eq
   38660:	2300      	moveq	r3, #0
	if (first == last) {
   38662:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   38664:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   38666:	d007      	beq.n	38678 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   38668:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   3866c:	2d00      	cmp	r5, #0
   3866e:	d1e5      	bne.n	3863c <ull_prepare_dequeue+0x24>
   38670:	b116      	cbz	r6, 38678 <ull_prepare_dequeue+0x60>
   38672:	7f03      	ldrb	r3, [r0, #28]
   38674:	07db      	lsls	r3, r3, #31
   38676:	d5e1      	bpl.n	3863c <ull_prepare_dequeue+0x24>
}
   38678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   3867c:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   38680:	4b0b      	ldr	r3, [pc, #44]	; (386b0 <ull_prepare_dequeue+0x98>)
   38682:	462a      	mov	r2, r5
   38684:	4629      	mov	r1, r5
   38686:	4640      	mov	r0, r8
   38688:	f7fb ffdc 	bl	34644 <mayfly_enqueue>
			LL_ASSERT(!ret);
   3868c:	2800      	cmp	r0, #0
   3868e:	d0dc      	beq.n	3864a <ull_prepare_dequeue+0x32>
   38690:	480a      	ldr	r0, [pc, #40]	; (386bc <ull_prepare_dequeue+0xa4>)
   38692:	f240 7376 	movw	r3, #1910	; 0x776
   38696:	465a      	mov	r2, fp
   38698:	4651      	mov	r1, sl
   3869a:	f011 ff04 	bl	4a4a6 <printk>
   3869e:	4040      	eors	r0, r0
   386a0:	f380 8811 	msr	BASEPRI, r0
   386a4:	f04f 0003 	mov.w	r0, #3
   386a8:	df02      	svc	2
   386aa:	e7ce      	b.n	3864a <ull_prepare_dequeue+0x32>
   386ac:	20000bc0 	.word	0x20000bc0
   386b0:	20000ce8 	.word	0x20000ce8
   386b4:	000552cc 	.word	0x000552cc
   386b8:	00055408 	.word	0x00055408
   386bc:	0005512c 	.word	0x0005512c

000386c0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   386c0:	4b06      	ldr	r3, [pc, #24]	; (386dc <ull_event_done_extra_get+0x1c>)
   386c2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   386c4:	78d9      	ldrb	r1, [r3, #3]
   386c6:	7818      	ldrb	r0, [r3, #0]
   386c8:	4291      	cmp	r1, r2
   386ca:	d005      	beq.n	386d8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   386cc:	fb02 3300 	mla	r3, r2, r0, r3
   386d0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   386d2:	b110      	cbz	r0, 386da <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   386d4:	3020      	adds	r0, #32
   386d6:	4770      	bx	lr
		return NULL;
   386d8:	2000      	movs	r0, #0
}
   386da:	4770      	bx	lr
   386dc:	20000b58 	.word	0x20000b58

000386e0 <ull_event_done>:
{
   386e0:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   386e2:	4a13      	ldr	r2, [pc, #76]	; (38730 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   386e4:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   386e6:	78d4      	ldrb	r4, [r2, #3]
   386e8:	7811      	ldrb	r1, [r2, #0]
   386ea:	429c      	cmp	r4, r3
{
   386ec:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   386ee:	7850      	ldrb	r0, [r2, #1]
   386f0:	d01b      	beq.n	3872a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   386f2:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   386f6:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   386f8:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   386fa:	b2db      	uxtb	r3, r3
		_first = 0U;
   386fc:	4298      	cmp	r0, r3
   386fe:	bf08      	it	eq
   38700:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   38702:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   38704:	b17c      	cbz	r4, 38726 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   38706:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   38708:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   3870a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   3870c:	4a09      	ldr	r2, [pc, #36]	; (38734 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   3870e:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   38710:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   38712:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   38714:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   38716:	f7fb ff21 	bl	3455c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   3871a:	2201      	movs	r2, #1
   3871c:	4b06      	ldr	r3, [pc, #24]	; (38738 <ull_event_done+0x58>)
   3871e:	4611      	mov	r1, r2
   38720:	4628      	mov	r0, r5
   38722:	f7fb ff8f 	bl	34644 <mayfly_enqueue>
}
   38726:	4620      	mov	r0, r4
   38728:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   3872a:	2400      	movs	r4, #0
   3872c:	e7fb      	b.n	38726 <ull_event_done+0x46>
   3872e:	bf00      	nop
   38730:	20000b58 	.word	0x20000b58
   38734:	200055d8 	.word	0x200055d8
   38738:	20000d08 	.word	0x20000d08

0003873c <ull_rxfifo_alloc>:
{
   3873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38740:	b083      	sub	sp, #12
   38742:	461d      	mov	r5, r3
   38744:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   38746:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   3874a:	e9cd 0400 	strd	r0, r4, [sp]
   3874e:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   38752:	b33b      	cbz	r3, 387a4 <ull_rxfifo_alloc+0x68>
   38754:	1e5c      	subs	r4, r3, #1
   38756:	f895 b000 	ldrb.w	fp, [r5]
   3875a:	4688      	mov	r8, r1
   3875c:	4617      	mov	r7, r2
   3875e:	b2e4      	uxtb	r4, r4
	last = last + 1;
   38760:	f10b 0301 	add.w	r3, fp, #1
   38764:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   38768:	45d8      	cmp	r8, fp
   3876a:	bf08      	it	eq
   3876c:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   38770:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   38772:	4648      	mov	r0, r9
   38774:	d016      	beq.n	387a4 <ull_rxfifo_alloc+0x68>
   38776:	f7fb fe8d 	bl	34494 <mem_acquire>
   3877a:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   3877c:	4650      	mov	r0, sl
		if (!link) {
   3877e:	b18e      	cbz	r6, 387a4 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   38780:	f7fb fe88 	bl	34494 <mem_acquire>
		if (!rx) {
   38784:	b188      	cbz	r0, 387aa <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   38786:	2300      	movs	r3, #0
   38788:	6073      	str	r3, [r6, #4]
		rx->link = link;
   3878a:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3878c:	782a      	ldrb	r2, [r5, #0]
   3878e:	9b00      	ldr	r3, [sp, #0]
   38790:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   38794:	9b01      	ldr	r3, [sp, #4]
   38796:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   38798:	3c01      	subs	r4, #1
   3879a:	b2e4      	uxtb	r4, r4
   3879c:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   3879e:	f885 b000 	strb.w	fp, [r5]
   387a2:	d1dd      	bne.n	38760 <ull_rxfifo_alloc+0x24>
}
   387a4:	b003      	add	sp, #12
   387a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   387aa:	4649      	mov	r1, r9
   387ac:	4630      	mov	r0, r6
}
   387ae:	b003      	add	sp, #12
   387b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   387b4:	f7fb be88 	b.w	344c8 <mem_release>

000387b8 <init_reset>:
{
   387b8:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   387ba:	4c3f      	ldr	r4, [pc, #252]	; (388b8 <init_reset+0x100>)
   387bc:	4d3f      	ldr	r5, [pc, #252]	; (388bc <init_reset+0x104>)
   387be:	79a2      	ldrb	r2, [r4, #6]
   387c0:	88a1      	ldrh	r1, [r4, #4]
   387c2:	4e3f      	ldr	r6, [pc, #252]	; (388c0 <init_reset+0x108>)
   387c4:	2000      	movs	r0, #0
{
   387c6:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   387c8:	4623      	mov	r3, r4
   387ca:	8068      	strh	r0, [r5, #2]
   387cc:	f104 0008 	add.w	r0, r4, #8
   387d0:	f7fb fe30 	bl	34434 <mem_init>
   387d4:	79e3      	ldrb	r3, [r4, #7]
   387d6:	79a2      	ldrb	r2, [r4, #6]
   387d8:	1d30      	adds	r0, r6, #4
   387da:	441a      	add	r2, r3
   387dc:	2108      	movs	r1, #8
   387de:	4633      	mov	r3, r6
   387e0:	f7fb fe28 	bl	34434 <mem_init>
   387e4:	9602      	str	r6, [sp, #8]
   387e6:	462e      	mov	r6, r5
   387e8:	79a3      	ldrb	r3, [r4, #6]
   387ea:	f816 0b04 	ldrb.w	r0, [r6], #4
   387ee:	78aa      	ldrb	r2, [r5, #2]
   387f0:	7869      	ldrb	r1, [r5, #1]
   387f2:	9303      	str	r3, [sp, #12]
   387f4:	e9cd 6400 	strd	r6, r4, [sp]
   387f8:	1ceb      	adds	r3, r5, #3
   387fa:	f7ff ff9f 	bl	3873c <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   387fe:	4b31      	ldr	r3, [pc, #196]	; (388c4 <init_reset+0x10c>)
   38800:	2213      	movs	r2, #19
   38802:	1d18      	adds	r0, r3, #4
   38804:	2144      	movs	r1, #68	; 0x44
   38806:	f7fb fe15 	bl	34434 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   3880a:	4b2f      	ldr	r3, [pc, #188]	; (388c8 <init_reset+0x110>)
   3880c:	2219      	movs	r2, #25
   3880e:	1d18      	adds	r0, r3, #4
   38810:	2108      	movs	r1, #8
   38812:	f7fb fe0f 	bl	34434 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   38816:	482c      	ldr	r0, [pc, #176]	; (388c8 <init_reset+0x110>)
   38818:	f7fb fe3c 	bl	34494 <mem_acquire>
	LL_ASSERT(link);
   3881c:	4604      	mov	r4, r0
   3881e:	b308      	cbz	r0, 38864 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   38820:	4a2a      	ldr	r2, [pc, #168]	; (388cc <init_reset+0x114>)
   38822:	4620      	mov	r0, r4
   38824:	1f11      	subs	r1, r2, #4
   38826:	f7fb fe8b 	bl	34540 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   3882a:	4825      	ldr	r0, [pc, #148]	; (388c0 <init_reset+0x108>)
   3882c:	f7fb fe32 	bl	34494 <mem_acquire>
	LL_ASSERT(link);
   38830:	4604      	mov	r4, r0
   38832:	b328      	cbz	r0, 38880 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   38834:	4a26      	ldr	r2, [pc, #152]	; (388d0 <init_reset+0x118>)
   38836:	4620      	mov	r0, r4
   38838:	1f11      	subs	r1, r2, #4
   3883a:	f7fb fe81 	bl	34540 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   3883e:	4822      	ldr	r0, [pc, #136]	; (388c8 <init_reset+0x110>)
   38840:	f7fb fe28 	bl	34494 <mem_acquire>
	LL_ASSERT(link);
   38844:	4604      	mov	r4, r0
   38846:	b348      	cbz	r0, 3889c <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   38848:	4a22      	ldr	r2, [pc, #136]	; (388d4 <init_reset+0x11c>)
   3884a:	4620      	mov	r0, r4
   3884c:	1f11      	subs	r1, r2, #4
   3884e:	f7fb fe77 	bl	34540 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   38852:	4b21      	ldr	r3, [pc, #132]	; (388d8 <init_reset+0x120>)
   38854:	2210      	movs	r2, #16
	rx_alloc(UINT8_MAX);
   38856:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   38858:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   3885a:	f7ff f8b3 	bl	379c4 <rx_alloc>
}
   3885e:	2000      	movs	r0, #0
   38860:	b004      	add	sp, #16
   38862:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   38864:	4a1d      	ldr	r2, [pc, #116]	; (388dc <init_reset+0x124>)
   38866:	491e      	ldr	r1, [pc, #120]	; (388e0 <init_reset+0x128>)
   38868:	481e      	ldr	r0, [pc, #120]	; (388e4 <init_reset+0x12c>)
   3886a:	f640 0302 	movw	r3, #2050	; 0x802
   3886e:	f011 fe1a 	bl	4a4a6 <printk>
   38872:	4040      	eors	r0, r0
   38874:	f380 8811 	msr	BASEPRI, r0
   38878:	f04f 0003 	mov.w	r0, #3
   3887c:	df02      	svc	2
   3887e:	e7cf      	b.n	38820 <init_reset+0x68>
	LL_ASSERT(link);
   38880:	4a16      	ldr	r2, [pc, #88]	; (388dc <init_reset+0x124>)
   38882:	4917      	ldr	r1, [pc, #92]	; (388e0 <init_reset+0x128>)
   38884:	4817      	ldr	r0, [pc, #92]	; (388e4 <init_reset+0x12c>)
   38886:	f640 030a 	movw	r3, #2058	; 0x80a
   3888a:	f011 fe0c 	bl	4a4a6 <printk>
   3888e:	4040      	eors	r0, r0
   38890:	f380 8811 	msr	BASEPRI, r0
   38894:	f04f 0003 	mov.w	r0, #3
   38898:	df02      	svc	2
   3889a:	e7cb      	b.n	38834 <init_reset+0x7c>
	LL_ASSERT(link);
   3889c:	4a0f      	ldr	r2, [pc, #60]	; (388dc <init_reset+0x124>)
   3889e:	4910      	ldr	r1, [pc, #64]	; (388e0 <init_reset+0x128>)
   388a0:	4810      	ldr	r0, [pc, #64]	; (388e4 <init_reset+0x12c>)
   388a2:	f640 0312 	movw	r3, #2066	; 0x812
   388a6:	f011 fdfe 	bl	4a4a6 <printk>
   388aa:	4040      	eors	r0, r0
   388ac:	f380 8811 	msr	BASEPRI, r0
   388b0:	f04f 0003 	mov.w	r0, #3
   388b4:	df02      	svc	2
   388b6:	e7c7      	b.n	38848 <init_reset+0x90>
   388b8:	20000a80 	.word	0x20000a80
   388bc:	20000b58 	.word	0x20000b58
   388c0:	20004fc0 	.word	0x20004fc0
   388c4:	200050bc 	.word	0x200050bc
   388c8:	20004ff0 	.word	0x20004ff0
   388cc:	200055e0 	.word	0x200055e0
   388d0:	200055d8 	.word	0x200055d8
   388d4:	200055d0 	.word	0x200055d0
   388d8:	20004fec 	.word	0x20004fec
   388dc:	000552cc 	.word	0x000552cc
   388e0:	00055694 	.word	0x00055694
   388e4:	0005512c 	.word	0x0005512c

000388e8 <ll_init>:
{
   388e8:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   388ea:	4b31      	ldr	r3, [pc, #196]	; (389b0 <ll_init+0xc8>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   388ec:	4c31      	ldr	r4, [pc, #196]	; (389b4 <ll_init+0xcc>)
	sem_recv = sem_rx;
   388ee:	6018      	str	r0, [r3, #0]
{
   388f0:	b087      	sub	sp, #28
	cntr_init();
   388f2:	f00a fbbd 	bl	43070 <cntr_init>
	mayfly_init();
   388f6:	f7fb fe53 	bl	345a0 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   388fa:	4a2f      	ldr	r2, [pc, #188]	; (389b8 <ll_init+0xd0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   388fc:	4d2f      	ldr	r5, [pc, #188]	; (389bc <ll_init+0xd4>)
   388fe:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   38900:	f04f 0c05 	mov.w	ip, #5
   38904:	f882 c008 	strb.w	ip, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38908:	9404      	str	r4, [sp, #16]
   3890a:	4c2d      	ldr	r4, [pc, #180]	; (389c0 <ll_init+0xd8>)
   3890c:	9403      	str	r4, [sp, #12]
   3890e:	4c2d      	ldr	r4, [pc, #180]	; (389c4 <ll_init+0xdc>)
   38910:	9200      	str	r2, [sp, #0]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   38912:	2002      	movs	r0, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38914:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38916:	210d      	movs	r1, #13
   38918:	e9cd 1401 	strd	r1, r4, [sp, #4]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   3891c:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   3891e:	7610      	strb	r0, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38920:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38922:	2000      	movs	r0, #0
   38924:	4a28      	ldr	r2, [pc, #160]	; (389c8 <ll_init+0xe0>)
   38926:	f7fc ffa7 	bl	35878 <ticker_init>
	LL_ASSERT(!err);
   3892a:	2800      	cmp	r0, #0
   3892c:	d132      	bne.n	38994 <ll_init+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   3892e:	2201      	movs	r2, #1
   38930:	2100      	movs	r1, #0
   38932:	4826      	ldr	r0, [pc, #152]	; (389cc <ll_init+0xe4>)
   38934:	f018 ff71 	bl	5181a <z_impl_k_sem_init>
	err = lll_init();
   38938:	f008 f892 	bl	40a60 <lll_init>
	if (err) {
   3893c:	4604      	mov	r4, r0
   3893e:	b110      	cbz	r0, 38946 <ll_init+0x5e>
}
   38940:	4620      	mov	r0, r4
   38942:	b007      	add	sp, #28
   38944:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   38946:	f7ff ff37 	bl	387b8 <init_reset>
	if (err) {
   3894a:	4604      	mov	r4, r0
   3894c:	2800      	cmp	r0, #0
   3894e:	d1f7      	bne.n	38940 <ll_init+0x58>
	err = lll_adv_init();
   38950:	f008 fcea 	bl	41328 <lll_adv_init>
	if (err) {
   38954:	4604      	mov	r4, r0
   38956:	2800      	cmp	r0, #0
   38958:	d1f2      	bne.n	38940 <ll_init+0x58>
	err = ull_adv_init();
   3895a:	f000 fcff 	bl	3935c <ull_adv_init>
	if (err) {
   3895e:	4604      	mov	r4, r0
   38960:	2800      	cmp	r0, #0
   38962:	d1ed      	bne.n	38940 <ll_init+0x58>
	err = lll_scan_init();
   38964:	f009 fc72 	bl	4224c <lll_scan_init>
	if (err) {
   38968:	4604      	mov	r4, r0
   3896a:	2800      	cmp	r0, #0
   3896c:	d1e8      	bne.n	38940 <ll_init+0x58>
	err = ull_scan_init();
   3896e:	f000 fead 	bl	396cc <ull_scan_init>
	if (err) {
   38972:	4604      	mov	r4, r0
   38974:	2800      	cmp	r0, #0
   38976:	d1e3      	bne.n	38940 <ll_init+0x58>
	err = lll_conn_init();
   38978:	f009 fd9c 	bl	424b4 <lll_conn_init>
	if (err) {
   3897c:	4604      	mov	r4, r0
   3897e:	2800      	cmp	r0, #0
   38980:	d1de      	bne.n	38940 <ll_init+0x58>
	err = ull_conn_init();
   38982:	f002 f93f 	bl	3ac04 <ull_conn_init>
	if (err) {
   38986:	4604      	mov	r4, r0
   38988:	2800      	cmp	r0, #0
   3898a:	d1d9      	bne.n	38940 <ll_init+0x58>
		ull_filter_reset(true);
   3898c:	2001      	movs	r0, #1
   3898e:	f007 f92b 	bl	3fbe8 <ull_filter_reset>
	return  0;
   38992:	e7d5      	b.n	38940 <ll_init+0x58>
	LL_ASSERT(!err);
   38994:	4a0e      	ldr	r2, [pc, #56]	; (389d0 <ll_init+0xe8>)
   38996:	490f      	ldr	r1, [pc, #60]	; (389d4 <ll_init+0xec>)
   38998:	480f      	ldr	r0, [pc, #60]	; (389d8 <ll_init+0xf0>)
   3899a:	f240 230d 	movw	r3, #525	; 0x20d
   3899e:	f011 fd82 	bl	4a4a6 <printk>
   389a2:	4040      	eors	r0, r0
   389a4:	f380 8811 	msr	BASEPRI, r0
   389a8:	f04f 0003 	mov.w	r0, #3
   389ac:	df02      	svc	2
   389ae:	e7be      	b.n	3892e <ll_init+0x46>
   389b0:	200055e4 	.word	0x200055e4
   389b4:	00043c5d 	.word	0x00043c5d
   389b8:	20005b14 	.word	0x20005b14
   389bc:	00043dad 	.word	0x00043dad
   389c0:	00043bf9 	.word	0x00043bf9
   389c4:	20005870 	.word	0x20005870
   389c8:	20005600 	.word	0x20005600
   389cc:	200055e8 	.word	0x200055e8
   389d0:	000552cc 	.word	0x000552cc
   389d4:	00055308 	.word	0x00055308
   389d8:	0005512c 	.word	0x0005512c

000389dc <ll_reset>:
{
   389dc:	b510      	push	{r4, lr}
   389de:	b086      	sub	sp, #24
	err = ull_adv_reset();
   389e0:	f000 fccc 	bl	3937c <ull_adv_reset>
	LL_ASSERT(!err);
   389e4:	2800      	cmp	r0, #0
   389e6:	d133      	bne.n	38a50 <ll_reset+0x74>
	err = ull_scan_reset();
   389e8:	f000 fef0 	bl	397cc <ull_scan_reset>
	LL_ASSERT(!err);
   389ec:	2800      	cmp	r0, #0
   389ee:	d140      	bne.n	38a72 <ll_reset+0x96>
	err = ull_conn_reset();
   389f0:	f002 f90a 	bl	3ac08 <ull_conn_reset>
	LL_ASSERT(!err);
   389f4:	2800      	cmp	r0, #0
   389f6:	d14d      	bne.n	38a94 <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   389f8:	4b43      	ldr	r3, [pc, #268]	; (38b08 <ll_reset+0x12c>)
   389fa:	2400      	movs	r4, #0
   389fc:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   389fe:	4620      	mov	r0, r4
   38a00:	f007 f8f2 	bl	3fbe8 <ull_filter_reset>
	MFIFO_INIT(prep);
   38a04:	4941      	ldr	r1, [pc, #260]	; (38b0c <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   38a06:	4a42      	ldr	r2, [pc, #264]	; (38b10 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   38a08:	4b42      	ldr	r3, [pc, #264]	; (38b14 <ll_reset+0x138>)
	MFIFO_INIT(prep);
   38a0a:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   38a0c:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   38a0e:	805c      	strh	r4, [r3, #2]
   38a10:	2201      	movs	r2, #1
   38a12:	4621      	mov	r1, r4
   38a14:	4668      	mov	r0, sp
   38a16:	f018 ff00 	bl	5181a <z_impl_k_sem_init>
		mfy.param = &sem;
   38a1a:	4b3f      	ldr	r3, [pc, #252]	; (38b18 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   38a1c:	4622      	mov	r2, r4
   38a1e:	4621      	mov	r1, r4
   38a20:	2003      	movs	r0, #3
		mfy.param = &sem;
   38a22:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   38a26:	f7fb fe0d 	bl	34644 <mayfly_enqueue>
		LL_ASSERT(!retval);
   38a2a:	2800      	cmp	r0, #0
   38a2c:	d15d      	bne.n	38aea <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   38a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38a36:	4668      	mov	r0, sp
   38a38:	f00f ff60 	bl	488fc <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   38a3c:	f000 fcb8 	bl	393b0 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   38a40:	2800      	cmp	r0, #0
   38a42:	d144      	bne.n	38ace <ll_reset+0xf2>
	err = init_reset();
   38a44:	f7ff feb8 	bl	387b8 <init_reset>
	LL_ASSERT(!err);
   38a48:	2800      	cmp	r0, #0
   38a4a:	d131      	bne.n	38ab0 <ll_reset+0xd4>
}
   38a4c:	b006      	add	sp, #24
   38a4e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   38a50:	4a32      	ldr	r2, [pc, #200]	; (38b1c <ll_reset+0x140>)
   38a52:	4933      	ldr	r1, [pc, #204]	; (38b20 <ll_reset+0x144>)
   38a54:	4833      	ldr	r0, [pc, #204]	; (38b24 <ll_reset+0x148>)
   38a56:	f240 23ad 	movw	r3, #685	; 0x2ad
   38a5a:	f011 fd24 	bl	4a4a6 <printk>
   38a5e:	4040      	eors	r0, r0
   38a60:	f380 8811 	msr	BASEPRI, r0
   38a64:	f04f 0003 	mov.w	r0, #3
   38a68:	df02      	svc	2
	err = ull_scan_reset();
   38a6a:	f000 feaf 	bl	397cc <ull_scan_reset>
	LL_ASSERT(!err);
   38a6e:	2800      	cmp	r0, #0
   38a70:	d0be      	beq.n	389f0 <ll_reset+0x14>
   38a72:	4a2a      	ldr	r2, [pc, #168]	; (38b1c <ll_reset+0x140>)
   38a74:	492a      	ldr	r1, [pc, #168]	; (38b20 <ll_reset+0x144>)
   38a76:	482b      	ldr	r0, [pc, #172]	; (38b24 <ll_reset+0x148>)
   38a78:	f240 23b3 	movw	r3, #691	; 0x2b3
   38a7c:	f011 fd13 	bl	4a4a6 <printk>
   38a80:	4040      	eors	r0, r0
   38a82:	f380 8811 	msr	BASEPRI, r0
   38a86:	f04f 0003 	mov.w	r0, #3
   38a8a:	df02      	svc	2
	err = ull_conn_reset();
   38a8c:	f002 f8bc 	bl	3ac08 <ull_conn_reset>
	LL_ASSERT(!err);
   38a90:	2800      	cmp	r0, #0
   38a92:	d0b1      	beq.n	389f8 <ll_reset+0x1c>
   38a94:	4a21      	ldr	r2, [pc, #132]	; (38b1c <ll_reset+0x140>)
   38a96:	4922      	ldr	r1, [pc, #136]	; (38b20 <ll_reset+0x144>)
   38a98:	4822      	ldr	r0, [pc, #136]	; (38b24 <ll_reset+0x148>)
   38a9a:	f240 23de 	movw	r3, #734	; 0x2de
   38a9e:	f011 fd02 	bl	4a4a6 <printk>
   38aa2:	4040      	eors	r0, r0
   38aa4:	f380 8811 	msr	BASEPRI, r0
   38aa8:	f04f 0003 	mov.w	r0, #3
   38aac:	df02      	svc	2
   38aae:	e7a3      	b.n	389f8 <ll_reset+0x1c>
	LL_ASSERT(!err);
   38ab0:	4a1a      	ldr	r2, [pc, #104]	; (38b1c <ll_reset+0x140>)
   38ab2:	491b      	ldr	r1, [pc, #108]	; (38b20 <ll_reset+0x144>)
   38ab4:	481b      	ldr	r0, [pc, #108]	; (38b24 <ll_reset+0x148>)
   38ab6:	f240 3327 	movw	r3, #807	; 0x327
   38aba:	f011 fcf4 	bl	4a4a6 <printk>
   38abe:	4040      	eors	r0, r0
   38ac0:	f380 8811 	msr	BASEPRI, r0
   38ac4:	f04f 0003 	mov.w	r0, #3
   38ac8:	df02      	svc	2
}
   38aca:	b006      	add	sp, #24
   38acc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   38ace:	4a13      	ldr	r2, [pc, #76]	; (38b1c <ll_reset+0x140>)
   38ad0:	4913      	ldr	r1, [pc, #76]	; (38b20 <ll_reset+0x144>)
   38ad2:	4814      	ldr	r0, [pc, #80]	; (38b24 <ll_reset+0x148>)
   38ad4:	f240 331a 	movw	r3, #794	; 0x31a
   38ad8:	f011 fce5 	bl	4a4a6 <printk>
   38adc:	4040      	eors	r0, r0
   38ade:	f380 8811 	msr	BASEPRI, r0
   38ae2:	f04f 0003 	mov.w	r0, #3
   38ae6:	df02      	svc	2
   38ae8:	e7ac      	b.n	38a44 <ll_reset+0x68>
		LL_ASSERT(!retval);
   38aea:	4a0c      	ldr	r2, [pc, #48]	; (38b1c <ll_reset+0x140>)
   38aec:	490e      	ldr	r1, [pc, #56]	; (38b28 <ll_reset+0x14c>)
   38aee:	480d      	ldr	r0, [pc, #52]	; (38b24 <ll_reset+0x148>)
   38af0:	f240 330d 	movw	r3, #781	; 0x30d
   38af4:	f011 fcd7 	bl	4a4a6 <printk>
   38af8:	4040      	eors	r0, r0
   38afa:	f380 8811 	msr	BASEPRI, r0
   38afe:	f04f 0003 	mov.w	r0, #3
   38b02:	df02      	svc	2
   38b04:	e793      	b.n	38a2e <ll_reset+0x52>
   38b06:	bf00      	nop
   38b08:	20000cc4 	.word	0x20000cc4
   38b0c:	20000bc0 	.word	0x20000bc0
   38b10:	20000ba8 	.word	0x20000ba8
   38b14:	20000b70 	.word	0x20000b70
   38b18:	20000cf8 	.word	0x20000cf8
   38b1c:	000552cc 	.word	0x000552cc
   38b20:	00055308 	.word	0x00055308
   38b24:	0005512c 	.word	0x0005512c
   38b28:	00055430 	.word	0x00055430

00038b2c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   38b2c:	b510      	push	{r4, lr}
   38b2e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   38b30:	2400      	movs	r4, #0
   38b32:	e9cd 4400 	strd	r4, r4, [sp]
   38b36:	9b04      	ldr	r3, [sp, #16]
   38b38:	f008 f9b6 	bl	40ea8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   38b3c:	b002      	add	sp, #8
   38b3e:	bd10      	pop	{r4, pc}

00038b40 <lll_resume>:

void lll_resume(void *param)
{
   38b40:	b510      	push	{r4, lr}
   38b42:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   38b44:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   38b46:	691a      	ldr	r2, [r3, #16]
   38b48:	6999      	ldr	r1, [r3, #24]
   38b4a:	2401      	movs	r4, #1
{
   38b4c:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   38b4e:	4020      	ands	r0, r4
   38b50:	e9cd 0400 	strd	r0, r4, [sp]
   38b54:	6958      	ldr	r0, [r3, #20]
   38b56:	f008 f9a7 	bl	40ea8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   38b5a:	b108      	cbz	r0, 38b60 <lll_resume+0x20>
   38b5c:	3077      	adds	r0, #119	; 0x77
   38b5e:	d101      	bne.n	38b64 <lll_resume+0x24>
}
   38b60:	b002      	add	sp, #8
   38b62:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   38b64:	4a06      	ldr	r2, [pc, #24]	; (38b80 <lll_resume+0x40>)
   38b66:	4907      	ldr	r1, [pc, #28]	; (38b84 <lll_resume+0x44>)
   38b68:	4807      	ldr	r0, [pc, #28]	; (38b88 <lll_resume+0x48>)
   38b6a:	234f      	movs	r3, #79	; 0x4f
   38b6c:	f011 fc9b 	bl	4a4a6 <printk>
   38b70:	4040      	eors	r0, r0
   38b72:	f380 8811 	msr	BASEPRI, r0
   38b76:	f04f 0003 	mov.w	r0, #3
   38b7a:	df02      	svc	2
}
   38b7c:	b002      	add	sp, #8
   38b7e:	bd10      	pop	{r4, pc}
   38b80:	00055438 	.word	0x00055438
   38b84:	0005547c 	.word	0x0005547c
   38b88:	0005512c 	.word	0x0005512c

00038b8c <ticker_stop_cb>:
{
   38b8c:	b530      	push	{r4, r5, lr}
   38b8e:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38b90:	4b19      	ldr	r3, [pc, #100]	; (38bf8 <ticker_stop_cb+0x6c>)
{
   38b92:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38b94:	4a19      	ldr	r2, [pc, #100]	; (38bfc <ticker_stop_cb+0x70>)
   38b96:	1aeb      	subs	r3, r5, r3
   38b98:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38b9c:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   38ba0:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38ba4:	d119      	bne.n	38bda <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   38ba6:	1ca2      	adds	r2, r4, #2
   38ba8:	4b15      	ldr	r3, [pc, #84]	; (38c00 <ticker_stop_cb+0x74>)
   38baa:	9500      	str	r5, [sp, #0]
   38bac:	b2d2      	uxtb	r2, r2
   38bae:	2101      	movs	r1, #1
   38bb0:	2000      	movs	r0, #0
   38bb2:	f7fc ffa9 	bl	35b08 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38bb6:	f030 0302 	bics.w	r3, r0, #2
   38bba:	d00c      	beq.n	38bd6 <ticker_stop_cb+0x4a>
   38bbc:	4a11      	ldr	r2, [pc, #68]	; (38c04 <ticker_stop_cb+0x78>)
   38bbe:	4912      	ldr	r1, [pc, #72]	; (38c08 <ticker_stop_cb+0x7c>)
   38bc0:	4812      	ldr	r0, [pc, #72]	; (38c0c <ticker_stop_cb+0x80>)
   38bc2:	f640 03d2 	movw	r3, #2258	; 0x8d2
   38bc6:	f011 fc6e 	bl	4a4a6 <printk>
   38bca:	4040      	eors	r0, r0
   38bcc:	f380 8811 	msr	BASEPRI, r0
   38bd0:	f04f 0003 	mov.w	r0, #3
   38bd4:	df02      	svc	2
}
   38bd6:	b003      	add	sp, #12
   38bd8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38bda:	4a0a      	ldr	r2, [pc, #40]	; (38c04 <ticker_stop_cb+0x78>)
   38bdc:	490c      	ldr	r1, [pc, #48]	; (38c10 <ticker_stop_cb+0x84>)
   38bde:	480b      	ldr	r0, [pc, #44]	; (38c0c <ticker_stop_cb+0x80>)
   38be0:	f640 03cd 	movw	r3, #2253	; 0x8cd
   38be4:	f011 fc5f 	bl	4a4a6 <printk>
   38be8:	4040      	eors	r0, r0
   38bea:	f380 8811 	msr	BASEPRI, r0
   38bee:	f04f 0003 	mov.w	r0, #3
   38bf2:	df02      	svc	2
   38bf4:	e7d7      	b.n	38ba6 <ticker_stop_cb+0x1a>
   38bf6:	bf00      	nop
   38bf8:	20005b4c 	.word	0x20005b4c
   38bfc:	88888889 	.word	0x88888889
   38c00:	00038ca9 	.word	0x00038ca9
   38c04:	00055490 	.word	0x00055490
   38c08:	000554dc 	.word	0x000554dc
   38c0c:	0005512c 	.word	0x0005512c
   38c10:	000554d0 	.word	0x000554d0

00038c14 <disabled_cb>:
{
   38c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   38c16:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   38c18:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   38c1a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   38c1c:	b1d7      	cbz	r7, 38c54 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   38c1e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   38c20:	2300      	movs	r3, #0
   38c22:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   38c24:	b34c      	cbz	r4, 38c7a <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   38c26:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   38c28:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   38c2a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   38c2c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   38c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38c32:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   38c34:	221e      	movs	r2, #30
   38c36:	f104 001c 	add.w	r0, r4, #28
   38c3a:	f013 fd47 	bl	4c6cc <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   38c3e:	233c      	movs	r3, #60	; 0x3c
   38c40:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   38c42:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   38c44:	4621      	mov	r1, r4
   38c46:	4638      	mov	r0, r7
   38c48:	f7ff faba 	bl	381c0 <ll_rx_put>
}
   38c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   38c50:	f7ff bac0 	b.w	381d4 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   38c54:	4a10      	ldr	r2, [pc, #64]	; (38c98 <disabled_cb+0x84>)
   38c56:	4911      	ldr	r1, [pc, #68]	; (38c9c <disabled_cb+0x88>)
   38c58:	4811      	ldr	r0, [pc, #68]	; (38ca0 <disabled_cb+0x8c>)
   38c5a:	f640 131a 	movw	r3, #2330	; 0x91a
   38c5e:	f011 fc22 	bl	4a4a6 <printk>
   38c62:	4040      	eors	r0, r0
   38c64:	f380 8811 	msr	BASEPRI, r0
   38c68:	f04f 0003 	mov.w	r0, #3
   38c6c:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   38c6e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   38c70:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   38c72:	2300      	movs	r3, #0
   38c74:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   38c76:	2c00      	cmp	r4, #0
   38c78:	d1d5      	bne.n	38c26 <disabled_cb+0x12>
   38c7a:	4a07      	ldr	r2, [pc, #28]	; (38c98 <disabled_cb+0x84>)
   38c7c:	4909      	ldr	r1, [pc, #36]	; (38ca4 <disabled_cb+0x90>)
   38c7e:	4808      	ldr	r0, [pc, #32]	; (38ca0 <disabled_cb+0x8c>)
   38c80:	f640 131e 	movw	r3, #2334	; 0x91e
   38c84:	f011 fc0f 	bl	4a4a6 <printk>
   38c88:	4040      	eors	r0, r0
   38c8a:	f380 8811 	msr	BASEPRI, r0
   38c8e:	f04f 0003 	mov.w	r0, #3
   38c92:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   38c94:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   38c96:	e7c6      	b.n	38c26 <disabled_cb+0x12>
   38c98:	00055490 	.word	0x00055490
   38c9c:	000554f8 	.word	0x000554f8
   38ca0:	0005512c 	.word	0x0005512c
   38ca4:	0005550c 	.word	0x0005550c

00038ca8 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   38ca8:	b100      	cbz	r0, 38cac <ticker_stop_op_cb+0x4>
   38caa:	4770      	bx	lr
	mfy.param = param;
   38cac:	4b0c      	ldr	r3, [pc, #48]	; (38ce0 <ticker_stop_op_cb+0x38>)
{
   38cae:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   38cb0:	4602      	mov	r2, r0
   38cb2:	460c      	mov	r4, r1
   38cb4:	2002      	movs	r0, #2
   38cb6:	2101      	movs	r1, #1
	mfy.param = param;
   38cb8:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   38cba:	f7fb fcc3 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!ret);
   38cbe:	b900      	cbnz	r0, 38cc2 <ticker_stop_op_cb+0x1a>
}
   38cc0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   38cc2:	4a08      	ldr	r2, [pc, #32]	; (38ce4 <ticker_stop_op_cb+0x3c>)
   38cc4:	4908      	ldr	r1, [pc, #32]	; (38ce8 <ticker_stop_op_cb+0x40>)
   38cc6:	4809      	ldr	r0, [pc, #36]	; (38cec <ticker_stop_op_cb+0x44>)
   38cc8:	f640 03ee 	movw	r3, #2286	; 0x8ee
   38ccc:	f011 fbeb 	bl	4a4a6 <printk>
   38cd0:	4040      	eors	r0, r0
   38cd2:	f380 8811 	msr	BASEPRI, r0
   38cd6:	f04f 0003 	mov.w	r0, #3
   38cda:	df02      	svc	2
}
   38cdc:	bd10      	pop	{r4, pc}
   38cde:	bf00      	nop
   38ce0:	20000d68 	.word	0x20000d68
   38ce4:	00055490 	.word	0x00055490
   38ce8:	00055408 	.word	0x00055408
   38cec:	0005512c 	.word	0x0005512c

00038cf0 <adv_disable>:
{
   38cf0:	b538      	push	{r3, r4, r5, lr}
   38cf2:	4604      	mov	r4, r0
   38cf4:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   38cf8:	b353      	cbz	r3, 38d50 <adv_disable+0x60>
		mfy.param = &adv->lll;
   38cfa:	4d17      	ldr	r5, [pc, #92]	; (38d58 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   38cfc:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   38cfe:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   38d00:	b16b      	cbz	r3, 38d1e <adv_disable+0x2e>
   38d02:	4a16      	ldr	r2, [pc, #88]	; (38d5c <adv_disable+0x6c>)
   38d04:	4916      	ldr	r1, [pc, #88]	; (38d60 <adv_disable+0x70>)
   38d06:	4817      	ldr	r0, [pc, #92]	; (38d64 <adv_disable+0x74>)
   38d08:	f640 1303 	movw	r3, #2307	; 0x903
   38d0c:	f011 fbcb 	bl	4a4a6 <printk>
   38d10:	4040      	eors	r0, r0
   38d12:	f380 8811 	msr	BASEPRI, r0
   38d16:	f04f 0003 	mov.w	r0, #3
   38d1a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   38d1c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   38d1e:	4912      	ldr	r1, [pc, #72]	; (38d68 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38d20:	4b0d      	ldr	r3, [pc, #52]	; (38d58 <adv_disable+0x68>)
   38d22:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   38d24:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38d28:	4611      	mov	r1, r2
   38d2a:	2001      	movs	r0, #1
   38d2c:	f7fb fc8a 	bl	34644 <mayfly_enqueue>
		LL_ASSERT(!ret);
   38d30:	b900      	cbnz	r0, 38d34 <adv_disable+0x44>
}
   38d32:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   38d34:	4a09      	ldr	r2, [pc, #36]	; (38d5c <adv_disable+0x6c>)
   38d36:	490d      	ldr	r1, [pc, #52]	; (38d6c <adv_disable+0x7c>)
   38d38:	480a      	ldr	r0, [pc, #40]	; (38d64 <adv_disable+0x74>)
   38d3a:	f640 130a 	movw	r3, #2314	; 0x90a
   38d3e:	f011 fbb2 	bl	4a4a6 <printk>
   38d42:	4040      	eors	r0, r0
   38d44:	f380 8811 	msr	BASEPRI, r0
   38d48:	f04f 0003 	mov.w	r0, #3
   38d4c:	df02      	svc	2
}
   38d4e:	bd38      	pop	{r3, r4, r5, pc}
   38d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   38d54:	f7ff bf5e 	b.w	38c14 <disabled_cb>
   38d58:	20000d58 	.word	0x20000d58
   38d5c:	00055490 	.word	0x00055490
   38d60:	00055524 	.word	0x00055524
   38d64:	0005512c 	.word	0x0005512c
   38d68:	00038c15 	.word	0x00038c15
   38d6c:	00055408 	.word	0x00055408

00038d70 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   38d70:	b900      	cbnz	r0, 38d74 <ticker_update_op_cb+0x4>
   38d72:	4770      	bx	lr
{
   38d74:	b510      	push	{r4, lr}
   38d76:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   38d78:	f7ff fafe 	bl	38378 <ull_disable_mark_get>
   38d7c:	4284      	cmp	r4, r0
   38d7e:	d00c      	beq.n	38d9a <ticker_update_op_cb+0x2a>
   38d80:	4a06      	ldr	r2, [pc, #24]	; (38d9c <ticker_update_op_cb+0x2c>)
   38d82:	4907      	ldr	r1, [pc, #28]	; (38da0 <ticker_update_op_cb+0x30>)
   38d84:	4807      	ldr	r0, [pc, #28]	; (38da4 <ticker_update_op_cb+0x34>)
   38d86:	f640 03bf 	movw	r3, #2239	; 0x8bf
   38d8a:	f011 fb8c 	bl	4a4a6 <printk>
   38d8e:	4040      	eors	r0, r0
   38d90:	f380 8811 	msr	BASEPRI, r0
   38d94:	f04f 0003 	mov.w	r0, #3
   38d98:	df02      	svc	2
}
   38d9a:	bd10      	pop	{r4, pc}
   38d9c:	00055490 	.word	0x00055490
   38da0:	00055538 	.word	0x00055538
   38da4:	0005512c 	.word	0x0005512c

00038da8 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   38da8:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38daa:	4b13      	ldr	r3, [pc, #76]	; (38df8 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38dac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38dae:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38db2:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   38db6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38dba:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   38dbe:	f022 0202 	bic.w	r2, r2, #2
   38dc2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   38dc4:	f042 020e 	orr.w	r2, r2, #14
   38dc8:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   38dca:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   38dcc:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38dce:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38dd2:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38dd6:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38dda:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   38dde:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   38de0:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38de2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   38de6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   38dea:	2204      	movs	r2, #4
   38dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   38dee:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   38df0:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   38df2:	f85d fb04 	ldr.w	pc, [sp], #4
   38df6:	bf00      	nop
   38df8:	20005b4c 	.word	0x20005b4c

00038dfc <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   38dfc:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   38dfe:	4c1b      	ldr	r4, [pc, #108]	; (38e6c <conn_release.constprop.0+0x70>)
   38e00:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   38e02:	6dab      	ldr	r3, [r5, #88]	; 0x58
   38e04:	b163      	cbz	r3, 38e20 <conn_release.constprop.0+0x24>
   38e06:	4a1a      	ldr	r2, [pc, #104]	; (38e70 <conn_release.constprop.0+0x74>)
   38e08:	491a      	ldr	r1, [pc, #104]	; (38e74 <conn_release.constprop.0+0x78>)
   38e0a:	481b      	ldr	r0, [pc, #108]	; (38e78 <conn_release.constprop.0+0x7c>)
   38e0c:	f640 1348 	movw	r3, #2376	; 0x948
   38e10:	f011 fb49 	bl	4a4a6 <printk>
   38e14:	4040      	eors	r0, r0
   38e16:	f380 8811 	msr	BASEPRI, r0
   38e1a:	f04f 0003 	mov.w	r0, #3
   38e1e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   38e20:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   38e24:	f105 0048 	add.w	r0, r5, #72	; 0x48
   38e28:	f7fb fb8e 	bl	34548 <memq_deinit>
	LL_ASSERT(link);
   38e2c:	4606      	mov	r6, r0
   38e2e:	b170      	cbz	r0, 38e4e <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   38e30:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   38e32:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   38e34:	f001 fbc6 	bl	3a5c4 <ll_conn_release>
	adv->lll.conn = NULL;
   38e38:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   38e3a:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   38e3c:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   38e3e:	f7ff f9b9 	bl	381b4 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   38e42:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   38e44:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   38e46:	f7ff f9a9 	bl	3819c <ll_rx_link_release>
	adv->link_cc_free = NULL;
   38e4a:	6625      	str	r5, [r4, #96]	; 0x60
}
   38e4c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   38e4e:	4a08      	ldr	r2, [pc, #32]	; (38e70 <conn_release.constprop.0+0x74>)
   38e50:	490a      	ldr	r1, [pc, #40]	; (38e7c <conn_release.constprop.0+0x80>)
   38e52:	4809      	ldr	r0, [pc, #36]	; (38e78 <conn_release.constprop.0+0x7c>)
   38e54:	f640 134a 	movw	r3, #2378	; 0x94a
   38e58:	f011 fb25 	bl	4a4a6 <printk>
   38e5c:	4040      	eors	r0, r0
   38e5e:	f380 8811 	msr	BASEPRI, r0
   38e62:	f04f 0003 	mov.w	r0, #3
   38e66:	df02      	svc	2
   38e68:	e7e2      	b.n	38e30 <conn_release.constprop.0+0x34>
   38e6a:	bf00      	nop
   38e6c:	20005b4c 	.word	0x20005b4c
   38e70:	00055490 	.word	0x00055490
   38e74:	00055568 	.word	0x00055568
   38e78:	0005512c 	.word	0x0005512c
   38e7c:	00055694 	.word	0x00055694

00038e80 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   38e80:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   38e82:	4c50      	ldr	r4, [pc, #320]	; (38fc4 <disable.part.0+0x144>)
static inline uint8_t disable(uint8_t handle)
   38e84:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   38e86:	4620      	mov	r0, r4
   38e88:	f7ff fa60 	bl	3834c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   38e8c:	4284      	cmp	r4, r0
   38e8e:	d00c      	beq.n	38eaa <disable.part.0+0x2a>
   38e90:	4a4d      	ldr	r2, [pc, #308]	; (38fc8 <disable.part.0+0x148>)
   38e92:	494e      	ldr	r1, [pc, #312]	; (38fcc <disable.part.0+0x14c>)
   38e94:	484e      	ldr	r0, [pc, #312]	; (38fd0 <disable.part.0+0x150>)
   38e96:	f640 13ff 	movw	r3, #2559	; 0x9ff
   38e9a:	f011 fb04 	bl	4a4a6 <printk>
   38e9e:	4040      	eors	r0, r0
   38ea0:	f380 8811 	msr	BASEPRI, r0
   38ea4:	f04f 0003 	mov.w	r0, #3
   38ea8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   38eaa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   38eae:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38eb0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   38eb2:	d50d      	bpl.n	38ed0 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   38eb4:	2102      	movs	r1, #2
   38eb6:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38eb8:	4b46      	ldr	r3, [pc, #280]	; (38fd4 <disable.part.0+0x154>)
   38eba:	9500      	str	r5, [sp, #0]
   38ebc:	2103      	movs	r1, #3
   38ebe:	2201      	movs	r2, #1
   38ec0:	2000      	movs	r0, #0
   38ec2:	f7fc fe21 	bl	35b08 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   38ec6:	4629      	mov	r1, r5
   38ec8:	f7ff fa18 	bl	382fc <ull_ticker_status_take>
		if (ret) {
   38ecc:	2800      	cmp	r0, #0
   38ece:	d15e      	bne.n	38f8e <disable.part.0+0x10e>
	ret_cb = TICKER_STATUS_BUSY;
   38ed0:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38ed2:	2103      	movs	r1, #3
   38ed4:	4b3f      	ldr	r3, [pc, #252]	; (38fd4 <disable.part.0+0x154>)
   38ed6:	9500      	str	r5, [sp, #0]
   38ed8:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   38eda:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38edc:	f7fc fe14 	bl	35b08 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   38ee0:	4629      	mov	r1, r5
   38ee2:	f7ff fa0b 	bl	382fc <ull_ticker_status_take>
	if (ret) {
   38ee6:	bb50      	cbnz	r0, 38f3e <disable.part.0+0xbe>
	err = ull_disable(&adv->lll);
   38ee8:	483b      	ldr	r0, [pc, #236]	; (38fd8 <disable.part.0+0x158>)
   38eea:	f7ff fa67 	bl	383bc <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   38eee:	b108      	cbz	r0, 38ef4 <disable.part.0+0x74>
   38ef0:	3078      	adds	r0, #120	; 0x78
   38ef2:	d139      	bne.n	38f68 <disable.part.0+0xe8>
	mark = ull_disable_unmark(adv);
   38ef4:	4833      	ldr	r0, [pc, #204]	; (38fc4 <disable.part.0+0x144>)
   38ef6:	f7ff fa33 	bl	38360 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   38efa:	4284      	cmp	r4, r0
   38efc:	d00c      	beq.n	38f18 <disable.part.0+0x98>
   38efe:	4a32      	ldr	r2, [pc, #200]	; (38fc8 <disable.part.0+0x148>)
   38f00:	4932      	ldr	r1, [pc, #200]	; (38fcc <disable.part.0+0x14c>)
   38f02:	4833      	ldr	r0, [pc, #204]	; (38fd0 <disable.part.0+0x150>)
   38f04:	f640 2321 	movw	r3, #2593	; 0xa21
   38f08:	f011 facd 	bl	4a4a6 <printk>
   38f0c:	4040      	eors	r0, r0
   38f0e:	f380 8811 	msr	BASEPRI, r0
   38f12:	f04f 0003 	mov.w	r0, #3
   38f16:	df02      	svc	2
	if (adv->lll.conn) {
   38f18:	6a23      	ldr	r3, [r4, #32]
   38f1a:	b10b      	cbz	r3, 38f20 <disable.part.0+0xa0>
		conn_release(adv);
   38f1c:	f7ff ff6e 	bl	38dfc <conn_release.constprop.0>
	adv->is_enabled = 0U;
   38f20:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38f24:	f36f 0300 	bfc	r3, #0, #1
   38f28:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   38f2c:	2000      	movs	r0, #0
   38f2e:	f000 fc85 	bl	3983c <ull_scan_is_enabled_get>
   38f32:	4604      	mov	r4, r0
   38f34:	2800      	cmp	r0, #0
   38f36:	d03f      	beq.n	38fb8 <disable.part.0+0x138>
	return 0;
   38f38:	2000      	movs	r0, #0
}
   38f3a:	b005      	add	sp, #20
   38f3c:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   38f3e:	4821      	ldr	r0, [pc, #132]	; (38fc4 <disable.part.0+0x144>)
   38f40:	f7ff fa0e 	bl	38360 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   38f44:	4284      	cmp	r4, r0
   38f46:	d034      	beq.n	38fb2 <disable.part.0+0x132>
   38f48:	4a1f      	ldr	r2, [pc, #124]	; (38fc8 <disable.part.0+0x148>)
   38f4a:	4920      	ldr	r1, [pc, #128]	; (38fcc <disable.part.0+0x14c>)
   38f4c:	4820      	ldr	r0, [pc, #128]	; (38fd0 <disable.part.0+0x150>)
   38f4e:	f640 2318 	movw	r3, #2584	; 0xa18
   38f52:	f011 faa8 	bl	4a4a6 <printk>
   38f56:	4040      	eors	r0, r0
   38f58:	f380 8811 	msr	BASEPRI, r0
   38f5c:	f04f 0003 	mov.w	r0, #3
   38f60:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   38f62:	200c      	movs	r0, #12
}
   38f64:	b005      	add	sp, #20
   38f66:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   38f68:	4a17      	ldr	r2, [pc, #92]	; (38fc8 <disable.part.0+0x148>)
   38f6a:	491c      	ldr	r1, [pc, #112]	; (38fdc <disable.part.0+0x15c>)
   38f6c:	4818      	ldr	r0, [pc, #96]	; (38fd0 <disable.part.0+0x150>)
   38f6e:	f640 231e 	movw	r3, #2590	; 0xa1e
   38f72:	f011 fa98 	bl	4a4a6 <printk>
   38f76:	4040      	eors	r0, r0
   38f78:	f380 8811 	msr	BASEPRI, r0
   38f7c:	f04f 0003 	mov.w	r0, #3
   38f80:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   38f82:	4810      	ldr	r0, [pc, #64]	; (38fc4 <disable.part.0+0x144>)
   38f84:	f7ff f9ec 	bl	38360 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   38f88:	4284      	cmp	r4, r0
   38f8a:	d1b8      	bne.n	38efe <disable.part.0+0x7e>
   38f8c:	e7c4      	b.n	38f18 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   38f8e:	480d      	ldr	r0, [pc, #52]	; (38fc4 <disable.part.0+0x144>)
   38f90:	f7ff f9e6 	bl	38360 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   38f94:	4284      	cmp	r4, r0
   38f96:	d00c      	beq.n	38fb2 <disable.part.0+0x132>
   38f98:	4a0b      	ldr	r2, [pc, #44]	; (38fc8 <disable.part.0+0x148>)
   38f9a:	490c      	ldr	r1, [pc, #48]	; (38fcc <disable.part.0+0x14c>)
   38f9c:	480c      	ldr	r0, [pc, #48]	; (38fd0 <disable.part.0+0x150>)
   38f9e:	f640 230a 	movw	r3, #2570	; 0xa0a
   38fa2:	f011 fa80 	bl	4a4a6 <printk>
   38fa6:	4040      	eors	r0, r0
   38fa8:	f380 8811 	msr	BASEPRI, r0
   38fac:	f04f 0003 	mov.w	r0, #3
   38fb0:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   38fb2:	200c      	movs	r0, #12
}
   38fb4:	b005      	add	sp, #20
   38fb6:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   38fb8:	f006 fe96 	bl	3fce8 <ull_filter_adv_scan_state_cb>
	return 0;
   38fbc:	4620      	mov	r0, r4
}
   38fbe:	b005      	add	sp, #20
   38fc0:	bd30      	pop	{r4, r5, pc}
   38fc2:	bf00      	nop
   38fc4:	20005b4c 	.word	0x20005b4c
   38fc8:	00055490 	.word	0x00055490
   38fcc:	0005557c 	.word	0x0005557c
   38fd0:	0005512c 	.word	0x0005512c
   38fd4:	000377e1 	.word	0x000377e1
   38fd8:	20005b68 	.word	0x20005b68
   38fdc:	00055588 	.word	0x00055588

00038fe0 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   38fe0:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38fe2:	7804      	ldrb	r4, [r0, #0]
   38fe4:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   38fe8:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38fea:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   38fec:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38ff0:	d01f      	beq.n	39032 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38ff2:	2c01      	cmp	r4, #1
   38ff4:	d009      	beq.n	3900a <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   38ff6:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   38ff8:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   38ffa:	b18c      	cbz	r4, 39020 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   38ffc:	2c06      	cmp	r4, #6
   38ffe:	d00f      	beq.n	39020 <adv_time_get.constprop.0.isra.0+0x40>
   39000:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   39004:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   39008:	e003      	b.n	39012 <adv_time_get.constprop.0.isra.0+0x32>
   3900a:	f44f 6387 	mov.w	r3, #1080	; 0x438
   3900e:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   39012:	fb0c 3302 	mla	r3, ip, r2, r3
   39016:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   3901a:	4018      	ands	r0, r3
}
   3901c:	bc10      	pop	{r4}
   3901e:	4770      	bx	lr
				adv_size += pdu->len;
   39020:	7843      	ldrb	r3, [r0, #1]
   39022:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   39024:	00db      	lsls	r3, r3, #3
   39026:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   3902a:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   3902e:	440b      	add	r3, r1
   39030:	e7ef      	b.n	39012 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   39032:	7840      	ldrb	r0, [r0, #1]
}
   39034:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   39036:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   3903a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   3903e:	3010      	adds	r0, #16
   39040:	005b      	lsls	r3, r3, #1
   39042:	00c1      	lsls	r1, r0, #3
   39044:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   39048:	fb01 0002 	mla	r0, r1, r2, r0
   3904c:	b280      	uxth	r0, r0
}
   3904e:	4770      	bx	lr

00039050 <ticker_cb>:
{
   39050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39054:	461d      	mov	r5, r3
   39056:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   39058:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3905c:	429d      	cmp	r5, r3
{
   3905e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   39062:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   39064:	d018      	beq.n	39098 <ticker_cb+0x48>
	return ++hdr->ref;
   39066:	7823      	ldrb	r3, [r4, #0]
   39068:	3301      	adds	r3, #1
   3906a:	b2db      	uxtb	r3, r3
   3906c:	4607      	mov	r7, r0
   3906e:	4616      	mov	r6, r2
   39070:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   39072:	2b00      	cmp	r3, #0
   39074:	d061      	beq.n	3913a <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   39076:	4938      	ldr	r1, [pc, #224]	; (39158 <ticker_cb+0x108>)
		mfy.param = &p;
   39078:	4b38      	ldr	r3, [pc, #224]	; (3915c <ticker_cb+0x10c>)
		p.lazy = lazy;
   3907a:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   3907c:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39080:	2200      	movs	r2, #0
		p.param = lll;
   39082:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   39084:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   39088:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   3908c:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3908e:	2001      	movs	r0, #1
   39090:	4611      	mov	r1, r2
   39092:	f7fb fad7 	bl	34644 <mayfly_enqueue>
		LL_ASSERT(!ret);
   39096:	b938      	cbnz	r0, 390a8 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   39098:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   3909c:	f010 0501 	ands.w	r5, r0, #1
   390a0:	d014      	beq.n	390cc <ticker_cb+0x7c>
}
   390a2:	b00a      	add	sp, #40	; 0x28
   390a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   390a8:	4a2d      	ldr	r2, [pc, #180]	; (39160 <ticker_cb+0x110>)
   390aa:	492e      	ldr	r1, [pc, #184]	; (39164 <ticker_cb+0x114>)
   390ac:	482e      	ldr	r0, [pc, #184]	; (39168 <ticker_cb+0x118>)
   390ae:	f640 0392 	movw	r3, #2194	; 0x892
   390b2:	f011 f9f8 	bl	4a4a6 <printk>
   390b6:	4040      	eors	r0, r0
   390b8:	f380 8811 	msr	BASEPRI, r0
   390bc:	f04f 0003 	mov.w	r0, #3
   390c0:	df02      	svc	2
	if (!lll->is_hdcd)
   390c2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   390c6:	f010 0501 	ands.w	r5, r0, #1
   390ca:	d1ea      	bne.n	390a2 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   390cc:	2104      	movs	r1, #4
   390ce:	a809      	add	r0, sp, #36	; 0x24
   390d0:	f007 fd1c 	bl	40b0c <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   390d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   390d6:	4a25      	ldr	r2, [pc, #148]	; (3916c <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   390d8:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   390da:	fba2 1203 	umull	r1, r2, r2, r3
   390de:	1a99      	subs	r1, r3, r2
   390e0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   390e4:	0a12      	lsrs	r2, r2, #8
   390e6:	f240 1147 	movw	r1, #327	; 0x147
   390ea:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   390ee:	4a20      	ldr	r2, [pc, #128]	; (39170 <ticker_cb+0x120>)
   390f0:	4920      	ldr	r1, [pc, #128]	; (39174 <ticker_cb+0x124>)
   390f2:	1aa2      	subs	r2, r4, r2
   390f4:	fba1 1202 	umull	r1, r2, r1, r2
   390f8:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   390fa:	491f      	ldr	r1, [pc, #124]	; (39178 <ticker_cb+0x128>)
   390fc:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   390fe:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   39100:	e9cd 5104 	strd	r5, r1, [sp, #16]
   39104:	e9cd 5502 	strd	r5, r5, [sp, #8]
   39108:	e9cd 5500 	strd	r5, r5, [sp]
   3910c:	b2d2      	uxtb	r2, r2
   3910e:	2101      	movs	r1, #1
   39110:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   39112:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   39114:	f7fc fce0 	bl	35ad8 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   39118:	f030 0302 	bics.w	r3, r0, #2
   3911c:	d0c1      	beq.n	390a2 <ticker_cb+0x52>
   3911e:	4a10      	ldr	r2, [pc, #64]	; (39160 <ticker_cb+0x110>)
   39120:	4916      	ldr	r1, [pc, #88]	; (3917c <ticker_cb+0x12c>)
   39122:	4811      	ldr	r0, [pc, #68]	; (39168 <ticker_cb+0x118>)
   39124:	f240 732c 	movw	r3, #1836	; 0x72c
   39128:	f011 f9bd 	bl	4a4a6 <printk>
   3912c:	4040      	eors	r0, r0
   3912e:	f380 8811 	msr	BASEPRI, r0
   39132:	f04f 0003 	mov.w	r0, #3
   39136:	df02      	svc	2
}
   39138:	e7b3      	b.n	390a2 <ticker_cb+0x52>
		LL_ASSERT(ref);
   3913a:	4a09      	ldr	r2, [pc, #36]	; (39160 <ticker_cb+0x110>)
   3913c:	4910      	ldr	r1, [pc, #64]	; (39180 <ticker_cb+0x130>)
   3913e:	480a      	ldr	r0, [pc, #40]	; (39168 <ticker_cb+0x118>)
   39140:	f640 0385 	movw	r3, #2181	; 0x885
   39144:	f011 f9af 	bl	4a4a6 <printk>
   39148:	4040      	eors	r0, r0
   3914a:	f380 8811 	msr	BASEPRI, r0
   3914e:	f04f 0003 	mov.w	r0, #3
   39152:	df02      	svc	2
   39154:	e78f      	b.n	39076 <ticker_cb+0x26>
   39156:	bf00      	nop
   39158:	20005bd0 	.word	0x20005bd0
   3915c:	20000d48 	.word	0x20000d48
   39160:	00055490 	.word	0x00055490
   39164:	00055408 	.word	0x00055408
   39168:	0005512c 	.word	0x0005512c
   3916c:	90d4f121 	.word	0x90d4f121
   39170:	20005b4c 	.word	0x20005b4c
   39174:	88888889 	.word	0x88888889
   39178:	00038d71 	.word	0x00038d71
   3917c:	000554dc 	.word	0x000554dc
   39180:	000555a0 	.word	0x000555a0

00039184 <ll_adv_params_set>:
{
   39184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   39188:	4c6d      	ldr	r4, [pc, #436]	; (39340 <ll_adv_params_set+0x1bc>)
{
   3918a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3918c:	4b6d      	ldr	r3, [pc, #436]	; (39344 <ll_adv_params_set+0x1c0>)
	if (!adv || adv->is_enabled) {
   3918e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   39192:	4680      	mov	r8, r0
   39194:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   39196:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   3919a:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   3919c:	f016 0601 	ands.w	r6, r6, #1
{
   391a0:	4615      	mov	r5, r2
   391a2:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   391a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   391aa:	9000      	str	r0, [sp, #0]
   391ac:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   391b0:	f040 8089 	bne.w	392c6 <ll_adv_params_set+0x142>
	adv->lll.chan_map = chan_map;
   391b4:	f00c 0c07 	and.w	ip, ip, #7
   391b8:	f002 0203 	and.w	r2, r2, #3
   391bc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   391c0:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   391c4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   391c8:	f1be 0f01 	cmp.w	lr, #1
   391cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   391d0:	bf08      	it	eq
   391d2:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   391d6:	ab02      	add	r3, sp, #8
   391d8:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   391dc:	449e      	add	lr, r3
   391de:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   391e2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   391e4:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   391e8:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   391ec:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   391f0:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   391f4:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   391f8:	f029 011f 	bic.w	r1, r9, #31
   391fc:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   39200:	ea4c 0c02 	orr.w	ip, ip, r2
   39204:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   39208:	bf0c      	ite	eq
   3920a:	2201      	moveq	r2, #1
   3920c:	2200      	movne	r2, #0
   3920e:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   39212:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   39216:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   3921a:	f003 030f 	and.w	r3, r3, #15
   3921e:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   39220:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   39224:	d046      	beq.n	392b4 <ll_adv_params_set+0x130>
	adv->own_addr_type = own_addr_type;
   39226:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3922a:	f365 0342 	bfi	r3, r5, #1, #2
   3922e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   39232:	b2da      	uxtb	r2, r3
   39234:	075b      	lsls	r3, r3, #29
   39236:	d508      	bpl.n	3924a <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
   39238:	f367 02c3 	bfi	r2, r7, #3, #1
   3923c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   39240:	4841      	ldr	r0, [pc, #260]	; (39348 <ll_adv_params_set+0x1c4>)
   39242:	990a      	ldr	r1, [sp, #40]	; 0x28
   39244:	2206      	movs	r2, #6
   39246:	f013 fa36 	bl	4c6b6 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3924a:	f898 3000 	ldrb.w	r3, [r8]
   3924e:	f003 020f 	and.w	r2, r3, #15
   39252:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   39254:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   39258:	d03a      	beq.n	392d0 <ll_adv_params_set+0x14c>
	} else if (pdu->len == 0) {
   3925a:	f898 2001 	ldrb.w	r2, [r8, #1]
   3925e:	b1fa      	cbz	r2, 392a0 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   39260:	f1b9 0f01 	cmp.w	r9, #1
   39264:	d04f      	beq.n	39306 <ll_adv_params_set+0x182>
		pdu->tx_addr = own_addr_type & 0x1;
   39266:	f898 3000 	ldrb.w	r3, [r8]
   3926a:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   3926e:	f36f 13c7 	bfc	r3, #7, #1
   39272:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   39276:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
   3927a:	61e4      	str	r4, [r4, #28]
   3927c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   39280:	01ad      	lsls	r5, r5, #6
   39282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   39284:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   39288:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3928a:	f045 0504 	orr.w	r5, r5, #4
   3928e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   39290:	b912      	cbnz	r2, 39298 <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
   39292:	2106      	movs	r1, #6
   39294:	7059      	strb	r1, [r3, #1]
	return 0;
   39296:	4616      	mov	r6, r2
}
   39298:	4630      	mov	r0, r6
   3929a:	b002      	add	sp, #8
   3929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   392a0:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   392a4:	f362 13c7 	bfi	r3, r2, #7, #1
   392a8:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   392ac:	2306      	movs	r3, #6
   392ae:	f888 3001 	strb.w	r3, [r8, #1]
   392b2:	e7e0      	b.n	39276 <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   392b4:	f1b9 0f01 	cmp.w	r9, #1
   392b8:	d0b5      	beq.n	39226 <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
   392ba:	f898 2001 	ldrb.w	r2, [r8, #1]
   392be:	b9b2      	cbnz	r2, 392ee <ll_adv_params_set+0x16a>
			adv->ad_data_backup.len = 0U;
   392c0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   392c4:	e7af      	b.n	39226 <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   392c6:	260c      	movs	r6, #12
}
   392c8:	4630      	mov	r0, r6
   392ca:	b002      	add	sp, #8
   392cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   392d0:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   392d2:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   392d6:	f367 13c7 	bfi	r3, r7, #7, #1
   392da:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   392de:	990a      	ldr	r1, [sp, #40]	; 0x28
   392e0:	2206      	movs	r2, #6
   392e2:	f013 f9e8 	bl	4c6b6 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   392e6:	230c      	movs	r3, #12
   392e8:	f888 3001 	strb.w	r3, [r8, #1]
   392ec:	e7c3      	b.n	39276 <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
   392ee:	2a05      	cmp	r2, #5
   392f0:	d916      	bls.n	39320 <ll_adv_params_set+0x19c>
			adv->ad_data_backup.len = pdu->len -
   392f2:	3a06      	subs	r2, #6
   392f4:	b2d2      	uxtb	r2, r2
   392f6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   392fa:	f108 0108 	add.w	r1, r8, #8
   392fe:	4813      	ldr	r0, [pc, #76]	; (3934c <ll_adv_params_set+0x1c8>)
   39300:	f013 f9d9 	bl	4c6b6 <memcpy>
   39304:	e78f      	b.n	39226 <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   39306:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   3930a:	4910      	ldr	r1, [pc, #64]	; (3934c <ll_adv_params_set+0x1c8>)
   3930c:	f108 0008 	add.w	r0, r8, #8
   39310:	f013 f9d1 	bl	4c6b6 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   39314:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   39318:	3306      	adds	r3, #6
   3931a:	f888 3001 	strb.w	r3, [r8, #1]
   3931e:	e7a2      	b.n	39266 <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
   39320:	4a0b      	ldr	r2, [pc, #44]	; (39350 <ll_adv_params_set+0x1cc>)
   39322:	490c      	ldr	r1, [pc, #48]	; (39354 <ll_adv_params_set+0x1d0>)
   39324:	480c      	ldr	r0, [pc, #48]	; (39358 <ll_adv_params_set+0x1d4>)
   39326:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   3932a:	f011 f8bc 	bl	4a4a6 <printk>
   3932e:	4040      	eors	r0, r0
   39330:	f380 8811 	msr	BASEPRI, r0
   39334:	f04f 0003 	mov.w	r0, #3
   39338:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   3933a:	f898 2001 	ldrb.w	r2, [r8, #1]
   3933e:	e7d8      	b.n	392f2 <ll_adv_params_set+0x16e>
   39340:	20005b4c 	.word	0x20005b4c
   39344:	00052afc 	.word	0x00052afc
   39348:	20005bb7 	.word	0x20005bb7
   3934c:	20005b8d 	.word	0x20005b8d
   39350:	00055490 	.word	0x00055490
   39354:	000555a4 	.word	0x000555a4
   39358:	0005512c 	.word	0x0005512c

0003935c <ull_adv_init>:
{
   3935c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   3935e:	4c06      	ldr	r4, [pc, #24]	; (39378 <ull_adv_init+0x1c>)
   39360:	f104 0028 	add.w	r0, r4, #40	; 0x28
   39364:	f008 f810 	bl	41388 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   39368:	f104 0034 	add.w	r0, r4, #52	; 0x34
   3936c:	f008 f80c 	bl	41388 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   39370:	f7ff fd1a 	bl	38da8 <init_set.constprop.0>
}
   39374:	2000      	movs	r0, #0
   39376:	bd10      	pop	{r4, pc}
   39378:	20005b4c 	.word	0x20005b4c

0003937c <ull_adv_reset>:
{
   3937c:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   3937e:	4b0b      	ldr	r3, [pc, #44]	; (393ac <ull_adv_reset+0x30>)
   39380:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   39384:	07d2      	lsls	r2, r2, #31
   39386:	d50e      	bpl.n	393a6 <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   39388:	6a1a      	ldr	r2, [r3, #32]
   3938a:	b152      	cbz	r2, 393a2 <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   3938c:	f892 1020 	ldrb.w	r1, [r2, #32]
   39390:	f041 0102 	orr.w	r1, r1, #2
   39394:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   39398:	6a1b      	ldr	r3, [r3, #32]
   3939a:	f893 3020 	ldrb.w	r3, [r3, #32]
   3939e:	07db      	lsls	r3, r3, #31
   393a0:	d401      	bmi.n	393a6 <ull_adv_reset+0x2a>
   393a2:	f7ff fd6d 	bl	38e80 <disable.part.0>
}
   393a6:	2000      	movs	r0, #0
   393a8:	bd08      	pop	{r3, pc}
   393aa:	bf00      	nop
   393ac:	20005b4c 	.word	0x20005b4c

000393b0 <ull_adv_reset_finalize>:
{
   393b0:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   393b2:	4c0a      	ldr	r4, [pc, #40]	; (393dc <ull_adv_reset_finalize+0x2c>)
   393b4:	f104 0528 	add.w	r5, r4, #40	; 0x28
   393b8:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   393ba:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   393bc:	f007 fff4 	bl	413a8 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   393c0:	4620      	mov	r0, r4
   393c2:	f007 fff1 	bl	413a8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   393c6:	4628      	mov	r0, r5
   393c8:	f007 ffde 	bl	41388 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   393cc:	4620      	mov	r0, r4
   393ce:	f007 ffdb 	bl	41388 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   393d2:	f7ff fce9 	bl	38da8 <init_set.constprop.0>
}
   393d6:	2000      	movs	r0, #0
   393d8:	bd38      	pop	{r3, r4, r5, pc}
   393da:	bf00      	nop
   393dc:	20005b4c 	.word	0x20005b4c

000393e0 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   393e0:	4a03      	ldr	r2, [pc, #12]	; (393f0 <ull_adv_handle_get+0x10>)
   393e2:	4b04      	ldr	r3, [pc, #16]	; (393f4 <ull_adv_handle_get+0x14>)
   393e4:	1a80      	subs	r0, r0, r2
   393e6:	fba3 3000 	umull	r3, r0, r3, r0
}
   393ea:	f3c0 108f 	ubfx	r0, r0, #6, #16
   393ee:	4770      	bx	lr
   393f0:	20005b4c 	.word	0x20005b4c
   393f4:	88888889 	.word	0x88888889

000393f8 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   393f8:	4a04      	ldr	r2, [pc, #16]	; (3940c <ull_adv_lll_handle_get+0x14>)
   393fa:	6800      	ldr	r0, [r0, #0]
   393fc:	4b04      	ldr	r3, [pc, #16]	; (39410 <ull_adv_lll_handle_get+0x18>)
   393fe:	1a80      	subs	r0, r0, r2
   39400:	fba3 3000 	umull	r3, r0, r3, r0
}
   39404:	f3c0 108f 	ubfx	r0, r0, #6, #16
   39408:	4770      	bx	lr
   3940a:	bf00      	nop
   3940c:	20005b4c 	.word	0x20005b4c
   39410:	88888889 	.word	0x88888889

00039414 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   39414:	b938      	cbnz	r0, 39426 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   39416:	4805      	ldr	r0, [pc, #20]	; (3942c <ull_adv_is_enabled_get+0x18>)
   39418:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   3941c:	f013 0f01 	tst.w	r3, #1
   39420:	bf08      	it	eq
   39422:	2000      	moveq	r0, #0
   39424:	4770      	bx	lr
		return NULL;
   39426:	2000      	movs	r0, #0
}
   39428:	4770      	bx	lr
   3942a:	bf00      	nop
   3942c:	20005b4c 	.word	0x20005b4c

00039430 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   39430:	b928      	cbnz	r0, 3943e <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   39432:	4b04      	ldr	r3, [pc, #16]	; (39444 <ull_adv_is_enabled+0x14>)
   39434:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   39438:	f000 0001 	and.w	r0, r0, #1
   3943c:	4770      	bx	lr
   3943e:	2000      	movs	r0, #0
}
   39440:	4770      	bx	lr
   39442:	bf00      	nop
   39444:	20005b4c 	.word	0x20005b4c

00039448 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   39448:	b950      	cbnz	r0, 39460 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   3944a:	4b06      	ldr	r3, [pc, #24]	; (39464 <ull_adv_filter_pol_get+0x1c>)
   3944c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   39450:	f010 0001 	ands.w	r0, r0, #1
   39454:	d005      	beq.n	39462 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   39456:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   3945a:	f000 0003 	and.w	r0, r0, #3
   3945e:	4770      	bx	lr
		return 0;
   39460:	2000      	movs	r0, #0
}
   39462:	4770      	bx	lr
   39464:	20005b4c 	.word	0x20005b4c

00039468 <ull_adv_pdu_update_addrs>:
{
   39468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3946a:	460c      	mov	r4, r1
   3946c:	4606      	mov	r6, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   3946e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   39472:	f006 fda9 	bl	3ffc8 <ull_filter_adva_get>
			own_id_addr = ll_addr_get(pdu->tx_addr);
   39476:	7823      	ldrb	r3, [r4, #0]
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   39478:	4605      	mov	r5, r0
			own_id_addr = ll_addr_get(pdu->tx_addr);
   3947a:	f3c3 1080 	ubfx	r0, r3, #6, #1
   3947e:	f7fc fc0b 	bl	35c98 <ll_addr_get>
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   39482:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   39484:	4607      	mov	r7, r0
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   39486:	4601      	mov	r1, r0
   39488:	f106 0071 	add.w	r0, r6, #113	; 0x71
   3948c:	f013 f913 	bl	4c6b6 <memcpy>
	if (rpa) {
   39490:	b185      	cbz	r5, 394b4 <ull_adv_pdu_update_addrs+0x4c>
		pdu->tx_addr = 1;
   39492:	7823      	ldrb	r3, [r4, #0]
   39494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   39498:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   3949a:	1ca7      	adds	r7, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   3949c:	2206      	movs	r2, #6
   3949e:	4629      	mov	r1, r5
   394a0:	4638      	mov	r0, r7
   394a2:	f013 f908 	bl	4c6b6 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   394a6:	7823      	ldrb	r3, [r4, #0]
   394a8:	f003 030f 	and.w	r3, r3, #15
   394ac:	2b01      	cmp	r3, #1
   394ae:	d003      	beq.n	394b8 <ull_adv_pdu_update_addrs+0x50>
}
   394b0:	4638      	mov	r0, r7
   394b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_addr = own_id_addr;
   394b4:	463d      	mov	r5, r7
   394b6:	e7f0      	b.n	3949a <ull_adv_pdu_update_addrs+0x32>
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   394b8:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
   394bc:	f006 fdb2 	bl	40024 <ull_filter_tgta_get>
	if (rx_addr) {
   394c0:	4601      	mov	r1, r0
   394c2:	2800      	cmp	r0, #0
   394c4:	d0f4      	beq.n	394b0 <ull_adv_pdu_update_addrs+0x48>
		pdu->rx_addr = 1;
   394c6:	7823      	ldrb	r3, [r4, #0]
   394c8:	4620      	mov	r0, r4
   394ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   394ce:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   394d2:	2206      	movs	r2, #6
   394d4:	f013 f8ef 	bl	4c6b6 <memcpy>
}
   394d8:	4638      	mov	r0, r7
   394da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000394dc <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   394dc:	291f      	cmp	r1, #31
   394de:	d849      	bhi.n	39574 <ull_adv_data_set+0x98>
{
   394e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   394e2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   394e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   394ea:	b083      	sub	sp, #12
   394ec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   394ee:	7833      	ldrb	r3, [r6, #0]
   394f0:	f003 030f 	and.w	r3, r3, #15
   394f4:	2b01      	cmp	r3, #1
   394f6:	460d      	mov	r5, r1
   394f8:	4604      	mov	r4, r0
   394fa:	4617      	mov	r7, r2
   394fc:	d03c      	beq.n	39578 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   394fe:	f10d 0107 	add.w	r1, sp, #7
   39502:	3028      	adds	r0, #40	; 0x28
   39504:	f007 ffd0 	bl	414a8 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   39508:	4631      	mov	r1, r6
   3950a:	4606      	mov	r6, r0
   3950c:	f811 2b02 	ldrb.w	r2, [r1], #2
   39510:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   39514:	f3c2 0303 	ubfx	r3, r2, #0, #4
   39518:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   3951c:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   39520:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   39524:	f002 0280 	and.w	r2, r2, #128	; 0x80
   39528:	4630      	mov	r0, r6
   3952a:	4313      	orrs	r3, r2
   3952c:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   39530:	2206      	movs	r2, #6
   39532:	f013 f8c0 	bl	4c6b6 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   39536:	462a      	mov	r2, r5
   39538:	4639      	mov	r1, r7
   3953a:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   3953e:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   39540:	f013 f8b9 	bl	4c6b6 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   39544:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   39546:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3954a:	07db      	lsls	r3, r3, #31
   3954c:	d406      	bmi.n	3955c <ull_adv_data_set+0x80>
	pdu->last = idx;
   3954e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   39552:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   39556:	2000      	movs	r0, #0
}
   39558:	b003      	add	sp, #12
   3955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3955c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   39560:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   39564:	4631      	mov	r1, r6
   39566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   39568:	4620      	mov	r0, r4
   3956a:	f7ed fbf5 	bl	26d58 <ull_adv_time_update>
		if (err) {
   3956e:	2800      	cmp	r0, #0
   39570:	d0ed      	beq.n	3954e <ull_adv_data_set+0x72>
   39572:	e7f1      	b.n	39558 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   39574:	2012      	movs	r0, #18
}
   39576:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   39578:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   3957c:	460a      	mov	r2, r1
   3957e:	3041      	adds	r0, #65	; 0x41
   39580:	4639      	mov	r1, r7
   39582:	f013 f898 	bl	4c6b6 <memcpy>
		return 0;
   39586:	2000      	movs	r0, #0
}
   39588:	b003      	add	sp, #12
   3958a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003958c <ll_adv_data_set>:
{
   3958c:	4603      	mov	r3, r0
   3958e:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   39590:	4801      	ldr	r0, [pc, #4]	; (39598 <ll_adv_data_set+0xc>)
   39592:	4619      	mov	r1, r3
   39594:	f7ff bfa2 	b.w	394dc <ull_adv_data_set>
   39598:	20005b4c 	.word	0x20005b4c

0003959c <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   3959c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3959e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   395a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   395a6:	b083      	sub	sp, #12
   395a8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   395aa:	460e      	mov	r6, r1
   395ac:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   395ae:	f10d 0107 	add.w	r1, sp, #7
   395b2:	3034      	adds	r0, #52	; 0x34
   395b4:	4617      	mov	r7, r2
   395b6:	f007 ff77 	bl	414a8 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   395ba:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   395bc:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   395be:	f811 3b02 	ldrb.w	r3, [r1], #2
   395c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   395c6:	019b      	lsls	r3, r3, #6
   395c8:	f043 0304 	orr.w	r3, r3, #4
   395cc:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   395ce:	1db3      	adds	r3, r6, #6
   395d0:	7043      	strb	r3, [r0, #1]
   395d2:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   395d4:	3002      	adds	r0, #2
   395d6:	f013 f86e 	bl	4c6b6 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   395da:	4632      	mov	r2, r6
   395dc:	4639      	mov	r1, r7
   395de:	f105 0008 	add.w	r0, r5, #8
   395e2:	f013 f868 	bl	4c6b6 <memcpy>
	if (adv->is_enabled) {
   395e6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   395ea:	07db      	lsls	r3, r3, #31
   395ec:	d50a      	bpl.n	39604 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   395ee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   395f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   395f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   395f8:	780b      	ldrb	r3, [r1, #0]
   395fa:	f013 030f 	ands.w	r3, r3, #15
   395fe:	d008      	beq.n	39612 <ull_scan_rsp_set.part.0+0x76>
   39600:	2b06      	cmp	r3, #6
   39602:	d006      	beq.n	39612 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
   39604:	f89d 3007 	ldrb.w	r3, [sp, #7]
   39608:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   3960c:	2000      	movs	r0, #0
}
   3960e:	b003      	add	sp, #12
   39610:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   39612:	462a      	mov	r2, r5
   39614:	4620      	mov	r0, r4
   39616:	f7ed fb9f 	bl	26d58 <ull_adv_time_update>
			if (err) {
   3961a:	2800      	cmp	r0, #0
   3961c:	d0f2      	beq.n	39604 <ull_scan_rsp_set.part.0+0x68>
   3961e:	e7f6      	b.n	3960e <ull_scan_rsp_set.part.0+0x72>

00039620 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   39620:	281f      	cmp	r0, #31
{
   39622:	4603      	mov	r3, r0
   39624:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   39626:	d803      	bhi.n	39630 <ll_adv_scan_rsp_set+0x10>
   39628:	4802      	ldr	r0, [pc, #8]	; (39634 <ll_adv_scan_rsp_set+0x14>)
   3962a:	4619      	mov	r1, r3
   3962c:	f7ff bfb6 	b.w	3959c <ull_scan_rsp_set.part.0>
}
   39630:	2012      	movs	r0, #18
   39632:	4770      	bx	lr
   39634:	20005b4c 	.word	0x20005b4c

00039638 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   39638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3963c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   3963e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   39642:	4625      	mov	r5, r4
{
   39644:	4680      	mov	r8, r0
   39646:	f815 1b1c 	ldrb.w	r1, [r5], #28
   3964a:	3101      	adds	r1, #1
   3964c:	b2c9      	uxtb	r1, r1
   3964e:	4617      	mov	r7, r2
   39650:	461e      	mov	r6, r3
   39652:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   39654:	b181      	cbz	r1, 39678 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   39656:	4c17      	ldr	r4, [pc, #92]	; (396b4 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   39658:	4b17      	ldr	r3, [pc, #92]	; (396b8 <ticker_cb+0x80>)
	p.lazy = lazy;
   3965a:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3965c:	2200      	movs	r2, #0
   3965e:	4611      	mov	r1, r2
   39660:	2001      	movs	r0, #1
	p.remainder = remainder;
   39662:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   39666:	60e5      	str	r5, [r4, #12]
	p.force = force;
   39668:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   3966c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3966e:	f7fa ffe9 	bl	34644 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   39672:	b978      	cbnz	r0, 39694 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   39674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   39678:	4a10      	ldr	r2, [pc, #64]	; (396bc <ticker_cb+0x84>)
   3967a:	4911      	ldr	r1, [pc, #68]	; (396c0 <ticker_cb+0x88>)
   3967c:	4811      	ldr	r0, [pc, #68]	; (396c4 <ticker_cb+0x8c>)
   3967e:	f240 23db 	movw	r3, #731	; 0x2db
   39682:	f010 ff10 	bl	4a4a6 <printk>
   39686:	4040      	eors	r0, r0
   39688:	f380 8811 	msr	BASEPRI, r0
   3968c:	f04f 0003 	mov.w	r0, #3
   39690:	df02      	svc	2
   39692:	e7e0      	b.n	39656 <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   39694:	4a09      	ldr	r2, [pc, #36]	; (396bc <ticker_cb+0x84>)
   39696:	490c      	ldr	r1, [pc, #48]	; (396c8 <ticker_cb+0x90>)
   39698:	480a      	ldr	r0, [pc, #40]	; (396c4 <ticker_cb+0x8c>)
   3969a:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   3969e:	f010 ff02 	bl	4a4a6 <printk>
   396a2:	4040      	eors	r0, r0
   396a4:	f380 8811 	msr	BASEPRI, r0
   396a8:	f04f 0003 	mov.w	r0, #3
   396ac:	df02      	svc	2
}
   396ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   396b2:	bf00      	nop
   396b4:	20005c30 	.word	0x20005c30
   396b8:	20000d78 	.word	0x20000d78
   396bc:	000555e4 	.word	0x000555e4
   396c0:	000555a0 	.word	0x000555a0
   396c4:	0005512c 	.word	0x0005512c
   396c8:	00055408 	.word	0x00055408

000396cc <ull_scan_init>:
}
   396cc:	2000      	movs	r0, #0
   396ce:	4770      	bx	lr

000396d0 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   396d0:	3004      	adds	r0, #4
{
   396d2:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   396d4:	f101 021c 	add.w	r2, r1, #28
   396d8:	b2c0      	uxtb	r0, r0
   396da:	f7fe fead 	bl	38438 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   396de:	b110      	cbz	r0, 396e6 <ull_scan_disable+0x16>
   396e0:	3078      	adds	r0, #120	; 0x78
   396e2:	d101      	bne.n	396e8 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   396e4:	200c      	movs	r0, #12
}
   396e6:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   396e8:	4a07      	ldr	r2, [pc, #28]	; (39708 <ull_scan_disable+0x38>)
   396ea:	4908      	ldr	r1, [pc, #32]	; (3970c <ull_scan_disable+0x3c>)
   396ec:	4808      	ldr	r0, [pc, #32]	; (39710 <ull_scan_disable+0x40>)
   396ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   396f2:	f010 fed8 	bl	4a4a6 <printk>
   396f6:	4040      	eors	r0, r0
   396f8:	f380 8811 	msr	BASEPRI, r0
   396fc:	f04f 0003 	mov.w	r0, #3
   39700:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   39702:	200c      	movs	r0, #12
}
   39704:	bd08      	pop	{r3, pc}
   39706:	bf00      	nop
   39708:	000555e4 	.word	0x000555e4
   3970c:	00055624 	.word	0x00055624
   39710:	0005512c 	.word	0x0005512c

00039714 <ll_scan_enable>:
{
   39714:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   39716:	4c2c      	ldr	r4, [pc, #176]	; (397c8 <ll_scan_enable+0xb4>)
   39718:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   3971c:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   39720:	b358      	cbz	r0, 3977a <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   39722:	bb5a      	cbnz	r2, 3977c <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   39724:	079a      	lsls	r2, r3, #30
   39726:	f3c3 0541 	ubfx	r5, r3, #1, #2
   3972a:	d50b      	bpl.n	39744 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   3972c:	2001      	movs	r0, #1
   3972e:	f7fc fab3 	bl	35c98 <ll_addr_get>
   39732:	2106      	movs	r1, #6
   39734:	f7fa fef8 	bl	34528 <mem_nz>
   39738:	2800      	cmp	r0, #0
   3973a:	d042      	beq.n	397c2 <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
   3973c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   39740:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   39744:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   39748:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   3974c:	f006 fb0c 	bl	3fd68 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   39750:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   39754:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   39758:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   3975c:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   3975e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   39762:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   39764:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   39768:	d502      	bpl.n	39770 <ll_scan_enable+0x5c>
   3976a:	3d02      	subs	r5, #2
   3976c:	2d01      	cmp	r5, #1
   3976e:	d91e      	bls.n	397ae <ll_scan_enable+0x9a>
}
   39770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   39774:	4814      	ldr	r0, [pc, #80]	; (397c8 <ll_scan_enable+0xb4>)
   39776:	f7ed bbab 	b.w	26ed0 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   3977a:	b912      	cbnz	r2, 39782 <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   3977c:	250c      	movs	r5, #12
}
   3977e:	4628      	mov	r0, r5
   39780:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   39782:	6a23      	ldr	r3, [r4, #32]
   39784:	2b00      	cmp	r3, #0
   39786:	d1f9      	bne.n	3977c <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   39788:	4621      	mov	r1, r4
   3978a:	f7ff ffa1 	bl	396d0 <ull_scan_disable>
	if (ret) {
   3978e:	4605      	mov	r5, r0
   39790:	2800      	cmp	r0, #0
   39792:	d1f4      	bne.n	3977e <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   39794:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   39798:	f360 0300 	bfi	r3, r0, #0, #1
   3979c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   397a0:	f7ff fe38 	bl	39414 <ull_adv_is_enabled_get>
   397a4:	2800      	cmp	r0, #0
   397a6:	d1ea      	bne.n	3977e <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   397a8:	f006 fa9e 	bl	3fce8 <ull_filter_adv_scan_state_cb>
   397ac:	e7e7      	b.n	3977e <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   397ae:	2000      	movs	r0, #0
   397b0:	f006 fafe 	bl	3fdb0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   397b4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   397b8:	f043 0302 	orr.w	r3, r3, #2
   397bc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   397c0:	e7d6      	b.n	39770 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   397c2:	2512      	movs	r5, #18
   397c4:	e7db      	b.n	3977e <ll_scan_enable+0x6a>
   397c6:	bf00      	nop
   397c8:	20005be8 	.word	0x20005be8

000397cc <ull_scan_reset>:
{
   397cc:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   397ce:	4c0d      	ldr	r4, [pc, #52]	; (39804 <ull_scan_reset+0x38>)
   397d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   397d4:	07db      	lsls	r3, r3, #31
   397d6:	d501      	bpl.n	397dc <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   397d8:	6a20      	ldr	r0, [r4, #32]
   397da:	b108      	cbz	r0, 397e0 <ull_scan_reset+0x14>
}
   397dc:	2000      	movs	r0, #0
   397de:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   397e0:	4621      	mov	r1, r4
   397e2:	f7ff ff75 	bl	396d0 <ull_scan_disable>
	if (ret) {
   397e6:	2800      	cmp	r0, #0
   397e8:	d1f8      	bne.n	397dc <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   397ea:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   397ee:	f360 0200 	bfi	r2, r0, #0, #1
   397f2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   397f6:	f7ff fe0d 	bl	39414 <ull_adv_is_enabled_get>
   397fa:	2800      	cmp	r0, #0
   397fc:	d1ee      	bne.n	397dc <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
   397fe:	f006 fa73 	bl	3fce8 <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   39802:	e7eb      	b.n	397dc <ull_scan_reset+0x10>
   39804:	20005be8 	.word	0x20005be8

00039808 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39808:	4a03      	ldr	r2, [pc, #12]	; (39818 <ull_scan_handle_get+0x10>)
   3980a:	4b04      	ldr	r3, [pc, #16]	; (3981c <ull_scan_handle_get+0x14>)
   3980c:	1a80      	subs	r0, r0, r2
   3980e:	fba3 3000 	umull	r3, r0, r3, r0
}
   39812:	f3c0 1007 	ubfx	r0, r0, #4, #8
   39816:	4770      	bx	lr
   39818:	20005be8 	.word	0x20005be8
   3981c:	38e38e39 	.word	0x38e38e39

00039820 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39820:	4a04      	ldr	r2, [pc, #16]	; (39834 <ull_scan_lll_handle_get+0x14>)
   39822:	6800      	ldr	r0, [r0, #0]
   39824:	4b04      	ldr	r3, [pc, #16]	; (39838 <ull_scan_lll_handle_get+0x18>)
   39826:	1a80      	subs	r0, r0, r2
   39828:	fba3 3000 	umull	r3, r0, r3, r0
}
   3982c:	f3c0 1007 	ubfx	r0, r0, #4, #8
   39830:	4770      	bx	lr
   39832:	bf00      	nop
   39834:	20005be8 	.word	0x20005be8
   39838:	38e38e39 	.word	0x38e38e39

0003983c <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   3983c:	b938      	cbnz	r0, 3984e <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   3983e:	4805      	ldr	r0, [pc, #20]	; (39854 <ull_scan_is_enabled_get+0x18>)
   39840:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   39844:	f013 0f01 	tst.w	r3, #1
   39848:	bf08      	it	eq
   3984a:	2000      	moveq	r0, #0
   3984c:	4770      	bx	lr
		return NULL;
   3984e:	2000      	movs	r0, #0
}
   39850:	4770      	bx	lr
   39852:	bf00      	nop
   39854:	20005be8 	.word	0x20005be8

00039858 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   39858:	4a04      	ldr	r2, [pc, #16]	; (3986c <ull_scan_is_disabled_get+0x14>)
   3985a:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   3985e:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   39862:	4303      	orrs	r3, r0
}
   39864:	bf0c      	ite	eq
   39866:	4610      	moveq	r0, r2
   39868:	2000      	movne	r0, #0
   3986a:	4770      	bx	lr
   3986c:	20005be8 	.word	0x20005be8

00039870 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   39870:	b990      	cbnz	r0, 39898 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   39872:	4a0a      	ldr	r2, [pc, #40]	; (3989c <ull_scan_is_enabled+0x2c>)
   39874:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   39878:	f013 0001 	ands.w	r0, r3, #1
   3987c:	d00d      	beq.n	3989a <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   3987e:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   39882:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   39884:	f003 0301 	and.w	r3, r3, #1
   39888:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3988c:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   39890:	b11a      	cbz	r2, 3989a <ull_scan_is_enabled+0x2a>
   39892:	f040 0004 	orr.w	r0, r0, #4
   39896:	4770      	bx	lr
		return 0U;
   39898:	2000      	movs	r0, #0
}
   3989a:	4770      	bx	lr
   3989c:	20005be8 	.word	0x20005be8

000398a0 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   398a0:	b950      	cbnz	r0, 398b8 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   398a2:	4b06      	ldr	r3, [pc, #24]	; (398bc <ull_scan_filter_pol_get+0x1c>)
   398a4:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   398a8:	f010 0001 	ands.w	r0, r0, #1
   398ac:	d005      	beq.n	398ba <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   398ae:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   398b2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   398b6:	4770      	bx	lr
		return 0;
   398b8:	2000      	movs	r0, #0
}
   398ba:	4770      	bx	lr
   398bc:	20005be8 	.word	0x20005be8

000398c0 <init_reset>:
{
   398c0:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   398c2:	4b15      	ldr	r3, [pc, #84]	; (39918 <init_reset+0x58>)
   398c4:	4815      	ldr	r0, [pc, #84]	; (3991c <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   398c6:	4c16      	ldr	r4, [pc, #88]	; (39920 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   398c8:	2206      	movs	r2, #6
   398ca:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   398ce:	f7fa fdb1 	bl	34434 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   398d2:	4b14      	ldr	r3, [pc, #80]	; (39924 <init_reset+0x64>)
   398d4:	2203      	movs	r2, #3
   398d6:	1d18      	adds	r0, r3, #4
   398d8:	2124      	movs	r1, #36	; 0x24
   398da:	f7fa fdab 	bl	34434 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   398de:	4b12      	ldr	r3, [pc, #72]	; (39928 <init_reset+0x68>)
   398e0:	2218      	movs	r2, #24
   398e2:	1d18      	adds	r0, r3, #4
   398e4:	212c      	movs	r1, #44	; 0x2c
   398e6:	f7fa fda5 	bl	34434 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   398ea:	4b10      	ldr	r3, [pc, #64]	; (3992c <init_reset+0x6c>)
   398ec:	221b      	movs	r2, #27
   398ee:	1d18      	adds	r0, r3, #4
   398f0:	2108      	movs	r1, #8
   398f2:	f7fa fd9f 	bl	34434 <mem_init>
	default_phy_tx |= PHY_2M;
   398f6:	490e      	ldr	r1, [pc, #56]	; (39930 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   398f8:	4a0e      	ldr	r2, [pc, #56]	; (39934 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   398fa:	480f      	ldr	r0, [pc, #60]	; (39938 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   398fc:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   398fe:	f04f 0c1b 	mov.w	ip, #27
   39902:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   39906:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   39908:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   3990c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3990e:	f8a0 c000 	strh.w	ip, [r0]
}
   39912:	2000      	movs	r0, #0
   39914:	bd10      	pop	{r4, pc}
   39916:	bf00      	nop
   39918:	20005c40 	.word	0x20005c40
   3991c:	20003578 	.word	0x20003578
   39920:	20007614 	.word	0x20007614
   39924:	20005c68 	.word	0x20005c68
   39928:	20005cd8 	.word	0x20005cd8
   3992c:	200060fc 	.word	0x200060fc
   39930:	2000778b 	.word	0x2000778b
   39934:	2000778a 	.word	0x2000778a
   39938:	20007616 	.word	0x20007616

0003993c <ctrl_tx_pause_enqueue>:
{
   3993c:	b538      	push	{r3, r4, r5, lr}
   3993e:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   39940:	e9d0 3075 	ldrd	r3, r0, [r0, #468]	; 0x1d4
{
   39944:	460d      	mov	r5, r1
	if (
   39946:	b11b      	cbz	r3, 39950 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   39948:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3994c:	0789      	lsls	r1, r1, #30
   3994e:	d50c      	bpl.n	3996a <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   39950:	b340      	cbz	r0, 399a4 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   39952:	2a00      	cmp	r2, #0
   39954:	d130      	bne.n	399b8 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   39956:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3995a:	681a      	ldr	r2, [r3, #0]
   3995c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   3995e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   39960:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   39962:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39966:	b1d3      	cbz	r3, 3999e <ctrl_tx_pause_enqueue+0x62>
}
   39968:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   3996a:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3996e:	07c9      	lsls	r1, r1, #31
   39970:	d4ee      	bmi.n	39950 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   39972:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   39976:	428b      	cmp	r3, r1
   39978:	d02c      	beq.n	399d4 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   3997a:	2800      	cmp	r0, #0
   3997c:	d036      	beq.n	399ec <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   3997e:	2a00      	cmp	r2, #0
   39980:	d0e9      	beq.n	39956 <ctrl_tx_pause_enqueue+0x1a>
   39982:	4a22      	ldr	r2, [pc, #136]	; (39a0c <ctrl_tx_pause_enqueue+0xd0>)
   39984:	4922      	ldr	r1, [pc, #136]	; (39a10 <ctrl_tx_pause_enqueue+0xd4>)
   39986:	4823      	ldr	r0, [pc, #140]	; (39a14 <ctrl_tx_pause_enqueue+0xd8>)
   39988:	f640 236e 	movw	r3, #2670	; 0xa6e
   3998c:	f010 fd8b 	bl	4a4a6 <printk>
   39990:	4040      	eors	r0, r0
   39992:	f380 8811 	msr	BASEPRI, r0
   39996:	f04f 0003 	mov.w	r0, #3
   3999a:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   3999c:	e7db      	b.n	39956 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   3999e:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
}
   399a2:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   399a4:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   399a6:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
			if (!pause) {
   399aa:	2a00      	cmp	r2, #0
   399ac:	d1db      	bne.n	39966 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   399ae:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
	if (!tx->next) {
   399b2:	2b00      	cmp	r3, #0
   399b4:	d1d8      	bne.n	39968 <ctrl_tx_pause_enqueue+0x2c>
   399b6:	e7f2      	b.n	3999e <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   399b8:	4a14      	ldr	r2, [pc, #80]	; (39a0c <ctrl_tx_pause_enqueue+0xd0>)
   399ba:	4915      	ldr	r1, [pc, #84]	; (39a10 <ctrl_tx_pause_enqueue+0xd4>)
   399bc:	4815      	ldr	r0, [pc, #84]	; (39a14 <ctrl_tx_pause_enqueue+0xd8>)
   399be:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   399c2:	f010 fd70 	bl	4a4a6 <printk>
   399c6:	4040      	eors	r0, r0
   399c8:	f380 8811 	msr	BASEPRI, r0
   399cc:	f04f 0003 	mov.w	r0, #3
   399d0:	df02      	svc	2
   399d2:	e7c0      	b.n	39956 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   399d4:	6819      	ldr	r1, [r3, #0]
   399d6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   399da:	2800      	cmp	r0, #0
   399dc:	d1cf      	bne.n	3997e <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   399de:	6819      	ldr	r1, [r3, #0]
   399e0:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   399e2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   399e4:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   399e6:	2a00      	cmp	r2, #0
   399e8:	d0e1      	beq.n	399ae <ctrl_tx_pause_enqueue+0x72>
   399ea:	e7bc      	b.n	39966 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   399ec:	7919      	ldrb	r1, [r3, #4]
   399ee:	f001 0103 	and.w	r1, r1, #3
   399f2:	2903      	cmp	r1, #3
   399f4:	d004      	beq.n	39a00 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   399f6:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
			LL_ASSERT(!pause);
   399fa:	2a00      	cmp	r2, #0
   399fc:	d0ab      	beq.n	39956 <ctrl_tx_pause_enqueue+0x1a>
   399fe:	e7c0      	b.n	39982 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   39a00:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39a02:	2903      	cmp	r1, #3
   39a04:	d0eb      	beq.n	399de <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39a06:	290a      	cmp	r1, #10
   39a08:	d1f5      	bne.n	399f6 <ctrl_tx_pause_enqueue+0xba>
   39a0a:	e7e8      	b.n	399de <ctrl_tx_pause_enqueue+0xa2>
   39a0c:	0005563c 	.word	0x0005563c
   39a10:	0005567c 	.word	0x0005567c
   39a14:	0005512c 	.word	0x0005512c

00039a18 <tx_lll_flush>:
{
   39a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   39a1c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39a20:	4934      	ldr	r1, [pc, #208]	; (39af4 <tx_lll_flush+0xdc>)
{
   39a22:	b083      	sub	sp, #12
   39a24:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39a26:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   39a2a:	4640      	mov	r0, r8
   39a2c:	f7fa fd68 	bl	34500 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   39a30:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   39a34:	4629      	mov	r1, r5
   39a36:	f008 fd4b 	bl	424d0 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   39a3a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   39a3c:	aa01      	add	r2, sp, #4
   39a3e:	4631      	mov	r1, r6
   39a40:	f7fa fd9e 	bl	34580 <memq_dequeue>
	while (link) {
   39a44:	b328      	cbz	r0, 39a92 <tx_lll_flush+0x7a>
   39a46:	4c2c      	ldr	r4, [pc, #176]	; (39af8 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   39a48:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   39a4c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   39a50:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   39a52:	f894 c001 	ldrb.w	ip, [r4, #1]
   39a56:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   39a58:	1c53      	adds	r3, r2, #1
   39a5a:	b2db      	uxtb	r3, r3
		last = 0U;
   39a5c:	459c      	cmp	ip, r3
   39a5e:	bf08      	it	eq
   39a60:	2300      	moveq	r3, #0
	if (last == first) {
   39a62:	4299      	cmp	r1, r3
   39a64:	f894 c000 	ldrb.w	ip, [r4]
   39a68:	d033      	beq.n	39ad2 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   39a6a:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   39a6c:	fb12 f20c 	smulbb	r2, r2, ip
   39a70:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   39a74:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   39a78:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   39a7a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   39a7e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   39a80:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   39a82:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   39a84:	70e3      	strb	r3, [r4, #3]
   39a86:	aa01      	add	r2, sp, #4
   39a88:	4631      	mov	r1, r6
   39a8a:	f7fa fd79 	bl	34580 <memq_dequeue>
	while (link) {
   39a8e:	2800      	cmp	r0, #0
   39a90:	d1de      	bne.n	39a50 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   39a92:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
	rx = (void *)&conn->llcp_terminate.node_rx;
   39a96:	f508 74aa 	add.w	r4, r8, #340	; 0x154
	LL_ASSERT(rx->hdr.link);
   39a9a:	b150      	cbz	r0, 39ab2 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   39a9c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   39a9e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   39aa0:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
	ull_rx_put(link, rx);
   39aa4:	f7fe fd42 	bl	3852c <ull_rx_put>
	ull_rx_sched();
   39aa8:	f7fe fd50 	bl	3854c <ull_rx_sched>
}
   39aac:	b003      	add	sp, #12
   39aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   39ab2:	4a12      	ldr	r2, [pc, #72]	; (39afc <tx_lll_flush+0xe4>)
   39ab4:	4912      	ldr	r1, [pc, #72]	; (39b00 <tx_lll_flush+0xe8>)
   39ab6:	4813      	ldr	r0, [pc, #76]	; (39b04 <tx_lll_flush+0xec>)
   39ab8:	f640 13da 	movw	r3, #2522	; 0x9da
   39abc:	f010 fcf3 	bl	4a4a6 <printk>
   39ac0:	4040      	eors	r0, r0
   39ac2:	f380 8811 	msr	BASEPRI, r0
   39ac6:	f04f 0003 	mov.w	r0, #3
   39aca:	df02      	svc	2
	link = rx->hdr.link;
   39acc:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
   39ad0:	e7e4      	b.n	39a9c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   39ad2:	4a0a      	ldr	r2, [pc, #40]	; (39afc <tx_lll_flush+0xe4>)
   39ad4:	490c      	ldr	r1, [pc, #48]	; (39b08 <tx_lll_flush+0xf0>)
   39ad6:	480b      	ldr	r0, [pc, #44]	; (39b04 <tx_lll_flush+0xec>)
   39ad8:	f640 13c6 	movw	r3, #2502	; 0x9c6
   39adc:	f010 fce3 	bl	4a4a6 <printk>
   39ae0:	4040      	eors	r0, r0
   39ae2:	f380 8811 	msr	BASEPRI, r0
   39ae6:	f04f 0003 	mov.w	r0, #3
   39aea:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   39aec:	2300      	movs	r3, #0
   39aee:	801b      	strh	r3, [r3, #0]
   39af0:	deff      	udf	#255	; 0xff
   39af2:	bf00      	nop
   39af4:	20003578 	.word	0x20003578
   39af8:	20000d88 	.word	0x20000d88
   39afc:	0005563c 	.word	0x0005563c
   39b00:	0005568c 	.word	0x0005568c
   39b04:	0005512c 	.word	0x0005512c
   39b08:	00055684 	.word	0x00055684

00039b0c <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   39b0c:	f890 2176 	ldrb.w	r2, [r0, #374]	; 0x176
   39b10:	f012 0202 	ands.w	r2, r2, #2
   39b14:	d00a      	beq.n	39b2c <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   39b16:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
   39b1a:	b1d3      	cbz	r3, 39b52 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   39b1c:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
   39b20:	681a      	ldr	r2, [r3, #0]
   39b22:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   39b24:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   39b26:	680b      	ldr	r3, [r1, #0]
   39b28:	b1d3      	cbz	r3, 39b60 <ctrl_tx_sec_enqueue+0x54>
   39b2a:	4770      	bx	lr
		if (conn->tx_head) {
   39b2c:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   39b30:	b1cb      	cbz	r3, 39b66 <ctrl_tx_sec_enqueue+0x5a>
{
   39b32:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   39b34:	f890 c0f1 	ldrb.w	ip, [r0, #241]	; 0xf1
   39b38:	f890 e0f0 	ldrb.w	lr, [r0, #240]	; 0xf0
   39b3c:	45e6      	cmp	lr, ip
   39b3e:	d004      	beq.n	39b4a <ctrl_tx_sec_enqueue+0x3e>
   39b40:	f890 c0f2 	ldrb.w	ip, [r0, #242]	; 0xf2
   39b44:	f1bc 0f03 	cmp.w	ip, #3
   39b48:	d010      	beq.n	39b6c <ctrl_tx_sec_enqueue+0x60>
}
   39b4a:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   39b4e:	f7ff bef5 	b.w	3993c <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   39b52:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   39b56:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   39b58:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
		if (!tx->next) {
   39b5c:	2b00      	cmp	r3, #0
   39b5e:	d1e4      	bne.n	39b2a <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   39b60:	f8c0 11e4 	str.w	r1, [r0, #484]	; 0x1e4
   39b64:	4770      	bx	lr
	bool pause = false;
   39b66:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   39b68:	f7ff bee8 	b.w	3993c <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   39b6c:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   39b70:	f00c 0c03 	and.w	ip, ip, #3
   39b74:	f1bc 0f03 	cmp.w	ip, #3
   39b78:	d1e7      	bne.n	39b4a <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   39b7a:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   39b7c:	2a03      	cmp	r2, #3
   39b7e:	d005      	beq.n	39b8c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   39b80:	f1a2 020a 	sub.w	r2, r2, #10
   39b84:	fab2 f282 	clz	r2, r2
   39b88:	0952      	lsrs	r2, r2, #5
   39b8a:	e7de      	b.n	39b4a <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   39b8c:	2201      	movs	r2, #1
   39b8e:	e7dc      	b.n	39b4a <ctrl_tx_sec_enqueue+0x3e>

00039b90 <ticker_stop_op_cb>:
{
   39b90:	b510      	push	{r4, lr}
   39b92:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39b94:	b9b0      	cbnz	r0, 39bc4 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   39b96:	4b12      	ldr	r3, [pc, #72]	; (39be0 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   39b98:	2200      	movs	r2, #0
   39b9a:	2101      	movs	r1, #1
   39b9c:	2002      	movs	r0, #2
	mfy.param = param;
   39b9e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   39ba0:	f7fa fd50 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!ret);
   39ba4:	b900      	cbnz	r0, 39ba8 <ticker_stop_op_cb+0x18>
}
   39ba6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   39ba8:	4a0e      	ldr	r2, [pc, #56]	; (39be4 <ticker_stop_op_cb+0x54>)
   39baa:	490f      	ldr	r1, [pc, #60]	; (39be8 <ticker_stop_op_cb+0x58>)
   39bac:	480f      	ldr	r0, [pc, #60]	; (39bec <ticker_stop_op_cb+0x5c>)
   39bae:	f44f 6318 	mov.w	r3, #2432	; 0x980
   39bb2:	f010 fc78 	bl	4a4a6 <printk>
   39bb6:	4040      	eors	r0, r0
   39bb8:	f380 8811 	msr	BASEPRI, r0
   39bbc:	f04f 0003 	mov.w	r0, #3
   39bc0:	df02      	svc	2
}
   39bc2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39bc4:	4a07      	ldr	r2, [pc, #28]	; (39be4 <ticker_stop_op_cb+0x54>)
   39bc6:	490a      	ldr	r1, [pc, #40]	; (39bf0 <ticker_stop_op_cb+0x60>)
   39bc8:	4808      	ldr	r0, [pc, #32]	; (39bec <ticker_stop_op_cb+0x5c>)
   39bca:	f640 137a 	movw	r3, #2426	; 0x97a
   39bce:	f010 fc6a 	bl	4a4a6 <printk>
   39bd2:	4040      	eors	r0, r0
   39bd4:	f380 8811 	msr	BASEPRI, r0
   39bd8:	f04f 0003 	mov.w	r0, #3
   39bdc:	df02      	svc	2
   39bde:	e7da      	b.n	39b96 <ticker_stop_op_cb+0x6>
   39be0:	20000ec0 	.word	0x20000ec0
   39be4:	0005563c 	.word	0x0005563c
   39be8:	00055408 	.word	0x00055408
   39bec:	0005512c 	.word	0x0005512c
   39bf0:	0005569c 	.word	0x0005569c

00039bf4 <disabled_cb>:
{
   39bf4:	b508      	push	{r3, lr}
	mfy.param = param;
   39bf6:	4b0b      	ldr	r3, [pc, #44]	; (39c24 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39bf8:	2200      	movs	r2, #0
	mfy.param = param;
   39bfa:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39bfc:	4611      	mov	r1, r2
   39bfe:	2001      	movs	r0, #1
   39c00:	f7fa fd20 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!ret);
   39c04:	b900      	cbnz	r0, 39c08 <disabled_cb+0x14>
}
   39c06:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   39c08:	4a07      	ldr	r2, [pc, #28]	; (39c28 <disabled_cb+0x34>)
   39c0a:	4908      	ldr	r1, [pc, #32]	; (39c2c <disabled_cb+0x38>)
   39c0c:	4808      	ldr	r0, [pc, #32]	; (39c30 <disabled_cb+0x3c>)
   39c0e:	f640 13ac 	movw	r3, #2476	; 0x9ac
   39c12:	f010 fc48 	bl	4a4a6 <printk>
   39c16:	4040      	eors	r0, r0
   39c18:	f380 8811 	msr	BASEPRI, r0
   39c1c:	f04f 0003 	mov.w	r0, #3
   39c20:	df02      	svc	2
}
   39c22:	bd08      	pop	{r3, pc}
   39c24:	20000e90 	.word	0x20000e90
   39c28:	0005563c 	.word	0x0005563c
   39c2c:	00055408 	.word	0x00055408
   39c30:	0005512c 	.word	0x0005512c

00039c34 <conn_disable>:
{
   39c34:	b538      	push	{r3, r4, r5, lr}
   39c36:	4604      	mov	r4, r0
	return hdr->ref;
   39c38:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   39c3c:	b353      	cbz	r3, 39c94 <conn_disable+0x60>
		mfy.param = &conn->lll;
   39c3e:	4d17      	ldr	r5, [pc, #92]	; (39c9c <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   39c40:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   39c42:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   39c44:	b16b      	cbz	r3, 39c62 <conn_disable+0x2e>
   39c46:	4a16      	ldr	r2, [pc, #88]	; (39ca0 <conn_disable+0x6c>)
   39c48:	4916      	ldr	r1, [pc, #88]	; (39ca4 <conn_disable+0x70>)
   39c4a:	4817      	ldr	r0, [pc, #92]	; (39ca8 <conn_disable+0x74>)
   39c4c:	f640 1395 	movw	r3, #2453	; 0x995
   39c50:	f010 fc29 	bl	4a4a6 <printk>
   39c54:	4040      	eors	r0, r0
   39c56:	f380 8811 	msr	BASEPRI, r0
   39c5a:	f04f 0003 	mov.w	r0, #3
   39c5e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   39c60:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   39c62:	4912      	ldr	r1, [pc, #72]	; (39cac <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39c64:	4b0d      	ldr	r3, [pc, #52]	; (39c9c <conn_disable+0x68>)
   39c66:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   39c68:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39c6c:	4611      	mov	r1, r2
   39c6e:	2001      	movs	r0, #1
   39c70:	f7fa fce8 	bl	34644 <mayfly_enqueue>
		LL_ASSERT(!ret);
   39c74:	b900      	cbnz	r0, 39c78 <conn_disable+0x44>
}
   39c76:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   39c78:	4a09      	ldr	r2, [pc, #36]	; (39ca0 <conn_disable+0x6c>)
   39c7a:	490d      	ldr	r1, [pc, #52]	; (39cb0 <conn_disable+0x7c>)
   39c7c:	480a      	ldr	r0, [pc, #40]	; (39ca8 <conn_disable+0x74>)
   39c7e:	f640 139c 	movw	r3, #2460	; 0x99c
   39c82:	f010 fc10 	bl	4a4a6 <printk>
   39c86:	4040      	eors	r0, r0
   39c88:	f380 8811 	msr	BASEPRI, r0
   39c8c:	f04f 0003 	mov.w	r0, #3
   39c90:	df02      	svc	2
}
   39c92:	bd38      	pop	{r3, r4, r5, pc}
   39c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   39c98:	f7ff bfac 	b.w	39bf4 <disabled_cb>
   39c9c:	20000eb0 	.word	0x20000eb0
   39ca0:	0005563c 	.word	0x0005563c
   39ca4:	00055524 	.word	0x00055524
   39ca8:	0005512c 	.word	0x0005512c
   39cac:	00039bf5 	.word	0x00039bf5
   39cb0:	00055408 	.word	0x00055408

00039cb4 <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   39cb4:	6883      	ldr	r3, [r0, #8]
   39cb6:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   39cb8:	7f53      	ldrb	r3, [r2, #29]
   39cba:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   39cbc:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   39cc0:	d001      	beq.n	39cc6 <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
   39cc2:	f7ed bd5d 	b.w	27780 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
   39cc6:	f7ee ba2b 	b.w	28120 <ull_central_setup>
   39cca:	bf00      	nop

00039ccc <ticker_start_conn_op_cb>:
{
   39ccc:	b510      	push	{r4, lr}
   39cce:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39cd0:	b990      	cbnz	r0, 39cf8 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   39cd2:	4620      	mov	r0, r4
   39cd4:	f7fe fb60 	bl	38398 <ull_update_unmark>
	LL_ASSERT(p == param);
   39cd8:	4284      	cmp	r4, r0
   39cda:	d00c      	beq.n	39cf6 <ticker_start_conn_op_cb+0x2a>
   39cdc:	4a0d      	ldr	r2, [pc, #52]	; (39d14 <ticker_start_conn_op_cb+0x48>)
   39cde:	490e      	ldr	r1, [pc, #56]	; (39d18 <ticker_start_conn_op_cb+0x4c>)
   39ce0:	480e      	ldr	r0, [pc, #56]	; (39d1c <ticker_start_conn_op_cb+0x50>)
   39ce2:	f640 03b7 	movw	r3, #2231	; 0x8b7
   39ce6:	f010 fbde 	bl	4a4a6 <printk>
   39cea:	4040      	eors	r0, r0
   39cec:	f380 8811 	msr	BASEPRI, r0
   39cf0:	f04f 0003 	mov.w	r0, #3
   39cf4:	df02      	svc	2
}
   39cf6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39cf8:	4a06      	ldr	r2, [pc, #24]	; (39d14 <ticker_start_conn_op_cb+0x48>)
   39cfa:	4909      	ldr	r1, [pc, #36]	; (39d20 <ticker_start_conn_op_cb+0x54>)
   39cfc:	4807      	ldr	r0, [pc, #28]	; (39d1c <ticker_start_conn_op_cb+0x50>)
   39cfe:	f640 03b4 	movw	r3, #2228	; 0x8b4
   39d02:	f010 fbd0 	bl	4a4a6 <printk>
   39d06:	4040      	eors	r0, r0
   39d08:	f380 8811 	msr	BASEPRI, r0
   39d0c:	f04f 0003 	mov.w	r0, #3
   39d10:	df02      	svc	2
   39d12:	e7de      	b.n	39cd2 <ticker_start_conn_op_cb+0x6>
   39d14:	0005563c 	.word	0x0005563c
   39d18:	000556a8 	.word	0x000556a8
   39d1c:	0005512c 	.word	0x0005512c
   39d20:	0005569c 	.word	0x0005569c

00039d24 <ticker_stop_conn_op_cb>:
{
   39d24:	b510      	push	{r4, lr}
   39d26:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39d28:	b990      	cbnz	r0, 39d50 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   39d2a:	4620      	mov	r0, r4
   39d2c:	f7fe fb2a 	bl	38384 <ull_update_mark>
	LL_ASSERT(p == param);
   39d30:	4284      	cmp	r4, r0
   39d32:	d00c      	beq.n	39d4e <ticker_stop_conn_op_cb+0x2a>
   39d34:	4a0d      	ldr	r2, [pc, #52]	; (39d6c <ticker_stop_conn_op_cb+0x48>)
   39d36:	490e      	ldr	r1, [pc, #56]	; (39d70 <ticker_stop_conn_op_cb+0x4c>)
   39d38:	480e      	ldr	r0, [pc, #56]	; (39d74 <ticker_stop_conn_op_cb+0x50>)
   39d3a:	f640 03ad 	movw	r3, #2221	; 0x8ad
   39d3e:	f010 fbb2 	bl	4a4a6 <printk>
   39d42:	4040      	eors	r0, r0
   39d44:	f380 8811 	msr	BASEPRI, r0
   39d48:	f04f 0003 	mov.w	r0, #3
   39d4c:	df02      	svc	2
}
   39d4e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39d50:	4a06      	ldr	r2, [pc, #24]	; (39d6c <ticker_stop_conn_op_cb+0x48>)
   39d52:	4909      	ldr	r1, [pc, #36]	; (39d78 <ticker_stop_conn_op_cb+0x54>)
   39d54:	4807      	ldr	r0, [pc, #28]	; (39d74 <ticker_stop_conn_op_cb+0x50>)
   39d56:	f640 03aa 	movw	r3, #2218	; 0x8aa
   39d5a:	f010 fba4 	bl	4a4a6 <printk>
   39d5e:	4040      	eors	r0, r0
   39d60:	f380 8811 	msr	BASEPRI, r0
   39d64:	f04f 0003 	mov.w	r0, #3
   39d68:	df02      	svc	2
   39d6a:	e7de      	b.n	39d2a <ticker_stop_conn_op_cb+0x6>
   39d6c:	0005563c 	.word	0x0005563c
   39d70:	000556a8 	.word	0x000556a8
   39d74:	0005512c 	.word	0x0005512c
   39d78:	0005569c 	.word	0x0005569c

00039d7c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   39d7c:	b900      	cbnz	r0, 39d80 <ticker_update_conn_op_cb+0x4>
   39d7e:	4770      	bx	lr
{
   39d80:	b510      	push	{r4, lr}
   39d82:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   39d84:	f7fe fb14 	bl	383b0 <ull_update_mark_get>
   39d88:	4284      	cmp	r4, r0
   39d8a:	d010      	beq.n	39dae <ticker_update_conn_op_cb+0x32>
   39d8c:	f7fe faf4 	bl	38378 <ull_disable_mark_get>
   39d90:	4284      	cmp	r4, r0
   39d92:	d00c      	beq.n	39dae <ticker_update_conn_op_cb+0x32>
   39d94:	4a06      	ldr	r2, [pc, #24]	; (39db0 <ticker_update_conn_op_cb+0x34>)
   39d96:	4907      	ldr	r1, [pc, #28]	; (39db4 <ticker_update_conn_op_cb+0x38>)
   39d98:	4807      	ldr	r0, [pc, #28]	; (39db8 <ticker_update_conn_op_cb+0x3c>)
   39d9a:	f640 03a1 	movw	r3, #2209	; 0x8a1
   39d9e:	f010 fb82 	bl	4a4a6 <printk>
   39da2:	4040      	eors	r0, r0
   39da4:	f380 8811 	msr	BASEPRI, r0
   39da8:	f04f 0003 	mov.w	r0, #3
   39dac:	df02      	svc	2
}
   39dae:	bd10      	pop	{r4, pc}
   39db0:	0005563c 	.word	0x0005563c
   39db4:	000556b4 	.word	0x000556b4
   39db8:	0005512c 	.word	0x0005512c

00039dbc <tx_ull_dequeue>:
{
   39dbc:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39dbe:	e9d0 2475 	ldrd	r2, r4, [r0, #468]	; 0x1d4
{
   39dc2:	4603      	mov	r3, r0
   39dc4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39dc6:	b164      	cbz	r4, 39de2 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   39dc8:	4294      	cmp	r4, r2
   39dca:	d021      	beq.n	39e10 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39dcc:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
		if (conn->tx_head == conn->tx_data) {
   39dd0:	428a      	cmp	r2, r1
   39dd2:	d00b      	beq.n	39dec <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   39dd4:	6811      	ldr	r1, [r2, #0]
   39dd6:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
		tx->next = NULL;
   39dda:	2200      	movs	r2, #0
}
   39ddc:	bc10      	pop	{r4}
		tx->next = NULL;
   39dde:	6002      	str	r2, [r0, #0]
}
   39de0:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39de2:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
   39de6:	4291      	cmp	r1, r2
   39de8:	d104      	bne.n	39df4 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   39dea:	b18a      	cbz	r2, 39e10 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   39dec:	6809      	ldr	r1, [r1, #0]
   39dee:	f8c3 11e0 	str.w	r1, [r3, #480]	; 0x1e0
   39df2:	e7ef      	b.n	39dd4 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39df4:	7911      	ldrb	r1, [r2, #4]
   39df6:	f001 0103 	and.w	r1, r1, #3
   39dfa:	2903      	cmp	r1, #3
   39dfc:	d013      	beq.n	39e26 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   39dfe:	6812      	ldr	r2, [r2, #0]
   39e00:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			conn->tx_ctrl = NULL;
   39e04:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   39e06:	e9c3 2276 	strd	r2, r2, [r3, #472]	; 0x1d8
}
   39e0a:	bc10      	pop	{r4}
		tx->next = tx;
   39e0c:	6000      	str	r0, [r0, #0]
}
   39e0e:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39e10:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
		conn->tx_head = conn->tx_head->next;
   39e14:	6812      	ldr	r2, [r2, #0]
   39e16:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39e1a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   39e1c:	bf18      	it	ne
   39e1e:	f8c3 21d8 	strne.w	r2, [r3, #472]	; 0x1d8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39e22:	d1f2      	bne.n	39e0a <tx_ull_dequeue+0x4e>
   39e24:	e7ee      	b.n	39e04 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   39e26:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39e28:	2903      	cmp	r1, #3
   39e2a:	d0d3      	beq.n	39dd4 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39e2c:	290a      	cmp	r1, #10
   39e2e:	d1e6      	bne.n	39dfe <tx_ull_dequeue+0x42>
   39e30:	e7d0      	b.n	39dd4 <tx_ull_dequeue+0x18>
   39e32:	bf00      	nop

00039e34 <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
   39e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
   39e38:	f890 60e4 	ldrb.w	r6, [r0, #228]	; 0xe4
   39e3c:	f016 0602 	ands.w	r6, r6, #2
{
   39e40:	460f      	mov	r7, r1
	if (conn->common.txn_lock) {
   39e42:	d16d      	bne.n	39f20 <feature_rsp_send+0xec>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39e44:	4605      	mov	r5, r0
   39e46:	483a      	ldr	r0, [pc, #232]	; (39f30 <feature_rsp_send+0xfc>)
   39e48:	4691      	mov	r9, r2
   39e4a:	f7fa fb23 	bl	34494 <mem_acquire>
	if (!tx) {
   39e4e:	4604      	mov	r4, r0
   39e50:	2800      	cmp	r0, #0
   39e52:	d06a      	beq.n	39f2a <feature_rsp_send+0xf6>
	conn->common.txn_lock = 1U;
   39e54:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   39e58:	4936      	ldr	r1, [pc, #216]	; (39f34 <feature_rsp_send+0x100>)
	conn->common.txn_lock = 1U;
   39e5a:	f043 0302 	orr.w	r3, r3, #2
   39e5e:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
   39e62:	f8d9 2004 	ldr.w	r2, [r9, #4]
   39e66:	f8d9 3008 	ldr.w	r3, [r9, #8]
	feat &= LL_FEAT_BIT_MASK;
   39e6a:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   39e6c:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
   39e70:	400a      	ands	r2, r1
   39e72:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   39e76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   39e7a:	f8d5 213c 	ldr.w	r2, [r5, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   39e7e:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   39e82:	4013      	ands	r3, r2
   39e84:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
   39e88:	f8d9 8004 	ldr.w	r8, [r9, #4]
   39e8c:	f8d9 9008 	ldr.w	r9, [r9, #8]
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   39e90:	f7fd fc40 	bl	37714 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   39e94:	4b27      	ldr	r3, [pc, #156]	; (39f34 <feature_rsp_send+0x100>)
   39e96:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
   39e9a:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   39e9c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   39ea0:	f028 03ff 	bic.w	r3, r8, #255	; 0xff
   39ea4:	4303      	orrs	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39ea6:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   39eaa:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   39eae:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140

	/* features exchanged */
	conn->common.fex_valid = 1U;
   39eb2:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
   39eb6:	f043 0301 	orr.w	r3, r3, #1
   39eba:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39ebe:	7923      	ldrb	r3, [r4, #4]
   39ec0:	f009 09ff 	and.w	r9, r9, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39ec4:	f049 0210 	orr.w	r2, r9, #16
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39ec8:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_feature.features_peer =
   39ecc:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39ed0:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39ed2:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   39ed4:	2309      	movs	r3, #9
   39ed6:	7163      	strb	r3, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   39ed8:	71e3      	strb	r3, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39eda:	18a0      	adds	r0, r4, r2
   39edc:	4631      	mov	r1, r6
   39ede:	f012 fbf5 	bl	4c6cc <memset>
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
   39ee2:	f7fd fc17 	bl	37714 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   39ee6:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
	dst[0] = val;
   39eea:	7321      	strb	r1, [r4, #12]
   39eec:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   39eee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39ef2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   39ef6:	4303      	orrs	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
   39ef8:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   39efa:	7223      	strb	r3, [r4, #8]
   39efc:	72a2      	strb	r2, [r4, #10]
	dst[1] = val >> 8;
   39efe:	f3c3 2307 	ubfx	r3, r3, #8, #8
   39f02:	0a12      	lsrs	r2, r2, #8
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
   39f04:	4628      	mov	r0, r5
   39f06:	7263      	strb	r3, [r4, #9]
   39f08:	7366      	strb	r6, [r4, #13]
	dst[0] = val;
   39f0a:	73a6      	strb	r6, [r4, #14]
	dst[1] = val >> 8;
   39f0c:	73e6      	strb	r6, [r4, #15]
   39f0e:	72e2      	strb	r2, [r4, #11]
   39f10:	4621      	mov	r1, r4
   39f12:	f7ff fdfb 	bl	39b0c <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39f16:	2301      	movs	r3, #1
   39f18:	713b      	strb	r3, [r7, #4]

	return 0;
   39f1a:	4630      	mov	r0, r6
}
   39f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39f20:	2301      	movs	r3, #1
   39f22:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   39f24:	2000      	movs	r0, #0
}
   39f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
   39f2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39f2e:	e7f5      	b.n	39f1c <feature_rsp_send+0xe8>
   39f30:	20005cd8 	.word	0x20005cd8
   39f34:	087830d0 	.word	0x087830d0

00039f38 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   39f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39f3a:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   39f3c:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
   39f40:	0787      	lsls	r7, r0, #30
{
   39f42:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   39f44:	d433      	bmi.n	39fae <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39f46:	482e      	ldr	r0, [pc, #184]	; (3a000 <reject_ext_ind_send+0xc8>)
   39f48:	4617      	mov	r7, r2
   39f4a:	461e      	mov	r6, r3
   39f4c:	f7fa faa2 	bl	34494 <mem_acquire>
	if (!tx) {
   39f50:	2800      	cmp	r0, #0
   39f52:	d038      	beq.n	39fc6 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   39f54:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   39f58:	f043 0302 	orr.w	r3, r3, #2
   39f5c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   39f60:	2303      	movs	r3, #3
   39f62:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39f64:	2211      	movs	r2, #17
	    conn->tx_head &&
   39f66:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39f6a:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39f6c:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   39f6e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   39f72:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39f74:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   39f78:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39f7a:	7102      	strb	r2, [r0, #4]
	if (
   39f7c:	b1db      	cbz	r3, 39fb6 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   39f7e:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   39f82:	0796      	lsls	r6, r2, #30
   39f84:	d417      	bmi.n	39fb6 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   39f86:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   39f8a:	07d2      	lsls	r2, r2, #31
   39f8c:	d413      	bmi.n	39fb6 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   39f8e:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   39f92:	4293      	cmp	r3, r2
   39f94:	d022      	beq.n	39fdc <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   39f96:	b1c9      	cbz	r1, 39fcc <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   39f98:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39f9c:	681a      	ldr	r2, [r3, #0]
   39f9e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39fa0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   39fa2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39fa4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39fa8:	b90b      	cbnz	r3, 39fae <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   39faa:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39fae:	2301      	movs	r3, #1
   39fb0:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   39fb2:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   39fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   39fb6:	2900      	cmp	r1, #0
   39fb8:	d1ee      	bne.n	39f98 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   39fba:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   39fbc:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39fc0:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   39fc4:	e7f0      	b.n	39fa8 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   39fc6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   39fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39fcc:	791a      	ldrb	r2, [r3, #4]
   39fce:	f002 0203 	and.w	r2, r2, #3
   39fd2:	2a03      	cmp	r2, #3
   39fd4:	d00e      	beq.n	39ff4 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39fd6:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   39fda:	e7df      	b.n	39f9c <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   39fdc:	681a      	ldr	r2, [r3, #0]
   39fde:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39fe2:	2900      	cmp	r1, #0
   39fe4:	d1d8      	bne.n	39f98 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   39fe6:	681a      	ldr	r2, [r3, #0]
   39fe8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   39fea:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   39fec:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   39fee:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   39ff2:	e7d9      	b.n	39fa8 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   39ff4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39ff6:	2a03      	cmp	r2, #3
   39ff8:	d0f5      	beq.n	39fe6 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39ffa:	2a0a      	cmp	r2, #10
   39ffc:	d1eb      	bne.n	39fd6 <reject_ext_ind_send+0x9e>
   39ffe:	e7f2      	b.n	39fe6 <reject_ext_ind_send+0xae>
   3a000:	20005cd8 	.word	0x20005cd8

0003a004 <event_len_prep>:
{
   3a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   3a006:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3a00a:	f003 0207 	and.w	r2, r3, #7
{
   3a00e:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   3a010:	2a06      	cmp	r2, #6
   3a012:	f200 80d4 	bhi.w	3a1be <event_len_prep+0x1ba>
   3a016:	e8df f002 	tbb	[pc, r2]
   3a01a:	4704      	.short	0x4704
   3a01c:	48484747 	.word	0x48484747
   3a020:	47          	.byte	0x47
   3a021:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a022:	486e      	ldr	r0, [pc, #440]	; (3a1dc <event_len_prep+0x1d8>)
   3a024:	f7fa fa36 	bl	34494 <mem_acquire>
		if (!tx) {
   3a028:	2800      	cmp	r0, #0
   3a02a:	d03d      	beq.n	3a0a8 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3a02c:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3a030:	f8b4 21c2 	ldrh.w	r2, [r4, #450]	; 0x1c2
		conn->default_tx_time = conn->llcp_length.tx_time;
   3a034:	f8b4 51c6 	ldrh.w	r5, [r4, #454]	; 0x1c6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3a038:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3a03c:	2301      	movs	r3, #1
   3a03e:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   3a042:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3a046:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   3a04a:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3a04c:	72c3      	strb	r3, [r0, #11]
   3a04e:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3a050:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   3a052:	2309      	movs	r3, #9
   3a054:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3a056:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3a058:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3a05a:	2214      	movs	r2, #20
	    conn->tx_head &&
   3a05c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3a060:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3a062:	2100      	movs	r1, #0
   3a064:	221b      	movs	r2, #27
   3a066:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   3a068:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3a06c:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a06e:	7902      	ldrb	r2, [r0, #4]
   3a070:	f042 0203 	orr.w	r2, r2, #3
   3a074:	7102      	strb	r2, [r0, #4]
	if (
   3a076:	b13b      	cbz	r3, 3a088 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   3a078:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3a07c:	0795      	lsls	r5, r2, #30
   3a07e:	d403      	bmi.n	3a088 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   3a080:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3a084:	07d2      	lsls	r2, r2, #31
   3a086:	d573      	bpl.n	3a170 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   3a088:	2900      	cmp	r1, #0
   3a08a:	d07f      	beq.n	3a18c <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   3a08c:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3a090:	681a      	ldr	r2, [r3, #0]
   3a092:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a094:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3a096:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3a098:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a09c:	2b00      	cmp	r3, #0
   3a09e:	d056      	beq.n	3a14e <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   3a0a0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3a0a4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   3a0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3a0aa:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   3a0ae:	f8b0 c1c0 	ldrh.w	ip, [r0, #448]	; 0x1c0
		lll->max_rx_time = conn->llcp_length.rx_time;
   3a0b2:	f8b0 11c4 	ldrh.w	r1, [r0, #452]	; 0x1c4
		tx_octets = conn->llcp_length.tx_octets;
   3a0b6:	f8b0 71c2 	ldrh.w	r7, [r0, #450]	; 0x1c2
		uint16_t tx_time = conn->llcp_length.tx_time;
   3a0ba:	f8b0 61c6 	ldrh.w	r6, [r0, #454]	; 0x1c6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   3a0be:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3a0c2:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   3a0c4:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3a0c8:	d024      	beq.n	3a114 <event_len_prep+0x110>
			conn->llcp_length.state =
   3a0ca:	2206      	movs	r2, #6
   3a0cc:	f362 0302 	bfi	r3, r2, #0, #3
   3a0d0:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		rx = conn->llcp_rx;
   3a0d4:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   3a0d8:	b335      	cbz	r5, 3a128 <event_len_prep+0x124>
   3a0da:	6828      	ldr	r0, [r5, #0]
   3a0dc:	b320      	cbz	r0, 3a128 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3a0de:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   3a0e0:	6842      	ldr	r2, [r0, #4]
   3a0e2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3a0e6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   3a0ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3a0ec:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   3a0ee:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   3a0f0:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   3a0f2:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3a0f4:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3a0f6:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3a0f8:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3a0fa:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   3a0fe:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3a100:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   3a102:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3a104:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3a106:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   3a108:	f7fe f85a 	bl	381c0 <ll_rx_put>
}
   3a10c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   3a110:	f7fe b860 	b.w	381d4 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   3a114:	f8b0 21c8 	ldrh.w	r2, [r0, #456]	; 0x1c8
   3a118:	b9e2      	cbnz	r2, 3a154 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   3a11a:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
				conn->procedure_expire = 0U;
   3a11e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   3a122:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
				conn->procedure_expire = 0U;
   3a126:	e7d5      	b.n	3a0d4 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   3a128:	4a2d      	ldr	r2, [pc, #180]	; (3a1e0 <event_len_prep+0x1dc>)
   3a12a:	492e      	ldr	r1, [pc, #184]	; (3a1e4 <event_len_prep+0x1e0>)
   3a12c:	482e      	ldr	r0, [pc, #184]	; (3a1e8 <event_len_prep+0x1e4>)
   3a12e:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   3a132:	f010 f9b8 	bl	4a4a6 <printk>
   3a136:	4040      	eors	r0, r0
   3a138:	f380 8811 	msr	BASEPRI, r0
   3a13c:	f04f 0003 	mov.w	r0, #3
   3a140:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   3a142:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3a144:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3a148:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   3a14c:	e7c7      	b.n	3a0de <event_len_prep+0xda>
		conn->tx_data_last = tx;
   3a14e:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3a152:	e7a5      	b.n	3a0a0 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   3a154:	f8a0 21c2 	strh.w	r2, [r0, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3a158:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a15a:	f362 0302 	bfi	r3, r2, #0, #3
   3a15e:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
				conn->llcp_length.tx_time =
   3a162:	f8b0 31ca 	ldrh.w	r3, [r0, #458]	; 0x1ca
				conn->llcp_length.cache.tx_octets = 0;
   3a166:	f8a0 21c8 	strh.w	r2, [r0, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   3a16a:	f8a0 31c6 	strh.w	r3, [r0, #454]	; 0x1c6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a16e:	e7b1      	b.n	3a0d4 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   3a170:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3a174:	4293      	cmp	r3, r2
   3a176:	d00f      	beq.n	3a198 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   3a178:	2900      	cmp	r1, #0
   3a17a:	d187      	bne.n	3a08c <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a17c:	791a      	ldrb	r2, [r3, #4]
   3a17e:	f002 0203 	and.w	r2, r2, #3
   3a182:	2a03      	cmp	r2, #3
   3a184:	d015      	beq.n	3a1b2 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3a186:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3a18a:	e781      	b.n	3a090 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   3a18c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3a18e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3a192:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3a196:	e781      	b.n	3a09c <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   3a198:	681a      	ldr	r2, [r3, #0]
   3a19a:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3a19e:	2900      	cmp	r1, #0
   3a1a0:	f47f af74 	bne.w	3a08c <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   3a1a4:	681a      	ldr	r2, [r3, #0]
   3a1a6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3a1a8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3a1aa:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3a1ac:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3a1b0:	e774      	b.n	3a09c <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   3a1b2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a1b4:	2a03      	cmp	r2, #3
   3a1b6:	d0f5      	beq.n	3a1a4 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3a1b8:	2a0a      	cmp	r2, #10
   3a1ba:	d1e4      	bne.n	3a186 <event_len_prep+0x182>
   3a1bc:	e7f2      	b.n	3a1a4 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   3a1be:	4a08      	ldr	r2, [pc, #32]	; (3a1e0 <event_len_prep+0x1dc>)
   3a1c0:	490a      	ldr	r1, [pc, #40]	; (3a1ec <event_len_prep+0x1e8>)
   3a1c2:	4809      	ldr	r0, [pc, #36]	; (3a1e8 <event_len_prep+0x1e4>)
   3a1c4:	f241 03ea 	movw	r3, #4330	; 0x10ea
   3a1c8:	f010 f96d 	bl	4a4a6 <printk>
   3a1cc:	4040      	eors	r0, r0
   3a1ce:	f380 8811 	msr	BASEPRI, r0
   3a1d2:	f04f 0003 	mov.w	r0, #3
   3a1d6:	df02      	svc	2
}
   3a1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a1da:	bf00      	nop
   3a1dc:	20005cd8 	.word	0x20005cd8
   3a1e0:	0005563c 	.word	0x0005563c
   3a1e4:	00055708 	.word	0x00055708
   3a1e8:	0005512c 	.word	0x0005512c
   3a1ec:	0005518c 	.word	0x0005518c

0003a1f0 <event_phy_upd_ind_prep>:
{
   3a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   3a1f4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   3a1f8:	f013 0601 	ands.w	r6, r3, #1
{
   3a1fc:	4604      	mov	r4, r0
   3a1fe:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   3a200:	f040 8092 	bne.w	3a328 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   3a204:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
   3a208:	1a69      	subs	r1, r5, r1
   3a20a:	0409      	lsls	r1, r1, #16
   3a20c:	f100 8093 	bmi.w	3a336 <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a210:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   3a214:	2900      	cmp	r1, #0
   3a216:	f2c0 8110 	blt.w	3a43a <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
   3a21a:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   3a21e:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   3a220:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   3a224:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
		old_tx = lll->phy_tx;
   3a228:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   3a22c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   3a230:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   3a234:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   3a238:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   3a23c:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   3a240:	d17b      	bne.n	3a33a <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
   3a242:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   3a246:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   3a24a:	d008      	beq.n	3a25e <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   3a24c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   3a250:	095b      	lsrs	r3, r3, #5
   3a252:	f363 0102 	bfi	r1, r3, #0, #3
   3a256:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   3a25a:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   3a25e:	2d00      	cmp	r5, #0
   3a260:	f000 80cb 	beq.w	3a3fa <event_phy_upd_ind_prep+0x20a>
   3a264:	6828      	ldr	r0, [r5, #0]
   3a266:	2800      	cmp	r0, #0
   3a268:	f000 80c7 	beq.w	3a3fa <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3a26c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   3a270:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   3a274:	f8d0 c004 	ldr.w	ip, [r0, #4]
   3a278:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3a27c:	0792      	lsls	r2, r2, #30
   3a27e:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   3a282:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3a286:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   3a28a:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3a28e:	d402      	bmi.n	3a296 <event_phy_upd_ind_prep+0xa6>
   3a290:	4599      	cmp	r9, r3
   3a292:	f000 80ee 	beq.w	3a472 <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
   3a296:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3a298:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3a29a:	231c      	movs	r3, #28
   3a29c:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   3a29e:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   3a2a0:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   3a2a4:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   3a2a8:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   3a2aa:	4629      	mov	r1, r5
   3a2ac:	f7fd ff88 	bl	381c0 <ll_rx_put>
		rx = conn->llcp_rx;
   3a2b0:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   3a2b4:	2d00      	cmp	r5, #0
   3a2b6:	f000 80b1 	beq.w	3a41c <event_phy_upd_ind_prep+0x22c>
   3a2ba:	6828      	ldr	r0, [r5, #0]
   3a2bc:	2800      	cmp	r0, #0
   3a2be:	f000 80ad 	beq.w	3a41c <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
   3a2c2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   3a2c6:	6842      	ldr	r2, [r0, #4]
   3a2c8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((eff_tx_time <= lll->max_tx_time) &&
   3a2cc:	42b3      	cmp	r3, r6
   3a2ce:	d30a      	bcc.n	3a2e6 <event_phy_upd_ind_prep+0xf6>
   3a2d0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   3a2d4:	d807      	bhi.n	3a2e6 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   3a2d6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   3a2da:	42bb      	cmp	r3, r7
   3a2dc:	d303      	bcc.n	3a2e6 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   3a2de:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   3a2e2:	f240 80ff 	bls.w	3a4e4 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
   3a2e6:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   3a2ea:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3a2ee:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   3a2f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3a2f2:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3a2f4:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3a2f8:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3a2fc:	2109      	movs	r1, #9
   3a2fe:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3a300:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3a304:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3a306:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   3a30a:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   3a30c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   3a310:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3a312:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3a314:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   3a316:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   3a318:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3a31a:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   3a31c:	f7fd ff50 	bl	381c0 <ll_rx_put>
}
   3a320:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   3a324:	f7fd bf56 	b.w	381d4 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   3a328:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   3a32c:	2200      	movs	r2, #0
   3a32e:	f7fa f91f 	bl	34570 <memq_peek>
   3a332:	4606      	mov	r6, r0
   3a334:	b150      	cbz	r0, 3a34c <event_phy_upd_ind_prep+0x15c>
}
   3a336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   3a33a:	f3c3 0082 	ubfx	r0, r3, #2, #3
   3a33e:	f360 0102 	bfi	r1, r0, #0, #3
   3a342:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   3a346:	f44f 76a4 	mov.w	r6, #328	; 0x148
   3a34a:	e77c      	b.n	3a246 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   3a34c:	2002      	movs	r0, #2
   3a34e:	f7fd ff47 	bl	381e0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   3a352:	4680      	mov	r8, r0
   3a354:	2800      	cmp	r0, #0
   3a356:	d0ee      	beq.n	3a336 <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a358:	4893      	ldr	r0, [pc, #588]	; (3a5a8 <event_phy_upd_ind_prep+0x3b8>)
   3a35a:	f7fa f89b 	bl	34494 <mem_acquire>
		if (!tx) {
   3a35e:	4607      	mov	r7, r0
   3a360:	2800      	cmp	r0, #0
   3a362:	d0e8      	beq.n	3a336 <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
   3a364:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3a368:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   3a36c:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   3a370:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   3a374:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   3a378:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (!((conn->llcp.phy_upd_ind.tx |
   3a37c:	b2db      	uxtb	r3, r3
   3a37e:	f040 8093 	bne.w	3a4a8 <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
   3a382:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			conn->llcp.phy_upd_ind.instant = 0U;
   3a386:	f8a4 60f6 	strh.w	r6, [r4, #246]	; 0xf6
			if (conn->llcp.phy_upd_ind.cmd) {
   3a38a:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   3a38c:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			if (conn->llcp.phy_upd_ind.cmd) {
   3a390:	f100 80ba 	bmi.w	3a508 <event_phy_upd_ind_prep+0x318>
   3a394:	4633      	mov	r3, r6
   3a396:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3a398:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   3a39a:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3a39c:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
   3a39e:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   3a3a0:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
   3a3a2:	2218      	movs	r2, #24
	    conn->tx_head &&
   3a3a4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		if (!conn->tx_ctrl) {
   3a3a8:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		pdu_ctrl_tx->llctrl.opcode =
   3a3ac:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a3ae:	793a      	ldrb	r2, [r7, #4]
   3a3b0:	f042 0203 	orr.w	r2, r2, #3
   3a3b4:	713a      	strb	r2, [r7, #4]
	if (
   3a3b6:	2b00      	cmp	r3, #0
   3a3b8:	f000 809d 	beq.w	3a4f6 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
   3a3bc:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3a3c0:	0795      	lsls	r5, r2, #30
   3a3c2:	f100 8098 	bmi.w	3a4f6 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
   3a3c6:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3a3ca:	07d0      	lsls	r0, r2, #31
   3a3cc:	f100 8093 	bmi.w	3a4f6 <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
   3a3d0:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3a3d4:	4293      	cmp	r3, r2
   3a3d6:	f000 80cb 	beq.w	3a570 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
   3a3da:	2900      	cmp	r1, #0
   3a3dc:	f000 80d5 	beq.w	3a58a <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
   3a3e0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3a3e4:	681a      	ldr	r2, [r3, #0]
   3a3e6:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3a3e8:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3a3ea:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3a3ec:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a3f0:	2b00      	cmp	r3, #0
   3a3f2:	d1a0      	bne.n	3a336 <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
   3a3f4:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   3a3f8:	e79d      	b.n	3a336 <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
   3a3fa:	4a6c      	ldr	r2, [pc, #432]	; (3a5ac <event_phy_upd_ind_prep+0x3bc>)
   3a3fc:	496c      	ldr	r1, [pc, #432]	; (3a5b0 <event_phy_upd_ind_prep+0x3c0>)
   3a3fe:	486d      	ldr	r0, [pc, #436]	; (3a5b4 <event_phy_upd_ind_prep+0x3c4>)
   3a400:	f241 231a 	movw	r3, #4634	; 0x121a
   3a404:	f010 f84f 	bl	4a4a6 <printk>
   3a408:	4040      	eors	r0, r0
   3a40a:	f380 8811 	msr	BASEPRI, r0
   3a40e:	f04f 0003 	mov.w	r0, #3
   3a412:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   3a414:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3a416:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   3a41a:	e727      	b.n	3a26c <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   3a41c:	4a63      	ldr	r2, [pc, #396]	; (3a5ac <event_phy_upd_ind_prep+0x3bc>)
   3a41e:	4964      	ldr	r1, [pc, #400]	; (3a5b0 <event_phy_upd_ind_prep+0x3c0>)
   3a420:	4864      	ldr	r0, [pc, #400]	; (3a5b4 <event_phy_upd_ind_prep+0x3c4>)
   3a422:	f241 2349 	movw	r3, #4681	; 0x1249
   3a426:	f010 f83e 	bl	4a4a6 <printk>
   3a42a:	4040      	eors	r0, r0
   3a42c:	f380 8811 	msr	BASEPRI, r0
   3a430:	f04f 0003 	mov.w	r0, #3
   3a434:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   3a436:	6828      	ldr	r0, [r5, #0]
   3a438:	e743      	b.n	3a2c2 <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
   3a43a:	f7fd feef 	bl	3821c <ll_pdu_rx_alloc>
			if (!rx) {
   3a43e:	4605      	mov	r5, r0
   3a440:	2800      	cmp	r0, #0
   3a442:	f43f af78 	beq.w	3a336 <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
   3a446:	6803      	ldr	r3, [r0, #0]
   3a448:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3a44c:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3a44e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   3a452:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3a456:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   3a458:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3a45c:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3a45e:	f6bf aedf 	bge.w	3a220 <event_phy_upd_ind_prep+0x30>
   3a462:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   3a466:	2900      	cmp	r1, #0
   3a468:	f43f aeda 	beq.w	3a220 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   3a46c:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
   3a470:	e6da      	b.n	3a228 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3a472:	4588      	cmp	r8, r1
   3a474:	f47f af0f 	bne.w	3a296 <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a478:	2301      	movs	r3, #1
   3a47a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   3a47c:	4629      	mov	r1, r5
   3a47e:	f7fd fe9f 	bl	381c0 <ll_rx_put>
				rx = conn->llcp_rx;
   3a482:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
				LL_ASSERT(rx && rx->hdr.link);
   3a486:	2d00      	cmp	r5, #0
   3a488:	d063      	beq.n	3a552 <event_phy_upd_ind_prep+0x362>
   3a48a:	6828      	ldr	r0, [r5, #0]
   3a48c:	2800      	cmp	r0, #0
   3a48e:	d060      	beq.n	3a552 <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
   3a490:	6842      	ldr	r2, [r0, #4]
   3a492:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a496:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   3a498:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a49a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   3a49c:	f7fd fe90 	bl	381c0 <ll_rx_put>
}
   3a4a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   3a4a4:	f7fd be96 	b.w	381d4 <ll_rx_sched>
							 lll->latency +
   3a4a8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3a4aa:	1da9      	adds	r1, r5, #6
   3a4ac:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   3a4ae:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
			(void)ll_pdu_rx_alloc();
   3a4b2:	f7fd feb3 	bl	3821c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   3a4b6:	f8d8 3000 	ldr.w	r3, [r8]
   3a4ba:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3a4be:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   3a4c0:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
				rx = ll_pdu_rx_alloc();
   3a4c4:	f7fd feaa 	bl	3821c <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   3a4c8:	6803      	ldr	r3, [r0, #0]
   3a4ca:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3a4ce:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3a4d0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   3a4d4:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
				conn->llcp_rx = rx;
   3a4d8:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3a4dc:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3a4e0:	095b      	lsrs	r3, r3, #5
   3a4e2:	e759      	b.n	3a398 <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a4e4:	2301      	movs	r3, #1
   3a4e6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   3a4e8:	4629      	mov	r1, r5
   3a4ea:	f7fd fe69 	bl	381c0 <ll_rx_put>
}
   3a4ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   3a4f2:	f7fd be6f 	b.w	381d4 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   3a4f6:	2900      	cmp	r1, #0
   3a4f8:	f47f af72 	bne.w	3a3e0 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
   3a4fc:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3a4fe:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3a502:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   3a506:	e773      	b.n	3a3f0 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
   3a508:	f7fd fe88 	bl	3821c <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   3a50c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3a50e:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3a512:	231c      	movs	r3, #28
				upd->status = 0U;
   3a514:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3a518:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   3a51c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   3a520:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   3a524:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a528:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   3a52c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3a530:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a534:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   3a538:	4641      	mov	r1, r8
   3a53a:	f7fd fe41 	bl	381c0 <ll_rx_put>
				ll_rx_sched();
   3a53e:	f7fd fe49 	bl	381d4 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3a542:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   3a546:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3a54a:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3a54e:	095b      	lsrs	r3, r3, #5
   3a550:	e722      	b.n	3a398 <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
   3a552:	4a16      	ldr	r2, [pc, #88]	; (3a5ac <event_phy_upd_ind_prep+0x3bc>)
   3a554:	4916      	ldr	r1, [pc, #88]	; (3a5b0 <event_phy_upd_ind_prep+0x3c0>)
   3a556:	4817      	ldr	r0, [pc, #92]	; (3a5b4 <event_phy_upd_ind_prep+0x3c4>)
   3a558:	f241 232c 	movw	r3, #4652	; 0x122c
   3a55c:	f00f ffa3 	bl	4a4a6 <printk>
   3a560:	4040      	eors	r0, r0
   3a562:	f380 8811 	msr	BASEPRI, r0
   3a566:	f04f 0003 	mov.w	r0, #3
   3a56a:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   3a56c:	6828      	ldr	r0, [r5, #0]
   3a56e:	e78f      	b.n	3a490 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
   3a570:	681a      	ldr	r2, [r3, #0]
   3a572:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3a576:	2900      	cmp	r1, #0
   3a578:	f47f af32 	bne.w	3a3e0 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
   3a57c:	681a      	ldr	r2, [r3, #0]
   3a57e:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3a580:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3a582:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3a584:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3a588:	e732      	b.n	3a3f0 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a58a:	791a      	ldrb	r2, [r3, #4]
   3a58c:	f002 0203 	and.w	r2, r2, #3
   3a590:	2a03      	cmp	r2, #3
   3a592:	d002      	beq.n	3a59a <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3a594:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3a598:	e722      	b.n	3a3e0 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
   3a59a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a59c:	2a03      	cmp	r2, #3
   3a59e:	d0ed      	beq.n	3a57c <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3a5a0:	2a0a      	cmp	r2, #10
   3a5a2:	d1f7      	bne.n	3a594 <event_phy_upd_ind_prep+0x3a4>
   3a5a4:	e7ea      	b.n	3a57c <event_phy_upd_ind_prep+0x38c>
   3a5a6:	bf00      	nop
   3a5a8:	20005cd8 	.word	0x20005cd8
   3a5ac:	0005563c 	.word	0x0005563c
   3a5b0:	00055708 	.word	0x00055708
   3a5b4:	0005512c 	.word	0x0005512c

0003a5b8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   3a5b8:	4801      	ldr	r0, [pc, #4]	; (3a5c0 <ll_conn_acquire+0x8>)
   3a5ba:	f7f9 bf6b 	b.w	34494 <mem_acquire>
   3a5be:	bf00      	nop
   3a5c0:	20005c40 	.word	0x20005c40

0003a5c4 <ll_conn_release>:
	mem_release(conn, &conn_free);
   3a5c4:	4901      	ldr	r1, [pc, #4]	; (3a5cc <ll_conn_release+0x8>)
   3a5c6:	f7f9 bf7f 	b.w	344c8 <mem_release>
   3a5ca:	bf00      	nop
   3a5cc:	20005c40 	.word	0x20005c40

0003a5d0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3a5d0:	4902      	ldr	r1, [pc, #8]	; (3a5dc <ll_conn_handle_get+0xc>)
   3a5d2:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   3a5d6:	f7f9 bf93 	b.w	34500 <mem_index_get>
   3a5da:	bf00      	nop
   3a5dc:	20003578 	.word	0x20003578

0003a5e0 <ll_conn_get>:
{
   3a5e0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a5e2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a5e6:	4801      	ldr	r0, [pc, #4]	; (3a5ec <ll_conn_get+0xc>)
   3a5e8:	f7f9 bf86 	b.w	344f8 <mem_get>
   3a5ec:	20003578 	.word	0x20003578

0003a5f0 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a5f0:	2805      	cmp	r0, #5
   3a5f2:	d80c      	bhi.n	3a60e <ll_connected_get+0x1e>
{
   3a5f4:	b510      	push	{r4, lr}
   3a5f6:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a5f8:	4622      	mov	r2, r4
   3a5fa:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a5fe:	4805      	ldr	r0, [pc, #20]	; (3a614 <ll_connected_get+0x24>)
   3a600:	f7f9 ff7a 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a604:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a606:	42a3      	cmp	r3, r4
		return NULL;
   3a608:	bf18      	it	ne
   3a60a:	2000      	movne	r0, #0
}
   3a60c:	bd10      	pop	{r4, pc}
		return NULL;
   3a60e:	2000      	movs	r0, #0
}
   3a610:	4770      	bx	lr
   3a612:	bf00      	nop
   3a614:	20003578 	.word	0x20003578

0003a618 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   3a618:	4801      	ldr	r0, [pc, #4]	; (3a620 <ll_tx_mem_acquire+0x8>)
   3a61a:	f7f9 bf3b 	b.w	34494 <mem_acquire>
   3a61e:	bf00      	nop
   3a620:	20005c68 	.word	0x20005c68

0003a624 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   3a624:	4901      	ldr	r1, [pc, #4]	; (3a62c <ll_tx_mem_release+0x8>)
   3a626:	f7f9 bf4f 	b.w	344c8 <mem_release>
   3a62a:	bf00      	nop
   3a62c:	20005c68 	.word	0x20005c68

0003a630 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a630:	2805      	cmp	r0, #5
   3a632:	d842      	bhi.n	3a6ba <ll_tx_mem_enqueue+0x8a>
{
   3a634:	b570      	push	{r4, r5, r6, lr}
   3a636:	4604      	mov	r4, r0
   3a638:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a63a:	4821      	ldr	r0, [pc, #132]	; (3a6c0 <ll_tx_mem_enqueue+0x90>)
   3a63c:	4622      	mov	r2, r4
   3a63e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a642:	f7f9 ff59 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a646:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a648:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a64a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   3a64c:	d11e      	bne.n	3a68c <ll_tx_mem_enqueue+0x5c>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   3a64e:	4a1d      	ldr	r2, [pc, #116]	; (3a6c4 <ll_tx_mem_enqueue+0x94>)
   3a650:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   3a654:	7851      	ldrb	r1, [r2, #1]
   3a656:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
   3a658:	f10c 0301 	add.w	r3, ip, #1
   3a65c:	b2db      	uxtb	r3, r3
		last = 0U;
   3a65e:	4299      	cmp	r1, r3
   3a660:	bf08      	it	eq
   3a662:	2300      	moveq	r3, #0
   3a664:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   3a666:	4299      	cmp	r1, r3
   3a668:	d024      	beq.n	3a6b4 <ll_tx_mem_enqueue+0x84>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3a66a:	fb1c fc00 	smulbb	ip, ip, r0
   3a66e:	1d10      	adds	r0, r2, #4
	lll_tx->handle = handle;
   3a670:	f820 400c 	strh.w	r4, [r0, ip]
   3a674:	4484      	add	ip, r0
	lll_tx->node = tx;
   3a676:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3a67a:	70d3      	strb	r3, [r2, #3]
   3a67c:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   3a67e:	b943      	cbnz	r3, 3a692 <ll_tx_mem_enqueue+0x62>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a680:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a684:	2b00      	cmp	r3, #0
   3a686:	db0f      	blt.n	3a6a8 <ll_tx_mem_enqueue+0x78>
	return 0;
   3a688:	2000      	movs	r0, #0
}
   3a68a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a68c:	f06f 0015 	mvn.w	r0, #21
}
   3a690:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   3a692:	4b0d      	ldr	r3, [pc, #52]	; (3a6c8 <ll_tx_mem_enqueue+0x98>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3a694:	2200      	movs	r2, #0
   3a696:	2101      	movs	r1, #1
   3a698:	2003      	movs	r0, #3
		mfy.param = conn;
   3a69a:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3a69c:	f7f9 ffd2 	bl	34644 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a6a0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a6a4:	2b00      	cmp	r3, #0
   3a6a6:	daef      	bge.n	3a688 <ll_tx_mem_enqueue+0x58>
		ull_periph_latency_cancel(conn, handle);
   3a6a8:	4628      	mov	r0, r5
   3a6aa:	4621      	mov	r1, r4
   3a6ac:	f004 f9a2 	bl	3e9f4 <ull_periph_latency_cancel>
	return 0;
   3a6b0:	2000      	movs	r0, #0
}
   3a6b2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   3a6b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   3a6b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a6ba:	f06f 0015 	mvn.w	r0, #21
}
   3a6be:	4770      	bx	lr
   3a6c0:	20003578 	.word	0x20003578
   3a6c4:	20000e6c 	.word	0x20000e6c
   3a6c8:	20000ea0 	.word	0x20000ea0

0003a6cc <ll_conn_update>:
{
   3a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a6d0:	2805      	cmp	r0, #5
{
   3a6d2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   3a6d6:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   3a6da:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a6de:	d836      	bhi.n	3a74e <ll_conn_update+0x82>
   3a6e0:	4682      	mov	sl, r0
   3a6e2:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a6e4:	4843      	ldr	r0, [pc, #268]	; (3a7f4 <ll_conn_update+0x128>)
   3a6e6:	4615      	mov	r5, r2
   3a6e8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a6ec:	4652      	mov	r2, sl
   3a6ee:	461e      	mov	r6, r3
   3a6f0:	f7f9 ff02 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a6f4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a6f6:	4553      	cmp	r3, sl
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a6f8:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   3a6fa:	d128      	bne.n	3a74e <ll_conn_update+0x82>
	if (!cmd) {
   3a6fc:	bb54      	cbnz	r4, 3a754 <ll_conn_update+0x88>
		if (!conn->llcp_conn_param.disabled &&
   3a6fe:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   3a702:	0699      	lsls	r1, r3, #26
   3a704:	d44b      	bmi.n	3a79e <ll_conn_update+0xd2>
		    (!conn->common.fex_valid ||
   3a706:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (!conn->llcp_conn_param.disabled &&
   3a70a:	07da      	lsls	r2, r3, #31
   3a70c:	d443      	bmi.n	3a796 <ll_conn_update+0xca>
			if (conn->llcp_conn_param.req !=
   3a70e:	f89c 2194 	ldrb.w	r2, [ip, #404]	; 0x194
   3a712:	f89c 3195 	ldrb.w	r3, [ip, #405]	; 0x195
   3a716:	4293      	cmp	r3, r2
   3a718:	d13a      	bne.n	3a790 <ll_conn_update+0xc4>
			conn->llcp_conn_param.state = cmd;
   3a71a:	f8bc 2196 	ldrh.w	r2, [ip, #406]	; 0x196
			conn->llcp_conn_param.interval_min = interval_min;
   3a71e:	f8ac 6198 	strh.w	r6, [ip, #408]	; 0x198
			conn->llcp_conn_param.state = cmd;
   3a722:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3a726:	f042 0210 	orr.w	r2, r2, #16
   3a72a:	f8ac 2196 	strh.w	r2, [ip, #406]	; 0x196
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a72e:	f99c 2039 	ldrsb.w	r2, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   3a732:	f8ac 919a 	strh.w	r9, [ip, #410]	; 0x19a
			conn->llcp_conn_param.req++;
   3a736:	3301      	adds	r3, #1
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a738:	2a00      	cmp	r2, #0
			conn->llcp_conn_param.latency = latency;
   3a73a:	f8ac 819c 	strh.w	r8, [ip, #412]	; 0x19c
			conn->llcp_conn_param.timeout = timeout;
   3a73e:	f8ac 719e 	strh.w	r7, [ip, #414]	; 0x19e
			conn->llcp_conn_param.req++;
   3a742:	f88c 3194 	strb.w	r3, [ip, #404]	; 0x194
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a746:	db4f      	blt.n	3a7e8 <ll_conn_update+0x11c>
	return 0;
   3a748:	2000      	movs	r0, #0
}
   3a74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a74e:	2002      	movs	r0, #2
}
   3a750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmd--;
   3a754:	3c01      	subs	r4, #1
		if (cmd) {
   3a756:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   3a75a:	d0d8      	beq.n	3a70e <ll_conn_update+0x42>
			if ((conn->llcp_conn_param.req ==
   3a75c:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
   3a760:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   3a764:	429a      	cmp	r2, r3
   3a766:	d013      	beq.n	3a790 <ll_conn_update+0xc4>
			    (conn->llcp_conn_param.state !=
   3a768:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
			     conn->llcp_conn_param.ack) ||
   3a76c:	f003 020f 	and.w	r2, r3, #15
   3a770:	2a03      	cmp	r2, #3
   3a772:	d10d      	bne.n	3a790 <ll_conn_update+0xc4>
			conn->llcp_conn_param.state = cmd;
   3a774:	f004 040f 	and.w	r4, r4, #15
   3a778:	f023 031f 	bic.w	r3, r3, #31
   3a77c:	f044 0410 	orr.w	r4, r4, #16
   3a780:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   3a782:	f880 5197 	strb.w	r5, [r0, #407]	; 0x197
			conn->llcp_conn_param.state = cmd;
   3a786:	f880 4196 	strb.w	r4, [r0, #406]	; 0x196
	return 0;
   3a78a:	2000      	movs	r0, #0
}
   3a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a790:	200c      	movs	r0, #12
}
   3a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		     (conn->llcp_feature.features_conn &
   3a796:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
		    (!conn->common.fex_valid ||
   3a79a:	079b      	lsls	r3, r3, #30
   3a79c:	d4b7      	bmi.n	3a70e <ll_conn_update+0x42>
		} else if (conn->lll.role) {
   3a79e:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   3a7a2:	2b00      	cmp	r3, #0
   3a7a4:	db1e      	blt.n	3a7e4 <ll_conn_update+0x118>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   3a7a6:	f89c 2118 	ldrb.w	r2, [ip, #280]	; 0x118
   3a7aa:	f89c 3119 	ldrb.w	r3, [ip, #281]	; 0x119
   3a7ae:	4293      	cmp	r3, r2
   3a7b0:	d1ee      	bne.n	3a790 <ll_conn_update+0xc4>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a7b2:	f89c 211a 	ldrb.w	r2, [ip, #282]	; 0x11a
		conn->llcp_cu.interval = interval_max;
   3a7b6:	f8ac 911c 	strh.w	r9, [ip, #284]	; 0x11c
		conn->llcp_cu.req++;
   3a7ba:	3301      	adds	r3, #1
   3a7bc:	f88c 3118 	strb.w	r3, [ip, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a7c0:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   3a7c4:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a7c6:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   3a7ca:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   3a7cc:	f88c 3128 	strb.w	r3, [ip, #296]	; 0x128
		conn->llcp_cu.latency = latency;
   3a7d0:	f8ac 811e 	strh.w	r8, [ip, #286]	; 0x11e
		conn->llcp_cu.timeout = timeout;
   3a7d4:	f8ac 7120 	strh.w	r7, [ip, #288]	; 0x120
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a7d8:	f88c 211a 	strb.w	r2, [ip, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   3a7dc:	f8cc 0124 	str.w	r0, [ip, #292]	; 0x124
}
   3a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a7e4:	201a      	movs	r0, #26
   3a7e6:	e7b3      	b.n	3a750 <ll_conn_update+0x84>
				ull_periph_latency_cancel(conn, handle);
   3a7e8:	4660      	mov	r0, ip
   3a7ea:	4651      	mov	r1, sl
   3a7ec:	f004 f902 	bl	3e9f4 <ull_periph_latency_cancel>
	return 0;
   3a7f0:	2000      	movs	r0, #0
   3a7f2:	e7ad      	b.n	3a750 <ll_conn_update+0x84>
   3a7f4:	20003578 	.word	0x20003578

0003a7f8 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a7f8:	2805      	cmp	r0, #5
   3a7fa:	d81d      	bhi.n	3a838 <ll_chm_get+0x40>
{
   3a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a7fe:	4606      	mov	r6, r0
   3a800:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a802:	480e      	ldr	r0, [pc, #56]	; (3a83c <ll_chm_get+0x44>)
   3a804:	4632      	mov	r2, r6
   3a806:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a80a:	f7f9 fe75 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a80e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a810:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a812:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a814:	d10e      	bne.n	3a834 <ll_chm_get+0x3c>
		memcpy(chm, conn->lll.data_chan_map,
   3a816:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   3a81a:	2600      	movs	r6, #0
   3a81c:	f884 61e8 	strb.w	r6, [r4, #488]	; 0x1e8
		memcpy(chm, conn->lll.data_chan_map,
   3a820:	2205      	movs	r2, #5
   3a822:	4639      	mov	r1, r7
   3a824:	4628      	mov	r0, r5
   3a826:	f011 ff46 	bl	4c6b6 <memcpy>
	} while (conn->chm_updated);
   3a82a:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   3a82e:	2800      	cmp	r0, #0
   3a830:	d1f4      	bne.n	3a81c <ll_chm_get+0x24>
}
   3a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a834:	2002      	movs	r0, #2
}
   3a836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a838:	2002      	movs	r0, #2
}
   3a83a:	4770      	bx	lr
   3a83c:	20003578 	.word	0x20003578

0003a840 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a840:	2805      	cmp	r0, #5
   3a842:	d840      	bhi.n	3a8c6 <ll_terminate_ind_send+0x86>
{
   3a844:	b538      	push	{r3, r4, r5, lr}
   3a846:	4605      	mov	r5, r0
   3a848:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a84a:	4822      	ldr	r0, [pc, #136]	; (3a8d4 <ll_terminate_ind_send+0x94>)
   3a84c:	462a      	mov	r2, r5
   3a84e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a852:	f7f9 fe51 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a856:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a858:	42ab      	cmp	r3, r5
   3a85a:	d125      	bne.n	3a8a8 <ll_terminate_ind_send+0x68>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   3a85c:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
   3a860:	f890 2151 	ldrb.w	r2, [r0, #337]	; 0x151
   3a864:	429a      	cmp	r2, r3
   3a866:	d12c      	bne.n	3a8c2 <ll_terminate_ind_send+0x82>
	switch (reason) {
   3a868:	2c29      	cmp	r4, #41	; 0x29
   3a86a:	d819      	bhi.n	3a8a0 <ll_terminate_ind_send+0x60>
   3a86c:	2c04      	cmp	r4, #4
   3a86e:	d919      	bls.n	3a8a4 <ll_terminate_ind_send+0x64>
   3a870:	1f62      	subs	r2, r4, #5
   3a872:	2a24      	cmp	r2, #36	; 0x24
   3a874:	d816      	bhi.n	3a8a4 <ll_terminate_ind_send+0x64>
   3a876:	e8df f002 	tbb	[pc, r2]
   3a87a:	1519      	.short	0x1519
   3a87c:	15151515 	.word	0x15151515
   3a880:	15151515 	.word	0x15151515
   3a884:	15151515 	.word	0x15151515
   3a888:	15191919 	.word	0x15191919
   3a88c:	19151515 	.word	0x19151515
   3a890:	15151515 	.word	0x15151515
   3a894:	15151515 	.word	0x15151515
   3a898:	15151515 	.word	0x15151515
   3a89c:	1515      	.short	0x1515
   3a89e:	19          	.byte	0x19
   3a89f:	00          	.byte	0x00
   3a8a0:	2c3b      	cmp	r4, #59	; 0x3b
   3a8a2:	d003      	beq.n	3a8ac <ll_terminate_ind_send+0x6c>
   3a8a4:	2012      	movs	r0, #18
}
   3a8a6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a8a8:	2002      	movs	r0, #2
}
   3a8aa:	bd38      	pop	{r3, r4, r5, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a8ac:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   3a8b0:	f880 4152 	strb.w	r4, [r0, #338]	; 0x152
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a8b4:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a8b6:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a8b8:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a8bc:	db05      	blt.n	3a8ca <ll_terminate_ind_send+0x8a>
	return 0;
   3a8be:	2000      	movs	r0, #0
}
   3a8c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a8c2:	200c      	movs	r0, #12
}
   3a8c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a8c6:	2002      	movs	r0, #2
}
   3a8c8:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   3a8ca:	4629      	mov	r1, r5
   3a8cc:	f004 f892 	bl	3e9f4 <ull_periph_latency_cancel>
	return 0;
   3a8d0:	2000      	movs	r0, #0
}
   3a8d2:	bd38      	pop	{r3, r4, r5, pc}
   3a8d4:	20003578 	.word	0x20003578

0003a8d8 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a8d8:	2805      	cmp	r0, #5
   3a8da:	d821      	bhi.n	3a920 <ll_feature_req_send+0x48>
{
   3a8dc:	b510      	push	{r4, lr}
   3a8de:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a8e0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a8e4:	480f      	ldr	r0, [pc, #60]	; (3a924 <ll_feature_req_send+0x4c>)
   3a8e6:	4622      	mov	r2, r4
   3a8e8:	f7f9 fe06 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a8ec:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a8ee:	42a1      	cmp	r1, r4
   3a8f0:	d10e      	bne.n	3a910 <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   3a8f2:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
   3a8f6:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   3a8fa:	42a2      	cmp	r2, r4
   3a8fc:	d10a      	bne.n	3a914 <ll_feature_req_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a8fe:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   3a902:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a904:	2c00      	cmp	r4, #0
	conn->llcp_feature.req++;
   3a906:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a90a:	db05      	blt.n	3a918 <ll_feature_req_send+0x40>
	return 0;
   3a90c:	2000      	movs	r0, #0
}
   3a90e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a910:	2002      	movs	r0, #2
}
   3a912:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a914:	200c      	movs	r0, #12
}
   3a916:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3a918:	f004 f86c 	bl	3e9f4 <ull_periph_latency_cancel>
	return 0;
   3a91c:	2000      	movs	r0, #0
}
   3a91e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a920:	2002      	movs	r0, #2
}
   3a922:	4770      	bx	lr
   3a924:	20003578 	.word	0x20003578

0003a928 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a928:	2805      	cmp	r0, #5
   3a92a:	d821      	bhi.n	3a970 <ll_version_ind_send+0x48>
{
   3a92c:	b510      	push	{r4, lr}
   3a92e:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a930:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a934:	480f      	ldr	r0, [pc, #60]	; (3a974 <ll_version_ind_send+0x4c>)
   3a936:	4622      	mov	r2, r4
   3a938:	f7f9 fdde 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a93c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a93e:	42a1      	cmp	r1, r4
   3a940:	d10e      	bne.n	3a960 <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   3a942:	f890 4148 	ldrb.w	r4, [r0, #328]	; 0x148
   3a946:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   3a94a:	42a2      	cmp	r2, r4
   3a94c:	d10a      	bne.n	3a964 <ll_version_ind_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a94e:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   3a952:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a954:	2c00      	cmp	r4, #0
	conn->llcp_version.req++;
   3a956:	f880 2148 	strb.w	r2, [r0, #328]	; 0x148
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a95a:	db05      	blt.n	3a968 <ll_version_ind_send+0x40>
	return 0;
   3a95c:	2000      	movs	r0, #0
}
   3a95e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a960:	2002      	movs	r0, #2
}
   3a962:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a964:	200c      	movs	r0, #12
}
   3a966:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3a968:	f004 f844 	bl	3e9f4 <ull_periph_latency_cancel>
	return 0;
   3a96c:	2000      	movs	r0, #0
}
   3a96e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a970:	2002      	movs	r0, #2
}
   3a972:	4770      	bx	lr
   3a974:	20003578 	.word	0x20003578

0003a978 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a978:	2805      	cmp	r0, #5
   3a97a:	d84e      	bhi.n	3aa1a <ll_length_req_send+0xa2>
{
   3a97c:	b570      	push	{r4, r5, r6, lr}
   3a97e:	4604      	mov	r4, r0
   3a980:	460d      	mov	r5, r1
   3a982:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a984:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a988:	4602      	mov	r2, r0
   3a98a:	4825      	ldr	r0, [pc, #148]	; (3aa20 <ll_length_req_send+0xa8>)
   3a98c:	f7f9 fdb4 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3a990:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a992:	42a3      	cmp	r3, r4
   3a994:	d136      	bne.n	3aa04 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   3a996:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3a99a:	071a      	lsls	r2, r3, #28
   3a99c:	d434      	bmi.n	3aa08 <ll_length_req_send+0x90>
	    (conn->common.fex_valid &&
   3a99e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
	if (conn->llcp_length.disabled ||
   3a9a2:	07d1      	lsls	r1, r2, #31
   3a9a4:	d503      	bpl.n	3a9ae <ll_length_req_send+0x36>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   3a9a6:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
	    (conn->common.fex_valid &&
   3a9aa:	0692      	lsls	r2, r2, #26
   3a9ac:	d52c      	bpl.n	3aa08 <ll_length_req_send+0x90>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   3a9ae:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
   3a9b2:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   3a9b6:	428a      	cmp	r2, r1
   3a9b8:	d011      	beq.n	3a9de <ll_length_req_send+0x66>
		switch (conn->llcp_length.state) {
   3a9ba:	f003 0307 	and.w	r3, r3, #7
   3a9be:	2b03      	cmp	r3, #3
   3a9c0:	d004      	beq.n	3a9cc <ll_length_req_send+0x54>
   3a9c2:	3303      	adds	r3, #3
   3a9c4:	f003 0307 	and.w	r3, r3, #7
   3a9c8:	2b01      	cmp	r3, #1
   3a9ca:	d824      	bhi.n	3aa16 <ll_length_req_send+0x9e>
			if (!conn->llcp_length.cache.tx_octets) {
   3a9cc:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	; 0x1c8
   3a9d0:	bb0b      	cbnz	r3, 3aa16 <ll_length_req_send+0x9e>
				conn->llcp_length.cache.tx_octets = tx_octets;
   3a9d2:	f8a0 51c8 	strh.w	r5, [r0, #456]	; 0x1c8
				conn->llcp_length.cache.tx_time = tx_time;
   3a9d6:	f8a0 61ca 	strh.w	r6, [r0, #458]	; 0x1ca
				return 0;
   3a9da:	4618      	mov	r0, r3
}
   3a9dc:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a9de:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a9e2:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   3a9e6:	f8a0 51c2 	strh.w	r5, [r0, #450]	; 0x1c2
	conn->llcp_length.req++;
   3a9ea:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a9ec:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a9f0:	2900      	cmp	r1, #0
	conn->llcp_length.tx_time = tx_time;
   3a9f2:	f8a0 61c6 	strh.w	r6, [r0, #454]	; 0x1c6
	conn->llcp_length.req++;
   3a9f6:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a9fa:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a9fe:	db05      	blt.n	3aa0c <ll_length_req_send+0x94>
	return 0;
   3aa00:	2000      	movs	r0, #0
}
   3aa02:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3aa04:	2002      	movs	r0, #2
}
   3aa06:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3aa08:	201a      	movs	r0, #26
}
   3aa0a:	bd70      	pop	{r4, r5, r6, pc}
		ull_periph_latency_cancel(conn, handle);
   3aa0c:	4621      	mov	r1, r4
   3aa0e:	f003 fff1 	bl	3e9f4 <ull_periph_latency_cancel>
	return 0;
   3aa12:	2000      	movs	r0, #0
}
   3aa14:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3aa16:	200c      	movs	r0, #12
}
   3aa18:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3aa1a:	2002      	movs	r0, #2
}
   3aa1c:	4770      	bx	lr
   3aa1e:	bf00      	nop
   3aa20:	20003578 	.word	0x20003578

0003aa24 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   3aa24:	4a03      	ldr	r2, [pc, #12]	; (3aa34 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   3aa26:	4b04      	ldr	r3, [pc, #16]	; (3aa38 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   3aa28:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   3aa2a:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   3aa2c:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   3aa2e:	800b      	strh	r3, [r1, #0]
}
   3aa30:	4770      	bx	lr
   3aa32:	bf00      	nop
   3aa34:	20007614 	.word	0x20007614
   3aa38:	20007616 	.word	0x20007616

0003aa3c <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   3aa3c:	4a02      	ldr	r2, [pc, #8]	; (3aa48 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   3aa3e:	4b03      	ldr	r3, [pc, #12]	; (3aa4c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   3aa40:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   3aa42:	8019      	strh	r1, [r3, #0]
}
   3aa44:	2000      	movs	r0, #0
   3aa46:	4770      	bx	lr
   3aa48:	20007614 	.word	0x20007614
   3aa4c:	20007616 	.word	0x20007616

0003aa50 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3aa50:	f04f 0c1b 	mov.w	ip, #27
   3aa54:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3aa58:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3aa5c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3aa60:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3aa62:	8018      	strh	r0, [r3, #0]
}
   3aa64:	4770      	bx	lr
   3aa66:	bf00      	nop

0003aa68 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3aa68:	2805      	cmp	r0, #5
   3aa6a:	d81b      	bhi.n	3aaa4 <ll_phy_get+0x3c>
{
   3aa6c:	b570      	push	{r4, r5, r6, lr}
   3aa6e:	4604      	mov	r4, r0
   3aa70:	460e      	mov	r6, r1
   3aa72:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3aa74:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3aa78:	4602      	mov	r2, r0
   3aa7a:	480b      	ldr	r0, [pc, #44]	; (3aaa8 <ll_phy_get+0x40>)
   3aa7c:	f7f9 fd3c 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3aa80:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3aa82:	42a2      	cmp	r2, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3aa84:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3aa86:	d10b      	bne.n	3aaa0 <ll_phy_get+0x38>
	*tx = conn->lll.phy_tx;
   3aa88:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
   3aa8c:	f3c4 0402 	ubfx	r4, r4, #0, #3
   3aa90:	7034      	strb	r4, [r6, #0]
	*rx = conn->lll.phy_rx;
   3aa92:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   3aa96:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3aa9a:	702b      	strb	r3, [r5, #0]
	return 0;
   3aa9c:	2000      	movs	r0, #0
}
   3aa9e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3aaa0:	2002      	movs	r0, #2
}
   3aaa2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3aaa4:	2002      	movs	r0, #2
}
   3aaa6:	4770      	bx	lr
   3aaa8:	20003578 	.word	0x20003578

0003aaac <ll_phy_default_set>:
	default_phy_tx = tx;
   3aaac:	4a02      	ldr	r2, [pc, #8]	; (3aab8 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   3aaae:	4b03      	ldr	r3, [pc, #12]	; (3aabc <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   3aab0:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   3aab2:	7019      	strb	r1, [r3, #0]
}
   3aab4:	2000      	movs	r0, #0
   3aab6:	4770      	bx	lr
   3aab8:	2000778b 	.word	0x2000778b
   3aabc:	2000778a 	.word	0x2000778a

0003aac0 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3aac0:	2805      	cmp	r0, #5
{
   3aac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3aac6:	d843      	bhi.n	3ab50 <ll_phy_req_send+0x90>
   3aac8:	4606      	mov	r6, r0
   3aaca:	460c      	mov	r4, r1
   3aacc:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3aace:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3aad2:	4602      	mov	r2, r0
   3aad4:	4824      	ldr	r0, [pc, #144]	; (3ab68 <ll_phy_req_send+0xa8>)
   3aad6:	4698      	mov	r8, r3
   3aad8:	f7f9 fd0e 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3aadc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3aade:	42b3      	cmp	r3, r6
   3aae0:	d136      	bne.n	3ab50 <ll_phy_req_send+0x90>
	if (conn->llcp_phy.disabled ||
   3aae2:	f890 51cf 	ldrb.w	r5, [r0, #463]	; 0x1cf
   3aae6:	f015 0508 	ands.w	r5, r5, #8
   3aaea:	d139      	bne.n	3ab60 <ll_phy_req_send+0xa0>
	    (conn->common.fex_valid &&
   3aaec:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
	if (conn->llcp_phy.disabled ||
   3aaf0:	07db      	lsls	r3, r3, #31
   3aaf2:	d504      	bpl.n	3aafe <ll_phy_req_send+0x3e>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   3aaf4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   3aaf8:	f413 6f10 	tst.w	r3, #2304	; 0x900
   3aafc:	d030      	beq.n	3ab60 <ll_phy_req_send+0xa0>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   3aafe:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
   3ab02:	f890 11cd 	ldrb.w	r1, [r0, #461]	; 0x1cd
   3ab06:	4299      	cmp	r1, r3
   3ab08:	d126      	bne.n	3ab58 <ll_phy_req_send+0x98>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3ab0a:	f004 0407 	and.w	r4, r4, #7
   3ab0e:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
   3ab12:	00a4      	lsls	r4, r4, #2
	conn->llcp_phy.req++;
   3ab14:	3101      	adds	r1, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3ab16:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   3ab1a:	f008 0307 	and.w	r3, r8, #7
   3ab1e:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   3ab22:	f007 0701 	and.w	r7, r7, #1
	conn->llcp_phy.req++;
   3ab26:	f880 11cc 	strb.w	r1, [r0, #460]	; 0x1cc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3ab2a:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3ab2e:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3ab32:	ea43 2347 	orr.w	r3, r3, r7, lsl #9
   3ab36:	f022 0207 	bic.w	r2, r2, #7
   3ab3a:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3ab3c:	2900      	cmp	r1, #0
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3ab3e:	f8a0 31ce 	strh.w	r3, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3ab42:	da06      	bge.n	3ab52 <ll_phy_req_send+0x92>
		ull_periph_latency_cancel(conn, handle);
   3ab44:	4631      	mov	r1, r6
   3ab46:	f003 ff55 	bl	3e9f4 <ull_periph_latency_cancel>
}
   3ab4a:	4628      	mov	r0, r5
   3ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ab50:	2502      	movs	r5, #2
}
   3ab52:	4628      	mov	r0, r5
   3ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ab58:	250c      	movs	r5, #12
}
   3ab5a:	4628      	mov	r0, r5
   3ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3ab60:	251a      	movs	r5, #26
}
   3ab62:	4628      	mov	r0, r5
   3ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ab68:	20003578 	.word	0x20003578

0003ab6c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3ab6c:	2805      	cmp	r0, #5
   3ab6e:	d81d      	bhi.n	3abac <ll_apto_get+0x40>
{
   3ab70:	b538      	push	{r3, r4, r5, lr}
   3ab72:	4604      	mov	r4, r0
   3ab74:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3ab76:	480e      	ldr	r0, [pc, #56]	; (3abb0 <ll_apto_get+0x44>)
   3ab78:	4622      	mov	r2, r4
   3ab7a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3ab7e:	f7f9 fcbb 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3ab82:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3ab84:	42a3      	cmp	r3, r4
   3ab86:	d10f      	bne.n	3aba8 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   3ab88:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   3ab8a:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
   3ab8e:	4a09      	ldr	r2, [pc, #36]	; (3abb4 <ll_apto_get+0x48>)
   3ab90:	fb01 f303 	mul.w	r3, r1, r3
   3ab94:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   3ab98:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   3ab9c:	fba2 2303 	umull	r2, r3, r2, r3
   3aba0:	099b      	lsrs	r3, r3, #6
   3aba2:	802b      	strh	r3, [r5, #0]
	return 0;
   3aba4:	2000      	movs	r0, #0
}
   3aba6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3aba8:	2002      	movs	r0, #2
}
   3abaa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3abac:	2002      	movs	r0, #2
}
   3abae:	4770      	bx	lr
   3abb0:	20003578 	.word	0x20003578
   3abb4:	10624dd3 	.word	0x10624dd3

0003abb8 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3abb8:	2805      	cmp	r0, #5
   3abba:	d81e      	bhi.n	3abfa <ll_apto_set+0x42>
{
   3abbc:	b538      	push	{r3, r4, r5, lr}
   3abbe:	4605      	mov	r5, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3abc0:	462a      	mov	r2, r5
   3abc2:	480f      	ldr	r0, [pc, #60]	; (3ac00 <ll_apto_set+0x48>)
   3abc4:	460c      	mov	r4, r1
   3abc6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3abca:	f7f9 fc95 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3abce:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3abd0:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3abd2:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3abd4:	d10f      	bne.n	3abf6 <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3abd6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   3abd8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3abdc:	fb01 f202 	mul.w	r2, r1, r2
   3abe0:	f242 7110 	movw	r1, #10000	; 0x2710
   3abe4:	fb01 2104 	mla	r1, r1, r4, r2
   3abe8:	3901      	subs	r1, #1
	return 0;
   3abea:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3abec:	fbb1 f1f2 	udiv	r1, r1, r2
   3abf0:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   3abf4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3abf6:	2002      	movs	r0, #2
}
   3abf8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3abfa:	2002      	movs	r0, #2
}
   3abfc:	4770      	bx	lr
   3abfe:	bf00      	nop
   3ac00:	20003578 	.word	0x20003578

0003ac04 <ull_conn_init>:
	err = init_reset();
   3ac04:	f7fe be5c 	b.w	398c0 <init_reset>

0003ac08 <ull_conn_reset>:
{
   3ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)ull_central_reset();
   3ac0c:	f004 f8b8 	bl	3ed80 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3ac10:	4e1a      	ldr	r6, [pc, #104]	; (3ac7c <ull_conn_reset+0x74>)
	LL_ASSERT(err == 0 || err == -EALREADY);
   3ac12:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3ac80 <ull_conn_reset+0x78>
   3ac16:	4f1b      	ldr	r7, [pc, #108]	; (3ac84 <ull_conn_reset+0x7c>)
	(void)ull_central_reset();
   3ac18:	2500      	movs	r5, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3ac1a:	b2aa      	uxth	r2, r5
   3ac1c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3ac20:	4630      	mov	r0, r6
   3ac22:	f7f9 fc69 	bl	344f8 <mem_get>
   3ac26:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   3ac28:	1d68      	adds	r0, r5, #5
   3ac2a:	f104 021c 	add.w	r2, r4, #28
   3ac2e:	4621      	mov	r1, r4
   3ac30:	b2c0      	uxtb	r0, r0
   3ac32:	f7fd fc01 	bl	38438 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3ac36:	b170      	cbz	r0, 3ac56 <ull_conn_reset+0x4e>
   3ac38:	3078      	adds	r0, #120	; 0x78
   3ac3a:	d00c      	beq.n	3ac56 <ull_conn_reset+0x4e>
   3ac3c:	4812      	ldr	r0, [pc, #72]	; (3ac88 <ull_conn_reset+0x80>)
   3ac3e:	f640 03e3 	movw	r3, #2275	; 0x8e3
   3ac42:	4642      	mov	r2, r8
   3ac44:	4639      	mov	r1, r7
   3ac46:	f00f fc2e 	bl	4a4a6 <printk>
   3ac4a:	4040      	eors	r0, r0
   3ac4c:	f380 8811 	msr	BASEPRI, r0
   3ac50:	f04f 0003 	mov.w	r0, #3
   3ac54:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3ac56:	3501      	adds	r5, #1
	conn->lll.handle = LLL_HANDLE_INVALID;
   3ac58:	f64f 72ff 	movw	r2, #65535	; 0xffff
	conn->lll.link_tx_free = NULL;
   3ac5c:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3ac5e:	2d06      	cmp	r5, #6
	conn->lll.handle = LLL_HANDLE_INVALID;
   3ac60:	8522      	strh	r2, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3ac62:	6763      	str	r3, [r4, #116]	; 0x74
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3ac64:	d1d9      	bne.n	3ac1a <ull_conn_reset+0x12>
	MFIFO_INIT(conn_tx);
   3ac66:	4809      	ldr	r0, [pc, #36]	; (3ac8c <ull_conn_reset+0x84>)
	MFIFO_INIT(conn_ack);
   3ac68:	4909      	ldr	r1, [pc, #36]	; (3ac90 <ull_conn_reset+0x88>)
	conn_upd_curr = NULL;
   3ac6a:	4a0a      	ldr	r2, [pc, #40]	; (3ac94 <ull_conn_reset+0x8c>)
	MFIFO_INIT(conn_tx);
   3ac6c:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   3ac6e:	804b      	strh	r3, [r1, #2]
}
   3ac70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_upd_curr = NULL;
   3ac74:	6013      	str	r3, [r2, #0]
	err = init_reset();
   3ac76:	f7fe be23 	b.w	398c0 <init_reset>
   3ac7a:	bf00      	nop
   3ac7c:	20003578 	.word	0x20003578
   3ac80:	0005563c 	.word	0x0005563c
   3ac84:	00055624 	.word	0x00055624
   3ac88:	0005512c 	.word	0x0005512c
   3ac8c:	20000e6c 	.word	0x20000e6c
   3ac90:	20000d88 	.word	0x20000d88
   3ac94:	20005c44 	.word	0x20005c44

0003ac98 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   3ac98:	4b01      	ldr	r3, [pc, #4]	; (3aca0 <ull_conn_default_tx_octets_get+0x8>)
}
   3ac9a:	8818      	ldrh	r0, [r3, #0]
   3ac9c:	4770      	bx	lr
   3ac9e:	bf00      	nop
   3aca0:	20007614 	.word	0x20007614

0003aca4 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   3aca4:	4b01      	ldr	r3, [pc, #4]	; (3acac <ull_conn_default_tx_time_get+0x8>)
}
   3aca6:	8818      	ldrh	r0, [r3, #0]
   3aca8:	4770      	bx	lr
   3acaa:	bf00      	nop
   3acac:	20007616 	.word	0x20007616

0003acb0 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3acb0:	4b01      	ldr	r3, [pc, #4]	; (3acb8 <ull_conn_default_phy_tx_get+0x8>)
}
   3acb2:	7818      	ldrb	r0, [r3, #0]
   3acb4:	4770      	bx	lr
   3acb6:	bf00      	nop
   3acb8:	2000778b 	.word	0x2000778b

0003acbc <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   3acbc:	4b01      	ldr	r3, [pc, #4]	; (3acc4 <ull_conn_default_phy_rx_get+0x8>)
}
   3acbe:	7818      	ldrb	r0, [r3, #0]
   3acc0:	4770      	bx	lr
   3acc2:	bf00      	nop
   3acc4:	2000778a 	.word	0x2000778a

0003acc8 <ull_conn_peer_connected>:
{
   3acc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3accc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3ad38 <ull_conn_peer_connected+0x70>
{
   3acd0:	4682      	mov	sl, r0
   3acd2:	468b      	mov	fp, r1
   3acd4:	4617      	mov	r7, r2
   3acd6:	4699      	mov	r9, r3
   3acd8:	2500      	movs	r5, #0
   3acda:	b2ae      	uxth	r6, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3acdc:	4632      	mov	r2, r6
   3acde:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3ace2:	4640      	mov	r0, r8
   3ace4:	f7f9 fc08 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3ace8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3acea:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3acec:	4604      	mov	r4, r0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3acee:	f105 0501 	add.w	r5, r5, #1
	if (conn->lll.handle != handle) {
   3acf2:	d105      	bne.n	3ad00 <ull_conn_peer_connected+0x38>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3acf4:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   3acf8:	f3c3 0340 	ubfx	r3, r3, #1, #1
		if (conn &&
   3acfc:	42bb      	cmp	r3, r7
   3acfe:	d004      	beq.n	3ad0a <ull_conn_peer_connected+0x42>
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3ad00:	2d06      	cmp	r5, #6
   3ad02:	d1ea      	bne.n	3acda <ull_conn_peer_connected+0x12>
	return false;
   3ad04:	2000      	movs	r0, #0
}
   3ad06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3ad0a:	2206      	movs	r2, #6
   3ad0c:	4649      	mov	r1, r9
   3ad0e:	30dd      	adds	r0, #221	; 0xdd
   3ad10:	f011 fcc0 	bl	4c694 <memcmp>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3ad14:	2800      	cmp	r0, #0
   3ad16:	d1f3      	bne.n	3ad00 <ull_conn_peer_connected+0x38>
		    conn->own_id_addr_type == own_id_addr_type &&
   3ad18:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   3ad1c:	f003 0301 	and.w	r3, r3, #1
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3ad20:	4553      	cmp	r3, sl
   3ad22:	d1ed      	bne.n	3ad00 <ull_conn_peer_connected+0x38>
		    !memcmp(conn->own_id_addr, own_id_addr, BDADDR_SIZE)) {
   3ad24:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   3ad28:	2206      	movs	r2, #6
   3ad2a:	4659      	mov	r1, fp
   3ad2c:	f011 fcb2 	bl	4c694 <memcmp>
		    conn->own_id_addr_type == own_id_addr_type &&
   3ad30:	2800      	cmp	r0, #0
   3ad32:	d1e5      	bne.n	3ad00 <ull_conn_peer_connected+0x38>
			return true;
   3ad34:	2001      	movs	r0, #1
   3ad36:	e7e6      	b.n	3ad06 <ull_conn_peer_connected+0x3e>
   3ad38:	20003578 	.word	0x20003578

0003ad3c <ull_conn_setup>:
{
   3ad3c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   3ad3e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   3ad40:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   3ad42:	681d      	ldr	r5, [r3, #0]
   3ad44:	782b      	ldrb	r3, [r5, #0]
{
   3ad46:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   3ad48:	b193      	cbz	r3, 3ad70 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   3ad4a:	696b      	ldr	r3, [r5, #20]
   3ad4c:	b163      	cbz	r3, 3ad68 <ull_conn_setup+0x2c>
   3ad4e:	4a0b      	ldr	r2, [pc, #44]	; (3ad7c <ull_conn_setup+0x40>)
   3ad50:	490b      	ldr	r1, [pc, #44]	; (3ad80 <ull_conn_setup+0x44>)
   3ad52:	480c      	ldr	r0, [pc, #48]	; (3ad84 <ull_conn_setup+0x48>)
   3ad54:	f240 33ed 	movw	r3, #1005	; 0x3ed
   3ad58:	f00f fba5 	bl	4a4a6 <printk>
   3ad5c:	4040      	eors	r0, r0
   3ad5e:	f380 8811 	msr	BASEPRI, r0
   3ad62:	f04f 0003 	mov.w	r0, #3
   3ad66:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   3ad68:	4b07      	ldr	r3, [pc, #28]	; (3ad88 <ull_conn_setup+0x4c>)
   3ad6a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   3ad6e:	bd38      	pop	{r3, r4, r5, pc}
   3ad70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   3ad74:	4608      	mov	r0, r1
   3ad76:	f7fe bf9d 	b.w	39cb4 <conn_setup_adv_scan_disabled_cb>
   3ad7a:	bf00      	nop
   3ad7c:	0005563c 	.word	0x0005563c
   3ad80:	00055524 	.word	0x00055524
   3ad84:	0005512c 	.word	0x0005512c
   3ad88:	00039cb5 	.word	0x00039cb5

0003ad8c <ull_conn_rx>:
{
   3ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   3ad90:	680b      	ldr	r3, [r1, #0]
   3ad92:	88dd      	ldrh	r5, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3ad94:	2d05      	cmp	r5, #5
{
   3ad96:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   3ad98:	d86d      	bhi.n	3ae76 <ull_conn_rx+0xea>
   3ad9a:	460e      	mov	r6, r1
   3ad9c:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3ad9e:	462a      	mov	r2, r5
   3ada0:	48bd      	ldr	r0, [pc, #756]	; (3b098 <ull_conn_rx+0x30c>)
   3ada2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3ada6:	f7f9 fba7 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3adaa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3adac:	42ab      	cmp	r3, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3adae:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3adb0:	d160      	bne.n	3ae74 <ull_conn_rx+0xe8>
	pdu_rx = (void *)(*rx)->pdu;
   3adb2:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3adb4:	f890 c176 	ldrb.w	ip, [r0, #374]	; 0x176
	switch (pdu_rx->ll_id) {
   3adb8:	7f2b      	ldrb	r3, [r5, #28]
   3adba:	f003 0303 	and.w	r3, r3, #3
   3adbe:	2b03      	cmp	r3, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3adc0:	f00c 0101 	and.w	r1, ip, #1
	switch (pdu_rx->ll_id) {
   3adc4:	d140      	bne.n	3ae48 <ull_conn_rx+0xbc>
	opcode = pdu_rx->llctrl.opcode;
   3adc6:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   3adca:	f105 021c 	add.w	r2, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3adce:	2900      	cmp	r1, #0
   3add0:	d057      	beq.n	3ae82 <ull_conn_rx+0xf6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3add2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3add6:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   3add8:	f00c 0104 	and.w	r1, ip, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3addc:	f2c0 80de 	blt.w	3af9c <ull_conn_rx+0x210>
	return (!conn->lll.role &&
   3ade0:	2900      	cmp	r1, #0
   3ade2:	f040 8130 	bne.w	3b046 <ull_conn_rx+0x2ba>
		((!conn->llcp_enc.refresh &&
   3ade6:	f1b8 0f02 	cmp.w	r8, #2
   3adea:	f000 8161 	beq.w	3b0b0 <ull_conn_rx+0x324>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   3adee:	f1b8 0f05 	cmp.w	r8, #5
   3adf2:	f000 856f 	beq.w	3b8d4 <ull_conn_rx+0xb48>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   3adf6:	f1b8 0f06 	cmp.w	r8, #6
   3adfa:	f000 8403 	beq.w	3b604 <ull_conn_rx+0x878>
   3adfe:	f1b8 0f0d 	cmp.w	r8, #13
   3ae02:	f000 8517 	beq.w	3b834 <ull_conn_rx+0xaa8>
   3ae06:	f1b8 0f11 	cmp.w	r8, #17
   3ae0a:	d12a      	bne.n	3ae62 <ull_conn_rx+0xd6>
		break;
#endif /* CONFIG_BT_CENTRAL */
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   3ae0c:	7f6b      	ldrb	r3, [r5, #29]
   3ae0e:	2b03      	cmp	r3, #3
   3ae10:	d176      	bne.n	3af00 <ull_conn_rx+0x174>
	switch (rej_ext_ind->reject_opcode) {
   3ae12:	f895 3020 	ldrb.w	r3, [r5, #32]
   3ae16:	3b03      	subs	r3, #3
   3ae18:	2b13      	cmp	r3, #19
   3ae1a:	d81a      	bhi.n	3ae52 <ull_conn_rx+0xc6>
   3ae1c:	e8df f013 	tbh	[pc, r3, lsl #1]
   3ae20:	001905e0 	.word	0x001905e0
   3ae24:	00190019 	.word	0x00190019
   3ae28:	00190019 	.word	0x00190019
   3ae2c:	00190019 	.word	0x00190019
   3ae30:	00190019 	.word	0x00190019
   3ae34:	00190019 	.word	0x00190019
   3ae38:	001905a4 	.word	0x001905a4
   3ae3c:	00190019 	.word	0x00190019
   3ae40:	05850019 	.word	0x05850019
   3ae44:	06000019 	.word	0x06000019
	switch (pdu_rx->ll_id) {
   3ae48:	b94b      	cbnz	r3, 3ae5e <ull_conn_rx+0xd2>
		if (conn->llcp_enc.pause_rx) {
   3ae4a:	b111      	cbz	r1, 3ae52 <ull_conn_rx+0xc6>
			conn->llcp_terminate.reason_final =
   3ae4c:	233d      	movs	r3, #61	; 0x3d
   3ae4e:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ae52:	2301      	movs	r3, #1
   3ae54:	712b      	strb	r3, [r5, #4]
	return 0;
   3ae56:	2000      	movs	r0, #0
}
   3ae58:	b005      	add	sp, #20
   3ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3ae5e:	2900      	cmp	r1, #0
   3ae60:	d0f9      	beq.n	3ae56 <ull_conn_rx+0xca>
		conn->llcp_terminate.reason_final =
   3ae62:	223d      	movs	r2, #61	; 0x3d
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ae64:	2301      	movs	r3, #1
		return 0;
   3ae66:	2000      	movs	r0, #0
		conn->llcp_terminate.reason_final =
   3ae68:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ae6c:	712b      	strb	r3, [r5, #4]
}
   3ae6e:	b005      	add	sp, #20
   3ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ae74:	6833      	ldr	r3, [r6, #0]
   3ae76:	2201      	movs	r2, #1
		return 0;
   3ae78:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ae7a:	711a      	strb	r2, [r3, #4]
}
   3ae7c:	b005      	add	sp, #20
   3ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (opcode) {
   3ae82:	f1b8 0f19 	cmp.w	r8, #25
   3ae86:	d83b      	bhi.n	3af00 <ull_conn_rx+0x174>
   3ae88:	a301      	add	r3, pc, #4	; (adr r3, 3ae90 <ull_conn_rx+0x104>)
   3ae8a:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
   3ae8e:	bf00      	nop
   3ae90:	0003b527 	.word	0x0003b527
   3ae94:	0003b13b 	.word	0x0003b13b
   3ae98:	0003b0b1 	.word	0x0003b0b1
   3ae9c:	0003aef9 	.word	0x0003aef9
   3aea0:	0003b8bd 	.word	0x0003b8bd
   3aea4:	0003b8cb 	.word	0x0003b8cb
   3aea8:	0003b605 	.word	0x0003b605
   3aeac:	0003b65f 	.word	0x0003b65f
   3aeb0:	0003b2f1 	.word	0x0003b2f1
   3aeb4:	0003b79f 	.word	0x0003b79f
   3aeb8:	0003b70b 	.word	0x0003b70b
   3aebc:	0003b909 	.word	0x0003b909
   3aec0:	0003b6ab 	.word	0x0003b6ab
   3aec4:	0003b835 	.word	0x0003b835
   3aec8:	0003b81b 	.word	0x0003b81b
   3aecc:	0003b2c7 	.word	0x0003b2c7
   3aed0:	0003b1a3 	.word	0x0003b1a3
   3aed4:	0003ae0d 	.word	0x0003ae0d
   3aed8:	0003b4cb 	.word	0x0003b4cb
   3aedc:	0003b513 	.word	0x0003b513
   3aee0:	0003b0c9 	.word	0x0003b0c9
   3aee4:	0003b0c9 	.word	0x0003b0c9
   3aee8:	0003b475 	.word	0x0003b475
   3aeec:	0003b3f3 	.word	0x0003b3f3
   3aef0:	0003b37b 	.word	0x0003b37b
   3aef4:	0003b311 	.word	0x0003b311
		if (!conn->lll.role ||
   3aef8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3aefc:	2b00      	cmp	r3, #0
   3aefe:	db5b      	blt.n	3afb8 <ull_conn_rx+0x22c>
	if (conn->common.txn_lock) {
   3af00:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3af04:	0798      	lsls	r0, r3, #30
   3af06:	d4a4      	bmi.n	3ae52 <ull_conn_rx+0xc6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3af08:	4864      	ldr	r0, [pc, #400]	; (3b09c <ull_conn_rx+0x310>)
   3af0a:	f7f9 fac3 	bl	34494 <mem_acquire>
	if (!tx) {
   3af0e:	2800      	cmp	r0, #0
   3af10:	f000 859d 	beq.w	3ba4e <ull_conn_rx+0xcc2>
	conn->common.txn_lock = 1U;
   3af14:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3af18:	f043 0302 	orr.w	r3, r3, #2
   3af1c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3af20:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   3af22:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3af26:	f043 0303 	orr.w	r3, r3, #3
   3af2a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   3af2c:	2302      	movs	r3, #2
   3af2e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   3af30:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   3af34:	2307      	movs	r3, #7
   3af36:	71c3      	strb	r3, [r0, #7]
	if (
   3af38:	b1fa      	cbz	r2, 3af7a <ull_conn_rx+0x1ee>
	    !conn->llcp_enc.pause_tx &&
   3af3a:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   3af3e:	0799      	lsls	r1, r3, #30
   3af40:	d41b      	bmi.n	3af7a <ull_conn_rx+0x1ee>
	    !conn->llcp_phy.pause_tx &&
   3af42:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3af46:	07db      	lsls	r3, r3, #31
   3af48:	d417      	bmi.n	3af7a <ull_conn_rx+0x1ee>
		if (conn->tx_head == conn->tx_data) {
   3af4a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   3af4e:	429a      	cmp	r2, r3
   3af50:	f000 859a 	beq.w	3ba88 <ull_conn_rx+0xcfc>
		} else if (!conn->tx_ctrl) {
   3af54:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3af58:	2b00      	cmp	r3, #0
   3af5a:	f000 85e2 	beq.w	3bb22 <ull_conn_rx+0xd96>
	tx->next = conn->tx_ctrl_last->next;
   3af5e:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3af62:	6813      	ldr	r3, [r2, #0]
   3af64:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3af66:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3af68:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3af6a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3af6e:	2a00      	cmp	r2, #0
   3af70:	f47f af6f 	bne.w	3ae52 <ull_conn_rx+0xc6>
		conn->tx_data_last = tx;
   3af74:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3af78:	e76b      	b.n	3ae52 <ull_conn_rx+0xc6>
		if (!conn->tx_ctrl) {
   3af7a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3af7e:	2b00      	cmp	r3, #0
   3af80:	f000 855b 	beq.w	3ba3a <ull_conn_rx+0xcae>
	tx->next = conn->tx_ctrl_last->next;
   3af84:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3af88:	681a      	ldr	r2, [r3, #0]
   3af8a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3af8c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3af8e:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3af90:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3af94:	2a00      	cmp	r2, #0
   3af96:	f47f af5c 	bne.w	3ae52 <ull_conn_rx+0xc6>
   3af9a:	e7eb      	b.n	3af74 <ull_conn_rx+0x1e8>
	       (conn->lll.role &&
   3af9c:	2900      	cmp	r1, #0
   3af9e:	d07f      	beq.n	3b0a0 <ull_conn_rx+0x314>
		 (conn->llcp_enc.refresh &&
   3afa0:	f1b8 0f02 	cmp.w	r8, #2
   3afa4:	f000 8084 	beq.w	3b0b0 <ull_conn_rx+0x324>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   3afa8:	f1b8 0f0b 	cmp.w	r8, #11
   3afac:	f000 85b4 	beq.w	3bb18 <ull_conn_rx+0xd8c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   3afb0:	f1b8 0f03 	cmp.w	r8, #3
   3afb4:	f47f af1f 	bne.w	3adf6 <ull_conn_rx+0x6a>
		if (!conn->lll.role ||
   3afb8:	7f6b      	ldrb	r3, [r5, #29]
   3afba:	2b17      	cmp	r3, #23
   3afbc:	d1a0      	bne.n	3af00 <ull_conn_rx+0x174>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3afbe:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3afc2:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3afc6:	1a9b      	subs	r3, r3, r2
   3afc8:	f003 0303 	and.w	r3, r3, #3
   3afcc:	2b02      	cmp	r3, #2
   3afce:	f001 8171 	beq.w	3c2b4 <ull_conn_rx+0x1528>
		memcpy(&conn->llcp_enc.rand[0],
   3afd2:	2208      	movs	r2, #8
   3afd4:	f105 0120 	add.w	r1, r5, #32
   3afd8:	f204 1079 	addw	r0, r4, #377	; 0x179
   3afdc:	f011 fb6b 	bl	4c6b6 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3afe0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   3afe4:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   3afe8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3afec:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   3aff0:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aff4:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3aff6:	2301      	movs	r3, #1
   3aff8:	f363 0201 	bfi	r2, r3, #0, #2
   3affc:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b000:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   3b002:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
		conn->llcp_type = LLCP_ENCRYPTION;
   3b006:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   3b008:	3b02      	subs	r3, #2
   3b00a:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&conn->llcp.encryption.skd[0],
   3b00e:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   3b010:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
		memcpy(&conn->llcp.encryption.skd[0],
   3b014:	f504 7081 	add.w	r0, r4, #258	; 0x102
   3b018:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   3b01c:	f011 fb4b 	bl	4c6b6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3b020:	2204      	movs	r2, #4
   3b022:	f105 0132 	add.w	r1, r5, #50	; 0x32
   3b026:	f104 0094 	add.w	r0, r4, #148	; 0x94
   3b02a:	f011 fb44 	bl	4c6b6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b02e:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3b032:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3b036:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   3b03a:	f043 0301 	orr.w	r3, r3, #1
   3b03e:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	int nack = 0;
   3b042:	2000      	movs	r0, #0
		break;
   3b044:	e708      	b.n	3ae58 <ull_conn_rx+0xcc>
		 (conn->llcp_enc.refresh &&
   3b046:	f1b8 0f02 	cmp.w	r8, #2
   3b04a:	d031      	beq.n	3b0b0 <ull_conn_rx+0x324>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   3b04c:	f1b8 0f0b 	cmp.w	r8, #11
   3b050:	f000 8501 	beq.w	3ba56 <ull_conn_rx+0xcca>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   3b054:	f1b8 0f04 	cmp.w	r8, #4
   3b058:	f47f aec9 	bne.w	3adee <ull_conn_rx+0x62>
		if (conn->lll.role ||
   3b05c:	7f6b      	ldrb	r3, [r5, #29]
   3b05e:	2b0d      	cmp	r3, #13
   3b060:	f47f af4e 	bne.w	3af00 <ull_conn_rx+0x174>
		memcpy(&conn->llcp.encryption.skd[8],
   3b064:	2208      	movs	r2, #8
   3b066:	f105 0120 	add.w	r1, r5, #32
   3b06a:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3b06e:	f011 fb22 	bl	4c6b6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   3b072:	2204      	movs	r2, #4
   3b074:	f105 0128 	add.w	r1, r5, #40	; 0x28
   3b078:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3b07c:	f011 fb1b 	bl	4c6b6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b080:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b084:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   3b086:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b08a:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   3b08c:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	int nack = 0;
   3b090:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b092:	7111      	strb	r1, [r2, #4]
		break;
   3b094:	e6e0      	b.n	3ae58 <ull_conn_rx+0xcc>
   3b096:	bf00      	nop
   3b098:	20003578 	.word	0x20003578
   3b09c:	20005cd8 	.word	0x20005cd8
		((!conn->llcp_enc.refresh &&
   3b0a0:	f1b8 0f07 	cmp.w	r8, #7
   3b0a4:	f000 82db 	beq.w	3b65e <ull_conn_rx+0x8d2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   3b0a8:	f1b8 0f02 	cmp.w	r8, #2
   3b0ac:	f47f aea3 	bne.w	3adf6 <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   3b0b0:	7f6b      	ldrb	r3, [r5, #29]
   3b0b2:	2b02      	cmp	r3, #2
   3b0b4:	f47f af24 	bne.w	3af00 <ull_conn_rx+0x174>
	conn->llcp_terminate.reason_final =
   3b0b8:	f895 2020 	ldrb.w	r2, [r5, #32]
   3b0bc:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0c0:	2301      	movs	r3, #1
	int nack = 0;
   3b0c2:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0c4:	712b      	strb	r3, [r5, #4]
}
   3b0c6:	e6c7      	b.n	3ae58 <ull_conn_rx+0xcc>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   3b0c8:	7f6b      	ldrb	r3, [r5, #29]
   3b0ca:	2b09      	cmp	r3, #9
   3b0cc:	f47f af18 	bne.w	3af00 <ull_conn_rx+0x174>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   3b0d0:	f1b8 0f14 	cmp.w	r8, #20
   3b0d4:	f000 852f 	beq.w	3bb36 <ull_conn_rx+0xdaa>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b0d8:	f890 21bc 	ldrb.w	r2, [r0, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b0dc:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
   3b0e0:	4293      	cmp	r3, r2
   3b0e2:	f001 80f5 	beq.w	3c2d0 <ull_conn_rx+0x1544>
	eff_rx_octets = conn->lll.max_rx_octets;
   3b0e6:	f8b0 805a 	ldrh.w	r8, [r0, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   3b0ea:	f8b0 9058 	ldrh.w	r9, [r0, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3b0ee:	f8b0 a05e 	ldrh.w	sl, [r0, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3b0f2:	f8b0 b05c 	ldrh.w	fp, [r0, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3b0f6:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
	struct node_tx *tx = NULL;
   3b0fa:	2300      	movs	r3, #0
	       tx) ||
   3b0fc:	f001 0107 	and.w	r1, r1, #7
   3b100:	2902      	cmp	r1, #2
   3b102:	f000 8538 	beq.w	3bb76 <ull_conn_rx+0xdea>
   3b106:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   3b10a:	f1b8 0f15 	cmp.w	r8, #21
   3b10e:	f43f aea2 	beq.w	3ae56 <ull_conn_rx+0xca>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3b112:	4618      	mov	r0, r3
   3b114:	49d5      	ldr	r1, [pc, #852]	; (3b46c <ull_conn_rx+0x6e0>)
   3b116:	f7f9 f9d7 	bl	344c8 <mem_release>
			if (conn->llcp_length.state ==
   3b11a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->common.txn_lock = 0U;
   3b11e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3b122:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   3b126:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   3b12a:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   3b12c:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3b130:	f47f ae91 	bne.w	3ae56 <ull_conn_rx+0xca>
				return -EBUSY;
   3b134:	f06f 000f 	mvn.w	r0, #15
   3b138:	e68e      	b.n	3ae58 <ull_conn_rx+0xcc>
		if (!conn->lll.role ||
   3b13a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b13e:	2b00      	cmp	r3, #0
   3b140:	f6bf aede 	bge.w	3af00 <ull_conn_rx+0x174>
   3b144:	7f6b      	ldrb	r3, [r5, #29]
   3b146:	2b08      	cmp	r3, #8
   3b148:	f47f aeda 	bne.w	3af00 <ull_conn_rx+0x174>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   3b14c:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3b150:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   3b152:	1af3      	subs	r3, r6, r3
   3b154:	041f      	lsls	r7, r3, #16
   3b156:	f100 87f9 	bmi.w	3c14c <ull_conn_rx+0x13c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b15a:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3b15e:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   3b162:	1a9b      	subs	r3, r3, r2
   3b164:	f003 0303 	and.w	r3, r3, #3
   3b168:	2b02      	cmp	r3, #2
   3b16a:	f000 87e7 	beq.w	3c13c <ull_conn_rx+0x13b0>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   3b16e:	2205      	movs	r2, #5
   3b170:	f105 0120 	add.w	r1, r5, #32
   3b174:	30f5      	adds	r0, #245	; 0xf5
   3b176:	f011 fa9e 	bl	4c6b6 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   3b17a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3b17e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
	conn->llcp.chan_map.instant = instant;
   3b182:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
	conn->llcp.chan_map.initiate = 0U;
   3b186:	f36f 0200 	bfc	r2, #0, #1
   3b18a:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_type = LLCP_CHAN_MAP;
   3b18e:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   3b190:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b192:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3b194:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   3b198:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	int nack = 0;
   3b19c:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b19e:	712a      	strb	r2, [r5, #4]
		if (err) {
   3b1a0:	e65a      	b.n	3ae58 <ull_conn_rx+0xcc>
		if (conn->lll.role ||
   3b1a2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b1a6:	2b00      	cmp	r3, #0
   3b1a8:	f6ff aeaa 	blt.w	3af00 <ull_conn_rx+0x174>
   3b1ac:	7f6b      	ldrb	r3, [r5, #29]
   3b1ae:	2b18      	cmp	r3, #24
   3b1b0:	f47f aea6 	bne.w	3af00 <ull_conn_rx+0x174>
		if (!conn->lll.role &&
   3b1b4:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
   3b1b8:	f890 3195 	ldrb.w	r3, [r0, #405]	; 0x195
   3b1bc:	429a      	cmp	r2, r3
   3b1be:	f43f ae48 	beq.w	3ae52 <ull_conn_rx+0xc6>
		    (conn->llcp_conn_param.state ==
   3b1c2:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
		     conn->llcp_conn_param.ack) &&
   3b1c6:	f003 030f 	and.w	r3, r3, #15
   3b1ca:	2b04      	cmp	r3, #4
   3b1cc:	f47f ae41 	bne.w	3ae52 <ull_conn_rx+0xc6>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3b1d0:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   3b1d4:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b1d8:	2b05      	cmp	r3, #5
   3b1da:	f240 8745 	bls.w	3c068 <ull_conn_rx+0x12dc>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3b1de:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   3b1e0:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b1e2:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   3b1e6:	f200 873f 	bhi.w	3c068 <ull_conn_rx+0x12dc>
			    (interval_max > 3200) ||
   3b1ea:	428b      	cmp	r3, r1
   3b1ec:	f200 873c 	bhi.w	3c068 <ull_conn_rx+0x12dc>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3b1f0:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   3b1f2:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   3b1f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   3b1f8:	f080 8736 	bcs.w	3c068 <ull_conn_rx+0x12dc>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3b1fc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   3b1fe:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   3b202:	f1ae 020a 	sub.w	r2, lr, #10
   3b206:	f640 4876 	movw	r8, #3190	; 0xc76
   3b20a:	b292      	uxth	r2, r2
   3b20c:	4542      	cmp	r2, r8
   3b20e:	f200 872b 	bhi.w	3c068 <ull_conn_rx+0x12dc>
			     ((latency + 1) * interval_max)) ||
   3b212:	3301      	adds	r3, #1
   3b214:	b29b      	uxth	r3, r3
   3b216:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   3b21a:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   3b21e:	f080 8723 	bcs.w	3c068 <ull_conn_rx+0x12dc>
			     ((latency + 1) * interval_max)) ||
   3b222:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   3b226:	4291      	cmp	r1, r2
   3b228:	f0c0 871e 	bcc.w	3c068 <ull_conn_rx+0x12dc>
			conn->llcp_conn_param.preferred_periodicity =
   3b22c:	f884 21a0 	strb.w	r2, [r4, #416]	; 0x1a0
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3b230:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
			conn->llcp_conn_param.interval_min = interval_min;
   3b234:	f8a4 c198 	strh.w	ip, [r4, #408]	; 0x198
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3b238:	2301      	movs	r3, #1
   3b23a:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   3b23e:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   3b240:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
			conn->llcp_conn_param.latency =	latency;
   3b244:	f8a4 619c 	strh.w	r6, [r4, #412]	; 0x19c
			conn->llcp_conn_param.timeout =	timeout;
   3b248:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
			conn->procedure_expire = 0U;
   3b24c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b250:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   3b254:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   3b258:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   3b25c:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset0);
   3b260:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   3b264:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   3b268:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   3b26c:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset1);
   3b270:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   3b274:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   3b278:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   3b27c:	f8a4 31a6 	strh.w	r3, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset2);
   3b280:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   3b284:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   3b288:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   3b28c:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
				sys_le16_to_cpu(cpr->offset3);
   3b290:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   3b294:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   3b298:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   3b29c:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
				sys_le16_to_cpu(cpr->offset4);
   3b2a0:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   3b2a4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   3b2a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   3b2ac:	f8a4 31ac 	strh.w	r3, [r4, #428]	; 0x1ac
				sys_le16_to_cpu(cpr->offset5);
   3b2b0:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   3b2b4:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3b2b8:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset5);
   3b2bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   3b2c0:	f8a4 31ae 	strh.w	r3, [r4, #430]	; 0x1ae
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b2c4:	e5c5      	b.n	3ae52 <ull_conn_rx+0xc6>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   3b2c6:	7f6b      	ldrb	r3, [r5, #29]
   3b2c8:	2b18      	cmp	r3, #24
   3b2ca:	f47f ae19 	bne.w	3af00 <ull_conn_rx+0x174>
	return conn_upd_curr && (conn_upd_curr != conn);
   3b2ce:	4868      	ldr	r0, [pc, #416]	; (3b470 <ull_conn_rx+0x6e4>)
   3b2d0:	6803      	ldr	r3, [r0, #0]
   3b2d2:	2b00      	cmp	r3, #0
   3b2d4:	f000 83eb 	beq.w	3baae <ull_conn_rx+0xd22>
   3b2d8:	429c      	cmp	r4, r3
   3b2da:	f000 83e8 	beq.w	3baae <ull_conn_rx+0xd22>
			nack = reject_ext_ind_send(conn, *rx,
   3b2de:	2320      	movs	r3, #32
   3b2e0:	220f      	movs	r2, #15
   3b2e2:	4629      	mov	r1, r5
   3b2e4:	4620      	mov	r0, r4
}
   3b2e6:	b005      	add	sp, #20
   3b2e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   3b2ec:	f7fe be24 	b.w	39f38 <reject_ext_ind_send>
		if (!conn->lll.role ||
   3b2f0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b2f4:	2b00      	cmp	r3, #0
   3b2f6:	f6bf ae03 	bge.w	3af00 <ull_conn_rx+0x174>
		if (conn->lll.role ||
   3b2fa:	7f6b      	ldrb	r3, [r5, #29]
   3b2fc:	2b09      	cmp	r3, #9
   3b2fe:	f47f adff 	bne.w	3af00 <ull_conn_rx+0x174>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3b302:	4629      	mov	r1, r5
   3b304:	4620      	mov	r0, r4
}
   3b306:	b005      	add	sp, #20
   3b308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3b30c:	f7fe bd92 	b.w	39e34 <feature_rsp_send>
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   3b310:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b314:	2b00      	cmp	r3, #0
   3b316:	f6ff adf3 	blt.w	3af00 <ull_conn_rx+0x174>
   3b31a:	7f6b      	ldrb	r3, [r5, #29]
   3b31c:	2b03      	cmp	r3, #3
   3b31e:	f47f adef 	bne.w	3af00 <ull_conn_rx+0x174>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   3b322:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
					 conn->lll.phy_rx))) {
   3b326:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   3b32a:	f895 2020 	ldrb.w	r2, [r5, #32]
   3b32e:	430b      	orrs	r3, r1
   3b330:	f003 0307 	and.w	r3, r3, #7
   3b334:	4213      	tst	r3, r2
   3b336:	f43f ad8e 	beq.w	3ae56 <ull_conn_rx+0xca>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3b33a:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3b33e:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   3b342:	1a9b      	subs	r3, r3, r2
   3b344:	f003 0303 	and.w	r3, r3, #3
   3b348:	2b02      	cmp	r3, #2
   3b34a:	f43f ad84 	beq.w	3ae56 <ull_conn_rx+0xca>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   3b34e:	30f5      	adds	r0, #245	; 0xf5
   3b350:	f003 ff7c 	bl	3f24c <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   3b354:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.chan_map.initiate = 1U;
   3b358:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_CHAN_MAP;
   3b35c:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   3b35e:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   3b360:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3b364:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b368:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   3b36a:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b36e:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   3b370:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	int nack = 0;
   3b374:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b376:	7111      	strb	r1, [r2, #4]

		break;
   3b378:	e56e      	b.n	3ae58 <ull_conn_rx+0xcc>
		if (!conn->lll.role ||
   3b37a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b37e:	2b00      	cmp	r3, #0
   3b380:	f6bf adbe 	bge.w	3af00 <ull_conn_rx+0x174>
   3b384:	7f6b      	ldrb	r3, [r5, #29]
   3b386:	2b05      	cmp	r3, #5
   3b388:	f47f adba 	bne.w	3af00 <ull_conn_rx+0x174>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   3b38c:	f895 2020 	ldrb.w	r2, [r5, #32]
   3b390:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3b394:	4313      	orrs	r3, r2
   3b396:	f013 0307 	ands.w	r3, r3, #7
   3b39a:	f040 86db 	bne.w	3c154 <ull_conn_rx+0x13c8>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3b39e:	f890 11cc 	ldrb.w	r1, [r0, #460]	; 0x1cc
   3b3a2:	f890 21cd 	ldrb.w	r2, [r0, #461]	; 0x1cd
   3b3a6:	428a      	cmp	r2, r1
   3b3a8:	f43f ad53 	beq.w	3ae52 <ull_conn_rx+0xc6>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   3b3ac:	f890 21ce 	ldrb.w	r2, [r0, #462]	; 0x1ce
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3b3b0:	f002 0203 	and.w	r2, r2, #3
   3b3b4:	2a02      	cmp	r2, #2
   3b3b6:	f47f ad4c 	bne.w	3ae52 <ull_conn_rx+0xc6>
		conn->llcp_phy.pause_tx = 0U;
   3b3ba:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b3be:	f880 11cd 	strb.w	r1, [r0, #461]	; 0x1cd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b3c2:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
		conn->procedure_expire = 0U;
   3b3c6:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   3b3ca:	f363 0200 	bfi	r2, r3, #0, #1
   3b3ce:	f880 21cf 	strb.w	r2, [r0, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b3d2:	4608      	mov	r0, r1
   3b3d4:	f361 1006 	bfi	r0, r1, #4, #3
		if (!conn->llcp_phy.cmd) {
   3b3d8:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b3dc:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   3b3e0:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   3b3e4:	f040 877b 	bne.w	3c2de <ull_conn_rx+0x1552>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b3e8:	6833      	ldr	r3, [r6, #0]
   3b3ea:	2101      	movs	r1, #1
   3b3ec:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   3b3ee:	4610      	mov	r0, r2
   3b3f0:	e532      	b.n	3ae58 <ull_conn_rx+0xcc>
		if (conn->lll.role ||
   3b3f2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b3f6:	2b00      	cmp	r3, #0
   3b3f8:	f6ff ad82 	blt.w	3af00 <ull_conn_rx+0x174>
   3b3fc:	7f6b      	ldrb	r3, [r5, #29]
   3b3fe:	2b03      	cmp	r3, #3
   3b400:	f47f ad7e 	bne.w	3af00 <ull_conn_rx+0x174>
		if (!conn->lll.role &&
   3b404:	f890 21cd 	ldrb.w	r2, [r0, #461]	; 0x1cd
   3b408:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
   3b40c:	429a      	cmp	r2, r3
   3b40e:	f43f ad20 	beq.w	3ae52 <ull_conn_rx+0xc6>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3b412:	f890 21ce 	ldrb.w	r2, [r0, #462]	; 0x1ce
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3b416:	f002 0303 	and.w	r3, r2, #3
   3b41a:	2b02      	cmp	r3, #2
   3b41c:	f47f ad19 	bne.w	3ae52 <ull_conn_rx+0xc6>
			conn->llcp_phy.tx &= p->rx_phys;
   3b420:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3b424:	f3c2 0182 	ubfx	r1, r2, #2, #3
   3b428:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   3b42a:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3b42e:	009b      	lsls	r3, r3, #2
   3b430:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   3b434:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3b438:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b43c:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3b440:	f880 31ce 	strb.w	r3, [r0, #462]	; 0x1ce
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b444:	d002      	beq.n	3b44c <ull_conn_rx+0x6c0>
   3b446:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   3b44a:	d105      	bne.n	3b458 <ull_conn_rx+0x6cc>
				conn->llcp_phy.tx = 0;
   3b44c:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3b450:	f003 0303 	and.w	r3, r3, #3
   3b454:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			conn->llcp_phy.pause_tx = 1U;
   3b458:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3b45c:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   3b45e:	f043 0301 	orr.w	r3, r3, #1
   3b462:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3b466:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b46a:	e4f2      	b.n	3ae52 <ull_conn_rx+0xc6>
   3b46c:	20005cd8 	.word	0x20005cd8
   3b470:	20005c44 	.word	0x20005c44
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3b474:	7f6b      	ldrb	r3, [r5, #29]
   3b476:	2b03      	cmp	r3, #3
   3b478:	f47f ad42 	bne.w	3af00 <ull_conn_rx+0x174>
		if (!conn->lll.role) {
   3b47c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b480:	2b00      	cmp	r3, #0
   3b482:	f2c0 8488 	blt.w	3bd96 <ull_conn_rx+0x100a>
			if ((conn->llcp_phy.ack !=
   3b486:	f890 11cd 	ldrb.w	r1, [r0, #461]	; 0x1cd
			     conn->llcp_phy.req) &&
   3b48a:	f890 21cc 	ldrb.w	r2, [r0, #460]	; 0x1cc
			if ((conn->llcp_phy.ack !=
   3b48e:	4291      	cmp	r1, r2
   3b490:	d007      	beq.n	3b4a2 <ull_conn_rx+0x716>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3b492:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
   3b496:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   3b49a:	3b01      	subs	r3, #1
   3b49c:	2b02      	cmp	r3, #2
   3b49e:	f240 85e7 	bls.w	3c070 <ull_conn_rx+0x12e4>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3b4a2:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b4a6:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3b4aa:	1a1b      	subs	r3, r3, r0
   3b4ac:	f003 0303 	and.w	r3, r3, #3
   3b4b0:	2b02      	cmp	r3, #2
   3b4b2:	f000 8567 	beq.w	3bf84 <ull_conn_rx+0x11f8>
				     LLCP_ENCRYPTION)) ||
   3b4b6:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   3b4ba:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b4be:	4298      	cmp	r0, r3
   3b4c0:	f000 8585 	beq.w	3bfce <ull_conn_rx+0x1242>
				nack = reject_ext_ind_send(conn, *rx,
   3b4c4:	232a      	movs	r3, #42	; 0x2a
   3b4c6:	2216      	movs	r2, #22
   3b4c8:	e70b      	b.n	3b2e2 <ull_conn_rx+0x556>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   3b4ca:	7f6f      	ldrb	r7, [r5, #29]
   3b4cc:	2f01      	cmp	r7, #1
   3b4ce:	f47f ad17 	bne.w	3af00 <ull_conn_rx+0x174>
	if (conn->common.txn_lock) {
   3b4d2:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
   3b4d6:	f010 0602 	ands.w	r6, r0, #2
   3b4da:	f040 852a 	bne.w	3bf32 <ull_conn_rx+0x11a6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b4de:	48d2      	ldr	r0, [pc, #840]	; (3b828 <ull_conn_rx+0xa9c>)
   3b4e0:	f7f8 ffd8 	bl	34494 <mem_acquire>
	if (!tx) {
   3b4e4:	4601      	mov	r1, r0
   3b4e6:	2800      	cmp	r0, #0
   3b4e8:	f000 82b1 	beq.w	3ba4e <ull_conn_rx+0xcc2>
	conn->common.txn_lock = 1U;
   3b4ec:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3b4f0:	f043 0302 	orr.w	r3, r3, #2
   3b4f4:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b4f8:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   3b4fa:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b4fc:	f043 0303 	orr.w	r3, r3, #3
   3b500:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3b502:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   3b504:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3b506:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3b508:	f7fe fb00 	bl	39b0c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b50c:	712f      	strb	r7, [r5, #4]
	return 0;
   3b50e:	4630      	mov	r0, r6
   3b510:	e4a2      	b.n	3ae58 <ull_conn_rx+0xcc>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   3b512:	7f6a      	ldrb	r2, [r5, #29]
   3b514:	2a01      	cmp	r2, #1
   3b516:	f47f acf3 	bne.w	3af00 <ull_conn_rx+0x174>
		conn->procedure_expire = 0U;
   3b51a:	2300      	movs	r3, #0
   3b51c:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
	int nack = 0;
   3b520:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b522:	712a      	strb	r2, [r5, #4]
		break;
   3b524:	e498      	b.n	3ae58 <ull_conn_rx+0xcc>
		if (!conn->lll.role ||
   3b526:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b52a:	2b00      	cmp	r3, #0
   3b52c:	f6bf ace8 	bge.w	3af00 <ull_conn_rx+0x174>
   3b530:	7f6b      	ldrb	r3, [r5, #29]
   3b532:	2b0c      	cmp	r3, #12
   3b534:	f47f ace4 	bne.w	3af00 <ull_conn_rx+0x174>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   3b538:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   3b53c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   3b53e:	1acb      	subs	r3, r1, r3
   3b540:	041b      	lsls	r3, r3, #16
   3b542:	f100 8603 	bmi.w	3c14c <ull_conn_rx+0x13c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b546:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3b54a:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   3b54e:	1a9b      	subs	r3, r3, r2
   3b550:	f003 0303 	and.w	r3, r3, #3
   3b554:	2b02      	cmp	r3, #2
   3b556:	f000 85f1 	beq.w	3c13c <ull_conn_rx+0x13b0>
	if (!conn_upd_curr) {
   3b55a:	4bb4      	ldr	r3, [pc, #720]	; (3b82c <ull_conn_rx+0xaa0>)
   3b55c:	681a      	ldr	r2, [r3, #0]
   3b55e:	2a00      	cmp	r2, #0
   3b560:	f000 8670 	beq.w	3c244 <ull_conn_rx+0x14b8>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3b564:	f895 3020 	ldrb.w	r3, [r5, #32]
   3b568:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3b56c:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   3b570:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3b574:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   3b578:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3b57c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   3b580:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   3b584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   3b588:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   3b58c:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   3b590:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   3b594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   3b598:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3b59c:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3b5a0:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   3b5a4:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   3b5a8:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3b5ac:	f023 030f 	bic.w	r3, r3, #15
   3b5b0:	f043 0308 	orr.w	r3, r3, #8
   3b5b4:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	conn->llcp_cu.ack--;
   3b5b8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3b5bc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   3b5c0:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	conn->llcp_cu.ack--;
   3b5c4:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   3b5c6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   3b5ca:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	link->mem = conn->llcp_rx;
   3b5ce:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   3b5d0:	6832      	ldr	r2, [r6, #0]
   3b5d2:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   3b5d4:	6832      	ldr	r2, [r6, #0]
   3b5d6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	*rx = NULL;
   3b5da:	2300      	movs	r3, #0
   3b5dc:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3b5de:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b5e2:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b5e6:	4293      	cmp	r3, r2
   3b5e8:	d007      	beq.n	3b5fa <ull_conn_rx+0x86e>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   3b5ea:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3b5ee:	f003 030e 	and.w	r3, r3, #14
   3b5f2:	2b04      	cmp	r3, #4
   3b5f4:	d101      	bne.n	3b5fa <ull_conn_rx+0x86e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b5f6:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->procedure_expire = 0U;
   3b5fa:	2300      	movs	r3, #0
   3b5fc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3b600:	4618      	mov	r0, r3
		break;
   3b602:	e429      	b.n	3ae58 <ull_conn_rx+0xcc>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3b604:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b608:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b60c:	429a      	cmp	r2, r3
   3b60e:	f43f ac77 	beq.w	3af00 <ull_conn_rx+0x174>
   3b612:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3b616:	2a03      	cmp	r2, #3
   3b618:	f47f ac72 	bne.w	3af00 <ull_conn_rx+0x174>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3b61c:	7f6a      	ldrb	r2, [r5, #29]
   3b61e:	2a01      	cmp	r2, #1
   3b620:	f47f ac6e 	bne.w	3af00 <ull_conn_rx+0x174>
		if (conn->lll.role) {
   3b624:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3b628:	2a00      	cmp	r2, #0
   3b62a:	f2c0 8515 	blt.w	3c058 <ull_conn_rx+0x12cc>
			conn->llcp_enc.pause_rx = 0U;
   3b62e:	f894 c176 	ldrb.w	ip, [r4, #374]	; 0x176
			conn->llcp_ack = conn->llcp_req;
   3b632:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			conn->procedure_expire = 0U;
   3b636:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   3b638:	f02c 0c03 	bic.w	ip, ip, #3
   3b63c:	f884 c176 	strb.w	ip, [r4, #374]	; 0x176
			conn->procedure_expire = 0U;
   3b640:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   3b644:	f01c 0f04 	tst.w	ip, #4
   3b648:	f43f ac05 	beq.w	3ae56 <ull_conn_rx+0xca>
			conn->llcp_enc.refresh = 0U;
   3b64c:	f36f 0c82 	bfc	ip, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3b650:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   3b652:	f884 c176 	strb.w	ip, [r4, #374]	; 0x176
	int nack = 0;
   3b656:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3b658:	712b      	strb	r3, [r5, #4]
   3b65a:	f7ff bbfd 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   3b65e:	7f6b      	ldrb	r3, [r5, #29]
   3b660:	2b02      	cmp	r3, #2
   3b662:	f47f ac4d 	bne.w	3af00 <ull_conn_rx+0x174>
			    conn->llcp_conn_param.req) &&
   3b666:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
		} else if ((conn->llcp_conn_param.ack !=
   3b66a:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3b66e:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   3b672:	4288      	cmp	r0, r1
   3b674:	d002      	beq.n	3b67c <ull_conn_rx+0x8f0>
			    conn->llcp_conn_param.req) &&
   3b676:	2b0f      	cmp	r3, #15
   3b678:	f000 8410 	beq.w	3be9c <ull_conn_rx+0x1110>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3b67c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3b680:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3b684:	4291      	cmp	r1, r2
   3b686:	d002      	beq.n	3b68e <ull_conn_rx+0x902>
   3b688:	2b14      	cmp	r3, #20
   3b68a:	f000 8496 	beq.w	3bfba <ull_conn_rx+0x122e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   3b68e:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3b692:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3b696:	428a      	cmp	r2, r1
   3b698:	d002      	beq.n	3b6a0 <ull_conn_rx+0x914>
   3b69a:	2b16      	cmp	r3, #22
   3b69c:	f000 84ec 	beq.w	3c078 <ull_conn_rx+0x12ec>
			switch (llctrl->unknown_rsp.type) {
   3b6a0:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b6a2:	bf04      	itt	eq
   3b6a4:	2301      	moveq	r3, #1
   3b6a6:	712b      	strbeq	r3, [r5, #4]
				break;
   3b6a8:	e7a7      	b.n	3b5fa <ull_conn_rx+0x86e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   3b6aa:	7f6e      	ldrb	r6, [r5, #29]
   3b6ac:	2e06      	cmp	r6, #6
   3b6ae:	f47f ac27 	bne.w	3af00 <ull_conn_rx+0x174>
	if (!conn->llcp_version.tx) {
   3b6b2:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   3b6b6:	07da      	lsls	r2, r3, #31
   3b6b8:	f140 843f 	bpl.w	3bf3a <ull_conn_rx+0x11ae>
	} else if (!conn->llcp_version.rx) {
   3b6bc:	f013 0302 	ands.w	r3, r3, #2
   3b6c0:	f47f abc7 	bne.w	3ae52 <ull_conn_rx+0xc6>
		conn->llcp_version.ack = conn->llcp_version.req;
   3b6c4:	f890 2148 	ldrb.w	r2, [r0, #328]	; 0x148
   3b6c8:	f880 2149 	strb.w	r2, [r0, #329]	; 0x149
		conn->procedure_expire = 0U;
   3b6cc:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   3b6d0:	f895 3020 	ldrb.w	r3, [r5, #32]
   3b6d4:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3b6d8:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   3b6dc:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   3b6e0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3b6e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3b6e8:	f8a4 214c 	strh.w	r2, [r4, #332]	; 0x14c
		sys_le16_to_cpu(v->sub_version_number);
   3b6ec:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   3b6f0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   3b6f4:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   3b6f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   3b6fc:	f8a4 214e 	strh.w	r2, [r4, #334]	; 0x14e
	conn->llcp_version.rx = 1U;
   3b700:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
	return 0;
   3b704:	2000      	movs	r0, #0
   3b706:	f7ff bba7 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (!conn->lll.role ||
   3b70a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b70e:	2b00      	cmp	r3, #0
   3b710:	f6bf abf6 	bge.w	3af00 <ull_conn_rx+0x174>
   3b714:	7f6e      	ldrb	r6, [r5, #29]
   3b716:	2e01      	cmp	r6, #1
   3b718:	f47f abf2 	bne.w	3af00 <ull_conn_rx+0x174>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b71c:	4842      	ldr	r0, [pc, #264]	; (3b828 <ull_conn_rx+0xa9c>)
   3b71e:	f7f8 feb9 	bl	34494 <mem_acquire>
		if (!tx) {
   3b722:	2800      	cmp	r0, #0
   3b724:	f000 8193 	beq.w	3ba4e <ull_conn_rx+0xcc2>
	conn->llcp_enc.pause_rx = 1U;
   3b728:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3b72c:	f022 0205 	bic.w	r2, r2, #5
   3b730:	f042 0205 	orr.w	r2, r2, #5
   3b734:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3b738:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3b73c:	f36f 02c3 	bfc	r2, #3, #1
   3b740:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b744:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3b746:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b748:	f042 0203 	orr.w	r2, r2, #3
   3b74c:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   3b74e:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3b752:	210b      	movs	r1, #11
   3b754:	71c1      	strb	r1, [r0, #7]
	if (
   3b756:	2a00      	cmp	r2, #0
   3b758:	f000 81d3 	beq.w	3bb02 <ull_conn_rx+0xd76>
	    !conn->llcp_enc.pause_tx &&
   3b75c:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3b760:	078e      	lsls	r6, r1, #30
   3b762:	f100 81ce 	bmi.w	3bb02 <ull_conn_rx+0xd76>
	    !conn->llcp_phy.pause_tx &&
   3b766:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3b76a:	07c9      	lsls	r1, r1, #31
   3b76c:	f100 81c9 	bmi.w	3bb02 <ull_conn_rx+0xd76>
		if (conn->tx_head == conn->tx_data) {
   3b770:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3b774:	428a      	cmp	r2, r1
   3b776:	f000 85bf 	beq.w	3c2f8 <ull_conn_rx+0x156c>
		} else if (!conn->tx_ctrl) {
   3b77a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3b77e:	2900      	cmp	r1, #0
   3b780:	f000 86a9 	beq.w	3c4d6 <ull_conn_rx+0x174a>
	tx->next = conn->tx_ctrl_last->next;
   3b784:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3b788:	6811      	ldr	r1, [r2, #0]
   3b78a:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3b78c:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   3b78e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3b792:	6802      	ldr	r2, [r0, #0]
   3b794:	2a00      	cmp	r2, #0
   3b796:	f47f ab5c 	bne.w	3ae52 <ull_conn_rx+0xc6>
   3b79a:	f7ff bbeb 	b.w	3af74 <ull_conn_rx+0x1e8>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   3b79e:	7f6b      	ldrb	r3, [r5, #29]
   3b7a0:	2b09      	cmp	r3, #9
   3b7a2:	f47f abad 	bne.w	3af00 <ull_conn_rx+0x174>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3b7a6:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   3b7a8:	4921      	ldr	r1, [pc, #132]	; (3b830 <ull_conn_rx+0xaa4>)
   3b7aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3b7ac:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3b7ae:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   3b7b2:	400a      	ands	r2, r1
   3b7b4:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   3b7b8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3b7bc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   3b7c0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3b7c4:	4013      	ands	r3, r2
   3b7c6:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
   3b7ca:	6a2e      	ldr	r6, [r5, #32]
   3b7cc:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   3b7ce:	f7fb ffa1 	bl	37714 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3b7d2:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3b7d6:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   3b7da:	4a15      	ldr	r2, [pc, #84]	; (3b830 <ull_conn_rx+0xaa4>)
	conn->llcp_feature.features_peer =
   3b7dc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->common.fex_valid = 1U;
   3b7e0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   3b7e4:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   3b7e6:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   3b7ea:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   3b7ec:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_feature.ack = conn->llcp_feature.req;
   3b7f0:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3b7f4:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	feat_result &= 0xFF;
   3b7f8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   3b7fc:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   3b800:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3b802:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   3b806:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3b808:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   3b80c:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
	conn->procedure_expire = 0U;
   3b810:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3b814:	4618      	mov	r0, r3
}
   3b816:	f7ff bb1f 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (conn->lll.role ||
   3b81a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b81e:	2b00      	cmp	r3, #0
   3b820:	f6bf ad6b 	bge.w	3b2fa <ull_conn_rx+0x56e>
   3b824:	f7ff bb6c 	b.w	3af00 <ull_conn_rx+0x174>
   3b828:	20005cd8 	.word	0x20005cd8
   3b82c:	20005c44 	.word	0x20005c44
   3b830:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   3b834:	7f6b      	ldrb	r3, [r5, #29]
   3b836:	2b02      	cmp	r3, #2
   3b838:	f47f ab62 	bne.w	3af00 <ull_conn_rx+0x174>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   3b83c:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   3b840:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b844:	428b      	cmp	r3, r1
   3b846:	d004      	beq.n	3b852 <ull_conn_rx+0xac6>
   3b848:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b84c:	2b03      	cmp	r3, #3
   3b84e:	f000 8437 	beq.w	3c0c0 <ull_conn_rx+0x1334>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3b852:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3b856:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3b85a:	428b      	cmp	r3, r1
   3b85c:	f000 8277 	beq.w	3bd4e <ull_conn_rx+0xfc2>
		rej_ext_ind->error_code = rej_ind->error_code;
   3b860:	f895 2020 	ldrb.w	r2, [r5, #32]
   3b864:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b868:	2a23      	cmp	r2, #35	; 0x23
   3b86a:	d012      	beq.n	3b892 <ull_conn_rx+0xb06>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b86c:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3b870:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b874:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3b878:	f36f 0100 	bfc	r1, #0, #1
   3b87c:	f884 11cf 	strb.w	r1, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3b880:	2100      	movs	r1, #0
   3b882:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b886:	f3c3 0102 	ubfx	r1, r3, #0, #3
   3b88a:	f361 1306 	bfi	r3, r1, #4, #3
   3b88e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3b892:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3b896:	075e      	lsls	r6, r3, #29
   3b898:	f57f aadb 	bpl.w	3ae52 <ull_conn_rx+0xc6>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b89c:	231c      	movs	r3, #28
   3b89e:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   3b8a0:	772a      	strb	r2, [r5, #28]
	p->tx = conn->lll.phy_tx;
   3b8a2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   3b8a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3b8aa:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   3b8ac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3b8b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   3b8b4:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   3b8b6:	77ab      	strb	r3, [r5, #30]
	if (err) {
   3b8b8:	f7ff bace 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (conn->lll.role ||
   3b8bc:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b8c0:	2b00      	cmp	r3, #0
   3b8c2:	f6bf abcb 	bge.w	3b05c <ull_conn_rx+0x2d0>
   3b8c6:	f7ff bb1b 	b.w	3af00 <ull_conn_rx+0x174>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   3b8ca:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b8ce:	2b00      	cmp	r3, #0
   3b8d0:	f6ff ab16 	blt.w	3af00 <ull_conn_rx+0x174>
   3b8d4:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b8d8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b8dc:	429a      	cmp	r2, r3
   3b8de:	f43f ab0f 	beq.w	3af00 <ull_conn_rx+0x174>
   3b8e2:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b8e6:	2b03      	cmp	r3, #3
   3b8e8:	f47f ab0a 	bne.w	3af00 <ull_conn_rx+0x174>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3b8ec:	7f6b      	ldrb	r3, [r5, #29]
   3b8ee:	2b01      	cmp	r3, #1
   3b8f0:	f47f ab06 	bne.w	3af00 <ull_conn_rx+0x174>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b8f4:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
   3b8f8:	f36f 0201 	bfc	r2, #0, #2
   3b8fc:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
	int nack = 0;
   3b900:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b902:	712b      	strb	r3, [r5, #4]
		break;
   3b904:	f7ff baa8 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b908:	7f6b      	ldrb	r3, [r5, #29]
   3b90a:	2b01      	cmp	r3, #1
   3b90c:	f47f aaf8 	bne.w	3af00 <ull_conn_rx+0x174>
	} else if (!conn->lll.role) {
   3b910:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3b914:	2b00      	cmp	r3, #0
   3b916:	f280 80a2 	bge.w	3ba5e <ull_conn_rx+0xcd2>
		conn->lll.enc_tx = 0;
   3b91a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3b91e:	f36f 1304 	bfc	r3, #4, #1
   3b922:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   3b926:	f7ff ba94 	b.w	3ae52 <ull_conn_rx+0xc6>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   3b92a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3b92e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   3b932:	4293      	cmp	r3, r2
   3b934:	f43f aa8d 	beq.w	3ae52 <ull_conn_rx+0xc6>
	conn->procedure_expire = 0U;
   3b938:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b93a:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   3b93c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
	conn->procedure_expire = 0U;
   3b940:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b944:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b946:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b94a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b94e:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b950:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3b952:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b956:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b958:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   3b95c:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b95e:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3b960:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   3b962:	4618      	mov	r0, r3
   3b964:	f7ff ba78 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b968:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3b96c:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   3b970:	4299      	cmp	r1, r3
   3b972:	f43f aa6e 	beq.w	3ae52 <ull_conn_rx+0xc6>
	if (!lll->role && (rej_ext_ind->error_code ==
   3b976:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   3b97a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   3b97e:	2800      	cmp	r0, #0
   3b980:	f2c0 8592 	blt.w	3c4a8 <ull_conn_rx+0x171c>
   3b984:	291a      	cmp	r1, #26
   3b986:	f000 85c4 	beq.w	3c512 <ull_conn_rx+0x1786>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3b98a:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
   3b98e:	f001 000f 	and.w	r0, r1, #15
   3b992:	2804      	cmp	r0, #4
   3b994:	d106      	bne.n	3b9a4 <ull_conn_rx+0xc18>
	conn_upd_curr = NULL;
   3b996:	48a4      	ldr	r0, [pc, #656]	; (3bc28 <ull_conn_rx+0xe9c>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b998:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3b99c:	2300      	movs	r3, #0
   3b99e:	6003      	str	r3, [r0, #0]
		conn->procedure_expire = 0U;
   3b9a0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3b9a4:	06c8      	lsls	r0, r1, #27
   3b9a6:	f57f aa54 	bpl.w	3ae52 <ull_conn_rx+0xc6>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b9aa:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b9ac:	07d1      	lsls	r1, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b9ae:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b9b0:	f100 845a 	bmi.w	3c268 <ull_conn_rx+0x14dc>
	cu->status = rej_ext_ind->error_code;
   3b9b4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3b9b8:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   3b9ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   3b9bc:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   3b9c0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   3b9c2:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   3b9c4:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   3b9c6:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   3b9ca:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   3b9ce:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   3b9d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3b9d4:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   3b9d8:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   3b9da:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   3b9dc:	f7ff ba3c 	b.w	3ae58 <ull_conn_rx+0xcc>
		if ((conn->llcp_ack != conn->llcp_req) &&
   3b9e0:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   3b9e4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b9e8:	428b      	cmp	r3, r1
   3b9ea:	f43f aa32 	beq.w	3ae52 <ull_conn_rx+0xc6>
   3b9ee:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b9f2:	2b03      	cmp	r3, #3
   3b9f4:	f47f aa2d 	bne.w	3ae52 <ull_conn_rx+0xc6>
	conn->llcp_enc.pause_rx = 0U;
   3b9f8:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b9fc:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	conn->procedure_expire = 0U;
   3ba00:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   3ba02:	f022 0203 	bic.w	r2, r2, #3
   3ba06:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3ba0a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   3ba0e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   3ba12:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3ba16:	210d      	movs	r1, #13
   3ba18:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   3ba1a:	4618      	mov	r0, r3
   3ba1c:	f7ff ba1c 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3ba20:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3ba24:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3ba28:	428b      	cmp	r3, r1
   3ba2a:	f43f aa12 	beq.w	3ae52 <ull_conn_rx+0xc6>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3ba2e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   3ba32:	2a23      	cmp	r2, #35	; 0x23
   3ba34:	f47f af1a 	bne.w	3b86c <ull_conn_rx+0xae0>
   3ba38:	e72b      	b.n	3b892 <ull_conn_rx+0xb06>
			tx->next = conn->tx_head;
   3ba3a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3ba3c:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ba40:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ba44:	2a00      	cmp	r2, #0
   3ba46:	f47f aa04 	bne.w	3ae52 <ull_conn_rx+0xc6>
   3ba4a:	f7ff ba93 	b.w	3af74 <ull_conn_rx+0x1e8>
			return -ENOBUFS;
   3ba4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3ba52:	f7ff ba01 	b.w	3ae58 <ull_conn_rx+0xcc>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3ba56:	7f6b      	ldrb	r3, [r5, #29]
   3ba58:	2b01      	cmp	r3, #1
   3ba5a:	f47f aa51 	bne.w	3af00 <ull_conn_rx+0x174>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ba5e:	4873      	ldr	r0, [pc, #460]	; (3bc2c <ull_conn_rx+0xea0>)
   3ba60:	f7f8 fd18 	bl	34494 <mem_acquire>
		if (!tx) {
   3ba64:	2800      	cmp	r0, #0
   3ba66:	d0f2      	beq.n	3ba4e <ull_conn_rx+0xcc2>
	conn->llcp_enc.pause_rx = 1U;
   3ba68:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3ba6c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   3ba70:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   3ba74:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   3ba78:	f884 1176 	strb.w	r1, [r4, #374]	; 0x176
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3ba7c:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   3ba7e:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ba82:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3ba84:	7141      	strb	r1, [r0, #5]
   3ba86:	e65f      	b.n	3b748 <ull_conn_rx+0x9bc>
			conn->tx_data = conn->tx_data->next;
   3ba88:	6813      	ldr	r3, [r2, #0]
   3ba8a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3ba8e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3ba92:	2b00      	cmp	r3, #0
   3ba94:	f47f aa63 	bne.w	3af5e <ull_conn_rx+0x1d2>
			tx->next = conn->tx_head->next;
   3ba98:	6813      	ldr	r3, [r2, #0]
   3ba9a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3ba9c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3ba9e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   3baa0:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3baa4:	2a00      	cmp	r2, #0
   3baa6:	f47f a9d4 	bne.w	3ae52 <ull_conn_rx+0xc6>
   3baaa:	f7ff ba63 	b.w	3af74 <ull_conn_rx+0x1e8>
		if (!conn->lll.role) {
   3baae:	f994 6039 	ldrsb.w	r6, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   3bab2:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
					conn->llcp_conn_param.ack) &&
   3bab6:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
		if (!conn->lll.role) {
   3baba:	2e00      	cmp	r6, #0
   3babc:	f2c0 80b8 	blt.w	3bc30 <ull_conn_rx+0xea4>
			if ((conn->llcp_conn_param.req !=
   3bac0:	428a      	cmp	r2, r1
   3bac2:	d00a      	beq.n	3bada <ull_conn_rx+0xd4e>
			    ((conn->llcp_conn_param.state ==
   3bac4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
					conn->llcp_conn_param.ack) &&
   3bac8:	f012 0f0b 	tst.w	r2, #11
   3bacc:	f000 8272 	beq.w	3bfb4 <ull_conn_rx+0x1228>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   3bad0:	f002 020f 	and.w	r2, r2, #15
   3bad4:	2a06      	cmp	r2, #6
   3bad6:	f000 826d 	beq.w	3bfb4 <ull_conn_rx+0x1228>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3bada:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3bade:	f894 60f1 	ldrb.w	r6, [r4, #241]	; 0xf1
   3bae2:	1b92      	subs	r2, r2, r6
   3bae4:	f002 0203 	and.w	r2, r2, #3
   3bae8:	2a02      	cmp	r2, #2
   3baea:	f000 83cc 	beq.w	3c286 <ull_conn_rx+0x14fa>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   3baee:	f894 61cc 	ldrb.w	r6, [r4, #460]	; 0x1cc
   3baf2:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3baf6:	4296      	cmp	r6, r2
   3baf8:	f000 8426 	beq.w	3c348 <ull_conn_rx+0x15bc>
				nack = reject_ext_ind_send(conn, *rx,
   3bafc:	232a      	movs	r3, #42	; 0x2a
   3bafe:	f7ff bbef 	b.w	3b2e0 <ull_conn_rx+0x554>
		if (!conn->tx_ctrl) {
   3bb02:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3bb06:	2900      	cmp	r1, #0
   3bb08:	f47f ae3c 	bne.w	3b784 <ull_conn_rx+0x9f8>
			tx->next = conn->tx_head;
   3bb0c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3bb0e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3bb12:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3bb16:	e63c      	b.n	3b792 <ull_conn_rx+0xa06>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3bb18:	7f6b      	ldrb	r3, [r5, #29]
   3bb1a:	2b01      	cmp	r3, #1
   3bb1c:	f47f a9f0 	bne.w	3af00 <ull_conn_rx+0x174>
   3bb20:	e6fb      	b.n	3b91a <ull_conn_rx+0xb8e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bb22:	7913      	ldrb	r3, [r2, #4]
   3bb24:	f003 0303 	and.w	r3, r3, #3
   3bb28:	2b03      	cmp	r3, #3
   3bb2a:	f000 823b 	beq.w	3bfa4 <ull_conn_rx+0x1218>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3bb2e:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   3bb32:	f7ff ba16 	b.w	3af62 <ull_conn_rx+0x1d6>
	if (conn->common.txn_lock) {
   3bb36:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
   3bb3a:	079b      	lsls	r3, r3, #30
   3bb3c:	f53f a989 	bmi.w	3ae52 <ull_conn_rx+0xc6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3bb40:	483a      	ldr	r0, [pc, #232]	; (3bc2c <ull_conn_rx+0xea0>)
   3bb42:	f7f8 fca7 	bl	34494 <mem_acquire>
	if (!tx) {
   3bb46:	4603      	mov	r3, r0
   3bb48:	2800      	cmp	r0, #0
   3bb4a:	d080      	beq.n	3ba4e <ull_conn_rx+0xcc2>
	conn->common.txn_lock = 1U;
   3bb4c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3bb50:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
	eff_rx_octets = conn->lll.max_rx_octets;
   3bb54:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   3bb58:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3bb5c:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3bb60:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   3bb64:	f042 0202 	orr.w	r2, r2, #2
   3bb68:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3bb6c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3bb70:	428a      	cmp	r2, r1
   3bb72:	f040 84c6 	bne.w	3c502 <ull_conn_rx+0x1776>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3bb76:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3bb78:	291a      	cmp	r1, #26
   3bb7a:	f240 826b 	bls.w	3c054 <ull_conn_rx+0x12c8>
			eff_tx_octets = MIN(max_rx_octets,
   3bb7e:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   3bb82:	4281      	cmp	r1, r0
   3bb84:	bf28      	it	cs
   3bb86:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3bb88:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   3bb8a:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   3bb8e:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3bb90:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   3bb92:	bf34      	ite	cc
   3bb94:	46c6      	movcc	lr, r8
   3bb96:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   3bb9a:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   3bb9e:	bf34      	ite	cc
   3bba0:	4658      	movcc	r0, fp
   3bba2:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   3bba6:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   3bbaa:	bf34      	ite	cc
   3bbac:	46d4      	movcc	ip, sl
   3bbae:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3bbb2:	45c6      	cmp	lr, r8
   3bbb4:	f000 829c 	beq.w	3c0f0 <ull_conn_rx+0x1364>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3bbb8:	3a01      	subs	r2, #1
   3bbba:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.rx_octets = eff_rx_octets;
   3bbbe:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
			conn->llcp_length.tx_octets = eff_tx_octets;
   3bbc2:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
			conn->llcp_length.rx_time = eff_rx_time;
   3bbc6:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
			conn->llcp_length.tx_time = eff_tx_time;
   3bbca:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
			if (tx) {
   3bbce:	2b00      	cmp	r3, #0
   3bbd0:	f000 835f 	beq.w	3c292 <ull_conn_rx+0x1506>
				conn->llcp_length.state =
   3bbd4:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   3bbd8:	2505      	movs	r5, #5
   3bbda:	f365 0202 	bfi	r2, r5, #0, #3
   3bbde:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3bbe2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3bbe6:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   3bbe8:	6832      	ldr	r2, [r6, #0]
   3bbea:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   3bbec:	6832      	ldr	r2, [r6, #0]
   3bbee:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
			*rx = NULL;
   3bbf2:	2200      	movs	r2, #0
   3bbf4:	6032      	str	r2, [r6, #0]
	if (tx) {
   3bbf6:	2b00      	cmp	r3, #0
   3bbf8:	f43f a92d 	beq.w	3ae56 <ull_conn_rx+0xca>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bbfc:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3bbfe:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bc00:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   3bc04:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bc06:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3bc08:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3bc0a:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   3bc0c:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   3bc0e:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3bc12:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   3bc16:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3bc18:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3bc1a:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3bc1c:	f7fd ff76 	bl	39b0c <ctrl_tx_sec_enqueue>
	return 0;
   3bc20:	2000      	movs	r0, #0
}
   3bc22:	f7ff b919 	b.w	3ae58 <ull_conn_rx+0xcc>
   3bc26:	bf00      	nop
   3bc28:	20005c44 	.word	0x20005c44
   3bc2c:	20005cd8 	.word	0x20005cd8
		} else if ((conn->llcp_conn_param.req ==
   3bc30:	428a      	cmp	r2, r1
   3bc32:	d005      	beq.n	3bc40 <ull_conn_rx+0xeb4>
			    conn->llcp_conn_param.ack) ||
   3bc34:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3bc38:	f012 0f0b 	tst.w	r2, #11
   3bc3c:	f47f a909 	bne.w	3ae52 <ull_conn_rx+0xc6>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3bc40:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   3bc44:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3bc48:	2a05      	cmp	r2, #5
   3bc4a:	d97d      	bls.n	3bd48 <ull_conn_rx+0xfbc>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3bc4c:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   3bc50:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3bc54:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   3bc58:	d876      	bhi.n	3bd48 <ull_conn_rx+0xfbc>
			    (interval_max > 3200) ||
   3bc5a:	42b2      	cmp	r2, r6
   3bc5c:	d874      	bhi.n	3bd48 <ull_conn_rx+0xfbc>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3bc5e:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   3bc62:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   3bc66:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   3bc6a:	d26d      	bcs.n	3bd48 <ull_conn_rx+0xfbc>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3bc6c:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   3bc70:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   3bc74:	f1a2 070a 	sub.w	r7, r2, #10
   3bc78:	f640 4b76 	movw	fp, #3190	; 0xc76
   3bc7c:	b2bf      	uxth	r7, r7
   3bc7e:	455f      	cmp	r7, fp
   3bc80:	d862      	bhi.n	3bd48 <ull_conn_rx+0xfbc>
			     ((latency + 1) * interval_max)) ||
   3bc82:	f10c 0701 	add.w	r7, ip, #1
   3bc86:	b2bf      	uxth	r7, r7
   3bc88:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   3bc8c:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   3bc90:	d25a      	bcs.n	3bd48 <ull_conn_rx+0xfbc>
			     ((latency + 1) * interval_max)) ||
   3bc92:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   3bc96:	455e      	cmp	r6, fp
   3bc98:	d356      	bcc.n	3bd48 <ull_conn_rx+0xfbc>
			conn->llcp_conn_param.interval_min = interval_min;
   3bc9a:	f8a4 a198 	strh.w	sl, [r4, #408]	; 0x198
			conn->llcp_conn_param.interval_max = interval_max;
   3bc9e:	f8a4 919a 	strh.w	r9, [r4, #410]	; 0x19a
			conn->llcp_conn_param.latency =	latency;
   3bca2:	f8a4 819c 	strh.w	r8, [r4, #412]	; 0x19c
			conn->llcp_conn_param.timeout =	timeout;
   3bca6:	f8a4 e19e 	strh.w	lr, [r4, #414]	; 0x19e
			conn->llcp_conn_param.preferred_periodicity =
   3bcaa:	f884 b1a0 	strb.w	fp, [r4, #416]	; 0x1a0
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3bcae:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   3bcb2:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   3bcb6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   3bcba:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset0);
   3bcbe:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   3bcc2:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   3bcc6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   3bcca:	f8a4 71a4 	strh.w	r7, [r4, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset1);
   3bcce:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   3bcd2:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   3bcd6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   3bcda:	f8a4 71a6 	strh.w	r7, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset2);
   3bcde:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   3bce2:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   3bce6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   3bcea:	f8a4 71a8 	strh.w	r7, [r4, #424]	; 0x1a8
				sys_le16_to_cpu(cpr->offset3);
   3bcee:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   3bcf2:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   3bcf6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   3bcfa:	f8a4 71aa 	strh.w	r7, [r4, #426]	; 0x1aa
				sys_le16_to_cpu(cpr->offset4);
   3bcfe:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   3bd02:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   3bd06:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   3bd0a:	f8a4 71ac 	strh.w	r7, [r4, #428]	; 0x1ac
				sys_le16_to_cpu(cpr->offset5);
   3bd0e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   3bd12:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   3bd16:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   3bd1a:	f8a4 71ae 	strh.w	r7, [r4, #430]	; 0x1ae
			     lll->interval) ||
   3bd1e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   3bd20:	42be      	cmp	r6, r7
   3bd22:	f000 847c 	beq.w	3c61e <ull_conn_rx+0x1892>
				conn->llcp_conn_param.state =
   3bd26:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3bd2a:	2503      	movs	r5, #3
   3bd2c:	f365 0203 	bfi	r2, r5, #0, #4
   3bd30:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
			conn->llcp_conn_param.ack--;
   3bd34:	3901      	subs	r1, #1
   3bd36:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
	if (!conn_upd_curr) {
   3bd3a:	2b00      	cmp	r3, #0
   3bd3c:	f47f a88b 	bne.w	3ae56 <ull_conn_rx+0xca>
		conn_upd_curr = conn;
   3bd40:	6004      	str	r4, [r0, #0]
	int nack = 0;
   3bd42:	4618      	mov	r0, r3
   3bd44:	f7ff b888 	b.w	3ae58 <ull_conn_rx+0xcc>
				nack = reject_ext_ind_send(conn, *rx,
   3bd48:	231e      	movs	r3, #30
   3bd4a:	f7ff bac9 	b.w	3b2e0 <ull_conn_rx+0x554>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3bd4e:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3bd52:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3bd56:	428b      	cmp	r3, r1
   3bd58:	f43f ade7 	beq.w	3b92a <ull_conn_rx+0xb9e>
		rej_ext_ind->error_code = rej_ind->error_code;
   3bd5c:	f895 3020 	ldrb.w	r3, [r5, #32]
   3bd60:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   3bd64:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   3bd68:	2800      	cmp	r0, #0
   3bd6a:	f2c0 8377 	blt.w	3c45c <ull_conn_rx+0x16d0>
   3bd6e:	2b1a      	cmp	r3, #26
   3bd70:	f000 83cf 	beq.w	3c512 <ull_conn_rx+0x1786>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3bd74:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3bd78:	f003 000f 	and.w	r0, r3, #15
   3bd7c:	2804      	cmp	r0, #4
   3bd7e:	d106      	bne.n	3bd8e <ull_conn_rx+0x1002>
	conn_upd_curr = NULL;
   3bd80:	48d6      	ldr	r0, [pc, #856]	; (3c0dc <ull_conn_rx+0x1350>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3bd82:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3bd86:	2100      	movs	r1, #0
   3bd88:	6001      	str	r1, [r0, #0]
		conn->procedure_expire = 0U;
   3bd8a:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3bd8e:	06df      	lsls	r7, r3, #27
   3bd90:	f57f a85f 	bpl.w	3ae52 <ull_conn_rx+0xc6>
   3bd94:	e609      	b.n	3b9aa <ull_conn_rx+0xc1e>
	if (conn->common.txn_lock) {
   3bd96:	f890 70e4 	ldrb.w	r7, [r0, #228]	; 0xe4
   3bd9a:	f017 0702 	ands.w	r7, r7, #2
   3bd9e:	f47f a858 	bne.w	3ae52 <ull_conn_rx+0xc6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3bda2:	48cf      	ldr	r0, [pc, #828]	; (3c0e0 <ull_conn_rx+0x1354>)
   3bda4:	f7f8 fb76 	bl	34494 <mem_acquire>
	if (!tx) {
   3bda8:	4602      	mov	r2, r0
   3bdaa:	2800      	cmp	r0, #0
   3bdac:	f43f ae4f 	beq.w	3ba4e <ull_conn_rx+0xcc2>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3bdb0:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->common.txn_lock = 1U;
   3bdb4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	if (conn->llcp_phy.ack ==
   3bdb8:	f894 e1cd 	ldrb.w	lr, [r4, #461]	; 0x1cd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3bdbc:	2002      	movs	r0, #2
   3bdbe:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   3bdc2:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3bdc6:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
	if (conn->llcp_phy.ack ==
   3bdca:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
	conn->common.txn_lock = 1U;
   3bdce:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
			conn->phy_pref_tx;
   3bdd2:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
	if (conn->llcp_phy.ack ==
   3bdd6:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   3bdd8:	f3c3 0602 	ubfx	r6, r3, #0, #3
   3bddc:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   3bde0:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   3bde4:	d114      	bne.n	3be10 <ull_conn_rx+0x1084>
		conn->llcp_phy.ack--;
   3bde6:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   3bde8:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack--;
   3bdec:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.tx =
   3bdf0:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
		conn->llcp_phy.cmd = 0U;
   3bdf4:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   3bdf8:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   3bdfc:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   3be00:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		conn->procedure_expire =
   3be04:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   3be08:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
		conn->procedure_expire =
   3be0c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   3be10:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->llcp_phy.tx &= p->rx_phys;
   3be14:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   3be18:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   3be1c:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   3be20:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   3be24:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   3be28:	009b      	lsls	r3, r3, #2
   3be2a:	f001 0103 	and.w	r1, r1, #3
   3be2e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   3be32:	430b      	orrs	r3, r1
   3be34:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3be38:	2303      	movs	r3, #3
   3be3a:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3be3c:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3be3e:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   3be40:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3be44:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3be46:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3be48:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3be4c:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   3be4e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3be52:	7110      	strb	r0, [r2, #4]
	if (
   3be54:	2b00      	cmp	r3, #0
   3be56:	f000 809c 	beq.w	3bf92 <ull_conn_rx+0x1206>
	    !conn->llcp_enc.pause_tx &&
   3be5a:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   3be5e:	0786      	lsls	r6, r0, #30
   3be60:	f100 8097 	bmi.w	3bf92 <ull_conn_rx+0x1206>
	    !conn->llcp_phy.pause_tx &&
   3be64:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   3be68:	07c0      	lsls	r0, r0, #31
   3be6a:	f100 8092 	bmi.w	3bf92 <ull_conn_rx+0x1206>
		if (conn->tx_head == conn->tx_data) {
   3be6e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   3be72:	4283      	cmp	r3, r0
   3be74:	f000 8339 	beq.w	3c4ea <ull_conn_rx+0x175e>
		} else if (!conn->tx_ctrl) {
   3be78:	2900      	cmp	r1, #0
   3be7a:	f000 839f 	beq.w	3c5bc <ull_conn_rx+0x1830>
	tx->next = conn->tx_ctrl_last->next;
   3be7e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3be82:	6819      	ldr	r1, [r3, #0]
   3be84:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   3be86:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   3be88:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3be8c:	6813      	ldr	r3, [r2, #0]
   3be8e:	2b00      	cmp	r3, #0
   3be90:	f47e afdf 	bne.w	3ae52 <ull_conn_rx+0xc6>
		conn->tx_data_last = tx;
   3be94:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3be98:	f7fe bfdb 	b.w	3ae52 <ull_conn_rx+0xc6>
			conn->llcp_conn_param.disabled = 1U;
   3be9c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3bea0:	f043 0320 	orr.w	r3, r3, #32
   3bea4:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->lll.role) {
   3bea8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3beac:	2b00      	cmp	r3, #0
   3beae:	f2c0 81cc 	blt.w	3c24a <ull_conn_rx+0x14be>
				LL_ASSERT(conn->llcp_cu.req ==
   3beb2:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3beb6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3beba:	429a      	cmp	r2, r3
   3bebc:	d00e      	beq.n	3bedc <ull_conn_rx+0x1150>
   3bebe:	4a89      	ldr	r2, [pc, #548]	; (3c0e4 <ull_conn_rx+0x1358>)
   3bec0:	4989      	ldr	r1, [pc, #548]	; (3c0e8 <ull_conn_rx+0x135c>)
   3bec2:	488a      	ldr	r0, [pc, #552]	; (3c0ec <ull_conn_rx+0x1360>)
   3bec4:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   3bec8:	f00e faed 	bl	4a4a6 <printk>
   3becc:	4040      	eors	r0, r0
   3bece:	f380 8811 	msr	BASEPRI, r0
   3bed2:	f04f 0003 	mov.w	r0, #3
   3bed6:	df02      	svc	2
   3bed8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
				conn->llcp_conn_param.state =
   3bedc:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3bee0:	2106      	movs	r1, #6
   3bee2:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   3bee6:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   3bee8:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   3beea:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
				conn->llcp_cu.win_size = 1U;
   3beee:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bef2:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   3bef4:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3bef8:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3befc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
   3bf00:	00db      	lsls	r3, r3, #3
   3bf02:	f022 020f 	bic.w	r2, r2, #15
   3bf06:	430b      	orrs	r3, r1
   3bf08:	4313      	orrs	r3, r2
   3bf0a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
				conn->llcp_cu.latency =
   3bf0e:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
				conn->llcp_cu.interval =
   3bf12:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
				conn->llcp_cu.latency =
   3bf16:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
				conn->llcp_cu.win_offset_us = 0U;
   3bf1a:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   3bf1c:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
				conn->llcp_cu.interval =
   3bf20:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
				conn->llcp_cu.timeout =
   3bf24:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
				conn->llcp_cu.win_offset_us = 0U;
   3bf28:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bf2c:	7129      	strb	r1, [r5, #4]
				break;
   3bf2e:	f7fe bf93 	b.w	3ae58 <ull_conn_rx+0xcc>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3bf32:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   3bf34:	2000      	movs	r0, #0
   3bf36:	f7fe bf8f 	b.w	3ae58 <ull_conn_rx+0xcc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3bf3a:	4869      	ldr	r0, [pc, #420]	; (3c0e0 <ull_conn_rx+0x1354>)
   3bf3c:	f7f8 faaa 	bl	34494 <mem_acquire>
		if (!tx) {
   3bf40:	4601      	mov	r1, r0
   3bf42:	2800      	cmp	r0, #0
   3bf44:	f43f ad83 	beq.w	3ba4e <ull_conn_rx+0xcc2>
		conn->llcp_version.tx = 1U;
   3bf48:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3bf4c:	f043 0301 	orr.w	r3, r3, #1
   3bf50:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bf54:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   3bf56:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3bf58:	220c      	movs	r2, #12
   3bf5a:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   3bf5c:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bf5e:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3bf62:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bf66:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3bf68:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   3bf6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3bf6e:	2205      	movs	r2, #5
		v->sub_version_number =
   3bf70:	72c3      	strb	r3, [r0, #11]
   3bf72:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3bf74:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   3bf76:	4620      	mov	r0, r4
   3bf78:	f7fd fdc8 	bl	39b0c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3bf7c:	2301      	movs	r3, #1
   3bf7e:	712b      	strb	r3, [r5, #4]
   3bf80:	f7ff bba6 	b.w	3b6d0 <ull_conn_rx+0x944>
				      0x03) == 0x02) &&
   3bf84:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3bf88:	2b03      	cmp	r3, #3
   3bf8a:	f47f aa9b 	bne.w	3b4c4 <ull_conn_rx+0x738>
   3bf8e:	f7ff ba92 	b.w	3b4b6 <ull_conn_rx+0x72a>
		if (!conn->tx_ctrl) {
   3bf92:	2900      	cmp	r1, #0
   3bf94:	f47f af73 	bne.w	3be7e <ull_conn_rx+0x10f2>
			tx->next = conn->tx_head;
   3bf98:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3bf9a:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3bf9e:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
   3bfa2:	e773      	b.n	3be8c <ull_conn_rx+0x1100>
	    ((pdu_data_tx->llctrl.opcode !=
   3bfa4:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bfa6:	2b03      	cmp	r3, #3
   3bfa8:	f43f ad76 	beq.w	3ba98 <ull_conn_rx+0xd0c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3bfac:	2b0a      	cmp	r3, #10
   3bfae:	f47f adbe 	bne.w	3bb2e <ull_conn_rx+0xda2>
   3bfb2:	e571      	b.n	3ba98 <ull_conn_rx+0xd0c>
				nack = reject_ext_ind_send(conn, *rx,
   3bfb4:	2323      	movs	r3, #35	; 0x23
   3bfb6:	f7ff b993 	b.w	3b2e0 <ull_conn_rx+0x554>
			conn->llcp_length.disabled = 1U;
   3bfba:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3bfbe:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.disabled = 1U;
   3bfc2:	f043 0308 	orr.w	r3, r3, #8
   3bfc6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3bfca:	f7ff bb16 	b.w	3b5fa <ull_conn_rx+0x86e>
				conn->llcp_phy.state =
   3bfce:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3bfd2:	4291      	cmp	r1, r2
				conn->llcp_phy.state =
   3bfd4:	f043 0303 	orr.w	r3, r3, #3
   3bfd8:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3bfdc:	d111      	bne.n	3c002 <ull_conn_rx+0x1276>
					conn->llcp_phy.tx =
   3bfde:	f8b4 21ce 	ldrh.w	r2, [r4, #462]	; 0x1ce
						conn->phy_pref_rx;
   3bfe2:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
					conn->llcp_phy.ack--;
   3bfe6:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   3bfe8:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   3bfec:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
					conn->llcp_phy.tx =
   3bff0:	f240 43fc 	movw	r3, #1276	; 0x4fc
   3bff4:	f022 0204 	bic.w	r2, r2, #4
   3bff8:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   3bffc:	4313      	orrs	r3, r2
   3bffe:	f8a4 31ce 	strh.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.rx &= p->tx_phys;
   3c002:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3c006:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   3c00a:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   3c00e:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   3c012:	f003 0203 	and.w	r2, r3, #3
   3c016:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3c01a:	4003      	ands	r3, r0
   3c01c:	009b      	lsls	r3, r3, #2
   3c01e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3c022:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3c024:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   3c028:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3c02c:	d002      	beq.n	3c034 <ull_conn_rx+0x12a8>
   3c02e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   3c032:	d105      	bne.n	3c040 <ull_conn_rx+0x12b4>
					conn->llcp_phy.tx = 0;
   3c034:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3c038:	f003 0303 	and.w	r3, r3, #3
   3c03c:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.pause_tx = 1U;
   3c040:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c044:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   3c046:	4313      	orrs	r3, r2
   3c048:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
	int nack = 0;
   3c04c:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c04e:	712a      	strb	r2, [r5, #4]
   3c050:	f7fe bf02 	b.w	3ae58 <ull_conn_rx+0xcc>
   3c054:	4649      	mov	r1, r9
   3c056:	e597      	b.n	3bb88 <ull_conn_rx+0xdfc>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3c058:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c05c:	f36f 0301 	bfc	r3, #0, #2
   3c060:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c064:	f7ff baee 	b.w	3b644 <ull_conn_rx+0x8b8>
				nack = reject_ext_ind_send(conn, *rx,
   3c068:	231e      	movs	r3, #30
   3c06a:	2210      	movs	r2, #16
   3c06c:	f7ff b939 	b.w	3b2e2 <ull_conn_rx+0x556>
				nack = reject_ext_ind_send(conn, *rx,
   3c070:	2323      	movs	r3, #35	; 0x23
   3c072:	2216      	movs	r2, #22
   3c074:	f7ff b935 	b.w	3b2e2 <ull_conn_rx+0x556>
			lll->phy_tx_time = lll->phy_tx;
   3c078:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   3c07c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   3c080:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
			conn->llcp_phy.pause_tx = 0U;
   3c084:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   3c088:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   3c08a:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3c08e:	f362 1106 	bfi	r1, r2, #4, #3
   3c092:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   3c096:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   3c09a:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			lll->phy_tx_time = lll->phy_tx;
   3c09e:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c0a2:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   3c0a4:	f000 8117 	beq.w	3c2d6 <ull_conn_rx+0x154a>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c0a8:	211c      	movs	r1, #28
   3c0aa:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   3c0ac:	2300      	movs	r3, #0
   3c0ae:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   3c0b0:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   3c0b2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3c0b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3c0ba:	77ab      	strb	r3, [r5, #30]
   3c0bc:	f7ff ba9d 	b.w	3b5fa <ull_conn_rx+0x86e>
	conn->llcp_enc.pause_rx = 0U;
   3c0c0:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3c0c4:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	conn->procedure_expire = 0U;
   3c0c8:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   3c0ca:	f022 0203 	bic.w	r2, r2, #3
   3c0ce:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3c0d2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3c0d6:	4618      	mov	r0, r3
   3c0d8:	f7fe bebe 	b.w	3ae58 <ull_conn_rx+0xcc>
   3c0dc:	20005c44 	.word	0x20005c44
   3c0e0:	20005cd8 	.word	0x20005cd8
   3c0e4:	0005563c 	.word	0x0005563c
   3c0e8:	00055770 	.word	0x00055770
   3c0ec:	0005512c 	.word	0x0005512c
			conn->procedure_expire = 0U;
   3c0f0:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3c0f2:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   3c0f4:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->procedure_expire = 0U;
   3c0f8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3c0fc:	f000 81b6 	beq.w	3c46c <ull_conn_rx+0x16e0>
			conn->lll.max_rx_time = eff_rx_time;
   3c100:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   3c104:	2b00      	cmp	r3, #0
   3c106:	f000 81bc 	beq.w	3c482 <ull_conn_rx+0x16f6>
					(conn->llcp_length.req - 1);
   3c10a:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   3c10c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
				conn->llcp_length.state =
   3c110:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_length.rx_octets = eff_rx_octets;
   3c114:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
				conn->llcp_length.state =
   3c118:	2603      	movs	r6, #3
   3c11a:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   3c11e:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
				conn->llcp_length.rx_time = eff_rx_time;
   3c122:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
				conn->llcp_length.tx_time = eff_tx_time;
   3c126:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
				conn->llcp_length.state =
   3c12a:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3c12e:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3c132:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3c134:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3c138:	84e8      	strh	r0, [r5, #38]	; 0x26
   3c13a:	e55c      	b.n	3bbf6 <ull_conn_rx+0xe6a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3c13c:	2301      	movs	r3, #1
   3c13e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3c140:	232a      	movs	r3, #42	; 0x2a
			conn->llcp_terminate.reason_final = err;
   3c142:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	int nack = 0;
   3c146:	2000      	movs	r0, #0
   3c148:	f7fe be86 	b.w	3ae58 <ull_conn_rx+0xcc>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3c14c:	2301      	movs	r3, #1
   3c14e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   3c150:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_final = err;
   3c152:	e7f6      	b.n	3c142 <ull_conn_rx+0x13b6>
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3c154:	2101      	movs	r1, #1
   3c156:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   3c15a:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3c15e:	f7f8 fb6f 	bl	34840 <util_ones_count_get>
   3c162:	2801      	cmp	r0, #1
   3c164:	f200 80a1 	bhi.w	3c2aa <ull_conn_rx+0x151e>
	phy = ind->p_to_c_phy;
   3c168:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3c16c:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3c170:	f10d 000f 	add.w	r0, sp, #15
   3c174:	2101      	movs	r1, #1
   3c176:	f7f8 fb63 	bl	34840 <util_ones_count_get>
   3c17a:	2801      	cmp	r0, #1
   3c17c:	f200 8095 	bhi.w	3c2aa <ull_conn_rx+0x151e>
	instant = sys_le16_to_cpu(ind->instant);
   3c180:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3c182:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c184:	1ad3      	subs	r3, r2, r3
   3c186:	041b      	lsls	r3, r3, #16
   3c188:	f100 8213 	bmi.w	3c5b2 <ull_conn_rx+0x1826>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c18c:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3c190:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c194:	1a5b      	subs	r3, r3, r1
   3c196:	f003 0303 	and.w	r3, r3, #3
   3c19a:	2b02      	cmp	r3, #2
   3c19c:	f000 8204 	beq.w	3c5a8 <ull_conn_rx+0x181c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3c1a0:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   3c1a4:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3c1a8:	4283      	cmp	r3, r0
   3c1aa:	d018      	beq.n	3c1de <ull_conn_rx+0x1452>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3c1ac:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3c1b0:	f003 0303 	and.w	r3, r3, #3
   3c1b4:	2b02      	cmp	r3, #2
   3c1b6:	d112      	bne.n	3c1de <ull_conn_rx+0x1452>
		conn->llcp_phy.pause_tx = 0U;
   3c1b8:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3c1bc:	f884 01cd 	strb.w	r0, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3c1c0:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3c1c4:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
		conn->llcp_phy.pause_tx = 0U;
   3c1c8:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3c1cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
   3c1d0:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   3c1d4:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3c1d6:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
		conn->procedure_expire = 0U;
   3c1da:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   3c1de:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   3c1e2:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   3c1e6:	f8a4 20f6 	strh.w	r2, [r4, #246]	; 0xf6
	conn->llcp.phy_upd_ind.initiate = 0U;
   3c1ea:	009b      	lsls	r3, r3, #2
   3c1ec:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   3c1f0:	f003 031c 	and.w	r3, r3, #28
   3c1f4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   3c1f8:	f002 0202 	and.w	r2, r2, #2
   3c1fc:	4313      	orrs	r3, r2
   3c1fe:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	link->mem = conn->llcp_rx;
   3c202:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   3c206:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   3c208:	6833      	ldr	r3, [r6, #0]
   3c20a:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3c20c:	6832      	ldr	r2, [r6, #0]
   3c20e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	*rx = NULL;
   3c212:	2300      	movs	r3, #0
   3c214:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   3c216:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_type = LLCP_PHY_UPD;
   3c21a:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   3c21c:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   3c21e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
	if (conn->llcp.phy_upd_ind.tx) {
   3c222:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   3c226:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	if (conn->llcp.phy_upd_ind.tx) {
   3c22a:	f43e ae15 	beq.w	3ae58 <ull_conn_rx+0xcc>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3c22e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   3c232:	f3c2 0282 	ubfx	r2, r2, #2, #3
   3c236:	f362 1106 	bfi	r1, r2, #4, #3
   3c23a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   3c23e:	4618      	mov	r0, r3
   3c240:	f7fe be0a 	b.w	3ae58 <ull_conn_rx+0xcc>
		conn_upd_curr = conn;
   3c244:	6018      	str	r0, [r3, #0]
   3c246:	f7ff b98d 	b.w	3b564 <ull_conn_rx+0x7d8>
	conn_upd_curr = NULL;
   3c24a:	4bd1      	ldr	r3, [pc, #836]	; (3c590 <ull_conn_rx+0x1804>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3c24c:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3c250:	2100      	movs	r1, #0
   3c252:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   3c254:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3c258:	f013 0310 	ands.w	r3, r3, #16
   3c25c:	d15b      	bne.n	3c316 <ull_conn_rx+0x158a>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c25e:	2201      	movs	r2, #1
   3c260:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   3c262:	4618      	mov	r0, r3
				break;
   3c264:	f7fe bdf8 	b.w	3ae58 <ull_conn_rx+0xcc>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3c268:	4aca      	ldr	r2, [pc, #808]	; (3c594 <ull_conn_rx+0x1808>)
   3c26a:	49cb      	ldr	r1, [pc, #812]	; (3c598 <ull_conn_rx+0x180c>)
   3c26c:	48cb      	ldr	r0, [pc, #812]	; (3c59c <ull_conn_rx+0x1810>)
   3c26e:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   3c272:	f00e f918 	bl	4a4a6 <printk>
   3c276:	4040      	eors	r0, r0
   3c278:	f380 8811 	msr	BASEPRI, r0
   3c27c:	f04f 0003 	mov.w	r0, #3
   3c280:	df02      	svc	2
   3c282:	f7ff bb97 	b.w	3b9b4 <ull_conn_rx+0xc28>
				      0x03) == 0x02) &&
   3c286:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3c28a:	2a03      	cmp	r2, #3
   3c28c:	f47f ac36 	bne.w	3bafc <ull_conn_rx+0xd70>
   3c290:	e42d      	b.n	3baee <ull_conn_rx+0xd62>
				conn->llcp_length.state =
   3c292:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->lll.max_tx_octets = eff_tx_octets;
   3c296:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   3c29a:	2504      	movs	r5, #4
   3c29c:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   3c2a0:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   3c2a4:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
   3c2a8:	e49b      	b.n	3bbe2 <ull_conn_rx+0xe56>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c2aa:	6833      	ldr	r3, [r6, #0]
   3c2ac:	2201      	movs	r2, #1
   3c2ae:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   3c2b0:	231e      	movs	r3, #30
   3c2b2:	e746      	b.n	3c142 <ull_conn_rx+0x13b6>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3c2b4:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_ack += 2U;
   3c2b8:	3202      	adds	r2, #2
   3c2ba:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3c2be:	2b00      	cmp	r3, #0
   3c2c0:	f040 80e4 	bne.w	3c48c <ull_conn_rx+0x1700>
			conn->periph.llcp_type = conn->llcp_type;
   3c2c4:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3c2c8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   3c2cc:	f7fe be81 	b.w	3afd2 <ull_conn_rx+0x246>
	struct node_tx *tx = NULL;
   3c2d0:	2300      	movs	r3, #0
   3c2d2:	f7fe bf1a 	b.w	3b10a <ull_conn_rx+0x37e>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c2d6:	2201      	movs	r2, #1
   3c2d8:	711a      	strb	r2, [r3, #4]
   3c2da:	f7ff b98e 	b.w	3b5fa <ull_conn_rx+0x86e>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c2de:	6832      	ldr	r2, [r6, #0]
   3c2e0:	201c      	movs	r0, #28
   3c2e2:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   3c2e4:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   3c2e6:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   3c2e8:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   3c2ec:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   3c2ee:	f3c2 0302 	ubfx	r3, r2, #0, #3
   3c2f2:	77ab      	strb	r3, [r5, #30]
		if (err) {
   3c2f4:	f7fe bdb0 	b.w	3ae58 <ull_conn_rx+0xcc>
			conn->tx_data = conn->tx_data->next;
   3c2f8:	6811      	ldr	r1, [r2, #0]
   3c2fa:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c2fe:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3c302:	2900      	cmp	r1, #0
   3c304:	f47f aa3e 	bne.w	3b784 <ull_conn_rx+0x9f8>
			tx->next = conn->tx_head->next;
   3c308:	6811      	ldr	r1, [r2, #0]
   3c30a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3c30c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   3c30e:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3c312:	f7ff ba3e 	b.w	3b792 <ull_conn_rx+0xa06>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3c316:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3c318:	07d2      	lsls	r2, r2, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3c31a:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3c31c:	f100 80cd 	bmi.w	3c4ba <ull_conn_rx+0x172e>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3c320:	231a      	movs	r3, #26
   3c322:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   3c324:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   3c326:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   3c32a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   3c32c:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   3c32e:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   3c332:	227d      	movs	r2, #125	; 0x7d
   3c334:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   3c338:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   3c33a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3c33e:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   3c342:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   3c344:	f7ff b959 	b.w	3b5fa <ull_conn_rx+0x86e>
				uint16_t interval_min =
   3c348:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   3c34c:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3c350:	2a05      	cmp	r2, #5
   3c352:	f67f acf9 	bls.w	3bd48 <ull_conn_rx+0xfbc>
				uint16_t interval_max =
   3c356:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   3c35a:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3c35e:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   3c362:	f63f acf1 	bhi.w	3bd48 <ull_conn_rx+0xfbc>
				    (interval_max > 3200) ||
   3c366:	4572      	cmp	r2, lr
   3c368:	f63f acee 	bhi.w	3bd48 <ull_conn_rx+0xfbc>
				uint16_t latency =
   3c36c:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   3c36e:	b2be      	uxth	r6, r7
				    (interval_min > interval_max) ||
   3c370:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   3c374:	f4bf ace8 	bcs.w	3bd48 <ull_conn_rx+0xfbc>
				uint16_t timeout =
   3c378:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   3c37a:	f8ad 2006 	strh.w	r2, [sp, #6]
   3c37e:	b292      	uxth	r2, r2
				    (latency > 499) ||
   3c380:	f1a2 0a0a 	sub.w	sl, r2, #10
   3c384:	f640 4b76 	movw	fp, #3190	; 0xc76
   3c388:	fa1f fa8a 	uxth.w	sl, sl
   3c38c:	45da      	cmp	sl, fp
   3c38e:	f63f acdb 	bhi.w	3bd48 <ull_conn_rx+0xfbc>
				     ((latency + 1) * interval_max)) ||
   3c392:	f106 0a01 	add.w	sl, r6, #1
   3c396:	fa1f fa8a 	uxth.w	sl, sl
   3c39a:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   3c39e:	ebba 0f82 	cmp.w	sl, r2, lsl #2
   3c3a2:	f4bf acd1 	bcs.w	3bd48 <ull_conn_rx+0xfbc>
				     ((latency + 1) * interval_max)) ||
   3c3a6:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   3c3aa:	45de      	cmp	lr, fp
   3c3ac:	f4ff accc 	bcc.w	3bd48 <ull_conn_rx+0xfbc>
				conn->llcp_conn_param.latency =	latency;
   3c3b0:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				conn->llcp_conn_param.timeout =	timeout;
   3c3b4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   3c3b8:	f8a4 9198 	strh.w	r9, [r4, #408]	; 0x198
				conn->llcp_conn_param.interval_max =
   3c3bc:	f8a4 819a 	strh.w	r8, [r4, #410]	; 0x19a
				conn->llcp_conn_param.timeout =	timeout;
   3c3c0:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				conn->llcp_conn_param.preferred_periodicity =
   3c3c4:	f884 b1a0 	strb.w	fp, [r4, #416]	; 0x1a0
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   3c3c8:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   3c3cc:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   3c3d0:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   3c3d4:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
					sys_le16_to_cpu(cpr->offset0);
   3c3d8:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   3c3dc:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   3c3e0:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   3c3e4:	f8a4 71a4 	strh.w	r7, [r4, #420]	; 0x1a4
					sys_le16_to_cpu(cpr->offset1);
   3c3e8:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   3c3ec:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   3c3f0:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   3c3f4:	f8a4 71a6 	strh.w	r7, [r4, #422]	; 0x1a6
					sys_le16_to_cpu(cpr->offset2);
   3c3f8:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   3c3fc:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   3c400:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   3c404:	f8a4 71a8 	strh.w	r7, [r4, #424]	; 0x1a8
					sys_le16_to_cpu(cpr->offset3);
   3c408:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   3c40c:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   3c410:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   3c414:	f8a4 71aa 	strh.w	r7, [r4, #426]	; 0x1aa
					sys_le16_to_cpu(cpr->offset4);
   3c418:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   3c41c:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   3c420:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   3c424:	f8a4 71ac 	strh.w	r7, [r4, #428]	; 0x1ac
					sys_le16_to_cpu(cpr->offset5);
   3c428:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   3c42c:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   3c430:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   3c434:	f8a4 71ae 	strh.w	r7, [r4, #430]	; 0x1ae
				     lll->interval) ||
   3c438:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   3c43a:	45be      	cmp	lr, r7
   3c43c:	f000 80c6 	beq.w	3c5cc <ull_conn_rx+0x1840>
					if (conn->llcp_enc.pause_tx) {
   3c440:	f01c 0f02 	tst.w	ip, #2
						conn->llcp_conn_param.state =
   3c444:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
					if (conn->llcp_enc.pause_tx) {
   3c448:	f43f ac6f 	beq.w	3bd2a <ull_conn_rx+0xf9e>
						conn->llcp_conn_param.state =
   3c44c:	2602      	movs	r6, #2
   3c44e:	f366 0203 	bfi	r2, r6, #0, #4
   3c452:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
						(*rx)->hdr.type =
   3c456:	2201      	movs	r2, #1
   3c458:	712a      	strb	r2, [r5, #4]
   3c45a:	e46b      	b.n	3bd34 <ull_conn_rx+0xfa8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3c45c:	2b23      	cmp	r3, #35	; 0x23
   3c45e:	f43f ac89 	beq.w	3bd74 <ull_conn_rx+0xfe8>
			conn->periph.ticks_to_offset =
   3c462:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   3c466:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   3c46a:	e483      	b.n	3bd74 <ull_conn_rx+0xfe8>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3c46c:	4558      	cmp	r0, fp
   3c46e:	f47f ae47 	bne.w	3c100 <ull_conn_rx+0x1374>
			    eff_rx_time == conn->lll.max_rx_time &&
   3c472:	45d4      	cmp	ip, sl
   3c474:	f47f ae44 	bne.w	3c100 <ull_conn_rx+0x1374>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c478:	6832      	ldr	r2, [r6, #0]
   3c47a:	2501      	movs	r5, #1
   3c47c:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   3c47e:	f7ff bbba 	b.w	3bbf6 <ull_conn_rx+0xe6a>
				conn->lll.max_tx_octets = eff_tx_octets;
   3c482:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3c486:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   3c48a:	e650      	b.n	3c12e <ull_conn_rx+0x13a2>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3c48c:	4a41      	ldr	r2, [pc, #260]	; (3c594 <ull_conn_rx+0x1808>)
   3c48e:	4944      	ldr	r1, [pc, #272]	; (3c5a0 <ull_conn_rx+0x1814>)
   3c490:	4842      	ldr	r0, [pc, #264]	; (3c59c <ull_conn_rx+0x1810>)
   3c492:	f641 13ad 	movw	r3, #6573	; 0x19ad
   3c496:	f00e f806 	bl	4a4a6 <printk>
   3c49a:	4040      	eors	r0, r0
   3c49c:	f380 8811 	msr	BASEPRI, r0
   3c4a0:	f04f 0003 	mov.w	r0, #3
   3c4a4:	df02      	svc	2
   3c4a6:	e70d      	b.n	3c2c4 <ull_conn_rx+0x1538>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3c4a8:	2923      	cmp	r1, #35	; 0x23
   3c4aa:	f43f aa6e 	beq.w	3b98a <ull_conn_rx+0xbfe>
			conn->periph.ticks_to_offset =
   3c4ae:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   3c4b2:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
   3c4b6:	f7ff ba68 	b.w	3b98a <ull_conn_rx+0xbfe>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3c4ba:	4a36      	ldr	r2, [pc, #216]	; (3c594 <ull_conn_rx+0x1808>)
   3c4bc:	4936      	ldr	r1, [pc, #216]	; (3c598 <ull_conn_rx+0x180c>)
   3c4be:	4837      	ldr	r0, [pc, #220]	; (3c59c <ull_conn_rx+0x1810>)
   3c4c0:	f641 4322 	movw	r3, #7202	; 0x1c22
   3c4c4:	f00d ffef 	bl	4a4a6 <printk>
   3c4c8:	4040      	eors	r0, r0
   3c4ca:	f380 8811 	msr	BASEPRI, r0
   3c4ce:	f04f 0003 	mov.w	r0, #3
   3c4d2:	df02      	svc	2
   3c4d4:	e724      	b.n	3c320 <ull_conn_rx+0x1594>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c4d6:	7911      	ldrb	r1, [r2, #4]
   3c4d8:	f001 0103 	and.w	r1, r1, #3
   3c4dc:	2903      	cmp	r1, #3
   3c4de:	f000 80b4 	beq.w	3c64a <ull_conn_rx+0x18be>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c4e2:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3c4e6:	f7ff b94d 	b.w	3b784 <ull_conn_rx+0x9f8>
			conn->tx_data = conn->tx_data->next;
   3c4ea:	6818      	ldr	r0, [r3, #0]
   3c4ec:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c4f0:	2900      	cmp	r1, #0
   3c4f2:	f47f acc4 	bne.w	3be7e <ull_conn_rx+0x10f2>
			tx->next = conn->tx_head->next;
   3c4f6:	6819      	ldr	r1, [r3, #0]
   3c4f8:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   3c4fa:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   3c4fc:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3c500:	e4c4      	b.n	3be8c <ull_conn_rx+0x1100>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3c502:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3c506:	f011 0f06 	tst.w	r1, #6
   3c50a:	f43f ab34 	beq.w	3bb76 <ull_conn_rx+0xdea>
   3c50e:	f7fe bdf5 	b.w	3b0fc <ull_conn_rx+0x370>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   3c512:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3c516:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3c51a:	429a      	cmp	r2, r3
   3c51c:	d00e      	beq.n	3c53c <ull_conn_rx+0x17b0>
   3c51e:	4a1d      	ldr	r2, [pc, #116]	; (3c594 <ull_conn_rx+0x1808>)
   3c520:	4920      	ldr	r1, [pc, #128]	; (3c5a4 <ull_conn_rx+0x1818>)
   3c522:	481e      	ldr	r0, [pc, #120]	; (3c59c <ull_conn_rx+0x1810>)
   3c524:	f241 43af 	movw	r3, #5295	; 0x14af
   3c528:	f00d ffbd 	bl	4a4a6 <printk>
   3c52c:	4040      	eors	r0, r0
   3c52e:	f380 8811 	msr	BASEPRI, r0
   3c532:	f04f 0003 	mov.w	r0, #3
   3c536:	df02      	svc	2
   3c538:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c53c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3c540:	2106      	movs	r1, #6
   3c542:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   3c546:	3b01      	subs	r3, #1
   3c548:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c54c:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3c550:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3c554:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.win_size = 1U;
   3c558:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3c55a:	00db      	lsls	r3, r3, #3
   3c55c:	430b      	orrs	r3, r1
   3c55e:	f022 020f 	bic.w	r2, r2, #15
   3c562:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   3c564:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3c568:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3c56c:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3c570:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   3c574:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3c576:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
		conn->llcp_cu.win_offset_us = 0U;
   3c57a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3c57e:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3c582:	f8a4 211e 	strh.w	r2, [r4, #286]	; 0x11e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3c586:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	if (err) {
   3c58a:	f7fe bc62 	b.w	3ae52 <ull_conn_rx+0xc6>
   3c58e:	bf00      	nop
   3c590:	20005c44 	.word	0x20005c44
   3c594:	0005563c 	.word	0x0005563c
   3c598:	00055278 	.word	0x00055278
   3c59c:	0005512c 	.word	0x0005512c
   3c5a0:	0005574c 	.word	0x0005574c
   3c5a4:	00055770 	.word	0x00055770
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c5a8:	6833      	ldr	r3, [r6, #0]
   3c5aa:	2201      	movs	r2, #1
   3c5ac:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3c5ae:	232a      	movs	r3, #42	; 0x2a
   3c5b0:	e5c7      	b.n	3c142 <ull_conn_rx+0x13b6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c5b2:	6833      	ldr	r3, [r6, #0]
   3c5b4:	2201      	movs	r2, #1
   3c5b6:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   3c5b8:	2328      	movs	r3, #40	; 0x28
   3c5ba:	e5c2      	b.n	3c142 <ull_conn_rx+0x13b6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c5bc:	7919      	ldrb	r1, [r3, #4]
   3c5be:	f001 0103 	and.w	r1, r1, #3
   3c5c2:	2903      	cmp	r1, #3
   3c5c4:	d024      	beq.n	3c610 <ull_conn_rx+0x1884>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c5c6:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3c5ca:	e458      	b.n	3be7e <ull_conn_rx+0x10f2>
				     lll->interval) ||
   3c5cc:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   3c5d0:	45b6      	cmp	lr, r6
   3c5d2:	f47f af35 	bne.w	3c440 <ull_conn_rx+0x16b4>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3c5d6:	f240 46e2 	movw	r6, #1250	; 0x4e2
   3c5da:	fb07 f606 	mul.w	r6, r7, r6
   3c5de:	f242 7710 	movw	r7, #10000	; 0x2710
   3c5e2:	fb07 6202 	mla	r2, r7, r2, r6
   3c5e6:	3a01      	subs	r2, #1
   3c5e8:	fbb2 f2f6 	udiv	r2, r2, r6
				     lll->latency) ||
   3c5ec:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   3c5f0:	b292      	uxth	r2, r2
   3c5f2:	4296      	cmp	r6, r2
   3c5f4:	f47f af24 	bne.w	3c440 <ull_conn_rx+0x16b4>
				conn->llcp_conn_param.state =
   3c5f8:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   3c5fc:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3c600:	f042 0201 	orr.w	r2, r2, #1
   3c604:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3c608:	2201      	movs	r2, #1
   3c60a:	712a      	strb	r2, [r5, #4]
   3c60c:	f7ff bb92 	b.w	3bd34 <ull_conn_rx+0xfa8>
	    ((pdu_data_tx->llctrl.opcode !=
   3c610:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c612:	2903      	cmp	r1, #3
   3c614:	f43f af6f 	beq.w	3c4f6 <ull_conn_rx+0x176a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3c618:	290a      	cmp	r1, #10
   3c61a:	d1d4      	bne.n	3c5c6 <ull_conn_rx+0x183a>
   3c61c:	e76b      	b.n	3c4f6 <ull_conn_rx+0x176a>
			     lll->interval) ||
   3c61e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   3c620:	4567      	cmp	r7, ip
   3c622:	f47f ab80 	bne.w	3bd26 <ull_conn_rx+0xf9a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3c626:	f240 47e2 	movw	r7, #1250	; 0x4e2
   3c62a:	fb07 f606 	mul.w	r6, r7, r6
   3c62e:	f242 7710 	movw	r7, #10000	; 0x2710
   3c632:	fb07 6202 	mla	r2, r7, r2, r6
   3c636:	3a01      	subs	r2, #1
   3c638:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3c63c:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   3c640:	b292      	uxth	r2, r2
   3c642:	4296      	cmp	r6, r2
   3c644:	f47f ab6f 	bne.w	3bd26 <ull_conn_rx+0xf9a>
   3c648:	e7d6      	b.n	3c5f8 <ull_conn_rx+0x186c>
	    ((pdu_data_tx->llctrl.opcode !=
   3c64a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c64c:	2903      	cmp	r1, #3
   3c64e:	f43f ae5b 	beq.w	3c308 <ull_conn_rx+0x157c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3c652:	290a      	cmp	r1, #10
   3c654:	f47f af45 	bne.w	3c4e2 <ull_conn_rx+0x1756>
   3c658:	e656      	b.n	3c308 <ull_conn_rx+0x157c>
   3c65a:	bf00      	nop

0003c65c <ull_conn_llcp>:
{
   3c65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c660:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   3c662:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
   3c666:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c66a:	4298      	cmp	r0, r3
{
   3c66c:	460d      	mov	r5, r1
   3c66e:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   3c670:	f000 8093 	beq.w	3c79a <ull_conn_llcp+0x13e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c674:	1a1b      	subs	r3, r3, r0
   3c676:	f003 0303 	and.w	r3, r3, #3
   3c67a:	2b02      	cmp	r3, #2
   3c67c:	d011      	beq.n	3c6a2 <ull_conn_llcp+0x46>
   3c67e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c682:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c684:	f1bc 0f00 	cmp.w	ip, #0
   3c688:	db6c      	blt.n	3c764 <ull_conn_llcp+0x108>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   3c68a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3c68e:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3c692:	1a9b      	subs	r3, r3, r2
   3c694:	b2db      	uxtb	r3, r3
   3c696:	2b01      	cmp	r3, #1
   3c698:	f000 80aa 	beq.w	3c7f0 <ull_conn_llcp+0x194>
	return 0;
   3c69c:	2000      	movs	r0, #0
}
   3c69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c6a2:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3c6a6:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3c6aa:	429a      	cmp	r2, r3
   3c6ac:	d006      	beq.n	3c6bc <ull_conn_llcp+0x60>
			     LLCP_LENGTH_STATE_RESIZE) ||
   3c6ae:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			if ((conn->llcp_length.state ==
   3c6b2:	f003 0306 	and.w	r3, r3, #6
   3c6b6:	2b04      	cmp	r3, #4
   3c6b8:	f000 823d 	beq.w	3cb36 <ull_conn_llcp+0x4da>
		switch (conn->llcp_type) {
   3c6bc:	f894 70f2 	ldrb.w	r7, [r4, #242]	; 0xf2
   3c6c0:	1e7b      	subs	r3, r7, #1
   3c6c2:	2b05      	cmp	r3, #5
   3c6c4:	f200 8221 	bhi.w	3cb0a <ull_conn_llcp+0x4ae>
   3c6c8:	e8df f013 	tbh	[pc, r3, lsl #1]
   3c6cc:	01bc0087 	.word	0x01bc0087
   3c6d0:	021f0135 	.word	0x021f0135
   3c6d4:	00ef00fa 	.word	0x00ef00fa
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c6d8:	7903      	ldrb	r3, [r0, #4]
   3c6da:	f043 0303 	orr.w	r3, r3, #3
   3c6de:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   3c6e0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3c6e4:	07db      	lsls	r3, r3, #31
   3c6e6:	f140 879d 	bpl.w	3d624 <ull_conn_llcp+0xfc8>
	    (conn->llcp_feature.features_conn &
   3c6ea:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	if (conn->common.fex_valid &&
   3c6ee:	0758      	lsls	r0, r3, #29
   3c6f0:	f140 8798 	bpl.w	3d624 <ull_conn_llcp+0xfc8>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3c6f4:	2311      	movs	r3, #17
   3c6f6:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c6fa:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   3c6fc:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c700:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   3c704:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   3c708:	2300      	movs	r3, #0
   3c70a:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	    conn->tx_head &&
   3c70e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c712:	2b00      	cmp	r3, #0
   3c714:	f000 8768 	beq.w	3d5e8 <ull_conn_llcp+0xf8c>
	    !conn->llcp_enc.pause_tx &&
   3c718:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c71c:	0791      	lsls	r1, r2, #30
   3c71e:	f100 8763 	bmi.w	3d5e8 <ull_conn_llcp+0xf8c>
	    !conn->llcp_phy.pause_tx &&
   3c722:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c726:	07d2      	lsls	r2, r2, #31
   3c728:	f100 875e 	bmi.w	3d5e8 <ull_conn_llcp+0xf8c>
		if (conn->tx_head == conn->tx_data) {
   3c72c:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c730:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c732:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c736:	f001 813d 	beq.w	3d9b4 <ull_conn_llcp+0x1358>
		} else if (!conn->tx_ctrl) {
   3c73a:	2a00      	cmp	r2, #0
   3c73c:	f001 81b2 	beq.w	3daa4 <ull_conn_llcp+0x1448>
	tx->next = conn->tx_ctrl_last->next;
   3c740:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c744:	681a      	ldr	r2, [r3, #0]
   3c746:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c74a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   3c74e:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c752:	f8d9 3000 	ldr.w	r3, [r9]
   3c756:	2b00      	cmp	r3, #0
   3c758:	f000 8788 	beq.w	3d66c <ull_conn_llcp+0x1010>
			conn->llcp_ack = conn->llcp_req;
   3c75c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c760:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c764:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3c768:	2b00      	cmp	r3, #0
   3c76a:	d08e      	beq.n	3c68a <ull_conn_llcp+0x2e>
		switch (conn->periph.llcp_type) {
   3c76c:	2b02      	cmp	r3, #2
   3c76e:	f000 81a3 	beq.w	3cab8 <ull_conn_llcp+0x45c>
   3c772:	2b06      	cmp	r3, #6
   3c774:	f000 8087 	beq.w	3c886 <ull_conn_llcp+0x22a>
   3c778:	2b01      	cmp	r3, #1
   3c77a:	f000 808d 	beq.w	3c898 <ull_conn_llcp+0x23c>
			LL_ASSERT(0);
   3c77e:	4aca      	ldr	r2, [pc, #808]	; (3caa8 <ull_conn_llcp+0x44c>)
   3c780:	49ca      	ldr	r1, [pc, #808]	; (3caac <ull_conn_llcp+0x450>)
   3c782:	48cb      	ldr	r0, [pc, #812]	; (3cab0 <ull_conn_llcp+0x454>)
   3c784:	f240 5312 	movw	r3, #1298	; 0x512
   3c788:	f00d fe8d 	bl	4a4a6 <printk>
   3c78c:	4040      	eors	r0, r0
   3c78e:	f380 8811 	msr	BASEPRI, r0
   3c792:	f04f 0003 	mov.w	r0, #3
   3c796:	df02      	svc	2
			break;
   3c798:	e777      	b.n	3c68a <ull_conn_llcp+0x2e>
   3c79a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   3c79e:	2a00      	cmp	r2, #0
   3c7a0:	4694      	mov	ip, r2
   3c7a2:	f2c0 81c2 	blt.w	3cb2a <ull_conn_llcp+0x4ce>
	    !conn->llcp_enc.pause_rx) {
   3c7a6:	f894 7176 	ldrb.w	r7, [r4, #374]	; 0x176
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3c7aa:	f017 0801 	ands.w	r8, r7, #1
   3c7ae:	f47f af69 	bne.w	3c684 <ull_conn_llcp+0x28>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   3c7b2:	f894 9119 	ldrb.w	r9, [r4, #281]	; 0x119
   3c7b6:	f894 e118 	ldrb.w	lr, [r4, #280]	; 0x118
   3c7ba:	45ce      	cmp	lr, r9
   3c7bc:	f000 82eb 	beq.w	3cd96 <ull_conn_llcp+0x73a>
			conn->llcp_type = LLCP_CONN_UPD;
   3c7c0:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   3c7c2:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   3c7c4:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3c7c8:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c7cc:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3c7d0:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3c7d4:	429a      	cmp	r2, r3
   3c7d6:	f47f af6a 	bne.w	3c6ae <ull_conn_llcp+0x52>
			if (event_conn_upd_prep(conn, lazy,
   3c7da:	462a      	mov	r2, r5
   3c7dc:	4631      	mov	r1, r6
   3c7de:	4620      	mov	r0, r4
   3c7e0:	f7ea fc32 	bl	27048 <event_conn_upd_prep>
   3c7e4:	2800      	cmp	r0, #0
   3c7e6:	f040 819d 	bne.w	3cb24 <ull_conn_llcp+0x4c8>
				return -ECANCELED;
   3c7ea:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3c7ee:	e756      	b.n	3c69e <ull_conn_llcp+0x42>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c7f0:	48b0      	ldr	r0, [pc, #704]	; (3cab4 <ull_conn_llcp+0x458>)
   3c7f2:	f7f7 fe4f 	bl	34494 <mem_acquire>
		if (tx) {
   3c7f6:	2800      	cmp	r0, #0
   3c7f8:	d038      	beq.n	3c86c <ull_conn_llcp+0x210>
			conn->llcp_terminate.ack--;
   3c7fa:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3c7fe:	3b01      	subs	r3, #1
   3c800:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c804:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3c806:	2202      	movs	r2, #2
   3c808:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c80a:	f043 0303 	orr.w	r3, r3, #3
   3c80e:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   3c810:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   3c812:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_tx->llctrl.terminate_ind.error_code =
   3c816:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		if (!conn->tx_ctrl) {
   3c81a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
			pdu_tx->llctrl.terminate_ind.error_code =
   3c81e:	7202      	strb	r2, [r0, #8]
	if (
   3c820:	b1b3      	cbz	r3, 3c850 <ull_conn_llcp+0x1f4>
	    !conn->llcp_enc.pause_tx &&
   3c822:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c826:	0795      	lsls	r5, r2, #30
   3c828:	d412      	bmi.n	3c850 <ull_conn_llcp+0x1f4>
	    !conn->llcp_phy.pause_tx &&
   3c82a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c82e:	07d2      	lsls	r2, r2, #31
   3c830:	d40e      	bmi.n	3c850 <ull_conn_llcp+0x1f4>
		if (conn->tx_head == conn->tx_data) {
   3c832:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c836:	4293      	cmp	r3, r2
   3c838:	f000 85ae 	beq.w	3d398 <ull_conn_llcp+0xd3c>
		} else if (!conn->tx_ctrl) {
   3c83c:	b959      	cbnz	r1, 3c856 <ull_conn_llcp+0x1fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c83e:	791a      	ldrb	r2, [r3, #4]
   3c840:	f002 0203 	and.w	r2, r2, #3
   3c844:	2a03      	cmp	r2, #3
   3c846:	f000 86ff 	beq.w	3d648 <ull_conn_llcp+0xfec>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c84a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3c84e:	e004      	b.n	3c85a <ull_conn_llcp+0x1fe>
		if (!conn->tx_ctrl) {
   3c850:	2900      	cmp	r1, #0
   3c852:	f000 82f2 	beq.w	3ce3a <ull_conn_llcp+0x7de>
	tx->next = conn->tx_ctrl_last->next;
   3c856:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c85a:	681a      	ldr	r2, [r3, #0]
   3c85c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c85e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c860:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c862:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c866:	2b00      	cmp	r3, #0
   3c868:	f000 8169 	beq.w	3cb3e <ull_conn_llcp+0x4e2>
		if (!conn->procedure_expire) {
   3c86c:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   3c870:	2800      	cmp	r0, #0
   3c872:	f47f af13 	bne.w	3c69c <ull_conn_llcp+0x40>
			conn->procedure_expire = conn->supervision_reload;
   3c876:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   3c87a:	2b01      	cmp	r3, #1
   3c87c:	f240 82d9 	bls.w	3ce32 <ull_conn_llcp+0x7d6>
			conn->procedure_expire = conn->supervision_reload;
   3c880:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c884:	e70a      	b.n	3c69c <ull_conn_llcp+0x40>
			event_counter = lll->event_counter +
   3c886:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   3c888:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   3c88a:	440a      	add	r2, r1
   3c88c:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   3c88e:	4620      	mov	r0, r4
   3c890:	b291      	uxth	r1, r2
   3c892:	f7fd fcad 	bl	3a1f0 <event_phy_upd_ind_prep>
		break;
   3c896:	e6f8      	b.n	3c68a <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   3c898:	462a      	mov	r2, r5
   3c89a:	4631      	mov	r1, r6
   3c89c:	4620      	mov	r0, r4
   3c89e:	f7ea fbd3 	bl	27048 <event_conn_upd_prep>
   3c8a2:	2800      	cmp	r0, #0
   3c8a4:	f47f aef1 	bne.w	3c68a <ull_conn_llcp+0x2e>
   3c8a8:	e79f      	b.n	3c7ea <ull_conn_llcp+0x18e>
			event_counter = lll->event_counter +
   3c8aa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3c8ac:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3c8ae:	4419      	add	r1, r3
   3c8b0:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   3c8b2:	b289      	uxth	r1, r1
   3c8b4:	4620      	mov	r0, r4
   3c8b6:	f7fd fc9b 	bl	3a1f0 <event_phy_upd_ind_prep>
		break;
   3c8ba:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c8be:	e6e1      	b.n	3c684 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c8c0:	487c      	ldr	r0, [pc, #496]	; (3cab4 <ull_conn_llcp+0x458>)
   3c8c2:	f7f7 fde7 	bl	34494 <mem_acquire>
	if (tx) {
   3c8c6:	2800      	cmp	r0, #0
   3c8c8:	f000 812c 	beq.w	3cb24 <ull_conn_llcp+0x4c8>
		conn->llcp_ack = conn->llcp_req;
   3c8cc:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c8d0:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c8d4:	7903      	ldrb	r3, [r0, #4]
   3c8d6:	f043 0303 	orr.w	r3, r3, #3
   3c8da:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   3c8dc:	2301      	movs	r3, #1
   3c8de:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3c8e0:	2312      	movs	r3, #18
   3c8e2:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   3c8e4:	e9d4 3275 	ldrd	r3, r2, [r4, #468]	; 0x1d4
	if (
   3c8e8:	2b00      	cmp	r3, #0
   3c8ea:	f000 82af 	beq.w	3ce4c <ull_conn_llcp+0x7f0>
	    !conn->llcp_enc.pause_tx &&
   3c8ee:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c8f2:	078f      	lsls	r7, r1, #30
   3c8f4:	f100 82aa 	bmi.w	3ce4c <ull_conn_llcp+0x7f0>
	    !conn->llcp_phy.pause_tx &&
   3c8f8:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c8fc:	07c9      	lsls	r1, r1, #31
   3c8fe:	f100 82a5 	bmi.w	3ce4c <ull_conn_llcp+0x7f0>
		if (conn->tx_head == conn->tx_data) {
   3c902:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c906:	428b      	cmp	r3, r1
   3c908:	f000 867b 	beq.w	3d602 <ull_conn_llcp+0xfa6>
		} else if (!conn->tx_ctrl) {
   3c90c:	2a00      	cmp	r2, #0
   3c90e:	f000 86a3 	beq.w	3d658 <ull_conn_llcp+0xffc>
	tx->next = conn->tx_ctrl_last->next;
   3c912:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c916:	681a      	ldr	r2, [r3, #0]
   3c918:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c91a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c91c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c91e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c922:	2b00      	cmp	r3, #0
   3c924:	f000 841f 	beq.w	3d166 <ull_conn_llcp+0xb0a>
		conn->procedure_expire = conn->procedure_reload;
   3c928:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3c92c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c930:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c934:	e6a6      	b.n	3c684 <ull_conn_llcp+0x28>
	if (conn->llcp.encryption.state) {
   3c936:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c93a:	f013 0803 	ands.w	r8, r3, #3
   3c93e:	f000 8150 	beq.w	3cbe2 <ull_conn_llcp+0x586>
		if (lll->role &&
   3c942:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c946:	2b00      	cmp	r3, #0
   3c948:	f6bf ae9f 	bge.w	3c68a <ull_conn_llcp+0x2e>
   3c94c:	f1b8 0f01 	cmp.w	r8, #1
   3c950:	f47f af08 	bne.w	3c764 <ull_conn_llcp+0x108>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c954:	4857      	ldr	r0, [pc, #348]	; (3cab4 <ull_conn_llcp+0x458>)
   3c956:	f7f7 fd9d 	bl	34494 <mem_acquire>
	if (!tx) {
   3c95a:	4607      	mov	r7, r0
   3c95c:	2800      	cmp	r0, #0
   3c95e:	f000 80e1 	beq.w	3cb24 <ull_conn_llcp+0x4c8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c962:	7903      	ldrb	r3, [r0, #4]
   3c964:	f043 0303 	orr.w	r3, r3, #3
   3c968:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c96a:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c96e:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c970:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c974:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c976:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c97a:	210c      	movs	r1, #12
   3c97c:	4640      	mov	r0, r8
   3c97e:	f004 f8b1 	bl	40ae4 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   3c982:	4641      	mov	r1, r8
   3c984:	2208      	movs	r2, #8
   3c986:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3c98a:	f00f fe94 	bl	4c6b6 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   3c98e:	464a      	mov	r2, r9
   3c990:	f107 0110 	add.w	r1, r7, #16
   3c994:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3c998:	f00f fe8d 	bl	4c6b6 <memcpy>
	    conn->tx_head &&
   3c99c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c9a0:	2b00      	cmp	r3, #0
   3c9a2:	f000 84ed 	beq.w	3d380 <ull_conn_llcp+0xd24>
	    !conn->llcp_enc.pause_tx &&
   3c9a6:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c9aa:	0791      	lsls	r1, r2, #30
   3c9ac:	f100 84e8 	bmi.w	3d380 <ull_conn_llcp+0xd24>
	    !conn->llcp_phy.pause_tx &&
   3c9b0:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c9b4:	07d2      	lsls	r2, r2, #31
   3c9b6:	f100 84e3 	bmi.w	3d380 <ull_conn_llcp+0xd24>
		if (conn->tx_head == conn->tx_data) {
   3c9ba:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c9be:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c9c2:	428b      	cmp	r3, r1
   3c9c4:	f000 867f 	beq.w	3d6c6 <ull_conn_llcp+0x106a>
		} else if (!conn->tx_ctrl) {
   3c9c8:	2a00      	cmp	r2, #0
   3c9ca:	f000 870a 	beq.w	3d7e2 <ull_conn_llcp+0x1186>
	tx->next = conn->tx_ctrl_last->next;
   3c9ce:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c9d2:	681a      	ldr	r2, [r3, #0]
   3c9d4:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3c9d6:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3c9d8:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3c9da:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c9de:	2b00      	cmp	r3, #0
   3c9e0:	f000 85e2 	beq.w	3d5a8 <ull_conn_llcp+0xf4c>
			rx = ll_pdu_rx_alloc();
   3c9e4:	f7fb fc1a 	bl	3821c <ll_pdu_rx_alloc>
			if (!rx) {
   3c9e8:	4607      	mov	r7, r0
   3c9ea:	2800      	cmp	r0, #0
   3c9ec:	f000 809a 	beq.w	3cb24 <ull_conn_llcp+0x4c8>
			rx->hdr.handle = conn->lll.handle;
   3c9f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c9f2:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c9f4:	2303      	movs	r3, #3
   3c9f6:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c9f8:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c9fa:	7f3b      	ldrb	r3, [r7, #28]
   3c9fc:	f043 0303 	orr.w	r3, r3, #3
   3ca00:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3ca02:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3ca04:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3ca06:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3ca08:	f204 1179 	addw	r1, r4, #377	; 0x179
   3ca0c:	f107 0020 	add.w	r0, r7, #32
   3ca10:	f00f fe51 	bl	4c6b6 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3ca14:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   3ca18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3ca1c:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
   3ca20:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   3ca24:	6838      	ldr	r0, [r7, #0]
   3ca26:	4639      	mov	r1, r7
   3ca28:	f7fb fbca 	bl	381c0 <ll_rx_put>
			ll_rx_sched();
   3ca2c:	f7fb fbd2 	bl	381d4 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   3ca30:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3ca34:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3ca38:	2202      	movs	r2, #2
   3ca3a:	f362 0301 	bfi	r3, r2, #0, #2
   3ca3e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3ca42:	e61f      	b.n	3c684 <ull_conn_llcp+0x28>
			event_counter = lll->event_counter +
   3ca44:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   3ca46:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3ca48:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3ca4a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3ca4e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   3ca50:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   3ca54:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   3ca56:	d175      	bne.n	3cb44 <ull_conn_llcp+0x4e8>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3ca58:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3ca5c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3ca60:	1afb      	subs	r3, r7, r3
   3ca62:	0418      	lsls	r0, r3, #16
   3ca64:	f53f ae0e 	bmi.w	3c684 <ull_conn_llcp+0x28>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3ca68:	f1bc 0f00 	cmp.w	ip, #0
   3ca6c:	f2c0 8373 	blt.w	3d156 <ull_conn_llcp+0xafa>
			conn->llcp_ack = conn->llcp_req;
   3ca70:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ca74:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&lll->data_chan_map[0],
   3ca78:	f104 0734 	add.w	r7, r4, #52	; 0x34
   3ca7c:	2205      	movs	r2, #5
   3ca7e:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3ca82:	4638      	mov	r0, r7
   3ca84:	f00f fe17 	bl	4c6b6 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3ca88:	2105      	movs	r1, #5
   3ca8a:	4638      	mov	r0, r7
   3ca8c:	f7f7 fed8 	bl	34840 <util_ones_count_get>
		lll->data_chan_count =
   3ca90:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3ca94:	2301      	movs	r3, #1
		lll->data_chan_count =
   3ca96:	f360 0c05 	bfi	ip, r0, #0, #6
   3ca9a:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3ca9e:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
   3caa2:	fa4f fc8c 	sxtb.w	ip, ip
   3caa6:	e5ed      	b.n	3c684 <ull_conn_llcp+0x28>
   3caa8:	0005563c 	.word	0x0005563c
   3caac:	0005518c 	.word	0x0005518c
   3cab0:	0005512c 	.word	0x0005512c
   3cab4:	20005cd8 	.word	0x20005cd8
			event_counter = lll->event_counter +
   3cab8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   3caba:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   3cabc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3cac0:	440a      	add	r2, r1
   3cac2:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   3cac4:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   3cac8:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   3caca:	f040 8119 	bne.w	3cd00 <ull_conn_llcp+0x6a4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3cace:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3cad2:	1ab6      	subs	r6, r6, r2
   3cad4:	0436      	lsls	r6, r6, #16
   3cad6:	f53f add8 	bmi.w	3c68a <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   3cada:	f104 0534 	add.w	r5, r4, #52	; 0x34
   3cade:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
   3cae0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   3cae4:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3cae8:	4628      	mov	r0, r5
   3caea:	f00f fde4 	bl	4c6b6 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3caee:	2105      	movs	r1, #5
   3caf0:	4628      	mov	r0, r5
   3caf2:	f7f7 fea5 	bl	34840 <util_ones_count_get>
		lll->data_chan_count =
   3caf6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3cafa:	2201      	movs	r2, #1
		lll->data_chan_count =
   3cafc:	f360 0305 	bfi	r3, r0, #0, #6
   3cb00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3cb04:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
   3cb08:	e5bf      	b.n	3c68a <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   3cb0a:	4ad5      	ldr	r2, [pc, #852]	; (3ce60 <ull_conn_llcp+0x804>)
   3cb0c:	49d5      	ldr	r1, [pc, #852]	; (3ce64 <ull_conn_llcp+0x808>)
   3cb0e:	48d6      	ldr	r0, [pc, #856]	; (3ce68 <ull_conn_llcp+0x80c>)
   3cb10:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3cb14:	f00d fcc7 	bl	4a4a6 <printk>
   3cb18:	4040      	eors	r0, r0
   3cb1a:	f380 8811 	msr	BASEPRI, r0
   3cb1e:	f04f 0003 	mov.w	r0, #3
   3cb22:	df02      	svc	2
			break;
   3cb24:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3cb28:	e5ac      	b.n	3c684 <ull_conn_llcp+0x28>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3cb2a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   3cb2e:	2900      	cmp	r1, #0
   3cb30:	f47f ada8 	bne.w	3c684 <ull_conn_llcp+0x28>
   3cb34:	e637      	b.n	3c7a6 <ull_conn_llcp+0x14a>
				event_len_prep(conn);
   3cb36:	4620      	mov	r0, r4
   3cb38:	f7fd fa64 	bl	3a004 <event_len_prep>
   3cb3c:	e5be      	b.n	3c6bc <ull_conn_llcp+0x60>
		conn->tx_data_last = tx;
   3cb3e:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3cb42:	e693      	b.n	3c86c <ull_conn_llcp+0x210>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cb44:	48c9      	ldr	r0, [pc, #804]	; (3ce6c <ull_conn_llcp+0x810>)
   3cb46:	f7f7 fca5 	bl	34494 <mem_acquire>
		if (tx) {
   3cb4a:	4680      	mov	r8, r0
   3cb4c:	2800      	cmp	r0, #0
   3cb4e:	d0e9      	beq.n	3cb24 <ull_conn_llcp+0x4c8>
						      conn->lll.latency + 6;
   3cb50:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3cb52:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
						      conn->lll.latency + 6;
   3cb56:	3306      	adds	r3, #6
   3cb58:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   3cb5a:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cb5e:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   3cb60:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cb64:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   3cb68:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cb6c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3cb6e:	2308      	movs	r3, #8
   3cb70:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3cb72:	2301      	movs	r3, #1
   3cb74:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3cb76:	2205      	movs	r2, #5
   3cb78:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3cb7c:	3008      	adds	r0, #8
   3cb7e:	f00f fd9a 	bl	4c6b6 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3cb82:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3cb86:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   3cb8a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cb8e:	2b00      	cmp	r3, #0
   3cb90:	f000 82ed 	beq.w	3d16e <ull_conn_llcp+0xb12>
	    !conn->llcp_enc.pause_tx &&
   3cb94:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cb98:	0792      	lsls	r2, r2, #30
   3cb9a:	f100 82e8 	bmi.w	3d16e <ull_conn_llcp+0xb12>
	    !conn->llcp_phy.pause_tx &&
   3cb9e:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cba2:	07d7      	lsls	r7, r2, #31
   3cba4:	f100 82e3 	bmi.w	3d16e <ull_conn_llcp+0xb12>
		if (conn->tx_head == conn->tx_data) {
   3cba8:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cbac:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cbb0:	428b      	cmp	r3, r1
   3cbb2:	f000 8577 	beq.w	3d6a4 <ull_conn_llcp+0x1048>
		} else if (!conn->tx_ctrl) {
   3cbb6:	2a00      	cmp	r2, #0
   3cbb8:	f000 85fb 	beq.w	3d7b2 <ull_conn_llcp+0x1156>
	tx->next = conn->tx_ctrl_last->next;
   3cbbc:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cbc0:	681a      	ldr	r2, [r3, #0]
   3cbc2:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3cbc6:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cbca:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3cbce:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cbd2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3cbd6:	2b00      	cmp	r3, #0
   3cbd8:	f47f ad54 	bne.w	3c684 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   3cbdc:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
   3cbe0:	e550      	b.n	3c684 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cbe2:	48a2      	ldr	r0, [pc, #648]	; (3ce6c <ull_conn_llcp+0x810>)
   3cbe4:	f7f7 fc56 	bl	34494 <mem_acquire>
	if (!tx) {
   3cbe8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3cbec:	4681      	mov	r9, r0
   3cbee:	2800      	cmp	r0, #0
   3cbf0:	f43f ad48 	beq.w	3c684 <ull_conn_llcp+0x28>
	if (!lll->role) {
   3cbf4:	f1bc 0f00 	cmp.w	ip, #0
   3cbf8:	f280 8346 	bge.w	3d288 <ull_conn_llcp+0xc2c>
	else if (!lll->enc_rx) {
   3cbfc:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3cc00:	071a      	lsls	r2, r3, #28
   3cc02:	f100 8443 	bmi.w	3d48c <ull_conn_llcp+0xe30>
		if (conn->llcp.encryption.error_code) {
   3cc06:	f894 8101 	ldrb.w	r8, [r4, #257]	; 0x101
   3cc0a:	f1b8 0f00 	cmp.w	r8, #0
   3cc0e:	f47f ad63 	bne.w	3c6d8 <ull_conn_llcp+0x7c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3cc12:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3cc16:	463b      	mov	r3, r7
   3cc18:	4642      	mov	r2, r8
   3cc1a:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3cc1e:	f204 1081 	addw	r0, r4, #385	; 0x181
   3cc22:	f006 fa9f 	bl	43164 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   3cc26:	4639      	mov	r1, r7
   3cc28:	2210      	movs	r2, #16
   3cc2a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3cc2e:	f00f fd42 	bl	4c6b6 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3cc32:	2208      	movs	r2, #8
   3cc34:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3cc38:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3cc3c:	f00f fd3b 	bl	4c6b6 <memcpy>
			lll->ccm_rx.direction = 1U;
   3cc40:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   3cc44:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3cc48:	f043 0301 	orr.w	r3, r3, #1
   3cc4c:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   3cc50:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   3cc54:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   3cc58:	f368 0300 	bfi	r3, r8, #0, #1
   3cc5c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   3cc60:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   3cc64:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   3cc68:	f043 0308 	orr.w	r3, r3, #8
   3cc6c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cc70:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   3cc74:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cc78:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   3cc7c:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   3cc80:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3cc84:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3cc88:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3cc8c:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cc90:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3cc94:	2301      	movs	r3, #1
   3cc96:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3cc9a:	2305      	movs	r3, #5
   3cc9c:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   3cca0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cca4:	2b00      	cmp	r3, #0
   3cca6:	f000 839f 	beq.w	3d3e8 <ull_conn_llcp+0xd8c>
	    !conn->llcp_enc.pause_tx &&
   3ccaa:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3ccae:	0797      	lsls	r7, r2, #30
   3ccb0:	f100 839a 	bmi.w	3d3e8 <ull_conn_llcp+0xd8c>
	    !conn->llcp_phy.pause_tx &&
   3ccb4:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3ccb8:	07d0      	lsls	r0, r2, #31
   3ccba:	f100 8395 	bmi.w	3d3e8 <ull_conn_llcp+0xd8c>
		if (conn->tx_head == conn->tx_data) {
   3ccbe:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3ccc2:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3ccc6:	428b      	cmp	r3, r1
   3ccc8:	f000 8595 	beq.w	3d7f6 <ull_conn_llcp+0x119a>
		} else if (!conn->tx_ctrl) {
   3cccc:	2a00      	cmp	r2, #0
   3ccce:	f000 869e 	beq.w	3da0e <ull_conn_llcp+0x13b2>
	tx->next = conn->tx_ctrl_last->next;
   3ccd2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3ccd6:	681a      	ldr	r2, [r3, #0]
   3ccd8:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3ccdc:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   3cce0:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cce4:	f8d9 3000 	ldr.w	r3, [r9]
   3cce8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3ccec:	2b00      	cmp	r3, #0
   3ccee:	f000 833a 	beq.w	3d366 <ull_conn_llcp+0xd0a>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3ccf2:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3ccf6:	f043 0303 	orr.w	r3, r3, #3
   3ccfa:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3ccfe:	e4c1      	b.n	3c684 <ull_conn_llcp+0x28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cd00:	485a      	ldr	r0, [pc, #360]	; (3ce6c <ull_conn_llcp+0x810>)
   3cd02:	f7f7 fbc7 	bl	34494 <mem_acquire>
		if (tx) {
   3cd06:	4605      	mov	r5, r0
   3cd08:	2800      	cmp	r0, #0
   3cd0a:	f43f acbe 	beq.w	3c68a <ull_conn_llcp+0x2e>
						      conn->lll.latency + 6;
   3cd0e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3cd10:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cd14:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   3cd16:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
   3cd18:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   3cd1c:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
   3cd1e:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
			conn->llcp.chan_map.instant = event_counter +
   3cd22:	f8a4 20fa 	strh.w	r2, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cd26:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3cd2a:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
   3cd2c:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cd2e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3cd30:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3cd32:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3cd34:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3cd38:	2205      	movs	r2, #5
   3cd3a:	3008      	adds	r0, #8
   3cd3c:	f00f fcbb 	bl	4c6b6 <memcpy>
	    conn->tx_head &&
   3cd40:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3cd44:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3cd48:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   3cd4c:	2b00      	cmp	r3, #0
   3cd4e:	f000 821a 	beq.w	3d186 <ull_conn_llcp+0xb2a>
	    !conn->llcp_enc.pause_tx &&
   3cd52:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cd56:	0792      	lsls	r2, r2, #30
   3cd58:	f100 8215 	bmi.w	3d186 <ull_conn_llcp+0xb2a>
	    !conn->llcp_phy.pause_tx &&
   3cd5c:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cd60:	07d7      	lsls	r7, r2, #31
   3cd62:	f100 8210 	bmi.w	3d186 <ull_conn_llcp+0xb2a>
		if (conn->tx_head == conn->tx_data) {
   3cd66:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cd6a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cd6e:	428b      	cmp	r3, r1
   3cd70:	f000 8480 	beq.w	3d674 <ull_conn_llcp+0x1018>
		} else if (!conn->tx_ctrl) {
   3cd74:	2a00      	cmp	r2, #0
   3cd76:	f000 8591 	beq.w	3d89c <ull_conn_llcp+0x1240>
	tx->next = conn->tx_ctrl_last->next;
   3cd7a:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cd7e:	681a      	ldr	r2, [r3, #0]
   3cd80:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   3cd82:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   3cd84:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   3cd86:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cd8a:	2b00      	cmp	r3, #0
   3cd8c:	f47f ac7d 	bne.w	3c68a <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   3cd90:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
   3cd94:	e479      	b.n	3c68a <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   3cd96:	f894 1131 	ldrb.w	r1, [r4, #305]	; 0x131
   3cd9a:	f894 e130 	ldrb.w	lr, [r4, #304]	; 0x130
   3cd9e:	4571      	cmp	r1, lr
   3cda0:	d066      	beq.n	3ce70 <ull_conn_llcp+0x814>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3cda2:	eba1 010e 	sub.w	r1, r1, lr
   3cda6:	07c9      	lsls	r1, r1, #31
   3cda8:	f57f ac6c 	bpl.w	3c684 <ull_conn_llcp+0x28>
	if (conn->common.fex_valid) {
   3cdac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3cdb0:	f013 0701 	ands.w	r7, r3, #1
   3cdb4:	f000 81fe 	beq.w	3d1b4 <ull_conn_llcp+0xb58>
		rx = ll_pdu_rx_alloc();
   3cdb8:	f7fb fa30 	bl	3821c <ll_pdu_rx_alloc>
		if (!rx) {
   3cdbc:	4607      	mov	r7, r0
   3cdbe:	b398      	cbz	r0, 3ce28 <ull_conn_llcp+0x7cc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3cdc0:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3cdc4:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cdc8:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   3cdca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3cdcc:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cdce:	f043 0303 	orr.w	r3, r3, #3
   3cdd2:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3cdd4:	2309      	movs	r3, #9
   3cdd6:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3cdd8:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3cdda:	2303      	movs	r3, #3
   3cddc:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3cdde:	4641      	mov	r1, r8
   3cde0:	2208      	movs	r2, #8
   3cde2:	3020      	adds	r0, #32
   3cde4:	f00f fc72 	bl	4c6cc <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   3cde8:	e9d4 2350 	ldrd	r2, r3, [r4, #320]	; 0x140
	sys_put_le16(val >> 16, &dst[2]);
   3cdec:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   3cdee:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   3cdf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3cdf6:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   3cdfa:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   3cdfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   3ce00:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   3ce04:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3ce08:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   3ce0a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   3ce0e:	0a12      	lsrs	r2, r2, #8
   3ce10:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   3ce14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   3ce18:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   3ce1c:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   3ce1e:	6808      	ldr	r0, [r1, #0]
   3ce20:	f7fb f9ce 	bl	381c0 <ll_rx_put>
	ll_rx_sched();
   3ce24:	f7fb f9d6 	bl	381d4 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3ce28:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ce2c:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		return;
   3ce30:	e420      	b.n	3c674 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
   3ce32:	3301      	adds	r3, #1
   3ce34:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3ce38:	e431      	b.n	3c69e <ull_conn_llcp+0x42>
			tx->next = conn->tx_head;
   3ce3a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3ce3c:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce40:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ce44:	2b00      	cmp	r3, #0
   3ce46:	f47f ad11 	bne.w	3c86c <ull_conn_llcp+0x210>
   3ce4a:	e678      	b.n	3cb3e <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   3ce4c:	2a00      	cmp	r2, #0
   3ce4e:	f47f ad60 	bne.w	3c912 <ull_conn_llcp+0x2b6>
			tx->next = conn->tx_head;
   3ce52:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3ce54:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce58:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3ce5c:	e561      	b.n	3c922 <ull_conn_llcp+0x2c6>
   3ce5e:	bf00      	nop
   3ce60:	0005563c 	.word	0x0005563c
   3ce64:	0005518c 	.word	0x0005518c
   3ce68:	0005512c 	.word	0x0005512c
   3ce6c:	20005cd8 	.word	0x20005cd8
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   3ce70:	f894 1149 	ldrb.w	r1, [r4, #329]	; 0x149
   3ce74:	f894 e148 	ldrb.w	lr, [r4, #328]	; 0x148
   3ce78:	4571      	cmp	r1, lr
   3ce7a:	d038      	beq.n	3ceee <ull_conn_llcp+0x892>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   3ce7c:	eba1 010e 	sub.w	r1, r1, lr
   3ce80:	07c8      	lsls	r0, r1, #31
   3ce82:	f57f abff 	bpl.w	3c684 <ull_conn_llcp+0x28>
	if (conn->llcp_version.tx == 0U) {
   3ce86:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3ce8a:	07d9      	lsls	r1, r3, #31
   3ce8c:	f140 833a 	bpl.w	3d504 <ull_conn_llcp+0xea8>
	} else if (conn->llcp_version.rx) {
   3ce90:	0798      	lsls	r0, r3, #30
   3ce92:	f140 832c 	bpl.w	3d4ee <ull_conn_llcp+0xe92>
		rx = ll_pdu_rx_alloc();
   3ce96:	f7fb f9c1 	bl	3821c <ll_pdu_rx_alloc>
		if (!rx) {
   3ce9a:	4601      	mov	r1, r0
   3ce9c:	2800      	cmp	r0, #0
   3ce9e:	d0c3      	beq.n	3ce28 <ull_conn_llcp+0x7cc>
		conn->llcp_version.ack = conn->llcp_version.req;
   3cea0:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
   3cea4:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
		rx->hdr.handle = conn->lll.handle;
   3cea8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3ceaa:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3ceac:	2303      	movs	r3, #3
   3ceae:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ceb0:	7f03      	ldrb	r3, [r0, #28]
   3ceb2:	f043 0303 	orr.w	r3, r3, #3
   3ceb6:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3ceb8:	2306      	movs	r3, #6
   3ceba:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3cebc:	230c      	movs	r3, #12
   3cebe:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   3cec0:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
   3cec4:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   3cec8:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
   3cecc:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   3ced0:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
   3ced4:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   3ced8:	6800      	ldr	r0, [r0, #0]
   3ceda:	f7fb f971 	bl	381c0 <ll_rx_put>
		ll_rx_sched();
   3cede:	f7fb f979 	bl	381d4 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3cee2:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3cee6:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3ceea:	f7ff bbc3 	b.w	3c674 <ull_conn_llcp+0x18>
		} else if (conn->llcp_conn_param.ack !=
   3ceee:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
   3cef2:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3cef6:	458e      	cmp	lr, r1
   3cef8:	f000 8238 	beq.w	3d36c <ull_conn_llcp+0xd10>
	return conn_upd_curr && (conn_upd_curr != conn);
   3cefc:	f8df 829c 	ldr.w	r8, [pc, #668]	; 3d19c <ull_conn_llcp+0xb40>
   3cf00:	f8d8 1000 	ldr.w	r1, [r8]
   3cf04:	2900      	cmp	r1, #0
   3cf06:	f000 8353 	beq.w	3d5b0 <ull_conn_llcp+0xf54>
   3cf0a:	428c      	cmp	r4, r1
   3cf0c:	f47f abba 	bne.w	3c684 <ull_conn_llcp+0x28>
	switch (conn->llcp_conn_param.state) {
   3cf10:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
   3cf14:	f001 010f 	and.w	r1, r1, #15
   3cf18:	2908      	cmp	r1, #8
   3cf1a:	f200 865b 	bhi.w	3dbd4 <ull_conn_llcp+0x1578>
   3cf1e:	f20f 0e08 	addw	lr, pc, #8
   3cf22:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   3cf26:	bf00      	nop
   3cf28:	0003d00b 	.word	0x0003d00b
   3cf2c:	0003d0d1 	.word	0x0003d0d1
   3cf30:	0003cfbb 	.word	0x0003cfbb
   3cf34:	0003c675 	.word	0x0003c675
   3cf38:	0003c675 	.word	0x0003c675
   3cf3c:	0003c675 	.word	0x0003c675
   3cf40:	0003c675 	.word	0x0003c675
   3cf44:	0003c675 	.word	0x0003c675
   3cf48:	0003cf4d 	.word	0x0003cf4d
			event_counter = lll->event_counter +
   3cf4c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   3cf4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   3cf50:	f8d4 e1b0 	ldr.w	lr, [r4, #432]	; 0x1b0
			event_counter = lll->event_counter +
   3cf54:	4413      	add	r3, r2
   3cf56:	4433      	add	r3, r6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3cf58:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   3cf5c:	f82e 3c02 	strh.w	r3, [lr, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3cf60:	2304      	movs	r3, #4
   3cf62:	f363 0203 	bfi	r2, r3, #0, #4
   3cf66:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		if (!conn->tx_ctrl) {
   3cf6a:	e9d4 3275 	ldrd	r3, r2, [r4, #468]	; 0x1d4
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   3cf6e:	f1ae 0113 	sub.w	r1, lr, #19
	if (
   3cf72:	2b00      	cmp	r3, #0
   3cf74:	f000 838c 	beq.w	3d690 <ull_conn_llcp+0x1034>
	    conn->tx_head &&
   3cf78:	07bf      	lsls	r7, r7, #30
   3cf7a:	f100 8389 	bmi.w	3d690 <ull_conn_llcp+0x1034>
	    !conn->llcp_phy.pause_tx &&
   3cf7e:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   3cf82:	07c0      	lsls	r0, r0, #31
   3cf84:	f100 8384 	bmi.w	3d690 <ull_conn_llcp+0x1034>
		if (conn->tx_head == conn->tx_data) {
   3cf88:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   3cf8c:	4283      	cmp	r3, r0
   3cf8e:	f000 85d4 	beq.w	3db3a <ull_conn_llcp+0x14de>
		} else if (!conn->tx_ctrl) {
   3cf92:	2a00      	cmp	r2, #0
   3cf94:	f000 85ff 	beq.w	3db96 <ull_conn_llcp+0x153a>
	tx->next = conn->tx_ctrl_last->next;
   3cf98:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cf9c:	681a      	ldr	r2, [r3, #0]
   3cf9e:	f84e 2c13 	str.w	r2, [lr, #-19]
	conn->tx_ctrl_last->next = tx;
   3cfa2:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   3cfa4:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cfa8:	f85e 3c13 	ldr.w	r3, [lr, #-19]
   3cfac:	2b00      	cmp	r3, #0
   3cfae:	f47f ab69 	bne.w	3c684 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   3cfb2:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
   3cfb6:	f7ff bb65 	b.w	3c684 <ull_conn_llcp+0x28>
	if (conn->llcp_enc.pause_tx) {
   3cfba:	07bb      	lsls	r3, r7, #30
   3cfbc:	f53f ab62 	bmi.w	3c684 <ull_conn_llcp+0x28>
	rx = ll_pdu_rx_alloc();
   3cfc0:	f7fb f92c 	bl	3821c <ll_pdu_rx_alloc>
	if (!rx) {
   3cfc4:	4601      	mov	r1, r0
   3cfc6:	2800      	cmp	r0, #0
   3cfc8:	f43f af2e 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cfcc:	f894 0196 	ldrb.w	r0, [r4, #406]	; 0x196
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cfd0:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cfd2:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cfd4:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cfd8:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3cfdc:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cfde:	f884 0196 	strb.w	r0, [r4, #406]	; 0x196
	rx->hdr.handle = conn->lll.handle;
   3cfe2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3cfe4:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cfe6:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3cfe8:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3cfea:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
   3cfee:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3cff0:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
   3cff4:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3cff6:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
   3cffa:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3cffc:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   3d000:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3d002:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   3d004:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3d006:	77cb      	strb	r3, [r1, #31]
   3d008:	e709      	b.n	3ce1e <ull_conn_llcp+0x7c2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d00a:	4865      	ldr	r0, [pc, #404]	; (3d1a0 <ull_conn_llcp+0xb44>)
   3d00c:	f7f7 fa42 	bl	34494 <mem_acquire>
	if (!tx) {
   3d010:	4602      	mov	r2, r0
   3d012:	2800      	cmp	r0, #0
   3d014:	f43f af08 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d018:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   3d01a:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d01e:	f043 0303 	orr.w	r3, r3, #3
   3d022:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3d024:	2318      	movs	r3, #24
   3d026:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3d028:	230f      	movs	r3, #15
   3d02a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3d02c:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
   3d030:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3d032:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
   3d036:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3d038:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
   3d03c:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3d03e:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   3d042:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
   3d044:	2300      	movs	r3, #0
   3d046:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3d048:	74c3      	strb	r3, [r0, #19]
   3d04a:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   3d04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d050:	7543      	strb	r3, [r0, #21]
   3d052:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   3d054:	75c3      	strb	r3, [r0, #23]
   3d056:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   3d058:	7643      	strb	r3, [r0, #25]
   3d05a:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   3d05c:	76c3      	strb	r3, [r0, #27]
   3d05e:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   3d060:	7743      	strb	r3, [r0, #29]
   3d062:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
   3d064:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3d068:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3d06c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   3d070:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3d074:	2107      	movs	r1, #7
   3d076:	f361 0303 	bfi	r3, r1, #0, #4
   3d07a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3d07e:	68a3      	ldr	r3, [r4, #8]
   3d080:	2b00      	cmp	r3, #0
   3d082:	da0a      	bge.n	3d09a <ull_conn_llcp+0xa3e>
			uint32_t ticks_prepare_to_start =
   3d084:	68e7      	ldr	r7, [r4, #12]
   3d086:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   3d088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   3d08c:	4287      	cmp	r7, r0
   3d08e:	bf2c      	ite	cs
   3d090:	19e9      	addcs	r1, r5, r7
   3d092:	1829      	addcc	r1, r5, r0
   3d094:	1acb      	subs	r3, r1, r3
   3d096:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
		win_offs = &p->offset0;
   3d09a:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
   3d09c:	4b41      	ldr	r3, [pc, #260]	; (3d1a4 <ull_conn_llcp+0xb48>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   3d09e:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3d0a2:	2201      	movs	r2, #1
   3d0a4:	2102      	movs	r1, #2
   3d0a6:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   3d0a8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3d0aa:	f7f7 facb 	bl	34644 <mayfly_enqueue>
		LL_ASSERT(!retval);
   3d0ae:	2800      	cmp	r0, #0
   3d0b0:	f43f aeba 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
   3d0b4:	4a3c      	ldr	r2, [pc, #240]	; (3d1a8 <ull_conn_llcp+0xb4c>)
   3d0b6:	493d      	ldr	r1, [pc, #244]	; (3d1ac <ull_conn_llcp+0xb50>)
   3d0b8:	f640 63f6 	movw	r3, #3830	; 0xef6
   3d0bc:	483c      	ldr	r0, [pc, #240]	; (3d1b0 <ull_conn_llcp+0xb54>)
   3d0be:	f00d f9f2 	bl	4a4a6 <printk>
   3d0c2:	4040      	eors	r0, r0
   3d0c4:	f380 8811 	msr	BASEPRI, r0
   3d0c8:	f04f 0003 	mov.w	r0, #3
   3d0cc:	df02      	svc	2
   3d0ce:	e6ab      	b.n	3ce28 <ull_conn_llcp+0x7cc>
	if (conn->llcp_conn_param.status) {
   3d0d0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   3d0d4:	2b00      	cmp	r3, #0
   3d0d6:	f040 8324 	bne.w	3d722 <ull_conn_llcp+0x10c6>
	if (!conn->lll.role) {
   3d0da:	2a00      	cmp	r2, #0
   3d0dc:	f2c0 8403 	blt.w	3d8e6 <ull_conn_llcp+0x128a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3d0e0:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_offset_us = 0U;
   3d0e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3d0e8:	2106      	movs	r1, #6
   3d0ea:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   3d0ee:	f894 11a0 	ldrb.w	r1, [r4, #416]	; 0x1a0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3d0f2:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_size = 1U;
   3d0f6:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   3d0f8:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
		conn->llcp_cu.win_size = 1U;
   3d0fc:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
		if (preferred_periodicity) {
   3d100:	2900      	cmp	r1, #0
   3d102:	f000 849f 	beq.w	3da44 <ull_conn_llcp+0x13e8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3d106:	fbb2 f3f1 	udiv	r3, r2, r1
   3d10a:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   3d10e:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3d112:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   3d114:	4299      	cmp	r1, r3
   3d116:	bf98      	it	ls
   3d118:	461a      	movls	r2, r3
   3d11a:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3d11e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3d122:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3d126:	f8b4 119c 	ldrh.w	r1, [r4, #412]	; 0x19c
   3d12a:	f8a4 111e 	strh.w	r1, [r4, #286]	; 0x11e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3d12e:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3d132:	00db      	lsls	r3, r3, #3
   3d134:	f022 020f 	bic.w	r2, r2, #15
   3d138:	f043 0302 	orr.w	r3, r3, #2
   3d13c:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   3d13e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3d142:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   3d146:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3d14a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.ack--;
   3d14e:	f884 9119 	strb.w	r9, [r4, #281]	; 0x119
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3d152:	f7ff ba9a 	b.w	3c68a <ull_conn_llcp+0x2e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3d156:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3d15a:	2b00      	cmp	r3, #0
   3d15c:	f43f ac88 	beq.w	3ca70 <ull_conn_llcp+0x414>
			conn->periph.llcp_type = LLCP_NONE;
   3d160:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
   3d164:	e488      	b.n	3ca78 <ull_conn_llcp+0x41c>
		conn->tx_data_last = tx;
   3d166:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3d16a:	f7ff bbdd 	b.w	3c928 <ull_conn_llcp+0x2cc>
		if (!conn->tx_ctrl) {
   3d16e:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d172:	2a00      	cmp	r2, #0
   3d174:	f47f ad22 	bne.w	3cbbc <ull_conn_llcp+0x560>
			tx->next = conn->tx_head;
   3d178:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3d17c:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d180:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3d184:	e525      	b.n	3cbd2 <ull_conn_llcp+0x576>
		if (!conn->tx_ctrl) {
   3d186:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d18a:	2a00      	cmp	r2, #0
   3d18c:	f47f adf5 	bne.w	3cd7a <ull_conn_llcp+0x71e>
			tx->next = conn->tx_head;
   3d190:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   3d192:	e9c4 5575 	strd	r5, r5, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d196:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
   3d19a:	e5f6      	b.n	3cd8a <ull_conn_llcp+0x72e>
   3d19c:	20005c44 	.word	0x20005c44
   3d1a0:	20005cd8 	.word	0x20005cd8
   3d1a4:	20000ee0 	.word	0x20000ee0
   3d1a8:	0005563c 	.word	0x0005563c
   3d1ac:	00055430 	.word	0x00055430
   3d1b0:	0005512c 	.word	0x0005512c
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d1b4:	48d0      	ldr	r0, [pc, #832]	; (3d4f8 <ull_conn_llcp+0xe9c>)
   3d1b6:	f7f7 f96d 	bl	34494 <mem_acquire>
	if (tx) {
   3d1ba:	4680      	mov	r8, r0
   3d1bc:	2800      	cmp	r0, #0
   3d1be:	f43f ae33 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
		conn->llcp_feature.ack--;
   3d1c2:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   3d1c6:	3b01      	subs	r3, #1
   3d1c8:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   3d1cc:	2309      	movs	r3, #9
   3d1ce:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   3d1d0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d1d4:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d1d6:	7903      	ldrb	r3, [r0, #4]
   3d1d8:	f043 0303 	orr.w	r3, r3, #3
   3d1dc:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3d1de:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   3d1e2:	bfac      	ite	ge
   3d1e4:	2308      	movge	r3, #8
   3d1e6:	230e      	movlt	r3, #14
   3d1e8:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3d1ea:	4639      	mov	r1, r7
   3d1ec:	4410      	add	r0, r2
   3d1ee:	f00f fa6d 	bl	4c6cc <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   3d1f2:	e9d4 234e 	ldrd	r2, r3, [r4, #312]	; 0x138
	sys_put_le16(val >> 16, &dst[2]);
   3d1f6:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   3d1f8:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   3d1fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3d200:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   3d204:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   3d206:	f888 300c 	strb.w	r3, [r8, #12]
   3d20a:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   3d20e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   3d212:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   3d216:	0a09      	lsrs	r1, r1, #8
   3d218:	0a12      	lsrs	r2, r2, #8
   3d21a:	f888 100b 	strb.w	r1, [r8, #11]
   3d21e:	f888 300d 	strb.w	r3, [r8, #13]
   3d222:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   3d226:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3d22a:	2b00      	cmp	r3, #0
   3d22c:	f000 80d0 	beq.w	3d3d0 <ull_conn_llcp+0xd74>
	    !conn->llcp_enc.pause_tx &&
   3d230:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d234:	0792      	lsls	r2, r2, #30
   3d236:	f100 80cb 	bmi.w	3d3d0 <ull_conn_llcp+0xd74>
	    !conn->llcp_phy.pause_tx &&
   3d23a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3d23e:	07d7      	lsls	r7, r2, #31
   3d240:	f100 80c6 	bmi.w	3d3d0 <ull_conn_llcp+0xd74>
		if (conn->tx_head == conn->tx_data) {
   3d244:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d248:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d24c:	428b      	cmp	r3, r1
   3d24e:	f000 8248 	beq.w	3d6e2 <ull_conn_llcp+0x1086>
		} else if (!conn->tx_ctrl) {
   3d252:	2a00      	cmp	r2, #0
   3d254:	f000 832b 	beq.w	3d8ae <ull_conn_llcp+0x1252>
	tx->next = conn->tx_ctrl_last->next;
   3d258:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d25c:	681a      	ldr	r2, [r3, #0]
   3d25e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3d262:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3d266:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3d26a:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d26e:	2b00      	cmp	r3, #0
   3d270:	f000 81d5 	beq.w	3d61e <ull_conn_llcp+0xfc2>
		conn->procedure_expire = conn->procedure_reload;
   3d274:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d278:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d27c:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		conn->procedure_expire = conn->procedure_reload;
   3d280:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   3d284:	f7ff b9f6 	b.w	3c674 <ull_conn_llcp+0x18>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   3d288:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3d28c:	463b      	mov	r3, r7
   3d28e:	4642      	mov	r2, r8
   3d290:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3d294:	f204 1081 	addw	r0, r4, #385	; 0x181
   3d298:	f005 ff64 	bl	43164 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   3d29c:	4639      	mov	r1, r7
   3d29e:	2210      	movs	r2, #16
   3d2a0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3d2a4:	f00f fa07 	bl	4c6b6 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3d2a8:	2208      	movs	r2, #8
   3d2aa:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3d2ae:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3d2b2:	f00f fa00 	bl	4c6b6 <memcpy>
		lll->enc_rx = 1;
   3d2b6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   3d2ba:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   3d2be:	f023 0318 	bic.w	r3, r3, #24
   3d2c2:	f043 0318 	orr.w	r3, r3, #24
   3d2c6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   3d2ca:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   3d2ce:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   3d2d2:	f368 0300 	bfi	r3, r8, #0, #1
   3d2d6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   3d2da:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   3d2de:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   3d2e2:	f043 0301 	orr.w	r3, r3, #1
   3d2e6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3d2ea:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   3d2ec:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   3d2f0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   3d2f4:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3d2f8:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3d2fc:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3d300:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d304:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3d308:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3d30c:	2306      	movs	r3, #6
   3d30e:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   3d312:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d316:	f042 0203 	orr.w	r2, r2, #3
   3d31a:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   3d31e:	2b00      	cmp	r3, #0
   3d320:	d04b      	beq.n	3d3ba <ull_conn_llcp+0xd5e>
	    !conn->llcp_enc.pause_tx &&
   3d322:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d326:	0790      	lsls	r0, r2, #30
   3d328:	d447      	bmi.n	3d3ba <ull_conn_llcp+0xd5e>
	    !conn->llcp_phy.pause_tx &&
   3d32a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3d32e:	07d1      	lsls	r1, r2, #31
   3d330:	d443      	bmi.n	3d3ba <ull_conn_llcp+0xd5e>
		if (conn->tx_head == conn->tx_data) {
   3d332:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3d336:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3d338:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d33c:	f000 81e1 	beq.w	3d702 <ull_conn_llcp+0x10a6>
		} else if (!conn->tx_ctrl) {
   3d340:	2a00      	cmp	r2, #0
   3d342:	f000 835b 	beq.w	3d9fc <ull_conn_llcp+0x13a0>
	tx->next = conn->tx_ctrl_last->next;
   3d346:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d34a:	681a      	ldr	r2, [r3, #0]
   3d34c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3d350:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3d354:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3d358:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d35c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3d360:	2b00      	cmp	r3, #0
   3d362:	f47f acc6 	bne.w	3ccf2 <ull_conn_llcp+0x696>
		conn->tx_data_last = tx;
   3d366:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3d36a:	e4c2      	b.n	3ccf2 <ull_conn_llcp+0x696>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3d36c:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3d370:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3d374:	4299      	cmp	r1, r3
   3d376:	d043      	beq.n	3d400 <ull_conn_llcp+0xda4>
			event_len_prep(conn);
   3d378:	4620      	mov	r0, r4
   3d37a:	f7fc fe43 	bl	3a004 <event_len_prep>
   3d37e:	e553      	b.n	3ce28 <ull_conn_llcp+0x7cc>
		if (!conn->tx_ctrl) {
   3d380:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d384:	2a00      	cmp	r2, #0
   3d386:	f47f ab22 	bne.w	3c9ce <ull_conn_llcp+0x372>
			tx->next = conn->tx_head;
   3d38a:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3d38c:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d390:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   3d394:	f7ff bb23 	b.w	3c9de <ull_conn_llcp+0x382>
			conn->tx_data = conn->tx_data->next;
   3d398:	681a      	ldr	r2, [r3, #0]
   3d39a:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d39e:	2900      	cmp	r1, #0
   3d3a0:	f47f aa59 	bne.w	3c856 <ull_conn_llcp+0x1fa>
			tx->next = conn->tx_head->next;
   3d3a4:	681a      	ldr	r2, [r3, #0]
   3d3a6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d3a8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3d3aa:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3d3ac:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3d3b0:	2b00      	cmp	r3, #0
   3d3b2:	f47f aa5b 	bne.w	3c86c <ull_conn_llcp+0x210>
   3d3b6:	f7ff bbc2 	b.w	3cb3e <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   3d3ba:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d3be:	2a00      	cmp	r2, #0
   3d3c0:	d1c1      	bne.n	3d346 <ull_conn_llcp+0xcea>
			tx->next = conn->tx_head;
   3d3c2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d3c6:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d3ca:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d3ce:	e7c5      	b.n	3d35c <ull_conn_llcp+0xd00>
		if (!conn->tx_ctrl) {
   3d3d0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d3d4:	2a00      	cmp	r2, #0
   3d3d6:	f47f af3f 	bne.w	3d258 <ull_conn_llcp+0xbfc>
			tx->next = conn->tx_head;
   3d3da:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3d3de:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d3e2:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3d3e6:	e742      	b.n	3d26e <ull_conn_llcp+0xc12>
		if (!conn->tx_ctrl) {
   3d3e8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d3ec:	2a00      	cmp	r2, #0
   3d3ee:	f47f ac70 	bne.w	3ccd2 <ull_conn_llcp+0x676>
			tx->next = conn->tx_head;
   3d3f2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d3f6:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d3fa:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d3fe:	e471      	b.n	3cce4 <ull_conn_llcp+0x688>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3d400:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3d404:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3d408:	428b      	cmp	r3, r1
   3d40a:	f43f a93b 	beq.w	3c684 <ull_conn_llcp+0x28>
	switch (conn->llcp_phy.state) {
   3d40e:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3d412:	f003 0703 	and.w	r7, r3, #3
   3d416:	2f03      	cmp	r7, #3
   3d418:	f000 81fe 	beq.w	3d818 <ull_conn_llcp+0x11bc>
   3d41c:	2f00      	cmp	r7, #0
   3d41e:	f47f a930 	bne.w	3c682 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d422:	4835      	ldr	r0, [pc, #212]	; (3d4f8 <ull_conn_llcp+0xe9c>)
   3d424:	f7f7 f836 	bl	34494 <mem_acquire>
		if (!tx) {
   3d428:	4601      	mov	r1, r0
   3d42a:	2800      	cmp	r0, #0
   3d42c:	f43f acfc 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3d430:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d434:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3d438:	2201      	movs	r2, #1
   3d43a:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3d43e:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3d442:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3d446:	f3c3 0782 	ubfx	r7, r3, #2, #3
   3d44a:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d44e:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   3d452:	f3c0 0040 	ubfx	r0, r0, #1, #1
   3d456:	f360 07c3 	bfi	r7, r0, #3, #1
   3d45a:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3d45e:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d462:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3d464:	f367 02c5 	bfi	r2, r7, #3, #3
   3d468:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3d46c:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   3d470:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d472:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   3d476:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3d478:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d47a:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   3d47c:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   3d47e:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3d480:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3d482:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3d484:	4620      	mov	r0, r4
   3d486:	f7fc fa59 	bl	3993c <ctrl_tx_pause_enqueue>
   3d48a:	e6f3      	b.n	3d274 <ull_conn_llcp+0xc18>
	conn->lll.enc_tx = 1;
   3d48c:	f043 0310 	orr.w	r3, r3, #16
   3d490:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3d494:	2301      	movs	r3, #1
   3d496:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d498:	7903      	ldrb	r3, [r0, #4]
   3d49a:	f043 0303 	orr.w	r3, r3, #3
   3d49e:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   3d4a0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3d4a4:	2206      	movs	r2, #6
   3d4a6:	71c2      	strb	r2, [r0, #7]
	if (
   3d4a8:	2b00      	cmp	r3, #0
   3d4aa:	d072      	beq.n	3d592 <ull_conn_llcp+0xf36>
	    !conn->llcp_enc.pause_tx &&
   3d4ac:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d4b0:	0791      	lsls	r1, r2, #30
   3d4b2:	d46e      	bmi.n	3d592 <ull_conn_llcp+0xf36>
	    !conn->llcp_phy.pause_tx &&
   3d4b4:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3d4b8:	07d2      	lsls	r2, r2, #31
   3d4ba:	d46a      	bmi.n	3d592 <ull_conn_llcp+0xf36>
		if (conn->tx_head == conn->tx_data) {
   3d4bc:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3d4c0:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3d4c2:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d4c6:	f000 817e 	beq.w	3d7c6 <ull_conn_llcp+0x116a>
		} else if (!conn->tx_ctrl) {
   3d4ca:	2a00      	cmp	r2, #0
   3d4cc:	f000 82b1 	beq.w	3da32 <ull_conn_llcp+0x13d6>
	tx->next = conn->tx_ctrl_last->next;
   3d4d0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d4d4:	681a      	ldr	r2, [r3, #0]
   3d4d6:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3d4da:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   3d4de:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d4e2:	f8d9 3000 	ldr.w	r3, [r9]
   3d4e6:	2b00      	cmp	r3, #0
   3d4e8:	f47f ac03 	bne.w	3ccf2 <ull_conn_llcp+0x696>
   3d4ec:	e73b      	b.n	3d366 <ull_conn_llcp+0xd0a>
		LL_ASSERT(0);
   3d4ee:	4a03      	ldr	r2, [pc, #12]	; (3d4fc <ull_conn_llcp+0xea0>)
   3d4f0:	4903      	ldr	r1, [pc, #12]	; (3d500 <ull_conn_llcp+0xea4>)
   3d4f2:	f640 63a1 	movw	r3, #3745	; 0xea1
   3d4f6:	e5e1      	b.n	3d0bc <ull_conn_llcp+0xa60>
   3d4f8:	20005cd8 	.word	0x20005cd8
   3d4fc:	0005563c 	.word	0x0005563c
   3d500:	0005518c 	.word	0x0005518c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d504:	48c3      	ldr	r0, [pc, #780]	; (3d814 <ull_conn_llcp+0x11b8>)
   3d506:	f7f6 ffc5 	bl	34494 <mem_acquire>
		if (tx) {
   3d50a:	2800      	cmp	r0, #0
   3d50c:	f43f ac8c 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
			conn->llcp_version.ack--;
   3d510:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
   3d514:	3b01      	subs	r3, #1
   3d516:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
			conn->llcp_version.tx = 1U;
   3d51a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3d51e:	f043 0301 	orr.w	r3, r3, #1
   3d522:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d526:	7903      	ldrb	r3, [r0, #4]
   3d528:	f043 0303 	orr.w	r3, r3, #3
   3d52c:	7103      	strb	r3, [r0, #4]
			pdu->len =
   3d52e:	2306      	movs	r3, #6
   3d530:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   3d532:	230c      	movs	r3, #12
   3d534:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   3d536:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   3d538:	f06f 030e 	mvn.w	r3, #14
   3d53c:	7243      	strb	r3, [r0, #9]
   3d53e:	2305      	movs	r3, #5
   3d540:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   3d542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d546:	72c3      	strb	r3, [r0, #11]
   3d548:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   3d54a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3d54e:	2b00      	cmp	r3, #0
   3d550:	d070      	beq.n	3d634 <ull_conn_llcp+0xfd8>
	    !conn->llcp_enc.pause_tx &&
   3d552:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d556:	0792      	lsls	r2, r2, #30
   3d558:	d46c      	bmi.n	3d634 <ull_conn_llcp+0xfd8>
	    !conn->llcp_phy.pause_tx &&
   3d55a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3d55e:	07d7      	lsls	r7, r2, #31
   3d560:	d468      	bmi.n	3d634 <ull_conn_llcp+0xfd8>
		if (conn->tx_head == conn->tx_data) {
   3d562:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3d566:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3d568:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d56c:	f000 81af 	beq.w	3d8ce <ull_conn_llcp+0x1272>
		} else if (!conn->tx_ctrl) {
   3d570:	2a00      	cmp	r2, #0
   3d572:	f000 82f8 	beq.w	3db66 <ull_conn_llcp+0x150a>
	tx->next = conn->tx_ctrl_last->next;
   3d576:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d57a:	681a      	ldr	r2, [r3, #0]
   3d57c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d57e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3d580:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d584:	6803      	ldr	r3, [r0, #0]
   3d586:	2b00      	cmp	r3, #0
   3d588:	f47f ae74 	bne.w	3d274 <ull_conn_llcp+0xc18>
		conn->tx_data_last = tx;
   3d58c:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
			conn->procedure_expire = conn->procedure_reload;
   3d590:	e670      	b.n	3d274 <ull_conn_llcp+0xc18>
		if (!conn->tx_ctrl) {
   3d592:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d596:	2a00      	cmp	r2, #0
   3d598:	d19a      	bne.n	3d4d0 <ull_conn_llcp+0xe74>
			tx->next = conn->tx_head;
   3d59a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d59e:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d5a2:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d5a6:	e79c      	b.n	3d4e2 <ull_conn_llcp+0xe86>
		conn->tx_data_last = tx;
   3d5a8:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   3d5ac:	f7ff ba1a 	b.w	3c9e4 <ull_conn_llcp+0x388>
	switch (conn->llcp_conn_param.state) {
   3d5b0:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3d5b4:	f003 030f 	and.w	r3, r3, #15
   3d5b8:	2b08      	cmp	r3, #8
   3d5ba:	f200 830b 	bhi.w	3dbd4 <ull_conn_llcp+0x1578>
   3d5be:	a101      	add	r1, pc, #4	; (adr r1, 3d5c4 <ull_conn_llcp+0xf68>)
   3d5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3d5c4:	0003d00b 	.word	0x0003d00b
   3d5c8:	0003d0d1 	.word	0x0003d0d1
   3d5cc:	0003cfbb 	.word	0x0003cfbb
   3d5d0:	0003c685 	.word	0x0003c685
   3d5d4:	0003c685 	.word	0x0003c685
   3d5d8:	0003c685 	.word	0x0003c685
   3d5dc:	0003c685 	.word	0x0003c685
   3d5e0:	0003c685 	.word	0x0003c685
   3d5e4:	0003cf4d 	.word	0x0003cf4d
		if (!conn->tx_ctrl) {
   3d5e8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d5ec:	2a00      	cmp	r2, #0
   3d5ee:	f47f a8a7 	bne.w	3c740 <ull_conn_llcp+0xe4>
			tx->next = conn->tx_head;
   3d5f2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d5f6:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d5fa:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d5fe:	f7ff b8a8 	b.w	3c752 <ull_conn_llcp+0xf6>
			conn->tx_data = conn->tx_data->next;
   3d602:	6819      	ldr	r1, [r3, #0]
   3d604:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d608:	2a00      	cmp	r2, #0
   3d60a:	f47f a982 	bne.w	3c912 <ull_conn_llcp+0x2b6>
			tx->next = conn->tx_head->next;
   3d60e:	681a      	ldr	r2, [r3, #0]
   3d610:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d612:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3d614:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3d616:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3d61a:	f7ff b982 	b.w	3c922 <ull_conn_llcp+0x2c6>
		conn->tx_data_last = tx;
   3d61e:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
		conn->procedure_expire = conn->procedure_reload;
   3d622:	e627      	b.n	3d274 <ull_conn_llcp+0xc18>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3d624:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   3d626:	f889 8008 	strb.w	r8, [r9, #8]
   3d62a:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3d62c:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   3d630:	f7ff b868 	b.w	3c704 <ull_conn_llcp+0xa8>
		if (!conn->tx_ctrl) {
   3d634:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d638:	2a00      	cmp	r2, #0
   3d63a:	d19c      	bne.n	3d576 <ull_conn_llcp+0xf1a>
			tx->next = conn->tx_head;
   3d63c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3d63e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d642:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3d646:	e79d      	b.n	3d584 <ull_conn_llcp+0xf28>
	    ((pdu_data_tx->llctrl.opcode !=
   3d648:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d64a:	2a03      	cmp	r2, #3
   3d64c:	f43f aeaa 	beq.w	3d3a4 <ull_conn_llcp+0xd48>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d650:	2a0a      	cmp	r2, #10
   3d652:	f47f a8fa 	bne.w	3c84a <ull_conn_llcp+0x1ee>
   3d656:	e6a5      	b.n	3d3a4 <ull_conn_llcp+0xd48>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d658:	791a      	ldrb	r2, [r3, #4]
   3d65a:	f002 0203 	and.w	r2, r2, #3
   3d65e:	2a03      	cmp	r2, #3
   3d660:	f000 809f 	beq.w	3d7a2 <ull_conn_llcp+0x1146>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d664:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d668:	f7ff b953 	b.w	3c912 <ull_conn_llcp+0x2b6>
		conn->tx_data_last = tx;
   3d66c:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3d670:	f7ff b874 	b.w	3c75c <ull_conn_llcp+0x100>
			conn->tx_data = conn->tx_data->next;
   3d674:	6819      	ldr	r1, [r3, #0]
   3d676:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d67a:	2a00      	cmp	r2, #0
   3d67c:	f47f ab7d 	bne.w	3cd7a <ull_conn_llcp+0x71e>
			tx->next = conn->tx_head->next;
   3d680:	681a      	ldr	r2, [r3, #0]
   3d682:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   3d684:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   3d686:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   3d688:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
   3d68c:	f7ff bb7d 	b.w	3cd8a <ull_conn_llcp+0x72e>
		if (!conn->tx_ctrl) {
   3d690:	2a00      	cmp	r2, #0
   3d692:	f47f ac81 	bne.w	3cf98 <ull_conn_llcp+0x93c>
			tx->next = conn->tx_head;
   3d696:	f84e 3c13 	str.w	r3, [lr, #-19]
				conn->tx_ctrl = tx;
   3d69a:	e9c4 1175 	strd	r1, r1, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d69e:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
   3d6a2:	e481      	b.n	3cfa8 <ull_conn_llcp+0x94c>
			conn->tx_data = conn->tx_data->next;
   3d6a4:	6819      	ldr	r1, [r3, #0]
   3d6a6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d6aa:	2a00      	cmp	r2, #0
   3d6ac:	f47f aa86 	bne.w	3cbbc <ull_conn_llcp+0x560>
			tx->next = conn->tx_head->next;
   3d6b0:	681a      	ldr	r2, [r3, #0]
   3d6b2:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3d6b6:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3d6ba:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3d6be:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3d6c2:	f7ff ba86 	b.w	3cbd2 <ull_conn_llcp+0x576>
			conn->tx_data = conn->tx_data->next;
   3d6c6:	6819      	ldr	r1, [r3, #0]
   3d6c8:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d6cc:	2a00      	cmp	r2, #0
   3d6ce:	f47f a97e 	bne.w	3c9ce <ull_conn_llcp+0x372>
			tx->next = conn->tx_head->next;
   3d6d2:	681a      	ldr	r2, [r3, #0]
   3d6d4:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3d6d6:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3d6d8:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3d6da:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3d6de:	f7ff b97e 	b.w	3c9de <ull_conn_llcp+0x382>
			conn->tx_data = conn->tx_data->next;
   3d6e2:	6819      	ldr	r1, [r3, #0]
   3d6e4:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d6e8:	2a00      	cmp	r2, #0
   3d6ea:	f47f adb5 	bne.w	3d258 <ull_conn_llcp+0xbfc>
			tx->next = conn->tx_head->next;
   3d6ee:	681a      	ldr	r2, [r3, #0]
   3d6f0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3d6f4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3d6f8:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3d6fc:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3d700:	e5b5      	b.n	3d26e <ull_conn_llcp+0xc12>
			conn->tx_data = conn->tx_data->next;
   3d702:	6819      	ldr	r1, [r3, #0]
   3d704:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d708:	2a00      	cmp	r2, #0
   3d70a:	f47f ae1c 	bne.w	3d346 <ull_conn_llcp+0xcea>
			tx->next = conn->tx_head->next;
   3d70e:	681a      	ldr	r2, [r3, #0]
   3d710:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d714:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3d718:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   3d71c:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d720:	e61c      	b.n	3d35c <ull_conn_llcp+0xd00>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d722:	483c      	ldr	r0, [pc, #240]	; (3d814 <ull_conn_llcp+0x11b8>)
   3d724:	f7f6 feb6 	bl	34494 <mem_acquire>
		if (!tx) {
   3d728:	2800      	cmp	r0, #0
   3d72a:	f43f ab7d 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d72e:	7902      	ldrb	r2, [r0, #4]
   3d730:	f042 0203 	orr.w	r2, r2, #3
   3d734:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3d736:	2211      	movs	r2, #17
   3d738:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3d73a:	2203      	movs	r2, #3
   3d73c:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3d73e:	220f      	movs	r2, #15
   3d740:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   3d742:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   3d746:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   3d748:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	if (
   3d74c:	2a00      	cmp	r2, #0
   3d74e:	f000 814a 	beq.w	3d9e6 <ull_conn_llcp+0x138a>
	    !conn->llcp_enc.pause_tx &&
   3d752:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d756:	0789      	lsls	r1, r1, #30
   3d758:	f100 8145 	bmi.w	3d9e6 <ull_conn_llcp+0x138a>
	    !conn->llcp_phy.pause_tx &&
   3d75c:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3d760:	07cb      	lsls	r3, r1, #31
   3d762:	f100 8140 	bmi.w	3d9e6 <ull_conn_llcp+0x138a>
		if (conn->tx_head == conn->tx_data) {
   3d766:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3d76a:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3d76c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d770:	f000 81c4 	beq.w	3dafc <ull_conn_llcp+0x14a0>
		} else if (!conn->tx_ctrl) {
   3d774:	2900      	cmp	r1, #0
   3d776:	f000 81d0 	beq.w	3db1a <ull_conn_llcp+0x14be>
	tx->next = conn->tx_ctrl_last->next;
   3d77a:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3d77e:	6811      	ldr	r1, [r2, #0]
   3d780:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d782:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   3d784:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d788:	6802      	ldr	r2, [r0, #0]
   3d78a:	2a00      	cmp	r2, #0
   3d78c:	f000 81c2 	beq.w	3db14 <ull_conn_llcp+0x14b8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3d790:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3d794:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3d798:	2300      	movs	r3, #0
   3d79a:	f8c8 3000 	str.w	r3, [r8]
   3d79e:	f7ff bb43 	b.w	3ce28 <ull_conn_llcp+0x7cc>
	    ((pdu_data_tx->llctrl.opcode !=
   3d7a2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d7a4:	2a03      	cmp	r2, #3
   3d7a6:	f43f af32 	beq.w	3d60e <ull_conn_llcp+0xfb2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d7aa:	2a0a      	cmp	r2, #10
   3d7ac:	f47f af5a 	bne.w	3d664 <ull_conn_llcp+0x1008>
   3d7b0:	e72d      	b.n	3d60e <ull_conn_llcp+0xfb2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d7b2:	791a      	ldrb	r2, [r3, #4]
   3d7b4:	f002 0203 	and.w	r2, r2, #3
   3d7b8:	2a03      	cmp	r2, #3
   3d7ba:	f000 815a 	beq.w	3da72 <ull_conn_llcp+0x1416>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d7be:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d7c2:	f7ff b9fb 	b.w	3cbbc <ull_conn_llcp+0x560>
			conn->tx_data = conn->tx_data->next;
   3d7c6:	6819      	ldr	r1, [r3, #0]
   3d7c8:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d7cc:	2a00      	cmp	r2, #0
   3d7ce:	f47f ae7f 	bne.w	3d4d0 <ull_conn_llcp+0xe74>
			tx->next = conn->tx_head->next;
   3d7d2:	681a      	ldr	r2, [r3, #0]
   3d7d4:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d7d8:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   3d7dc:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d7e0:	e67f      	b.n	3d4e2 <ull_conn_llcp+0xe86>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d7e2:	791a      	ldrb	r2, [r3, #4]
   3d7e4:	f002 0203 	and.w	r2, r2, #3
   3d7e8:	2a03      	cmp	r2, #3
   3d7ea:	f000 811a 	beq.w	3da22 <ull_conn_llcp+0x13c6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d7ee:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d7f2:	f7ff b8ec 	b.w	3c9ce <ull_conn_llcp+0x372>
			conn->tx_data = conn->tx_data->next;
   3d7f6:	6819      	ldr	r1, [r3, #0]
   3d7f8:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d7fc:	2a00      	cmp	r2, #0
   3d7fe:	f47f aa68 	bne.w	3ccd2 <ull_conn_llcp+0x676>
			tx->next = conn->tx_head->next;
   3d802:	681a      	ldr	r2, [r3, #0]
   3d804:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d808:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   3d80c:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d810:	f7ff ba68 	b.w	3cce4 <ull_conn_llcp+0x688>
   3d814:	20005cd8 	.word	0x20005cd8
		if (conn->llcp_phy.tx & PHY_2M) {
   3d818:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3d81a:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		if (conn->llcp_phy.tx & PHY_2M) {
   3d81e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   3d822:	f140 811b 	bpl.w	3da5c <ull_conn_llcp+0x1400>
			conn->llcp_phy.tx = PHY_2M;
   3d826:	2202      	movs	r2, #2
   3d828:	f362 0384 	bfi	r3, r2, #2, #3
   3d82c:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.rx & PHY_2M) {
   3d830:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3d834:	065f      	lsls	r7, r3, #25
   3d836:	ea4f 1253 	mov.w	r2, r3, lsr #5
   3d83a:	f140 8107 	bpl.w	3da4c <ull_conn_llcp+0x13f0>
			conn->llcp_phy.rx = PHY_2M;
   3d83e:	2202      	movs	r2, #2
   3d840:	f362 1347 	bfi	r3, r2, #5, #3
   3d844:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		conn->llcp_ack -= 2U;
   3d848:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d84a:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
   3d84e:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d852:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   3d856:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d85a:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d85e:	f3c2 0182 	ubfx	r1, r2, #2, #3
   3d862:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d866:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d86a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   3d86e:	428f      	cmp	r7, r1
   3d870:	bf08      	it	eq
   3d872:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d874:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   3d876:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d87a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d87e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   3d882:	bf08      	it	eq
   3d884:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d886:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   3d88a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   3d88e:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d890:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		conn->llcp_type = LLCP_PHY_UPD;
   3d894:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3d898:	f7fe bf10 	b.w	3c6bc <ull_conn_llcp+0x60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d89c:	791a      	ldrb	r2, [r3, #4]
   3d89e:	f002 0203 	and.w	r2, r2, #3
   3d8a2:	2a03      	cmp	r2, #3
   3d8a4:	d00c      	beq.n	3d8c0 <ull_conn_llcp+0x1264>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d8a6:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d8aa:	f7ff ba66 	b.w	3cd7a <ull_conn_llcp+0x71e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d8ae:	791a      	ldrb	r2, [r3, #4]
   3d8b0:	f002 0203 	and.w	r2, r2, #3
   3d8b4:	2a03      	cmp	r2, #3
   3d8b6:	f000 80ed 	beq.w	3da94 <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d8ba:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d8be:	e4cb      	b.n	3d258 <ull_conn_llcp+0xbfc>
	    ((pdu_data_tx->llctrl.opcode !=
   3d8c0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d8c2:	2a03      	cmp	r2, #3
   3d8c4:	f43f aedc 	beq.w	3d680 <ull_conn_llcp+0x1024>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d8c8:	2a0a      	cmp	r2, #10
   3d8ca:	d1ec      	bne.n	3d8a6 <ull_conn_llcp+0x124a>
   3d8cc:	e6d8      	b.n	3d680 <ull_conn_llcp+0x1024>
			conn->tx_data = conn->tx_data->next;
   3d8ce:	6819      	ldr	r1, [r3, #0]
   3d8d0:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d8d4:	2a00      	cmp	r2, #0
   3d8d6:	f47f ae4e 	bne.w	3d576 <ull_conn_llcp+0xf1a>
			tx->next = conn->tx_head->next;
   3d8da:	681a      	ldr	r2, [r3, #0]
   3d8dc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d8de:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   3d8e0:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3d8e4:	e64e      	b.n	3d584 <ull_conn_llcp+0xf28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d8e6:	48b7      	ldr	r0, [pc, #732]	; (3dbc4 <ull_conn_llcp+0x1568>)
   3d8e8:	f7f6 fdd4 	bl	34494 <mem_acquire>
	if (!tx) {
   3d8ec:	2800      	cmp	r0, #0
   3d8ee:	f43f aa9b 	beq.w	3ce28 <ull_conn_llcp+0x7cc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d8f2:	7902      	ldrb	r2, [r0, #4]
   3d8f4:	f042 0203 	orr.w	r2, r2, #3
   3d8f8:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   3d8fa:	2218      	movs	r2, #24
   3d8fc:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   3d8fe:	2210      	movs	r2, #16
   3d900:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   3d902:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   3d906:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   3d908:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   3d90c:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   3d90e:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   3d912:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   3d914:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   3d918:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   3d91a:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   3d91e:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   3d920:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
   3d924:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   3d928:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   3d92c:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   3d930:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
   3d934:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   3d938:	f8b4 21a8 	ldrh.w	r2, [r4, #424]	; 0x1a8
   3d93c:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   3d940:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
   3d944:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   3d948:	f8b4 21ac 	ldrh.w	r2, [r4, #428]	; 0x1ac
   3d94c:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   3d950:	f8b4 21ae 	ldrh.w	r2, [r4, #430]	; 0x1ae
   3d954:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   3d958:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	if (
   3d95c:	2a00      	cmp	r2, #0
   3d95e:	d038      	beq.n	3d9d2 <ull_conn_llcp+0x1376>
	    !conn->llcp_enc.pause_tx &&
   3d960:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d964:	078f      	lsls	r7, r1, #30
   3d966:	d434      	bmi.n	3d9d2 <ull_conn_llcp+0x1376>
	    !conn->llcp_phy.pause_tx &&
   3d968:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3d96c:	07c9      	lsls	r1, r1, #31
   3d96e:	d430      	bmi.n	3d9d2 <ull_conn_llcp+0x1376>
		if (conn->tx_head == conn->tx_data) {
   3d970:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3d974:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3d976:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d97a:	f000 80b9 	beq.w	3daf0 <ull_conn_llcp+0x1494>
		} else if (!conn->tx_ctrl) {
   3d97e:	2900      	cmp	r1, #0
   3d980:	f000 809c 	beq.w	3dabc <ull_conn_llcp+0x1460>
	tx->next = conn->tx_ctrl_last->next;
   3d984:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3d988:	6811      	ldr	r1, [r2, #0]
   3d98a:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d98c:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   3d98e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d992:	6802      	ldr	r2, [r0, #0]
   3d994:	2a00      	cmp	r2, #0
   3d996:	f000 808e 	beq.w	3dab6 <ull_conn_llcp+0x145a>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3d99a:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d99e:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3d9a2:	2305      	movs	r3, #5
   3d9a4:	f363 0203 	bfi	r2, r3, #0, #4
   3d9a8:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d9ac:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d9b0:	f7fe be60 	b.w	3c674 <ull_conn_llcp+0x18>
			conn->tx_data = conn->tx_data->next;
   3d9b4:	6819      	ldr	r1, [r3, #0]
   3d9b6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d9ba:	2a00      	cmp	r2, #0
   3d9bc:	f47e aec0 	bne.w	3c740 <ull_conn_llcp+0xe4>
			tx->next = conn->tx_head->next;
   3d9c0:	681a      	ldr	r2, [r3, #0]
   3d9c2:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d9c6:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   3d9ca:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d9ce:	f7fe bec0 	b.w	3c752 <ull_conn_llcp+0xf6>
		if (!conn->tx_ctrl) {
   3d9d2:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3d9d6:	2900      	cmp	r1, #0
   3d9d8:	d1d4      	bne.n	3d984 <ull_conn_llcp+0x1328>
			tx->next = conn->tx_head;
   3d9da:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3d9dc:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d9e0:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3d9e4:	e7d5      	b.n	3d992 <ull_conn_llcp+0x1336>
		if (!conn->tx_ctrl) {
   3d9e6:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3d9ea:	2900      	cmp	r1, #0
   3d9ec:	f47f aec5 	bne.w	3d77a <ull_conn_llcp+0x111e>
			tx->next = conn->tx_head;
   3d9f0:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3d9f2:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d9f6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3d9fa:	e6c5      	b.n	3d788 <ull_conn_llcp+0x112c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d9fc:	791a      	ldrb	r2, [r3, #4]
   3d9fe:	f002 0203 	and.w	r2, r2, #3
   3da02:	2a03      	cmp	r2, #3
   3da04:	f000 8091 	beq.w	3db2a <ull_conn_llcp+0x14ce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3da08:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3da0c:	e49b      	b.n	3d346 <ull_conn_llcp+0xcea>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3da0e:	791a      	ldrb	r2, [r3, #4]
   3da10:	f002 0203 	and.w	r2, r2, #3
   3da14:	2a03      	cmp	r2, #3
   3da16:	f000 80c7 	beq.w	3dba8 <ull_conn_llcp+0x154c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3da1a:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3da1e:	f7ff b958 	b.w	3ccd2 <ull_conn_llcp+0x676>
	    ((pdu_data_tx->llctrl.opcode !=
   3da22:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3da24:	2a03      	cmp	r2, #3
   3da26:	f43f ae54 	beq.w	3d6d2 <ull_conn_llcp+0x1076>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3da2a:	2a0a      	cmp	r2, #10
   3da2c:	f47f aedf 	bne.w	3d7ee <ull_conn_llcp+0x1192>
   3da30:	e64f      	b.n	3d6d2 <ull_conn_llcp+0x1076>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3da32:	791a      	ldrb	r2, [r3, #4]
   3da34:	f002 0203 	and.w	r2, r2, #3
   3da38:	2a03      	cmp	r2, #3
   3da3a:	f000 808c 	beq.w	3db56 <ull_conn_llcp+0x14fa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3da3e:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3da42:	e545      	b.n	3d4d0 <ull_conn_llcp+0xe74>
			conn->llcp_cu.interval = interval_max;
   3da44:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
   3da48:	f7ff bb69 	b.w	3d11e <ull_conn_llcp+0xac2>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   3da4c:	07d1      	lsls	r1, r2, #31
   3da4e:	d518      	bpl.n	3da82 <ull_conn_llcp+0x1426>
			conn->llcp_phy.rx = PHY_1M;
   3da50:	2201      	movs	r2, #1
   3da52:	f362 1347 	bfi	r3, r2, #5, #3
   3da56:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
   3da5a:	e6f5      	b.n	3d848 <ull_conn_llcp+0x11ec>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3da5c:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   3da5e:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3da62:	f140 8088 	bpl.w	3db76 <ull_conn_llcp+0x151a>
			conn->llcp_phy.tx = PHY_1M;
   3da66:	2201      	movs	r2, #1
   3da68:	f362 0384 	bfi	r3, r2, #2, #3
   3da6c:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
   3da70:	e6de      	b.n	3d830 <ull_conn_llcp+0x11d4>
	    ((pdu_data_tx->llctrl.opcode !=
   3da72:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3da74:	2a03      	cmp	r2, #3
   3da76:	f43f ae1b 	beq.w	3d6b0 <ull_conn_llcp+0x1054>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3da7a:	2a0a      	cmp	r2, #10
   3da7c:	f47f ae9f 	bne.w	3d7be <ull_conn_llcp+0x1162>
   3da80:	e616      	b.n	3d6b0 <ull_conn_llcp+0x1054>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   3da82:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   3da86:	bf18      	it	ne
   3da88:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   3da8a:	f362 1347 	bfi	r3, r2, #5, #3
   3da8e:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
   3da92:	e6d9      	b.n	3d848 <ull_conn_llcp+0x11ec>
	    ((pdu_data_tx->llctrl.opcode !=
   3da94:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3da96:	2a03      	cmp	r2, #3
   3da98:	f43f ae29 	beq.w	3d6ee <ull_conn_llcp+0x1092>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3da9c:	2a0a      	cmp	r2, #10
   3da9e:	f47f af0c 	bne.w	3d8ba <ull_conn_llcp+0x125e>
   3daa2:	e624      	b.n	3d6ee <ull_conn_llcp+0x1092>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3daa4:	791a      	ldrb	r2, [r3, #4]
   3daa6:	f002 0203 	and.w	r2, r2, #3
   3daaa:	2a03      	cmp	r2, #3
   3daac:	d00e      	beq.n	3dacc <ull_conn_llcp+0x1470>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3daae:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3dab2:	f7fe be45 	b.w	3c740 <ull_conn_llcp+0xe4>
		conn->tx_data_last = tx;
   3dab6:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3daba:	e76e      	b.n	3d99a <ull_conn_llcp+0x133e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dabc:	7911      	ldrb	r1, [r2, #4]
   3dabe:	f001 0103 	and.w	r1, r1, #3
   3dac2:	2903      	cmp	r1, #3
   3dac4:	d009      	beq.n	3dada <ull_conn_llcp+0x147e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dac6:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3daca:	e75b      	b.n	3d984 <ull_conn_llcp+0x1328>
	    ((pdu_data_tx->llctrl.opcode !=
   3dacc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dace:	2a03      	cmp	r2, #3
   3dad0:	f43f af76 	beq.w	3d9c0 <ull_conn_llcp+0x1364>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dad4:	2a0a      	cmp	r2, #10
   3dad6:	d1ea      	bne.n	3daae <ull_conn_llcp+0x1452>
   3dad8:	e772      	b.n	3d9c0 <ull_conn_llcp+0x1364>
	    ((pdu_data_tx->llctrl.opcode !=
   3dada:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dadc:	2903      	cmp	r1, #3
   3dade:	d001      	beq.n	3dae4 <ull_conn_llcp+0x1488>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dae0:	290a      	cmp	r1, #10
   3dae2:	d1f0      	bne.n	3dac6 <ull_conn_llcp+0x146a>
			tx->next = conn->tx_head->next;
   3dae4:	6811      	ldr	r1, [r2, #0]
   3dae6:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3dae8:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   3daea:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3daee:	e750      	b.n	3d992 <ull_conn_llcp+0x1336>
			conn->tx_data = conn->tx_data->next;
   3daf0:	6813      	ldr	r3, [r2, #0]
   3daf2:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3daf6:	2900      	cmp	r1, #0
   3daf8:	d0f4      	beq.n	3dae4 <ull_conn_llcp+0x1488>
   3dafa:	e743      	b.n	3d984 <ull_conn_llcp+0x1328>
			conn->tx_data = conn->tx_data->next;
   3dafc:	6813      	ldr	r3, [r2, #0]
   3dafe:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3db02:	2900      	cmp	r1, #0
   3db04:	f47f ae39 	bne.w	3d77a <ull_conn_llcp+0x111e>
			tx->next = conn->tx_head->next;
   3db08:	6811      	ldr	r1, [r2, #0]
   3db0a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3db0c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   3db0e:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3db12:	e639      	b.n	3d788 <ull_conn_llcp+0x112c>
		conn->tx_data_last = tx;
   3db14:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3db18:	e63a      	b.n	3d790 <ull_conn_llcp+0x1134>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db1a:	7911      	ldrb	r1, [r2, #4]
   3db1c:	f001 0103 	and.w	r1, r1, #3
   3db20:	2903      	cmp	r1, #3
   3db22:	d049      	beq.n	3dbb8 <ull_conn_llcp+0x155c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3db24:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3db28:	e627      	b.n	3d77a <ull_conn_llcp+0x111e>
	    ((pdu_data_tx->llctrl.opcode !=
   3db2a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db2c:	2a03      	cmp	r2, #3
   3db2e:	f43f adee 	beq.w	3d70e <ull_conn_llcp+0x10b2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3db32:	2a0a      	cmp	r2, #10
   3db34:	f47f af68 	bne.w	3da08 <ull_conn_llcp+0x13ac>
   3db38:	e5e9      	b.n	3d70e <ull_conn_llcp+0x10b2>
			conn->tx_data = conn->tx_data->next;
   3db3a:	6818      	ldr	r0, [r3, #0]
   3db3c:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3db40:	2a00      	cmp	r2, #0
   3db42:	f47f aa29 	bne.w	3cf98 <ull_conn_llcp+0x93c>
			tx->next = conn->tx_head->next;
   3db46:	681a      	ldr	r2, [r3, #0]
   3db48:	f84e 2c13 	str.w	r2, [lr, #-19]
			conn->tx_head->next = tx;
   3db4c:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   3db4e:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
   3db52:	f7ff ba29 	b.w	3cfa8 <ull_conn_llcp+0x94c>
	    ((pdu_data_tx->llctrl.opcode !=
   3db56:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db58:	2a03      	cmp	r2, #3
   3db5a:	f43f ae3a 	beq.w	3d7d2 <ull_conn_llcp+0x1176>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3db5e:	2a0a      	cmp	r2, #10
   3db60:	f47f af6d 	bne.w	3da3e <ull_conn_llcp+0x13e2>
   3db64:	e635      	b.n	3d7d2 <ull_conn_llcp+0x1176>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db66:	791a      	ldrb	r2, [r3, #4]
   3db68:	f002 0203 	and.w	r2, r2, #3
   3db6c:	2a03      	cmp	r2, #3
   3db6e:	d00b      	beq.n	3db88 <ull_conn_llcp+0x152c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3db70:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3db74:	e4ff      	b.n	3d576 <ull_conn_llcp+0xf1a>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3db76:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   3db7a:	bf18      	it	ne
   3db7c:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   3db7e:	f362 0384 	bfi	r3, r2, #2, #3
   3db82:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
   3db86:	e653      	b.n	3d830 <ull_conn_llcp+0x11d4>
	    ((pdu_data_tx->llctrl.opcode !=
   3db88:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db8a:	2a03      	cmp	r2, #3
   3db8c:	f43f aea5 	beq.w	3d8da <ull_conn_llcp+0x127e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3db90:	2a0a      	cmp	r2, #10
   3db92:	d1ed      	bne.n	3db70 <ull_conn_llcp+0x1514>
   3db94:	e6a1      	b.n	3d8da <ull_conn_llcp+0x127e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db96:	791a      	ldrb	r2, [r3, #4]
   3db98:	f002 0203 	and.w	r2, r2, #3
   3db9c:	2a03      	cmp	r2, #3
   3db9e:	d013      	beq.n	3dbc8 <ull_conn_llcp+0x156c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dba0:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3dba4:	f7ff b9f8 	b.w	3cf98 <ull_conn_llcp+0x93c>
	    ((pdu_data_tx->llctrl.opcode !=
   3dba8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dbaa:	2a03      	cmp	r2, #3
   3dbac:	f43f ae29 	beq.w	3d802 <ull_conn_llcp+0x11a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dbb0:	2a0a      	cmp	r2, #10
   3dbb2:	f47f af32 	bne.w	3da1a <ull_conn_llcp+0x13be>
   3dbb6:	e624      	b.n	3d802 <ull_conn_llcp+0x11a6>
	    ((pdu_data_tx->llctrl.opcode !=
   3dbb8:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dbba:	2903      	cmp	r1, #3
   3dbbc:	d0a4      	beq.n	3db08 <ull_conn_llcp+0x14ac>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dbbe:	290a      	cmp	r1, #10
   3dbc0:	d1b0      	bne.n	3db24 <ull_conn_llcp+0x14c8>
   3dbc2:	e7a1      	b.n	3db08 <ull_conn_llcp+0x14ac>
   3dbc4:	20005cd8 	.word	0x20005cd8
	    ((pdu_data_tx->llctrl.opcode !=
   3dbc8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dbca:	2a03      	cmp	r2, #3
   3dbcc:	d0bb      	beq.n	3db46 <ull_conn_llcp+0x14ea>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dbce:	2a0a      	cmp	r2, #10
   3dbd0:	d1e6      	bne.n	3dba0 <ull_conn_llcp+0x1544>
   3dbd2:	e7b8      	b.n	3db46 <ull_conn_llcp+0x14ea>
		LL_ASSERT(0);
   3dbd4:	4a09      	ldr	r2, [pc, #36]	; (3dbfc <ull_conn_llcp+0x15a0>)
   3dbd6:	490a      	ldr	r1, [pc, #40]	; (3dc00 <ull_conn_llcp+0x15a4>)
   3dbd8:	480a      	ldr	r0, [pc, #40]	; (3dc04 <ull_conn_llcp+0x15a8>)
   3dbda:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3dbde:	f00c fc62 	bl	4a4a6 <printk>
   3dbe2:	4040      	eors	r0, r0
   3dbe4:	f380 8811 	msr	BASEPRI, r0
   3dbe8:	f04f 0003 	mov.w	r0, #3
   3dbec:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3dbee:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3dbf2:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		break;
   3dbf6:	f7fe bd3d 	b.w	3c674 <ull_conn_llcp+0x18>
   3dbfa:	bf00      	nop
   3dbfc:	0005563c 	.word	0x0005563c
   3dc00:	0005518c 	.word	0x0005518c
   3dc04:	0005512c 	.word	0x0005512c

0003dc08 <ull_conn_tx_demux>:
{
   3dc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3dc0c:	4c26      	ldr	r4, [pc, #152]	; (3dca8 <ull_conn_tx_demux+0xa0>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dc0e:	4f27      	ldr	r7, [pc, #156]	; (3dcac <ull_conn_tx_demux+0xa4>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3dc10:	78e2      	ldrb	r2, [r4, #3]
{
   3dc12:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   3dc14:	1d26      	adds	r6, r4, #4
   3dc16:	e024      	b.n	3dc62 <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dc18:	4642      	mov	r2, r8
   3dc1a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3dc1e:	4638      	mov	r0, r7
   3dc20:	f7f6 fc6a 	bl	344f8 <mem_get>
	if (conn->lll.handle != handle) {
   3dc24:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3dc26:	4543      	cmp	r3, r8
   3dc28:	d128      	bne.n	3dc7c <ull_conn_tx_demux+0x74>
			struct node_tx *tx = lll_tx->node;
   3dc2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   3dc2e:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
			tx->next = NULL;
   3dc32:	2100      	movs	r1, #0
   3dc34:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   3dc36:	b362      	cbz	r2, 3dc92 <ull_conn_tx_demux+0x8a>
			if (conn->tx_data_last) {
   3dc38:	f8d0 21e4 	ldr.w	r2, [r0, #484]	; 0x1e4
   3dc3c:	b102      	cbz	r2, 3dc40 <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   3dc3e:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3dc40:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
		MFIFO_DEQUEUE(conn_tx);
   3dc44:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   3dc46:	78a3      	ldrb	r3, [r4, #2]
   3dc48:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   3dc4a:	429a      	cmp	r2, r3
   3dc4c:	d005      	beq.n	3dc5a <ull_conn_tx_demux+0x52>
	_first += 1U;
   3dc4e:	3301      	adds	r3, #1
   3dc50:	b2db      	uxtb	r3, r3
		_first = 0U;
   3dc52:	4299      	cmp	r1, r3
   3dc54:	bf08      	it	eq
   3dc56:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3dc58:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   3dc5a:	3d01      	subs	r5, #1
   3dc5c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   3dc60:	d020      	beq.n	3dca4 <ull_conn_tx_demux+0x9c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3dc62:	78a3      	ldrb	r3, [r4, #2]
   3dc64:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   3dc66:	4293      	cmp	r3, r2
   3dc68:	d01c      	beq.n	3dca4 <ull_conn_tx_demux+0x9c>
	return (void *)(fifo + first * size);
   3dc6a:	fb13 f301 	smulbb	r3, r3, r1
   3dc6e:	eb06 0903 	add.w	r9, r6, r3
		conn = ll_connected_get(lll_tx->handle);
   3dc72:	f836 8003 	ldrh.w	r8, [r6, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3dc76:	f1b8 0f05 	cmp.w	r8, #5
   3dc7a:	d9cd      	bls.n	3dc18 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   3dc7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   3dc80:	790b      	ldrb	r3, [r1, #4]
   3dc82:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3dc86:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   3dc8a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3dc8c:	f7fa fadc 	bl	38248 <ll_tx_ack_put>
   3dc90:	e7d8      	b.n	3dc44 <ull_conn_tx_demux+0x3c>
				if (!conn->tx_head) {
   3dc92:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
				conn->tx_data = tx;
   3dc96:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
				if (!conn->tx_head) {
   3dc9a:	2a00      	cmp	r2, #0
   3dc9c:	d1cc      	bne.n	3dc38 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   3dc9e:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
			if (conn->tx_data_last) {
   3dca2:	e7cd      	b.n	3dc40 <ull_conn_tx_demux+0x38>
}
   3dca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dca8:	20000e6c 	.word	0x20000e6c
   3dcac:	20003578 	.word	0x20003578

0003dcb0 <conn_cleanup_finalize>:
{
   3dcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   3dcb4:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
{
   3dcb8:	b082      	sub	sp, #8
   3dcba:	4606      	mov	r6, r0
	while (rx) {
   3dcbc:	b144      	cbz	r4, 3dcd0 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   3dcbe:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   3dcc0:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   3dcc2:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   3dcc4:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3dcc6:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   3dcc8:	f7fa fa7a 	bl	381c0 <ll_rx_put>
	while (rx) {
   3dccc:	2c00      	cmp	r4, #0
   3dcce:	d1f7      	bne.n	3dcc0 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   3dcd0:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3dcd4:	b381      	cbz	r1, 3dd38 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   3dcd6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 3dd7c <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   3dcda:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 3dd80 <conn_cleanup_finalize+0xd0>
   3dcde:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3dd84 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3dce2:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3dce6:	e007      	b.n	3dcf8 <conn_cleanup_finalize+0x48>
   3dce8:	4629      	mov	r1, r5
   3dcea:	463a      	mov	r2, r7
   3dcec:	4620      	mov	r0, r4
   3dcee:	f7f6 fc35 	bl	3455c <memq_enqueue>
	while (conn->tx_head) {
   3dcf2:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3dcf6:	b1f9      	cbz	r1, 3dd38 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3dcf8:	4630      	mov	r0, r6
   3dcfa:	f7fc f85f 	bl	39dbc <tx_ull_dequeue>
   3dcfe:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   3dd00:	4640      	mov	r0, r8
   3dd02:	f7f6 fbc7 	bl	34494 <mem_acquire>
		LL_ASSERT(link);
   3dd06:	4604      	mov	r4, r0
   3dd08:	2800      	cmp	r0, #0
   3dd0a:	d1ed      	bne.n	3dce8 <conn_cleanup_finalize+0x38>
   3dd0c:	481e      	ldr	r0, [pc, #120]	; (3dd88 <conn_cleanup_finalize+0xd8>)
   3dd0e:	f640 135e 	movw	r3, #2398	; 0x95e
   3dd12:	4652      	mov	r2, sl
   3dd14:	4649      	mov	r1, r9
   3dd16:	f00c fbc6 	bl	4a4a6 <printk>
   3dd1a:	4040      	eors	r0, r0
   3dd1c:	f380 8811 	msr	BASEPRI, r0
   3dd20:	f04f 0003 	mov.w	r0, #3
   3dd24:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3dd26:	4629      	mov	r1, r5
   3dd28:	463a      	mov	r2, r7
   3dd2a:	4620      	mov	r0, r4
   3dd2c:	f7f6 fc16 	bl	3455c <memq_enqueue>
	while (conn->tx_head) {
   3dd30:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3dd34:	2900      	cmp	r1, #0
   3dd36:	d1df      	bne.n	3dcf8 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3dd38:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   3dd3a:	4b14      	ldr	r3, [pc, #80]	; (3dd8c <conn_cleanup_finalize+0xdc>)
   3dd3c:	9600      	str	r6, [sp, #0]
   3dd3e:	3205      	adds	r2, #5
   3dd40:	b2d2      	uxtb	r2, r2
   3dd42:	2101      	movs	r1, #1
   3dd44:	2000      	movs	r0, #0
   3dd46:	f7f7 fedf 	bl	35b08 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3dd4a:	f030 0302 	bics.w	r3, r0, #2
   3dd4e:	d00c      	beq.n	3dd6a <conn_cleanup_finalize+0xba>
   3dd50:	4a0b      	ldr	r2, [pc, #44]	; (3dd80 <conn_cleanup_finalize+0xd0>)
   3dd52:	490f      	ldr	r1, [pc, #60]	; (3dd90 <conn_cleanup_finalize+0xe0>)
   3dd54:	480c      	ldr	r0, [pc, #48]	; (3dd88 <conn_cleanup_finalize+0xd8>)
   3dd56:	f640 1323 	movw	r3, #2339	; 0x923
   3dd5a:	f00c fba4 	bl	4a4a6 <printk>
   3dd5e:	4040      	eors	r0, r0
   3dd60:	f380 8811 	msr	BASEPRI, r0
   3dd64:	f04f 0003 	mov.w	r0, #3
   3dd68:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   3dd6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   3dd6e:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   3dd70:	8533      	strh	r3, [r6, #40]	; 0x28
}
   3dd72:	b002      	add	sp, #8
   3dd74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   3dd78:	f7ff bf46 	b.w	3dc08 <ull_conn_tx_demux>
   3dd7c:	200060fc 	.word	0x200060fc
   3dd80:	0005563c 	.word	0x0005563c
   3dd84:	00055694 	.word	0x00055694
   3dd88:	0005512c 	.word	0x0005512c
   3dd8c:	00039b91 	.word	0x00039b91
   3dd90:	0005571c 	.word	0x0005571c

0003dd94 <ull_conn_done>:
{
   3dd94:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   3dd96:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3dd98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3dd9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3dd9e:	429a      	cmp	r2, r3
{
   3dda0:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3dda2:	f000 808e 	beq.w	3dec2 <ull_conn_done+0x12e>
	switch (done->extra.mic_state) {
   3dda6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   3ddaa:	2b01      	cmp	r3, #1
   3ddac:	4605      	mov	r5, r0
   3ddae:	f000 810c 	beq.w	3dfca <ull_conn_done+0x236>
   3ddb2:	2b02      	cmp	r3, #2
   3ddb4:	f000 8087 	beq.w	3dec6 <ull_conn_done+0x132>
   3ddb8:	2b00      	cmp	r3, #0
   3ddba:	f000 80ec 	beq.w	3df96 <ull_conn_done+0x202>
	reason_final = conn->llcp_terminate.reason_final;
   3ddbe:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
	if (reason_final && (
   3ddc2:	2b00      	cmp	r3, #0
   3ddc4:	f040 8082 	bne.w	3decc <ull_conn_done+0x138>
	latency_event = lll->latency_event;
   3ddc8:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   3ddca:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (done->extra.trx_cnt) {
   3ddce:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3ddd0:	1c7e      	adds	r6, r7, #1
   3ddd2:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3ddd4:	2b00      	cmp	r3, #0
   3ddd6:	f000 80ab 	beq.w	3df30 <ull_conn_done+0x19c>
		} else if (lll->role) {
   3ddda:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3ddde:	2b00      	cmp	r3, #0
   3dde0:	f2c0 8125 	blt.w	3e02e <ull_conn_done+0x29a>
	if (done->extra.crc_valid) {
   3dde4:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   3dde8:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   3ddea:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   3ddec:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3ddf0:	f140 80f1 	bpl.w	3dfd6 <ull_conn_done+0x242>
		conn->supervision_expire = 0U;
   3ddf4:	2500      	movs	r5, #0
   3ddf6:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   3ddfa:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3ddfe:	b12b      	cbz	r3, 3de0c <ull_conn_done+0x78>
		if (conn->procedure_expire > elapsed_event) {
   3de00:	42b3      	cmp	r3, r6
   3de02:	f240 8150 	bls.w	3e0a6 <ull_conn_done+0x312>
			conn->procedure_expire -= elapsed_event;
   3de06:	1b9b      	subs	r3, r3, r6
   3de08:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   3de0c:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3de10:	b12b      	cbz	r3, 3de1e <ull_conn_done+0x8a>
		if (conn->apto_expire > elapsed_event) {
   3de12:	42b3      	cmp	r3, r6
   3de14:	f240 8117 	bls.w	3e046 <ull_conn_done+0x2b2>
			conn->apto_expire -= elapsed_event;
   3de18:	1b9b      	subs	r3, r3, r6
   3de1a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   3de1e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   3de22:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3de26:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
	if (conn->appto_expire != 0U) {
   3de2a:	b15a      	cbz	r2, 3de44 <ull_conn_done+0xb0>
		if (conn->appto_expire > elapsed_event) {
   3de2c:	42b2      	cmp	r2, r6
   3de2e:	f200 80e2 	bhi.w	3dff6 <ull_conn_done+0x262>
			if ((conn->procedure_expire == 0U) &&
   3de32:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   3de36:	2000      	movs	r0, #0
   3de38:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   3de3c:	b912      	cbnz	r2, 3de44 <ull_conn_done+0xb0>
   3de3e:	4299      	cmp	r1, r3
   3de40:	f000 813f 	beq.w	3e0c2 <ull_conn_done+0x32e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3de44:	1a5b      	subs	r3, r3, r1
   3de46:	f003 0303 	and.w	r3, r3, #3
   3de4a:	2b02      	cmp	r3, #2
   3de4c:	f000 80dc 	beq.w	3e008 <ull_conn_done+0x274>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3de50:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3de54:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3de58:	429a      	cmp	r2, r3
   3de5a:	f000 8108 	beq.w	3e06e <ull_conn_done+0x2da>
		lll->latency_event = 0U;
   3de5e:	2200      	movs	r2, #0
   3de60:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3de62:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   3de66:	b915      	cbnz	r5, 3de6e <ull_conn_done+0xda>
   3de68:	42ba      	cmp	r2, r7
   3de6a:	f000 80da 	beq.w	3e022 <ull_conn_done+0x28e>
		lazy = lll->latency_event + 1U;
   3de6e:	3201      	adds	r2, #1
   3de70:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3de72:	b913      	cbnz	r3, 3de7a <ull_conn_done+0xe6>
   3de74:	2e00      	cmp	r6, #0
   3de76:	f000 80b7 	beq.w	3dfe8 <ull_conn_done+0x254>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3de7a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   3de7c:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3de7e:	9504      	str	r5, [sp, #16]
   3de80:	2000      	movs	r0, #0
   3de82:	4da6      	ldr	r5, [pc, #664]	; (3e11c <ull_conn_done+0x388>)
   3de84:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3de86:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3de88:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3de8c:	9406      	str	r4, [sp, #24]
   3de8e:	9600      	str	r6, [sp, #0]
   3de90:	b2d2      	uxtb	r2, r2
   3de92:	2101      	movs	r1, #1
   3de94:	9505      	str	r5, [sp, #20]
   3de96:	f7f7 fe1f 	bl	35ad8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3de9a:	f030 0302 	bics.w	r3, r0, #2
   3de9e:	d010      	beq.n	3dec2 <ull_conn_done+0x12e>
   3dea0:	f7fa fa6a 	bl	38378 <ull_disable_mark_get>
   3dea4:	4284      	cmp	r4, r0
   3dea6:	d00c      	beq.n	3dec2 <ull_conn_done+0x12e>
   3dea8:	4a9d      	ldr	r2, [pc, #628]	; (3e120 <ull_conn_done+0x38c>)
   3deaa:	499e      	ldr	r1, [pc, #632]	; (3e124 <ull_conn_done+0x390>)
   3deac:	489e      	ldr	r0, [pc, #632]	; (3e128 <ull_conn_done+0x394>)
   3deae:	f240 63cd 	movw	r3, #1741	; 0x6cd
   3deb2:	f00c faf8 	bl	4a4a6 <printk>
   3deb6:	4040      	eors	r0, r0
   3deb8:	f380 8811 	msr	BASEPRI, r0
   3debc:	f04f 0003 	mov.w	r0, #3
   3dec0:	df02      	svc	2
}
   3dec2:	b00b      	add	sp, #44	; 0x2c
   3dec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   3dec6:	233d      	movs	r3, #61	; 0x3d
   3dec8:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	if (reason_final && (
   3decc:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3ded0:	2900      	cmp	r1, #0
   3ded2:	db1a      	blt.n	3df0a <ull_conn_done+0x176>
			       conn->llcp_terminate.ack) & 0xFF) ==
   3ded4:	f894 1150 	ldrb.w	r1, [r4, #336]	; 0x150
   3ded8:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   3dedc:	1a09      	subs	r1, r1, r0
			    lll->role ||
   3dede:	b2c9      	uxtb	r1, r1
   3dee0:	2903      	cmp	r1, #3
   3dee2:	d012      	beq.n	3df0a <ull_conn_done+0x176>
			     TERM_ACKED) ||
   3dee4:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   3dee8:	f011 0004 	ands.w	r0, r1, #4
   3deec:	d10d      	bne.n	3df0a <ull_conn_done+0x176>
			    conn->central.terminate_ack ||
   3deee:	2b3d      	cmp	r3, #61	; 0x3d
   3def0:	d00b      	beq.n	3df0a <ull_conn_done+0x176>
	latency_event = lll->latency_event;
   3def2:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   3def4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3def6:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   3def8:	e9cd 0008 	strd	r0, r0, [sp, #32]
	elapsed_event = latency_event + 1;
   3defc:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3defe:	b1bb      	cbz	r3, 3df30 <ull_conn_done+0x19c>
			conn->central.terminate_ack = 1;
   3df00:	f041 0104 	orr.w	r1, r1, #4
   3df04:	f884 10e4 	strb.w	r1, [r4, #228]	; 0xe4
   3df08:	e76c      	b.n	3dde4 <ull_conn_done+0x50>
	if (conn == conn_upd_curr) {
   3df0a:	4988      	ldr	r1, [pc, #544]	; (3e12c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   3df0c:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
	if (conn == conn_upd_curr) {
   3df10:	6808      	ldr	r0, [r1, #0]
	*((uint8_t *)rx->pdu) = reason;
   3df12:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	if (conn == conn_upd_curr) {
   3df16:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   3df18:	bf04      	itt	eq
   3df1a:	2000      	moveq	r0, #0
   3df1c:	6008      	streq	r0, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3df1e:	2117      	movs	r1, #23
	conn_cleanup_finalize(conn);
   3df20:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3df22:	f884 1158 	strb.w	r1, [r4, #344]	; 0x158
}
   3df26:	b00b      	add	sp, #44	; 0x2c
   3df28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   3df2c:	f7ff bec0 	b.w	3dcb0 <conn_cleanup_finalize>
	if (done->extra.crc_valid) {
   3df30:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   3df34:	f013 0301 	ands.w	r3, r3, #1
   3df38:	f47f af5c 	bne.w	3ddf4 <ull_conn_done+0x60>
	else if (conn->connect_expire) {
   3df3c:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   3df40:	2900      	cmp	r1, #0
   3df42:	d048      	beq.n	3dfd6 <ull_conn_done+0x242>
		if (conn->connect_expire > elapsed_event) {
   3df44:	42b1      	cmp	r1, r6
   3df46:	f240 80c3 	bls.w	3e0d0 <ull_conn_done+0x33c>
			conn->connect_expire -= elapsed_event;
   3df4a:	1b89      	subs	r1, r1, r6
	if (conn->supervision_expire) {
   3df4c:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   3df50:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   3df54:	2d00      	cmp	r5, #0
   3df56:	f43f af50 	beq.w	3ddfa <ull_conn_done+0x66>
		if (conn->supervision_expire > elapsed_event) {
   3df5a:	42ae      	cmp	r6, r5
   3df5c:	f080 808f 	bcs.w	3e07e <ull_conn_done+0x2ea>
			conn->supervision_expire -= elapsed_event;
   3df60:	1bad      	subs	r5, r5, r6
   3df62:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   3df64:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   3df66:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   3df6a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   3df6e:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   3df70:	d97b      	bls.n	3e06a <ull_conn_done+0x2d6>
			else if (lll->role) {
   3df72:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3df76:	42ab      	cmp	r3, r5
   3df78:	f6bf af3f 	bge.w	3ddfa <ull_conn_done+0x66>
				if (latency_event) {
   3df7c:	2f00      	cmp	r7, #0
   3df7e:	d174      	bne.n	3e06a <ull_conn_done+0x2d6>
					force = conn->periph.force & 0x01;
   3df80:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
					conn->periph.force >>= 1U;
   3df84:	086b      	lsrs	r3, r5, #1
					if (force) {
   3df86:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   3df8a:	bf18      	it	ne
   3df8c:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   3df90:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   3df94:	e731      	b.n	3ddfa <ull_conn_done+0x66>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3df96:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3df9a:	0718      	lsls	r0, r3, #28
   3df9c:	d53b      	bpl.n	3e016 <ull_conn_done+0x282>
					    (lll->latency + 6)) ?
   3df9e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   3dfa0:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   3dfa4:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   3dfa6:	4299      	cmp	r1, r3
   3dfa8:	bfc4      	itt	gt
   3dfaa:	1f8b      	subgt	r3, r1, #6
   3dfac:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   3dfae:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   3dfb2:	bfcc      	ite	gt
   3dfb4:	b29b      	uxthgt	r3, r3
   3dfb6:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   3dfb8:	4298      	cmp	r0, r3
   3dfba:	d05a      	beq.n	3e072 <ull_conn_done+0x2de>
				conn->appto_reload = appto_reload_new;
   3dfbc:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   3dfc0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   3dfc4:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   3dfc8:	e6f9      	b.n	3ddbe <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
   3dfca:	2300      	movs	r3, #0
   3dfcc:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3dfd0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   3dfd4:	e6f3      	b.n	3ddbe <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   3dfd6:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   3dfda:	2d00      	cmp	r5, #0
   3dfdc:	d1bd      	bne.n	3df5a <ull_conn_done+0x1c6>
			conn->supervision_expire = conn->supervision_reload;
   3dfde:	f8b4 50c2 	ldrh.w	r5, [r4, #194]	; 0xc2
   3dfe2:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
   3dfe6:	e7b5      	b.n	3df54 <ull_conn_done+0x1c0>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3dfe8:	2900      	cmp	r1, #0
   3dfea:	f47f af46 	bne.w	3de7a <ull_conn_done+0xe6>
   3dfee:	2d00      	cmp	r5, #0
   3dff0:	f47f af43 	bne.w	3de7a <ull_conn_done+0xe6>
   3dff4:	e765      	b.n	3dec2 <ull_conn_done+0x12e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3dff6:	1a5b      	subs	r3, r3, r1
   3dff8:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   3dffc:	1b92      	subs	r2, r2, r6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3dffe:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   3e000:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3e004:	f47f af24 	bne.w	3de50 <ull_conn_done+0xbc>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   3e008:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3e00c:	3b01      	subs	r3, #1
   3e00e:	2b01      	cmp	r3, #1
   3e010:	f63f af1e 	bhi.w	3de50 <ull_conn_done+0xbc>
   3e014:	e723      	b.n	3de5e <ull_conn_done+0xca>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3e016:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3e01a:	07d9      	lsls	r1, r3, #31
   3e01c:	f57f aecf 	bpl.w	3ddbe <ull_conn_done+0x2a>
   3e020:	e7bd      	b.n	3df9e <ull_conn_done+0x20a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3e022:	b913      	cbnz	r3, 3e02a <ull_conn_done+0x296>
   3e024:	2e00      	cmp	r6, #0
   3e026:	f43f af4c 	beq.w	3dec2 <ull_conn_done+0x12e>
	lazy = 0U;
   3e02a:	4629      	mov	r1, r5
   3e02c:	e725      	b.n	3de7a <ull_conn_done+0xe6>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   3e02e:	aa08      	add	r2, sp, #32
   3e030:	a909      	add	r1, sp, #36	; 0x24
   3e032:	4628      	mov	r0, r5
   3e034:	f7e8 fbe8 	bl	26808 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3e038:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3e03c:	2b00      	cmp	r3, #0
   3e03e:	d058      	beq.n	3e0f2 <ull_conn_done+0x35e>
				lll->latency_event = 0;
   3e040:	2300      	movs	r3, #0
   3e042:	8623      	strh	r3, [r4, #48]	; 0x30
   3e044:	e6ce      	b.n	3dde4 <ull_conn_done+0x50>
			rx = ll_pdu_rx_alloc();
   3e046:	f7fa f8e9 	bl	3821c <ll_pdu_rx_alloc>
			if (rx) {
   3e04a:	4601      	mov	r1, r0
   3e04c:	2800      	cmp	r0, #0
   3e04e:	d034      	beq.n	3e0ba <ull_conn_done+0x326>
				rx->handle = lll->handle;
   3e050:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   3e052:	2200      	movs	r2, #0
   3e054:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   3e058:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   3e05a:	231a      	movs	r3, #26
   3e05c:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   3e05e:	6800      	ldr	r0, [r0, #0]
   3e060:	f7fa f8ae 	bl	381c0 <ll_rx_put>
				ll_rx_sched();
   3e064:	f7fa f8b6 	bl	381d4 <ll_rx_sched>
   3e068:	e6d9      	b.n	3de1e <ull_conn_done+0x8a>
					force = 1U;
   3e06a:	2501      	movs	r5, #1
   3e06c:	e6c5      	b.n	3ddfa <ull_conn_done+0x66>
	if ((force) || (latency_event != lll->latency_event)) {
   3e06e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   3e070:	e6f7      	b.n	3de62 <ull_conn_done+0xce>
			if (conn->apto_expire == 0U) {
   3e072:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   3e076:	2800      	cmp	r0, #0
   3e078:	f47f aea1 	bne.w	3ddbe <ull_conn_done+0x2a>
   3e07c:	e7a0      	b.n	3dfc0 <ull_conn_done+0x22c>
	if (conn == conn_upd_curr) {
   3e07e:	4b2b      	ldr	r3, [pc, #172]	; (3e12c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   3e080:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   3e082:	681a      	ldr	r2, [r3, #0]
   3e084:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   3e086:	bf04      	itt	eq
   3e088:	2200      	moveq	r2, #0
   3e08a:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e08c:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   3e08e:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   3e090:	f8a4 115a 	strh.w	r1, [r4, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e094:	f884 2158 	strb.w	r2, [r4, #344]	; 0x158
	*((uint8_t *)rx->pdu) = reason;
   3e098:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	conn_cleanup_finalize(conn);
   3e09c:	4620      	mov	r0, r4
   3e09e:	f7ff fe07 	bl	3dcb0 <conn_cleanup_finalize>
}
   3e0a2:	b00b      	add	sp, #44	; 0x2c
   3e0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn == conn_upd_curr) {
   3e0a6:	4b21      	ldr	r3, [pc, #132]	; (3e12c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   3e0a8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   3e0aa:	681a      	ldr	r2, [r3, #0]
   3e0ac:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   3e0ae:	bf04      	itt	eq
   3e0b0:	2200      	moveq	r2, #0
   3e0b2:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e0b4:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   3e0b6:	2322      	movs	r3, #34	; 0x22
   3e0b8:	e7ea      	b.n	3e090 <ull_conn_done+0x2fc>
				conn->apto_expire = 1U;
   3e0ba:	2301      	movs	r3, #1
   3e0bc:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3e0c0:	e6ad      	b.n	3de1e <ull_conn_done+0x8a>
				conn->llcp_type = LLCP_PING;
   3e0c2:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   3e0c4:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   3e0c6:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
				conn->llcp_ack -= 2U;
   3e0ca:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3e0ce:	e6bf      	b.n	3de50 <ull_conn_done+0xbc>
	if (conn == conn_upd_curr) {
   3e0d0:	4916      	ldr	r1, [pc, #88]	; (3e12c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   3e0d2:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
	if (conn == conn_upd_curr) {
   3e0d6:	6808      	ldr	r0, [r1, #0]
   3e0d8:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   3e0da:	bf08      	it	eq
   3e0dc:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e0de:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
   3e0e0:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e0e2:	f884 1158 	strb.w	r1, [r4, #344]	; 0x158
	*((uint8_t *)rx->pdu) = reason;
   3e0e6:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	conn_cleanup_finalize(conn);
   3e0ea:	4620      	mov	r0, r4
   3e0ec:	f7ff fde0 	bl	3dcb0 <conn_cleanup_finalize>
}
   3e0f0:	e6e7      	b.n	3dec2 <ull_conn_done+0x12e>
				ull_conn_tx_demux(UINT8_MAX);
   3e0f2:	20ff      	movs	r0, #255	; 0xff
   3e0f4:	f7ff fd88 	bl	3dc08 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   3e0f8:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   3e0fc:	2a00      	cmp	r2, #0
   3e0fe:	d19f      	bne.n	3e040 <ull_conn_done+0x2ac>
   3e100:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3e104:	f7f6 fa34 	bl	34570 <memq_peek>
   3e108:	2800      	cmp	r0, #0
   3e10a:	d199      	bne.n	3e040 <ull_conn_done+0x2ac>
			} else if (lll->periph.latency_enabled) {
   3e10c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   3e110:	075a      	lsls	r2, r3, #29
   3e112:	f57f ae67 	bpl.w	3dde4 <ull_conn_done+0x50>
				lll->latency_event = lll->latency;
   3e116:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3e118:	8623      	strh	r3, [r4, #48]	; 0x30
   3e11a:	e663      	b.n	3dde4 <ull_conn_done+0x50>
   3e11c:	00039d7d 	.word	0x00039d7d
   3e120:	0005563c 	.word	0x0005563c
   3e124:	00055798 	.word	0x00055798
   3e128:	0005512c 	.word	0x0005512c
   3e12c:	20005c44 	.word	0x20005c44

0003e130 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   3e130:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   3e134:	2b00      	cmp	r3, #0
   3e136:	f000 80e7 	beq.w	3e308 <ull_conn_tx_lll_enqueue+0x1d8>
   3e13a:	3901      	subs	r1, #1
{
   3e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   3e140:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3e30c <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   3e144:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 3e310 <ull_conn_tx_lll_enqueue+0x1e0>
   3e148:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 3e314 <ull_conn_tx_lll_enqueue+0x1e4>
   3e14c:	4604      	mov	r4, r0
   3e14e:	b2cd      	uxtb	r5, r1
   3e150:	e012      	b.n	3e178 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   3e152:	4640      	mov	r0, r8
   3e154:	f7f6 f99e 	bl	34494 <mem_acquire>
		LL_ASSERT(link);
   3e158:	4607      	mov	r7, r0
   3e15a:	2800      	cmp	r0, #0
   3e15c:	d066      	beq.n	3e22c <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3e15e:	f104 0268 	add.w	r2, r4, #104	; 0x68
   3e162:	4631      	mov	r1, r6
   3e164:	4638      	mov	r0, r7
   3e166:	f7f6 f9f9 	bl	3455c <memq_enqueue>
	while (conn->tx_head &&
   3e16a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3e16e:	3d01      	subs	r5, #1
   3e170:	b2ed      	uxtb	r5, r5
   3e172:	2b00      	cmp	r3, #0
   3e174:	f000 8082 	beq.w	3e27c <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   3e178:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
	while (conn->tx_head &&
   3e17c:	07d1      	lsls	r1, r2, #31
   3e17e:	d403      	bmi.n	3e188 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   3e180:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		 !conn->llcp_phy.pause_tx &&
   3e184:	0792      	lsls	r2, r2, #30
   3e186:	d55f      	bpl.n	3e248 <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3e188:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3e18c:	4293      	cmp	r3, r2
   3e18e:	d175      	bne.n	3e27c <ull_conn_tx_lll_enqueue+0x14c>
   3e190:	2dff      	cmp	r5, #255	; 0xff
   3e192:	d073      	beq.n	3e27c <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3e194:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   3e198:	4620      	mov	r0, r4
   3e19a:	f7fb fe0f 	bl	39dbc <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3e19e:	7903      	ldrb	r3, [r0, #4]
   3e1a0:	f003 0303 	and.w	r3, r3, #3
   3e1a4:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3e1a6:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3e1a8:	d1d3      	bne.n	3e152 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   3e1aa:	79c3      	ldrb	r3, [r0, #7]
   3e1ac:	3b03      	subs	r3, #3
   3e1ae:	2b14      	cmp	r3, #20
   3e1b0:	d8cf      	bhi.n	3e152 <ull_conn_tx_lll_enqueue+0x22>
   3e1b2:	a201      	add	r2, pc, #4	; (adr r2, 3e1b8 <ull_conn_tx_lll_enqueue+0x88>)
   3e1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3e1b8:	0003e215 	.word	0x0003e215
   3e1bc:	0003e215 	.word	0x0003e215
   3e1c0:	0003e153 	.word	0x0003e153
   3e1c4:	0003e153 	.word	0x0003e153
   3e1c8:	0003e153 	.word	0x0003e153
   3e1cc:	0003e153 	.word	0x0003e153
   3e1d0:	0003e153 	.word	0x0003e153
   3e1d4:	0003e215 	.word	0x0003e215
   3e1d8:	0003e20d 	.word	0x0003e20d
   3e1dc:	0003e153 	.word	0x0003e153
   3e1e0:	0003e153 	.word	0x0003e153
   3e1e4:	0003e153 	.word	0x0003e153
   3e1e8:	0003e153 	.word	0x0003e153
   3e1ec:	0003e153 	.word	0x0003e153
   3e1f0:	0003e153 	.word	0x0003e153
   3e1f4:	0003e153 	.word	0x0003e153
   3e1f8:	0003e153 	.word	0x0003e153
   3e1fc:	0003e153 	.word	0x0003e153
   3e200:	0003e153 	.word	0x0003e153
   3e204:	0003e281 	.word	0x0003e281
   3e208:	0003e281 	.word	0x0003e281
		if (!conn->lll.role) {
   3e20c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3e210:	2b00      	cmp	r3, #0
   3e212:	da9e      	bge.n	3e152 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   3e214:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3e218:	f043 0302 	orr.w	r3, r3, #2
   3e21c:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		link = mem_acquire(&mem_link_tx.free);
   3e220:	4640      	mov	r0, r8
   3e222:	f7f6 f937 	bl	34494 <mem_acquire>
		LL_ASSERT(link);
   3e226:	4607      	mov	r7, r0
   3e228:	2800      	cmp	r0, #0
   3e22a:	d198      	bne.n	3e15e <ull_conn_tx_lll_enqueue+0x2e>
   3e22c:	483a      	ldr	r0, [pc, #232]	; (3e318 <ull_conn_tx_lll_enqueue+0x1e8>)
   3e22e:	f240 7326 	movw	r3, #1830	; 0x726
   3e232:	4652      	mov	r2, sl
   3e234:	4649      	mov	r1, r9
   3e236:	f00c f936 	bl	4a4a6 <printk>
   3e23a:	4040      	eors	r0, r0
   3e23c:	f380 8811 	msr	BASEPRI, r0
   3e240:	f04f 0003 	mov.w	r0, #3
   3e244:	df02      	svc	2
   3e246:	e78a      	b.n	3e15e <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3e248:	791a      	ldrb	r2, [r3, #4]
   3e24a:	f002 0203 	and.w	r2, r2, #3
   3e24e:	2a03      	cmp	r2, #3
   3e250:	d19e      	bne.n	3e190 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   3e252:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3e254:	2a03      	cmp	r2, #3
   3e256:	d001      	beq.n	3e25c <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3e258:	2a0a      	cmp	r2, #10
   3e25a:	d199      	bne.n	3e190 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   3e25c:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3e260:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3e264:	428a      	cmp	r2, r1
   3e266:	d012      	beq.n	3e28e <ull_conn_tx_lll_enqueue+0x15e>
   3e268:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3e26c:	2a03      	cmp	r2, #3
   3e26e:	d08f      	beq.n	3e190 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   3e270:	681a      	ldr	r2, [r3, #0]
   3e272:	b11a      	cbz	r2, 3e27c <ull_conn_tx_lll_enqueue+0x14c>
   3e274:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3e278:	428a      	cmp	r2, r1
   3e27a:	d034      	beq.n	3e2e6 <ull_conn_tx_lll_enqueue+0x1b6>
}
   3e27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   3e280:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3e284:	f043 0301 	orr.w	r3, r3, #1
   3e288:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		break;
   3e28c:	e761      	b.n	3e152 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   3e28e:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   3e292:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   3e296:	4288      	cmp	r0, r1
   3e298:	d1ea      	bne.n	3e270 <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   3e29a:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   3e29e:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   3e2a2:	4288      	cmp	r0, r1
   3e2a4:	d1e4      	bne.n	3e270 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   3e2a6:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   3e2aa:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3e2ae:	4288      	cmp	r0, r1
   3e2b0:	d1de      	bne.n	3e270 <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   3e2b2:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   3e2b6:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3e2ba:	4288      	cmp	r0, r1
   3e2bc:	d1d8      	bne.n	3e270 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   3e2be:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
   3e2c2:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3e2c6:	4288      	cmp	r0, r1
   3e2c8:	d1d2      	bne.n	3e270 <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3e2ca:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp_ack -= 2U;
   3e2ce:	3a02      	subs	r2, #2
   3e2d0:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3e2d4:	2201      	movs	r2, #1
   3e2d6:	f362 0301 	bfi	r3, r2, #0, #2
   3e2da:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
			conn->llcp_type = LLCP_ENCRYPTION;
   3e2de:	2303      	movs	r3, #3
   3e2e0:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3e2e4:	e754      	b.n	3e190 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   3e2e6:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   3e2ea:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
				if (!conn->tx_data_last) {
   3e2ee:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
				tx->next = conn->tx_ctrl_last->next;
   3e2f2:	6810      	ldr	r0, [r2, #0]
   3e2f4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   3e2f6:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   3e2f8:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
				if (!conn->tx_data_last) {
   3e2fc:	2900      	cmp	r1, #0
   3e2fe:	f47f af47 	bne.w	3e190 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   3e302:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3e306:	e743      	b.n	3e190 <ull_conn_tx_lll_enqueue+0x60>
   3e308:	4770      	bx	lr
   3e30a:	bf00      	nop
   3e30c:	200060fc 	.word	0x200060fc
   3e310:	0005563c 	.word	0x0005563c
   3e314:	00055694 	.word	0x00055694
   3e318:	0005512c 	.word	0x0005512c

0003e31c <tx_demux>:
{
   3e31c:	b510      	push	{r4, lr}
   3e31e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   3e320:	2001      	movs	r0, #1
   3e322:	f7ff fc71 	bl	3dc08 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   3e326:	4620      	mov	r0, r4
   3e328:	2101      	movs	r1, #1
}
   3e32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   3e32e:	f7ff beff 	b.w	3e130 <ull_conn_tx_lll_enqueue>
   3e332:	bf00      	nop

0003e334 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   3e334:	4901      	ldr	r1, [pc, #4]	; (3e33c <ull_conn_link_tx_release+0x8>)
   3e336:	f7f6 b8c7 	b.w	344c8 <mem_release>
   3e33a:	bf00      	nop
   3e33c:	200060fc 	.word	0x200060fc

0003e340 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   3e340:	4b01      	ldr	r3, [pc, #4]	; (3e348 <ull_conn_ack_last_idx_get+0x8>)
}
   3e342:	78d8      	ldrb	r0, [r3, #3]
   3e344:	4770      	bx	lr
   3e346:	bf00      	nop
   3e348:	20000d88 	.word	0x20000d88

0003e34c <ull_conn_ack_peek>:
{
   3e34c:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   3e34e:	4b0c      	ldr	r3, [pc, #48]	; (3e380 <ull_conn_ack_peek+0x34>)
   3e350:	f893 c002 	ldrb.w	ip, [r3, #2]
   3e354:	f893 e003 	ldrb.w	lr, [r3, #3]
   3e358:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   3e35a:	45f4      	cmp	ip, lr
   3e35c:	d00d      	beq.n	3e37a <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   3e35e:	fb1c fc04 	smulbb	ip, ip, r4
   3e362:	3304      	adds	r3, #4
   3e364:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   3e368:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   3e36c:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3e370:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   3e372:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3e374:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3e376:	6818      	ldr	r0, [r3, #0]
}
   3e378:	bd10      	pop	{r4, pc}
		return NULL;
   3e37a:	2000      	movs	r0, #0
}
   3e37c:	bd10      	pop	{r4, pc}
   3e37e:	bf00      	nop
   3e380:	20000d88 	.word	0x20000d88

0003e384 <ull_conn_ack_by_last_peek>:
{
   3e384:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   3e386:	4b0b      	ldr	r3, [pc, #44]	; (3e3b4 <ull_conn_ack_by_last_peek+0x30>)
   3e388:	f893 c002 	ldrb.w	ip, [r3, #2]
   3e38c:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   3e390:	4584      	cmp	ip, r0
   3e392:	d00d      	beq.n	3e3b0 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   3e394:	3304      	adds	r3, #4
   3e396:	fb1c fc0e 	smulbb	ip, ip, lr
   3e39a:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   3e39e:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3e3a2:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   3e3a6:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3e3a8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3e3aa:	6818      	ldr	r0, [r3, #0]
}
   3e3ac:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   3e3b0:	2000      	movs	r0, #0
   3e3b2:	e7fb      	b.n	3e3ac <ull_conn_ack_by_last_peek+0x28>
   3e3b4:	20000d88 	.word	0x20000d88

0003e3b8 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   3e3b8:	4b09      	ldr	r3, [pc, #36]	; (3e3e0 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   3e3ba:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   3e3bc:	78da      	ldrb	r2, [r3, #3]
   3e3be:	7818      	ldrb	r0, [r3, #0]
   3e3c0:	f893 c001 	ldrb.w	ip, [r3, #1]
   3e3c4:	428a      	cmp	r2, r1
   3e3c6:	d009      	beq.n	3e3dc <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   3e3c8:	1c4a      	adds	r2, r1, #1
   3e3ca:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   3e3cc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   3e3d0:	4594      	cmp	ip, r2
   3e3d2:	bf08      	it	eq
   3e3d4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3e3d6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   3e3d8:	709a      	strb	r2, [r3, #2]
	return mem;
   3e3da:	4770      	bx	lr
		return NULL;
   3e3dc:	2000      	movs	r0, #0
}
   3e3de:	4770      	bx	lr
   3e3e0:	20000d88 	.word	0x20000d88

0003e3e4 <ull_conn_lll_ack_enqueue>:
{
   3e3e4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3e3e6:	4a15      	ldr	r2, [pc, #84]	; (3e43c <ull_conn_lll_ack_enqueue+0x58>)
   3e3e8:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   3e3ec:	7854      	ldrb	r4, [r2, #1]
   3e3ee:	f892 e002 	ldrb.w	lr, [r2, #2]
   3e3f2:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   3e3f4:	f10c 0301 	add.w	r3, ip, #1
   3e3f8:	b2db      	uxtb	r3, r3
		last = 0U;
   3e3fa:	429c      	cmp	r4, r3
   3e3fc:	bf08      	it	eq
   3e3fe:	2300      	moveq	r3, #0
	if (last == first) {
   3e400:	459e      	cmp	lr, r3
   3e402:	d00a      	beq.n	3e41a <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3e404:	fb1c fc05 	smulbb	ip, ip, r5
   3e408:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   3e40c:	f82e 000c 	strh.w	r0, [lr, ip]
   3e410:	44f4      	add	ip, lr
	lll_tx->node = tx;
   3e412:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3e416:	70d3      	strb	r3, [r2, #3]
}
   3e418:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   3e41a:	4a09      	ldr	r2, [pc, #36]	; (3e440 <ull_conn_lll_ack_enqueue+0x5c>)
   3e41c:	4909      	ldr	r1, [pc, #36]	; (3e444 <ull_conn_lll_ack_enqueue+0x60>)
   3e41e:	480a      	ldr	r0, [pc, #40]	; (3e448 <ull_conn_lll_ack_enqueue+0x64>)
   3e420:	f240 7376 	movw	r3, #1910	; 0x776
   3e424:	f00c f83f 	bl	4a4a6 <printk>
   3e428:	4040      	eors	r0, r0
   3e42a:	f380 8811 	msr	BASEPRI, r0
   3e42e:	f04f 0003 	mov.w	r0, #3
   3e432:	df02      	svc	2
	lll_tx->handle = handle;
   3e434:	2300      	movs	r3, #0
   3e436:	801b      	strh	r3, [r3, #0]
   3e438:	deff      	udf	#255	; 0xff
   3e43a:	bf00      	nop
   3e43c:	20000d88 	.word	0x20000d88
   3e440:	0005563c 	.word	0x0005563c
   3e444:	00055684 	.word	0x00055684
   3e448:	0005512c 	.word	0x0005512c

0003e44c <ull_conn_tx_ack>:
{
   3e44c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   3e44e:	7953      	ldrb	r3, [r2, #5]
{
   3e450:	b083      	sub	sp, #12
   3e452:	4614      	mov	r4, r2
   3e454:	4605      	mov	r5, r0
   3e456:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   3e458:	b37b      	cbz	r3, 3e4ba <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3e45a:	7923      	ldrb	r3, [r4, #4]
   3e45c:	f003 0203 	and.w	r2, r3, #3
   3e460:	2a03      	cmp	r2, #3
   3e462:	d00d      	beq.n	3e480 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   3e464:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3e468:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   3e46a:	bf04      	itt	eq
   3e46c:	f36f 0301 	bfceq	r3, #0, #2
   3e470:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   3e472:	4621      	mov	r1, r4
   3e474:	4628      	mov	r0, r5
}
   3e476:	b003      	add	sp, #12
   3e478:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3e47c:	f7f9 bee4 	b.w	38248 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   3e480:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e484:	429d      	cmp	r5, r3
   3e486:	d126      	bne.n	3e4d6 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   3e488:	6830      	ldr	r0, [r6, #0]
   3e48a:	4284      	cmp	r4, r0
   3e48c:	d055      	beq.n	3e53a <ull_conn_tx_ack+0xee>
		LL_ASSERT(!link->next);
   3e48e:	2800      	cmp	r0, #0
   3e490:	d0ef      	beq.n	3e472 <ull_conn_tx_ack+0x26>
   3e492:	4ac2      	ldr	r2, [pc, #776]	; (3e79c <ull_conn_tx_ack+0x350>)
   3e494:	49c2      	ldr	r1, [pc, #776]	; (3e7a0 <ull_conn_tx_ack+0x354>)
   3e496:	48c3      	ldr	r0, [pc, #780]	; (3e7a4 <ull_conn_tx_ack+0x358>)
   3e498:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   3e49c:	f00c f803 	bl	4a4a6 <printk>
   3e4a0:	4040      	eors	r0, r0
   3e4a2:	f380 8811 	msr	BASEPRI, r0
   3e4a6:	f04f 0003 	mov.w	r0, #3
   3e4aa:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   3e4ac:	4621      	mov	r1, r4
   3e4ae:	4628      	mov	r0, r5
}
   3e4b0:	b003      	add	sp, #12
   3e4b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3e4b6:	f7f9 bec7 	b.w	38248 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   3e4ba:	4ab8      	ldr	r2, [pc, #736]	; (3e79c <ull_conn_tx_ack+0x350>)
   3e4bc:	49ba      	ldr	r1, [pc, #744]	; (3e7a8 <ull_conn_tx_ack+0x35c>)
   3e4be:	48b9      	ldr	r0, [pc, #740]	; (3e7a4 <ull_conn_tx_ack+0x358>)
   3e4c0:	f240 7383 	movw	r3, #1923	; 0x783
   3e4c4:	f00b ffef 	bl	4a4a6 <printk>
   3e4c8:	4040      	eors	r0, r0
   3e4ca:	f380 8811 	msr	BASEPRI, r0
   3e4ce:	f04f 0003 	mov.w	r0, #3
   3e4d2:	df02      	svc	2
   3e4d4:	e7c1      	b.n	3e45a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3e4d6:	48b5      	ldr	r0, [pc, #724]	; (3e7ac <ull_conn_tx_ack+0x360>)
   3e4d8:	462a      	mov	r2, r5
   3e4da:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3e4de:	f7f6 f80b 	bl	344f8 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   3e4e2:	79e3      	ldrb	r3, [r4, #7]
   3e4e4:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3e4e6:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   3e4e8:	2b16      	cmp	r3, #22
   3e4ea:	d836      	bhi.n	3e55a <ull_conn_tx_ack+0x10e>
   3e4ec:	e8df f013 	tbh	[pc, r3, lsl #1]
   3e4f0:	00ce00e1 	.word	0x00ce00e1
   3e4f4:	003b0042 	.word	0x003b0042
   3e4f8:	002e00ab 	.word	0x002e00ab
   3e4fc:	002e0035 	.word	0x002e0035
   3e500:	0053009a 	.word	0x0053009a
   3e504:	00490035 	.word	0x00490035
   3e508:	00350035 	.word	0x00350035
   3e50c:	002b0035 	.word	0x002b0035
   3e510:	002e0035 	.word	0x002e0035
   3e514:	011c0149 	.word	0x011c0149
   3e518:	00ed010a 	.word	0x00ed010a
   3e51c:	00bd      	.short	0x00bd
			LL_ASSERT(link->next);
   3e51e:	4a9f      	ldr	r2, [pc, #636]	; (3e79c <ull_conn_tx_ack+0x350>)
   3e520:	49a3      	ldr	r1, [pc, #652]	; (3e7b0 <ull_conn_tx_ack+0x364>)
   3e522:	48a0      	ldr	r0, [pc, #640]	; (3e7a4 <ull_conn_tx_ack+0x358>)
   3e524:	f240 7392 	movw	r3, #1938	; 0x792
   3e528:	f00b ffbd 	bl	4a4a6 <printk>
   3e52c:	4040      	eors	r0, r0
   3e52e:	f380 8811 	msr	BASEPRI, r0
   3e532:	f04f 0003 	mov.w	r0, #3
   3e536:	df02      	svc	2
   3e538:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3e53a:	499e      	ldr	r1, [pc, #632]	; (3e7b4 <ull_conn_tx_ack+0x368>)
}
   3e53c:	b003      	add	sp, #12
   3e53e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3e542:	f7f5 bfc1 	b.w	344c8 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   3e546:	7a23      	ldrb	r3, [r4, #8]
   3e548:	2b03      	cmp	r3, #3
   3e54a:	d01a      	beq.n	3e582 <ull_conn_tx_ack+0x136>
			conn->common.txn_lock = 0U;
   3e54c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
   3e550:	f36f 0341 	bfc	r3, #1, #1
   3e554:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			break;
   3e558:	e796      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   3e55a:	6830      	ldr	r0, [r6, #0]
   3e55c:	42a0      	cmp	r0, r4
   3e55e:	d0ec      	beq.n	3e53a <ull_conn_tx_ack+0xee>
		LL_ASSERT(!link->next);
   3e560:	2800      	cmp	r0, #0
   3e562:	d196      	bne.n	3e492 <ull_conn_tx_ack+0x46>
   3e564:	e785      	b.n	3e472 <ull_conn_tx_ack+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3e566:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   3e56a:	f043 0303 	orr.w	r3, r3, #3
   3e56e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   3e572:	e789      	b.n	3e488 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   3e574:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3e578:	f043 0302 	orr.w	r3, r3, #2
   3e57c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
   3e580:	e782      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   3e582:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3e586:	f023 0303 	bic.w	r3, r3, #3
   3e58a:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = 0U;
   3e58e:	2300      	movs	r3, #0
   3e590:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		break;
   3e594:	e778      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   3e596:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e59a:	2b00      	cmp	r3, #0
   3e59c:	dbea      	blt.n	3e574 <ull_conn_tx_ack+0x128>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e59e:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3e5a0:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e5a2:	f043 0303 	orr.w	r3, r3, #3
   3e5a6:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3e5a8:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3e5aa:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3e5ac:	2208      	movs	r2, #8
   3e5ae:	f200 1179 	addw	r1, r0, #377	; 0x179
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3e5b2:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3e5b4:	18a0      	adds	r0, r4, r2
   3e5b6:	f00e f87e 	bl	4c6b6 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3e5ba:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   3e5be:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3e5c0:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
   3e5c4:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   3e5c6:	210c      	movs	r1, #12
   3e5c8:	f104 0012 	add.w	r0, r4, #18
   3e5cc:	f002 fa8a 	bl	40ae4 <lll_csrand_isr_get>
	    conn->tx_head &&
   3e5d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
	if (
   3e5d4:	2b00      	cmp	r3, #0
   3e5d6:	f000 80f4 	beq.w	3e7c2 <ull_conn_tx_ack+0x376>
	    !conn->llcp_enc.pause_tx &&
   3e5da:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
	    conn->tx_head &&
   3e5de:	0791      	lsls	r1, r2, #30
   3e5e0:	f100 80ef 	bmi.w	3e7c2 <ull_conn_tx_ack+0x376>
	    !conn->llcp_phy.pause_tx &&
   3e5e4:	f897 21cf 	ldrb.w	r2, [r7, #463]	; 0x1cf
   3e5e8:	07d2      	lsls	r2, r2, #31
   3e5ea:	f100 80ea 	bmi.w	3e7c2 <ull_conn_tx_ack+0x376>
		if (conn->tx_head == conn->tx_data) {
   3e5ee:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3e5f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3e5f6:	428b      	cmp	r3, r1
   3e5f8:	f000 8102 	beq.w	3e800 <ull_conn_tx_ack+0x3b4>
		} else if (!conn->tx_ctrl) {
   3e5fc:	2a00      	cmp	r2, #0
   3e5fe:	f000 810c 	beq.w	3e81a <ull_conn_tx_ack+0x3ce>
	tx->next = conn->tx_ctrl_last->next;
   3e602:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
   3e606:	681a      	ldr	r2, [r3, #0]
   3e608:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   3e60a:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3e60c:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   3e60e:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
		if (link->next == (void *)tx) {
   3e612:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   3e614:	2b00      	cmp	r3, #0
   3e616:	f000 80d1 	beq.w	3e7bc <ull_conn_tx_ack+0x370>
		if (link->next == (void *)tx) {
   3e61a:	2a00      	cmp	r2, #0
   3e61c:	f43f af7f 	beq.w	3e51e <ull_conn_tx_ack+0xd2>
}
   3e620:	b003      	add	sp, #12
   3e622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   3e624:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3e628:	f023 0306 	bic.w	r3, r3, #6
   3e62c:	f043 0306 	orr.w	r3, r3, #6
   3e630:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3e634:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   3e638:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3e63c:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
   3e640:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
		break;
   3e644:	e720      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   3e646:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e64a:	2b00      	cmp	r3, #0
   3e64c:	da8b      	bge.n	3e566 <ull_conn_tx_ack+0x11a>
			conn->llcp_enc.pause_rx = 0U;
   3e64e:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3e652:	f023 0303 	bic.w	r3, r3, #3
   3e656:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
			conn->procedure_expire = 0U;
   3e65a:	2300      	movs	r3, #0
   3e65c:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   3e660:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3e664:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
   3e668:	e70e      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3e66a:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   3e66e:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   3e672:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   3e676:	f363 1206 	bfi	r2, r3, #4, #3
   3e67a:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3e67e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3e682:	f36f 0300 	bfc	r3, #0, #1
   3e686:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		break;
   3e68a:	e6fd      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   3e68c:	2208      	movs	r2, #8
   3e68e:	f104 0112 	add.w	r1, r4, #18
   3e692:	f500 7081 	add.w	r0, r0, #258	; 0x102
   3e696:	f00e f80e 	bl	4c6b6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3e69a:	2204      	movs	r2, #4
   3e69c:	f104 011a 	add.w	r1, r4, #26
   3e6a0:	f107 0094 	add.w	r0, r7, #148	; 0x94
   3e6a4:	f00e f807 	bl	4c6b6 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   3e6a8:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3e6ac:	f043 0302 	orr.w	r3, r3, #2
   3e6b0:	e7be      	b.n	3e630 <ull_conn_tx_ack+0x1e4>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   3e6b2:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   3e6b4:	2b13      	cmp	r3, #19
   3e6b6:	bf08      	it	eq
   3e6b8:	2316      	moveq	r3, #22
   3e6ba:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		conn->llcp_terminate.ack--;
   3e6be:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   3e6c2:	3b01      	subs	r3, #1
   3e6c4:	f880 3151 	strb.w	r3, [r0, #337]	; 0x151
	break;
   3e6c8:	e6de      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   3e6ca:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e6ce:	2b00      	cmp	r3, #0
   3e6d0:	dad5      	bge.n	3e67e <ull_conn_tx_ack+0x232>
				conn->common.txn_lock = 0U;
   3e6d2:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e6d6:	4b38      	ldr	r3, [pc, #224]	; (3e7b8 <ull_conn_tx_ack+0x36c>)
				conn->common.txn_lock = 0U;
   3e6d8:	f36f 0241 	bfc	r2, #1, #1
   3e6dc:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e6e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   3e6e4:	ab02      	add	r3, sp, #8
   3e6e6:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   3e6ea:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
   3e6ee:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   3e6f2:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   3e6f6:	f003 0307 	and.w	r3, r3, #7
   3e6fa:	a902      	add	r1, sp, #8
   3e6fc:	440b      	add	r3, r1
   3e6fe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   3e702:	e7b8      	b.n	3e676 <ull_conn_tx_ack+0x22a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3e704:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
   3e708:	2202      	movs	r2, #2
   3e70a:	f362 0301 	bfi	r3, r2, #0, #2
   3e70e:	f880 31ce 	strb.w	r3, [r0, #462]	; 0x1ce
		if (conn->lll.role) {
   3e712:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e716:	2b00      	cmp	r3, #0
   3e718:	dab1      	bge.n	3e67e <ull_conn_tx_ack+0x232>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e71a:	4b27      	ldr	r3, [pc, #156]	; (3e7b8 <ull_conn_tx_ack+0x36c>)
   3e71c:	e893 0003 	ldmia.w	r3, {r0, r1}
   3e720:	ab02      	add	r3, sp, #8
   3e722:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   3e726:	e7e0      	b.n	3e6ea <ull_conn_tx_ack+0x29e>
		conn->common.txn_lock = 0U;
   3e728:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3e72c:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
		conn->common.txn_lock = 0U;
   3e730:	f36f 0341 	bfc	r3, #1, #1
   3e734:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3e738:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
   3e73c:	428b      	cmp	r3, r1
   3e73e:	f43f aea3 	beq.w	3e488 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   3e742:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   3e746:	f002 0307 	and.w	r3, r2, #7
   3e74a:	2b03      	cmp	r3, #3
   3e74c:	d005      	beq.n	3e75a <ull_conn_tx_ack+0x30e>
   3e74e:	3303      	adds	r3, #3
   3e750:	f003 0307 	and.w	r3, r3, #7
   3e754:	2b01      	cmp	r3, #1
   3e756:	f63f af00 	bhi.w	3e55a <ull_conn_tx_ack+0x10e>
				conn->lll.max_tx_octets =
   3e75a:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
   3e75e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   3e762:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
   3e766:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   3e76a:	f002 0307 	and.w	r3, r2, #7
   3e76e:	2b05      	cmp	r3, #5
   3e770:	d032      	beq.n	3e7d8 <ull_conn_tx_ack+0x38c>
				if (!conn->llcp_length.cache.tx_octets) {
   3e772:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
   3e776:	bbab      	cbnz	r3, 3e7e4 <ull_conn_tx_ack+0x398>
					conn->llcp_length.ack =
   3e778:	f887 11bd 	strb.w	r1, [r7, #445]	; 0x1bd
					conn->procedure_expire = 0U;
   3e77c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
					break;
   3e780:	e682      	b.n	3e488 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3e782:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3e786:	f003 0207 	and.w	r2, r3, #7
   3e78a:	2a01      	cmp	r2, #1
   3e78c:	f47f ae7c 	bne.w	3e488 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3e790:	2202      	movs	r2, #2
   3e792:	f362 0302 	bfi	r3, r2, #0, #3
   3e796:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
   3e79a:	e675      	b.n	3e488 <ull_conn_tx_ack+0x3c>
   3e79c:	0005563c 	.word	0x0005563c
   3e7a0:	00055800 	.word	0x00055800
   3e7a4:	0005512c 	.word	0x0005512c
   3e7a8:	000557f4 	.word	0x000557f4
   3e7ac:	20003578 	.word	0x20003578
   3e7b0:	0005580c 	.word	0x0005580c
   3e7b4:	20005cd8 	.word	0x20005cd8
   3e7b8:	00055818 	.word	0x00055818
		conn->tx_data_last = tx;
   3e7bc:	f8c7 41e4 	str.w	r4, [r7, #484]	; 0x1e4
   3e7c0:	e72b      	b.n	3e61a <ull_conn_tx_ack+0x1ce>
		if (!conn->tx_ctrl) {
   3e7c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
   3e7c6:	2a00      	cmp	r2, #0
   3e7c8:	f47f af1b 	bne.w	3e602 <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head;
   3e7cc:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   3e7ce:	e9c7 4475 	strd	r4, r4, [r7, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3e7d2:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
   3e7d6:	e71c      	b.n	3e612 <ull_conn_tx_ack+0x1c6>
					conn->llcp_length.state =
   3e7d8:	2304      	movs	r3, #4
   3e7da:	f363 0202 	bfi	r2, r3, #0, #3
   3e7de:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
					break;
   3e7e2:	e651      	b.n	3e488 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   3e7e4:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3e7e8:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e7ea:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   3e7ee:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   3e7f2:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e7f6:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
				conn->llcp_length.tx_time =
   3e7fa:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
				break;
   3e7fe:	e643      	b.n	3e488 <ull_conn_tx_ack+0x3c>
			conn->tx_data = conn->tx_data->next;
   3e800:	6819      	ldr	r1, [r3, #0]
   3e802:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3e806:	2a00      	cmp	r2, #0
   3e808:	f47f aefb 	bne.w	3e602 <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head->next;
   3e80c:	681a      	ldr	r2, [r3, #0]
   3e80e:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   3e810:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3e812:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   3e814:	e9c7 4476 	strd	r4, r4, [r7, #472]	; 0x1d8
   3e818:	e6fb      	b.n	3e612 <ull_conn_tx_ack+0x1c6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e81a:	791a      	ldrb	r2, [r3, #4]
   3e81c:	f002 0203 	and.w	r2, r2, #3
   3e820:	2a03      	cmp	r2, #3
   3e822:	d002      	beq.n	3e82a <ull_conn_tx_ack+0x3de>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3e824:	e9c7 3376 	strd	r3, r3, [r7, #472]	; 0x1d8
   3e828:	e6eb      	b.n	3e602 <ull_conn_tx_ack+0x1b6>
	    ((pdu_data_tx->llctrl.opcode !=
   3e82a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e82c:	2a03      	cmp	r2, #3
   3e82e:	d0ed      	beq.n	3e80c <ull_conn_tx_ack+0x3c0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3e830:	2a0a      	cmp	r2, #10
   3e832:	d1f7      	bne.n	3e824 <ull_conn_tx_ack+0x3d8>
   3e834:	e7ea      	b.n	3e80c <ull_conn_tx_ack+0x3c0>
   3e836:	bf00      	nop

0003e838 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   3e838:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e83c:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e840:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   3e842:	bf03      	ittte	eq
   3e844:	3301      	addeq	r3, #1
   3e846:	f880 30f0 	strbeq.w	r3, [r0, #240]	; 0xf0
	return 0;
   3e84a:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e84c:	200c      	movne	r0, #12
}
   3e84e:	4770      	bx	lr

0003e850 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   3e850:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e854:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   3e858:	f3c2 1202 	ubfx	r2, r2, #4, #3
   3e85c:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e85e:	bf14      	ite	ne
   3e860:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e862:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   3e864:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   3e868:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e86a:	bf14      	ite	ne
   3e86c:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e86e:	3b0b      	subeq	r3, #11
   3e870:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   3e872:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   3e874:	bf44      	itt	mi
   3e876:	3b04      	submi	r3, #4
   3e878:	b29b      	uxthmi	r3, r3
}
   3e87a:	4298      	cmp	r0, r3
   3e87c:	bf28      	it	cs
   3e87e:	4618      	movcs	r0, r3
   3e880:	4770      	bx	lr
   3e882:	bf00      	nop

0003e884 <ull_pdu_data_init>:
}
   3e884:	4770      	bx	lr
   3e886:	bf00      	nop

0003e888 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   3e888:	b510      	push	{r4, lr}
   3e88a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e88c:	b930      	cbnz	r0, 3e89c <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   3e88e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e892:	f36f 0382 	bfc	r3, #2, #1
   3e896:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e89a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e89c:	4a09      	ldr	r2, [pc, #36]	; (3e8c4 <ticker_update_latency_cancel_op_cb+0x3c>)
   3e89e:	490a      	ldr	r1, [pc, #40]	; (3e8c8 <ticker_update_latency_cancel_op_cb+0x40>)
   3e8a0:	480a      	ldr	r0, [pc, #40]	; (3e8cc <ticker_update_latency_cancel_op_cb+0x44>)
   3e8a2:	f240 23af 	movw	r3, #687	; 0x2af
   3e8a6:	f00b fdfe 	bl	4a4a6 <printk>
   3e8aa:	4040      	eors	r0, r0
   3e8ac:	f380 8811 	msr	BASEPRI, r0
   3e8b0:	f04f 0003 	mov.w	r0, #3
   3e8b4:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   3e8b6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e8ba:	f36f 0382 	bfc	r3, #2, #1
   3e8be:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e8c2:	bd10      	pop	{r4, pc}
   3e8c4:	00055824 	.word	0x00055824
   3e8c8:	0005586c 	.word	0x0005586c
   3e8cc:	0005512c 	.word	0x0005512c

0003e8d0 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e8d0:	b900      	cbnz	r0, 3e8d4 <ticker_op_cb+0x4>
   3e8d2:	4770      	bx	lr
{
   3e8d4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e8d6:	4a07      	ldr	r2, [pc, #28]	; (3e8f4 <ticker_op_cb+0x24>)
   3e8d8:	4907      	ldr	r1, [pc, #28]	; (3e8f8 <ticker_op_cb+0x28>)
   3e8da:	4808      	ldr	r0, [pc, #32]	; (3e8fc <ticker_op_cb+0x2c>)
   3e8dc:	f240 23a7 	movw	r3, #679	; 0x2a7
   3e8e0:	f00b fde1 	bl	4a4a6 <printk>
   3e8e4:	4040      	eors	r0, r0
   3e8e6:	f380 8811 	msr	BASEPRI, r0
   3e8ea:	f04f 0003 	mov.w	r0, #3
   3e8ee:	df02      	svc	2
}
   3e8f0:	bd08      	pop	{r3, pc}
   3e8f2:	bf00      	nop
   3e8f4:	00055824 	.word	0x00055824
   3e8f8:	0005569c 	.word	0x0005569c
   3e8fc:	0005512c 	.word	0x0005512c

0003e900 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3e900:	2801      	cmp	r0, #1
   3e902:	d000      	beq.n	3e906 <ticker_op_stop_adv_cb+0x6>
   3e904:	4770      	bx	lr
{
   3e906:	b510      	push	{r4, lr}
   3e908:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3e90a:	f7f9 fd35 	bl	38378 <ull_disable_mark_get>
   3e90e:	4284      	cmp	r4, r0
   3e910:	d00c      	beq.n	3e92c <__kernel_ram_size+0x24>
   3e912:	4a07      	ldr	r2, [pc, #28]	; (3e930 <__kernel_ram_size+0x28>)
   3e914:	4907      	ldr	r1, [pc, #28]	; (3e934 <__kernel_ram_size+0x2c>)
   3e916:	4808      	ldr	r0, [pc, #32]	; (3e938 <__kernel_ram_size+0x30>)
   3e918:	f240 239f 	movw	r3, #671	; 0x29f
   3e91c:	f00b fdc3 	bl	4a4a6 <printk>
   3e920:	4040      	eors	r0, r0
   3e922:	f380 8811 	msr	BASEPRI, r0
   3e926:	f04f 0003 	mov.w	r0, #3
   3e92a:	df02      	svc	2
}
   3e92c:	bd10      	pop	{r4, pc}
   3e92e:	bf00      	nop
   3e930:	00055824 	.word	0x00055824
   3e934:	00055880 	.word	0x00055880
   3e938:	0005512c 	.word	0x0005512c

0003e93c <ull_periph_ticker_cb>:
{
   3e93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e940:	9c07      	ldr	r4, [sp, #28]
   3e942:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e946:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3e948:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e94e:	4299      	cmp	r1, r3
   3e950:	d026      	beq.n	3e9a0 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3e952:	4606      	mov	r6, r0
   3e954:	4617      	mov	r7, r2
   3e956:	4601      	mov	r1, r0
   3e958:	462a      	mov	r2, r5
   3e95a:	4620      	mov	r0, r4
   3e95c:	f7fd fe7e 	bl	3c65c <ull_conn_llcp>
		if (ret) {
   3e960:	b9f0      	cbnz	r0, 3e9a0 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   3e962:	7823      	ldrb	r3, [r4, #0]
   3e964:	3301      	adds	r3, #1
   3e966:	b2db      	uxtb	r3, r3
   3e968:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3e96a:	b34b      	cbz	r3, 3e9c0 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   3e96c:	491b      	ldr	r1, [pc, #108]	; (3e9dc <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   3e96e:	4b1c      	ldr	r3, [pc, #112]	; (3e9e0 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   3e970:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3e972:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e976:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3e978:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3e97a:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3e97e:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3e982:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e984:	2001      	movs	r0, #1
   3e986:	4611      	mov	r1, r2
   3e988:	f7f5 fe5c 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!err);
   3e98c:	b950      	cbnz	r0, 3e9a4 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   3e98e:	20ff      	movs	r0, #255	; 0xff
   3e990:	f7ff f93a 	bl	3dc08 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e994:	4620      	mov	r0, r4
   3e996:	21ff      	movs	r1, #255	; 0xff
}
   3e998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e99c:	f7ff bbc8 	b.w	3e130 <ull_conn_tx_lll_enqueue>
}
   3e9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3e9a4:	4a0f      	ldr	r2, [pc, #60]	; (3e9e4 <ull_periph_ticker_cb+0xa8>)
   3e9a6:	4910      	ldr	r1, [pc, #64]	; (3e9e8 <ull_periph_ticker_cb+0xac>)
   3e9a8:	4810      	ldr	r0, [pc, #64]	; (3e9ec <ull_periph_ticker_cb+0xb0>)
   3e9aa:	f240 232a 	movw	r3, #554	; 0x22a
   3e9ae:	f00b fd7a 	bl	4a4a6 <printk>
   3e9b2:	4040      	eors	r0, r0
   3e9b4:	f380 8811 	msr	BASEPRI, r0
   3e9b8:	f04f 0003 	mov.w	r0, #3
   3e9bc:	df02      	svc	2
   3e9be:	e7e6      	b.n	3e98e <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   3e9c0:	4a08      	ldr	r2, [pc, #32]	; (3e9e4 <ull_periph_ticker_cb+0xa8>)
   3e9c2:	490b      	ldr	r1, [pc, #44]	; (3e9f0 <ull_periph_ticker_cb+0xb4>)
   3e9c4:	4809      	ldr	r0, [pc, #36]	; (3e9ec <ull_periph_ticker_cb+0xb0>)
   3e9c6:	f240 231d 	movw	r3, #541	; 0x21d
   3e9ca:	f00b fd6c 	bl	4a4a6 <printk>
   3e9ce:	4040      	eors	r0, r0
   3e9d0:	f380 8811 	msr	BASEPRI, r0
   3e9d4:	f04f 0003 	mov.w	r0, #3
   3e9d8:	df02      	svc	2
   3e9da:	e7c7      	b.n	3e96c <ull_periph_ticker_cb+0x30>
   3e9dc:	200061f0 	.word	0x200061f0
   3e9e0:	20000ef0 	.word	0x20000ef0
   3e9e4:	00055824 	.word	0x00055824
   3e9e8:	00055308 	.word	0x00055308
   3e9ec:	0005512c 	.word	0x0005512c
   3e9f0:	000555a0 	.word	0x000555a0

0003e9f4 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3e9f4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3e9f6:	b123      	cbz	r3, 3ea02 <ull_periph_latency_cancel+0xe>
   3e9f8:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   3e9fc:	f012 0304 	ands.w	r3, r2, #4
   3ea00:	d000      	beq.n	3ea04 <ull_periph_latency_cancel+0x10>
   3ea02:	4770      	bx	lr
{
   3ea04:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   3ea06:	f042 0204 	orr.w	r2, r2, #4
{
   3ea0a:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3ea0c:	4c11      	ldr	r4, [pc, #68]	; (3ea54 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   3ea0e:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3ea12:	3105      	adds	r1, #5
   3ea14:	2201      	movs	r2, #1
   3ea16:	e9cd 3202 	strd	r3, r2, [sp, #8]
   3ea1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   3ea1e:	e9cd 3300 	strd	r3, r3, [sp]
   3ea22:	9006      	str	r0, [sp, #24]
   3ea24:	b2ca      	uxtb	r2, r1
   3ea26:	4618      	mov	r0, r3
   3ea28:	2103      	movs	r1, #3
   3ea2a:	f7f7 f855 	bl	35ad8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3ea2e:	f030 0302 	bics.w	r3, r0, #2
   3ea32:	d00c      	beq.n	3ea4e <ull_periph_latency_cancel+0x5a>
   3ea34:	4a08      	ldr	r2, [pc, #32]	; (3ea58 <ull_periph_latency_cancel+0x64>)
   3ea36:	4909      	ldr	r1, [pc, #36]	; (3ea5c <ull_periph_latency_cancel+0x68>)
   3ea38:	4809      	ldr	r0, [pc, #36]	; (3ea60 <ull_periph_latency_cancel+0x6c>)
   3ea3a:	f240 13e3 	movw	r3, #483	; 0x1e3
   3ea3e:	f00b fd32 	bl	4a4a6 <printk>
   3ea42:	4040      	eors	r0, r0
   3ea44:	f380 8811 	msr	BASEPRI, r0
   3ea48:	f04f 0003 	mov.w	r0, #3
   3ea4c:	df02      	svc	2
}
   3ea4e:	b008      	add	sp, #32
   3ea50:	bd10      	pop	{r4, pc}
   3ea52:	bf00      	nop
   3ea54:	0003e889 	.word	0x0003e889
   3ea58:	00055824 	.word	0x00055824
   3ea5c:	0005571c 	.word	0x0005571c
   3ea60:	0005512c 	.word	0x0005512c

0003ea64 <ll_start_enc_req_send>:
{
   3ea64:	b570      	push	{r4, r5, r6, lr}
   3ea66:	460e      	mov	r6, r1
   3ea68:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   3ea6a:	f7fb fdc1 	bl	3a5f0 <ll_connected_get>
	if (!conn) {
   3ea6e:	2800      	cmp	r0, #0
   3ea70:	d040      	beq.n	3eaf4 <ll_start_enc_req_send+0x90>
	if (error_code) {
   3ea72:	4604      	mov	r4, r0
   3ea74:	b95e      	cbnz	r6, 3ea8e <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3ea76:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3ea7a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3ea7e:	429a      	cmp	r2, r3
   3ea80:	d003      	beq.n	3ea8a <ll_start_enc_req_send+0x26>
   3ea82:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3ea86:	2b03      	cmp	r3, #3
   3ea88:	d026      	beq.n	3ead8 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   3ea8a:	200c      	movs	r0, #12
}
   3ea8c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   3ea8e:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
   3ea92:	f010 0004 	ands.w	r0, r0, #4
   3ea96:	d112      	bne.n	3eabe <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   3ea98:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3ea9c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3eaa0:	429a      	cmp	r2, r3
   3eaa2:	d0f2      	beq.n	3ea8a <ll_start_enc_req_send+0x26>
   3eaa4:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3eaa8:	2b03      	cmp	r3, #3
   3eaaa:	d1ee      	bne.n	3ea8a <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3eaac:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp.encryption.error_code = error_code;
   3eab0:	f884 6101 	strb.w	r6, [r4, #257]	; 0x101
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3eab4:	f360 0301 	bfi	r3, r0, #0, #2
   3eab8:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   3eabc:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   3eabe:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
			if (conn->llcp_terminate.ack !=
   3eac2:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3eac6:	4293      	cmp	r3, r2
   3eac8:	d1df      	bne.n	3ea8a <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   3eaca:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   3eacc:	f884 6152 	strb.w	r6, [r4, #338]	; 0x152
			conn->llcp_terminate.req++;
   3ead0:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
	return 0;
   3ead4:	2000      	movs	r0, #0
}
   3ead6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3ead8:	2210      	movs	r2, #16
   3eada:	4629      	mov	r1, r5
   3eadc:	f200 1081 	addw	r0, r0, #385	; 0x181
   3eae0:	f00d fde9 	bl	4c6b6 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3eae4:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
   3eae8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   3eaec:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
	return 0;
   3eaf0:	4630      	mov	r0, r6
}
   3eaf2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3eaf4:	2002      	movs	r0, #2
}
   3eaf6:	bd70      	pop	{r4, r5, r6, pc}

0003eaf8 <ticker_op_stop_scan_cb>:
}
   3eaf8:	4770      	bx	lr
   3eafa:	bf00      	nop

0003eafc <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3eafc:	b900      	cbnz	r0, 3eb00 <ticker_op_cb+0x4>
   3eafe:	4770      	bx	lr
{
   3eb00:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3eb02:	4a07      	ldr	r2, [pc, #28]	; (3eb20 <ticker_op_cb+0x24>)
   3eb04:	4907      	ldr	r1, [pc, #28]	; (3eb24 <ticker_op_cb+0x28>)
   3eb06:	4808      	ldr	r0, [pc, #32]	; (3eb28 <ticker_op_cb+0x2c>)
   3eb08:	f240 43ad 	movw	r3, #1197	; 0x4ad
   3eb0c:	f00b fccb 	bl	4a4a6 <printk>
   3eb10:	4040      	eors	r0, r0
   3eb12:	f380 8811 	msr	BASEPRI, r0
   3eb16:	f04f 0003 	mov.w	r0, #3
   3eb1a:	df02      	svc	2
}
   3eb1c:	bd08      	pop	{r3, pc}
   3eb1e:	bf00      	nop
   3eb20:	000558b0 	.word	0x000558b0
   3eb24:	0005569c 	.word	0x0005569c
   3eb28:	0005512c 	.word	0x0005512c

0003eb2c <ull_central_ticker_cb>:
{
   3eb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3eb30:	9c07      	ldr	r4, [sp, #28]
   3eb32:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3eb36:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3eb38:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3eb3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3eb3e:	4299      	cmp	r1, r3
   3eb40:	d02d      	beq.n	3eb9e <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3eb42:	4606      	mov	r6, r0
   3eb44:	4617      	mov	r7, r2
   3eb46:	4601      	mov	r1, r0
   3eb48:	462a      	mov	r2, r5
   3eb4a:	4620      	mov	r0, r4
   3eb4c:	f7fd fd86 	bl	3c65c <ull_conn_llcp>
		if (ret) {
   3eb50:	bb28      	cbnz	r0, 3eb9e <ull_central_ticker_cb+0x72>
   3eb52:	7823      	ldrb	r3, [r4, #0]
   3eb54:	3301      	adds	r3, #1
   3eb56:	b2db      	uxtb	r3, r3
   3eb58:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3eb5a:	b383      	cbz	r3, 3ebbe <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   3eb5c:	2002      	movs	r0, #2
   3eb5e:	f7ff f853 	bl	3dc08 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   3eb62:	2102      	movs	r1, #2
   3eb64:	4620      	mov	r0, r4
   3eb66:	f7ff fae3 	bl	3e130 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   3eb6a:	491c      	ldr	r1, [pc, #112]	; (3ebdc <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   3eb6c:	4b1c      	ldr	r3, [pc, #112]	; (3ebe0 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   3eb6e:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3eb70:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3eb74:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3eb76:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3eb78:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3eb7c:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3eb80:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3eb82:	2001      	movs	r0, #1
   3eb84:	4611      	mov	r1, r2
   3eb86:	f7f5 fd5d 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!err);
   3eb8a:	b950      	cbnz	r0, 3eba2 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   3eb8c:	20ff      	movs	r0, #255	; 0xff
   3eb8e:	f7ff f83b 	bl	3dc08 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3eb92:	4620      	mov	r0, r4
   3eb94:	21ff      	movs	r1, #255	; 0xff
}
   3eb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3eb9a:	f7ff bac9 	b.w	3e130 <ull_conn_tx_lll_enqueue>
}
   3eb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3eba2:	4a10      	ldr	r2, [pc, #64]	; (3ebe4 <ull_central_ticker_cb+0xb8>)
   3eba4:	4910      	ldr	r1, [pc, #64]	; (3ebe8 <ull_central_ticker_cb+0xbc>)
   3eba6:	4811      	ldr	r0, [pc, #68]	; (3ebec <ull_central_ticker_cb+0xc0>)
   3eba8:	f240 434d 	movw	r3, #1101	; 0x44d
   3ebac:	f00b fc7b 	bl	4a4a6 <printk>
   3ebb0:	4040      	eors	r0, r0
   3ebb2:	f380 8811 	msr	BASEPRI, r0
   3ebb6:	f04f 0003 	mov.w	r0, #3
   3ebba:	df02      	svc	2
   3ebbc:	e7e6      	b.n	3eb8c <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   3ebbe:	4a09      	ldr	r2, [pc, #36]	; (3ebe4 <ull_central_ticker_cb+0xb8>)
   3ebc0:	490b      	ldr	r1, [pc, #44]	; (3ebf0 <ull_central_ticker_cb+0xc4>)
   3ebc2:	480a      	ldr	r0, [pc, #40]	; (3ebec <ull_central_ticker_cb+0xc0>)
   3ebc4:	f240 433a 	movw	r3, #1082	; 0x43a
   3ebc8:	f00b fc6d 	bl	4a4a6 <printk>
   3ebcc:	4040      	eors	r0, r0
   3ebce:	f380 8811 	msr	BASEPRI, r0
   3ebd2:	f04f 0003 	mov.w	r0, #3
   3ebd6:	df02      	svc	2
   3ebd8:	e7c0      	b.n	3eb5c <ull_central_ticker_cb+0x30>
   3ebda:	bf00      	nop
   3ebdc:	20006208 	.word	0x20006208
   3ebe0:	20000f00 	.word	0x20000f00
   3ebe4:	000558b0 	.word	0x000558b0
   3ebe8:	00055308 	.word	0x00055308
   3ebec:	0005512c 	.word	0x0005512c
   3ebf0:	000555a0 	.word	0x000555a0

0003ebf4 <ll_connect_disable>:
{
   3ebf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ebf8:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3ebfa:	2000      	movs	r0, #0
   3ebfc:	f7fa fe1e 	bl	3983c <ull_scan_is_enabled_get>
	if (!scan) {
   3ec00:	b368      	cbz	r0, 3ec5e <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   3ec02:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   3ec04:	4604      	mov	r4, r0
   3ec06:	b353      	cbz	r3, 3ec5e <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   3ec08:	f893 2020 	ldrb.w	r2, [r3, #32]
   3ec0c:	f042 0202 	orr.w	r2, r2, #2
   3ec10:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   3ec14:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   3ec16:	b317      	cbz	r7, 3ec5e <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   3ec18:	4601      	mov	r1, r0
   3ec1a:	2000      	movs	r0, #0
   3ec1c:	f7fa fd58 	bl	396d0 <ull_scan_disable>
	if (!err) {
   3ec20:	4605      	mov	r5, r0
   3ec22:	b9c8      	cbnz	r0, 3ec58 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   3ec24:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   3ec26:	f8d7 8154 	ldr.w	r8, [r7, #340]	; 0x154
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   3ec2a:	f507 79aa 	add.w	r9, r7, #340	; 0x154
		LL_ASSERT(link);
   3ec2e:	f1b8 0f00 	cmp.w	r8, #0
   3ec32:	d018      	beq.n	3ec66 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   3ec34:	4640      	mov	r0, r8
   3ec36:	f7f9 fab1 	bl	3819c <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3ec3a:	2316      	movs	r3, #22
   3ec3c:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
		node_rx->hdr.handle = 0xffff;
   3ec40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3ec44:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
		scan_lll = &scan->lll;
   3ec48:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ec4a:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   3ec4c:	f8c7 415c 	str.w	r4, [r7, #348]	; 0x15c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ec50:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
		*rx = node_rx;
   3ec54:	f8c6 9000 	str.w	r9, [r6]
}
   3ec58:	4628      	mov	r0, r5
   3ec5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3ec5e:	250c      	movs	r5, #12
}
   3ec60:	4628      	mov	r0, r5
   3ec62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   3ec66:	4a07      	ldr	r2, [pc, #28]	; (3ec84 <ll_connect_disable+0x90>)
   3ec68:	4907      	ldr	r1, [pc, #28]	; (3ec88 <ll_connect_disable+0x94>)
   3ec6a:	4808      	ldr	r0, [pc, #32]	; (3ec8c <ll_connect_disable+0x98>)
   3ec6c:	f240 235b 	movw	r3, #603	; 0x25b
   3ec70:	f00b fc19 	bl	4a4a6 <printk>
   3ec74:	4040      	eors	r0, r0
   3ec76:	f380 8811 	msr	BASEPRI, r0
   3ec7a:	f04f 0003 	mov.w	r0, #3
   3ec7e:	df02      	svc	2
   3ec80:	e7d8      	b.n	3ec34 <ll_connect_disable+0x40>
   3ec82:	bf00      	nop
   3ec84:	000558b0 	.word	0x000558b0
   3ec88:	00055694 	.word	0x00055694
   3ec8c:	0005512c 	.word	0x0005512c

0003ec90 <ll_enc_req_send>:
{
   3ec90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ec94:	4607      	mov	r7, r0
   3ec96:	4688      	mov	r8, r1
   3ec98:	4691      	mov	r9, r2
   3ec9a:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   3ec9c:	f7fb fca8 	bl	3a5f0 <ll_connected_get>
	if (!conn) {
   3eca0:	2800      	cmp	r0, #0
   3eca2:	d06a      	beq.n	3ed7a <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   3eca4:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   3eca8:	f890 3175 	ldrb.w	r3, [r0, #373]	; 0x175
   3ecac:	429a      	cmp	r2, r3
   3ecae:	4604      	mov	r4, r0
   3ecb0:	d142      	bne.n	3ed38 <ll_enc_req_send+0xa8>
   3ecb2:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3ecb6:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3ecba:	429a      	cmp	r2, r3
   3ecbc:	d003      	beq.n	3ecc6 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   3ecbe:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3ecc2:	2b03      	cmp	r3, #3
   3ecc4:	d038      	beq.n	3ed38 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   3ecc6:	f7fb fca7 	bl	3a618 <ll_tx_mem_acquire>
	if (tx) {
   3ecca:	4605      	mov	r5, r0
   3eccc:	b3a0      	cbz	r0, 3ed38 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   3ecce:	3004      	adds	r0, #4
   3ecd0:	f7ff fdd8 	bl	3e884 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   3ecd4:	4631      	mov	r1, r6
   3ecd6:	2210      	movs	r2, #16
   3ecd8:	f204 1081 	addw	r0, r4, #385	; 0x181
   3ecdc:	f00d fceb 	bl	4c6b6 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   3ece0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3ece4:	f013 0318 	ands.w	r3, r3, #24
   3ece8:	d029      	beq.n	3ed3e <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   3ecea:	2b18      	cmp	r3, #24
   3ecec:	d121      	bne.n	3ed32 <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   3ecee:	2208      	movs	r2, #8
   3ecf0:	4641      	mov	r1, r8
   3ecf2:	f204 1079 	addw	r0, r4, #377	; 0x179
   3ecf6:	f00d fcde 	bl	4c6b6 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   3ecfa:	f899 3000 	ldrb.w	r3, [r9]
   3ecfe:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
			conn->llcp_enc.ediv[1] = ediv[1];
   3ed02:	f899 3001 	ldrb.w	r3, [r9, #1]
   3ed06:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ed0a:	792b      	ldrb	r3, [r5, #4]
   3ed0c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3ed10:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ed12:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   3ed14:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3ed16:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3ed18:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   3ed1a:	4629      	mov	r1, r5
   3ed1c:	4638      	mov	r0, r7
   3ed1e:	f7fb fc87 	bl	3a630 <ll_tx_mem_enqueue>
   3ed22:	b930      	cbnz	r0, 3ed32 <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   3ed24:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   3ed28:	3301      	adds	r3, #1
   3ed2a:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   3ed2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   3ed32:	4628      	mov	r0, r5
   3ed34:	f7fb fc76 	bl	3a624 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3ed38:	200c      	movs	r0, #12
}
   3ed3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ed3e:	792b      	ldrb	r3, [r5, #4]
   3ed40:	f043 0303 	orr.w	r3, r3, #3
   3ed44:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   3ed46:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3ed48:	2208      	movs	r2, #8
			pdu_data_tx->len =
   3ed4a:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3ed4c:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3ed4e:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   3ed50:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3ed52:	18a8      	adds	r0, r5, r2
   3ed54:	f00d fcaf 	bl	4c6b6 <memcpy>
			enc_req->ediv[0] = ediv[0];
   3ed58:	f899 3000 	ldrb.w	r3, [r9]
   3ed5c:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   3ed5e:	f899 3001 	ldrb.w	r3, [r9, #1]
   3ed62:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   3ed64:	2108      	movs	r1, #8
   3ed66:	f105 0012 	add.w	r0, r5, #18
   3ed6a:	f001 fead 	bl	40ac8 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   3ed6e:	2104      	movs	r1, #4
   3ed70:	f105 001a 	add.w	r0, r5, #26
   3ed74:	f001 fea8 	bl	40ac8 <lll_csrand_get>
   3ed78:	e7cf      	b.n	3ed1a <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ed7a:	2002      	movs	r0, #2
}
   3ed7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003ed80 <ull_central_reset>:
{
   3ed80:	b530      	push	{r4, r5, lr}
   3ed82:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   3ed84:	a801      	add	r0, sp, #4
   3ed86:	f7ff ff35 	bl	3ebf4 <ll_connect_disable>
	if (!err) {
   3ed8a:	4604      	mov	r4, r0
   3ed8c:	b110      	cbz	r0, 3ed94 <ull_central_reset+0x14>
}
   3ed8e:	4620      	mov	r0, r4
   3ed90:	b003      	add	sp, #12
   3ed92:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3ed94:	f7fa fd52 	bl	3983c <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   3ed98:	4605      	mov	r5, r0
   3ed9a:	b150      	cbz	r0, 3edb2 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   3ed9c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3eda0:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   3eda2:	f36f 0300 	bfc	r3, #0, #1
}
   3eda6:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   3eda8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3edac:	622a      	str	r2, [r5, #32]
}
   3edae:	b003      	add	sp, #12
   3edb0:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   3edb2:	4a07      	ldr	r2, [pc, #28]	; (3edd0 <ull_central_reset+0x50>)
   3edb4:	4907      	ldr	r1, [pc, #28]	; (3edd4 <ull_central_reset+0x54>)
   3edb6:	4808      	ldr	r0, [pc, #32]	; (3edd8 <ull_central_reset+0x58>)
   3edb8:	f240 23e9 	movw	r3, #745	; 0x2e9
   3edbc:	f00b fb73 	bl	4a4a6 <printk>
   3edc0:	4040      	eors	r0, r0
   3edc2:	f380 8811 	msr	BASEPRI, r0
   3edc6:	f04f 0003 	mov.w	r0, #3
   3edca:	df02      	svc	2
   3edcc:	e7e6      	b.n	3ed9c <ull_central_reset+0x1c>
   3edce:	bf00      	nop
   3edd0:	000558b0 	.word	0x000558b0
   3edd4:	000558f4 	.word	0x000558f4
   3edd8:	0005512c 	.word	0x0005512c

0003eddc <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3eddc:	6883      	ldr	r3, [r0, #8]
{
   3edde:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3ede0:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   3ede2:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   3ede4:	b31c      	cbz	r4, 3ee2e <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   3ede6:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   3ede8:	2200      	movs	r2, #0
   3edea:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   3edec:	b163      	cbz	r3, 3ee08 <ull_central_cleanup+0x2c>
   3edee:	4a1e      	ldr	r2, [pc, #120]	; (3ee68 <ull_central_cleanup+0x8c>)
   3edf0:	491e      	ldr	r1, [pc, #120]	; (3ee6c <ull_central_cleanup+0x90>)
   3edf2:	481f      	ldr	r0, [pc, #124]	; (3ee70 <ull_central_cleanup+0x94>)
   3edf4:	f240 3305 	movw	r3, #773	; 0x305
   3edf8:	f00b fb55 	bl	4a4a6 <printk>
   3edfc:	4040      	eors	r0, r0
   3edfe:	f380 8811 	msr	BASEPRI, r0
   3ee02:	f04f 0003 	mov.w	r0, #3
   3ee06:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   3ee08:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   3ee0c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3ee10:	f7f5 fb9a 	bl	34548 <memq_deinit>
	LL_ASSERT(link);
   3ee14:	4606      	mov	r6, r0
   3ee16:	b1c0      	cbz	r0, 3ee4a <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   3ee18:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   3ee1a:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   3ee1c:	f7fb fbd2 	bl	3a5c4 <ll_conn_release>
	scan->is_enabled = 0U;
   3ee20:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   3ee24:	f36f 0300 	bfc	r3, #0, #1
   3ee28:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   3ee2c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   3ee2e:	4a0e      	ldr	r2, [pc, #56]	; (3ee68 <ull_central_cleanup+0x8c>)
   3ee30:	4910      	ldr	r1, [pc, #64]	; (3ee74 <ull_central_cleanup+0x98>)
   3ee32:	480f      	ldr	r0, [pc, #60]	; (3ee70 <ull_central_cleanup+0x94>)
   3ee34:	f240 3302 	movw	r3, #770	; 0x302
   3ee38:	f00b fb35 	bl	4a4a6 <printk>
   3ee3c:	4040      	eors	r0, r0
   3ee3e:	f380 8811 	msr	BASEPRI, r0
   3ee42:	f04f 0003 	mov.w	r0, #3
   3ee46:	df02      	svc	2
   3ee48:	e7cd      	b.n	3ede6 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   3ee4a:	4a07      	ldr	r2, [pc, #28]	; (3ee68 <ull_central_cleanup+0x8c>)
   3ee4c:	490a      	ldr	r1, [pc, #40]	; (3ee78 <ull_central_cleanup+0x9c>)
   3ee4e:	4808      	ldr	r0, [pc, #32]	; (3ee70 <ull_central_cleanup+0x94>)
   3ee50:	f44f 7342 	mov.w	r3, #776	; 0x308
   3ee54:	f00b fb27 	bl	4a4a6 <printk>
   3ee58:	4040      	eors	r0, r0
   3ee5a:	f380 8811 	msr	BASEPRI, r0
   3ee5e:	f04f 0003 	mov.w	r0, #3
   3ee62:	df02      	svc	2
   3ee64:	e7d8      	b.n	3ee18 <ull_central_cleanup+0x3c>
   3ee66:	bf00      	nop
   3ee68:	000558b0 	.word	0x000558b0
   3ee6c:	00055388 	.word	0x00055388
   3ee70:	0005512c 	.word	0x0005512c
   3ee74:	0005537c 	.word	0x0005537c
   3ee78:	00055694 	.word	0x00055694

0003ee7c <ull_central_chm_update>:
{
   3ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (handle--) {
   3ee7e:	2505      	movs	r5, #5
		conn->llcp_type = LLCP_CHAN_MAP;
   3ee80:	2702      	movs	r7, #2
	while (handle--) {
   3ee82:	f64f 76ff 	movw	r6, #65535	; 0xffff
		conn = ll_connected_get(handle);
   3ee86:	4628      	mov	r0, r5
   3ee88:	f7fb fbb2 	bl	3a5f0 <ll_connected_get>
		if (!conn || conn->lll.role) {
   3ee8c:	4604      	mov	r4, r0
   3ee8e:	b1c0      	cbz	r0, 3eec2 <ull_central_chm_update+0x46>
   3ee90:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3ee94:	2b00      	cmp	r3, #0
   3ee96:	db14      	blt.n	3eec2 <ull_central_chm_update+0x46>
		ret = ull_conn_llcp_req(conn);
   3ee98:	f7ff fcce 	bl	3e838 <ull_conn_llcp_req>
   3ee9c:	4603      	mov	r3, r0
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3ee9e:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
		if (ret) {
   3eea2:	b99b      	cbnz	r3, 3eecc <ull_central_chm_update+0x50>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3eea4:	f000 f9d2 	bl	3f24c <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   3eea8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3eeac:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		conn->llcp_type = LLCP_CHAN_MAP;
   3eeb0:	f884 70f2 	strb.w	r7, [r4, #242]	; 0xf2
		conn->llcp.chan_map.initiate = 1U;
   3eeb4:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   3eeb8:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   3eeba:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3eebe:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	while (handle--) {
   3eec2:	3d01      	subs	r5, #1
   3eec4:	b2ad      	uxth	r5, r5
   3eec6:	42b5      	cmp	r5, r6
   3eec8:	d1dd      	bne.n	3ee86 <ull_central_chm_update+0xa>
	return 0;
   3eeca:	2300      	movs	r3, #0
}
   3eecc:	4618      	mov	r0, r3
   3eece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003eed0 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   3eed0:	6008      	str	r0, [r1, #0]
}
   3eed2:	4770      	bx	lr

0003eed4 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3eed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eed8:	b091      	sub	sp, #68	; 0x44
   3eeda:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   3eede:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   3eee0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3eee4:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3eee6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   3eee8:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   3eeec:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   3eeee:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3eef0:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   3eef2:	da02      	bge.n	3eefa <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   3eef4:	4613      	mov	r3, r2
   3eef6:	3314      	adds	r3, #20
   3eef8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3eefa:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3eefc:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3ef00:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   3ef04:	f8df b254 	ldr.w	fp, [pc, #596]	; 3f15c <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3ef08:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   3ef0c:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3ef0e:	f8cd 9014 	str.w	r9, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   3ef12:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   3ef14:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3ef16:	4635      	mov	r5, r6
   3ef18:	e046      	b.n	3efa8 <win_offset_calc.constprop.0+0xd4>
		if (ticker_id == 0xff) {
   3ef1a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3ef1e:	28ff      	cmp	r0, #255	; 0xff
   3ef20:	d066      	beq.n	3eff0 <win_offset_calc.constprop.0+0x11c>
		if ((ticker_id_prev != 0xff) &&
   3ef22:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3ef26:	d011      	beq.n	3ef4c <win_offset_calc.constprop.0+0x78>
   3ef28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3ef2a:	4553      	cmp	r3, sl
   3ef2c:	d00e      	beq.n	3ef4c <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   3ef2e:	498c      	ldr	r1, [pc, #560]	; (3f160 <win_offset_calc.constprop.0+0x28c>)
   3ef30:	488c      	ldr	r0, [pc, #560]	; (3f164 <win_offset_calc.constprop.0+0x290>)
   3ef32:	f240 13c3 	movw	r3, #451	; 0x1c3
   3ef36:	465a      	mov	r2, fp
   3ef38:	f00b fab5 	bl	4a4a6 <printk>
   3ef3c:	4040      	eors	r0, r0
   3ef3e:	f380 8811 	msr	BASEPRI, r0
   3ef42:	f04f 0003 	mov.w	r0, #3
   3ef46:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   3ef48:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3ef4c:	1e83      	subs	r3, r0, #2
   3ef4e:	2b08      	cmp	r3, #8
   3ef50:	d827      	bhi.n	3efa2 <win_offset_calc.constprop.0+0xce>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   3ef52:	2804      	cmp	r0, #4
   3ef54:	f240 8081 	bls.w	3f05a <win_offset_calc.constprop.0+0x186>
		if (ticker_id_other != 0xff) {
   3ef58:	9b05      	ldr	r3, [sp, #20]
   3ef5a:	2bff      	cmp	r3, #255	; 0xff
   3ef5c:	d179      	bne.n	3f052 <win_offset_calc.constprop.0+0x17e>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   3ef5e:	3805      	subs	r0, #5
   3ef60:	b280      	uxth	r0, r0
   3ef62:	f7fb fb3d 	bl	3a5e0 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   3ef66:	9b07      	ldr	r3, [sp, #28]
   3ef68:	4283      	cmp	r3, r0
   3ef6a:	d01a      	beq.n	3efa2 <win_offset_calc.constprop.0+0xce>
   3ef6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3ef6e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3ef72:	2a00      	cmp	r2, #0
   3ef74:	f040 808a 	bne.w	3f08c <win_offset_calc.constprop.0+0x1b8>
   3ef78:	2b00      	cmp	r3, #0
   3ef7a:	db12      	blt.n	3efa2 <win_offset_calc.constprop.0+0xce>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3ef7c:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3ef7e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   3ef82:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3ef86:	3328      	adds	r3, #40	; 0x28
   3ef88:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3ef8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3ef8c:	681b      	ldr	r3, [r3, #0]
   3ef8e:	454b      	cmp	r3, r9
   3ef90:	f0c0 808b 	bcc.w	3f0aa <win_offset_calc.constprop.0+0x1d6>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3ef94:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   3ef96:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3ef9a:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   3ef9c:	464d      	mov	r5, r9
   3ef9e:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   3efa2:	783b      	ldrb	r3, [r7, #0]
   3efa4:	42a3      	cmp	r3, r4
   3efa6:	d95c      	bls.n	3f062 <win_offset_calc.constprop.0+0x18e>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3efa8:	ab0f      	add	r3, sp, #60	; 0x3c
   3efaa:	9302      	str	r3, [sp, #8]
   3efac:	4b6e      	ldr	r3, [pc, #440]	; (3f168 <win_offset_calc.constprop.0+0x294>)
   3efae:	9301      	str	r3, [sp, #4]
   3efb0:	ab0d      	add	r3, sp, #52	; 0x34
   3efb2:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   3efb4:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3efb6:	ab0e      	add	r3, sp, #56	; 0x38
   3efb8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3efbc:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   3efbe:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3efc0:	f7f6 fde4 	bl	35b8c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   3efc4:	2802      	cmp	r0, #2
   3efc6:	d056      	beq.n	3f076 <win_offset_calc.constprop.0+0x1a2>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   3efc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   3efca:	2b00      	cmp	r3, #0
   3efcc:	d0a5      	beq.n	3ef1a <win_offset_calc.constprop.0+0x46>
   3efce:	4967      	ldr	r1, [pc, #412]	; (3f16c <win_offset_calc.constprop.0+0x298>)
   3efd0:	4864      	ldr	r0, [pc, #400]	; (3f164 <win_offset_calc.constprop.0+0x290>)
   3efd2:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   3efd6:	465a      	mov	r2, fp
   3efd8:	f00b fa65 	bl	4a4a6 <printk>
   3efdc:	4040      	eors	r0, r0
   3efde:	f380 8811 	msr	BASEPRI, r0
   3efe2:	f04f 0003 	mov.w	r0, #3
   3efe6:	df02      	svc	2
		if (ticker_id == 0xff) {
   3efe8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3efec:	28ff      	cmp	r0, #255	; 0xff
   3efee:	d198      	bne.n	3ef22 <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3eff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3eff2:	681b      	ldr	r3, [r3, #0]
   3eff4:	429d      	cmp	r5, r3
   3eff6:	bf38      	it	cc
   3eff8:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   3effa:	783b      	ldrb	r3, [r7, #0]
   3effc:	42a3      	cmp	r3, r4
   3effe:	d926      	bls.n	3f04e <win_offset_calc.constprop.0+0x17a>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f000:	9b04      	ldr	r3, [sp, #16]
   3f002:	495b      	ldr	r1, [pc, #364]	; (3f170 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   3f004:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f006:	442b      	add	r3, r5
   3f008:	fba1 2303 	umull	r2, r3, r1, r3
   3f00c:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   3f010:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f012:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   3f016:	f240 8097 	bls.w	3f148 <win_offset_calc.constprop.0+0x274>
   3f01a:	9e04      	ldr	r6, [sp, #16]
   3f01c:	f8dd c018 	ldr.w	ip, [sp, #24]
   3f020:	e002      	b.n	3f028 <win_offset_calc.constprop.0+0x154>
   3f022:	4594      	cmp	ip, r2
   3f024:	f240 8090 	bls.w	3f148 <win_offset_calc.constprop.0+0x274>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   3f028:	eb08 0044 	add.w	r0, r8, r4, lsl #1
	dst[0] = val;
   3f02c:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   3f030:	0a12      	lsrs	r2, r2, #8
   3f032:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   3f034:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   3f036:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   3f038:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   3f03a:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f03c:	1973      	adds	r3, r6, r5
   3f03e:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   3f042:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f044:	f3c3 124f 	ubfx	r2, r3, #5, #16
   3f048:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   3f04c:	d8e9      	bhi.n	3f022 <win_offset_calc.constprop.0+0x14e>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3f04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f050:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   3f052:	703c      	strb	r4, [r7, #0]
}
   3f054:	b011      	add	sp, #68	; 0x44
   3f056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (offset_index < *offset_max);
   3f05a:	783b      	ldrb	r3, [r7, #0]
   3f05c:	9005      	str	r0, [sp, #20]
   3f05e:	42a3      	cmp	r3, r4
   3f060:	d8a2      	bhi.n	3efa8 <win_offset_calc.constprop.0+0xd4>
	if (ticker_id == 0xff) {
   3f062:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3f066:	2bff      	cmp	r3, #255	; 0xff
   3f068:	d1f3      	bne.n	3f052 <win_offset_calc.constprop.0+0x17e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3f06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f06c:	681b      	ldr	r3, [r3, #0]
   3f06e:	429d      	cmp	r5, r3
   3f070:	bf38      	it	cc
   3f072:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   3f074:	e7eb      	b.n	3f04e <win_offset_calc.constprop.0+0x17a>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3f076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3f078:	2b02      	cmp	r3, #2
   3f07a:	d1a5      	bne.n	3efc8 <win_offset_calc.constprop.0+0xf4>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   3f07c:	2102      	movs	r1, #2
   3f07e:	2000      	movs	r0, #0
   3f080:	f7f6 fdca 	bl	35c18 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3f084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3f086:	2b02      	cmp	r3, #2
   3f088:	d0f8      	beq.n	3f07c <win_offset_calc.constprop.0+0x1a8>
   3f08a:	e79d      	b.n	3efc8 <win_offset_calc.constprop.0+0xf4>
			if (conn->lll.role) {
   3f08c:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3f08e:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3f090:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
   3f094:	da4c      	bge.n	3f130 <win_offset_calc.constprop.0+0x25c>
				ticks_slot_abs_curr += ticks_slot_margin;
   3f096:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   3f09a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3f09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f09e:	681b      	ldr	r3, [r3, #0]
   3f0a0:	454b      	cmp	r3, r9
				ticks_slot_margin =
   3f0a2:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3f0a6:	f4bf af75 	bcs.w	3ef94 <win_offset_calc.constprop.0+0xc0>
				if (ticks_to_expire_prev <
   3f0aa:	429d      	cmp	r5, r3
   3f0ac:	bf38      	it	cc
   3f0ae:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   3f0b0:	783b      	ldrb	r3, [r7, #0]
   3f0b2:	42a3      	cmp	r3, r4
   3f0b4:	d931      	bls.n	3f11a <win_offset_calc.constprop.0+0x246>
					(ticks_slot_abs_prev + ticks_slot_abs +
   3f0b6:	9b04      	ldr	r3, [sp, #16]
   3f0b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3f0ba:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
   3f0be:	4413      	add	r3, r2
   3f0c0:	449a      	add	sl, r3
   3f0c2:	46b0      	mov	r8, r6
   3f0c4:	462e      	mov	r6, r5
   3f0c6:	4655      	mov	r5, sl
   3f0c8:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   3f0cc:	e013      	b.n	3f0f6 <win_offset_calc.constprop.0+0x222>
					if (offset >= conn_interval) {
   3f0ce:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   3f0d0:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
   3f0d4:	4590      	cmp	r8, r2
					ticks_to_expire_prev +=
   3f0d6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f0da:	ea4f 2018 	mov.w	r0, r8, lsr #8
						  ticks_slot_abs_prev) /
   3f0de:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   3f0e2:	d235      	bcs.n	3f150 <win_offset_calc.constprop.0+0x27c>
	dst[0] = val;
   3f0e4:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   3f0e8:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
   3f0ec:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   3f0ee:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   3f0f2:	42a3      	cmp	r3, r4
   3f0f4:	d922      	bls.n	3f13c <win_offset_calc.constprop.0+0x268>
				       (ticker_ticks_diff_get(
   3f0f6:	4631      	mov	r1, r6
   3f0f8:	4648      	mov	r0, r9
   3f0fa:	f7f6 fda7 	bl	35c4c <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   3f0fe:	9b04      	ldr	r3, [sp, #16]
   3f100:	4a1b      	ldr	r2, [pc, #108]	; (3f170 <win_offset_calc.constprop.0+0x29c>)
   3f102:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   3f104:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   3f106:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   3f10a:	fba2 2303 	umull	r2, r3, r2, r3
					offset_index++;
   3f10e:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
   3f112:	d2dc      	bcs.n	3f0ce <win_offset_calc.constprop.0+0x1fa>
   3f114:	4635      	mov	r5, r6
   3f116:	4646      	mov	r6, r8
   3f118:	46d0      	mov	r8, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   3f11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f11c:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3f11e:	9b06      	ldr	r3, [sp, #24]
   3f120:	42b3      	cmp	r3, r6
   3f122:	f63f af37 	bhi.w	3ef94 <win_offset_calc.constprop.0+0xc0>
	if (ticker_id == 0xff) {
   3f126:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3f12a:	2bff      	cmp	r3, #255	; 0xff
   3f12c:	d191      	bne.n	3f052 <win_offset_calc.constprop.0+0x17e>
   3f12e:	e75f      	b.n	3eff0 <win_offset_calc.constprop.0+0x11c>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3f130:	f101 0328 	add.w	r3, r1, #40	; 0x28
   3f134:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   3f136:	f04f 0a00 	mov.w	sl, #0
   3f13a:	e726      	b.n	3ef8a <win_offset_calc.constprop.0+0xb6>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3f13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f13e:	4635      	mov	r5, r6
   3f140:	601d      	str	r5, [r3, #0]
   3f142:	4646      	mov	r6, r8
   3f144:	46d0      	mov	r8, sl
				if (offset >= conn_interval) {
   3f146:	e725      	b.n	3ef94 <win_offset_calc.constprop.0+0xc0>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3f148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   3f14a:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   3f14c:	601d      	str	r5, [r3, #0]
   3f14e:	e780      	b.n	3f052 <win_offset_calc.constprop.0+0x17e>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3f150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f152:	2500      	movs	r5, #0
   3f154:	46d0      	mov	r8, sl
   3f156:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3f158:	e7e5      	b.n	3f126 <win_offset_calc.constprop.0+0x252>
   3f15a:	bf00      	nop
   3f15c:	000558fc 	.word	0x000558fc
   3f160:	0005518c 	.word	0x0005518c
   3f164:	0005512c 	.word	0x0005512c
   3f168:	0003eed1 	.word	0x0003eed1
   3f16c:	00055940 	.word	0x00055940
   3f170:	cccccccd 	.word	0xcccccccd

0003f174 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   3f174:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   3f176:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   3f178:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   3f17a:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   3f17c:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   3f17e:	89c0      	ldrh	r0, [r0, #14]
   3f180:	6909      	ldr	r1, [r1, #16]
   3f182:	3310      	adds	r3, #16
   3f184:	f7e9 b9b0 	b.w	284e8 <after_mstr_offset_get>

0003f188 <ull_sched_mfy_win_offset_use>:
{
   3f188:	b510      	push	{r4, lr}
   3f18a:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   3f18c:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
   3f190:	6901      	ldr	r1, [r0, #16]
   3f192:	f500 7392 	add.w	r3, r0, #292	; 0x124
   3f196:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   3f198:	f7e9 f9a6 	bl	284e8 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3f19c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   3f1a0:	4908      	ldr	r1, [pc, #32]	; (3f1c4 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   3f1a2:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3f1a6:	fba1 1303 	umull	r1, r3, r1, r3
   3f1aa:	0a9b      	lsrs	r3, r3, #10
   3f1ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   3f1b0:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   3f1b2:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   3f1b4:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   3f1b8:	2204      	movs	r2, #4
   3f1ba:	f362 0302 	bfi	r3, r2, #0, #3
   3f1be:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   3f1c2:	bd10      	pop	{r4, pc}
   3f1c4:	d1b71759 	.word	0xd1b71759

0003f1c8 <ull_sched_mfy_free_win_offset_calc>:
{
   3f1c8:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   3f1ca:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   3f1ce:	2100      	movs	r1, #0
{
   3f1d0:	b084      	sub	sp, #16
	if (conn->lll.role) {
   3f1d2:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   3f1d4:	bfbc      	itt	lt
   3f1d6:	f8d0 30ec 	ldrlt.w	r3, [r0, #236]	; 0xec
   3f1da:	f8c0 31b8 	strlt.w	r3, [r0, #440]	; 0x1b8
	uint8_t offset_max = 6U;
   3f1de:	f04f 0206 	mov.w	r2, #6
{
   3f1e2:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   3f1e4:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   3f1e8:	bfb8      	it	lt
   3f1ea:	f500 72dc 	addlt.w	r2, r0, #440	; 0x1b8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f1ee:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
	uint32_t ticks_to_offset_default = 0U;
   3f1f2:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f1f4:	f10d 010b 	add.w	r1, sp, #11
   3f1f8:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	ticks_to_offset_next = &ticks_to_offset_default;
   3f1fc:	bfa8      	it	ge
   3f1fe:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f200:	e9cd 1000 	strd	r1, r0, [sp]
   3f204:	2100      	movs	r1, #0
   3f206:	4620      	mov	r0, r4
   3f208:	f7ff fe64 	bl	3eed4 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   3f20c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3f210:	2208      	movs	r2, #8
   3f212:	f362 0303 	bfi	r3, r2, #0, #4
   3f216:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
}
   3f21a:	b004      	add	sp, #16
   3f21c:	bd10      	pop	{r4, pc}
   3f21e:	bf00      	nop

0003f220 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   3f220:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   3f222:	4c08      	ldr	r4, [pc, #32]	; (3f244 <ll_chm_update+0x24>)
   3f224:	2205      	movs	r2, #5
{
   3f226:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   3f228:	4620      	mov	r0, r4
   3f22a:	f00d fa44 	bl	4c6b6 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   3f22e:	2105      	movs	r1, #5
   3f230:	4620      	mov	r0, r4
   3f232:	f7f5 fb05 	bl	34840 <util_ones_count_get>
   3f236:	4b04      	ldr	r3, [pc, #16]	; (3f248 <ll_chm_update+0x28>)
   3f238:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   3f23a:	f7ff fe1f 	bl	3ee7c <ull_central_chm_update>
}
   3f23e:	2000      	movs	r0, #0
   3f240:	bd10      	pop	{r4, pc}
   3f242:	bf00      	nop
   3f244:	20000f10 	.word	0x20000f10
   3f248:	200011a9 	.word	0x200011a9

0003f24c <ull_chan_map_get>:
{
   3f24c:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   3f24e:	4903      	ldr	r1, [pc, #12]	; (3f25c <ull_chan_map_get+0x10>)
   3f250:	2205      	movs	r2, #5
   3f252:	f00d fa30 	bl	4c6b6 <memcpy>
	return count;
   3f256:	4b02      	ldr	r3, [pc, #8]	; (3f260 <ull_chan_map_get+0x14>)
}
   3f258:	7818      	ldrb	r0, [r3, #0]
   3f25a:	bd08      	pop	{r3, pc}
   3f25c:	20000f10 	.word	0x20000f10
   3f260:	200011a9 	.word	0x200011a9

0003f264 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3f264:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3f266:	fb02 1c01 	mla	ip, r2, r1, r1
   3f26a:	7802      	ldrb	r2, [r0, #0]
   3f26c:	491c      	ldr	r1, [pc, #112]	; (3f2e0 <lll_chan_sel_1+0x7c>)
{
   3f26e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3f272:	4494      	add	ip, r2
   3f274:	fb81 210c 	smull	r2, r1, r1, ip
   3f278:	4461      	add	r1, ip
   3f27a:	1149      	asrs	r1, r1, #5
   3f27c:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   3f280:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   3f284:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3f286:	ebac 0101 	sub.w	r1, ip, r1
   3f28a:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   3f28c:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3f28e:	08c4      	lsrs	r4, r0, #3
   3f290:	f001 0107 	and.w	r1, r1, #7
   3f294:	f813 c004 	ldrb.w	ip, [r3, r4]
   3f298:	fa4c f101 	asr.w	r1, ip, r1
   3f29c:	f011 0101 	ands.w	r1, r1, #1
   3f2a0:	d11d      	bne.n	3f2de <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   3f2a2:	fbb0 f2f5 	udiv	r2, r0, r5
   3f2a6:	fb05 0212 	mls	r2, r5, r2, r0
   3f2aa:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   3f2ac:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   3f2b0:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   3f2b2:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   3f2b4:	f100 0c08 	add.w	ip, r0, #8
   3f2b8:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3f2bc:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   3f2c0:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   3f2c4:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   3f2c8:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   3f2cc:	d002      	beq.n	3f2d4 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   3f2ce:	b132      	cbz	r2, 3f2de <lll_chan_sel_1+0x7a>
				chan_index--;
   3f2d0:	3a01      	subs	r2, #1
   3f2d2:	b2d2      	uxtb	r2, r2
			chan_next++;
   3f2d4:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   3f2d6:	4584      	cmp	ip, r0
   3f2d8:	d1f2      	bne.n	3f2c0 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   3f2da:	45a6      	cmp	lr, r4
   3f2dc:	d1ea      	bne.n	3f2b4 <lll_chan_sel_1+0x50>
}
   3f2de:	bd30      	pop	{r4, r5, pc}
   3f2e0:	dd67c8a7 	.word	0xdd67c8a7

0003f2e4 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   3f2e4:	8842      	ldrh	r2, [r0, #2]
   3f2e6:	8800      	ldrh	r0, [r0, #0]
}
   3f2e8:	4050      	eors	r0, r2
   3f2ea:	4770      	bx	lr

0003f2ec <lll_chan_sel_2>:
{
   3f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3f2ee:	4d2f      	ldr	r5, [pc, #188]	; (3f3ac <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3f2f0:	4c2f      	ldr	r4, [pc, #188]	; (3f3b0 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   3f2f2:	4048      	eors	r0, r1
   3f2f4:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3f2f8:	0a07      	lsrs	r7, r0, #8
   3f2fa:	b2c0      	uxtb	r0, r0
   3f2fc:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   3f300:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   3f304:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   3f308:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3f30c:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   3f310:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3f314:	433e      	orrs	r6, r7
   3f316:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3f31a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   3f31e:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   3f322:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   3f326:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   3f32a:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   3f32c:	f3c0 4007 	ubfx	r0, r0, #16, #8
   3f330:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3f334:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   3f338:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3f33c:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   3f33e:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3f342:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3f344:	d1d8      	bne.n	3f2f8 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   3f346:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   3f348:	481a      	ldr	r0, [pc, #104]	; (3f3b4 <lll_chan_sel_2+0xc8>)
   3f34a:	fba0 4001 	umull	r4, r0, r0, r1
   3f34e:	1a0c      	subs	r4, r1, r0
   3f350:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3f354:	0940      	lsrs	r0, r0, #5
   3f356:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   3f35a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   3f35e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3f360:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3f364:	f000 0507 	and.w	r5, r0, #7
   3f368:	5d14      	ldrb	r4, [r2, r4]
   3f36a:	412c      	asrs	r4, r5
   3f36c:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   3f36e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3f370:	d41a      	bmi.n	3f3a8 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3f372:	fb01 f303 	mul.w	r3, r1, r3
   3f376:	1e56      	subs	r6, r2, #1
   3f378:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   3f37c:	3204      	adds	r2, #4
	chan_next = 0U;
   3f37e:	4660      	mov	r0, ip
		bite = *chan_map;
   3f380:	f100 0508 	add.w	r5, r0, #8
   3f384:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   3f388:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   3f38a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   3f38e:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   3f392:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   3f396:	d002      	beq.n	3f39e <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   3f398:	b133      	cbz	r3, 3f3a8 <lll_chan_sel_2+0xbc>
				chan_index--;
   3f39a:	3b01      	subs	r3, #1
   3f39c:	b2db      	uxtb	r3, r3
			chan_next++;
   3f39e:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   3f3a0:	42a8      	cmp	r0, r5
   3f3a2:	d1f2      	bne.n	3f38a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   3f3a4:	42b2      	cmp	r2, r6
   3f3a6:	d1eb      	bne.n	3f380 <lll_chan_sel_2+0x94>
}
   3f3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3f3aa:	bf00      	nop
   3f3ac:	00022110 	.word	0x00022110
   3f3b0:	00088440 	.word	0x00088440
   3f3b4:	bacf914d 	.word	0xbacf914d

0003f3b8 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   3f3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f3bc:	4d18      	ldr	r5, [pc, #96]	; (3f420 <rl_update+0x68>)
   3f3be:	4e19      	ldr	r6, [pc, #100]	; (3f424 <rl_update+0x6c>)
   3f3c0:	2400      	movs	r4, #0
   3f3c2:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   3f3c6:	1eaf      	subs	r7, r5, #2
   3f3c8:	f04f 0801 	mov.w	r8, #1
   3f3cc:	e006      	b.n	3f3dc <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f3ce:	3401      	adds	r4, #1
   3f3d0:	2c08      	cmp	r4, #8
   3f3d2:	f105 0506 	add.w	r5, r5, #6
   3f3d6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f3da:	d01e      	beq.n	3f41a <rl_update+0x62>
		if (rl[i].taken) {
   3f3dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f3e0:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   3f3e4:	07da      	lsls	r2, r3, #31
   3f3e6:	d5f2      	bpl.n	3f3ce <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   3f3e8:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f3ea:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   3f3ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   3f3f0:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f3f4:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   3f3f6:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f3fa:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f3fc:	4631      	mov	r1, r6
   3f3fe:	4628      	mov	r0, r5
   3f400:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f402:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   3f404:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f408:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f40a:	f00d f954 	bl	4c6b6 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f40e:	2c08      	cmp	r4, #8
   3f410:	f105 0506 	add.w	r5, r5, #6
   3f414:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f418:	d1e0      	bne.n	3f3dc <rl_update+0x24>
}
   3f41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3f41e:	bf00      	nop
   3f420:	20006486 	.word	0x20006486
   3f424:	20006345 	.word	0x20006345

0003f428 <fal_update>:
{
   3f428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f42c:	4e20      	ldr	r6, [pc, #128]	; (3f4b0 <fal_update+0x88>)
   3f42e:	4d21      	ldr	r5, [pc, #132]	; (3f4b4 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3f430:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3f4b8 <fal_update+0x90>
   3f434:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3f4bc <fal_update+0x94>
{
   3f438:	2400      	movs	r4, #0
   3f43a:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   3f43e:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   3f440:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3f444:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   3f448:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f44c:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   3f44e:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f452:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   3f454:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f458:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   3f45c:	d021      	beq.n	3f4a2 <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3f45e:	f898 3000 	ldrb.w	r3, [r8]
   3f462:	b163      	cbz	r3, 3f47e <fal_update+0x56>
		j = fal[i].rl_idx;
   3f464:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3f468:	2b07      	cmp	r3, #7
   3f46a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   3f46e:	d806      	bhi.n	3f47e <fal_update+0x56>
   3f470:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   3f474:	f013 0f04 	tst.w	r3, #4
   3f478:	d001      	beq.n	3f47e <fal_update+0x56>
   3f47a:	06db      	lsls	r3, r3, #27
   3f47c:	d511      	bpl.n	3f4a2 <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3f47e:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3f482:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3f486:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   3f48a:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f48e:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3f492:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f496:	40a3      	lsls	r3, r4
   3f498:	ea4e 0303 	orr.w	r3, lr, r3
   3f49c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f49e:	f00d f90a 	bl	4c6b6 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   3f4a2:	3401      	adds	r4, #1
   3f4a4:	2c08      	cmp	r4, #8
   3f4a6:	f105 0508 	add.w	r5, r5, #8
   3f4aa:	d1c9      	bne.n	3f440 <fal_update+0x18>
}
   3f4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f4b0:	2000625a 	.word	0x2000625a
   3f4b4:	2000621a 	.word	0x2000621a
   3f4b8:	2000778d 	.word	0x2000778d
   3f4bc:	20006344 	.word	0x20006344

0003f4c0 <ll_fal_size_get>:
}
   3f4c0:	2008      	movs	r0, #8
   3f4c2:	4770      	bx	lr

0003f4c4 <ll_fal_clear>:
{
   3f4c4:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   3f4c6:	2000      	movs	r0, #0
   3f4c8:	f7f9 ffbe 	bl	39448 <ull_adv_filter_pol_get>
   3f4cc:	b9f0      	cbnz	r0, 3f50c <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3f4ce:	f7fa f9e7 	bl	398a0 <ull_scan_filter_pol_get>
   3f4d2:	f010 0001 	ands.w	r0, r0, #1
   3f4d6:	d119      	bne.n	3f50c <ll_fal_clear+0x48>
   3f4d8:	4a0d      	ldr	r2, [pc, #52]	; (3f510 <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   3f4da:	4c0e      	ldr	r4, [pc, #56]	; (3f514 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   3f4dc:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   3f4e0:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f4e2:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   3f4e4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3f4e8:	d805      	bhi.n	3f4f6 <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   3f4ea:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   3f4ee:	f36f 1345 	bfc	r3, #5, #1
   3f4f2:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   3f4f6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3f4fa:	f36f 0300 	bfc	r3, #0, #1
   3f4fe:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3f502:	3001      	adds	r0, #1
   3f504:	2808      	cmp	r0, #8
   3f506:	d1e9      	bne.n	3f4dc <ll_fal_clear+0x18>
	return 0;
   3f508:	2000      	movs	r0, #0
}
   3f50a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f50c:	200c      	movs	r0, #12
}
   3f50e:	bd10      	pop	{r4, pc}
   3f510:	20006218 	.word	0x20006218
   3f514:	20006344 	.word	0x20006344

0003f518 <ll_fal_add>:
{
   3f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f51c:	4607      	mov	r7, r0
   3f51e:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   3f520:	2000      	movs	r0, #0
   3f522:	f7f9 ff91 	bl	39448 <ull_adv_filter_pol_get>
   3f526:	2800      	cmp	r0, #0
   3f528:	d16f      	bne.n	3f60a <ll_fal_add+0xf2>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3f52a:	f7fa f9b9 	bl	398a0 <ull_scan_filter_pol_get>
   3f52e:	f010 0401 	ands.w	r4, r0, #1
   3f532:	d16a      	bne.n	3f60a <ll_fal_add+0xf2>
	if (addr->type == ADDR_TYPE_ANON) {
   3f534:	f897 a000 	ldrb.w	sl, [r7]
   3f538:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   3f53c:	d069      	beq.n	3f612 <ll_fal_add+0xfa>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3f53e:	4e41      	ldr	r6, [pc, #260]	; (3f644 <ll_fal_add+0x12c>)
   3f540:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f544:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   3f548:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3f54c:	4625      	mov	r5, r4
   3f54e:	f1a6 0802 	sub.w	r8, r6, #2
   3f552:	e009      	b.n	3f568 <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   3f554:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3f558:	d101      	bne.n	3f55e <ll_fal_add+0x46>
			*free_idx = i;
   3f55a:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   3f55e:	3501      	adds	r5, #1
   3f560:	2d08      	cmp	r5, #8
   3f562:	f106 0608 	add.w	r6, r6, #8
   3f566:	d017      	beq.n	3f598 <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f568:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3f56c:	07d8      	lsls	r0, r3, #31
   3f56e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3f572:	d5ef      	bpl.n	3f554 <ll_fal_add+0x3c>
   3f574:	4552      	cmp	r2, sl
   3f576:	d1f2      	bne.n	3f55e <ll_fal_add+0x46>
   3f578:	2206      	movs	r2, #6
   3f57a:	4630      	mov	r0, r6
   3f57c:	4659      	mov	r1, fp
   3f57e:	f00d f889 	bl	4c694 <memcmp>
   3f582:	2800      	cmp	r0, #0
   3f584:	d03e      	beq.n	3f604 <ll_fal_add+0xec>
		} else if (free_idx && !fal[i].taken &&
   3f586:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3f58a:	07d9      	lsls	r1, r3, #31
   3f58c:	d5e2      	bpl.n	3f554 <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   3f58e:	3501      	adds	r5, #1
   3f590:	2d08      	cmp	r5, #8
   3f592:	f106 0608 	add.w	r6, r6, #8
   3f596:	d1e7      	bne.n	3f568 <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   3f598:	f1b9 0f07 	cmp.w	r9, #7
   3f59c:	d83d      	bhi.n	3f61a <ll_fal_add+0x102>
	fal[i].id_addr_type = id_addr->type & 0x1;
   3f59e:	783a      	ldrb	r2, [r7, #0]
   3f5a0:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   3f5a4:	4e28      	ldr	r6, [pc, #160]	; (3f648 <ll_fal_add+0x130>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3f5a6:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   3f5a8:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3f5ac:	fb15 0009 	smlabb	r0, r5, r9, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   3f5b0:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   3f5b4:	4440      	add	r0, r8
   3f5b6:	2206      	movs	r2, #6
   3f5b8:	4659      	mov	r1, fp
   3f5ba:	f00d f87c 	bl	4c6b6 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f5be:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f5c0:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f5c2:	f003 0301 	and.w	r3, r3, #1
   3f5c6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   3f5ca:	fa5f fa84 	uxtb.w	sl, r4
   3f5ce:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   3f5d2:	f3c2 1180 	ubfx	r1, r2, #6, #1
   3f5d6:	07d2      	lsls	r2, r2, #31
   3f5d8:	f104 0401 	add.w	r4, r4, #1
   3f5dc:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   3f5e0:	d501      	bpl.n	3f5e6 <ll_fal_add+0xce>
   3f5e2:	4299      	cmp	r1, r3
   3f5e4:	d01b      	beq.n	3f61e <ll_fal_add+0x106>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f5e6:	2c08      	cmp	r4, #8
   3f5e8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f5ec:	d1eb      	bne.n	3f5c6 <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   3f5ee:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3f5f2:	22ff      	movs	r2, #255	; 0xff
   3f5f4:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   3f5f6:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   3f5fa:	f043 0301 	orr.w	r3, r3, #1
   3f5fe:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   3f602:	2000      	movs	r0, #0
}
   3f604:	b003      	add	sp, #12
   3f606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f60a:	200c      	movs	r0, #12
}
   3f60c:	b003      	add	sp, #12
   3f60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   3f612:	4620      	mov	r0, r4
}
   3f614:	b003      	add	sp, #12
   3f616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f61a:	2007      	movs	r0, #7
	return fal_add(addr);
   3f61c:	e7f2      	b.n	3f604 <ll_fal_add+0xec>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f61e:	4630      	mov	r0, r6
   3f620:	2206      	movs	r2, #6
   3f622:	4659      	mov	r1, fp
   3f624:	9301      	str	r3, [sp, #4]
   3f626:	f00d f835 	bl	4c694 <memcmp>
   3f62a:	9b01      	ldr	r3, [sp, #4]
   3f62c:	2800      	cmp	r0, #0
   3f62e:	d1da      	bne.n	3f5e6 <ll_fal_add+0xce>
		rl[j].fal = 1U;
   3f630:	5d7b      	ldrb	r3, [r7, r5]
   3f632:	f043 0320 	orr.w	r3, r3, #32
   3f636:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   3f638:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3f63c:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   3f640:	e7d9      	b.n	3f5f6 <ll_fal_add+0xde>
   3f642:	bf00      	nop
   3f644:	2000621a 	.word	0x2000621a
   3f648:	20006345 	.word	0x20006345

0003f64c <ll_fal_remove>:
{
   3f64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f650:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   3f652:	2000      	movs	r0, #0
   3f654:	f7f9 fef8 	bl	39448 <ull_adv_filter_pol_get>
   3f658:	b9f0      	cbnz	r0, 3f698 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3f65a:	f7fa f921 	bl	398a0 <ull_scan_filter_pol_get>
   3f65e:	f010 0401 	ands.w	r4, r0, #1
   3f662:	d119      	bne.n	3f698 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   3f664:	f896 8000 	ldrb.w	r8, [r6]
   3f668:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3f66c:	d035      	beq.n	3f6da <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3f66e:	4d1c      	ldr	r5, [pc, #112]	; (3f6e0 <ll_fal_remove+0x94>)
   3f670:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   3f672:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f674:	f008 0801 	and.w	r8, r8, #1
   3f678:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3f67c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3f680:	07db      	lsls	r3, r3, #31
   3f682:	d501      	bpl.n	3f688 <ll_fal_remove+0x3c>
   3f684:	4542      	cmp	r2, r8
   3f686:	d00a      	beq.n	3f69e <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   3f688:	3401      	adds	r4, #1
   3f68a:	2c08      	cmp	r4, #8
   3f68c:	f105 0508 	add.w	r5, r5, #8
   3f690:	d1f2      	bne.n	3f678 <ll_fal_remove+0x2c>
   3f692:	2002      	movs	r0, #2
}
   3f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f698:	200c      	movs	r0, #12
}
   3f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f69e:	2206      	movs	r2, #6
   3f6a0:	4628      	mov	r0, r5
   3f6a2:	4631      	mov	r1, r6
   3f6a4:	f00c fff6 	bl	4c694 <memcmp>
   3f6a8:	2800      	cmp	r0, #0
   3f6aa:	d1ed      	bne.n	3f688 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   3f6ac:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   3f6b0:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f6b2:	2b07      	cmp	r3, #7
   3f6b4:	d808      	bhi.n	3f6c8 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   3f6b6:	4a0b      	ldr	r2, [pc, #44]	; (3f6e4 <ll_fal_remove+0x98>)
   3f6b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3f6bc:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3f6c0:	f360 1145 	bfi	r1, r0, #5, #1
   3f6c4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   3f6c8:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3f6cc:	f36f 0300 	bfc	r3, #0, #1
   3f6d0:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   3f6d4:	2000      	movs	r0, #0
}
   3f6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   3f6da:	4620      	mov	r0, r4
}
   3f6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f6e0:	2000621a 	.word	0x2000621a
   3f6e4:	20006344 	.word	0x20006344

0003f6e8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f6e8:	2807      	cmp	r0, #7
{
   3f6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f6ee:	4604      	mov	r4, r0
   3f6f0:	460e      	mov	r6, r1
   3f6f2:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f6f4:	d817      	bhi.n	3f726 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   3f6f6:	4d1a      	ldr	r5, [pc, #104]	; (3f760 <ll_rl_id_addr_get+0x78>)
   3f6f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f6fc:	00a7      	lsls	r7, r4, #2
   3f6fe:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3f702:	07db      	lsls	r3, r3, #31
   3f704:	d51d      	bpl.n	3f742 <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f706:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f708:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f70a:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   3f70e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f712:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f716:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f718:	4640      	mov	r0, r8
   3f71a:	2206      	movs	r2, #6
}
   3f71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f720:	3101      	adds	r1, #1
   3f722:	f00c bfc8 	b.w	4c6b6 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f726:	4a0f      	ldr	r2, [pc, #60]	; (3f764 <ll_rl_id_addr_get+0x7c>)
   3f728:	490f      	ldr	r1, [pc, #60]	; (3f768 <ll_rl_id_addr_get+0x80>)
   3f72a:	4810      	ldr	r0, [pc, #64]	; (3f76c <ll_rl_id_addr_get+0x84>)
   3f72c:	f44f 7389 	mov.w	r3, #274	; 0x112
   3f730:	f00a feb9 	bl	4a4a6 <printk>
   3f734:	4040      	eors	r0, r0
   3f736:	f380 8811 	msr	BASEPRI, r0
   3f73a:	f04f 0003 	mov.w	r0, #3
   3f73e:	df02      	svc	2
   3f740:	e7d9      	b.n	3f6f6 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3f742:	4a08      	ldr	r2, [pc, #32]	; (3f764 <ll_rl_id_addr_get+0x7c>)
   3f744:	490a      	ldr	r1, [pc, #40]	; (3f770 <ll_rl_id_addr_get+0x88>)
   3f746:	4809      	ldr	r0, [pc, #36]	; (3f76c <ll_rl_id_addr_get+0x84>)
   3f748:	f240 1313 	movw	r3, #275	; 0x113
   3f74c:	f00a feab 	bl	4a4a6 <printk>
   3f750:	4040      	eors	r0, r0
   3f752:	f380 8811 	msr	BASEPRI, r0
   3f756:	f04f 0003 	mov.w	r0, #3
   3f75a:	df02      	svc	2
   3f75c:	e7d3      	b.n	3f706 <ll_rl_id_addr_get+0x1e>
   3f75e:	bf00      	nop
   3f760:	20006344 	.word	0x20006344
   3f764:	00055948 	.word	0x00055948
   3f768:	0005598c 	.word	0x0005598c
   3f76c:	0005512c 	.word	0x0005512c
   3f770:	00055998 	.word	0x00055998

0003f774 <ll_rl_size_get>:
   3f774:	2008      	movs	r0, #8
   3f776:	4770      	bx	lr

0003f778 <ll_rl_clear>:
{
   3f778:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f77a:	2000      	movs	r0, #0
   3f77c:	f7f9 fe58 	bl	39430 <ull_adv_is_enabled>
		? 0 : 1;
   3f780:	b108      	cbz	r0, 3f786 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f782:	200c      	movs	r0, #12
}
   3f784:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f786:	f7fa f873 	bl	39870 <ull_scan_is_enabled>
		? 0 : 1;
   3f78a:	f030 0001 	bics.w	r0, r0, #1
   3f78e:	d1f8      	bne.n	3f782 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   3f790:	4b18      	ldr	r3, [pc, #96]	; (3f7f4 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   3f792:	4c19      	ldr	r4, [pc, #100]	; (3f7f8 <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   3f794:	7819      	ldrb	r1, [r3, #0]
   3f796:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   3f79a:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   3f79c:	f360 0100 	bfi	r1, r0, #0, #1
   3f7a0:	f360 0200 	bfi	r2, r0, #0, #1
   3f7a4:	7019      	strb	r1, [r3, #0]
   3f7a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   3f7aa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   3f7ae:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   3f7b2:	f360 0100 	bfi	r1, r0, #0, #1
   3f7b6:	f360 0200 	bfi	r2, r0, #0, #1
   3f7ba:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   3f7be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   3f7c2:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   3f7c6:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   3f7ca:	f360 0100 	bfi	r1, r0, #0, #1
   3f7ce:	f360 0200 	bfi	r2, r0, #0, #1
   3f7d2:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   3f7d6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   3f7da:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   3f7de:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   3f7e2:	f360 0100 	bfi	r1, r0, #0, #1
   3f7e6:	f360 0200 	bfi	r2, r0, #0, #1
   3f7ea:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   3f7ee:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   3f7f2:	bd10      	pop	{r4, pc}
   3f7f4:	20006344 	.word	0x20006344
   3f7f8:	2000778c 	.word	0x2000778c

0003f7fc <ll_rl_remove>:
{
   3f7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f800:	b083      	sub	sp, #12
   3f802:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f804:	2000      	movs	r0, #0
{
   3f806:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f808:	f7f9 fe12 	bl	39430 <ull_adv_is_enabled>
		? 0 : 1;
   3f80c:	b118      	cbz	r0, 3f816 <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f80e:	200c      	movs	r0, #12
}
   3f810:	b003      	add	sp, #12
   3f812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f816:	f7fa f82b 	bl	39870 <ull_scan_is_enabled>
		? 0 : 1;
   3f81a:	f030 0b01 	bics.w	fp, r0, #1
   3f81e:	d1f6      	bne.n	3f80e <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f820:	9b00      	ldr	r3, [sp, #0]
   3f822:	f8df 8134 	ldr.w	r8, [pc, #308]	; 3f958 <ll_rl_remove+0x15c>
   3f826:	f813 ab01 	ldrb.w	sl, [r3], #1
   3f82a:	465c      	mov	r4, fp
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f82c:	f00a 0a01 	and.w	sl, sl, #1
   3f830:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   3f834:	461e      	mov	r6, r3
   3f836:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f83a:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   3f83e:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f842:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f846:	07db      	lsls	r3, r3, #31
   3f848:	ea4f 0984 	mov.w	r9, r4, lsl #2
   3f84c:	d501      	bpl.n	3f852 <ll_rl_remove+0x56>
   3f84e:	4552      	cmp	r2, sl
   3f850:	d008      	beq.n	3f864 <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f852:	3401      	adds	r4, #1
   3f854:	2c08      	cmp	r4, #8
   3f856:	f108 0828 	add.w	r8, r8, #40	; 0x28
   3f85a:	d1ec      	bne.n	3f836 <ll_rl_remove+0x3a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f85c:	2002      	movs	r0, #2
}
   3f85e:	b003      	add	sp, #12
   3f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f864:	4640      	mov	r0, r8
   3f866:	2206      	movs	r2, #6
   3f868:	4631      	mov	r1, r6
   3f86a:	f00c ff13 	bl	4c694 <memcmp>
   3f86e:	2800      	cmp	r0, #0
   3f870:	d1ef      	bne.n	3f852 <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   3f872:	782a      	ldrb	r2, [r5, #0]
   3f874:	0752      	lsls	r2, r2, #29
   3f876:	4633      	mov	r3, r6
   3f878:	4606      	mov	r6, r0
   3f87a:	d535      	bpl.n	3f8e8 <ll_rl_remove+0xec>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3f87c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 3f95c <ll_rl_remove+0x160>
   3f880:	f89a 8000 	ldrb.w	r8, [sl]
   3f884:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   3f888:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   3f88c:	d02a      	beq.n	3f8e4 <ll_rl_remove+0xe8>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3f88e:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   3f890:	4545      	cmp	r5, r8
   3f892:	d027      	beq.n	3f8e4 <ll_rl_remove+0xe8>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   3f894:	4832      	ldr	r0, [pc, #200]	; (3f960 <ll_rl_remove+0x164>)
   3f896:	9301      	str	r3, [sp, #4]
   3f898:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   3f89c:	2210      	movs	r2, #16
   3f89e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   3f8a2:	f00c ff08 	bl	4c6b6 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3f8a6:	482f      	ldr	r0, [pc, #188]	; (3f964 <ll_rl_remove+0x168>)
   3f8a8:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   3f8aa:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   3f8ae:	fa5f fc8b 	uxtb.w	ip, fp
   3f8b2:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   3f8b6:	f011 0f01 	tst.w	r1, #1
   3f8ba:	f10b 0b01 	add.w	fp, fp, #1
   3f8be:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   3f8c2:	d004      	beq.n	3f8ce <ll_rl_remove+0xd2>
   3f8c4:	0749      	lsls	r1, r1, #29
   3f8c6:	d502      	bpl.n	3f8ce <ll_rl_remove+0xd2>
   3f8c8:	7dc1      	ldrb	r1, [r0, #23]
   3f8ca:	4541      	cmp	r1, r8
   3f8cc:	d039      	beq.n	3f942 <ll_rl_remove+0x146>
				for (k = 0U;
   3f8ce:	f1bb 0f08 	cmp.w	fp, #8
   3f8d2:	f100 0028 	add.w	r0, r0, #40	; 0x28
   3f8d6:	d1e8      	bne.n	3f8aa <ll_rl_remove+0xae>
			peer_irk_count--;
   3f8d8:	f89a 8000 	ldrb.w	r8, [sl]
   3f8dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3f8e0:	fa5f f888 	uxtb.w	r8, r8
   3f8e4:	f88a 8000 	strb.w	r8, [sl]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3f8e8:	9a00      	ldr	r2, [sp, #0]
   3f8ea:	4d1f      	ldr	r5, [pc, #124]	; (3f968 <ll_rl_remove+0x16c>)
   3f8ec:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   3f8f0:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f8f4:	f00a 0a01 	and.w	sl, sl, #1
   3f8f8:	469b      	mov	fp, r3
   3f8fa:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   3f8fe:	07d1      	lsls	r1, r2, #31
   3f900:	f3c2 0040 	ubfx	r0, r2, #1, #1
   3f904:	d501      	bpl.n	3f90a <ll_rl_remove+0x10e>
   3f906:	4550      	cmp	r0, sl
   3f908:	d00f      	beq.n	3f92a <ll_rl_remove+0x12e>
	for (i = 0; i < FAL_SIZE; i++) {
   3f90a:	3601      	adds	r6, #1
   3f90c:	2e08      	cmp	r6, #8
   3f90e:	f105 0508 	add.w	r5, r5, #8
   3f912:	d1f2      	bne.n	3f8fa <ll_rl_remove+0xfe>
		rl[i].taken = 0U;
   3f914:	444c      	add	r4, r9
		return 0;
   3f916:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   3f918:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3f91c:	f36f 0300 	bfc	r3, #0, #1
   3f920:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   3f924:	b003      	add	sp, #12
   3f926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f92a:	2206      	movs	r2, #6
   3f92c:	4628      	mov	r0, r5
   3f92e:	4659      	mov	r1, fp
   3f930:	f00c feb0 	bl	4c694 <memcmp>
   3f934:	2800      	cmp	r0, #0
   3f936:	d1e8      	bne.n	3f90a <ll_rl_remove+0x10e>
			fal[j].rl_idx = FILTER_IDX_NONE;
   3f938:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   3f93c:	23ff      	movs	r3, #255	; 0xff
   3f93e:	7073      	strb	r3, [r6, #1]
   3f940:	e7e8      	b.n	3f914 <ll_rl_remove+0x118>
			peer_irk_count--;
   3f942:	f89a 8000 	ldrb.w	r8, [sl]
						rl[k].pirk_idx = pi;
   3f946:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   3f948:	4a08      	ldr	r2, [pc, #32]	; (3f96c <ll_rl_remove+0x170>)
			peer_irk_count--;
   3f94a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   3f94e:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   3f952:	fa5f f888 	uxtb.w	r8, r8
						break;
   3f956:	e7c5      	b.n	3f8e4 <ll_rl_remove+0xe8>
   3f958:	20006345 	.word	0x20006345
   3f95c:	2000778c 	.word	0x2000778c
   3f960:	200062c4 	.word	0x200062c4
   3f964:	20006344 	.word	0x20006344
   3f968:	2000621a 	.word	0x2000621a
   3f96c:	200062bc 	.word	0x200062bc

0003f970 <ll_rl_crpa_set>:
{
   3f970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   3f974:	795c      	ldrb	r4, [r3, #5]
   3f976:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   3f97a:	2c40      	cmp	r4, #64	; 0x40
   3f97c:	d001      	beq.n	3f982 <ll_rl_crpa_set+0x12>
}
   3f97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   3f982:	461e      	mov	r6, r3
   3f984:	460f      	mov	r7, r1
   3f986:	b301      	cbz	r1, 3f9ca <ll_rl_crpa_set+0x5a>
   3f988:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3fa2c <ll_rl_crpa_set+0xbc>
   3f98c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f98e:	f000 0a01 	and.w	sl, r0, #1
   3f992:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   3f996:	e003      	b.n	3f9a0 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f998:	2c08      	cmp	r4, #8
   3f99a:	f109 0928 	add.w	r9, r9, #40	; 0x28
   3f99e:	d0ee      	beq.n	3f97e <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f9a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f9a4:	4625      	mov	r5, r4
   3f9a6:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   3f9aa:	f3c2 1380 	ubfx	r3, r2, #6, #1
   3f9ae:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f9b0:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f9b4:	d5f0      	bpl.n	3f998 <ll_rl_crpa_set+0x28>
   3f9b6:	4553      	cmp	r3, sl
   3f9b8:	d1ee      	bne.n	3f998 <ll_rl_crpa_set+0x28>
   3f9ba:	4648      	mov	r0, r9
   3f9bc:	2206      	movs	r2, #6
   3f9be:	4639      	mov	r1, r7
   3f9c0:	f00c fe68 	bl	4c694 <memcmp>
   3f9c4:	2800      	cmp	r0, #0
   3f9c6:	d1e7      	bne.n	3f998 <ll_rl_crpa_set+0x28>
   3f9c8:	e004      	b.n	3f9d4 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   3f9ca:	2a07      	cmp	r2, #7
   3f9cc:	d8d7      	bhi.n	3f97e <ll_rl_crpa_set+0xe>
   3f9ce:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3fa30 <ll_rl_crpa_set+0xc0>
   3f9d2:	4615      	mov	r5, r2
   3f9d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   3f9d8:	00ef      	lsls	r7, r5, #3
   3f9da:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3f9de:	07db      	lsls	r3, r3, #31
   3f9e0:	d5cd      	bpl.n	3f97e <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   3f9e2:	f107 0918 	add.w	r9, r7, #24
   3f9e6:	44c1      	add	r9, r8
   3f9e8:	2206      	movs	r2, #6
   3f9ea:	4631      	mov	r1, r6
   3f9ec:	4648      	mov	r0, r9
   3f9ee:	f00c fe62 	bl	4c6b6 <memcpy>
   3f9f2:	2400      	movs	r4, #0
   3f9f4:	e001      	b.n	3f9fa <ll_rl_crpa_set+0x8a>
	defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
static void conn_rpa_update(uint8_t rl_idx)
{
	uint16_t handle;

	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3f9f6:	2c06      	cmp	r4, #6
   3f9f8:	d0c1      	beq.n	3f97e <ll_rl_crpa_set+0xe>
		struct ll_conn *conn = ll_connected_get(handle);
   3f9fa:	b2a0      	uxth	r0, r4
   3f9fc:	f7fa fdf8 	bl	3a5f0 <ll_connected_get>

		/* The RPA of the connection matches the RPA that was just
		 * resolved
		 */
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3fa00:	4603      	mov	r3, r0
   3fa02:	f100 05dd 	add.w	r5, r0, #221	; 0xdd
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3fa06:	3401      	adds	r4, #1
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3fa08:	2206      	movs	r2, #6
   3fa0a:	4649      	mov	r1, r9
   3fa0c:	4628      	mov	r0, r5
   3fa0e:	2b00      	cmp	r3, #0
   3fa10:	d0f1      	beq.n	3f9f6 <ll_rl_crpa_set+0x86>
   3fa12:	f00c fe3f 	bl	4c694 <memcmp>
   3fa16:	2800      	cmp	r0, #0
   3fa18:	d1ed      	bne.n	3f9f6 <ll_rl_crpa_set+0x86>
				    BDADDR_SIZE)) {
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3fa1a:	1c79      	adds	r1, r7, #1
   3fa1c:	4441      	add	r1, r8
   3fa1e:	4628      	mov	r0, r5
   3fa20:	2206      	movs	r2, #6
}
   3fa22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3fa26:	f00c be46 	b.w	4c6b6 <memcpy>
   3fa2a:	bf00      	nop
   3fa2c:	20006345 	.word	0x20006345
   3fa30:	20006344 	.word	0x20006344

0003fa34 <ll_rl_crpa_get>:
{
   3fa34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3fa38:	4682      	mov	sl, r0
   3fa3a:	4e1a      	ldr	r6, [pc, #104]	; (3faa4 <ll_rl_crpa_get+0x70>)
   3fa3c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3fa40:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3fa42:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fa44:	f008 0801 	and.w	r8, r8, #1
   3fa48:	1e77      	subs	r7, r6, #1
   3fa4a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fa4e:	00d5      	lsls	r5, r2, #3
   3fa50:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3fa54:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3fa58:	07db      	lsls	r3, r3, #31
   3fa5a:	f104 0401 	add.w	r4, r4, #1
   3fa5e:	d501      	bpl.n	3fa64 <ll_rl_crpa_get+0x30>
   3fa60:	4542      	cmp	r2, r8
   3fa62:	d006      	beq.n	3fa72 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fa64:	2c08      	cmp	r4, #8
   3fa66:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3fa6a:	d1ee      	bne.n	3fa4a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3fa6c:	2002      	movs	r0, #2
}
   3fa6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fa72:	4630      	mov	r0, r6
   3fa74:	2206      	movs	r2, #6
   3fa76:	4651      	mov	r1, sl
   3fa78:	f00c fe0c 	bl	4c694 <memcmp>
   3fa7c:	4683      	mov	fp, r0
   3fa7e:	2800      	cmp	r0, #0
   3fa80:	d1f0      	bne.n	3fa64 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   3fa82:	f105 0218 	add.w	r2, r5, #24
   3fa86:	4417      	add	r7, r2
   3fa88:	2106      	movs	r1, #6
   3fa8a:	4638      	mov	r0, r7
   3fa8c:	f7f4 fd4c 	bl	34528 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   3fa90:	2800      	cmp	r0, #0
   3fa92:	d0eb      	beq.n	3fa6c <ll_rl_crpa_get+0x38>
   3fa94:	2206      	movs	r2, #6
   3fa96:	4639      	mov	r1, r7
   3fa98:	4648      	mov	r0, r9
   3fa9a:	f00c fe0c 	bl	4c6b6 <memcpy>
		return 0;
   3fa9e:	4658      	mov	r0, fp
}
   3faa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3faa4:	20006345 	.word	0x20006345

0003faa8 <ll_rl_lrpa_get>:
{
   3faa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3faac:	4681      	mov	r9, r0
   3faae:	4e16      	ldr	r6, [pc, #88]	; (3fb08 <ll_rl_lrpa_get+0x60>)
   3fab0:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   3fab4:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3fab6:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fab8:	f008 0801 	and.w	r8, r8, #1
   3fabc:	1e77      	subs	r7, r6, #1
   3fabe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fac2:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   3fac6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3faca:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3face:	07db      	lsls	r3, r3, #31
   3fad0:	f104 0401 	add.w	r4, r4, #1
   3fad4:	d501      	bpl.n	3fada <ll_rl_lrpa_get+0x32>
   3fad6:	4542      	cmp	r2, r8
   3fad8:	d006      	beq.n	3fae8 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fada:	2c08      	cmp	r4, #8
   3fadc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3fae0:	d1ed      	bne.n	3fabe <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3fae2:	2002      	movs	r0, #2
}
   3fae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fae8:	4630      	mov	r0, r6
   3faea:	2206      	movs	r2, #6
   3faec:	4649      	mov	r1, r9
   3faee:	f00c fdd1 	bl	4c694 <memcmp>
   3faf2:	4683      	mov	fp, r0
   3faf4:	2800      	cmp	r0, #0
   3faf6:	d1f0      	bne.n	3fada <ll_rl_lrpa_get+0x32>
   3faf8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   3fafa:	2206      	movs	r2, #6
   3fafc:	4650      	mov	r0, sl
   3fafe:	f00c fdda 	bl	4c6b6 <memcpy>
		return 0;
   3fb02:	4658      	mov	r0, fp
}
   3fb04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fb08:	20006345 	.word	0x20006345

0003fb0c <ll_rl_enable>:
{
   3fb0c:	b510      	push	{r4, lr}
   3fb0e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fb10:	2000      	movs	r0, #0
   3fb12:	f7f9 fc8d 	bl	39430 <ull_adv_is_enabled>
		? 0 : 1;
   3fb16:	b108      	cbz	r0, 3fb1c <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3fb18:	200c      	movs	r0, #12
}
   3fb1a:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3fb1c:	f7f9 fea8 	bl	39870 <ull_scan_is_enabled>
		? 0 : 1;
   3fb20:	f030 0001 	bics.w	r0, r0, #1
   3fb24:	d1f8      	bne.n	3fb18 <ll_rl_enable+0xc>
	switch (enable) {
   3fb26:	b134      	cbz	r4, 3fb36 <ll_rl_enable+0x2a>
   3fb28:	2c01      	cmp	r4, #1
   3fb2a:	d102      	bne.n	3fb32 <ll_rl_enable+0x26>
		rl_enable = 1U;
   3fb2c:	4b04      	ldr	r3, [pc, #16]	; (3fb40 <ll_rl_enable+0x34>)
   3fb2e:	701c      	strb	r4, [r3, #0]
}
   3fb30:	bd10      	pop	{r4, pc}
	switch (enable) {
   3fb32:	2012      	movs	r0, #18
}
   3fb34:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   3fb36:	4b02      	ldr	r3, [pc, #8]	; (3fb40 <ll_rl_enable+0x34>)
   3fb38:	701c      	strb	r4, [r3, #0]
	return 0;
   3fb3a:	4620      	mov	r0, r4
}
   3fb3c:	bd10      	pop	{r4, pc}
   3fb3e:	bf00      	nop
   3fb40:	2000778d 	.word	0x2000778d

0003fb44 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   3fb44:	4b03      	ldr	r3, [pc, #12]	; (3fb54 <ll_rl_timeout_set+0x10>)
   3fb46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3fb4a:	fb02 f000 	mul.w	r0, r2, r0
   3fb4e:	6018      	str	r0, [r3, #0]
}
   3fb50:	4770      	bx	lr
   3fb52:	bf00      	nop
   3fb54:	200064b8 	.word	0x200064b8

0003fb58 <ll_priv_mode_set>:
{
   3fb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fb5c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fb5e:	2000      	movs	r0, #0
{
   3fb60:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fb62:	f7f9 fc65 	bl	39430 <ull_adv_is_enabled>
		? 0 : 1;
   3fb66:	b110      	cbz	r0, 3fb6e <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3fb68:	200c      	movs	r0, #12
}
   3fb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3fb6e:	f7f9 fe7f 	bl	39870 <ull_scan_is_enabled>
		? 0 : 1;
   3fb72:	f030 0401 	bics.w	r4, r0, #1
   3fb76:	d1f7      	bne.n	3fb68 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3fb78:	4e1a      	ldr	r6, [pc, #104]	; (3fbe4 <ll_priv_mode_set+0x8c>)
   3fb7a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fb7e:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fb80:	f009 0901 	and.w	r9, r9, #1
   3fb84:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fb88:	00d5      	lsls	r5, r2, #3
   3fb8a:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3fb8e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3fb92:	07db      	lsls	r3, r3, #31
   3fb94:	f104 0401 	add.w	r4, r4, #1
   3fb98:	d501      	bpl.n	3fb9e <ll_priv_mode_set+0x46>
   3fb9a:	454a      	cmp	r2, r9
   3fb9c:	d006      	beq.n	3fbac <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fb9e:	2c08      	cmp	r4, #8
   3fba0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3fba4:	d1ee      	bne.n	3fb84 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3fba6:	2002      	movs	r0, #2
}
   3fba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fbac:	4630      	mov	r0, r6
   3fbae:	2206      	movs	r2, #6
   3fbb0:	4651      	mov	r1, sl
   3fbb2:	f00c fd6f 	bl	4c694 <memcmp>
   3fbb6:	2800      	cmp	r0, #0
   3fbb8:	d1f1      	bne.n	3fb9e <ll_priv_mode_set+0x46>
		switch (mode) {
   3fbba:	f1b8 0f00 	cmp.w	r8, #0
   3fbbe:	d00b      	beq.n	3fbd8 <ll_priv_mode_set+0x80>
   3fbc0:	f1b8 0f01 	cmp.w	r8, #1
   3fbc4:	d105      	bne.n	3fbd2 <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   3fbc6:	5d7b      	ldrb	r3, [r7, r5]
   3fbc8:	f043 0310 	orr.w	r3, r3, #16
   3fbcc:	557b      	strb	r3, [r7, r5]
}
   3fbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   3fbd2:	2012      	movs	r0, #18
}
   3fbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   3fbd8:	5d7b      	ldrb	r3, [r7, r5]
   3fbda:	f368 1304 	bfi	r3, r8, #4, #1
   3fbde:	557b      	strb	r3, [r7, r5]
	return 0;
   3fbe0:	4640      	mov	r0, r8
			break;
   3fbe2:	e7c2      	b.n	3fb6a <ll_priv_mode_set+0x12>
   3fbe4:	20006345 	.word	0x20006345

0003fbe8 <ull_filter_reset>:
{
   3fbe8:	b4d0      	push	{r4, r6, r7}
   3fbea:	4930      	ldr	r1, [pc, #192]	; (3fcac <ull_filter_reset+0xc4>)
   3fbec:	4c30      	ldr	r4, [pc, #192]	; (3fcb0 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   3fbee:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   3fbf0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3fbf4:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   3fbf6:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   3fbf8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3fbfc:	d805      	bhi.n	3fc0a <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   3fbfe:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   3fc02:	f36f 1245 	bfc	r2, #5, #1
   3fc06:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   3fc0a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   3fc0e:	f36f 0200 	bfc	r2, #0, #1
   3fc12:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3fc16:	3301      	adds	r3, #1
   3fc18:	2b08      	cmp	r3, #8
   3fc1a:	d1e9      	bne.n	3fbf0 <ull_filter_reset+0x8>
	rl_enable = 0U;
   3fc1c:	4a25      	ldr	r2, [pc, #148]	; (3fcb4 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3fc1e:	4c26      	ldr	r4, [pc, #152]	; (3fcb8 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   3fc20:	2300      	movs	r3, #0
   3fc22:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   3fc24:	780a      	ldrb	r2, [r1, #0]
   3fc26:	f363 0200 	bfi	r2, r3, #0, #1
   3fc2a:	700a      	strb	r2, [r1, #0]
   3fc2c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   3fc30:	f363 0200 	bfi	r2, r3, #0, #1
   3fc34:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   3fc38:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   3fc3c:	f363 0200 	bfi	r2, r3, #0, #1
   3fc40:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   3fc44:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   3fc48:	f363 0200 	bfi	r2, r3, #0, #1
   3fc4c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   3fc50:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   3fc54:	f363 0200 	bfi	r2, r3, #0, #1
   3fc58:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   3fc5c:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   3fc60:	f363 0200 	bfi	r2, r3, #0, #1
   3fc64:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   3fc68:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   3fc6c:	f363 0200 	bfi	r2, r3, #0, #1
   3fc70:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   3fc74:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   3fc78:	f363 0200 	bfi	r2, r3, #0, #1
   3fc7c:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   3fc80:	4a0e      	ldr	r2, [pc, #56]	; (3fcbc <ull_filter_reset+0xd4>)
   3fc82:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   3fc84:	4b0e      	ldr	r3, [pc, #56]	; (3fcc0 <ull_filter_reset+0xd8>)
   3fc86:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3fc8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3fc8e:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3fc92:	4b0c      	ldr	r3, [pc, #48]	; (3fcc4 <ull_filter_reset+0xdc>)
   3fc94:	6023      	str	r3, [r4, #0]
	if (init) {
   3fc96:	b120      	cbz	r0, 3fca2 <ull_filter_reset+0xba>
}
   3fc98:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   3fc9a:	490b      	ldr	r1, [pc, #44]	; (3fcc8 <ull_filter_reset+0xe0>)
   3fc9c:	480b      	ldr	r0, [pc, #44]	; (3fccc <ull_filter_reset+0xe4>)
   3fc9e:	f011 be72 	b.w	51986 <k_work_init_delayable>
}
   3fca2:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   3fca4:	4809      	ldr	r0, [pc, #36]	; (3fccc <ull_filter_reset+0xe4>)
   3fca6:	f011 be7c 	b.w	519a2 <k_work_cancel_delayable>
   3fcaa:	bf00      	nop
   3fcac:	20006344 	.word	0x20006344
   3fcb0:	20006218 	.word	0x20006218
   3fcb4:	2000778d 	.word	0x2000778d
   3fcb8:	200064b8 	.word	0x200064b8
   3fcbc:	2000778c 	.word	0x2000778c
   3fcc0:	20004118 	.word	0x20004118
   3fcc4:	000dbba0 	.word	0x000dbba0
   3fcc8:	0003ff8d 	.word	0x0003ff8d
   3fccc:	20004120 	.word	0x20004120

0003fcd0 <ull_filter_lll_get>:
		return &fal_filter;
   3fcd0:	4a03      	ldr	r2, [pc, #12]	; (3fce0 <ull_filter_lll_get+0x10>)
   3fcd2:	4b04      	ldr	r3, [pc, #16]	; (3fce4 <ull_filter_lll_get+0x14>)
}
   3fcd4:	2800      	cmp	r0, #0
   3fcd6:	bf0c      	ite	eq
   3fcd8:	4610      	moveq	r0, r2
   3fcda:	4618      	movne	r0, r3
   3fcdc:	4770      	bx	lr
   3fcde:	bf00      	nop
   3fce0:	20006484 	.word	0x20006484
   3fce4:	20006258 	.word	0x20006258

0003fce8 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   3fce8:	b1a8      	cbz	r0, 3fd16 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3fcea:	4a0c      	ldr	r2, [pc, #48]	; (3fd1c <ull_filter_adv_scan_state_cb+0x34>)
   3fcec:	6812      	ldr	r2, [r2, #0]
{
   3fcee:	b510      	push	{r4, lr}
   3fcf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3fcf4:	f240 30e7 	movw	r0, #999	; 0x3e7
   3fcf8:	2100      	movs	r1, #0
   3fcfa:	fbe2 0103 	umlal	r0, r1, r2, r3
   3fcfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3fd02:	2300      	movs	r3, #0
   3fd04:	f7e6 f9fc 	bl	26100 <__aeabi_uldivmod>
}
   3fd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3fd0c:	4602      	mov	r2, r0
   3fd0e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3fd10:	4803      	ldr	r0, [pc, #12]	; (3fd20 <ull_filter_adv_scan_state_cb+0x38>)
   3fd12:	f008 bfa1 	b.w	48c58 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   3fd16:	4802      	ldr	r0, [pc, #8]	; (3fd20 <ull_filter_adv_scan_state_cb+0x38>)
   3fd18:	f011 be43 	b.w	519a2 <k_work_cancel_delayable>
   3fd1c:	200064b8 	.word	0x200064b8
   3fd20:	20004120 	.word	0x20004120

0003fd24 <ull_filter_adv_update>:
	filter->enable_bitmask = 0;
   3fd24:	4a0d      	ldr	r2, [pc, #52]	; (3fd5c <ull_filter_adv_update+0x38>)
{
   3fd26:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3fd28:	2300      	movs	r3, #0
   3fd2a:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   3fd2c:	b970      	cbnz	r0, 3fd4c <ull_filter_adv_update+0x28>
	if (rl_enable &&
   3fd2e:	4b0c      	ldr	r3, [pc, #48]	; (3fd60 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   3fd30:	4a0c      	ldr	r2, [pc, #48]	; (3fd64 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   3fd32:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3fd34:	2000      	movs	r0, #0
   3fd36:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3fd38:	b903      	cbnz	r3, 3fd3c <ull_filter_adv_update+0x18>
}
   3fd3a:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   3fd3c:	f7f9 fd98 	bl	39870 <ull_scan_is_enabled>
	if (rl_enable &&
   3fd40:	2800      	cmp	r0, #0
   3fd42:	d1fa      	bne.n	3fd3a <ull_filter_adv_update+0x16>
}
   3fd44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3fd48:	f7ff bb36 	b.w	3f3b8 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   3fd4c:	4618      	mov	r0, r3
   3fd4e:	f7f9 fda7 	bl	398a0 <ull_scan_filter_pol_get>
	if (adv_fp &&
   3fd52:	07c3      	lsls	r3, r0, #31
   3fd54:	d4eb      	bmi.n	3fd2e <ull_filter_adv_update+0xa>
		fal_update();
   3fd56:	f7ff fb67 	bl	3f428 <fal_update>
   3fd5a:	e7e8      	b.n	3fd2e <ull_filter_adv_update+0xa>
   3fd5c:	20006258 	.word	0x20006258
   3fd60:	2000778d 	.word	0x2000778d
   3fd64:	20006484 	.word	0x20006484

0003fd68 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   3fd68:	4a0e      	ldr	r2, [pc, #56]	; (3fda4 <ull_filter_scan_update+0x3c>)
{
   3fd6a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3fd6c:	2300      	movs	r3, #0
   3fd6e:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   3fd70:	07c2      	lsls	r2, r0, #31
   3fd72:	d40e      	bmi.n	3fd92 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   3fd74:	4b0c      	ldr	r3, [pc, #48]	; (3fda8 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   3fd76:	4a0d      	ldr	r2, [pc, #52]	; (3fdac <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   3fd78:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3fd7a:	2000      	movs	r0, #0
   3fd7c:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3fd7e:	b903      	cbnz	r3, 3fd82 <ull_filter_scan_update+0x1a>
}
   3fd80:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   3fd82:	f7f9 fb55 	bl	39430 <ull_adv_is_enabled>
	if (rl_enable &&
   3fd86:	2800      	cmp	r0, #0
   3fd88:	d1fa      	bne.n	3fd80 <ull_filter_scan_update+0x18>
}
   3fd8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3fd8e:	f7ff bb13 	b.w	3f3b8 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   3fd92:	4618      	mov	r0, r3
   3fd94:	f7f9 fb58 	bl	39448 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   3fd98:	2800      	cmp	r0, #0
   3fd9a:	d1eb      	bne.n	3fd74 <ull_filter_scan_update+0xc>
		fal_update();
   3fd9c:	f7ff fb44 	bl	3f428 <fal_update>
   3fda0:	e7e8      	b.n	3fd74 <ull_filter_scan_update+0xc>
   3fda2:	bf00      	nop
   3fda4:	20006258 	.word	0x20006258
   3fda8:	2000778d 	.word	0x2000778d
   3fdac:	20006484 	.word	0x20006484

0003fdb0 <ull_filter_rpa_update>:
{
   3fdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fdb4:	4683      	mov	fp, r0
   3fdb6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   3fdb8:	f011 ff88 	bl	51ccc <z_impl_k_uptime_ticks>
   3fdbc:	014b      	lsls	r3, r1, #5
   3fdbe:	0142      	lsls	r2, r0, #5
   3fdc0:	1a12      	subs	r2, r2, r0
   3fdc2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   3fdc6:	eb63 0301 	sbc.w	r3, r3, r1
   3fdca:	009b      	lsls	r3, r3, #2
   3fdcc:	ea4f 0982 	mov.w	r9, r2, lsl #2
   3fdd0:	eb19 0900 	adds.w	r9, r9, r0
   3fdd4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   3fdd8:	eb41 0103 	adc.w	r1, r1, r3
   3fddc:	00cb      	lsls	r3, r1, #3
   3fdde:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   3fde2:	0bd9      	lsrs	r1, r3, #15
   3fde4:	f3c9 3910 	ubfx	r9, r9, #12, #17
   3fde8:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   3fdec:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   3fdee:	f1bb 0f00 	cmp.w	fp, #0
   3fdf2:	d117      	bne.n	3fe24 <ull_filter_rpa_update+0x74>
   3fdf4:	4a5d      	ldr	r2, [pc, #372]	; (3ff6c <ull_filter_rpa_update+0x1bc>)
   3fdf6:	e9d2 3200 	ldrd	r3, r2, [r2]
   3fdfa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3fdfe:	bf08      	it	eq
   3fe00:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   3fe04:	d00e      	beq.n	3fe24 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   3fe06:	ebb9 0303 	subs.w	r3, r9, r3
   3fe0a:	eb61 0202 	sbc.w	r2, r1, r2
   3fe0e:	4958      	ldr	r1, [pc, #352]	; (3ff70 <ull_filter_rpa_update+0x1c0>)
   3fe10:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   3fe12:	428b      	cmp	r3, r1
   3fe14:	f172 0300 	sbcs.w	r3, r2, #0
   3fe18:	bfac      	ite	ge
   3fe1a:	f04f 0a01 	movge.w	sl, #1
   3fe1e:	f04f 0a00 	movlt.w	sl, #0
   3fe22:	e001      	b.n	3fe28 <ull_filter_rpa_update+0x78>
   3fe24:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fe28:	4e52      	ldr	r6, [pc, #328]	; (3ff74 <ull_filter_rpa_update+0x1c4>)
   3fe2a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 3ff78 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   3fe2e:	2400      	movs	r4, #0
   3fe30:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   3fe34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3fe38:	00a5      	lsls	r5, r4, #2
   3fe3a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3fe3e:	07da      	lsls	r2, r3, #31
   3fe40:	d515      	bpl.n	3fe6e <ull_filter_rpa_update+0xbe>
   3fe42:	f1ba 0f00 	cmp.w	sl, #0
   3fe46:	d101      	bne.n	3fe4c <ull_filter_rpa_update+0x9c>
   3fe48:	0798      	lsls	r0, r3, #30
   3fe4a:	d410      	bmi.n	3fe6e <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   3fe4c:	192b      	adds	r3, r5, r4
   3fe4e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3fe52:	0759      	lsls	r1, r3, #29
   3fe54:	d432      	bmi.n	3febc <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   3fe56:	192b      	adds	r3, r5, r4
   3fe58:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3fe5c:	071a      	lsls	r2, r3, #28
   3fe5e:	d41b      	bmi.n	3fe98 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   3fe60:	4425      	add	r5, r4
   3fe62:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   3fe66:	f043 0302 	orr.w	r3, r3, #2
   3fe6a:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fe6e:	3401      	adds	r4, #1
   3fe70:	2c08      	cmp	r4, #8
   3fe72:	f108 0806 	add.w	r8, r8, #6
   3fe76:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3fe7a:	d1db      	bne.n	3fe34 <ull_filter_rpa_update+0x84>
	if (all) {
   3fe7c:	f1ba 0f00 	cmp.w	sl, #0
   3fe80:	d004      	beq.n	3fe8c <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   3fe82:	4b3a      	ldr	r3, [pc, #232]	; (3ff6c <ull_filter_rpa_update+0x1bc>)
   3fe84:	9a01      	ldr	r2, [sp, #4]
   3fe86:	f8c3 9000 	str.w	r9, [r3]
   3fe8a:	605a      	str	r2, [r3, #4]
	if (timeout) {
   3fe8c:	f1bb 0f00 	cmp.w	fp, #0
   3fe90:	d138      	bne.n	3ff04 <ull_filter_rpa_update+0x154>
}
   3fe92:	b007      	add	sp, #28
   3fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   3fe98:	a902      	add	r1, sp, #8
   3fe9a:	f1a6 0017 	sub.w	r0, r6, #23
   3fe9e:	f00c fc79 	bl	4c794 <bt_rpa_create>
				LL_ASSERT(!err);
   3fea2:	2800      	cmp	r0, #0
   3fea4:	d154      	bne.n	3ff50 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   3fea6:	ab02      	add	r3, sp, #8
   3fea8:	f8c6 3006 	str.w	r3, [r6, #6]
   3feac:	4619      	mov	r1, r3
   3feae:	2206      	movs	r2, #6
   3feb0:	4640      	mov	r0, r8
   3feb2:	f00c fc00 	bl	4c6b6 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   3feb6:	f8c6 8006 	str.w	r8, [r6, #6]
   3feba:	e7d1      	b.n	3fe60 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   3febc:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   3fec0:	4a2e      	ldr	r2, [pc, #184]	; (3ff7c <ull_filter_rpa_update+0x1cc>)
   3fec2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   3fec6:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   3fec8:	f10d 0307 	add.w	r3, sp, #7
   3fecc:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   3fed0:	f812 1901 	ldrb.w	r1, [r2], #-1
   3fed4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   3fed8:	4283      	cmp	r3, r0
   3feda:	d1f9      	bne.n	3fed0 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   3fedc:	4631      	mov	r1, r6
   3fede:	a802      	add	r0, sp, #8
   3fee0:	f00c fc58 	bl	4c794 <bt_rpa_create>
				LL_ASSERT(!err);
   3fee4:	2800      	cmp	r0, #0
   3fee6:	d0b6      	beq.n	3fe56 <ull_filter_rpa_update+0xa6>
   3fee8:	4a25      	ldr	r2, [pc, #148]	; (3ff80 <ull_filter_rpa_update+0x1d0>)
   3feea:	4926      	ldr	r1, [pc, #152]	; (3ff84 <ull_filter_rpa_update+0x1d4>)
   3feec:	4826      	ldr	r0, [pc, #152]	; (3ff88 <ull_filter_rpa_update+0x1d8>)
   3feee:	f240 23eb 	movw	r3, #747	; 0x2eb
   3fef2:	f00a fad8 	bl	4a4a6 <printk>
   3fef6:	4040      	eors	r0, r0
   3fef8:	f380 8811 	msr	BASEPRI, r0
   3fefc:	f04f 0003 	mov.w	r0, #3
   3ff00:	df02      	svc	2
   3ff02:	e7a8      	b.n	3fe56 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   3ff04:	2000      	movs	r0, #0
   3ff06:	f7f9 fa85 	bl	39414 <ull_adv_is_enabled_get>
		if (adv) {
   3ff0a:	4604      	mov	r4, r0
   3ff0c:	2800      	cmp	r0, #0
   3ff0e:	d0c0      	beq.n	3fe92 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   3ff10:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   3ff14:	075b      	lsls	r3, r3, #29
   3ff16:	d5bc      	bpl.n	3fe92 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   3ff18:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   3ff1c:	2b07      	cmp	r3, #7
   3ff1e:	d8b8      	bhi.n	3fe92 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3ff20:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3ff24:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3ff28:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3ff2a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3ff2c:	3028      	adds	r0, #40	; 0x28
   3ff2e:	f001 fabb 	bl	414a8 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   3ff32:	7872      	ldrb	r2, [r6, #1]
   3ff34:	4605      	mov	r5, r0
   3ff36:	3202      	adds	r2, #2
   3ff38:	4631      	mov	r1, r6
   3ff3a:	f00c fbbc 	bl	4c6b6 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   3ff3e:	4629      	mov	r1, r5
   3ff40:	4620      	mov	r0, r4
   3ff42:	f7f9 fa91 	bl	39468 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   3ff46:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3ff4a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   3ff4e:	e7a0      	b.n	3fe92 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   3ff50:	4a0b      	ldr	r2, [pc, #44]	; (3ff80 <ull_filter_rpa_update+0x1d0>)
   3ff52:	490c      	ldr	r1, [pc, #48]	; (3ff84 <ull_filter_rpa_update+0x1d4>)
   3ff54:	480c      	ldr	r0, [pc, #48]	; (3ff88 <ull_filter_rpa_update+0x1d8>)
   3ff56:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   3ff5a:	f00a faa4 	bl	4a4a6 <printk>
   3ff5e:	4040      	eors	r0, r0
   3ff60:	f380 8811 	msr	BASEPRI, r0
   3ff64:	f04f 0003 	mov.w	r0, #3
   3ff68:	df02      	svc	2
   3ff6a:	e79c      	b.n	3fea6 <ull_filter_rpa_update+0xf6>
   3ff6c:	20004118 	.word	0x20004118
   3ff70:	200064b8 	.word	0x200064b8
   3ff74:	20006362 	.word	0x20006362
   3ff78:	2000628c 	.word	0x2000628c
   3ff7c:	200062c4 	.word	0x200062c4
   3ff80:	00055948 	.word	0x00055948
   3ff84:	00055308 	.word	0x00055308
   3ff88:	0005512c 	.word	0x0005512c

0003ff8c <rpa_timeout>:
{
   3ff8c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   3ff8e:	2001      	movs	r0, #1
   3ff90:	f7ff ff0e 	bl	3fdb0 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3ff94:	4a0a      	ldr	r2, [pc, #40]	; (3ffc0 <rpa_timeout+0x34>)
   3ff96:	6812      	ldr	r2, [r2, #0]
   3ff98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3ff9c:	f240 30e7 	movw	r0, #999	; 0x3e7
   3ffa0:	2100      	movs	r1, #0
   3ffa2:	fbe2 0103 	umlal	r0, r1, r2, r3
   3ffa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3ffaa:	2300      	movs	r3, #0
   3ffac:	f7e6 f8a8 	bl	26100 <__aeabi_uldivmod>
}
   3ffb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ffb4:	4602      	mov	r2, r0
   3ffb6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3ffb8:	4802      	ldr	r0, [pc, #8]	; (3ffc4 <rpa_timeout+0x38>)
   3ffba:	f008 be4d 	b.w	48c58 <k_work_schedule>
   3ffbe:	bf00      	nop
   3ffc0:	200064b8 	.word	0x200064b8
   3ffc4:	20004120 	.word	0x20004120

0003ffc8 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3ffc8:	2807      	cmp	r0, #7
   3ffca:	d813      	bhi.n	3fff4 <ull_filter_adva_get+0x2c>
{
   3ffcc:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3ffce:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3ffd2:	4d10      	ldr	r5, [pc, #64]	; (40014 <ull_filter_adva_get+0x4c>)
   3ffd4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3ffd8:	071a      	lsls	r2, r3, #28
   3ffda:	4604      	mov	r4, r0
   3ffdc:	ea4f 0680 	mov.w	r6, r0, lsl #2
   3ffe0:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3ffe4:	d505      	bpl.n	3fff2 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3ffe6:	079b      	lsls	r3, r3, #30
   3ffe8:	d506      	bpl.n	3fff8 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   3ffea:	4434      	add	r4, r6
   3ffec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3fff0:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   3fff2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   3fff4:	2000      	movs	r0, #0
}
   3fff6:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3fff8:	4a07      	ldr	r2, [pc, #28]	; (40018 <ull_filter_adva_get+0x50>)
   3fffa:	4908      	ldr	r1, [pc, #32]	; (4001c <ull_filter_adva_get+0x54>)
   3fffc:	4808      	ldr	r0, [pc, #32]	; (40020 <ull_filter_adva_get+0x58>)
   3fffe:	f44f 7347 	mov.w	r3, #796	; 0x31c
   40002:	f00a fa50 	bl	4a4a6 <printk>
   40006:	4040      	eors	r0, r0
   40008:	f380 8811 	msr	BASEPRI, r0
   4000c:	f04f 0003 	mov.w	r0, #3
   40010:	df02      	svc	2
   40012:	e7ea      	b.n	3ffea <ull_filter_adva_get+0x22>
   40014:	20006344 	.word	0x20006344
   40018:	00055948 	.word	0x00055948
   4001c:	000559ac 	.word	0x000559ac
   40020:	0005512c 	.word	0x0005512c

00040024 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   40024:	2807      	cmp	r0, #7
   40026:	d80b      	bhi.n	40040 <ull_filter_tgta_get+0x1c>
   40028:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   4002c:	4a05      	ldr	r2, [pc, #20]	; (40044 <ull_filter_tgta_get+0x20>)
   4002e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   40032:	074b      	lsls	r3, r1, #29
   40034:	d504      	bpl.n	40040 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   40036:	2328      	movs	r3, #40	; 0x28
   40038:	fb03 2000 	mla	r0, r3, r0, r2
   4003c:	301e      	adds	r0, #30
   4003e:	4770      	bx	lr
	return NULL;
   40040:	2000      	movs	r0, #0
   40042:	4770      	bx	lr
   40044:	20006344 	.word	0x20006344

00040048 <ull_filter_rl_find>:
{
   40048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4004c:	468b      	mov	fp, r1
	if (free_idx) {
   4004e:	4617      	mov	r7, r2
   40050:	b10a      	cbz	r2, 40056 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   40052:	23ff      	movs	r3, #255	; 0xff
   40054:	7013      	strb	r3, [r2, #0]
   40056:	4d1b      	ldr	r5, [pc, #108]	; (400c4 <ull_filter_rl_find+0x7c>)
{
   40058:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   4005a:	f000 0a01 	and.w	sl, r0, #1
   4005e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   40062:	e006      	b.n	40072 <ull_filter_rl_find+0x2a>
   40064:	4552      	cmp	r2, sl
   40066:	d01f      	beq.n	400a8 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   40068:	3401      	adds	r4, #1
   4006a:	2c08      	cmp	r4, #8
   4006c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   40070:	d015      	beq.n	4009e <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   40072:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   40076:	fa5f f884 	uxtb.w	r8, r4
   4007a:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   4007e:	07d9      	lsls	r1, r3, #31
   40080:	f3c3 1280 	ubfx	r2, r3, #6, #1
   40084:	d4ee      	bmi.n	40064 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   40086:	2f00      	cmp	r7, #0
   40088:	d0ee      	beq.n	40068 <ull_filter_rl_find+0x20>
   4008a:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   4008c:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   4008e:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   40090:	bf08      	it	eq
   40092:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   40096:	2c08      	cmp	r4, #8
   40098:	f105 0528 	add.w	r5, r5, #40	; 0x28
   4009c:	d1e9      	bne.n	40072 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   4009e:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   400a2:	4640      	mov	r0, r8
   400a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   400a8:	4628      	mov	r0, r5
   400aa:	2206      	movs	r2, #6
   400ac:	4659      	mov	r1, fp
   400ae:	f00c faf1 	bl	4c694 <memcmp>
   400b2:	2800      	cmp	r0, #0
   400b4:	d0f5      	beq.n	400a2 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   400b6:	2f00      	cmp	r7, #0
   400b8:	d0d6      	beq.n	40068 <ull_filter_rl_find+0x20>
   400ba:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   400be:	07db      	lsls	r3, r3, #31
   400c0:	d4d2      	bmi.n	40068 <ull_filter_rl_find+0x20>
   400c2:	e7e2      	b.n	4008a <ull_filter_rl_find+0x42>
   400c4:	20006345 	.word	0x20006345

000400c8 <ll_rl_add>:
{
   400c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   400cc:	4680      	mov	r8, r0
   400ce:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   400d0:	2000      	movs	r0, #0
{
   400d2:	460e      	mov	r6, r1
   400d4:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   400d6:	f7f9 f9ab 	bl	39430 <ull_adv_is_enabled>
		? 0 : 1;
   400da:	b118      	cbz	r0, 400e4 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   400dc:	200c      	movs	r0, #12
}
   400de:	b005      	add	sp, #20
   400e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   400e4:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   400e6:	f7f9 fbc3 	bl	39870 <ull_scan_is_enabled>
		? 0 : 1;
   400ea:	f030 0301 	bics.w	r3, r0, #1
   400ee:	d1f5      	bne.n	400dc <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   400f0:	46c2      	mov	sl, r8
   400f2:	f10d 020f 	add.w	r2, sp, #15
   400f6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   400fa:	4651      	mov	r1, sl
   400fc:	f7ff ffa4 	bl	40048 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   40100:	2807      	cmp	r0, #7
   40102:	f240 80b1 	bls.w	40268 <ll_rl_add+0x1a0>
	} else if (j >= ARRAY_SIZE(rl)) {
   40106:	f89d 700f 	ldrb.w	r7, [sp, #15]
   4010a:	2f07      	cmp	r7, #7
   4010c:	f200 80a8 	bhi.w	40260 <ll_rl_add+0x198>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   40110:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   40114:	4d56      	ldr	r5, [pc, #344]	; (40270 <ll_rl_add+0x1a8>)
   40116:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   4011a:	1c58      	adds	r0, r3, #1
   4011c:	2206      	movs	r2, #6
   4011e:	4651      	mov	r1, sl
   40120:	4428      	add	r0, r5
   40122:	9300      	str	r3, [sp, #0]
   40124:	f00c fac7 	bl	4c6b6 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   40128:	f898 3000 	ldrb.w	r3, [r8]
   4012c:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   40130:	465a      	mov	r2, fp
   40132:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   40136:	f363 1186 	bfi	r1, r3, #6, #1
   4013a:	f805 100b 	strb.w	r1, [r5, fp]
   4013e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   40142:	2110      	movs	r1, #16
   40144:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   40146:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   40148:	f7f4 f9ee 	bl	34528 <mem_nz>
   4014c:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   40150:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   40152:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   40156:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   40158:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   4015c:	f7f4 f9e4 	bl	34528 <mem_nz>
   40160:	f815 200b 	ldrb.w	r2, [r5, fp]
   40164:	f000 0001 	and.w	r0, r0, #1
   40168:	f360 02c3 	bfi	r2, r0, #3, #1
   4016c:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   40170:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   40172:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   40176:	d44b      	bmi.n	40210 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   40178:	2800      	cmp	r0, #0
   4017a:	d163      	bne.n	40244 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   4017c:	9800      	ldr	r0, [sp, #0]
   4017e:	4e3d      	ldr	r6, [pc, #244]	; (40274 <ll_rl_add+0x1ac>)
   40180:	3018      	adds	r0, #24
   40182:	2206      	movs	r2, #6
   40184:	2100      	movs	r1, #0
   40186:	4428      	add	r0, r5
   40188:	f00c faa0 	bl	4c6cc <memset>
	rl[i].dev = 0U;
   4018c:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   40190:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   40194:	f021 0112 	bic.w	r1, r1, #18
   40198:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   4019c:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   401a0:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   401a4:	f009 0901 	and.w	r9, r9, #1
   401a8:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   401ac:	07d3      	lsls	r3, r2, #31
   401ae:	f3c2 0140 	ubfx	r1, r2, #1, #1
   401b2:	d501      	bpl.n	401b8 <ll_rl_add+0xf0>
   401b4:	4549      	cmp	r1, r9
   401b6:	d018      	beq.n	401ea <ll_rl_add+0x122>
	for (i = 0; i < FAL_SIZE; i++) {
   401b8:	3401      	adds	r4, #1
   401ba:	2c08      	cmp	r4, #8
   401bc:	f106 0608 	add.w	r6, r6, #8
   401c0:	d1f2      	bne.n	401a8 <ll_rl_add+0xe0>
		rl[i].fal = 0U;
   401c2:	eb0b 0207 	add.w	r2, fp, r7
   401c6:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   401ca:	f36f 1145 	bfc	r1, #5, #1
   401ce:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   401d2:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   401d6:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   401d8:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   401dc:	f042 0201 	orr.w	r2, r2, #1
   401e0:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   401e4:	b005      	add	sp, #20
   401e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   401ea:	2206      	movs	r2, #6
   401ec:	4630      	mov	r0, r6
   401ee:	4651      	mov	r1, sl
   401f0:	f00c fa50 	bl	4c694 <memcmp>
   401f4:	2800      	cmp	r0, #0
   401f6:	d1df      	bne.n	401b8 <ll_rl_add+0xf0>
		rl[i].fal = 1U;
   401f8:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   401fc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   40200:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   40204:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   40206:	f041 0120 	orr.w	r1, r1, #32
   4020a:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   4020e:	e7e0      	b.n	401d2 <ll_rl_add+0x10a>
		rl[i].pirk_idx = peer_irk_count;
   40210:	4b19      	ldr	r3, [pc, #100]	; (40278 <ll_rl_add+0x1b0>)
		peer_irk_rl_ids[peer_irk_count] = i;
   40212:	4a1a      	ldr	r2, [pc, #104]	; (4027c <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   40214:	7819      	ldrb	r1, [r3, #0]
   40216:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   4021a:	5457      	strb	r7, [r2, r1]
   4021c:	4a18      	ldr	r2, [pc, #96]	; (40280 <ll_rl_add+0x1b8>)
		rl[i].pirk_idx = peer_irk_count;
   4021e:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   40222:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   40226:	3101      	adds	r1, #1
	psrc += length - 1;
   40228:	f106 020f 	add.w	r2, r6, #15
   4022c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   4022e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   40232:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   40234:	f812 1901 	ldrb.w	r1, [r2], #-1
   40238:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   4023c:	4296      	cmp	r6, r2
   4023e:	d1f9      	bne.n	40234 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   40240:	2800      	cmp	r0, #0
   40242:	d09b      	beq.n	4017c <ll_rl_add+0xb4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   40244:	9b00      	ldr	r3, [sp, #0]
   40246:	1dd8      	adds	r0, r3, #7
   40248:	4649      	mov	r1, r9
   4024a:	2210      	movs	r2, #16
   4024c:	4428      	add	r0, r5
   4024e:	f00c fa32 	bl	4c6b6 <memcpy>
		rl[i].local_rpa = NULL;
   40252:	eb0b 0207 	add.w	r2, fp, r7
   40256:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   4025a:	2100      	movs	r1, #0
   4025c:	6251      	str	r1, [r2, #36]	; 0x24
   4025e:	e78d      	b.n	4017c <ll_rl_add+0xb4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   40260:	2007      	movs	r0, #7
}
   40262:	b005      	add	sp, #20
   40264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   40268:	2012      	movs	r0, #18
}
   4026a:	b005      	add	sp, #20
   4026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40270:	20006344 	.word	0x20006344
   40274:	2000621a 	.word	0x2000621a
   40278:	2000778c 	.word	0x2000778c
   4027c:	200062bc 	.word	0x200062bc
   40280:	200062c4 	.word	0x200062c4

00040284 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   40284:	2807      	cmp	r0, #7
   40286:	d807      	bhi.n	40298 <ull_filter_lll_lrpa_used+0x14>
   40288:	4b04      	ldr	r3, [pc, #16]	; (4029c <ull_filter_lll_lrpa_used+0x18>)
   4028a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   4028e:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   40292:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   40296:	4770      	bx	lr
   40298:	2000      	movs	r0, #0
}
   4029a:	4770      	bx	lr
   4029c:	20006344 	.word	0x20006344

000402a0 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   402a0:	2807      	cmp	r0, #7
   402a2:	d812      	bhi.n	402ca <ull_filter_lll_lrpa_get+0x2a>
   402a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   402a8:	4a09      	ldr	r2, [pc, #36]	; (402d0 <ull_filter_lll_lrpa_get+0x30>)
   402aa:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   402ae:	f013 0f08 	tst.w	r3, #8
   402b2:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   402b6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   402ba:	d007      	beq.n	402cc <ull_filter_lll_lrpa_get+0x2c>
   402bc:	f3c3 0040 	ubfx	r0, r3, #1, #1
   402c0:	079b      	lsls	r3, r3, #30
   402c2:	d503      	bpl.n	402cc <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   402c4:	440a      	add	r2, r1
   402c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
   402c8:	4770      	bx	lr
		return NULL;
   402ca:	2000      	movs	r0, #0
}
   402cc:	4770      	bx	lr
   402ce:	bf00      	nop
   402d0:	20006344 	.word	0x20006344

000402d4 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   402d4:	4b02      	ldr	r3, [pc, #8]	; (402e0 <ull_filter_lll_irks_get+0xc>)
   402d6:	781b      	ldrb	r3, [r3, #0]
   402d8:	7003      	strb	r3, [r0, #0]
}
   402da:	4802      	ldr	r0, [pc, #8]	; (402e4 <ull_filter_lll_irks_get+0x10>)
   402dc:	4770      	bx	lr
   402de:	bf00      	nop
   402e0:	2000778c 	.word	0x2000778c
   402e4:	200062c4 	.word	0x200062c4

000402e8 <ull_filter_lll_rl_idx>:
{
   402e8:	b538      	push	{r3, r4, r5, lr}
   402ea:	460c      	mov	r4, r1
	if (filter) {
   402ec:	b150      	cbz	r0, 40304 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   402ee:	2907      	cmp	r1, #7
   402f0:	d822      	bhi.n	40338 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   402f2:	4d2a      	ldr	r5, [pc, #168]	; (4039c <ull_filter_lll_rl_idx+0xb4>)
   402f4:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   402f8:	07da      	lsls	r2, r3, #31
   402fa:	d52f      	bpl.n	4035c <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   402fc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   40300:	7860      	ldrb	r0, [r4, #1]
}
   40302:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   40304:	2907      	cmp	r1, #7
   40306:	d83a      	bhi.n	4037e <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   40308:	4b25      	ldr	r3, [pc, #148]	; (403a0 <ull_filter_lll_rl_idx+0xb8>)
   4030a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   4030e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   40312:	07db      	lsls	r3, r3, #31
   40314:	d501      	bpl.n	4031a <ull_filter_lll_rl_idx+0x32>
   40316:	4620      	mov	r0, r4
}
   40318:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   4031a:	4a22      	ldr	r2, [pc, #136]	; (403a4 <ull_filter_lll_rl_idx+0xbc>)
   4031c:	4922      	ldr	r1, [pc, #136]	; (403a8 <ull_filter_lll_rl_idx+0xc0>)
   4031e:	4823      	ldr	r0, [pc, #140]	; (403ac <ull_filter_lll_rl_idx+0xc4>)
   40320:	f240 3363 	movw	r3, #867	; 0x363
   40324:	f00a f8bf 	bl	4a4a6 <printk>
   40328:	4040      	eors	r0, r0
   4032a:	f380 8811 	msr	BASEPRI, r0
   4032e:	f04f 0003 	mov.w	r0, #3
   40332:	df02      	svc	2
   40334:	4620      	mov	r0, r4
}
   40336:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   40338:	4a1a      	ldr	r2, [pc, #104]	; (403a4 <ull_filter_lll_rl_idx+0xbc>)
   4033a:	491d      	ldr	r1, [pc, #116]	; (403b0 <ull_filter_lll_rl_idx+0xc8>)
   4033c:	481b      	ldr	r0, [pc, #108]	; (403ac <ull_filter_lll_rl_idx+0xc4>)
   4033e:	f240 335d 	movw	r3, #861	; 0x35d
   40342:	f00a f8b0 	bl	4a4a6 <printk>
   40346:	4040      	eors	r0, r0
   40348:	f380 8811 	msr	BASEPRI, r0
   4034c:	f04f 0003 	mov.w	r0, #3
   40350:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   40352:	4d12      	ldr	r5, [pc, #72]	; (4039c <ull_filter_lll_rl_idx+0xb4>)
   40354:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   40358:	07da      	lsls	r2, r3, #31
   4035a:	d4cf      	bmi.n	402fc <ull_filter_lll_rl_idx+0x14>
   4035c:	4a11      	ldr	r2, [pc, #68]	; (403a4 <ull_filter_lll_rl_idx+0xbc>)
   4035e:	4915      	ldr	r1, [pc, #84]	; (403b4 <ull_filter_lll_rl_idx+0xcc>)
   40360:	4812      	ldr	r0, [pc, #72]	; (403ac <ull_filter_lll_rl_idx+0xc4>)
   40362:	f240 335e 	movw	r3, #862	; 0x35e
   40366:	f00a f89e 	bl	4a4a6 <printk>
   4036a:	4040      	eors	r0, r0
   4036c:	f380 8811 	msr	BASEPRI, r0
   40370:	f04f 0003 	mov.w	r0, #3
   40374:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   40376:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   4037a:	7860      	ldrb	r0, [r4, #1]
   4037c:	e7c1      	b.n	40302 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   4037e:	4a09      	ldr	r2, [pc, #36]	; (403a4 <ull_filter_lll_rl_idx+0xbc>)
   40380:	490d      	ldr	r1, [pc, #52]	; (403b8 <ull_filter_lll_rl_idx+0xd0>)
   40382:	480a      	ldr	r0, [pc, #40]	; (403ac <ull_filter_lll_rl_idx+0xc4>)
   40384:	f240 3361 	movw	r3, #865	; 0x361
   40388:	f00a f88d 	bl	4a4a6 <printk>
   4038c:	4040      	eors	r0, r0
   4038e:	f380 8811 	msr	BASEPRI, r0
   40392:	f04f 0003 	mov.w	r0, #3
   40396:	df02      	svc	2
   40398:	e7b6      	b.n	40308 <ull_filter_lll_rl_idx+0x20>
   4039a:	bf00      	nop
   4039c:	20006218 	.word	0x20006218
   403a0:	20006344 	.word	0x20006344
   403a4:	00055948 	.word	0x00055948
   403a8:	00055b28 	.word	0x00055b28
   403ac:	0005512c 	.word	0x0005512c
   403b0:	000559c4 	.word	0x000559c4
   403b4:	00055a6c 	.word	0x00055a6c
   403b8:	00055a84 	.word	0x00055a84

000403bc <ull_filter_lll_rl_irk_idx>:
{
   403bc:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   403be:	4b20      	ldr	r3, [pc, #128]	; (40440 <ull_filter_lll_rl_irk_idx+0x84>)
   403c0:	781b      	ldrb	r3, [r3, #0]
   403c2:	4283      	cmp	r3, r0
{
   403c4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   403c6:	d90c      	bls.n	403e2 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   403c8:	4b1e      	ldr	r3, [pc, #120]	; (40444 <ull_filter_lll_rl_irk_idx+0x88>)
   403ca:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   403cc:	2c07      	cmp	r4, #7
   403ce:	d819      	bhi.n	40404 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   403d0:	4b1d      	ldr	r3, [pc, #116]	; (40448 <ull_filter_lll_rl_irk_idx+0x8c>)
   403d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   403d6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   403da:	07db      	lsls	r3, r3, #31
   403dc:	d520      	bpl.n	40420 <ull_filter_lll_rl_irk_idx+0x64>
}
   403de:	4620      	mov	r0, r4
   403e0:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   403e2:	4a1a      	ldr	r2, [pc, #104]	; (4044c <ull_filter_lll_rl_irk_idx+0x90>)
   403e4:	491a      	ldr	r1, [pc, #104]	; (40450 <ull_filter_lll_rl_irk_idx+0x94>)
   403e6:	481b      	ldr	r0, [pc, #108]	; (40454 <ull_filter_lll_rl_irk_idx+0x98>)
   403e8:	f240 336d 	movw	r3, #877	; 0x36d
   403ec:	f00a f85b 	bl	4a4a6 <printk>
   403f0:	4040      	eors	r0, r0
   403f2:	f380 8811 	msr	BASEPRI, r0
   403f6:	f04f 0003 	mov.w	r0, #3
   403fa:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   403fc:	4b11      	ldr	r3, [pc, #68]	; (40444 <ull_filter_lll_rl_irk_idx+0x88>)
   403fe:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   40400:	2c07      	cmp	r4, #7
   40402:	d9e5      	bls.n	403d0 <ull_filter_lll_rl_irk_idx+0x14>
   40404:	4a11      	ldr	r2, [pc, #68]	; (4044c <ull_filter_lll_rl_irk_idx+0x90>)
   40406:	4914      	ldr	r1, [pc, #80]	; (40458 <ull_filter_lll_rl_irk_idx+0x9c>)
   40408:	4812      	ldr	r0, [pc, #72]	; (40454 <ull_filter_lll_rl_irk_idx+0x98>)
   4040a:	f240 336f 	movw	r3, #879	; 0x36f
   4040e:	f00a f84a 	bl	4a4a6 <printk>
   40412:	4040      	eors	r0, r0
   40414:	f380 8811 	msr	BASEPRI, r0
   40418:	f04f 0003 	mov.w	r0, #3
   4041c:	df02      	svc	2
   4041e:	e7d7      	b.n	403d0 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   40420:	4a0a      	ldr	r2, [pc, #40]	; (4044c <ull_filter_lll_rl_irk_idx+0x90>)
   40422:	490e      	ldr	r1, [pc, #56]	; (4045c <ull_filter_lll_rl_irk_idx+0xa0>)
   40424:	480b      	ldr	r0, [pc, #44]	; (40454 <ull_filter_lll_rl_irk_idx+0x98>)
   40426:	f44f 735c 	mov.w	r3, #880	; 0x370
   4042a:	f00a f83c 	bl	4a4a6 <printk>
   4042e:	4040      	eors	r0, r0
   40430:	f380 8811 	msr	BASEPRI, r0
   40434:	f04f 0003 	mov.w	r0, #3
   40438:	df02      	svc	2
}
   4043a:	4620      	mov	r0, r4
   4043c:	bd10      	pop	{r4, pc}
   4043e:	bf00      	nop
   40440:	2000778c 	.word	0x2000778c
   40444:	200062bc 	.word	0x200062bc
   40448:	20006344 	.word	0x20006344
   4044c:	00055948 	.word	0x00055948
   40450:	00055b34 	.word	0x00055b34
   40454:	0005512c 	.word	0x0005512c
   40458:	00055b54 	.word	0x00055b54
   4045c:	00055b28 	.word	0x00055b28

00040460 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   40460:	2807      	cmp	r0, #7
   40462:	d823      	bhi.n	404ac <ull_filter_lll_irk_in_fal+0x4c>
{
   40464:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   40466:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   4046a:	4e11      	ldr	r6, [pc, #68]	; (404b0 <ull_filter_lll_irk_in_fal+0x50>)
   4046c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   40470:	07db      	lsls	r3, r3, #31
   40472:	4604      	mov	r4, r0
   40474:	ea4f 0580 	mov.w	r5, r0, lsl #2
   40478:	d505      	bpl.n	40486 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   4047a:	442c      	add	r4, r5
   4047c:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   40480:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   40484:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   40486:	4a0b      	ldr	r2, [pc, #44]	; (404b4 <ull_filter_lll_irk_in_fal+0x54>)
   40488:	490b      	ldr	r1, [pc, #44]	; (404b8 <ull_filter_lll_irk_in_fal+0x58>)
   4048a:	480c      	ldr	r0, [pc, #48]	; (404bc <ull_filter_lll_irk_in_fal+0x5c>)
   4048c:	f240 337b 	movw	r3, #891	; 0x37b
   40490:	f00a f809 	bl	4a4a6 <printk>
   40494:	4040      	eors	r0, r0
   40496:	f380 8811 	msr	BASEPRI, r0
   4049a:	f04f 0003 	mov.w	r0, #3
   4049e:	df02      	svc	2
	return rl[rl_idx].fal;
   404a0:	442c      	add	r4, r5
   404a2:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   404a6:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   404aa:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   404ac:	2000      	movs	r0, #0
}
   404ae:	4770      	bx	lr
   404b0:	20006344 	.word	0x20006344
   404b4:	00055948 	.word	0x00055948
   404b8:	00055998 	.word	0x00055998
   404bc:	0005512c 	.word	0x0005512c

000404c0 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   404c0:	4b14      	ldr	r3, [pc, #80]	; (40514 <ull_filter_lll_rl_idx_allowed+0x54>)
   404c2:	781b      	ldrb	r3, [r3, #0]
   404c4:	b19b      	cbz	r3, 404ee <ull_filter_lll_rl_idx_allowed+0x2e>
   404c6:	2907      	cmp	r1, #7
{
   404c8:	b570      	push	{r4, r5, r6, lr}
   404ca:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   404cc:	d80d      	bhi.n	404ea <ull_filter_lll_rl_idx_allowed+0x2a>
   404ce:	b960      	cbnz	r0, 404ea <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   404d0:	4e11      	ldr	r6, [pc, #68]	; (40518 <ull_filter_lll_rl_idx_allowed+0x58>)
   404d2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   404d6:	008d      	lsls	r5, r1, #2
   404d8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   404dc:	07da      	lsls	r2, r3, #31
   404de:	d50b      	bpl.n	404f8 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   404e0:	442c      	add	r4, r5
   404e2:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   404e6:	0743      	lsls	r3, r0, #29
   404e8:	d403      	bmi.n	404f2 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   404ea:	2001      	movs	r0, #1
}
   404ec:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   404ee:	2001      	movs	r0, #1
}
   404f0:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   404f2:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   404f6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   404f8:	4a08      	ldr	r2, [pc, #32]	; (4051c <ull_filter_lll_rl_idx_allowed+0x5c>)
   404fa:	4909      	ldr	r1, [pc, #36]	; (40520 <ull_filter_lll_rl_idx_allowed+0x60>)
   404fc:	4809      	ldr	r0, [pc, #36]	; (40524 <ull_filter_lll_rl_idx_allowed+0x64>)
   404fe:	f44f 7365 	mov.w	r3, #916	; 0x394
   40502:	f009 ffd0 	bl	4a4a6 <printk>
   40506:	4040      	eors	r0, r0
   40508:	f380 8811 	msr	BASEPRI, r0
   4050c:	f04f 0003 	mov.w	r0, #3
   40510:	df02      	svc	2
   40512:	e7e5      	b.n	404e0 <ull_filter_lll_rl_idx_allowed+0x20>
   40514:	2000778d 	.word	0x2000778d
   40518:	20006344 	.word	0x20006344
   4051c:	00055948 	.word	0x00055948
   40520:	00055998 	.word	0x00055998
   40524:	0005512c 	.word	0x0005512c

00040528 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   40528:	7813      	ldrb	r3, [r2, #0]
   4052a:	2bff      	cmp	r3, #255	; 0xff
   4052c:	d11b      	bne.n	40566 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   4052e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40532:	4d19      	ldr	r5, [pc, #100]	; (40598 <ull_filter_lll_rl_addr_allowed+0x70>)
   40534:	4604      	mov	r4, r0
   40536:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   40538:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   4053a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   4053e:	b2df      	uxtb	r7, r3
   40540:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   40544:	f01c 0001 	ands.w	r0, ip, #1
   40548:	ea4f 0683 	mov.w	r6, r3, lsl #2
   4054c:	d003      	beq.n	40556 <ull_filter_lll_rl_addr_allowed+0x2e>
   4054e:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   40552:	45a4      	cmp	ip, r4
   40554:	d009      	beq.n	4056a <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   40556:	3301      	adds	r3, #1
   40558:	2b08      	cmp	r3, #8
   4055a:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   4055e:	d1ec      	bne.n	4053a <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   40560:	2001      	movs	r0, #1
}
   40562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   40566:	2001      	movs	r0, #1
}
   40568:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   4056a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   4056e:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   40570:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   40574:	f81c af01 	ldrb.w	sl, [ip, #1]!
   40578:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   4057c:	45ca      	cmp	sl, r9
   4057e:	d1ea      	bne.n	40556 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   40580:	45dc      	cmp	ip, fp
   40582:	d1f7      	bne.n	40574 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   40584:	4433      	add	r3, r6
				*rl_idx = i;
   40586:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   40588:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   4058c:	075a      	lsls	r2, r3, #29
   4058e:	d5e8      	bpl.n	40562 <ull_filter_lll_rl_addr_allowed+0x3a>
   40590:	f3c3 1000 	ubfx	r0, r3, #4, #1
   40594:	e7e5      	b.n	40562 <ull_filter_lll_rl_addr_allowed+0x3a>
   40596:	bf00      	nop
   40598:	20006344 	.word	0x20006344

0004059c <ull_filter_lll_rl_addr_resolve>:
{
   4059c:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   4059e:	4b0e      	ldr	r3, [pc, #56]	; (405d8 <ull_filter_lll_rl_addr_resolve+0x3c>)
   405a0:	781c      	ldrb	r4, [r3, #0]
   405a2:	b17c      	cbz	r4, 405c4 <ull_filter_lll_rl_addr_resolve+0x28>
   405a4:	2a07      	cmp	r2, #7
   405a6:	d80d      	bhi.n	405c4 <ull_filter_lll_rl_addr_resolve+0x28>
   405a8:	4c0c      	ldr	r4, [pc, #48]	; (405dc <ull_filter_lll_rl_addr_resolve+0x40>)
   405aa:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   405ae:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   405b2:	f01c 0f08 	tst.w	ip, #8
   405b6:	d005      	beq.n	405c4 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   405b8:	b120      	cbz	r0, 405c4 <ull_filter_lll_rl_addr_resolve+0x28>
   405ba:	794b      	ldrb	r3, [r1, #5]
   405bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   405c0:	2b40      	cmp	r3, #64	; 0x40
   405c2:	d002      	beq.n	405ca <ull_filter_lll_rl_addr_resolve+0x2e>
}
   405c4:	2000      	movs	r0, #0
   405c6:	bc10      	pop	{r4}
   405c8:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   405ca:	2028      	movs	r0, #40	; 0x28
   405cc:	fb00 4002 	mla	r0, r0, r2, r4
   405d0:	3007      	adds	r0, #7
}
   405d2:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   405d4:	f00c b8cb 	b.w	4c76e <bt_rpa_irk_matches>
   405d8:	2000778d 	.word	0x2000778d
   405dc:	20006344 	.word	0x20006344

000405e0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   405e0:	4b02      	ldr	r3, [pc, #8]	; (405ec <ull_filter_lll_rl_enabled+0xc>)
   405e2:	7818      	ldrb	r0, [r3, #0]
}
   405e4:	3800      	subs	r0, #0
   405e6:	bf18      	it	ne
   405e8:	2001      	movne	r0, #1
   405ea:	4770      	bx	lr
   405ec:	2000778d 	.word	0x2000778d

000405f0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   405f0:	4668      	mov	r0, sp
   405f2:	f020 0107 	bic.w	r1, r0, #7
   405f6:	468d      	mov	sp, r1
   405f8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   405fa:	f002 fdd5 	bl	431a8 <isr_radio>

	ISR_DIRECT_PM();
   405fe:	f7ec feab 	bl	2d358 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   40602:	f7ec ff7b 	bl	2d4fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   40606:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   4060a:	4685      	mov	sp, r0
   4060c:	4770      	bx	lr
   4060e:	bf00      	nop

00040610 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   40610:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   40612:	4b09      	ldr	r3, [pc, #36]	; (40638 <rtc0_nrf5_isr+0x28>)
   40614:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   40618:	b93a      	cbnz	r2, 4062a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   4061a:	2001      	movs	r0, #1
   4061c:	f7f4 f86a 	bl	346f4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   40620:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   40624:	2002      	movs	r0, #2
   40626:	f7f4 b865 	b.w	346f4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   4062a:	2000      	movs	r0, #0
   4062c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   40630:	f7f5 f972 	bl	35918 <ticker_trigger>
   40634:	e7f1      	b.n	4061a <rtc0_nrf5_isr+0xa>
   40636:	bf00      	nop
   40638:	4000b000 	.word	0x4000b000

0004063c <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   4063c:	2000      	movs	r0, #0
   4063e:	f7f4 b859 	b.w	346f4 <mayfly_run>
   40642:	bf00      	nop

00040644 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   40644:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   40646:	4b0e      	ldr	r3, [pc, #56]	; (40680 <ticker_stop_op_cb+0x3c>)
   40648:	4c0e      	ldr	r4, [pc, #56]	; (40684 <ticker_stop_op_cb+0x40>)
   4064a:	781a      	ldrb	r2, [r3, #0]
   4064c:	7823      	ldrb	r3, [r4, #0]
   4064e:	429a      	cmp	r2, r3
   40650:	d006      	beq.n	40660 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   40652:	490d      	ldr	r1, [pc, #52]	; (40688 <ticker_stop_op_cb+0x44>)
   40654:	4a0d      	ldr	r2, [pc, #52]	; (4068c <ticker_stop_op_cb+0x48>)
   40656:	7809      	ldrb	r1, [r1, #0]
   40658:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   4065a:	3301      	adds	r3, #1
   4065c:	7023      	strb	r3, [r4, #0]
}
   4065e:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   40660:	4a0b      	ldr	r2, [pc, #44]	; (40690 <ticker_stop_op_cb+0x4c>)
   40662:	490c      	ldr	r1, [pc, #48]	; (40694 <ticker_stop_op_cb+0x50>)
   40664:	480c      	ldr	r0, [pc, #48]	; (40698 <ticker_stop_op_cb+0x54>)
   40666:	f240 3301 	movw	r3, #769	; 0x301
   4066a:	f009 ff1c 	bl	4a4a6 <printk>
   4066e:	4040      	eors	r0, r0
   40670:	f380 8811 	msr	BASEPRI, r0
   40674:	f04f 0003 	mov.w	r0, #3
   40678:	df02      	svc	2
	preempt_stop_ack++;
   4067a:	7823      	ldrb	r3, [r4, #0]
   4067c:	e7e9      	b.n	40652 <ticker_stop_op_cb+0xe>
   4067e:	bf00      	nop
   40680:	20007793 	.word	0x20007793
   40684:	20007792 	.word	0x20007792
   40688:	2000778e 	.word	0x2000778e
   4068c:	2000778f 	.word	0x2000778f
   40690:	00055b5c 	.word	0x00055b5c
   40694:	00055ba4 	.word	0x00055ba4
   40698:	0005512c 	.word	0x0005512c

0004069c <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   4069c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   4069e:	b9f8      	cbnz	r0, 406e0 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   406a0:	4b1e      	ldr	r3, [pc, #120]	; (4071c <ticker_start_op_cb+0x80>)
   406a2:	4d1f      	ldr	r5, [pc, #124]	; (40720 <ticker_start_op_cb+0x84>)
   406a4:	781a      	ldrb	r2, [r3, #0]
   406a6:	782b      	ldrb	r3, [r5, #0]
   406a8:	429a      	cmp	r2, r3
   406aa:	d027      	beq.n	406fc <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   406ac:	4a1d      	ldr	r2, [pc, #116]	; (40724 <ticker_start_op_cb+0x88>)
   406ae:	4c1e      	ldr	r4, [pc, #120]	; (40728 <ticker_start_op_cb+0x8c>)
   406b0:	7812      	ldrb	r2, [r2, #0]
   406b2:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   406b4:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   406b6:	4291      	cmp	r1, r2
	preempt_start_ack++;
   406b8:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   406ba:	b2d3      	uxtb	r3, r2
   406bc:	d00d      	beq.n	406da <ticker_start_op_cb+0x3e>
   406be:	4a1b      	ldr	r2, [pc, #108]	; (4072c <ticker_start_op_cb+0x90>)
   406c0:	491b      	ldr	r1, [pc, #108]	; (40730 <ticker_start_op_cb+0x94>)
   406c2:	481c      	ldr	r0, [pc, #112]	; (40734 <ticker_start_op_cb+0x98>)
   406c4:	f240 330f 	movw	r3, #783	; 0x30f
   406c8:	f009 feed 	bl	4a4a6 <printk>
   406cc:	4040      	eors	r0, r0
   406ce:	f380 8811 	msr	BASEPRI, r0
   406d2:	f04f 0003 	mov.w	r0, #3
   406d6:	df02      	svc	2
	preempt_req++;
   406d8:	7823      	ldrb	r3, [r4, #0]
   406da:	3301      	adds	r3, #1
   406dc:	7023      	strb	r3, [r4, #0]
}
   406de:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   406e0:	4a12      	ldr	r2, [pc, #72]	; (4072c <ticker_start_op_cb+0x90>)
   406e2:	4915      	ldr	r1, [pc, #84]	; (40738 <ticker_start_op_cb+0x9c>)
   406e4:	4813      	ldr	r0, [pc, #76]	; (40734 <ticker_start_op_cb+0x98>)
   406e6:	f240 330a 	movw	r3, #778	; 0x30a
   406ea:	f009 fedc 	bl	4a4a6 <printk>
   406ee:	4040      	eors	r0, r0
   406f0:	f380 8811 	msr	BASEPRI, r0
   406f4:	f04f 0003 	mov.w	r0, #3
   406f8:	df02      	svc	2
   406fa:	e7d1      	b.n	406a0 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   406fc:	4a0b      	ldr	r2, [pc, #44]	; (4072c <ticker_start_op_cb+0x90>)
   406fe:	490f      	ldr	r1, [pc, #60]	; (4073c <ticker_start_op_cb+0xa0>)
   40700:	480c      	ldr	r0, [pc, #48]	; (40734 <ticker_start_op_cb+0x98>)
   40702:	f44f 7343 	mov.w	r3, #780	; 0x30c
   40706:	f009 fece 	bl	4a4a6 <printk>
   4070a:	4040      	eors	r0, r0
   4070c:	f380 8811 	msr	BASEPRI, r0
   40710:	f04f 0003 	mov.w	r0, #3
   40714:	df02      	svc	2
	preempt_start_ack++;
   40716:	782b      	ldrb	r3, [r5, #0]
   40718:	e7c8      	b.n	406ac <ticker_start_op_cb+0x10>
   4071a:	bf00      	nop
   4071c:	20007791 	.word	0x20007791
   40720:	20007790 	.word	0x20007790
   40724:	2000778e 	.word	0x2000778e
   40728:	2000778f 	.word	0x2000778f
   4072c:	00055b5c 	.word	0x00055b5c
   40730:	00055bf4 	.word	0x00055bf4
   40734:	0005512c 	.word	0x0005512c
   40738:	0005569c 	.word	0x0005569c
   4073c:	00055bcc 	.word	0x00055bcc

00040740 <isr_race>:
	radio_status_reset();
   40740:	f002 be52 	b.w	433e8 <radio_status_reset>

00040744 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   40744:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   40746:	4a18      	ldr	r2, [pc, #96]	; (407a8 <preempt_ticker_cb+0x64>)
   40748:	4c18      	ldr	r4, [pc, #96]	; (407ac <preempt_ticker_cb+0x68>)
   4074a:	7812      	ldrb	r2, [r2, #0]
   4074c:	7823      	ldrb	r3, [r4, #0]
   4074e:	429a      	cmp	r2, r3
   40750:	d01b      	beq.n	4078a <preempt_ticker_cb+0x46>
	preempt_ack++;
   40752:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   40754:	4b16      	ldr	r3, [pc, #88]	; (407b0 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   40756:	3101      	adds	r1, #1
   40758:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   4075a:	2200      	movs	r2, #0
	preempt_ack++;
   4075c:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   4075e:	9903      	ldr	r1, [sp, #12]
   40760:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   40762:	2001      	movs	r0, #1
   40764:	4611      	mov	r1, r2
   40766:	f7f3 ff6d 	bl	34644 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   4076a:	b900      	cbnz	r0, 4076e <preempt_ticker_cb+0x2a>
}
   4076c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   4076e:	4a11      	ldr	r2, [pc, #68]	; (407b4 <preempt_ticker_cb+0x70>)
   40770:	4911      	ldr	r1, [pc, #68]	; (407b8 <preempt_ticker_cb+0x74>)
   40772:	4812      	ldr	r0, [pc, #72]	; (407bc <preempt_ticker_cb+0x78>)
   40774:	f240 3376 	movw	r3, #886	; 0x376
   40778:	f009 fe95 	bl	4a4a6 <printk>
   4077c:	4040      	eors	r0, r0
   4077e:	f380 8811 	msr	BASEPRI, r0
   40782:	f04f 0003 	mov.w	r0, #3
   40786:	df02      	svc	2
}
   40788:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   4078a:	4a0a      	ldr	r2, [pc, #40]	; (407b4 <preempt_ticker_cb+0x70>)
   4078c:	490c      	ldr	r1, [pc, #48]	; (407c0 <preempt_ticker_cb+0x7c>)
   4078e:	480b      	ldr	r0, [pc, #44]	; (407bc <preempt_ticker_cb+0x78>)
   40790:	f44f 735c 	mov.w	r3, #880	; 0x370
   40794:	f009 fe87 	bl	4a4a6 <printk>
   40798:	4040      	eors	r0, r0
   4079a:	f380 8811 	msr	BASEPRI, r0
   4079e:	f04f 0003 	mov.w	r0, #3
   407a2:	df02      	svc	2
   407a4:	e7d5      	b.n	40752 <preempt_ticker_cb+0xe>
   407a6:	bf00      	nop
   407a8:	2000778f 	.word	0x2000778f
   407ac:	2000778e 	.word	0x2000778e
   407b0:	20000f18 	.word	0x20000f18
   407b4:	00055b5c 	.word	0x00055b5c
   407b8:	00055408 	.word	0x00055408
   407bc:	0005512c 	.word	0x0005512c
   407c0:	00055c10 	.word	0x00055c10

000407c4 <preempt_ticker_stop>:
{
   407c4:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   407c6:	4917      	ldr	r1, [pc, #92]	; (40824 <preempt_ticker_stop+0x60>)
   407c8:	4a17      	ldr	r2, [pc, #92]	; (40828 <preempt_ticker_stop+0x64>)
   407ca:	780b      	ldrb	r3, [r1, #0]
   407cc:	7812      	ldrb	r2, [r2, #0]
   407ce:	429a      	cmp	r2, r3
{
   407d0:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   407d2:	d122      	bne.n	4081a <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   407d4:	4b15      	ldr	r3, [pc, #84]	; (4082c <preempt_ticker_stop+0x68>)
   407d6:	4a16      	ldr	r2, [pc, #88]	; (40830 <preempt_ticker_stop+0x6c>)
   407d8:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   407da:	7812      	ldrb	r2, [r2, #0]
   407dc:	429a      	cmp	r2, r3
   407de:	d01c      	beq.n	4081a <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   407e0:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   407e2:	4b14      	ldr	r3, [pc, #80]	; (40834 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   407e4:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   407e6:	2200      	movs	r2, #0
	preempt_stop_req++;
   407e8:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   407ea:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   407ec:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   407ee:	4611      	mov	r1, r2
   407f0:	4610      	mov	r0, r2
   407f2:	f7f5 f989 	bl	35b08 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   407f6:	4604      	mov	r4, r0
   407f8:	b178      	cbz	r0, 4081a <preempt_ticker_stop+0x56>
   407fa:	2802      	cmp	r0, #2
   407fc:	d00e      	beq.n	4081c <preempt_ticker_stop+0x58>
   407fe:	4a0e      	ldr	r2, [pc, #56]	; (40838 <preempt_ticker_stop+0x74>)
   40800:	490e      	ldr	r1, [pc, #56]	; (4083c <preempt_ticker_stop+0x78>)
   40802:	480f      	ldr	r0, [pc, #60]	; (40840 <preempt_ticker_stop+0x7c>)
   40804:	f240 3362 	movw	r3, #866	; 0x362
   40808:	f009 fe4d 	bl	4a4a6 <printk>
   4080c:	4040      	eors	r0, r0
   4080e:	f380 8811 	msr	BASEPRI, r0
   40812:	f04f 0003 	mov.w	r0, #3
   40816:	df02      	svc	2
   40818:	e000      	b.n	4081c <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   4081a:	2400      	movs	r4, #0
}
   4081c:	4620      	mov	r0, r4
   4081e:	b002      	add	sp, #8
   40820:	bd10      	pop	{r4, pc}
   40822:	bf00      	nop
   40824:	20007793 	.word	0x20007793
   40828:	20007792 	.word	0x20007792
   4082c:	2000778e 	.word	0x2000778e
   40830:	2000778f 	.word	0x2000778f
   40834:	00040645 	.word	0x00040645
   40838:	00055b5c 	.word	0x00055b5c
   4083c:	000554dc 	.word	0x000554dc
   40840:	0005512c 	.word	0x0005512c

00040844 <preempt_ticker_start>:
{
   40844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   40848:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   4084a:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   4084e:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   40850:	4b2a      	ldr	r3, [pc, #168]	; (408fc <preempt_ticker_start+0xb8>)
   40852:	4f2b      	ldr	r7, [pc, #172]	; (40900 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   40854:	68d6      	ldr	r6, [r2, #12]
{
   40856:	460d      	mov	r5, r1
   40858:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   4085a:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   4085c:	6890      	ldr	r0, [r2, #8]
   4085e:	6853      	ldr	r3, [r2, #4]
   40860:	4298      	cmp	r0, r3
   40862:	bf2c      	ite	cs
   40864:	ebc6 0600 	rsbcs	r6, r6, r0
   40868:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   4086c:	783b      	ldrb	r3, [r7, #0]
   4086e:	4299      	cmp	r1, r3
{
   40870:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   40872:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   40876:	d033      	beq.n	408e0 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   40878:	2c00      	cmp	r4, #0
   4087a:	d03a      	beq.n	408f2 <preempt_ticker_start+0xae>
   4087c:	7f23      	ldrb	r3, [r4, #28]
   4087e:	079b      	lsls	r3, r3, #30
   40880:	d437      	bmi.n	408f2 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   40882:	f8df a080 	ldr.w	sl, [pc, #128]	; 40904 <preempt_ticker_start+0xc0>
   40886:	f8da 0000 	ldr.w	r0, [sl]
   4088a:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   4088e:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   40892:	d022      	beq.n	408da <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   40894:	f7ff ff96 	bl	407c4 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   40898:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   4089a:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   4089c:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   408a0:	f043 0302 	orr.w	r3, r3, #2
   408a4:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   408a6:	4620      	mov	r0, r4
   408a8:	69a3      	ldr	r3, [r4, #24]
   408aa:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   408ac:	4b16      	ldr	r3, [pc, #88]	; (40908 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   408ae:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   408b0:	9600      	str	r6, [sp, #0]
   408b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
   408b6:	4b15      	ldr	r3, [pc, #84]	; (4090c <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   408b8:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   408bc:	2200      	movs	r2, #0
	preempt_start_req++;
   408be:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   408c0:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   408c4:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   408c6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   408ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   408ce:	4643      	mov	r3, r8
   408d0:	4611      	mov	r1, r2
   408d2:	4610      	mov	r0, r2
	preempt_start_req++;
   408d4:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   408d6:	f7f5 f88d 	bl	359f4 <ticker_start>
}
   408da:	b00a      	add	sp, #40	; 0x28
   408dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   408e0:	4b0b      	ldr	r3, [pc, #44]	; (40910 <preempt_ticker_start+0xcc>)
   408e2:	4a0c      	ldr	r2, [pc, #48]	; (40914 <preempt_ticker_start+0xd0>)
   408e4:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   408e6:	7812      	ldrb	r2, [r2, #0]
   408e8:	429a      	cmp	r2, r3
   408ea:	d1c5      	bne.n	40878 <preempt_ticker_start+0x34>
   408ec:	f8df a014 	ldr.w	sl, [pc, #20]	; 40904 <preempt_ticker_start+0xc0>
   408f0:	e7dc      	b.n	408ac <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   408f2:	2000      	movs	r0, #0
}
   408f4:	b00a      	add	sp, #40	; 0x28
   408f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   408fa:	bf00      	nop
   408fc:	20007790 	.word	0x20007790
   40900:	20007791 	.word	0x20007791
   40904:	200064d4 	.word	0x200064d4
   40908:	0004069d 	.word	0x0004069d
   4090c:	00040745 	.word	0x00040745
   40910:	2000778e 	.word	0x2000778e
   40914:	2000778f 	.word	0x2000778f

00040918 <preempt>:

static void preempt(void *param)
{
   40918:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   4091a:	4e4b      	ldr	r6, [pc, #300]	; (40a48 <preempt+0x130>)
   4091c:	68b3      	ldr	r3, [r6, #8]
{
   4091e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   40920:	b1b3      	cbz	r3, 40950 <preempt+0x38>
   40922:	6833      	ldr	r3, [r6, #0]
   40924:	b1a3      	cbz	r3, 40950 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   40926:	23ff      	movs	r3, #255	; 0xff
   40928:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   4092a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   4092e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   40932:	f7f7 fe51 	bl	385d8 <ull_prepare_dequeue_iter>
	if (!next) {
   40936:	4601      	mov	r1, r0
   40938:	b150      	cbz	r0, 40950 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   4093a:	7f0b      	ldrb	r3, [r1, #28]
   4093c:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   40940:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   40944:	d006      	beq.n	40954 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   40946:	f7f7 fe47 	bl	385d8 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   4094a:	4601      	mov	r1, r0
   4094c:	2800      	cmp	r0, #0
   4094e:	d1f4      	bne.n	4093a <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   40950:	b009      	add	sp, #36	; 0x24
   40952:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   40954:	428d      	cmp	r5, r1
   40956:	d126      	bne.n	409a6 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   40958:	6873      	ldr	r3, [r6, #4]
   4095a:	6831      	ldr	r1, [r6, #0]
   4095c:	68e8      	ldr	r0, [r5, #12]
   4095e:	aa03      	add	r2, sp, #12
   40960:	4798      	blx	r3
	if (!err) {
   40962:	4607      	mov	r7, r0
   40964:	b1b0      	cbz	r0, 40994 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   40966:	68b3      	ldr	r3, [r6, #8]
   40968:	6831      	ldr	r1, [r6, #0]
   4096a:	4620      	mov	r0, r4
   4096c:	4798      	blx	r3
	if (err == -EAGAIN) {
   4096e:	f117 0f0b 	cmn.w	r7, #11
   40972:	d02c      	beq.n	409ce <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   40974:	378c      	adds	r7, #140	; 0x8c
   40976:	d0eb      	beq.n	40950 <preempt+0x38>
   40978:	4a34      	ldr	r2, [pc, #208]	; (40a4c <preempt+0x134>)
   4097a:	4935      	ldr	r1, [pc, #212]	; (40a50 <preempt+0x138>)
   4097c:	4835      	ldr	r0, [pc, #212]	; (40a54 <preempt+0x13c>)
   4097e:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   40982:	f009 fd90 	bl	4a4a6 <printk>
   40986:	4040      	eors	r0, r0
   40988:	f380 8811 	msr	BASEPRI, r0
   4098c:	f04f 0003 	mov.w	r0, #3
   40990:	df02      	svc	2
   40992:	e7dd      	b.n	40950 <preempt+0x38>
		next->is_aborted = 1;
   40994:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   40996:	69aa      	ldr	r2, [r5, #24]
   40998:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   4099a:	f043 0302 	orr.w	r3, r3, #2
   4099e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   409a0:	4628      	mov	r0, r5
   409a2:	4790      	blx	r2
		return;
   409a4:	e7d4      	b.n	40950 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   409a6:	4620      	mov	r0, r4
   409a8:	f7ff ff4c 	bl	40844 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   409ac:	f030 0302 	bics.w	r3, r0, #2
   409b0:	d0ce      	beq.n	40950 <preempt+0x38>
   409b2:	4a26      	ldr	r2, [pc, #152]	; (40a4c <preempt+0x134>)
   409b4:	4928      	ldr	r1, [pc, #160]	; (40a58 <preempt+0x140>)
   409b6:	4827      	ldr	r0, [pc, #156]	; (40a54 <preempt+0x13c>)
   409b8:	f44f 7367 	mov.w	r3, #924	; 0x39c
   409bc:	f009 fd73 	bl	4a4a6 <printk>
   409c0:	4040      	eors	r0, r0
   409c2:	f380 8811 	msr	BASEPRI, r0
   409c6:	f04f 0003 	mov.w	r0, #3
   409ca:	df02      	svc	2
   409cc:	e7c0      	b.n	40950 <preempt+0x38>
		iter_idx = UINT8_MAX;
   409ce:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   409d0:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   409d4:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   409d8:	f7f7 fdfe 	bl	385d8 <ull_prepare_dequeue_iter>
		while (iter) {
   409dc:	b928      	cbnz	r0, 409ea <preempt+0xd2>
   409de:	e013      	b.n	40a08 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   409e0:	f10d 000b 	add.w	r0, sp, #11
   409e4:	f7f7 fdf8 	bl	385d8 <ull_prepare_dequeue_iter>
		while (iter) {
   409e8:	b170      	cbz	r0, 40a08 <preempt+0xf0>
			if (!iter->is_aborted &&
   409ea:	7f03      	ldrb	r3, [r0, #28]
   409ec:	079a      	lsls	r2, r3, #30
   409ee:	d4f7      	bmi.n	409e0 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   409f0:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   409f2:	6831      	ldr	r1, [r6, #0]
   409f4:	4291      	cmp	r1, r2
   409f6:	d1f3      	bne.n	409e0 <preempt+0xc8>
				iter->is_aborted = 1;
   409f8:	f043 0302 	orr.w	r3, r3, #2
   409fc:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   409fe:	6983      	ldr	r3, [r0, #24]
   40a00:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   40a02:	f88d 400b 	strb.w	r4, [sp, #11]
   40a06:	e7eb      	b.n	409e0 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   40a08:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   40a0a:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   40a0c:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   40a0e:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   40a10:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   40a14:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   40a16:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   40a18:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   40a1a:	9b03      	ldr	r3, [sp, #12]
   40a1c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   40a20:	aa04      	add	r2, sp, #16
   40a22:	f7f7 fd9b 	bl	3855c <ull_prepare_enqueue>
		LL_ASSERT(iter);
   40a26:	2800      	cmp	r0, #0
   40a28:	d192      	bne.n	40950 <preempt+0x38>
   40a2a:	4a08      	ldr	r2, [pc, #32]	; (40a4c <preempt+0x134>)
   40a2c:	490b      	ldr	r1, [pc, #44]	; (40a5c <preempt+0x144>)
   40a2e:	4809      	ldr	r0, [pc, #36]	; (40a54 <preempt+0x13c>)
   40a30:	f240 33ce 	movw	r3, #974	; 0x3ce
   40a34:	f009 fd37 	bl	4a4a6 <printk>
   40a38:	4040      	eors	r0, r0
   40a3a:	f380 8811 	msr	BASEPRI, r0
   40a3e:	f04f 0003 	mov.w	r0, #3
   40a42:	df02      	svc	2
   40a44:	e784      	b.n	40950 <preempt+0x38>
   40a46:	bf00      	nop
   40a48:	200064c0 	.word	0x200064c0
   40a4c:	00055b5c 	.word	0x00055b5c
   40a50:	00055c34 	.word	0x00055c34
   40a54:	0005512c 	.word	0x0005512c
   40a58:	000554dc 	.word	0x000554dc
   40a5c:	00055c2c 	.word	0x00055c2c

00040a60 <lll_init>:
{
   40a60:	b510      	push	{r4, lr}
   40a62:	4816      	ldr	r0, [pc, #88]	; (40abc <lll_init+0x5c>)
   40a64:	f007 fb5c 	bl	48120 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   40a68:	4b15      	ldr	r3, [pc, #84]	; (40ac0 <lll_init+0x60>)
   40a6a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   40a6c:	b310      	cbz	r0, 40ab4 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   40a6e:	4b15      	ldr	r3, [pc, #84]	; (40ac4 <lll_init+0x64>)
   40a70:	2400      	movs	r4, #0
   40a72:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   40a74:	f000 fb0a 	bl	4108c <lll_clock_init>
	if (err < 0) {
   40a78:	2800      	cmp	r0, #0
   40a7a:	db1a      	blt.n	40ab2 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   40a7c:	4621      	mov	r1, r4
   40a7e:	2001      	movs	r0, #1
   40a80:	4622      	mov	r2, r4
   40a82:	f7ec fc51 	bl	2d328 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   40a86:	4622      	mov	r2, r4
   40a88:	200b      	movs	r0, #11
   40a8a:	2101      	movs	r1, #1
   40a8c:	f7ec fc4c 	bl	2d328 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   40a90:	4622      	mov	r2, r4
   40a92:	4621      	mov	r1, r4
   40a94:	2018      	movs	r0, #24
   40a96:	f7ec fc47 	bl	2d328 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   40a9a:	2001      	movs	r0, #1
   40a9c:	f7ec fc12 	bl	2d2c4 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   40aa0:	200b      	movs	r0, #11
   40aa2:	f7ec fc0f 	bl	2d2c4 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   40aa6:	2018      	movs	r0, #24
   40aa8:	f7ec fc0c 	bl	2d2c4 <arch_irq_enable>
	radio_setup();
   40aac:	f002 fbac 	bl	43208 <radio_setup>
	return 0;
   40ab0:	4620      	mov	r0, r4
}
   40ab2:	bd10      	pop	{r4, pc}
		return -ENODEV;
   40ab4:	f06f 0012 	mvn.w	r0, #18
}
   40ab8:	bd10      	pop	{r4, pc}
   40aba:	bf00      	nop
   40abc:	00055c40 	.word	0x00055c40
   40ac0:	200064bc 	.word	0x200064bc
   40ac4:	200064c0 	.word	0x200064c0

00040ac8 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   40ac8:	4a05      	ldr	r2, [pc, #20]	; (40ae0 <lll_csrand_get+0x18>)
{
   40aca:	b410      	push	{r4}
   40acc:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   40ace:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   40ad0:	6884      	ldr	r4, [r0, #8]
   40ad2:	6824      	ldr	r4, [r4, #0]
   40ad4:	b28a      	uxth	r2, r1
   40ad6:	4619      	mov	r1, r3
   40ad8:	4623      	mov	r3, r4
}
   40ada:	bc10      	pop	{r4}
   40adc:	4718      	bx	r3
   40ade:	bf00      	nop
   40ae0:	200064bc 	.word	0x200064bc

00040ae4 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   40ae4:	4b08      	ldr	r3, [pc, #32]	; (40b08 <lll_csrand_isr_get+0x24>)
{
   40ae6:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   40ae8:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   40aea:	68ab      	ldr	r3, [r5, #8]
   40aec:	685c      	ldr	r4, [r3, #4]
   40aee:	b13c      	cbz	r4, 40b00 <lll_csrand_isr_get+0x1c>
   40af0:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   40af2:	46a4      	mov	ip, r4
   40af4:	4601      	mov	r1, r0
   40af6:	b292      	uxth	r2, r2
   40af8:	4628      	mov	r0, r5
   40afa:	2300      	movs	r3, #0
}
   40afc:	bc30      	pop	{r4, r5}
   40afe:	4760      	bx	ip
   40b00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   40b04:	bc30      	pop	{r4, r5}
   40b06:	4770      	bx	lr
   40b08:	200064bc 	.word	0x200064bc

00040b0c <lll_rand_isr_get>:
   40b0c:	4b08      	ldr	r3, [pc, #32]	; (40b30 <lll_rand_isr_get+0x24>)
   40b0e:	b430      	push	{r4, r5}
   40b10:	681d      	ldr	r5, [r3, #0]
   40b12:	68ab      	ldr	r3, [r5, #8]
   40b14:	685c      	ldr	r4, [r3, #4]
   40b16:	b13c      	cbz	r4, 40b28 <lll_rand_isr_get+0x1c>
   40b18:	460a      	mov	r2, r1
   40b1a:	46a4      	mov	ip, r4
   40b1c:	4601      	mov	r1, r0
   40b1e:	b292      	uxth	r2, r2
   40b20:	4628      	mov	r0, r5
   40b22:	2300      	movs	r3, #0
   40b24:	bc30      	pop	{r4, r5}
   40b26:	4760      	bx	ip
   40b28:	f06f 0085 	mvn.w	r0, #133	; 0x85
   40b2c:	bc30      	pop	{r4, r5}
   40b2e:	4770      	bx	lr
   40b30:	200064bc 	.word	0x200064bc

00040b34 <lll_reset>:
}
   40b34:	2000      	movs	r0, #0
   40b36:	4770      	bx	lr

00040b38 <lll_disable>:
{
   40b38:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   40b3a:	4604      	mov	r4, r0
{
   40b3c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   40b3e:	b378      	cbz	r0, 40ba0 <lll_disable+0x68>
   40b40:	4b23      	ldr	r3, [pc, #140]	; (40bd0 <lll_disable+0x98>)
   40b42:	681a      	ldr	r2, [r3, #0]
   40b44:	4282      	cmp	r2, r0
   40b46:	d025      	beq.n	40b94 <lll_disable+0x5c>
		idx = UINT8_MAX;
   40b48:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   40b4a:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   40b4e:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   40b52:	f7f7 fd41 	bl	385d8 <ull_prepare_dequeue_iter>
		while (next) {
   40b56:	b938      	cbnz	r0, 40b68 <lll_disable+0x30>
   40b58:	e01a      	b.n	40b90 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   40b5a:	428c      	cmp	r4, r1
   40b5c:	d00a      	beq.n	40b74 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   40b5e:	f10d 0007 	add.w	r0, sp, #7
   40b62:	f7f7 fd39 	bl	385d8 <ull_prepare_dequeue_iter>
		while (next) {
   40b66:	b198      	cbz	r0, 40b90 <lll_disable+0x58>
			if (!next->is_aborted &&
   40b68:	7f03      	ldrb	r3, [r0, #28]
   40b6a:	079b      	lsls	r3, r3, #30
   40b6c:	d4f7      	bmi.n	40b5e <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   40b6e:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   40b70:	2c00      	cmp	r4, #0
   40b72:	d1f2      	bne.n	40b5a <lll_disable+0x22>
				next->is_aborted = 1;
   40b74:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   40b76:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   40b78:	f043 0302 	orr.w	r3, r3, #2
   40b7c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   40b7e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   40b80:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   40b84:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   40b88:	f7f7 fd26 	bl	385d8 <ull_prepare_dequeue_iter>
		while (next) {
   40b8c:	2800      	cmp	r0, #0
   40b8e:	d1eb      	bne.n	40b68 <lll_disable+0x30>
}
   40b90:	b003      	add	sp, #12
   40b92:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   40b94:	689b      	ldr	r3, [r3, #8]
   40b96:	b16b      	cbz	r3, 40bb4 <lll_disable+0x7c>
   40b98:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   40b9a:	2000      	movs	r0, #0
   40b9c:	4798      	blx	r3
   40b9e:	e7d3      	b.n	40b48 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   40ba0:	4a0b      	ldr	r2, [pc, #44]	; (40bd0 <lll_disable+0x98>)
   40ba2:	6893      	ldr	r3, [r2, #8]
   40ba4:	2b00      	cmp	r3, #0
   40ba6:	d0cf      	beq.n	40b48 <lll_disable+0x10>
   40ba8:	6811      	ldr	r1, [r2, #0]
   40baa:	2900      	cmp	r1, #0
   40bac:	d0cc      	beq.n	40b48 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   40bae:	2000      	movs	r0, #0
   40bb0:	4798      	blx	r3
   40bb2:	e7c9      	b.n	40b48 <lll_disable+0x10>
			LL_ASSERT(!param);
   40bb4:	4a07      	ldr	r2, [pc, #28]	; (40bd4 <lll_disable+0x9c>)
   40bb6:	4908      	ldr	r1, [pc, #32]	; (40bd8 <lll_disable+0xa0>)
   40bb8:	4808      	ldr	r0, [pc, #32]	; (40bdc <lll_disable+0xa4>)
   40bba:	23fd      	movs	r3, #253	; 0xfd
   40bbc:	f009 fc73 	bl	4a4a6 <printk>
   40bc0:	4040      	eors	r0, r0
   40bc2:	f380 8811 	msr	BASEPRI, r0
   40bc6:	f04f 0003 	mov.w	r0, #3
   40bca:	df02      	svc	2
   40bcc:	e7bc      	b.n	40b48 <lll_disable+0x10>
   40bce:	bf00      	nop
   40bd0:	200064c0 	.word	0x200064c0
   40bd4:	00055b5c 	.word	0x00055b5c
   40bd8:	00055c44 	.word	0x00055c44
   40bdc:	0005512c 	.word	0x0005512c

00040be0 <lll_prepare_done>:
}
   40be0:	2000      	movs	r0, #0
   40be2:	4770      	bx	lr

00040be4 <lll_done>:
{
   40be4:	b538      	push	{r3, r4, r5, lr}
   40be6:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   40be8:	f7f7 fce8 	bl	385bc <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   40bec:	b154      	cbz	r4, 40c04 <lll_done+0x20>
   40bee:	b310      	cbz	r0, 40c36 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   40bf0:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   40bf2:	2000      	movs	r0, #0
   40bf4:	f7f7 fd10 	bl	38618 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   40bf8:	4620      	mov	r0, r4
   40bfa:	f7f7 fd71 	bl	386e0 <ull_event_done>
	LL_ASSERT(evdone);
   40bfe:	b158      	cbz	r0, 40c18 <lll_done+0x34>
}
   40c00:	2000      	movs	r0, #0
   40c02:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   40c04:	4d1a      	ldr	r5, [pc, #104]	; (40c70 <lll_done+0x8c>)
   40c06:	68ab      	ldr	r3, [r5, #8]
   40c08:	b31b      	cbz	r3, 40c52 <lll_done+0x6e>
		param = event.curr.param;
   40c0a:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   40c0c:	2300      	movs	r3, #0
   40c0e:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   40c10:	602b      	str	r3, [r5, #0]
		if (param) {
   40c12:	2c00      	cmp	r4, #0
   40c14:	d1ec      	bne.n	40bf0 <lll_done+0xc>
   40c16:	e7ec      	b.n	40bf2 <lll_done+0xe>
	LL_ASSERT(evdone);
   40c18:	4a16      	ldr	r2, [pc, #88]	; (40c74 <lll_done+0x90>)
   40c1a:	4917      	ldr	r1, [pc, #92]	; (40c78 <lll_done+0x94>)
   40c1c:	4817      	ldr	r0, [pc, #92]	; (40c7c <lll_done+0x98>)
   40c1e:	f240 136d 	movw	r3, #365	; 0x16d
   40c22:	f009 fc40 	bl	4a4a6 <printk>
   40c26:	4040      	eors	r0, r0
   40c28:	f380 8811 	msr	BASEPRI, r0
   40c2c:	f04f 0003 	mov.w	r0, #3
   40c30:	df02      	svc	2
}
   40c32:	2000      	movs	r0, #0
   40c34:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   40c36:	4a0f      	ldr	r2, [pc, #60]	; (40c74 <lll_done+0x90>)
   40c38:	4911      	ldr	r1, [pc, #68]	; (40c80 <lll_done+0x9c>)
   40c3a:	4810      	ldr	r0, [pc, #64]	; (40c7c <lll_done+0x98>)
   40c3c:	f240 1337 	movw	r3, #311	; 0x137
   40c40:	f009 fc31 	bl	4a4a6 <printk>
   40c44:	4040      	eors	r0, r0
   40c46:	f380 8811 	msr	BASEPRI, r0
   40c4a:	f04f 0003 	mov.w	r0, #3
   40c4e:	df02      	svc	2
   40c50:	e7ce      	b.n	40bf0 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   40c52:	4a08      	ldr	r2, [pc, #32]	; (40c74 <lll_done+0x90>)
   40c54:	490b      	ldr	r1, [pc, #44]	; (40c84 <lll_done+0xa0>)
   40c56:	4809      	ldr	r0, [pc, #36]	; (40c7c <lll_done+0x98>)
   40c58:	f240 133d 	movw	r3, #317	; 0x13d
   40c5c:	f009 fc23 	bl	4a4a6 <printk>
   40c60:	4040      	eors	r0, r0
   40c62:	f380 8811 	msr	BASEPRI, r0
   40c66:	f04f 0003 	mov.w	r0, #3
   40c6a:	df02      	svc	2
   40c6c:	e7cd      	b.n	40c0a <lll_done+0x26>
   40c6e:	bf00      	nop
   40c70:	200064c0 	.word	0x200064c0
   40c74:	00055b5c 	.word	0x00055b5c
   40c78:	00055c70 	.word	0x00055c70
   40c7c:	0005512c 	.word	0x0005512c
   40c80:	00055c4c 	.word	0x00055c4c
   40c84:	00055c5c 	.word	0x00055c5c

00040c88 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   40c88:	4a05      	ldr	r2, [pc, #20]	; (40ca0 <lll_is_done+0x18>)
   40c8a:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   40c8c:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   40c8e:	1a1b      	subs	r3, r3, r0
   40c90:	bf18      	it	ne
   40c92:	2301      	movne	r3, #1
}
   40c94:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   40c98:	700b      	strb	r3, [r1, #0]
}
   40c9a:	0940      	lsrs	r0, r0, #5
   40c9c:	4770      	bx	lr
   40c9e:	bf00      	nop
   40ca0:	200064c0 	.word	0x200064c0

00040ca4 <lll_is_abort_cb>:
}
   40ca4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   40ca8:	4770      	bx	lr
   40caa:	bf00      	nop

00040cac <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   40cac:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   40cb0:	2a00      	cmp	r2, #0
   40cb2:	db04      	blt.n	40cbe <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   40cb4:	429a      	cmp	r2, r3
   40cb6:	bf38      	it	cc
   40cb8:	461a      	movcc	r2, r3
   40cba:	4610      	mov	r0, r2
}
   40cbc:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   40cbe:	68c0      	ldr	r0, [r0, #12]
   40cc0:	4298      	cmp	r0, r3
   40cc2:	bf38      	it	cc
   40cc4:	4618      	movcc	r0, r3
   40cc6:	4770      	bx	lr

00040cc8 <lll_preempt_calc>:
{
   40cc8:	b510      	push	{r4, lr}
   40cca:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   40ccc:	f7f4 ffbc 	bl	35c48 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   40cd0:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   40cd2:	0203      	lsls	r3, r0, #8
   40cd4:	d405      	bmi.n	40ce2 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   40cd6:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   40cd8:	2809      	cmp	r0, #9
   40cda:	bf94      	ite	ls
   40cdc:	2000      	movls	r0, #0
   40cde:	2001      	movhi	r0, #1
}
   40ce0:	bd10      	pop	{r4, pc}
		return 0;
   40ce2:	2000      	movs	r0, #0
}
   40ce4:	bd10      	pop	{r4, pc}
   40ce6:	bf00      	nop

00040ce8 <lll_chan_set>:
	switch (chan) {
   40ce8:	2826      	cmp	r0, #38	; 0x26
{
   40cea:	b510      	push	{r4, lr}
   40cec:	4604      	mov	r4, r0
	switch (chan) {
   40cee:	d01c      	beq.n	40d2a <lll_chan_set+0x42>
   40cf0:	2827      	cmp	r0, #39	; 0x27
   40cf2:	d012      	beq.n	40d1a <lll_chan_set+0x32>
   40cf4:	2825      	cmp	r0, #37	; 0x25
   40cf6:	d008      	beq.n	40d0a <lll_chan_set+0x22>
		if (chan < 11) {
   40cf8:	280a      	cmp	r0, #10
   40cfa:	d91e      	bls.n	40d3a <lll_chan_set+0x52>
		} else if (chan < 40) {
   40cfc:	2827      	cmp	r0, #39	; 0x27
   40cfe:	d821      	bhi.n	40d44 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   40d00:	3003      	adds	r0, #3
   40d02:	0040      	lsls	r0, r0, #1
   40d04:	f002 fadc 	bl	432c0 <radio_freq_chan_set>
   40d08:	e002      	b.n	40d10 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   40d0a:	2002      	movs	r0, #2
   40d0c:	f002 fad8 	bl	432c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40d10:	4620      	mov	r0, r4
}
   40d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40d16:	f002 bad9 	b.w	432cc <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   40d1a:	2050      	movs	r0, #80	; 0x50
   40d1c:	f002 fad0 	bl	432c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40d20:	4620      	mov	r0, r4
}
   40d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40d26:	f002 bad1 	b.w	432cc <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   40d2a:	201a      	movs	r0, #26
   40d2c:	f002 fac8 	bl	432c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40d30:	4620      	mov	r0, r4
}
   40d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40d36:	f002 bac9 	b.w	432cc <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   40d3a:	3002      	adds	r0, #2
   40d3c:	0040      	lsls	r0, r0, #1
   40d3e:	f002 fabf 	bl	432c0 <radio_freq_chan_set>
   40d42:	e7e5      	b.n	40d10 <lll_chan_set+0x28>
			LL_ASSERT(0);
   40d44:	4a06      	ldr	r2, [pc, #24]	; (40d60 <lll_chan_set+0x78>)
   40d46:	4907      	ldr	r1, [pc, #28]	; (40d64 <lll_chan_set+0x7c>)
   40d48:	4807      	ldr	r0, [pc, #28]	; (40d68 <lll_chan_set+0x80>)
   40d4a:	f240 13df 	movw	r3, #479	; 0x1df
   40d4e:	f009 fbaa 	bl	4a4a6 <printk>
   40d52:	4040      	eors	r0, r0
   40d54:	f380 8811 	msr	BASEPRI, r0
   40d58:	f04f 0003 	mov.w	r0, #3
   40d5c:	df02      	svc	2
   40d5e:	e7d7      	b.n	40d10 <lll_chan_set+0x28>
   40d60:	00055b5c 	.word	0x00055b5c
   40d64:	0005518c 	.word	0x0005518c
   40d68:	0005512c 	.word	0x0005512c

00040d6c <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   40d6c:	f002 bb0c 	b.w	43388 <radio_tx_ready_delay_get>

00040d70 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   40d70:	f002 bb12 	b.w	43398 <radio_rx_ready_delay_get>

00040d74 <lll_isr_tx_status_reset>:
{
   40d74:	b508      	push	{r3, lr}
	radio_status_reset();
   40d76:	f002 fb37 	bl	433e8 <radio_status_reset>
}
   40d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   40d7e:	f002 bc97 	b.w	436b0 <radio_tmr_status_reset>
   40d82:	bf00      	nop

00040d84 <lll_isr_rx_status_reset>:
{
   40d84:	b508      	push	{r3, lr}
	radio_status_reset();
   40d86:	f002 fb2f 	bl	433e8 <radio_status_reset>
	radio_tmr_status_reset();
   40d8a:	f002 fc91 	bl	436b0 <radio_tmr_status_reset>
}
   40d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   40d92:	f002 bc39 	b.w	43608 <radio_rssi_status_reset>
   40d96:	bf00      	nop

00040d98 <lll_isr_status_reset>:
{
   40d98:	b508      	push	{r3, lr}
	radio_status_reset();
   40d9a:	f002 fb25 	bl	433e8 <radio_status_reset>
	radio_tmr_status_reset();
   40d9e:	f002 fc87 	bl	436b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   40da2:	f002 fc6d 	bl	43680 <radio_filter_status_reset>
	radio_ar_status_reset();
   40da6:	f002 fe7f 	bl	43aa8 <radio_ar_status_reset>
}
   40daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   40dae:	f002 bc2b 	b.w	43608 <radio_rssi_status_reset>
   40db2:	bf00      	nop

00040db4 <lll_isr_cleanup>:
{
   40db4:	b508      	push	{r3, lr}
   40db6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   40db8:	4815      	ldr	r0, [pc, #84]	; (40e10 <lll_isr_cleanup+0x5c>)
   40dba:	f002 fa05 	bl	431c8 <radio_isr_set>
	if (!radio_is_idle()) {
   40dbe:	f002 fb33 	bl	43428 <radio_is_idle>
   40dc2:	b150      	cbz	r0, 40dda <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   40dc4:	f002 fd4a 	bl	4385c <radio_tmr_stop>
	err = lll_hfclock_off();
   40dc8:	f000 f9a4 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40dcc:	2800      	cmp	r0, #0
   40dce:	db0c      	blt.n	40dea <lll_isr_cleanup+0x36>
}
   40dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40dd4:	2000      	movs	r0, #0
   40dd6:	f7ff bf05 	b.w	40be4 <lll_done>
		radio_disable();
   40dda:	f002 faf1 	bl	433c0 <radio_disable>
	radio_tmr_stop();
   40dde:	f002 fd3d 	bl	4385c <radio_tmr_stop>
	err = lll_hfclock_off();
   40de2:	f000 f997 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40de6:	2800      	cmp	r0, #0
   40de8:	daf2      	bge.n	40dd0 <lll_isr_cleanup+0x1c>
   40dea:	4a0a      	ldr	r2, [pc, #40]	; (40e14 <lll_isr_cleanup+0x60>)
   40dec:	490a      	ldr	r1, [pc, #40]	; (40e18 <lll_isr_cleanup+0x64>)
   40dee:	480b      	ldr	r0, [pc, #44]	; (40e1c <lll_isr_cleanup+0x68>)
   40df0:	f240 2342 	movw	r3, #578	; 0x242
   40df4:	f009 fb57 	bl	4a4a6 <printk>
   40df8:	4040      	eors	r0, r0
   40dfa:	f380 8811 	msr	BASEPRI, r0
   40dfe:	f04f 0003 	mov.w	r0, #3
   40e02:	df02      	svc	2
	lll_done(NULL);
   40e04:	2000      	movs	r0, #0
}
   40e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40e0a:	f7ff beeb 	b.w	40be4 <lll_done>
   40e0e:	bf00      	nop
   40e10:	00040741 	.word	0x00040741
   40e14:	00055b5c 	.word	0x00055b5c
   40e18:	00055c78 	.word	0x00055c78
   40e1c:	0005512c 	.word	0x0005512c

00040e20 <lll_isr_abort>:
{
   40e20:	b510      	push	{r4, lr}
   40e22:	4604      	mov	r4, r0
	radio_status_reset();
   40e24:	f002 fae0 	bl	433e8 <radio_status_reset>
	radio_tmr_status_reset();
   40e28:	f002 fc42 	bl	436b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   40e2c:	f002 fc28 	bl	43680 <radio_filter_status_reset>
	radio_ar_status_reset();
   40e30:	f002 fe3a 	bl	43aa8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   40e34:	f002 fbe8 	bl	43608 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   40e38:	4620      	mov	r0, r4
}
   40e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40e3e:	f7ff bfb9 	b.w	40db4 <lll_isr_cleanup>
   40e42:	bf00      	nop

00040e44 <lll_isr_early_abort>:
{
   40e44:	b508      	push	{r3, lr}
   40e46:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   40e48:	4813      	ldr	r0, [pc, #76]	; (40e98 <lll_isr_early_abort+0x54>)
   40e4a:	f002 f9bd 	bl	431c8 <radio_isr_set>
	if (!radio_is_idle()) {
   40e4e:	f002 faeb 	bl	43428 <radio_is_idle>
   40e52:	b140      	cbz	r0, 40e66 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   40e54:	f000 f95e 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40e58:	2800      	cmp	r0, #0
   40e5a:	db0a      	blt.n	40e72 <lll_isr_early_abort+0x2e>
}
   40e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40e60:	2000      	movs	r0, #0
   40e62:	f7ff bebf 	b.w	40be4 <lll_done>
		radio_disable();
   40e66:	f002 faab 	bl	433c0 <radio_disable>
	err = lll_hfclock_off();
   40e6a:	f000 f953 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40e6e:	2800      	cmp	r0, #0
   40e70:	daf4      	bge.n	40e5c <lll_isr_early_abort+0x18>
   40e72:	4a0a      	ldr	r2, [pc, #40]	; (40e9c <lll_isr_early_abort+0x58>)
   40e74:	490a      	ldr	r1, [pc, #40]	; (40ea0 <lll_isr_early_abort+0x5c>)
   40e76:	480b      	ldr	r0, [pc, #44]	; (40ea4 <lll_isr_early_abort+0x60>)
   40e78:	f240 2351 	movw	r3, #593	; 0x251
   40e7c:	f009 fb13 	bl	4a4a6 <printk>
   40e80:	4040      	eors	r0, r0
   40e82:	f380 8811 	msr	BASEPRI, r0
   40e86:	f04f 0003 	mov.w	r0, #3
   40e8a:	df02      	svc	2
	lll_done(NULL);
   40e8c:	2000      	movs	r0, #0
}
   40e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40e92:	f7ff bea7 	b.w	40be4 <lll_done>
   40e96:	bf00      	nop
   40e98:	00040741 	.word	0x00040741
   40e9c:	00055b5c 	.word	0x00055b5c
   40ea0:	00055c78 	.word	0x00055c78
   40ea4:	0005512c 	.word	0x0005512c

00040ea8 <lll_prepare_resolve>:
{
   40ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40eac:	b084      	sub	sp, #16
   40eae:	4606      	mov	r6, r0
   40eb0:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   40eb2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   40eb6:	23ff      	movs	r3, #255	; 0xff
{
   40eb8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   40ebc:	f88d 300f 	strb.w	r3, [sp, #15]
{
   40ec0:	460f      	mov	r7, r1
   40ec2:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   40ec4:	f7f7 fb88 	bl	385d8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40ec8:	4604      	mov	r4, r0
   40eca:	b920      	cbnz	r0, 40ed6 <lll_prepare_resolve+0x2e>
   40ecc:	e032      	b.n	40f34 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   40ece:	f7f7 fb83 	bl	385d8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40ed2:	4604      	mov	r4, r0
   40ed4:	b370      	cbz	r0, 40f34 <lll_prepare_resolve+0x8c>
   40ed6:	f894 c01c 	ldrb.w	ip, [r4, #28]
   40eda:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   40ede:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   40ee2:	d1f4      	bne.n	40ece <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   40ee4:	f8df a130 	ldr.w	sl, [pc, #304]	; 41018 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   40ee8:	f8da 3008 	ldr.w	r3, [sl, #8]
   40eec:	bb4b      	cbnz	r3, 40f42 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   40eee:	f1b9 0f00 	cmp.w	r9, #0
   40ef2:	d048      	beq.n	40f86 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40ef4:	f8cd 9000 	str.w	r9, [sp]
   40ef8:	4643      	mov	r3, r8
   40efa:	462a      	mov	r2, r5
   40efc:	4639      	mov	r1, r7
   40efe:	4630      	mov	r0, r6
   40f00:	f7f7 fb2c 	bl	3855c <ull_prepare_enqueue>
		LL_ASSERT(next);
   40f04:	b980      	cbnz	r0, 40f28 <lll_prepare_resolve+0x80>
   40f06:	4a45      	ldr	r2, [pc, #276]	; (4101c <lll_prepare_resolve+0x174>)
   40f08:	4945      	ldr	r1, [pc, #276]	; (41020 <lll_prepare_resolve+0x178>)
   40f0a:	4846      	ldr	r0, [pc, #280]	; (41024 <lll_prepare_resolve+0x17c>)
   40f0c:	f240 238d 	movw	r3, #653	; 0x28d
   40f10:	f009 fac9 	bl	4a4a6 <printk>
   40f14:	4040      	eors	r0, r0
   40f16:	f380 8811 	msr	BASEPRI, r0
   40f1a:	f04f 0003 	mov.w	r0, #3
   40f1e:	df02      	svc	2
   40f20:	2000      	movs	r0, #0
		if (is_resume) {
   40f22:	f1b9 0f00 	cmp.w	r9, #0
   40f26:	d019      	beq.n	40f5c <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   40f28:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   40f2c:	4620      	mov	r0, r4
   40f2e:	b004      	add	sp, #16
   40f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   40f34:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 41018 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   40f38:	f8da 3008 	ldr.w	r3, [sl, #8]
   40f3c:	2b00      	cmp	r3, #0
   40f3e:	d031      	beq.n	40fa4 <lll_prepare_resolve+0xfc>
   40f40:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40f42:	f8cd 9000 	str.w	r9, [sp]
   40f46:	4643      	mov	r3, r8
   40f48:	462a      	mov	r2, r5
   40f4a:	4639      	mov	r1, r7
   40f4c:	4630      	mov	r0, r6
   40f4e:	f7f7 fb05 	bl	3855c <ull_prepare_enqueue>
		LL_ASSERT(next);
   40f52:	2800      	cmp	r0, #0
   40f54:	d0d7      	beq.n	40f06 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   40f56:	f1b9 0f00 	cmp.w	r9, #0
   40f5a:	d1e5      	bne.n	40f28 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   40f5c:	4601      	mov	r1, r0
   40f5e:	4620      	mov	r0, r4
   40f60:	f7ff fc70 	bl	40844 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40f64:	f030 0302 	bics.w	r3, r0, #2
   40f68:	d0de      	beq.n	40f28 <lll_prepare_resolve+0x80>
   40f6a:	4a2c      	ldr	r2, [pc, #176]	; (4101c <lll_prepare_resolve+0x174>)
   40f6c:	492e      	ldr	r1, [pc, #184]	; (41028 <lll_prepare_resolve+0x180>)
   40f6e:	482d      	ldr	r0, [pc, #180]	; (41024 <lll_prepare_resolve+0x17c>)
   40f70:	f44f 7326 	mov.w	r3, #664	; 0x298
   40f74:	f009 fa97 	bl	4a4a6 <printk>
   40f78:	4040      	eors	r0, r0
   40f7a:	f380 8811 	msr	BASEPRI, r0
   40f7e:	f04f 0003 	mov.w	r0, #3
   40f82:	df02      	svc	2
   40f84:	e7d0      	b.n	40f28 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   40f86:	42ac      	cmp	r4, r5
   40f88:	d00c      	beq.n	40fa4 <lll_prepare_resolve+0xfc>
   40f8a:	4a24      	ldr	r2, [pc, #144]	; (4101c <lll_prepare_resolve+0x174>)
   40f8c:	4927      	ldr	r1, [pc, #156]	; (4102c <lll_prepare_resolve+0x184>)
   40f8e:	4825      	ldr	r0, [pc, #148]	; (41024 <lll_prepare_resolve+0x17c>)
   40f90:	f240 23be 	movw	r3, #702	; 0x2be
   40f94:	f009 fa87 	bl	4a4a6 <printk>
   40f98:	4040      	eors	r0, r0
   40f9a:	f380 8811 	msr	BASEPRI, r0
   40f9e:	f04f 0003 	mov.w	r0, #3
   40fa2:	df02      	svc	2
	event.curr.param = prepare_param->param;
   40fa4:	68eb      	ldr	r3, [r5, #12]
   40fa6:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   40faa:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   40fae:	4628      	mov	r0, r5
   40fb0:	47c0      	blx	r8
   40fb2:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   40fb4:	f7ff fc06 	bl	407c4 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40fb8:	f030 0302 	bics.w	r3, r0, #2
   40fbc:	d11e      	bne.n	40ffc <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   40fbe:	f10d 000f 	add.w	r0, sp, #15
   40fc2:	f7f7 fb09 	bl	385d8 <ull_prepare_dequeue_iter>
		if (!p) {
   40fc6:	2800      	cmp	r0, #0
   40fc8:	d0b0      	beq.n	40f2c <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   40fca:	7f03      	ldrb	r3, [r0, #28]
   40fcc:	f013 0303 	ands.w	r3, r3, #3
   40fd0:	d1f5      	bne.n	40fbe <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   40fd2:	4601      	mov	r1, r0
   40fd4:	4618      	mov	r0, r3
   40fd6:	f7ff fc35 	bl	40844 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40fda:	f030 0302 	bics.w	r3, r0, #2
   40fde:	d0a5      	beq.n	40f2c <lll_prepare_resolve+0x84>
   40fe0:	4a0e      	ldr	r2, [pc, #56]	; (4101c <lll_prepare_resolve+0x174>)
   40fe2:	4911      	ldr	r1, [pc, #68]	; (41028 <lll_prepare_resolve+0x180>)
   40fe4:	480f      	ldr	r0, [pc, #60]	; (41024 <lll_prepare_resolve+0x17c>)
   40fe6:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   40fea:	f009 fa5c 	bl	4a4a6 <printk>
   40fee:	4040      	eors	r0, r0
   40ff0:	f380 8811 	msr	BASEPRI, r0
   40ff4:	f04f 0003 	mov.w	r0, #3
   40ff8:	df02      	svc	2
   40ffa:	e797      	b.n	40f2c <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40ffc:	4a07      	ldr	r2, [pc, #28]	; (4101c <lll_prepare_resolve+0x174>)
   40ffe:	490a      	ldr	r1, [pc, #40]	; (41028 <lll_prepare_resolve+0x180>)
   41000:	4808      	ldr	r0, [pc, #32]	; (41024 <lll_prepare_resolve+0x17c>)
   41002:	f240 23cb 	movw	r3, #715	; 0x2cb
   41006:	f009 fa4e 	bl	4a4a6 <printk>
   4100a:	4040      	eors	r0, r0
   4100c:	f380 8811 	msr	BASEPRI, r0
   41010:	f04f 0003 	mov.w	r0, #3
   41014:	df02      	svc	2
   41016:	e7d2      	b.n	40fbe <lll_prepare_resolve+0x116>
   41018:	200064c0 	.word	0x200064c0
   4101c:	00055b5c 	.word	0x00055b5c
   41020:	00055c84 	.word	0x00055c84
   41024:	0005512c 	.word	0x0005512c
   41028:	000554dc 	.word	0x000554dc
   4102c:	00055c8c 	.word	0x00055c8c

00041030 <clock_ready>:
	z_impl_k_sem_give(sem);
   41030:	f101 0010 	add.w	r0, r1, #16
   41034:	f007 bc3c 	b.w	488b0 <z_impl_k_sem_give>

00041038 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   41038:	b570      	push	{r4, r5, r6, lr}
   4103a:	4605      	mov	r5, r0
   4103c:	b08a      	sub	sp, #40	; 0x28
   4103e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   41040:	2201      	movs	r2, #1
   41042:	2100      	movs	r1, #0
   41044:	a804      	add	r0, sp, #16
   41046:	f010 fbe8 	bl	5181a <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   4104a:	4b0f      	ldr	r3, [pc, #60]	; (41088 <blocking_on+0x50>)
   4104c:	9301      	str	r3, [sp, #4]
   4104e:	2600      	movs	r6, #0
   41050:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   41052:	4669      	mov	r1, sp
   41054:	4628      	mov	r0, r5
   41056:	9603      	str	r6, [sp, #12]
   41058:	9302      	str	r3, [sp, #8]
   4105a:	f009 faba 	bl	4a5d2 <onoff_request>
	if (err < 0) {
   4105e:	2800      	cmp	r0, #0
   41060:	db10      	blt.n	41084 <blocking_on+0x4c>
   41062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   41066:	4631      	mov	r1, r6
   41068:	f240 30e7 	movw	r0, #999	; 0x3e7
   4106c:	fbe4 0103 	umlal	r0, r1, r4, r3
   41070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   41074:	2300      	movs	r3, #0
   41076:	f7e5 f843 	bl	26100 <__aeabi_uldivmod>
   4107a:	4602      	mov	r2, r0
   4107c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   4107e:	a804      	add	r0, sp, #16
   41080:	f007 fc3c 	bl	488fc <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   41084:	b00a      	add	sp, #40	; 0x28
   41086:	bd70      	pop	{r4, r5, r6, pc}
   41088:	00041031 	.word	0x00041031

0004108c <lll_clock_init>:

int lll_clock_init(void)
{
   4108c:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   4108e:	2001      	movs	r0, #1
   41090:	f004 f9c8 	bl	45424 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   41094:	4904      	ldr	r1, [pc, #16]	; (410a8 <lll_clock_init+0x1c>)
   41096:	2300      	movs	r3, #0
   41098:	2401      	movs	r4, #1
   4109a:	608c      	str	r4, [r1, #8]
   4109c:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   4109e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   410a2:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   410a4:	f009 ba95 	b.w	4a5d2 <onoff_request>
   410a8:	200064dc 	.word	0x200064dc

000410ac <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   410ac:	4b0c      	ldr	r3, [pc, #48]	; (410e0 <lll_clock_wait+0x34>)
   410ae:	781a      	ldrb	r2, [r3, #0]
   410b0:	b10a      	cbz	r2, 410b6 <lll_clock_wait+0xa>
		return 0;
   410b2:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   410b4:	4770      	bx	lr
{
   410b6:	b510      	push	{r4, lr}
	done = true;
   410b8:	2001      	movs	r0, #1
   410ba:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   410bc:	f004 f9b2 	bl	45424 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   410c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   410c4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   410c6:	f7ff ffb7 	bl	41038 <blocking_on>
	if (err) {
   410ca:	b938      	cbnz	r0, 410dc <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   410cc:	4620      	mov	r0, r4
   410ce:	f009 fac9 	bl	4a664 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   410d2:	2802      	cmp	r0, #2
		return 0;
   410d4:	bf0c      	ite	eq
   410d6:	2000      	moveq	r0, #0
		return -EIO;
   410d8:	f06f 0004 	mvnne.w	r0, #4
}
   410dc:	bd10      	pop	{r4, pc}
   410de:	bf00      	nop
   410e0:	20007794 	.word	0x20007794

000410e4 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   410e4:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   410e6:	4b0a      	ldr	r3, [pc, #40]	; (41110 <lll_hfclock_on+0x2c>)
   410e8:	f3bf 8f5b 	dmb	ish
   410ec:	e853 2f00 	ldrex	r2, [r3]
   410f0:	1c51      	adds	r1, r2, #1
   410f2:	e843 1000 	strex	r0, r1, [r3]
   410f6:	2800      	cmp	r0, #0
   410f8:	d1f8      	bne.n	410ec <lll_hfclock_on+0x8>
   410fa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   410fe:	2a00      	cmp	r2, #0
   41100:	dd01      	ble.n	41106 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   41102:	2000      	movs	r0, #0
   41104:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   41106:	f004 f995 	bl	45434 <z_nrf_clock_bt_ctlr_hf_request>
}
   4110a:	2000      	movs	r0, #0
   4110c:	bd08      	pop	{r3, pc}
   4110e:	bf00      	nop
   41110:	200064d8 	.word	0x200064d8

00041114 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   41114:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   41116:	4b0d      	ldr	r3, [pc, #52]	; (4114c <lll_hfclock_off+0x38>)
   41118:	681a      	ldr	r2, [r3, #0]
   4111a:	2a00      	cmp	r2, #0
   4111c:	dd12      	ble.n	41144 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4111e:	f3bf 8f5b 	dmb	ish
   41122:	e853 2f00 	ldrex	r2, [r3]
   41126:	1e51      	subs	r1, r2, #1
   41128:	e843 1000 	strex	r0, r1, [r3]
   4112c:	2800      	cmp	r0, #0
   4112e:	d1f8      	bne.n	41122 <lll_hfclock_off+0xe>
   41130:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   41134:	2a01      	cmp	r2, #1
   41136:	dd01      	ble.n	4113c <lll_hfclock_off+0x28>
		return 0;
   41138:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   4113a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   4113c:	f004 f990 	bl	45460 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   41140:	2000      	movs	r0, #0
}
   41142:	bd08      	pop	{r3, pc}
		return -EALREADY;
   41144:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   41148:	bd08      	pop	{r3, pc}
   4114a:	bf00      	nop
   4114c:	200064d8 	.word	0x200064d8

00041150 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   41150:	2005      	movs	r0, #5
   41152:	4770      	bx	lr

00041154 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   41154:	2032      	movs	r0, #50	; 0x32
   41156:	4770      	bx	lr

00041158 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   41158:	4b01      	ldr	r3, [pc, #4]	; (41160 <lll_clock_ppm_get+0x8>)
}
   4115a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   4115e:	4770      	bx	lr
   41160:	00055cb8 	.word	0x00055cb8

00041164 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   41164:	b510      	push	{r4, lr}
   41166:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   41168:	f7ff fe16 	bl	40d98 <lll_isr_status_reset>

	radio_filter_disable();
   4116c:	f002 fa7e 	bl	4366c <radio_filter_disable>

	lll_isr_cleanup(param);
   41170:	4620      	mov	r0, r4
}
   41172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   41176:	f7ff be1d 	b.w	40db4 <lll_isr_cleanup>
   4117a:	bf00      	nop

0004117c <isr_tx>:
{
   4117c:	b530      	push	{r4, r5, lr}
   4117e:	b083      	sub	sp, #12
   41180:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   41182:	f7ff fdf7 	bl	40d74 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   41186:	2096      	movs	r0, #150	; 0x96
   41188:	f002 faa2 	bl	436d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   4118c:	2300      	movs	r3, #0
   4118e:	4618      	mov	r0, r3
   41190:	461a      	mov	r2, r3
   41192:	4619      	mov	r1, r3
   41194:	f002 f9b8 	bl	43508 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41198:	2001      	movs	r0, #1
   4119a:	f7f7 f993 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   4119e:	4604      	mov	r4, r0
   411a0:	2800      	cmp	r0, #0
   411a2:	d043      	beq.n	4122c <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   411a4:	f104 001c 	add.w	r0, r4, #28
   411a8:	f002 f8e2 	bl	43370 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   411ac:	f002 f928 	bl	43400 <radio_is_ready>
   411b0:	b9e0      	cbnz	r0, 411ec <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   411b2:	4825      	ldr	r0, [pc, #148]	; (41248 <isr_tx+0xcc>)
   411b4:	4629      	mov	r1, r5
   411b6:	f002 f807 	bl	431c8 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   411ba:	f7ff fa11 	bl	405e0 <ull_filter_lll_rl_enabled>
   411be:	bb50      	cbnz	r0, 41216 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   411c0:	f002 fba0 	bl	43904 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   411c4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   411c6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   411c8:	4608      	mov	r0, r1
   411ca:	f002 f8e7 	bl	4339c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   411ce:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   411d0:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   411d2:	4608      	mov	r0, r1
   411d4:	f002 f8de 	bl	43394 <radio_tx_chain_delay_get>
   411d8:	442c      	add	r4, r5
   411da:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   411dc:	1a20      	subs	r0, r4, r0
   411de:	f002 fb49 	bl	43874 <radio_tmr_hcto_configure>
}
   411e2:	b003      	add	sp, #12
   411e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   411e8:	f002 bb7e 	b.w	438e8 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   411ec:	4a17      	ldr	r2, [pc, #92]	; (4124c <isr_tx+0xd0>)
   411ee:	4918      	ldr	r1, [pc, #96]	; (41250 <isr_tx+0xd4>)
   411f0:	4818      	ldr	r0, [pc, #96]	; (41254 <isr_tx+0xd8>)
   411f2:	f240 4345 	movw	r3, #1093	; 0x445
   411f6:	f009 f956 	bl	4a4a6 <printk>
   411fa:	4040      	eors	r0, r0
   411fc:	f380 8811 	msr	BASEPRI, r0
   41200:	f04f 0003 	mov.w	r0, #3
   41204:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   41206:	4810      	ldr	r0, [pc, #64]	; (41248 <isr_tx+0xcc>)
   41208:	4629      	mov	r1, r5
   4120a:	f001 ffdd 	bl	431c8 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   4120e:	f7ff f9e7 	bl	405e0 <ull_filter_lll_rl_enabled>
   41212:	2800      	cmp	r0, #0
   41214:	d0d4      	beq.n	411c0 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41216:	f10d 0007 	add.w	r0, sp, #7
   4121a:	f7ff f85b 	bl	402d4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   4121e:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41220:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   41222:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41226:	f002 fc05 	bl	43a34 <radio_ar_configure>
   4122a:	e7c9      	b.n	411c0 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   4122c:	4a07      	ldr	r2, [pc, #28]	; (4124c <isr_tx+0xd0>)
   4122e:	490a      	ldr	r1, [pc, #40]	; (41258 <isr_tx+0xdc>)
   41230:	4808      	ldr	r0, [pc, #32]	; (41254 <isr_tx+0xd8>)
   41232:	f240 4341 	movw	r3, #1089	; 0x441
   41236:	f009 f936 	bl	4a4a6 <printk>
   4123a:	4040      	eors	r0, r0
   4123c:	f380 8811 	msr	BASEPRI, r0
   41240:	f04f 0003 	mov.w	r0, #3
   41244:	df02      	svc	2
   41246:	e7ad      	b.n	411a4 <isr_tx+0x28>
   41248:	000419cd 	.word	0x000419cd
   4124c:	00055cc8 	.word	0x00055cc8
   41250:	00055d1c 	.word	0x00055d1c
   41254:	0005512c 	.word	0x0005512c
   41258:	00055d14 	.word	0x00055d14

0004125c <is_abort_cb>:
	if (next != curr) {
   4125c:	4281      	cmp	r1, r0
{
   4125e:	b508      	push	{r3, lr}
	if (next != curr) {
   41260:	d00e      	beq.n	41280 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   41262:	7a0b      	ldrb	r3, [r1, #8]
   41264:	07db      	lsls	r3, r3, #31
   41266:	d402      	bmi.n	4126e <is_abort_cb+0x12>
			return -ECANCELED;
   41268:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   4126c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   4126e:	4b13      	ldr	r3, [pc, #76]	; (412bc <is_abort_cb+0x60>)
   41270:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   41272:	f7ff ff37 	bl	410e4 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   41276:	2800      	cmp	r0, #0
   41278:	db0f      	blt.n	4129a <is_abort_cb+0x3e>
   4127a:	f06f 000a 	mvn.w	r0, #10
}
   4127e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   41280:	7b0b      	ldrb	r3, [r1, #12]
   41282:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   41286:	690b      	ldr	r3, [r1, #16]
   41288:	781b      	ldrb	r3, [r3, #0]
   4128a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   4128e:	2b01      	cmp	r3, #1
   41290:	bf14      	ite	ne
   41292:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   41296:	2000      	moveq	r0, #0
}
   41298:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   4129a:	4a09      	ldr	r2, [pc, #36]	; (412c0 <is_abort_cb+0x64>)
   4129c:	4909      	ldr	r1, [pc, #36]	; (412c4 <is_abort_cb+0x68>)
   4129e:	480a      	ldr	r0, [pc, #40]	; (412c8 <is_abort_cb+0x6c>)
   412a0:	f240 33fa 	movw	r3, #1018	; 0x3fa
   412a4:	f009 f8ff 	bl	4a4a6 <printk>
   412a8:	4040      	eors	r0, r0
   412aa:	f380 8811 	msr	BASEPRI, r0
   412ae:	f04f 0003 	mov.w	r0, #3
   412b2:	df02      	svc	2
   412b4:	f06f 000a 	mvn.w	r0, #10
}
   412b8:	bd08      	pop	{r3, pc}
   412ba:	bf00      	nop
   412bc:	000417e9 	.word	0x000417e9
   412c0:	00055cc8 	.word	0x00055cc8
   412c4:	00055c78 	.word	0x00055c78
   412c8:	0005512c 	.word	0x0005512c

000412cc <abort_cb>:
{
   412cc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   412ce:	b1d8      	cbz	r0, 41308 <abort_cb+0x3c>
	err = lll_hfclock_off();
   412d0:	460c      	mov	r4, r1
   412d2:	f7ff ff1f 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   412d6:	2800      	cmp	r0, #0
   412d8:	db04      	blt.n	412e4 <abort_cb+0x18>
	lll_done(param);
   412da:	4620      	mov	r0, r4
}
   412dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   412e0:	f7ff bc80 	b.w	40be4 <lll_done>
	LL_ASSERT(err >= 0);
   412e4:	4a0c      	ldr	r2, [pc, #48]	; (41318 <abort_cb+0x4c>)
   412e6:	490d      	ldr	r1, [pc, #52]	; (4131c <abort_cb+0x50>)
   412e8:	480d      	ldr	r0, [pc, #52]	; (41320 <abort_cb+0x54>)
   412ea:	f44f 6384 	mov.w	r3, #1056	; 0x420
   412ee:	f009 f8da 	bl	4a4a6 <printk>
   412f2:	4040      	eors	r0, r0
   412f4:	f380 8811 	msr	BASEPRI, r0
   412f8:	f04f 0003 	mov.w	r0, #3
   412fc:	df02      	svc	2
	lll_done(param);
   412fe:	4620      	mov	r0, r4
}
   41300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41304:	f7ff bc6e 	b.w	40be4 <lll_done>
		radio_isr_set(isr_abort, param);
   41308:	4806      	ldr	r0, [pc, #24]	; (41324 <abort_cb+0x58>)
   4130a:	f001 ff5d 	bl	431c8 <radio_isr_set>
}
   4130e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   41312:	f002 b855 	b.w	433c0 <radio_disable>
   41316:	bf00      	nop
   41318:	00055cc8 	.word	0x00055cc8
   4131c:	00055c78 	.word	0x00055c78
   41320:	0005512c 	.word	0x0005512c
   41324:	00041165 	.word	0x00041165

00041328 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   41328:	4b08      	ldr	r3, [pc, #32]	; (4134c <lll_adv_init+0x24>)
   4132a:	2204      	movs	r2, #4
{
   4132c:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   4132e:	1898      	adds	r0, r3, r2
   41330:	2128      	movs	r1, #40	; 0x28
   41332:	f7f3 f87f 	bl	34434 <mem_init>
	MFIFO_INIT(pdu_free);
   41336:	4b06      	ldr	r3, [pc, #24]	; (41350 <lll_adv_init+0x28>)
   41338:	2400      	movs	r4, #0
   4133a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   4133c:	2202      	movs	r2, #2
   4133e:	4621      	mov	r1, r4
   41340:	4804      	ldr	r0, [pc, #16]	; (41354 <lll_adv_init+0x2c>)
   41342:	f010 fa6a 	bl	5181a <z_impl_k_sem_init>
}
   41346:	4620      	mov	r0, r4
   41348:	bd10      	pop	{r4, pc}
   4134a:	bf00      	nop
   4134c:	200064ec 	.word	0x200064ec
   41350:	20000f28 	.word	0x20000f28
   41354:	20006590 	.word	0x20006590

00041358 <lll_adv_reset>:
   41358:	4b08      	ldr	r3, [pc, #32]	; (4137c <lll_adv_reset+0x24>)
   4135a:	2204      	movs	r2, #4
   4135c:	b510      	push	{r4, lr}
   4135e:	1898      	adds	r0, r3, r2
   41360:	2128      	movs	r1, #40	; 0x28
   41362:	f7f3 f867 	bl	34434 <mem_init>
   41366:	4b06      	ldr	r3, [pc, #24]	; (41380 <lll_adv_reset+0x28>)
   41368:	2400      	movs	r4, #0
   4136a:	805c      	strh	r4, [r3, #2]
   4136c:	2202      	movs	r2, #2
   4136e:	4621      	mov	r1, r4
   41370:	4804      	ldr	r0, [pc, #16]	; (41384 <lll_adv_reset+0x2c>)
   41372:	f010 fa52 	bl	5181a <z_impl_k_sem_init>
   41376:	4620      	mov	r0, r4
   41378:	bd10      	pop	{r4, pc}
   4137a:	bf00      	nop
   4137c:	200064ec 	.word	0x200064ec
   41380:	20000f28 	.word	0x20000f28
   41384:	20006590 	.word	0x20006590

00041388 <lll_adv_data_init>:
{
   41388:	b510      	push	{r4, lr}
   4138a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   4138c:	4805      	ldr	r0, [pc, #20]	; (413a4 <lll_adv_data_init+0x1c>)
   4138e:	f7f3 f881 	bl	34494 <mem_acquire>
	if (!p) {
   41392:	b120      	cbz	r0, 4139e <lll_adv_data_init+0x16>
   41394:	4603      	mov	r3, r0
	p->len = 0U;
   41396:	2000      	movs	r0, #0
   41398:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   4139a:	6063      	str	r3, [r4, #4]
}
   4139c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   4139e:	f06f 000b 	mvn.w	r0, #11
}
   413a2:	bd10      	pop	{r4, pc}
   413a4:	200064ec 	.word	0x200064ec

000413a8 <lll_adv_data_reset>:
{
   413a8:	4603      	mov	r3, r0
	pdu->first = 0U;
   413aa:	2000      	movs	r0, #0
   413ac:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   413ae:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   413b0:	6098      	str	r0, [r3, #8]
}
   413b2:	4770      	bx	lr

000413b4 <lll_adv_pdu_alloc_pdu_adv>:
{
   413b4:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   413b6:	4c35      	ldr	r4, [pc, #212]	; (4148c <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   413b8:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   413ba:	78e1      	ldrb	r1, [r4, #3]
   413bc:	7823      	ldrb	r3, [r4, #0]
   413be:	4291      	cmp	r1, r2
   413c0:	d003      	beq.n	413ca <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   413c2:	fb02 4303 	mla	r3, r2, r3, r4
   413c6:	685d      	ldr	r5, [r3, #4]
	if (p) {
   413c8:	b935      	cbnz	r5, 413d8 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   413ca:	4831      	ldr	r0, [pc, #196]	; (41490 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   413cc:	f7f3 f862 	bl	34494 <mem_acquire>
	if (p) {
   413d0:	4605      	mov	r5, r0
   413d2:	b1a0      	cbz	r0, 413fe <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   413d4:	4628      	mov	r0, r5
   413d6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   413d8:	482e      	ldr	r0, [pc, #184]	; (41494 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   413da:	2200      	movs	r2, #0
   413dc:	2300      	movs	r3, #0
   413de:	f007 fa8d 	bl	488fc <z_impl_k_sem_take>
		LL_ASSERT(!err);
   413e2:	bb40      	cbnz	r0, 41436 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   413e4:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   413e6:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   413e8:	7861      	ldrb	r1, [r4, #1]
   413ea:	429a      	cmp	r2, r3
   413ec:	d0f2      	beq.n	413d4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   413ee:	3301      	adds	r3, #1
   413f0:	b2db      	uxtb	r3, r3
		_first = 0U;
   413f2:	4299      	cmp	r1, r3
   413f4:	bf08      	it	eq
   413f6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   413f8:	70a3      	strb	r3, [r4, #2]
}
   413fa:	4628      	mov	r0, r5
   413fc:	bd38      	pop	{r3, r4, r5, pc}
   413fe:	4825      	ldr	r0, [pc, #148]	; (41494 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   41400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   41404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   41408:	f007 fa78 	bl	488fc <z_impl_k_sem_take>
	LL_ASSERT(!err);
   4140c:	2800      	cmp	r0, #0
   4140e:	d12e      	bne.n	4146e <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   41410:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   41412:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   41414:	7822      	ldrb	r2, [r4, #0]
   41416:	7860      	ldrb	r0, [r4, #1]
   41418:	4299      	cmp	r1, r3
   4141a:	d01a      	beq.n	41452 <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   4141c:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   41420:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   41422:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   41424:	b2db      	uxtb	r3, r3
		_first = 0U;
   41426:	4298      	cmp	r0, r3
   41428:	bf08      	it	eq
   4142a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   4142c:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   4142e:	b182      	cbz	r2, 41452 <lll_adv_pdu_alloc_pdu_adv+0x9e>
   41430:	4615      	mov	r5, r2
}
   41432:	4628      	mov	r0, r5
   41434:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   41436:	4a18      	ldr	r2, [pc, #96]	; (41498 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   41438:	4918      	ldr	r1, [pc, #96]	; (4149c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   4143a:	4819      	ldr	r0, [pc, #100]	; (414a0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   4143c:	f240 1397 	movw	r3, #407	; 0x197
   41440:	f009 f831 	bl	4a4a6 <printk>
   41444:	4040      	eors	r0, r0
   41446:	f380 8811 	msr	BASEPRI, r0
   4144a:	f04f 0003 	mov.w	r0, #3
   4144e:	df02      	svc	2
   41450:	e7c8      	b.n	413e4 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   41452:	4a11      	ldr	r2, [pc, #68]	; (41498 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   41454:	4913      	ldr	r1, [pc, #76]	; (414a4 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   41456:	4812      	ldr	r0, [pc, #72]	; (414a0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   41458:	f240 13ad 	movw	r3, #429	; 0x1ad
   4145c:	f009 f823 	bl	4a4a6 <printk>
   41460:	4040      	eors	r0, r0
   41462:	f380 8811 	msr	BASEPRI, r0
   41466:	f04f 0003 	mov.w	r0, #3
   4146a:	df02      	svc	2
   4146c:	e7b2      	b.n	413d4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   4146e:	4a0a      	ldr	r2, [pc, #40]	; (41498 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   41470:	490a      	ldr	r1, [pc, #40]	; (4149c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   41472:	480b      	ldr	r0, [pc, #44]	; (414a0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   41474:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   41478:	f009 f815 	bl	4a4a6 <printk>
   4147c:	4040      	eors	r0, r0
   4147e:	f380 8811 	msr	BASEPRI, r0
   41482:	f04f 0003 	mov.w	r0, #3
   41486:	df02      	svc	2
   41488:	e7c2      	b.n	41410 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   4148a:	bf00      	nop
   4148c:	20000f28 	.word	0x20000f28
   41490:	200064ec 	.word	0x200064ec
   41494:	20006590 	.word	0x20006590
   41498:	00055cc8 	.word	0x00055cc8
   4149c:	00055308 	.word	0x00055308
   414a0:	0005512c 	.word	0x0005512c
   414a4:	00055d30 	.word	0x00055d30

000414a8 <lll_adv_pdu_alloc>:
{
   414a8:	b510      	push	{r4, lr}
	first = pdu->first;
   414aa:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   414ac:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   414ae:	429a      	cmp	r2, r3
   414b0:	d014      	beq.n	414dc <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   414b2:	b2d4      	uxtb	r4, r2
   414b4:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   414b6:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   414b8:	4294      	cmp	r4, r2
   414ba:	d004      	beq.n	414c6 <lll_adv_pdu_alloc+0x1e>
			last++;
   414bc:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   414be:	7043      	strb	r3, [r0, #1]
			last++;
   414c0:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   414c2:	2b02      	cmp	r3, #2
   414c4:	d00e      	beq.n	414e4 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   414c6:	461c      	mov	r4, r3
	*idx = last;
   414c8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   414cc:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   414ce:	6860      	ldr	r0, [r4, #4]
	if (p) {
   414d0:	b100      	cbz	r0, 414d4 <lll_adv_pdu_alloc+0x2c>
}
   414d2:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   414d4:	f7ff ff6e 	bl	413b4 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   414d8:	6060      	str	r0, [r4, #4]
}
   414da:	bd10      	pop	{r4, pc}
		last++;
   414dc:	3301      	adds	r3, #1
   414de:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   414e0:	2b02      	cmp	r3, #2
   414e2:	d1f0      	bne.n	414c6 <lll_adv_pdu_alloc+0x1e>
{
   414e4:	2400      	movs	r4, #0
			last = 0U;
   414e6:	4623      	mov	r3, r4
   414e8:	e7ee      	b.n	414c8 <lll_adv_pdu_alloc+0x20>
   414ea:	bf00      	nop

000414ec <lll_adv_pdu_latest_get>:
{
   414ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   414ee:	4604      	mov	r4, r0
	first = pdu->first;
   414f0:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   414f2:	7840      	ldrb	r0, [r0, #1]
   414f4:	4298      	cmp	r0, r3
   414f6:	d028      	beq.n	4154a <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   414f8:	4a16      	ldr	r2, [pc, #88]	; (41554 <lll_adv_pdu_latest_get+0x68>)
   414fa:	460e      	mov	r6, r1
   414fc:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   414fe:	f892 c001 	ldrb.w	ip, [r2, #1]
   41502:	b2dd      	uxtb	r5, r3
	last = last + 1;
   41504:	1c4b      	adds	r3, r1, #1
   41506:	b2db      	uxtb	r3, r3
		last = 0U;
   41508:	459c      	cmp	ip, r3
   4150a:	bf08      	it	eq
   4150c:	2300      	moveq	r3, #0
   4150e:	f892 c002 	ldrb.w	ip, [r2, #2]
   41512:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   41516:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   41518:	6878      	ldr	r0, [r7, #4]
   4151a:	d009      	beq.n	41530 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   4151c:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   41520:	fb0c 2101 	mla	r1, ip, r1, r2
   41524:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   41526:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   41528:	480b      	ldr	r0, [pc, #44]	; (41558 <lll_adv_pdu_latest_get+0x6c>)
   4152a:	f007 f9c1 	bl	488b0 <z_impl_k_sem_give>
			p = next;
   4152e:	2000      	movs	r0, #0
		first += 1U;
   41530:	1c6b      	adds	r3, r5, #1
   41532:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   41534:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   41536:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   41538:	bf04      	itt	eq
   4153a:	2000      	moveq	r0, #0
			first = 0U;
   4153c:	4603      	moveq	r3, r0
		*is_modified = 1U;
   4153e:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   41542:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   41544:	bf18      	it	ne
   41546:	4618      	movne	r0, r3
		*is_modified = 1U;
   41548:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   4154a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   4154e:	6860      	ldr	r0, [r4, #4]
   41550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41552:	bf00      	nop
   41554:	20000f28 	.word	0x20000f28
   41558:	20006590 	.word	0x20006590

0004155c <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   4155c:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   4155e:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   41560:	f3c3 1302 	ubfx	r3, r3, #4, #3
   41564:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   41566:	4604      	mov	r4, r0
   41568:	fa93 f0a3 	rbit	r0, r3
   4156c:	fab0 f080 	clz	r0, r0
   41570:	bf08      	it	eq
   41572:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   41576:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   41578:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   4157a:	d043      	beq.n	41604 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   4157c:	7a21      	ldrb	r1, [r4, #8]
   4157e:	1e5a      	subs	r2, r3, #1
   41580:	4013      	ands	r3, r2
   41582:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   41586:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   4158a:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   4158c:	f7ff fbac 	bl	40ce8 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   41590:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   41592:	f10d 0107 	add.w	r1, sp, #7
   41596:	f104 000c 	add.w	r0, r4, #12
   4159a:	f88d 3007 	strb.w	r3, [sp, #7]
   4159e:	f7ff ffa5 	bl	414ec <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   415a2:	4605      	mov	r5, r0
   415a4:	2800      	cmp	r0, #0
   415a6:	d03e      	beq.n	41626 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   415a8:	4628      	mov	r0, r5
   415aa:	f001 fee7 	bl	4337c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   415ae:	782b      	ldrb	r3, [r5, #0]
   415b0:	f003 030f 	and.w	r3, r3, #15
   415b4:	2b02      	cmp	r3, #2
   415b6:	d01d      	beq.n	415f4 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   415b8:	f10d 0107 	add.w	r1, sp, #7
   415bc:	f104 0018 	add.w	r0, r4, #24
   415c0:	f7ff ff94 	bl	414ec <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   415c4:	4606      	mov	r6, r0
   415c6:	2800      	cmp	r0, #0
   415c8:	d03b      	beq.n	41642 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   415ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   415ce:	b95b      	cbnz	r3, 415e8 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   415d0:	4621      	mov	r1, r4
   415d2:	4823      	ldr	r0, [pc, #140]	; (41660 <chan_prepare.isra.0+0x104>)
   415d4:	f001 fdf8 	bl	431c8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   415d8:	2096      	movs	r0, #150	; 0x96
   415da:	f002 f879 	bl	436d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   415de:	2000      	movs	r0, #0
   415e0:	f001 ff4a 	bl	43478 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   415e4:	b002      	add	sp, #8
   415e6:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   415e8:	2206      	movs	r2, #6
   415ea:	1ca9      	adds	r1, r5, #2
   415ec:	1cb0      	adds	r0, r6, #2
   415ee:	f00b f862 	bl	4c6b6 <memcpy>
   415f2:	e7ed      	b.n	415d0 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   415f4:	481b      	ldr	r0, [pc, #108]	; (41664 <chan_prepare.isra.0+0x108>)
   415f6:	4621      	mov	r1, r4
   415f8:	f001 fde6 	bl	431c8 <radio_isr_set>
		radio_switch_complete_and_disable();
   415fc:	f001 ffe4 	bl	435c8 <radio_switch_complete_and_disable>
}
   41600:	b002      	add	sp, #8
   41602:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   41604:	4a18      	ldr	r2, [pc, #96]	; (41668 <chan_prepare.isra.0+0x10c>)
   41606:	4919      	ldr	r1, [pc, #100]	; (4166c <chan_prepare.isra.0+0x110>)
   41608:	4819      	ldr	r0, [pc, #100]	; (41670 <chan_prepare.isra.0+0x114>)
   4160a:	f240 5337 	movw	r3, #1335	; 0x537
   4160e:	f008 ff4a 	bl	4a4a6 <printk>
   41612:	4040      	eors	r0, r0
   41614:	f380 8811 	msr	BASEPRI, r0
   41618:	f04f 0003 	mov.w	r0, #3
   4161c:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   4161e:	7a23      	ldrb	r3, [r4, #8]
   41620:	f3c3 1302 	ubfx	r3, r3, #4, #3
   41624:	e7aa      	b.n	4157c <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   41626:	4a10      	ldr	r2, [pc, #64]	; (41668 <chan_prepare.isra.0+0x10c>)
   41628:	4912      	ldr	r1, [pc, #72]	; (41674 <chan_prepare.isra.0+0x118>)
   4162a:	4811      	ldr	r0, [pc, #68]	; (41670 <chan_prepare.isra.0+0x114>)
   4162c:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   41630:	f008 ff39 	bl	4a4a6 <printk>
   41634:	4040      	eors	r0, r0
   41636:	f380 8811 	msr	BASEPRI, r0
   4163a:	f04f 0003 	mov.w	r0, #3
   4163e:	df02      	svc	2
   41640:	e7b2      	b.n	415a8 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   41642:	4a09      	ldr	r2, [pc, #36]	; (41668 <chan_prepare.isra.0+0x10c>)
   41644:	490c      	ldr	r1, [pc, #48]	; (41678 <chan_prepare.isra.0+0x11c>)
   41646:	480a      	ldr	r0, [pc, #40]	; (41670 <chan_prepare.isra.0+0x114>)
   41648:	f240 534a 	movw	r3, #1354	; 0x54a
   4164c:	f008 ff2b 	bl	4a4a6 <printk>
   41650:	4040      	eors	r0, r0
   41652:	f380 8811 	msr	BASEPRI, r0
   41656:	f04f 0003 	mov.w	r0, #3
   4165a:	df02      	svc	2
   4165c:	e7b5      	b.n	415ca <chan_prepare.isra.0+0x6e>
   4165e:	bf00      	nop
   41660:	0004117d 	.word	0x0004117d
   41664:	0004167d 	.word	0x0004167d
   41668:	00055cc8 	.word	0x00055cc8
   4166c:	00055d34 	.word	0x00055d34
   41670:	0005512c 	.word	0x0005512c
   41674:	00055d3c 	.word	0x00055d3c
   41678:	00055d40 	.word	0x00055d40

0004167c <isr_done>:
{
   4167c:	b510      	push	{r4, lr}
   4167e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   41680:	f7ff fb8a 	bl	40d98 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   41684:	7a23      	ldrb	r3, [r4, #8]
   41686:	f003 0271 	and.w	r2, r3, #113	; 0x71
   4168a:	2a01      	cmp	r2, #1
   4168c:	d105      	bne.n	4169a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   4168e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   41692:	f362 1306 	bfi	r3, r2, #4, #3
   41696:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   41698:	b2db      	uxtb	r3, r3
   4169a:	f013 0f70 	tst.w	r3, #112	; 0x70
   4169e:	d005      	beq.n	416ac <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   416a0:	6863      	ldr	r3, [r4, #4]
   416a2:	b153      	cbz	r3, 416ba <isr_done+0x3e>
   416a4:	f893 3020 	ldrb.w	r3, [r3, #32]
   416a8:	079b      	lsls	r3, r3, #30
   416aa:	d506      	bpl.n	416ba <isr_done+0x3e>
	radio_filter_disable();
   416ac:	f001 ffde 	bl	4366c <radio_filter_disable>
	lll_isr_cleanup(param);
   416b0:	4620      	mov	r0, r4
}
   416b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   416b6:	f7ff bb7d 	b.w	40db4 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   416ba:	4620      	mov	r0, r4
   416bc:	f7ff ff4e 	bl	4155c <chan_prepare.isra.0>
		radio_tx_enable();
   416c0:	f001 fe78 	bl	433b4 <radio_tx_enable>
}
   416c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   416c8:	f002 b90e 	b.w	438e8 <radio_tmr_end_capture>

000416cc <prepare_cb>:
{
   416cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   416ce:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   416d0:	6863      	ldr	r3, [r4, #4]
{
   416d2:	b083      	sub	sp, #12
   416d4:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   416d6:	2b00      	cmp	r3, #0
   416d8:	d16d      	bne.n	417b6 <prepare_cb+0xea>
	radio_reset();
   416da:	f001 fdb7 	bl	4324c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   416de:	2008      	movs	r0, #8
   416e0:	f001 fde8 	bl	432b4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   416e4:	2100      	movs	r1, #0
   416e6:	4608      	mov	r0, r1
   416e8:	f001 fdd4 	bl	43294 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   416ec:	2200      	movs	r2, #0
   416ee:	2125      	movs	r1, #37	; 0x25
   416f0:	2008      	movs	r0, #8
   416f2:	f001 fe15 	bl	43320 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   416f6:	4b35      	ldr	r3, [pc, #212]	; (417cc <prepare_cb+0x100>)
   416f8:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   416fa:	a801      	add	r0, sp, #4
   416fc:	f001 fdf8 	bl	432f0 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   41700:	4933      	ldr	r1, [pc, #204]	; (417d0 <prepare_cb+0x104>)
   41702:	f240 605b 	movw	r0, #1627	; 0x65b
   41706:	f001 fe99 	bl	4343c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   4170a:	7a23      	ldrb	r3, [r4, #8]
   4170c:	f3c3 0242 	ubfx	r2, r3, #1, #3
   41710:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   41714:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   41716:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   41718:	f7ff ff20 	bl	4155c <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   4171c:	f7fe ff60 	bl	405e0 <ull_filter_lll_rl_enabled>
   41720:	bb98      	cbnz	r0, 4178a <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   41722:	7a63      	ldrb	r3, [r4, #9]
   41724:	079b      	lsls	r3, r3, #30
   41726:	d127      	bne.n	41778 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   41728:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   4172a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   4172c:	4638      	mov	r0, r7
   4172e:	f7ff fabd 	bl	40cac <lll_event_offset_get>
   41732:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   41734:	686a      	ldr	r2, [r5, #4]
   41736:	f106 0109 	add.w	r1, r6, #9
   4173a:	2001      	movs	r0, #1
   4173c:	f001 ffd4 	bl	436e8 <radio_tmr_start>
	radio_tmr_end_capture();
   41740:	f002 f8d2 	bl	438e8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   41744:	4620      	mov	r0, r4
   41746:	f7f7 fe57 	bl	393f8 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   4174a:	1c81      	adds	r1, r0, #2
   4174c:	4632      	mov	r2, r6
   4174e:	b2c9      	uxtb	r1, r1
   41750:	4638      	mov	r0, r7
   41752:	f7ff fab9 	bl	40cc8 <lll_preempt_calc>
   41756:	b930      	cbnz	r0, 41766 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   41758:	4620      	mov	r0, r4
   4175a:	f7ff fa41 	bl	40be0 <lll_prepare_done>
		LL_ASSERT(!ret);
   4175e:	b9d0      	cbnz	r0, 41796 <prepare_cb+0xca>
}
   41760:	2000      	movs	r0, #0
   41762:	b003      	add	sp, #12
   41764:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   41766:	481b      	ldr	r0, [pc, #108]	; (417d4 <prepare_cb+0x108>)
   41768:	4621      	mov	r1, r4
   4176a:	f001 fd2d 	bl	431c8 <radio_isr_set>
		radio_disable();
   4176e:	f001 fe27 	bl	433c0 <radio_disable>
}
   41772:	2000      	movs	r0, #0
   41774:	b003      	add	sp, #12
   41776:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41778:	2001      	movs	r0, #1
   4177a:	f7fe faa9 	bl	3fcd0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   4177e:	7841      	ldrb	r1, [r0, #1]
   41780:	1c82      	adds	r2, r0, #2
   41782:	7800      	ldrb	r0, [r0, #0]
   41784:	f001 ff52 	bl	4362c <radio_filter_configure>
   41788:	e7ce      	b.n	41728 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   4178a:	7a60      	ldrb	r0, [r4, #9]
   4178c:	f010 0003 	ands.w	r0, r0, #3
   41790:	bf18      	it	ne
   41792:	2001      	movne	r0, #1
   41794:	e7f1      	b.n	4177a <prepare_cb+0xae>
		LL_ASSERT(!ret);
   41796:	4a10      	ldr	r2, [pc, #64]	; (417d8 <prepare_cb+0x10c>)
   41798:	4910      	ldr	r1, [pc, #64]	; (417dc <prepare_cb+0x110>)
   4179a:	4811      	ldr	r0, [pc, #68]	; (417e0 <prepare_cb+0x114>)
   4179c:	f240 33d1 	movw	r3, #977	; 0x3d1
   417a0:	f008 fe81 	bl	4a4a6 <printk>
   417a4:	4040      	eors	r0, r0
   417a6:	f380 8811 	msr	BASEPRI, r0
   417aa:	f04f 0003 	mov.w	r0, #3
   417ae:	df02      	svc	2
}
   417b0:	2000      	movs	r0, #0
   417b2:	b003      	add	sp, #12
   417b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   417b6:	f893 3020 	ldrb.w	r3, [r3, #32]
   417ba:	079a      	lsls	r2, r3, #30
   417bc:	d08d      	beq.n	416da <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   417be:	4809      	ldr	r0, [pc, #36]	; (417e4 <prepare_cb+0x118>)
   417c0:	4621      	mov	r1, r4
   417c2:	f001 fd01 	bl	431c8 <radio_isr_set>
		radio_disable();
   417c6:	f001 fdfb 	bl	433c0 <radio_disable>
		return 0;
   417ca:	e7c9      	b.n	41760 <prepare_cb+0x94>
   417cc:	8e89bed6 	.word	0x8e89bed6
   417d0:	00555555 	.word	0x00555555
   417d4:	00041165 	.word	0x00041165
   417d8:	00055cc8 	.word	0x00055cc8
   417dc:	00055408 	.word	0x00055408
   417e0:	0005512c 	.word	0x0005512c
   417e4:	00040e45 	.word	0x00040e45

000417e8 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   417e8:	68c3      	ldr	r3, [r0, #12]
{
   417ea:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   417ec:	681e      	ldr	r6, [r3, #0]
{
   417ee:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   417f0:	f7f4 fa2a 	bl	35c48 <ticker_ticks_now_get>
   417f4:	4605      	mov	r5, r0
   417f6:	4630      	mov	r0, r6
   417f8:	f7ff fa58 	bl	40cac <lll_event_offset_get>
	p->remainder = 0;
   417fc:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   417fe:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   41800:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   41804:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   41806:	4620      	mov	r0, r4
}
   41808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   4180c:	f7ff bf5e 	b.w	416cc <prepare_cb>

00041810 <lll_adv_prepare>:
{
   41810:	b510      	push	{r4, lr}
   41812:	b082      	sub	sp, #8
   41814:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   41816:	f7ff fc65 	bl	410e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   4181a:	2800      	cmp	r0, #0
   4181c:	db1a      	blt.n	41854 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   4181e:	4a14      	ldr	r2, [pc, #80]	; (41870 <lll_adv_prepare+0x60>)
   41820:	4914      	ldr	r1, [pc, #80]	; (41874 <lll_adv_prepare+0x64>)
   41822:	4815      	ldr	r0, [pc, #84]	; (41878 <lll_adv_prepare+0x68>)
   41824:	9400      	str	r4, [sp, #0]
   41826:	2300      	movs	r3, #0
   41828:	f7f7 f980 	bl	38b2c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   4182c:	b108      	cbz	r0, 41832 <lll_adv_prepare+0x22>
   4182e:	3077      	adds	r0, #119	; 0x77
   41830:	d101      	bne.n	41836 <lll_adv_prepare+0x26>
}
   41832:	b002      	add	sp, #8
   41834:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   41836:	4a11      	ldr	r2, [pc, #68]	; (4187c <lll_adv_prepare+0x6c>)
   41838:	4911      	ldr	r1, [pc, #68]	; (41880 <lll_adv_prepare+0x70>)
   4183a:	4812      	ldr	r0, [pc, #72]	; (41884 <lll_adv_prepare+0x74>)
   4183c:	f240 239d 	movw	r3, #669	; 0x29d
   41840:	f008 fe31 	bl	4a4a6 <printk>
   41844:	4040      	eors	r0, r0
   41846:	f380 8811 	msr	BASEPRI, r0
   4184a:	f04f 0003 	mov.w	r0, #3
   4184e:	df02      	svc	2
}
   41850:	b002      	add	sp, #8
   41852:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   41854:	4a09      	ldr	r2, [pc, #36]	; (4187c <lll_adv_prepare+0x6c>)
   41856:	490c      	ldr	r1, [pc, #48]	; (41888 <lll_adv_prepare+0x78>)
   41858:	480a      	ldr	r0, [pc, #40]	; (41884 <lll_adv_prepare+0x74>)
   4185a:	f240 239a 	movw	r3, #666	; 0x29a
   4185e:	f008 fe22 	bl	4a4a6 <printk>
   41862:	4040      	eors	r0, r0
   41864:	f380 8811 	msr	BASEPRI, r0
   41868:	f04f 0003 	mov.w	r0, #3
   4186c:	df02      	svc	2
   4186e:	e7d6      	b.n	4181e <lll_adv_prepare+0xe>
   41870:	000416cd 	.word	0x000416cd
   41874:	000412cd 	.word	0x000412cd
   41878:	0004125d 	.word	0x0004125d
   4187c:	00055cc8 	.word	0x00055cc8
   41880:	00055d4c 	.word	0x00055d4c
   41884:	0005512c 	.word	0x0005512c
   41888:	00055c78 	.word	0x00055c78

0004188c <lll_adv_scan_req_check>:
{
   4188c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   41890:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   41894:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41898:	f01c 0f01 	tst.w	ip, #1
{
   4189c:	460f      	mov	r7, r1
   4189e:	4616      	mov	r6, r2
   418a0:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   418a2:	d009      	beq.n	418b8 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   418a4:	f1b8 0f00 	cmp.w	r8, #0
   418a8:	d016      	beq.n	418d8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   418aa:	783b      	ldrb	r3, [r7, #0]
   418ac:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   418b0:	d019      	beq.n	418e6 <lll_adv_scan_req_check+0x5a>
{
   418b2:	2000      	movs	r0, #0
}
   418b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   418b8:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   418ba:	f811 0b02 	ldrb.w	r0, [r1], #2
   418be:	9a07      	ldr	r2, [sp, #28]
   418c0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   418c4:	f7fe fe30 	bl	40528 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   418c8:	2800      	cmp	r0, #0
   418ca:	d1ee      	bne.n	418aa <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   418cc:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   418ce:	07db      	lsls	r3, r3, #31
   418d0:	d5ef      	bpl.n	418b2 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   418d2:	f1b8 0f00 	cmp.w	r8, #0
   418d6:	d1e8      	bne.n	418aa <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   418d8:	9b07      	ldr	r3, [sp, #28]
   418da:	7818      	ldrb	r0, [r3, #0]
   418dc:	f7fe fdc0 	bl	40460 <ull_filter_lll_irk_in_fal>
   418e0:	2800      	cmp	r0, #0
   418e2:	d1e2      	bne.n	418aa <lll_adv_scan_req_check+0x1e>
   418e4:	e7e5      	b.n	418b2 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   418e6:	2206      	movs	r2, #6
   418e8:	f107 0108 	add.w	r1, r7, #8
   418ec:	4628      	mov	r0, r5
   418ee:	f00a fed1 	bl	4c694 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   418f2:	fab0 f080 	clz	r0, r0
   418f6:	0940      	lsrs	r0, r0, #5
}
   418f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000418fc <lll_adv_connect_ind_check>:
{
   418fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41900:	461f      	mov	r7, r3
	if (tgt_addr) {
   41902:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   41904:	f89d 9020 	ldrb.w	r9, [sp, #32]
   41908:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   4190c:	4605      	mov	r5, r0
   4190e:	460c      	mov	r4, r1
   41910:	4690      	mov	r8, r2
	if (tgt_addr) {
   41912:	b9fb      	cbnz	r3, 41954 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   41914:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41916:	079a      	lsls	r2, r3, #30
   41918:	d507      	bpl.n	4192a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   4191a:	b1a6      	cbz	r6, 41946 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   4191c:	7823      	ldrb	r3, [r4, #0]
   4191e:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   41922:	d03a      	beq.n	4199a <lll_adv_connect_ind_check+0x9e>
   41924:	2000      	movs	r0, #0
}
   41926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   4192a:	f811 0b02 	ldrb.w	r0, [r1], #2
   4192e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41930:	f3c0 1080 	ubfx	r0, r0, #6, #1
   41934:	f7fe fdf8 	bl	40528 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   41938:	2800      	cmp	r0, #0
   4193a:	d1ef      	bne.n	4191c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   4193c:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   4193e:	079b      	lsls	r3, r3, #30
   41940:	d5f0      	bpl.n	41924 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   41942:	2e00      	cmp	r6, #0
   41944:	d1ea      	bne.n	4191c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41948:	7818      	ldrb	r0, [r3, #0]
   4194a:	f7fe fd89 	bl	40460 <ull_filter_lll_irk_in_fal>
   4194e:	2800      	cmp	r0, #0
   41950:	d1e4      	bne.n	4191c <lll_adv_connect_ind_check+0x20>
   41952:	e7e7      	b.n	41924 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   41954:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   41956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41958:	f81a 0b02 	ldrb.w	r0, [sl], #2
   4195c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   41960:	4651      	mov	r1, sl
   41962:	f7fe fde1 	bl	40528 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   41966:	2800      	cmp	r0, #0
   41968:	d0dc      	beq.n	41924 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   4196a:	7823      	ldrb	r3, [r4, #0]
   4196c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   41970:	d1d8      	bne.n	41924 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   41972:	4638      	mov	r0, r7
   41974:	2206      	movs	r2, #6
   41976:	f104 0108 	add.w	r1, r4, #8
   4197a:	f00a fe8b 	bl	4c694 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   4197e:	2800      	cmp	r0, #0
   41980:	d1d0      	bne.n	41924 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   41982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41984:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   41986:	28ff      	cmp	r0, #255	; 0xff
   41988:	d011      	beq.n	419ae <lll_adv_connect_ind_check+0xb2>
   4198a:	7aab      	ldrb	r3, [r5, #10]
   4198c:	2bff      	cmp	r3, #255	; 0xff
   4198e:	d00e      	beq.n	419ae <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   41990:	1ac0      	subs	r0, r0, r3
   41992:	fab0 f080 	clz	r0, r0
   41996:	0940      	lsrs	r0, r0, #5
   41998:	e7c5      	b.n	41926 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   4199a:	2206      	movs	r2, #6
   4199c:	f104 0108 	add.w	r1, r4, #8
   419a0:	4638      	mov	r0, r7
   419a2:	f00a fe77 	bl	4c694 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   419a6:	fab0 f080 	clz	r0, r0
   419aa:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   419ac:	e7bb      	b.n	41926 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   419ae:	7823      	ldrb	r3, [r4, #0]
   419b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   419b4:	454b      	cmp	r3, r9
   419b6:	d1b5      	bne.n	41924 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   419b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   419ba:	2206      	movs	r2, #6
   419bc:	4651      	mov	r1, sl
   419be:	f00a fe69 	bl	4c694 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   419c2:	fab0 f080 	clz	r0, r0
   419c6:	0940      	lsrs	r0, r0, #5
   419c8:	e7ad      	b.n	41926 <lll_adv_connect_ind_check+0x2a>
   419ca:	bf00      	nop

000419cc <isr_rx>:
{
   419cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   419d0:	b08b      	sub	sp, #44	; 0x2c
   419d2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   419d4:	f001 fd1e 	bl	43414 <radio_is_done>
	if (trx_done) {
   419d8:	b2c0      	uxtb	r0, r0
   419da:	b950      	cbnz	r0, 419f2 <isr_rx+0x26>
	lll_isr_status_reset();
   419dc:	f7ff f9dc 	bl	40d98 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   419e0:	487c      	ldr	r0, [pc, #496]	; (41bd4 <isr_rx+0x208>)
   419e2:	4621      	mov	r1, r4
   419e4:	f001 fbf0 	bl	431c8 <radio_isr_set>
}
   419e8:	b00b      	add	sp, #44	; 0x2c
   419ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   419ee:	f001 bce7 	b.w	433c0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   419f2:	f001 fd2f 	bl	43454 <radio_crc_is_valid>
   419f6:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   419f8:	f001 fe4a 	bl	43690 <radio_filter_has_match>
   419fc:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   419fe:	f001 fe51 	bl	436a4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   41a02:	f002 f867 	bl	43ad4 <radio_ar_has_match>
   41a06:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   41a08:	f002 f848 	bl	43a9c <radio_ar_match_get>
	if (crc_ok) {
   41a0c:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   41a0e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   41a10:	f001 fe02 	bl	43618 <radio_rssi_is_ready>
	lll_isr_status_reset();
   41a14:	f7ff f9c0 	bl	40d98 <lll_isr_status_reset>
	if (crc_ok) {
   41a18:	2d00      	cmp	r5, #0
   41a1a:	d0e1      	beq.n	419e0 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41a1c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   41a20:	d17a      	bne.n	41b18 <isr_rx+0x14c>
   41a22:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   41a24:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41a26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   41a2a:	f7f6 fd4b 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41a2e:	4605      	mov	r5, r0
   41a30:	2800      	cmp	r0, #0
   41a32:	f000 80a2 	beq.w	41b7a <isr_rx+0x1ae>
   41a36:	7b23      	ldrb	r3, [r4, #12]
   41a38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   41a3c:	f105 011c 	add.w	r1, r5, #28
   41a40:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   41a42:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   41a44:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   41a48:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   41a4c:	f000 0c0f 	and.w	ip, r0, #15
   41a50:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   41a54:	bf08      	it	eq
   41a56:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   41a5a:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   41a5e:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41a62:	7f28      	ldrb	r0, [r5, #28]
   41a64:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   41a68:	bf18      	it	ne
   41a6a:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41a6e:	2803      	cmp	r0, #3
   41a70:	d05a      	beq.n	41b28 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   41a72:	2805      	cmp	r0, #5
   41a74:	d1b4      	bne.n	419e0 <isr_rx+0x14>
   41a76:	7f68      	ldrb	r0, [r5, #29]
   41a78:	2822      	cmp	r0, #34	; 0x22
   41a7a:	d1b1      	bne.n	419e0 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   41a7c:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   41a7e:	2800      	cmp	r0, #0
   41a80:	d0ae      	beq.n	419e0 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   41a82:	f890 0020 	ldrb.w	r0, [r0, #32]
   41a86:	0780      	lsls	r0, r0, #30
   41a88:	d4aa      	bmi.n	419e0 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   41a8a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   41a8e:	9003      	str	r0, [sp, #12]
   41a90:	e9cd 8901 	strd	r8, r9, [sp, #4]
   41a94:	9700      	str	r7, [sp, #0]
   41a96:	4620      	mov	r0, r4
   41a98:	f7ff ff30 	bl	418fc <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   41a9c:	2800      	cmp	r0, #0
   41a9e:	d09f      	beq.n	419e0 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   41aa0:	2004      	movs	r0, #4
   41aa2:	f7f6 fd0f 	bl	384c4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   41aa6:	2800      	cmp	r0, #0
   41aa8:	d09a      	beq.n	419e0 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   41aaa:	484b      	ldr	r0, [pc, #300]	; (41bd8 <isr_rx+0x20c>)
   41aac:	4621      	mov	r1, r4
   41aae:	f001 fb8b 	bl	431c8 <radio_isr_set>
		radio_disable();
   41ab2:	f001 fc85 	bl	433c0 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   41ab6:	f001 fca3 	bl	43400 <radio_is_ready>
   41aba:	2800      	cmp	r0, #0
   41abc:	d14f      	bne.n	41b5e <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   41abe:	6862      	ldr	r2, [r4, #4]
   41ac0:	f892 3020 	ldrb.w	r3, [r2, #32]
   41ac4:	f043 0301 	orr.w	r3, r3, #1
   41ac8:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   41acc:	f7f6 fd18 	bl	38500 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   41ad0:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   41ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   41ad6:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   41ad8:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   41ada:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   41adc:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   41ade:	f001 feb7 	bl	43850 <radio_tmr_start_get>
   41ae2:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   41ae4:	f001 ff08 	bl	438f8 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   41ae8:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   41aea:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   41aec:	4608      	mov	r0, r1
   41aee:	f001 fc55 	bl	4339c <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   41af2:	1a24      	subs	r4, r4, r0
   41af4:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   41af6:	b1ae      	cbz	r6, 41b24 <isr_rx+0x158>
   41af8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   41afc:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   41afe:	f7f6 fcff 	bl	38500 <ull_pdu_rx_alloc>
   41b02:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   41b04:	4629      	mov	r1, r5
   41b06:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   41b08:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   41b0a:	f7f6 fd0f 	bl	3852c <ull_rx_put>
		ull_rx_sched();
   41b0e:	f7f6 fd1d 	bl	3854c <ull_rx_sched>
}
   41b12:	b00b      	add	sp, #44	; 0x2c
   41b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41b18:	fa5f f088 	uxtb.w	r0, r8
   41b1c:	f7fe fc4e 	bl	403bc <ull_filter_lll_rl_irk_idx>
   41b20:	4603      	mov	r3, r0
   41b22:	e77f      	b.n	41a24 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   41b24:	23ff      	movs	r3, #255	; 0xff
   41b26:	e7e9      	b.n	41afc <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41b28:	7f68      	ldrb	r0, [r5, #29]
   41b2a:	280c      	cmp	r0, #12
   41b2c:	f47f af58 	bne.w	419e0 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   41b30:	f1b8 0f00 	cmp.w	r8, #0
   41b34:	f47f af54 	bne.w	419e0 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   41b38:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   41b3c:	9001      	str	r0, [sp, #4]
   41b3e:	f8cd 9000 	str.w	r9, [sp]
   41b42:	4620      	mov	r0, r4
   41b44:	e9cd 2306 	strd	r2, r3, [sp, #24]
   41b48:	9105      	str	r1, [sp, #20]
   41b4a:	f7ff fe9f 	bl	4188c <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   41b4e:	bb10      	cbnz	r0, 41b96 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   41b50:	7f28      	ldrb	r0, [r5, #28]
   41b52:	9b07      	ldr	r3, [sp, #28]
   41b54:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   41b58:	f000 000f 	and.w	r0, r0, #15
   41b5c:	e789      	b.n	41a72 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   41b5e:	4a1f      	ldr	r2, [pc, #124]	; (41bdc <isr_rx+0x210>)
   41b60:	491f      	ldr	r1, [pc, #124]	; (41be0 <isr_rx+0x214>)
   41b62:	4820      	ldr	r0, [pc, #128]	; (41be4 <isr_rx+0x218>)
   41b64:	f240 53da 	movw	r3, #1498	; 0x5da
   41b68:	f008 fc9d 	bl	4a4a6 <printk>
   41b6c:	4040      	eors	r0, r0
   41b6e:	f380 8811 	msr	BASEPRI, r0
   41b72:	f04f 0003 	mov.w	r0, #3
   41b76:	df02      	svc	2
   41b78:	e7a1      	b.n	41abe <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   41b7a:	4a18      	ldr	r2, [pc, #96]	; (41bdc <isr_rx+0x210>)
   41b7c:	491a      	ldr	r1, [pc, #104]	; (41be8 <isr_rx+0x21c>)
   41b7e:	4819      	ldr	r0, [pc, #100]	; (41be4 <isr_rx+0x218>)
   41b80:	f240 537a 	movw	r3, #1402	; 0x57a
   41b84:	f008 fc8f 	bl	4a4a6 <printk>
   41b88:	4040      	eors	r0, r0
   41b8a:	f380 8811 	msr	BASEPRI, r0
   41b8e:	f04f 0003 	mov.w	r0, #3
   41b92:	df02      	svc	2
   41b94:	e74f      	b.n	41a36 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   41b96:	4621      	mov	r1, r4
   41b98:	480e      	ldr	r0, [pc, #56]	; (41bd4 <isr_rx+0x208>)
   41b9a:	f001 fb15 	bl	431c8 <radio_isr_set>
		radio_switch_complete_and_disable();
   41b9e:	f001 fd13 	bl	435c8 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   41ba2:	7e23      	ldrb	r3, [r4, #24]
   41ba4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   41ba8:	69e0      	ldr	r0, [r4, #28]
   41baa:	f001 fbe7 	bl	4337c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   41bae:	f001 fc27 	bl	43400 <radio_is_ready>
   41bb2:	2800      	cmp	r0, #0
   41bb4:	d0ad      	beq.n	41b12 <isr_rx+0x146>
   41bb6:	4a09      	ldr	r2, [pc, #36]	; (41bdc <isr_rx+0x210>)
   41bb8:	4909      	ldr	r1, [pc, #36]	; (41be0 <isr_rx+0x214>)
   41bba:	480a      	ldr	r0, [pc, #40]	; (41be4 <isr_rx+0x218>)
   41bbc:	f240 5393 	movw	r3, #1427	; 0x593
   41bc0:	f008 fc71 	bl	4a4a6 <printk>
   41bc4:	4040      	eors	r0, r0
   41bc6:	f380 8811 	msr	BASEPRI, r0
   41bca:	f04f 0003 	mov.w	r0, #3
   41bce:	df02      	svc	2
		if (!err) {
   41bd0:	e79f      	b.n	41b12 <isr_rx+0x146>
   41bd2:	bf00      	nop
   41bd4:	0004167d 	.word	0x0004167d
   41bd8:	00041165 	.word	0x00041165
   41bdc:	00055cc8 	.word	0x00055cc8
   41be0:	00055d1c 	.word	0x00055d1c
   41be4:	0005512c 	.word	0x0005512c
   41be8:	00055d14 	.word	0x00055d14

00041bec <common_prepare_cb>:
{
   41bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   41bf0:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   41bf2:	f994 3016 	ldrsb.w	r3, [r4, #22]
   41bf6:	2b00      	cmp	r3, #0
{
   41bf8:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   41bfa:	f2c0 810e 	blt.w	41e1a <common_prepare_cb+0x22e>
   41bfe:	6863      	ldr	r3, [r4, #4]
   41c00:	4605      	mov	r5, r0
   41c02:	460f      	mov	r7, r1
   41c04:	2b00      	cmp	r3, #0
   41c06:	f040 80fd 	bne.w	41e04 <common_prepare_cb+0x218>
	lll->state = 0U;
   41c0a:	7da3      	ldrb	r3, [r4, #22]
   41c0c:	f36f 0300 	bfc	r3, #0, #1
   41c10:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   41c12:	f001 fb1b 	bl	4324c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   41c16:	2008      	movs	r0, #8
   41c18:	f001 fb4c 	bl	432b4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   41c1c:	2100      	movs	r1, #0
   41c1e:	4608      	mov	r0, r1
   41c20:	f001 fb38 	bl	43294 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   41c24:	2200      	movs	r2, #0
   41c26:	2125      	movs	r1, #37	; 0x25
   41c28:	2008      	movs	r0, #8
   41c2a:	f001 fb79 	bl	43320 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41c2e:	2001      	movs	r0, #1
   41c30:	f7f6 fc48 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41c34:	4606      	mov	r6, r0
   41c36:	2800      	cmp	r0, #0
   41c38:	f000 80d6 	beq.w	41de8 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   41c3c:	f106 001c 	add.w	r0, r6, #28
   41c40:	f001 fb96 	bl	43370 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   41c44:	4b7a      	ldr	r3, [pc, #488]	; (41e30 <common_prepare_cb+0x244>)
   41c46:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   41c48:	a80b      	add	r0, sp, #44	; 0x2c
   41c4a:	f001 fb51 	bl	432f0 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   41c4e:	4979      	ldr	r1, [pc, #484]	; (41e34 <common_prepare_cb+0x248>)
   41c50:	f240 605b 	movw	r0, #1627	; 0x65b
   41c54:	f001 fbf2 	bl	4343c <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   41c58:	7da0      	ldrb	r0, [r4, #22]
   41c5a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   41c5e:	3025      	adds	r0, #37	; 0x25
   41c60:	f7ff f842 	bl	40ce8 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   41c64:	4874      	ldr	r0, [pc, #464]	; (41e38 <common_prepare_cb+0x24c>)
   41c66:	4621      	mov	r1, r4
   41c68:	f001 faae 	bl	431c8 <radio_isr_set>
	} else if (lll->type ||
   41c6c:	7da3      	ldrb	r3, [r4, #22]
   41c6e:	069b      	lsls	r3, r3, #26
   41c70:	d403      	bmi.n	41c7a <common_prepare_cb+0x8e>
		   lll->conn) {
   41c72:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41c74:	2b00      	cmp	r3, #0
   41c76:	f000 8091 	beq.w	41d9c <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   41c7a:	2096      	movs	r0, #150	; 0x96
   41c7c:	f001 fd28 	bl	436d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   41c80:	2300      	movs	r3, #0
   41c82:	461a      	mov	r2, r3
   41c84:	4619      	mov	r1, r3
   41c86:	4618      	mov	r0, r3
   41c88:	f001 fc3e 	bl	43508 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   41c8c:	f7fe fca8 	bl	405e0 <ull_filter_lll_rl_enabled>
   41c90:	2800      	cmp	r0, #0
   41c92:	d135      	bne.n	41d00 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   41c94:	7da3      	ldrb	r3, [r4, #22]
   41c96:	f013 0f18 	tst.w	r3, #24
   41c9a:	d152      	bne.n	41d42 <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   41c9c:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   41ca0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   41ca2:	4640      	mov	r0, r8
   41ca4:	f7ff f802 	bl	40cac <lll_event_offset_get>
   41ca8:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   41caa:	686a      	ldr	r2, [r5, #4]
   41cac:	f106 0109 	add.w	r1, r6, #9
   41cb0:	2000      	movs	r0, #0
   41cb2:	f001 fd19 	bl	436e8 <radio_tmr_start>
	radio_tmr_end_capture();
   41cb6:	f001 fe17 	bl	438e8 <radio_tmr_end_capture>
	radio_rssi_measure();
   41cba:	f001 fc95 	bl	435e8 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   41cbe:	4620      	mov	r0, r4
   41cc0:	f7f7 fdae 	bl	39820 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   41cc4:	1d01      	adds	r1, r0, #4
   41cc6:	b2c9      	uxtb	r1, r1
   41cc8:	4640      	mov	r0, r8
   41cca:	4632      	mov	r2, r6
   41ccc:	f7fe fffc 	bl	40cc8 <lll_preempt_calc>
   41cd0:	bb68      	cbnz	r0, 41d2e <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   41cd2:	b917      	cbnz	r7, 41cda <common_prepare_cb+0xee>
   41cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   41cd6:	2b00      	cmp	r3, #0
   41cd8:	d163      	bne.n	41da2 <common_prepare_cb+0x1b6>
		if (lll->conn) {
   41cda:	6863      	ldr	r3, [r4, #4]
   41cdc:	b143      	cbz	r3, 41cf0 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   41cde:	4b57      	ldr	r3, [pc, #348]	; (41e3c <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41ce0:	2201      	movs	r2, #1
   41ce2:	2102      	movs	r1, #2
   41ce4:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   41ce6:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41ce8:	f7f2 fcac 	bl	34644 <mayfly_enqueue>
			LL_ASSERT(!retval);
   41cec:	2800      	cmp	r0, #0
   41cee:	d142      	bne.n	41d76 <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   41cf0:	4620      	mov	r0, r4
   41cf2:	f7fe ff75 	bl	40be0 <lll_prepare_done>
		LL_ASSERT(!ret);
   41cf6:	bb68      	cbnz	r0, 41d54 <common_prepare_cb+0x168>
}
   41cf8:	2000      	movs	r0, #0
   41cfa:	b00c      	add	sp, #48	; 0x30
   41cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   41d00:	7da0      	ldrb	r0, [r4, #22]
   41d02:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   41d06:	f7fd ffe3 	bl	3fcd0 <ull_filter_lll_get>
   41d0a:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41d0c:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   41d10:	f7fe fae0 	bl	402d4 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   41d14:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41d16:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   41d18:	1cb2      	adds	r2, r6, #2
   41d1a:	7830      	ldrb	r0, [r6, #0]
   41d1c:	f001 fc86 	bl	4362c <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   41d20:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   41d24:	2200      	movs	r2, #0
   41d26:	4641      	mov	r1, r8
   41d28:	f001 fe84 	bl	43a34 <radio_ar_configure>
   41d2c:	e7b6      	b.n	41c9c <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   41d2e:	4844      	ldr	r0, [pc, #272]	; (41e40 <common_prepare_cb+0x254>)
   41d30:	4621      	mov	r1, r4
   41d32:	f001 fa49 	bl	431c8 <radio_isr_set>
		radio_disable();
   41d36:	f001 fb43 	bl	433c0 <radio_disable>
}
   41d3a:	2000      	movs	r0, #0
   41d3c:	b00c      	add	sp, #48	; 0x30
   41d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41d42:	2001      	movs	r0, #1
   41d44:	f7fd ffc4 	bl	3fcd0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   41d48:	7841      	ldrb	r1, [r0, #1]
   41d4a:	1c82      	adds	r2, r0, #2
   41d4c:	7800      	ldrb	r0, [r0, #0]
   41d4e:	f001 fc6d 	bl	4362c <radio_filter_configure>
   41d52:	e7a3      	b.n	41c9c <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   41d54:	4a3b      	ldr	r2, [pc, #236]	; (41e44 <common_prepare_cb+0x258>)
   41d56:	493c      	ldr	r1, [pc, #240]	; (41e48 <common_prepare_cb+0x25c>)
   41d58:	483c      	ldr	r0, [pc, #240]	; (41e4c <common_prepare_cb+0x260>)
   41d5a:	f44f 7305 	mov.w	r3, #532	; 0x214
   41d5e:	f008 fba2 	bl	4a4a6 <printk>
   41d62:	4040      	eors	r0, r0
   41d64:	f380 8811 	msr	BASEPRI, r0
   41d68:	f04f 0003 	mov.w	r0, #3
   41d6c:	df02      	svc	2
}
   41d6e:	2000      	movs	r0, #0
   41d70:	b00c      	add	sp, #48	; 0x30
   41d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   41d76:	4a33      	ldr	r2, [pc, #204]	; (41e44 <common_prepare_cb+0x258>)
   41d78:	4935      	ldr	r1, [pc, #212]	; (41e50 <common_prepare_cb+0x264>)
   41d7a:	4834      	ldr	r0, [pc, #208]	; (41e4c <common_prepare_cb+0x260>)
   41d7c:	f240 230f 	movw	r3, #527	; 0x20f
   41d80:	f008 fb91 	bl	4a4a6 <printk>
   41d84:	4040      	eors	r0, r0
   41d86:	f380 8811 	msr	BASEPRI, r0
   41d8a:	f04f 0003 	mov.w	r0, #3
   41d8e:	df02      	svc	2
		ret = lll_prepare_done(lll);
   41d90:	4620      	mov	r0, r4
   41d92:	f7fe ff25 	bl	40be0 <lll_prepare_done>
		LL_ASSERT(!ret);
   41d96:	2800      	cmp	r0, #0
   41d98:	d0ae      	beq.n	41cf8 <common_prepare_cb+0x10c>
   41d9a:	e7db      	b.n	41d54 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   41d9c:	f001 fc14 	bl	435c8 <radio_switch_complete_and_disable>
   41da0:	e774      	b.n	41c8c <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   41da2:	4a2c      	ldr	r2, [pc, #176]	; (41e54 <common_prepare_cb+0x268>)
   41da4:	9207      	str	r2, [sp, #28]
   41da6:	4a2c      	ldr	r2, [pc, #176]	; (41e58 <common_prepare_cb+0x26c>)
   41da8:	9205      	str	r2, [sp, #20]
   41daa:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   41dae:	9300      	str	r3, [sp, #0]
   41db0:	9208      	str	r2, [sp, #32]
   41db2:	4633      	mov	r3, r6
   41db4:	e9cd 7703 	strd	r7, r7, [sp, #12]
   41db8:	e9cd 7701 	strd	r7, r7, [sp, #4]
   41dbc:	9406      	str	r4, [sp, #24]
   41dbe:	4639      	mov	r1, r7
   41dc0:	2203      	movs	r2, #3
   41dc2:	f7f3 fe17 	bl	359f4 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   41dc6:	f030 0302 	bics.w	r3, r0, #2
   41dca:	d086      	beq.n	41cda <common_prepare_cb+0xee>
   41dcc:	4a1d      	ldr	r2, [pc, #116]	; (41e44 <common_prepare_cb+0x258>)
   41dce:	4923      	ldr	r1, [pc, #140]	; (41e5c <common_prepare_cb+0x270>)
   41dd0:	481e      	ldr	r0, [pc, #120]	; (41e4c <common_prepare_cb+0x260>)
   41dd2:	f240 13fb 	movw	r3, #507	; 0x1fb
   41dd6:	f008 fb66 	bl	4a4a6 <printk>
   41dda:	4040      	eors	r0, r0
   41ddc:	f380 8811 	msr	BASEPRI, r0
   41de0:	f04f 0003 	mov.w	r0, #3
   41de4:	df02      	svc	2
   41de6:	e778      	b.n	41cda <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   41de8:	4a16      	ldr	r2, [pc, #88]	; (41e44 <common_prepare_cb+0x258>)
   41dea:	491d      	ldr	r1, [pc, #116]	; (41e60 <common_prepare_cb+0x274>)
   41dec:	4817      	ldr	r0, [pc, #92]	; (41e4c <common_prepare_cb+0x260>)
   41dee:	f240 138d 	movw	r3, #397	; 0x18d
   41df2:	f008 fb58 	bl	4a4a6 <printk>
   41df6:	4040      	eors	r0, r0
   41df8:	f380 8811 	msr	BASEPRI, r0
   41dfc:	f04f 0003 	mov.w	r0, #3
   41e00:	df02      	svc	2
   41e02:	e71b      	b.n	41c3c <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   41e04:	6863      	ldr	r3, [r4, #4]
   41e06:	f893 3020 	ldrb.w	r3, [r3, #32]
   41e0a:	07d9      	lsls	r1, r3, #31
   41e0c:	d405      	bmi.n	41e1a <common_prepare_cb+0x22e>
   41e0e:	6863      	ldr	r3, [r4, #4]
   41e10:	f893 3020 	ldrb.w	r3, [r3, #32]
   41e14:	079a      	lsls	r2, r3, #30
   41e16:	f57f aef8 	bpl.w	41c0a <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   41e1a:	4812      	ldr	r0, [pc, #72]	; (41e64 <common_prepare_cb+0x278>)
   41e1c:	4621      	mov	r1, r4
   41e1e:	f001 f9d3 	bl	431c8 <radio_isr_set>
		radio_disable();
   41e22:	f001 facd 	bl	433c0 <radio_disable>
}
   41e26:	2000      	movs	r0, #0
   41e28:	b00c      	add	sp, #48	; 0x30
   41e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41e2e:	bf00      	nop
   41e30:	8e89bed6 	.word	0x8e89bed6
   41e34:	00555555 	.word	0x00555555
   41e38:	00028759 	.word	0x00028759
   41e3c:	20000f48 	.word	0x20000f48
   41e40:	00041f11 	.word	0x00041f11
   41e44:	00055d60 	.word	0x00055d60
   41e48:	00055408 	.word	0x00055408
   41e4c:	0005512c 	.word	0x0005512c
   41e50:	00055430 	.word	0x00055430
   41e54:	00042035 	.word	0x00042035
   41e58:	000420dd 	.word	0x000420dd
   41e5c:	000554dc 	.word	0x000554dc
   41e60:	00055d14 	.word	0x00055d14
   41e64:	00040e45 	.word	0x00040e45

00041e68 <prepare_cb>:
	return common_prepare_cb(p, false);
   41e68:	2100      	movs	r1, #0
   41e6a:	f7ff bebf 	b.w	41bec <common_prepare_cb>
   41e6e:	bf00      	nop

00041e70 <isr_common_done>:
{
   41e70:	b530      	push	{r4, r5, lr}
   41e72:	4604      	mov	r4, r0
   41e74:	b083      	sub	sp, #12
	lll_isr_status_reset();
   41e76:	f7fe ff8f 	bl	40d98 <lll_isr_status_reset>
	lll->state = 0U;
   41e7a:	7da3      	ldrb	r3, [r4, #22]
   41e7c:	f36f 0300 	bfc	r3, #0, #1
   41e80:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   41e82:	069b      	lsls	r3, r3, #26
   41e84:	d401      	bmi.n	41e8a <isr_common_done+0x1a>
		   lll->conn) {
   41e86:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41e88:	b3b3      	cbz	r3, 41ef8 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   41e8a:	2096      	movs	r0, #150	; 0x96
   41e8c:	f001 fc20 	bl	436d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   41e90:	2300      	movs	r3, #0
   41e92:	461a      	mov	r2, r3
   41e94:	4619      	mov	r1, r3
   41e96:	4618      	mov	r0, r3
   41e98:	f001 fb36 	bl	43508 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41e9c:	2001      	movs	r0, #1
   41e9e:	f7f6 fb11 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41ea2:	4605      	mov	r5, r0
   41ea4:	b1d0      	cbz	r0, 41edc <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   41ea6:	f105 001c 	add.w	r0, r5, #28
   41eaa:	f001 fa61 	bl	43370 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   41eae:	f7fe fb97 	bl	405e0 <ull_filter_lll_rl_enabled>
   41eb2:	b940      	cbnz	r0, 41ec6 <isr_common_done+0x56>
	radio_rssi_measure();
   41eb4:	f001 fb98 	bl	435e8 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   41eb8:	4811      	ldr	r0, [pc, #68]	; (41f00 <isr_common_done+0x90>)
   41eba:	4621      	mov	r1, r4
}
   41ebc:	b003      	add	sp, #12
   41ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   41ec2:	f001 b981 	b.w	431c8 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41ec6:	f10d 0007 	add.w	r0, sp, #7
   41eca:	f7fe fa03 	bl	402d4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   41ece:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41ed0:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   41ed2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41ed6:	f001 fdad 	bl	43a34 <radio_ar_configure>
   41eda:	e7eb      	b.n	41eb4 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   41edc:	4a09      	ldr	r2, [pc, #36]	; (41f04 <isr_common_done+0x94>)
   41ede:	490a      	ldr	r1, [pc, #40]	; (41f08 <isr_common_done+0x98>)
   41ee0:	480a      	ldr	r0, [pc, #40]	; (41f0c <isr_common_done+0x9c>)
   41ee2:	f44f 7352 	mov.w	r3, #840	; 0x348
   41ee6:	f008 fade 	bl	4a4a6 <printk>
   41eea:	4040      	eors	r0, r0
   41eec:	f380 8811 	msr	BASEPRI, r0
   41ef0:	f04f 0003 	mov.w	r0, #3
   41ef4:	df02      	svc	2
   41ef6:	e7d6      	b.n	41ea6 <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   41ef8:	f001 fb66 	bl	435c8 <radio_switch_complete_and_disable>
   41efc:	e7ce      	b.n	41e9c <isr_common_done+0x2c>
   41efe:	bf00      	nop
   41f00:	00028759 	.word	0x00028759
   41f04:	00055d60 	.word	0x00055d60
   41f08:	00055d14 	.word	0x00055d14
   41f0c:	0005512c 	.word	0x0005512c

00041f10 <isr_abort>:
{
   41f10:	b510      	push	{r4, lr}
   41f12:	4604      	mov	r4, r0
	lll_isr_status_reset();
   41f14:	f7fe ff40 	bl	40d98 <lll_isr_status_reset>
	radio_filter_disable();
   41f18:	f001 fba8 	bl	4366c <radio_filter_disable>
	lll_isr_cleanup(param);
   41f1c:	4620      	mov	r0, r4
}
   41f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   41f22:	f7fe bf47 	b.w	40db4 <lll_isr_cleanup>
   41f26:	bf00      	nop

00041f28 <isr_done>:
{
   41f28:	b508      	push	{r3, lr}
	isr_common_done(param);
   41f2a:	f7ff ffa1 	bl	41e70 <isr_common_done>
	radio_rx_enable();
   41f2e:	f001 fa3b 	bl	433a8 <radio_rx_enable>
}
   41f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   41f36:	f001 bcd7 	b.w	438e8 <radio_tmr_end_capture>
   41f3a:	bf00      	nop

00041f3c <isr_tx>:
{
   41f3c:	b570      	push	{r4, r5, r6, lr}
   41f3e:	b082      	sub	sp, #8
   41f40:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   41f42:	f7fe ff17 	bl	40d74 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   41f46:	f001 fb3f 	bl	435c8 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41f4a:	2001      	movs	r0, #1
   41f4c:	f7f6 faba 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41f50:	4604      	mov	r4, r0
   41f52:	2800      	cmp	r0, #0
   41f54:	d03f      	beq.n	41fd6 <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   41f56:	f104 001c 	add.w	r0, r4, #28
   41f5a:	f001 fa09 	bl	43370 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   41f5e:	f001 fa4f 	bl	43400 <radio_is_ready>
   41f62:	b9e0      	cbnz	r0, 41f9e <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   41f64:	f7fe fb3c 	bl	405e0 <ull_filter_lll_rl_enabled>
   41f68:	bb50      	cbnz	r0, 41fc0 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41f6a:	f001 fccb 	bl	43904 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   41f6e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41f70:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   41f72:	4608      	mov	r0, r1
   41f74:	f001 fa12 	bl	4339c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   41f78:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   41f7a:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   41f7c:	4608      	mov	r0, r1
   41f7e:	f001 fa09 	bl	43394 <radio_tx_chain_delay_get>
   41f82:	4434      	add	r4, r6
   41f84:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   41f86:	1a20      	subs	r0, r4, r0
   41f88:	f001 fc74 	bl	43874 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   41f8c:	f001 fb2c 	bl	435e8 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   41f90:	4818      	ldr	r0, [pc, #96]	; (41ff4 <isr_tx+0xb8>)
   41f92:	4629      	mov	r1, r5
}
   41f94:	b002      	add	sp, #8
   41f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   41f9a:	f001 b915 	b.w	431c8 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   41f9e:	4a16      	ldr	r2, [pc, #88]	; (41ff8 <isr_tx+0xbc>)
   41fa0:	4916      	ldr	r1, [pc, #88]	; (41ffc <isr_tx+0xc0>)
   41fa2:	4817      	ldr	r0, [pc, #92]	; (42000 <isr_tx+0xc4>)
   41fa4:	f240 3306 	movw	r3, #774	; 0x306
   41fa8:	f008 fa7d 	bl	4a4a6 <printk>
   41fac:	4040      	eors	r0, r0
   41fae:	f380 8811 	msr	BASEPRI, r0
   41fb2:	f04f 0003 	mov.w	r0, #3
   41fb6:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   41fb8:	f7fe fb12 	bl	405e0 <ull_filter_lll_rl_enabled>
   41fbc:	2800      	cmp	r0, #0
   41fbe:	d0d4      	beq.n	41f6a <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41fc0:	f10d 0007 	add.w	r0, sp, #7
   41fc4:	f7fe f986 	bl	402d4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   41fc8:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41fca:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   41fcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41fd0:	f001 fd30 	bl	43a34 <radio_ar_configure>
   41fd4:	e7c9      	b.n	41f6a <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   41fd6:	4a08      	ldr	r2, [pc, #32]	; (41ff8 <isr_tx+0xbc>)
   41fd8:	490a      	ldr	r1, [pc, #40]	; (42004 <isr_tx+0xc8>)
   41fda:	4809      	ldr	r0, [pc, #36]	; (42000 <isr_tx+0xc4>)
   41fdc:	f240 3302 	movw	r3, #770	; 0x302
   41fe0:	f008 fa61 	bl	4a4a6 <printk>
   41fe4:	4040      	eors	r0, r0
   41fe6:	f380 8811 	msr	BASEPRI, r0
   41fea:	f04f 0003 	mov.w	r0, #3
   41fee:	df02      	svc	2
   41ff0:	e7b1      	b.n	41f56 <isr_tx+0x1a>
   41ff2:	bf00      	nop
   41ff4:	00028759 	.word	0x00028759
   41ff8:	00055d60 	.word	0x00055d60
   41ffc:	00055d1c 	.word	0x00055d1c
   42000:	0005512c 	.word	0x0005512c
   42004:	00055d14 	.word	0x00055d14

00042008 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   42008:	68c3      	ldr	r3, [r0, #12]
{
   4200a:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   4200c:	681e      	ldr	r6, [r3, #0]
{
   4200e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   42010:	f7f3 fe1a 	bl	35c48 <ticker_ticks_now_get>
   42014:	4605      	mov	r5, r0
   42016:	4630      	mov	r0, r6
   42018:	f7fe fe48 	bl	40cac <lll_event_offset_get>
	p->remainder = 0;
   4201c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   4201e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   42020:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   42024:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   42026:	4620      	mov	r0, r4
   42028:	2101      	movs	r1, #1
}
   4202a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   4202e:	f7ff bddd 	b.w	41bec <common_prepare_cb>
   42032:	bf00      	nop

00042034 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   42034:	b900      	cbnz	r0, 42038 <ticker_op_start_cb+0x4>
   42036:	4770      	bx	lr
{
   42038:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   4203a:	4a07      	ldr	r2, [pc, #28]	; (42058 <ticker_op_start_cb+0x24>)
   4203c:	4907      	ldr	r1, [pc, #28]	; (4205c <ticker_op_start_cb+0x28>)
   4203e:	4808      	ldr	r0, [pc, #32]	; (42060 <ticker_op_start_cb+0x2c>)
   42040:	f44f 7324 	mov.w	r3, #656	; 0x290
   42044:	f008 fa2f 	bl	4a4a6 <printk>
   42048:	4040      	eors	r0, r0
   4204a:	f380 8811 	msr	BASEPRI, r0
   4204e:	f04f 0003 	mov.w	r0, #3
   42052:	df02      	svc	2
}
   42054:	bd08      	pop	{r3, pc}
   42056:	bf00      	nop
   42058:	00055d60 	.word	0x00055d60
   4205c:	0005569c 	.word	0x0005569c
   42060:	0005512c 	.word	0x0005512c

00042064 <is_abort_cb>:
	if (next != curr) {
   42064:	4281      	cmp	r1, r0
{
   42066:	b508      	push	{r3, lr}
	if (next != curr) {
   42068:	d00d      	beq.n	42086 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   4206a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   4206c:	b113      	cbz	r3, 42074 <is_abort_cb+0x10>
			return -ECANCELED;
   4206e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   42072:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   42074:	4b14      	ldr	r3, [pc, #80]	; (420c8 <is_abort_cb+0x64>)
   42076:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   42078:	f7ff f834 	bl	410e4 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   4207c:	2800      	cmp	r0, #0
   4207e:	db12      	blt.n	420a6 <is_abort_cb+0x42>
   42080:	f06f 000a 	mvn.w	r0, #10
}
   42084:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   42086:	684b      	ldr	r3, [r1, #4]
   42088:	b123      	cbz	r3, 42094 <is_abort_cb+0x30>
   4208a:	684b      	ldr	r3, [r1, #4]
   4208c:	f893 3020 	ldrb.w	r3, [r3, #32]
   42090:	07db      	lsls	r3, r3, #31
   42092:	d406      	bmi.n	420a2 <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   42094:	480d      	ldr	r0, [pc, #52]	; (420cc <is_abort_cb+0x68>)
   42096:	f001 f897 	bl	431c8 <radio_isr_set>
	radio_disable();
   4209a:	f001 f991 	bl	433c0 <radio_disable>
	return 0;
   4209e:	2000      	movs	r0, #0
}
   420a0:	bd08      	pop	{r3, pc}
		return 0;
   420a2:	2000      	movs	r0, #0
}
   420a4:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   420a6:	4a0a      	ldr	r2, [pc, #40]	; (420d0 <is_abort_cb+0x6c>)
   420a8:	490a      	ldr	r1, [pc, #40]	; (420d4 <is_abort_cb+0x70>)
   420aa:	480b      	ldr	r0, [pc, #44]	; (420d8 <is_abort_cb+0x74>)
   420ac:	f240 2332 	movw	r3, #562	; 0x232
   420b0:	f008 f9f9 	bl	4a4a6 <printk>
   420b4:	4040      	eors	r0, r0
   420b6:	f380 8811 	msr	BASEPRI, r0
   420ba:	f04f 0003 	mov.w	r0, #3
   420be:	df02      	svc	2
   420c0:	f06f 000a 	mvn.w	r0, #10
}
   420c4:	bd08      	pop	{r3, pc}
   420c6:	bf00      	nop
   420c8:	00042009 	.word	0x00042009
   420cc:	000286b9 	.word	0x000286b9
   420d0:	00055d60 	.word	0x00055d60
   420d4:	00055c78 	.word	0x00055c78
   420d8:	0005512c 	.word	0x0005512c

000420dc <ticker_stop_cb>:
{
   420dc:	b508      	push	{r3, lr}
	mfy.param = param;
   420de:	4b0c      	ldr	r3, [pc, #48]	; (42110 <ticker_stop_cb+0x34>)
{
   420e0:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   420e2:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   420e4:	2200      	movs	r2, #0
   420e6:	4611      	mov	r1, r2
   420e8:	2001      	movs	r0, #1
   420ea:	f7f2 faab 	bl	34644 <mayfly_enqueue>
	LL_ASSERT(!ret);
   420ee:	b900      	cbnz	r0, 420f2 <ticker_stop_cb+0x16>
}
   420f0:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   420f2:	4a08      	ldr	r2, [pc, #32]	; (42114 <ticker_stop_cb+0x38>)
   420f4:	4908      	ldr	r1, [pc, #32]	; (42118 <ticker_stop_cb+0x3c>)
   420f6:	4809      	ldr	r0, [pc, #36]	; (4211c <ticker_stop_cb+0x40>)
   420f8:	f240 2389 	movw	r3, #649	; 0x289
   420fc:	f008 f9d3 	bl	4a4a6 <printk>
   42100:	4040      	eors	r0, r0
   42102:	f380 8811 	msr	BASEPRI, r0
   42106:	f04f 0003 	mov.w	r0, #3
   4210a:	df02      	svc	2
}
   4210c:	bd08      	pop	{r3, pc}
   4210e:	bf00      	nop
   42110:	20000f38 	.word	0x20000f38
   42114:	00055d60 	.word	0x00055d60
   42118:	00055408 	.word	0x00055408
   4211c:	0005512c 	.word	0x0005512c

00042120 <isr_done_cleanup>:
{
   42120:	b530      	push	{r4, r5, lr}
   42122:	4604      	mov	r4, r0
   42124:	b085      	sub	sp, #20
	lll_isr_status_reset();
   42126:	f7fe fe37 	bl	40d98 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   4212a:	f10d 010f 	add.w	r1, sp, #15
   4212e:	4620      	mov	r0, r4
   42130:	f7fe fdaa 	bl	40c88 <lll_is_done>
   42134:	b9c8      	cbnz	r0, 4216a <isr_done_cleanup+0x4a>
	radio_filter_disable();
   42136:	4605      	mov	r5, r0
   42138:	f001 fa98 	bl	4366c <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   4213c:	7da2      	ldrb	r2, [r4, #22]
   4213e:	f3c2 0341 	ubfx	r3, r2, #1, #2
   42142:	3301      	adds	r3, #1
   42144:	f003 0303 	and.w	r3, r3, #3
   42148:	2b03      	cmp	r3, #3
   4214a:	bf14      	ite	ne
   4214c:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   42150:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   42154:	2300      	movs	r3, #0
		lll->chan = 0U;
   42156:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   42158:	4619      	mov	r1, r3
   4215a:	9300      	str	r3, [sp, #0]
   4215c:	2203      	movs	r2, #3
   4215e:	4618      	mov	r0, r3
   42160:	f7f3 fcd2 	bl	35b08 <ticker_stop>
	lll_isr_cleanup(param);
   42164:	4620      	mov	r0, r4
   42166:	f7fe fe25 	bl	40db4 <lll_isr_cleanup>
}
   4216a:	b005      	add	sp, #20
   4216c:	bd30      	pop	{r4, r5, pc}
   4216e:	bf00      	nop

00042170 <isr_scan_tgta_check>:
{
   42170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42174:	f89d 9020 	ldrb.w	r9, [sp, #32]
   42178:	4616      	mov	r6, r2
   4217a:	4680      	mov	r8, r0
   4217c:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   4217e:	464a      	mov	r2, r9
   42180:	4619      	mov	r1, r3
   42182:	4630      	mov	r0, r6
{
   42184:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   42186:	f7fe fa09 	bl	4059c <ull_filter_lll_rl_addr_resolve>
   4218a:	4604      	mov	r4, r0
   4218c:	b9a0      	cbnz	r0, 421b8 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   4218e:	b11d      	cbz	r5, 42198 <isr_scan_tgta_check+0x28>
   42190:	f898 3017 	ldrb.w	r3, [r8, #23]
   42194:	079a      	lsls	r2, r3, #30
   42196:	d41c      	bmi.n	421d2 <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   42198:	f898 5016 	ldrb.w	r5, [r8, #22]
   4219c:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   421a0:	42b3      	cmp	r3, r6
   421a2:	d00c      	beq.n	421be <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   421a4:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   421a8:	07ab      	lsls	r3, r5, #30
   421aa:	d505      	bpl.n	421b8 <isr_scan_tgta_check+0x48>
   421ac:	b126      	cbz	r6, 421b8 <isr_scan_tgta_check+0x48>
   421ae:	797b      	ldrb	r3, [r7, #5]
   421b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   421b4:	2b40      	cmp	r3, #64	; 0x40
   421b6:	d014      	beq.n	421e2 <isr_scan_tgta_check+0x72>
}
   421b8:	4620      	mov	r0, r4
   421ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   421be:	2206      	movs	r2, #6
   421c0:	4639      	mov	r1, r7
   421c2:	f108 0019 	add.w	r0, r8, #25
   421c6:	f00a fa65 	bl	4c694 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   421ca:	b140      	cbz	r0, 421de <isr_scan_tgta_check+0x6e>
   421cc:	f898 5016 	ldrb.w	r5, [r8, #22]
   421d0:	e7e8      	b.n	421a4 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   421d2:	4648      	mov	r0, r9
   421d4:	f7fe f864 	bl	402a0 <ull_filter_lll_lrpa_get>
   421d8:	2800      	cmp	r0, #0
   421da:	d1ed      	bne.n	421b8 <isr_scan_tgta_check+0x48>
   421dc:	e7dc      	b.n	42198 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   421de:	2401      	movs	r4, #1
   421e0:	e7ea      	b.n	421b8 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   421e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   421e4:	2b00      	cmp	r3, #0
   421e6:	d0fa      	beq.n	421de <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   421e8:	2401      	movs	r4, #1
   421ea:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   421ec:	e7e4      	b.n	421b8 <isr_scan_tgta_check+0x48>
   421ee:	bf00      	nop

000421f0 <abort_cb>:
{
   421f0:	b510      	push	{r4, lr}
	if (!prepare_param) {
   421f2:	b1d8      	cbz	r0, 4222c <abort_cb+0x3c>
	err = lll_hfclock_off();
   421f4:	460c      	mov	r4, r1
   421f6:	f7fe ff8d 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   421fa:	2800      	cmp	r0, #0
   421fc:	db04      	blt.n	42208 <abort_cb+0x18>
	lll_done(param);
   421fe:	4620      	mov	r0, r4
}
   42200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   42204:	f7fe bcee 	b.w	40be4 <lll_done>
	LL_ASSERT(err >= 0);
   42208:	4a0c      	ldr	r2, [pc, #48]	; (4223c <abort_cb+0x4c>)
   4220a:	490d      	ldr	r1, [pc, #52]	; (42240 <abort_cb+0x50>)
   4220c:	480d      	ldr	r0, [pc, #52]	; (42244 <abort_cb+0x54>)
   4220e:	f240 2379 	movw	r3, #633	; 0x279
   42212:	f008 f948 	bl	4a4a6 <printk>
   42216:	4040      	eors	r0, r0
   42218:	f380 8811 	msr	BASEPRI, r0
   4221c:	f04f 0003 	mov.w	r0, #3
   42220:	df02      	svc	2
	lll_done(param);
   42222:	4620      	mov	r0, r4
}
   42224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   42228:	f7fe bcdc 	b.w	40be4 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   4222c:	4806      	ldr	r0, [pc, #24]	; (42248 <abort_cb+0x58>)
   4222e:	f000 ffcb 	bl	431c8 <radio_isr_set>
}
   42232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   42236:	f001 b8c3 	b.w	433c0 <radio_disable>
   4223a:	bf00      	nop
   4223c:	00055d60 	.word	0x00055d60
   42240:	00055c78 	.word	0x00055c78
   42244:	0005512c 	.word	0x0005512c
   42248:	00042121 	.word	0x00042121

0004224c <lll_scan_init>:
}
   4224c:	2000      	movs	r0, #0
   4224e:	4770      	bx	lr

00042250 <lll_scan_reset>:
   42250:	2000      	movs	r0, #0
   42252:	4770      	bx	lr

00042254 <lll_scan_prepare>:
{
   42254:	b510      	push	{r4, lr}
   42256:	b082      	sub	sp, #8
   42258:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   4225a:	f7fe ff43 	bl	410e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   4225e:	2800      	cmp	r0, #0
   42260:	db19      	blt.n	42296 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   42262:	4a13      	ldr	r2, [pc, #76]	; (422b0 <lll_scan_prepare+0x5c>)
   42264:	4913      	ldr	r1, [pc, #76]	; (422b4 <lll_scan_prepare+0x60>)
   42266:	4814      	ldr	r0, [pc, #80]	; (422b8 <lll_scan_prepare+0x64>)
   42268:	9400      	str	r4, [sp, #0]
   4226a:	2300      	movs	r3, #0
   4226c:	f7f6 fc5e 	bl	38b2c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42270:	b108      	cbz	r0, 42276 <lll_scan_prepare+0x22>
   42272:	3077      	adds	r0, #119	; 0x77
   42274:	d101      	bne.n	4227a <lll_scan_prepare+0x26>
}
   42276:	b002      	add	sp, #8
   42278:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   4227a:	4a10      	ldr	r2, [pc, #64]	; (422bc <lll_scan_prepare+0x68>)
   4227c:	4910      	ldr	r1, [pc, #64]	; (422c0 <lll_scan_prepare+0x6c>)
   4227e:	4811      	ldr	r0, [pc, #68]	; (422c4 <lll_scan_prepare+0x70>)
   42280:	238b      	movs	r3, #139	; 0x8b
   42282:	f008 f910 	bl	4a4a6 <printk>
   42286:	4040      	eors	r0, r0
   42288:	f380 8811 	msr	BASEPRI, r0
   4228c:	f04f 0003 	mov.w	r0, #3
   42290:	df02      	svc	2
}
   42292:	b002      	add	sp, #8
   42294:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   42296:	4a09      	ldr	r2, [pc, #36]	; (422bc <lll_scan_prepare+0x68>)
   42298:	490b      	ldr	r1, [pc, #44]	; (422c8 <lll_scan_prepare+0x74>)
   4229a:	480a      	ldr	r0, [pc, #40]	; (422c4 <lll_scan_prepare+0x70>)
   4229c:	2388      	movs	r3, #136	; 0x88
   4229e:	f008 f902 	bl	4a4a6 <printk>
   422a2:	4040      	eors	r0, r0
   422a4:	f380 8811 	msr	BASEPRI, r0
   422a8:	f04f 0003 	mov.w	r0, #3
   422ac:	df02      	svc	2
   422ae:	e7d8      	b.n	42262 <lll_scan_prepare+0xe>
   422b0:	00041e69 	.word	0x00041e69
   422b4:	000421f1 	.word	0x000421f1
   422b8:	00042065 	.word	0x00042065
   422bc:	00055d60 	.word	0x00055d60
   422c0:	00055d4c 	.word	0x00055d4c
   422c4:	0005512c 	.word	0x0005512c
   422c8:	00055c78 	.word	0x00055c78

000422cc <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   422cc:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   422d0:	f01c 0f08 	tst.w	ip, #8
   422d4:	d002      	beq.n	422dc <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   422d6:	b162      	cbz	r2, 422f2 <lll_scan_isr_rx_check+0x26>
{
   422d8:	2001      	movs	r0, #1
}
   422da:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   422dc:	2a00      	cmp	r2, #0
   422de:	d0fb      	beq.n	422d8 <lll_scan_isr_rx_check+0xc>
{
   422e0:	b510      	push	{r4, lr}
   422e2:	4604      	mov	r4, r0
   422e4:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   422e6:	4619      	mov	r1, r3
   422e8:	f7fe f8ea 	bl	404c0 <ull_filter_lll_rl_idx_allowed>
   422ec:	b120      	cbz	r0, 422f8 <lll_scan_isr_rx_check+0x2c>
{
   422ee:	2001      	movs	r0, #1
}
   422f0:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   422f2:	4618      	mov	r0, r3
   422f4:	f7fe b8b4 	b.w	40460 <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   422f8:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   422fa:	071b      	lsls	r3, r3, #28
   422fc:	d4f7      	bmi.n	422ee <lll_scan_isr_rx_check+0x22>
}
   422fe:	bd10      	pop	{r4, pc}

00042300 <lll_scan_prepare_connect_req>:
{
   42300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42304:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   42308:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   4230a:	01ad      	lsls	r5, r5, #6
   4230c:	f005 0540 	and.w	r5, r5, #64	; 0x40
   42310:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   42314:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   42318:	780b      	ldrb	r3, [r1, #0]
   4231a:	f003 0310 	and.w	r3, r3, #16
{
   4231e:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   42320:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   42322:	2322      	movs	r3, #34	; 0x22
   42324:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   42326:	700d      	strb	r5, [r1, #0]
{
   42328:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   4232a:	9908      	ldr	r1, [sp, #32]
   4232c:	2206      	movs	r2, #6
{
   4232e:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   42330:	1ca0      	adds	r0, r4, #2
   42332:	f00a f9c0 	bl	4c6b6 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   42336:	9906      	ldr	r1, [sp, #24]
   42338:	2206      	movs	r2, #6
   4233a:	f104 0008 	add.w	r0, r4, #8
   4233e:	f00a f9ba 	bl	4c6b6 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   42342:	2204      	movs	r2, #4
   42344:	18b1      	adds	r1, r6, r2
   42346:	f104 000e 	add.w	r0, r4, #14
   4234a:	f00a f9b4 	bl	4c6b6 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   4234e:	2203      	movs	r2, #3
   42350:	f106 0108 	add.w	r1, r6, #8
   42354:	f104 0012 	add.w	r0, r4, #18
   42358:	f00a f9ad 	bl	4c6b6 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   4235c:	2301      	movs	r3, #1
   4235e:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   42360:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   42362:	f001 fac9 	bl	438f8 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   42366:	f1b8 0f00 	cmp.w	r8, #0
   4236a:	d044      	beq.n	423f6 <lll_scan_prepare_connect_req+0xf6>
   4236c:	f008 0203 	and.w	r2, r8, #3
   42370:	322b      	adds	r2, #43	; 0x2b
   42372:	00d2      	lsls	r2, r2, #3
   42374:	f3c8 0840 	ubfx	r8, r8, #1, #1
   42378:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   4237c:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   4237e:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   42382:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   42384:	b393      	cbz	r3, 423ec <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   42386:	f240 41e2 	movw	r1, #1250	; 0x4e2
   4238a:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   4238e:	2b00      	cmp	r3, #0
   42390:	db01      	blt.n	42396 <lll_scan_prepare_connect_req+0x96>
   42392:	4293      	cmp	r3, r2
   42394:	d201      	bcs.n	4239a <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   42396:	442b      	add	r3, r5
   42398:	e7f9      	b.n	4238e <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   4239a:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   4239c:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   4239e:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   423a0:	4b16      	ldr	r3, [pc, #88]	; (423fc <lll_scan_prepare_connect_req+0xfc>)
   423a2:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   423a6:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   423a8:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   423aa:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   423ac:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   423ae:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   423b0:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   423b2:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   423b4:	8abb      	ldrh	r3, [r7, #20]
   423b6:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   423b8:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   423ba:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   423bc:	f106 0118 	add.w	r1, r6, #24
   423c0:	2205      	movs	r2, #5
   423c2:	f104 001e 	add.w	r0, r4, #30
   423c6:	f00a f976 	bl	4c6b6 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   423ca:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   423ce:	7fb2      	ldrb	r2, [r6, #30]
   423d0:	f362 0304 	bfi	r3, r2, #0, #5
   423d4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   423d8:	f7fe feba 	bl	41150 <lll_clock_sca_local_get>
   423dc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   423e0:	f360 1347 	bfi	r3, r0, #5, #3
   423e4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   423e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   423ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   423ee:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   423f0:	75a3      	strb	r3, [r4, #22]
   423f2:	75e3      	strb	r3, [r4, #23]
   423f4:	e7dc      	b.n	423b0 <lll_scan_prepare_connect_req+0xb0>
   423f6:	f44f 78b0 	mov.w	r8, #352	; 0x160
   423fa:	e7bf      	b.n	4237c <lll_scan_prepare_connect_req+0x7c>
   423fc:	d1b71759 	.word	0xd1b71759

00042400 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   42400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42402:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   42404:	f7fe fcc8 	bl	40d98 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   42408:	f7f6 f95a 	bl	386c0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   4240c:	4604      	mov	r4, r0
   4240e:	2800      	cmp	r0, #0
   42410:	d036      	beq.n	42480 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   42412:	4922      	ldr	r1, [pc, #136]	; (4249c <isr_done+0x9c>)
   42414:	79a2      	ldrb	r2, [r4, #6]
   42416:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   42418:	4b21      	ldr	r3, [pc, #132]	; (424a0 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   4241a:	f360 0200 	bfi	r2, r0, #0, #1
   4241e:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   42420:	4a20      	ldr	r2, [pc, #128]	; (424a4 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   42422:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   42424:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   42426:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   42428:	2101      	movs	r1, #1
   4242a:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   4242c:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   4242e:	b11b      	cbz	r3, 42438 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   42430:	f995 301d 	ldrsb.w	r3, [r5, #29]
   42434:	2b00      	cmp	r3, #0
   42436:	db04      	blt.n	42442 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   42438:	4628      	mov	r0, r5
}
   4243a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   4243e:	f7fe bcb9 	b.w	40db4 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   42442:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   42446:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   4244a:	2b02      	cmp	r3, #2
   4244c:	d016      	beq.n	4247c <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   4244e:	2b04      	cmp	r3, #4
   42450:	bf14      	ite	ne
   42452:	2728      	movne	r7, #40	; 0x28
   42454:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   42458:	f001 fa3a 	bl	438d0 <radio_tmr_aa_restore>
   4245c:	4606      	mov	r6, r0
   4245e:	f001 fa3d 	bl	438dc <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   42462:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   42464:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   42466:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   42468:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   4246c:	2300      	movs	r3, #0
   4246e:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   42470:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   42472:	4628      	mov	r0, r5
}
   42474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   42478:	f7fe bc9c 	b.w	40db4 <lll_isr_cleanup>
	switch (phy) {
   4247c:	2718      	movs	r7, #24
   4247e:	e7eb      	b.n	42458 <isr_done+0x58>
	LL_ASSERT(e);
   42480:	4a09      	ldr	r2, [pc, #36]	; (424a8 <isr_done+0xa8>)
   42482:	490a      	ldr	r1, [pc, #40]	; (424ac <isr_done+0xac>)
   42484:	480a      	ldr	r0, [pc, #40]	; (424b0 <isr_done+0xb0>)
   42486:	f240 3317 	movw	r3, #791	; 0x317
   4248a:	f008 f80c 	bl	4a4a6 <printk>
   4248e:	4040      	eors	r0, r0
   42490:	f380 8811 	msr	BASEPRI, r0
   42494:	f04f 0003 	mov.w	r0, #3
   42498:	df02      	svc	2
   4249a:	e7ba      	b.n	42412 <isr_done+0x12>
   4249c:	20007796 	.word	0x20007796
   424a0:	20007618 	.word	0x20007618
   424a4:	20007797 	.word	0x20007797
   424a8:	00055dac 	.word	0x00055dac
   424ac:	00055508 	.word	0x00055508
   424b0:	0005512c 	.word	0x0005512c

000424b4 <lll_conn_init>:
{
   424b4:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   424b6:	f000 ffd7 	bl	43468 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   424ba:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   424bc:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   424be:	2101      	movs	r1, #1
   424c0:	f361 0201 	bfi	r2, r1, #0, #2
}
   424c4:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   424c6:	701a      	strb	r2, [r3, #0]
}
   424c8:	bd08      	pop	{r3, pc}
   424ca:	bf00      	nop

000424cc <lll_conn_reset>:
}
   424cc:	2000      	movs	r0, #0
   424ce:	4770      	bx	lr

000424d0 <lll_conn_flush>:
}
   424d0:	4770      	bx	lr
   424d2:	bf00      	nop

000424d4 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   424d4:	4805      	ldr	r0, [pc, #20]	; (424ec <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   424d6:	4906      	ldr	r1, [pc, #24]	; (424f0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   424d8:	4a06      	ldr	r2, [pc, #24]	; (424f4 <lll_conn_prepare_reset+0x20>)
{
   424da:	b410      	push	{r4}
	trx_cnt = 0U;
   424dc:	2300      	movs	r3, #0
   424de:	4c06      	ldr	r4, [pc, #24]	; (424f8 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   424e0:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   424e2:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   424e4:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   424e6:	8023      	strh	r3, [r4, #0]
}
   424e8:	bc10      	pop	{r4}
   424ea:	4770      	bx	lr
   424ec:	20007796 	.word	0x20007796
   424f0:	20007795 	.word	0x20007795
   424f4:	20007797 	.word	0x20007797
   424f8:	20007618 	.word	0x20007618

000424fc <lll_conn_abort_cb>:
{
   424fc:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   424fe:	b1e8      	cbz	r0, 4253c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   42500:	460d      	mov	r5, r1
   42502:	4604      	mov	r4, r0
   42504:	f7fe fe06 	bl	41114 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   42508:	2800      	cmp	r0, #0
   4250a:	db0a      	blt.n	42522 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   4250c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   4250e:	8923      	ldrh	r3, [r4, #8]
   42510:	8a51      	ldrh	r1, [r2, #18]
   42512:	3301      	adds	r3, #1
   42514:	440b      	add	r3, r1
   42516:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   42518:	4628      	mov	r0, r5
}
   4251a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   4251e:	f7fe bb61 	b.w	40be4 <lll_done>
	LL_ASSERT(err >= 0);
   42522:	4a0a      	ldr	r2, [pc, #40]	; (4254c <lll_conn_abort_cb+0x50>)
   42524:	490a      	ldr	r1, [pc, #40]	; (42550 <lll_conn_abort_cb+0x54>)
   42526:	480b      	ldr	r0, [pc, #44]	; (42554 <lll_conn_abort_cb+0x58>)
   42528:	23aa      	movs	r3, #170	; 0xaa
   4252a:	f007 ffbc 	bl	4a4a6 <printk>
   4252e:	4040      	eors	r0, r0
   42530:	f380 8811 	msr	BASEPRI, r0
   42534:	f04f 0003 	mov.w	r0, #3
   42538:	df02      	svc	2
   4253a:	e7e7      	b.n	4250c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   4253c:	4806      	ldr	r0, [pc, #24]	; (42558 <lll_conn_abort_cb+0x5c>)
   4253e:	f000 fe43 	bl	431c8 <radio_isr_set>
}
   42542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   42546:	f000 bf3b 	b.w	433c0 <radio_disable>
   4254a:	bf00      	nop
   4254c:	00055dac 	.word	0x00055dac
   42550:	00055c78 	.word	0x00055c78
   42554:	0005512c 	.word	0x0005512c
   42558:	00042401 	.word	0x00042401

0004255c <lll_conn_rx_pkt_set>:
{
   4255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4255e:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   42560:	2001      	movs	r0, #1
   42562:	f7f5 ffaf 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   42566:	4604      	mov	r4, r0
   42568:	b348      	cbz	r0, 425be <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   4256a:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   4256e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   42570:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   42574:	2100      	movs	r1, #0
   42576:	4630      	mov	r0, r6
   42578:	f000 fe8c 	bl	43294 <radio_phy_set>
	} else if (lll->enc_rx) {
   4257c:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   42580:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   42582:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   42584:	b2f9      	uxtb	r1, r7
   42586:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   4258a:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   4258e:	d50e      	bpl.n	425ae <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   42590:	3104      	adds	r1, #4
   42592:	b2c9      	uxtb	r1, r1
   42594:	2008      	movs	r0, #8
   42596:	f000 fec3 	bl	43320 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   4259a:	4622      	mov	r2, r4
   4259c:	4631      	mov	r1, r6
   4259e:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   425a2:	f001 f9b5 	bl	43910 <radio_ccm_rx_pkt_set>
}
   425a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   425aa:	f000 bee1 	b.w	43370 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   425ae:	2008      	movs	r0, #8
   425b0:	f000 feb6 	bl	43320 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   425b4:	4620      	mov	r0, r4
}
   425b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   425ba:	f000 bed9 	b.w	43370 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   425be:	4a07      	ldr	r2, [pc, #28]	; (425dc <lll_conn_rx_pkt_set+0x80>)
   425c0:	4907      	ldr	r1, [pc, #28]	; (425e0 <lll_conn_rx_pkt_set+0x84>)
   425c2:	4808      	ldr	r0, [pc, #32]	; (425e4 <lll_conn_rx_pkt_set+0x88>)
   425c4:	f240 235a 	movw	r3, #602	; 0x25a
   425c8:	f007 ff6d 	bl	4a4a6 <printk>
   425cc:	4040      	eors	r0, r0
   425ce:	f380 8811 	msr	BASEPRI, r0
   425d2:	f04f 0003 	mov.w	r0, #3
   425d6:	df02      	svc	2
   425d8:	e7c7      	b.n	4256a <lll_conn_rx_pkt_set+0xe>
   425da:	bf00      	nop
   425dc:	00055dac 	.word	0x00055dac
   425e0:	00055d14 	.word	0x00055d14
   425e4:	0005512c 	.word	0x0005512c

000425e8 <lll_conn_isr_tx>:
{
   425e8:	b538      	push	{r3, r4, r5, lr}
   425ea:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   425ec:	f7fe fbc2 	bl	40d74 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   425f0:	2096      	movs	r0, #150	; 0x96
   425f2:	f001 f86d 	bl	436d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   425f6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   425fa:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   425fe:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   42602:	f000 0007 	and.w	r0, r0, #7
   42606:	f002 0207 	and.w	r2, r2, #7
   4260a:	2100      	movs	r1, #0
   4260c:	f000 ff7c 	bl	43508 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   42610:	4620      	mov	r0, r4
   42612:	f7ff ffa3 	bl	4255c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   42616:	f000 fef3 	bl	43400 <radio_is_ready>
   4261a:	bb58      	cbnz	r0, 42674 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   4261c:	f001 f972 	bl	43904 <radio_tmr_tifs_base_get>
   42620:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42622:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42626:	2101      	movs	r1, #1
   42628:	f000 0007 	and.w	r0, r0, #7
   4262c:	f000 feb6 	bl	4339c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   42630:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   42634:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42638:	4405      	add	r5, r0
   4263a:	2b02      	cmp	r3, #2
   4263c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   42640:	d016      	beq.n	42670 <lll_conn_isr_tx+0x88>
		return 376;
   42642:	2b04      	cmp	r3, #4
   42644:	bf14      	ite	ne
   42646:	2328      	movne	r3, #40	; 0x28
   42648:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   4264c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   42650:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   42654:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   42658:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   4265a:	f000 fe9b 	bl	43394 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   4265e:	1a28      	subs	r0, r5, r0
   42660:	f001 f908 	bl	43874 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   42664:	4621      	mov	r1, r4
   42666:	480a      	ldr	r0, [pc, #40]	; (42690 <lll_conn_isr_tx+0xa8>)
}
   42668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   4266c:	f000 bdac 	b.w	431c8 <radio_isr_set>
	switch (phy) {
   42670:	2318      	movs	r3, #24
   42672:	e7eb      	b.n	4264c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   42674:	4a07      	ldr	r2, [pc, #28]	; (42694 <lll_conn_isr_tx+0xac>)
   42676:	4908      	ldr	r1, [pc, #32]	; (42698 <lll_conn_isr_tx+0xb0>)
   42678:	4808      	ldr	r0, [pc, #32]	; (4269c <lll_conn_isr_tx+0xb4>)
   4267a:	f240 2313 	movw	r3, #531	; 0x213
   4267e:	f007 ff12 	bl	4a4a6 <printk>
   42682:	4040      	eors	r0, r0
   42684:	f380 8811 	msr	BASEPRI, r0
   42688:	f04f 0003 	mov.w	r0, #3
   4268c:	df02      	svc	2
   4268e:	e7c5      	b.n	4261c <lll_conn_isr_tx+0x34>
   42690:	000427d9 	.word	0x000427d9
   42694:	00055dac 	.word	0x00055dac
   42698:	00055d1c 	.word	0x00055d1c
   4269c:	0005512c 	.word	0x0005512c

000426a0 <lll_conn_tx_pkt_set>:
{
   426a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   426a2:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   426a4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   426a8:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   426aa:	f001 0407 	and.w	r4, r1, #7
{
   426ae:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   426b0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   426b4:	4620      	mov	r0, r4
   426b6:	f000 fded 	bl	43294 <radio_phy_set>
	} else if (lll->enc_tx) {
   426ba:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   426be:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   426c0:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   426c2:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   426c6:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   426c8:	d50d      	bpl.n	426e6 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   426ca:	3104      	adds	r1, #4
   426cc:	b2c9      	uxtb	r1, r1
   426ce:	2008      	movs	r0, #8
   426d0:	f000 fe26 	bl	43320 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   426d4:	4639      	mov	r1, r7
   426d6:	f105 0080 	add.w	r0, r5, #128	; 0x80
   426da:	f001 f957 	bl	4398c <radio_ccm_tx_pkt_set>
}
   426de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   426e2:	f000 be4b 	b.w	4337c <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   426e6:	2008      	movs	r0, #8
   426e8:	f000 fe1a 	bl	43320 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   426ec:	4638      	mov	r0, r7
}
   426ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   426f2:	f000 be43 	b.w	4337c <radio_pkt_tx_set>
   426f6:	bf00      	nop

000426f8 <lll_conn_pdu_tx_prep>:
{
   426f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   426fc:	4604      	mov	r4, r0
   426fe:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   42700:	aa01      	add	r2, sp, #4
   42702:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   42704:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   42706:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   42708:	f7f1 ff32 	bl	34570 <memq_peek>
	if (lll->empty || !link) {
   4270c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42710:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   42712:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   42714:	d432      	bmi.n	4277c <lll_conn_pdu_tx_prep+0x84>
   42716:	2800      	cmp	r0, #0
   42718:	d04e      	beq.n	427b8 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   4271a:	9b01      	ldr	r3, [sp, #4]
   4271c:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   42720:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   42724:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   42728:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   4272c:	b913      	cbnz	r3, 42734 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   4272e:	786b      	ldrb	r3, [r5, #1]
   42730:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   42734:	b137      	cbz	r7, 42744 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   42736:	f818 2007 	ldrb.w	r2, [r8, r7]
   4273a:	2101      	movs	r1, #1
   4273c:	f361 0201 	bfi	r2, r1, #0, #2
   42740:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   42744:	1bdb      	subs	r3, r3, r7
   42746:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   42748:	4620      	mov	r0, r4
   4274a:	f7fc f881 	bl	3e850 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   4274e:	786b      	ldrb	r3, [r5, #1]
   42750:	4283      	cmp	r3, r0
   42752:	d924      	bls.n	4279e <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   42754:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   42756:	f818 3007 	ldrb.w	r3, [r8, r7]
   4275a:	f043 0310 	orr.w	r3, r3, #16
   4275e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   42762:	f818 3007 	ldrb.w	r3, [r8, r7]
   42766:	f36f 1347 	bfc	r3, #5, #3
   4276a:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   4276e:	2300      	movs	r3, #0
   42770:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   42772:	f8c9 5000 	str.w	r5, [r9]
}
   42776:	b003      	add	sp, #12
   42778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   4277c:	f043 0304 	orr.w	r3, r3, #4
   42780:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   42784:	f000 fe70 	bl	43468 <radio_pkt_empty_get>
   42788:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   4278a:	b1e6      	cbz	r6, 427c6 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   4278c:	7803      	ldrb	r3, [r0, #0]
   4278e:	f043 0310 	orr.w	r3, r3, #16
   42792:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   42794:	f8c9 5000 	str.w	r5, [r9]
}
   42798:	b003      	add	sp, #12
   4279a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   4279e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   427a0:	6832      	ldr	r2, [r6, #0]
   427a2:	429a      	cmp	r2, r3
			p->md = 1U;
   427a4:	f818 3007 	ldrb.w	r3, [r8, r7]
   427a8:	bf14      	ite	ne
   427aa:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   427ae:	f36f 1304 	bfceq	r3, #4, #1
   427b2:	f808 3007 	strb.w	r3, [r8, r7]
   427b6:	e7d4      	b.n	42762 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   427b8:	f043 0304 	orr.w	r3, r3, #4
   427bc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   427c0:	f000 fe52 	bl	43468 <radio_pkt_empty_get>
   427c4:	4605      	mov	r5, r0
			p->md = 0U;
   427c6:	782b      	ldrb	r3, [r5, #0]
   427c8:	f36f 1304 	bfc	r3, #4, #1
   427cc:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   427ce:	f8c9 5000 	str.w	r5, [r9]
}
   427d2:	b003      	add	sp, #12
   427d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000427d8 <lll_conn_isr_rx>:
{
   427d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   427dc:	b083      	sub	sp, #12
   427de:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   427e0:	f000 fe18 	bl	43414 <radio_is_done>
	if (trx_done) {
   427e4:	b2c0      	uxtb	r0, r0
   427e6:	b950      	cbnz	r0, 427fe <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   427e8:	f7fe facc 	bl	40d84 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   427ec:	48bd      	ldr	r0, [pc, #756]	; (42ae4 <lll_conn_isr_rx+0x30c>)
   427ee:	4621      	mov	r1, r4
   427f0:	f000 fcea 	bl	431c8 <radio_isr_set>
}
   427f4:	b003      	add	sp, #12
   427f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   427fa:	f000 bde1 	b.w	433c0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   427fe:	f000 fe29 	bl	43454 <radio_crc_is_valid>
   42802:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   42804:	f000 ff08 	bl	43618 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   42808:	f7fe fabc 	bl	40d84 <lll_isr_rx_status_reset>
	trx_cnt++;
   4280c:	4ab6      	ldr	r2, [pc, #728]	; (42ae8 <lll_conn_isr_rx+0x310>)
   4280e:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   42810:	2001      	movs	r0, #1
	trx_cnt++;
   42812:	4403      	add	r3, r0
   42814:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   42816:	f7f5 fe55 	bl	384c4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   4281a:	4606      	mov	r6, r0
   4281c:	2800      	cmp	r0, #0
   4281e:	f000 80e7 	beq.w	429f0 <lll_conn_isr_rx+0x218>
	if (crc_ok) {
   42822:	b9f5      	cbnz	r5, 42862 <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   42824:	4bb1      	ldr	r3, [pc, #708]	; (42aec <lll_conn_isr_rx+0x314>)
   42826:	781f      	ldrb	r7, [r3, #0]
   42828:	2f00      	cmp	r7, #0
   4282a:	f000 8083 	beq.w	42934 <lll_conn_isr_rx+0x15c>
		crc_expire--;
   4282e:	3f01      	subs	r7, #1
   42830:	b2ff      	uxtb	r7, r7
   42832:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   42834:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42838:	a901      	add	r1, sp, #4
   4283a:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   4283c:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42840:	f7ff ff5a 	bl	426f8 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42844:	2f00      	cmp	r7, #0
   42846:	f040 814a 	bne.w	42ade <lll_conn_isr_rx+0x306>
		radio_isr_set(isr_done, param);
   4284a:	48a6      	ldr	r0, [pc, #664]	; (42ae4 <lll_conn_isr_rx+0x30c>)
   4284c:	4621      	mov	r1, r4
   4284e:	f000 fcbb 	bl	431c8 <radio_isr_set>
		} else if (!lll->role) {
   42852:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42856:	2b00      	cmp	r3, #0
   42858:	f280 80bc 	bge.w	429d4 <lll_conn_isr_rx+0x1fc>
			radio_switch_complete_and_disable();
   4285c:	f000 feb4 	bl	435c8 <radio_switch_complete_and_disable>
   42860:	e07d      	b.n	4295e <lll_conn_isr_rx+0x186>
	if (pdu_data_rx->nesn != lll->sn) {
   42862:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42866:	7f32      	ldrb	r2, [r6, #28]
   42868:	f003 0101 	and.w	r1, r3, #1
   4286c:	f3c2 0080 	ubfx	r0, r2, #2, #1
   42870:	4288      	cmp	r0, r1
   42872:	f000 80cd 	beq.w	42a10 <lll_conn_isr_rx+0x238>
		if (lll->role) {
   42876:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   4287a:	f081 0101 	eor.w	r1, r1, #1
   4287e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   42882:	2a00      	cmp	r2, #0
		lll->sn++;
   42884:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   42888:	da05      	bge.n	42896 <lll_conn_isr_rx+0xbe>
			lll->periph.latency_enabled = 1;
   4288a:	f894 3020 	ldrb.w	r3, [r4, #32]
   4288e:	f043 0304 	orr.w	r3, r3, #4
   42892:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   42896:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4289a:	f013 0804 	ands.w	r8, r3, #4
   4289e:	f040 80fc 	bne.w	42a9a <lll_conn_isr_rx+0x2c2>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   428a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   428a6:	aa01      	add	r2, sp, #4
   428a8:	f7f1 fe62 	bl	34570 <memq_peek>
		if (link) {
   428ac:	4605      	mov	r5, r0
   428ae:	2800      	cmp	r0, #0
   428b0:	f000 810a 	beq.w	42ac8 <lll_conn_isr_rx+0x2f0>
			pdu_data_tx = (void *)(tx->pdu +
   428b4:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   428b6:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   428ba:	3704      	adds	r7, #4
   428bc:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   428c0:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   428c2:	b172      	cbz	r2, 428e2 <lll_conn_isr_rx+0x10a>
				if (lll->enc_tx) {
   428c4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   428c8:	06d9      	lsls	r1, r3, #27
   428ca:	d50a      	bpl.n	428e2 <lll_conn_isr_rx+0x10a>
					lll->ccm_tx.counter++;
   428cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   428d0:	3301      	adds	r3, #1
   428d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   428d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   428da:	f143 0300 	adc.w	r3, r3, #0
   428de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   428e2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   428e6:	444a      	add	r2, r9
   428e8:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   428ea:	429a      	cmp	r2, r3
   428ec:	f0c0 80f3 	bcc.w	42ad6 <lll_conn_isr_rx+0x2fe>
			} else if (offset == lll->packet_tx_head_len) {
   428f0:	f000 8135 	beq.w	42b5e <lll_conn_isr_rx+0x386>
				LL_ASSERT(0);
   428f4:	4a7e      	ldr	r2, [pc, #504]	; (42af0 <lll_conn_isr_rx+0x318>)
   428f6:	497f      	ldr	r1, [pc, #508]	; (42af4 <lll_conn_isr_rx+0x31c>)
   428f8:	487f      	ldr	r0, [pc, #508]	; (42af8 <lll_conn_isr_rx+0x320>)
   428fa:	f240 33a3 	movw	r3, #931	; 0x3a3
   428fe:	f007 fdd2 	bl	4a4a6 <printk>
   42902:	4040      	eors	r0, r0
   42904:	f380 8811 	msr	BASEPRI, r0
   42908:	f04f 0003 	mov.w	r0, #3
   4290c:	df02      	svc	2
	tx_release = NULL;
   4290e:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42910:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42914:	2b00      	cmp	r3, #0
   42916:	f2c0 811e 	blt.w	42b56 <lll_conn_isr_rx+0x37e>
			    !pdu_data_rx->md) {
   4291a:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   4291c:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   4291e:	bf58      	it	pl
   42920:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   42924:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42928:	bf5c      	itt	pl
   4292a:	f088 0810 	eorpl.w	r8, r8, #16
   4292e:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   42932:	e070      	b.n	42a16 <lll_conn_isr_rx+0x23e>
		crc_expire--;
   42934:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42936:	a901      	add	r1, sp, #4
   42938:	4620      	mov	r0, r4
		crc_expire--;
   4293a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   4293c:	f7ff fedc 	bl	426f8 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   42940:	2096      	movs	r0, #150	; 0x96
   42942:	f000 fec5 	bl	436d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   42946:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   4294a:	f000 0007 	and.w	r0, r0, #7
   4294e:	f000 fd93 	bl	43478 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   42952:	486a      	ldr	r0, [pc, #424]	; (42afc <lll_conn_isr_rx+0x324>)
   42954:	4621      	mov	r1, r4
   42956:	f000 fc37 	bl	431c8 <radio_isr_set>
		radio_tmr_end_capture();
   4295a:	f000 ffc5 	bl	438e8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   4295e:	9901      	ldr	r1, [sp, #4]
   42960:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   42964:	780b      	ldrb	r3, [r1, #0]
   42966:	f023 000c 	bic.w	r0, r3, #12
   4296a:	f3c2 0340 	ubfx	r3, r2, #1, #1
   4296e:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   42970:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   42974:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   42978:	4303      	orrs	r3, r0
   4297a:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   4297c:	4620      	mov	r0, r4
   4297e:	f7ff fe8f 	bl	426a0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   42982:	f000 fd3d 	bl	43400 <radio_is_ready>
   42986:	2800      	cmp	r0, #0
   42988:	d16a      	bne.n	42a60 <lll_conn_isr_rx+0x288>
	if (!radio_tmr_aa_restore()) {
   4298a:	f000 ffa1 	bl	438d0 <radio_tmr_aa_restore>
   4298e:	b170      	cbz	r0, 429ae <lll_conn_isr_rx+0x1d6>
	if (tx_release) {
   42990:	b19d      	cbz	r5, 429ba <lll_conn_isr_rx+0x1e2>
		LL_ASSERT(lll->handle != 0xFFFF);
   42992:	89a0      	ldrh	r0, [r4, #12]
   42994:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42998:	4298      	cmp	r0, r3
   4299a:	d06f      	beq.n	42a7c <lll_conn_isr_rx+0x2a4>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   4299c:	4629      	mov	r1, r5
   4299e:	f7fb fd21 	bl	3e3e4 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   429a2:	b967      	cbnz	r7, 429be <lll_conn_isr_rx+0x1e6>
		ull_rx_sched();
   429a4:	f7f5 fdd2 	bl	3854c <ull_rx_sched>
}
   429a8:	b003      	add	sp, #12
   429aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   429ae:	f000 ff83 	bl	438b8 <radio_tmr_aa_get>
   429b2:	f000 ff87 	bl	438c4 <radio_tmr_aa_save>
	if (tx_release) {
   429b6:	2d00      	cmp	r5, #0
   429b8:	d1eb      	bne.n	42992 <lll_conn_isr_rx+0x1ba>
	if (is_rx_enqueue) {
   429ba:	2f00      	cmp	r7, #0
   429bc:	d0f4      	beq.n	429a8 <lll_conn_isr_rx+0x1d0>
		ull_pdu_rx_alloc();
   429be:	f7f5 fd9f 	bl	38500 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   429c2:	2303      	movs	r3, #3
   429c4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   429c6:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   429c8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   429ca:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   429cc:	4631      	mov	r1, r6
   429ce:	f7f5 fdad 	bl	3852c <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   429d2:	e7e7      	b.n	429a4 <lll_conn_isr_rx+0x1cc>
			radio_disable();
   429d4:	f000 fcf4 	bl	433c0 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   429d8:	f000 fd12 	bl	43400 <radio_is_ready>
   429dc:	2800      	cmp	r0, #0
   429de:	f040 80a9 	bne.w	42b34 <lll_conn_isr_rx+0x35c>
			lll->empty = is_empty_pdu_tx_retry;
   429e2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   429e6:	f369 0382 	bfi	r3, r9, #2, #1
   429ea:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   429ee:	e7cc      	b.n	4298a <lll_conn_isr_rx+0x1b2>
	LL_ASSERT(node_rx);
   429f0:	4a3f      	ldr	r2, [pc, #252]	; (42af0 <lll_conn_isr_rx+0x318>)
   429f2:	4943      	ldr	r1, [pc, #268]	; (42b00 <lll_conn_isr_rx+0x328>)
   429f4:	4840      	ldr	r0, [pc, #256]	; (42af8 <lll_conn_isr_rx+0x320>)
   429f6:	23f2      	movs	r3, #242	; 0xf2
   429f8:	f007 fd55 	bl	4a4a6 <printk>
   429fc:	4040      	eors	r0, r0
   429fe:	f380 8811 	msr	BASEPRI, r0
   42a02:	f04f 0003 	mov.w	r0, #3
   42a06:	df02      	svc	2
	if (crc_ok) {
   42a08:	2d00      	cmp	r5, #0
   42a0a:	f43f af0b 	beq.w	42824 <lll_conn_isr_rx+0x4c>
   42a0e:	e728      	b.n	42862 <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   42a10:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   42a14:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   42a16:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   42a1a:	f3c3 0140 	ubfx	r1, r3, #1, #1
   42a1e:	428a      	cmp	r2, r1
   42a20:	d076      	beq.n	42b10 <lll_conn_isr_rx+0x338>
	is_rx_enqueue = 0U;
   42a22:	2700      	movs	r7, #0
		crc_expire = 0U;
   42a24:	4a31      	ldr	r2, [pc, #196]	; (42aec <lll_conn_isr_rx+0x314>)
   42a26:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   42a28:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   42a2c:	4b35      	ldr	r3, [pc, #212]	; (42b04 <lll_conn_isr_rx+0x32c>)
		crc_expire = 0U;
   42a2e:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42a30:	4620      	mov	r0, r4
		crc_valid = 1U;
   42a32:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42a34:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   42a36:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42a38:	f7ff fe5e 	bl	426f8 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42a3c:	f1b8 0f00 	cmp.w	r8, #0
   42a40:	f47f af03 	bne.w	4284a <lll_conn_isr_rx+0x72>
   42a44:	7f33      	ldrb	r3, [r6, #28]
   42a46:	06d9      	lsls	r1, r3, #27
   42a48:	f53f af7a 	bmi.w	42940 <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   42a4c:	9b01      	ldr	r3, [sp, #4]
   42a4e:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42a50:	06d2      	lsls	r2, r2, #27
   42a52:	f53f af75 	bmi.w	42940 <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   42a56:	785b      	ldrb	r3, [r3, #1]
   42a58:	2b00      	cmp	r3, #0
   42a5a:	f43f aef6 	beq.w	4284a <lll_conn_isr_rx+0x72>
   42a5e:	e76f      	b.n	42940 <lll_conn_isr_rx+0x168>
	LL_ASSERT(!radio_is_ready());
   42a60:	4a23      	ldr	r2, [pc, #140]	; (42af0 <lll_conn_isr_rx+0x318>)
   42a62:	4929      	ldr	r1, [pc, #164]	; (42b08 <lll_conn_isr_rx+0x330>)
   42a64:	4824      	ldr	r0, [pc, #144]	; (42af8 <lll_conn_isr_rx+0x320>)
   42a66:	f240 1369 	movw	r3, #361	; 0x169
   42a6a:	f007 fd1c 	bl	4a4a6 <printk>
   42a6e:	4040      	eors	r0, r0
   42a70:	f380 8811 	msr	BASEPRI, r0
   42a74:	f04f 0003 	mov.w	r0, #3
   42a78:	df02      	svc	2
   42a7a:	e786      	b.n	4298a <lll_conn_isr_rx+0x1b2>
		LL_ASSERT(lll->handle != 0xFFFF);
   42a7c:	4a1c      	ldr	r2, [pc, #112]	; (42af0 <lll_conn_isr_rx+0x318>)
   42a7e:	4923      	ldr	r1, [pc, #140]	; (42b0c <lll_conn_isr_rx+0x334>)
   42a80:	481d      	ldr	r0, [pc, #116]	; (42af8 <lll_conn_isr_rx+0x320>)
   42a82:	f44f 73bc 	mov.w	r3, #376	; 0x178
   42a86:	f007 fd0e 	bl	4a4a6 <printk>
   42a8a:	4040      	eors	r0, r0
   42a8c:	f380 8811 	msr	BASEPRI, r0
   42a90:	f04f 0003 	mov.w	r0, #3
   42a94:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   42a96:	89a0      	ldrh	r0, [r4, #12]
   42a98:	e780      	b.n	4299c <lll_conn_isr_rx+0x1c4>
			lll->empty = 0;
   42a9a:	f36f 0382 	bfc	r3, #2, #1
   42a9e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   42aa2:	f000 fce1 	bl	43468 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42aa6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42aaa:	2b00      	cmp	r3, #0
   42aac:	db0c      	blt.n	42ac8 <lll_conn_isr_rx+0x2f0>
			    !pdu_data_rx->md) {
   42aae:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42ab0:	f012 0510 	ands.w	r5, r2, #16
   42ab4:	d109      	bne.n	42aca <lll_conn_isr_rx+0x2f2>
				*is_done = !pdu_data_tx->md;
   42ab6:	f890 8000 	ldrb.w	r8, [r0]
   42aba:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42abe:	f088 0810 	eor.w	r8, r8, #16
   42ac2:	f3c8 1800 	ubfx	r8, r8, #4, #1
   42ac6:	e7a6      	b.n	42a16 <lll_conn_isr_rx+0x23e>
   42ac8:	7f32      	ldrb	r2, [r6, #28]
   42aca:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   42ace:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   42ad2:	4645      	mov	r5, r8
   42ad4:	e79f      	b.n	42a16 <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_offset = offset;
   42ad6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   42ada:	2500      	movs	r5, #0
   42adc:	e718      	b.n	42910 <lll_conn_isr_rx+0x138>
	is_rx_enqueue = 0U;
   42ade:	462f      	mov	r7, r5
   42ae0:	e72e      	b.n	42940 <lll_conn_isr_rx+0x168>
   42ae2:	bf00      	nop
   42ae4:	00042401 	.word	0x00042401
   42ae8:	20007618 	.word	0x20007618
   42aec:	20007795 	.word	0x20007795
   42af0:	00055dac 	.word	0x00055dac
   42af4:	0005518c 	.word	0x0005518c
   42af8:	0005512c 	.word	0x0005512c
   42afc:	000425e9 	.word	0x000425e9
   42b00:	00055d14 	.word	0x00055d14
   42b04:	20007796 	.word	0x20007796
   42b08:	00055d1c 	.word	0x00055d1c
   42b0c:	00055e00 	.word	0x00055e00
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   42b10:	2003      	movs	r0, #3
   42b12:	f7f5 fcd7 	bl	384c4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   42b16:	b1d8      	cbz	r0, 42b50 <lll_conn_isr_rx+0x378>
		lll->nesn++;
   42b18:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42b1c:	f083 0302 	eor.w	r3, r3, #2
   42b20:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   42b24:	7f73      	ldrb	r3, [r6, #29]
   42b26:	b19b      	cbz	r3, 42b50 <lll_conn_isr_rx+0x378>
			if (lll->enc_rx) {
   42b28:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42b2c:	0718      	lsls	r0, r3, #28
   42b2e:	d424      	bmi.n	42b7a <lll_conn_isr_rx+0x3a2>
			*is_rx_enqueue = 1U;
   42b30:	2701      	movs	r7, #1
   42b32:	e777      	b.n	42a24 <lll_conn_isr_rx+0x24c>
			LL_ASSERT(!radio_is_ready());
   42b34:	4a38      	ldr	r2, [pc, #224]	; (42c18 <lll_conn_isr_rx+0x440>)
   42b36:	4939      	ldr	r1, [pc, #228]	; (42c1c <lll_conn_isr_rx+0x444>)
   42b38:	4839      	ldr	r0, [pc, #228]	; (42c20 <lll_conn_isr_rx+0x448>)
   42b3a:	f44f 7398 	mov.w	r3, #304	; 0x130
   42b3e:	f007 fcb2 	bl	4a4a6 <printk>
   42b42:	4040      	eors	r0, r0
   42b44:	f380 8811 	msr	BASEPRI, r0
   42b48:	f04f 0003 	mov.w	r0, #3
   42b4c:	df02      	svc	2
   42b4e:	e748      	b.n	429e2 <lll_conn_isr_rx+0x20a>
   42b50:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42b54:	e765      	b.n	42a22 <lll_conn_isr_rx+0x24a>
   42b56:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42b5a:	7f32      	ldrb	r2, [r6, #28]
   42b5c:	e75b      	b.n	42a16 <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_len = 0;
   42b5e:	2200      	movs	r2, #0
   42b60:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   42b64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   42b66:	f104 0148 	add.w	r1, r4, #72	; 0x48
   42b6a:	f7f1 fd09 	bl	34580 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   42b6e:	9b01      	ldr	r3, [sp, #4]
   42b70:	681a      	ldr	r2, [r3, #0]
   42b72:	602a      	str	r2, [r5, #0]
				tx->next = link;
   42b74:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   42b76:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   42b78:	e6ca      	b.n	42910 <lll_conn_isr_rx+0x138>
				done = radio_ccm_is_done();
   42b7a:	f000 ff2f 	bl	439dc <radio_ccm_is_done>
				LL_ASSERT(done);
   42b7e:	2800      	cmp	r0, #0
   42b80:	d03b      	beq.n	42bfa <lll_conn_isr_rx+0x422>
				bool mic_failure = !radio_ccm_mic_is_valid();
   42b82:	f000 ff4d 	bl	43a20 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   42b86:	bb30      	cbnz	r0, 42bd6 <lll_conn_isr_rx+0x3fe>
				    lll->ccm_rx.counter == 0 &&
   42b88:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   42b8c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   42b90:	4313      	orrs	r3, r2
   42b92:	d104      	bne.n	42b9e <lll_conn_isr_rx+0x3c6>
				    (pdu_data_rx->ll_id ==
   42b94:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   42b96:	f003 0303 	and.w	r3, r3, #3
   42b9a:	2b03      	cmp	r3, #3
   42b9c:	d004      	beq.n	42ba8 <lll_conn_isr_rx+0x3d0>
					mic_state = LLL_CONN_MIC_FAIL;
   42b9e:	4b21      	ldr	r3, [pc, #132]	; (42c24 <lll_conn_isr_rx+0x44c>)
   42ba0:	2202      	movs	r2, #2
   42ba2:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   42ba4:	2700      	movs	r7, #0
   42ba6:	e6f0      	b.n	4298a <lll_conn_isr_rx+0x1b2>
						radio_pkt_scratch_get();
   42ba8:	f000 fc62 	bl	43470 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   42bac:	7843      	ldrb	r3, [r0, #1]
   42bae:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   42bb0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   42bb2:	d8f4      	bhi.n	42b9e <lll_conn_isr_rx+0x3c6>
						memcpy(pdu_data_rx,
   42bb4:	3303      	adds	r3, #3
   42bb6:	b2da      	uxtb	r2, r3
   42bb8:	f106 001c 	add.w	r0, r6, #28
   42bbc:	f009 fd7b 	bl	4c6b6 <memcpy>
						lll->ccm_rx.counter--;
   42bc0:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42bc4:	3b01      	subs	r3, #1
   42bc6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   42bca:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   42bce:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   42bd2:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   42bd6:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42bda:	3301      	adds	r3, #1
   42bdc:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   42be0:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   42be4:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   42be8:	f143 0300 	adc.w	r3, r3, #0
   42bec:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   42bee:	4b0d      	ldr	r3, [pc, #52]	; (42c24 <lll_conn_isr_rx+0x44c>)
   42bf0:	2701      	movs	r7, #1
   42bf2:	701f      	strb	r7, [r3, #0]
		if (err) {
   42bf4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42bf8:	e714      	b.n	42a24 <lll_conn_isr_rx+0x24c>
				LL_ASSERT(done);
   42bfa:	4a07      	ldr	r2, [pc, #28]	; (42c18 <lll_conn_isr_rx+0x440>)
   42bfc:	490a      	ldr	r1, [pc, #40]	; (42c28 <lll_conn_isr_rx+0x450>)
   42bfe:	4808      	ldr	r0, [pc, #32]	; (42c20 <lll_conn_isr_rx+0x448>)
   42c00:	f240 33be 	movw	r3, #958	; 0x3be
   42c04:	f007 fc4f 	bl	4a4a6 <printk>
   42c08:	4040      	eors	r0, r0
   42c0a:	f380 8811 	msr	BASEPRI, r0
   42c0e:	f04f 0003 	mov.w	r0, #3
   42c12:	df02      	svc	2
   42c14:	e7b5      	b.n	42b82 <lll_conn_isr_rx+0x3aa>
   42c16:	bf00      	nop
   42c18:	00055dac 	.word	0x00055dac
   42c1c:	00055d1c 	.word	0x00055d1c
   42c20:	0005512c 	.word	0x0005512c
   42c24:	20007797 	.word	0x20007797
   42c28:	00055df8 	.word	0x00055df8

00042c2c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   42c2e:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42c30:	89a2      	ldrh	r2, [r4, #12]
   42c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42c36:	429a      	cmp	r2, r3
{
   42c38:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   42c3a:	f000 80d0 	beq.w	42dde <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42c3e:	4605      	mov	r5, r0
   42c40:	f7ff fc48 	bl	424d4 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   42c44:	892b      	ldrh	r3, [r5, #8]
   42c46:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   42c48:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42c4a:	441a      	add	r2, r3
   42c4c:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42c4e:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   42c50:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42c52:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   42c54:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   42c56:	1c41      	adds	r1, r0, #1
   42c58:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   42c5a:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   42c5c:	f04f 0100 	mov.w	r1, #0
   42c60:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42c62:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   42c66:	f100 808d 	bmi.w	42d84 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   42c6a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   42c6e:	460b      	mov	r3, r1
   42c70:	7fa1      	ldrb	r1, [r4, #30]
   42c72:	9000      	str	r0, [sp, #0]
   42c74:	f104 001f 	add.w	r0, r4, #31
   42c78:	f7fc faf4 	bl	3f264 <lll_chan_sel_1>
   42c7c:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   42c7e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   42c82:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   42c84:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   42c88:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   42c8a:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   42c8c:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   42c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   42c90:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   42c92:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   42c94:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   42c98:	428b      	cmp	r3, r1
   42c9a:	bf28      	it	cs
   42c9c:	460b      	movcs	r3, r1
	if (!lll->empty) {
   42c9e:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   42ca2:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   42ca4:	f000 808d 	beq.w	42dc2 <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   42ca8:	f000 fad0 	bl	4324c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   42cac:	2008      	movs	r0, #8
   42cae:	f000 fb01 	bl	432b4 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   42cb2:	4620      	mov	r0, r4
   42cb4:	f7ff fc52 	bl	4255c <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   42cb8:	1d20      	adds	r0, r4, #4
   42cba:	f000 fb19 	bl	432f0 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   42cbe:	8923      	ldrh	r3, [r4, #8]
   42cc0:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   42cc2:	f240 605b 	movw	r0, #1627	; 0x65b
   42cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   42cca:	f000 fbb7 	bl	4343c <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   42cce:	4630      	mov	r0, r6
   42cd0:	f7fe f80a 	bl	40ce8 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   42cd4:	4621      	mov	r1, r4
   42cd6:	4846      	ldr	r0, [pc, #280]	; (42df0 <prepare_cb+0x1c4>)
   42cd8:	f000 fa76 	bl	431c8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   42cdc:	2096      	movs	r0, #150	; 0x96
   42cde:	f000 fcf7 	bl	436d0 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   42ce2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   42ce6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42cea:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   42cee:	2100      	movs	r1, #0
   42cf0:	f002 0207 	and.w	r2, r2, #7
   42cf4:	f000 0007 	and.w	r0, r0, #7
   42cf8:	f000 fc06 	bl	43508 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   42cfc:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42cfe:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42d00:	4638      	mov	r0, r7
   42d02:	f7fd ffd3 	bl	40cac <lll_event_offset_get>
   42d06:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   42d08:	686a      	ldr	r2, [r5, #4]
   42d0a:	f106 0109 	add.w	r1, r6, #9
   42d0e:	2000      	movs	r0, #0
   42d10:	f000 fcea 	bl	436e8 <radio_tmr_start>
   42d14:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   42d16:	f000 fdbb 	bl	43890 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   42d1a:	2000      	movs	r0, #0
   42d1c:	f000 fdd2 	bl	438c4 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   42d22:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   42d26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   42d28:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42d2c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42d30:	2101      	movs	r1, #1
   42d32:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   42d36:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42d38:	f000 fb2e 	bl	43398 <radio_rx_ready_delay_get>
   42d3c:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   42d3e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42d42:	f000 0007 	and.w	r0, r0, #7
   42d46:	2802      	cmp	r0, #2
   42d48:	d039      	beq.n	42dbe <prepare_cb+0x192>
		return 40;
   42d4a:	2804      	cmp	r0, #4
   42d4c:	bf0c      	ite	eq
   42d4e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   42d52:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42d54:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   42d56:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42d58:	f000 fb20 	bl	4339c <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   42d5c:	4428      	add	r0, r5
   42d5e:	f000 fd89 	bl	43874 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42d62:	89a1      	ldrh	r1, [r4, #12]
   42d64:	3105      	adds	r1, #5
   42d66:	4632      	mov	r2, r6
   42d68:	b2c9      	uxtb	r1, r1
   42d6a:	4638      	mov	r0, r7
   42d6c:	f7fd ffac 	bl	40cc8 <lll_preempt_calc>
   42d70:	b180      	cbz	r0, 42d94 <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   42d72:	4820      	ldr	r0, [pc, #128]	; (42df4 <prepare_cb+0x1c8>)
   42d74:	4621      	mov	r1, r4
   42d76:	f000 fa27 	bl	431c8 <radio_isr_set>
		radio_disable();
   42d7a:	f000 fb21 	bl	433c0 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   42d7e:	2000      	movs	r0, #0
   42d80:	b003      	add	sp, #12
   42d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42d84:	460a      	mov	r2, r1
   42d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   42d8a:	8be1      	ldrh	r1, [r4, #30]
   42d8c:	f7fc faae 	bl	3f2ec <lll_chan_sel_2>
   42d90:	4606      	mov	r6, r0
   42d92:	e774      	b.n	42c7e <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   42d94:	4620      	mov	r0, r4
   42d96:	f7fd ff23 	bl	40be0 <lll_prepare_done>
		LL_ASSERT(!ret);
   42d9a:	2800      	cmp	r0, #0
   42d9c:	d0ef      	beq.n	42d7e <prepare_cb+0x152>
   42d9e:	4a16      	ldr	r2, [pc, #88]	; (42df8 <prepare_cb+0x1cc>)
   42da0:	4916      	ldr	r1, [pc, #88]	; (42dfc <prepare_cb+0x1d0>)
   42da2:	4817      	ldr	r0, [pc, #92]	; (42e00 <prepare_cb+0x1d4>)
   42da4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   42da8:	f007 fb7d 	bl	4a4a6 <printk>
   42dac:	4040      	eors	r0, r0
   42dae:	f380 8811 	msr	BASEPRI, r0
   42db2:	f04f 0003 	mov.w	r0, #3
   42db6:	df02      	svc	2
}
   42db8:	2000      	movs	r0, #0
   42dba:	b003      	add	sp, #12
   42dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   42dbe:	2318      	movs	r3, #24
   42dc0:	e7c8      	b.n	42d54 <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   42dc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   42dc6:	f7f1 fbd3 	bl	34570 <memq_peek>
		if (!link) {
   42dca:	2800      	cmp	r0, #0
   42dcc:	f47f af6c 	bne.w	42ca8 <prepare_cb+0x7c>
			lll->empty = 1U;
   42dd0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42dd4:	f043 0304 	orr.w	r3, r3, #4
   42dd8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   42ddc:	e764      	b.n	42ca8 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   42dde:	4809      	ldr	r0, [pc, #36]	; (42e04 <prepare_cb+0x1d8>)
   42de0:	4621      	mov	r1, r4
   42de2:	f000 f9f1 	bl	431c8 <radio_isr_set>
		radio_disable();
   42de6:	f000 faeb 	bl	433c0 <radio_disable>
}
   42dea:	2000      	movs	r0, #0
   42dec:	b003      	add	sp, #12
   42dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42df0:	000427d9 	.word	0x000427d9
   42df4:	00040e21 	.word	0x00040e21
   42df8:	00055e18 	.word	0x00055e18
   42dfc:	00055408 	.word	0x00055408
   42e00:	0005512c 	.word	0x0005512c
   42e04:	00040e45 	.word	0x00040e45

00042e08 <lll_periph_prepare>:
{
   42e08:	b510      	push	{r4, lr}
   42e0a:	b082      	sub	sp, #8
   42e0c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   42e0e:	f7fe f969 	bl	410e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   42e12:	2800      	cmp	r0, #0
   42e14:	db25      	blt.n	42e62 <lll_periph_prepare+0x5a>
	lll = p->param;
   42e16:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42e18:	8920      	ldrh	r0, [r4, #8]
   42e1a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   42e1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42e1e:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   42e22:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   42e24:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   42e26:	4283      	cmp	r3, r0
   42e28:	bf28      	it	cs
   42e2a:	4603      	movcs	r3, r0
   42e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   42e2e:	4a13      	ldr	r2, [pc, #76]	; (42e7c <lll_periph_prepare+0x74>)
   42e30:	4913      	ldr	r1, [pc, #76]	; (42e80 <lll_periph_prepare+0x78>)
   42e32:	4814      	ldr	r0, [pc, #80]	; (42e84 <lll_periph_prepare+0x7c>)
   42e34:	9400      	str	r4, [sp, #0]
   42e36:	2300      	movs	r3, #0
   42e38:	f7f5 fe78 	bl	38b2c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42e3c:	b108      	cbz	r0, 42e42 <lll_periph_prepare+0x3a>
   42e3e:	3077      	adds	r0, #119	; 0x77
   42e40:	d101      	bne.n	42e46 <lll_periph_prepare+0x3e>
}
   42e42:	b002      	add	sp, #8
   42e44:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42e46:	4a10      	ldr	r2, [pc, #64]	; (42e88 <lll_periph_prepare+0x80>)
   42e48:	4910      	ldr	r1, [pc, #64]	; (42e8c <lll_periph_prepare+0x84>)
   42e4a:	4811      	ldr	r0, [pc, #68]	; (42e90 <lll_periph_prepare+0x88>)
   42e4c:	235e      	movs	r3, #94	; 0x5e
   42e4e:	f007 fb2a 	bl	4a4a6 <printk>
   42e52:	4040      	eors	r0, r0
   42e54:	f380 8811 	msr	BASEPRI, r0
   42e58:	f04f 0003 	mov.w	r0, #3
   42e5c:	df02      	svc	2
}
   42e5e:	b002      	add	sp, #8
   42e60:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   42e62:	4a09      	ldr	r2, [pc, #36]	; (42e88 <lll_periph_prepare+0x80>)
   42e64:	490b      	ldr	r1, [pc, #44]	; (42e94 <lll_periph_prepare+0x8c>)
   42e66:	480a      	ldr	r0, [pc, #40]	; (42e90 <lll_periph_prepare+0x88>)
   42e68:	234d      	movs	r3, #77	; 0x4d
   42e6a:	f007 fb1c 	bl	4a4a6 <printk>
   42e6e:	4040      	eors	r0, r0
   42e70:	f380 8811 	msr	BASEPRI, r0
   42e74:	f04f 0003 	mov.w	r0, #3
   42e78:	df02      	svc	2
   42e7a:	e7cc      	b.n	42e16 <lll_periph_prepare+0xe>
   42e7c:	00042c2d 	.word	0x00042c2d
   42e80:	000424fd 	.word	0x000424fd
   42e84:	00040ca5 	.word	0x00040ca5
   42e88:	00055e18 	.word	0x00055e18
   42e8c:	00055d4c 	.word	0x00055d4c
   42e90:	0005512c 	.word	0x0005512c
   42e94:	00055c78 	.word	0x00055c78

00042e98 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   42e9a:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42e9c:	89a2      	ldrh	r2, [r4, #12]
   42e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42ea2:	429a      	cmp	r2, r3
{
   42ea4:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   42ea6:	f000 8091 	beq.w	42fcc <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42eaa:	4605      	mov	r5, r0
   42eac:	f7ff fb12 	bl	424d4 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   42eb0:	892b      	ldrh	r3, [r5, #8]
   42eb2:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   42eb4:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42eb6:	441a      	add	r2, r3
   42eb8:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42eba:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   42ebc:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42ebe:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   42ec0:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   42ec2:	1c41      	adds	r1, r0, #1
   42ec4:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   42ec6:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   42ec8:	f04f 0100 	mov.w	r1, #0
   42ecc:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42ece:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   42ed2:	d45f      	bmi.n	42f94 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   42ed4:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   42ed8:	460b      	mov	r3, r1
   42eda:	7fa1      	ldrb	r1, [r4, #30]
   42edc:	9000      	str	r0, [sp, #0]
   42ede:	f104 001f 	add.w	r0, r4, #31
   42ee2:	f7fc f9bf 	bl	3f264 <lll_chan_sel_1>
   42ee6:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42ee8:	4620      	mov	r0, r4
   42eea:	a903      	add	r1, sp, #12
   42eec:	f7ff fc04 	bl	426f8 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   42ef0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   42ef4:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   42ef6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   42efa:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   42efc:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   42f00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   42f04:	780a      	ldrb	r2, [r1, #0]
   42f06:	f022 020c 	bic.w	r2, r2, #12
   42f0a:	4313      	orrs	r3, r2
   42f0c:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   42f0e:	f000 f99d 	bl	4324c <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   42f12:	2008      	movs	r0, #8
   42f14:	f000 f9ce 	bl	432b4 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   42f18:	1d20      	adds	r0, r4, #4
   42f1a:	f000 f9e9 	bl	432f0 <radio_aa_set>
   42f1e:	8923      	ldrh	r3, [r4, #8]
   42f20:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   42f22:	f240 605b 	movw	r0, #1627	; 0x65b
   42f26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   42f2a:	f000 fa87 	bl	4343c <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   42f2e:	4630      	mov	r0, r6
   42f30:	f7fd feda 	bl	40ce8 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   42f34:	9903      	ldr	r1, [sp, #12]
   42f36:	4620      	mov	r0, r4
   42f38:	f7ff fbb2 	bl	426a0 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   42f3c:	4621      	mov	r1, r4
   42f3e:	4828      	ldr	r0, [pc, #160]	; (42fe0 <prepare_cb+0x148>)
   42f40:	f000 f942 	bl	431c8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   42f44:	2096      	movs	r0, #150	; 0x96
   42f46:	f000 fbc3 	bl	436d0 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   42f4a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42f4e:	f000 0007 	and.w	r0, r0, #7
   42f52:	f000 fa91 	bl	43478 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   42f56:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42f58:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42f5a:	4638      	mov	r0, r7
   42f5c:	f7fd fea6 	bl	40cac <lll_event_offset_get>
   42f60:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   42f62:	686a      	ldr	r2, [r5, #4]
   42f64:	f106 0109 	add.w	r1, r6, #9
   42f68:	2001      	movs	r0, #1
   42f6a:	f000 fbbd 	bl	436e8 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   42f6e:	f000 fcbb 	bl	438e8 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42f72:	89a1      	ldrh	r1, [r4, #12]
   42f74:	3105      	adds	r1, #5
   42f76:	4632      	mov	r2, r6
   42f78:	b2c9      	uxtb	r1, r1
   42f7a:	4638      	mov	r0, r7
   42f7c:	f7fd fea4 	bl	40cc8 <lll_preempt_calc>
   42f80:	b180      	cbz	r0, 42fa4 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   42f82:	4818      	ldr	r0, [pc, #96]	; (42fe4 <prepare_cb+0x14c>)
   42f84:	4621      	mov	r1, r4
   42f86:	f000 f91f 	bl	431c8 <radio_isr_set>
		radio_disable();
   42f8a:	f000 fa19 	bl	433c0 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   42f8e:	2000      	movs	r0, #0
   42f90:	b005      	add	sp, #20
   42f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42f94:	460a      	mov	r2, r1
   42f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   42f9a:	8be1      	ldrh	r1, [r4, #30]
   42f9c:	f7fc f9a6 	bl	3f2ec <lll_chan_sel_2>
   42fa0:	4606      	mov	r6, r0
   42fa2:	e7a1      	b.n	42ee8 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   42fa4:	4620      	mov	r0, r4
   42fa6:	f7fd fe1b 	bl	40be0 <lll_prepare_done>
		LL_ASSERT(!ret);
   42faa:	2800      	cmp	r0, #0
   42fac:	d0ef      	beq.n	42f8e <prepare_cb+0xf6>
   42fae:	4a0e      	ldr	r2, [pc, #56]	; (42fe8 <prepare_cb+0x150>)
   42fb0:	490e      	ldr	r1, [pc, #56]	; (42fec <prepare_cb+0x154>)
   42fb2:	480f      	ldr	r0, [pc, #60]	; (42ff0 <prepare_cb+0x158>)
   42fb4:	23fd      	movs	r3, #253	; 0xfd
   42fb6:	f007 fa76 	bl	4a4a6 <printk>
   42fba:	4040      	eors	r0, r0
   42fbc:	f380 8811 	msr	BASEPRI, r0
   42fc0:	f04f 0003 	mov.w	r0, #3
   42fc4:	df02      	svc	2
}
   42fc6:	2000      	movs	r0, #0
   42fc8:	b005      	add	sp, #20
   42fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   42fcc:	4809      	ldr	r0, [pc, #36]	; (42ff4 <prepare_cb+0x15c>)
   42fce:	4621      	mov	r1, r4
   42fd0:	f000 f8fa 	bl	431c8 <radio_isr_set>
		radio_disable();
   42fd4:	f000 f9f4 	bl	433c0 <radio_disable>
}
   42fd8:	2000      	movs	r0, #0
   42fda:	b005      	add	sp, #20
   42fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42fde:	bf00      	nop
   42fe0:	000425e9 	.word	0x000425e9
   42fe4:	00040e21 	.word	0x00040e21
   42fe8:	00055e6c 	.word	0x00055e6c
   42fec:	00055408 	.word	0x00055408
   42ff0:	0005512c 	.word	0x0005512c
   42ff4:	00040e45 	.word	0x00040e45

00042ff8 <lll_central_prepare>:
{
   42ff8:	b510      	push	{r4, lr}
   42ffa:	b082      	sub	sp, #8
   42ffc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   42ffe:	f7fe f871 	bl	410e4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   43002:	2800      	cmp	r0, #0
   43004:	db19      	blt.n	4303a <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   43006:	4a13      	ldr	r2, [pc, #76]	; (43054 <lll_central_prepare+0x5c>)
   43008:	4913      	ldr	r1, [pc, #76]	; (43058 <lll_central_prepare+0x60>)
   4300a:	4814      	ldr	r0, [pc, #80]	; (4305c <lll_central_prepare+0x64>)
   4300c:	9400      	str	r4, [sp, #0]
   4300e:	2300      	movs	r3, #0
   43010:	f7f5 fd8c 	bl	38b2c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   43014:	b108      	cbz	r0, 4301a <lll_central_prepare+0x22>
   43016:	3077      	adds	r0, #119	; 0x77
   43018:	d101      	bne.n	4301e <lll_central_prepare+0x26>
}
   4301a:	b002      	add	sp, #8
   4301c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   4301e:	4a10      	ldr	r2, [pc, #64]	; (43060 <lll_central_prepare+0x68>)
   43020:	4910      	ldr	r1, [pc, #64]	; (43064 <lll_central_prepare+0x6c>)
   43022:	4811      	ldr	r0, [pc, #68]	; (43068 <lll_central_prepare+0x70>)
   43024:	2351      	movs	r3, #81	; 0x51
   43026:	f007 fa3e 	bl	4a4a6 <printk>
   4302a:	4040      	eors	r0, r0
   4302c:	f380 8811 	msr	BASEPRI, r0
   43030:	f04f 0003 	mov.w	r0, #3
   43034:	df02      	svc	2
}
   43036:	b002      	add	sp, #8
   43038:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   4303a:	4a09      	ldr	r2, [pc, #36]	; (43060 <lll_central_prepare+0x68>)
   4303c:	490b      	ldr	r1, [pc, #44]	; (4306c <lll_central_prepare+0x74>)
   4303e:	480a      	ldr	r0, [pc, #40]	; (43068 <lll_central_prepare+0x70>)
   43040:	234c      	movs	r3, #76	; 0x4c
   43042:	f007 fa30 	bl	4a4a6 <printk>
   43046:	4040      	eors	r0, r0
   43048:	f380 8811 	msr	BASEPRI, r0
   4304c:	f04f 0003 	mov.w	r0, #3
   43050:	df02      	svc	2
   43052:	e7d8      	b.n	43006 <lll_central_prepare+0xe>
   43054:	00042e99 	.word	0x00042e99
   43058:	000424fd 	.word	0x000424fd
   4305c:	00040ca5 	.word	0x00040ca5
   43060:	00055e6c 	.word	0x00055e6c
   43064:	00055d4c 	.word	0x00055d4c
   43068:	0005512c 	.word	0x0005512c
   4306c:	00055c78 	.word	0x00055c78

00043070 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   43070:	4b05      	ldr	r3, [pc, #20]	; (43088 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   43072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   43076:	2100      	movs	r1, #0
   43078:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   4307c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   43080:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   43084:	4770      	bx	lr
   43086:	bf00      	nop
   43088:	4000b000 	.word	0x4000b000

0004308c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   4308c:	4b05      	ldr	r3, [pc, #20]	; (430a4 <cntr_start+0x18>)
   4308e:	7818      	ldrb	r0, [r3, #0]
   43090:	1c42      	adds	r2, r0, #1
   43092:	701a      	strb	r2, [r3, #0]
   43094:	b918      	cbnz	r0, 4309e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   43096:	4b04      	ldr	r3, [pc, #16]	; (430a8 <cntr_start+0x1c>)
   43098:	2201      	movs	r2, #1
   4309a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   4309c:	4770      	bx	lr
		return 1;
   4309e:	2001      	movs	r0, #1
}
   430a0:	4770      	bx	lr
   430a2:	bf00      	nop
   430a4:	20007798 	.word	0x20007798
   430a8:	4000b000 	.word	0x4000b000

000430ac <cntr_stop>:

uint32_t cntr_stop(void)
{
   430ac:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   430ae:	4c0d      	ldr	r4, [pc, #52]	; (430e4 <cntr_stop+0x38>)
   430b0:	7820      	ldrb	r0, [r4, #0]
   430b2:	b148      	cbz	r0, 430c8 <cntr_stop+0x1c>

	if (--_refcount) {
   430b4:	3801      	subs	r0, #1
   430b6:	b2c0      	uxtb	r0, r0
   430b8:	7020      	strb	r0, [r4, #0]
   430ba:	b918      	cbnz	r0, 430c4 <cntr_stop+0x18>
   430bc:	4b0a      	ldr	r3, [pc, #40]	; (430e8 <cntr_stop+0x3c>)
   430be:	2201      	movs	r2, #1
   430c0:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   430c2:	bd10      	pop	{r4, pc}
		return 1;
   430c4:	2001      	movs	r0, #1
}
   430c6:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   430c8:	4a08      	ldr	r2, [pc, #32]	; (430ec <cntr_stop+0x40>)
   430ca:	4909      	ldr	r1, [pc, #36]	; (430f0 <cntr_stop+0x44>)
   430cc:	4809      	ldr	r0, [pc, #36]	; (430f4 <cntr_stop+0x48>)
   430ce:	232d      	movs	r3, #45	; 0x2d
   430d0:	f007 f9e9 	bl	4a4a6 <printk>
   430d4:	4040      	eors	r0, r0
   430d6:	f380 8811 	msr	BASEPRI, r0
   430da:	f04f 0003 	mov.w	r0, #3
   430de:	df02      	svc	2
	if (--_refcount) {
   430e0:	7820      	ldrb	r0, [r4, #0]
   430e2:	e7e7      	b.n	430b4 <cntr_stop+0x8>
   430e4:	20007798 	.word	0x20007798
   430e8:	4000b000 	.word	0x4000b000
   430ec:	00055ebc 	.word	0x00055ebc
   430f0:	00055f08 	.word	0x00055f08
   430f4:	0005512c 	.word	0x0005512c

000430f8 <cntr_cnt_get>:
     return p_reg->COUNTER;
   430f8:	4b01      	ldr	r3, [pc, #4]	; (43100 <cntr_cnt_get+0x8>)
   430fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   430fe:	4770      	bx	lr
   43100:	4000b000 	.word	0x4000b000

00043104 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   43104:	4b02      	ldr	r3, [pc, #8]	; (43110 <cntr_cmp_set+0xc>)
   43106:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   4310a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   4310e:	4770      	bx	lr
   43110:	4000b000 	.word	0x4000b000

00043114 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43114:	4b12      	ldr	r3, [pc, #72]	; (43160 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   43116:	b430      	push	{r4, r5}
   43118:	2101      	movs	r1, #1
   4311a:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   4311c:	2000      	movs	r0, #0
   4311e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   43120:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   43124:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   43128:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   4312c:	6019      	str	r1, [r3, #0]
}
   4312e:	e005      	b.n	4313c <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   43130:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   43134:	b932      	cbnz	r2, 43144 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   43136:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   4313a:	b11a      	cbz	r2, 43144 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   4313c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   43140:	2a00      	cmp	r2, #0
   43142:	d0f5      	beq.n	43130 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43144:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   43146:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   4314a:	2a00      	cmp	r2, #0
   4314c:	d1e7      	bne.n	4311e <do_ecb+0xa>
   4314e:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   43152:	2d00      	cmp	r5, #0
   43154:	d0e3      	beq.n	4311e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   43156:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   43158:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   4315c:	4770      	bx	lr
   4315e:	bf00      	nop
   43160:	4000e000 	.word	0x4000e000

00043164 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   43164:	b570      	push	{r4, r5, r6, lr}
   43166:	b08c      	sub	sp, #48	; 0x30
   43168:	460e      	mov	r6, r1
   4316a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   4316c:	4601      	mov	r1, r0
   4316e:	2210      	movs	r2, #16
   43170:	4668      	mov	r0, sp
{
   43172:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   43174:	f7f1 f9ca 	bl	3450c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   43178:	2210      	movs	r2, #16
   4317a:	eb0d 0002 	add.w	r0, sp, r2
   4317e:	4631      	mov	r1, r6
   43180:	f7f1 f9c4 	bl	3450c <mem_rcopy>

	do_ecb(&ecb);
   43184:	4668      	mov	r0, sp
   43186:	f7ff ffc5 	bl	43114 <do_ecb>

	if (cipher_text_le) {
   4318a:	b125      	cbz	r5, 43196 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   4318c:	2210      	movs	r2, #16
   4318e:	a908      	add	r1, sp, #32
   43190:	4628      	mov	r0, r5
   43192:	f7f1 f9bb 	bl	3450c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   43196:	b124      	cbz	r4, 431a2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   43198:	2210      	movs	r2, #16
   4319a:	a908      	add	r1, sp, #32
   4319c:	4620      	mov	r0, r4
   4319e:	f009 fa8a 	bl	4c6b6 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   431a2:	b00c      	add	sp, #48	; 0x30
   431a4:	bd70      	pop	{r4, r5, r6, pc}
   431a6:	bf00      	nop

000431a8 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   431a8:	4b04      	ldr	r3, [pc, #16]	; (431bc <isr_radio+0x14>)
   431aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   431ae:	b123      	cbz	r3, 431ba <isr_radio+0x12>
		isr_cb(isr_cb_param);
   431b0:	4a03      	ldr	r2, [pc, #12]	; (431c0 <isr_radio+0x18>)
   431b2:	4b04      	ldr	r3, [pc, #16]	; (431c4 <isr_radio+0x1c>)
   431b4:	6810      	ldr	r0, [r2, #0]
   431b6:	681b      	ldr	r3, [r3, #0]
   431b8:	4718      	bx	r3
}
   431ba:	4770      	bx	lr
   431bc:	40001000 	.word	0x40001000
   431c0:	200067d4 	.word	0x200067d4
   431c4:	200067d0 	.word	0x200067d0

000431c8 <radio_isr_set>:
{
   431c8:	b538      	push	{r3, r4, r5, lr}
   431ca:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   431cc:	2001      	movs	r0, #1
{
   431ce:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   431d0:	f7ea f888 	bl	2d2e4 <arch_irq_disable>
	isr_cb = cb;
   431d4:	4b08      	ldr	r3, [pc, #32]	; (431f8 <radio_isr_set+0x30>)
	isr_cb_param = param;
   431d6:	4a09      	ldr	r2, [pc, #36]	; (431fc <radio_isr_set+0x34>)
	isr_cb = cb;
   431d8:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   431da:	4909      	ldr	r1, [pc, #36]	; (43200 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   431dc:	4b09      	ldr	r3, [pc, #36]	; (43204 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   431de:	6015      	str	r5, [r2, #0]
   431e0:	2010      	movs	r0, #16
   431e2:	2202      	movs	r2, #2
   431e4:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   431e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   431ec:	2001      	movs	r0, #1
}
   431ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   431f2:	f7ea b867 	b.w	2d2c4 <arch_irq_enable>
   431f6:	bf00      	nop
   431f8:	200067d0 	.word	0x200067d0
   431fc:	200067d4 	.word	0x200067d4
   43200:	40001000 	.word	0x40001000
   43204:	e000e100 	.word	0xe000e100

00043208 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   43208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4320c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   43210:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   43212:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   43216:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   4321a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   4321e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   43222:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   43226:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   4322a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   4322e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   43232:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   43236:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   4323a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   4323e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   43242:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   43246:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   4324a:	4770      	bx	lr

0004324c <radio_reset>:
{
   4324c:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   4324e:	2001      	movs	r0, #1
   43250:	f7ea f848 	bl	2d2e4 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   43254:	4a0d      	ldr	r2, [pc, #52]	; (4328c <radio_reset+0x40>)
   43256:	2100      	movs	r1, #0
   43258:	2301      	movs	r3, #1
   4325a:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   4325e:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   43262:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   43266:	490a      	ldr	r1, [pc, #40]	; (43290 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   43268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   4326c:	f023 0301 	bic.w	r3, r3, #1
   43270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   43274:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   43278:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   4327c:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   43280:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   43284:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   43288:	bd10      	pop	{r4, pc}
   4328a:	bf00      	nop
   4328c:	40001000 	.word	0x40001000
   43290:	4001f000 	.word	0x4001f000

00043294 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   43294:	4b06      	ldr	r3, [pc, #24]	; (432b0 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   43296:	2802      	cmp	r0, #2
   43298:	bf14      	ite	ne
   4329a:	2203      	movne	r2, #3
   4329c:	2204      	moveq	r2, #4
   4329e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   432a2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   432a6:	f042 0201 	orr.w	r2, r2, #1
   432aa:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   432ae:	4770      	bx	lr
   432b0:	40001000 	.word	0x40001000

000432b4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   432b4:	4b01      	ldr	r3, [pc, #4]	; (432bc <radio_tx_power_set+0x8>)
   432b6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   432ba:	4770      	bx	lr
   432bc:	40001000 	.word	0x40001000

000432c0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   432c0:	4b01      	ldr	r3, [pc, #4]	; (432c8 <radio_freq_chan_set+0x8>)
   432c2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   432c6:	4770      	bx	lr
   432c8:	40001000 	.word	0x40001000

000432cc <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   432cc:	4b07      	ldr	r3, [pc, #28]	; (432ec <radio_whiten_iv_set+0x20>)
   432ce:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   432d2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   432d6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   432da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   432de:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   432e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   432e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   432ea:	4770      	bx	lr
   432ec:	40001000 	.word	0x40001000

000432f0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   432f0:	4a0a      	ldr	r2, [pc, #40]	; (4331c <radio_aa_set+0x2c>)
   432f2:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   432f4:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   432f6:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   432fa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   432fe:	78c3      	ldrb	r3, [r0, #3]
   43300:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   43304:	7843      	ldrb	r3, [r0, #1]
   43306:	f890 c002 	ldrb.w	ip, [r0, #2]
   4330a:	7801      	ldrb	r1, [r0, #0]
   4330c:	041b      	lsls	r3, r3, #16
   4330e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   43312:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   43316:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   4331a:	4770      	bx	lr
   4331c:	40001000 	.word	0x40001000

00043320 <radio_pkt_configure>:
	switch (phy) {
   43320:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   43324:	2b02      	cmp	r3, #2
   43326:	bf14      	ite	ne
   43328:	f04f 0c00 	movne.w	ip, #0
   4332c:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   43330:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   43332:	bf48      	it	mi
   43334:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   43338:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   4333c:	4b0a      	ldr	r3, [pc, #40]	; (43368 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   4333e:	4a0b      	ldr	r2, [pc, #44]	; (4336c <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   43340:	ea40 000c 	orr.w	r0, r0, ip
   43344:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   43348:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   4334c:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   43350:	4002      	ands	r2, r0
   43352:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   43356:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   4335a:	4311      	orrs	r1, r2
   4335c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   43360:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   43364:	4770      	bx	lr
   43366:	bf00      	nop
   43368:	40001000 	.word	0x40001000
   4336c:	fef80000 	.word	0xfef80000

00043370 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   43370:	4b01      	ldr	r3, [pc, #4]	; (43378 <radio_pkt_rx_set+0x8>)
   43372:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   43376:	4770      	bx	lr
   43378:	40001000 	.word	0x40001000

0004337c <radio_pkt_tx_set>:
   4337c:	4b01      	ldr	r3, [pc, #4]	; (43384 <radio_pkt_tx_set+0x8>)
   4337e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   43382:	4770      	bx	lr
   43384:	40001000 	.word	0x40001000

00043388 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   43388:	2802      	cmp	r0, #2
}
   4338a:	bf14      	ite	ne
   4338c:	2029      	movne	r0, #41	; 0x29
   4338e:	2028      	moveq	r0, #40	; 0x28
   43390:	4770      	bx	lr
   43392:	bf00      	nop

00043394 <radio_tx_chain_delay_get>:
}
   43394:	2001      	movs	r0, #1
   43396:	4770      	bx	lr

00043398 <radio_rx_ready_delay_get>:
}
   43398:	2029      	movs	r0, #41	; 0x29
   4339a:	4770      	bx	lr

0004339c <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   4339c:	2802      	cmp	r0, #2
}
   4339e:	bf14      	ite	ne
   433a0:	200a      	movne	r0, #10
   433a2:	2005      	moveq	r0, #5
   433a4:	4770      	bx	lr
   433a6:	bf00      	nop

000433a8 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   433a8:	4b01      	ldr	r3, [pc, #4]	; (433b0 <radio_rx_enable+0x8>)
   433aa:	2201      	movs	r2, #1
   433ac:	605a      	str	r2, [r3, #4]
}
   433ae:	4770      	bx	lr
   433b0:	40001000 	.word	0x40001000

000433b4 <radio_tx_enable>:
   433b4:	4b01      	ldr	r3, [pc, #4]	; (433bc <radio_tx_enable+0x8>)
   433b6:	2201      	movs	r2, #1
   433b8:	601a      	str	r2, [r3, #0]
}
   433ba:	4770      	bx	lr
   433bc:	40001000 	.word	0x40001000

000433c0 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   433c0:	4a07      	ldr	r2, [pc, #28]	; (433e0 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   433c2:	4908      	ldr	r1, [pc, #32]	; (433e4 <radio_disable+0x24>)
{
   433c4:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   433c6:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   433c8:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   433cc:	2000      	movs	r0, #0
   433ce:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   433d2:	6053      	str	r3, [r2, #4]
}
   433d4:	bc10      	pop	{r4}
   433d6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   433d8:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   433dc:	610b      	str	r3, [r1, #16]
}
   433de:	4770      	bx	lr
   433e0:	4001f000 	.word	0x4001f000
   433e4:	40001000 	.word	0x40001000

000433e8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   433e8:	4b04      	ldr	r3, [pc, #16]	; (433fc <radio_status_reset+0x14>)
   433ea:	2200      	movs	r2, #0
   433ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   433f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   433f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   433f8:	4770      	bx	lr
   433fa:	bf00      	nop
   433fc:	40001000 	.word	0x40001000

00043400 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   43400:	4b03      	ldr	r3, [pc, #12]	; (43410 <radio_is_ready+0x10>)
   43402:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   43406:	3800      	subs	r0, #0
   43408:	bf18      	it	ne
   4340a:	2001      	movne	r0, #1
   4340c:	4770      	bx	lr
   4340e:	bf00      	nop
   43410:	40001000 	.word	0x40001000

00043414 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   43414:	4b03      	ldr	r3, [pc, #12]	; (43424 <radio_is_done+0x10>)
   43416:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   4341a:	3800      	subs	r0, #0
   4341c:	bf18      	it	ne
   4341e:	2001      	movne	r0, #1
   43420:	4770      	bx	lr
   43422:	bf00      	nop
   43424:	40001000 	.word	0x40001000

00043428 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   43428:	4b03      	ldr	r3, [pc, #12]	; (43438 <radio_is_idle+0x10>)
   4342a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   4342e:	fab0 f080 	clz	r0, r0
   43432:	0940      	lsrs	r0, r0, #5
   43434:	4770      	bx	lr
   43436:	bf00      	nop
   43438:	40001000 	.word	0x40001000

0004343c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   4343c:	4b04      	ldr	r3, [pc, #16]	; (43450 <radio_crc_configure+0x14>)
   4343e:	f240 1203 	movw	r2, #259	; 0x103
   43442:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   43446:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   4344a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   4344e:	4770      	bx	lr
   43450:	40001000 	.word	0x40001000

00043454 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   43454:	4b03      	ldr	r3, [pc, #12]	; (43464 <radio_crc_is_valid+0x10>)
   43456:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   4345a:	3800      	subs	r0, #0
   4345c:	bf18      	it	ne
   4345e:	2001      	movne	r0, #1
   43460:	4770      	bx	lr
   43462:	bf00      	nop
   43464:	40001000 	.word	0x40001000

00043468 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   43468:	4800      	ldr	r0, [pc, #0]	; (4346c <radio_pkt_empty_get+0x4>)
   4346a:	4770      	bx	lr
   4346c:	200066c8 	.word	0x200066c8

00043470 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   43470:	4800      	ldr	r0, [pc, #0]	; (43474 <radio_pkt_scratch_get+0x4>)
   43472:	4770      	bx	lr
   43474:	200066cc 	.word	0x200066cc

00043478 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   43478:	4b1d      	ldr	r3, [pc, #116]	; (434f0 <radio_switch_complete_and_rx+0x78>)
{
   4347a:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   4347c:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   4347e:	4d1d      	ldr	r5, [pc, #116]	; (434f4 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   43480:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   43484:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43486:	4e1c      	ldr	r6, [pc, #112]	; (434f8 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   43488:	4c1c      	ldr	r4, [pc, #112]	; (434fc <radio_switch_complete_and_rx+0x84>)
   4348a:	4f1d      	ldr	r7, [pc, #116]	; (43500 <radio_switch_complete_and_rx+0x88>)
   4348c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   43490:	f102 030c 	add.w	r3, r2, #12
   43494:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   43496:	00d0      	lsls	r0, r2, #3
   43498:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   4349a:	0091      	lsls	r1, r2, #2
   4349c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   434a0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   434a4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   434a8:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   434ac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   434b0:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   434b4:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   434b8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   434bc:	4811      	ldr	r0, [pc, #68]	; (43504 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   434be:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   434c2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   434c6:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   434ca:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   434cc:	bf8a      	itet	hi
   434ce:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   434d2:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   434d4:	3b2d      	subhi	r3, #45	; 0x2d
   434d6:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   434da:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   434dc:	4b06      	ldr	r3, [pc, #24]	; (434f8 <radio_switch_complete_and_rx+0x80>)
   434de:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   434e2:	f002 0201 	and.w	r2, r2, #1
   434e6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   434ea:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   434ec:	bcf0      	pop	{r4, r5, r6, r7}
   434ee:	4770      	bx	lr
   434f0:	40001000 	.word	0x40001000
   434f4:	20007799 	.word	0x20007799
   434f8:	4001f000 	.word	0x4001f000
   434fc:	40009140 	.word	0x40009140
   43500:	4000110c 	.word	0x4000110c
   43504:	40001004 	.word	0x40001004

00043508 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   43508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   4350c:	4e28      	ldr	r6, [pc, #160]	; (435b0 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   4350e:	4c29      	ldr	r4, [pc, #164]	; (435b4 <radio_switch_complete_and_tx+0xac>)
   43510:	4f29      	ldr	r7, [pc, #164]	; (435b8 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43512:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 435bc <radio_switch_complete_and_tx+0xb4>
   43516:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 435c0 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   4351a:	2303      	movs	r3, #3
   4351c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   43520:	7821      	ldrb	r1, [r4, #0]
   43522:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   43526:	f101 030c 	add.w	r3, r1, #12
   4352a:	b2db      	uxtb	r3, r3
   4352c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   4352e:	00cd      	lsls	r5, r1, #3
   43530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   43534:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   43538:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   4353c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   43540:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43544:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43548:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   4354c:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43550:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   43554:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   43558:	2a02      	cmp	r2, #2
   4355a:	bf08      	it	eq
   4355c:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   4355e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   43562:	f242 42b8 	movw	r2, #9400	; 0x24b8
   43566:	f241 3588 	movw	r5, #5000	; 0x1388
   4356a:	2802      	cmp	r0, #2
   4356c:	bf08      	it	eq
   4356e:	462a      	moveq	r2, r5
   43570:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   43574:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   43578:	4413      	add	r3, r2
   4357a:	4a12      	ldr	r2, [pc, #72]	; (435c4 <radio_switch_complete_and_tx+0xbc>)
   4357c:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   43580:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   43584:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   43588:	bf85      	ittet	hi
   4358a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   4358c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   43590:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   43592:	1a1b      	subhi	r3, r3, r0
   43594:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   43598:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   4359a:	4b08      	ldr	r3, [pc, #32]	; (435bc <radio_switch_complete_and_tx+0xb4>)
   4359c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   435a0:	f001 0101 	and.w	r1, r1, #1
   435a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   435a8:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   435aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   435ae:	bf00      	nop
   435b0:	40001000 	.word	0x40001000
   435b4:	20007799 	.word	0x20007799
   435b8:	40009140 	.word	0x40009140
   435bc:	4001f000 	.word	0x4001f000
   435c0:	4000110c 	.word	0x4000110c
   435c4:	10624dd3 	.word	0x10624dd3

000435c8 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   435c8:	4904      	ldr	r1, [pc, #16]	; (435dc <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   435ca:	4b05      	ldr	r3, [pc, #20]	; (435e0 <radio_switch_complete_and_disable+0x18>)
   435cc:	2003      	movs	r0, #3
   435ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
   435d2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   435d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   435da:	4770      	bx	lr
   435dc:	40001000 	.word	0x40001000
   435e0:	4001f000 	.word	0x4001f000

000435e4 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   435e4:	2000      	movs	r0, #0
   435e6:	4770      	bx	lr

000435e8 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   435e8:	4a03      	ldr	r2, [pc, #12]	; (435f8 <radio_rssi_measure+0x10>)
   435ea:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   435ee:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   435f2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   435f6:	4770      	bx	lr
   435f8:	40001000 	.word	0x40001000

000435fc <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   435fc:	4b01      	ldr	r3, [pc, #4]	; (43604 <radio_rssi_get+0x8>)
   435fe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   43602:	4770      	bx	lr
   43604:	40001000 	.word	0x40001000

00043608 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   43608:	4b02      	ldr	r3, [pc, #8]	; (43614 <radio_rssi_status_reset+0xc>)
   4360a:	2200      	movs	r2, #0
   4360c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   43610:	4770      	bx	lr
   43612:	bf00      	nop
   43614:	40001000 	.word	0x40001000

00043618 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   43618:	4b03      	ldr	r3, [pc, #12]	; (43628 <radio_rssi_is_ready+0x10>)
   4361a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   4361e:	3800      	subs	r0, #0
   43620:	bf18      	it	ne
   43622:	2001      	movne	r0, #1
   43624:	4770      	bx	lr
   43626:	bf00      	nop
   43628:	40001000 	.word	0x40001000

0004362c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   4362c:	b410      	push	{r4}
   4362e:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   43632:	ea4f 038c 	mov.w	r3, ip, lsl #2
   43636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   4363e:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   43640:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   43644:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   43648:	8894      	ldrh	r4, [r2, #4]
   4364a:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   4364e:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   43652:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   43656:	d1ec      	bne.n	43632 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   43658:	4b03      	ldr	r3, [pc, #12]	; (43668 <radio_filter_configure+0x3c>)
}
   4365a:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   4365c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   43660:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   43664:	4770      	bx	lr
   43666:	bf00      	nop
   43668:	40001000 	.word	0x40001000

0004366c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   4366c:	4a03      	ldr	r2, [pc, #12]	; (4367c <radio_filter_disable+0x10>)
   4366e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   43672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   43676:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   4367a:	4770      	bx	lr
   4367c:	40001000 	.word	0x40001000

00043680 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   43680:	4b02      	ldr	r3, [pc, #8]	; (4368c <radio_filter_status_reset+0xc>)
   43682:	2200      	movs	r2, #0
   43684:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   43688:	4770      	bx	lr
   4368a:	bf00      	nop
   4368c:	40001000 	.word	0x40001000

00043690 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   43690:	4b03      	ldr	r3, [pc, #12]	; (436a0 <radio_filter_has_match+0x10>)
   43692:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   43696:	3800      	subs	r0, #0
   43698:	bf18      	it	ne
   4369a:	2001      	movne	r0, #1
   4369c:	4770      	bx	lr
   4369e:	bf00      	nop
   436a0:	40001000 	.word	0x40001000

000436a4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   436a4:	4b01      	ldr	r3, [pc, #4]	; (436ac <radio_filter_match_get+0x8>)
   436a6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   436aa:	4770      	bx	lr
   436ac:	40001000 	.word	0x40001000

000436b0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   436b0:	4904      	ldr	r1, [pc, #16]	; (436c4 <radio_tmr_status_reset+0x14>)
   436b2:	4b05      	ldr	r3, [pc, #20]	; (436c8 <radio_tmr_status_reset+0x18>)
   436b4:	4a05      	ldr	r2, [pc, #20]	; (436cc <radio_tmr_status_reset+0x1c>)
   436b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   436ba:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   436be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   436c2:	4770      	bx	lr
   436c4:	4000b000 	.word	0x4000b000
   436c8:	4001f000 	.word	0x4001f000
   436cc:	0e7000c0 	.word	0x0e7000c0

000436d0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   436d0:	4b03      	ldr	r3, [pc, #12]	; (436e0 <radio_tmr_tifs_set+0x10>)
   436d2:	4a04      	ldr	r2, [pc, #16]	; (436e4 <radio_tmr_tifs_set+0x14>)
   436d4:	781b      	ldrb	r3, [r3, #0]
   436d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   436da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   436de:	4770      	bx	lr
   436e0:	20007799 	.word	0x20007799
   436e4:	40009000 	.word	0x40009000

000436e8 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   436e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   436ec:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   436f0:	4d31      	ldr	r5, [pc, #196]	; (437b8 <radio_tmr_start+0xd0>)
   436f2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   436f6:	42ab      	cmp	r3, r5
{
   436f8:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   436fa:	d906      	bls.n	4370a <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   436fc:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   43700:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   43704:	3901      	subs	r1, #1
		remainder += 30517578UL;
   43706:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4370a:	4b2c      	ldr	r3, [pc, #176]	; (437bc <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   4370c:	482c      	ldr	r0, [pc, #176]	; (437c0 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   4370e:	4d2d      	ldr	r5, [pc, #180]	; (437c4 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43710:	4e2d      	ldr	r6, [pc, #180]	; (437c8 <radio_tmr_start+0xe0>)
   43712:	2701      	movs	r7, #1
   43714:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   43716:	2700      	movs	r7, #0
   43718:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   4371c:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   43720:	2704      	movs	r7, #4
   43722:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   43726:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   43728:	2702      	movs	r7, #2
   4372a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   4372e:	4a27      	ldr	r2, [pc, #156]	; (437cc <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   43730:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   43734:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   43738:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   4373c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   43740:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43742:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43746:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   4374a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   4374e:	bb64      	cbnz	r4, 437aa <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   43750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   43754:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   43758:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   4375c:	4b1b      	ldr	r3, [pc, #108]	; (437cc <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4375e:	4a1c      	ldr	r2, [pc, #112]	; (437d0 <radio_tmr_start+0xe8>)
   43760:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   43764:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   43766:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43768:	f8df 8068 	ldr.w	r8, [pc, #104]	; 437d4 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4376c:	f8df e068 	ldr.w	lr, [pc, #104]	; 437d8 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43770:	f8df c068 	ldr.w	ip, [pc, #104]	; 437dc <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43774:	4f1a      	ldr	r7, [pc, #104]	; (437e0 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43776:	4e1b      	ldr	r6, [pc, #108]	; (437e4 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43778:	4d1b      	ldr	r5, [pc, #108]	; (437e8 <radio_tmr_start+0x100>)
   4377a:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   4377c:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   43780:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   43784:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   43788:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   4378c:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4378e:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43792:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43796:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4379a:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4379e:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   437a2:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   437a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   437aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   437ae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   437b2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   437b6:	e7d1      	b.n	4375c <radio_tmr_start+0x74>
   437b8:	7ff0bdbf 	.word	0x7ff0bdbf
   437bc:	40008000 	.word	0x40008000
   437c0:	431bde83 	.word	0x431bde83
   437c4:	4000b000 	.word	0x4000b000
   437c8:	4000b148 	.word	0x4000b148
   437cc:	4001f000 	.word	0x4001f000
   437d0:	40009000 	.word	0x40009000
   437d4:	4000110c 	.word	0x4000110c
   437d8:	4000900c 	.word	0x4000900c
   437dc:	40009140 	.word	0x40009140
   437e0:	4001f004 	.word	0x4001f004
   437e4:	40009144 	.word	0x40009144
   437e8:	4001f00c 	.word	0x4001f00c

000437ec <radio_tmr_start_tick>:
   437ec:	4a15      	ldr	r2, [pc, #84]	; (43844 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   437ee:	b430      	push	{r4, r5}
   437f0:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   437f2:	4c15      	ldr	r4, [pc, #84]	; (43848 <radio_tmr_start_tick+0x5c>)
   437f4:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   437f6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   437fa:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   437fc:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43800:	4b12      	ldr	r3, [pc, #72]	; (4384c <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   43802:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   43806:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   4380a:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4380c:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   43810:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43814:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   43818:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   4381c:	b158      	cbz	r0, 43836 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   4381e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   43822:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   43826:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   4382a:	4a08      	ldr	r2, [pc, #32]	; (4384c <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   4382c:	2001      	movs	r0, #1
   4382e:	bc30      	pop	{r4, r5}
   43830:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   43834:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   43836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   4383a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   4383e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   43842:	e7f2      	b.n	4382a <radio_tmr_start_tick+0x3e>
   43844:	40008000 	.word	0x40008000
   43848:	4000b000 	.word	0x4000b000
   4384c:	4001f000 	.word	0x4001f000

00043850 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   43850:	4b01      	ldr	r3, [pc, #4]	; (43858 <radio_tmr_start_get+0x8>)
   43852:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   43856:	4770      	bx	lr
   43858:	4000b000 	.word	0x4000b000

0004385c <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4385c:	4903      	ldr	r1, [pc, #12]	; (4386c <radio_tmr_stop+0x10>)
   4385e:	4a04      	ldr	r2, [pc, #16]	; (43870 <radio_tmr_stop+0x14>)
   43860:	2301      	movs	r3, #1
   43862:	604b      	str	r3, [r1, #4]
   43864:	610b      	str	r3, [r1, #16]
   43866:	6053      	str	r3, [r2, #4]
   43868:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   4386a:	4770      	bx	lr
   4386c:	40008000 	.word	0x40008000
   43870:	40009000 	.word	0x40009000

00043874 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   43874:	4904      	ldr	r1, [pc, #16]	; (43888 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   43876:	4b05      	ldr	r3, [pc, #20]	; (4388c <radio_tmr_hcto_configure+0x18>)
   43878:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   4387c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   43880:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   43884:	4770      	bx	lr
   43886:	bf00      	nop
   43888:	40008000 	.word	0x40008000
   4388c:	4001f000 	.word	0x4001f000

00043890 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43890:	4b05      	ldr	r3, [pc, #20]	; (438a8 <radio_tmr_aa_capture+0x18>)
   43892:	4806      	ldr	r0, [pc, #24]	; (438ac <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43894:	4906      	ldr	r1, [pc, #24]	; (438b0 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   43896:	4a07      	ldr	r2, [pc, #28]	; (438b4 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43898:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4389c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   438a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   438a4:	4770      	bx	lr
   438a6:	bf00      	nop
   438a8:	4001f000 	.word	0x4001f000
   438ac:	40001100 	.word	0x40001100
   438b0:	40008040 	.word	0x40008040
   438b4:	04000080 	.word	0x04000080

000438b8 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   438b8:	4b01      	ldr	r3, [pc, #4]	; (438c0 <radio_tmr_aa_get+0x8>)
   438ba:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   438be:	4770      	bx	lr
   438c0:	40008000 	.word	0x40008000

000438c4 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   438c4:	4b01      	ldr	r3, [pc, #4]	; (438cc <radio_tmr_aa_save+0x8>)
   438c6:	6018      	str	r0, [r3, #0]
}
   438c8:	4770      	bx	lr
   438ca:	bf00      	nop
   438cc:	200067d8 	.word	0x200067d8

000438d0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   438d0:	4b01      	ldr	r3, [pc, #4]	; (438d8 <radio_tmr_aa_restore+0x8>)
}
   438d2:	6818      	ldr	r0, [r3, #0]
   438d4:	4770      	bx	lr
   438d6:	bf00      	nop
   438d8:	200067d8 	.word	0x200067d8

000438dc <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   438dc:	4b01      	ldr	r3, [pc, #4]	; (438e4 <radio_tmr_ready_get+0x8>)
   438de:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   438e2:	4770      	bx	lr
   438e4:	40008000 	.word	0x40008000

000438e8 <radio_tmr_end_capture>:
   438e8:	4b02      	ldr	r3, [pc, #8]	; (438f4 <radio_tmr_end_capture+0xc>)
   438ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   438ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   438f2:	4770      	bx	lr
   438f4:	4001f000 	.word	0x4001f000

000438f8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   438f8:	4b01      	ldr	r3, [pc, #4]	; (43900 <radio_tmr_end_get+0x8>)
   438fa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   438fe:	4770      	bx	lr
   43900:	40008000 	.word	0x40008000

00043904 <radio_tmr_tifs_base_get>:
   43904:	4b01      	ldr	r3, [pc, #4]	; (4390c <radio_tmr_tifs_base_get+0x8>)
   43906:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   4390a:	4770      	bx	lr
   4390c:	40008000 	.word	0x40008000

00043910 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43910:	4b17      	ldr	r3, [pc, #92]	; (43970 <radio_ccm_rx_pkt_set+0x60>)
{
   43912:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43914:	2400      	movs	r4, #0
{
   43916:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43918:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   4391a:	4816      	ldr	r0, [pc, #88]	; (43974 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   4391c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43920:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   43924:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   43928:	4e13      	ldr	r6, [pc, #76]	; (43978 <radio_ccm_rx_pkt_set+0x68>)
   4392a:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   4392c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   43930:	4812      	ldr	r0, [pc, #72]	; (4397c <radio_ccm_rx_pkt_set+0x6c>)
   43932:	2902      	cmp	r1, #2
   43934:	bf08      	it	eq
   43936:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   43938:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   4393c:	4810      	ldr	r0, [pc, #64]	; (43980 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   4393e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   43942:	4910      	ldr	r1, [pc, #64]	; (43984 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   43944:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   43948:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   4394c:	4a0e      	ldr	r2, [pc, #56]	; (43988 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   4394e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   43952:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   43956:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   4395a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   4395e:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   43962:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43966:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   43968:	bc70      	pop	{r4, r5, r6}
   4396a:	601a      	str	r2, [r3, #0]
   4396c:	4770      	bx	lr
   4396e:	bf00      	nop
   43970:	4000f000 	.word	0x4000f000
   43974:	40001000 	.word	0x40001000
   43978:	01010001 	.word	0x01010001
   4397c:	01000001 	.word	0x01000001
   43980:	200066cc 	.word	0x200066cc
   43984:	200065bc 	.word	0x200065bc
   43988:	4001f000 	.word	0x4001f000

0004398c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   4398c:	4b0f      	ldr	r3, [pc, #60]	; (439cc <radio_ccm_tx_pkt_set+0x40>)
{
   4398e:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43990:	2200      	movs	r2, #0
{
   43992:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43994:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43996:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   4399a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   4399e:	480c      	ldr	r0, [pc, #48]	; (439d0 <radio_ccm_tx_pkt_set+0x44>)
   439a0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   439a4:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   439a8:	480a      	ldr	r0, [pc, #40]	; (439d4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   439aa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   439ae:	4c0a      	ldr	r4, [pc, #40]	; (439d8 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   439b0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   439b4:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   439b6:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   439ba:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   439be:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   439c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   439c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   439c8:	6019      	str	r1, [r3, #0]
}
   439ca:	4770      	bx	lr
   439cc:	4000f000 	.word	0x4000f000
   439d0:	01010000 	.word	0x01010000
   439d4:	200066cc 	.word	0x200066cc
   439d8:	200065bc 	.word	0x200065bc

000439dc <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   439dc:	4a0e      	ldr	r2, [pc, #56]	; (43a18 <radio_ccm_is_done+0x3c>)
   439de:	2302      	movs	r3, #2
   439e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   439e4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   439e8:	b933      	cbnz	r3, 439f8 <radio_ccm_is_done+0x1c>
		__WFE();
   439ea:	bf20      	wfe
		__SEV();
   439ec:	bf40      	sev
		__WFE();
   439ee:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   439f0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   439f4:	2b00      	cmp	r3, #0
   439f6:	d0f8      	beq.n	439ea <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   439f8:	4b07      	ldr	r3, [pc, #28]	; (43a18 <radio_ccm_is_done+0x3c>)
   439fa:	4a08      	ldr	r2, [pc, #32]	; (43a1c <radio_ccm_is_done+0x40>)
   439fc:	2002      	movs	r0, #2
   439fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43a02:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   43a06:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   43a0a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   43a0e:	fab0 f080 	clz	r0, r0
   43a12:	0940      	lsrs	r0, r0, #5
   43a14:	4770      	bx	lr
   43a16:	bf00      	nop
   43a18:	4000f000 	.word	0x4000f000
   43a1c:	e000e100 	.word	0xe000e100

00043a20 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   43a20:	4b03      	ldr	r3, [pc, #12]	; (43a30 <radio_ccm_mic_is_valid+0x10>)
   43a22:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43a26:	3800      	subs	r0, #0
   43a28:	bf18      	it	ne
   43a2a:	2001      	movne	r0, #1
   43a2c:	4770      	bx	lr
   43a2e:	bf00      	nop
   43a30:	4000f000 	.word	0x4000f000

00043a34 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43a34:	4a15      	ldr	r2, [pc, #84]	; (43a8c <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   43a36:	4b16      	ldr	r3, [pc, #88]	; (43a90 <radio_ar_configure+0x5c>)
{
   43a38:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43a3a:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   43a3e:	4e15      	ldr	r6, [pc, #84]	; (43a94 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   43a40:	2703      	movs	r7, #3
   43a42:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   43a46:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   43a48:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43a4c:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   43a4e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   43a52:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   43a54:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   43a58:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   43a5c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   43a60:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   43a64:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   43a68:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   43a6c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   43a70:	4909      	ldr	r1, [pc, #36]	; (43a98 <radio_ar_configure+0x64>)
   43a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   43a76:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   43a7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   43a7e:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   43a82:	bcf0      	pop	{r4, r5, r6, r7}
   43a84:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   43a88:	4770      	bx	lr
   43a8a:	bf00      	nop
   43a8c:	40001000 	.word	0x40001000
   43a90:	4000f000 	.word	0x4000f000
   43a94:	200065b8 	.word	0x200065b8
   43a98:	4001f000 	.word	0x4001f000

00043a9c <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   43a9c:	4b01      	ldr	r3, [pc, #4]	; (43aa4 <radio_ar_match_get+0x8>)
   43a9e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43aa2:	4770      	bx	lr
   43aa4:	4000f000 	.word	0x4000f000

00043aa8 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   43aa8:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   43aaa:	4807      	ldr	r0, [pc, #28]	; (43ac8 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   43aac:	4c07      	ldr	r4, [pc, #28]	; (43acc <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   43aae:	4a08      	ldr	r2, [pc, #32]	; (43ad0 <radio_ar_status_reset+0x28>)
   43ab0:	2300      	movs	r3, #0
   43ab2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   43ab6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   43aba:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   43abe:	bc10      	pop	{r4}
   43ac0:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   43ac4:	4770      	bx	lr
   43ac6:	bf00      	nop
   43ac8:	4000f000 	.word	0x4000f000
   43acc:	40001000 	.word	0x40001000
   43ad0:	4001f000 	.word	0x4001f000

00043ad4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   43ad4:	4b08      	ldr	r3, [pc, #32]	; (43af8 <radio_ar_has_match+0x24>)
   43ad6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   43ada:	b160      	cbz	r0, 43af6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   43adc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   43ae0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   43ae4:	b138      	cbz	r0, 43af6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   43ae6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   43aea:	b120      	cbz	r0, 43af6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   43aec:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   43af0:	fab0 f080 	clz	r0, r0
   43af4:	0940      	lsrs	r0, r0, #5
}
   43af6:	4770      	bx	lr
   43af8:	40001000 	.word	0x40001000

00043afc <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   43afc:	2902      	cmp	r1, #2
{
   43afe:	b510      	push	{r4, lr}
   43b00:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   43b02:	d00b      	beq.n	43b1c <mayfly_enable_cb+0x20>
   43b04:	4a0a      	ldr	r2, [pc, #40]	; (43b30 <mayfly_enable_cb+0x34>)
   43b06:	490b      	ldr	r1, [pc, #44]	; (43b34 <mayfly_enable_cb+0x38>)
   43b08:	480b      	ldr	r0, [pc, #44]	; (43b38 <mayfly_enable_cb+0x3c>)
   43b0a:	231e      	movs	r3, #30
   43b0c:	f006 fccb 	bl	4a4a6 <printk>
   43b10:	4040      	eors	r0, r0
   43b12:	f380 8811 	msr	BASEPRI, r0
   43b16:	f04f 0003 	mov.w	r0, #3
   43b1a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   43b1c:	200b      	movs	r0, #11
	if (enable) {
   43b1e:	b11c      	cbz	r4, 43b28 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   43b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   43b24:	f7e9 bbce 	b.w	2d2c4 <arch_irq_enable>
}
   43b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   43b2c:	f7e9 bbda 	b.w	2d2e4 <arch_irq_disable>
   43b30:	00055f14 	.word	0x00055f14
   43b34:	00055f64 	.word	0x00055f64
   43b38:	0005512c 	.word	0x0005512c

00043b3c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   43b3c:	b129      	cbz	r1, 43b4a <mayfly_is_enabled+0xe>
   43b3e:	3901      	subs	r1, #1
   43b40:	2901      	cmp	r1, #1
   43b42:	d805      	bhi.n	43b50 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   43b44:	200b      	movs	r0, #11
   43b46:	f7e9 bbe1 	b.w	2d30c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   43b4a:	2018      	movs	r0, #24
   43b4c:	f7e9 bbde 	b.w	2d30c <arch_irq_is_enabled>
{
   43b50:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   43b52:	4a07      	ldr	r2, [pc, #28]	; (43b70 <mayfly_is_enabled+0x34>)
   43b54:	4907      	ldr	r1, [pc, #28]	; (43b74 <mayfly_is_enabled+0x38>)
   43b56:	4808      	ldr	r0, [pc, #32]	; (43b78 <mayfly_is_enabled+0x3c>)
   43b58:	2336      	movs	r3, #54	; 0x36
   43b5a:	f006 fca4 	bl	4a4a6 <printk>
   43b5e:	4040      	eors	r0, r0
   43b60:	f380 8811 	msr	BASEPRI, r0
   43b64:	f04f 0003 	mov.w	r0, #3
   43b68:	df02      	svc	2
		break;
	}

	return 0;
}
   43b6a:	2000      	movs	r0, #0
   43b6c:	bd08      	pop	{r3, pc}
   43b6e:	bf00      	nop
   43b70:	00055f14 	.word	0x00055f14
   43b74:	0005518c 	.word	0x0005518c
   43b78:	0005512c 	.word	0x0005512c

00043b7c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43b7c:	4288      	cmp	r0, r1
   43b7e:	d00b      	beq.n	43b98 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   43b80:	2801      	cmp	r0, #1
   43b82:	d003      	beq.n	43b8c <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43b84:	2802      	cmp	r0, #2
   43b86:	d009      	beq.n	43b9c <mayfly_prio_is_equal+0x20>
   43b88:	2000      	movs	r0, #0
#endif
	       0;
}
   43b8a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   43b8c:	f1a1 0002 	sub.w	r0, r1, #2
   43b90:	fab0 f080 	clz	r0, r0
   43b94:	0940      	lsrs	r0, r0, #5
   43b96:	4770      	bx	lr
   43b98:	2001      	movs	r0, #1
   43b9a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   43b9c:	f1a1 0001 	sub.w	r0, r1, #1
   43ba0:	fab0 f080 	clz	r0, r0
   43ba4:	0940      	lsrs	r0, r0, #5
   43ba6:	4770      	bx	lr

00043ba8 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   43ba8:	2901      	cmp	r1, #1
{
   43baa:	b508      	push	{r3, lr}
	switch (callee_id) {
   43bac:	d00f      	beq.n	43bce <mayfly_pend+0x26>
   43bae:	2902      	cmp	r1, #2
   43bb0:	d00d      	beq.n	43bce <mayfly_pend+0x26>
   43bb2:	b191      	cbz	r1, 43bda <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   43bb4:	4a0c      	ldr	r2, [pc, #48]	; (43be8 <mayfly_pend+0x40>)
   43bb6:	490d      	ldr	r1, [pc, #52]	; (43bec <mayfly_pend+0x44>)
   43bb8:	480d      	ldr	r0, [pc, #52]	; (43bf0 <mayfly_pend+0x48>)
   43bba:	2367      	movs	r3, #103	; 0x67
   43bbc:	f006 fc73 	bl	4a4a6 <printk>
   43bc0:	4040      	eors	r0, r0
   43bc2:	f380 8811 	msr	BASEPRI, r0
   43bc6:	f04f 0003 	mov.w	r0, #3
   43bca:	df02      	svc	2
		break;
	}
}
   43bcc:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   43bce:	4b09      	ldr	r3, [pc, #36]	; (43bf4 <mayfly_pend+0x4c>)
   43bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   43bd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   43bd8:	bd08      	pop	{r3, pc}
   43bda:	4b06      	ldr	r3, [pc, #24]	; (43bf4 <mayfly_pend+0x4c>)
   43bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   43be0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   43be4:	bd08      	pop	{r3, pc}
   43be6:	bf00      	nop
   43be8:	00055f14 	.word	0x00055f14
   43bec:	0005518c 	.word	0x0005518c
   43bf0:	0005512c 	.word	0x0005512c
   43bf4:	e000e100 	.word	0xe000e100

00043bf8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43bf8:	2803      	cmp	r0, #3
{
   43bfa:	b510      	push	{r4, lr}
   43bfc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43bfe:	d804      	bhi.n	43c0a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   43c00:	4b11      	ldr	r3, [pc, #68]	; (43c48 <hal_ticker_instance0_caller_id_get+0x50>)
   43c02:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43c04:	b18c      	cbz	r4, 43c2a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   43c06:	4620      	mov	r0, r4
   43c08:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43c0a:	4a10      	ldr	r2, [pc, #64]	; (43c4c <hal_ticker_instance0_caller_id_get+0x54>)
   43c0c:	4910      	ldr	r1, [pc, #64]	; (43c50 <hal_ticker_instance0_caller_id_get+0x58>)
   43c0e:	4811      	ldr	r0, [pc, #68]	; (43c54 <hal_ticker_instance0_caller_id_get+0x5c>)
   43c10:	232b      	movs	r3, #43	; 0x2b
   43c12:	f006 fc48 	bl	4a4a6 <printk>
   43c16:	4040      	eors	r0, r0
   43c18:	f380 8811 	msr	BASEPRI, r0
   43c1c:	f04f 0003 	mov.w	r0, #3
   43c20:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   43c22:	4b09      	ldr	r3, [pc, #36]	; (43c48 <hal_ticker_instance0_caller_id_get+0x50>)
   43c24:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43c26:	2c00      	cmp	r4, #0
   43c28:	d1ed      	bne.n	43c06 <hal_ticker_instance0_caller_id_get+0xe>
   43c2a:	4a08      	ldr	r2, [pc, #32]	; (43c4c <hal_ticker_instance0_caller_id_get+0x54>)
   43c2c:	490a      	ldr	r1, [pc, #40]	; (43c58 <hal_ticker_instance0_caller_id_get+0x60>)
   43c2e:	4809      	ldr	r0, [pc, #36]	; (43c54 <hal_ticker_instance0_caller_id_get+0x5c>)
   43c30:	232e      	movs	r3, #46	; 0x2e
   43c32:	f006 fc38 	bl	4a4a6 <printk>
   43c36:	4040      	eors	r0, r0
   43c38:	f380 8811 	msr	BASEPRI, r0
   43c3c:	f04f 0003 	mov.w	r0, #3
   43c40:	df02      	svc	2
}
   43c42:	4620      	mov	r0, r4
   43c44:	bd10      	pop	{r4, pc}
   43c46:	bf00      	nop
   43c48:	00055ff4 	.word	0x00055ff4
   43c4c:	00055f74 	.word	0x00055f74
   43c50:	00055fc4 	.word	0x00055fc4
   43c54:	0005512c 	.word	0x0005512c
   43c58:	00055fe4 	.word	0x00055fe4

00043c5c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   43c5c:	3801      	subs	r0, #1
{
   43c5e:	b510      	push	{r4, lr}
   43c60:	461c      	mov	r4, r3
	switch (caller_id) {
   43c62:	2804      	cmp	r0, #4
   43c64:	f200 8082 	bhi.w	43d6c <hal_ticker_instance0_sched+0x110>
   43c68:	e8df f000 	tbb	[pc, r0]
   43c6c:	3f302112 	.word	0x3f302112
   43c70:	03          	.byte	0x03
   43c71:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   43c72:	2904      	cmp	r1, #4
   43c74:	d04a      	beq.n	43d0c <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   43c76:	4a44      	ldr	r2, [pc, #272]	; (43d88 <hal_ticker_instance0_sched+0x12c>)
   43c78:	4944      	ldr	r1, [pc, #272]	; (43d8c <hal_ticker_instance0_sched+0x130>)
   43c7a:	4845      	ldr	r0, [pc, #276]	; (43d90 <hal_ticker_instance0_sched+0x134>)
   43c7c:	23ba      	movs	r3, #186	; 0xba
   43c7e:	f006 fc12 	bl	4a4a6 <printk>
   43c82:	4040      	eors	r0, r0
   43c84:	f380 8811 	msr	BASEPRI, r0
   43c88:	f04f 0003 	mov.w	r0, #3
   43c8c:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   43c8e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43c90:	2904      	cmp	r1, #4
   43c92:	d043      	beq.n	43d1c <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   43c94:	4a3c      	ldr	r2, [pc, #240]	; (43d88 <hal_ticker_instance0_sched+0x12c>)
   43c96:	493d      	ldr	r1, [pc, #244]	; (43d8c <hal_ticker_instance0_sched+0x130>)
   43c98:	483d      	ldr	r0, [pc, #244]	; (43d90 <hal_ticker_instance0_sched+0x134>)
   43c9a:	234e      	movs	r3, #78	; 0x4e
   43c9c:	f006 fc03 	bl	4a4a6 <printk>
   43ca0:	4040      	eors	r0, r0
   43ca2:	f380 8811 	msr	BASEPRI, r0
   43ca6:	f04f 0003 	mov.w	r0, #3
   43caa:	df02      	svc	2
}
   43cac:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43cae:	2903      	cmp	r1, #3
   43cb0:	d03c      	beq.n	43d2c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   43cb2:	4a35      	ldr	r2, [pc, #212]	; (43d88 <hal_ticker_instance0_sched+0x12c>)
   43cb4:	4935      	ldr	r1, [pc, #212]	; (43d8c <hal_ticker_instance0_sched+0x130>)
   43cb6:	4836      	ldr	r0, [pc, #216]	; (43d90 <hal_ticker_instance0_sched+0x134>)
   43cb8:	2365      	movs	r3, #101	; 0x65
   43cba:	f006 fbf4 	bl	4a4a6 <printk>
   43cbe:	4040      	eors	r0, r0
   43cc0:	f380 8811 	msr	BASEPRI, r0
   43cc4:	f04f 0003 	mov.w	r0, #3
   43cc8:	df02      	svc	2
}
   43cca:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43ccc:	2904      	cmp	r1, #4
   43cce:	d035      	beq.n	43d3c <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   43cd0:	4a2d      	ldr	r2, [pc, #180]	; (43d88 <hal_ticker_instance0_sched+0x12c>)
   43cd2:	492e      	ldr	r1, [pc, #184]	; (43d8c <hal_ticker_instance0_sched+0x130>)
   43cd4:	482e      	ldr	r0, [pc, #184]	; (43d90 <hal_ticker_instance0_sched+0x134>)
   43cd6:	237c      	movs	r3, #124	; 0x7c
   43cd8:	f006 fbe5 	bl	4a4a6 <printk>
   43cdc:	4040      	eors	r0, r0
   43cde:	f380 8811 	msr	BASEPRI, r0
   43ce2:	f04f 0003 	mov.w	r0, #3
   43ce6:	df02      	svc	2
}
   43ce8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43cea:	2903      	cmp	r1, #3
   43cec:	d036      	beq.n	43d5c <hal_ticker_instance0_sched+0x100>
   43cee:	2904      	cmp	r1, #4
   43cf0:	d02c      	beq.n	43d4c <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   43cf2:	4a25      	ldr	r2, [pc, #148]	; (43d88 <hal_ticker_instance0_sched+0x12c>)
   43cf4:	4925      	ldr	r1, [pc, #148]	; (43d8c <hal_ticker_instance0_sched+0x130>)
   43cf6:	4826      	ldr	r0, [pc, #152]	; (43d90 <hal_ticker_instance0_sched+0x134>)
   43cf8:	23a2      	movs	r3, #162	; 0xa2
   43cfa:	f006 fbd4 	bl	4a4a6 <printk>
   43cfe:	4040      	eors	r0, r0
   43d00:	f380 8811 	msr	BASEPRI, r0
   43d04:	f04f 0003 	mov.w	r0, #3
   43d08:	df02      	svc	2
}
   43d0a:	bd10      	pop	{r4, pc}
			m.param = instance;
   43d0c:	4b21      	ldr	r3, [pc, #132]	; (43d94 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43d0e:	2102      	movs	r1, #2
			m.param = instance;
   43d10:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43d12:	2003      	movs	r0, #3
}
   43d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43d18:	f7f0 bc94 	b.w	34644 <mayfly_enqueue>
			m.param = instance;
   43d1c:	4b1e      	ldr	r3, [pc, #120]	; (43d98 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43d1e:	2102      	movs	r1, #2
			m.param = instance;
   43d20:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43d22:	2000      	movs	r0, #0
}
   43d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43d28:	f7f0 bc8c 	b.w	34644 <mayfly_enqueue>
			m.param = instance;
   43d2c:	4b1b      	ldr	r3, [pc, #108]	; (43d9c <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43d2e:	2101      	movs	r1, #1
			m.param = instance;
   43d30:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43d32:	4608      	mov	r0, r1
}
   43d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43d38:	f7f0 bc84 	b.w	34644 <mayfly_enqueue>
			m.param = instance;
   43d3c:	4b18      	ldr	r3, [pc, #96]	; (43da0 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43d3e:	2102      	movs	r1, #2
			m.param = instance;
   43d40:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43d42:	2001      	movs	r0, #1
}
   43d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43d48:	f7f0 bc7c 	b.w	34644 <mayfly_enqueue>
			m.param = instance;
   43d4c:	4b15      	ldr	r3, [pc, #84]	; (43da4 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d4e:	2102      	movs	r1, #2
			m.param = instance;
   43d50:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d52:	4608      	mov	r0, r1
}
   43d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d58:	f7f0 bc74 	b.w	34644 <mayfly_enqueue>
			m.param = instance;
   43d5c:	4b12      	ldr	r3, [pc, #72]	; (43da8 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d5e:	2101      	movs	r1, #1
			m.param = instance;
   43d60:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d62:	2002      	movs	r0, #2
}
   43d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d68:	f7f0 bc6c 	b.w	34644 <mayfly_enqueue>
		LL_ASSERT(0);
   43d6c:	4a06      	ldr	r2, [pc, #24]	; (43d88 <hal_ticker_instance0_sched+0x12c>)
   43d6e:	4907      	ldr	r1, [pc, #28]	; (43d8c <hal_ticker_instance0_sched+0x130>)
   43d70:	4807      	ldr	r0, [pc, #28]	; (43d90 <hal_ticker_instance0_sched+0x134>)
   43d72:	23c0      	movs	r3, #192	; 0xc0
   43d74:	f006 fb97 	bl	4a4a6 <printk>
   43d78:	4040      	eors	r0, r0
   43d7a:	f380 8811 	msr	BASEPRI, r0
   43d7e:	f04f 0003 	mov.w	r0, #3
   43d82:	df02      	svc	2
}
   43d84:	bd10      	pop	{r4, pc}
   43d86:	bf00      	nop
   43d88:	00055f74 	.word	0x00055f74
   43d8c:	0005518c 	.word	0x0005518c
   43d90:	0005512c 	.word	0x0005512c
   43d94:	20000f78 	.word	0x20000f78
   43d98:	20000f68 	.word	0x20000f68
   43d9c:	20000f58 	.word	0x20000f58
   43da0:	20000fa8 	.word	0x20000fa8
   43da4:	20000f88 	.word	0x20000f88
   43da8:	20000f98 	.word	0x20000f98

00043dac <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   43dac:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   43dae:	2000      	movs	r0, #0
   43db0:	f7ff b9a8 	b.w	43104 <cntr_cmp_set>

00043db4 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   43db4:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   43db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43dba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   43dbe:	3201      	adds	r2, #1
   43dc0:	d008      	beq.n	43dd4 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   43dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   43dc6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   43dca:	f013 0301 	ands.w	r3, r3, #1
   43dce:	d10a      	bne.n	43de6 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   43dd0:	4618      	mov	r0, r3
}
   43dd2:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   43dd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   43dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   43ddc:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   43dde:	4293      	cmp	r3, r2
   43de0:	d1ef      	bne.n	43dc2 <hci_vendor_read_static_addr+0xe>
	return 0;
   43de2:	2000      	movs	r0, #0
}
   43de4:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   43de6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   43dea:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   43dec:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43dee:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   43df2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   43df6:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   43df8:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   43dfa:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   43dfe:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   43e02:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   43e04:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   43e08:	f063 033f 	orn	r3, r3, #63	; 0x3f
   43e0c:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   43e0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   43e12:	3301      	adds	r3, #1
   43e14:	d03b      	beq.n	43e8e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43e16:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   43e1a:	3301      	adds	r3, #1
   43e1c:	d037      	beq.n	43e8e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   43e1e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43e22:	3301      	adds	r3, #1
   43e24:	d033      	beq.n	43e8e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   43e26:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   43e2a:	3301      	adds	r3, #1
   43e2c:	d02f      	beq.n	43e8e <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   43e2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   43e32:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   43e34:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43e36:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   43e3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e3e:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   43e40:	f880 c009 	strb.w	ip, [r0, #9]
   43e44:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   43e46:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   43e4a:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   43e4c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43e4e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   43e52:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e56:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   43e58:	f880 c00d 	strb.w	ip, [r0, #13]
   43e5c:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   43e5e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   43e62:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   43e64:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43e66:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   43e6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e6e:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   43e70:	73c3      	strb	r3, [r0, #15]
   43e72:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   43e76:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   43e7a:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   43e7c:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   43e7e:	0a11      	lsrs	r1, r2, #8
   43e80:	f3c3 2307 	ubfx	r3, r3, #8, #8
   43e84:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   43e86:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   43e88:	7541      	strb	r1, [r0, #21]
		return 1;
   43e8a:	2001      	movs	r0, #1
}
   43e8c:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   43e8e:	2210      	movs	r2, #16
   43e90:	2100      	movs	r1, #0
   43e92:	3006      	adds	r0, #6
   43e94:	f008 fc1a 	bl	4c6cc <memset>
		return 1;
   43e98:	2001      	movs	r0, #1
}
   43e9a:	bd08      	pop	{r3, pc}

00043e9c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   43e9c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   43e9e:	2210      	movs	r2, #16
{
   43ea0:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   43ea2:	2100      	movs	r1, #0
   43ea4:	f008 fc12 	bl	4c6cc <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   43ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43eac:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   43eb0:	3201      	adds	r2, #1
   43eb2:	d034      	beq.n	43f1e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43eb4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   43eb8:	3201      	adds	r2, #1
   43eba:	d030      	beq.n	43f1e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43ebc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43ec0:	3201      	adds	r2, #1
   43ec2:	d02c      	beq.n	43f1e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   43ec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43ec8:	3201      	adds	r2, #1
   43eca:	d028      	beq.n	43f1e <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   43ecc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   43ed0:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   43ed2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43ed4:	0a08      	lsrs	r0, r1, #8
   43ed6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   43eda:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   43edc:	70e0      	strb	r0, [r4, #3]
   43ede:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   43ee0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   43ee4:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   43ee6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43ee8:	0a08      	lsrs	r0, r1, #8
   43eea:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   43eee:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   43ef0:	71e0      	strb	r0, [r4, #7]
   43ef2:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   43ef4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   43ef8:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   43efa:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43efc:	0a08      	lsrs	r0, r1, #8
   43efe:	f3c2 2207 	ubfx	r2, r2, #8, #8
   43f02:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   43f04:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   43f06:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   43f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   43f0c:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   43f0e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   43f10:	0a11      	lsrs	r1, r2, #8
   43f12:	f3c3 2307 	ubfx	r3, r3, #8, #8
   43f16:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   43f18:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   43f1a:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   43f1c:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   43f1e:	4620      	mov	r0, r4
   43f20:	2210      	movs	r2, #16
}
   43f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   43f26:	2100      	movs	r1, #0
   43f28:	f008 bbd0 	b.w	4c6cc <memset>

00043f2c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   43f2c:	4b02      	ldr	r3, [pc, #8]	; (43f38 <net_buf_pool_get+0xc>)
   43f2e:	222c      	movs	r2, #44	; 0x2c
   43f30:	fb02 3000 	mla	r0, r2, r0, r3
   43f34:	4770      	bx	lr
   43f36:	bf00      	nop
   43f38:	20001544 	.word	0x20001544

00043f3c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43f3c:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   43f3e:	4b06      	ldr	r3, [pc, #24]	; (43f58 <net_buf_id+0x1c>)
   43f40:	212c      	movs	r1, #44	; 0x2c
   43f42:	fb01 3302 	mla	r3, r1, r2, r3
   43f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   43f48:	7f1b      	ldrb	r3, [r3, #28]
   43f4a:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   43f4c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   43f4e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   43f52:	fbb0 f0f3 	udiv	r0, r0, r3
   43f56:	4770      	bx	lr
   43f58:	20001544 	.word	0x20001544

00043f5c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   43f5c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43f5e:	4b0a      	ldr	r3, [pc, #40]	; (43f88 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43f60:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43f62:	242c      	movs	r4, #44	; 0x2c
   43f64:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   43f68:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43f6c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   43f6e:	6823      	ldr	r3, [r4, #0]
   43f70:	429a      	cmp	r2, r3
   43f72:	bf94      	ite	ls
   43f74:	600a      	strls	r2, [r1, #0]
   43f76:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   43f78:	f7ff ffe0 	bl	43f3c <net_buf_id>
   43f7c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   43f80:	fb02 3000 	mla	r0, r2, r0, r3
   43f84:	bd10      	pop	{r4, pc}
   43f86:	bf00      	nop
   43f88:	20001544 	.word	0x20001544

00043f8c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   43f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43f90:	4605      	mov	r5, r0
   43f92:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   43f94:	4610      	mov	r0, r2
   43f96:	4619      	mov	r1, r3
{
   43f98:	4691      	mov	r9, r2
   43f9a:	4698      	mov	r8, r3
   43f9c:	4617      	mov	r7, r2
   43f9e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   43fa0:	f00d fe9a 	bl	51cd8 <sys_clock_timeout_end_calc>
   43fa4:	4682      	mov	sl, r0
   43fa6:	468b      	mov	fp, r1
	__asm__ volatile(
   43fa8:	f04f 0320 	mov.w	r3, #32
   43fac:	f3ef 8111 	mrs	r1, BASEPRI
   43fb0:	f383 8812 	msr	BASEPRI_MAX, r3
   43fb4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   43fb8:	8b6b      	ldrh	r3, [r5, #26]
   43fba:	2b00      	cmp	r3, #0
   43fbc:	d05a      	beq.n	44074 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   43fbe:	8b2a      	ldrh	r2, [r5, #24]
   43fc0:	429a      	cmp	r2, r3
   43fc2:	d93e      	bls.n	44042 <net_buf_alloc_len+0xb6>
   43fc4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   43fc6:	2200      	movs	r2, #0
   43fc8:	2300      	movs	r3, #0
   43fca:	4628      	mov	r0, r5
   43fcc:	f004 fc3c 	bl	48848 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   43fd0:	9900      	ldr	r1, [sp, #0]
   43fd2:	4604      	mov	r4, r0
   43fd4:	2800      	cmp	r0, #0
   43fd6:	d034      	beq.n	44042 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   43fd8:	f381 8811 	msr	BASEPRI, r1
   43fdc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   43fe0:	9b01      	ldr	r3, [sp, #4]
   43fe2:	2b00      	cmp	r3, #0
   43fe4:	d056      	beq.n	44094 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   43fe6:	ea58 0309 	orrs.w	r3, r8, r9
   43fea:	d00f      	beq.n	4400c <net_buf_alloc_len+0x80>
   43fec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   43ff0:	bf08      	it	eq
   43ff2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   43ff6:	d009      	beq.n	4400c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   43ff8:	f005 fb0c 	bl	49614 <sys_clock_tick_get>
   43ffc:	ebba 0700 	subs.w	r7, sl, r0
   44000:	eb6b 0601 	sbc.w	r6, fp, r1
   44004:	2e00      	cmp	r6, #0
   44006:	bfbc      	itt	lt
   44008:	2700      	movlt	r7, #0
   4400a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   4400c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   4400e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 440ac <net_buf_alloc_len+0x120>
   44012:	f04f 092c 	mov.w	r9, #44	; 0x2c
   44016:	fb09 8303 	mla	r3, r9, r3, r8
   4401a:	463a      	mov	r2, r7
   4401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   4401e:	681b      	ldr	r3, [r3, #0]
   44020:	a901      	add	r1, sp, #4
   44022:	681d      	ldr	r5, [r3, #0]
   44024:	4620      	mov	r0, r4
   44026:	4633      	mov	r3, r6
   44028:	47a8      	blx	r5
   4402a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   4402c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   4402e:	2800      	cmp	r0, #0
   44030:	d131      	bne.n	44096 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   44032:	79a0      	ldrb	r0, [r4, #6]
   44034:	4621      	mov	r1, r4
   44036:	fb00 8009 	mla	r0, r0, r9, r8
   4403a:	f00d fba8 	bl	5178e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   4403e:	462c      	mov	r4, r5
}
   44040:	e024      	b.n	4408c <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   44042:	8b68      	ldrh	r0, [r5, #26]
   44044:	1e43      	subs	r3, r0, #1
   44046:	836b      	strh	r3, [r5, #26]
   44048:	f381 8811 	msr	BASEPRI, r1
   4404c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   44050:	7f2a      	ldrb	r2, [r5, #28]
   44052:	f102 0417 	add.w	r4, r2, #23
   44056:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   4405a:	8b2c      	ldrh	r4, [r5, #24]
   4405c:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   4405e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   44060:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   44064:	4811      	ldr	r0, [pc, #68]	; (440ac <net_buf_alloc_len+0x120>)
   44066:	4b12      	ldr	r3, [pc, #72]	; (440b0 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   44068:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   4406a:	1a2d      	subs	r5, r5, r0
   4406c:	10ad      	asrs	r5, r5, #2
   4406e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   44070:	71a5      	strb	r5, [r4, #6]
		goto success;
   44072:	e7b5      	b.n	43fe0 <net_buf_alloc_len+0x54>
   44074:	f381 8811 	msr	BASEPRI, r1
   44078:	f3bf 8f6f 	isb	sy
   4407c:	464a      	mov	r2, r9
   4407e:	4643      	mov	r3, r8
   44080:	4628      	mov	r0, r5
   44082:	f004 fbe1 	bl	48848 <z_impl_k_queue_get>
	if (!buf) {
   44086:	4604      	mov	r4, r0
   44088:	2800      	cmp	r0, #0
   4408a:	d1a9      	bne.n	43fe0 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   4408c:	4620      	mov	r0, r4
   4408e:	b003      	add	sp, #12
   44090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   44094:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   44096:	2300      	movs	r3, #0
	buf->ref   = 1U;
   44098:	2201      	movs	r2, #1
	buf->frags = NULL;
   4409a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   4409c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   4409e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   440a0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   440a2:	6923      	ldr	r3, [r4, #16]
   440a4:	81e2      	strh	r2, [r4, #14]
   440a6:	60a3      	str	r3, [r4, #8]
	return buf;
   440a8:	e7f0      	b.n	4408c <net_buf_alloc_len+0x100>
   440aa:	bf00      	nop
   440ac:	20001544 	.word	0x20001544
   440b0:	ba2e8ba3 	.word	0xba2e8ba3

000440b4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   440b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   440b8:	4d16      	ldr	r5, [pc, #88]	; (44114 <net_buf_unref+0x60>)
   440ba:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   440bc:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   440be:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   440c0:	b90c      	cbnz	r4, 440c6 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   440c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   440c6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   440c8:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   440cc:	3b01      	subs	r3, #1
   440ce:	b2db      	uxtb	r3, r3
   440d0:	7123      	strb	r3, [r4, #4]
   440d2:	2b00      	cmp	r3, #0
   440d4:	d1f5      	bne.n	440c2 <net_buf_unref+0xe>
		if (buf->__buf) {
   440d6:	6921      	ldr	r1, [r4, #16]
   440d8:	b159      	cbz	r1, 440f2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   440da:	7963      	ldrb	r3, [r4, #5]
   440dc:	079b      	lsls	r3, r3, #30
   440de:	d407      	bmi.n	440f0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   440e0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   440e2:	fb07 5303 	mla	r3, r7, r3, r5
   440e6:	4620      	mov	r0, r4
   440e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   440ea:	681b      	ldr	r3, [r3, #0]
   440ec:	689b      	ldr	r3, [r3, #8]
   440ee:	4798      	blx	r3
			buf->__buf = NULL;
   440f0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   440f2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   440f4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   440f6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   440fa:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   440fc:	6a1b      	ldr	r3, [r3, #32]
   440fe:	b11b      	cbz	r3, 44108 <net_buf_unref+0x54>
			pool->destroy(buf);
   44100:	4620      	mov	r0, r4
   44102:	4798      	blx	r3
{
   44104:	4644      	mov	r4, r8
   44106:	e7db      	b.n	440c0 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   44108:	4621      	mov	r1, r4
   4410a:	fb00 5007 	mla	r0, r0, r7, r5
   4410e:	f00d fb3e 	bl	5178e <k_queue_prepend>
}
   44112:	e7f7      	b.n	44104 <net_buf_unref+0x50>
   44114:	20001544 	.word	0x20001544

00044118 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   44118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4411c:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   44120:	4606      	mov	r6, r0
   44122:	460d      	mov	r5, r1
   44124:	4617      	mov	r7, r2
	while (buf->frags) {
   44126:	4604      	mov	r4, r0
   44128:	4621      	mov	r1, r4
   4412a:	6824      	ldr	r4, [r4, #0]
   4412c:	2c00      	cmp	r4, #0
   4412e:	d1fb      	bne.n	44128 <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   44130:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   44134:	f101 0b08 	add.w	fp, r1, #8
   44138:	4658      	mov	r0, fp
   4413a:	f00c fb32 	bl	507a2 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   4413e:	4285      	cmp	r5, r0
   44140:	bf2c      	ite	cs
   44142:	b282      	uxthcs	r2, r0
   44144:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   44146:	4639      	mov	r1, r7
   44148:	4658      	mov	r0, fp
   4414a:	9201      	str	r2, [sp, #4]
   4414c:	f00c fae2 	bl	50714 <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   44150:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   44152:	1aad      	subs	r5, r5, r2
		added_len += count;
   44154:	4414      	add	r4, r2
		value8 += count;
   44156:	4417      	add	r7, r2
		if (len == 0) {
   44158:	d016      	beq.n	44188 <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   4415a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4415c:	b14b      	cbz	r3, 44172 <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   4415e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   44160:	4640      	mov	r0, r8
   44162:	4649      	mov	r1, r9
   44164:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   44166:	4601      	mov	r1, r0
		}

		if (!frag) {
   44168:	b170      	cbz	r0, 44188 <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   4416a:	4630      	mov	r0, r6
   4416c:	f00c faaf 	bl	506ce <net_buf_frag_add>
	do {
   44170:	e7e0      	b.n	44134 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   44172:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   44174:	f8df c018 	ldr.w	ip, [pc, #24]	; 44190 <net_buf_append_bytes+0x78>
   44178:	4642      	mov	r2, r8
   4417a:	464b      	mov	r3, r9
   4417c:	4629      	mov	r1, r5
   4417e:	fb00 c00a 	mla	r0, r0, sl, ip
   44182:	f7ff ff03 	bl	43f8c <net_buf_alloc_len>
   44186:	e7ee      	b.n	44166 <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   44188:	4620      	mov	r0, r4
   4418a:	b003      	add	sp, #12
   4418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44190:	20001544 	.word	0x20001544

00044194 <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   44194:	b510      	push	{r4, lr}
   44196:	460c      	mov	r4, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
   44198:	4601      	mov	r1, r0
   4419a:	4808      	ldr	r0, [pc, #32]	; (441bc <hid_int_in+0x28>)
   4419c:	f006 ff64 	bl	4b068 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   441a0:	b150      	cbz	r0, 441b8 <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   441a2:	2c02      	cmp	r4, #2
   441a4:	d108      	bne.n	441b8 <hid_int_in+0x24>
   441a6:	f850 3c08 	ldr.w	r3, [r0, #-8]
   441aa:	b12b      	cbz	r3, 441b8 <hid_int_in+0x24>
	    dev_data->ops->int_in_ready == NULL) {
   441ac:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   441ae:	b11b      	cbz	r3, 441b8 <hid_int_in+0x24>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
   441b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dev_data->ops->int_in_ready(common->dev);
   441b4:	6800      	ldr	r0, [r0, #0]
   441b6:	4718      	bx	r3
}
   441b8:	bd10      	pop	{r4, pc}
   441ba:	bf00      	nop
   441bc:	20006824 	.word	0x20006824

000441c0 <hid_custom_handle_req>:
	if (usb_reqtype_is_to_host(setup) &&
   441c0:	f990 3000 	ldrsb.w	r3, [r0]
   441c4:	2b00      	cmp	r3, #0
{
   441c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   441ca:	4604      	mov	r4, r0
   441cc:	460e      	mov	r6, r1
   441ce:	4615      	mov	r5, r2
	if (usb_reqtype_is_to_host(setup) &&
   441d0:	db03      	blt.n	441da <hid_custom_handle_req+0x1a>
	return -EINVAL;
   441d2:	f06f 0015 	mvn.w	r0, #21
}
   441d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
   441da:	8803      	ldrh	r3, [r0, #0]
   441dc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
   441e0:	b29b      	uxth	r3, r3
   441e2:	f240 6201 	movw	r2, #1537	; 0x601
   441e6:	4293      	cmp	r3, r2
   441e8:	d1f3      	bne.n	441d2 <hid_custom_handle_req+0x12>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   441ea:	8843      	ldrh	r3, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   441ec:	7901      	ldrb	r1, [r0, #4]
   441ee:	4813      	ldr	r0, [pc, #76]	; (4423c <hid_custom_handle_req+0x7c>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   441f0:	ea4f 2813 	mov.w	r8, r3, lsr #8
   441f4:	4647      	mov	r7, r8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   441f6:	f006 ff29 	bl	4b04c <usb_get_dev_data_by_iface>
		if (common == NULL) {
   441fa:	2800      	cmp	r0, #0
   441fc:	d0e9      	beq.n	441d2 <hid_custom_handle_req+0x12>
		switch (value) {
   441fe:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
   44202:	d004      	beq.n	4420e <hid_custom_handle_req+0x4e>
   44204:	2f22      	cmp	r7, #34	; 0x22
   44206:	d00f      	beq.n	44228 <hid_custom_handle_req+0x68>
   44208:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4420c:	e7e3      	b.n	441d6 <hid_custom_handle_req+0x16>
			cfg = common->dev->config;
   4420e:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   44210:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
   44212:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   44214:	685b      	ldr	r3, [r3, #4]
   44216:	f813 2f09 	ldrb.w	r2, [r3, #9]!
   4421a:	4291      	cmp	r1, r2
   4421c:	bf94      	ite	ls
   4421e:	6031      	strls	r1, [r6, #0]
   44220:	6032      	strhi	r2, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
   44222:	602b      	str	r3, [r5, #0]
		return 0;
   44224:	2000      	movs	r0, #0
			break;
   44226:	e7d6      	b.n	441d6 <hid_custom_handle_req+0x16>
			*len = MIN(setup->wLength, dev_data->report_size);
   44228:	88e3      	ldrh	r3, [r4, #6]
   4422a:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   4422e:	429a      	cmp	r2, r3
   44230:	bf94      	ite	ls
   44232:	6032      	strls	r2, [r6, #0]
   44234:	6033      	strhi	r3, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
   44236:	f850 3c10 	ldr.w	r3, [r0, #-16]
   4423a:	e7f2      	b.n	44222 <hid_custom_handle_req+0x62>
   4423c:	20006824 	.word	0x20006824

00044240 <hid_class_handle_req>:
{
   44240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44244:	4604      	mov	r4, r0
   44246:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   44248:	7901      	ldrb	r1, [r0, #4]
   4424a:	4814      	ldr	r0, [pc, #80]	; (4429c <hid_class_handle_req+0x5c>)
{
   4424c:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   4424e:	f006 fefd 	bl	4b04c <usb_get_dev_data_by_iface>
	if (common == NULL) {
   44252:	4605      	mov	r5, r0
   44254:	b1d0      	cbz	r0, 4428c <hid_class_handle_req+0x4c>
	if (usb_reqtype_is_to_host(setup)) {
   44256:	f994 2000 	ldrsb.w	r2, [r4]
	dev = common->dev;
   4425a:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
   4425c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   4425e:	2a00      	cmp	r2, #0
   44260:	da0d      	bge.n	4427e <hid_class_handle_req+0x3e>
		switch (setup->bRequest) {
   44262:	2b01      	cmp	r3, #1
   44264:	d116      	bne.n	44294 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->get_report) {
   44266:	f855 3c08 	ldr.w	r3, [r5, #-8]
   4426a:	b19b      	cbz	r3, 44294 <hid_class_handle_req+0x54>
   4426c:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
   4426e:	b18d      	cbz	r5, 44294 <hid_class_handle_req+0x54>
				return dev_data->ops->set_report(dev, setup,
   44270:	463b      	mov	r3, r7
   44272:	4632      	mov	r2, r6
   44274:	4621      	mov	r1, r4
   44276:	46ac      	mov	ip, r5
}
   44278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return dev_data->ops->set_report(dev, setup,
   4427c:	4760      	bx	ip
		switch (setup->bRequest) {
   4427e:	2b09      	cmp	r3, #9
   44280:	d108      	bne.n	44294 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
   44282:	f855 3c08 	ldr.w	r3, [r5, #-8]
   44286:	b12b      	cbz	r3, 44294 <hid_class_handle_req+0x54>
   44288:	685d      	ldr	r5, [r3, #4]
   4428a:	e7f0      	b.n	4426e <hid_class_handle_req+0x2e>
		return -ENODEV;
   4428c:	f06f 0012 	mvn.w	r0, #18
}
   44290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return -ENOTSUP;
   44294:	f06f 0085 	mvn.w	r0, #133	; 0x85
   44298:	e7fa      	b.n	44290 <hid_class_handle_req+0x50>
   4429a:	bf00      	nop
   4429c:	20006824 	.word	0x20006824

000442a0 <hid_status_cb>:
{
   442a0:	b510      	push	{r4, lr}
   442a2:	460c      	mov	r4, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
   442a4:	4601      	mov	r1, r0
   442a6:	480f      	ldr	r0, [pc, #60]	; (442e4 <hid_status_cb+0x44>)
   442a8:	f006 fec4 	bl	4b034 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   442ac:	b150      	cbz	r0, 442c4 <hid_status_cb+0x24>
	switch (status) {
   442ae:	1e61      	subs	r1, r4, #1
   442b0:	2905      	cmp	r1, #5
   442b2:	d807      	bhi.n	442c4 <hid_status_cb+0x24>
   442b4:	e8df f001 	tbb	[pc, r1]
   442b8:	07030607 	.word	0x07030607
   442bc:	0f0d      	.short	0x0f0d
		dev_data->configured = true;
   442be:	2301      	movs	r3, #1
   442c0:	f800 3c04 	strb.w	r3, [r0, #-4]
}
   442c4:	bd10      	pop	{r4, pc}
		dev_data->configured = false;
   442c6:	2300      	movs	r3, #0
   442c8:	f800 3c04 	strb.w	r3, [r0, #-4]
			dev_data->suspended = false;
   442cc:	f800 3c03 	strb.w	r3, [r0, #-3]
   442d0:	e7f8      	b.n	442c4 <hid_status_cb+0x24>
		dev_data->suspended = true;
   442d2:	2301      	movs	r3, #1
   442d4:	e7fa      	b.n	442cc <hid_status_cb+0x2c>
		if (dev_data->suspended) {
   442d6:	f810 3c03 	ldrb.w	r3, [r0, #-3]
   442da:	2b00      	cmp	r3, #0
   442dc:	d0f2      	beq.n	442c4 <hid_status_cb+0x24>
			dev_data->suspended = false;
   442de:	2300      	movs	r3, #0
   442e0:	e7f4      	b.n	442cc <hid_status_cb+0x2c>
   442e2:	bf00      	nop
   442e4:	20006824 	.word	0x20006824

000442e8 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
   442e8:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
   442ea:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
   442ec:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   442ee:	2300      	movs	r3, #0
   442f0:	6163      	str	r3, [r4, #20]
	return list->tail;
   442f2:	4b07      	ldr	r3, [pc, #28]	; (44310 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
   442f4:	6120      	str	r0, [r4, #16]
	dev_data->report_size = size;
   442f6:	e9c4 1200 	strd	r1, r2, [r4]
   442fa:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
   442fc:	f104 0214 	add.w	r2, r4, #20
Z_GENLIST_APPEND(slist, snode)
   44300:	b911      	cbnz	r1, 44308 <usb_hid_register_device+0x20>
	list->head = node;
   44302:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
   44306:	bd10      	pop	{r4, pc}
	parent->next = child;
   44308:	600a      	str	r2, [r1, #0]
	list->tail = node;
   4430a:	605a      	str	r2, [r3, #4]
   4430c:	e7fb      	b.n	44306 <usb_hid_register_device+0x1e>
   4430e:	bf00      	nop
   44310:	20006824 	.word	0x20006824

00044314 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   44314:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   44318:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   4431a:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   4431c:	d004      	beq.n	44328 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   4431e:	f010 0f78 	tst.w	r0, #120	; 0x78
   44322:	d001      	beq.n	44328 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   44324:	2000      	movs	r0, #0
   44326:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   44328:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   4432a:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   4432e:	f000 0008 	and.w	r0, r0, #8
   44332:	da05      	bge.n	44340 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   44334:	b958      	cbnz	r0, 4434e <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   44336:	4808      	ldr	r0, [pc, #32]	; (44358 <endpoint_ctx+0x44>)
   44338:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   4433c:	304c      	adds	r0, #76	; 0x4c
   4433e:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   44340:	b938      	cbnz	r0, 44352 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   44342:	4805      	ldr	r0, [pc, #20]	; (44358 <endpoint_ctx+0x44>)
   44344:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   44348:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   4434c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   4434e:	4803      	ldr	r0, [pc, #12]	; (4435c <endpoint_ctx+0x48>)
   44350:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   44352:	4803      	ldr	r0, [pc, #12]	; (44360 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   44354:	4770      	bx	lr
   44356:	bf00      	nop
   44358:	20006e2c 	.word	0x20006e2c
   4435c:	20006f78 	.word	0x20006f78
   44360:	20007098 	.word	0x20007098

00044364 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   44364:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   44366:	4801      	ldr	r0, [pc, #4]	; (4436c <usbd_evt_put+0x8>)
   44368:	f00d ba06 	b.w	51778 <k_queue_append>
   4436c:	2000152c 	.word	0x2000152c

00044370 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   44370:	4901      	ldr	r1, [pc, #4]	; (44378 <usbd_work_schedule+0x8>)
   44372:	4802      	ldr	r0, [pc, #8]	; (4437c <usbd_work_schedule+0xc>)
   44374:	f00d baea 	b.w	5194c <k_work_submit_to_queue>
   44378:	20006e54 	.word	0x20006e54
   4437c:	20004150 	.word	0x20004150

00044380 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   44380:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   44382:	480b      	ldr	r0, [pc, #44]	; (443b0 <usb_init+0x30>)
   44384:	f002 fd5c 	bl	46e40 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   44388:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   4438a:	480a      	ldr	r0, [pc, #40]	; (443b4 <usb_init+0x34>)
   4438c:	f002 fd9e 	bl	46ecc <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   44390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44394:	f44f 6280 	mov.w	r2, #1024	; 0x400
   44398:	4907      	ldr	r1, [pc, #28]	; (443b8 <usb_init+0x38>)
   4439a:	4808      	ldr	r0, [pc, #32]	; (443bc <usb_init+0x3c>)
   4439c:	9400      	str	r4, [sp, #0]
   4439e:	f004 fbf9 	bl	48b94 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   443a2:	4907      	ldr	r1, [pc, #28]	; (443c0 <usb_init+0x40>)
   443a4:	4807      	ldr	r0, [pc, #28]	; (443c4 <usb_init+0x44>)
   443a6:	f00d fab8 	bl	5191a <k_work_init>

	return 0;
}
   443aa:	4620      	mov	r0, r4
   443ac:	b002      	add	sp, #8
   443ae:	bd10      	pop	{r4, pc}
   443b0:	00056b2d 	.word	0x00056b2d
   443b4:	00056008 	.word	0x00056008
   443b8:	20009628 	.word	0x20009628
   443bc:	20004150 	.word	0x20004150
   443c0:	000446dd 	.word	0x000446dd
   443c4:	20006e54 	.word	0x20006e54

000443c8 <usbd_evt_get>:
   443c8:	4802      	ldr	r0, [pc, #8]	; (443d4 <usbd_evt_get+0xc>)
   443ca:	2200      	movs	r2, #0
   443cc:	2300      	movs	r3, #0
   443ce:	f004 ba3b 	b.w	48848 <z_impl_k_queue_get>
   443d2:	bf00      	nop
   443d4:	2000152c 	.word	0x2000152c

000443d8 <usbd_evt_flush>:
{
   443d8:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   443da:	4c05      	ldr	r4, [pc, #20]	; (443f0 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   443dc:	f7ff fff4 	bl	443c8 <usbd_evt_get>
		if (ev) {
   443e0:	b120      	cbz	r0, 443ec <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   443e2:	1d01      	adds	r1, r0, #4
   443e4:	4620      	mov	r0, r4
   443e6:	f00d f901 	bl	515ec <k_mem_slab_free>
	} while (ev != NULL);
   443ea:	e7f7      	b.n	443dc <usbd_evt_flush+0x4>
}
   443ec:	bd10      	pop	{r4, pc}
   443ee:	bf00      	nop
   443f0:	20001308 	.word	0x20001308

000443f4 <usbd_evt_alloc>:
{
   443f4:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   443f6:	2300      	movs	r3, #0
   443f8:	480e      	ldr	r0, [pc, #56]	; (44434 <usbd_evt_alloc+0x40>)
   443fa:	2200      	movs	r2, #0
   443fc:	a901      	add	r1, sp, #4
   443fe:	f003 ffb7 	bl	48370 <k_mem_slab_alloc>
   44402:	b190      	cbz	r0, 4442a <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   44404:	f7ff ffe8 	bl	443d8 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   44408:	480a      	ldr	r0, [pc, #40]	; (44434 <usbd_evt_alloc+0x40>)
   4440a:	2200      	movs	r2, #0
   4440c:	2300      	movs	r3, #0
   4440e:	a901      	add	r1, sp, #4
   44410:	f003 ffae 	bl	48370 <k_mem_slab_alloc>
   44414:	b938      	cbnz	r0, 44426 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   44416:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   44418:	2304      	movs	r3, #4
		ev->block = block;
   4441a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   4441c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   4441e:	f7ff ffa1 	bl	44364 <usbd_evt_put>
		usbd_work_schedule();
   44422:	f7ff ffa5 	bl	44370 <usbd_work_schedule>
		return NULL;
   44426:	2000      	movs	r0, #0
   44428:	e001      	b.n	4442e <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   4442a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   4442c:	6040      	str	r0, [r0, #4]
}
   4442e:	b003      	add	sp, #12
   44430:	f85d fb04 	ldr.w	pc, [sp], #4
   44434:	20001308 	.word	0x20001308

00044438 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   44438:	7881      	ldrb	r1, [r0, #2]
{
   4443a:	b570      	push	{r4, r5, r6, lr}
   4443c:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   4443e:	4608      	mov	r0, r1
   44440:	f7ff ff68 	bl	44314 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   44444:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   44446:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   44448:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   4444a:	d512      	bpl.n	44472 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   4444c:	2d00      	cmp	r5, #0
   4444e:	d143      	bne.n	444d8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   44450:	f7ff ffd0 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   44454:	4603      	mov	r3, r0
   44456:	2800      	cmp	r0, #0
   44458:	d03e      	beq.n	444d8 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   4445a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   4445c:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   4445e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   44460:	2203      	movs	r2, #3
   44462:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   44464:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   44466:	f7ff ff7d 	bl	44364 <usbd_evt_put>
}
   4446a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   4446e:	f7ff bf7f 	b.w	44370 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   44472:	b14d      	cbz	r5, 44488 <usbd_event_transfer_data+0x50>
   44474:	2d01      	cmp	r5, #1
   44476:	d12f      	bne.n	444d8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   44478:	f7ff ffbc 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   4447c:	4603      	mov	r3, r0
   4447e:	b358      	cbz	r0, 444d8 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   44480:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   44482:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44484:	7305      	strb	r5, [r0, #12]
   44486:	e7ed      	b.n	44464 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   44488:	f7ff ffb4 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   4448c:	b320      	cbz	r0, 444d8 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   4448e:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   44490:	4b12      	ldr	r3, [pc, #72]	; (444dc <usbd_event_transfer_data+0xa4>)
   44492:	f012 0f80 	tst.w	r2, #128	; 0x80
   44496:	f002 0108 	and.w	r1, r2, #8
   4449a:	d011      	beq.n	444c0 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   4449c:	b141      	cbz	r1, 444b0 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   4449e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   444a2:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   444a4:	2301      	movs	r3, #1
   444a6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   444a8:	2302      	movs	r3, #2
   444aa:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   444ac:	6084      	str	r4, [r0, #8]
   444ae:	e7da      	b.n	44466 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   444b0:	f002 020f 	and.w	r2, r2, #15
   444b4:	2114      	movs	r1, #20
   444b6:	fb01 3302 	mla	r3, r1, r2, r3
   444ba:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   444be:	e7f0      	b.n	444a2 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   444c0:	b111      	cbz	r1, 444c8 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   444c2:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   444c6:	e7ec      	b.n	444a2 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   444c8:	f002 020f 	and.w	r2, r2, #15
   444cc:	2114      	movs	r1, #20
   444ce:	fb01 3302 	mla	r3, r1, r2, r3
   444d2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   444d6:	e7e4      	b.n	444a2 <usbd_event_transfer_data+0x6a>
}
   444d8:	bd70      	pop	{r4, r5, r6, pc}
   444da:	bf00      	nop
   444dc:	40027000 	.word	0x40027000

000444e0 <usb_dc_power_event_handler>:
	switch (event) {
   444e0:	2802      	cmp	r0, #2
{
   444e2:	b510      	push	{r4, lr}
   444e4:	d811      	bhi.n	4450a <usb_dc_power_event_handler+0x2a>
   444e6:	4b09      	ldr	r3, [pc, #36]	; (4450c <usb_dc_power_event_handler+0x2c>)
   444e8:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   444ea:	f7ff ff83 	bl	443f4 <usbd_evt_alloc>
	if (!ev) {
   444ee:	b160      	cbz	r0, 4450a <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   444f0:	2200      	movs	r2, #0
   444f2:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   444f4:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   444f6:	f7ff ff35 	bl	44364 <usbd_evt_put>
	if (usbd_ctx.attached) {
   444fa:	4b05      	ldr	r3, [pc, #20]	; (44510 <usb_dc_power_event_handler+0x30>)
   444fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44500:	b11b      	cbz	r3, 4450a <usb_dc_power_event_handler+0x2a>
}
   44502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   44506:	f7ff bf33 	b.w	44370 <usbd_work_schedule>
}
   4450a:	bd10      	pop	{r4, pc}
   4450c:	00056b2a 	.word	0x00056b2a
   44510:	20006e2c 	.word	0x20006e2c

00044514 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   44514:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   44516:	490f      	ldr	r1, [pc, #60]	; (44554 <hfxo_stop.constprop.0.isra.0+0x40>)
   44518:	f3bf 8f5b 	dmb	ish
   4451c:	f101 0320 	add.w	r3, r1, #32
   44520:	2200      	movs	r2, #0
   44522:	e853 0f00 	ldrex	r0, [r3]
   44526:	2801      	cmp	r0, #1
   44528:	d103      	bne.n	44532 <hfxo_stop.constprop.0.isra.0+0x1e>
   4452a:	e843 2400 	strex	r4, r2, [r3]
   4452e:	2c00      	cmp	r4, #0
   44530:	d1f7      	bne.n	44522 <hfxo_stop.constprop.0.isra.0+0xe>
   44532:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   44536:	d10b      	bne.n	44550 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   44538:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   4453a:	310c      	adds	r1, #12
   4453c:	4620      	mov	r0, r4
   4453e:	f006 f8b6 	bl	4a6ae <onoff_cancel>

	if (rv == -EALREADY) {
   44542:	3078      	adds	r0, #120	; 0x78
   44544:	d104      	bne.n	44550 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   44546:	4620      	mov	r0, r4
}
   44548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4454c:	f006 b88a 	b.w	4a664 <onoff_release>
   44550:	bd10      	pop	{r4, pc}
   44552:	bf00      	nop
   44554:	20006e2c 	.word	0x20006e2c

00044558 <usbd_event_handler>:
{
   44558:	b5f0      	push	{r4, r5, r6, r7, lr}
   4455a:	4606      	mov	r6, r0
   4455c:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   4455e:	2214      	movs	r2, #20
   44560:	2100      	movs	r1, #0
   44562:	a803      	add	r0, sp, #12
   44564:	f008 f8b2 	bl	4c6cc <memset>
	switch (p_event->type) {
   44568:	7833      	ldrb	r3, [r6, #0]
   4456a:	3b01      	subs	r3, #1
   4456c:	2b05      	cmp	r3, #5
   4456e:	d821      	bhi.n	445b4 <usbd_event_handler+0x5c>
   44570:	e8df f003 	tbb	[pc, r3]
   44574:	1414037a 	.word	0x1414037a
   44578:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   4457a:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   4457c:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   44580:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   44582:	f7ff ff37 	bl	443f4 <usbd_evt_alloc>
		if (!ev) {
   44586:	4603      	mov	r3, r0
   44588:	b1a0      	cbz	r0, 445b4 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   4458a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   4458c:	f100 0208 	add.w	r2, r0, #8
   44590:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   44594:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   44598:	4618      	mov	r0, r3
   4459a:	e01d      	b.n	445d8 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   4459c:	2304      	movs	r3, #4
   4459e:	e7ed      	b.n	4457c <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   445a0:	78b1      	ldrb	r1, [r6, #2]
   445a2:	4608      	mov	r0, r1
   445a4:	f7ff feb6 	bl	44314 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   445a8:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   445aa:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   445ac:	b123      	cbz	r3, 445b8 <usbd_event_handler+0x60>
   445ae:	3b01      	subs	r3, #1
   445b0:	2b02      	cmp	r3, #2
   445b2:	d943      	bls.n	4463c <usbd_event_handler+0xe4>
}
   445b4:	b009      	add	sp, #36	; 0x24
   445b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   445b8:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   445ba:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   445bc:	d513      	bpl.n	445e6 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   445be:	2d00      	cmp	r5, #0
   445c0:	d1f8      	bne.n	445b4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   445c2:	f7ff ff17 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   445c6:	4603      	mov	r3, r0
   445c8:	2800      	cmp	r0, #0
   445ca:	d0f3      	beq.n	445b4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   445cc:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   445ce:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   445d0:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   445d2:	2203      	movs	r2, #3
   445d4:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   445d6:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   445d8:	f7ff fec4 	bl	44364 <usbd_evt_put>
}
   445dc:	b009      	add	sp, #36	; 0x24
   445de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   445e2:	f7ff bec5 	b.w	44370 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   445e6:	b155      	cbz	r5, 445fe <usbd_event_handler+0xa6>
   445e8:	2d01      	cmp	r5, #1
   445ea:	d1e3      	bne.n	445b4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   445ec:	f7ff ff02 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   445f0:	4603      	mov	r3, r0
   445f2:	2800      	cmp	r0, #0
   445f4:	d0de      	beq.n	445b4 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   445f6:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   445f8:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   445fa:	7305      	strb	r5, [r0, #12]
   445fc:	e7eb      	b.n	445d6 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   445fe:	f7ff fef9 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   44602:	4607      	mov	r7, r0
   44604:	2800      	cmp	r0, #0
   44606:	d0d5      	beq.n	445b4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   44608:	2301      	movs	r3, #1
   4460a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   4460c:	2302      	movs	r3, #2
   4460e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   44610:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   44612:	f104 010c 	add.w	r1, r4, #12
   44616:	78b0      	ldrb	r0, [r6, #2]
   44618:	f00c fc36 	bl	50e88 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   4461c:	4a13      	ldr	r2, [pc, #76]	; (4466c <usbd_event_handler+0x114>)
   4461e:	68e1      	ldr	r1, [r4, #12]
   44620:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   44624:	428b      	cmp	r3, r1
   44626:	d906      	bls.n	44636 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   44628:	1a5b      	subs	r3, r3, r1
   4462a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   4462e:	f003 f9e1 	bl	479f4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   44632:	4638      	mov	r0, r7
   44634:	e7d0      	b.n	445d8 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   44636:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   4463a:	e7fa      	b.n	44632 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   4463c:	4630      	mov	r0, r6
}
   4463e:	b009      	add	sp, #36	; 0x24
   44640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   44644:	f7ff bef8 	b.w	44438 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   44648:	a801      	add	r0, sp, #4
   4464a:	f003 f9ad 	bl	479a8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   4464e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   44652:	2b05      	cmp	r3, #5
   44654:	d104      	bne.n	44660 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   44656:	f89d 3004 	ldrb.w	r3, [sp, #4]
   4465a:	f013 0f60 	tst.w	r3, #96	; 0x60
   4465e:	d0a9      	beq.n	445b4 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   44660:	4b03      	ldr	r3, [pc, #12]	; (44670 <usbd_event_handler+0x118>)
   44662:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   44664:	2401      	movs	r4, #1
   44666:	e78c      	b.n	44582 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   44668:	2402      	movs	r4, #2
   4466a:	e78a      	b.n	44582 <usbd_event_handler+0x2a>
   4466c:	20006e2c 	.word	0x20006e2c
   44670:	20006f98 	.word	0x20006f98

00044674 <eps_ctx_init>:
{
   44674:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   44676:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   44678:	f064 007f 	orn	r0, r4, #127	; 0x7f
   4467c:	b2c0      	uxtb	r0, r0
   4467e:	f7ff fe49 	bl	44314 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   44682:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   44684:	f00c f8b3 	bl	507ee <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   44688:	2c08      	cmp	r4, #8
   4468a:	d1f5      	bne.n	44678 <eps_ctx_init+0x4>
   4468c:	4d0f      	ldr	r5, [pc, #60]	; (446cc <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   4468e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   44690:	b2e0      	uxtb	r0, r4
   44692:	f7ff fe3f 	bl	44314 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   44696:	6903      	ldr	r3, [r0, #16]
   44698:	b903      	cbnz	r3, 4469c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   4469a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   4469c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   4469e:	f00c f8a6 	bl	507ee <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   446a2:	2c08      	cmp	r4, #8
   446a4:	f105 0540 	add.w	r5, r5, #64	; 0x40
   446a8:	d1f2      	bne.n	44690 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   446aa:	4c09      	ldr	r4, [pc, #36]	; (446d0 <eps_ctx_init+0x5c>)
   446ac:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   446b0:	f00c f89d 	bl	507ee <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   446b4:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   446b8:	b913      	cbnz	r3, 446c0 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   446ba:	4b06      	ldr	r3, [pc, #24]	; (446d4 <eps_ctx_init+0x60>)
   446bc:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   446c0:	4805      	ldr	r0, [pc, #20]	; (446d8 <eps_ctx_init+0x64>)
   446c2:	f00c f894 	bl	507ee <ep_ctx_reset>
}
   446c6:	2000      	movs	r0, #0
   446c8:	bd38      	pop	{r3, r4, r5, pc}
   446ca:	bf00      	nop
   446cc:	20006c2c 	.word	0x20006c2c
   446d0:	20006e2c 	.word	0x20006e2c
   446d4:	2000682c 	.word	0x2000682c
   446d8:	20007098 	.word	0x20007098

000446dc <usbd_work_handler>:
{
   446dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   446e0:	4ca8      	ldr	r4, [pc, #672]	; (44984 <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   446e2:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 44988 <usbd_work_handler+0x2ac>
{
   446e6:	b085      	sub	sp, #20
   446e8:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   446ea:	f7ff fe6d 	bl	443c8 <usbd_evt_get>
   446ee:	b910      	cbnz	r0, 446f6 <usbd_work_handler+0x1a>
}
   446f0:	b005      	add	sp, #20
   446f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   446f6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   446fa:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   446fc:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   44700:	b93b      	cbnz	r3, 44712 <usbd_work_handler+0x36>
   44702:	2a00      	cmp	r2, #0
   44704:	f000 8086 	beq.w	44814 <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   44708:	4649      	mov	r1, r9
   4470a:	4640      	mov	r0, r8
   4470c:	f00c ff6e 	bl	515ec <k_mem_slab_free>
}
   44710:	e7eb      	b.n	446ea <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   44712:	2a04      	cmp	r2, #4
   44714:	d8f8      	bhi.n	44708 <usbd_work_handler+0x2c>
   44716:	e8df f012 	tbh	[pc, r2, lsl #1]
   4471a:	007d      	.short	0x007d
   4471c:	01030005 	.word	0x01030005
   44720:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   44724:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   44726:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   44728:	2b03      	cmp	r3, #3
   4472a:	d8ed      	bhi.n	44708 <usbd_work_handler+0x2c>
   4472c:	e8df f003 	tbb	[pc, r3]
   44730:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   44734:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   44736:	2208      	movs	r2, #8
   44738:	2100      	movs	r1, #0
   4473a:	4630      	mov	r0, r6
   4473c:	f007 ffc6 	bl	4c6cc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   44740:	4b92      	ldr	r3, [pc, #584]	; (4498c <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   44742:	4893      	ldr	r0, [pc, #588]	; (44990 <usbd_work_handler+0x2b4>)
   44744:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   44748:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   4474a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   4474e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   44750:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   44754:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   44758:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   4475c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   4475e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   44762:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   44766:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   4476a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   4476c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   44770:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   44774:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   44778:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   4477a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   4477c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   4477e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   44780:	f007 ff99 	bl	4c6b6 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   44784:	682b      	ldr	r3, [r5, #0]
   44786:	7a68      	ldrb	r0, [r5, #9]
   44788:	2100      	movs	r1, #0
   4478a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   4478c:	f996 3000 	ldrsb.w	r3, [r6]
   44790:	2b00      	cmp	r3, #0
   44792:	db06      	blt.n	447a2 <usbd_work_handler+0xc6>
   44794:	88f3      	ldrh	r3, [r6, #6]
   44796:	b123      	cbz	r3, 447a2 <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   44798:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   4479c:	f003 f92a 	bl	479f4 <nrfx_usbd_setup_data_clear>
   447a0:	e7b2      	b.n	44708 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   447a2:	2300      	movs	r3, #0
   447a4:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   447a8:	e7ae      	b.n	44708 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   447aa:	7f6b      	ldrb	r3, [r5, #29]
   447ac:	2b00      	cmp	r3, #0
   447ae:	d0ab      	beq.n	44708 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   447b0:	7f2b      	ldrb	r3, [r5, #28]
   447b2:	2b00      	cmp	r3, #0
   447b4:	d0a8      	beq.n	44708 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   447b6:	2600      	movs	r6, #0
   447b8:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   447ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   447be:	4875      	ldr	r0, [pc, #468]	; (44994 <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   447c0:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   447c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   447c6:	f00c f825 	bl	50814 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   447ca:	696b      	ldr	r3, [r5, #20]
   447cc:	9301      	str	r3, [sp, #4]
   447ce:	686b      	ldr	r3, [r5, #4]
   447d0:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   447d4:	a901      	add	r1, sp, #4
   447d6:	7a68      	ldrb	r0, [r5, #9]
   447d8:	f002 ff16 	bl	47608 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   447dc:	486d      	ldr	r0, [pc, #436]	; (44994 <usbd_work_handler+0x2b8>)
   447de:	f00c f81b 	bl	50818 <k_mutex_unlock.isra.0>
   447e2:	e791      	b.n	44708 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   447e4:	682b      	ldr	r3, [r5, #0]
   447e6:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   447e8:	7a68      	ldrb	r0, [r5, #9]
   447ea:	4798      	blx	r3
		break;
   447ec:	e78c      	b.n	44708 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   447ee:	7aab      	ldrb	r3, [r5, #10]
   447f0:	b96b      	cbnz	r3, 4480e <usbd_work_handler+0x132>
   447f2:	7feb      	ldrb	r3, [r5, #31]
   447f4:	b95b      	cbnz	r3, 4480e <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   447f6:	4867      	ldr	r0, [pc, #412]	; (44994 <usbd_work_handler+0x2b8>)
   447f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   447fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44800:	f00c f808 	bl	50814 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   44804:	f003 f926 	bl	47a54 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   44808:	4862      	ldr	r0, [pc, #392]	; (44994 <usbd_work_handler+0x2b8>)
   4480a:	f00c f805 	bl	50818 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   4480e:	682b      	ldr	r3, [r5, #0]
   44810:	2102      	movs	r1, #2
   44812:	e7e9      	b.n	447e8 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   44814:	7a02      	ldrb	r2, [r0, #8]
   44816:	2a04      	cmp	r2, #4
   44818:	f63f af76 	bhi.w	44708 <usbd_work_handler+0x2c>
   4481c:	e8df f002 	tbb	[pc, r2]
   44820:	6925035b 	.word	0x6925035b
   44824:	75          	.byte	0x75
   44825:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   44826:	f002 fe65 	bl	474f4 <nrfx_usbd_is_enabled>
   4482a:	4605      	mov	r5, r0
   4482c:	2800      	cmp	r0, #0
   4482e:	f47f af6b 	bne.w	44708 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   44832:	f002 fda3 	bl	4737c <nrfx_usbd_enable>
   44836:	f3bf 8f5b 	dmb	ish
   4483a:	4957      	ldr	r1, [pc, #348]	; (44998 <usbd_work_handler+0x2bc>)
   4483c:	2301      	movs	r3, #1
   4483e:	e851 2f00 	ldrex	r2, [r1]
   44842:	2a00      	cmp	r2, #0
   44844:	d103      	bne.n	4484e <usbd_work_handler+0x172>
   44846:	e841 3000 	strex	r0, r3, [r1]
   4484a:	2800      	cmp	r0, #0
   4484c:	d1f7      	bne.n	4483e <usbd_work_handler+0x162>
   4484e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   44852:	f47f af59 	bne.w	44708 <usbd_work_handler+0x2c>
   44856:	f841 5c10 	str.w	r5, [r1, #-16]
   4485a:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   4485e:	69e0      	ldr	r0, [r4, #28]
   44860:	6163      	str	r3, [r4, #20]
   44862:	3914      	subs	r1, #20
   44864:	f005 feb5 	bl	4a5d2 <onoff_request>
   44868:	e74e      	b.n	44708 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   4486a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   4486c:	f065 007f 	orn	r0, r5, #127	; 0x7f
   44870:	b2c0      	uxtb	r0, r0
   44872:	f7ff fd4f 	bl	44314 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   44876:	7a03      	ldrb	r3, [r0, #8]
   44878:	b113      	cbz	r3, 44880 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4487a:	7a40      	ldrb	r0, [r0, #9]
   4487c:	f003 fad6 	bl	47e2c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   44880:	3501      	adds	r5, #1
   44882:	2d08      	cmp	r5, #8
   44884:	d1f2      	bne.n	4486c <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   44886:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   4488a:	b11b      	cbz	r3, 44894 <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4488c:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   44890:	f003 facc 	bl	47e2c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   44894:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   44896:	b2e8      	uxtb	r0, r5
   44898:	f7ff fd3c 	bl	44314 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   4489c:	7a03      	ldrb	r3, [r0, #8]
   4489e:	b113      	cbz	r3, 448a6 <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   448a0:	7a40      	ldrb	r0, [r0, #9]
   448a2:	f003 fac3 	bl	47e2c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   448a6:	3501      	adds	r5, #1
   448a8:	2d08      	cmp	r5, #8
   448aa:	d1f4      	bne.n	44896 <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   448ac:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   448b0:	b11b      	cbz	r3, 448ba <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   448b2:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   448b6:	f003 fab9 	bl	47e2c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   448ba:	2001      	movs	r0, #1
   448bc:	f002 fdfc 	bl	474b8 <nrfx_usbd_start>
		ctx->ready = true;
   448c0:	2301      	movs	r3, #1
   448c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   448c6:	6823      	ldr	r3, [r4, #0]
   448c8:	2b00      	cmp	r3, #0
   448ca:	f43f af1d 	beq.w	44708 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   448ce:	2100      	movs	r1, #0
   448d0:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   448d2:	4798      	blx	r3
   448d4:	e718      	b.n	44708 <usbd_work_handler+0x2c>
		ctx->ready = false;
   448d6:	2500      	movs	r5, #0
   448d8:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   448dc:	f003 fa32 	bl	47d44 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   448e0:	f7ff fe18 	bl	44514 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   448e4:	6823      	ldr	r3, [r4, #0]
   448e6:	2b00      	cmp	r3, #0
   448e8:	f43f af0e 	beq.w	44708 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   448ec:	4629      	mov	r1, r5
   448ee:	2004      	movs	r0, #4
   448f0:	e7ef      	b.n	448d2 <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   448f2:	2b00      	cmp	r3, #0
   448f4:	f43f af08 	beq.w	44708 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   448f8:	f003 fa3c 	bl	47d74 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   448fc:	6823      	ldr	r3, [r4, #0]
   448fe:	2b00      	cmp	r3, #0
   44900:	f43f af02 	beq.w	44708 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   44904:	2100      	movs	r1, #0
   44906:	2005      	movs	r0, #5
   44908:	e7e3      	b.n	448d2 <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   4490a:	6822      	ldr	r2, [r4, #0]
   4490c:	2a00      	cmp	r2, #0
   4490e:	f43f aefb 	beq.w	44708 <usbd_work_handler+0x2c>
   44912:	2b00      	cmp	r3, #0
   44914:	f43f aef8 	beq.w	44708 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   44918:	2100      	movs	r1, #0
   4491a:	2006      	movs	r0, #6
   4491c:	4790      	blx	r2
   4491e:	e6f3      	b.n	44708 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44920:	f107 0510 	add.w	r5, r7, #16
   44924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4492c:	4628      	mov	r0, r5
   4492e:	f00b ff71 	bl	50814 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   44932:	f7ff fe9f 	bl	44674 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   44936:	4628      	mov	r0, r5
   44938:	f00b ff6e 	bl	50818 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   4493c:	f857 3c28 	ldr.w	r3, [r7, #-40]
   44940:	2b00      	cmp	r3, #0
   44942:	f43f aee1 	beq.w	44708 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   44946:	2100      	movs	r1, #0
   44948:	2001      	movs	r0, #1
   4494a:	e7c2      	b.n	448d2 <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   4494c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   44950:	b17b      	cbz	r3, 44972 <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   44952:	2501      	movs	r5, #1
   44954:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   44958:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   4495c:	f7ff fd4a 	bl	443f4 <usbd_evt_alloc>
		if (!ev) {
   44960:	b138      	cbz	r0, 44972 <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   44962:	4a0e      	ldr	r2, [pc, #56]	; (4499c <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   44964:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44966:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   44968:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   4496a:	f7ff fcfb 	bl	44364 <usbd_evt_put>
		usbd_work_schedule();
   4496e:	f7ff fcff 	bl	44370 <usbd_work_schedule>
			if (ctx->status_cb) {
   44972:	f857 3c28 	ldr.w	r3, [r7, #-40]
   44976:	2b00      	cmp	r3, #0
   44978:	f43f aec6 	beq.w	44708 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   4497c:	2100      	movs	r1, #0
   4497e:	200a      	movs	r0, #10
   44980:	e7a7      	b.n	448d2 <usbd_work_handler+0x1f6>
   44982:	bf00      	nop
   44984:	20006e2c 	.word	0x20006e2c
   44988:	20001308 	.word	0x20001308
   4498c:	40027000 	.word	0x40027000
   44990:	20006e30 	.word	0x20006e30
   44994:	20006e64 	.word	0x20006e64
   44998:	20006e4c 	.word	0x20006e4c
   4499c:	20007098 	.word	0x20007098
	nrfx_power_usbevt_disable();
   449a0:	f00c f9df 	bl	50d62 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   449a4:	f003 f9ce 	bl	47d44 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   449a8:	f002 fcde 	bl	47368 <nrfx_usbd_uninit>
	usbd_evt_flush();
   449ac:	f7ff fd14 	bl	443d8 <usbd_evt_flush>
	ret = eps_ctx_init();
   449b0:	f7ff fe60 	bl	44674 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   449b4:	f00c f9ce 	bl	50d54 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   449b8:	4801      	ldr	r0, [pc, #4]	; (449c0 <usbd_work_handler+0x2e4>)
   449ba:	f002 fddf 	bl	4757c <nrfx_usbd_init>
}
   449be:	e6a3      	b.n	44708 <usbd_work_handler+0x2c>
   449c0:	00044559 	.word	0x00044559

000449c4 <usb_dc_attach>:
{
   449c4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   449c6:	4d1a      	ldr	r5, [pc, #104]	; (44a30 <usb_dc_attach+0x6c>)
   449c8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   449cc:	bb5c      	cbnz	r4, 44a26 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   449ce:	f105 0038 	add.w	r0, r5, #56	; 0x38
   449d2:	f00c fe4e 	bl	51672 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   449d6:	4620      	mov	r0, r4
   449d8:	f000 fd24 	bl	45424 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   449dc:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   449de:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   449e0:	2101      	movs	r1, #1
   449e2:	2027      	movs	r0, #39	; 0x27
   449e4:	f7e8 fca0 	bl	2d328 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   449e8:	4812      	ldr	r0, [pc, #72]	; (44a34 <usb_dc_attach+0x70>)
   449ea:	f002 fdc7 	bl	4757c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   449ee:	4b12      	ldr	r3, [pc, #72]	; (44a38 <usb_dc_attach+0x74>)
   449f0:	4298      	cmp	r0, r3
   449f2:	d11a      	bne.n	44a2a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   449f4:	f00c f9ae 	bl	50d54 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   449f8:	f7ff fe3c 	bl	44674 <eps_ctx_init>
	if (ret == 0) {
   449fc:	4604      	mov	r4, r0
   449fe:	b910      	cbnz	r0, 44a06 <usb_dc_attach+0x42>
		ctx->attached = true;
   44a00:	2301      	movs	r3, #1
   44a02:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   44a06:	4b0d      	ldr	r3, [pc, #52]	; (44a3c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   44a08:	681b      	ldr	r3, [r3, #0]
   44a0a:	b10b      	cbz	r3, 44a10 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   44a0c:	f7ff fcb0 	bl	44370 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   44a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44a14:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   44a18:	07db      	lsls	r3, r3, #31
   44a1a:	d502      	bpl.n	44a22 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   44a1c:	2000      	movs	r0, #0
   44a1e:	f7ff fd5f 	bl	444e0 <usb_dc_power_event_handler>
}
   44a22:	4620      	mov	r0, r4
   44a24:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   44a26:	2400      	movs	r4, #0
   44a28:	e7fb      	b.n	44a22 <usb_dc_attach+0x5e>
		return -EIO;
   44a2a:	f06f 0404 	mvn.w	r4, #4
   44a2e:	e7f8      	b.n	44a22 <usb_dc_attach+0x5e>
   44a30:	20006e2c 	.word	0x20006e2c
   44a34:	00044559 	.word	0x00044559
   44a38:	0bad0000 	.word	0x0bad0000
   44a3c:	2000152c 	.word	0x2000152c

00044a40 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   44a40:	4b07      	ldr	r3, [pc, #28]	; (44a60 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   44a42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   44a46:	b13a      	cbz	r2, 44a58 <usb_dc_set_address+0x18>
   44a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   44a4c:	2b00      	cmp	r3, #0
   44a4e:	bf0c      	ite	eq
   44a50:	f06f 0012 	mvneq.w	r0, #18
   44a54:	2000      	movne	r0, #0
   44a56:	4770      	bx	lr
		return -ENODEV;
   44a58:	f06f 0012 	mvn.w	r0, #18
}
   44a5c:	4770      	bx	lr
   44a5e:	bf00      	nop
   44a60:	20006e2c 	.word	0x20006e2c

00044a64 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   44a64:	4b0f      	ldr	r3, [pc, #60]	; (44aa4 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   44a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   44a6a:	b510      	push	{r4, lr}
   44a6c:	4601      	mov	r1, r0
	if (!dev_attached()) {
   44a6e:	b1b3      	cbz	r3, 44a9e <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   44a70:	7804      	ldrb	r4, [r0, #0]
   44a72:	4620      	mov	r0, r4
   44a74:	f7ff fc4e 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44a78:	b910      	cbnz	r0, 44a80 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   44a7a:	f06f 0015 	mvn.w	r0, #21
}
   44a7e:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   44a80:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   44a82:	790b      	ldrb	r3, [r1, #4]
   44a84:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   44a86:	8849      	ldrh	r1, [r1, #2]
   44a88:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   44a8a:	0723      	lsls	r3, r4, #28
   44a8c:	d402      	bmi.n	44a94 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   44a8e:	1e4b      	subs	r3, r1, #1
   44a90:	420b      	tst	r3, r1
   44a92:	d1f2      	bne.n	44a7a <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   44a94:	4620      	mov	r0, r4
   44a96:	f00c f9f2 	bl	50e7e <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   44a9a:	2000      	movs	r0, #0
   44a9c:	e7ef      	b.n	44a7e <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   44a9e:	f06f 0012 	mvn.w	r0, #18
   44aa2:	e7ec      	b.n	44a7e <usb_dc_ep_configure+0x1a>
   44aa4:	20006e2c 	.word	0x20006e2c

00044aa8 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   44aa8:	4b12      	ldr	r3, [pc, #72]	; (44af4 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   44aaa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44aae:	b510      	push	{r4, lr}
   44ab0:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   44ab2:	b1ca      	cbz	r2, 44ae8 <usb_dc_ep_set_stall+0x40>
   44ab4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44ab8:	b1b3      	cbz	r3, 44ae8 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   44aba:	f7ff fc2b 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44abe:	4604      	mov	r4, r0
   44ac0:	b1a8      	cbz	r0, 44aee <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   44ac2:	7a83      	ldrb	r3, [r0, #10]
   44ac4:	2b01      	cmp	r3, #1
   44ac6:	d012      	beq.n	44aee <usb_dc_ep_set_stall+0x46>
   44ac8:	d907      	bls.n	44ada <usb_dc_ep_set_stall+0x32>
   44aca:	3b02      	subs	r3, #2
   44acc:	2b01      	cmp	r3, #1
   44ace:	d907      	bls.n	44ae0 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   44ad0:	6963      	ldr	r3, [r4, #20]
   44ad2:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   44ad4:	2000      	movs	r0, #0
   44ad6:	60e0      	str	r0, [r4, #12]
}
   44ad8:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   44ada:	f002 ffc3 	bl	47a64 <nrfx_usbd_setup_stall>
		break;
   44ade:	e7f7      	b.n	44ad0 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   44ae0:	4608      	mov	r0, r1
   44ae2:	f002 ff33 	bl	4794c <nrfx_usbd_ep_stall>
		break;
   44ae6:	e7f3      	b.n	44ad0 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   44ae8:	f06f 0012 	mvn.w	r0, #18
   44aec:	e7f4      	b.n	44ad8 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   44aee:	f06f 0015 	mvn.w	r0, #21
   44af2:	e7f1      	b.n	44ad8 <usb_dc_ep_set_stall+0x30>
   44af4:	20006e2c 	.word	0x20006e2c

00044af8 <usb_dc_ep_clear_stall>:
{
   44af8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44afa:	4b0e      	ldr	r3, [pc, #56]	; (44b34 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   44afc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44b00:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   44b02:	b182      	cbz	r2, 44b26 <usb_dc_ep_clear_stall+0x2e>
   44b04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44b08:	b16b      	cbz	r3, 44b26 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   44b0a:	f7ff fc03 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44b0e:	b168      	cbz	r0, 44b2c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   44b10:	f015 0408 	ands.w	r4, r5, #8
   44b14:	d10a      	bne.n	44b2c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   44b16:	4628      	mov	r0, r5
   44b18:	f002 ff3a 	bl	47990 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   44b1c:	4628      	mov	r0, r5
   44b1e:	f003 f9d7 	bl	47ed0 <nrfx_usbd_ep_stall_clear>
	return 0;
   44b22:	4620      	mov	r0, r4
}
   44b24:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44b26:	f06f 0012 	mvn.w	r0, #18
   44b2a:	e7fb      	b.n	44b24 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   44b2c:	f06f 0015 	mvn.w	r0, #21
   44b30:	e7f8      	b.n	44b24 <usb_dc_ep_clear_stall+0x2c>
   44b32:	bf00      	nop
   44b34:	20006e2c 	.word	0x20006e2c

00044b38 <usb_dc_ep_is_stalled>:
{
   44b38:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44b3a:	4b0c      	ldr	r3, [pc, #48]	; (44b6c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   44b3c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44b40:	4605      	mov	r5, r0
   44b42:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   44b44:	b162      	cbz	r2, 44b60 <usb_dc_ep_is_stalled+0x28>
   44b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44b4a:	b14b      	cbz	r3, 44b60 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   44b4c:	f7ff fbe2 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44b50:	b148      	cbz	r0, 44b66 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   44b52:	b141      	cbz	r1, 44b66 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   44b54:	4628      	mov	r0, r5
   44b56:	f002 ff01 	bl	4795c <nrfx_usbd_ep_stall_check>
   44b5a:	7020      	strb	r0, [r4, #0]
	return 0;
   44b5c:	2000      	movs	r0, #0
}
   44b5e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44b60:	f06f 0012 	mvn.w	r0, #18
   44b64:	e7fb      	b.n	44b5e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   44b66:	f06f 0015 	mvn.w	r0, #21
   44b6a:	e7f8      	b.n	44b5e <usb_dc_ep_is_stalled+0x26>
   44b6c:	20006e2c 	.word	0x20006e2c

00044b70 <usb_dc_ep_enable>:
{
   44b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   44b72:	4f13      	ldr	r7, [pc, #76]	; (44bc0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   44b74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   44b78:	4604      	mov	r4, r0
	if (!dev_attached()) {
   44b7a:	b1bb      	cbz	r3, 44bac <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   44b7c:	f7ff fbca 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44b80:	4605      	mov	r5, r0
   44b82:	b1b0      	cbz	r0, 44bb2 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   44b84:	0723      	lsls	r3, r4, #28
   44b86:	d405      	bmi.n	44b94 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   44b88:	4620      	mov	r0, r4
   44b8a:	f002 ff01 	bl	47990 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   44b8e:	4620      	mov	r0, r4
   44b90:	f003 f99e 	bl	47ed0 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   44b94:	7a2e      	ldrb	r6, [r5, #8]
   44b96:	b97e      	cbnz	r6, 44bb8 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   44b98:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   44b9c:	2301      	movs	r3, #1
   44b9e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   44ba0:	b118      	cbz	r0, 44baa <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   44ba2:	4620      	mov	r0, r4
   44ba4:	f003 f942 	bl	47e2c <nrfx_usbd_ep_enable>
	return 0;
   44ba8:	4630      	mov	r0, r6
}
   44baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   44bac:	f06f 0012 	mvn.w	r0, #18
   44bb0:	e7fb      	b.n	44baa <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   44bb2:	f06f 0015 	mvn.w	r0, #21
   44bb6:	e7f8      	b.n	44baa <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   44bb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   44bbc:	e7f5      	b.n	44baa <usb_dc_ep_enable+0x3a>
   44bbe:	bf00      	nop
   44bc0:	20006e2c 	.word	0x20006e2c

00044bc4 <usb_dc_ep_disable>:
{
   44bc4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44bc6:	4b11      	ldr	r3, [pc, #68]	; (44c0c <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   44bc8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44bcc:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   44bce:	b19a      	cbz	r2, 44bf8 <usb_dc_ep_disable+0x34>
   44bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44bd4:	b183      	cbz	r3, 44bf8 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   44bd6:	f7ff fb9d 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44bda:	4605      	mov	r5, r0
   44bdc:	b178      	cbz	r0, 44bfe <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   44bde:	7a03      	ldrb	r3, [r0, #8]
   44be0:	b183      	cbz	r3, 44c04 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44be2:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   44be4:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44be6:	f003 f8f5 	bl	47dd4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   44bea:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   44bec:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   44bee:	f00b fdfe 	bl	507ee <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   44bf2:	722c      	strb	r4, [r5, #8]
	return 0;
   44bf4:	4620      	mov	r0, r4
}
   44bf6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44bf8:	f06f 0012 	mvn.w	r0, #18
   44bfc:	e7fb      	b.n	44bf6 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   44bfe:	f06f 0015 	mvn.w	r0, #21
   44c02:	e7f8      	b.n	44bf6 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   44c04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   44c08:	e7f5      	b.n	44bf6 <usb_dc_ep_disable+0x32>
   44c0a:	bf00      	nop
   44c0c:	20006e2c 	.word	0x20006e2c

00044c10 <usb_dc_ep_write>:
{
   44c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   44c14:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 44cf4 <usb_dc_ep_write+0xe4>
{
   44c18:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   44c1a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   44c1e:	b085      	sub	sp, #20
   44c20:	4607      	mov	r7, r0
   44c22:	4689      	mov	r9, r1
   44c24:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   44c26:	2b00      	cmp	r3, #0
   44c28:	d05d      	beq.n	44ce6 <usb_dc_ep_write+0xd6>
   44c2a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   44c2e:	2b00      	cmp	r3, #0
   44c30:	d059      	beq.n	44ce6 <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   44c32:	0603      	lsls	r3, r0, #24
   44c34:	d55a      	bpl.n	44cec <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   44c36:	f7ff fb6d 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44c3a:	4605      	mov	r5, r0
   44c3c:	2800      	cmp	r0, #0
   44c3e:	d055      	beq.n	44cec <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   44c40:	7a03      	ldrb	r3, [r0, #8]
   44c42:	2b00      	cmp	r3, #0
   44c44:	d052      	beq.n	44cec <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44c4e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   44c52:	f00b fddf 	bl	50814 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   44c56:	7fab      	ldrb	r3, [r5, #30]
   44c58:	b14b      	cbz	r3, 44c6e <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   44c5a:	f108 0038 	add.w	r0, r8, #56	; 0x38
   44c5e:	f00b fddb 	bl	50818 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   44c62:	f06f 040a 	mvn.w	r4, #10
}
   44c66:	4620      	mov	r0, r4
   44c68:	b005      	add	sp, #20
   44c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   44c6e:	b916      	cbnz	r6, 44c76 <usb_dc_ep_write+0x66>
   44c70:	7feb      	ldrb	r3, [r5, #31]
   44c72:	b103      	cbz	r3, 44c76 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   44c74:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   44c76:	7aab      	ldrb	r3, [r5, #10]
   44c78:	b9bb      	cbnz	r3, 44caa <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   44c7a:	b15e      	cbz	r6, 44c94 <usb_dc_ep_write+0x84>
   44c7c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   44c80:	42b3      	cmp	r3, r6
   44c82:	d907      	bls.n	44c94 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   44c84:	686a      	ldr	r2, [r5, #4]
   44c86:	fbb6 f3f2 	udiv	r3, r6, r2
   44c8a:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   44c8e:	b90b      	cbnz	r3, 44c94 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   44c90:	2301      	movs	r3, #1
   44c92:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   44c94:	f002 feee 	bl	47a74 <nrfx_usbd_last_setup_dir_get>
   44c98:	42b8      	cmp	r0, r7
   44c9a:	d006      	beq.n	44caa <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   44c9c:	f002 feda 	bl	47a54 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   44ca0:	4815      	ldr	r0, [pc, #84]	; (44cf8 <usb_dc_ep_write+0xe8>)
   44ca2:	f00b fdb9 	bl	50818 <k_mutex_unlock.isra.0>
		return 0;
   44ca6:	2400      	movs	r4, #0
   44ca8:	e7dd      	b.n	44c66 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   44caa:	2301      	movs	r3, #1
   44cac:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   44cae:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   44cb2:	a901      	add	r1, sp, #4
   44cb4:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   44cb6:	e9cd 9601 	strd	r9, r6, [sp, #4]
   44cba:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   44cbe:	f002 fca3 	bl	47608 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   44cc2:	4b0e      	ldr	r3, [pc, #56]	; (44cfc <usb_dc_ep_write+0xec>)
   44cc4:	4298      	cmp	r0, r3
   44cc6:	d007      	beq.n	44cd8 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   44cc8:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   44ccc:	b10c      	cbz	r4, 44cd2 <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   44cce:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   44cd2:	f06f 0404 	mvn.w	r4, #4
   44cd6:	e002      	b.n	44cde <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   44cd8:	b10c      	cbz	r4, 44cde <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   44cda:	6026      	str	r6, [r4, #0]
	int result = 0;
   44cdc:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   44cde:	4806      	ldr	r0, [pc, #24]	; (44cf8 <usb_dc_ep_write+0xe8>)
   44ce0:	f00b fd9a 	bl	50818 <k_mutex_unlock.isra.0>
	return result;
   44ce4:	e7bf      	b.n	44c66 <usb_dc_ep_write+0x56>
		return -ENODEV;
   44ce6:	f06f 0412 	mvn.w	r4, #18
   44cea:	e7bc      	b.n	44c66 <usb_dc_ep_write+0x56>
		return -EINVAL;
   44cec:	f06f 0415 	mvn.w	r4, #21
   44cf0:	e7b9      	b.n	44c66 <usb_dc_ep_write+0x56>
   44cf2:	bf00      	nop
   44cf4:	20006e2c 	.word	0x20006e2c
   44cf8:	20006e64 	.word	0x20006e64
   44cfc:	0bad0000 	.word	0x0bad0000

00044d00 <usb_dc_ep_read_wait>:
{
   44d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44d04:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   44d06:	4b20      	ldr	r3, [pc, #128]	; (44d88 <usb_dc_ep_read_wait+0x88>)
{
   44d08:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   44d0a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44d0e:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   44d10:	2a00      	cmp	r2, #0
   44d12:	d033      	beq.n	44d7c <usb_dc_ep_read_wait+0x7c>
   44d14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44d18:	b383      	cbz	r3, 44d7c <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   44d1a:	0603      	lsls	r3, r0, #24
   44d1c:	d431      	bmi.n	44d82 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   44d1e:	b901      	cbnz	r1, 44d22 <usb_dc_ep_read_wait+0x22>
   44d20:	bb7f      	cbnz	r7, 44d82 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   44d22:	f7ff faf7 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44d26:	4604      	mov	r4, r0
   44d28:	b358      	cbz	r0, 44d82 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   44d2a:	7a03      	ldrb	r3, [r0, #8]
   44d2c:	b34b      	cbz	r3, 44d82 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44d32:	4816      	ldr	r0, [pc, #88]	; (44d8c <usb_dc_ep_read_wait+0x8c>)
   44d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44d38:	f00b fd6c 	bl	50814 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   44d3c:	68e3      	ldr	r3, [r4, #12]
   44d3e:	429f      	cmp	r7, r3
   44d40:	46b8      	mov	r8, r7
   44d42:	bf28      	it	cs
   44d44:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   44d46:	b946      	cbnz	r6, 44d5a <usb_dc_ep_read_wait+0x5a>
   44d48:	b93f      	cbnz	r7, 44d5a <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   44d4a:	b105      	cbz	r5, 44d4e <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   44d4c:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   44d4e:	480f      	ldr	r0, [pc, #60]	; (44d8c <usb_dc_ep_read_wait+0x8c>)
   44d50:	f00b fd62 	bl	50818 <k_mutex_unlock.isra.0>
		return 0;
   44d54:	2000      	movs	r0, #0
}
   44d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   44d5a:	69a1      	ldr	r1, [r4, #24]
   44d5c:	4642      	mov	r2, r8
   44d5e:	4630      	mov	r0, r6
   44d60:	f007 fca9 	bl	4c6b6 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   44d64:	69a3      	ldr	r3, [r4, #24]
   44d66:	4443      	add	r3, r8
   44d68:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   44d6a:	68e3      	ldr	r3, [r4, #12]
   44d6c:	eba3 0308 	sub.w	r3, r3, r8
   44d70:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   44d72:	2d00      	cmp	r5, #0
   44d74:	d0eb      	beq.n	44d4e <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   44d76:	f8c5 8000 	str.w	r8, [r5]
   44d7a:	e7e8      	b.n	44d4e <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   44d7c:	f06f 0012 	mvn.w	r0, #18
   44d80:	e7e9      	b.n	44d56 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   44d82:	f06f 0015 	mvn.w	r0, #21
   44d86:	e7e6      	b.n	44d56 <usb_dc_ep_read_wait+0x56>
   44d88:	20006e2c 	.word	0x20006e2c
   44d8c:	20006e64 	.word	0x20006e64

00044d90 <usb_dc_ep_read_continue>:
{
   44d90:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   44d92:	4d1e      	ldr	r5, [pc, #120]	; (44e0c <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   44d94:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   44d98:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   44d9a:	b382      	cbz	r2, 44dfe <usb_dc_ep_read_continue+0x6e>
   44d9c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   44da0:	b36a      	cbz	r2, 44dfe <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   44da2:	061b      	lsls	r3, r3, #24
   44da4:	d42e      	bmi.n	44e04 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   44da6:	f7ff fab5 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44daa:	4604      	mov	r4, r0
   44dac:	b350      	cbz	r0, 44e04 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   44dae:	7a03      	ldrb	r3, [r0, #8]
   44db0:	b343      	cbz	r3, 44e04 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44dba:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44dbe:	f00b fd29 	bl	50814 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   44dc2:	68e3      	ldr	r3, [r4, #12]
   44dc4:	b9b3      	cbnz	r3, 44df4 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   44dc6:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44dc8:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   44dca:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44dcc:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   44dce:	7f63      	ldrb	r3, [r4, #29]
   44dd0:	b183      	cbz	r3, 44df4 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   44dd2:	f7ff fb0f 	bl	443f4 <usbd_evt_alloc>
			if (!ev) {
   44dd6:	b930      	cbnz	r0, 44de6 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   44dd8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44ddc:	f00b fd1c 	bl	50818 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   44de0:	f06f 000b 	mvn.w	r0, #11
}
   44de4:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   44de6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   44de8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44dea:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   44dec:	f7ff faba 	bl	44364 <usbd_evt_put>
			usbd_work_schedule();
   44df0:	f7ff fabe 	bl	44370 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   44df4:	4806      	ldr	r0, [pc, #24]	; (44e10 <usb_dc_ep_read_continue+0x80>)
   44df6:	f00b fd0f 	bl	50818 <k_mutex_unlock.isra.0>
	return 0;
   44dfa:	2000      	movs	r0, #0
   44dfc:	e7f2      	b.n	44de4 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   44dfe:	f06f 0012 	mvn.w	r0, #18
   44e02:	e7ef      	b.n	44de4 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   44e04:	f06f 0015 	mvn.w	r0, #21
   44e08:	e7ec      	b.n	44de4 <usb_dc_ep_read_continue+0x54>
   44e0a:	bf00      	nop
   44e0c:	20006e2c 	.word	0x20006e2c
   44e10:	20006e64 	.word	0x20006e64

00044e14 <usb_dc_ep_set_callback>:
{
   44e14:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   44e16:	4b08      	ldr	r3, [pc, #32]	; (44e38 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   44e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44e1c:	b12b      	cbz	r3, 44e2a <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   44e1e:	f7ff fa79 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44e22:	b128      	cbz	r0, 44e30 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   44e24:	6001      	str	r1, [r0, #0]
	return 0;
   44e26:	2000      	movs	r0, #0
}
   44e28:	bd08      	pop	{r3, pc}
		return -ENODEV;
   44e2a:	f06f 0012 	mvn.w	r0, #18
   44e2e:	e7fb      	b.n	44e28 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   44e30:	f06f 0015 	mvn.w	r0, #21
   44e34:	e7f8      	b.n	44e28 <usb_dc_ep_set_callback+0x14>
   44e36:	bf00      	nop
   44e38:	20006e2c 	.word	0x20006e2c

00044e3c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   44e3c:	4b01      	ldr	r3, [pc, #4]	; (44e44 <usb_dc_set_status_callback+0x8>)
   44e3e:	6018      	str	r0, [r3, #0]
}
   44e40:	4770      	bx	lr
   44e42:	bf00      	nop
   44e44:	20006e2c 	.word	0x20006e2c

00044e48 <usb_dc_ep_mps>:
{
   44e48:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   44e4a:	4b07      	ldr	r3, [pc, #28]	; (44e68 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   44e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44e50:	b123      	cbz	r3, 44e5c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   44e52:	f7ff fa5f 	bl	44314 <endpoint_ctx>
	if (!ep_ctx) {
   44e56:	b120      	cbz	r0, 44e62 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   44e58:	6840      	ldr	r0, [r0, #4]
}
   44e5a:	bd08      	pop	{r3, pc}
		return -ENODEV;
   44e5c:	f06f 0012 	mvn.w	r0, #18
   44e60:	e7fb      	b.n	44e5a <usb_dc_ep_mps+0x12>
		return -EINVAL;
   44e62:	f06f 0015 	mvn.w	r0, #21
   44e66:	e7f8      	b.n	44e5a <usb_dc_ep_mps+0x12>
   44e68:	20006e2c 	.word	0x20006e2c

00044e6c <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   44e6c:	2811      	cmp	r0, #17
   44e6e:	d80e      	bhi.n	44e8e <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   44e70:	4a08      	ldr	r2, [pc, #32]	; (44e94 <adc_gain_invert+0x28>)
   44e72:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   44e76:	b153      	cbz	r3, 44e8e <adc_gain_invert+0x22>
   44e78:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   44e7c:	7842      	ldrb	r2, [r0, #1]
   44e7e:	b132      	cbz	r2, 44e8e <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   44e80:	6808      	ldr	r0, [r1, #0]
   44e82:	4343      	muls	r3, r0
			rv = 0;
   44e84:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   44e86:	fb93 f3f2 	sdiv	r3, r3, r2
   44e8a:	600b      	str	r3, [r1, #0]
			rv = 0;
   44e8c:	4770      	bx	lr
	int rv = -EINVAL;
   44e8e:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   44e92:	4770      	bx	lr
   44e94:	00056b2e 	.word	0x00056b2e

00044e98 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   44e98:	7908      	ldrb	r0, [r1, #4]
{
   44e9a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   44e9c:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   44ea0:	2c07      	cmp	r4, #7
   44ea2:	d81f      	bhi.n	44ee4 <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   44ea4:	780b      	ldrb	r3, [r1, #0]
   44ea6:	2b09      	cmp	r3, #9
   44ea8:	d81c      	bhi.n	44ee4 <adc_nrfx_channel_setup+0x4c>
   44eaa:	e8df f003 	tbb	[pc, r3]
   44eae:	0606      	.short	0x0606
   44eb0:	1b060606 	.word	0x1b060606
   44eb4:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   44eb8:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   44eba:	784a      	ldrb	r2, [r1, #1]
   44ebc:	2a03      	cmp	r2, #3
   44ebe:	d018      	beq.n	44ef2 <adc_nrfx_channel_setup+0x5a>
   44ec0:	2a04      	cmp	r2, #4
   44ec2:	d10f      	bne.n	44ee4 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   44ec4:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   44ec6:	884a      	ldrh	r2, [r1, #2]
   44ec8:	f244 060a 	movw	r6, #16394	; 0x400a
   44ecc:	42b2      	cmp	r2, r6
   44ece:	d044      	beq.n	44f5a <adc_nrfx_channel_setup+0xc2>
   44ed0:	d811      	bhi.n	44ef6 <adc_nrfx_channel_setup+0x5e>
   44ed2:	f244 0603 	movw	r6, #16387	; 0x4003
   44ed6:	42b2      	cmp	r2, r6
   44ed8:	d03b      	beq.n	44f52 <adc_nrfx_channel_setup+0xba>
   44eda:	f244 0605 	movw	r6, #16389	; 0x4005
   44ede:	42b2      	cmp	r2, r6
   44ee0:	d039      	beq.n	44f56 <adc_nrfx_channel_setup+0xbe>
   44ee2:	b3d2      	cbz	r2, 44f5a <adc_nrfx_channel_setup+0xc2>
   44ee4:	f06f 0015 	mvn.w	r0, #21
   44ee8:	e032      	b.n	44f50 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   44eea:	2306      	movs	r3, #6
		break;
   44eec:	e7e5      	b.n	44eba <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   44eee:	2307      	movs	r3, #7
		break;
   44ef0:	e7e3      	b.n	44eba <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   44ef2:	2501      	movs	r5, #1
   44ef4:	e7e7      	b.n	44ec6 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   44ef6:	f244 0614 	movw	r6, #16404	; 0x4014
   44efa:	42b2      	cmp	r2, r6
   44efc:	d02f      	beq.n	44f5e <adc_nrfx_channel_setup+0xc6>
   44efe:	f244 0628 	movw	r6, #16424	; 0x4028
   44f02:	42b2      	cmp	r2, r6
   44f04:	d02d      	beq.n	44f62 <adc_nrfx_channel_setup+0xca>
   44f06:	f244 060f 	movw	r6, #16399	; 0x400f
   44f0a:	42b2      	cmp	r2, r6
   44f0c:	d1ea      	bne.n	44ee4 <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   44f0e:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   44f10:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   44f14:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   44f16:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   44f1a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   44f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   44f22:	0122      	lsls	r2, r4, #4
   44f24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   44f28:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   44f2c:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   44f2e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   44f32:	0123      	lsls	r3, r4, #4
   44f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   44f38:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   44f3c:	798a      	ldrb	r2, [r1, #6]
   44f3e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   44f42:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   44f46:	4b08      	ldr	r3, [pc, #32]	; (44f68 <adc_nrfx_channel_setup+0xd0>)
   44f48:	441c      	add	r4, r3
   44f4a:	794b      	ldrb	r3, [r1, #5]
   44f4c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0

	return 0;
}
   44f50:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   44f52:	2200      	movs	r2, #0
   44f54:	e7dc      	b.n	44f10 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   44f56:	2201      	movs	r2, #1
   44f58:	e7da      	b.n	44f10 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   44f5a:	2202      	movs	r2, #2
   44f5c:	e7d8      	b.n	44f10 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   44f5e:	2204      	movs	r2, #4
   44f60:	e7d6      	b.n	44f10 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   44f62:	2205      	movs	r2, #5
   44f64:	e7d4      	b.n	44f10 <adc_nrfx_channel_setup+0x78>
   44f66:	bf00      	nop
   44f68:	200001a8 	.word	0x200001a8

00044f6c <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   44f6c:	4b04      	ldr	r3, [pc, #16]	; (44f80 <adc_context_start_sampling.isra.0+0x14>)
   44f6e:	2201      	movs	r2, #1
   44f70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   44f74:	b108      	cbz	r0, 44f7a <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44f76:	60da      	str	r2, [r3, #12]
}
   44f78:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44f7a:	601a      	str	r2, [r3, #0]
   44f7c:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   44f7e:	4770      	bx	lr
   44f80:	40007000 	.word	0x40007000

00044f84 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   44f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   44f86:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   44f88:	485e      	ldr	r0, [pc, #376]	; (45104 <adc_nrfx_read+0x180>)
   44f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44f92:	f003 fcb3 	bl	488fc <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   44f96:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   44f98:	b910      	cbnz	r0, 44fa0 <adc_nrfx_read+0x1c>
	switch (sequence->resolution) {
   44f9a:	f06f 0415 	mvn.w	r4, #21
   44f9e:	e099      	b.n	450d4 <adc_nrfx_read+0x150>
	if (!selected_channels ||
   44fa0:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   44fa4:	d1f9      	bne.n	44f9a <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   44fa6:	4c58      	ldr	r4, [pc, #352]	; (45108 <adc_nrfx_read+0x184>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   44fa8:	4f58      	ldr	r7, [pc, #352]	; (4510c <adc_nrfx_read+0x188>)
	active_channels = 0U;
   44faa:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   44fac:	fa20 f103 	lsr.w	r1, r0, r3
   44fb0:	f011 0101 	ands.w	r1, r1, #1
   44fb4:	d032      	beq.n	4501c <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   44fb6:	18f9      	adds	r1, r7, r3
   44fb8:	f891 c0a0 	ldrb.w	ip, [r1, #160]	; 0xa0
   44fbc:	f1bc 0f00 	cmp.w	ip, #0
   44fc0:	d0eb      	beq.n	44f9a <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   44fc2:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   44fc6:	7c6e      	ldrb	r6, [r5, #17]
   44fc8:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   44fcc:	3e00      	subs	r6, #0
   44fce:	bf18      	it	ne
   44fd0:	2601      	movne	r6, #1
   44fd2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   44fd6:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   44fda:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   44fde:	f103 0151 	add.w	r1, r3, #81	; 0x51
   44fe2:	0109      	lsls	r1, r1, #4
			++active_channels;
   44fe4:	3201      	adds	r2, #1
   44fe6:	f844 c001 	str.w	ip, [r4, r1]
   44fea:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   44fec:	3301      	adds	r3, #1
   44fee:	2b08      	cmp	r3, #8
   44ff0:	d1dc      	bne.n	44fac <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   44ff2:	7c2b      	ldrb	r3, [r5, #16]
   44ff4:	3b08      	subs	r3, #8
   44ff6:	2b06      	cmp	r3, #6
   44ff8:	d8cf      	bhi.n	44f9a <adc_nrfx_read+0x16>
   44ffa:	a101      	add	r1, pc, #4	; (adr r1, 45000 <adc_nrfx_read+0x7c>)
   44ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   45000:	000450e9 	.word	0x000450e9
   45004:	00044f9b 	.word	0x00044f9b
   45008:	00045027 	.word	0x00045027
   4500c:	00044f9b 	.word	0x00044f9b
   45010:	000450e1 	.word	0x000450e1
   45014:	00044f9b 	.word	0x00044f9b
   45018:	000450e5 	.word	0x000450e5
   4501c:	f103 0651 	add.w	r6, r3, #81	; 0x51
   45020:	0136      	lsls	r6, r6, #4
   45022:	51a1      	str	r1, [r4, r6]
}
   45024:	e7e2      	b.n	44fec <adc_nrfx_read+0x68>
   45026:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   45028:	4937      	ldr	r1, [pc, #220]	; (45108 <adc_nrfx_read+0x184>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   4502a:	2a01      	cmp	r2, #1
   4502c:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   45030:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   45032:	d95b      	bls.n	450ec <adc_nrfx_read+0x168>
   45034:	2b00      	cmp	r3, #0
   45036:	d1b0      	bne.n	44f9a <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   45038:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   4503c:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   4503e:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   45040:	b111      	cbz	r1, 45048 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   45042:	8989      	ldrh	r1, [r1, #12]
   45044:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   45048:	68e9      	ldr	r1, [r5, #12]
   4504a:	4299      	cmp	r1, r3
   4504c:	d356      	bcc.n	450fc <adc_nrfx_read+0x178>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   4504e:	4b2e      	ldr	r3, [pc, #184]	; (45108 <adc_nrfx_read+0x184>)
   45050:	68a9      	ldr	r1, [r5, #8]
   45052:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   45056:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   45058:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   4505c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   4505e:	4c2b      	ldr	r4, [pc, #172]	; (4510c <adc_nrfx_read+0x188>)
   45060:	f104 0674 	add.w	r6, r4, #116	; 0x74
   45064:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   45066:	683b      	ldr	r3, [r7, #0]
   45068:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   4506a:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   4506c:	2600      	movs	r6, #0
   4506e:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   45070:	4627      	mov	r7, r4
   45072:	2b00      	cmp	r3, #0
   45074:	d03d      	beq.n	450f2 <adc_nrfx_read+0x16e>
		ctx->options = *sequence->options;
   45076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   45078:	f104 0588 	add.w	r5, r4, #136	; 0x88
   4507c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   45080:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   45082:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   45086:	b3a0      	cbz	r0, 450f2 <adc_nrfx_read+0x16e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   45088:	f3bf 8f5b 	dmb	ish
   4508c:	e857 3f00 	ldrex	r3, [r7]
   45090:	e847 6200 	strex	r2, r6, [r7]
   45094:	2a00      	cmp	r2, #0
   45096:	d1f9      	bne.n	4508c <adc_nrfx_read+0x108>
   45098:	f3bf 8f5b 	dmb	ish
   4509c:	481c      	ldr	r0, [pc, #112]	; (45110 <adc_nrfx_read+0x18c>)
   4509e:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
   450a2:	4a1c      	ldr	r2, [pc, #112]	; (45114 <adc_nrfx_read+0x190>)
   450a4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   450a8:	4631      	mov	r1, r6
   450aa:	2300      	movs	r3, #0
   450ac:	fbe7 0105 	umlal	r0, r1, r7, r5
   450b0:	f7e1 f826 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   450b4:	2200      	movs	r2, #0
   450b6:	e9cd 0100 	strd	r0, r1, [sp]
   450ba:	2300      	movs	r3, #0
   450bc:	f104 0008 	add.w	r0, r4, #8
   450c0:	f004 fb06 	bl	496d0 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   450c4:	4814      	ldr	r0, [pc, #80]	; (45118 <adc_nrfx_read+0x194>)
   450c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   450ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   450ce:	f003 fc15 	bl	488fc <z_impl_k_sem_take>
	return ctx->status;
   450d2:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   450d4:	480b      	ldr	r0, [pc, #44]	; (45104 <adc_nrfx_read+0x180>)
   450d6:	f003 fbeb 	bl	488b0 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   450da:	4620      	mov	r0, r4
   450dc:	b003      	add	sp, #12
   450de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   450e0:	2302      	movs	r3, #2
		break;
   450e2:	e7a1      	b.n	45028 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   450e4:	2303      	movs	r3, #3
		break;
   450e6:	e79f      	b.n	45028 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   450e8:	2300      	movs	r3, #0
   450ea:	e79d      	b.n	45028 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   450ec:	2b08      	cmp	r3, #8
   450ee:	d9a3      	bls.n	45038 <adc_nrfx_read+0xb4>
   450f0:	e753      	b.n	44f9a <adc_nrfx_read+0x16>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   450f2:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   450f6:	f7ff ff39 	bl	44f6c <adc_context_start_sampling.isra.0>
   450fa:	e7e3      	b.n	450c4 <adc_nrfx_read+0x140>
		return -ENOMEM;
   450fc:	f06f 040b 	mvn.w	r4, #11
   45100:	e7e8      	b.n	450d4 <adc_nrfx_read+0x150>
   45102:	bf00      	nop
   45104:	200001e8 	.word	0x200001e8
   45108:	40007000 	.word	0x40007000
   4510c:	200001a8 	.word	0x200001a8
   45110:	000f423f 	.word	0x000f423f
   45114:	000f4240 	.word	0x000f4240
   45118:	20000200 	.word	0x20000200

0004511c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4511c:	4b0e      	ldr	r3, [pc, #56]	; (45158 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   4511e:	b510      	push	{r4, lr}
   45120:	2400      	movs	r4, #0
   45122:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   45126:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   4512a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   4512e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   45132:	2212      	movs	r2, #18
   45134:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   45138:	2007      	movs	r0, #7
   4513a:	f7e8 f8c3 	bl	2d2c4 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   4513e:	4622      	mov	r2, r4
   45140:	2101      	movs	r1, #1
   45142:	2007      	movs	r0, #7
   45144:	f7e8 f8f0 	bl	2d328 <z_arm_irq_priority_set>
	return sem->count;
   45148:	4804      	ldr	r0, [pc, #16]	; (4515c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   4514a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   4514c:	b913      	cbnz	r3, 45154 <init_saadc+0x38>
   4514e:	3040      	adds	r0, #64	; 0x40
   45150:	f003 fbae 	bl	488b0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   45154:	2000      	movs	r0, #0
   45156:	bd10      	pop	{r4, pc}
   45158:	40007000 	.word	0x40007000
   4515c:	200001a8 	.word	0x200001a8

00045160 <saadc_irq_handler>:
{
   45160:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45162:	4b30      	ldr	r3, [pc, #192]	; (45224 <saadc_irq_handler+0xc4>)
   45164:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   45168:	2a00      	cmp	r2, #0
   4516a:	d04d      	beq.n	45208 <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4516c:	2200      	movs	r2, #0
   4516e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   45172:	4c2d      	ldr	r4, [pc, #180]	; (45228 <saadc_irq_handler+0xc8>)
   45174:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45178:	2101      	movs	r1, #1
   4517a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   4517c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   45180:	6f63      	ldr	r3, [r4, #116]	; 0x74
   45182:	4625      	mov	r5, r4
   45184:	b3db      	cbz	r3, 451fe <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   45186:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   4518a:	b143      	cbz	r3, 4519e <saadc_irq_handler+0x3e>
			action = callback(dev,
   4518c:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   45190:	f104 0174 	add.w	r1, r4, #116	; 0x74
   45194:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   45196:	2801      	cmp	r0, #1
   45198:	d014      	beq.n	451c4 <saadc_irq_handler+0x64>
   4519a:	2802      	cmp	r0, #2
   4519c:	d029      	beq.n	451f2 <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   4519e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   451a2:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   451a6:	429a      	cmp	r2, r3
   451a8:	d923      	bls.n	451f2 <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   451aa:	3301      	adds	r3, #1
   451ac:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   451b0:	4b1c      	ldr	r3, [pc, #112]	; (45224 <saadc_irq_handler+0xc4>)
   451b2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   451b6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   451ba:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   451bc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   451c0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   451c4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   451c8:	b92b      	cbnz	r3, 451d6 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   451ca:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   451ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   451d2:	f7ff becb 	b.w	44f6c <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   451d6:	f3bf 8f5b 	dmb	ish
   451da:	e855 3f00 	ldrex	r3, [r5]
   451de:	1e5a      	subs	r2, r3, #1
   451e0:	e845 2100 	strex	r1, r2, [r5]
   451e4:	2900      	cmp	r1, #0
   451e6:	d1f8      	bne.n	451da <saadc_irq_handler+0x7a>
   451e8:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   451ec:	2b01      	cmp	r3, #1
   451ee:	dcec      	bgt.n	451ca <saadc_irq_handler+0x6a>
   451f0:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   451f2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   451f6:	b113      	cbz	r3, 451fe <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   451f8:	480c      	ldr	r0, [pc, #48]	; (4522c <saadc_irq_handler+0xcc>)
   451fa:	f00c fd98 	bl	51d2e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   451fe:	480c      	ldr	r0, [pc, #48]	; (45230 <saadc_irq_handler+0xd0>)
   45200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   45204:	f003 bb54 	b.w	488b0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45208:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   4520c:	2900      	cmp	r1, #0
   4520e:	d0ef      	beq.n	451f0 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45210:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   45214:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45218:	2201      	movs	r2, #1
   4521a:	609a      	str	r2, [r3, #8]
   4521c:	601a      	str	r2, [r3, #0]
   4521e:	605a      	str	r2, [r3, #4]
}
   45220:	e7e6      	b.n	451f0 <saadc_irq_handler+0x90>
   45222:	bf00      	nop
   45224:	40007000 	.word	0x40007000
   45228:	200001a8 	.word	0x200001a8
   4522c:	200001b0 	.word	0x200001b0
   45230:	20000200 	.word	0x20000200

00045234 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   45234:	4b08      	ldr	r3, [pc, #32]	; (45258 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   45236:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   45238:	1ac3      	subs	r3, r0, r3
{
   4523a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   4523c:	4907      	ldr	r1, [pc, #28]	; (4525c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   4523e:	109b      	asrs	r3, r3, #2
{
   45240:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   45242:	4359      	muls	r1, r3
   45244:	4806      	ldr	r0, [pc, #24]	; (45260 <onoff_stop+0x2c>)
   45246:	2240      	movs	r2, #64	; 0x40
   45248:	f00b fb4b 	bl	508e2 <stop>
	notify(mgr, res);
   4524c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   4524e:	4601      	mov	r1, r0
	notify(mgr, res);
   45250:	4620      	mov	r0, r4
}
   45252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   45256:	4718      	bx	r3
   45258:	200070cc 	.word	0x200070cc
   4525c:	b6db6db7 	.word	0xb6db6db7
   45260:	00052244 	.word	0x00052244

00045264 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   45264:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   45266:	4c0c      	ldr	r4, [pc, #48]	; (45298 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   45268:	4a0c      	ldr	r2, [pc, #48]	; (4529c <onoff_start+0x38>)
   4526a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   4526c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4526e:	9300      	str	r3, [sp, #0]
{
   45270:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   45272:	460b      	mov	r3, r1
   45274:	490a      	ldr	r1, [pc, #40]	; (452a0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   45276:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   45278:	4361      	muls	r1, r4
{
   4527a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4527c:	4809      	ldr	r0, [pc, #36]	; (452a4 <onoff_start+0x40>)
   4527e:	f00b fb5c 	bl	5093a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   45282:	1e01      	subs	r1, r0, #0
   45284:	da05      	bge.n	45292 <onoff_start+0x2e>
		notify(mgr, err);
   45286:	4630      	mov	r0, r6
   45288:	462b      	mov	r3, r5
	}
}
   4528a:	b002      	add	sp, #8
   4528c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   45290:	4718      	bx	r3
}
   45292:	b002      	add	sp, #8
   45294:	bd70      	pop	{r4, r5, r6, pc}
   45296:	bf00      	nop
   45298:	200070cc 	.word	0x200070cc
   4529c:	000509ab 	.word	0x000509ab
   452a0:	b6db6db7 	.word	0xb6db6db7
   452a4:	00052244 	.word	0x00052244

000452a8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   452a8:	2200      	movs	r2, #0
{
   452aa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   452ac:	2101      	movs	r1, #1
{
   452ae:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   452b0:	4610      	mov	r0, r2
   452b2:	f7e8 f839 	bl	2d328 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   452b6:	2000      	movs	r0, #0
   452b8:	f7e8 f804 	bl	2d2c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   452bc:	480f      	ldr	r0, [pc, #60]	; (452fc <clk_init+0x54>)
   452be:	f001 f997 	bl	465f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   452c2:	4b0f      	ldr	r3, [pc, #60]	; (45300 <clk_init+0x58>)
   452c4:	4298      	cmp	r0, r3
   452c6:	d115      	bne.n	452f4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   452c8:	f001 f9a2 	bl	46610 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   452cc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   452ce:	490d      	ldr	r1, [pc, #52]	; (45304 <clk_init+0x5c>)
   452d0:	4630      	mov	r0, r6
   452d2:	f005 f96b 	bl	4a5ac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   452d6:	2800      	cmp	r0, #0
   452d8:	db0b      	blt.n	452f2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   452da:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   452dc:	4909      	ldr	r1, [pc, #36]	; (45304 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   452de:	2501      	movs	r5, #1
   452e0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   452e2:	f104 001c 	add.w	r0, r4, #28
   452e6:	f005 f961 	bl	4a5ac <onoff_manager_init>
		if (err < 0) {
   452ea:	2800      	cmp	r0, #0
   452ec:	db01      	blt.n	452f2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   452ee:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   452f0:	2000      	movs	r0, #0
}
   452f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   452f4:	f06f 0004 	mvn.w	r0, #4
   452f8:	e7fb      	b.n	452f2 <clk_init+0x4a>
   452fa:	bf00      	nop
   452fc:	0004533d 	.word	0x0004533d
   45300:	0bad0000 	.word	0x0bad0000
   45304:	00056040 	.word	0x00056040

00045308 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   45308:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   4530a:	230c      	movs	r3, #12
   4530c:	4809      	ldr	r0, [pc, #36]	; (45334 <clkstarted_handle.constprop.0+0x2c>)
   4530e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   45310:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   45312:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   45314:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   45318:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   4531a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   4531c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   4531e:	4418      	add	r0, r3
   45320:	f00b facc 	bl	508bc <set_on_state>
	if (callback) {
   45324:	b12d      	cbz	r5, 45332 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   45326:	4632      	mov	r2, r6
   45328:	462b      	mov	r3, r5
   4532a:	4803      	ldr	r0, [pc, #12]	; (45338 <clkstarted_handle.constprop.0+0x30>)
}
   4532c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   45330:	4718      	bx	r3
}
   45332:	bd70      	pop	{r4, r5, r6, pc}
   45334:	200070cc 	.word	0x200070cc
   45338:	00052244 	.word	0x00052244

0004533c <clock_event_handler>:
	switch (event) {
   4533c:	b110      	cbz	r0, 45344 <clock_event_handler+0x8>
   4533e:	2801      	cmp	r0, #1
   45340:	d004      	beq.n	4534c <clock_event_handler+0x10>
   45342:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   45344:	4b03      	ldr	r3, [pc, #12]	; (45354 <clock_event_handler+0x18>)
   45346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   45348:	075b      	lsls	r3, r3, #29
   4534a:	d101      	bne.n	45350 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   4534c:	f7ff bfdc 	b.w	45308 <clkstarted_handle.constprop.0>
}
   45350:	4770      	bx	lr
   45352:	bf00      	nop
   45354:	200070cc 	.word	0x200070cc

00045358 <generic_hfclk_start>:
{
   45358:	b508      	push	{r3, lr}
	__asm__ volatile(
   4535a:	f04f 0320 	mov.w	r3, #32
   4535e:	f3ef 8111 	mrs	r1, BASEPRI
   45362:	f383 8812 	msr	BASEPRI_MAX, r3
   45366:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   4536a:	4a12      	ldr	r2, [pc, #72]	; (453b4 <generic_hfclk_start+0x5c>)
   4536c:	6813      	ldr	r3, [r2, #0]
   4536e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   45372:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   45376:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   45378:	d00c      	beq.n	45394 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4537a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   4537e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45382:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   45386:	f013 0301 	ands.w	r3, r3, #1
   4538a:	d003      	beq.n	45394 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   4538c:	480a      	ldr	r0, [pc, #40]	; (453b8 <generic_hfclk_start+0x60>)
   4538e:	f00b fa95 	bl	508bc <set_on_state>
			already_started = true;
   45392:	2301      	movs	r3, #1
	__asm__ volatile(
   45394:	f381 8811 	msr	BASEPRI, r1
   45398:	f3bf 8f6f 	isb	sy
	if (already_started) {
   4539c:	b123      	cbz	r3, 453a8 <generic_hfclk_start+0x50>
}
   4539e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   453a2:	2000      	movs	r0, #0
   453a4:	f7ff bfb0 	b.w	45308 <clkstarted_handle.constprop.0>
}
   453a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   453ac:	2001      	movs	r0, #1
   453ae:	f00b bc35 	b.w	50c1c <nrfx_clock_start>
   453b2:	bf00      	nop
   453b4:	2000711c 	.word	0x2000711c
   453b8:	2000710c 	.word	0x2000710c

000453bc <api_blocking_start>:
{
   453bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   453be:	2200      	movs	r2, #0
   453c0:	2301      	movs	r3, #1
   453c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   453c6:	ab04      	add	r3, sp, #16
   453c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   453cc:	4a09      	ldr	r2, [pc, #36]	; (453f4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   453ce:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   453d2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   453d4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   453d8:	f00b fae0 	bl	5099c <api_start>
	if (err < 0) {
   453dc:	2800      	cmp	r0, #0
   453de:	db05      	blt.n	453ec <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   453e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   453e4:	2300      	movs	r3, #0
   453e6:	4668      	mov	r0, sp
   453e8:	f003 fa88 	bl	488fc <z_impl_k_sem_take>
}
   453ec:	b007      	add	sp, #28
   453ee:	f85d fb04 	ldr.w	pc, [sp], #4
   453f2:	bf00      	nop
   453f4:	000509c9 	.word	0x000509c9

000453f8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   453f8:	4b09      	ldr	r3, [pc, #36]	; (45420 <generic_hfclk_stop+0x28>)
   453fa:	f3bf 8f5b 	dmb	ish
   453fe:	e853 2f00 	ldrex	r2, [r3]
   45402:	f022 0102 	bic.w	r1, r2, #2
   45406:	e843 1000 	strex	r0, r1, [r3]
   4540a:	2800      	cmp	r0, #0
   4540c:	d1f7      	bne.n	453fe <generic_hfclk_stop+0x6>
   4540e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   45412:	07d3      	lsls	r3, r2, #31
   45414:	d402      	bmi.n	4541c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   45416:	2001      	movs	r0, #1
   45418:	f001 b908 	b.w	4662c <nrfx_clock_stop>
}
   4541c:	4770      	bx	lr
   4541e:	bf00      	nop
   45420:	2000711c 	.word	0x2000711c

00045424 <z_nrf_clock_control_get_onoff>:
}
   45424:	4a02      	ldr	r2, [pc, #8]	; (45430 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   45426:	b2c3      	uxtb	r3, r0
}
   45428:	201c      	movs	r0, #28
   4542a:	fb03 2000 	mla	r0, r3, r0, r2
   4542e:	4770      	bx	lr
   45430:	200070cc 	.word	0x200070cc

00045434 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45434:	4b09      	ldr	r3, [pc, #36]	; (4545c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   45436:	f3bf 8f5b 	dmb	ish
   4543a:	e853 2f00 	ldrex	r2, [r3]
   4543e:	f042 0101 	orr.w	r1, r2, #1
   45442:	e843 1000 	strex	r0, r1, [r3]
   45446:	2800      	cmp	r0, #0
   45448:	d1f7      	bne.n	4543a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   4544a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   4544e:	0793      	lsls	r3, r2, #30
   45450:	d402      	bmi.n	45458 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   45452:	2001      	movs	r0, #1
   45454:	f00b bbe2 	b.w	50c1c <nrfx_clock_start>
}
   45458:	4770      	bx	lr
   4545a:	bf00      	nop
   4545c:	2000711c 	.word	0x2000711c

00045460 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45460:	4b09      	ldr	r3, [pc, #36]	; (45488 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   45462:	f3bf 8f5b 	dmb	ish
   45466:	e853 2f00 	ldrex	r2, [r3]
   4546a:	f022 0101 	bic.w	r1, r2, #1
   4546e:	e843 1000 	strex	r0, r1, [r3]
   45472:	2800      	cmp	r0, #0
   45474:	d1f7      	bne.n	45466 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   45476:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   4547a:	0793      	lsls	r3, r2, #30
   4547c:	d402      	bmi.n	45484 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   4547e:	2001      	movs	r0, #1
   45480:	f001 b8d4 	b.w	4662c <nrfx_clock_stop>
}
   45484:	4770      	bx	lr
   45486:	bf00      	nop
   45488:	2000711c 	.word	0x2000711c

0004548c <z_nrf_clock_control_lf_on>:
{
   4548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   45490:	4939      	ldr	r1, [pc, #228]	; (45578 <z_nrf_clock_control_lf_on+0xec>)
   45492:	f3bf 8f5b 	dmb	ish
   45496:	4607      	mov	r7, r0
   45498:	2201      	movs	r2, #1
   4549a:	e851 3f00 	ldrex	r3, [r1]
   4549e:	e841 2000 	strex	r0, r2, [r1]
   454a2:	2800      	cmp	r0, #0
   454a4:	d1f9      	bne.n	4549a <z_nrf_clock_control_lf_on+0xe>
   454a6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   454aa:	b933      	cbnz	r3, 454ba <z_nrf_clock_control_lf_on+0x2e>
   454ac:	4933      	ldr	r1, [pc, #204]	; (4557c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   454ae:	4834      	ldr	r0, [pc, #208]	; (45580 <z_nrf_clock_control_lf_on+0xf4>)
   454b0:	604b      	str	r3, [r1, #4]
   454b2:	60cb      	str	r3, [r1, #12]
   454b4:	608a      	str	r2, [r1, #8]
   454b6:	f005 f88c 	bl	4a5d2 <onoff_request>
	switch (start_mode) {
   454ba:	1e7b      	subs	r3, r7, #1
   454bc:	2b01      	cmp	r3, #1
   454be:	d82f      	bhi.n	45520 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   454c0:	2f01      	cmp	r7, #1
   454c2:	d107      	bne.n	454d4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   454c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   454c8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   454cc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   454d0:	2b01      	cmp	r3, #1
   454d2:	d025      	beq.n	45520 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   454d4:	f00c f8b3 	bl	5163e <k_is_in_isr>
   454d8:	4604      	mov	r4, r0
   454da:	b918      	cbnz	r0, 454e4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   454dc:	4b29      	ldr	r3, [pc, #164]	; (45584 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   454de:	781b      	ldrb	r3, [r3, #0]
   454e0:	2b00      	cmp	r3, #0
   454e2:	d141      	bne.n	45568 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   454e4:	f04f 0320 	mov.w	r3, #32
   454e8:	f3ef 8611 	mrs	r6, BASEPRI
   454ec:	f383 8812 	msr	BASEPRI_MAX, r3
   454f0:	f3bf 8f6f 	isb	sy
   454f4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   454f6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 45588 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   454fa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   454fe:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   45502:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   45506:	03d2      	lsls	r2, r2, #15
   45508:	d50c      	bpl.n	45524 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   4550a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   4550e:	2b01      	cmp	r3, #1
   45510:	d001      	beq.n	45516 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   45512:	2f01      	cmp	r7, #1
   45514:	d106      	bne.n	45524 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   45516:	b30c      	cbz	r4, 4555c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   45518:	f386 8811 	msr	BASEPRI, r6
   4551c:	f3bf 8f6f 	isb	sy
}
   45520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   45524:	b1ac      	cbz	r4, 45552 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   45526:	4630      	mov	r0, r6
   45528:	f7e7 fec2 	bl	2d2b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   4552c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   45530:	2b00      	cmp	r3, #0
   45532:	d1e4      	bne.n	454fe <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45534:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   45538:	2a00      	cmp	r2, #0
   4553a:	d0e0      	beq.n	454fe <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4553c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   45540:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   45544:	2301      	movs	r3, #1
   45546:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   4554a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4554e:	60ab      	str	r3, [r5, #8]
}
   45550:	e7d5      	b.n	454fe <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   45552:	2100      	movs	r1, #0
   45554:	2021      	movs	r0, #33	; 0x21
   45556:	f003 fe8f 	bl	49278 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   4555a:	e7e7      	b.n	4552c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   4555c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45560:	2202      	movs	r2, #2
   45562:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   45566:	e7db      	b.n	45520 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   45568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4556c:	2202      	movs	r2, #2
   4556e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   45572:	4606      	mov	r6, r0
}
   45574:	e7bf      	b.n	454f6 <z_nrf_clock_control_lf_on+0x6a>
   45576:	bf00      	nop
   45578:	20007120 	.word	0x20007120
   4557c:	200070bc 	.word	0x200070bc
   45580:	200070e8 	.word	0x200070e8
   45584:	200077a1 	.word	0x200077a1
   45588:	e000e100 	.word	0xe000e100

0004558c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   4558c:	b530      	push	{r4, r5, lr}
	return port->config;
   4558e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   45590:	7b04      	ldrb	r4, [r0, #12]
   45592:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   45596:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   4559a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   4559e:	b085      	sub	sp, #20
   455a0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   455a4:	d104      	bne.n	455b0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   455a6:	4628      	mov	r0, r5
   455a8:	f001 faee 	bl	46b88 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   455ac:	2000      	movs	r0, #0
   455ae:	e032      	b.n	45616 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   455b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   455b4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   455b8:	d12f      	bne.n	4561a <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   455ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   455be:	bf0c      	ite	eq
   455c0:	2304      	moveq	r3, #4
   455c2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   455c4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   455c8:	6883      	ldr	r3, [r0, #8]
   455ca:	fa23 f101 	lsr.w	r1, r3, r1
   455ce:	07c9      	lsls	r1, r1, #31
   455d0:	d42f      	bmi.n	45632 <gpio_nrfx_pin_interrupt_configure+0xa6>
   455d2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   455d6:	d12c      	bne.n	45632 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   455d8:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   455da:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   455dc:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   455e0:	4a1c      	ldr	r2, [pc, #112]	; (45654 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   455e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   455e6:	bf18      	it	ne
   455e8:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   455ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   455f0:	07db      	lsls	r3, r3, #31
   455f2:	d41e      	bmi.n	45632 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   455f4:	f10d 0407 	add.w	r4, sp, #7
   455f8:	4621      	mov	r1, r4
   455fa:	4628      	mov	r0, r5
   455fc:	f001 fa28 	bl	46a50 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   45600:	4b15      	ldr	r3, [pc, #84]	; (45658 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   45602:	4298      	cmp	r0, r3
   45604:	d114      	bne.n	45630 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   45606:	4620      	mov	r0, r4
   45608:	f001 fa70 	bl	46aec <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   4560c:	4b13      	ldr	r3, [pc, #76]	; (4565c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   4560e:	4298      	cmp	r0, r3
   45610:	d00e      	beq.n	45630 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   45612:	f06f 000b 	mvn.w	r0, #11
}
   45616:	b005      	add	sp, #20
   45618:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   4561a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   4561e:	d005      	beq.n	4562c <gpio_nrfx_pin_interrupt_configure+0xa0>
   45620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   45624:	bf0c      	ite	eq
   45626:	2302      	moveq	r3, #2
   45628:	2301      	movne	r3, #1
   4562a:	e7cb      	b.n	455c4 <gpio_nrfx_pin_interrupt_configure+0x38>
   4562c:	2303      	movs	r3, #3
   4562e:	e7c9      	b.n	455c4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   45630:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   45632:	2300      	movs	r3, #0
   45634:	4619      	mov	r1, r3
   45636:	aa02      	add	r2, sp, #8
   45638:	4628      	mov	r0, r5
   4563a:	f001 f8e3 	bl	46804 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   4563e:	4b07      	ldr	r3, [pc, #28]	; (4565c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   45640:	4298      	cmp	r0, r3
   45642:	d104      	bne.n	4564e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   45644:	2101      	movs	r1, #1
   45646:	4628      	mov	r0, r5
   45648:	f001 fa56 	bl	46af8 <nrfx_gpiote_trigger_enable>
   4564c:	e7ae      	b.n	455ac <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   4564e:	f06f 0004 	mvn.w	r0, #4
   45652:	e7e0      	b.n	45616 <gpio_nrfx_pin_interrupt_configure+0x8a>
   45654:	50000300 	.word	0x50000300
   45658:	0bad0004 	.word	0x0bad0004
   4565c:	0bad0000 	.word	0x0bad0000

00045660 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   45660:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   45662:	f001 fa33 	bl	46acc <nrfx_gpiote_is_init>
   45666:	4604      	mov	r4, r0
   45668:	b968      	cbnz	r0, 45686 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   4566a:	f001 fa07 	bl	46a7c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   4566e:	4b08      	ldr	r3, [pc, #32]	; (45690 <gpio_nrfx_init+0x30>)
   45670:	4298      	cmp	r0, r3
   45672:	d10a      	bne.n	4568a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   45674:	4807      	ldr	r0, [pc, #28]	; (45694 <gpio_nrfx_init+0x34>)
   45676:	4621      	mov	r1, r4
   45678:	f001 f9e4 	bl	46a44 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   4567c:	4622      	mov	r2, r4
   4567e:	2105      	movs	r1, #5
   45680:	2006      	movs	r0, #6
   45682:	f7e7 fe51 	bl	2d328 <z_arm_irq_priority_set>
		return 0;
   45686:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   45688:	bd10      	pop	{r4, pc}
		return -EIO;
   4568a:	f06f 0004 	mvn.w	r0, #4
   4568e:	e7fb      	b.n	45688 <gpio_nrfx_init+0x28>
   45690:	0bad0000 	.word	0x0bad0000
   45694:	00045699 	.word	0x00045699

00045698 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   45698:	0942      	lsrs	r2, r0, #5
{
   4569a:	b570      	push	{r4, r5, r6, lr}
   4569c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   4569e:	d002      	beq.n	456a6 <nrfx_gpio_handler+0xe>
   456a0:	2a01      	cmp	r2, #1
   456a2:	d015      	beq.n	456d0 <nrfx_gpio_handler+0x38>
}
   456a4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   456a6:	4e0b      	ldr	r6, [pc, #44]	; (456d4 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   456a8:	6932      	ldr	r2, [r6, #16]
   456aa:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   456ac:	2900      	cmp	r1, #0
   456ae:	d0f9      	beq.n	456a4 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   456b0:	f003 031f 	and.w	r3, r3, #31
   456b4:	2501      	movs	r5, #1
	return node->next;
   456b6:	680c      	ldr	r4, [r1, #0]
   456b8:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   456ba:	688a      	ldr	r2, [r1, #8]
   456bc:	402a      	ands	r2, r5
   456be:	d002      	beq.n	456c6 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   456c0:	684b      	ldr	r3, [r1, #4]
   456c2:	4630      	mov	r0, r6
   456c4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   456c6:	2c00      	cmp	r4, #0
   456c8:	d0ec      	beq.n	456a4 <nrfx_gpio_handler+0xc>
   456ca:	4621      	mov	r1, r4
   456cc:	6824      	ldr	r4, [r4, #0]
   456ce:	e7f4      	b.n	456ba <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   456d0:	4e01      	ldr	r6, [pc, #4]	; (456d8 <nrfx_gpio_handler+0x40>)
   456d2:	e7e9      	b.n	456a8 <nrfx_gpio_handler+0x10>
   456d4:	0005225c 	.word	0x0005225c
   456d8:	00052274 	.word	0x00052274

000456dc <gpio_nrfx_pin_configure>:
{
   456dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   456e0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   456e2:	7b3b      	ldrb	r3, [r7, #12]
   456e4:	f001 051f 	and.w	r5, r1, #31
{
   456e8:	b085      	sub	sp, #20
   456ea:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   456ec:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   456f0:	4614      	mov	r4, r2
   456f2:	b9ca      	cbnz	r2, 45728 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   456f4:	a902      	add	r1, sp, #8
   456f6:	4628      	mov	r0, r5
   456f8:	f001 f9aa 	bl	46a50 <nrfx_gpiote_channel_get>
   456fc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   456fe:	4628      	mov	r0, r5
   45700:	f001 fa6a 	bl	46bd8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   45704:	4b48      	ldr	r3, [pc, #288]	; (45828 <gpio_nrfx_pin_configure+0x14c>)
   45706:	4298      	cmp	r0, r3
   45708:	d004      	beq.n	45714 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   4570a:	f06f 0004 	mvn.w	r0, #4
}
   4570e:	b005      	add	sp, #20
   45710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   45714:	4284      	cmp	r4, r0
   45716:	d105      	bne.n	45724 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   45718:	f89d 0008 	ldrb.w	r0, [sp, #8]
   4571c:	f001 f9e0 	bl	46ae0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   45720:	42a0      	cmp	r0, r4
   45722:	d1f2      	bne.n	4570a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   45724:	2000      	movs	r0, #0
   45726:	e7f2      	b.n	4570e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   45728:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   4572c:	f10d 0103 	add.w	r1, sp, #3
   45730:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   45732:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   45736:	f001 f98b 	bl	46a50 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   4573a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   4573c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   4573e:	aa02      	add	r2, sp, #8
   45740:	4649      	mov	r1, r9
   45742:	4628      	mov	r0, r5
   45744:	f001 f85e 	bl	46804 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   45748:	4b37      	ldr	r3, [pc, #220]	; (45828 <gpio_nrfx_pin_configure+0x14c>)
   4574a:	4298      	cmp	r0, r3
   4574c:	d002      	beq.n	45754 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   4574e:	f06f 0015 	mvn.w	r0, #21
   45752:	e7dc      	b.n	4570e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   45754:	4580      	cmp	r8, r0
   45756:	d103      	bne.n	45760 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   45758:	f89d 0003 	ldrb.w	r0, [sp, #3]
   4575c:	f001 f9c0 	bl	46ae0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   45760:	05a3      	lsls	r3, r4, #22
   45762:	d54e      	bpl.n	45802 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   45764:	4b31      	ldr	r3, [pc, #196]	; (4582c <gpio_nrfx_pin_configure+0x150>)
   45766:	4a32      	ldr	r2, [pc, #200]	; (45830 <gpio_nrfx_pin_configure+0x154>)
   45768:	4023      	ands	r3, r4
   4576a:	4293      	cmp	r3, r2
   4576c:	d03a      	beq.n	457e4 <gpio_nrfx_pin_configure+0x108>
   4576e:	d80c      	bhi.n	4578a <gpio_nrfx_pin_configure+0xae>
   45770:	2b06      	cmp	r3, #6
   45772:	d014      	beq.n	4579e <gpio_nrfx_pin_configure+0xc2>
   45774:	d804      	bhi.n	45780 <gpio_nrfx_pin_configure+0xa4>
   45776:	b193      	cbz	r3, 4579e <gpio_nrfx_pin_configure+0xc2>
   45778:	2b02      	cmp	r3, #2
   4577a:	d1e8      	bne.n	4574e <gpio_nrfx_pin_configure+0x72>
   4577c:	2304      	movs	r3, #4
   4577e:	e00e      	b.n	4579e <gpio_nrfx_pin_configure+0xc2>
   45780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   45784:	d1e3      	bne.n	4574e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   45786:	2301      	movs	r3, #1
   45788:	e009      	b.n	4579e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   4578a:	4a2a      	ldr	r2, [pc, #168]	; (45834 <gpio_nrfx_pin_configure+0x158>)
   4578c:	4293      	cmp	r3, r2
   4578e:	d02b      	beq.n	457e8 <gpio_nrfx_pin_configure+0x10c>
   45790:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   45794:	d02a      	beq.n	457ec <gpio_nrfx_pin_configure+0x110>
   45796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   4579a:	d1d8      	bne.n	4574e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   4579c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   4579e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   457a2:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   457a6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   457aa:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   457ac:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   457b0:	bf54      	ite	pl
   457b2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   457b6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   457b8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   457ba:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   457be:	d517      	bpl.n	457f0 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   457c0:	687b      	ldr	r3, [r7, #4]
   457c2:	2101      	movs	r1, #1
   457c4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   457c8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   457cc:	2200      	movs	r2, #0
   457ce:	a901      	add	r1, sp, #4
   457d0:	4628      	mov	r0, r5
   457d2:	f001 f8c5 	bl	46960 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   457d6:	4b14      	ldr	r3, [pc, #80]	; (45828 <gpio_nrfx_pin_configure+0x14c>)
   457d8:	4298      	cmp	r0, r3
   457da:	bf14      	ite	ne
   457dc:	f06f 0015 	mvnne.w	r0, #21
   457e0:	2000      	moveq	r0, #0
   457e2:	e794      	b.n	4570e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   457e4:	2307      	movs	r3, #7
   457e6:	e7da      	b.n	4579e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   457e8:	2305      	movs	r3, #5
   457ea:	e7d8      	b.n	4579e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   457ec:	2303      	movs	r3, #3
   457ee:	e7d6      	b.n	4579e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   457f0:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   457f2:	bf41      	itttt	mi
   457f4:	687b      	ldrmi	r3, [r7, #4]
   457f6:	2101      	movmi	r1, #1
   457f8:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   457fc:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   45800:	e7e4      	b.n	457cc <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   45802:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45804:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   45808:	bf54      	ite	pl
   4580a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   4580e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45810:	461a      	mov	r2, r3
   45812:	a901      	add	r1, sp, #4
   45814:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   45816:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   4581a:	f000 fff3 	bl	46804 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   4581e:	4b02      	ldr	r3, [pc, #8]	; (45828 <gpio_nrfx_pin_configure+0x14c>)
   45820:	4298      	cmp	r0, r3
   45822:	f43f af7f 	beq.w	45724 <gpio_nrfx_pin_configure+0x48>
   45826:	e792      	b.n	4574e <gpio_nrfx_pin_configure+0x72>
   45828:	0bad0000 	.word	0x0bad0000
   4582c:	00f00006 	.word	0x00f00006
   45830:	00100006 	.word	0x00100006
   45834:	00400002 	.word	0x00400002

00045838 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   45838:	4b02      	ldr	r3, [pc, #8]	; (45844 <flash_nrf_pages_layout+0xc>)
   4583a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   4583c:	2301      	movs	r3, #1
   4583e:	6013      	str	r3, [r2, #0]
}
   45840:	4770      	bx	lr
   45842:	bf00      	nop
   45844:	2000713c 	.word	0x2000713c

00045848 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   45848:	4800      	ldr	r0, [pc, #0]	; (4584c <flash_nrf_get_parameters+0x4>)
   4584a:	4770      	bx	lr
   4584c:	000560a4 	.word	0x000560a4

00045850 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   45850:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45852:	2201      	movs	r2, #1
   45854:	4611      	mov	r1, r2
   45856:	4807      	ldr	r0, [pc, #28]	; (45874 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   45858:	4c07      	ldr	r4, [pc, #28]	; (45878 <nrf_flash_init+0x28>)
   4585a:	f00b ffde 	bl	5181a <z_impl_k_sem_init>
	nrf_flash_sync_init();
   4585e:	f000 f9c3 	bl	45be8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   45862:	f00b fa67 	bl	50d34 <nrfx_nvmc_flash_page_count_get>
   45866:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   45868:	f00b fa60 	bl	50d2c <nrfx_nvmc_flash_page_size_get>
   4586c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   4586e:	2000      	movs	r0, #0
   45870:	bd10      	pop	{r4, pc}
   45872:	bf00      	nop
   45874:	20007144 	.word	0x20007144
   45878:	2000713c 	.word	0x2000713c

0004587c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   4587c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45880:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   45884:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   45888:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   4588c:	f023 031f 	bic.w	r3, r3, #31
   45890:	430b      	orrs	r3, r1
    pofcon |=
   45892:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   45896:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   4589a:	4b02      	ldr	r3, [pc, #8]	; (458a4 <restore_pofwarn.part.0+0x28>)
   4589c:	2200      	movs	r2, #0
   4589e:	701a      	strb	r2, [r3, #0]
	}
}
   458a0:	4770      	bx	lr
   458a2:	bf00      	nop
   458a4:	2000779a 	.word	0x2000779a

000458a8 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   458a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   458ac:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   458b0:	2b08      	cmp	r3, #8
   458b2:	d122      	bne.n	458fa <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   458b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   458b8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   458bc:	f011 0001 	ands.w	r0, r1, #1
   458c0:	d01c      	beq.n	458fc <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   458c2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   458c6:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   458ca:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   458ce:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   458d0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   458d4:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   458d8:	b158      	cbz	r0, 458f2 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   458da:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   458de:	f023 031f 	bic.w	r3, r3, #31
   458e2:	430b      	orrs	r3, r1
    pofcon |=
   458e4:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   458e8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   458ec:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   458f0:	4770      	bx	lr
		pofcon_enabled = enabled;
   458f2:	4b03      	ldr	r3, [pc, #12]	; (45900 <suspend_pofwarn+0x58>)
   458f4:	2201      	movs	r2, #1
   458f6:	701a      	strb	r2, [r3, #0]
   458f8:	4770      	bx	lr
		return 0;
   458fa:	2000      	movs	r0, #0
}
   458fc:	4770      	bx	lr
   458fe:	bf00      	nop
   45900:	2000779a 	.word	0x2000779a

00045904 <erase_op>:
{
   45904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45906:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45908:	f00b fa10 	bl	50d2c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   4590c:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   4590e:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   45910:	b10b      	cbz	r3, 45916 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   45912:	f000 f97b 	bl	45c0c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   45916:	4f13      	ldr	r7, [pc, #76]	; (45964 <erase_op+0x60>)
{
   45918:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   4591a:	f7ff ffc5 	bl	458a8 <suspend_pofwarn>
   4591e:	b9e8      	cbnz	r0, 4595c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   45920:	6860      	ldr	r0, [r4, #4]
   45922:	f001 fa5f 	bl	46de4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   45926:	68a3      	ldr	r3, [r4, #8]
   45928:	1b5b      	subs	r3, r3, r5
   4592a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   4592c:	6863      	ldr	r3, [r4, #4]
   4592e:	442b      	add	r3, r5
   45930:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   45932:	783b      	ldrb	r3, [r7, #0]
   45934:	b10b      	cbz	r3, 4593a <erase_op+0x36>
   45936:	f7ff ffa1 	bl	4587c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   4593a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   4593c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   4593e:	b93b      	cbnz	r3, 45950 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   45940:	68a3      	ldr	r3, [r4, #8]
   45942:	2b00      	cmp	r3, #0
   45944:	d1e9      	bne.n	4591a <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   45946:	68a0      	ldr	r0, [r4, #8]
   45948:	3800      	subs	r0, #0
   4594a:	bf18      	it	ne
   4594c:	2001      	movne	r0, #1
}
   4594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   45950:	4630      	mov	r0, r6
   45952:	f7e3 fa1d 	bl	28d90 <nrf_flash_sync_check_time_limit>
   45956:	2800      	cmp	r0, #0
   45958:	d0f2      	beq.n	45940 <erase_op+0x3c>
   4595a:	e7f4      	b.n	45946 <erase_op+0x42>
			return -ECANCELED;
   4595c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   45960:	e7f5      	b.n	4594e <erase_op+0x4a>
   45962:	bf00      	nop
   45964:	2000779a 	.word	0x2000779a

00045968 <flash_nrf_erase>:
{
   45968:	b5f0      	push	{r4, r5, r6, r7, lr}
   4596a:	b087      	sub	sp, #28
   4596c:	460e      	mov	r6, r1
   4596e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45970:	f00b f9dc 	bl	50d2c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   45974:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45976:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   45978:	4630      	mov	r0, r6
   4597a:	f00b f8b0 	bl	50ade <is_regular_addr_valid>
   4597e:	b3c8      	cbz	r0, 459f4 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   45980:	fbb6 f3f7 	udiv	r3, r6, r7
   45984:	fb07 6313 	mls	r3, r7, r3, r6
   45988:	bba3      	cbnz	r3, 459f4 <flash_nrf_erase+0x8c>
   4598a:	fbb5 f4f7 	udiv	r4, r5, r7
   4598e:	fb07 5414 	mls	r4, r7, r4, r5
   45992:	bb7c      	cbnz	r4, 459f4 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   45994:	42bd      	cmp	r5, r7
   45996:	d322      	bcc.n	459de <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   45998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4599c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   459a0:	4816      	ldr	r0, [pc, #88]	; (459fc <flash_nrf_erase+0x94>)
   459a2:	f002 ffab 	bl	488fc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   459a6:	f00b f8c1 	bl	50b2c <nrf_flash_sync_is_required>
   459aa:	ab02      	add	r3, sp, #8
   459ac:	4601      	mov	r1, r0
	struct flash_context context = {
   459ae:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   459b0:	b1c0      	cbz	r0, 459e4 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   459b2:	4621      	mov	r1, r4
   459b4:	4618      	mov	r0, r3
   459b6:	f006 fe89 	bl	4c6cc <memset>
   459ba:	2201      	movs	r2, #1
   459bc:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   459c0:	4a0f      	ldr	r2, [pc, #60]	; (45a00 <flash_nrf_erase+0x98>)
   459c2:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   459c6:	480f      	ldr	r0, [pc, #60]	; (45a04 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   459c8:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   459cc:	f000 f916 	bl	45bfc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   459d0:	4668      	mov	r0, sp
   459d2:	f7e3 f961 	bl	28c98 <nrf_flash_sync_exe>
	return	erase_op(&context);
   459d6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   459d8:	4808      	ldr	r0, [pc, #32]	; (459fc <flash_nrf_erase+0x94>)
   459da:	f002 ff69 	bl	488b0 <z_impl_k_sem_give>
}
   459de:	4620      	mov	r0, r4
   459e0:	b007      	add	sp, #28
   459e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   459e4:	4618      	mov	r0, r3
   459e6:	f006 fe71 	bl	4c6cc <memset>
   459ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   459ee:	f7ff ff89 	bl	45904 <erase_op>
   459f2:	e7f0      	b.n	459d6 <flash_nrf_erase+0x6e>
		return -EINVAL;
   459f4:	f06f 0415 	mvn.w	r4, #21
   459f8:	e7f1      	b.n	459de <flash_nrf_erase+0x76>
   459fa:	bf00      	nop
   459fc:	20007144 	.word	0x20007144
   45a00:	00045905 	.word	0x00045905
   45a04:	00015e64 	.word	0x00015e64

00045a08 <write_op>:
{
   45a08:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   45a0a:	7b03      	ldrb	r3, [r0, #12]
{
   45a0c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   45a0e:	b10b      	cbz	r3, 45a14 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   45a10:	f000 f8fc 	bl	45c0c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   45a14:	4e19      	ldr	r6, [pc, #100]	; (45a7c <write_op+0x74>)
{
   45a16:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   45a18:	68a3      	ldr	r3, [r4, #8]
   45a1a:	2b03      	cmp	r3, #3
   45a1c:	d806      	bhi.n	45a2c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   45a1e:	4a18      	ldr	r2, [pc, #96]	; (45a80 <write_op+0x78>)
   45a20:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   45a24:	07db      	lsls	r3, r3, #31
   45a26:	d5fb      	bpl.n	45a20 <write_op+0x18>
	return FLASH_OP_DONE;
   45a28:	2000      	movs	r0, #0
}
   45a2a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   45a2c:	f7ff ff3c 	bl	458a8 <suspend_pofwarn>
   45a30:	bb08      	cbnz	r0, 45a76 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   45a32:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   45a34:	6860      	ldr	r0, [r4, #4]
   45a36:	6819      	ldr	r1, [r3, #0]
   45a38:	f001 f9f4 	bl	46e24 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   45a3c:	7833      	ldrb	r3, [r6, #0]
   45a3e:	b10b      	cbz	r3, 45a44 <write_op+0x3c>
   45a40:	f7ff ff1c 	bl	4587c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   45a44:	6863      	ldr	r3, [r4, #4]
   45a46:	3304      	adds	r3, #4
   45a48:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   45a4a:	6823      	ldr	r3, [r4, #0]
   45a4c:	3304      	adds	r3, #4
   45a4e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   45a50:	68a3      	ldr	r3, [r4, #8]
   45a52:	3b04      	subs	r3, #4
   45a54:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   45a56:	7b23      	ldrb	r3, [r4, #12]
		i++;
   45a58:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   45a5a:	2b00      	cmp	r3, #0
   45a5c:	d0dc      	beq.n	45a18 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   45a5e:	4628      	mov	r0, r5
   45a60:	f7e3 f996 	bl	28d90 <nrf_flash_sync_check_time_limit>
   45a64:	2800      	cmp	r0, #0
   45a66:	d0d7      	beq.n	45a18 <write_op+0x10>
   45a68:	4a05      	ldr	r2, [pc, #20]	; (45a80 <write_op+0x78>)
   45a6a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   45a6e:	07d9      	lsls	r1, r3, #31
   45a70:	d5fb      	bpl.n	45a6a <write_op+0x62>
				return FLASH_OP_ONGOING;
   45a72:	2001      	movs	r0, #1
   45a74:	e7d9      	b.n	45a2a <write_op+0x22>
			return -ECANCELED;
   45a76:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   45a7a:	e7d6      	b.n	45a2a <write_op+0x22>
   45a7c:	2000779a 	.word	0x2000779a
   45a80:	4001e000 	.word	0x4001e000

00045a84 <flash_nrf_write>:
{
   45a84:	b570      	push	{r4, r5, r6, lr}
   45a86:	460d      	mov	r5, r1
   45a88:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   45a8a:	4619      	mov	r1, r3
   45a8c:	4628      	mov	r0, r5
{
   45a8e:	4616      	mov	r6, r2
   45a90:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   45a92:	f00b f824 	bl	50ade <is_regular_addr_valid>
   45a96:	b360      	cbz	r0, 45af2 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   45a98:	ea45 0304 	orr.w	r3, r5, r4
   45a9c:	079b      	lsls	r3, r3, #30
   45a9e:	d128      	bne.n	45af2 <flash_nrf_write+0x6e>
	if (!len) {
   45aa0:	b1fc      	cbz	r4, 45ae2 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   45aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45aaa:	4813      	ldr	r0, [pc, #76]	; (45af8 <flash_nrf_write+0x74>)
   45aac:	f002 ff26 	bl	488fc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   45ab0:	f00b f83c 	bl	50b2c <nrf_flash_sync_is_required>
   45ab4:	4603      	mov	r3, r0
	struct flash_context context = {
   45ab6:	e9cd 6502 	strd	r6, r5, [sp, #8]
   45aba:	a802      	add	r0, sp, #8
   45abc:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   45abe:	b19b      	cbz	r3, 45ae8 <flash_nrf_write+0x64>
	struct flash_context context = {
   45ac0:	2301      	movs	r3, #1
   45ac2:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   45ac6:	4b0d      	ldr	r3, [pc, #52]	; (45afc <flash_nrf_write+0x78>)
   45ac8:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   45acc:	f641 504c 	movw	r0, #7500	; 0x1d4c
   45ad0:	f000 f894 	bl	45bfc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   45ad4:	4668      	mov	r0, sp
   45ad6:	f7e3 f8df 	bl	28c98 <nrf_flash_sync_exe>
	return write_op(&context);
   45ada:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   45adc:	4806      	ldr	r0, [pc, #24]	; (45af8 <flash_nrf_write+0x74>)
   45ade:	f002 fee7 	bl	488b0 <z_impl_k_sem_give>
}
   45ae2:	4620      	mov	r0, r4
   45ae4:	b006      	add	sp, #24
   45ae6:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   45ae8:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   45aec:	f7ff ff8c 	bl	45a08 <write_op>
   45af0:	e7f3      	b.n	45ada <flash_nrf_write+0x56>
		return -EINVAL;
   45af2:	f06f 0415 	mvn.w	r4, #21
   45af6:	e7f4      	b.n	45ae2 <flash_nrf_write+0x5e>
   45af8:	20007144 	.word	0x20007144
   45afc:	00045a09 	.word	0x00045a09

00045b00 <time_slot_callback_work>:
{
   45b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   45b02:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   45b04:	e9d3 2000 	ldrd	r2, r0, [r3]
   45b08:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   45b0a:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   45b0c:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   45b0e:	d013      	beq.n	45b38 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45b10:	f10d 010f 	add.w	r1, sp, #15
   45b14:	f10d 000e 	add.w	r0, sp, #14
   45b18:	f7f2 fbca 	bl	382b0 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45b1c:	2300      	movs	r3, #0
   45b1e:	9300      	str	r3, [sp, #0]
   45b20:	4619      	mov	r1, r3
   45b22:	f89d 200f 	ldrb.w	r2, [sp, #15]
   45b26:	f89d 000e 	ldrb.w	r0, [sp, #14]
   45b2a:	f7ef ffed 	bl	35b08 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   45b2e:	4b03      	ldr	r3, [pc, #12]	; (45b3c <time_slot_callback_work+0x3c>)
   45b30:	60dc      	str	r4, [r3, #12]
   45b32:	4803      	ldr	r0, [pc, #12]	; (45b40 <time_slot_callback_work+0x40>)
   45b34:	f002 febc 	bl	488b0 <z_impl_k_sem_give>
}
   45b38:	b004      	add	sp, #16
   45b3a:	bd10      	pop	{r4, pc}
   45b3c:	2000715c 	.word	0x2000715c
   45b40:	2000716c 	.word	0x2000716c

00045b44 <time_slot_delay>:
{
   45b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   45b48:	b08d      	sub	sp, #52	; 0x34
   45b4a:	4606      	mov	r6, r0
   45b4c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45b4e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   45b52:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   45b56:	4690      	mov	r8, r2
   45b58:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45b5a:	f7f2 fba9 	bl	382b0 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   45b5e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   45b62:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   45b66:	9700      	str	r7, [sp, #0]
   45b68:	2400      	movs	r4, #0
   45b6a:	3501      	adds	r5, #1
   45b6c:	4633      	mov	r3, r6
   45b6e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   45b72:	e9cd 8905 	strd	r8, r9, [sp, #20]
   45b76:	e9cd 4403 	strd	r4, r4, [sp, #12]
   45b7a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   45b7e:	b2ea      	uxtb	r2, r5
   45b80:	2101      	movs	r1, #1
   45b82:	f7ef ff37 	bl	359f4 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   45b86:	f030 0302 	bics.w	r3, r0, #2
   45b8a:	d00d      	beq.n	45ba8 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   45b8c:	4b08      	ldr	r3, [pc, #32]	; (45bb0 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45b8e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   45b92:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45b94:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   45b98:	9400      	str	r4, [sp, #0]
   45b9a:	4623      	mov	r3, r4
   45b9c:	4621      	mov	r1, r4
   45b9e:	f7ef ffb3 	bl	35b08 <ticker_stop>
   45ba2:	4804      	ldr	r0, [pc, #16]	; (45bb4 <time_slot_delay+0x70>)
   45ba4:	f002 fe84 	bl	488b0 <z_impl_k_sem_give>
}
   45ba8:	b00d      	add	sp, #52	; 0x34
   45baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   45bae:	bf00      	nop
   45bb0:	2000715c 	.word	0x2000715c
   45bb4:	2000716c 	.word	0x2000716c

00045bb8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   45bb8:	9b01      	ldr	r3, [sp, #4]
   45bba:	4a02      	ldr	r2, [pc, #8]	; (45bc4 <time_slot_callback_prepare+0xc>)
   45bbc:	2131      	movs	r1, #49	; 0x31
   45bbe:	f7ff bfc1 	b.w	45b44 <time_slot_delay>
   45bc2:	bf00      	nop
   45bc4:	00045bc9 	.word	0x00045bc9

00045bc8 <time_slot_callback_abort>:
{
   45bc8:	b570      	push	{r4, r5, r6, lr}
   45bca:	9d05      	ldr	r5, [sp, #20]
   45bcc:	4604      	mov	r4, r0
	ll_radio_state_abort();
   45bce:	f7f2 fb75 	bl	382bc <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   45bd2:	462b      	mov	r3, r5
   45bd4:	4620      	mov	r0, r4
   45bd6:	4a03      	ldr	r2, [pc, #12]	; (45be4 <time_slot_callback_abort+0x1c>)
}
   45bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   45bdc:	2106      	movs	r1, #6
   45bde:	f7ff bfb1 	b.w	45b44 <time_slot_delay>
   45be2:	bf00      	nop
   45be4:	00045b01 	.word	0x00045b01

00045be8 <nrf_flash_sync_init>:
{
   45be8:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45bea:	2201      	movs	r2, #1
   45bec:	2100      	movs	r1, #0
   45bee:	4802      	ldr	r0, [pc, #8]	; (45bf8 <nrf_flash_sync_init+0x10>)
   45bf0:	f00b fe13 	bl	5181a <z_impl_k_sem_init>
}
   45bf4:	2000      	movs	r0, #0
   45bf6:	bd08      	pop	{r3, pc}
   45bf8:	2000716c 	.word	0x2000716c

00045bfc <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   45bfc:	4b02      	ldr	r3, [pc, #8]	; (45c08 <nrf_flash_sync_set_context+0xc>)
   45bfe:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   45c02:	e9c3 2000 	strd	r2, r0, [r3]
}
   45c06:	4770      	bx	lr
   45c08:	2000715c 	.word	0x2000715c

00045c0c <nrf_flash_sync_get_timestamp_begin>:
{
   45c0c:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   45c0e:	f7f0 f81b 	bl	35c48 <ticker_ticks_now_get>
   45c12:	4b01      	ldr	r3, [pc, #4]	; (45c18 <nrf_flash_sync_get_timestamp_begin+0xc>)
   45c14:	6098      	str	r0, [r3, #8]
}
   45c16:	bd08      	pop	{r3, pc}
   45c18:	2000715c 	.word	0x2000715c

00045c1c <random_byte_get>:
	__asm__ volatile(
   45c1c:	f04f 0320 	mov.w	r3, #32
   45c20:	f3ef 8211 	mrs	r2, BASEPRI
   45c24:	f383 8812 	msr	BASEPRI_MAX, r3
   45c28:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   45c2c:	4b09      	ldr	r3, [pc, #36]	; (45c54 <random_byte_get+0x38>)
   45c2e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   45c32:	b161      	cbz	r1, 45c4e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45c34:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   45c36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45c3a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   45c3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   45c42:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   45c44:	f382 8811 	msr	BASEPRI, r2
   45c48:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   45c4c:	4770      	bx	lr
	int retval = -EAGAIN;
   45c4e:	f06f 000a 	mvn.w	r0, #10
   45c52:	e7f7      	b.n	45c44 <random_byte_get+0x28>
   45c54:	4000d000 	.word	0x4000d000

00045c58 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   45c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   45c5a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   45c5c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   45c5e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   45c60:	f04f 0020 	mov.w	r0, #32
   45c64:	f3ef 8e11 	mrs	lr, BASEPRI
   45c68:	f380 8812 	msr	BASEPRI_MAX, r0
   45c6c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   45c70:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   45c72:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   45c76:	1ba4      	subs	r4, r4, r6
   45c78:	403c      	ands	r4, r7
	if (available < len) {
   45c7a:	42a2      	cmp	r2, r4
		len = available;
   45c7c:	bf88      	it	hi
   45c7e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   45c80:	18b0      	adds	r0, r6, r2
   45c82:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   45c84:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   45c86:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   45c88:	f38e 8811 	msr	BASEPRI, lr
   45c8c:	f3bf 8f6f 	isb	sy
   45c90:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   45c92:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   45c94:	4290      	cmp	r0, r2
   45c96:	d119      	bne.n	45ccc <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   45c98:	4566      	cmp	r6, ip
   45c9a:	d10d      	bne.n	45cb8 <rng_pool_get+0x60>
	__asm__ volatile(
   45c9c:	f04f 0520 	mov.w	r5, #32
   45ca0:	f3ef 8011 	mrs	r0, BASEPRI
   45ca4:	f385 8812 	msr	BASEPRI_MAX, r5
   45ca8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   45cac:	781d      	ldrb	r5, [r3, #0]
   45cae:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   45cb0:	f380 8811 	msr	BASEPRI, r0
   45cb4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   45cb8:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   45cba:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   45cbc:	b290      	uxth	r0, r2
	available = available - len;
   45cbe:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   45cc0:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45cc2:	bf22      	ittt	cs
   45cc4:	4b06      	ldrcs	r3, [pc, #24]	; (45ce0 <rng_pool_get+0x88>)
   45cc6:	2201      	movcs	r2, #1
   45cc8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   45cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   45ccc:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   45cd0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   45cd2:	f89e e005 	ldrb.w	lr, [lr, #5]
   45cd6:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   45cda:	403d      	ands	r5, r7
   45cdc:	e7da      	b.n	45c94 <rng_pool_get+0x3c>
   45cde:	bf00      	nop
   45ce0:	4000d000 	.word	0x4000d000

00045ce4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45ce4:	43db      	mvns	r3, r3
{
   45ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45cea:	f013 0501 	ands.w	r5, r3, #1
{
   45cee:	460e      	mov	r6, r1
   45cf0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45cf2:	d004      	beq.n	45cfe <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   45cf4:	4821      	ldr	r0, [pc, #132]	; (45d7c <entropy_nrf5_get_entropy_isr+0x98>)
   45cf6:	f7ff ffaf 	bl	45c58 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   45cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   45cfe:	b3a2      	cbz	r2, 45d6a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   45d00:	f04f 0320 	mov.w	r3, #32
   45d04:	f3ef 8811 	mrs	r8, BASEPRI
   45d08:	f383 8812 	msr	BASEPRI_MAX, r3
   45d0c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   45d10:	200d      	movs	r0, #13
   45d12:	f7e7 fafb 	bl	2d30c <arch_irq_is_enabled>
   45d16:	4607      	mov	r7, r0
		irq_disable(IRQN);
   45d18:	200d      	movs	r0, #13
   45d1a:	f7e7 fae3 	bl	2d2e4 <arch_irq_disable>
	__asm__ volatile(
   45d1e:	f388 8811 	msr	BASEPRI, r8
   45d22:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45d26:	f8df 8058 	ldr.w	r8, [pc, #88]	; 45d80 <entropy_nrf5_get_entropy_isr+0x9c>
   45d2a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 45d84 <entropy_nrf5_get_entropy_isr+0xa0>
   45d2e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   45d32:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   45d36:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45d3a:	2301      	movs	r3, #1
   45d3c:	f8c8 3000 	str.w	r3, [r8]
   45d40:	4625      	mov	r5, r4
   45d42:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   45d46:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   45d4a:	b183      	cbz	r3, 45d6e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   45d4c:	f7ff ff66 	bl	45c1c <random_byte_get>
			if (byte < 0) {
   45d50:	1e03      	subs	r3, r0, #0
   45d52:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   45d56:	dbf6      	blt.n	45d46 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   45d58:	3d01      	subs	r5, #1
   45d5a:	b2ad      	uxth	r5, r5
   45d5c:	5573      	strb	r3, [r6, r5]
		} while (len);
   45d5e:	2d00      	cmp	r5, #0
   45d60:	d1f1      	bne.n	45d46 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   45d62:	b117      	cbz	r7, 45d6a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   45d64:	200d      	movs	r0, #13
   45d66:	f7e7 faad 	bl	2d2c4 <arch_irq_enable>
	return cnt;
   45d6a:	4620      	mov	r0, r4
   45d6c:	e7c5      	b.n	45cfa <entropy_nrf5_get_entropy_isr+0x16>
   45d6e:	f3bf 8f4f 	dsb	sy
				__WFE();
   45d72:	bf20      	wfe
				__SEV();
   45d74:	bf40      	sev
				__WFE();
   45d76:	bf20      	wfe
   45d78:	e7e5      	b.n	45d46 <entropy_nrf5_get_entropy_isr+0x62>
   45d7a:	bf00      	nop
   45d7c:	200071b4 	.word	0x200071b4
   45d80:	4000d000 	.word	0x4000d000
   45d84:	e000e100 	.word	0xe000e100

00045d88 <entropy_nrf5_get_entropy>:
{
   45d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   45d8c:	4f13      	ldr	r7, [pc, #76]	; (45ddc <entropy_nrf5_get_entropy+0x54>)
   45d8e:	460d      	mov	r5, r1
   45d90:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   45d92:	f107 0845 	add.w	r8, r7, #69	; 0x45
   45d96:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   45d9a:	b914      	cbnz	r4, 45da2 <entropy_nrf5_get_entropy+0x1a>
}
   45d9c:	4620      	mov	r0, r4
   45d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   45da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45daa:	4638      	mov	r0, r7
   45dac:	f002 fda6 	bl	488fc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   45db0:	4622      	mov	r2, r4
   45db2:	4629      	mov	r1, r5
   45db4:	4640      	mov	r0, r8
   45db6:	f7ff ff4f 	bl	45c58 <rng_pool_get>
   45dba:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   45dbc:	4638      	mov	r0, r7
   45dbe:	f002 fd77 	bl	488b0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   45dc2:	b93e      	cbnz	r6, 45dd4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   45dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45dcc:	4648      	mov	r0, r9
   45dce:	f002 fd95 	bl	488fc <z_impl_k_sem_take>
			continue;
   45dd2:	e7e2      	b.n	45d9a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   45dd4:	1ba4      	subs	r4, r4, r6
   45dd6:	b2a4      	uxth	r4, r4
		buf += bytes;
   45dd8:	4435      	add	r5, r6
   45dda:	e7de      	b.n	45d9a <entropy_nrf5_get_entropy+0x12>
   45ddc:	20007184 	.word	0x20007184

00045de0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   45de0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45de2:	4c19      	ldr	r4, [pc, #100]	; (45e48 <entropy_nrf5_init+0x68>)
   45de4:	2201      	movs	r2, #1
   45de6:	4611      	mov	r1, r2
   45de8:	4620      	mov	r0, r4
   45dea:	f00b fd16 	bl	5181a <z_impl_k_sem_init>
   45dee:	2201      	movs	r2, #1
   45df0:	2100      	movs	r1, #0
   45df2:	f104 0018 	add.w	r0, r4, #24
   45df6:	f00b fd10 	bl	5181a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   45dfa:	f240 4307 	movw	r3, #1031	; 0x407
   45dfe:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   45e02:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   45e06:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   45e08:	230c      	movs	r3, #12
   45e0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   45e0e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   45e10:	4b0e      	ldr	r3, [pc, #56]	; (45e4c <entropy_nrf5_init+0x6c>)
   45e12:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   45e16:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   45e1a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   45e1e:	f042 0201 	orr.w	r2, r2, #1
   45e22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   45e26:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45e28:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   45e2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   45e30:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   45e34:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45e36:	6019      	str	r1, [r3, #0]
   45e38:	200d      	movs	r0, #13
   45e3a:	f7e7 fa75 	bl	2d328 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   45e3e:	200d      	movs	r0, #13
   45e40:	f7e7 fa40 	bl	2d2c4 <arch_irq_enable>

	return 0;
}
   45e44:	4628      	mov	r0, r5
   45e46:	bd38      	pop	{r3, r4, r5, pc}
   45e48:	20007184 	.word	0x20007184
   45e4c:	4000d000 	.word	0x4000d000

00045e50 <isr>:
{
   45e50:	b510      	push	{r4, lr}
	byte = random_byte_get();
   45e52:	f7ff fee3 	bl	45c1c <random_byte_get>
	if (byte < 0) {
   45e56:	2800      	cmp	r0, #0
   45e58:	db20      	blt.n	45e9c <isr+0x4c>
	uint8_t last  = rngp->last;
   45e5a:	4b17      	ldr	r3, [pc, #92]	; (45eb8 <isr+0x68>)
   45e5c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   45e60:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   45e64:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   45e68:	1a51      	subs	r1, r2, r1
   45e6a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   45e6e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   45e70:	d10d      	bne.n	45e8e <isr+0x3e>
	uint8_t last  = rngp->last;
   45e72:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   45e76:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   45e7a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   45e7e:	1a51      	subs	r1, r2, r1
   45e80:	ea34 0101 	bics.w	r1, r4, r1
   45e84:	d10b      	bne.n	45e9e <isr+0x4e>
   45e86:	4b0d      	ldr	r3, [pc, #52]	; (45ebc <isr+0x6c>)
   45e88:	2201      	movs	r2, #1
   45e8a:	605a      	str	r2, [r3, #4]
}
   45e8c:	e00e      	b.n	45eac <isr+0x5c>
	rngp->buffer[last] = byte;
   45e8e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   45e90:	3201      	adds	r2, #1
   45e92:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   45e94:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   45e98:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   45e9c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   45e9e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   45ea0:	3201      	adds	r2, #1
   45ea2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   45ea4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   45ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   45eac:	4804      	ldr	r0, [pc, #16]	; (45ec0 <isr+0x70>)
}
   45eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   45eb2:	f002 bcfd 	b.w	488b0 <z_impl_k_sem_give>
   45eb6:	bf00      	nop
   45eb8:	20007184 	.word	0x20007184
   45ebc:	4000d000 	.word	0x4000d000
   45ec0:	2000719c 	.word	0x2000719c

00045ec4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   45ec4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   45ec6:	2301      	movs	r3, #1
   45ec8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45eca:	4a11      	ldr	r2, [pc, #68]	; (45f10 <compare_int_lock+0x4c>)
   45ecc:	f3bf 8f5b 	dmb	ish
   45ed0:	43dc      	mvns	r4, r3
   45ed2:	e852 1f00 	ldrex	r1, [r2]
   45ed6:	ea01 0c04 	and.w	ip, r1, r4
   45eda:	e842 ce00 	strex	lr, ip, [r2]
   45ede:	f1be 0f00 	cmp.w	lr, #0
   45ee2:	d1f6      	bne.n	45ed2 <compare_int_lock+0xe>
   45ee4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45ee8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   45eec:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   45ef0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   45ef4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   45ef8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   45efc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45f00:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   45f04:	420b      	tst	r3, r1
}
   45f06:	bf14      	ite	ne
   45f08:	2001      	movne	r0, #1
   45f0a:	2000      	moveq	r0, #0
   45f0c:	bd10      	pop	{r4, pc}
   45f0e:	bf00      	nop
   45f10:	200071dc 	.word	0x200071dc

00045f14 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45f14:	4919      	ldr	r1, [pc, #100]	; (45f7c <sys_clock_timeout_handler+0x68>)
{
   45f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45f18:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   45f1a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45f1e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   45f20:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   45f24:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45f28:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   45f2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   45f2e:	d222      	bcs.n	45f76 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   45f30:	4b13      	ldr	r3, [pc, #76]	; (45f80 <sys_clock_timeout_handler+0x6c>)
   45f32:	681b      	ldr	r3, [r3, #0]
   45f34:	0a1a      	lsrs	r2, r3, #8
   45f36:	061b      	lsls	r3, r3, #24
   45f38:	195e      	adds	r6, r3, r5
   45f3a:	4b12      	ldr	r3, [pc, #72]	; (45f84 <sys_clock_timeout_handler+0x70>)
   45f3c:	f142 0700 	adc.w	r7, r2, #0
   45f40:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   45f44:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   45f46:	f003 fb09 	bl	4955c <sys_clock_announce>
    return p_reg->CC[ch];
   45f4a:	00a3      	lsls	r3, r4, #2
   45f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45f50:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   45f54:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   45f58:	42aa      	cmp	r2, r5
   45f5a:	d10b      	bne.n	45f74 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   45f5c:	b91e      	cbnz	r6, 45f66 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   45f5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   45f62:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   45f66:	4b08      	ldr	r3, [pc, #32]	; (45f88 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45f68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   45f6c:	fa00 f404 	lsl.w	r4, r0, r4
   45f70:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   45f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   45f76:	2600      	movs	r6, #0
   45f78:	e7e5      	b.n	45f46 <sys_clock_timeout_handler+0x32>
   45f7a:	bf00      	nop
   45f7c:	20004208 	.word	0x20004208
   45f80:	200071e0 	.word	0x200071e0
   45f84:	200041f0 	.word	0x200041f0
   45f88:	40011000 	.word	0x40011000

00045f8c <compare_int_unlock>:
	if (key) {
   45f8c:	b319      	cbz	r1, 45fd6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45f8e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   45f92:	2301      	movs	r3, #1
   45f94:	4a10      	ldr	r2, [pc, #64]	; (45fd8 <compare_int_unlock+0x4c>)
   45f96:	4083      	lsls	r3, r0
   45f98:	e852 1f00 	ldrex	r1, [r2]
   45f9c:	4319      	orrs	r1, r3
   45f9e:	e842 1c00 	strex	ip, r1, [r2]
   45fa2:	f1bc 0f00 	cmp.w	ip, #0
   45fa6:	d1f7      	bne.n	45f98 <compare_int_unlock+0xc>
   45fa8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   45fac:	4a0b      	ldr	r2, [pc, #44]	; (45fdc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45fb2:	4083      	lsls	r3, r0
   45fb4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45fb8:	4b09      	ldr	r3, [pc, #36]	; (45fe0 <compare_int_unlock+0x54>)
   45fba:	f3bf 8f5b 	dmb	ish
   45fbe:	681b      	ldr	r3, [r3, #0]
   45fc0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   45fc4:	fa23 f000 	lsr.w	r0, r3, r0
   45fc8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45fca:	bf42      	ittt	mi
   45fcc:	4b05      	ldrmi	r3, [pc, #20]	; (45fe4 <compare_int_unlock+0x58>)
   45fce:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   45fd2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   45fd6:	4770      	bx	lr
   45fd8:	200071dc 	.word	0x200071dc
   45fdc:	40011000 	.word	0x40011000
   45fe0:	200071d8 	.word	0x200071d8
   45fe4:	e000e100 	.word	0xe000e100

00045fe8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   45fe8:	4b0d      	ldr	r3, [pc, #52]	; (46020 <z_nrf_rtc_timer_read+0x38>)
   45fea:	6818      	ldr	r0, [r3, #0]
   45fec:	0a01      	lsrs	r1, r0, #8
   45fee:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   45ff0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   45ff4:	4b0b      	ldr	r3, [pc, #44]	; (46024 <z_nrf_rtc_timer_read+0x3c>)
   45ff6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   45ffa:	1818      	adds	r0, r3, r0
   45ffc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   46000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   46004:	d20a      	bcs.n	4601c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   46006:	4b08      	ldr	r3, [pc, #32]	; (46028 <z_nrf_rtc_timer_read+0x40>)
   46008:	e9d3 2300 	ldrd	r2, r3, [r3]
   4600c:	4290      	cmp	r0, r2
   4600e:	eb71 0303 	sbcs.w	r3, r1, r3
   46012:	d203      	bcs.n	4601c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   46014:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   46018:	f141 0100 	adc.w	r1, r1, #0
}
   4601c:	4770      	bx	lr
   4601e:	bf00      	nop
   46020:	200071e0 	.word	0x200071e0
   46024:	40011000 	.word	0x40011000
   46028:	200041f0 	.word	0x200041f0

0004602c <compare_set>:
{
   4602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46030:	b085      	sub	sp, #20
   46032:	4616      	mov	r6, r2
   46034:	4698      	mov	r8, r3
   46036:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   46038:	f7ff ff44 	bl	45ec4 <compare_int_lock>
   4603c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   4603e:	f7ff ffd3 	bl	45fe8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   46042:	42b0      	cmp	r0, r6
   46044:	eb71 0308 	sbcs.w	r3, r1, r8
   46048:	d278      	bcs.n	4613c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   4604a:	4b46      	ldr	r3, [pc, #280]	; (46164 <compare_set+0x138>)
   4604c:	1a30      	subs	r0, r6, r0
   4604e:	eb68 0101 	sbc.w	r1, r8, r1
   46052:	4298      	cmp	r0, r3
   46054:	f171 0300 	sbcs.w	r3, r1, #0
   46058:	f080 8081 	bcs.w	4615e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   4605c:	4b42      	ldr	r3, [pc, #264]	; (46168 <compare_set+0x13c>)
   4605e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   46062:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   46066:	45d8      	cmp	r8, fp
   46068:	bf08      	it	eq
   4606a:	4556      	cmpeq	r6, sl
   4606c:	d051      	beq.n	46112 <compare_set+0xe6>
   4606e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   46072:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   46076:	f105 0750 	add.w	r7, r5, #80	; 0x50
   4607a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   4607e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   46080:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   46084:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   46088:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   4608a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   4608e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   46092:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   46094:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   46098:	4b34      	ldr	r3, [pc, #208]	; (4616c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4609a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   4609e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   460a0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   460a4:	1a40      	subs	r0, r0, r1
   460a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   460aa:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   460ae:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   460b0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   460b4:	d107      	bne.n	460c6 <compare_set+0x9a>
   460b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   460ba:	2013      	movs	r0, #19
   460bc:	f00b fe08 	bl	51cd0 <z_impl_k_busy_wait>
   460c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   460c4:	4b29      	ldr	r3, [pc, #164]	; (4616c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   460c6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   460ca:	eba4 000c 	sub.w	r0, r4, ip
   460ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   460d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   460d6:	bf88      	it	hi
   460d8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   460da:	2000      	movs	r0, #0
   460dc:	6038      	str	r0, [r7, #0]
   460de:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   460e0:	9801      	ldr	r0, [sp, #4]
   460e2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   460e6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   460ea:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   460ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   460f2:	4281      	cmp	r1, r0
   460f4:	d006      	beq.n	46104 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   460f6:	1a20      	subs	r0, r4, r0
   460f8:	3802      	subs	r0, #2
   460fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   460fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   46102:	d819      	bhi.n	46138 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   46104:	1aa4      	subs	r4, r4, r2
   46106:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   4610a:	eb14 0a06 	adds.w	sl, r4, r6
   4610e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   46112:	4915      	ldr	r1, [pc, #84]	; (46168 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   46114:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   46116:	012b      	lsls	r3, r5, #4
   46118:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   4611c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   46120:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   46122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   46124:	6053      	str	r3, [r2, #4]
	return ret;
   46126:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   46128:	4628      	mov	r0, r5
   4612a:	9900      	ldr	r1, [sp, #0]
   4612c:	f7ff ff2e 	bl	45f8c <compare_int_unlock>
}
   46130:	4620      	mov	r0, r4
   46132:	b005      	add	sp, #20
   46134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46138:	4620      	mov	r0, r4
   4613a:	e7b1      	b.n	460a0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   4613c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4613e:	4a0c      	ldr	r2, [pc, #48]	; (46170 <compare_set+0x144>)
   46140:	f3bf 8f5b 	dmb	ish
   46144:	40ab      	lsls	r3, r5
   46146:	e852 1f00 	ldrex	r1, [r2]
   4614a:	4319      	orrs	r1, r3
   4614c:	e842 1000 	strex	r0, r1, [r2]
   46150:	2800      	cmp	r0, #0
   46152:	d1f8      	bne.n	46146 <compare_set+0x11a>
   46154:	f3bf 8f5b 	dmb	ish
   46158:	46b2      	mov	sl, r6
   4615a:	46c3      	mov	fp, r8
   4615c:	e7d9      	b.n	46112 <compare_set+0xe6>
			return -EINVAL;
   4615e:	f06f 0415 	mvn.w	r4, #21
   46162:	e7e1      	b.n	46128 <compare_set+0xfc>
   46164:	01000001 	.word	0x01000001
   46168:	200041f8 	.word	0x200041f8
   4616c:	40011000 	.word	0x40011000
   46170:	200071d8 	.word	0x200071d8

00046174 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   46174:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   46176:	4b19      	ldr	r3, [pc, #100]	; (461dc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   46178:	4d19      	ldr	r5, [pc, #100]	; (461e0 <sys_clock_driver_init+0x6c>)
   4617a:	2400      	movs	r4, #0
   4617c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46184:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   46188:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   4618c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   46190:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   46194:	4b13      	ldr	r3, [pc, #76]	; (461e4 <sys_clock_driver_init+0x70>)
   46196:	2602      	movs	r6, #2
   46198:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   4619c:	2101      	movs	r1, #1
   4619e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   461a2:	2011      	movs	r0, #17
   461a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   461a8:	4622      	mov	r2, r4
   461aa:	f7e7 f8bd 	bl	2d328 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   461ae:	2011      	movs	r0, #17
   461b0:	f7e7 f888 	bl	2d2c4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   461b4:	4a0c      	ldr	r2, [pc, #48]	; (461e8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   461b6:	2301      	movs	r3, #1
   461b8:	60ab      	str	r3, [r5, #8]
   461ba:	602b      	str	r3, [r5, #0]
   461bc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   461be:	4b0b      	ldr	r3, [pc, #44]	; (461ec <sys_clock_driver_init+0x78>)
   461c0:	4a0b      	ldr	r2, [pc, #44]	; (461f0 <sys_clock_driver_init+0x7c>)
   461c2:	9300      	str	r3, [sp, #0]
   461c4:	9401      	str	r4, [sp, #4]
   461c6:	2300      	movs	r3, #0
   461c8:	4620      	mov	r0, r4
   461ca:	f7ff ff2f 	bl	4602c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   461ce:	4630      	mov	r0, r6
   461d0:	f7ff f95c 	bl	4548c <z_nrf_clock_control_lf_on>

	return 0;
}
   461d4:	4620      	mov	r0, r4
   461d6:	b002      	add	sp, #8
   461d8:	bd70      	pop	{r4, r5, r6, pc}
   461da:	bf00      	nop
   461dc:	200041f8 	.word	0x200041f8
   461e0:	40011000 	.word	0x40011000
   461e4:	e000e100 	.word	0xe000e100
   461e8:	200071dc 	.word	0x200071dc
   461ec:	00045f15 	.word	0x00045f15
   461f0:	007fffff 	.word	0x007fffff

000461f4 <rtc_nrf_isr>:
{
   461f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   461f8:	4c35      	ldr	r4, [pc, #212]	; (462d0 <rtc_nrf_isr+0xdc>)
   461fa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   461fe:	079a      	lsls	r2, r3, #30
   46200:	d50b      	bpl.n	4621a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46202:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   46206:	b143      	cbz	r3, 4621a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   46208:	4a32      	ldr	r2, [pc, #200]	; (462d4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4620a:	2300      	movs	r3, #0
   4620c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   46210:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   46214:	6813      	ldr	r3, [r2, #0]
   46216:	3301      	adds	r3, #1
   46218:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   4621a:	f04f 0320 	mov.w	r3, #32
   4621e:	f3ef 8211 	mrs	r2, BASEPRI
   46222:	f383 8812 	msr	BASEPRI_MAX, r3
   46226:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   4622a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   4622e:	03db      	lsls	r3, r3, #15
   46230:	d512      	bpl.n	46258 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46232:	f3bf 8f5b 	dmb	ish
   46236:	4b28      	ldr	r3, [pc, #160]	; (462d8 <rtc_nrf_isr+0xe4>)
   46238:	e853 1f00 	ldrex	r1, [r3]
   4623c:	f021 0001 	bic.w	r0, r1, #1
   46240:	e843 0600 	strex	r6, r0, [r3]
   46244:	2e00      	cmp	r6, #0
   46246:	d1f7      	bne.n	46238 <rtc_nrf_isr+0x44>
   46248:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   4624c:	2900      	cmp	r1, #0
   4624e:	d136      	bne.n	462be <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46250:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   46254:	2b00      	cmp	r3, #0
   46256:	d132      	bne.n	462be <rtc_nrf_isr+0xca>
{
   46258:	2300      	movs	r3, #0
	__asm__ volatile(
   4625a:	f382 8811 	msr	BASEPRI, r2
   4625e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   46262:	b34b      	cbz	r3, 462b8 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   46264:	f7ff fec0 	bl	45fe8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   46268:	f04f 0320 	mov.w	r3, #32
   4626c:	f3ef 8c11 	mrs	ip, BASEPRI
   46270:	f383 8812 	msr	BASEPRI_MAX, r3
   46274:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   46278:	4b18      	ldr	r3, [pc, #96]	; (462dc <rtc_nrf_isr+0xe8>)
   4627a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   4627e:	42b0      	cmp	r0, r6
   46280:	eb71 0207 	sbcs.w	r2, r1, r7
   46284:	f04f 0200 	mov.w	r2, #0
   46288:	d320      	bcc.n	462cc <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   4628a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   4628e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   46292:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   46296:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   4629a:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   4629c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   462a0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   462a4:	f38c 8811 	msr	BASEPRI, ip
   462a8:	f3bf 8f6f 	isb	sy
		if (handler) {
   462ac:	b121      	cbz	r1, 462b8 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   462ae:	9500      	str	r5, [sp, #0]
   462b0:	4632      	mov	r2, r6
   462b2:	463b      	mov	r3, r7
   462b4:	2000      	movs	r0, #0
   462b6:	4788      	blx	r1
}
   462b8:	b003      	add	sp, #12
   462ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   462be:	2300      	movs	r3, #0
   462c0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   462c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   462c8:	2301      	movs	r3, #1
}
   462ca:	e7c6      	b.n	4625a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   462cc:	4611      	mov	r1, r2
   462ce:	e7e9      	b.n	462a4 <rtc_nrf_isr+0xb0>
   462d0:	40011000 	.word	0x40011000
   462d4:	200071e0 	.word	0x200071e0
   462d8:	200071d8 	.word	0x200071d8
   462dc:	200041f8 	.word	0x200041f8

000462e0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   462e0:	1c43      	adds	r3, r0, #1
{
   462e2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   462e4:	d021      	beq.n	4632a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   462e6:	2801      	cmp	r0, #1
   462e8:	dd21      	ble.n	4632e <sys_clock_set_timeout+0x4e>
   462ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   462ee:	da20      	bge.n	46332 <sys_clock_set_timeout+0x52>
   462f0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   462f2:	f7ff fe79 	bl	45fe8 <z_nrf_rtc_timer_read>
   462f6:	4b10      	ldr	r3, [pc, #64]	; (46338 <sys_clock_set_timeout+0x58>)
   462f8:	e9d3 1300 	ldrd	r1, r3, [r3]
   462fc:	1a40      	subs	r0, r0, r1
		ticks = 0;
   462fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   46302:	bf28      	it	cs
   46304:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   46306:	3001      	adds	r0, #1
   46308:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   4630a:	480c      	ldr	r0, [pc, #48]	; (4633c <sys_clock_set_timeout+0x5c>)
   4630c:	4282      	cmp	r2, r0
   4630e:	bf28      	it	cs
   46310:	4602      	movcs	r2, r0
   46312:	1852      	adds	r2, r2, r1
   46314:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   46318:	4909      	ldr	r1, [pc, #36]	; (46340 <sys_clock_set_timeout+0x60>)
   4631a:	9001      	str	r0, [sp, #4]
   4631c:	9100      	str	r1, [sp, #0]
   4631e:	f143 0300 	adc.w	r3, r3, #0
   46322:	f7ff fe83 	bl	4602c <compare_set>
}
   46326:	b002      	add	sp, #8
   46328:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   4632a:	4804      	ldr	r0, [pc, #16]	; (4633c <sys_clock_set_timeout+0x5c>)
   4632c:	e7e0      	b.n	462f0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   4632e:	2400      	movs	r4, #0
   46330:	e7df      	b.n	462f2 <sys_clock_set_timeout+0x12>
   46332:	4c02      	ldr	r4, [pc, #8]	; (4633c <sys_clock_set_timeout+0x5c>)
   46334:	e7dd      	b.n	462f2 <sys_clock_set_timeout+0x12>
   46336:	bf00      	nop
   46338:	20004208 	.word	0x20004208
   4633c:	007fffff 	.word	0x007fffff
   46340:	00045f15 	.word	0x00045f15

00046344 <sys_clock_elapsed>:
{
   46344:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   46346:	f7ff fe4f 	bl	45fe8 <z_nrf_rtc_timer_read>
   4634a:	4b02      	ldr	r3, [pc, #8]	; (46354 <sys_clock_elapsed+0x10>)
   4634c:	681b      	ldr	r3, [r3, #0]
}
   4634e:	1ac0      	subs	r0, r0, r3
   46350:	bd08      	pop	{r3, pc}
   46352:	bf00      	nop
   46354:	20004208 	.word	0x20004208

00046358 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4635c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   46360:	2a08      	cmp	r2, #8
   46362:	d106      	bne.n	46372 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46364:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   46368:	2b05      	cmp	r3, #5
   4636a:	d802      	bhi.n	46372 <nrf52_errata_103+0x1a>
   4636c:	4a02      	ldr	r2, [pc, #8]	; (46378 <nrf52_errata_103+0x20>)
   4636e:	5cd0      	ldrb	r0, [r2, r3]
   46370:	4770      	bx	lr
        return false;
   46372:	2000      	movs	r0, #0
}
   46374:	4770      	bx	lr
   46376:	bf00      	nop
   46378:	00056b6f 	.word	0x00056b6f

0004637c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   4637c:	4a02      	ldr	r2, [pc, #8]	; (46388 <nvmc_wait+0xc>)
   4637e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   46382:	2b00      	cmp	r3, #0
   46384:	d0fb      	beq.n	4637e <nvmc_wait+0x2>
}
   46386:	4770      	bx	lr
   46388:	4001e000 	.word	0x4001e000

0004638c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   4638c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   4638e:	f00a fc39 	bl	50c04 <nrf52_errata_136>
   46392:	b140      	cbz	r0, 463a6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   46394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46398:	2200      	movs	r2, #0
   4639a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   4639e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   463a2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   463a6:	f00a fc2d 	bl	50c04 <nrf52_errata_136>
   463aa:	2800      	cmp	r0, #0
   463ac:	d046      	beq.n	4643c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   463ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   463b2:	4b60      	ldr	r3, [pc, #384]	; (46534 <SystemInit+0x1a8>)
   463b4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   463b8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   463bc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   463c0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   463c4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   463c8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   463cc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   463d0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   463d4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   463d8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   463dc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   463e0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   463e4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   463e8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   463ec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   463f0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   463f4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   463f8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   463fc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   46400:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   46404:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   46408:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   4640c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   46410:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   46414:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   46418:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   4641c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   46420:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   46424:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   46428:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   4642c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   46430:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   46434:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   46438:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   4643c:	f7ff ff8c 	bl	46358 <nrf52_errata_103>
   46440:	b118      	cbz	r0, 4644a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   46442:	4b3d      	ldr	r3, [pc, #244]	; (46538 <SystemInit+0x1ac>)
   46444:	4a3d      	ldr	r2, [pc, #244]	; (4653c <SystemInit+0x1b0>)
   46446:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   4644a:	f7ff ff85 	bl	46358 <nrf52_errata_103>
   4644e:	b118      	cbz	r0, 46458 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   46450:	4b3b      	ldr	r3, [pc, #236]	; (46540 <SystemInit+0x1b4>)
   46452:	22fb      	movs	r2, #251	; 0xfb
   46454:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   46458:	f7ff ff7e 	bl	46358 <nrf52_errata_103>
   4645c:	b170      	cbz	r0, 4647c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   4645e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   46462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   46466:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   4646a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   4646e:	f022 020f 	bic.w	r2, r2, #15
   46472:	f003 030f 	and.w	r3, r3, #15
   46476:	4313      	orrs	r3, r2
   46478:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   4647c:	f7ff ff6c 	bl	46358 <nrf52_errata_103>
   46480:	b120      	cbz	r0, 4648c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   46482:	4b30      	ldr	r3, [pc, #192]	; (46544 <SystemInit+0x1b8>)
   46484:	f44f 7200 	mov.w	r2, #512	; 0x200
   46488:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   4648c:	f00a fbba 	bl	50c04 <nrf52_errata_136>
   46490:	b148      	cbz	r0, 464a6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   46492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46496:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   4649a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   4649c:	bf44      	itt	mi
   4649e:	f06f 0201 	mvnmi.w	r2, #1
   464a2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   464a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   464aa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   464ae:	2a08      	cmp	r2, #8
   464b0:	d10e      	bne.n	464d0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   464b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   464b6:	2b05      	cmp	r3, #5
   464b8:	d802      	bhi.n	464c0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   464ba:	4a23      	ldr	r2, [pc, #140]	; (46548 <SystemInit+0x1bc>)
   464bc:	5cd3      	ldrb	r3, [r2, r3]
   464be:	b13b      	cbz	r3, 464d0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   464c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   464c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   464c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   464cc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   464d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   464d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   464d8:	2a00      	cmp	r2, #0
   464da:	db03      	blt.n	464e4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   464dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   464e0:	2b00      	cmp	r3, #0
   464e2:	da22      	bge.n	4652a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   464e4:	4919      	ldr	r1, [pc, #100]	; (4654c <SystemInit+0x1c0>)
   464e6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   464e8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   464ec:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   464f0:	2412      	movs	r4, #18
    nvmc_wait();
   464f2:	f7ff ff43 	bl	4637c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   464f6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   464fa:	f7ff ff3f 	bl	4637c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   464fe:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   46502:	f7ff ff3b 	bl	4637c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   46506:	2300      	movs	r3, #0
   46508:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   4650c:	f7ff ff36 	bl	4637c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   46510:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   46514:	490e      	ldr	r1, [pc, #56]	; (46550 <SystemInit+0x1c4>)
   46516:	4b0f      	ldr	r3, [pc, #60]	; (46554 <SystemInit+0x1c8>)
   46518:	68ca      	ldr	r2, [r1, #12]
   4651a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   4651e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   46520:	60cb      	str	r3, [r1, #12]
   46522:	f3bf 8f4f 	dsb	sy
    __NOP();
   46526:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   46528:	e7fd      	b.n	46526 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   4652a:	4b0b      	ldr	r3, [pc, #44]	; (46558 <SystemInit+0x1cc>)
   4652c:	4a0b      	ldr	r2, [pc, #44]	; (4655c <SystemInit+0x1d0>)
   4652e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   46530:	bd10      	pop	{r4, pc}
   46532:	bf00      	nop
   46534:	4000c000 	.word	0x4000c000
   46538:	40005000 	.word	0x40005000
   4653c:	00038148 	.word	0x00038148
   46540:	4000f000 	.word	0x4000f000
   46544:	40029000 	.word	0x40029000
   46548:	00056b69 	.word	0x00056b69
   4654c:	4001e000 	.word	0x4001e000
   46550:	e000ed00 	.word	0xe000ed00
   46554:	05fa0004 	.word	0x05fa0004
   46558:	20000fc0 	.word	0x20000fc0
   4655c:	03d09000 	.word	0x03d09000

00046560 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   46560:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   46562:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   46564:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   46566:	fab2 f382 	clz	r3, r2
   4656a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   4656e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   46570:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   46572:	d014      	beq.n	4659e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   46574:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   46578:	fa05 f303 	lsl.w	r3, r5, r3
   4657c:	ea22 0303 	bic.w	r3, r2, r3
   46580:	e850 6f00 	ldrex	r6, [r0]
   46584:	4296      	cmp	r6, r2
   46586:	d104      	bne.n	46592 <nrfx_flag32_alloc+0x32>
   46588:	e840 3c00 	strex	ip, r3, [r0]
   4658c:	f1bc 0f00 	cmp.w	ip, #0
   46590:	d1f6      	bne.n	46580 <nrfx_flag32_alloc+0x20>
   46592:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   46596:	d1e5      	bne.n	46564 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   46598:	4802      	ldr	r0, [pc, #8]	; (465a4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   4659a:	700c      	strb	r4, [r1, #0]
}
   4659c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   4659e:	4802      	ldr	r0, [pc, #8]	; (465a8 <nrfx_flag32_alloc+0x48>)
   465a0:	e7fc      	b.n	4659c <nrfx_flag32_alloc+0x3c>
   465a2:	bf00      	nop
   465a4:	0bad0000 	.word	0x0bad0000
   465a8:	0bad0002 	.word	0x0bad0002

000465ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   465ac:	6803      	ldr	r3, [r0, #0]
   465ae:	40cb      	lsrs	r3, r1
   465b0:	07db      	lsls	r3, r3, #31
{
   465b2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   465b4:	d415      	bmi.n	465e2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   465b6:	2301      	movs	r3, #1
   465b8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   465bc:	6803      	ldr	r3, [r0, #0]
   465be:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   465c2:	ea41 0203 	orr.w	r2, r1, r3
   465c6:	e850 4f00 	ldrex	r4, [r0]
   465ca:	429c      	cmp	r4, r3
   465cc:	d104      	bne.n	465d8 <nrfx_flag32_free+0x2c>
   465ce:	e840 2c00 	strex	ip, r2, [r0]
   465d2:	f1bc 0f00 	cmp.w	ip, #0
   465d6:	d1f6      	bne.n	465c6 <nrfx_flag32_free+0x1a>
   465d8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   465dc:	d1ee      	bne.n	465bc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   465de:	4802      	ldr	r0, [pc, #8]	; (465e8 <nrfx_flag32_free+0x3c>)
}
   465e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   465e2:	4802      	ldr	r0, [pc, #8]	; (465ec <nrfx_flag32_free+0x40>)
   465e4:	e7fc      	b.n	465e0 <nrfx_flag32_free+0x34>
   465e6:	bf00      	nop
   465e8:	0bad0000 	.word	0x0bad0000
   465ec:	0bad0004 	.word	0x0bad0004

000465f0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   465f0:	4b04      	ldr	r3, [pc, #16]	; (46604 <nrfx_clock_init+0x14>)
   465f2:	791a      	ldrb	r2, [r3, #4]
   465f4:	b922      	cbnz	r2, 46600 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   465f6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   465f8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   465fa:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   465fc:	4802      	ldr	r0, [pc, #8]	; (46608 <nrfx_clock_init+0x18>)
   465fe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   46600:	4802      	ldr	r0, [pc, #8]	; (4660c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   46602:	4770      	bx	lr
   46604:	200071e4 	.word	0x200071e4
   46608:	0bad0000 	.word	0x0bad0000
   4660c:	0bad000c 	.word	0x0bad000c

00046610 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   46610:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   46612:	2000      	movs	r0, #0
   46614:	f7e6 fe7a 	bl	2d30c <arch_irq_is_enabled>
   46618:	b908      	cbnz	r0, 4661e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   4661a:	f7e6 fe53 	bl	2d2c4 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   4661e:	4b02      	ldr	r3, [pc, #8]	; (46628 <nrfx_clock_enable+0x18>)
   46620:	2201      	movs	r2, #1
   46622:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   46624:	bd08      	pop	{r3, pc}
   46626:	bf00      	nop
   46628:	2000779b 	.word	0x2000779b

0004662c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   4662c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   4662e:	b110      	cbz	r0, 46636 <nrfx_clock_stop+0xa>
   46630:	2801      	cmp	r0, #1
   46632:	d017      	beq.n	46664 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   46634:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   46636:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   4663a:	2302      	movs	r3, #2
   4663c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46640:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   46644:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46648:	2301      	movs	r3, #1
   4664a:	60e3      	str	r3, [r4, #12]
   4664c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   46650:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   46654:	03db      	lsls	r3, r3, #15
   46656:	d5ed      	bpl.n	46634 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   46658:	2001      	movs	r0, #1
   4665a:	f00a fadd 	bl	50c18 <nrfx_busy_wait>
   4665e:	3d01      	subs	r5, #1
   46660:	d1f6      	bne.n	46650 <nrfx_clock_stop+0x24>
   46662:	e7e7      	b.n	46634 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   46664:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46668:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   4666a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4666e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   46672:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46676:	6060      	str	r0, [r4, #4]
   46678:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4667c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   46680:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   46684:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   46686:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4668a:	d505      	bpl.n	46698 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   4668c:	b123      	cbz	r3, 46698 <nrfx_clock_stop+0x6c>
   4668e:	2001      	movs	r0, #1
   46690:	f00a fac2 	bl	50c18 <nrfx_busy_wait>
   46694:	3d01      	subs	r5, #1
   46696:	d1f1      	bne.n	4667c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   46698:	4b01      	ldr	r3, [pc, #4]	; (466a0 <nrfx_clock_stop+0x74>)
   4669a:	2200      	movs	r2, #0
   4669c:	715a      	strb	r2, [r3, #5]
   4669e:	e7c9      	b.n	46634 <nrfx_clock_stop+0x8>
   466a0:	200071e4 	.word	0x200071e4

000466a4 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   466a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   466a8:	b510      	push	{r4, lr}
   466aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   466ae:	b16a      	cbz	r2, 466cc <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   466b0:	2200      	movs	r2, #0
   466b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   466b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   466ba:	2201      	movs	r2, #1
   466bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   466c0:	4b11      	ldr	r3, [pc, #68]	; (46708 <nrfx_clock_irq_handler+0x64>)
   466c2:	7958      	ldrb	r0, [r3, #5]
   466c4:	b910      	cbnz	r0, 466cc <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   466c6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   466c8:	681b      	ldr	r3, [r3, #0]
   466ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   466cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   466d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   466d4:	b172      	cbz	r2, 466f4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   466d6:	2200      	movs	r2, #0
   466d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   466dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   466e0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   466e4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   466e8:	0792      	lsls	r2, r2, #30
   466ea:	d104      	bne.n	466f6 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   466ec:	2201      	movs	r2, #1
   466ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   466f2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   466f4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   466f6:	2202      	movs	r2, #2
   466f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   466fc:	4b02      	ldr	r3, [pc, #8]	; (46708 <nrfx_clock_irq_handler+0x64>)
}
   466fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   46702:	681b      	ldr	r3, [r3, #0]
   46704:	2001      	movs	r0, #1
   46706:	4718      	bx	r3
   46708:	200071e4 	.word	0x200071e4

0004670c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   4670c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   4670e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   46712:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   46714:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   46716:	6002      	str	r2, [r0, #0]
}
   46718:	4802      	ldr	r0, [pc, #8]	; (46724 <nrf_gpio_pin_port_decode+0x18>)
   4671a:	bf18      	it	ne
   4671c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   46720:	4770      	bx	lr
   46722:	bf00      	nop
   46724:	50000300 	.word	0x50000300

00046728 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46728:	4b03      	ldr	r3, [pc, #12]	; (46738 <pin_in_use_by_te+0x10>)
   4672a:	3008      	adds	r0, #8
   4672c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   46730:	f3c0 1040 	ubfx	r0, r0, #5, #1
   46734:	4770      	bx	lr
   46736:	bf00      	nop
   46738:	20000fc4 	.word	0x20000fc4

0004673c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   4673c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4673e:	f100 0308 	add.w	r3, r0, #8
   46742:	4c0c      	ldr	r4, [pc, #48]	; (46774 <call_handler+0x38>)
   46744:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   46748:	05da      	lsls	r2, r3, #23
{
   4674a:	4605      	mov	r5, r0
   4674c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4674e:	d507      	bpl.n	46760 <call_handler+0x24>
   46750:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   46754:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   46758:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   4675c:	6852      	ldr	r2, [r2, #4]
   4675e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   46760:	68a3      	ldr	r3, [r4, #8]
   46762:	b12b      	cbz	r3, 46770 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   46764:	68e2      	ldr	r2, [r4, #12]
   46766:	4631      	mov	r1, r6
   46768:	4628      	mov	r0, r5
    }
}
   4676a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   4676e:	4718      	bx	r3
}
   46770:	bd70      	pop	{r4, r5, r6, pc}
   46772:	bf00      	nop
   46774:	20000fc4 	.word	0x20000fc4

00046778 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   46778:	4a12      	ldr	r2, [pc, #72]	; (467c4 <release_handler+0x4c>)
   4677a:	3008      	adds	r0, #8
{
   4677c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4677e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   46782:	05d9      	lsls	r1, r3, #23
   46784:	d51b      	bpl.n	467be <release_handler+0x46>
   46786:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   4678a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   4678e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   46792:	f102 0410 	add.w	r4, r2, #16
   46796:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   46798:	f834 3b02 	ldrh.w	r3, [r4], #2
   4679c:	f413 7f80 	tst.w	r3, #256	; 0x100
   467a0:	d003      	beq.n	467aa <release_handler+0x32>
   467a2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   467a6:	4299      	cmp	r1, r3
   467a8:	d009      	beq.n	467be <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   467aa:	3001      	adds	r0, #1
   467ac:	2830      	cmp	r0, #48	; 0x30
   467ae:	d1f3      	bne.n	46798 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   467b0:	2300      	movs	r3, #0
   467b2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   467b6:	4804      	ldr	r0, [pc, #16]	; (467c8 <release_handler+0x50>)
}
   467b8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   467ba:	f7ff bef7 	b.w	465ac <nrfx_flag32_free>
}
   467be:	bc10      	pop	{r4}
   467c0:	4770      	bx	lr
   467c2:	bf00      	nop
   467c4:	20000fc4 	.word	0x20000fc4
   467c8:	20001038 	.word	0x20001038

000467cc <pin_handler_trigger_uninit>:
{
   467cc:	b538      	push	{r3, r4, r5, lr}
   467ce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   467d0:	f7ff ffaa 	bl	46728 <pin_in_use_by_te>
   467d4:	4c09      	ldr	r4, [pc, #36]	; (467fc <pin_handler_trigger_uninit+0x30>)
   467d6:	f102 0508 	add.w	r5, r2, #8
   467da:	b140      	cbz	r0, 467ee <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   467dc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   467e0:	4907      	ldr	r1, [pc, #28]	; (46800 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   467e2:	0b5b      	lsrs	r3, r3, #13
   467e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   467e8:	2000      	movs	r0, #0
   467ea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   467ee:	4610      	mov	r0, r2
   467f0:	f7ff ffc2 	bl	46778 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   467f4:	2300      	movs	r3, #0
   467f6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   467fa:	bd38      	pop	{r3, r4, r5, pc}
   467fc:	20000fc4 	.word	0x20000fc4
   46800:	40006000 	.word	0x40006000

00046804 <nrfx_gpiote_input_configure>:
{
   46804:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   46808:	4604      	mov	r4, r0
   4680a:	4617      	mov	r7, r2
   4680c:	461d      	mov	r5, r3
    if (p_input_config)
   4680e:	b321      	cbz	r1, 4685a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46810:	4e4e      	ldr	r6, [pc, #312]	; (4694c <nrfx_gpiote_input_configure+0x148>)
   46812:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   46816:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   4681a:	079b      	lsls	r3, r3, #30
   4681c:	d506      	bpl.n	4682c <nrfx_gpiote_input_configure+0x28>
   4681e:	f7ff ff83 	bl	46728 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   46822:	b118      	cbz	r0, 4682c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   46824:	484a      	ldr	r0, [pc, #296]	; (46950 <nrfx_gpiote_input_configure+0x14c>)
}
   46826:	b004      	add	sp, #16
   46828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   4682c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   4682e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   46832:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   46836:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   4683a:	f10d 020f 	add.w	r2, sp, #15
   4683e:	460b      	mov	r3, r1
   46840:	4620      	mov	r0, r4
   46842:	f10d 010e 	add.w	r1, sp, #14
   46846:	f00a fa15 	bl	50c74 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   4684a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   4684e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   46852:	f043 0301 	orr.w	r3, r3, #1
   46856:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   4685a:	b197      	cbz	r7, 46882 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4685c:	4b3b      	ldr	r3, [pc, #236]	; (4694c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   4685e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   46860:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46862:	f104 0008 	add.w	r0, r4, #8
   46866:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   4686a:	078f      	lsls	r7, r1, #30
   4686c:	d50c      	bpl.n	46888 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   4686e:	2a00      	cmp	r2, #0
   46870:	d1d8      	bne.n	46824 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   46872:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   46876:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   4687a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   4687e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   46882:	bbcd      	cbnz	r5, 468f8 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   46884:	4833      	ldr	r0, [pc, #204]	; (46954 <nrfx_gpiote_input_configure+0x150>)
   46886:	e7ce      	b.n	46826 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   46888:	f021 0120 	bic.w	r1, r1, #32
   4688c:	04c9      	lsls	r1, r1, #19
   4688e:	0cc9      	lsrs	r1, r1, #19
   46890:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   46894:	2a00      	cmp	r2, #0
   46896:	d0ec      	beq.n	46872 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   46898:	2e03      	cmp	r6, #3
   4689a:	d8c3      	bhi.n	46824 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   4689c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   4689e:	b92e      	cbnz	r6, 468ac <nrfx_gpiote_input_configure+0xa8>
   468a0:	4a2d      	ldr	r2, [pc, #180]	; (46958 <nrfx_gpiote_input_configure+0x154>)
   468a2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   468a6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   468aa:	e7e2      	b.n	46872 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   468ac:	00ba      	lsls	r2, r7, #2
   468ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   468b2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   468b6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   468ba:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   468be:	f02c 0c03 	bic.w	ip, ip, #3
   468c2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   468c6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   468ca:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   468ce:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   468d2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   468d6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   468da:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   468de:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   468e2:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   468e6:	ea4c 0c0e 	orr.w	ip, ip, lr
   468ea:	f041 0120 	orr.w	r1, r1, #32
   468ee:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   468f2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   468f6:	e7bc      	b.n	46872 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   468f8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   468fc:	4620      	mov	r0, r4
   468fe:	f7ff ff3b 	bl	46778 <release_handler>
    if (!handler)
   46902:	2e00      	cmp	r6, #0
   46904:	d0be      	beq.n	46884 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   46906:	4d11      	ldr	r5, [pc, #68]	; (4694c <nrfx_gpiote_input_configure+0x148>)
   46908:	682b      	ldr	r3, [r5, #0]
   4690a:	429e      	cmp	r6, r3
   4690c:	d104      	bne.n	46918 <nrfx_gpiote_input_configure+0x114>
   4690e:	686b      	ldr	r3, [r5, #4]
   46910:	429f      	cmp	r7, r3
   46912:	d101      	bne.n	46918 <nrfx_gpiote_input_configure+0x114>
   46914:	2200      	movs	r2, #0
   46916:	e00a      	b.n	4692e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   46918:	4810      	ldr	r0, [pc, #64]	; (4695c <nrfx_gpiote_input_configure+0x158>)
   4691a:	f10d 010f 	add.w	r1, sp, #15
   4691e:	f7ff fe1f 	bl	46560 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   46922:	4b0c      	ldr	r3, [pc, #48]	; (46954 <nrfx_gpiote_input_configure+0x150>)
   46924:	4298      	cmp	r0, r3
   46926:	f47f af7e 	bne.w	46826 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   4692a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   4692e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   46932:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   46936:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   46938:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4693a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   4693e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   46942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   46946:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   4694a:	e79b      	b.n	46884 <nrfx_gpiote_input_configure+0x80>
   4694c:	20000fc4 	.word	0x20000fc4
   46950:	0bad0004 	.word	0x0bad0004
   46954:	0bad0000 	.word	0x0bad0000
   46958:	40006000 	.word	0x40006000
   4695c:	20001038 	.word	0x20001038

00046960 <nrfx_gpiote_output_configure>:
{
   46960:	b5f0      	push	{r4, r5, r6, r7, lr}
   46962:	4604      	mov	r4, r0
   46964:	b085      	sub	sp, #20
   46966:	4615      	mov	r5, r2
    if (p_config)
   46968:	b319      	cbz	r1, 469b2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4696a:	4e33      	ldr	r6, [pc, #204]	; (46a38 <nrfx_gpiote_output_configure+0xd8>)
   4696c:	f100 0708 	add.w	r7, r0, #8
   46970:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   46974:	0793      	lsls	r3, r2, #30
   46976:	d403      	bmi.n	46980 <nrfx_gpiote_output_configure+0x20>
   46978:	f7ff fed6 	bl	46728 <pin_in_use_by_te>
   4697c:	2800      	cmp	r0, #0
   4697e:	d158      	bne.n	46a32 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   46980:	f012 0f1c 	tst.w	r2, #28
   46984:	d002      	beq.n	4698c <nrfx_gpiote_output_configure+0x2c>
   46986:	784b      	ldrb	r3, [r1, #1]
   46988:	2b01      	cmp	r3, #1
   4698a:	d052      	beq.n	46a32 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   4698c:	2301      	movs	r3, #1
   4698e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   46992:	2300      	movs	r3, #0
   46994:	e9cd 1300 	strd	r1, r3, [sp]
   46998:	1c4a      	adds	r2, r1, #1
   4699a:	1c8b      	adds	r3, r1, #2
   4699c:	4620      	mov	r0, r4
   4699e:	f10d 010f 	add.w	r1, sp, #15
   469a2:	f00a f967 	bl	50c74 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   469a6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   469aa:	f043 0303 	orr.w	r3, r3, #3
   469ae:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   469b2:	b915      	cbnz	r5, 469ba <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   469b4:	4821      	ldr	r0, [pc, #132]	; (46a3c <nrfx_gpiote_output_configure+0xdc>)
}
   469b6:	b005      	add	sp, #20
   469b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   469ba:	4e1f      	ldr	r6, [pc, #124]	; (46a38 <nrfx_gpiote_output_configure+0xd8>)
   469bc:	f104 0708 	add.w	r7, r4, #8
   469c0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   469c4:	0783      	lsls	r3, r0, #30
   469c6:	d534      	bpl.n	46a32 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   469c8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   469cc:	4661      	mov	r1, ip
   469ce:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   469d0:	f020 0020 	bic.w	r0, r0, #32
   469d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   469d8:	04c0      	lsls	r0, r0, #19
   469da:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   469de:	0cc0      	lsrs	r0, r0, #19
   469e0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   469e4:	2300      	movs	r3, #0
   469e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   469ea:	786a      	ldrb	r2, [r5, #1]
   469ec:	2a00      	cmp	r2, #0
   469ee:	d0e1      	beq.n	469b4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   469f0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   469f4:	78ad      	ldrb	r5, [r5, #2]
   469f6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   469fa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   469fe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46a02:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   46a06:	0223      	lsls	r3, r4, #8
   46a08:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   46a0c:	0412      	lsls	r2, r2, #16
   46a0e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46a12:	ea43 030e 	orr.w	r3, r3, lr
   46a16:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   46a18:	052a      	lsls	r2, r5, #20
   46a1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   46a1e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46a22:	4313      	orrs	r3, r2
   46a24:	f040 0020 	orr.w	r0, r0, #32
   46a28:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   46a2c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   46a30:	e7c0      	b.n	469b4 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   46a32:	4803      	ldr	r0, [pc, #12]	; (46a40 <nrfx_gpiote_output_configure+0xe0>)
   46a34:	e7bf      	b.n	469b6 <nrfx_gpiote_output_configure+0x56>
   46a36:	bf00      	nop
   46a38:	20000fc4 	.word	0x20000fc4
   46a3c:	0bad0000 	.word	0x0bad0000
   46a40:	0bad0004 	.word	0x0bad0004

00046a44 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   46a44:	4b01      	ldr	r3, [pc, #4]	; (46a4c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   46a46:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   46a4a:	4770      	bx	lr
   46a4c:	20000fc4 	.word	0x20000fc4

00046a50 <nrfx_gpiote_channel_get>:
{
   46a50:	b508      	push	{r3, lr}
   46a52:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   46a54:	f7ff fe68 	bl	46728 <pin_in_use_by_te>
   46a58:	b138      	cbz	r0, 46a6a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46a5a:	4b05      	ldr	r3, [pc, #20]	; (46a70 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   46a5c:	4805      	ldr	r0, [pc, #20]	; (46a74 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46a5e:	3208      	adds	r2, #8
   46a60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   46a64:	0b5b      	lsrs	r3, r3, #13
   46a66:	700b      	strb	r3, [r1, #0]
}
   46a68:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   46a6a:	4803      	ldr	r0, [pc, #12]	; (46a78 <nrfx_gpiote_channel_get+0x28>)
   46a6c:	e7fc      	b.n	46a68 <nrfx_gpiote_channel_get+0x18>
   46a6e:	bf00      	nop
   46a70:	20000fc4 	.word	0x20000fc4
   46a74:	0bad0000 	.word	0x0bad0000
   46a78:	0bad0004 	.word	0x0bad0004

00046a7c <nrfx_gpiote_init>:
{
   46a7c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   46a7e:	4c0f      	ldr	r4, [pc, #60]	; (46abc <nrfx_gpiote_init+0x40>)
   46a80:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   46a84:	b9bd      	cbnz	r5, 46ab6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   46a86:	2260      	movs	r2, #96	; 0x60
   46a88:	4629      	mov	r1, r5
   46a8a:	f104 0010 	add.w	r0, r4, #16
   46a8e:	f005 fe1d 	bl	4c6cc <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   46a92:	2006      	movs	r0, #6
   46a94:	f7e6 fc16 	bl	2d2c4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46a98:	4b09      	ldr	r3, [pc, #36]	; (46ac0 <nrfx_gpiote_init+0x44>)
    return err_code;
   46a9a:	480a      	ldr	r0, [pc, #40]	; (46ac4 <nrfx_gpiote_init+0x48>)
   46a9c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   46aa0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   46aa4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   46aa8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   46aac:	2301      	movs	r3, #1
   46aae:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   46ab2:	6763      	str	r3, [r4, #116]	; 0x74
}
   46ab4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   46ab6:	4804      	ldr	r0, [pc, #16]	; (46ac8 <nrfx_gpiote_init+0x4c>)
   46ab8:	e7fc      	b.n	46ab4 <nrfx_gpiote_init+0x38>
   46aba:	bf00      	nop
   46abc:	20000fc4 	.word	0x20000fc4
   46ac0:	40006000 	.word	0x40006000
   46ac4:	0bad0000 	.word	0x0bad0000
   46ac8:	0bad0005 	.word	0x0bad0005

00046acc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   46acc:	4b03      	ldr	r3, [pc, #12]	; (46adc <nrfx_gpiote_is_init+0x10>)
   46ace:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   46ad2:	3800      	subs	r0, #0
   46ad4:	bf18      	it	ne
   46ad6:	2001      	movne	r0, #1
   46ad8:	4770      	bx	lr
   46ada:	bf00      	nop
   46adc:	20000fc4 	.word	0x20000fc4

00046ae0 <nrfx_gpiote_channel_free>:
{
   46ae0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   46ae2:	4801      	ldr	r0, [pc, #4]	; (46ae8 <nrfx_gpiote_channel_free+0x8>)
   46ae4:	f7ff bd62 	b.w	465ac <nrfx_flag32_free>
   46ae8:	20001034 	.word	0x20001034

00046aec <nrfx_gpiote_channel_alloc>:
{
   46aec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   46aee:	4801      	ldr	r0, [pc, #4]	; (46af4 <nrfx_gpiote_channel_alloc+0x8>)
   46af0:	f7ff bd36 	b.w	46560 <nrfx_flag32_alloc>
   46af4:	20001034 	.word	0x20001034

00046af8 <nrfx_gpiote_trigger_enable>:
{
   46af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46afa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46afc:	f7ff fe14 	bl	46728 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46b00:	f104 0208 	add.w	r2, r4, #8
   46b04:	4b1e      	ldr	r3, [pc, #120]	; (46b80 <nrfx_gpiote_trigger_enable+0x88>)
   46b06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46b0a:	b1e8      	cbz	r0, 46b48 <nrfx_gpiote_trigger_enable+0x50>
   46b0c:	f013 0502 	ands.w	r5, r3, #2
   46b10:	d11a      	bne.n	46b48 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46b12:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   46b14:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   46b16:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   46b1a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   46b1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   46b22:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46b26:	6005      	str	r5, [r0, #0]
   46b28:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   46b2a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   46b2e:	f040 0001 	orr.w	r0, r0, #1
   46b32:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   46b36:	b129      	cbz	r1, 46b44 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   46b38:	2201      	movs	r2, #1
   46b3a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   46b3e:	4a11      	ldr	r2, [pc, #68]	; (46b84 <nrfx_gpiote_trigger_enable+0x8c>)
   46b40:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   46b44:	b003      	add	sp, #12
   46b46:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46b48:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   46b4c:	2b04      	cmp	r3, #4
   46b4e:	d012      	beq.n	46b76 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   46b50:	2b05      	cmp	r3, #5
   46b52:	d012      	beq.n	46b7a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46b54:	a801      	add	r0, sp, #4
   46b56:	9401      	str	r4, [sp, #4]
   46b58:	f7ff fdd8 	bl	4670c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   46b5c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   46b5e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   46b62:	40d9      	lsrs	r1, r3
   46b64:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46b68:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   46b6a:	4620      	mov	r0, r4
}
   46b6c:	b003      	add	sp, #12
   46b6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   46b72:	f00a b8c6 	b.w	50d02 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   46b76:	2103      	movs	r1, #3
   46b78:	e7f7      	b.n	46b6a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   46b7a:	2102      	movs	r1, #2
   46b7c:	e7f5      	b.n	46b6a <nrfx_gpiote_trigger_enable+0x72>
   46b7e:	bf00      	nop
   46b80:	20000fc4 	.word	0x20000fc4
   46b84:	40006000 	.word	0x40006000

00046b88 <nrfx_gpiote_trigger_disable>:
{
   46b88:	b508      	push	{r3, lr}
   46b8a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46b8c:	f7ff fdcc 	bl	46728 <pin_in_use_by_te>
   46b90:	b1c0      	cbz	r0, 46bc4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46b92:	f102 0108 	add.w	r1, r2, #8
   46b96:	4b0e      	ldr	r3, [pc, #56]	; (46bd0 <nrfx_gpiote_trigger_disable+0x48>)
   46b98:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46b9c:	0799      	lsls	r1, r3, #30
   46b9e:	d411      	bmi.n	46bc4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46ba0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   46ba2:	2201      	movs	r2, #1
   46ba4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   46ba6:	009b      	lsls	r3, r3, #2
   46ba8:	490a      	ldr	r1, [pc, #40]	; (46bd4 <nrfx_gpiote_trigger_disable+0x4c>)
   46baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46bae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   46bb2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   46bb6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   46bba:	f022 0203 	bic.w	r2, r2, #3
   46bbe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   46bc2:	bd08      	pop	{r3, pc}
   46bc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   46bc8:	2100      	movs	r1, #0
   46bca:	4610      	mov	r0, r2
   46bcc:	f00a b899 	b.w	50d02 <nrf_gpio_cfg_sense_set>
   46bd0:	20000fc4 	.word	0x20000fc4
   46bd4:	40006000 	.word	0x40006000

00046bd8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   46bd8:	4b0e      	ldr	r3, [pc, #56]	; (46c14 <nrfx_gpiote_pin_uninit+0x3c>)
   46bda:	f100 0208 	add.w	r2, r0, #8
{
   46bde:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   46be0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   46be4:	07db      	lsls	r3, r3, #31
{
   46be6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   46be8:	d511      	bpl.n	46c0e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   46bea:	f7ff ffcd 	bl	46b88 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   46bee:	4620      	mov	r0, r4
   46bf0:	f7ff fdec 	bl	467cc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46bf4:	a801      	add	r0, sp, #4
   46bf6:	9401      	str	r4, [sp, #4]
   46bf8:	f7ff fd88 	bl	4670c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   46bfc:	9b01      	ldr	r3, [sp, #4]
   46bfe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46c02:	2202      	movs	r2, #2
   46c04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   46c08:	4803      	ldr	r0, [pc, #12]	; (46c18 <nrfx_gpiote_pin_uninit+0x40>)
}
   46c0a:	b002      	add	sp, #8
   46c0c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   46c0e:	4803      	ldr	r0, [pc, #12]	; (46c1c <nrfx_gpiote_pin_uninit+0x44>)
   46c10:	e7fb      	b.n	46c0a <nrfx_gpiote_pin_uninit+0x32>
   46c12:	bf00      	nop
   46c14:	20000fc4 	.word	0x20000fc4
   46c18:	0bad0000 	.word	0x0bad0000
   46c1c:	0bad0004 	.word	0x0bad0004

00046c20 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   46c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46c24:	4b64      	ldr	r3, [pc, #400]	; (46db8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   46c26:	4865      	ldr	r0, [pc, #404]	; (46dbc <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46c28:	4965      	ldr	r1, [pc, #404]	; (46dc0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   46c2a:	2600      	movs	r6, #0
{
   46c2c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   46c2e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46c30:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46c32:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   46c34:	b135      	cbz	r5, 46c44 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   46c36:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   46c3a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46c3c:	bf1e      	ittt	ne
   46c3e:	601c      	strne	r4, [r3, #0]
   46c40:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   46c42:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46c44:	3304      	adds	r3, #4
   46c46:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   46c48:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46c4c:	d1f1      	bne.n	46c32 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46c4e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 46dbc <nrfx_gpiote_irq_handler+0x19c>
   46c52:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   46c56:	2b00      	cmp	r3, #0
   46c58:	f000 8091 	beq.w	46d7e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   46c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   46c60:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   46c64:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46c66:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46c6a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   46c6e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   46c70:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   46c74:	2700      	movs	r7, #0
            while (latch[i])
   46c76:	f10d 0910 	add.w	r9, sp, #16
   46c7a:	017b      	lsls	r3, r7, #5
   46c7c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   46c7e:	f04f 0a01 	mov.w	sl, #1
   46c82:	e049      	b.n	46d18 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   46c84:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46c86:	4a4f      	ldr	r2, [pc, #316]	; (46dc4 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   46c88:	fa94 f4a4 	rbit	r4, r4
   46c8c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   46c90:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46c92:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   46c96:	08e0      	lsrs	r0, r4, #3
   46c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   46c9c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   46c9e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   46ca2:	fa0a fc02 	lsl.w	ip, sl, r2
   46ca6:	f819 2000 	ldrb.w	r2, [r9, r0]
   46caa:	ea22 020c 	bic.w	r2, r2, ip
   46cae:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46cb2:	a803      	add	r0, sp, #12
   46cb4:	f3c3 0582 	ubfx	r5, r3, #2, #3
   46cb8:	0899      	lsrs	r1, r3, #2
   46cba:	f7ff fd27 	bl	4670c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46cbe:	9a03      	ldr	r2, [sp, #12]
   46cc0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   46cc4:	074b      	lsls	r3, r1, #29
   46cc6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46cca:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   46ccc:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   46cd0:	d529      	bpl.n	46d26 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   46cd2:	4620      	mov	r0, r4
   46cd4:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46cd6:	b2d5      	uxtb	r5, r2
   46cd8:	f7ff fd30 	bl	4673c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46cdc:	a803      	add	r0, sp, #12
   46cde:	9403      	str	r4, [sp, #12]
   46ce0:	f7ff fd14 	bl	4670c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46ce4:	9b03      	ldr	r3, [sp, #12]
   46ce6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46cea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   46cee:	f3c3 4301 	ubfx	r3, r3, #16, #2
   46cf2:	429d      	cmp	r5, r3
   46cf4:	d107      	bne.n	46d06 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   46cf6:	2100      	movs	r1, #0
   46cf8:	4620      	mov	r0, r4
   46cfa:	f00a f802 	bl	50d02 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   46cfe:	4629      	mov	r1, r5
   46d00:	4620      	mov	r0, r4
   46d02:	f009 fffe 	bl	50d02 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46d06:	a803      	add	r0, sp, #12
   46d08:	9403      	str	r4, [sp, #12]
   46d0a:	f7ff fcff 	bl	4670c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   46d0e:	9b03      	ldr	r3, [sp, #12]
   46d10:	fa0a f303 	lsl.w	r3, sl, r3
   46d14:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   46d18:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   46d1c:	2c00      	cmp	r4, #0
   46d1e:	d1b1      	bne.n	46c84 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   46d20:	b9cf      	cbnz	r7, 46d56 <nrfx_gpiote_irq_handler+0x136>
   46d22:	2701      	movs	r7, #1
   46d24:	e7a9      	b.n	46c7a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46d26:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46d28:	bf0c      	ite	eq
   46d2a:	2103      	moveq	r1, #3
   46d2c:	2102      	movne	r1, #2
   46d2e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46d30:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46d32:	f009 ffe6 	bl	50d02 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   46d36:	2d03      	cmp	r5, #3
   46d38:	d004      	beq.n	46d44 <nrfx_gpiote_irq_handler+0x124>
   46d3a:	9a01      	ldr	r2, [sp, #4]
   46d3c:	2a02      	cmp	r2, #2
   46d3e:	d106      	bne.n	46d4e <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   46d40:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   46d42:	d1e0      	bne.n	46d06 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   46d44:	4659      	mov	r1, fp
   46d46:	4620      	mov	r0, r4
   46d48:	f7ff fcf8 	bl	4673c <call_handler>
   46d4c:	e7db      	b.n	46d06 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   46d4e:	2a03      	cmp	r2, #3
   46d50:	d1d9      	bne.n	46d06 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   46d52:	2d02      	cmp	r5, #2
   46d54:	e7f5      	b.n	46d42 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46d56:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   46d5a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   46d5e:	491a      	ldr	r1, [pc, #104]	; (46dc8 <nrfx_gpiote_irq_handler+0x1a8>)
   46d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   46d64:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   46d68:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46d6a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46d6e:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   46d72:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   46d74:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   46d78:	4313      	orrs	r3, r2
   46d7a:	f47f af7b 	bne.w	46c74 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   46d7e:	2401      	movs	r4, #1
    while (mask)
   46d80:	b916      	cbnz	r6, 46d88 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   46d82:	b007      	add	sp, #28
   46d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   46d88:	fa96 f3a6 	rbit	r3, r6
   46d8c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   46d90:	fa04 f203 	lsl.w	r2, r4, r3
   46d94:	009b      	lsls	r3, r3, #2
   46d96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46d9a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   46d9e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   46da2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   46da6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   46daa:	f3c0 2005 	ubfx	r0, r0, #8, #6
   46dae:	f3c1 4101 	ubfx	r1, r1, #16, #2
   46db2:	f7ff fcc3 	bl	4673c <call_handler>
   46db6:	e7e3      	b.n	46d80 <nrfx_gpiote_irq_handler+0x160>
   46db8:	40006100 	.word	0x40006100
   46dbc:	40006000 	.word	0x40006000
   46dc0:	40006120 	.word	0x40006120
   46dc4:	20000fc4 	.word	0x20000fc4
   46dc8:	50000300 	.word	0x50000300

00046dcc <nvmc_word_write>:
   46dcc:	4a04      	ldr	r2, [pc, #16]	; (46de0 <nvmc_word_write+0x14>)
   46dce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46dd2:	07db      	lsls	r3, r3, #31
   46dd4:	d5fb      	bpl.n	46dce <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   46dd6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   46dd8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   46ddc:	4770      	bx	lr
   46dde:	bf00      	nop
   46de0:	4001e000 	.word	0x4001e000

00046de4 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   46de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   46de8:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   46dea:	fbb0 f3f2 	udiv	r3, r0, r2
   46dee:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   46df2:	b973      	cbnz	r3, 46e12 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   46df4:	4b08      	ldr	r3, [pc, #32]	; (46e18 <nrfx_nvmc_page_erase+0x34>)
   46df6:	2202      	movs	r2, #2
   46df8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   46dfc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   46e00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46e04:	07d2      	lsls	r2, r2, #31
   46e06:	d5fb      	bpl.n	46e00 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   46e08:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   46e0a:	4804      	ldr	r0, [pc, #16]	; (46e1c <nrfx_nvmc_page_erase+0x38>)
   46e0c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   46e10:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   46e12:	4803      	ldr	r0, [pc, #12]	; (46e20 <nrfx_nvmc_page_erase+0x3c>)
}
   46e14:	4770      	bx	lr
   46e16:	bf00      	nop
   46e18:	4001e000 	.word	0x4001e000
   46e1c:	0bad0000 	.word	0x0bad0000
   46e20:	0bad000a 	.word	0x0bad000a

00046e24 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   46e24:	b510      	push	{r4, lr}
   46e26:	4c05      	ldr	r4, [pc, #20]	; (46e3c <nrfx_nvmc_word_write+0x18>)
   46e28:	2301      	movs	r3, #1
   46e2a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   46e2e:	f7ff ffcd 	bl	46dcc <nvmc_word_write>
   46e32:	2300      	movs	r3, #0
   46e34:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   46e38:	bd10      	pop	{r4, pc}
   46e3a:	bf00      	nop
   46e3c:	4001e000 	.word	0x4001e000

00046e40 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   46e40:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   46e42:	4c18      	ldr	r4, [pc, #96]	; (46ea4 <nrfx_power_init+0x64>)
   46e44:	7823      	ldrb	r3, [r4, #0]
   46e46:	bb53      	cbnz	r3, 46e9e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   46e48:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   46e4a:	0791      	lsls	r1, r2, #30
   46e4c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   46e50:	d511      	bpl.n	46e76 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46e52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46e56:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   46e5a:	2908      	cmp	r1, #8
   46e5c:	d11d      	bne.n	46e9a <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46e5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   46e62:	2b05      	cmp	r3, #5
   46e64:	d819      	bhi.n	46e9a <nrfx_power_init+0x5a>
   46e66:	4910      	ldr	r1, [pc, #64]	; (46ea8 <nrfx_power_init+0x68>)
   46e68:	5cc9      	ldrb	r1, [r1, r3]
   46e6a:	2301      	movs	r3, #1
   46e6c:	b119      	cbz	r1, 46e76 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   46e6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   46e72:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46e76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   46e7a:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46e7e:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   46e82:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   46e84:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   46e88:	f7e6 fa40 	bl	2d30c <arch_irq_is_enabled>
   46e8c:	b908      	cbnz	r0, 46e92 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   46e8e:	f7e6 fa19 	bl	2d2c4 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   46e92:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   46e94:	4805      	ldr	r0, [pc, #20]	; (46eac <nrfx_power_init+0x6c>)
    m_initialized = true;
   46e96:	7023      	strb	r3, [r4, #0]
}
   46e98:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46e9a:	2301      	movs	r3, #1
   46e9c:	e7eb      	b.n	46e76 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   46e9e:	4804      	ldr	r0, [pc, #16]	; (46eb0 <nrfx_power_init+0x70>)
   46ea0:	e7fa      	b.n	46e98 <nrfx_power_init+0x58>
   46ea2:	bf00      	nop
   46ea4:	2000779c 	.word	0x2000779c
   46ea8:	00056b75 	.word	0x00056b75
   46eac:	0bad0000 	.word	0x0bad0000
   46eb0:	0bad000c 	.word	0x0bad000c

00046eb4 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   46eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46eb8:	f44f 7260 	mov.w	r2, #896	; 0x380
   46ebc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   46ec0:	4b01      	ldr	r3, [pc, #4]	; (46ec8 <nrfx_power_usbevt_uninit+0x14>)
   46ec2:	2200      	movs	r2, #0
   46ec4:	601a      	str	r2, [r3, #0]
}
   46ec6:	4770      	bx	lr
   46ec8:	200071f4 	.word	0x200071f4

00046ecc <nrfx_power_usbevt_init>:
{
   46ecc:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   46ece:	f7ff fff1 	bl	46eb4 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   46ed2:	6803      	ldr	r3, [r0, #0]
   46ed4:	b10b      	cbz	r3, 46eda <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   46ed6:	4a01      	ldr	r2, [pc, #4]	; (46edc <nrfx_power_usbevt_init+0x10>)
   46ed8:	6013      	str	r3, [r2, #0]
}
   46eda:	bd08      	pop	{r3, pc}
   46edc:	200071f4 	.word	0x200071f4

00046ee0 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   46ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   46ee4:	b510      	push	{r4, lr}
   46ee6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   46eea:	0762      	lsls	r2, r4, #29
   46eec:	d507      	bpl.n	46efe <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   46eee:	f44f 7084 	mov.w	r0, #264	; 0x108
   46ef2:	f009 ff23 	bl	50d3c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   46ef6:	b110      	cbz	r0, 46efe <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   46ef8:	4b1e      	ldr	r3, [pc, #120]	; (46f74 <nrfx_power_irq_handler+0x94>)
   46efa:	681b      	ldr	r3, [r3, #0]
   46efc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46efe:	06a3      	lsls	r3, r4, #26
   46f00:	d508      	bpl.n	46f14 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   46f02:	f44f 708a 	mov.w	r0, #276	; 0x114
   46f06:	f009 ff19 	bl	50d3c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46f0a:	b118      	cbz	r0, 46f14 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   46f0c:	4b1a      	ldr	r3, [pc, #104]	; (46f78 <nrfx_power_irq_handler+0x98>)
   46f0e:	2000      	movs	r0, #0
   46f10:	681b      	ldr	r3, [r3, #0]
   46f12:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46f14:	0660      	lsls	r0, r4, #25
   46f16:	d508      	bpl.n	46f2a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   46f18:	f44f 708c 	mov.w	r0, #280	; 0x118
   46f1c:	f009 ff0e 	bl	50d3c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46f20:	b118      	cbz	r0, 46f2a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   46f22:	4b15      	ldr	r3, [pc, #84]	; (46f78 <nrfx_power_irq_handler+0x98>)
   46f24:	2001      	movs	r0, #1
   46f26:	681b      	ldr	r3, [r3, #0]
   46f28:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46f2a:	0621      	lsls	r1, r4, #24
   46f2c:	d508      	bpl.n	46f40 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   46f2e:	f44f 708e 	mov.w	r0, #284	; 0x11c
   46f32:	f009 ff03 	bl	50d3c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46f36:	b118      	cbz	r0, 46f40 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   46f38:	4b10      	ldr	r3, [pc, #64]	; (46f7c <nrfx_power_irq_handler+0x9c>)
   46f3a:	2000      	movs	r0, #0
   46f3c:	681b      	ldr	r3, [r3, #0]
   46f3e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46f40:	05e2      	lsls	r2, r4, #23
   46f42:	d508      	bpl.n	46f56 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   46f44:	f44f 7090 	mov.w	r0, #288	; 0x120
   46f48:	f009 fef8 	bl	50d3c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46f4c:	b118      	cbz	r0, 46f56 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   46f4e:	4b0b      	ldr	r3, [pc, #44]	; (46f7c <nrfx_power_irq_handler+0x9c>)
   46f50:	2001      	movs	r0, #1
   46f52:	681b      	ldr	r3, [r3, #0]
   46f54:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   46f56:	05a3      	lsls	r3, r4, #22
   46f58:	d50a      	bpl.n	46f70 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   46f5a:	f44f 7092 	mov.w	r0, #292	; 0x124
   46f5e:	f009 feed 	bl	50d3c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   46f62:	b128      	cbz	r0, 46f70 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46f64:	4b05      	ldr	r3, [pc, #20]	; (46f7c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   46f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46f6a:	681b      	ldr	r3, [r3, #0]
   46f6c:	2002      	movs	r0, #2
   46f6e:	4718      	bx	r3
}
   46f70:	bd10      	pop	{r4, pc}
   46f72:	bf00      	nop
   46f74:	200071ec 	.word	0x200071ec
   46f78:	200071f0 	.word	0x200071f0
   46f7c:	200071f4 	.word	0x200071f4

00046f80 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46f80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46f84:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   46f88:	2a08      	cmp	r2, #8
   46f8a:	d106      	bne.n	46f9a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46f8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   46f90:	2b05      	cmp	r3, #5
   46f92:	d804      	bhi.n	46f9e <nrf52_errata_187+0x1e>
   46f94:	4a03      	ldr	r2, [pc, #12]	; (46fa4 <nrf52_errata_187+0x24>)
   46f96:	5cd0      	ldrb	r0, [r2, r3]
   46f98:	4770      	bx	lr
        return false;
   46f9a:	2000      	movs	r0, #0
   46f9c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46f9e:	2001      	movs	r0, #1
}
   46fa0:	4770      	bx	lr
   46fa2:	bf00      	nop
   46fa4:	00056b7b 	.word	0x00056b7b

00046fa8 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   46fa8:	4b05      	ldr	r3, [pc, #20]	; (46fc0 <ep_state_access+0x18>)
   46faa:	f010 0f80 	tst.w	r0, #128	; 0x80
   46fae:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   46fb2:	bf08      	it	eq
   46fb4:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   46fb6:	f000 000f 	and.w	r0, r0, #15
}
   46fba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   46fbe:	4770      	bx	lr
   46fc0:	20007368 	.word	0x20007368

00046fc4 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   46fc4:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   46fc6:	f009 feda 	bl	50d7e <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   46fca:	b118      	cbz	r0, 46fd4 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   46fcc:	4b03      	ldr	r3, [pc, #12]	; (46fdc <usbd_dma_pending_clear+0x18>)
   46fce:	2200      	movs	r2, #0
   46fd0:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   46fd4:	4b02      	ldr	r3, [pc, #8]	; (46fe0 <usbd_dma_pending_clear+0x1c>)
   46fd6:	2200      	movs	r2, #0
   46fd8:	701a      	strb	r2, [r3, #0]
}
   46fda:	bd08      	pop	{r3, pc}
   46fdc:	40027000 	.word	0x40027000
   46fe0:	2000779e 	.word	0x2000779e

00046fe4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   46fe4:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   46fe6:	4a09      	ldr	r2, [pc, #36]	; (4700c <ev_usbreset_handler+0x28>)
   46fe8:	2300      	movs	r3, #0
   46fea:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   46fec:	4a08      	ldr	r2, [pc, #32]	; (47010 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   46fee:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   46ff2:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   46ff4:	f88d 3007 	strb.w	r3, [sp, #7]
   46ff8:	2301      	movs	r3, #1
   46ffa:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   46ffe:	4b05      	ldr	r3, [pc, #20]	; (47014 <ev_usbreset_handler+0x30>)
   47000:	a801      	add	r0, sp, #4
   47002:	681b      	ldr	r3, [r3, #0]
   47004:	4798      	blx	r3
}
   47006:	b003      	add	sp, #12
   47008:	f85d fb04 	ldr.w	pc, [sp], #4
   4700c:	2000779d 	.word	0x2000779d
   47010:	200077a0 	.word	0x200077a0
   47014:	200073f8 	.word	0x200073f8

00047018 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   47018:	4b21      	ldr	r3, [pc, #132]	; (470a0 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   4701a:	b513      	push	{r0, r1, r4, lr}
   4701c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   47020:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   47024:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   47026:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   4702a:	d50e      	bpl.n	4704a <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   4702c:	4b1d      	ldr	r3, [pc, #116]	; (470a4 <ev_usbevent_handler+0x8c>)
   4702e:	2201      	movs	r2, #1
   47030:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   47032:	2300      	movs	r3, #0
   47034:	f8ad 3005 	strh.w	r3, [sp, #5]
   47038:	f88d 3007 	strb.w	r3, [sp, #7]
   4703c:	2302      	movs	r3, #2
   4703e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   47042:	4b19      	ldr	r3, [pc, #100]	; (470a8 <ev_usbevent_handler+0x90>)
   47044:	a801      	add	r0, sp, #4
   47046:	681b      	ldr	r3, [r3, #0]
   47048:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   4704a:	05a2      	lsls	r2, r4, #22
   4704c:	d50d      	bpl.n	4706a <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   4704e:	4a15      	ldr	r2, [pc, #84]	; (470a4 <ev_usbevent_handler+0x8c>)
   47050:	2300      	movs	r3, #0
   47052:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   47054:	f8ad 3005 	strh.w	r3, [sp, #5]
   47058:	f88d 3007 	strb.w	r3, [sp, #7]
   4705c:	2303      	movs	r3, #3
   4705e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   47062:	4b11      	ldr	r3, [pc, #68]	; (470a8 <ev_usbevent_handler+0x90>)
   47064:	a801      	add	r0, sp, #4
   47066:	681b      	ldr	r3, [r3, #0]
   47068:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   4706a:	0563      	lsls	r3, r4, #21
   4706c:	d515      	bpl.n	4709a <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   4706e:	4a0d      	ldr	r2, [pc, #52]	; (470a4 <ev_usbevent_handler+0x8c>)
   47070:	7813      	ldrb	r3, [r2, #0]
   47072:	b193      	cbz	r3, 4709a <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   47074:	2300      	movs	r3, #0
   47076:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   47078:	4a09      	ldr	r2, [pc, #36]	; (470a0 <ev_usbevent_handler+0x88>)
   4707a:	2101      	movs	r1, #1
   4707c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47080:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47082:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   47084:	f8ad 3005 	strh.w	r3, [sp, #5]
   47088:	f88d 3007 	strb.w	r3, [sp, #7]
   4708c:	2304      	movs	r3, #4
   4708e:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   47092:	4b05      	ldr	r3, [pc, #20]	; (470a8 <ev_usbevent_handler+0x90>)
   47094:	a801      	add	r0, sp, #4
   47096:	681b      	ldr	r3, [r3, #0]
   47098:	4798      	blx	r3
        }
    }
}
   4709a:	b002      	add	sp, #8
   4709c:	bd10      	pop	{r4, pc}
   4709e:	bf00      	nop
   470a0:	40027000 	.word	0x40027000
   470a4:	2000779d 	.word	0x2000779d
   470a8:	200073f8 	.word	0x200073f8

000470ac <usbd_errata_187_211_begin>:
	__asm__ volatile(
   470ac:	f04f 0320 	mov.w	r3, #32
   470b0:	f3ef 8011 	mrs	r0, BASEPRI
   470b4:	f383 8812 	msr	BASEPRI_MAX, r3
   470b8:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   470bc:	4b0a      	ldr	r3, [pc, #40]	; (470e8 <usbd_errata_187_211_begin+0x3c>)
   470be:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   470c2:	2203      	movs	r2, #3
   470c4:	b961      	cbnz	r1, 470e0 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   470c6:	f249 3175 	movw	r1, #37749	; 0x9375
   470ca:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   470ce:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   470d2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   470d6:	f380 8811 	msr	BASEPRI, r0
   470da:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   470de:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   470e0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   470e4:	e7f7      	b.n	470d6 <usbd_errata_187_211_begin+0x2a>
   470e6:	bf00      	nop
   470e8:	4006e000 	.word	0x4006e000

000470ec <usbd_errata_187_211_end>:
	__asm__ volatile(
   470ec:	f04f 0320 	mov.w	r3, #32
   470f0:	f3ef 8011 	mrs	r0, BASEPRI
   470f4:	f383 8812 	msr	BASEPRI_MAX, r3
   470f8:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   470fc:	4b0a      	ldr	r3, [pc, #40]	; (47128 <usbd_errata_187_211_end+0x3c>)
   470fe:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   47102:	b961      	cbnz	r1, 4711e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47104:	f249 3275 	movw	r2, #37749	; 0x9375
   47108:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   4710c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47110:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   47114:	f380 8811 	msr	BASEPRI, r0
   47118:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   4711c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   4711e:	2200      	movs	r2, #0
   47120:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   47124:	e7f6      	b.n	47114 <usbd_errata_187_211_end+0x28>
   47126:	bf00      	nop
   47128:	4006e000 	.word	0x4006e000

0004712c <nrfx_usbd_feeder_flash>:
{
   4712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   4712e:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   47130:	4f0b      	ldr	r7, [pc, #44]	; (47160 <nrfx_usbd_feeder_flash+0x34>)
   47132:	4295      	cmp	r5, r2
   47134:	bf28      	it	cs
   47136:	4615      	movcs	r5, r2
{
   47138:	460c      	mov	r4, r1
   4713a:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   4713c:	462a      	mov	r2, r5
   4713e:	6809      	ldr	r1, [r1, #0]
   47140:	4638      	mov	r0, r7
   47142:	f005 fab8 	bl	4c6b6 <memcpy>
    p_transfer->size -= tx_size;
   47146:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   47148:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   4714a:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   4714c:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   47150:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   47152:	6060      	str	r0, [r4, #4]
}
   47154:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   47156:	6022      	str	r2, [r4, #0]
}
   47158:	bf18      	it	ne
   4715a:	2001      	movne	r0, #1
   4715c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4715e:	bf00      	nop
   47160:	200073fc 	.word	0x200073fc

00047164 <nrfx_usbd_feeder_flash_zlp>:
{
   47164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   47166:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   47168:	4294      	cmp	r4, r2
   4716a:	bf28      	it	cs
   4716c:	4614      	movcs	r4, r2
{
   4716e:	4606      	mov	r6, r0
   47170:	460d      	mov	r5, r1
    if (tx_size != 0)
   47172:	b18c      	cbz	r4, 47198 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   47174:	4f09      	ldr	r7, [pc, #36]	; (4719c <nrfx_usbd_feeder_flash_zlp+0x38>)
   47176:	6809      	ldr	r1, [r1, #0]
   47178:	4622      	mov	r2, r4
   4717a:	4638      	mov	r0, r7
   4717c:	f005 fa9b 	bl	4c6b6 <memcpy>
        p_next->p_data.tx = p_buffer;
   47180:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   47182:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   47184:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   47186:	1b1b      	subs	r3, r3, r4
   47188:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   4718a:	682b      	ldr	r3, [r5, #0]
}
   4718c:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   4718e:	4423      	add	r3, r4
   47190:	602b      	str	r3, [r5, #0]
}
   47192:	bf18      	it	ne
   47194:	2001      	movne	r0, #1
   47196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   47198:	6004      	str	r4, [r0, #0]
   4719a:	e7f2      	b.n	47182 <nrfx_usbd_feeder_flash_zlp+0x1e>
   4719c:	200073fc 	.word	0x200073fc

000471a0 <ev_sof_handler>:
{
   471a0:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   471a2:	2300      	movs	r3, #0
   471a4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   471a8:	4b0b      	ldr	r3, [pc, #44]	; (471d8 <ev_sof_handler+0x38>)
   471aa:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   471ae:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   471b2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   471b6:	4a09      	ldr	r2, [pc, #36]	; (471dc <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   471b8:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   471ba:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   471bc:	bf0c      	ite	eq
   471be:	f44f 7180 	moveq.w	r1, #256	; 0x100
   471c2:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   471c6:	430b      	orrs	r3, r1
   471c8:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   471ca:	4b05      	ldr	r3, [pc, #20]	; (471e0 <ev_sof_handler+0x40>)
   471cc:	a801      	add	r0, sp, #4
   471ce:	681b      	ldr	r3, [r3, #0]
   471d0:	4798      	blx	r3
}
   471d2:	b003      	add	sp, #12
   471d4:	f85d fb04 	ldr.w	pc, [sp], #4
   471d8:	40027000 	.word	0x40027000
   471dc:	200072d4 	.word	0x200072d4
   471e0:	200073f8 	.word	0x200073f8

000471e4 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   471e4:	4b06      	ldr	r3, [pc, #24]	; (47200 <atomic_and.constprop.0.isra.0+0x1c>)
   471e6:	f3bf 8f5b 	dmb	ish
   471ea:	e853 2f00 	ldrex	r2, [r3]
   471ee:	4002      	ands	r2, r0
   471f0:	e843 2100 	strex	r1, r2, [r3]
   471f4:	2900      	cmp	r1, #0
   471f6:	d1f8      	bne.n	471ea <atomic_and.constprop.0.isra.0+0x6>
   471f8:	f3bf 8f5b 	dmb	ish
}
   471fc:	4770      	bx	lr
   471fe:	bf00      	nop
   47200:	20007264 	.word	0x20007264

00047204 <nrf_usbd_ep0in_dma_handler>:
{
   47204:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   47206:	f7ff fedd 	bl	46fc4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4720a:	4b08      	ldr	r3, [pc, #32]	; (4722c <nrf_usbd_ep0in_dma_handler+0x28>)
   4720c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   47210:	2a03      	cmp	r2, #3
   47212:	d105      	bne.n	47220 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   47214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47218:	f06f 0001 	mvn.w	r0, #1
   4721c:	f7ff bfe2 	b.w	471e4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   47220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   47224:	2b00      	cmp	r3, #0
   47226:	d0f5      	beq.n	47214 <nrf_usbd_ep0in_dma_handler+0x10>
}
   47228:	bd08      	pop	{r3, pc}
   4722a:	bf00      	nop
   4722c:	200072d8 	.word	0x200072d8

00047230 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   47230:	2201      	movs	r2, #1
{
   47232:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   47234:	fa02 f501 	lsl.w	r5, r2, r1
   47238:	491c      	ldr	r1, [pc, #112]	; (472ac <usbd_ep_data_handler+0x7c>)
   4723a:	4e1d      	ldr	r6, [pc, #116]	; (472b0 <usbd_ep_data_handler+0x80>)
   4723c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   4723e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   47242:	ea43 0305 	orr.w	r3, r3, r5
{
   47246:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   47248:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   4724a:	d024      	beq.n	47296 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   4724c:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47250:	4b18      	ldr	r3, [pc, #96]	; (472b4 <usbd_ep_data_handler+0x84>)
   47252:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   47256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4725a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4725e:	681a      	ldr	r2, [r3, #0]
    if (ret)
   47260:	b132      	cbz	r2, 47270 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47262:	2200      	movs	r2, #0
   47264:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   47266:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   47268:	681b      	ldr	r3, [r3, #0]
   4726a:	d011      	beq.n	47290 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   4726c:	f009 fdd7 	bl	50e1e <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   47270:	6831      	ldr	r1, [r6, #0]
   47272:	4029      	ands	r1, r5
   47274:	d10a      	bne.n	4728c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47276:	2306      	movs	r3, #6
   47278:	f88d 3004 	strb.w	r3, [sp, #4]
   4727c:	f88d 4006 	strb.w	r4, [sp, #6]
   47280:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   47284:	4b0c      	ldr	r3, [pc, #48]	; (472b8 <usbd_ep_data_handler+0x88>)
   47286:	a801      	add	r0, sp, #4
   47288:	681b      	ldr	r3, [r3, #0]
   4728a:	4798      	blx	r3
}
   4728c:	b002      	add	sp, #8
   4728e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   47290:	f7ff ffb8 	bl	47204 <nrf_usbd_ep0in_dma_handler>
   47294:	e7ec      	b.n	47270 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   47296:	6833      	ldr	r3, [r6, #0]
   47298:	421d      	tst	r5, r3
   4729a:	d1f7      	bne.n	4728c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   4729c:	2306      	movs	r3, #6
   4729e:	f88d 3004 	strb.w	r3, [sp, #4]
   472a2:	f88d 0006 	strb.w	r0, [sp, #6]
   472a6:	f88d 2007 	strb.w	r2, [sp, #7]
   472aa:	e7eb      	b.n	47284 <usbd_ep_data_handler+0x54>
   472ac:	200072d4 	.word	0x200072d4
   472b0:	20007264 	.word	0x20007264
   472b4:	000561dc 	.word	0x000561dc
   472b8:	200073f8 	.word	0x200073f8

000472bc <ev_setup_data_handler>:
{
   472bc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   472be:	4b05      	ldr	r3, [pc, #20]	; (472d4 <ev_setup_data_handler+0x18>)
   472c0:	781a      	ldrb	r2, [r3, #0]
   472c2:	4610      	mov	r0, r2
   472c4:	f009 fda1 	bl	50e0a <ep2bit>
}
   472c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   472cc:	4601      	mov	r1, r0
   472ce:	4610      	mov	r0, r2
   472d0:	f7ff bfae 	b.w	47230 <usbd_ep_data_handler>
   472d4:	200077a0 	.word	0x200077a0

000472d8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   472d8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   472da:	f7ff fe73 	bl	46fc4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   472de:	4b0c      	ldr	r3, [pc, #48]	; (47310 <ev_dma_epout8_handler+0x38>)
   472e0:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   472e4:	2a03      	cmp	r2, #3
   472e6:	d010      	beq.n	4730a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   472e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   472ec:	b96b      	cbnz	r3, 4730a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   472ee:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   472f2:	f7ff ff77 	bl	471e4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   472f6:	2306      	movs	r3, #6
   472f8:	f88d 3004 	strb.w	r3, [sp, #4]
   472fc:	2308      	movs	r3, #8
   472fe:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   47302:	4b04      	ldr	r3, [pc, #16]	; (47314 <ev_dma_epout8_handler+0x3c>)
   47304:	a801      	add	r0, sp, #4
   47306:	681b      	ldr	r3, [r3, #0]
   47308:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   4730a:	b003      	add	sp, #12
   4730c:	f85d fb04 	ldr.w	pc, [sp], #4
   47310:	200072d8 	.word	0x200072d8
   47314:	200073f8 	.word	0x200073f8

00047318 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   47318:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   4731a:	f7ff fe53 	bl	46fc4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4731e:	4b10      	ldr	r3, [pc, #64]	; (47360 <ev_dma_epin8_handler+0x48>)
   47320:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   47324:	2a03      	cmp	r2, #3
   47326:	d106      	bne.n	47336 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47328:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   4732c:	b003      	add	sp, #12
   4732e:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47332:	f7ff bf57 	b.w	471e4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   47336:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   4733a:	b96b      	cbnz	r3, 47358 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4733c:	f46f 7080 	mvn.w	r0, #256	; 0x100
   47340:	f7ff ff50 	bl	471e4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47344:	2306      	movs	r3, #6
   47346:	f88d 3004 	strb.w	r3, [sp, #4]
   4734a:	2388      	movs	r3, #136	; 0x88
   4734c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   47350:	4b04      	ldr	r3, [pc, #16]	; (47364 <ev_dma_epin8_handler+0x4c>)
   47352:	a801      	add	r0, sp, #4
   47354:	681b      	ldr	r3, [r3, #0]
   47356:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   47358:	b003      	add	sp, #12
   4735a:	f85d fb04 	ldr.w	pc, [sp], #4
   4735e:	bf00      	nop
   47360:	200072d8 	.word	0x200072d8
   47364:	200073f8 	.word	0x200073f8

00047368 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   47368:	4a02      	ldr	r2, [pc, #8]	; (47374 <nrfx_usbd_uninit+0xc>)
   4736a:	2300      	movs	r3, #0
   4736c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   4736e:	4a02      	ldr	r2, [pc, #8]	; (47378 <nrfx_usbd_uninit+0x10>)
   47370:	7013      	strb	r3, [r2, #0]
    return;
}
   47372:	4770      	bx	lr
   47374:	200073f8 	.word	0x200073f8
   47378:	2000779f 	.word	0x2000779f

0004737c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   4737c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   4737e:	4b48      	ldr	r3, [pc, #288]	; (474a0 <nrfx_usbd_enable+0x124>)
   47380:	f44f 6200 	mov.w	r2, #2048	; 0x800
   47384:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   47388:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   4738c:	f7ff fdf8 	bl	46f80 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   47390:	b108      	cbz	r0, 47396 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   47392:	f7ff fe8b 	bl	470ac <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   47396:	f009 fcf2 	bl	50d7e <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   4739a:	b1c8      	cbz	r0, 473d0 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   4739c:	f04f 0320 	mov.w	r3, #32
   473a0:	f3ef 8011 	mrs	r0, BASEPRI
   473a4:	f383 8812 	msr	BASEPRI_MAX, r3
   473a8:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   473ac:	4b3d      	ldr	r3, [pc, #244]	; (474a4 <nrfx_usbd_enable+0x128>)
   473ae:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   473b2:	22c0      	movs	r2, #192	; 0xc0
   473b4:	2900      	cmp	r1, #0
   473b6:	d16a      	bne.n	4748e <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   473b8:	f249 3175 	movw	r1, #37749	; 0x9375
   473bc:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   473c0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   473c4:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   473c8:	f380 8811 	msr	BASEPRI, r0
   473cc:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   473d0:	4b33      	ldr	r3, [pc, #204]	; (474a0 <nrfx_usbd_enable+0x124>)
   473d2:	2201      	movs	r2, #1
   473d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   473d8:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   473dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   473e0:	0512      	lsls	r2, r2, #20
   473e2:	d5fb      	bpl.n	473dc <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   473e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   473e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   473ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   473f0:	f009 fcc5 	bl	50d7e <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   473f4:	b1c0      	cbz	r0, 47428 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   473f6:	f04f 0320 	mov.w	r3, #32
   473fa:	f3ef 8011 	mrs	r0, BASEPRI
   473fe:	f383 8812 	msr	BASEPRI_MAX, r3
   47402:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   47406:	4b27      	ldr	r3, [pc, #156]	; (474a4 <nrfx_usbd_enable+0x128>)
   47408:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   4740c:	2900      	cmp	r1, #0
   4740e:	d141      	bne.n	47494 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47410:	f249 3275 	movw	r2, #37749	; 0x9375
   47414:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   47418:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4741c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   47420:	f380 8811 	msr	BASEPRI, r0
   47424:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   47428:	f7ff fdaa 	bl	46f80 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   4742c:	b130      	cbz	r0, 4743c <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   4742e:	f7ff fe5d 	bl	470ec <usbd_errata_187_211_end>
   47432:	f7ff fda5 	bl	46f80 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   47436:	b108      	cbz	r0, 4743c <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   47438:	f7ff fe38 	bl	470ac <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   4743c:	f009 fc9f 	bl	50d7e <nrf52_errata_166>
   47440:	4b17      	ldr	r3, [pc, #92]	; (474a0 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   47442:	b150      	cbz	r0, 4745a <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   47444:	f240 72e3 	movw	r2, #2019	; 0x7e3
   47448:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   4744c:	2240      	movs	r2, #64	; 0x40
   4744e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   47452:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   47456:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   4745a:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   4745c:	2280      	movs	r2, #128	; 0x80
   4745e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   47462:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   47466:	4b10      	ldr	r3, [pc, #64]	; (474a8 <nrfx_usbd_enable+0x12c>)
   47468:	f240 12ff 	movw	r2, #511	; 0x1ff
   4746c:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   4746e:	4b0f      	ldr	r3, [pc, #60]	; (474ac <nrfx_usbd_enable+0x130>)
   47470:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   47472:	f7ff fda7 	bl	46fc4 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   47476:	4b0e      	ldr	r3, [pc, #56]	; (474b0 <nrfx_usbd_enable+0x134>)
   47478:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   4747a:	4b0e      	ldr	r3, [pc, #56]	; (474b4 <nrfx_usbd_enable+0x138>)
   4747c:	2202      	movs	r2, #2
   4747e:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   47480:	f7ff fd7e 	bl	46f80 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   47484:	b150      	cbz	r0, 4749c <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   47486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   4748a:	f7ff be2f 	b.w	470ec <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   4748e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   47492:	e799      	b.n	473c8 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   47494:	2200      	movs	r2, #0
   47496:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   4749a:	e7c1      	b.n	47420 <nrfx_usbd_enable+0xa4>
}
   4749c:	bd08      	pop	{r3, pc}
   4749e:	bf00      	nop
   474a0:	40027000 	.word	0x40027000
   474a4:	4006e000 	.word	0x4006e000
   474a8:	200072d4 	.word	0x200072d4
   474ac:	20007264 	.word	0x20007264
   474b0:	200077a0 	.word	0x200077a0
   474b4:	2000779f 	.word	0x2000779f

000474b8 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   474b8:	4b0a      	ldr	r3, [pc, #40]	; (474e4 <nrfx_usbd_start+0x2c>)
   474ba:	2200      	movs	r2, #0
{
   474bc:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   474be:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   474c0:	4a09      	ldr	r2, [pc, #36]	; (474e8 <nrfx_usbd_start+0x30>)
   474c2:	4b0a      	ldr	r3, [pc, #40]	; (474ec <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   474c4:	4c0a      	ldr	r4, [pc, #40]	; (474f0 <nrfx_usbd_start+0x38>)
   474c6:	2800      	cmp	r0, #0
   474c8:	bf18      	it	ne
   474ca:	4613      	movne	r3, r2
   474cc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   474d0:	2027      	movs	r0, #39	; 0x27
   474d2:	f7e5 fef7 	bl	2d2c4 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   474d6:	2301      	movs	r3, #1
   474d8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   474dc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   474e0:	bd10      	pop	{r4, pc}
   474e2:	bf00      	nop
   474e4:	2000779d 	.word	0x2000779d
   474e8:	01e01407 	.word	0x01e01407
   474ec:	01c01407 	.word	0x01c01407
   474f0:	40027000 	.word	0x40027000

000474f4 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   474f4:	4b03      	ldr	r3, [pc, #12]	; (47504 <nrfx_usbd_is_enabled+0x10>)
   474f6:	7818      	ldrb	r0, [r3, #0]
}
   474f8:	2801      	cmp	r0, #1
   474fa:	bf94      	ite	ls
   474fc:	2000      	movls	r0, #0
   474fe:	2001      	movhi	r0, #1
   47500:	4770      	bx	lr
   47502:	bf00      	nop
   47504:	2000779f 	.word	0x2000779f

00047508 <nrfx_usbd_wakeup_req>:

    return suspended;
}

bool nrfx_usbd_wakeup_req(void)
{
   47508:	b510      	push	{r4, lr}
	__asm__ volatile(
   4750a:	f04f 0320 	mov.w	r3, #32
   4750e:	f3ef 8411 	mrs	r4, BASEPRI
   47512:	f383 8812 	msr	BASEPRI_MAX, r3
   47516:	f3bf 8f6f 	isb	sy
    bool started = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend && nrf_usbd_lowpower_check(NRF_USBD))
   4751a:	4b15      	ldr	r3, [pc, #84]	; (47570 <nrfx_usbd_wakeup_req+0x68>)
   4751c:	781b      	ldrb	r3, [r3, #0]
   4751e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   47522:	b1cb      	cbz	r3, 47558 <nrfx_usbd_wakeup_req+0x50>
    return (p_reg->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
   47524:	4b13      	ldr	r3, [pc, #76]	; (47574 <nrfx_usbd_wakeup_req+0x6c>)
   47526:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
   4752a:	b1f1      	cbz	r1, 4756a <nrfx_usbd_wakeup_req+0x62>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   4752c:	2100      	movs	r1, #0
   4752e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   47532:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   47536:	f009 fc22 	bl	50d7e <nrf52_errata_166>
    {
        nrf_usbd_lowpower_disable(NRF_USBD);
        started = true;

        if (nrfx_usbd_errata_171())
   4753a:	b168      	cbz	r0, 47558 <nrfx_usbd_wakeup_req+0x50>
        {
            if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   4753c:	4b0e      	ldr	r3, [pc, #56]	; (47578 <nrfx_usbd_wakeup_req+0x70>)
   4753e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   47542:	22c0      	movs	r2, #192	; 0xc0
   47544:	b971      	cbnz	r1, 47564 <nrfx_usbd_wakeup_req+0x5c>
            {
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47546:	f249 3175 	movw	r1, #37749	; 0x9375
   4754a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   4754e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47552:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        started = true;
   47556:	4602      	mov	r2, r0
	__asm__ volatile(
   47558:	f384 8811 	msr	BASEPRI, r4
   4755c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return started;
}
   47560:	4610      	mov	r0, r2
   47562:	bd10      	pop	{r4, pc}
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   47564:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   47568:	e7f5      	b.n	47556 <nrfx_usbd_wakeup_req+0x4e>
    bool started = false;
   4756a:	460a      	mov	r2, r1
   4756c:	e7f4      	b.n	47558 <nrfx_usbd_wakeup_req+0x50>
   4756e:	bf00      	nop
   47570:	2000779d 	.word	0x2000779d
   47574:	40027000 	.word	0x40027000
   47578:	4006e000 	.word	0x4006e000

0004757c <nrfx_usbd_init>:
{
   4757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   47580:	4b1d      	ldr	r3, [pc, #116]	; (475f8 <nrfx_usbd_init+0x7c>)
   47582:	781c      	ldrb	r4, [r3, #0]
   47584:	2c00      	cmp	r4, #0
   47586:	d135      	bne.n	475f4 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   47588:	4a1c      	ldr	r2, [pc, #112]	; (475fc <nrfx_usbd_init+0x80>)
   4758a:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   4758c:	2201      	movs	r2, #1
   4758e:	701a      	strb	r2, [r3, #0]
   47590:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   47592:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   47596:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   47598:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4759c:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   475a0:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475a2:	bf14      	ite	ne
   475a4:	4641      	movne	r1, r8
   475a6:	2140      	moveq	r1, #64	; 0x40
   475a8:	4630      	mov	r0, r6
   475aa:	f009 fc68 	bl	50e7e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   475ae:	4630      	mov	r0, r6
   475b0:	f7ff fcfa 	bl	46fa8 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   475b4:	3501      	adds	r5, #1
   475b6:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   475b8:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   475ba:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   475bc:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   475be:	d1eb      	bne.n	47598 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475c0:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   475c2:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475c4:	f240 16ff 	movw	r6, #511	; 0x1ff
   475c8:	4620      	mov	r0, r4
   475ca:	f009 fc58 	bl	50e7e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   475ce:	4620      	mov	r0, r4
   475d0:	f7ff fcea 	bl	46fa8 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   475d4:	3401      	adds	r4, #1
   475d6:	b2e4      	uxtb	r4, r4
   475d8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   475da:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   475dc:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   475de:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   475e0:	d102      	bne.n	475e8 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   475e2:	4807      	ldr	r0, [pc, #28]	; (47600 <nrfx_usbd_init+0x84>)
}
   475e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475e8:	f014 0f08 	tst.w	r4, #8
   475ec:	bf14      	ite	ne
   475ee:	4631      	movne	r1, r6
   475f0:	2140      	moveq	r1, #64	; 0x40
   475f2:	e7e9      	b.n	475c8 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   475f4:	4803      	ldr	r0, [pc, #12]	; (47604 <nrfx_usbd_init+0x88>)
   475f6:	e7f5      	b.n	475e4 <nrfx_usbd_init+0x68>
   475f8:	2000779f 	.word	0x2000779f
   475fc:	200073f8 	.word	0x200073f8
   47600:	0bad0000 	.word	0x0bad0000
   47604:	0bad0005 	.word	0x0bad0005

00047608 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   47608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4760c:	4605      	mov	r5, r0
	__asm__ volatile(
   4760e:	f04f 0320 	mov.w	r3, #32
   47612:	f3ef 8811 	mrs	r8, BASEPRI
   47616:	f383 8812 	msr	BASEPRI_MAX, r3
   4761a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   4761e:	f010 040f 	ands.w	r4, r0, #15
   47622:	d103      	bne.n	4762c <nrfx_usbd_ep_transfer+0x24>
   47624:	4b27      	ldr	r3, [pc, #156]	; (476c4 <nrfx_usbd_ep_transfer+0xbc>)
   47626:	781b      	ldrb	r3, [r3, #0]
   47628:	4283      	cmp	r3, r0
   4762a:	d146      	bne.n	476ba <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   4762c:	4b26      	ldr	r3, [pc, #152]	; (476c8 <nrfx_usbd_ep_transfer+0xc0>)
   4762e:	4f27      	ldr	r7, [pc, #156]	; (476cc <nrfx_usbd_ep_transfer+0xc4>)
   47630:	681a      	ldr	r2, [r3, #0]
   47632:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   47634:	4628      	mov	r0, r5
   47636:	f009 fbe8 	bl	50e0a <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   4763a:	43d2      	mvns	r2, r2
   4763c:	b292      	uxth	r2, r2
   4763e:	f04f 0901 	mov.w	r9, #1
   47642:	4332      	orrs	r2, r6
   47644:	fa09 f900 	lsl.w	r9, r9, r0
   47648:	ea12 0f09 	tst.w	r2, r9
   4764c:	d137      	bne.n	476be <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   4764e:	4628      	mov	r0, r5
   47650:	f7ff fcaa 	bl	46fa8 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   47654:	220c      	movs	r2, #12
   47656:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   47658:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   4765a:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   4765c:	d529      	bpl.n	476b2 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   4765e:	4a1c      	ldr	r2, [pc, #112]	; (476d0 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   47660:	6808      	ldr	r0, [r1, #0]
   47662:	4414      	add	r4, r2
   47664:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   47668:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   4766a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   4766e:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   47672:	d119      	bne.n	476a8 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   47674:	b9b2      	cbnz	r2, 476a4 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   47676:	4a17      	ldr	r2, [pc, #92]	; (476d4 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   47678:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   4767a:	c907      	ldmia	r1, {r0, r1, r2}
   4767c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   47680:	2200      	movs	r2, #0
   47682:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   47684:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   47686:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   47688:	4b13      	ldr	r3, [pc, #76]	; (476d8 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   4768a:	4814      	ldr	r0, [pc, #80]	; (476dc <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   4768c:	ea46 0609 	orr.w	r6, r6, r9
   47690:	2280      	movs	r2, #128	; 0x80
   47692:	603e      	str	r6, [r7, #0]
   47694:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   47698:	f388 8811 	msr	BASEPRI, r8
   4769c:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   476a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   476a4:	4a0e      	ldr	r2, [pc, #56]	; (476e0 <nrfx_usbd_ep_transfer+0xd8>)
   476a6:	e7e7      	b.n	47678 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   476a8:	b90a      	cbnz	r2, 476ae <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   476aa:	4a0e      	ldr	r2, [pc, #56]	; (476e4 <nrfx_usbd_ep_transfer+0xdc>)
   476ac:	e7e4      	b.n	47678 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   476ae:	4a0e      	ldr	r2, [pc, #56]	; (476e8 <nrfx_usbd_ep_transfer+0xe0>)
   476b0:	e7e2      	b.n	47678 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   476b2:	4a0e      	ldr	r2, [pc, #56]	; (476ec <nrfx_usbd_ep_transfer+0xe4>)
   476b4:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   476b6:	4a0e      	ldr	r2, [pc, #56]	; (476f0 <nrfx_usbd_ep_transfer+0xe8>)
   476b8:	e7de      	b.n	47678 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   476ba:	480e      	ldr	r0, [pc, #56]	; (476f4 <nrfx_usbd_ep_transfer+0xec>)
   476bc:	e7ec      	b.n	47698 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   476be:	480e      	ldr	r0, [pc, #56]	; (476f8 <nrfx_usbd_ep_transfer+0xf0>)
   476c0:	e7ea      	b.n	47698 <nrfx_usbd_ep_transfer+0x90>
   476c2:	bf00      	nop
   476c4:	200077a0 	.word	0x200077a0
   476c8:	200072d4 	.word	0x200072d4
   476cc:	20007264 	.word	0x20007264
   476d0:	20007268 	.word	0x20007268
   476d4:	00050dbf 	.word	0x00050dbf
   476d8:	e000e100 	.word	0xe000e100
   476dc:	0bad0000 	.word	0x0bad0000
   476e0:	00050de1 	.word	0x00050de1
   476e4:	0004712d 	.word	0x0004712d
   476e8:	00047165 	.word	0x00047165
   476ec:	200071f8 	.word	0x200071f8
   476f0:	00050d91 	.word	0x00050d91
   476f4:	0bad000a 	.word	0x0bad000a
   476f8:	0bad000b 	.word	0x0bad000b

000476fc <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   476fc:	f010 0f08 	tst.w	r0, #8
   47700:	4b07      	ldr	r3, [pc, #28]	; (47720 <nrfx_usbd_epout_size_get+0x24>)
   47702:	d006      	beq.n	47712 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   47704:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   47708:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   4770c:	bf18      	it	ne
   4770e:	2000      	movne	r0, #0
   47710:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   47712:	f000 000f 	and.w	r0, r0, #15
   47716:	f500 7094 	add.w	r0, r0, #296	; 0x128
   4771a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   4771e:	4770      	bx	lr
   47720:	40027000 	.word	0x40027000

00047724 <usbd_dmareq_process>:
{
   47724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   47728:	f8df 815c 	ldr.w	r8, [pc, #348]	; 47888 <usbd_dmareq_process+0x164>
   4772c:	f898 3000 	ldrb.w	r3, [r8]
{
   47730:	b085      	sub	sp, #20
    if (!m_dma_pending)
   47732:	2b00      	cmp	r3, #0
   47734:	d16b      	bne.n	4780e <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   47736:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4788c <usbd_dmareq_process+0x168>
   4773a:	4e55      	ldr	r6, [pc, #340]	; (47890 <usbd_dmareq_process+0x16c>)
   4773c:	f8d9 1000 	ldr.w	r1, [r9]
   47740:	6833      	ldr	r3, [r6, #0]
   47742:	4019      	ands	r1, r3
   47744:	d063      	beq.n	4780e <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   47746:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   4774a:	bf14      	ite	ne
   4774c:	fa93 f1a3 	rbitne	r1, r3
   47750:	fa91 f1a1 	rbiteq	r1, r1
   47754:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47758:	290f      	cmp	r1, #15
   4775a:	bf8a      	itet	hi
   4775c:	f1a1 0410 	subhi.w	r4, r1, #16
   47760:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   47764:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   47766:	4620      	mov	r0, r4
   47768:	f7ff fc1e 	bl	46fa8 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   4776c:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   47770:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47774:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   47778:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   4777c:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   4777e:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   47782:	da47      	bge.n	47814 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   47784:	6803      	ldr	r3, [r0, #0]
   47786:	8982      	ldrh	r2, [r0, #12]
   47788:	6841      	ldr	r1, [r0, #4]
   4778a:	a802      	add	r0, sp, #8
   4778c:	4798      	blx	r3
                if (!continue_transfer)
   4778e:	b900      	cbnz	r0, 47792 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   47790:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   47792:	f009 faf4 	bl	50d7e <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   47796:	b118      	cbz	r0, 477a0 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   47798:	4b3e      	ldr	r3, [pc, #248]	; (47894 <usbd_dmareq_process+0x170>)
   4779a:	2282      	movs	r2, #130	; 0x82
   4779c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   477a0:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   477a2:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   477a4:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   477a6:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   477aa:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   477ac:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   477b0:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   477b2:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   477b6:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   477b8:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   477ba:	f004 0008 	and.w	r0, r4, #8
   477be:	9902      	ldr	r1, [sp, #8]
   477c0:	4b34      	ldr	r3, [pc, #208]	; (47894 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   477c2:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   477c6:	da4f      	bge.n	47868 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   477c8:	2800      	cmp	r0, #0
   477ca:	d045      	beq.n	47858 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   477cc:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   477d0:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   477d4:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   477d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   477da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   477de:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   477e2:	2201      	movs	r2, #1
   477e4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   477e6:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   477e8:	4a2b      	ldr	r2, [pc, #172]	; (47898 <usbd_dmareq_process+0x174>)
   477ea:	4b2c      	ldr	r3, [pc, #176]	; (4789c <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   477ec:	4929      	ldr	r1, [pc, #164]	; (47894 <usbd_dmareq_process+0x170>)
   477ee:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   477f2:	bf38      	it	cc
   477f4:	4613      	movcc	r3, r2
   477f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   477fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   477fe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47802:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   47804:	b91a      	cbnz	r2, 4780e <usbd_dmareq_process+0xea>
   47806:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   4780a:	2a00      	cmp	r2, #0
   4780c:	d0f9      	beq.n	47802 <usbd_dmareq_process+0xde>
}
   4780e:	b005      	add	sp, #20
   47810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   47814:	4620      	mov	r0, r4
   47816:	f7ff ff71 	bl	476fc <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   4781a:	89aa      	ldrh	r2, [r5, #12]
   4781c:	6869      	ldr	r1, [r5, #4]
   4781e:	f8d5 c000 	ldr.w	ip, [r5]
   47822:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   47824:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   47826:	a802      	add	r0, sp, #8
   47828:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   4782a:	9a02      	ldr	r2, [sp, #8]
   4782c:	2a00      	cmp	r2, #0
   4782e:	d0ae      	beq.n	4778e <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   47830:	9a03      	ldr	r2, [sp, #12]
   47832:	4297      	cmp	r7, r2
   47834:	d9ab      	bls.n	4778e <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   47836:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47838:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   4783a:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   4783c:	f7ff fcd2 	bl	471e4 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47840:	2306      	movs	r3, #6
   47842:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   47846:	4b16      	ldr	r3, [pc, #88]	; (478a0 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47848:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   4784c:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   4784e:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   47852:	a801      	add	r0, sp, #4
   47854:	4798      	blx	r3
                    continue;
   47856:	e771      	b.n	4773c <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   47858:	2014      	movs	r0, #20
   4785a:	fb00 3304 	mla	r3, r0, r4, r3
   4785e:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   47862:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   47866:	e7b5      	b.n	477d4 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   47868:	b128      	cbz	r0, 47876 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   4786a:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   4786e:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   47872:	2328      	movs	r3, #40	; 0x28
   47874:	e7af      	b.n	477d6 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   47876:	2014      	movs	r0, #20
   47878:	fb00 3304 	mla	r3, r0, r4, r3
   4787c:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   47880:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   47884:	e7f5      	b.n	47872 <usbd_dmareq_process+0x14e>
   47886:	bf00      	nop
   47888:	2000779e 	.word	0x2000779e
   4788c:	20007264 	.word	0x20007264
   47890:	200072d4 	.word	0x200072d4
   47894:	40027000 	.word	0x40027000
   47898:	000561ee 	.word	0x000561ee
   4789c:	000561dc 	.word	0x000561dc
   478a0:	200073f8 	.word	0x200073f8

000478a4 <ev_epdata_handler>:
{
   478a4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   478a6:	4b0f      	ldr	r3, [pc, #60]	; (478e4 <ev_epdata_handler+0x40>)
   478a8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   478ac:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   478b0:	2501      	movs	r5, #1
    while (dataepstatus)
   478b2:	b91c      	cbnz	r4, 478bc <ev_epdata_handler+0x18>
}
   478b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   478b8:	f7ff bf34 	b.w	47724 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   478bc:	fa94 f3a4 	rbit	r3, r4
   478c0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   478c4:	2b0f      	cmp	r3, #15
   478c6:	bfc8      	it	gt
   478c8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   478cc:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   478ce:	bfd4      	ite	le
   478d0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   478d4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   478d6:	fa05 f303 	lsl.w	r3, r5, r3
   478da:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   478de:	f7ff fca7 	bl	47230 <usbd_ep_data_handler>
   478e2:	e7e6      	b.n	478b2 <ev_epdata_handler+0xe>
   478e4:	40027000 	.word	0x40027000

000478e8 <nrf_usbd_epout_dma_handler>:
{
   478e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   478ea:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   478ec:	f7ff fb6a 	bl	46fc4 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   478f0:	4620      	mov	r0, r4
   478f2:	f7ff fb59 	bl	46fa8 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   478f6:	7b83      	ldrb	r3, [r0, #14]
   478f8:	2b03      	cmp	r3, #3
   478fa:	d10d      	bne.n	47918 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   478fc:	4620      	mov	r0, r4
   478fe:	f009 fa84 	bl	50e0a <ep2bit>
   47902:	2301      	movs	r3, #1
   47904:	fa03 f000 	lsl.w	r0, r3, r0
   47908:	43c0      	mvns	r0, r0
   4790a:	f7ff fc6b 	bl	471e4 <atomic_and.constprop.0.isra.0>
}
   4790e:	b003      	add	sp, #12
   47910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   47914:	f7ff bf06 	b.w	47724 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   47918:	6805      	ldr	r5, [r0, #0]
   4791a:	2d00      	cmp	r5, #0
   4791c:	d1f7      	bne.n	4790e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4791e:	4620      	mov	r0, r4
   47920:	f009 fa73 	bl	50e0a <ep2bit>
   47924:	2301      	movs	r3, #1
   47926:	fa03 f000 	lsl.w	r0, r3, r0
   4792a:	43c0      	mvns	r0, r0
   4792c:	f7ff fc5a 	bl	471e4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47930:	2306      	movs	r3, #6
   47932:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47936:	4b04      	ldr	r3, [pc, #16]	; (47948 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47938:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   4793c:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4793e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   47942:	a801      	add	r0, sp, #4
   47944:	4798      	blx	r3
   47946:	e7e2      	b.n	4790e <nrf_usbd_epout_dma_handler+0x26>
   47948:	200073f8 	.word	0x200073f8

0004794c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   4794c:	4b02      	ldr	r3, [pc, #8]	; (47958 <nrfx_usbd_ep_stall+0xc>)
   4794e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   47952:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   47956:	4770      	bx	lr
   47958:	40027000 	.word	0x40027000

0004795c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   4795c:	0702      	lsls	r2, r0, #28
   4795e:	d413      	bmi.n	47988 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   47960:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   47964:	f010 0f80 	tst.w	r0, #128	; 0x80
   47968:	4a08      	ldr	r2, [pc, #32]	; (4798c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   4796a:	bf0b      	itete	eq
   4796c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   47970:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   47974:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   47978:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   4797c:	bf08      	it	eq
   4797e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   47980:	1e43      	subs	r3, r0, #1
   47982:	4258      	negs	r0, r3
   47984:	4158      	adcs	r0, r3
   47986:	4770      	bx	lr
        return false;
   47988:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   4798a:	4770      	bx	lr
   4798c:	40027000 	.word	0x40027000

00047990 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   47990:	4b04      	ldr	r3, [pc, #16]	; (479a4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   47992:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   47996:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   4799a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   4799e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   479a2:	4770      	bx	lr
   479a4:	40027000 	.word	0x40027000

000479a8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   479a8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   479aa:	2208      	movs	r2, #8
   479ac:	2100      	movs	r1, #0
{
   479ae:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   479b0:	f004 fe8c 	bl	4c6cc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   479b4:	4b0e      	ldr	r3, [pc, #56]	; (479f0 <nrfx_usbd_setup_get+0x48>)
   479b6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   479ba:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   479bc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   479c0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   479c2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   479c6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   479ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   479ce:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   479d0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   479d4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   479d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   479dc:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   479de:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   479e2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   479e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   479ea:	80e3      	strh	r3, [r4, #6]
}
   479ec:	bd10      	pop	{r4, pc}
   479ee:	bf00      	nop
   479f0:	40027000 	.word	0x40027000

000479f4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   479f4:	4b02      	ldr	r3, [pc, #8]	; (47a00 <nrfx_usbd_setup_data_clear+0xc>)
   479f6:	2201      	movs	r2, #1
   479f8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   479fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   479fc:	4770      	bx	lr
   479fe:	bf00      	nop
   47a00:	40027000 	.word	0x40027000

00047a04 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47a04:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   47a06:	f7ff fadd 	bl	46fc4 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47a0a:	4b10      	ldr	r3, [pc, #64]	; (47a4c <ev_dma_epout0_handler+0x48>)
   47a0c:	7b9a      	ldrb	r2, [r3, #14]
   47a0e:	2a03      	cmp	r2, #3
   47a10:	d106      	bne.n	47a20 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47a12:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47a16:	b002      	add	sp, #8
   47a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47a1c:	f7ff bbe2 	b.w	471e4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   47a20:	681c      	ldr	r4, [r3, #0]
   47a22:	b974      	cbnz	r4, 47a42 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47a24:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   47a28:	f7ff fbdc 	bl	471e4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47a2c:	2306      	movs	r3, #6
   47a2e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47a32:	4b07      	ldr	r3, [pc, #28]	; (47a50 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47a34:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   47a38:	681b      	ldr	r3, [r3, #0]
   47a3a:	a801      	add	r0, sp, #4
   47a3c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47a3e:	b002      	add	sp, #8
   47a40:	bd10      	pop	{r4, pc}
   47a42:	b002      	add	sp, #8
   47a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   47a48:	f7ff bfd4 	b.w	479f4 <nrfx_usbd_setup_data_clear>
   47a4c:	200072d8 	.word	0x200072d8
   47a50:	200073f8 	.word	0x200073f8

00047a54 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47a54:	4b02      	ldr	r3, [pc, #8]	; (47a60 <nrfx_usbd_setup_clear+0xc>)
   47a56:	2201      	movs	r2, #1
   47a58:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   47a5c:	4770      	bx	lr
   47a5e:	bf00      	nop
   47a60:	40027000 	.word	0x40027000

00047a64 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47a64:	4b02      	ldr	r3, [pc, #8]	; (47a70 <nrfx_usbd_setup_stall+0xc>)
   47a66:	2201      	movs	r2, #1
   47a68:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   47a6c:	4770      	bx	lr
   47a6e:	bf00      	nop
   47a70:	40027000 	.word	0x40027000

00047a74 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   47a74:	4b01      	ldr	r3, [pc, #4]	; (47a7c <nrfx_usbd_last_setup_dir_get+0x8>)
   47a76:	7818      	ldrb	r0, [r3, #0]
   47a78:	4770      	bx	lr
   47a7a:	bf00      	nop
   47a7c:	200077a0 	.word	0x200077a0

00047a80 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   47a80:	b510      	push	{r4, lr}
   47a82:	4602      	mov	r2, r0
	__asm__ volatile(
   47a84:	f04f 0320 	mov.w	r3, #32
   47a88:	f3ef 8411 	mrs	r4, BASEPRI
   47a8c:	f383 8812 	msr	BASEPRI_MAX, r3
   47a90:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   47a94:	f009 f9b9 	bl	50e0a <ep2bit>
   47a98:	490d      	ldr	r1, [pc, #52]	; (47ad0 <nrfx_usbd_transfer_out_drop+0x50>)
   47a9a:	2301      	movs	r3, #1
   47a9c:	fa03 f000 	lsl.w	r0, r3, r0
   47aa0:	680b      	ldr	r3, [r1, #0]
   47aa2:	ea23 0300 	bic.w	r3, r3, r0
   47aa6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   47aa8:	f012 0108 	ands.w	r1, r2, #8
   47aac:	d10a      	bne.n	47ac4 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   47aae:	f002 030f 	and.w	r3, r2, #15
   47ab2:	009b      	lsls	r3, r3, #2
   47ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47ab8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   47abc:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   47ac0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   47ac4:	f384 8811 	msr	BASEPRI, r4
   47ac8:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   47acc:	bd10      	pop	{r4, pc}
   47ace:	bf00      	nop
   47ad0:	200072d4 	.word	0x200072d4

00047ad4 <usbd_ep_abort>:
{
   47ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47ad6:	4601      	mov	r1, r0
	__asm__ volatile(
   47ad8:	f04f 0320 	mov.w	r3, #32
   47adc:	f3ef 8511 	mrs	r5, BASEPRI
   47ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   47ae4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47ae8:	f7ff fa5e 	bl	46fa8 <ep_state_access>
   47aec:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47aee:	4608      	mov	r0, r1
   47af0:	f009 f98b 	bl	50e0a <ep2bit>
   47af4:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   47af6:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47afa:	fa02 f200 	lsl.w	r2, r2, r0
   47afe:	482e      	ldr	r0, [pc, #184]	; (47bb8 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   47b00:	d118      	bne.n	47b34 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47b02:	6803      	ldr	r3, [r0, #0]
   47b04:	ea32 0403 	bics.w	r4, r2, r3
   47b08:	d00a      	beq.n	47b20 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   47b0a:	4608      	mov	r0, r1
   47b0c:	f7ff ffb8 	bl	47a80 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   47b10:	2303      	movs	r3, #3
   47b12:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   47b14:	f385 8811 	msr	BASEPRI, r5
   47b18:	f3bf 8f6f 	isb	sy
}
   47b1c:	b003      	add	sp, #12
   47b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47b20:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   47b24:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47b26:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   47b28:	4b24      	ldr	r3, [pc, #144]	; (47bbc <usbd_ep_abort+0xe8>)
   47b2a:	6818      	ldr	r0, [r3, #0]
   47b2c:	ea20 0002 	bic.w	r0, r0, r2
   47b30:	6018      	str	r0, [r3, #0]
   47b32:	e7ed      	b.n	47b10 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   47b34:	070b      	lsls	r3, r1, #28
   47b36:	d415      	bmi.n	47b64 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   47b38:	2980      	cmp	r1, #128	; 0x80
   47b3a:	4b21      	ldr	r3, [pc, #132]	; (47bc0 <usbd_ep_abort+0xec>)
   47b3c:	d02f      	beq.n	47b9e <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   47b3e:	f001 040f 	and.w	r4, r1, #15
   47b42:	f204 34da 	addw	r4, r4, #986	; 0x3da
   47b46:	0064      	lsls	r4, r4, #1
   47b48:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47b4c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47b50:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47b54:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47b56:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47b5a:	433c      	orrs	r4, r7
   47b5c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   47b60:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   47b64:	4f15      	ldr	r7, [pc, #84]	; (47bbc <usbd_ep_abort+0xe8>)
   47b66:	6804      	ldr	r4, [r0, #0]
   47b68:	683b      	ldr	r3, [r7, #0]
   47b6a:	ea64 0c03 	orn	ip, r4, r3
   47b6e:	ea1c 0f02 	tst.w	ip, r2
   47b72:	d0cf      	beq.n	47b14 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   47b74:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47b76:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   47b7a:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   47b7c:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47b7e:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   47b80:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   47b82:	2303      	movs	r3, #3
   47b84:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   47b86:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   47b8a:	4b0e      	ldr	r3, [pc, #56]	; (47bc4 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   47b8c:	f88d 1006 	strb.w	r1, [sp, #6]
   47b90:	2206      	movs	r2, #6
            m_event_handler(&evt);
   47b92:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   47b94:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   47b98:	a801      	add	r0, sp, #4
   47b9a:	4798      	blx	r3
   47b9c:	e7ba      	b.n	47b14 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   47b9e:	f240 74b4 	movw	r4, #1972	; 0x7b4
   47ba2:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47ba6:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47baa:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47bae:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47bb0:	f044 0404 	orr.w	r4, r4, #4
   47bb4:	e7d1      	b.n	47b5a <usbd_ep_abort+0x86>
   47bb6:	bf00      	nop
   47bb8:	20007264 	.word	0x20007264
   47bbc:	200072d4 	.word	0x200072d4
   47bc0:	40027000 	.word	0x40027000
   47bc4:	200073f8 	.word	0x200073f8

00047bc8 <ev_setup_handler>:
{
   47bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   47bca:	4b17      	ldr	r3, [pc, #92]	; (47c28 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47bcc:	4c17      	ldr	r4, [pc, #92]	; (47c2c <ev_setup_handler+0x64>)
   47bce:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   47bd2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   47bd4:	4e16      	ldr	r6, [pc, #88]	; (47c30 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47bd6:	43da      	mvns	r2, r3
   47bd8:	4b16      	ldr	r3, [pc, #88]	; (47c34 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   47bda:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47bdc:	681b      	ldr	r3, [r3, #0]
   47bde:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   47be0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47be2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   47be4:	f009 f911 	bl	50e0a <ep2bit>
   47be8:	2301      	movs	r3, #1
   47bea:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47bec:	4213      	tst	r3, r2
   47bee:	d002      	beq.n	47bf6 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   47bf0:	4608      	mov	r0, r1
   47bf2:	f7ff ff6f 	bl	47ad4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   47bf6:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   47bfa:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   47bfe:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   47c00:	f7ff faf0 	bl	471e4 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   47c04:	6823      	ldr	r3, [r4, #0]
   47c06:	f043 0301 	orr.w	r3, r3, #1
   47c0a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   47c0c:	2300      	movs	r3, #0
   47c0e:	f8ad 3005 	strh.w	r3, [sp, #5]
   47c12:	f88d 3007 	strb.w	r3, [sp, #7]
   47c16:	2305      	movs	r3, #5
   47c18:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   47c1c:	4b06      	ldr	r3, [pc, #24]	; (47c38 <ev_setup_handler+0x70>)
   47c1e:	a801      	add	r0, sp, #4
   47c20:	681b      	ldr	r3, [r3, #0]
   47c22:	4798      	blx	r3
}
   47c24:	b002      	add	sp, #8
   47c26:	bd70      	pop	{r4, r5, r6, pc}
   47c28:	40027000 	.word	0x40027000
   47c2c:	200072d4 	.word	0x200072d4
   47c30:	200077a0 	.word	0x200077a0
   47c34:	20007264 	.word	0x20007264
   47c38:	200073f8 	.word	0x200073f8

00047c3c <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   47c3c:	4b1b      	ldr	r3, [pc, #108]	; (47cac <nrfx_usbd_irq_handler+0x70>)
   47c3e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   47c42:	2300      	movs	r3, #0
{
   47c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   47c48:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47c4a:	461d      	mov	r5, r3
    while (to_process)
   47c4c:	b970      	cbnz	r0, 47c6c <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   47c4e:	4f18      	ldr	r7, [pc, #96]	; (47cb0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   47c50:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   47c54:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   47c58:	f04f 0801 	mov.w	r8, #1
    while (active)
   47c5c:	b9bc      	cbnz	r4, 47c8e <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   47c5e:	f7ff fd61 	bl	47724 <usbd_dmareq_process>
    if (setup_active)
   47c62:	b306      	cbz	r6, 47ca6 <nrfx_usbd_irq_handler+0x6a>
}
   47c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   47c68:	f7ff bfae 	b.w	47bc8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   47c6c:	fa90 f2a0 	rbit	r2, r0
   47c70:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   47c74:	490f      	ldr	r1, [pc, #60]	; (47cb4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   47c76:	0096      	lsls	r6, r2, #2
   47c78:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   47c7a:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47c7e:	680e      	ldr	r6, [r1, #0]
    if (ret)
   47c80:	b116      	cbz	r6, 47c88 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47c82:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   47c84:	6809      	ldr	r1, [r1, #0]
   47c86:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   47c88:	ea20 0002 	bic.w	r0, r0, r2
   47c8c:	e7de      	b.n	47c4c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   47c8e:	fa94 f5a4 	rbit	r5, r4
   47c92:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   47c96:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   47c9a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   47c9e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   47ca0:	ea24 0405 	bic.w	r4, r4, r5
   47ca4:	e7da      	b.n	47c5c <nrfx_usbd_irq_handler+0x20>
}
   47ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47caa:	bf00      	nop
   47cac:	40027000 	.word	0x40027000
   47cb0:	000560b4 	.word	0x000560b4
   47cb4:	40027100 	.word	0x40027100

00047cb8 <usbd_ep_abort_all>:
{
   47cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   47cba:	4e11      	ldr	r6, [pc, #68]	; (47d00 <usbd_ep_abort_all+0x48>)
   47cbc:	4b11      	ldr	r3, [pc, #68]	; (47d04 <usbd_ep_abort_all+0x4c>)
   47cbe:	6834      	ldr	r4, [r6, #0]
   47cc0:	681b      	ldr	r3, [r3, #0]
   47cc2:	0c24      	lsrs	r4, r4, #16
   47cc4:	0424      	lsls	r4, r4, #16
   47cc6:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   47cc8:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   47cca:	b91c      	cbnz	r4, 47cd4 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   47ccc:	f240 13ff 	movw	r3, #511	; 0x1ff
   47cd0:	6033      	str	r3, [r6, #0]
}
   47cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   47cd4:	fa94 f5a4 	rbit	r5, r4
   47cd8:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47cdc:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   47cde:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47ce0:	bfc6      	itte	gt
   47ce2:	f1a5 0010 	subgt.w	r0, r5, #16
   47ce6:	b2c0      	uxtbgt	r0, r0
   47ce8:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   47cec:	0703      	lsls	r3, r0, #28
   47cee:	d401      	bmi.n	47cf4 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   47cf0:	f7ff fef0 	bl	47ad4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   47cf4:	fa07 f505 	lsl.w	r5, r7, r5
   47cf8:	ea24 0405 	bic.w	r4, r4, r5
   47cfc:	e7e5      	b.n	47cca <usbd_ep_abort_all+0x12>
   47cfe:	bf00      	nop
   47d00:	200072d4 	.word	0x200072d4
   47d04:	20007264 	.word	0x20007264

00047d08 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   47d08:	4b0c      	ldr	r3, [pc, #48]	; (47d3c <nrfx_usbd_stop+0x34>)
   47d0a:	2280      	movs	r2, #128	; 0x80
{
   47d0c:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   47d0e:	2027      	movs	r0, #39	; 0x27
   47d10:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   47d14:	f7e5 fafa 	bl	2d30c <arch_irq_is_enabled>
   47d18:	b170      	cbz	r0, 47d38 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   47d1a:	4c09      	ldr	r4, [pc, #36]	; (47d40 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   47d1c:	f7ff ffcc 	bl	47cb8 <usbd_ep_abort_all>
   47d20:	2300      	movs	r3, #0
   47d22:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   47d26:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   47d28:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   47d2c:	f7e5 fada 	bl	2d2e4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   47d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47d34:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   47d38:	bd10      	pop	{r4, pc}
   47d3a:	bf00      	nop
   47d3c:	e000e100 	.word	0xe000e100
   47d40:	40027000 	.word	0x40027000

00047d44 <nrfx_usbd_disable>:
{
   47d44:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   47d46:	f7ff ffdf 	bl	47d08 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   47d4a:	4b08      	ldr	r3, [pc, #32]	; (47d6c <nrfx_usbd_disable+0x28>)
   47d4c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   47d50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   47d54:	2200      	movs	r2, #0
   47d56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   47d5a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   47d5e:	f7ff f931 	bl	46fc4 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   47d62:	4b03      	ldr	r3, [pc, #12]	; (47d70 <nrfx_usbd_disable+0x2c>)
   47d64:	2201      	movs	r2, #1
   47d66:	701a      	strb	r2, [r3, #0]
}
   47d68:	bd08      	pop	{r3, pc}
   47d6a:	bf00      	nop
   47d6c:	40027000 	.word	0x40027000
   47d70:	2000779f 	.word	0x2000779f

00047d74 <nrfx_usbd_suspend>:
{
   47d74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   47d76:	f04f 0320 	mov.w	r3, #32
   47d7a:	f3ef 8511 	mrs	r5, BASEPRI
   47d7e:	f383 8812 	msr	BASEPRI_MAX, r3
   47d82:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   47d86:	4b11      	ldr	r3, [pc, #68]	; (47dcc <nrfx_usbd_suspend+0x58>)
   47d88:	781b      	ldrb	r3, [r3, #0]
   47d8a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   47d8e:	b933      	cbnz	r3, 47d9e <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   47d90:	2400      	movs	r4, #0
	__asm__ volatile(
   47d92:	f385 8811 	msr	BASEPRI, r5
   47d96:	f3bf 8f6f 	isb	sy
}
   47d9a:	4620      	mov	r0, r4
   47d9c:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   47d9e:	f7ff ff8b 	bl	47cb8 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   47da2:	4b0b      	ldr	r3, [pc, #44]	; (47dd0 <nrfx_usbd_suspend+0x5c>)
   47da4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   47da8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   47dac:	d1f0      	bne.n	47d90 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   47dae:	2101      	movs	r1, #1
   47db0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   47db4:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   47db8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   47dbc:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   47dbe:	bf42      	ittt	mi
   47dc0:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   47dc4:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   47dc8:	4614      	movmi	r4, r2
}
   47dca:	e7e2      	b.n	47d92 <nrfx_usbd_suspend+0x1e>
   47dcc:	2000779d 	.word	0x2000779d
   47dd0:	40027000 	.word	0x40027000

00047dd4 <nrfx_usbd_ep_disable>:
{
   47dd4:	b510      	push	{r4, lr}
   47dd6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   47dd8:	f7ff fe7c 	bl	47ad4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   47ddc:	4a10      	ldr	r2, [pc, #64]	; (47e20 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   47dde:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   47de2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   47de6:	f04f 0301 	mov.w	r3, #1
   47dea:	bf14      	ite	ne
   47dec:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47df0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   47df4:	fa03 f300 	lsl.w	r3, r3, r0
   47df8:	ea6f 0303 	mvn.w	r3, r3
   47dfc:	bf15      	itete	ne
   47dfe:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47e00:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   47e02:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47e06:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47e0a:	bf14      	ite	ne
   47e0c:	4b05      	ldrne	r3, [pc, #20]	; (47e24 <nrfx_usbd_ep_disable+0x50>)
   47e0e:	4b06      	ldreq	r3, [pc, #24]	; (47e28 <nrfx_usbd_ep_disable+0x54>)
   47e10:	5c1a      	ldrb	r2, [r3, r0]
   47e12:	2301      	movs	r3, #1
   47e14:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   47e16:	4a02      	ldr	r2, [pc, #8]	; (47e20 <nrfx_usbd_ep_disable+0x4c>)
   47e18:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   47e1c:	bd10      	pop	{r4, pc}
   47e1e:	bf00      	nop
   47e20:	40027000 	.word	0x40027000
   47e24:	00056b81 	.word	0x00056b81
   47e28:	00056b8a 	.word	0x00056b8a

00047e2c <nrfx_usbd_ep_enable>:
{
   47e2c:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47e2e:	b243      	sxtb	r3, r0
   47e30:	2b00      	cmp	r3, #0
   47e32:	4b23      	ldr	r3, [pc, #140]	; (47ec0 <nrfx_usbd_ep_enable+0x94>)
   47e34:	4a23      	ldr	r2, [pc, #140]	; (47ec4 <nrfx_usbd_ep_enable+0x98>)
   47e36:	bfa8      	it	ge
   47e38:	461a      	movge	r2, r3
   47e3a:	f000 030f 	and.w	r3, r0, #15
   47e3e:	f04f 0401 	mov.w	r4, #1
   47e42:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   47e44:	4a20      	ldr	r2, [pc, #128]	; (47ec8 <nrfx_usbd_ep_enable+0x9c>)
   47e46:	fa04 f101 	lsl.w	r1, r4, r1
{
   47e4a:	4605      	mov	r5, r0
   47e4c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   47e50:	da0c      	bge.n	47e6c <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   47e52:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   47e56:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47e58:	07c8      	lsls	r0, r1, #31
   47e5a:	d406      	bmi.n	47e6a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   47e5c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   47e60:	fa04 f303 	lsl.w	r3, r4, r3
   47e64:	4303      	orrs	r3, r0
   47e66:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   47e6a:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   47e6c:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   47e70:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47e72:	07c9      	lsls	r1, r1, #31
   47e74:	d4f9      	bmi.n	47e6a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   47e76:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   47e7a:	fa04 f103 	lsl.w	r1, r4, r3
   47e7e:	4331      	orrs	r1, r6
   47e80:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   47e84:	2b00      	cmp	r3, #0
   47e86:	d0f0      	beq.n	47e6a <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   47e88:	0703      	lsls	r3, r0, #28
   47e8a:	d4ee      	bmi.n	47e6a <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   47e8c:	f04f 0320 	mov.w	r3, #32
   47e90:	f3ef 8611 	mrs	r6, BASEPRI
   47e94:	f383 8812 	msr	BASEPRI_MAX, r3
   47e98:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   47e9c:	f7ff fdf0 	bl	47a80 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47ea0:	4628      	mov	r0, r5
   47ea2:	f008 ffb2 	bl	50e0a <ep2bit>
   47ea6:	4a09      	ldr	r2, [pc, #36]	; (47ecc <nrfx_usbd_ep_enable+0xa0>)
   47ea8:	6813      	ldr	r3, [r2, #0]
   47eaa:	fa04 f000 	lsl.w	r0, r4, r0
   47eae:	ea23 0000 	bic.w	r0, r3, r0
   47eb2:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   47eb4:	f386 8811 	msr	BASEPRI, r6
   47eb8:	f3bf 8f6f 	isb	sy
}
   47ebc:	e7d5      	b.n	47e6a <nrfx_usbd_ep_enable+0x3e>
   47ebe:	bf00      	nop
   47ec0:	00056b8a 	.word	0x00056b8a
   47ec4:	00056b81 	.word	0x00056b81
   47ec8:	40027000 	.word	0x40027000
   47ecc:	20007264 	.word	0x20007264

00047ed0 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   47ed0:	0603      	lsls	r3, r0, #24
{
   47ed2:	b510      	push	{r4, lr}
   47ed4:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   47ed6:	d405      	bmi.n	47ee4 <nrfx_usbd_ep_stall_clear+0x14>
   47ed8:	f7ff fd40 	bl	4795c <nrfx_usbd_ep_stall_check>
   47edc:	b110      	cbz	r0, 47ee4 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   47ede:	4620      	mov	r0, r4
   47ee0:	f7ff fdce 	bl	47a80 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   47ee4:	4b01      	ldr	r3, [pc, #4]	; (47eec <nrfx_usbd_ep_stall_clear+0x1c>)
   47ee6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   47eea:	bd10      	pop	{r4, pc}
   47eec:	40027000 	.word	0x40027000

00047ef0 <kscan_matrix_init>:
    }

    return 0;
}

static int kscan_matrix_init(const struct device *dev) {
   47ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   47ef4:	6906      	ldr	r6, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   47ef6:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   47ef8:	6030      	str	r0, [r6, #0]
static int kscan_matrix_init(const struct device *dev) {
   47efa:	4604      	mov	r4, r0
    for (int i = 0; i < config->inputs.len; i++) {
   47efc:	2500      	movs	r5, #0
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   47efe:	f04f 0901 	mov.w	r9, #1
    for (int i = 0; i < config->inputs.len; i++) {
   47f02:	697b      	ldr	r3, [r7, #20]
   47f04:	42ab      	cmp	r3, r5
   47f06:	d90a      	bls.n	47f1e <kscan_matrix_init+0x2e>
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   47f08:	f8d7 a010 	ldr.w	sl, [r7, #16]
   47f0c:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
    if (!device_is_ready(gpio->port)) {
   47f10:	f85a 0035 	ldr.w	r0, [sl, r5, lsl #3]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   47f14:	eb0a 08c5 	add.w	r8, sl, r5, lsl #3
   47f18:	f009 fad1 	bl	514be <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   47f1c:	b980      	cbnz	r0, 47f40 <kscan_matrix_init+0x50>

    kscan_matrix_init_inputs(dev);
    kscan_matrix_init_outputs(dev);
   47f1e:	6867      	ldr	r7, [r4, #4]
    for (int i = 0; i < config->outputs.len; i++) {
   47f20:	2500      	movs	r5, #0
   47f22:	69fb      	ldr	r3, [r7, #28]
   47f24:	42ab      	cmp	r3, r5
   47f26:	d82c      	bhi.n	47f82 <kscan_matrix_init+0x92>
    kscan_matrix_set_all_outputs(dev, 0);
   47f28:	6860      	ldr	r0, [r4, #4]
   47f2a:	2100      	movs	r1, #0
   47f2c:	f009 f875 	bl	5101a <kscan_matrix_set_all_outputs.isra.0>

    k_work_init_delayable(&data->work, kscan_matrix_work_handler);
   47f30:	f106 0008 	add.w	r0, r6, #8
   47f34:	491c      	ldr	r1, [pc, #112]	; (47fa8 <kscan_matrix_init+0xb8>)
   47f36:	f009 fd26 	bl	51986 <k_work_init_delayable>

    return 0;
}
   47f3a:	2000      	movs	r0, #0
   47f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int err = gpio_pin_configure_dt(gpio, GPIO_INPUT);
   47f40:	f44f 7180 	mov.w	r1, #256	; 0x100
   47f44:	4640      	mov	r0, r8
   47f46:	f009 f809 	bl	50f5c <gpio_pin_configure_dt>
    if (err) {
   47f4a:	2800      	cmp	r0, #0
   47f4c:	d1e7      	bne.n	47f1e <kscan_matrix_init+0x2e>
    struct kscan_matrix_irq_callback *irq = &data->irqs[index];
   47f4e:	6922      	ldr	r2, [r4, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   47f50:	4b16      	ldr	r3, [pc, #88]	; (47fac <kscan_matrix_init+0xbc>)
   47f52:	6b90      	ldr	r0, [r2, #56]	; 0x38
   47f54:	0129      	lsls	r1, r5, #4
   47f56:	eb00 1205 	add.w	r2, r0, r5, lsl #4
    irq->dev = dev;
   47f5a:	5044      	str	r4, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   47f5c:	f898 0004 	ldrb.w	r0, [r8, #4]
   47f60:	fa09 f000 	lsl.w	r0, r9, r0
	callback->pin_mask = pin_mask;
   47f64:	e9c2 3002 	strd	r3, r0, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   47f68:	f85a 000b 	ldr.w	r0, [sl, fp]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   47f6c:	6883      	ldr	r3, [r0, #8]
   47f6e:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   47f70:	1d11      	adds	r1, r2, #4
   47f72:	2b00      	cmp	r3, #0
   47f74:	d0d3      	beq.n	47f1e <kscan_matrix_init+0x2e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   47f76:	2201      	movs	r2, #1
   47f78:	4798      	blx	r3
    if (err) {
   47f7a:	2800      	cmp	r0, #0
   47f7c:	d1cf      	bne.n	47f1e <kscan_matrix_init+0x2e>
    for (int i = 0; i < config->inputs.len; i++) {
   47f7e:	3501      	adds	r5, #1
   47f80:	e7bf      	b.n	47f02 <kscan_matrix_init+0x12>
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i];
   47f82:	69bb      	ldr	r3, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   47f84:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i];
   47f88:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
   47f8c:	f009 fa97 	bl	514be <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   47f90:	2800      	cmp	r0, #0
   47f92:	d0c9      	beq.n	47f28 <kscan_matrix_init+0x38>
    int err = gpio_pin_configure_dt(gpio, GPIO_OUTPUT);
   47f94:	f44f 7100 	mov.w	r1, #512	; 0x200
   47f98:	4640      	mov	r0, r8
   47f9a:	f008 ffdf 	bl	50f5c <gpio_pin_configure_dt>
    if (err) {
   47f9e:	2800      	cmp	r0, #0
   47fa0:	d1c2      	bne.n	47f28 <kscan_matrix_init+0x38>
    for (int i = 0; i < config->outputs.len; i++) {
   47fa2:	3501      	adds	r5, #1
   47fa4:	e7bd      	b.n	47f22 <kscan_matrix_init+0x32>
   47fa6:	bf00      	nop
   47fa8:	000511d1 	.word	0x000511d1
   47fac:	000511f7 	.word	0x000511f7

00047fb0 <vddh_sample_fetch>:
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
    // Make sure selected channel is supported
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   47fb0:	f1a1 0327 	sub.w	r3, r1, #39	; 0x27
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   47fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   47fb6:	b299      	uxth	r1, r3
   47fb8:	2912      	cmp	r1, #18
   47fba:	d828      	bhi.n	4800e <vddh_sample_fetch+0x5e>
   47fbc:	4b15      	ldr	r3, [pc, #84]	; (48014 <vddh_sample_fetch+0x64>)
   47fbe:	40cb      	lsrs	r3, r1
   47fc0:	43db      	mvns	r3, r3
   47fc2:	f013 0401 	ands.w	r4, r3, #1
   47fc6:	d122      	bne.n	4800e <vddh_sample_fetch+0x5e>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   47fc8:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   47fca:	4813      	ldr	r0, [pc, #76]	; (48018 <vddh_sample_fetch+0x68>)
   47fcc:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   47fce:	f105 0108 	add.w	r1, r5, #8
   47fd2:	6873      	ldr	r3, [r6, #4]
   47fd4:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   47fd6:	76ac      	strb	r4, [r5, #26]

    if (rc != 0) {
   47fd8:	4604      	mov	r4, r0
   47fda:	b9a8      	cbnz	r0, 48008 <vddh_sample_fetch+0x58>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   47fdc:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   47fde:	8932      	ldrh	r2, [r6, #8]
   47fe0:	7828      	ldrb	r0, [r5, #0]
   47fe2:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   47fe4:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   47fe6:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   47fe8:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   47fea:	f7fc ff3f 	bl	44e6c <adc_gain_invert>
	if (ret == 0) {
   47fee:	4604      	mov	r4, r0
   47ff0:	b950      	cbnz	r0, 48008 <vddh_sample_fetch+0x58>
		*valp = (adc_mv >> resolution);
   47ff2:	9801      	ldr	r0, [sp, #4]
   47ff4:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   47ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   47ffa:	b280      	uxth	r0, r0
   47ffc:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   47ffe:	b200      	sxth	r0, r0
   48000:	f009 f950 	bl	512a4 <lithium_ion_mv_to_pct>
   48004:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   48008:	4620      	mov	r0, r4
   4800a:	b003      	add	sp, #12
   4800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -ENOTSUP;
   4800e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   48012:	e7f9      	b.n	48008 <vddh_sample_fetch+0x58>
   48014:	00040021 	.word	0x00040021
   48018:	000522bc 	.word	0x000522bc

0004801c <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   4801c:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   4801e:	6904      	ldr	r4, [r0, #16]
   48020:	4d12      	ldr	r5, [pc, #72]	; (4806c <vddh_init+0x50>)
   48022:	4628      	mov	r0, r5
   48024:	f009 fa4b 	bl	514be <z_device_is_ready>

    if (!device_is_ready(adc)) {
   48028:	b1e0      	cbz	r0, 48064 <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   4802a:	2214      	movs	r2, #20
   4802c:	2100      	movs	r1, #0
   4802e:	f104 0008 	add.w	r0, r4, #8
   48032:	f004 fb4b 	bl	4c6cc <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   48036:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   4803a:	490d      	ldr	r1, [pc, #52]	; (48070 <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   4803c:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   4803e:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   48042:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   48046:	2202      	movs	r2, #2
   48048:	2301      	movs	r3, #1
   4804a:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   4804c:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   48050:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   48052:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   48054:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   48056:	68ab      	ldr	r3, [r5, #8]
   48058:	4621      	mov	r1, r4
   4805a:	4628      	mov	r0, r5
   4805c:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   4805e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   48062:	4718      	bx	r3
   48064:	f06f 0012 	mvn.w	r0, #18
   48068:	bd70      	pop	{r4, r5, r6, pc}
   4806a:	bf00      	nop
   4806c:	000522bc 	.word	0x000522bc
   48070:	40280401 	.word	0x40280401

00048074 <ec11_init_interrupt>:
    setup_int(dev, true);

    return 0;
}

int ec11_init_interrupt(const struct device *dev) {
   48074:	b570      	push	{r4, r5, r6, lr}
    struct ec11_data *drv_data = dev->data;
   48076:	6904      	ldr	r4, [r0, #16]
    const struct ec11_config *drv_cfg = dev->config;
   48078:	6846      	ldr	r6, [r0, #4]

    drv_data->dev = dev;
   4807a:	6260      	str	r0, [r4, #36]	; 0x24
    /* setup gpio interrupt */

    gpio_init_callback(&drv_data->a_gpio_cb, ec11_a_gpio_callback, BIT(drv_cfg->a_pin));
   4807c:	7933      	ldrb	r3, [r6, #4]
	callback->handler = handler;
   4807e:	4a15      	ldr	r2, [pc, #84]	; (480d4 <ec11_init_interrupt+0x60>)

    if (gpio_add_callback(drv_data->a, &drv_data->a_gpio_cb) < 0) {
   48080:	6820      	ldr	r0, [r4, #0]
    gpio_init_callback(&drv_data->a_gpio_cb, ec11_a_gpio_callback, BIT(drv_cfg->a_pin));
   48082:	2501      	movs	r5, #1
   48084:	fa05 f303 	lsl.w	r3, r5, r3
	callback->pin_mask = pin_mask;
   48088:	e9c4 2304 	strd	r2, r3, [r4, #16]
	if (api->manage_callback == NULL) {
   4808c:	6883      	ldr	r3, [r0, #8]
   4808e:	69db      	ldr	r3, [r3, #28]
   48090:	f104 010c 	add.w	r1, r4, #12
   48094:	b913      	cbnz	r3, 4809c <ec11_init_interrupt+0x28>
        LOG_DBG("Failed to set A callback!");
        return -EIO;
   48096:	f06f 0004 	mvn.w	r0, #4
#elif defined(CONFIG_EC11_TRIGGER_GLOBAL_THREAD)
    k_work_init(&drv_data->work, ec11_work_cb);
#endif

    return 0;
}
   4809a:	bd70      	pop	{r4, r5, r6, pc}
	return api->manage_callback(port, callback, true);
   4809c:	462a      	mov	r2, r5
   4809e:	4798      	blx	r3
    if (gpio_add_callback(drv_data->a, &drv_data->a_gpio_cb) < 0) {
   480a0:	2800      	cmp	r0, #0
   480a2:	dbf8      	blt.n	48096 <ec11_init_interrupt+0x22>
    gpio_init_callback(&drv_data->b_gpio_cb, ec11_b_gpio_callback, BIT(drv_cfg->b_pin));
   480a4:	7b33      	ldrb	r3, [r6, #12]
	callback->handler = handler;
   480a6:	4a0c      	ldr	r2, [pc, #48]	; (480d8 <ec11_init_interrupt+0x64>)
    if (gpio_add_callback(drv_data->b, &drv_data->b_gpio_cb) < 0) {
   480a8:	6860      	ldr	r0, [r4, #4]
    gpio_init_callback(&drv_data->b_gpio_cb, ec11_b_gpio_callback, BIT(drv_cfg->b_pin));
   480aa:	fa05 f303 	lsl.w	r3, r5, r3
	callback->pin_mask = pin_mask;
   480ae:	e9c4 2307 	strd	r2, r3, [r4, #28]
	if (api->manage_callback == NULL) {
   480b2:	6883      	ldr	r3, [r0, #8]
   480b4:	69db      	ldr	r3, [r3, #28]
   480b6:	f104 0118 	add.w	r1, r4, #24
   480ba:	2b00      	cmp	r3, #0
   480bc:	d0eb      	beq.n	48096 <ec11_init_interrupt+0x22>
	return api->manage_callback(port, callback, true);
   480be:	462a      	mov	r2, r5
   480c0:	4798      	blx	r3
    if (gpio_add_callback(drv_data->b, &drv_data->b_gpio_cb) < 0) {
   480c2:	2800      	cmp	r0, #0
   480c4:	dbe7      	blt.n	48096 <ec11_init_interrupt+0x22>
    k_work_init(&drv_data->work, ec11_work_cb);
   480c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   480ca:	4904      	ldr	r1, [pc, #16]	; (480dc <ec11_init_interrupt+0x68>)
   480cc:	f009 fc25 	bl	5191a <k_work_init>
    return 0;
   480d0:	2000      	movs	r0, #0
   480d2:	e7e2      	b.n	4809a <ec11_init_interrupt+0x26>
   480d4:	0005147d 	.word	0x0005147d
   480d8:	00051465 	.word	0x00051465
   480dc:	00051449 	.word	0x00051449

000480e0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   480e0:	4b0e      	ldr	r3, [pc, #56]	; (4811c <z_sys_init_run_level+0x3c>)
{
   480e2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   480e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   480e8:	3001      	adds	r0, #1
   480ea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   480ee:	42a6      	cmp	r6, r4
   480f0:	d800      	bhi.n	480f4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   480f2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   480f4:	e9d4 3500 	ldrd	r3, r5, [r4]
   480f8:	4628      	mov	r0, r5
   480fa:	4798      	blx	r3
		if (dev != NULL) {
   480fc:	b165      	cbz	r5, 48118 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   480fe:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   48100:	b130      	cbz	r0, 48110 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   48102:	2800      	cmp	r0, #0
   48104:	bfb8      	it	lt
   48106:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   48108:	28ff      	cmp	r0, #255	; 0xff
   4810a:	bfa8      	it	ge
   4810c:	20ff      	movge	r0, #255	; 0xff
   4810e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   48110:	785a      	ldrb	r2, [r3, #1]
   48112:	f042 0201 	orr.w	r2, r2, #1
   48116:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   48118:	3408      	adds	r4, #8
   4811a:	e7e8      	b.n	480ee <z_sys_init_run_level+0xe>
   4811c:	000561c4 	.word	0x000561c4

00048120 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   48120:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   48122:	4605      	mov	r5, r0
   48124:	b910      	cbnz	r0, 4812c <z_impl_device_get_binding+0xc>
		return NULL;
   48126:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   48128:	4620      	mov	r0, r4
   4812a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   4812c:	7803      	ldrb	r3, [r0, #0]
   4812e:	2b00      	cmp	r3, #0
   48130:	d0f9      	beq.n	48126 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   48132:	4c0e      	ldr	r4, [pc, #56]	; (4816c <z_impl_device_get_binding+0x4c>)
   48134:	4e0e      	ldr	r6, [pc, #56]	; (48170 <z_impl_device_get_binding+0x50>)
   48136:	42b4      	cmp	r4, r6
   48138:	d108      	bne.n	4814c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   4813a:	4c0c      	ldr	r4, [pc, #48]	; (4816c <z_impl_device_get_binding+0x4c>)
   4813c:	42b4      	cmp	r4, r6
   4813e:	d0f2      	beq.n	48126 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   48140:	4620      	mov	r0, r4
   48142:	f009 f9bc 	bl	514be <z_device_is_ready>
   48146:	b950      	cbnz	r0, 4815e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   48148:	3418      	adds	r4, #24
   4814a:	e7f7      	b.n	4813c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   4814c:	4620      	mov	r0, r4
   4814e:	f009 f9b6 	bl	514be <z_device_is_ready>
   48152:	b110      	cbz	r0, 4815a <z_impl_device_get_binding+0x3a>
   48154:	6823      	ldr	r3, [r4, #0]
   48156:	42ab      	cmp	r3, r5
   48158:	d0e6      	beq.n	48128 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   4815a:	3418      	adds	r4, #24
   4815c:	e7eb      	b.n	48136 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   4815e:	6821      	ldr	r1, [r4, #0]
   48160:	4628      	mov	r0, r5
   48162:	f004 fa7a 	bl	4c65a <strcmp>
   48166:	2800      	cmp	r0, #0
   48168:	d1ee      	bne.n	48148 <z_impl_device_get_binding+0x28>
   4816a:	e7dd      	b.n	48128 <z_impl_device_get_binding+0x8>
   4816c:	00052244 	.word	0x00052244
   48170:	0005267c 	.word	0x0005267c

00048174 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   48174:	4b01      	ldr	r3, [pc, #4]	; (4817c <z_impl_z_errno+0x8>)
   48176:	6898      	ldr	r0, [r3, #8]
}
   48178:	3064      	adds	r0, #100	; 0x64
   4817a:	4770      	bx	lr
   4817c:	20007530 	.word	0x20007530

00048180 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   48180:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   48182:	2300      	movs	r3, #0
{
   48184:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   48186:	2201      	movs	r2, #1
   48188:	e9cd 2304 	strd	r2, r3, [sp, #16]
   4818c:	220f      	movs	r2, #15
   4818e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   48192:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   48194:	4c0b      	ldr	r4, [pc, #44]	; (481c4 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   48196:	4b0c      	ldr	r3, [pc, #48]	; (481c8 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   48198:	490c      	ldr	r1, [pc, #48]	; (481cc <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   4819a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   4819c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   481a0:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   481a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   481a8:	9300      	str	r3, [sp, #0]
   481aa:	fb02 1100 	mla	r1, r2, r0, r1
   481ae:	4b08      	ldr	r3, [pc, #32]	; (481d0 <init_idle_thread+0x50>)
   481b0:	4620      	mov	r0, r4
   481b2:	f000 f90b 	bl	483cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   481b6:	7b63      	ldrb	r3, [r4, #13]
   481b8:	f023 0304 	bic.w	r3, r3, #4
   481bc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   481be:	b006      	add	sp, #24
   481c0:	bd10      	pop	{r4, pc}
   481c2:	bf00      	nop
   481c4:	20004210 	.word	0x20004210
   481c8:	20007530 	.word	0x20007530
   481cc:	20009e28 	.word	0x20009e28
   481d0:	0004853d 	.word	0x0004853d

000481d4 <bg_thread_main>:
{
   481d4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   481d6:	4b0a      	ldr	r3, [pc, #40]	; (48200 <bg_thread_main+0x2c>)
   481d8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   481da:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   481dc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   481de:	f7ff ff7f 	bl	480e0 <z_sys_init_run_level>
	boot_banner();
   481e2:	f009 ff2b 	bl	5203c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   481e6:	2003      	movs	r0, #3
   481e8:	f7ff ff7a 	bl	480e0 <z_sys_init_run_level>
	z_init_static_threads();
   481ec:	f000 f94a 	bl	48484 <z_init_static_threads>
	main();
   481f0:	f7e2 ff1a 	bl	2b028 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   481f4:	4a03      	ldr	r2, [pc, #12]	; (48204 <bg_thread_main+0x30>)
   481f6:	7b13      	ldrb	r3, [r2, #12]
   481f8:	f023 0301 	bic.w	r3, r3, #1
   481fc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   481fe:	bd08      	pop	{r3, pc}
   48200:	200077a1 	.word	0x200077a1
   48204:	20004290 	.word	0x20004290

00048208 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   48208:	4802      	ldr	r0, [pc, #8]	; (48214 <z_bss_zero+0xc>)
   4820a:	4a03      	ldr	r2, [pc, #12]	; (48218 <z_bss_zero+0x10>)
   4820c:	2100      	movs	r1, #0
   4820e:	1a12      	subs	r2, r2, r0
   48210:	f004 ba5c 	b.w	4c6cc <memset>
   48214:	200016f8 	.word	0x200016f8
   48218:	200077a4 	.word	0x200077a4

0004821c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   4821c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   4821e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 482e8 <z_cstart+0xcc>
   48222:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   48224:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   48228:	4d30      	ldr	r5, [pc, #192]	; (482ec <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   4822a:	4e31      	ldr	r6, [pc, #196]	; (482f0 <z_cstart+0xd4>)
   4822c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   4822e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 482f4 <z_cstart+0xd8>
   48232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   48236:	2400      	movs	r4, #0
   48238:	616b      	str	r3, [r5, #20]
   4823a:	23e0      	movs	r3, #224	; 0xe0
   4823c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   48240:	77ec      	strb	r4, [r5, #31]
   48242:	762c      	strb	r4, [r5, #24]
   48244:	766c      	strb	r4, [r5, #25]
   48246:	76ac      	strb	r4, [r5, #26]
   48248:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   4824c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   4824e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   48252:	626b      	str	r3, [r5, #36]	; 0x24
   48254:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   48258:	f7e5 fa30 	bl	2d6bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   4825c:	f7e5 f814 	bl	2d288 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   48260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48264:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   48266:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   48268:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   4826a:	f7e5 fadd 	bl	2d828 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   4826e:	f7e5 fa6d 	bl	2d74c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   48272:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   48276:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   48278:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   4827c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   48280:	f001 fb04 	bl	4988c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   48284:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   48286:	f009 f919 	bl	514bc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   4828a:	4620      	mov	r0, r4
   4828c:	f7ff ff28 	bl	480e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   48290:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   48292:	4d19      	ldr	r5, [pc, #100]	; (482f8 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   48294:	f7ff ff24 	bl	480e0 <z_sys_init_run_level>
	z_sched_init();
   48298:	f000 ff5a 	bl	49150 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   4829c:	4b17      	ldr	r3, [pc, #92]	; (482fc <z_cstart+0xe0>)
   4829e:	9305      	str	r3, [sp, #20]
   482a0:	2301      	movs	r3, #1
   482a2:	4917      	ldr	r1, [pc, #92]	; (48300 <z_cstart+0xe4>)
   482a4:	9400      	str	r4, [sp, #0]
   482a6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   482aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   482ae:	464b      	mov	r3, r9
   482b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   482b4:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   482b6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   482b8:	f000 f888 	bl	483cc <z_setup_new_thread>
   482bc:	7b6a      	ldrb	r2, [r5, #13]
   482be:	4607      	mov	r7, r0
   482c0:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   482c4:	4628      	mov	r0, r5
   482c6:	736a      	strb	r2, [r5, #13]
   482c8:	f009 fc06 	bl	51ad8 <z_ready_thread>
		init_idle_thread(i);
   482cc:	4620      	mov	r0, r4
   482ce:	f7ff ff57 	bl	48180 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   482d2:	4b0c      	ldr	r3, [pc, #48]	; (48304 <z_cstart+0xe8>)
   482d4:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   482d6:	464a      	mov	r2, r9
   482d8:	4639      	mov	r1, r7
   482da:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   482dc:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   482de:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   482e2:	f7e5 f8d9 	bl	2d498 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   482e6:	bf00      	nop
   482e8:	2000a768 	.word	0x2000a768
   482ec:	e000ed00 	.word	0xe000ed00
   482f0:	20007530 	.word	0x20007530
   482f4:	000481d5 	.word	0x000481d5
   482f8:	20004290 	.word	0x20004290
   482fc:	00056b9b 	.word	0x00056b9b
   48300:	20009a28 	.word	0x20009a28
   48304:	20004210 	.word	0x20004210

00048308 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   48308:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   4830a:	4c06      	ldr	r4, [pc, #24]	; (48324 <statics_init+0x1c>)
   4830c:	4d06      	ldr	r5, [pc, #24]	; (48328 <statics_init+0x20>)
   4830e:	42ac      	cmp	r4, r5
   48310:	d301      	bcc.n	48316 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   48312:	2000      	movs	r0, #0
   48314:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   48316:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   4831a:	4620      	mov	r0, r4
   4831c:	f009 f900 	bl	51520 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   48320:	3414      	adds	r4, #20
   48322:	e7f4      	b.n	4830e <statics_init+0x6>
   48324:	20001340 	.word	0x20001340
   48328:	20001354 	.word	0x20001354

0004832c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   4832c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   4832e:	4b0e      	ldr	r3, [pc, #56]	; (48368 <init_mem_slab_module+0x3c>)
   48330:	4c0e      	ldr	r4, [pc, #56]	; (4836c <init_mem_slab_module+0x40>)
   48332:	42a3      	cmp	r3, r4
   48334:	d301      	bcc.n	4833a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   48336:	2000      	movs	r0, #0
	return rc;
}
   48338:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   4833a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   4833e:	ea41 0200 	orr.w	r2, r1, r0
   48342:	f012 0203 	ands.w	r2, r2, #3
   48346:	d10b      	bne.n	48360 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   48348:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   4834a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   4834c:	42aa      	cmp	r2, r5
   4834e:	d101      	bne.n	48354 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   48350:	331c      	adds	r3, #28
   48352:	e7ee      	b.n	48332 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   48354:	695e      	ldr	r6, [r3, #20]
   48356:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   48358:	3201      	adds	r2, #1
		slab->free_list = p;
   4835a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   4835c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   4835e:	e7f5      	b.n	4834c <init_mem_slab_module+0x20>
	return rc;
   48360:	f06f 0015 	mvn.w	r0, #21
   48364:	e7e8      	b.n	48338 <init_mem_slab_module+0xc>
   48366:	bf00      	nop
   48368:	200012d0 	.word	0x200012d0
   4836c:	20001340 	.word	0x20001340

00048370 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   48370:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48372:	460c      	mov	r4, r1
	__asm__ volatile(
   48374:	f04f 0520 	mov.w	r5, #32
   48378:	f3ef 8111 	mrs	r1, BASEPRI
   4837c:	f385 8812 	msr	BASEPRI_MAX, r5
   48380:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   48384:	6945      	ldr	r5, [r0, #20]
   48386:	b15d      	cbz	r5, 483a0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   48388:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   4838a:	682b      	ldr	r3, [r5, #0]
   4838c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   4838e:	6983      	ldr	r3, [r0, #24]
   48390:	3301      	adds	r3, #1
   48392:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   48394:	2000      	movs	r0, #0
	__asm__ volatile(
   48396:	f381 8811 	msr	BASEPRI, r1
   4839a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   4839e:	e011      	b.n	483c4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   483a0:	ea52 0c03 	orrs.w	ip, r2, r3
   483a4:	d103      	bne.n	483ae <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   483a6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   483a8:	f06f 000b 	mvn.w	r0, #11
   483ac:	e7f3      	b.n	48396 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   483ae:	e9cd 2300 	strd	r2, r3, [sp]
   483b2:	4602      	mov	r2, r0
   483b4:	3008      	adds	r0, #8
   483b6:	f000 fe21 	bl	48ffc <z_pend_curr>
		if (result == 0) {
   483ba:	b918      	cbnz	r0, 483c4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   483bc:	4b02      	ldr	r3, [pc, #8]	; (483c8 <k_mem_slab_alloc+0x58>)
   483be:	689b      	ldr	r3, [r3, #8]
   483c0:	695b      	ldr	r3, [r3, #20]
   483c2:	6023      	str	r3, [r4, #0]
}
   483c4:	b003      	add	sp, #12
   483c6:	bd30      	pop	{r4, r5, pc}
   483c8:	20007530 	.word	0x20007530

000483cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   483cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   483d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   483d2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   483d4:	2604      	movs	r6, #4
   483d6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   483d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   483da:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   483dc:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   483e0:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   483e2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   483e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   483e8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   483ea:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   483ee:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   483f2:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   483f6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   483f8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   483fa:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   483fc:	9202      	str	r2, [sp, #8]
   483fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   48400:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   48402:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   48406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   48408:	9200      	str	r2, [sp, #0]
   4840a:	4642      	mov	r2, r8
{
   4840c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4840e:	f7e5 f827 	bl	2d460 <arch_new_thread>
	if (!_current) {
   48412:	4b05      	ldr	r3, [pc, #20]	; (48428 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   48414:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   48416:	689b      	ldr	r3, [r3, #8]
   48418:	b103      	cbz	r3, 4841c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   4841a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   4841c:	6763      	str	r3, [r4, #116]	; 0x74
}
   4841e:	4640      	mov	r0, r8
   48420:	b004      	add	sp, #16
   48422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   48426:	bf00      	nop
   48428:	20007530 	.word	0x20007530

0004842c <z_impl_k_thread_create>:
{
   4842c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4842e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   48430:	2700      	movs	r7, #0
   48432:	9705      	str	r7, [sp, #20]
   48434:	9f10      	ldr	r7, [sp, #64]	; 0x40
   48436:	9704      	str	r7, [sp, #16]
   48438:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   4843a:	9703      	str	r7, [sp, #12]
   4843c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   4843e:	9702      	str	r7, [sp, #8]
{
   48440:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   48444:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   48446:	9701      	str	r7, [sp, #4]
   48448:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   4844a:	9700      	str	r7, [sp, #0]
{
   4844c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   4844e:	f7ff ffbd 	bl	483cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   48452:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   48456:	bf08      	it	eq
   48458:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   4845c:	d005      	beq.n	4846a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4845e:	ea55 0306 	orrs.w	r3, r5, r6
   48462:	d105      	bne.n	48470 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   48464:	4620      	mov	r0, r4
   48466:	f000 fd6d 	bl	48f44 <z_sched_start>
}
   4846a:	4620      	mov	r0, r4
   4846c:	b007      	add	sp, #28
   4846e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   48470:	4903      	ldr	r1, [pc, #12]	; (48480 <z_impl_k_thread_create+0x54>)
   48472:	4632      	mov	r2, r6
   48474:	462b      	mov	r3, r5
   48476:	f104 0018 	add.w	r0, r4, #24
   4847a:	f000 fff5 	bl	49468 <z_add_timeout>
   4847e:	e7f4      	b.n	4846a <z_impl_k_thread_create+0x3e>
   48480:	00051af9 	.word	0x00051af9

00048484 <z_init_static_threads>:
{
   48484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   48488:	4c29      	ldr	r4, [pc, #164]	; (48530 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   4848a:	4d2a      	ldr	r5, [pc, #168]	; (48534 <z_init_static_threads+0xb0>)
{
   4848c:	b087      	sub	sp, #28
   4848e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   48490:	42ae      	cmp	r6, r5
   48492:	f104 0430 	add.w	r4, r4, #48	; 0x30
   48496:	d30f      	bcc.n	484b8 <z_init_static_threads+0x34>
	k_sched_lock();
   48498:	f000 fc70 	bl	48d7c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   4849c:	4c24      	ldr	r4, [pc, #144]	; (48530 <z_init_static_threads+0xac>)
   4849e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 48538 <z_init_static_threads+0xb4>
   484a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   484a6:	f240 37e7 	movw	r7, #999	; 0x3e7
   484aa:	42ac      	cmp	r4, r5
   484ac:	d320      	bcc.n	484f0 <z_init_static_threads+0x6c>
}
   484ae:	b007      	add	sp, #28
   484b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   484b4:	f000 be30 	b.w	49118 <k_sched_unlock>
		z_setup_new_thread(
   484b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   484bc:	9305      	str	r3, [sp, #20]
   484be:	f854 3c10 	ldr.w	r3, [r4, #-16]
   484c2:	9304      	str	r3, [sp, #16]
   484c4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   484c8:	9303      	str	r3, [sp, #12]
   484ca:	f854 3c18 	ldr.w	r3, [r4, #-24]
   484ce:	9302      	str	r3, [sp, #8]
   484d0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   484d4:	9301      	str	r3, [sp, #4]
   484d6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   484da:	9300      	str	r3, [sp, #0]
   484dc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   484e0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   484e4:	f7ff ff72 	bl	483cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   484e8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   484ec:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   484ee:	e7ce      	b.n	4848e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   484f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   484f2:	1c5a      	adds	r2, r3, #1
   484f4:	d00d      	beq.n	48512 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   484f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   484fa:	2100      	movs	r1, #0
   484fc:	4638      	mov	r0, r7
   484fe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48502:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   48506:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4850a:	d104      	bne.n	48516 <z_init_static_threads+0x92>
	z_sched_start(thread);
   4850c:	4640      	mov	r0, r8
   4850e:	f000 fd19 	bl	48f44 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   48512:	3430      	adds	r4, #48	; 0x30
   48514:	e7c9      	b.n	484aa <z_init_static_threads+0x26>
   48516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4851a:	2300      	movs	r3, #0
   4851c:	f7dd fdf0 	bl	26100 <__aeabi_uldivmod>
   48520:	4602      	mov	r2, r0
   48522:	460b      	mov	r3, r1
   48524:	f108 0018 	add.w	r0, r8, #24
   48528:	4649      	mov	r1, r9
   4852a:	f000 ff9d 	bl	49468 <z_add_timeout>
   4852e:	e7f0      	b.n	48512 <z_init_static_threads+0x8e>
   48530:	20001260 	.word	0x20001260
   48534:	20001260 	.word	0x20001260
   48538:	00051af9 	.word	0x00051af9

0004853c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   4853c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   4853e:	4c0b      	ldr	r4, [pc, #44]	; (4856c <idle+0x30>)
	return !z_sys_post_kernel;
   48540:	4d0b      	ldr	r5, [pc, #44]	; (48570 <idle+0x34>)
	__asm__ volatile(
   48542:	f04f 0220 	mov.w	r2, #32
   48546:	f3ef 8311 	mrs	r3, BASEPRI
   4854a:	f382 8812 	msr	BASEPRI_MAX, r2
   4854e:	f3bf 8f6f 	isb	sy
   48552:	f009 fb8d 	bl	51c70 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   48556:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   48558:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4855a:	b913      	cbnz	r3, 48562 <idle+0x26>
	arch_cpu_idle();
   4855c:	f7e4 fe9a 	bl	2d294 <arch_cpu_idle>
}
   48560:	e7ef      	b.n	48542 <idle+0x6>
   48562:	f7e4 fc91 	bl	2ce88 <pm_system_suspend>
   48566:	2800      	cmp	r0, #0
   48568:	d1eb      	bne.n	48542 <idle+0x6>
   4856a:	e7f7      	b.n	4855c <idle+0x20>
   4856c:	20007530 	.word	0x20007530
   48570:	200077a1 	.word	0x200077a1

00048574 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   48574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   48578:	4604      	mov	r4, r0
   4857a:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   4857c:	f100 0808 	add.w	r8, r0, #8
   48580:	f04f 0120 	mov.w	r1, #32
   48584:	f3ef 8711 	mrs	r7, BASEPRI
   48588:	f381 8812 	msr	BASEPRI_MAX, r1
   4858c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   48590:	6a05      	ldr	r5, [r0, #32]
   48592:	68c1      	ldr	r1, [r0, #12]
   48594:	428d      	cmp	r5, r1
   48596:	d22f      	bcs.n	485f8 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   48598:	f009 fb0f 	bl	51bba <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   4859c:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   4859e:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   485a0:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   485a2:	b178      	cbz	r0, 485c4 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   485a4:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   485a6:	6940      	ldr	r0, [r0, #20]
   485a8:	f004 f885 	bl	4c6b6 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   485ac:	4628      	mov	r0, r5
   485ae:	67ec      	str	r4, [r5, #124]	; 0x7c
   485b0:	f009 fa92 	bl	51ad8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   485b4:	4640      	mov	r0, r8
   485b6:	4639      	mov	r1, r7
   485b8:	f000 fbce 	bl	48d58 <z_reschedule>
			return 0;
   485bc:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   485be:	b002      	add	sp, #8
   485c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   485c4:	69e0      	ldr	r0, [r4, #28]
   485c6:	f004 f876 	bl	4c6b6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   485ca:	69e3      	ldr	r3, [r4, #28]
   485cc:	68a2      	ldr	r2, [r4, #8]
   485ce:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   485d0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   485d2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   485d4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   485d6:	bf04      	itt	eq
   485d8:	6923      	ldreq	r3, [r4, #16]
   485da:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   485dc:	6a23      	ldr	r3, [r4, #32]
   485de:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   485e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   485e4:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   485e6:	2110      	movs	r1, #16
   485e8:	f009 fcfc 	bl	51fe4 <z_handle_obj_poll_events>
		result = 0;
   485ec:	2000      	movs	r0, #0
	__asm__ volatile(
   485ee:	f387 8811 	msr	BASEPRI, r7
   485f2:	f3bf 8f6f 	isb	sy
	return result;
   485f6:	e7e2      	b.n	485be <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   485f8:	ea52 0103 	orrs.w	r1, r2, r3
   485fc:	d00a      	beq.n	48614 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   485fe:	4907      	ldr	r1, [pc, #28]	; (4861c <z_impl_k_msgq_put+0xa8>)
   48600:	6889      	ldr	r1, [r1, #8]
   48602:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   48604:	e9cd 2300 	strd	r2, r3, [sp]
   48608:	4639      	mov	r1, r7
   4860a:	4602      	mov	r2, r0
   4860c:	4640      	mov	r0, r8
   4860e:	f000 fcf5 	bl	48ffc <z_pend_curr>
		return result;
   48612:	e7d4      	b.n	485be <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   48614:	f06f 0022 	mvn.w	r0, #34	; 0x22
   48618:	e7e9      	b.n	485ee <z_impl_k_msgq_put+0x7a>
   4861a:	bf00      	nop
   4861c:	20007530 	.word	0x20007530

00048620 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   48620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   48622:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   48624:	f104 0708 	add.w	r7, r4, #8
{
   48628:	4608      	mov	r0, r1
	__asm__ volatile(
   4862a:	f04f 0120 	mov.w	r1, #32
   4862e:	f3ef 8611 	mrs	r6, BASEPRI
   48632:	f381 8812 	msr	BASEPRI_MAX, r1
   48636:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   4863a:	6a21      	ldr	r1, [r4, #32]
   4863c:	2900      	cmp	r1, #0
   4863e:	d031      	beq.n	486a4 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   48640:	68a2      	ldr	r2, [r4, #8]
   48642:	69a1      	ldr	r1, [r4, #24]
   48644:	f004 f837 	bl	4c6b6 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   48648:	69a3      	ldr	r3, [r4, #24]
   4864a:	68a2      	ldr	r2, [r4, #8]
   4864c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   4864e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   48650:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   48652:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   48654:	bf04      	itt	eq
   48656:	6923      	ldreq	r3, [r4, #16]
   48658:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   4865a:	6a23      	ldr	r3, [r4, #32]
   4865c:	3b01      	subs	r3, #1
   4865e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   48660:	4620      	mov	r0, r4
   48662:	f009 faaa 	bl	51bba <z_unpend_first_thread>
		if (pending_thread != NULL) {
   48666:	4605      	mov	r5, r0
   48668:	b360      	cbz	r0, 486c4 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   4866a:	6941      	ldr	r1, [r0, #20]
   4866c:	68a2      	ldr	r2, [r4, #8]
   4866e:	69e0      	ldr	r0, [r4, #28]
   48670:	f004 f821 	bl	4c6b6 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   48674:	69e3      	ldr	r3, [r4, #28]
   48676:	68a2      	ldr	r2, [r4, #8]
   48678:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   4867a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   4867c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   4867e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   48680:	bf04      	itt	eq
   48682:	6923      	ldreq	r3, [r4, #16]
   48684:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   48686:	6a23      	ldr	r3, [r4, #32]
   48688:	3301      	adds	r3, #1
   4868a:	6223      	str	r3, [r4, #32]
   4868c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   4868e:	4628      	mov	r0, r5
   48690:	67ec      	str	r4, [r5, #124]	; 0x7c
   48692:	f009 fa21 	bl	51ad8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   48696:	4638      	mov	r0, r7
   48698:	4631      	mov	r1, r6
   4869a:	f000 fb5d 	bl	48d58 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   4869e:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   486a0:	b003      	add	sp, #12
   486a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   486a4:	ea52 0103 	orrs.w	r1, r2, r3
   486a8:	d00a      	beq.n	486c0 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   486aa:	4909      	ldr	r1, [pc, #36]	; (486d0 <z_impl_k_msgq_get+0xb0>)
   486ac:	6889      	ldr	r1, [r1, #8]
   486ae:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   486b0:	e9cd 2300 	strd	r2, r3, [sp]
   486b4:	4631      	mov	r1, r6
   486b6:	4622      	mov	r2, r4
   486b8:	4638      	mov	r0, r7
   486ba:	f000 fc9f 	bl	48ffc <z_pend_curr>
		return result;
   486be:	e7ef      	b.n	486a0 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   486c0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   486c4:	f386 8811 	msr	BASEPRI, r6
   486c8:	f3bf 8f6f 	isb	sy
	return result;
   486cc:	e7e8      	b.n	486a0 <z_impl_k_msgq_get+0x80>
   486ce:	bf00      	nop
   486d0:	20007530 	.word	0x20007530

000486d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   486d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   486d8:	4604      	mov	r4, r0
   486da:	4617      	mov	r7, r2
   486dc:	461e      	mov	r6, r3
	__asm__ volatile(
   486de:	f04f 0320 	mov.w	r3, #32
   486e2:	f3ef 8811 	mrs	r8, BASEPRI
   486e6:	f383 8812 	msr	BASEPRI_MAX, r3
   486ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   486ee:	68c3      	ldr	r3, [r0, #12]
   486f0:	4a32      	ldr	r2, [pc, #200]	; (487bc <z_impl_k_mutex_lock+0xe8>)
   486f2:	b16b      	cbz	r3, 48710 <z_impl_k_mutex_lock+0x3c>
   486f4:	6880      	ldr	r0, [r0, #8]
   486f6:	6891      	ldr	r1, [r2, #8]
   486f8:	4288      	cmp	r0, r1
   486fa:	d019      	beq.n	48730 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   486fc:	ea57 0306 	orrs.w	r3, r7, r6
   48700:	d118      	bne.n	48734 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   48702:	f388 8811 	msr	BASEPRI, r8
   48706:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   4870a:	f06f 000f 	mvn.w	r0, #15
   4870e:	e00c      	b.n	4872a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   48710:	6891      	ldr	r1, [r2, #8]
   48712:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   48716:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   48718:	3301      	adds	r3, #1
   4871a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   4871c:	6893      	ldr	r3, [r2, #8]
   4871e:	60a3      	str	r3, [r4, #8]
   48720:	f388 8811 	msr	BASEPRI, r8
   48724:	f3bf 8f6f 	isb	sy
		return 0;
   48728:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   4872a:	b002      	add	sp, #8
   4872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   48730:	6921      	ldr	r1, [r4, #16]
   48732:	e7f0      	b.n	48716 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   48734:	f991 100e 	ldrsb.w	r1, [r1, #14]
   48738:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   4873c:	4299      	cmp	r1, r3
   4873e:	bfa8      	it	ge
   48740:	4619      	movge	r1, r3
   48742:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   48746:	4291      	cmp	r1, r2
   48748:	bfb8      	it	lt
   4874a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   4874c:	428b      	cmp	r3, r1
   4874e:	dd2e      	ble.n	487ae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   48750:	f008 ff87 	bl	51662 <adjust_owner_prio.isra.0>
   48754:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   48756:	e9cd 7600 	strd	r7, r6, [sp]
   4875a:	4819      	ldr	r0, [pc, #100]	; (487c0 <z_impl_k_mutex_lock+0xec>)
   4875c:	4622      	mov	r2, r4
   4875e:	4641      	mov	r1, r8
   48760:	f000 fc4c 	bl	48ffc <z_pend_curr>
	if (got_mutex == 0) {
   48764:	2800      	cmp	r0, #0
   48766:	d0e0      	beq.n	4872a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   48768:	f04f 0320 	mov.w	r3, #32
   4876c:	f3ef 8611 	mrs	r6, BASEPRI
   48770:	f383 8812 	msr	BASEPRI_MAX, r3
   48774:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   48778:	6823      	ldr	r3, [r4, #0]
   4877a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4877c:	429c      	cmp	r4, r3
   4877e:	d00a      	beq.n	48796 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   48780:	b14b      	cbz	r3, 48796 <z_impl_k_mutex_lock+0xc2>
   48782:	f993 300e 	ldrsb.w	r3, [r3, #14]
   48786:	4299      	cmp	r1, r3
   48788:	bfa8      	it	ge
   4878a:	4619      	movge	r1, r3
   4878c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   48790:	4299      	cmp	r1, r3
   48792:	bfb8      	it	lt
   48794:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   48796:	68a0      	ldr	r0, [r4, #8]
   48798:	f008 ff63 	bl	51662 <adjust_owner_prio.isra.0>
   4879c:	b900      	cbnz	r0, 487a0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   4879e:	b145      	cbz	r5, 487b2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   487a0:	4807      	ldr	r0, [pc, #28]	; (487c0 <z_impl_k_mutex_lock+0xec>)
   487a2:	4631      	mov	r1, r6
   487a4:	f000 fad8 	bl	48d58 <z_reschedule>
	return -EAGAIN;
   487a8:	f06f 000a 	mvn.w	r0, #10
   487ac:	e7bd      	b.n	4872a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   487ae:	2500      	movs	r5, #0
   487b0:	e7d1      	b.n	48756 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   487b2:	f386 8811 	msr	BASEPRI, r6
   487b6:	f3bf 8f6f 	isb	sy
   487ba:	e7f5      	b.n	487a8 <z_impl_k_mutex_lock+0xd4>
   487bc:	20007530 	.word	0x20007530
   487c0:	200077a2 	.word	0x200077a2

000487c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   487c4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   487c6:	6883      	ldr	r3, [r0, #8]
{
   487c8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   487ca:	2b00      	cmp	r3, #0
   487cc:	d032      	beq.n	48834 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   487ce:	4a1c      	ldr	r2, [pc, #112]	; (48840 <z_impl_k_mutex_unlock+0x7c>)
   487d0:	6892      	ldr	r2, [r2, #8]
   487d2:	4293      	cmp	r3, r2
   487d4:	d131      	bne.n	4883a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   487d6:	7bda      	ldrb	r2, [r3, #15]
   487d8:	3a01      	subs	r2, #1
   487da:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   487dc:	68c3      	ldr	r3, [r0, #12]
   487de:	2b01      	cmp	r3, #1
   487e0:	d905      	bls.n	487ee <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   487e2:	3b01      	subs	r3, #1
   487e4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   487e6:	f000 fc97 	bl	49118 <k_sched_unlock>

	return 0;
   487ea:	2000      	movs	r0, #0
}
   487ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   487ee:	f04f 0320 	mov.w	r3, #32
   487f2:	f3ef 8511 	mrs	r5, BASEPRI
   487f6:	f383 8812 	msr	BASEPRI_MAX, r3
   487fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   487fe:	6901      	ldr	r1, [r0, #16]
   48800:	6880      	ldr	r0, [r0, #8]
   48802:	f008 ff2e 	bl	51662 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   48806:	4620      	mov	r0, r4
   48808:	f009 f9d7 	bl	51bba <z_unpend_first_thread>
	mutex->owner = new_owner;
   4880c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   4880e:	b158      	cbz	r0, 48828 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   48810:	f990 200e 	ldrsb.w	r2, [r0, #14]
   48814:	6122      	str	r2, [r4, #16]
   48816:	2200      	movs	r2, #0
   48818:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   4881a:	f009 f95d 	bl	51ad8 <z_ready_thread>
		z_reschedule(&lock, key);
   4881e:	4809      	ldr	r0, [pc, #36]	; (48844 <z_impl_k_mutex_unlock+0x80>)
   48820:	4629      	mov	r1, r5
   48822:	f000 fa99 	bl	48d58 <z_reschedule>
   48826:	e7de      	b.n	487e6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   48828:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   4882a:	f385 8811 	msr	BASEPRI, r5
   4882e:	f3bf 8f6f 	isb	sy
   48832:	e7d8      	b.n	487e6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   48834:	f06f 0015 	mvn.w	r0, #21
   48838:	e7d8      	b.n	487ec <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   4883a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4883e:	e7d5      	b.n	487ec <z_impl_k_mutex_unlock+0x28>
   48840:	20007530 	.word	0x20007530
   48844:	200077a2 	.word	0x200077a2

00048848 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   48848:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4884a:	4611      	mov	r1, r2
	__asm__ volatile(
   4884c:	f04f 0220 	mov.w	r2, #32
   48850:	f3ef 8511 	mrs	r5, BASEPRI
   48854:	f382 8812 	msr	BASEPRI_MAX, r2
   48858:	f3bf 8f6f 	isb	sy
   4885c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   4885e:	b19c      	cbz	r4, 48888 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48860:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   48862:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48864:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   48868:	4294      	cmp	r4, r2
	list->head = node;
   4886a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   4886c:	bf08      	it	eq
   4886e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   48870:	2101      	movs	r1, #1
   48872:	4620      	mov	r0, r4
   48874:	f008 ff68 	bl	51748 <z_queue_node_peek>
   48878:	4604      	mov	r4, r0
	__asm__ volatile(
   4887a:	f385 8811 	msr	BASEPRI, r5
   4887e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   48882:	4620      	mov	r0, r4
   48884:	b003      	add	sp, #12
   48886:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48888:	ea51 0203 	orrs.w	r2, r1, r3
   4888c:	d0f5      	beq.n	4887a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   4888e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   48892:	e9cd 1300 	strd	r1, r3, [sp]
   48896:	4610      	mov	r0, r2
   48898:	4629      	mov	r1, r5
   4889a:	f000 fbaf 	bl	48ffc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   4889e:	2800      	cmp	r0, #0
   488a0:	d1ef      	bne.n	48882 <z_impl_k_queue_get+0x3a>
   488a2:	4b02      	ldr	r3, [pc, #8]	; (488ac <z_impl_k_queue_get+0x64>)
   488a4:	689b      	ldr	r3, [r3, #8]
   488a6:	695c      	ldr	r4, [r3, #20]
   488a8:	e7eb      	b.n	48882 <z_impl_k_queue_get+0x3a>
   488aa:	bf00      	nop
   488ac:	20007530 	.word	0x20007530

000488b0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   488b0:	b538      	push	{r3, r4, r5, lr}
   488b2:	4604      	mov	r4, r0
	__asm__ volatile(
   488b4:	f04f 0320 	mov.w	r3, #32
   488b8:	f3ef 8511 	mrs	r5, BASEPRI
   488bc:	f383 8812 	msr	BASEPRI_MAX, r3
   488c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   488c4:	f009 f979 	bl	51bba <z_unpend_first_thread>

	if (thread != NULL) {
   488c8:	b148      	cbz	r0, 488de <z_impl_k_sem_give+0x2e>
   488ca:	2200      	movs	r2, #0
   488cc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   488ce:	f009 f903 	bl	51ad8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   488d2:	4629      	mov	r1, r5
   488d4:	4808      	ldr	r0, [pc, #32]	; (488f8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   488d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   488da:	f000 ba3d 	b.w	48d58 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   488de:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   488e2:	429a      	cmp	r2, r3
   488e4:	bf18      	it	ne
   488e6:	3301      	addne	r3, #1
   488e8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   488ea:	2102      	movs	r1, #2
   488ec:	f104 0010 	add.w	r0, r4, #16
   488f0:	f009 fb78 	bl	51fe4 <z_handle_obj_poll_events>
}
   488f4:	e7ed      	b.n	488d2 <z_impl_k_sem_give+0x22>
   488f6:	bf00      	nop
   488f8:	200077a2 	.word	0x200077a2

000488fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   488fc:	b513      	push	{r0, r1, r4, lr}
   488fe:	f04f 0420 	mov.w	r4, #32
   48902:	f3ef 8111 	mrs	r1, BASEPRI
   48906:	f384 8812 	msr	BASEPRI_MAX, r4
   4890a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   4890e:	6884      	ldr	r4, [r0, #8]
   48910:	b144      	cbz	r4, 48924 <z_impl_k_sem_take+0x28>
		sem->count--;
   48912:	3c01      	subs	r4, #1
   48914:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   48916:	f381 8811 	msr	BASEPRI, r1
   4891a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   4891e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   48920:	b002      	add	sp, #8
   48922:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48924:	ea52 0403 	orrs.w	r4, r2, r3
   48928:	d106      	bne.n	48938 <z_impl_k_sem_take+0x3c>
   4892a:	f381 8811 	msr	BASEPRI, r1
   4892e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   48932:	f06f 000f 	mvn.w	r0, #15
   48936:	e7f3      	b.n	48920 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   48938:	e9cd 2300 	strd	r2, r3, [sp]
   4893c:	4602      	mov	r2, r0
   4893e:	4802      	ldr	r0, [pc, #8]	; (48948 <z_impl_k_sem_take+0x4c>)
   48940:	f000 fb5c 	bl	48ffc <z_pend_curr>
	return ret;
   48944:	e7ec      	b.n	48920 <z_impl_k_sem_take+0x24>
   48946:	bf00      	nop
   48948:	200077a2 	.word	0x200077a2

0004894c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   4894c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   4894e:	4b09      	ldr	r3, [pc, #36]	; (48974 <k_sys_work_q_init+0x28>)
   48950:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   48952:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   48954:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   48956:	9300      	str	r3, [sp, #0]
   48958:	4907      	ldr	r1, [pc, #28]	; (48978 <k_sys_work_q_init+0x2c>)
   4895a:	4808      	ldr	r0, [pc, #32]	; (4897c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   4895c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   48960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48964:	f44f 6200 	mov.w	r2, #2048	; 0x800
   48968:	f000 f914 	bl	48b94 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   4896c:	4620      	mov	r0, r4
   4896e:	b004      	add	sp, #16
   48970:	bd10      	pop	{r4, pc}
   48972:	bf00      	nop
   48974:	00056ba0 	.word	0x00056ba0
   48978:	2000a768 	.word	0x2000a768
   4897c:	20004310 	.word	0x20004310

00048980 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   48980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   48984:	4e47      	ldr	r6, [pc, #284]	; (48aa4 <work_queue_main+0x124>)
   48986:	b085      	sub	sp, #20
   48988:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   4898a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   4898e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   48992:	f04f 0320 	mov.w	r3, #32
   48996:	f3ef 8711 	mrs	r7, BASEPRI
   4899a:	f383 8812 	msr	BASEPRI_MAX, r3
   4899e:	f3bf 8f6f 	isb	sy
   489a2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   489a6:	b98d      	cbnz	r5, 489cc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   489a8:	2102      	movs	r1, #2
   489aa:	f104 0098 	add.w	r0, r4, #152	; 0x98
   489ae:	f008 ff44 	bl	5183a <flag_test_and_clear>
   489b2:	2800      	cmp	r0, #0
   489b4:	d135      	bne.n	48a22 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   489b6:	2300      	movs	r3, #0
   489b8:	e9cd 8900 	strd	r8, r9, [sp]
   489bc:	9302      	str	r3, [sp, #8]
   489be:	f104 0288 	add.w	r2, r4, #136	; 0x88
   489c2:	4639      	mov	r1, r7
   489c4:	4838      	ldr	r0, [pc, #224]	; (48aa8 <work_queue_main+0x128>)
   489c6:	f000 fcd9 	bl	4937c <z_sched_wait>
			continue;
   489ca:	e7e2      	b.n	48992 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   489cc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   489d0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   489d2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   489d6:	4295      	cmp	r5, r2
   489d8:	d101      	bne.n	489de <work_queue_main+0x5e>
	list->tail = node;
   489da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   489de:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   489e2:	f043 0302 	orr.w	r3, r3, #2
   489e6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   489ea:	68eb      	ldr	r3, [r5, #12]
   489ec:	f023 0304 	bic.w	r3, r3, #4
   489f0:	f043 0301 	orr.w	r3, r3, #1
   489f4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   489f6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   489f8:	f387 8811 	msr	BASEPRI, r7
   489fc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   48a00:	4628      	mov	r0, r5
   48a02:	4798      	blx	r3
	__asm__ volatile(
   48a04:	f04f 0320 	mov.w	r3, #32
   48a08:	f3ef 8b11 	mrs	fp, BASEPRI
   48a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   48a10:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   48a14:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48a16:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   48a18:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48a1c:	d40b      	bmi.n	48a36 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   48a1e:	60ea      	str	r2, [r5, #12]
   48a20:	e00e      	b.n	48a40 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   48a22:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   48a26:	2200      	movs	r2, #0
   48a28:	2101      	movs	r1, #1
   48a2a:	4628      	mov	r0, r5
   48a2c:	f009 f8ed 	bl	51c0a <z_sched_wake>
   48a30:	2800      	cmp	r0, #0
   48a32:	d1f8      	bne.n	48a26 <work_queue_main+0xa6>
   48a34:	e7bf      	b.n	489b6 <work_queue_main+0x36>
	return list->head;
   48a36:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   48a38:	f023 0303 	bic.w	r3, r3, #3
   48a3c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48a3e:	b970      	cbnz	r0, 48a5e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   48a40:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   48a44:	f023 0302 	bic.w	r3, r3, #2
   48a48:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   48a4c:	f38b 8811 	msr	BASEPRI, fp
   48a50:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   48a54:	05d8      	lsls	r0, r3, #23
   48a56:	d49c      	bmi.n	48992 <work_queue_main+0x12>
	z_impl_k_yield();
   48a58:	f000 fb86 	bl	49168 <z_impl_k_yield>
}
   48a5c:	e799      	b.n	48992 <work_queue_main+0x12>
	return node->next;
   48a5e:	2700      	movs	r7, #0
   48a60:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   48a64:	463b      	mov	r3, r7
		if (wc->work == work) {
   48a66:	6842      	ldr	r2, [r0, #4]
   48a68:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   48a6a:	4601      	mov	r1, r0
		if (wc->work == work) {
   48a6c:	d10c      	bne.n	48a88 <work_queue_main+0x108>
	return node->next;
   48a6e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   48a70:	b997      	cbnz	r7, 48a98 <work_queue_main+0x118>
   48a72:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   48a74:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   48a76:	4282      	cmp	r2, r0
   48a78:	d100      	bne.n	48a7c <work_queue_main+0xfc>
	list->tail = node;
   48a7a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   48a7c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   48a80:	f7ff ff16 	bl	488b0 <z_impl_k_sem_give>
}
   48a84:	4639      	mov	r1, r7
   48a86:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48a88:	f1ba 0f00 	cmp.w	sl, #0
   48a8c:	d0d8      	beq.n	48a40 <work_queue_main+0xc0>
	return node->next;
   48a8e:	4650      	mov	r0, sl
   48a90:	460f      	mov	r7, r1
   48a92:	f8da a000 	ldr.w	sl, [sl]
   48a96:	e7e6      	b.n	48a66 <work_queue_main+0xe6>
	return list->tail;
   48a98:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   48a9a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   48a9c:	4290      	cmp	r0, r2
	list->tail = node;
   48a9e:	bf08      	it	eq
   48aa0:	6077      	streq	r7, [r6, #4]
}
   48aa2:	e7eb      	b.n	48a7c <work_queue_main+0xfc>
   48aa4:	20007558 	.word	0x20007558
   48aa8:	200077a2 	.word	0x200077a2

00048aac <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   48aac:	68c3      	ldr	r3, [r0, #12]
{
   48aae:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   48ab0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   48ab4:	079b      	lsls	r3, r3, #30
{
   48ab6:	4605      	mov	r5, r0
   48ab8:	460c      	mov	r4, r1
	if (ret) {
   48aba:	d50d      	bpl.n	48ad8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   48abc:	2201      	movs	r2, #1
   48abe:	2100      	movs	r1, #0
   48ac0:	f104 0008 	add.w	r0, r4, #8
   48ac4:	f008 fea9 	bl	5181a <z_impl_k_sem_init>
	parent->next = child;
   48ac8:	2300      	movs	r3, #0
   48aca:	6023      	str	r3, [r4, #0]
	return list->tail;
   48acc:	4b05      	ldr	r3, [pc, #20]	; (48ae4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   48ace:	6065      	str	r5, [r4, #4]
   48ad0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   48ad2:	b91a      	cbnz	r2, 48adc <cancel_sync_locked+0x30>
	list->head = node;
   48ad4:	e9c3 4400 	strd	r4, r4, [r3]
}
   48ad8:	4630      	mov	r0, r6
   48ada:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   48adc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   48ade:	605c      	str	r4, [r3, #4]
}
   48ae0:	e7fa      	b.n	48ad8 <cancel_sync_locked+0x2c>
   48ae2:	bf00      	nop
   48ae4:	20007558 	.word	0x20007558

00048ae8 <submit_to_queue_locked>:
{
   48ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   48aea:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48aec:	079a      	lsls	r2, r3, #30
{
   48aee:	4604      	mov	r4, r0
   48af0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48af2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   48af6:	d41f      	bmi.n	48b38 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   48af8:	075f      	lsls	r7, r3, #29
   48afa:	d41f      	bmi.n	48b3c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   48afc:	680a      	ldr	r2, [r1, #0]
   48afe:	b90a      	cbnz	r2, 48b04 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   48b00:	6882      	ldr	r2, [r0, #8]
   48b02:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   48b04:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   48b06:	bf44      	itt	mi
   48b08:	68a3      	ldrmi	r3, [r4, #8]
   48b0a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   48b0c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   48b0e:	bf4c      	ite	mi
   48b10:	2502      	movmi	r5, #2
		ret = 1;
   48b12:	2501      	movpl	r5, #1
	if (queue == NULL) {
   48b14:	b37f      	cbz	r7, 48b76 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   48b16:	4b1b      	ldr	r3, [pc, #108]	; (48b84 <submit_to_queue_locked+0x9c>)
   48b18:	689b      	ldr	r3, [r3, #8]
   48b1a:	42bb      	cmp	r3, r7
   48b1c:	d111      	bne.n	48b42 <submit_to_queue_locked+0x5a>
   48b1e:	f008 fd8e 	bl	5163e <k_is_in_isr>
   48b22:	f080 0001 	eor.w	r0, r0, #1
   48b26:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   48b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48b2c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   48b2e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48b32:	d523      	bpl.n	48b7c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   48b34:	b13a      	cbz	r2, 48b46 <submit_to_queue_locked+0x5e>
   48b36:	b940      	cbnz	r0, 48b4a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   48b38:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   48b3c:	2300      	movs	r3, #0
   48b3e:	6033      	str	r3, [r6, #0]
	return ret;
   48b40:	e013      	b.n	48b6a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   48b42:	2000      	movs	r0, #0
   48b44:	e7f0      	b.n	48b28 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   48b46:	071b      	lsls	r3, r3, #28
   48b48:	d4f6      	bmi.n	48b38 <submit_to_queue_locked+0x50>
	parent->next = child;
   48b4a:	2300      	movs	r3, #0
   48b4c:	6023      	str	r3, [r4, #0]
	return list->tail;
   48b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   48b52:	b963      	cbnz	r3, 48b6e <submit_to_queue_locked+0x86>
	list->head = node;
   48b54:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   48b58:	4638      	mov	r0, r7
   48b5a:	f008 fe87 	bl	5186c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   48b5e:	68e3      	ldr	r3, [r4, #12]
   48b60:	f043 0304 	orr.w	r3, r3, #4
   48b64:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   48b66:	6833      	ldr	r3, [r6, #0]
   48b68:	60a3      	str	r3, [r4, #8]
}
   48b6a:	4628      	mov	r0, r5
   48b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   48b6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   48b70:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   48b74:	e7f0      	b.n	48b58 <submit_to_queue_locked+0x70>
		return -EINVAL;
   48b76:	f06f 0515 	mvn.w	r5, #21
   48b7a:	e7df      	b.n	48b3c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   48b7c:	f06f 0512 	mvn.w	r5, #18
   48b80:	e7dc      	b.n	48b3c <submit_to_queue_locked+0x54>
   48b82:	bf00      	nop
   48b84:	20007530 	.word	0x20007530

00048b88 <k_work_submit>:
{
   48b88:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   48b8a:	4801      	ldr	r0, [pc, #4]	; (48b90 <k_work_submit+0x8>)
   48b8c:	f008 bede 	b.w	5194c <k_work_submit_to_queue>
   48b90:	20004310 	.word	0x20004310

00048b94 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   48b94:	b5f0      	push	{r4, r5, r6, r7, lr}
   48b96:	b089      	sub	sp, #36	; 0x24
   48b98:	4604      	mov	r4, r0
	list->head = NULL;
   48b9a:	2000      	movs	r0, #0
	list->tail = NULL;
   48b9c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   48ba0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   48ba2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   48ba6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   48baa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   48bae:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   48bb2:	b31d      	cbz	r5, 48bfc <k_work_queue_start+0x68>
   48bb4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   48bb6:	2800      	cmp	r0, #0
   48bb8:	f240 1001 	movw	r0, #257	; 0x101
   48bbc:	bf08      	it	eq
   48bbe:	2001      	moveq	r0, #1
	*flagp = flags;
   48bc0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   48bc4:	2000      	movs	r0, #0
   48bc6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   48bca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   48bce:	e9cd 3003 	strd	r3, r0, [sp, #12]
   48bd2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   48bd6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   48bda:	4b09      	ldr	r3, [pc, #36]	; (48c00 <k_work_queue_start+0x6c>)
   48bdc:	9400      	str	r4, [sp, #0]
   48bde:	4620      	mov	r0, r4
   48be0:	f7ff fc24 	bl	4842c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   48be4:	b125      	cbz	r5, 48bf0 <k_work_queue_start+0x5c>
   48be6:	6829      	ldr	r1, [r5, #0]
   48be8:	b111      	cbz	r1, 48bf0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   48bea:	4620      	mov	r0, r4
   48bec:	f008 fd2d 	bl	5164a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   48bf0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   48bf2:	b009      	add	sp, #36	; 0x24
   48bf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   48bf8:	f008 bd2a 	b.w	51650 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   48bfc:	2001      	movs	r0, #1
   48bfe:	e7df      	b.n	48bc0 <k_work_queue_start+0x2c>
   48c00:	00048981 	.word	0x00048981

00048c04 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   48c04:	b513      	push	{r0, r1, r4, lr}
   48c06:	9001      	str	r0, [sp, #4]
   48c08:	4608      	mov	r0, r1
	__asm__ volatile(
   48c0a:	f04f 0120 	mov.w	r1, #32
   48c0e:	f3ef 8411 	mrs	r4, BASEPRI
   48c12:	f381 8812 	msr	BASEPRI_MAX, r1
   48c16:	f3bf 8f6f 	isb	sy
	return *flagp;
   48c1a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   48c1c:	f011 0f0e 	tst.w	r1, #14
   48c20:	d116      	bne.n	48c50 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48c22:	ea53 0c02 	orrs.w	ip, r3, r2
   48c26:	d108      	bne.n	48c3a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   48c28:	a901      	add	r1, sp, #4
   48c2a:	f7ff ff5d 	bl	48ae8 <submit_to_queue_locked>
	__asm__ volatile(
   48c2e:	f384 8811 	msr	BASEPRI, r4
   48c32:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   48c36:	b002      	add	sp, #8
   48c38:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   48c3a:	f041 0108 	orr.w	r1, r1, #8
   48c3e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   48c40:	9901      	ldr	r1, [sp, #4]
   48c42:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48c44:	3010      	adds	r0, #16
   48c46:	4903      	ldr	r1, [pc, #12]	; (48c54 <k_work_schedule_for_queue+0x50>)
   48c48:	f000 fc0e 	bl	49468 <z_add_timeout>
	return ret;
   48c4c:	2001      	movs	r0, #1
   48c4e:	e7ee      	b.n	48c2e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   48c50:	2000      	movs	r0, #0
   48c52:	e7ec      	b.n	48c2e <k_work_schedule_for_queue+0x2a>
   48c54:	000518dd 	.word	0x000518dd

00048c58 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   48c58:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   48c5a:	4801      	ldr	r0, [pc, #4]	; (48c60 <k_work_schedule+0x8>)
   48c5c:	f7ff bfd2 	b.w	48c04 <k_work_schedule_for_queue>
   48c60:	20004310 	.word	0x20004310

00048c64 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   48c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   48c66:	460c      	mov	r4, r1
   48c68:	9001      	str	r0, [sp, #4]
   48c6a:	4616      	mov	r6, r2
   48c6c:	461d      	mov	r5, r3
	__asm__ volatile(
   48c6e:	f04f 0320 	mov.w	r3, #32
   48c72:	f3ef 8711 	mrs	r7, BASEPRI
   48c76:	f383 8812 	msr	BASEPRI_MAX, r3
   48c7a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   48c7e:	4608      	mov	r0, r1
   48c80:	f008 fde6 	bl	51850 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48c84:	ea55 0306 	orrs.w	r3, r5, r6
   48c88:	d109      	bne.n	48c9e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   48c8a:	a901      	add	r1, sp, #4
   48c8c:	4620      	mov	r0, r4
   48c8e:	f7ff ff2b 	bl	48ae8 <submit_to_queue_locked>
	__asm__ volatile(
   48c92:	f387 8811 	msr	BASEPRI, r7
   48c96:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   48c9a:	b003      	add	sp, #12
   48c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   48c9e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48ca0:	4906      	ldr	r1, [pc, #24]	; (48cbc <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   48ca2:	f043 0308 	orr.w	r3, r3, #8
   48ca6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   48ca8:	9b01      	ldr	r3, [sp, #4]
   48caa:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48cac:	f104 0010 	add.w	r0, r4, #16
   48cb0:	4632      	mov	r2, r6
   48cb2:	462b      	mov	r3, r5
   48cb4:	f000 fbd8 	bl	49468 <z_add_timeout>
	return ret;
   48cb8:	2001      	movs	r0, #1
   48cba:	e7ea      	b.n	48c92 <k_work_reschedule_for_queue+0x2e>
   48cbc:	000518dd 	.word	0x000518dd

00048cc0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   48cc0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   48cc2:	4801      	ldr	r0, [pc, #4]	; (48cc8 <k_work_reschedule+0x8>)
   48cc4:	f7ff bfce 	b.w	48c64 <k_work_reschedule_for_queue>
   48cc8:	20004310 	.word	0x20004310

00048ccc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   48ccc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   48cce:	4c08      	ldr	r4, [pc, #32]	; (48cf0 <z_reset_time_slice+0x24>)
   48cd0:	6823      	ldr	r3, [r4, #0]
   48cd2:	b15b      	cbz	r3, 48cec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   48cd4:	f7fd fb36 	bl	46344 <sys_clock_elapsed>
   48cd8:	4603      	mov	r3, r0
   48cda:	6820      	ldr	r0, [r4, #0]
   48cdc:	4a05      	ldr	r2, [pc, #20]	; (48cf4 <z_reset_time_slice+0x28>)
   48cde:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   48ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   48ce4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   48ce6:	2100      	movs	r1, #0
   48ce8:	f008 bfd2 	b.w	51c90 <z_set_timeout_expiry>
}
   48cec:	bd10      	pop	{r4, pc}
   48cee:	bf00      	nop
   48cf0:	20007568 	.word	0x20007568
   48cf4:	20007530 	.word	0x20007530

00048cf8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   48cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48cfa:	4604      	mov	r4, r0
   48cfc:	460d      	mov	r5, r1
	__asm__ volatile(
   48cfe:	f04f 0320 	mov.w	r3, #32
   48d02:	f3ef 8611 	mrs	r6, BASEPRI
   48d06:	f383 8812 	msr	BASEPRI_MAX, r3
   48d0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   48d0e:	4b0f      	ldr	r3, [pc, #60]	; (48d4c <k_sched_time_slice_set+0x54>)
   48d10:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   48d12:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   48d16:	f240 30e7 	movw	r0, #999	; 0x3e7
   48d1a:	6119      	str	r1, [r3, #16]
   48d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48d20:	2300      	movs	r3, #0
   48d22:	fbe4 0107 	umlal	r0, r1, r4, r7
   48d26:	f7dd f9eb 	bl	26100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   48d2a:	2c00      	cmp	r4, #0
   48d2c:	4b08      	ldr	r3, [pc, #32]	; (48d50 <k_sched_time_slice_set+0x58>)
   48d2e:	dc09      	bgt.n	48d44 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   48d30:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   48d32:	4b08      	ldr	r3, [pc, #32]	; (48d54 <k_sched_time_slice_set+0x5c>)
   48d34:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   48d36:	f7ff ffc9 	bl	48ccc <z_reset_time_slice>
	__asm__ volatile(
   48d3a:	f386 8811 	msr	BASEPRI, r6
   48d3e:	f3bf 8f6f 	isb	sy
	}
}
   48d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   48d44:	2802      	cmp	r0, #2
   48d46:	bfb8      	it	lt
   48d48:	2002      	movlt	r0, #2
   48d4a:	e7f1      	b.n	48d30 <k_sched_time_slice_set+0x38>
   48d4c:	20007530 	.word	0x20007530
   48d50:	20007568 	.word	0x20007568
   48d54:	20007564 	.word	0x20007564

00048d58 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   48d58:	b949      	cbnz	r1, 48d6e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   48d5a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   48d5e:	b930      	cbnz	r0, 48d6e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   48d60:	4b05      	ldr	r3, [pc, #20]	; (48d78 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   48d62:	69da      	ldr	r2, [r3, #28]
   48d64:	689b      	ldr	r3, [r3, #8]
   48d66:	429a      	cmp	r2, r3
   48d68:	d001      	beq.n	48d6e <z_reschedule+0x16>
	ret = arch_swap(key);
   48d6a:	f7e4 bb2b 	b.w	2d3c4 <arch_swap>
   48d6e:	f381 8811 	msr	BASEPRI, r1
   48d72:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   48d76:	4770      	bx	lr
   48d78:	20007530 	.word	0x20007530

00048d7c <k_sched_lock>:
	__asm__ volatile(
   48d7c:	f04f 0320 	mov.w	r3, #32
   48d80:	f3ef 8111 	mrs	r1, BASEPRI
   48d84:	f383 8812 	msr	BASEPRI_MAX, r3
   48d88:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   48d8c:	4b04      	ldr	r3, [pc, #16]	; (48da0 <k_sched_lock+0x24>)
   48d8e:	689a      	ldr	r2, [r3, #8]
   48d90:	7bd3      	ldrb	r3, [r2, #15]
   48d92:	3b01      	subs	r3, #1
   48d94:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   48d96:	f381 8811 	msr	BASEPRI, r1
   48d9a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   48d9e:	4770      	bx	lr
   48da0:	20007530 	.word	0x20007530

00048da4 <update_cache>:
{
   48da4:	b538      	push	{r3, r4, r5, lr}
   48da6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   48da8:	480c      	ldr	r0, [pc, #48]	; (48ddc <update_cache+0x38>)
   48daa:	4d0d      	ldr	r5, [pc, #52]	; (48de0 <update_cache+0x3c>)
   48dac:	f008 fe8e 	bl	51acc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   48db0:	4604      	mov	r4, r0
   48db2:	b900      	cbnz	r0, 48db6 <update_cache+0x12>
   48db4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   48db6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   48db8:	b94a      	cbnz	r2, 48dce <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   48dba:	7b5a      	ldrb	r2, [r3, #13]
   48dbc:	06d2      	lsls	r2, r2, #27
   48dbe:	d106      	bne.n	48dce <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   48dc0:	69a2      	ldr	r2, [r4, #24]
   48dc2:	b922      	cbnz	r2, 48dce <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   48dc4:	89da      	ldrh	r2, [r3, #14]
   48dc6:	2a7f      	cmp	r2, #127	; 0x7f
   48dc8:	d901      	bls.n	48dce <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   48dca:	61eb      	str	r3, [r5, #28]
}
   48dcc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   48dce:	429c      	cmp	r4, r3
   48dd0:	d001      	beq.n	48dd6 <update_cache+0x32>
			z_reset_time_slice();
   48dd2:	f7ff ff7b 	bl	48ccc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   48dd6:	61ec      	str	r4, [r5, #28]
}
   48dd8:	e7f8      	b.n	48dcc <update_cache+0x28>
   48dda:	bf00      	nop
   48ddc:	20007550 	.word	0x20007550
   48de0:	20007530 	.word	0x20007530

00048de4 <move_thread_to_end_of_prio_q>:
{
   48de4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   48de6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   48dea:	7b43      	ldrb	r3, [r0, #13]
   48dec:	2a00      	cmp	r2, #0
{
   48dee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   48df0:	da04      	bge.n	48dfc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48df6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   48df8:	f008 fe13 	bl	51a22 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48dfc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   48dfe:	4a15      	ldr	r2, [pc, #84]	; (48e54 <move_thread_to_end_of_prio_q+0x70>)
   48e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48e04:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   48e06:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48e0a:	f102 0520 	add.w	r5, r2, #32
   48e0e:	42ab      	cmp	r3, r5
   48e10:	d01b      	beq.n	48e4a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48e12:	b1d3      	cbz	r3, 48e4a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   48e14:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   48e18:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   48e1c:	4286      	cmp	r6, r0
   48e1e:	d00f      	beq.n	48e40 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   48e20:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   48e22:	2800      	cmp	r0, #0
   48e24:	dd0c      	ble.n	48e40 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   48e26:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   48e28:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   48e2c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   48e2e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   48e30:	6890      	ldr	r0, [r2, #8]
   48e32:	1a43      	subs	r3, r0, r1
   48e34:	4258      	negs	r0, r3
}
   48e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   48e3a:	4158      	adcs	r0, r3
   48e3c:	f7ff bfb2 	b.w	48da4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   48e40:	42a3      	cmp	r3, r4
   48e42:	d002      	beq.n	48e4a <move_thread_to_end_of_prio_q+0x66>
   48e44:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48e46:	2b00      	cmp	r3, #0
   48e48:	d1e6      	bne.n	48e18 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   48e4a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   48e4e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   48e50:	6251      	str	r1, [r2, #36]	; 0x24
}
   48e52:	e7ed      	b.n	48e30 <move_thread_to_end_of_prio_q+0x4c>
   48e54:	20007530 	.word	0x20007530

00048e58 <z_time_slice>:
{
   48e58:	b538      	push	{r3, r4, r5, lr}
   48e5a:	4601      	mov	r1, r0
	__asm__ volatile(
   48e5c:	f04f 0320 	mov.w	r3, #32
   48e60:	f3ef 8411 	mrs	r4, BASEPRI
   48e64:	f383 8812 	msr	BASEPRI_MAX, r3
   48e68:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   48e6c:	4b15      	ldr	r3, [pc, #84]	; (48ec4 <z_time_slice+0x6c>)
   48e6e:	4a16      	ldr	r2, [pc, #88]	; (48ec8 <z_time_slice+0x70>)
   48e70:	6898      	ldr	r0, [r3, #8]
   48e72:	6815      	ldr	r5, [r2, #0]
   48e74:	42a8      	cmp	r0, r5
   48e76:	d106      	bne.n	48e86 <z_time_slice+0x2e>
			z_reset_time_slice();
   48e78:	f7ff ff28 	bl	48ccc <z_reset_time_slice>
	__asm__ volatile(
   48e7c:	f384 8811 	msr	BASEPRI, r4
   48e80:	f3bf 8f6f 	isb	sy
}
   48e84:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   48e86:	2500      	movs	r5, #0
   48e88:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   48e8a:	4a10      	ldr	r2, [pc, #64]	; (48ecc <z_time_slice+0x74>)
   48e8c:	6812      	ldr	r2, [r2, #0]
   48e8e:	b1ba      	cbz	r2, 48ec0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   48e90:	89c2      	ldrh	r2, [r0, #14]
   48e92:	2a7f      	cmp	r2, #127	; 0x7f
   48e94:	d814      	bhi.n	48ec0 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   48e96:	7b42      	ldrb	r2, [r0, #13]
   48e98:	06d2      	lsls	r2, r2, #27
   48e9a:	d111      	bne.n	48ec0 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   48e9c:	4a0c      	ldr	r2, [pc, #48]	; (48ed0 <z_time_slice+0x78>)
   48e9e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   48ea2:	6812      	ldr	r2, [r2, #0]
   48ea4:	4295      	cmp	r5, r2
   48ea6:	db0b      	blt.n	48ec0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   48ea8:	4a0a      	ldr	r2, [pc, #40]	; (48ed4 <z_time_slice+0x7c>)
   48eaa:	4290      	cmp	r0, r2
   48eac:	d008      	beq.n	48ec0 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   48eae:	691a      	ldr	r2, [r3, #16]
   48eb0:	428a      	cmp	r2, r1
   48eb2:	dc02      	bgt.n	48eba <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   48eb4:	f7ff ff96 	bl	48de4 <move_thread_to_end_of_prio_q>
   48eb8:	e7de      	b.n	48e78 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   48eba:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   48ebc:	611a      	str	r2, [r3, #16]
   48ebe:	e7dd      	b.n	48e7c <z_time_slice+0x24>
   48ec0:	2200      	movs	r2, #0
   48ec2:	e7fb      	b.n	48ebc <z_time_slice+0x64>
   48ec4:	20007530 	.word	0x20007530
   48ec8:	20007560 	.word	0x20007560
   48ecc:	20007568 	.word	0x20007568
   48ed0:	20007564 	.word	0x20007564
   48ed4:	20004210 	.word	0x20004210

00048ed8 <ready_thread>:
{
   48ed8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   48eda:	f990 200d 	ldrsb.w	r2, [r0, #13]
   48ede:	7b43      	ldrb	r3, [r0, #13]
   48ee0:	2a00      	cmp	r2, #0
   48ee2:	db2a      	blt.n	48f3a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48ee4:	06da      	lsls	r2, r3, #27
   48ee6:	d128      	bne.n	48f3a <ready_thread+0x62>
   48ee8:	6982      	ldr	r2, [r0, #24]
   48eea:	bb32      	cbnz	r2, 48f3a <ready_thread+0x62>
	return list->head == list;
   48eec:	4a14      	ldr	r2, [pc, #80]	; (48f40 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   48eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48ef2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   48ef4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48ef8:	f102 0520 	add.w	r5, r2, #32
   48efc:	42ab      	cmp	r3, r5
   48efe:	d017      	beq.n	48f30 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48f00:	b1b3      	cbz	r3, 48f30 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   48f02:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48f06:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   48f0a:	428e      	cmp	r6, r1
   48f0c:	d00b      	beq.n	48f26 <ready_thread+0x4e>
		return b2 - b1;
   48f0e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   48f10:	2900      	cmp	r1, #0
   48f12:	dd08      	ble.n	48f26 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   48f14:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48f16:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   48f1a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   48f1c:	6058      	str	r0, [r3, #4]
}
   48f1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   48f20:	2000      	movs	r0, #0
   48f22:	f7ff bf3f 	b.w	48da4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   48f26:	42a3      	cmp	r3, r4
   48f28:	d002      	beq.n	48f30 <ready_thread+0x58>
   48f2a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48f2c:	2b00      	cmp	r3, #0
   48f2e:	d1ea      	bne.n	48f06 <ready_thread+0x2e>
	node->prev = tail;
   48f30:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   48f34:	6020      	str	r0, [r4, #0]
	list->tail = node;
   48f36:	6250      	str	r0, [r2, #36]	; 0x24
}
   48f38:	e7f1      	b.n	48f1e <ready_thread+0x46>
}
   48f3a:	bc70      	pop	{r4, r5, r6}
   48f3c:	4770      	bx	lr
   48f3e:	bf00      	nop
   48f40:	20007530 	.word	0x20007530

00048f44 <z_sched_start>:
{
   48f44:	b510      	push	{r4, lr}
	__asm__ volatile(
   48f46:	f04f 0220 	mov.w	r2, #32
   48f4a:	f3ef 8411 	mrs	r4, BASEPRI
   48f4e:	f382 8812 	msr	BASEPRI_MAX, r2
   48f52:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   48f56:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   48f58:	0751      	lsls	r1, r2, #29
   48f5a:	d404      	bmi.n	48f66 <z_sched_start+0x22>
	__asm__ volatile(
   48f5c:	f384 8811 	msr	BASEPRI, r4
   48f60:	f3bf 8f6f 	isb	sy
}
   48f64:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   48f66:	f022 0204 	bic.w	r2, r2, #4
   48f6a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   48f6c:	f7ff ffb4 	bl	48ed8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   48f70:	4621      	mov	r1, r4
   48f72:	4802      	ldr	r0, [pc, #8]	; (48f7c <z_sched_start+0x38>)
}
   48f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   48f78:	f7ff beee 	b.w	48d58 <z_reschedule>
   48f7c:	200077a2 	.word	0x200077a2

00048f80 <unready_thread>:
{
   48f80:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   48f82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   48f86:	7b43      	ldrb	r3, [r0, #13]
   48f88:	2a00      	cmp	r2, #0
{
   48f8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   48f8c:	da04      	bge.n	48f98 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48f92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48f94:	f008 fd45 	bl	51a22 <sys_dlist_remove>
	update_cache(thread == _current);
   48f98:	4b04      	ldr	r3, [pc, #16]	; (48fac <unready_thread+0x2c>)
   48f9a:	6898      	ldr	r0, [r3, #8]
   48f9c:	1a43      	subs	r3, r0, r1
   48f9e:	4258      	negs	r0, r3
   48fa0:	4158      	adcs	r0, r3
}
   48fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   48fa6:	f7ff befd 	b.w	48da4 <update_cache>
   48faa:	bf00      	nop
   48fac:	20007530 	.word	0x20007530

00048fb0 <pend>:
{
   48fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48fb4:	4606      	mov	r6, r0
   48fb6:	4615      	mov	r5, r2
   48fb8:	461c      	mov	r4, r3
	__asm__ volatile(
   48fba:	f04f 0320 	mov.w	r3, #32
   48fbe:	f3ef 8711 	mrs	r7, BASEPRI
   48fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   48fc6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   48fca:	f008 fdb7 	bl	51b3c <add_to_waitq_locked>
	__asm__ volatile(
   48fce:	f387 8811 	msr	BASEPRI, r7
   48fd2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48fd6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   48fda:	bf08      	it	eq
   48fdc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   48fe0:	d008      	beq.n	48ff4 <pend+0x44>
   48fe2:	462a      	mov	r2, r5
   48fe4:	4623      	mov	r3, r4
   48fe6:	f106 0018 	add.w	r0, r6, #24
   48fea:	4903      	ldr	r1, [pc, #12]	; (48ff8 <pend+0x48>)
}
   48fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   48ff0:	f000 ba3a 	b.w	49468 <z_add_timeout>
   48ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   48ff8:	00051af9 	.word	0x00051af9

00048ffc <z_pend_curr>:
{
   48ffc:	b510      	push	{r4, lr}
	pending_current = _current;
   48ffe:	4b07      	ldr	r3, [pc, #28]	; (4901c <z_pend_curr+0x20>)
   49000:	6898      	ldr	r0, [r3, #8]
   49002:	4b07      	ldr	r3, [pc, #28]	; (49020 <z_pend_curr+0x24>)
{
   49004:	460c      	mov	r4, r1
	pending_current = _current;
   49006:	6018      	str	r0, [r3, #0]
{
   49008:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   4900a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4900e:	f7ff ffcf 	bl	48fb0 <pend>
   49012:	4620      	mov	r0, r4
}
   49014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   49018:	f7e4 b9d4 	b.w	2d3c4 <arch_swap>
   4901c:	20007530 	.word	0x20007530
   49020:	20007560 	.word	0x20007560

00049024 <z_set_prio>:
{
   49024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49026:	4604      	mov	r4, r0
	__asm__ volatile(
   49028:	f04f 0320 	mov.w	r3, #32
   4902c:	f3ef 8611 	mrs	r6, BASEPRI
   49030:	f383 8812 	msr	BASEPRI_MAX, r3
   49034:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   49038:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   4903a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   4903c:	b249      	sxtb	r1, r1
   4903e:	d133      	bne.n	490a8 <z_set_prio+0x84>
		if (need_sched) {
   49040:	6982      	ldr	r2, [r0, #24]
   49042:	bb8a      	cbnz	r2, 490a8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   49044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   49048:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4904a:	f008 fcea 	bl	51a22 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   4904e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   49050:	4a17      	ldr	r2, [pc, #92]	; (490b0 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   49052:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   49054:	f063 037f 	orn	r3, r3, #127	; 0x7f
   49058:	7343      	strb	r3, [r0, #13]
   4905a:	4610      	mov	r0, r2
   4905c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49060:	4283      	cmp	r3, r0
   49062:	d01b      	beq.n	4909c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   49064:	b1d3      	cbz	r3, 4909c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   49066:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   49068:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   4906c:	42a9      	cmp	r1, r5
   4906e:	d010      	beq.n	49092 <z_set_prio+0x6e>
		return b2 - b1;
   49070:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   49072:	2d00      	cmp	r5, #0
   49074:	dd0d      	ble.n	49092 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   49076:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   49078:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   4907c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   4907e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   49080:	2001      	movs	r0, #1
   49082:	f7ff fe8f 	bl	48da4 <update_cache>
   49086:	2001      	movs	r0, #1
	__asm__ volatile(
   49088:	f386 8811 	msr	BASEPRI, r6
   4908c:	f3bf 8f6f 	isb	sy
}
   49090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   49092:	42bb      	cmp	r3, r7
   49094:	d002      	beq.n	4909c <z_set_prio+0x78>
   49096:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   49098:	2b00      	cmp	r3, #0
   4909a:	d1e5      	bne.n	49068 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   4909c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   4909e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   490a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   490a4:	6254      	str	r4, [r2, #36]	; 0x24
}
   490a6:	e7eb      	b.n	49080 <z_set_prio+0x5c>
			thread->base.prio = prio;
   490a8:	73a1      	strb	r1, [r4, #14]
   490aa:	2000      	movs	r0, #0
   490ac:	e7ec      	b.n	49088 <z_set_prio+0x64>
   490ae:	bf00      	nop
   490b0:	20007530 	.word	0x20007530

000490b4 <z_impl_k_thread_suspend>:
{
   490b4:	b570      	push	{r4, r5, r6, lr}
   490b6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   490b8:	3018      	adds	r0, #24
   490ba:	f008 fdc3 	bl	51c44 <z_abort_timeout>
	__asm__ volatile(
   490be:	f04f 0320 	mov.w	r3, #32
   490c2:	f3ef 8611 	mrs	r6, BASEPRI
   490c6:	f383 8812 	msr	BASEPRI_MAX, r3
   490ca:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   490ce:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   490d2:	7b63      	ldrb	r3, [r4, #13]
   490d4:	2a00      	cmp	r2, #0
   490d6:	da05      	bge.n	490e4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   490d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   490dc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   490de:	4620      	mov	r0, r4
   490e0:	f008 fc9f 	bl	51a22 <sys_dlist_remove>
		update_cache(thread == _current);
   490e4:	4d0b      	ldr	r5, [pc, #44]	; (49114 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   490e6:	7b63      	ldrb	r3, [r4, #13]
   490e8:	68a8      	ldr	r0, [r5, #8]
   490ea:	f043 0310 	orr.w	r3, r3, #16
   490ee:	7363      	strb	r3, [r4, #13]
   490f0:	1b03      	subs	r3, r0, r4
   490f2:	4258      	negs	r0, r3
   490f4:	4158      	adcs	r0, r3
   490f6:	f7ff fe55 	bl	48da4 <update_cache>
	__asm__ volatile(
   490fa:	f386 8811 	msr	BASEPRI, r6
   490fe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   49102:	68ab      	ldr	r3, [r5, #8]
   49104:	42a3      	cmp	r3, r4
   49106:	d103      	bne.n	49110 <z_impl_k_thread_suspend+0x5c>
}
   49108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   4910c:	f008 bcd4 	b.w	51ab8 <z_reschedule_unlocked>
}
   49110:	bd70      	pop	{r4, r5, r6, pc}
   49112:	bf00      	nop
   49114:	20007530 	.word	0x20007530

00049118 <k_sched_unlock>:
{
   49118:	b510      	push	{r4, lr}
	__asm__ volatile(
   4911a:	f04f 0320 	mov.w	r3, #32
   4911e:	f3ef 8411 	mrs	r4, BASEPRI
   49122:	f383 8812 	msr	BASEPRI_MAX, r3
   49126:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   4912a:	4b08      	ldr	r3, [pc, #32]	; (4914c <k_sched_unlock+0x34>)
   4912c:	689a      	ldr	r2, [r3, #8]
   4912e:	7bd3      	ldrb	r3, [r2, #15]
   49130:	3301      	adds	r3, #1
   49132:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   49134:	2000      	movs	r0, #0
   49136:	f7ff fe35 	bl	48da4 <update_cache>
	__asm__ volatile(
   4913a:	f384 8811 	msr	BASEPRI, r4
   4913e:	f3bf 8f6f 	isb	sy
}
   49142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   49146:	f008 bcb7 	b.w	51ab8 <z_reschedule_unlocked>
   4914a:	bf00      	nop
   4914c:	20007530 	.word	0x20007530

00049150 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   49150:	4b04      	ldr	r3, [pc, #16]	; (49164 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   49152:	2100      	movs	r1, #0
   49154:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   49158:	e9c3 2208 	strd	r2, r2, [r3, #32]
   4915c:	4608      	mov	r0, r1
   4915e:	f7ff bdcb 	b.w	48cf8 <k_sched_time_slice_set>
   49162:	bf00      	nop
   49164:	20007530 	.word	0x20007530

00049168 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   49168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   4916a:	f04f 0320 	mov.w	r3, #32
   4916e:	f3ef 8511 	mrs	r5, BASEPRI
   49172:	f383 8812 	msr	BASEPRI_MAX, r3
   49176:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   4917a:	491a      	ldr	r1, [pc, #104]	; (491e4 <z_impl_k_yield+0x7c>)
   4917c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4917e:	7b43      	ldrb	r3, [r0, #13]
   49180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   49184:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   49186:	f008 fc4c 	bl	51a22 <sys_dlist_remove>
	}
	queue_thread(_current);
   4918a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   4918c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   4918e:	4608      	mov	r0, r1
   49190:	f062 027f 	orn	r2, r2, #127	; 0x7f
   49194:	735a      	strb	r2, [r3, #13]
   49196:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4919a:	4282      	cmp	r2, r0
   4919c:	d01c      	beq.n	491d8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4919e:	b1da      	cbz	r2, 491d8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   491a0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   491a2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   491a6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   491aa:	42a6      	cmp	r6, r4
   491ac:	d00f      	beq.n	491ce <z_impl_k_yield+0x66>
		return b2 - b1;
   491ae:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   491b0:	2c00      	cmp	r4, #0
   491b2:	dd0c      	ble.n	491ce <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   491b4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   491b6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   491ba:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   491bc:	6053      	str	r3, [r2, #4]
	update_cache(1);
   491be:	2001      	movs	r0, #1
   491c0:	f7ff fdf0 	bl	48da4 <update_cache>
   491c4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   491c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   491ca:	f7e4 b8fb 	b.w	2d3c4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   491ce:	42ba      	cmp	r2, r7
   491d0:	d002      	beq.n	491d8 <z_impl_k_yield+0x70>
   491d2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   491d4:	2a00      	cmp	r2, #0
   491d6:	d1e6      	bne.n	491a6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   491d8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   491da:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   491de:	6013      	str	r3, [r2, #0]
	list->tail = node;
   491e0:	624b      	str	r3, [r1, #36]	; 0x24
}
   491e2:	e7ec      	b.n	491be <z_impl_k_yield+0x56>
   491e4:	20007530 	.word	0x20007530

000491e8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   491e8:	ea50 0301 	orrs.w	r3, r0, r1
{
   491ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   491f0:	4605      	mov	r5, r0
   491f2:	460e      	mov	r6, r1
	if (ticks == 0) {
   491f4:	d103      	bne.n	491fe <z_tick_sleep+0x16>
	z_impl_k_yield();
   491f6:	f7ff ffb7 	bl	49168 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   491fa:	2000      	movs	r0, #0
   491fc:	e033      	b.n	49266 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   491fe:	f06f 0401 	mvn.w	r4, #1
   49202:	1a24      	subs	r4, r4, r0
   49204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   49208:	eb63 0301 	sbc.w	r3, r3, r1
   4920c:	2c01      	cmp	r4, #1
   4920e:	f173 0300 	sbcs.w	r3, r3, #0
   49212:	da02      	bge.n	4921a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   49214:	f008 fd56 	bl	51cc4 <sys_clock_tick_get_32>
   49218:	1944      	adds	r4, r0, r5
   4921a:	f04f 0320 	mov.w	r3, #32
   4921e:	f3ef 8811 	mrs	r8, BASEPRI
   49222:	f383 8812 	msr	BASEPRI_MAX, r3
   49226:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   4922a:	4f10      	ldr	r7, [pc, #64]	; (4926c <z_tick_sleep+0x84>)
   4922c:	4b10      	ldr	r3, [pc, #64]	; (49270 <z_tick_sleep+0x88>)
   4922e:	68b8      	ldr	r0, [r7, #8]
   49230:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   49232:	f7ff fea5 	bl	48f80 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   49236:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   49238:	490e      	ldr	r1, [pc, #56]	; (49274 <z_tick_sleep+0x8c>)
   4923a:	462a      	mov	r2, r5
   4923c:	4633      	mov	r3, r6
   4923e:	3018      	adds	r0, #24
   49240:	f000 f912 	bl	49468 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   49244:	68ba      	ldr	r2, [r7, #8]
   49246:	7b53      	ldrb	r3, [r2, #13]
   49248:	f043 0310 	orr.w	r3, r3, #16
   4924c:	7353      	strb	r3, [r2, #13]
   4924e:	4640      	mov	r0, r8
   49250:	f7e4 f8b8 	bl	2d3c4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   49254:	f008 fd36 	bl	51cc4 <sys_clock_tick_get_32>
   49258:	1a20      	subs	r0, r4, r0
   4925a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   4925e:	2801      	cmp	r0, #1
   49260:	f173 0300 	sbcs.w	r3, r3, #0
   49264:	dbc9      	blt.n	491fa <z_tick_sleep+0x12>
}
   49266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4926a:	bf00      	nop
   4926c:	20007530 	.word	0x20007530
   49270:	20007560 	.word	0x20007560
   49274:	00051af9 	.word	0x00051af9

00049278 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   49278:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   4927c:	bf08      	it	eq
   4927e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   49282:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   49284:	d106      	bne.n	49294 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   49286:	4b08      	ldr	r3, [pc, #32]	; (492a8 <z_impl_k_sleep+0x30>)
   49288:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   4928a:	f7ff ff13 	bl	490b4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   4928e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   49292:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   49294:	f7ff ffa8 	bl	491e8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   49298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   4929c:	fb80 0303 	smull	r0, r3, r0, r3
   492a0:	0bc0      	lsrs	r0, r0, #15
   492a2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   492a6:	e7f4      	b.n	49292 <z_impl_k_sleep+0x1a>
   492a8:	20007530 	.word	0x20007530

000492ac <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   492ac:	4b01      	ldr	r3, [pc, #4]	; (492b4 <z_impl_z_current_get+0x8>)
   492ae:	6898      	ldr	r0, [r3, #8]
   492b0:	4770      	bx	lr
   492b2:	bf00      	nop
   492b4:	20007530 	.word	0x20007530

000492b8 <z_impl_k_is_preempt_thread>:
   492b8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   492bc:	b93b      	cbnz	r3, 492ce <z_impl_k_is_preempt_thread+0x16>
   492be:	4b05      	ldr	r3, [pc, #20]	; (492d4 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   492c0:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   492c2:	89d8      	ldrh	r0, [r3, #14]
   492c4:	287f      	cmp	r0, #127	; 0x7f
   492c6:	bf8c      	ite	hi
   492c8:	2000      	movhi	r0, #0
   492ca:	2001      	movls	r0, #1
   492cc:	4770      	bx	lr
   492ce:	2000      	movs	r0, #0
}
   492d0:	4770      	bx	lr
   492d2:	bf00      	nop
   492d4:	20007530 	.word	0x20007530

000492d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   492d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   492dc:	4604      	mov	r4, r0
   492de:	f04f 0320 	mov.w	r3, #32
   492e2:	f3ef 8611 	mrs	r6, BASEPRI
   492e6:	f383 8812 	msr	BASEPRI_MAX, r3
   492ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   492ee:	7b43      	ldrb	r3, [r0, #13]
   492f0:	071a      	lsls	r2, r3, #28
   492f2:	d505      	bpl.n	49300 <z_thread_abort+0x28>
	__asm__ volatile(
   492f4:	f386 8811 	msr	BASEPRI, r6
   492f8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   492fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   49300:	f023 0220 	bic.w	r2, r3, #32
   49304:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   49308:	09d2      	lsrs	r2, r2, #7
   4930a:	d120      	bne.n	4934e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   4930c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   4930e:	68a3      	ldr	r3, [r4, #8]
   49310:	b113      	cbz	r3, 49318 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   49312:	4620      	mov	r0, r4
   49314:	f008 fb8d 	bl	51a32 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   49318:	f104 0018 	add.w	r0, r4, #24
   4931c:	f008 fc92 	bl	51c44 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   49320:	f104 0758 	add.w	r7, r4, #88	; 0x58
   49324:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   49328:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4932a:	42bd      	cmp	r5, r7
   4932c:	d000      	beq.n	49330 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4932e:	b9b5      	cbnz	r5, 4935e <z_thread_abort+0x86>
		update_cache(1);
   49330:	2001      	movs	r0, #1
   49332:	f7ff fd37 	bl	48da4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   49336:	4b10      	ldr	r3, [pc, #64]	; (49378 <z_thread_abort+0xa0>)
   49338:	689b      	ldr	r3, [r3, #8]
   4933a:	42a3      	cmp	r3, r4
   4933c:	d1da      	bne.n	492f4 <z_thread_abort+0x1c>
   4933e:	f3ef 8305 	mrs	r3, IPSR
   49342:	2b00      	cmp	r3, #0
   49344:	d1d6      	bne.n	492f4 <z_thread_abort+0x1c>
   49346:	4630      	mov	r0, r6
   49348:	f7e4 f83c 	bl	2d3c4 <arch_swap>
	return ret;
   4934c:	e7d2      	b.n	492f4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4934e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   49352:	f043 0308 	orr.w	r3, r3, #8
   49356:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   49358:	f008 fb63 	bl	51a22 <sys_dlist_remove>
}
   4935c:	e7d7      	b.n	4930e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   4935e:	4628      	mov	r0, r5
   49360:	f008 fb67 	bl	51a32 <unpend_thread_no_timeout>
   49364:	f105 0018 	add.w	r0, r5, #24
   49368:	f008 fc6c 	bl	51c44 <z_abort_timeout>
   4936c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   49370:	4628      	mov	r0, r5
   49372:	f7ff fdb1 	bl	48ed8 <ready_thread>
   49376:	e7d7      	b.n	49328 <z_thread_abort+0x50>
   49378:	20007530 	.word	0x20007530

0004937c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   4937c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   4937e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   49382:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   49384:	e9cd 6700 	strd	r6, r7, [sp]
   49388:	f7ff fe38 	bl	48ffc <z_pend_curr>

	if (data != NULL) {
   4938c:	b11c      	cbz	r4, 49396 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   4938e:	4b03      	ldr	r3, [pc, #12]	; (4939c <z_sched_wait+0x20>)
   49390:	689b      	ldr	r3, [r3, #8]
   49392:	695b      	ldr	r3, [r3, #20]
   49394:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   49396:	b002      	add	sp, #8
   49398:	bdd0      	pop	{r4, r6, r7, pc}
   4939a:	bf00      	nop
   4939c:	20007530 	.word	0x20007530

000493a0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   493a0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   493a2:	4806      	ldr	r0, [pc, #24]	; (493bc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   493a4:	4a06      	ldr	r2, [pc, #24]	; (493c0 <z_data_copy+0x20>)
   493a6:	4907      	ldr	r1, [pc, #28]	; (493c4 <z_data_copy+0x24>)
   493a8:	1a12      	subs	r2, r2, r0
   493aa:	f003 f984 	bl	4c6b6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   493ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   493b2:	4a05      	ldr	r2, [pc, #20]	; (493c8 <z_data_copy+0x28>)
   493b4:	4905      	ldr	r1, [pc, #20]	; (493cc <z_data_copy+0x2c>)
   493b6:	4806      	ldr	r0, [pc, #24]	; (493d0 <z_data_copy+0x30>)
   493b8:	f003 b97d 	b.w	4c6b6 <memcpy>
   493bc:	20000000 	.word	0x20000000
   493c0:	200016f4 	.word	0x200016f4
   493c4:	00056c28 	.word	0x00056c28
   493c8:	00000000 	.word	0x00000000
   493cc:	00056c28 	.word	0x00056c28
   493d0:	20000000 	.word	0x20000000

000493d4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   493d4:	4b03      	ldr	r3, [pc, #12]	; (493e4 <elapsed+0x10>)
   493d6:	681b      	ldr	r3, [r3, #0]
   493d8:	b90b      	cbnz	r3, 493de <elapsed+0xa>
   493da:	f7fc bfb3 	b.w	46344 <sys_clock_elapsed>
}
   493de:	2000      	movs	r0, #0
   493e0:	4770      	bx	lr
   493e2:	bf00      	nop
   493e4:	2000756c 	.word	0x2000756c

000493e8 <next_timeout>:
	return list->head == list;
   493e8:	4b10      	ldr	r3, [pc, #64]	; (4942c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   493ea:	b510      	push	{r4, lr}
   493ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   493ee:	429c      	cmp	r4, r3
   493f0:	bf08      	it	eq
   493f2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   493f4:	f7ff ffee 	bl	493d4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   493f8:	b1a4      	cbz	r4, 49424 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   493fa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   493fe:	1a1b      	subs	r3, r3, r0
   49400:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   49404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   49408:	f170 0200 	sbcs.w	r2, r0, #0
   4940c:	da0a      	bge.n	49424 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   4940e:	2800      	cmp	r0, #0
   49410:	bfac      	ite	ge
   49412:	4618      	movge	r0, r3
   49414:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   49416:	4b06      	ldr	r3, [pc, #24]	; (49430 <next_timeout+0x48>)
   49418:	691b      	ldr	r3, [r3, #16]
   4941a:	b113      	cbz	r3, 49422 <next_timeout+0x3a>
   4941c:	4298      	cmp	r0, r3
   4941e:	bfa8      	it	ge
   49420:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   49422:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   49424:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   49428:	e7f5      	b.n	49416 <next_timeout+0x2e>
   4942a:	bf00      	nop
   4942c:	20001074 	.word	0x20001074
   49430:	20007530 	.word	0x20007530

00049434 <remove_timeout>:
{
   49434:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   49436:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   49438:	b168      	cbz	r0, 49456 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   4943a:	4a0a      	ldr	r2, [pc, #40]	; (49464 <remove_timeout+0x30>)
   4943c:	6852      	ldr	r2, [r2, #4]
   4943e:	4290      	cmp	r0, r2
   49440:	d009      	beq.n	49456 <remove_timeout+0x22>
	if (next(t) != NULL) {
   49442:	b143      	cbz	r3, 49456 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   49444:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   49448:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   4944c:	1912      	adds	r2, r2, r4
   4944e:	eb41 0105 	adc.w	r1, r1, r5
   49452:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   49456:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   49458:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4945a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4945c:	2300      	movs	r3, #0
	node->prev = NULL;
   4945e:	e9c0 3300 	strd	r3, r3, [r0]
}
   49462:	bd30      	pop	{r4, r5, pc}
   49464:	20001074 	.word	0x20001074

00049468 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   49468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   4946c:	bf08      	it	eq
   4946e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   49472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49474:	4604      	mov	r4, r0
   49476:	461f      	mov	r7, r3
   49478:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4947a:	d067      	beq.n	4954c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   4947c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   4947e:	f04f 0320 	mov.w	r3, #32
   49482:	f3ef 8611 	mrs	r6, BASEPRI
   49486:	f383 8812 	msr	BASEPRI_MAX, r3
   4948a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   4948e:	f06f 0201 	mvn.w	r2, #1
   49492:	1b53      	subs	r3, r2, r5
   49494:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   49498:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   4949c:	2b00      	cmp	r3, #0
   4949e:	db1b      	blt.n	494d8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   494a0:	4b2b      	ldr	r3, [pc, #172]	; (49550 <z_add_timeout+0xe8>)
   494a2:	e9d3 1300 	ldrd	r1, r3, [r3]
   494a6:	1a52      	subs	r2, r2, r1
   494a8:	eb6c 0303 	sbc.w	r3, ip, r3
   494ac:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   494ae:	eb63 0307 	sbc.w	r3, r3, r7
   494b2:	2d01      	cmp	r5, #1
   494b4:	f173 0200 	sbcs.w	r2, r3, #0
   494b8:	bfbc      	itt	lt
   494ba:	2501      	movlt	r5, #1
   494bc:	2300      	movlt	r3, #0
   494be:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   494c2:	4824      	ldr	r0, [pc, #144]	; (49554 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   494c4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   494c8:	4283      	cmp	r3, r0
   494ca:	d118      	bne.n	494fe <z_add_timeout+0x96>
	node->prev = tail;
   494cc:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   494d0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   494d4:	6044      	str	r4, [r0, #4]
}
   494d6:	e026      	b.n	49526 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   494d8:	f7ff ff7c 	bl	493d4 <elapsed>
   494dc:	3501      	adds	r5, #1
   494de:	f147 0700 	adc.w	r7, r7, #0
   494e2:	182d      	adds	r5, r5, r0
   494e4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   494e8:	e9c4 5704 	strd	r5, r7, [r4, #16]
   494ec:	e7e9      	b.n	494c2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   494ee:	1a52      	subs	r2, r2, r1
   494f0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   494f4:	459c      	cmp	ip, r3
   494f6:	e9c4 2504 	strd	r2, r5, [r4, #16]
   494fa:	d0e7      	beq.n	494cc <z_add_timeout+0x64>
   494fc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   494fe:	2b00      	cmp	r3, #0
   49500:	d0e4      	beq.n	494cc <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   49502:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   49506:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   4950a:	428a      	cmp	r2, r1
   4950c:	eb75 0e07 	sbcs.w	lr, r5, r7
   49510:	daed      	bge.n	494ee <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   49512:	1a8a      	subs	r2, r1, r2
   49514:	eb67 0505 	sbc.w	r5, r7, r5
   49518:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   4951c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   4951e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   49522:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   49524:	605c      	str	r4, [r3, #4]
	return list->head == list;
   49526:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49528:	4283      	cmp	r3, r0
   4952a:	d00b      	beq.n	49544 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   4952c:	429c      	cmp	r4, r3
   4952e:	d109      	bne.n	49544 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   49530:	f7ff ff5a 	bl	493e8 <next_timeout>

			if (next_time == 0 ||
   49534:	b118      	cbz	r0, 4953e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   49536:	4b08      	ldr	r3, [pc, #32]	; (49558 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   49538:	691b      	ldr	r3, [r3, #16]
   4953a:	4283      	cmp	r3, r0
   4953c:	d002      	beq.n	49544 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   4953e:	2100      	movs	r1, #0
   49540:	f7fc fece 	bl	462e0 <sys_clock_set_timeout>
	__asm__ volatile(
   49544:	f386 8811 	msr	BASEPRI, r6
   49548:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   4954c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4954e:	bf00      	nop
   49550:	200043b0 	.word	0x200043b0
   49554:	20001074 	.word	0x20001074
   49558:	20007530 	.word	0x20007530

0004955c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   4955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   49560:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   49562:	f7ff fc79 	bl	48e58 <z_time_slice>
	__asm__ volatile(
   49566:	f04f 0320 	mov.w	r3, #32
   4956a:	f3ef 8411 	mrs	r4, BASEPRI
   4956e:	f383 8812 	msr	BASEPRI_MAX, r3
   49572:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   49576:	4e24      	ldr	r6, [pc, #144]	; (49608 <sys_clock_announce+0xac>)
	return list->head == list;
   49578:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4960c <sys_clock_announce+0xb0>
   4957c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   4957e:	4d24      	ldr	r5, [pc, #144]	; (49610 <sys_clock_announce+0xb4>)
   49580:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   49584:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49586:	4540      	cmp	r0, r8
		curr_tick += dt;
   49588:	e9d5 1e00 	ldrd	r1, lr, [r5]
   4958c:	ea4f 77e2 	mov.w	r7, r2, asr #31
   49590:	d00b      	beq.n	495aa <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   49592:	b150      	cbz	r0, 495aa <sys_clock_announce+0x4e>
   49594:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   49598:	429a      	cmp	r2, r3
   4959a:	eb77 090c 	sbcs.w	r9, r7, ip
   4959e:	da16      	bge.n	495ce <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   495a0:	1a9b      	subs	r3, r3, r2
   495a2:	eb6c 0c07 	sbc.w	ip, ip, r7
   495a6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   495aa:	1852      	adds	r2, r2, r1
   495ac:	eb4e 0707 	adc.w	r7, lr, r7
   495b0:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   495b4:	2500      	movs	r5, #0
   495b6:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   495b8:	f7ff ff16 	bl	493e8 <next_timeout>
   495bc:	4629      	mov	r1, r5
   495be:	f7fc fe8f 	bl	462e0 <sys_clock_set_timeout>
	__asm__ volatile(
   495c2:	f384 8811 	msr	BASEPRI, r4
   495c6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   495ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   495ce:	1859      	adds	r1, r3, r1
   495d0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   495d4:	1ad3      	subs	r3, r2, r3
   495d6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   495d8:	2200      	movs	r2, #0
   495da:	2300      	movs	r3, #0
   495dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   495e0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   495e4:	f7ff ff26 	bl	49434 <remove_timeout>
   495e8:	f384 8811 	msr	BASEPRI, r4
   495ec:	f3bf 8f6f 	isb	sy
		t->fn(t);
   495f0:	6883      	ldr	r3, [r0, #8]
   495f2:	4798      	blx	r3
	__asm__ volatile(
   495f4:	f04f 0320 	mov.w	r3, #32
   495f8:	f3ef 8411 	mrs	r4, BASEPRI
   495fc:	f383 8812 	msr	BASEPRI_MAX, r3
   49600:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   49604:	e7bc      	b.n	49580 <sys_clock_announce+0x24>
   49606:	bf00      	nop
   49608:	2000756c 	.word	0x2000756c
   4960c:	20001074 	.word	0x20001074
   49610:	200043b0 	.word	0x200043b0

00049614 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   49614:	b510      	push	{r4, lr}
   49616:	f04f 0320 	mov.w	r3, #32
   4961a:	f3ef 8411 	mrs	r4, BASEPRI
   4961e:	f383 8812 	msr	BASEPRI_MAX, r3
   49622:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   49626:	f7fc fe8d 	bl	46344 <sys_clock_elapsed>
   4962a:	4a05      	ldr	r2, [pc, #20]	; (49640 <sys_clock_tick_get+0x2c>)
   4962c:	e9d2 3100 	ldrd	r3, r1, [r2]
   49630:	18c0      	adds	r0, r0, r3
   49632:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   49636:	f384 8811 	msr	BASEPRI, r4
   4963a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   4963e:	bd10      	pop	{r4, pc}
   49640:	200043b0 	.word	0x200043b0

00049644 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   49644:	b570      	push	{r4, r5, r6, lr}
   49646:	4604      	mov	r4, r0
	__asm__ volatile(
   49648:	f04f 0320 	mov.w	r3, #32
   4964c:	f3ef 8511 	mrs	r5, BASEPRI
   49650:	f383 8812 	msr	BASEPRI_MAX, r3
   49654:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   49658:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   4965c:	3301      	adds	r3, #1
   4965e:	f142 0200 	adc.w	r2, r2, #0
   49662:	2b02      	cmp	r3, #2
   49664:	f172 0300 	sbcs.w	r3, r2, #0
   49668:	d304      	bcc.n	49674 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   4966a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   4966e:	4917      	ldr	r1, [pc, #92]	; (496cc <z_timer_expiration_handler+0x88>)
   49670:	f7ff fefa 	bl	49468 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   49674:	6b23      	ldr	r3, [r4, #48]	; 0x30
   49676:	3301      	adds	r3, #1
   49678:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   4967a:	6a23      	ldr	r3, [r4, #32]
   4967c:	b173      	cbz	r3, 4969c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   4967e:	f385 8811 	msr	BASEPRI, r5
   49682:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   49686:	6a23      	ldr	r3, [r4, #32]
   49688:	4620      	mov	r0, r4
   4968a:	4798      	blx	r3
	__asm__ volatile(
   4968c:	f04f 0320 	mov.w	r3, #32
   49690:	f3ef 8511 	mrs	r5, BASEPRI
   49694:	f383 8812 	msr	BASEPRI_MAX, r3
   49698:	f3bf 8f6f 	isb	sy
	return list->head == list;
   4969c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   496a0:	42a6      	cmp	r6, r4
   496a2:	d000      	beq.n	496a6 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   496a4:	b926      	cbnz	r6, 496b0 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   496a6:	f385 8811 	msr	BASEPRI, r5
   496aa:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   496ae:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   496b0:	4630      	mov	r0, r6
   496b2:	f008 f9d1 	bl	51a58 <z_unpend_thread_no_timeout>
   496b6:	2300      	movs	r3, #0
   496b8:	67f3      	str	r3, [r6, #124]	; 0x7c
   496ba:	f385 8811 	msr	BASEPRI, r5
   496be:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   496c2:	4630      	mov	r0, r6
}
   496c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   496c8:	f008 ba06 	b.w	51ad8 <z_ready_thread>
   496cc:	00049645 	.word	0x00049645

000496d0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   496d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   496d4:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   496d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   496da:	bf08      	it	eq
   496dc:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   496e0:	4606      	mov	r6, r0
   496e2:	461c      	mov	r4, r3
   496e4:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   496e8:	4689      	mov	r9, r1
   496ea:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   496ec:	d03e      	beq.n	4976c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   496ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   496f2:	bf08      	it	eq
   496f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   496f8:	4615      	mov	r5, r2
   496fa:	4607      	mov	r7, r0
   496fc:	d014      	beq.n	49728 <z_impl_k_timer_start+0x58>
   496fe:	ea50 0302 	orrs.w	r3, r0, r2
   49702:	d011      	beq.n	49728 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   49704:	f06f 0301 	mvn.w	r3, #1
   49708:	1a9b      	subs	r3, r3, r2
   4970a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4970e:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   49712:	2b00      	cmp	r3, #0
   49714:	da08      	bge.n	49728 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   49716:	2a02      	cmp	r2, #2
   49718:	f170 0300 	sbcs.w	r3, r0, #0
   4971c:	bfbc      	itt	lt
   4971e:	2502      	movlt	r5, #2
   49720:	2700      	movlt	r7, #0
   49722:	3d01      	subs	r5, #1
   49724:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   49728:	f06f 0301 	mvn.w	r3, #1
   4972c:	1a5b      	subs	r3, r3, r1
   4972e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   49732:	eb63 0304 	sbc.w	r3, r3, r4
   49736:	2b00      	cmp	r3, #0
   49738:	da09      	bge.n	4974e <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   4973a:	2901      	cmp	r1, #1
   4973c:	f174 0300 	sbcs.w	r3, r4, #0
   49740:	bfbc      	itt	lt
   49742:	2101      	movlt	r1, #1
   49744:	2400      	movlt	r4, #0
   49746:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   4974a:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   4974e:	4630      	mov	r0, r6
   49750:	f008 fa78 	bl	51c44 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   49754:	2300      	movs	r3, #0
   49756:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   49758:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   4975c:	464a      	mov	r2, r9
   4975e:	4643      	mov	r3, r8
   49760:	4630      	mov	r0, r6
   49762:	4903      	ldr	r1, [pc, #12]	; (49770 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   49764:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   49768:	f7ff be7e 	b.w	49468 <z_add_timeout>
}
   4976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   49770:	00049645 	.word	0x00049645

00049774 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   49774:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   49778:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   4977a:	4b29      	ldr	r3, [pc, #164]	; (49820 <z_impl_k_poll+0xac>)
   4977c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   4977e:	2301      	movs	r3, #1
   49780:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   49784:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   49788:	ea52 0305 	orrs.w	r3, r2, r5
{
   4978c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   4978e:	bf0c      	ite	eq
   49790:	2301      	moveq	r3, #1
   49792:	2300      	movne	r3, #0
   49794:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   49798:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   4979a:	f008 fb14 	bl	51dc6 <register_events>
   4979e:	4681      	mov	r9, r0
	__asm__ volatile(
   497a0:	f04f 0320 	mov.w	r3, #32
   497a4:	f3ef 8a11 	mrs	sl, BASEPRI
   497a8:	f383 8812 	msr	BASEPRI_MAX, r3
   497ac:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   497b0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   497b4:	b964      	cbnz	r4, 497d0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   497b6:	4601      	mov	r1, r0
   497b8:	4652      	mov	r2, sl
   497ba:	4640      	mov	r0, r8
   497bc:	f008 fbd4 	bl	51f68 <clear_event_registrations>
	__asm__ volatile(
   497c0:	f38a 8811 	msr	BASEPRI, sl
   497c4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   497c8:	4620      	mov	r0, r4
   497ca:	b002      	add	sp, #8
   497cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   497d0:	2300      	movs	r3, #0
   497d2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   497d6:	ea56 0305 	orrs.w	r3, r6, r5
   497da:	d106      	bne.n	497ea <z_impl_k_poll+0x76>
   497dc:	f38a 8811 	msr	BASEPRI, sl
   497e0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   497e4:	f06f 040a 	mvn.w	r4, #10
   497e8:	e7ee      	b.n	497c8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   497ea:	e9cd 6500 	strd	r6, r5, [sp]
   497ee:	4a0d      	ldr	r2, [pc, #52]	; (49824 <z_impl_k_poll+0xb0>)
   497f0:	480d      	ldr	r0, [pc, #52]	; (49828 <z_impl_k_poll+0xb4>)
   497f2:	4651      	mov	r1, sl
   497f4:	f7ff fc02 	bl	48ffc <z_pend_curr>
   497f8:	4604      	mov	r4, r0
	__asm__ volatile(
   497fa:	f04f 0320 	mov.w	r3, #32
   497fe:	f3ef 8511 	mrs	r5, BASEPRI
   49802:	f383 8812 	msr	BASEPRI_MAX, r3
   49806:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   4980a:	462a      	mov	r2, r5
   4980c:	4649      	mov	r1, r9
   4980e:	4640      	mov	r0, r8
   49810:	f008 fbaa 	bl	51f68 <clear_event_registrations>
	__asm__ volatile(
   49814:	f385 8811 	msr	BASEPRI, r5
   49818:	f3bf 8f6f 	isb	sy
	return swap_rc;
   4981c:	e7d4      	b.n	497c8 <z_impl_k_poll+0x54>
   4981e:	bf00      	nop
   49820:	20007530 	.word	0x20007530
   49824:	2000107c 	.word	0x2000107c
   49828:	200077a2 	.word	0x200077a2

0004982c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   4982c:	b538      	push	{r3, r4, r5, lr}
   4982e:	4603      	mov	r3, r0
	__asm__ volatile(
   49830:	f04f 0220 	mov.w	r2, #32
   49834:	f3ef 8511 	mrs	r5, BASEPRI
   49838:	f382 8812 	msr	BASEPRI_MAX, r2
   4983c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   49840:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   49842:	2101      	movs	r1, #1
   49844:	6081      	str	r1, [r0, #8]
	return list->head == list;
   49846:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   49848:	4283      	cmp	r3, r0
   4984a:	d106      	bne.n	4985a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   4984c:	f385 8811 	msr	BASEPRI, r5
   49850:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   49854:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   49856:	4620      	mov	r0, r4
   49858:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   4985a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4985e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   49860:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   49862:	2300      	movs	r3, #0
	node->prev = NULL;
   49864:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   49868:	f008 fb24 	bl	51eb4 <signal_poll_event>
	z_reschedule(&lock, key);
   4986c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   4986e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   49870:	4801      	ldr	r0, [pc, #4]	; (49878 <z_impl_k_poll_signal_raise+0x4c>)
   49872:	f7ff fa71 	bl	48d58 <z_reschedule>
	return rc;
   49876:	e7ee      	b.n	49856 <z_impl_k_poll_signal_raise+0x2a>
   49878:	200077a2 	.word	0x200077a2

0004987c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   4987c:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   4987e:	4601      	mov	r1, r0
   49880:	4801      	ldr	r0, [pc, #4]	; (49888 <k_aligned_alloc+0xc>)
   49882:	f008 bbbd 	b.w	52000 <z_heap_aligned_alloc>
   49886:	bf00      	nop
   49888:	20001340 	.word	0x20001340

0004988c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   4988c:	4b01      	ldr	r3, [pc, #4]	; (49894 <k_thread_system_pool_assign+0x8>)
   4988e:	6743      	str	r3, [r0, #116]	; 0x74
}
   49890:	4770      	bx	lr
   49892:	bf00      	nop
   49894:	20001340 	.word	0x20001340

00049898 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   49898:	b538      	push	{r3, r4, r5, lr}
   4989a:	4604      	mov	r4, r0
   4989c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   4989e:	f007 fece 	bl	5163e <k_is_in_isr>
   498a2:	b950      	cbnz	r0, 498ba <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   498a4:	4b06      	ldr	r3, [pc, #24]	; (498c0 <z_thread_aligned_alloc+0x28>)
   498a6:	689b      	ldr	r3, [r3, #8]
   498a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   498aa:	b143      	cbz	r3, 498be <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   498ac:	462a      	mov	r2, r5
   498ae:	4621      	mov	r1, r4
   498b0:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   498b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   498b6:	f008 bba3 	b.w	52000 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   498ba:	4b02      	ldr	r3, [pc, #8]	; (498c4 <z_thread_aligned_alloc+0x2c>)
   498bc:	e7f6      	b.n	498ac <z_thread_aligned_alloc+0x14>
}
   498be:	bd38      	pop	{r3, r4, r5, pc}
   498c0:	20007530 	.word	0x20007530
   498c4:	20001340 	.word	0x20001340

000498c8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   498c8:	4770      	bx	lr

000498ca <strlcpy>:
 *
 * Nathan Myers <ncm-nospam@cantrip.org>, 2003/06/03
 * Placed in the public domain.
 */

size_t strlcpy(char *dst, const char *src, size_t size) {
   498ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   498cc:	4606      	mov	r6, r0
    const size_t len = strlen(src);
   498ce:	4608      	mov	r0, r1
size_t strlcpy(char *dst, const char *src, size_t size) {
   498d0:	460f      	mov	r7, r1
   498d2:	4614      	mov	r4, r2
    const size_t len = strlen(src);
   498d4:	f002 feba 	bl	4c64c <strlen>
   498d8:	4605      	mov	r5, r0
    if (size != 0) {
   498da:	b154      	cbz	r4, 498f2 <strlcpy+0x28>
        memcpy(dst, src, (len > size - 1) ? size - 1 : len);
   498dc:	3c01      	subs	r4, #1
   498de:	4284      	cmp	r4, r0
   498e0:	4622      	mov	r2, r4
   498e2:	4639      	mov	r1, r7
   498e4:	bf28      	it	cs
   498e6:	4602      	movcs	r2, r0
   498e8:	4630      	mov	r0, r6
   498ea:	f002 fee4 	bl	4c6b6 <memcpy>
        dst[size - 1] = 0;
   498ee:	2300      	movs	r3, #0
   498f0:	5533      	strb	r3, [r6, r4]
    }
    return len;
}
   498f2:	4628      	mov	r0, r5
   498f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000498f6 <zmk_sensors_trigger_handler>:
static void zmk_sensors_trigger_handler(const struct device *dev, struct sensor_trigger *trigger) {
   498f6:	b530      	push	{r4, r5, lr}
   498f8:	4604      	mov	r4, r0
   498fa:	b085      	sub	sp, #20
   498fc:	460d      	mov	r5, r1
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   498fe:	6883      	ldr	r3, [r0, #8]
   49900:	2139      	movs	r1, #57	; 0x39
   49902:	68db      	ldr	r3, [r3, #12]
   49904:	4798      	blx	r3
    if (err) {
   49906:	b9e0      	cbnz	r0, 49942 <zmk_sensors_trigger_handler+0x4c>
    ZMK_EVENT_RAISE(new_zmk_sensor_event((struct zmk_sensor_event){
   49908:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   4990c:	f88d 3000 	strb.w	r3, [sp]
   49910:	9401      	str	r4, [sp, #4]
	return z_impl_k_uptime_ticks();
   49912:	f008 f9db 	bl	51ccc <z_impl_k_uptime_ticks>
   49916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4991a:	fba0 0302 	umull	r0, r3, r0, r2
   4991e:	fb02 3101 	mla	r1, r2, r1, r3
   49922:	0bc0      	lsrs	r0, r0, #15
   49924:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   49928:	0bc9      	lsrs	r1, r1, #15
   4992a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   4992e:	ab04      	add	r3, sp, #16
   49930:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   49934:	f7df fc98 	bl	29268 <new_zmk_sensor_event>
}
   49938:	b005      	add	sp, #20
   4993a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ZMK_EVENT_RAISE(new_zmk_sensor_event((struct zmk_sensor_event){
   4993e:	f000 b802 	b.w	49946 <zmk_event_manager_raise>
}
   49942:	b005      	add	sp, #20
   49944:	bd30      	pop	{r4, r5, pc}

00049946 <zmk_event_manager_raise>:
int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   49946:	2100      	movs	r1, #0
   49948:	f7df bb58 	b.w	28ffc <zmk_event_manager_handle_from>

0004994c <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   4994c:	2301      	movs	r3, #1
   4994e:	fa03 f101 	lsl.w	r1, r3, r1
   49952:	6903      	ldr	r3, [r0, #16]
   49954:	681b      	ldr	r3, [r3, #0]
   49956:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   49958:	bf18      	it	ne
   4995a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   4995e:	b112      	cbz	r2, 49966 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   49960:	6883      	ldr	r3, [r0, #8]
   49962:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   49964:	4718      	bx	r3
   49966:	6883      	ldr	r3, [r0, #8]
   49968:	691b      	ldr	r3, [r3, #16]
   4996a:	e7fb      	b.n	49964 <gpio_pin_set+0x18>

0004996c <ext_power_generic_get>:
    return data->status;
   4996c:	6903      	ldr	r3, [r0, #16]
}
   4996e:	7918      	ldrb	r0, [r3, #4]
   49970:	4770      	bx	lr

00049972 <ext_power_generic_enable>:
static int ext_power_generic_enable(const struct device *dev) {
   49972:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   49974:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   49976:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   49978:	7919      	ldrb	r1, [r3, #4]
   4997a:	6820      	ldr	r0, [r4, #0]
   4997c:	2201      	movs	r2, #1
   4997e:	f7ff ffe5 	bl	4994c <gpio_pin_set>
   49982:	b928      	cbnz	r0, 49990 <ext_power_generic_enable+0x1e>
    data->status = true;
   49984:	2301      	movs	r3, #1
   49986:	7123      	strb	r3, [r4, #4]
}
   49988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   4998c:	f7df bbfc 	b.w	29188 <ext_power_save_state>
}
   49990:	f06f 0004 	mvn.w	r0, #4
   49994:	bd10      	pop	{r4, pc}

00049996 <ext_power_generic_disable>:
static int ext_power_generic_disable(const struct device *dev) {
   49996:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   49998:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   4999a:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   4999c:	7919      	ldrb	r1, [r3, #4]
   4999e:	6820      	ldr	r0, [r4, #0]
   499a0:	2200      	movs	r2, #0
   499a2:	f7ff ffd3 	bl	4994c <gpio_pin_set>
   499a6:	b920      	cbnz	r0, 499b2 <ext_power_generic_disable+0x1c>
    data->status = false;
   499a8:	7120      	strb	r0, [r4, #4]
}
   499aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   499ae:	f7df bbeb 	b.w	29188 <ext_power_save_state>
}
   499b2:	f06f 0004 	mvn.w	r0, #4
   499b6:	bd10      	pop	{r4, pc}

000499b8 <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   499b8:	2000      	movs	r0, #0
   499ba:	4770      	bx	lr

000499bc <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   499bc:	b082      	sub	sp, #8
   499be:	b508      	push	{r3, lr}
   499c0:	a902      	add	r1, sp, #8
   499c2:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   499c6:	6800      	ldr	r0, [r0, #0]
   499c8:	f7fe fbaa 	bl	48120 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   499cc:	6843      	ldr	r3, [r0, #4]
   499ce:	6818      	ldr	r0, [r3, #0]
   499d0:	f7e1 fe80 	bl	2b6d4 <sys_reboot>

000499d4 <ext_power_enable>:
    if (api->enable == NULL) {
   499d4:	6883      	ldr	r3, [r0, #8]
   499d6:	681b      	ldr	r3, [r3, #0]
   499d8:	b103      	cbz	r3, 499dc <ext_power_enable+0x8>
    return api->enable(dev);
   499da:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   499dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   499e0:	4770      	bx	lr

000499e2 <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   499e2:	6883      	ldr	r3, [r0, #8]
   499e4:	685b      	ldr	r3, [r3, #4]
   499e6:	b103      	cbz	r3, 499ea <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   499e8:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   499ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   499ee:	4770      	bx	lr

000499f0 <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   499f0:	6883      	ldr	r3, [r0, #8]
   499f2:	689b      	ldr	r3, [r3, #8]
   499f4:	b103      	cbz	r3, 499f8 <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   499f6:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   499f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   499fc:	4770      	bx	lr

000499fe <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   499fe:	b082      	sub	sp, #8
   49a00:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   49a04:	2000      	movs	r0, #0
   49a06:	b002      	add	sp, #8
   49a08:	4770      	bx	lr

00049a0a <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   49a0a:	2000      	movs	r0, #0
   49a0c:	4770      	bx	lr

00049a0e <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
   49a0e:	2100      	movs	r1, #0
   49a10:	b538      	push	{r3, r4, r5, lr}
   49a12:	4605      	mov	r5, r0
    int ret = 0;
   49a14:	460c      	mov	r4, r1
        if (modifiers & (1 << i)) {
   49a16:	fa45 f301 	asr.w	r3, r5, r1
   49a1a:	07db      	lsls	r3, r3, #31
   49a1c:	b2c8      	uxtb	r0, r1
   49a1e:	d502      	bpl.n	49a26 <zmk_hid_register_mods+0x18>
            ret += zmk_hid_register_mod(i);
   49a20:	f7df fc9e 	bl	29360 <zmk_hid_register_mod>
   49a24:	4404      	add	r4, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   49a26:	3101      	adds	r1, #1
   49a28:	2908      	cmp	r1, #8
   49a2a:	d1f4      	bne.n	49a16 <zmk_hid_register_mods+0x8>
}
   49a2c:	4620      	mov	r0, r4
   49a2e:	bd38      	pop	{r3, r4, r5, pc}

00049a30 <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
   49a30:	b570      	push	{r4, r5, r6, lr}
   49a32:	2400      	movs	r4, #0
   49a34:	4606      	mov	r6, r0
    int ret = 0;
   49a36:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   49a38:	fa46 f304 	asr.w	r3, r6, r4
   49a3c:	07db      	lsls	r3, r3, #31
   49a3e:	b2e0      	uxtb	r0, r4
   49a40:	d502      	bpl.n	49a48 <zmk_hid_unregister_mods+0x18>
            ret += zmk_hid_unregister_mod(i);
   49a42:	f7df fca7 	bl	29394 <zmk_hid_unregister_mod>
   49a46:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   49a48:	3401      	adds	r4, #1
   49a4a:	2c08      	cmp	r4, #8
   49a4c:	d1f4      	bne.n	49a38 <zmk_hid_unregister_mods+0x8>
}
   49a4e:	4628      	mov	r0, r5
   49a50:	bd70      	pop	{r4, r5, r6, pc}

00049a52 <zmk_hid_press>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   49a52:	f3c0 4307 	ubfx	r3, r0, #16, #8
   49a56:	2b07      	cmp	r3, #7
   49a58:	d004      	beq.n	49a64 <zmk_hid_press+0x12>
   49a5a:	2b0c      	cmp	r3, #12
   49a5c:	d005      	beq.n	49a6a <zmk_hid_press+0x18>
}
   49a5e:	f06f 0015 	mvn.w	r0, #21
   49a62:	4770      	bx	lr
        return zmk_hid_keyboard_press(ZMK_HID_USAGE_ID(usage));
   49a64:	b280      	uxth	r0, r0
   49a66:	f7df bcd3 	b.w	29410 <zmk_hid_keyboard_press>
        return zmk_hid_consumer_press(ZMK_HID_USAGE_ID(usage));
   49a6a:	b280      	uxth	r0, r0
   49a6c:	f7df bd0c 	b.w	29488 <zmk_hid_consumer_press>

00049a70 <zmk_hid_release>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   49a70:	f3c0 4307 	ubfx	r3, r0, #16, #8
   49a74:	2b07      	cmp	r3, #7
   49a76:	d004      	beq.n	49a82 <zmk_hid_release+0x12>
   49a78:	2b0c      	cmp	r3, #12
   49a7a:	d005      	beq.n	49a88 <zmk_hid_release+0x18>
}
   49a7c:	f06f 0015 	mvn.w	r0, #21
   49a80:	4770      	bx	lr
        return zmk_hid_keyboard_release(ZMK_HID_USAGE_ID(usage));
   49a82:	b280      	uxth	r0, r0
   49a84:	f7df bcde 	b.w	29444 <zmk_hid_keyboard_release>
        return zmk_hid_consumer_release(ZMK_HID_USAGE_ID(usage));
   49a88:	b280      	uxth	r0, r0
   49a8a:	f7df bd11 	b.w	294b0 <zmk_hid_consumer_release>

00049a8e <behavior_key_press_init>:
#include <zmk/events/keycode_state_changed.h>
#include <zmk/behavior.h>

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_key_press_init(const struct device *dev) { return 0; };
   49a8e:	2000      	movs	r0, #0
   49a90:	4770      	bx	lr

00049a92 <zmk_keycode_state_changed_from_encoded>:
};

ZMK_EVENT_DECLARE(zmk_keycode_state_changed);

static inline struct zmk_keycode_state_changed_event *
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49a92:	b570      	push	{r4, r5, r6, lr}
   49a94:	b286      	uxth	r6, r0
    uint16_t id = ZMK_HID_USAGE_ID(encoded);
    uint8_t implicit_modifiers = 0x00;
    uint8_t explicit_modifiers = 0x00;

    if (!page) {
        page = HID_USAGE_KEY;
   49a96:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   49a9a:	f1a6 05e0 	sub.w	r5, r6, #224	; 0xe0
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
   49a9e:	f3c0 4407 	ubfx	r4, r0, #16, #8
        page = HID_USAGE_KEY;
   49aa2:	bf08      	it	eq
   49aa4:	2407      	moveq	r4, #7
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   49aa6:	2d07      	cmp	r5, #7
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49aa8:	b088      	sub	sp, #32
    }

    if (is_mod(page, id)) {
        explicit_modifiers = SELECT_MODS(encoded);
   49aaa:	ea4f 6010 	mov.w	r0, r0, lsr #24
   49aae:	d801      	bhi.n	49ab4 <zmk_keycode_state_changed_from_encoded+0x22>
    if (is_mod(page, id)) {
   49ab0:	2c07      	cmp	r4, #7
   49ab2:	d016      	beq.n	49ae2 <zmk_keycode_state_changed_from_encoded+0x50>
    uint8_t explicit_modifiers = 0x00;
   49ab4:	2500      	movs	r5, #0
    } else {
        implicit_modifiers = SELECT_MODS(encoded);
    }

    return new_zmk_keycode_state_changed(
        (struct zmk_keycode_state_changed){.usage_page = page,
   49ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    return new_zmk_keycode_state_changed(
   49aba:	ab08      	add	r3, sp, #32
        (struct zmk_keycode_state_changed){.usage_page = page,
   49abc:	f88d 0010 	strb.w	r0, [sp, #16]
   49ac0:	f88d 1012 	strb.w	r1, [sp, #18]
    return new_zmk_keycode_state_changed(
   49ac4:	e913 0003 	ldmdb	r3, {r0, r1}
   49ac8:	e88d 0003 	stmia.w	sp, {r0, r1}
        (struct zmk_keycode_state_changed){.usage_page = page,
   49acc:	f8ad 4008 	strh.w	r4, [sp, #8]
   49ad0:	9603      	str	r6, [sp, #12]
   49ad2:	f88d 5011 	strb.w	r5, [sp, #17]
    return new_zmk_keycode_state_changed(
   49ad6:	ab02      	add	r3, sp, #8
   49ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49ada:	f7e0 facf 	bl	2a07c <new_zmk_keycode_state_changed>
                                           .keycode = id,
                                           .implicit_modifiers = implicit_modifiers,
                                           .explicit_modifiers = explicit_modifiers,
                                           .state = pressed,
                                           .timestamp = timestamp});
}
   49ade:	b008      	add	sp, #32
   49ae0:	bd70      	pop	{r4, r5, r6, pc}
        explicit_modifiers = SELECT_MODS(encoded);
   49ae2:	4605      	mov	r5, r0
    uint8_t implicit_modifiers = 0x00;
   49ae4:	2000      	movs	r0, #0
   49ae6:	e7e6      	b.n	49ab6 <zmk_keycode_state_changed_from_encoded+0x24>

00049ae8 <on_keymap_binding_released>:
    return ZMK_EVENT_RAISE(
        zmk_keycode_state_changed_from_encoded(binding->param1, true, event.timestamp));
}

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49ae8:	b082      	sub	sp, #8
   49aea:	b508      	push	{r3, lr}
   49aec:	a902      	add	r1, sp, #8
   49aee:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
    return ZMK_EVENT_RAISE(
   49af2:	6840      	ldr	r0, [r0, #4]
   49af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   49af8:	2100      	movs	r1, #0
   49afa:	f7ff ffca 	bl	49a92 <zmk_keycode_state_changed_from_encoded>
        zmk_keycode_state_changed_from_encoded(binding->param1, false, event.timestamp));
}
   49afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49b02:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49b04:	f7ff bf1f 	b.w	49946 <zmk_event_manager_raise>

00049b08 <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49b08:	b082      	sub	sp, #8
   49b0a:	b508      	push	{r3, lr}
   49b0c:	a902      	add	r1, sp, #8
   49b0e:	e881 000c 	stmia.w	r1, {r2, r3}
    return ZMK_EVENT_RAISE(
   49b12:	6840      	ldr	r0, [r0, #4]
   49b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   49b18:	2101      	movs	r1, #1
   49b1a:	f7ff ffba 	bl	49a92 <zmk_keycode_state_changed_from_encoded>
}
   49b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49b22:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49b24:	f7ff bf0f 	b.w	49946 <zmk_event_manager_raise>

00049b28 <behavior_hold_tap_timer_work_handler>:
    if (hold_tap->work_is_cancelled) {
   49b28:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   49b2c:	b14b      	cbz	r3, 49b42 <behavior_hold_tap_timer_work_handler+0x1a>
    hold_tap->position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
   49b2e:	f242 730f 	movw	r3, #9999	; 0x270f
   49b32:	f840 3c20 	str.w	r3, [r0, #-32]
    hold_tap->status = STATUS_UNDECIDED;
   49b36:	2300      	movs	r3, #0
   49b38:	f800 3c08 	strb.w	r3, [r0, #-8]
    hold_tap->work_is_cancelled = false;
   49b3c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
   49b40:	4770      	bx	lr
        decide_hold_tap(hold_tap, HT_TIMER_EVENT);
   49b42:	2103      	movs	r1, #3
   49b44:	3820      	subs	r0, #32
   49b46:	f7df bd4b 	b.w	295e0 <decide_hold_tap>

00049b4a <release_binding.isra.0>:
static int release_binding(struct active_hold_tap *hold_tap) {
   49b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (hold_tap->config->retro_tap && hold_tap->status == STATUS_HOLD_TIMER) {
   49b4c:	69c1      	ldr	r1, [r0, #28]
   49b4e:	7e03      	ldrb	r3, [r0, #24]
   49b50:	7c8a      	ldrb	r2, [r1, #18]
static int release_binding(struct active_hold_tap *hold_tap) {
   49b52:	b093      	sub	sp, #76	; 0x4c
    if (hold_tap->config->retro_tap && hold_tap->status == STATUS_HOLD_TIMER) {
   49b54:	b10a      	cbz	r2, 49b5a <release_binding.isra.0+0x10>
   49b56:	2b03      	cmp	r3, #3
   49b58:	d033      	beq.n	49bc2 <release_binding.isra.0+0x78>
        .timestamp = hold_tap->timestamp,
   49b5a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    if (hold_tap->status == STATUS_HOLD_TIMER || hold_tap->status == STATUS_HOLD_INTERRUPT) {
   49b5e:	3b02      	subs	r3, #2
   49b60:	2b01      	cmp	r3, #1
        binding.behavior_dev = hold_tap->config->hold_behavior_dev;
   49b62:	bf94      	ite	ls
   49b64:	684b      	ldrls	r3, [r1, #4]
        binding.behavior_dev = hold_tap->config->tap_behavior_dev;
   49b66:	688b      	ldrhi	r3, [r1, #8]
        .position = hold_tap->position,
   49b68:	6805      	ldr	r5, [r0, #0]
    struct zmk_behavior_binding binding = {0};
   49b6a:	9507      	str	r5, [sp, #28]
    struct zmk_behavior_binding_event event = {
   49b6c:	f04f 0200 	mov.w	r2, #0
   49b70:	e9cd 6708 	strd	r6, r7, [sp, #32]
    struct zmk_behavior_binding binding = {0};
   49b74:	e9cd 2203 	strd	r2, r2, [sp, #12]
        binding.behavior_dev = hold_tap->config->hold_behavior_dev;
   49b78:	bf95      	itete	ls
   49b7a:	9303      	strls	r3, [sp, #12]
        binding.behavior_dev = hold_tap->config->tap_behavior_dev;
   49b7c:	9303      	strhi	r3, [sp, #12]
        binding.param1 = hold_tap->param_hold;
   49b7e:	6843      	ldrls	r3, [r0, #4]
        binding.param1 = hold_tap->param_tap;
   49b80:	6883      	ldrhi	r3, [r0, #8]
    struct zmk_behavior_binding_event event = {
   49b82:	9206      	str	r2, [sp, #24]
        binding.param1 = hold_tap->param_tap;
   49b84:	9304      	str	r3, [sp, #16]
   49b86:	ab06      	add	r3, sp, #24
    struct zmk_behavior_binding binding = {0};
   49b88:	9205      	str	r2, [sp, #20]
    return behavior_keymap_binding_released(&binding, event);
   49b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49b8c:	ac0a      	add	r4, sp, #40	; 0x28
   49b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   49b92:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   49b96:	950b      	str	r5, [sp, #44]	; 0x2c
   49b98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   49b9c:	ad0e      	add	r5, sp, #56	; 0x38
   49b9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49ba2:	9803      	ldr	r0, [sp, #12]
   49ba4:	f7fe fabc 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   49ba8:	b158      	cbz	r0, 49bc2 <release_binding.isra.0+0x78>
    if (api->binding_released == NULL) {
   49baa:	6883      	ldr	r3, [r0, #8]
   49bac:	68dc      	ldr	r4, [r3, #12]
   49bae:	b144      	cbz	r4, 49bc2 <release_binding.isra.0+0x78>
    return api->binding_released(binding, event);
   49bb0:	ab12      	add	r3, sp, #72	; 0x48
   49bb2:	e913 0003 	ldmdb	r3, {r0, r1}
   49bb6:	e88d 0003 	stmia.w	sp, {r0, r1}
   49bba:	a803      	add	r0, sp, #12
   49bbc:	e895 000c 	ldmia.w	r5, {r2, r3}
   49bc0:	47a0      	blx	r4
}
   49bc2:	b013      	add	sp, #76	; 0x4c
   49bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049bc6 <on_caps_word_binding_released>:
                                         struct zmk_behavior_binding_event event) {
   49bc6:	b082      	sub	sp, #8
   49bc8:	e88d 000c 	stmia.w	sp, {r2, r3}
}
   49bcc:	2000      	movs	r0, #0
   49bce:	b002      	add	sp, #8
   49bd0:	4770      	bx	lr

00049bd2 <on_caps_word_binding_pressed>:
                                        struct zmk_behavior_binding_event event) {
   49bd2:	b082      	sub	sp, #8
   49bd4:	b508      	push	{r3, lr}
   49bd6:	a902      	add	r1, sp, #8
   49bd8:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49bdc:	6800      	ldr	r0, [r0, #0]
   49bde:	f7fe fa9f 	bl	48120 <z_impl_device_get_binding>
    struct behavior_caps_word_data *data = dev->data;
   49be2:	6902      	ldr	r2, [r0, #16]
    if (data->active) {
   49be4:	7813      	ldrb	r3, [r2, #0]
   49be6:	f083 0301 	eor.w	r3, r3, #1
   49bea:	7013      	strb	r3, [r2, #0]
}
   49bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49bf0:	2000      	movs	r0, #0
   49bf2:	b002      	add	sp, #8
   49bf4:	4770      	bx	lr

00049bf6 <queue_macro>:

static void queue_macro(uint32_t position, const struct zmk_behavior_binding bindings[],
                        struct behavior_macro_trigger_state state) {
   49bf6:	b082      	sub	sp, #8
   49bf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   49bfc:	4688      	mov	r8, r1
   49bfe:	a90a      	add	r1, sp, #40	; 0x28
   49c00:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("Iterating macro bindings - starting: %d, count: %d", state.start_index, state.count);
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49c04:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
                        struct behavior_macro_trigger_state state) {
   49c08:	4605      	mov	r5, r0
   49c0a:	f04f 090c 	mov.w	r9, #12
        if (!handle_control_binding(&state, &bindings[i])) {
            switch (state.mode) {
            case MACRO_MODE_TAP:
                zmk_behavior_queue_add(position, bindings[i], true, state.tap_ms);
   49c0e:	f04f 0a01 	mov.w	sl, #1
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49c12:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   49c16:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   49c1a:	4413      	add	r3, r2
   49c1c:	429f      	cmp	r7, r3
   49c1e:	db04      	blt.n	49c2a <queue_macro+0x34>
                LOG_ERR("Unknown macro mode: %d", state.mode);
                break;
            }
        }
    }
}
   49c20:	b002      	add	sp, #8
   49c22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   49c26:	b002      	add	sp, #8
   49c28:	4770      	bx	lr
        if (!handle_control_binding(&state, &bindings[i])) {
   49c2a:	fb09 8407 	mla	r4, r9, r7, r8
   49c2e:	4621      	mov	r1, r4
   49c30:	a80a      	add	r0, sp, #40	; 0x28
   49c32:	f7df ff1f 	bl	29a74 <handle_control_binding>
   49c36:	b9b0      	cbnz	r0, 49c66 <queue_macro+0x70>
            switch (state.mode) {
   49c38:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   49c3c:	2e01      	cmp	r6, #1
   49c3e:	d00a      	beq.n	49c56 <queue_macro+0x60>
   49c40:	2e02      	cmp	r6, #2
   49c42:	d012      	beq.n	49c6a <queue_macro+0x74>
   49c44:	b97e      	cbnz	r6, 49c66 <queue_macro+0x70>
                zmk_behavior_queue_add(position, bindings[i], true, state.tap_ms);
   49c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   49c48:	e9cd a300 	strd	sl, r3, [sp]
   49c4c:	4628      	mov	r0, r5
   49c4e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   49c52:	f7df ffeb 	bl	29c2c <zmk_behavior_queue_add>
                zmk_behavior_queue_add(position, bindings[i], true, state.wait_ms);
   49c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   49c58:	e9cd 6300 	strd	r6, r3, [sp]
                zmk_behavior_queue_add(position, bindings[i], false, state.wait_ms);
   49c5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   49c60:	4628      	mov	r0, r5
   49c62:	f7df ffe3 	bl	29c2c <zmk_behavior_queue_add>
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49c66:	3701      	adds	r7, #1
   49c68:	e7d3      	b.n	49c12 <queue_macro+0x1c>
                zmk_behavior_queue_add(position, bindings[i], false, state.wait_ms);
   49c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   49c6c:	e9cd 0300 	strd	r0, r3, [sp]
   49c70:	e7f4      	b.n	49c5c <queue_macro+0x66>

00049c72 <on_macro_binding_pressed>:

static int on_macro_binding_pressed(struct zmk_behavior_binding *binding,
                                    struct zmk_behavior_binding_event event) {
   49c72:	b082      	sub	sp, #8
   49c74:	b530      	push	{r4, r5, lr}
   49c76:	b087      	sub	sp, #28
   49c78:	a90a      	add	r1, sp, #40	; 0x28
   49c7a:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49c7e:	6800      	ldr	r0, [r0, #0]
   49c80:	f7fe fa4e 	bl	48120 <z_impl_device_get_binding>
    const struct behavior_macro_config *cfg = dev->config;
    struct behavior_macro_state *state = dev->data;
   49c84:	6903      	ldr	r3, [r0, #16]
    const struct behavior_macro_config *cfg = dev->config;
   49c86:	6845      	ldr	r5, [r0, #4]
    struct behavior_macro_trigger_state trigger_state = {.mode = MACRO_MODE_TAP,
   49c88:	691b      	ldr	r3, [r3, #16]
   49c8a:	f8ad 3014 	strh.w	r3, [sp, #20]
   49c8e:	2400      	movs	r4, #0
   49c90:	f88d 4010 	strb.w	r4, [sp, #16]
   49c94:	f8ad 4012 	strh.w	r4, [sp, #18]
                                                         .tap_ms = cfg->default_tap_ms,
                                                         .wait_ms = cfg->default_wait_ms,
                                                         .start_index = 0,
                                                         .count = state->press_bindings_count};

    queue_macro(event.position, cfg->bindings, trigger_state);
   49c98:	ab06      	add	r3, sp, #24
   49c9a:	e913 0003 	ldmdb	r3, {r0, r1}
    struct behavior_macro_trigger_state trigger_state = {.mode = MACRO_MODE_TAP,
   49c9e:	682a      	ldr	r2, [r5, #0]
   49ca0:	9202      	str	r2, [sp, #8]
   49ca2:	686a      	ldr	r2, [r5, #4]
   49ca4:	9203      	str	r2, [sp, #12]
    queue_macro(event.position, cfg->bindings, trigger_state);
   49ca6:	e88d 0003 	stmia.w	sp, {r0, r1}
   49caa:	4613      	mov	r3, r2
   49cac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   49cae:	9a02      	ldr	r2, [sp, #8]
   49cb0:	f105 010c 	add.w	r1, r5, #12
   49cb4:	f7ff ff9f 	bl	49bf6 <queue_macro>

    return ZMK_BEHAVIOR_OPAQUE;
}
   49cb8:	4620      	mov	r0, r4
   49cba:	b007      	add	sp, #28
   49cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   49cc0:	b002      	add	sp, #8
   49cc2:	4770      	bx	lr

00049cc4 <on_macro_binding_released>:

static int on_macro_binding_released(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   49cc4:	b082      	sub	sp, #8
   49cc6:	b513      	push	{r0, r1, r4, lr}
   49cc8:	a904      	add	r1, sp, #16
   49cca:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49cce:	6800      	ldr	r0, [r0, #0]
   49cd0:	f7fe fa26 	bl	48120 <z_impl_device_get_binding>
    const struct behavior_macro_config *cfg = dev->config;
    struct behavior_macro_state *state = dev->data;

    queue_macro(event.position, cfg->bindings, state->release_state);
   49cd4:	6903      	ldr	r3, [r0, #16]
   49cd6:	6844      	ldr	r4, [r0, #4]
   49cd8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   49cdc:	e88d 0003 	stmia.w	sp, {r0, r1}
   49ce0:	9805      	ldr	r0, [sp, #20]
   49ce2:	cb0c      	ldmia	r3, {r2, r3}
   49ce4:	f104 010c 	add.w	r1, r4, #12
   49ce8:	f7ff ff85 	bl	49bf6 <queue_macro>

    return ZMK_BEHAVIOR_OPAQUE;
}
   49cec:	2000      	movs	r0, #0
   49cee:	b002      	add	sp, #8
   49cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   49cf4:	b002      	add	sp, #8
   49cf6:	4770      	bx	lr

00049cf8 <behavior_mo_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_mo_config {};
struct behavior_mo_data {};

static int behavior_mo_init(const struct device *dev) { return 0; };
   49cf8:	2000      	movs	r0, #0
   49cfa:	4770      	bx	lr

00049cfc <mo_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_activate(binding->param1);
}

static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49cfc:	b082      	sub	sp, #8
   49cfe:	e88d 000c 	stmia.w	sp, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_deactivate(binding->param1);
   49d02:	7900      	ldrb	r0, [r0, #4]
}
   49d04:	b002      	add	sp, #8
    return zmk_keymap_layer_deactivate(binding->param1);
   49d06:	f000 b960 	b.w	49fca <zmk_keymap_layer_deactivate>

00049d0a <mo_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49d0a:	b082      	sub	sp, #8
   49d0c:	e88d 000c 	stmia.w	sp, {r2, r3}
    return zmk_keymap_layer_activate(binding->param1);
   49d10:	7900      	ldrb	r0, [r0, #4]
}
   49d12:	b002      	add	sp, #8
    return zmk_keymap_layer_activate(binding->param1);
   49d14:	f000 b956 	b.w	49fc4 <zmk_keymap_layer_activate>

00049d18 <behavior_mod_morph_init>:
static const struct behavior_driver_api behavior_mod_morph_driver_api = {
    .binding_pressed = on_mod_morph_binding_pressed,
    .binding_released = on_mod_morph_binding_released,
};

static int behavior_mod_morph_init(const struct device *dev) { return 0; }
   49d18:	2000      	movs	r0, #0
   49d1a:	4770      	bx	lr

00049d1c <on_mod_morph_binding_pressed>:
                                        struct zmk_behavior_binding_event event) {
   49d1c:	b082      	sub	sp, #8
   49d1e:	b570      	push	{r4, r5, r6, lr}
   49d20:	b088      	sub	sp, #32
   49d22:	a90c      	add	r1, sp, #48	; 0x30
   49d24:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49d28:	6800      	ldr	r0, [r0, #0]
   49d2a:	f7fe f9f9 	bl	48120 <z_impl_device_get_binding>
    struct behavior_mod_morph_data *data = dev->data;
   49d2e:	6905      	ldr	r5, [r0, #16]
    const struct behavior_mod_morph_config *cfg = dev->config;
   49d30:	6844      	ldr	r4, [r0, #4]
    if (data->pressed_binding != NULL) {
   49d32:	682b      	ldr	r3, [r5, #0]
   49d34:	bb6b      	cbnz	r3, 49d92 <on_mod_morph_binding_pressed+0x76>
    if (zmk_hid_get_explicit_mods() & cfg->mods) {
   49d36:	f7df fb0d 	bl	29354 <zmk_hid_get_explicit_mods>
   49d3a:	7e23      	ldrb	r3, [r4, #24]
   49d3c:	4218      	tst	r0, r3
        data->pressed_binding = (struct zmk_behavior_binding *)&cfg->morph_binding;
   49d3e:	ab0c      	add	r3, sp, #48	; 0x30
   49d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49d42:	bf18      	it	ne
   49d44:	340c      	addne	r4, #12
   49d46:	602c      	str	r4, [r5, #0]
    return behavior_keymap_binding_pressed(data->pressed_binding, event);
   49d48:	466d      	mov	r5, sp
   49d4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   49d4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   49d52:	ae04      	add	r6, sp, #16
   49d54:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49d58:	6820      	ldr	r0, [r4, #0]
   49d5a:	f7fe f9e1 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   49d5e:	b188      	cbz	r0, 49d84 <on_mod_morph_binding_pressed+0x68>
    if (api->binding_pressed == NULL) {
   49d60:	6883      	ldr	r3, [r0, #8]
   49d62:	689d      	ldr	r5, [r3, #8]
   49d64:	b1ad      	cbz	r5, 49d92 <on_mod_morph_binding_pressed+0x76>
    return api->binding_pressed(binding, event);
   49d66:	aa08      	add	r2, sp, #32
   49d68:	e912 0003 	ldmdb	r2, {r0, r1}
   49d6c:	ab0e      	add	r3, sp, #56	; 0x38
   49d6e:	e883 0003 	stmia.w	r3, {r0, r1}
   49d72:	e896 000c 	ldmia.w	r6, {r2, r3}
   49d76:	4620      	mov	r0, r4
   49d78:	4629      	mov	r1, r5
}
   49d7a:	b008      	add	sp, #32
   49d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49d80:	b002      	add	sp, #8
   49d82:	4708      	bx	r1
        return -EINVAL;
   49d84:	f06f 0015 	mvn.w	r0, #21
   49d88:	b008      	add	sp, #32
   49d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49d8e:	b002      	add	sp, #8
   49d90:	4770      	bx	lr
        return -ENOTSUP;
   49d92:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49d96:	e7f7      	b.n	49d88 <on_mod_morph_binding_pressed+0x6c>

00049d98 <on_mod_morph_binding_released>:
                                         struct zmk_behavior_binding_event event) {
   49d98:	b082      	sub	sp, #8
   49d9a:	b570      	push	{r4, r5, r6, lr}
   49d9c:	b088      	sub	sp, #32
   49d9e:	a90c      	add	r1, sp, #48	; 0x30
   49da0:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49da4:	6800      	ldr	r0, [r0, #0]
   49da6:	f7fe f9bb 	bl	48120 <z_impl_device_get_binding>
    struct behavior_mod_morph_data *data = dev->data;
   49daa:	6903      	ldr	r3, [r0, #16]
    if (data->pressed_binding == NULL) {
   49dac:	681e      	ldr	r6, [r3, #0]
   49dae:	b346      	cbz	r6, 49e02 <on_mod_morph_binding_released+0x6a>
    data->pressed_binding = NULL;
   49db0:	2200      	movs	r2, #0
   49db2:	601a      	str	r2, [r3, #0]
    return behavior_keymap_binding_released(pressed_binding, event);
   49db4:	ab0c      	add	r3, sp, #48	; 0x30
   49db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49db8:	466c      	mov	r4, sp
   49dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   49dbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   49dc2:	ad04      	add	r5, sp, #16
   49dc4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49dc8:	6830      	ldr	r0, [r6, #0]
   49dca:	f7fe f9a9 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   49dce:	b188      	cbz	r0, 49df4 <on_mod_morph_binding_released+0x5c>
    if (api->binding_released == NULL) {
   49dd0:	6883      	ldr	r3, [r0, #8]
   49dd2:	68dc      	ldr	r4, [r3, #12]
   49dd4:	b1ac      	cbz	r4, 49e02 <on_mod_morph_binding_released+0x6a>
    return api->binding_released(binding, event);
   49dd6:	aa08      	add	r2, sp, #32
   49dd8:	e912 0003 	ldmdb	r2, {r0, r1}
   49ddc:	ab0e      	add	r3, sp, #56	; 0x38
   49dde:	e883 0003 	stmia.w	r3, {r0, r1}
   49de2:	e895 000c 	ldmia.w	r5, {r2, r3}
   49de6:	4630      	mov	r0, r6
   49de8:	4621      	mov	r1, r4
}
   49dea:	b008      	add	sp, #32
   49dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49df0:	b002      	add	sp, #8
   49df2:	4708      	bx	r1
        return -EINVAL;
   49df4:	f06f 0015 	mvn.w	r0, #21
   49df8:	b008      	add	sp, #32
   49dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49dfe:	b002      	add	sp, #8
   49e00:	4770      	bx	lr
        return -ENOTSUP;
   49e02:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49e06:	e7f7      	b.n	49df8 <on_mod_morph_binding_released+0x60>

00049e08 <behavior_out_init>:
    }

    return -ENOTSUP;
}

static int behavior_out_init(const struct device *dev) { return 0; }
   49e08:	2000      	movs	r0, #0
   49e0a:	4770      	bx	lr

00049e0c <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49e0c:	b082      	sub	sp, #8
   49e0e:	e88d 000c 	stmia.w	sp, {r2, r3}
    switch (binding->param1) {
   49e12:	6843      	ldr	r3, [r0, #4]
   49e14:	2b01      	cmp	r3, #1
   49e16:	d005      	beq.n	49e24 <on_keymap_binding_pressed+0x18>
   49e18:	2b02      	cmp	r3, #2
   49e1a:	d007      	beq.n	49e2c <on_keymap_binding_pressed+0x20>
   49e1c:	b943      	cbnz	r3, 49e30 <on_keymap_binding_pressed+0x24>
}
   49e1e:	b002      	add	sp, #8
        return zmk_endpoints_toggle();
   49e20:	f7df bfe4 	b.w	29dec <zmk_endpoints_toggle>
        return zmk_endpoints_select(ZMK_ENDPOINT_USB);
   49e24:	2000      	movs	r0, #0
}
   49e26:	b002      	add	sp, #8
        return zmk_endpoints_select(ZMK_ENDPOINT_BLE);
   49e28:	f7df bfcc 	b.w	29dc4 <zmk_endpoints_select>
   49e2c:	2001      	movs	r0, #1
   49e2e:	e7fa      	b.n	49e26 <on_keymap_binding_pressed+0x1a>
}
   49e30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49e34:	b002      	add	sp, #8
   49e36:	4770      	bx	lr

00049e38 <behavior_to_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_to_init(const struct device *dev) { return 0; };
   49e38:	2000      	movs	r0, #0
   49e3a:	4770      	bx	lr

00049e3c <to_keymap_binding_released>:
    zmk_keymap_layer_to(binding->param1);
    return ZMK_BEHAVIOR_OPAQUE;
}

static int to_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49e3c:	b082      	sub	sp, #8
   49e3e:	e88d 000c 	stmia.w	sp, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return ZMK_BEHAVIOR_OPAQUE;
}
   49e42:	2000      	movs	r0, #0
   49e44:	b002      	add	sp, #8
   49e46:	4770      	bx	lr

00049e48 <to_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49e48:	b082      	sub	sp, #8
   49e4a:	b508      	push	{r3, lr}
    zmk_keymap_layer_to(binding->param1);
   49e4c:	7900      	ldrb	r0, [r0, #4]
                                     struct zmk_behavior_binding_event event) {
   49e4e:	a902      	add	r1, sp, #8
   49e50:	e881 000c 	stmia.w	r1, {r2, r3}
    zmk_keymap_layer_to(binding->param1);
   49e54:	f000 f8bc 	bl	49fd0 <zmk_keymap_layer_to>
}
   49e58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49e5c:	2000      	movs	r0, #0
   49e5e:	b002      	add	sp, #8
   49e60:	4770      	bx	lr

00049e62 <behavior_none_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_none_init(const struct device *dev) { return 0; };
   49e62:	2000      	movs	r0, #0
   49e64:	4770      	bx	lr

00049e66 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   49e66:	b082      	sub	sp, #8
   49e68:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   49e6c:	2000      	movs	r0, #0
   49e6e:	b002      	add	sp, #8
   49e70:	4770      	bx	lr

00049e72 <on_keymap_binding_released>:
   49e72:	b082      	sub	sp, #8
   49e74:	e88d 000c 	stmia.w	sp, {r2, r3}
   49e78:	2000      	movs	r0, #0
   49e7a:	b002      	add	sp, #8
   49e7c:	4770      	bx	lr

00049e7e <behavior_sensor_rotate_key_press_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_sensor_rotate_key_press_init(const struct device *dev) { return 0; };
   49e7e:	2000      	movs	r0, #0
   49e80:	4770      	bx	lr

00049e82 <zmk_keycode_state_changed_from_encoded>:
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49e82:	b570      	push	{r4, r5, r6, lr}
   49e84:	b286      	uxth	r6, r0
        page = HID_USAGE_KEY;
   49e86:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   49e8a:	f1a6 05e0 	sub.w	r5, r6, #224	; 0xe0
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
   49e8e:	f3c0 4407 	ubfx	r4, r0, #16, #8
        page = HID_USAGE_KEY;
   49e92:	bf08      	it	eq
   49e94:	2407      	moveq	r4, #7
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   49e96:	2d07      	cmp	r5, #7
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49e98:	b088      	sub	sp, #32
        explicit_modifiers = SELECT_MODS(encoded);
   49e9a:	ea4f 6010 	mov.w	r0, r0, lsr #24
   49e9e:	d801      	bhi.n	49ea4 <zmk_keycode_state_changed_from_encoded+0x22>
    if (is_mod(page, id)) {
   49ea0:	2c07      	cmp	r4, #7
   49ea2:	d016      	beq.n	49ed2 <zmk_keycode_state_changed_from_encoded+0x50>
    uint8_t explicit_modifiers = 0x00;
   49ea4:	2500      	movs	r5, #0
        (struct zmk_keycode_state_changed){.usage_page = page,
   49ea6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    return new_zmk_keycode_state_changed(
   49eaa:	ab08      	add	r3, sp, #32
        (struct zmk_keycode_state_changed){.usage_page = page,
   49eac:	f88d 0010 	strb.w	r0, [sp, #16]
   49eb0:	f88d 1012 	strb.w	r1, [sp, #18]
    return new_zmk_keycode_state_changed(
   49eb4:	e913 0003 	ldmdb	r3, {r0, r1}
   49eb8:	e88d 0003 	stmia.w	sp, {r0, r1}
        (struct zmk_keycode_state_changed){.usage_page = page,
   49ebc:	f8ad 4008 	strh.w	r4, [sp, #8]
   49ec0:	9603      	str	r6, [sp, #12]
   49ec2:	f88d 5011 	strb.w	r5, [sp, #17]
    return new_zmk_keycode_state_changed(
   49ec6:	ab02      	add	r3, sp, #8
   49ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49eca:	f7e0 f8d7 	bl	2a07c <new_zmk_keycode_state_changed>
}
   49ece:	b008      	add	sp, #32
   49ed0:	bd70      	pop	{r4, r5, r6, pc}
        explicit_modifiers = SELECT_MODS(encoded);
   49ed2:	4605      	mov	r5, r0
    uint8_t implicit_modifiers = 0x00;
   49ed4:	2000      	movs	r0, #0
   49ed6:	e7e6      	b.n	49ea6 <zmk_keycode_state_changed_from_encoded+0x24>

00049ed8 <on_sensor_binding_triggered>:

static int on_sensor_binding_triggered(struct zmk_behavior_binding *binding,
                                       const struct device *sensor, int64_t timestamp) {
   49ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   49eda:	4606      	mov	r6, r0
   49edc:	4615      	mov	r5, r2
   49ede:	4608      	mov	r0, r1
   49ee0:	461c      	mov	r4, r3
	return api->channel_get(dev, chan, val);
   49ee2:	688b      	ldr	r3, [r1, #8]
   49ee4:	466a      	mov	r2, sp
   49ee6:	691b      	ldr	r3, [r3, #16]
   49ee8:	2122      	movs	r1, #34	; 0x22
   49eea:	4798      	blx	r3
    uint32_t keycode;
    LOG_DBG("inc keycode 0x%02X dec keycode 0x%02X", binding->param1, binding->param2);

    err = sensor_channel_get(sensor, SENSOR_CHAN_ROTATION, &value);

    if (err) {
   49eec:	b9c8      	cbnz	r0, 49f22 <on_sensor_binding_triggered+0x4a>
        LOG_WRN("Failed to ge sensor rotation value: %d", err);
        return err;
    }

    switch (value.val1) {
   49eee:	9b00      	ldr	r3, [sp, #0]
   49ef0:	1c5a      	adds	r2, r3, #1
   49ef2:	d018      	beq.n	49f26 <on_sensor_binding_triggered+0x4e>
   49ef4:	2b01      	cmp	r3, #1
   49ef6:	d118      	bne.n	49f2a <on_sensor_binding_triggered+0x52>
    case 1:
        keycode = binding->param1;
   49ef8:	6876      	ldr	r6, [r6, #4]
        return -ENOTSUP;
    }

    LOG_DBG("SEND %d", keycode);

    ZMK_EVENT_RAISE(zmk_keycode_state_changed_from_encoded(keycode, true, timestamp));
   49efa:	462a      	mov	r2, r5
   49efc:	4623      	mov	r3, r4
   49efe:	2101      	movs	r1, #1
   49f00:	4630      	mov	r0, r6
   49f02:	f7ff ffbe 	bl	49e82 <zmk_keycode_state_changed_from_encoded>
   49f06:	f7ff fd1e 	bl	49946 <zmk_event_manager_raise>
	return z_impl_k_sleep(timeout);
   49f0a:	2100      	movs	r1, #0
   49f0c:	20a4      	movs	r0, #164	; 0xa4
   49f0e:	f7ff f9b3 	bl	49278 <z_impl_k_sleep>

    // TODO: Better way to do this?
    k_msleep(5);

    return ZMK_EVENT_RAISE(zmk_keycode_state_changed_from_encoded(keycode, false, timestamp));
   49f12:	462a      	mov	r2, r5
   49f14:	4623      	mov	r3, r4
   49f16:	2100      	movs	r1, #0
   49f18:	4630      	mov	r0, r6
   49f1a:	f7ff ffb2 	bl	49e82 <zmk_keycode_state_changed_from_encoded>
   49f1e:	f7ff fd12 	bl	49946 <zmk_event_manager_raise>
}
   49f22:	b002      	add	sp, #8
   49f24:	bd70      	pop	{r4, r5, r6, pc}
        keycode = binding->param2;
   49f26:	68b6      	ldr	r6, [r6, #8]
        break;
   49f28:	e7e7      	b.n	49efa <on_sensor_binding_triggered+0x22>
    switch (value.val1) {
   49f2a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    return ZMK_EVENT_RAISE(zmk_keycode_state_changed_from_encoded(keycode, false, timestamp));
   49f2e:	e7f8      	b.n	49f22 <on_sensor_binding_triggered+0x4a>

00049f30 <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
   49f30:	b508      	push	{r3, lr}
    update_current_endpoint();
   49f32:	f7df feff 	bl	29d34 <update_current_endpoint>
    return 0;
}
   49f36:	2000      	movs	r0, #0
   49f38:	bd08      	pop	{r3, pc}

00049f3a <zmk_endpoints_send_report>:
    switch (usage_page) {
   49f3a:	2807      	cmp	r0, #7
   49f3c:	d004      	beq.n	49f48 <zmk_endpoints_send_report+0xe>
   49f3e:	280c      	cmp	r0, #12
   49f40:	d004      	beq.n	49f4c <zmk_endpoints_send_report+0x12>
}
   49f42:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49f46:	4770      	bx	lr
        return send_keyboard_report();
   49f48:	f7df bea0 	b.w	29c8c <send_keyboard_report>
        return send_consumer_report();
   49f4c:	f7df beb6 	b.w	29cbc <send_consumer_report>

00049f50 <hid_listener>:
        }
    }
    return zmk_endpoints_send_report(ev->usage_page);
}

int hid_listener(const zmk_event_t *eh) {
   49f50:	b538      	push	{r3, r4, r5, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   49f52:	f7e0 f8af 	bl	2a0b4 <as_zmk_keycode_state_changed>
    if (ev) {
   49f56:	4604      	mov	r4, r0
   49f58:	b1e8      	cbz	r0, 49f96 <hid_listener+0x46>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49f5a:	8803      	ldrh	r3, [r0, #0]
   49f5c:	6840      	ldr	r0, [r0, #4]
   49f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        if (ev->state) {
   49f62:	7aa3      	ldrb	r3, [r4, #10]
   49f64:	b1cb      	cbz	r3, 49f9a <hid_listener+0x4a>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49f66:	f7ff fd74 	bl	49a52 <zmk_hid_press>
    if (err < 0) {
   49f6a:	2800      	cmp	r0, #0
   49f6c:	db13      	blt.n	49f96 <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_register_mods(ev->explicit_modifiers);
   49f6e:	7a60      	ldrb	r0, [r4, #9]
   49f70:	f7ff fd4d 	bl	49a0e <zmk_hid_register_mods>
   49f74:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
   49f76:	7a20      	ldrb	r0, [r4, #8]
   49f78:	f7df fa2e 	bl	293d8 <zmk_hid_implicit_modifiers_press>
    if (ev->usage_page != HID_USAGE_KEY &&
   49f7c:	8823      	ldrh	r3, [r4, #0]
   49f7e:	2b07      	cmp	r3, #7
   49f80:	d006      	beq.n	49f90 <hid_listener+0x40>
   49f82:	2d00      	cmp	r5, #0
   49f84:	dc01      	bgt.n	49f8a <hid_listener+0x3a>
        (explicit_mods_changed > 0 || implicit_mods_changed > 0)) {
   49f86:	2800      	cmp	r0, #0
   49f88:	dd02      	ble.n	49f90 <hid_listener+0x40>
        err = zmk_endpoints_send_report(HID_USAGE_KEY);
   49f8a:	2007      	movs	r0, #7
   49f8c:	f7ff ffd5 	bl	49f3a <zmk_endpoints_send_report>
    return zmk_endpoints_send_report(ev->usage_page);
   49f90:	8820      	ldrh	r0, [r4, #0]
   49f92:	f7ff ffd2 	bl	49f3a <zmk_endpoints_send_report>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
   49f96:	2000      	movs	r0, #0
   49f98:	bd38      	pop	{r3, r4, r5, pc}
    err = zmk_hid_release(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49f9a:	f7ff fd69 	bl	49a70 <zmk_hid_release>
    if (err < 0) {
   49f9e:	2800      	cmp	r0, #0
   49fa0:	dbf9      	blt.n	49f96 <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_unregister_mods(ev->explicit_modifiers);
   49fa2:	7a60      	ldrb	r0, [r4, #9]
   49fa4:	f7ff fd44 	bl	49a30 <zmk_hid_unregister_mods>
   49fa8:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_release();
   49faa:	f7df fa23 	bl	293f4 <zmk_hid_implicit_modifiers_release>
   49fae:	e7e5      	b.n	49f7c <hid_listener+0x2c>

00049fb0 <zmk_keymap_layer_active_with_state>:
bool zmk_keymap_layer_active_with_state(uint8_t layer, zmk_keymap_layers_state_t state_to_test) {
   49fb0:	4603      	mov	r3, r0
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
   49fb2:	2001      	movs	r0, #1
   49fb4:	fa00 f203 	lsl.w	r2, r0, r3
   49fb8:	438a      	bics	r2, r1
   49fba:	bf1c      	itt	ne
   49fbc:	fab3 f083 	clzne	r0, r3
   49fc0:	0940      	lsrne	r0, r0, #5
};
   49fc2:	4770      	bx	lr

00049fc4 <zmk_keymap_layer_activate>:
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   49fc4:	2101      	movs	r1, #1
   49fc6:	f7df bf27 	b.w	29e18 <set_layer_state>

00049fca <zmk_keymap_layer_deactivate>:
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   49fca:	2100      	movs	r1, #0
   49fcc:	f7df bf24 	b.w	29e18 <set_layer_state>

00049fd0 <zmk_keymap_layer_to>:
int zmk_keymap_layer_to(uint8_t layer) {
   49fd0:	b538      	push	{r3, r4, r5, lr}
   49fd2:	4605      	mov	r5, r0
    for (int i = ZMK_KEYMAP_LAYERS_LEN - 1; i >= 0; i--) {
   49fd4:	2409      	movs	r4, #9
        zmk_keymap_layer_deactivate(i);
   49fd6:	b2e0      	uxtb	r0, r4
   49fd8:	f7ff fff7 	bl	49fca <zmk_keymap_layer_deactivate>
    for (int i = ZMK_KEYMAP_LAYERS_LEN - 1; i >= 0; i--) {
   49fdc:	3c01      	subs	r4, #1
   49fde:	d2fa      	bcs.n	49fd6 <zmk_keymap_layer_to+0x6>
    zmk_keymap_layer_activate(layer);
   49fe0:	4628      	mov	r0, r5
   49fe2:	f7ff ffef 	bl	49fc4 <zmk_keymap_layer_activate>
}
   49fe6:	2000      	movs	r0, #0
   49fe8:	bd38      	pop	{r3, r4, r5, pc}

00049fea <invoke_locally>:
                   bool pressed) {
   49fea:	b082      	sub	sp, #8
   49fec:	b570      	push	{r4, r5, r6, lr}
   49fee:	b088      	sub	sp, #32
   49ff0:	a90c      	add	r1, sp, #48	; 0x30
   49ff2:	e881 000c 	stmia.w	r1, {r2, r3}
   49ff6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   49ffa:	4606      	mov	r6, r0
   49ffc:	466c      	mov	r4, sp
   49ffe:	ad04      	add	r5, sp, #16
    if (pressed) {
   4a000:	b1e3      	cbz	r3, 4a03c <invoke_locally+0x52>
        return behavior_keymap_binding_pressed(binding, event);
   4a002:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   4a004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   4a008:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4a00c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   4a010:	6830      	ldr	r0, [r6, #0]
   4a012:	f7fe f885 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   4a016:	b300      	cbz	r0, 4a05a <invoke_locally+0x70>
    if (api->binding_pressed == NULL) {
   4a018:	6883      	ldr	r3, [r0, #8]
   4a01a:	689c      	ldr	r4, [r3, #8]
    if (api->binding_released == NULL) {
   4a01c:	b324      	cbz	r4, 4a068 <invoke_locally+0x7e>
    return api->binding_released(binding, event);
   4a01e:	aa08      	add	r2, sp, #32
   4a020:	e912 0003 	ldmdb	r2, {r0, r1}
   4a024:	ab0e      	add	r3, sp, #56	; 0x38
   4a026:	e883 0003 	stmia.w	r3, {r0, r1}
   4a02a:	e895 000c 	ldmia.w	r5, {r2, r3}
   4a02e:	4630      	mov	r0, r6
   4a030:	4621      	mov	r1, r4
}
   4a032:	b008      	add	sp, #32
   4a034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   4a038:	b002      	add	sp, #8
   4a03a:	4708      	bx	r1
        return behavior_keymap_binding_released(binding, event);
   4a03c:	ab0c      	add	r3, sp, #48	; 0x30
   4a03e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4a040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   4a044:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4a048:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   4a04c:	6830      	ldr	r0, [r6, #0]
   4a04e:	f7fe f867 	bl	48120 <z_impl_device_get_binding>
    if (dev == NULL) {
   4a052:	b110      	cbz	r0, 4a05a <invoke_locally+0x70>
    if (api->binding_released == NULL) {
   4a054:	6883      	ldr	r3, [r0, #8]
   4a056:	68dc      	ldr	r4, [r3, #12]
   4a058:	e7e0      	b.n	4a01c <invoke_locally+0x32>
        return -EINVAL;
   4a05a:	f06f 0015 	mvn.w	r0, #21
}
   4a05e:	b008      	add	sp, #32
   4a060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   4a064:	b002      	add	sp, #8
   4a066:	4770      	bx	lr
        return -ENOTSUP;
   4a068:	f06f 0085 	mvn.w	r0, #133	; 0x85
        return behavior_keymap_binding_released(binding, event);
   4a06c:	e7f7      	b.n	4a05e <invoke_locally+0x74>

0004a06e <keymap_listener>:

#endif /* ZMK_KEYMAP_HAS_SENSORS */

int keymap_listener(const zmk_event_t *eh) {
   4a06e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4a070:	4604      	mov	r4, r0
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
   4a072:	f7df f8ef 	bl	29254 <as_zmk_position_state_changed>
   4a076:	4603      	mov	r3, r0
   4a078:	b150      	cbz	r0, 4a090 <keymap_listener+0x22>
        return zmk_keymap_position_state_changed(pos_ev->source, pos_ev->position, pos_ev->state,
   4a07a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   4a07e:	7a02      	ldrb	r2, [r0, #8]
   4a080:	7800      	ldrb	r0, [r0, #0]
   4a082:	e9cd 4500 	strd	r4, r5, [sp]
   4a086:	6859      	ldr	r1, [r3, #4]
   4a088:	f7df ff80 	bl	29f8c <zmk_keymap_position_state_changed>
                                           sensor_ev->timestamp);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */

    return -ENOTSUP;
}
   4a08c:	b003      	add	sp, #12
   4a08e:	bd30      	pop	{r4, r5, pc}
    if ((sensor_ev = as_zmk_sensor_event(eh)) != NULL) {
   4a090:	4620      	mov	r0, r4
   4a092:	f7df f8ff 	bl	29294 <as_zmk_sensor_event>
   4a096:	b140      	cbz	r0, 4a0aa <keymap_listener+0x3c>
        return zmk_keymap_sensor_triggered(sensor_ev->sensor_number, sensor_ev->sensor,
   4a098:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   4a09c:	6841      	ldr	r1, [r0, #4]
   4a09e:	7800      	ldrb	r0, [r0, #0]
}
   4a0a0:	b003      	add	sp, #12
   4a0a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return zmk_keymap_sensor_triggered(sensor_ev->sensor_number, sensor_ev->sensor,
   4a0a6:	f7df bf9b 	b.w	29fe0 <zmk_keymap_sensor_triggered>
    return -ENOTSUP;
   4a0aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4a0ae:	e7ed      	b.n	4a08c <keymap_listener+0x1e>

0004a0b0 <behavior_bt_init>:
    }

    return -ENOTSUP;
}

static int behavior_bt_init(const struct device *dev) { return 0; };
   4a0b0:	2000      	movs	r0, #0
   4a0b2:	4770      	bx	lr

0004a0b4 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   4a0b4:	b082      	sub	sp, #8
   4a0b6:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   4a0ba:	2000      	movs	r0, #0
   4a0bc:	b002      	add	sp, #8
   4a0be:	4770      	bx	lr

0004a0c0 <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   4a0c0:	b082      	sub	sp, #8
   4a0c2:	e88d 000c 	stmia.w	sp, {r2, r3}
    switch (binding->param1) {
   4a0c6:	6843      	ldr	r3, [r0, #4]
   4a0c8:	2b03      	cmp	r3, #3
   4a0ca:	d810      	bhi.n	4a0ee <on_keymap_binding_pressed+0x2e>
   4a0cc:	e8df f003 	tbb	[pc, r3]
   4a0d0:	0b080502 	.word	0x0b080502
}
   4a0d4:	b002      	add	sp, #8
        return zmk_ble_clear_bonds();
   4a0d6:	f7e0 ba3d 	b.w	2a554 <zmk_ble_clear_bonds>
}
   4a0da:	b002      	add	sp, #8
        return zmk_ble_prof_next();
   4a0dc:	f7e0 ba82 	b.w	2a5e4 <zmk_ble_prof_next>
}
   4a0e0:	b002      	add	sp, #8
        return zmk_ble_prof_prev();
   4a0e2:	f7e0 ba8d 	b.w	2a600 <zmk_ble_prof_prev>
        return zmk_ble_prof_select(binding->param2);
   4a0e6:	7a00      	ldrb	r0, [r0, #8]
}
   4a0e8:	b002      	add	sp, #8
        return zmk_ble_prof_select(binding->param2);
   4a0ea:	f7e0 ba5f 	b.w	2a5ac <zmk_ble_prof_select>
}
   4a0ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4a0f2:	b002      	add	sp, #8
   4a0f4:	4770      	bx	lr

0004a0f6 <raise_profile_changed_event_callback>:
    raise_profile_changed_event();
   4a0f6:	f7df bffd 	b.w	2a0f4 <raise_profile_changed_event>

0004a0fa <auth_cancel>:
static void auth_cancel(struct bt_conn *conn) {
   4a0fa:	b500      	push	{lr}
   4a0fc:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4a0fe:	f003 fbea 	bl	4d8d6 <bt_conn_get_dst>
   4a102:	4669      	mov	r1, sp
   4a104:	f7e0 f818 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
}
   4a108:	b009      	add	sp, #36	; 0x24
   4a10a:	f85d fb04 	ldr.w	pc, [sp], #4

0004a10e <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   4a10e:	b500      	push	{lr}
   4a110:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4a112:	f003 fbe0 	bl	4d8d6 <bt_conn_get_dst>
   4a116:	4669      	mov	r1, sp
   4a118:	f7e0 f80e 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
}
   4a11c:	b009      	add	sp, #36	; 0x24
   4a11e:	f85d fb04 	ldr.w	pc, [sp], #4

0004a122 <le_param_updated>:
                             uint16_t timeout) {
   4a122:	b500      	push	{lr}
   4a124:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4a126:	f003 fbd6 	bl	4d8d6 <bt_conn_get_dst>
   4a12a:	4669      	mov	r1, sp
   4a12c:	f7e0 f804 	bl	2a138 <bt_addr_le_to_str.constprop.0.isra.0>
}
   4a130:	b009      	add	sp, #36	; 0x24
   4a132:	f85d fb04 	ldr.w	pc, [sp], #4

0004a136 <auth_pairing_accept>:
                                                const struct bt_conn_pairing_feat *const feat) {
   4a136:	b500      	push	{lr}
   4a138:	b089      	sub	sp, #36	; 0x24
    bt_conn_get_info(conn, &info);
   4a13a:	4669      	mov	r1, sp
   4a13c:	f7e6 fa8a 	bl	30654 <bt_conn_get_info>
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   4a140:	f89d 3001 	ldrb.w	r3, [sp, #1]
   4a144:	2b01      	cmp	r3, #1
   4a146:	d003      	beq.n	4a150 <auth_pairing_accept+0x1a>
    return BT_SECURITY_ERR_SUCCESS;
   4a148:	2000      	movs	r0, #0
};
   4a14a:	b009      	add	sp, #36	; 0x24
   4a14c:	f85d fb04 	ldr.w	pc, [sp], #4
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   4a150:	f7e0 f8ba 	bl	2a2c8 <zmk_ble_active_profile_is_open>
   4a154:	2800      	cmp	r0, #0
   4a156:	d1f7      	bne.n	4a148 <auth_pairing_accept+0x12>
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   4a158:	2006      	movs	r0, #6
   4a15a:	e7f6      	b.n	4a14a <auth_pairing_accept+0x14>

0004a15c <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
   4a15c:	f7e0 b91c 	b.w	2a398 <update_advertising>

0004a160 <input_ccc_changed>:
}
   4a160:	4770      	bx	lr

0004a162 <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   4a162:	b538      	push	{r3, r4, r5, lr}
   4a164:	460c      	mov	r4, r1
   4a166:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    uint8_t *value = attr->user_data;
   4a16a:	68e5      	ldr	r5, [r4, #12]
    if (offset + len > sizeof(ctrl_point)) {
   4a16c:	461c      	mov	r4, r3
   4a16e:	18c3      	adds	r3, r0, r3
   4a170:	2b01      	cmp	r3, #1
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   4a172:	4611      	mov	r1, r2
    if (offset + len > sizeof(ctrl_point)) {
   4a174:	dc05      	bgt.n	4a182 <write_ctrl_point+0x20>
    memcpy(value + offset, buf, len);
   4a176:	4622      	mov	r2, r4
   4a178:	4428      	add	r0, r5
   4a17a:	f002 fa9c 	bl	4c6b6 <memcpy>
}
   4a17e:	4620      	mov	r0, r4
   4a180:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4a182:	f06f 0406 	mvn.w	r4, #6
   4a186:	e7fa      	b.n	4a17e <write_ctrl_point+0x1c>

0004a188 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
   4a188:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a18a:	b085      	sub	sp, #20
   4a18c:	461f      	mov	r7, r3
   4a18e:	4604      	mov	r4, r0
   4a190:	460d      	mov	r5, r1
   4a192:	4616      	mov	r6, r2
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   4a194:	f7df f9ac 	bl	294f0 <zmk_hid_get_consumer_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4a198:	230c      	movs	r3, #12
   4a19a:	9302      	str	r3, [sp, #8]
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   4a19c:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4a19e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4a1a2:	9001      	str	r0, [sp, #4]
   4a1a4:	9300      	str	r3, [sp, #0]
   4a1a6:	4632      	mov	r2, r6
   4a1a8:	463b      	mov	r3, r7
   4a1aa:	4629      	mov	r1, r5
   4a1ac:	4620      	mov	r0, r4
   4a1ae:	f004 fede 	bl	4ef6e <bt_gatt_attr_read>
}
   4a1b2:	b005      	add	sp, #20
   4a1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004a1b6 <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
   4a1b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a1b8:	2402      	movs	r4, #2
   4a1ba:	9402      	str	r4, [sp, #8]
   4a1bc:	68cc      	ldr	r4, [r1, #12]
   4a1be:	9401      	str	r4, [sp, #4]
   4a1c0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   4a1c4:	9400      	str	r4, [sp, #0]
   4a1c6:	f004 fed2 	bl	4ef6e <bt_gatt_attr_read>
}
   4a1ca:	b004      	add	sp, #16
   4a1cc:	bd10      	pop	{r4, pc}

0004a1ce <read_hids_info>:
                              uint16_t len, uint16_t offset) {
   4a1ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a1d0:	2404      	movs	r4, #4
   4a1d2:	9402      	str	r4, [sp, #8]
   4a1d4:	68cc      	ldr	r4, [r1, #12]
   4a1d6:	9401      	str	r4, [sp, #4]
   4a1d8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   4a1dc:	9400      	str	r4, [sp, #0]
   4a1de:	f004 fec6 	bl	4ef6e <bt_gatt_attr_read>
}
   4a1e2:	b004      	add	sp, #16
   4a1e4:	bd10      	pop	{r4, pc}

0004a1e6 <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
   4a1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a1e8:	b085      	sub	sp, #20
   4a1ea:	461f      	mov	r7, r3
   4a1ec:	4604      	mov	r4, r0
   4a1ee:	460d      	mov	r5, r1
   4a1f0:	4616      	mov	r6, r2
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   4a1f2:	f7df f979 	bl	294e8 <zmk_hid_get_keyboard_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4a1f6:	2308      	movs	r3, #8
   4a1f8:	9302      	str	r3, [sp, #8]
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   4a1fa:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4a1fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4a200:	9001      	str	r0, [sp, #4]
   4a202:	9300      	str	r3, [sp, #0]
   4a204:	4632      	mov	r2, r6
   4a206:	463b      	mov	r3, r7
   4a208:	4629      	mov	r1, r5
   4a20a:	4620      	mov	r0, r4
   4a20c:	f004 feaf 	bl	4ef6e <bt_gatt_attr_read>
}
   4a210:	b005      	add	sp, #20
   4a212:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004a214 <destination_connection>:
struct bt_conn *destination_connection() {
   4a214:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   4a216:	f7e0 fa01 	bl	2a61c <zmk_ble_active_profile_addr>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   4a21a:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   4a21c:	2207      	movs	r2, #7
   4a21e:	4669      	mov	r1, sp
   4a220:	9400      	str	r4, [sp, #0]
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   4a222:	4605      	mov	r5, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   4a224:	f8cd 4003 	str.w	r4, [sp, #3]
   4a228:	f002 fa34 	bl	4c694 <memcmp>
   4a22c:	b120      	cbz	r0, 4a238 <destination_connection+0x24>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   4a22e:	4629      	mov	r1, r5
   4a230:	4620      	mov	r0, r4
   4a232:	f7e6 f9bd 	bl	305b0 <bt_conn_lookup_addr_le>
   4a236:	b900      	cbnz	r0, 4a23a <destination_connection+0x26>
        return NULL;
   4a238:	2000      	movs	r0, #0
}
   4a23a:	b003      	add	sp, #12
   4a23c:	bd30      	pop	{r4, r5, pc}

0004a23e <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   4a23e:	f7e0 bae7 	b.w	2a810 <zmk_battery_update.constprop.0>

0004a242 <release_peripheral_slot_for_conn>:
int release_peripheral_slot_for_conn(struct bt_conn *conn) {
   4a242:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   4a244:	f7e0 fc10 	bl	2aa68 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   4a248:	2800      	cmp	r0, #0
   4a24a:	db03      	blt.n	4a254 <release_peripheral_slot_for_conn+0x12>
}
   4a24c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return release_peripheral_slot(idx);
   4a250:	f7e0 bd62 	b.w	2ad18 <release_peripheral_slot>
}
   4a254:	bd08      	pop	{r3, pc}

0004a256 <split_central_disconnected>:
static void split_central_disconnected(struct bt_conn *conn, uint8_t reason) {
   4a256:	b510      	push	{r4, lr}
   4a258:	b088      	sub	sp, #32
   4a25a:	4604      	mov	r4, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4a25c:	f003 fb3b 	bl	4d8d6 <bt_conn_get_dst>
   4a260:	4669      	mov	r1, sp
   4a262:	f7e0 fb6f 	bl	2a944 <bt_addr_le_to_str.constprop.0.isra.0>
    err = release_peripheral_slot_for_conn(conn);
   4a266:	4620      	mov	r0, r4
   4a268:	f7ff ffeb 	bl	4a242 <release_peripheral_slot_for_conn>
    if (err < 0) {
   4a26c:	2800      	cmp	r0, #0
   4a26e:	db01      	blt.n	4a274 <split_central_disconnected+0x1e>
    start_scan();
   4a270:	f7e0 fb0e 	bl	2a890 <start_scan>
}
   4a274:	b008      	add	sp, #32
   4a276:	bd10      	pop	{r4, pc}

0004a278 <split_central_connected>:
static void split_central_connected(struct bt_conn *conn, uint8_t conn_err) {
   4a278:	b530      	push	{r4, r5, lr}
   4a27a:	b091      	sub	sp, #68	; 0x44
   4a27c:	4604      	mov	r4, r0
   4a27e:	460d      	mov	r5, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4a280:	f003 fb29 	bl	4d8d6 <bt_conn_get_dst>
   4a284:	4669      	mov	r1, sp
   4a286:	f7e0 fb5d 	bl	2a944 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   4a28a:	a908      	add	r1, sp, #32
   4a28c:	4620      	mov	r0, r4
   4a28e:	f7e6 f9e1 	bl	30654 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_CENTRAL) {
   4a292:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   4a296:	b92b      	cbnz	r3, 4a2a4 <split_central_connected+0x2c>
        release_peripheral_slot_for_conn(conn);
   4a298:	4620      	mov	r0, r4
    if (conn_err) {
   4a29a:	b12d      	cbz	r5, 4a2a8 <split_central_connected+0x30>
        release_peripheral_slot_for_conn(conn);
   4a29c:	f7ff ffd1 	bl	4a242 <release_peripheral_slot_for_conn>
        start_scan();
   4a2a0:	f7e0 faf6 	bl	2a890 <start_scan>
}
   4a2a4:	b011      	add	sp, #68	; 0x44
   4a2a6:	bd30      	pop	{r4, r5, pc}
    confirm_peripheral_slot_conn(conn);
   4a2a8:	f7e0 fe30 	bl	2af0c <confirm_peripheral_slot_conn>
    split_central_process_connection(conn);
   4a2ac:	4620      	mov	r0, r4
   4a2ae:	f7e0 fbf3 	bl	2aa98 <split_central_process_connection>
   4a2b2:	e7f7      	b.n	4a2a4 <split_central_connected+0x2c>

0004a2b4 <zmk_split_bt_invoke_behavior>:
                                 struct zmk_behavior_binding_event event, bool state) {
   4a2b4:	b082      	sub	sp, #8
   4a2b6:	b530      	push	{r4, r5, lr}
   4a2b8:	b08d      	sub	sp, #52	; 0x34
   4a2ba:	4604      	mov	r4, r0
   4a2bc:	a810      	add	r0, sp, #64	; 0x40
   4a2be:	e880 000c 	stmia.w	r0, {r2, r3}
    struct zmk_split_run_behavior_payload payload = {.data = {
   4a2c2:	2300      	movs	r3, #0
   4a2c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
   4a2c8:	f8cd 3017 	str.w	r3, [sp, #23]
   4a2cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   4a2ce:	f88d 3008 	strb.w	r3, [sp, #8]
   4a2d2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   4a2d6:	f88d 3009 	strb.w	r3, [sp, #9]
   4a2da:	684b      	ldr	r3, [r1, #4]
   4a2dc:	f8cd 300a 	str.w	r3, [sp, #10]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   4a2e0:	2209      	movs	r2, #9
    struct zmk_split_run_behavior_payload payload = {.data = {
   4a2e2:	688b      	ldr	r3, [r1, #8]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   4a2e4:	6809      	ldr	r1, [r1, #0]
    struct zmk_split_run_behavior_payload payload = {.data = {
   4a2e6:	f8cd 300e 	str.w	r3, [sp, #14]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   4a2ea:	f10d 0012 	add.w	r0, sp, #18
   4a2ee:	f7ff faec 	bl	498ca <strlcpy>
    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
   4a2f2:	ad06      	add	r5, sp, #24
   4a2f4:	f88d 401c 	strb.w	r4, [sp, #28]
   4a2f8:	aa02      	add	r2, sp, #8
   4a2fa:	f10d 031d 	add.w	r3, sp, #29
   4a2fe:	4614      	mov	r4, r2
   4a300:	cc03      	ldmia	r4!, {r0, r1}
   4a302:	42ac      	cmp	r4, r5
   4a304:	6018      	str	r0, [r3, #0]
   4a306:	6059      	str	r1, [r3, #4]
   4a308:	4622      	mov	r2, r4
   4a30a:	f103 0308 	add.w	r3, r3, #8
   4a30e:	d1f6      	bne.n	4a2fe <zmk_split_bt_invoke_behavior+0x4a>
   4a310:	8821      	ldrh	r1, [r4, #0]
   4a312:	78a2      	ldrb	r2, [r4, #2]
   4a314:	709a      	strb	r2, [r3, #2]
   4a316:	8019      	strh	r1, [r3, #0]
    return split_bt_invoke_behavior_payload(wrapper);
   4a318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4a31a:	9300      	str	r3, [sp, #0]
   4a31c:	ab07      	add	r3, sp, #28
   4a31e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4a320:	f7e0 fae0 	bl	2a8e4 <split_bt_invoke_behavior_payload>
}
   4a324:	b00d      	add	sp, #52	; 0x34
   4a326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   4a32a:	b002      	add	sp, #8
   4a32c:	4770      	bx	lr

0004a32e <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   4a32e:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   4a330:	f7e0 fe16 	bl	2af60 <zmk_usb_get_conn_state>
   4a334:	f7de ffb8 	bl	292a8 <new_zmk_usb_conn_state_changed>
}
   4a338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   4a33c:	f7ff bb03 	b.w	49946 <zmk_event_manager_raise>

0004a340 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   4a340:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   4a342:	2364      	movs	r3, #100	; 0x64
{
   4a344:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   4a346:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   4a348:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   4a34a:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   4a34e:	b111      	cbz	r1, 4a356 <u8_to_dec+0x16>
   4a350:	3d01      	subs	r5, #1
   4a352:	d101      	bne.n	4a358 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   4a354:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   4a356:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   4a358:	429a      	cmp	r2, r3
		digit = value / divisor;
   4a35a:	fbb2 f7f3 	udiv	r7, r2, r3
   4a35e:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   4a360:	d202      	bcs.n	4a368 <u8_to_dec+0x28>
   4a362:	2b01      	cmp	r3, #1
   4a364:	d000      	beq.n	4a368 <u8_to_dec+0x28>
   4a366:	b130      	cbz	r0, 4a376 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   4a368:	3630      	adds	r6, #48	; 0x30
			buflen--;
   4a36a:	3901      	subs	r1, #1
			num_digits++;
   4a36c:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   4a36e:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   4a372:	b2c9      	uxtb	r1, r1
			num_digits++;
   4a374:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   4a376:	fb03 2217 	mls	r2, r3, r7, r2
   4a37a:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   4a37c:	fbb3 f3fc 	udiv	r3, r3, ip
   4a380:	e7e5      	b.n	4a34e <u8_to_dec+0xe>

0004a382 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   4a382:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   4a386:	b2db      	uxtb	r3, r3
   4a388:	2b09      	cmp	r3, #9
   4a38a:	d802      	bhi.n	4a392 <char2hex+0x10>
		*x = c - '0';
   4a38c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   4a38e:	2000      	movs	r0, #0
   4a390:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   4a392:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   4a396:	2b05      	cmp	r3, #5
   4a398:	d802      	bhi.n	4a3a0 <char2hex+0x1e>
		*x = c - 'a' + 10;
   4a39a:	3857      	subs	r0, #87	; 0x57
   4a39c:	7008      	strb	r0, [r1, #0]
   4a39e:	e7f6      	b.n	4a38e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   4a3a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   4a3a4:	2b05      	cmp	r3, #5
   4a3a6:	d801      	bhi.n	4a3ac <char2hex+0x2a>
		*x = c - 'A' + 10;
   4a3a8:	3837      	subs	r0, #55	; 0x37
   4a3aa:	e7f7      	b.n	4a39c <char2hex+0x1a>
		return -EINVAL;
   4a3ac:	f06f 0015 	mvn.w	r0, #21
}
   4a3b0:	4770      	bx	lr

0004a3b2 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   4a3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4a3b4:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   4a3b6:	f001 0001 	and.w	r0, r1, #1
   4a3ba:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   4a3be:	429d      	cmp	r5, r3
   4a3c0:	ea4f 0651 	mov.w	r6, r1, lsr #1
   4a3c4:	d903      	bls.n	4a3ce <hex2bin+0x1c>
		return 0;
   4a3c6:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   4a3c8:	4628      	mov	r0, r5
   4a3ca:	b003      	add	sp, #12
   4a3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   4a3ce:	b158      	cbz	r0, 4a3e8 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   4a3d0:	7820      	ldrb	r0, [r4, #0]
   4a3d2:	f10d 0107 	add.w	r1, sp, #7
   4a3d6:	f7ff ffd4 	bl	4a382 <char2hex>
   4a3da:	2800      	cmp	r0, #0
   4a3dc:	dbf3      	blt.n	4a3c6 <hex2bin+0x14>
		buf[0] = dec;
   4a3de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   4a3e2:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   4a3e6:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   4a3e8:	3401      	adds	r4, #1
   4a3ea:	4416      	add	r6, r2
   4a3ec:	42b2      	cmp	r2, r6
   4a3ee:	d0eb      	beq.n	4a3c8 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   4a3f0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   4a3f4:	f10d 0107 	add.w	r1, sp, #7
   4a3f8:	f7ff ffc3 	bl	4a382 <char2hex>
   4a3fc:	2800      	cmp	r0, #0
   4a3fe:	dbe2      	blt.n	4a3c6 <hex2bin+0x14>
		buf[i] = dec << 4;
   4a400:	f89d 3007 	ldrb.w	r3, [sp, #7]
   4a404:	011b      	lsls	r3, r3, #4
   4a406:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   4a408:	f814 0b02 	ldrb.w	r0, [r4], #2
   4a40c:	f7ff ffb9 	bl	4a382 <char2hex>
   4a410:	2800      	cmp	r0, #0
   4a412:	dbd8      	blt.n	4a3c6 <hex2bin+0x14>
		buf[i] += dec;
   4a414:	7813      	ldrb	r3, [r2, #0]
   4a416:	f89d 1007 	ldrb.w	r1, [sp, #7]
   4a41a:	440b      	add	r3, r1
   4a41c:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   4a420:	e7e4      	b.n	4a3ec <hex2bin+0x3a>

0004a422 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   4a422:	4603      	mov	r3, r0
   4a424:	b140      	cbz	r0, 4a438 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4a426:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4a428:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   4a42c:	2a02      	cmp	r2, #2
   4a42e:	d006      	beq.n	4a43e <sys_notify_validate+0x1c>
   4a430:	2a03      	cmp	r2, #3
   4a432:	d004      	beq.n	4a43e <sys_notify_validate+0x1c>
   4a434:	2a01      	cmp	r2, #1
   4a436:	d005      	beq.n	4a444 <sys_notify_validate+0x22>
		return -EINVAL;
   4a438:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   4a43c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   4a43e:	681a      	ldr	r2, [r3, #0]
   4a440:	2a00      	cmp	r2, #0
   4a442:	d0f9      	beq.n	4a438 <sys_notify_validate+0x16>
		notify->result = 0;
   4a444:	2000      	movs	r0, #0
   4a446:	6098      	str	r0, [r3, #8]
   4a448:	4770      	bx	lr

0004a44a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4a44a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4a44c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   4a450:	2a02      	cmp	r2, #2
{
   4a452:	b510      	push	{r4, lr}
   4a454:	4603      	mov	r3, r0
	notify->result = res;
   4a456:	6081      	str	r1, [r0, #8]
	switch (method) {
   4a458:	d00a      	beq.n	4a470 <sys_notify_finalize+0x26>
   4a45a:	2a03      	cmp	r2, #3
   4a45c:	d10b      	bne.n	4a476 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   4a45e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   4a460:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   4a462:	2200      	movs	r2, #0
   4a464:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   4a466:	b108      	cbz	r0, 4a46c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   4a468:	f7ff f9e0 	bl	4982c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   4a46c:	4620      	mov	r0, r4
   4a46e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   4a470:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   4a472:	2400      	movs	r4, #0
		break;
   4a474:	e7f5      	b.n	4a462 <sys_notify_finalize+0x18>
	switch (method) {
   4a476:	2400      	movs	r4, #0
   4a478:	4620      	mov	r0, r4
   4a47a:	e7f2      	b.n	4a462 <sys_notify_finalize+0x18>

0004a47c <arch_printk_char_out>:
}
   4a47c:	2000      	movs	r0, #0
   4a47e:	4770      	bx	lr

0004a480 <str_out>:
{
   4a480:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   4a482:	688a      	ldr	r2, [r1, #8]
   4a484:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   4a486:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   4a488:	b114      	cbz	r4, 4a490 <str_out+0x10>
   4a48a:	684b      	ldr	r3, [r1, #4]
   4a48c:	4293      	cmp	r3, r2
   4a48e:	dc01      	bgt.n	4a494 <str_out+0x14>
		ctx->count++;
   4a490:	608d      	str	r5, [r1, #8]
}
   4a492:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   4a494:	3b01      	subs	r3, #1
   4a496:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   4a498:	bf08      	it	eq
   4a49a:	2200      	moveq	r2, #0
   4a49c:	608d      	str	r5, [r1, #8]
   4a49e:	bf0c      	ite	eq
   4a4a0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   4a4a2:	54a0      	strbne	r0, [r4, r2]
   4a4a4:	e7f5      	b.n	4a492 <str_out+0x12>

0004a4a6 <printk>:
{
   4a4a6:	b40f      	push	{r0, r1, r2, r3}
   4a4a8:	b507      	push	{r0, r1, r2, lr}
   4a4aa:	a904      	add	r1, sp, #16
   4a4ac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   4a4b0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   4a4b2:	f7e0 fddf 	bl	2b074 <vprintk>
}
   4a4b6:	b003      	add	sp, #12
   4a4b8:	f85d eb04 	ldr.w	lr, [sp], #4
   4a4bc:	b004      	add	sp, #16
   4a4be:	4770      	bx	lr

0004a4c0 <snprintk>:
{
   4a4c0:	b40c      	push	{r2, r3}
   4a4c2:	b507      	push	{r0, r1, r2, lr}
   4a4c4:	ab04      	add	r3, sp, #16
   4a4c6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   4a4ca:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   4a4cc:	f7e0 fde0 	bl	2b090 <vsnprintk>
}
   4a4d0:	b003      	add	sp, #12
   4a4d2:	f85d eb04 	ldr.w	lr, [sp], #4
   4a4d6:	b002      	add	sp, #8
   4a4d8:	4770      	bx	lr

0004a4da <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4a4da:	b510      	push	{r4, lr}
   4a4dc:	4603      	mov	r3, r0
	return list->head;
   4a4de:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4a4e0:	2200      	movs	r2, #0
   4a4e2:	b158      	cbz	r0, 4a4fc <sys_slist_find_and_remove+0x22>
   4a4e4:	4288      	cmp	r0, r1
   4a4e6:	d10f      	bne.n	4a508 <sys_slist_find_and_remove+0x2e>
	return node->next;
   4a4e8:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   4a4ea:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   4a4ec:	b93a      	cbnz	r2, 4a4fe <sys_slist_find_and_remove+0x24>
   4a4ee:	42a1      	cmp	r1, r4
	list->head = node;
   4a4f0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   4a4f2:	d100      	bne.n	4a4f6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   4a4f4:	6058      	str	r0, [r3, #4]
	parent->next = child;
   4a4f6:	2300      	movs	r3, #0
   4a4f8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4a4fa:	2001      	movs	r0, #1
   4a4fc:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4a4fe:	42a1      	cmp	r1, r4
	parent->next = child;
   4a500:	6010      	str	r0, [r2, #0]
	list->tail = node;
   4a502:	bf08      	it	eq
   4a504:	605a      	streq	r2, [r3, #4]
}
   4a506:	e7f6      	b.n	4a4f6 <sys_slist_find_and_remove+0x1c>
	return node->next;
   4a508:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4a50a:	6800      	ldr	r0, [r0, #0]
   4a50c:	e7e9      	b.n	4a4e2 <sys_slist_find_and_remove+0x8>

0004a50e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a50e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   4a510:	f013 0307 	ands.w	r3, r3, #7
   4a514:	d105      	bne.n	4a522 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   4a516:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   4a518:	2b00      	cmp	r3, #0
   4a51a:	bf0c      	ite	eq
   4a51c:	2000      	moveq	r0, #0
   4a51e:	2003      	movne	r0, #3
   4a520:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   4a522:	2b02      	cmp	r3, #2
   4a524:	d105      	bne.n	4a532 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   4a526:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   4a528:	2b00      	cmp	r3, #0
   4a52a:	bf14      	ite	ne
   4a52c:	2000      	movne	r0, #0
   4a52e:	2004      	moveq	r0, #4
   4a530:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   4a532:	2b01      	cmp	r3, #1
   4a534:	d105      	bne.n	4a542 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   4a536:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   4a538:	2b00      	cmp	r3, #0
   4a53a:	bf0c      	ite	eq
   4a53c:	2000      	moveq	r0, #0
   4a53e:	2005      	movne	r0, #5
   4a540:	4770      	bx	lr
	int evt = EVT_NOP;
   4a542:	2000      	movs	r0, #0
}
   4a544:	4770      	bx	lr

0004a546 <notify_one>:
{
   4a546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4a54a:	460d      	mov	r5, r1
   4a54c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4a54e:	4619      	mov	r1, r3
   4a550:	1d28      	adds	r0, r5, #4
{
   4a552:	4690      	mov	r8, r2
   4a554:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4a556:	f7ff ff78 	bl	4a44a <sys_notify_finalize>
	if (cb) {
   4a55a:	4604      	mov	r4, r0
   4a55c:	b138      	cbz	r0, 4a56e <notify_one+0x28>
		cb(mgr, cli, state, res);
   4a55e:	4633      	mov	r3, r6
   4a560:	4642      	mov	r2, r8
   4a562:	4629      	mov	r1, r5
   4a564:	4638      	mov	r0, r7
   4a566:	46a4      	mov	ip, r4
}
   4a568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   4a56c:	4760      	bx	ip
}
   4a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004a572 <transition_complete>:
{
   4a572:	b410      	push	{r4}
	__asm__ volatile(
   4a574:	f04f 0420 	mov.w	r4, #32
   4a578:	f3ef 8211 	mrs	r2, BASEPRI
   4a57c:	f384 8812 	msr	BASEPRI_MAX, r4
   4a580:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   4a584:	6141      	str	r1, [r0, #20]
}
   4a586:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   4a588:	2101      	movs	r1, #1
   4a58a:	f7e0 bd95 	b.w	2b0b8 <process_event>

0004a58e <validate_args>:
{
   4a58e:	b510      	push	{r4, lr}
   4a590:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   4a592:	b140      	cbz	r0, 4a5a6 <validate_args+0x18>
   4a594:	b139      	cbz	r1, 4a5a6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   4a596:	1d08      	adds	r0, r1, #4
   4a598:	f7ff ff43 	bl	4a422 <sys_notify_validate>
	if ((rv == 0)
   4a59c:	b928      	cbnz	r0, 4a5aa <validate_args+0x1c>
	    && ((cli->notify.flags
   4a59e:	68a3      	ldr	r3, [r4, #8]
   4a5a0:	f033 0303 	bics.w	r3, r3, #3
   4a5a4:	d001      	beq.n	4a5aa <validate_args+0x1c>
		rv = -EINVAL;
   4a5a6:	f06f 0015 	mvn.w	r0, #21
}
   4a5aa:	bd10      	pop	{r4, pc}

0004a5ac <onoff_manager_init>:
{
   4a5ac:	b538      	push	{r3, r4, r5, lr}
   4a5ae:	460c      	mov	r4, r1
	if ((mgr == NULL)
   4a5b0:	4605      	mov	r5, r0
   4a5b2:	b158      	cbz	r0, 4a5cc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   4a5b4:	b151      	cbz	r1, 4a5cc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   4a5b6:	680b      	ldr	r3, [r1, #0]
   4a5b8:	b143      	cbz	r3, 4a5cc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   4a5ba:	684b      	ldr	r3, [r1, #4]
   4a5bc:	b133      	cbz	r3, 4a5cc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   4a5be:	221c      	movs	r2, #28
   4a5c0:	2100      	movs	r1, #0
   4a5c2:	f002 f883 	bl	4c6cc <memset>
   4a5c6:	612c      	str	r4, [r5, #16]
	return 0;
   4a5c8:	2000      	movs	r0, #0
}
   4a5ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4a5cc:	f06f 0015 	mvn.w	r0, #21
   4a5d0:	e7fb      	b.n	4a5ca <onoff_manager_init+0x1e>

0004a5d2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   4a5d2:	b570      	push	{r4, r5, r6, lr}
   4a5d4:	4604      	mov	r4, r0
   4a5d6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   4a5d8:	f7ff ffd9 	bl	4a58e <validate_args>

	if (rv < 0) {
   4a5dc:	1e05      	subs	r5, r0, #0
   4a5de:	db31      	blt.n	4a644 <onoff_request+0x72>
   4a5e0:	f04f 0320 	mov.w	r3, #32
   4a5e4:	f3ef 8111 	mrs	r1, BASEPRI
   4a5e8:	f383 8812 	msr	BASEPRI_MAX, r3
   4a5ec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   4a5f0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a5f2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   4a5f4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   4a5f8:	42ab      	cmp	r3, r5
   4a5fa:	f000 0207 	and.w	r2, r0, #7
   4a5fe:	d02e      	beq.n	4a65e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   4a600:	2a02      	cmp	r2, #2
   4a602:	d10e      	bne.n	4a622 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   4a604:	3301      	adds	r3, #1
   4a606:	8363      	strh	r3, [r4, #26]
	rv = state;
   4a608:	4615      	mov	r5, r2
		notify = true;
   4a60a:	2301      	movs	r3, #1
	__asm__ volatile(
   4a60c:	f381 8811 	msr	BASEPRI, r1
   4a610:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   4a614:	b1b3      	cbz	r3, 4a644 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   4a616:	2300      	movs	r3, #0
   4a618:	4631      	mov	r1, r6
   4a61a:	4620      	mov	r0, r4
   4a61c:	f7ff ff93 	bl	4a546 <notify_one>
   4a620:	e010      	b.n	4a644 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   4a622:	0783      	lsls	r3, r0, #30
   4a624:	d001      	beq.n	4a62a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   4a626:	2a06      	cmp	r2, #6
   4a628:	d10e      	bne.n	4a648 <onoff_request+0x76>
	parent->next = child;
   4a62a:	2300      	movs	r3, #0
   4a62c:	6033      	str	r3, [r6, #0]
	return list->tail;
   4a62e:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   4a630:	b993      	cbnz	r3, 4a658 <onoff_request+0x86>
	list->head = node;
   4a632:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   4a636:	4615      	mov	r5, r2
   4a638:	b962      	cbnz	r2, 4a654 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   4a63a:	460a      	mov	r2, r1
   4a63c:	4620      	mov	r0, r4
   4a63e:	2102      	movs	r1, #2
   4a640:	f7e0 fd3a 	bl	2b0b8 <process_event>
		}
	}

	return rv;
}
   4a644:	4628      	mov	r0, r5
   4a646:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   4a648:	2a05      	cmp	r2, #5
   4a64a:	bf0c      	ite	eq
   4a64c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   4a650:	f06f 0504 	mvnne.w	r5, #4
   4a654:	2300      	movs	r3, #0
   4a656:	e7d9      	b.n	4a60c <onoff_request+0x3a>
	parent->next = child;
   4a658:	601e      	str	r6, [r3, #0]
	list->tail = node;
   4a65a:	6066      	str	r6, [r4, #4]
}
   4a65c:	e7eb      	b.n	4a636 <onoff_request+0x64>
		rv = -EAGAIN;
   4a65e:	f06f 050a 	mvn.w	r5, #10
   4a662:	e7f7      	b.n	4a654 <onoff_request+0x82>

0004a664 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   4a664:	b510      	push	{r4, lr}
	__asm__ volatile(
   4a666:	f04f 0320 	mov.w	r3, #32
   4a66a:	f3ef 8211 	mrs	r2, BASEPRI
   4a66e:	f383 8812 	msr	BASEPRI_MAX, r3
   4a672:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a676:	8b04      	ldrh	r4, [r0, #24]
   4a678:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   4a67c:	2c02      	cmp	r4, #2
   4a67e:	d00a      	beq.n	4a696 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   4a680:	2c01      	cmp	r4, #1
   4a682:	bf0c      	ite	eq
   4a684:	f06f 0004 	mvneq.w	r0, #4
   4a688:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   4a68c:	f382 8811 	msr	BASEPRI, r2
   4a690:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   4a694:	e008      	b.n	4a6a8 <onoff_release+0x44>
	mgr->refs -= 1U;
   4a696:	8b43      	ldrh	r3, [r0, #26]
   4a698:	3b01      	subs	r3, #1
   4a69a:	b29b      	uxth	r3, r3
   4a69c:	8343      	strh	r3, [r0, #26]
	if (stop) {
   4a69e:	b923      	cbnz	r3, 4a6aa <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   4a6a0:	4621      	mov	r1, r4
   4a6a2:	f7e0 fd09 	bl	2b0b8 <process_event>
	int rv = state;
   4a6a6:	4620      	mov	r0, r4
}
   4a6a8:	bd10      	pop	{r4, pc}
	int rv = state;
   4a6aa:	4620      	mov	r0, r4
   4a6ac:	e7ee      	b.n	4a68c <onoff_release+0x28>

0004a6ae <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   4a6ae:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   4a6b0:	b1b0      	cbz	r0, 4a6e0 <onoff_cancel+0x32>
   4a6b2:	b1a9      	cbz	r1, 4a6e0 <onoff_cancel+0x32>
	__asm__ volatile(
   4a6b4:	f04f 0220 	mov.w	r2, #32
   4a6b8:	f3ef 8511 	mrs	r5, BASEPRI
   4a6bc:	f382 8812 	msr	BASEPRI_MAX, r2
   4a6c0:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a6c4:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   4a6c6:	f7ff ff08 	bl	4a4da <sys_slist_find_and_remove>
   4a6ca:	b130      	cbz	r0, 4a6da <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   4a6cc:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   4a6d0:	f385 8811 	msr	BASEPRI, r5
   4a6d4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   4a6d8:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   4a6da:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4a6de:	e7f7      	b.n	4a6d0 <onoff_cancel+0x22>
		return -EINVAL;
   4a6e0:	f06f 0015 	mvn.w	r0, #21
   4a6e4:	e7f8      	b.n	4a6d8 <onoff_cancel+0x2a>

0004a6e6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   4a6e6:	4604      	mov	r4, r0
   4a6e8:	b508      	push	{r3, lr}
   4a6ea:	4608      	mov	r0, r1
   4a6ec:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   4a6ee:	461a      	mov	r2, r3
   4a6f0:	47a0      	blx	r4
	return z_impl_z_current_get();
   4a6f2:	f7fe fddb 	bl	492ac <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   4a6f6:	f7e3 f817 	bl	2d728 <z_impl_k_thread_abort>

0004a6fa <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   4a6fa:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   4a6fe:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   4a700:	0840      	lsrs	r0, r0, #1
   4a702:	4770      	bx	lr

0004a704 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   4a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4a706:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   4a708:	f7ff fff7 	bl	4a6fa <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   4a70c:	fab0 f080 	clz	r0, r0
   4a710:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   4a714:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   4a718:	00ca      	lsls	r2, r1, #3
   4a71a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   4a71e:	1d17      	adds	r7, r2, #4
{
   4a720:	460c      	mov	r4, r1
   4a722:	3206      	adds	r2, #6
   4a724:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   4a726:	b956      	cbnz	r6, 4a73e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   4a728:	2101      	movs	r1, #1
   4a72a:	fa01 f000 	lsl.w	r0, r1, r0
   4a72e:	68d9      	ldr	r1, [r3, #12]
   4a730:	4301      	orrs	r1, r0
   4a732:	60d9      	str	r1, [r3, #12]
		b->next = c;
   4a734:	f8cc 4010 	str.w	r4, [ip, #16]
   4a738:	53dd      	strh	r5, [r3, r7]
   4a73a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   4a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   4a73e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   4a740:	3104      	adds	r1, #4
   4a742:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   4a744:	53d8      	strh	r0, [r3, r7]
   4a746:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   4a74a:	529e      	strh	r6, [r3, r2]
   4a74c:	80c5      	strh	r5, [r0, #6]
   4a74e:	525d      	strh	r5, [r3, r1]
   4a750:	e7f4      	b.n	4a73c <free_list_add+0x38>

0004a752 <free_list_remove_bidx>:
{
   4a752:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   4a754:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   4a758:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   4a75a:	4299      	cmp	r1, r3
   4a75c:	f102 0104 	add.w	r1, r2, #4
   4a760:	d10a      	bne.n	4a778 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   4a762:	2301      	movs	r3, #1
   4a764:	fa03 f202 	lsl.w	r2, r3, r2
   4a768:	68c3      	ldr	r3, [r0, #12]
   4a76a:	ea23 0302 	bic.w	r3, r3, r2
   4a76e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   4a770:	2300      	movs	r3, #0
   4a772:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   4a776:	bd10      	pop	{r4, pc}
   4a778:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   4a77a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   4a77e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   4a782:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4a786:	80cb      	strh	r3, [r1, #6]
   4a788:	8082      	strh	r2, [r0, #4]
}
   4a78a:	e7f4      	b.n	4a776 <free_list_remove_bidx+0x24>

0004a78c <free_list_remove>:
{
   4a78c:	b508      	push	{r3, lr}
   4a78e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   4a790:	f7ff ffb3 	bl	4a6fa <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   4a794:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   4a798:	f1c2 021f 	rsb	r2, r2, #31
   4a79c:	4618      	mov	r0, r3
}
   4a79e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   4a7a2:	f7ff bfd6 	b.w	4a752 <free_list_remove_bidx>

0004a7a6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   4a7a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4a7aa:	fab1 f581 	clz	r5, r1
   4a7ae:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   4a7b2:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   4a7b6:	4603      	mov	r3, r0
	if (b->next) {
   4a7b8:	693a      	ldr	r2, [r7, #16]
{
   4a7ba:	460e      	mov	r6, r1
	if (b->next) {
   4a7bc:	b1c2      	cbz	r2, 4a7f0 <alloc_chunk+0x4a>
   4a7be:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   4a7c2:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   4a7c4:	4618      	mov	r0, r3
   4a7c6:	4621      	mov	r1, r4
   4a7c8:	f7ff ff97 	bl	4a6fa <chunk_size>
   4a7cc:	42b0      	cmp	r0, r6
   4a7ce:	d306      	bcc.n	4a7de <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   4a7d0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   4a7d2:	4618      	mov	r0, r3
   4a7d4:	f7ff ffbd 	bl	4a752 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   4a7d8:	4620      	mov	r0, r4
   4a7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   4a7de:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   4a7e2:	f1b8 0801 	subs.w	r8, r8, #1
   4a7e6:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   4a7e8:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   4a7ea:	d001      	beq.n	4a7f0 <alloc_chunk+0x4a>
   4a7ec:	4282      	cmp	r2, r0
   4a7ee:	d1e8      	bne.n	4a7c2 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   4a7f0:	f1c5 0220 	rsb	r2, r5, #32
   4a7f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4a7f8:	4094      	lsls	r4, r2
   4a7fa:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   4a7fc:	4014      	ands	r4, r2
   4a7fe:	d0eb      	beq.n	4a7d8 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   4a800:	fa94 f2a4 	rbit	r2, r4
   4a804:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   4a808:	1d11      	adds	r1, r2, #4
   4a80a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   4a80e:	4621      	mov	r1, r4
   4a810:	e7df      	b.n	4a7d2 <alloc_chunk+0x2c>

0004a812 <merge_chunks>:
{
   4a812:	b538      	push	{r3, r4, r5, lr}
   4a814:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   4a816:	f7ff ff70 	bl	4a6fa <chunk_size>
{
   4a81a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   4a81c:	4604      	mov	r4, r0
   4a81e:	4611      	mov	r1, r2
   4a820:	4618      	mov	r0, r3
   4a822:	f7ff ff6a 	bl	4a6fa <chunk_size>
		((uint16_t *)cmem)[f] = val;
   4a826:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   4a82a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a82c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   4a82e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   4a830:	4618      	mov	r0, r3
   4a832:	f7ff ff62 	bl	4a6fa <chunk_size>
	void *cmem = &buf[c];
   4a836:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   4a838:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   4a83c:	bd38      	pop	{r3, r4, r5, pc}

0004a83e <split_chunks>:
{
   4a83e:	b538      	push	{r3, r4, r5, lr}
   4a840:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   4a842:	f7ff ff5a 	bl	4a6fa <chunk_size>
{
   4a846:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   4a848:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   4a84a:	1a51      	subs	r1, r2, r1
   4a84c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   4a850:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a852:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   4a854:	8060      	strh	r0, [r4, #2]
   4a856:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a85a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   4a85c:	8044      	strh	r4, [r0, #2]
   4a85e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   4a862:	4618      	mov	r0, r3
   4a864:	4611      	mov	r1, r2
   4a866:	f7ff ff48 	bl	4a6fa <chunk_size>
	void *cmem = &buf[c];
   4a86a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   4a86c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   4a870:	bd38      	pop	{r3, r4, r5, pc}

0004a872 <free_chunk>:
{
   4a872:	b538      	push	{r3, r4, r5, lr}
   4a874:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   4a876:	f7ff ff40 	bl	4a6fa <chunk_size>
   4a87a:	460c      	mov	r4, r1
   4a87c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   4a87e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   4a882:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   4a884:	07da      	lsls	r2, r3, #31
   4a886:	d40a      	bmi.n	4a89e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   4a888:	4628      	mov	r0, r5
   4a88a:	f7ff ff7f 	bl	4a78c <free_list_remove>
	return c + chunk_size(h, c);
   4a88e:	4621      	mov	r1, r4
   4a890:	4628      	mov	r0, r5
   4a892:	f7ff ff32 	bl	4a6fa <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   4a896:	1822      	adds	r2, r4, r0
   4a898:	4628      	mov	r0, r5
   4a89a:	f7ff ffba 	bl	4a812 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   4a89e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4a8a2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   4a8a4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   4a8a8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   4a8aa:	07db      	lsls	r3, r3, #31
   4a8ac:	d40c      	bmi.n	4a8c8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   4a8ae:	4628      	mov	r0, r5
   4a8b0:	f7ff ff6c 	bl	4a78c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   4a8b4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   4a8b8:	4622      	mov	r2, r4
   4a8ba:	1a61      	subs	r1, r4, r1
   4a8bc:	4628      	mov	r0, r5
   4a8be:	f7ff ffa8 	bl	4a812 <merge_chunks>
   4a8c2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4a8c6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   4a8c8:	4621      	mov	r1, r4
   4a8ca:	4628      	mov	r0, r5
}
   4a8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   4a8d0:	f7ff bf18 	b.w	4a704 <free_list_add>

0004a8d4 <sys_heap_free>:
	if (mem == NULL) {
   4a8d4:	b161      	cbz	r1, 4a8f0 <sys_heap_free+0x1c>
   4a8d6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a8d8:	3904      	subs	r1, #4
   4a8da:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   4a8dc:	f021 0307 	bic.w	r3, r1, #7
   4a8e0:	4403      	add	r3, r0
	free_chunk(h, c);
   4a8e2:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   4a8e4:	885a      	ldrh	r2, [r3, #2]
   4a8e6:	f022 0201 	bic.w	r2, r2, #1
   4a8ea:	805a      	strh	r2, [r3, #2]
   4a8ec:	f7ff bfc1 	b.w	4a872 <free_chunk>
}
   4a8f0:	4770      	bx	lr

0004a8f2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   4a8f2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   4a8f4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   4a8f6:	b909      	cbnz	r1, 4a8fc <sys_heap_alloc+0xa>
		return NULL;
   4a8f8:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   4a8fa:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   4a8fc:	68ab      	ldr	r3, [r5, #8]
   4a8fe:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   4a902:	d9f9      	bls.n	4a8f8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a904:	310b      	adds	r1, #11
   4a906:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   4a908:	4621      	mov	r1, r4
   4a90a:	4628      	mov	r0, r5
   4a90c:	f7ff ff4b 	bl	4a7a6 <alloc_chunk>
	if (c == 0U) {
   4a910:	4606      	mov	r6, r0
   4a912:	2800      	cmp	r0, #0
   4a914:	d0f0      	beq.n	4a8f8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   4a916:	4601      	mov	r1, r0
   4a918:	4628      	mov	r0, r5
   4a91a:	f7ff feee 	bl	4a6fa <chunk_size>
   4a91e:	42a0      	cmp	r0, r4
   4a920:	d907      	bls.n	4a932 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   4a922:	1932      	adds	r2, r6, r4
   4a924:	4628      	mov	r0, r5
   4a926:	f7ff ff8a 	bl	4a83e <split_chunks>
		free_list_add(h, c + chunk_sz);
   4a92a:	4611      	mov	r1, r2
   4a92c:	4628      	mov	r0, r5
   4a92e:	f7ff fee9 	bl	4a704 <free_list_add>
	void *cmem = &buf[c];
   4a932:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   4a936:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a938:	8853      	ldrh	r3, [r2, #2]
   4a93a:	f043 0301 	orr.w	r3, r3, #1
   4a93e:	8053      	strh	r3, [r2, #2]
   4a940:	3004      	adds	r0, #4
	return mem;
   4a942:	e7da      	b.n	4a8fa <sys_heap_alloc+0x8>

0004a944 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   4a944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4a948:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   4a94a:	424a      	negs	r2, r1
   4a94c:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   4a950:	ea31 0202 	bics.w	r2, r1, r2
{
   4a954:	4603      	mov	r3, r0
	if (align != rew) {
   4a956:	d00a      	beq.n	4a96e <sys_heap_aligned_alloc+0x2a>
		return false;
   4a958:	2f04      	cmp	r7, #4
   4a95a:	463a      	mov	r2, r7
   4a95c:	46b9      	mov	r9, r7
   4a95e:	bf28      	it	cs
   4a960:	2204      	movcs	r2, #4
		align -= rew;
   4a962:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   4a964:	b974      	cbnz	r4, 4a984 <sys_heap_aligned_alloc+0x40>
		return NULL;
   4a966:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   4a968:	4628      	mov	r0, r5
   4a96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   4a96e:	2904      	cmp	r1, #4
   4a970:	d804      	bhi.n	4a97c <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   4a972:	4621      	mov	r1, r4
}
   4a974:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   4a978:	f7ff bfbb 	b.w	4a8f2 <sys_heap_alloc>
		rew = 0;
   4a97c:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   4a980:	2204      	movs	r2, #4
   4a982:	e7ef      	b.n	4a964 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   4a984:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   4a986:	68b3      	ldr	r3, [r6, #8]
   4a988:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   4a98c:	d9eb      	bls.n	4a966 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a98e:	f104 010b 	add.w	r1, r4, #11
   4a992:	4439      	add	r1, r7
   4a994:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   4a996:	08c9      	lsrs	r1, r1, #3
   4a998:	4630      	mov	r0, r6
   4a99a:	f7ff ff04 	bl	4a7a6 <alloc_chunk>
	if (c0 == 0) {
   4a99e:	4680      	mov	r8, r0
   4a9a0:	2800      	cmp	r0, #0
   4a9a2:	d0e0      	beq.n	4a966 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   4a9a4:	f109 0504 	add.w	r5, r9, #4
   4a9a8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   4a9ac:	1e7b      	subs	r3, r7, #1
   4a9ae:	4435      	add	r5, r6
   4a9b0:	441d      	add	r5, r3
   4a9b2:	427f      	negs	r7, r7
   4a9b4:	403d      	ands	r5, r7
   4a9b6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a9ba:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a9bc:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a9be:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a9c0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a9c2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   4a9c6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   4a9c8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a9cc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   4a9d0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   4a9d4:	d208      	bcs.n	4a9e8 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   4a9d6:	4601      	mov	r1, r0
   4a9d8:	463a      	mov	r2, r7
   4a9da:	4630      	mov	r0, r6
   4a9dc:	f7ff ff2f 	bl	4a83e <split_chunks>
		free_list_add(h, c0);
   4a9e0:	4641      	mov	r1, r8
   4a9e2:	4630      	mov	r0, r6
   4a9e4:	f7ff fe8e 	bl	4a704 <free_list_add>
	return c + chunk_size(h, c);
   4a9e8:	4639      	mov	r1, r7
   4a9ea:	4630      	mov	r0, r6
   4a9ec:	f7ff fe85 	bl	4a6fa <chunk_size>
   4a9f0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   4a9f2:	4284      	cmp	r4, r0
   4a9f4:	d207      	bcs.n	4aa06 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   4a9f6:	4630      	mov	r0, r6
   4a9f8:	4622      	mov	r2, r4
   4a9fa:	f7ff ff20 	bl	4a83e <split_chunks>
		free_list_add(h, c_end);
   4a9fe:	4621      	mov	r1, r4
   4aa00:	4630      	mov	r0, r6
   4aa02:	f7ff fe7f 	bl	4a704 <free_list_add>
	void *cmem = &buf[c];
   4aa06:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4aa0a:	8873      	ldrh	r3, [r6, #2]
   4aa0c:	f043 0301 	orr.w	r3, r3, #1
   4aa10:	8073      	strh	r3, [r6, #2]
   4aa12:	e7a9      	b.n	4a968 <sys_heap_aligned_alloc+0x24>

0004aa14 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   4aa14:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4aa16:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   4aa18:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4aa1a:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   4aa1e:	f021 0107 	bic.w	r1, r1, #7
{
   4aa22:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   4aa24:	1acd      	subs	r5, r1, r3
   4aa26:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   4aa28:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   4aa2a:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   4aa2e:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   4aa32:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4aa34:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   4aa36:	2600      	movs	r6, #0
   4aa38:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   4aa3a:	f1c0 0020 	rsb	r0, r0, #32
   4aa3e:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   4aa42:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   4aa44:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   4aa46:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   4aa4a:	4284      	cmp	r4, r0
   4aa4c:	d118      	bne.n	4aa80 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4aa4e:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4aa50:	f040 0001 	orr.w	r0, r0, #1
   4aa54:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   4aa56:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   4aa5a:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4aa5c:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   4aa5e:	801e      	strh	r6, [r3, #0]
   4aa60:	8067      	strh	r7, [r4, #2]
   4aa62:	195c      	adds	r4, r3, r5
   4aa64:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   4aa68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   4aa6c:	8066      	strh	r6, [r4, #2]
   4aa6e:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4aa70:	8850      	ldrh	r0, [r2, #2]
   4aa72:	f040 0001 	orr.w	r0, r0, #1
   4aa76:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   4aa78:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   4aa7a:	4618      	mov	r0, r3
   4aa7c:	f7ff be42 	b.w	4a704 <free_list_add>
		h->buckets[i].next = 0;
   4aa80:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   4aa84:	e7e1      	b.n	4aa4a <sys_heap_init+0x36>

0004aa86 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   4aa86:	4770      	bx	lr

0004aa88 <read_str>:
{
   4aa88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4aa8c:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   4aa90:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   4aa92:	4640      	mov	r0, r8
{
   4aa94:	461f      	mov	r7, r3
   4aa96:	460c      	mov	r4, r1
   4aa98:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   4aa9a:	f001 fdd7 	bl	4c64c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4aa9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4aaa2:	9300      	str	r3, [sp, #0]
   4aaa4:	b280      	uxth	r0, r0
   4aaa6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   4aaaa:	463b      	mov	r3, r7
   4aaac:	4632      	mov	r2, r6
   4aaae:	4621      	mov	r1, r4
   4aab0:	4628      	mov	r0, r5
   4aab2:	f004 fa5c 	bl	4ef6e <bt_gatt_attr_read>
}
   4aab6:	b004      	add	sp, #16
   4aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004aabc <blvl_ccc_cfg_changed>:
}
   4aabc:	4770      	bx	lr

0004aabe <bas_init>:
}
   4aabe:	2000      	movs	r0, #0
   4aac0:	4770      	bx	lr

0004aac2 <nvs_flash_rd>:
{
   4aac2:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   4aac4:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4aac6:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   4aac8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4aaca:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4aacc:	fa16 f181 	uxtah	r1, r6, r1
   4aad0:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   4aad4:	6884      	ldr	r4, [r0, #8]
   4aad6:	6824      	ldr	r4, [r4, #0]
   4aad8:	46a4      	mov	ip, r4
}
   4aada:	bc70      	pop	{r4, r5, r6}
   4aadc:	4760      	bx	ip

0004aade <nvs_flash_block_cmp>:
{
   4aade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4aae2:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4aae4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4aae6:	681d      	ldr	r5, [r3, #0]
   4aae8:	426d      	negs	r5, r5
{
   4aaea:	b089      	sub	sp, #36	; 0x24
   4aaec:	4681      	mov	r9, r0
   4aaee:	460e      	mov	r6, r1
   4aaf0:	4617      	mov	r7, r2
	block_size =
   4aaf2:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   4aaf6:	b91c      	cbnz	r4, 4ab00 <nvs_flash_block_cmp+0x22>
	return 0;
   4aaf8:	4620      	mov	r0, r4
}
   4aafa:	b009      	add	sp, #36	; 0x24
   4aafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   4ab00:	42ac      	cmp	r4, r5
   4ab02:	46a0      	mov	r8, r4
   4ab04:	bf28      	it	cs
   4ab06:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   4ab08:	4643      	mov	r3, r8
   4ab0a:	466a      	mov	r2, sp
   4ab0c:	4631      	mov	r1, r6
   4ab0e:	4648      	mov	r0, r9
   4ab10:	f7ff ffd7 	bl	4aac2 <nvs_flash_rd>
		if (rc) {
   4ab14:	2800      	cmp	r0, #0
   4ab16:	d1f0      	bne.n	4aafa <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   4ab18:	4642      	mov	r2, r8
   4ab1a:	4669      	mov	r1, sp
   4ab1c:	4638      	mov	r0, r7
   4ab1e:	f001 fdb9 	bl	4c694 <memcmp>
		if (rc) {
   4ab22:	b920      	cbnz	r0, 4ab2e <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   4ab24:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4ab28:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   4ab2a:	4447      	add	r7, r8
   4ab2c:	e7e3      	b.n	4aaf6 <nvs_flash_block_cmp+0x18>
			return 1;
   4ab2e:	2001      	movs	r0, #1
   4ab30:	e7e3      	b.n	4aafa <nvs_flash_block_cmp+0x1c>

0004ab32 <nvs_flash_cmp_const>:
{
   4ab32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ab36:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4ab38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4ab3a:	681d      	ldr	r5, [r3, #0]
   4ab3c:	426d      	negs	r5, r5
{
   4ab3e:	b088      	sub	sp, #32
	block_size =
   4ab40:	f005 0520 	and.w	r5, r5, #32
{
   4ab44:	4607      	mov	r7, r0
   4ab46:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   4ab48:	4668      	mov	r0, sp
{
   4ab4a:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   4ab4c:	462a      	mov	r2, r5
   4ab4e:	f001 fdbd 	bl	4c6cc <memset>
	while (len) {
   4ab52:	b91c      	cbnz	r4, 4ab5c <nvs_flash_cmp_const+0x2a>
	return 0;
   4ab54:	4620      	mov	r0, r4
}
   4ab56:	b008      	add	sp, #32
   4ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   4ab5c:	42ac      	cmp	r4, r5
   4ab5e:	46a0      	mov	r8, r4
   4ab60:	bf28      	it	cs
   4ab62:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   4ab64:	4643      	mov	r3, r8
   4ab66:	466a      	mov	r2, sp
   4ab68:	4631      	mov	r1, r6
   4ab6a:	4638      	mov	r0, r7
   4ab6c:	f7ff ffb7 	bl	4aade <nvs_flash_block_cmp>
		if (rc) {
   4ab70:	2800      	cmp	r0, #0
   4ab72:	d1f0      	bne.n	4ab56 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   4ab74:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4ab78:	4446      	add	r6, r8
   4ab7a:	e7ea      	b.n	4ab52 <nvs_flash_cmp_const+0x20>

0004ab7c <nvs_flash_erase_sector>:
{
   4ab7c:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4ab7e:	8982      	ldrh	r2, [r0, #12]
   4ab80:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   4ab82:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4ab84:	0c09      	lsrs	r1, r1, #16
{
   4ab86:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   4ab88:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   4ab8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4ab8c:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   4ab90:	6883      	ldr	r3, [r0, #8]
   4ab92:	689b      	ldr	r3, [r3, #8]
   4ab94:	4798      	blx	r3
	if (rc) {
   4ab96:	b950      	cbnz	r0, 4abae <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   4ab98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   4ab9a:	89a3      	ldrh	r3, [r4, #12]
   4ab9c:	7912      	ldrb	r2, [r2, #4]
   4ab9e:	4629      	mov	r1, r5
   4aba0:	4620      	mov	r0, r4
   4aba2:	f7ff ffc6 	bl	4ab32 <nvs_flash_cmp_const>
		rc = -ENXIO;
   4aba6:	2800      	cmp	r0, #0
   4aba8:	bf18      	it	ne
   4abaa:	f06f 0005 	mvnne.w	r0, #5
}
   4abae:	bd38      	pop	{r3, r4, r5, pc}

0004abb0 <nvs_ate_crc8_update>:
{
   4abb0:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4abb2:	4601      	mov	r1, r0
{
   4abb4:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4abb6:	2207      	movs	r2, #7
   4abb8:	20ff      	movs	r0, #255	; 0xff
   4abba:	f7e0 fa3b 	bl	2b034 <crc8_ccitt>
	entry->crc8 = crc8;
   4abbe:	71e0      	strb	r0, [r4, #7]
}
   4abc0:	bd10      	pop	{r4, pc}

0004abc2 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4abc2:	680b      	ldr	r3, [r1, #0]
   4abc4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   4abc8:	0c1a      	lsrs	r2, r3, #16
   4abca:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   4abce:	bf08      	it	eq
   4abd0:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   4abd4:	600b      	str	r3, [r1, #0]
}
   4abd6:	4770      	bx	lr

0004abd8 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   4abd8:	7803      	ldrb	r3, [r0, #0]
   4abda:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   4abdc:	bf81      	itttt	hi
   4abde:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   4abe2:	18c9      	addhi	r1, r1, r3
   4abe4:	425b      	neghi	r3, r3
   4abe6:	4019      	andhi	r1, r3
}
   4abe8:	4608      	mov	r0, r1
   4abea:	4770      	bx	lr

0004abec <nvs_ate_valid>:
{
   4abec:	b570      	push	{r4, r5, r6, lr}
   4abee:	460c      	mov	r4, r1
   4abf0:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4abf2:	2108      	movs	r1, #8
   4abf4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4abf6:	f7ff ffef 	bl	4abd8 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4abfa:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4abfc:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4abfe:	4621      	mov	r1, r4
   4ac00:	20ff      	movs	r0, #255	; 0xff
   4ac02:	f7e0 fa17 	bl	2b034 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   4ac06:	79e3      	ldrb	r3, [r4, #7]
   4ac08:	4283      	cmp	r3, r0
   4ac0a:	d107      	bne.n	4ac1c <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   4ac0c:	89a8      	ldrh	r0, [r5, #12]
   4ac0e:	8863      	ldrh	r3, [r4, #2]
   4ac10:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   4ac12:	4283      	cmp	r3, r0
   4ac14:	bf2c      	ite	cs
   4ac16:	2000      	movcs	r0, #0
   4ac18:	2001      	movcc	r0, #1
}
   4ac1a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   4ac1c:	2000      	movs	r0, #0
   4ac1e:	e7fc      	b.n	4ac1a <nvs_ate_valid+0x2e>

0004ac20 <nvs_close_ate_valid>:
{
   4ac20:	b538      	push	{r3, r4, r5, lr}
   4ac22:	4605      	mov	r5, r0
   4ac24:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   4ac26:	f7ff ffe1 	bl	4abec <nvs_ate_valid>
   4ac2a:	b1a0      	cbz	r0, 4ac56 <nvs_close_ate_valid+0x36>
   4ac2c:	88a0      	ldrh	r0, [r4, #4]
   4ac2e:	b998      	cbnz	r0, 4ac58 <nvs_close_ate_valid+0x38>
   4ac30:	8822      	ldrh	r2, [r4, #0]
   4ac32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4ac36:	429a      	cmp	r2, r3
   4ac38:	d10d      	bne.n	4ac56 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4ac3a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   4ac3c:	2108      	movs	r1, #8
   4ac3e:	f7ff ffcb 	bl	4abd8 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   4ac42:	8862      	ldrh	r2, [r4, #2]
   4ac44:	89ab      	ldrh	r3, [r5, #12]
   4ac46:	1a9b      	subs	r3, r3, r2
   4ac48:	fbb3 f2f0 	udiv	r2, r3, r0
   4ac4c:	fb02 3010 	mls	r0, r2, r0, r3
   4ac50:	fab0 f080 	clz	r0, r0
   4ac54:	0940      	lsrs	r0, r0, #5
}
   4ac56:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   4ac58:	2000      	movs	r0, #0
   4ac5a:	e7fc      	b.n	4ac56 <nvs_close_ate_valid+0x36>

0004ac5c <nvs_prev_ate>:
{
   4ac5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4ac5e:	4605      	mov	r5, r0
   4ac60:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4ac62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4ac64:	2108      	movs	r1, #8
   4ac66:	f7ff ffb7 	bl	4abd8 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4ac6a:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4ac6c:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4ac6e:	2308      	movs	r3, #8
   4ac70:	4628      	mov	r0, r5
   4ac72:	f7ff ff26 	bl	4aac2 <nvs_flash_rd>
	if (rc) {
   4ac76:	4604      	mov	r4, r0
   4ac78:	2800      	cmp	r0, #0
   4ac7a:	d138      	bne.n	4acee <nvs_prev_ate+0x92>
	*addr += ate_size;
   4ac7c:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4ac7e:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   4ac80:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4ac82:	b29a      	uxth	r2, r3
   4ac84:	1bc7      	subs	r7, r0, r7
   4ac86:	42ba      	cmp	r2, r7
	*addr += ate_size;
   4ac88:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4ac8a:	d130      	bne.n	4acee <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   4ac8c:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   4ac8e:	bf03      	ittte	eq
   4ac90:	89e9      	ldrheq	r1, [r5, #14]
   4ac92:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   4ac96:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   4ac9a:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   4ac9e:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4aca0:	2308      	movs	r3, #8
   4aca2:	466a      	mov	r2, sp
   4aca4:	4628      	mov	r0, r5
   4aca6:	f7ff ff0c 	bl	4aac2 <nvs_flash_rd>
	if (rc) {
   4acaa:	4604      	mov	r4, r0
   4acac:	b9f8      	cbnz	r0, 4acee <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4acae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   4acb0:	466a      	mov	r2, sp
   4acb2:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4acb4:	4603      	mov	r3, r0
		if (data8[i] != value) {
   4acb6:	f812 0b01 	ldrb.w	r0, [r2], #1
   4acba:	4281      	cmp	r1, r0
   4acbc:	d10c      	bne.n	4acd8 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4acbe:	3301      	adds	r3, #1
   4acc0:	2b08      	cmp	r3, #8
   4acc2:	d1f8      	bne.n	4acb6 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   4acc4:	686b      	ldr	r3, [r5, #4]
   4acc6:	e005      	b.n	4acd4 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   4acc8:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   4acca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   4acce:	0c1b      	lsrs	r3, r3, #16
   4acd0:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4acd2:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4acd4:	6033      	str	r3, [r6, #0]
		return 0;
   4acd6:	e00a      	b.n	4acee <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4acd8:	4669      	mov	r1, sp
   4acda:	4628      	mov	r0, r5
   4acdc:	f7ff ffa0 	bl	4ac20 <nvs_close_ate_valid>
   4ace0:	2800      	cmp	r0, #0
   4ace2:	d1f1      	bne.n	4acc8 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   4ace4:	4631      	mov	r1, r6
   4ace6:	4628      	mov	r0, r5
   4ace8:	f7e0 fd52 	bl	2b790 <nvs_recover_last_ate>
   4acec:	4604      	mov	r4, r0
}
   4acee:	4620      	mov	r0, r4
   4acf0:	b003      	add	sp, #12
   4acf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004acf4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4acf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4acf8:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4acfa:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   4acfc:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4acfe:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4ad00:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4ad02:	fa10 f181 	uxtah	r1, r0, r1
   4ad06:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   4ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4ad0c:	681e      	ldr	r6, [r3, #0]
   4ad0e:	4276      	negs	r6, r6
	if (blen > 0) {
   4ad10:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4ad12:	b089      	sub	sp, #36	; 0x24
   4ad14:	4690      	mov	r8, r2
	if (blen > 0) {
   4ad16:	d00a      	beq.n	4ad2e <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   4ad18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   4ad1a:	6883      	ldr	r3, [r0, #8]
   4ad1c:	4629      	mov	r1, r5
   4ad1e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   4ad22:	4633      	mov	r3, r6
   4ad24:	47c8      	blx	r9
		if (rc) {
   4ad26:	b9c0      	cbnz	r0, 4ad5a <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   4ad28:	1ba4      	subs	r4, r4, r6
		offset += blen;
   4ad2a:	4435      	add	r5, r6
		data8 += blen;
   4ad2c:	44b0      	add	r8, r6
	if (len) {
   4ad2e:	b1bc      	cbz	r4, 4ad60 <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   4ad30:	4622      	mov	r2, r4
   4ad32:	4641      	mov	r1, r8
   4ad34:	4668      	mov	r0, sp
   4ad36:	f001 fcbe 	bl	4c6b6 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   4ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4ad3c:	681a      	ldr	r2, [r3, #0]
   4ad3e:	7919      	ldrb	r1, [r3, #4]
   4ad40:	1b12      	subs	r2, r2, r4
   4ad42:	eb0d 0004 	add.w	r0, sp, r4
   4ad46:	f001 fcc1 	bl	4c6cc <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   4ad4a:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   4ad4e:	681b      	ldr	r3, [r3, #0]
   4ad50:	6882      	ldr	r2, [r0, #8]
   4ad52:	4629      	mov	r1, r5
   4ad54:	6854      	ldr	r4, [r2, #4]
   4ad56:	466a      	mov	r2, sp
   4ad58:	47a0      	blx	r4
}
   4ad5a:	b009      	add	sp, #36	; 0x24
   4ad5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   4ad60:	4620      	mov	r0, r4
   4ad62:	e7fa      	b.n	4ad5a <nvs_flash_al_wrt.part.0+0x66>

0004ad64 <nvs_flash_data_wrt>:
{
   4ad64:	b538      	push	{r3, r4, r5, lr}
   4ad66:	4604      	mov	r4, r0
	if (!len) {
   4ad68:	4615      	mov	r5, r2
   4ad6a:	b12a      	cbz	r2, 4ad78 <nvs_flash_data_wrt+0x14>
   4ad6c:	4613      	mov	r3, r2
   4ad6e:	460a      	mov	r2, r1
   4ad70:	6881      	ldr	r1, [r0, #8]
   4ad72:	f7ff ffbf 	bl	4acf4 <nvs_flash_al_wrt.part.0>
   4ad76:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   4ad78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4ad7a:	4629      	mov	r1, r5
   4ad7c:	f7ff ff2c 	bl	4abd8 <nvs_al_size.isra.0>
   4ad80:	68a3      	ldr	r3, [r4, #8]
   4ad82:	4403      	add	r3, r0
   4ad84:	60a3      	str	r3, [r4, #8]
}
   4ad86:	4610      	mov	r0, r2
   4ad88:	bd38      	pop	{r3, r4, r5, pc}

0004ad8a <nvs_flash_ate_wrt>:
{
   4ad8a:	b510      	push	{r4, lr}
   4ad8c:	460a      	mov	r2, r1
	if (!len) {
   4ad8e:	2308      	movs	r3, #8
   4ad90:	6841      	ldr	r1, [r0, #4]
{
   4ad92:	4604      	mov	r4, r0
   4ad94:	f7ff ffae 	bl	4acf4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   4ad98:	2108      	movs	r1, #8
   4ad9a:	4602      	mov	r2, r0
   4ad9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4ad9e:	f7ff ff1b 	bl	4abd8 <nvs_al_size.isra.0>
   4ada2:	6863      	ldr	r3, [r4, #4]
   4ada4:	1a1b      	subs	r3, r3, r0
   4ada6:	6063      	str	r3, [r4, #4]
}
   4ada8:	4610      	mov	r0, r2
   4adaa:	bd10      	pop	{r4, pc}

0004adac <nvs_add_gc_done_ate>:
{
   4adac:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   4adae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4adb2:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   4adb6:	2300      	movs	r3, #0
{
   4adb8:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   4adba:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4adbe:	6883      	ldr	r3, [r0, #8]
   4adc0:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   4adc4:	4668      	mov	r0, sp
   4adc6:	f7ff fef3 	bl	4abb0 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   4adca:	4669      	mov	r1, sp
   4adcc:	4620      	mov	r0, r4
   4adce:	f7ff ffdc 	bl	4ad8a <nvs_flash_ate_wrt>
}
   4add2:	b002      	add	sp, #8
   4add4:	bd10      	pop	{r4, pc}

0004add6 <nvs_gc>:
{
   4add6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4adda:	4604      	mov	r4, r0
   4addc:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4adde:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4ade0:	2108      	movs	r1, #8
   4ade2:	f7ff fef9 	bl	4abd8 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4ade6:	6863      	ldr	r3, [r4, #4]
   4ade8:	0c1b      	lsrs	r3, r3, #16
   4adea:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4adec:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   4adee:	a901      	add	r1, sp, #4
   4adf0:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4adf2:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   4adf4:	f7ff fee5 	bl	4abc2 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4adf8:	9b01      	ldr	r3, [sp, #4]
   4adfa:	89a1      	ldrh	r1, [r4, #12]
   4adfc:	4419      	add	r1, r3
   4adfe:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4ae00:	2308      	movs	r3, #8
   4ae02:	aa04      	add	r2, sp, #16
   4ae04:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4ae06:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4ae08:	f7ff fe5b 	bl	4aac2 <nvs_flash_rd>
	if (rc < 0) {
   4ae0c:	2800      	cmp	r0, #0
   4ae0e:	f2c0 8094 	blt.w	4af3a <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4ae12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4ae14:	aa04      	add	r2, sp, #16
   4ae16:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4ae18:	2300      	movs	r3, #0
		if (data8[i] != value) {
   4ae1a:	f812 0b01 	ldrb.w	r0, [r2], #1
   4ae1e:	4281      	cmp	r1, r0
   4ae20:	d17c      	bne.n	4af1c <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4ae22:	3301      	adds	r3, #1
   4ae24:	2b08      	cmp	r3, #8
   4ae26:	d1f8      	bne.n	4ae1a <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   4ae28:	68a0      	ldr	r0, [r4, #8]
   4ae2a:	6863      	ldr	r3, [r4, #4]
   4ae2c:	4428      	add	r0, r5
   4ae2e:	4283      	cmp	r3, r0
   4ae30:	d26e      	bcs.n	4af10 <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   4ae32:	9901      	ldr	r1, [sp, #4]
   4ae34:	4620      	mov	r0, r4
   4ae36:	f7ff fea1 	bl	4ab7c <nvs_flash_erase_sector>
	if (rc) {
   4ae3a:	e07e      	b.n	4af3a <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   4ae3c:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   4ae3e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   4ae42:	0c1b      	lsrs	r3, r3, #16
   4ae44:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   4ae46:	4413      	add	r3, r2
   4ae48:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4ae4a:	aa06      	add	r2, sp, #24
   4ae4c:	a902      	add	r1, sp, #8
   4ae4e:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   4ae50:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4ae54:	f7ff ff02 	bl	4ac5c <nvs_prev_ate>
		if (rc) {
   4ae58:	2800      	cmp	r0, #0
   4ae5a:	d16e      	bne.n	4af3a <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   4ae5c:	a906      	add	r1, sp, #24
   4ae5e:	4620      	mov	r0, r4
   4ae60:	f7ff fec4 	bl	4abec <nvs_ate_valid>
   4ae64:	2800      	cmp	r0, #0
   4ae66:	d034      	beq.n	4aed2 <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   4ae68:	6863      	ldr	r3, [r4, #4]
   4ae6a:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4ae6c:	aa08      	add	r2, sp, #32
   4ae6e:	a903      	add	r1, sp, #12
   4ae70:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4ae72:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4ae74:	f7ff fef2 	bl	4ac5c <nvs_prev_ate>
			if (rc) {
   4ae78:	2800      	cmp	r0, #0
   4ae7a:	d15e      	bne.n	4af3a <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   4ae7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   4ae80:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   4ae84:	429a      	cmp	r2, r3
   4ae86:	d027      	beq.n	4aed8 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   4ae88:	6862      	ldr	r2, [r4, #4]
   4ae8a:	9b03      	ldr	r3, [sp, #12]
   4ae8c:	429a      	cmp	r2, r3
   4ae8e:	d1ed      	bne.n	4ae6c <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   4ae90:	4556      	cmp	r6, sl
   4ae92:	d11e      	bne.n	4aed2 <nvs_gc+0xfc>
   4ae94:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   4ae98:	b1db      	cbz	r3, 4aed2 <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   4ae9a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   4ae9e:	ea4f 471a 	mov.w	r7, sl, lsr #16
   4aea2:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   4aea4:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   4aea6:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4aea8:	68a3      	ldr	r3, [r4, #8]
   4aeaa:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   4aeae:	f7ff fe7f 	bl	4abb0 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4aeb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4aeb4:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4aeb8:	681e      	ldr	r6, [r3, #0]
   4aeba:	4276      	negs	r6, r6
	block_size =
   4aebc:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4aec0:	f1b8 0f00 	cmp.w	r8, #0
   4aec4:	d10f      	bne.n	4aee6 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   4aec6:	a906      	add	r1, sp, #24
   4aec8:	4620      	mov	r0, r4
   4aeca:	f7ff ff5e 	bl	4ad8a <nvs_flash_ate_wrt>
			if (rc) {
   4aece:	2800      	cmp	r0, #0
   4aed0:	d133      	bne.n	4af3a <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   4aed2:	45ca      	cmp	sl, r9
   4aed4:	d1b9      	bne.n	4ae4a <nvs_gc+0x74>
gc_done:
   4aed6:	e7a7      	b.n	4ae28 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   4aed8:	a908      	add	r1, sp, #32
   4aeda:	4620      	mov	r0, r4
   4aedc:	f7ff fe86 	bl	4abec <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4aee0:	2800      	cmp	r0, #0
   4aee2:	d0d1      	beq.n	4ae88 <nvs_gc+0xb2>
   4aee4:	e7d4      	b.n	4ae90 <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   4aee6:	4546      	cmp	r6, r8
   4aee8:	46b3      	mov	fp, r6
   4aeea:	bf28      	it	cs
   4aeec:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   4aeee:	465b      	mov	r3, fp
   4aef0:	aa0a      	add	r2, sp, #40	; 0x28
   4aef2:	4639      	mov	r1, r7
   4aef4:	4620      	mov	r0, r4
   4aef6:	f7ff fde4 	bl	4aac2 <nvs_flash_rd>
		if (rc) {
   4aefa:	b9f0      	cbnz	r0, 4af3a <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   4aefc:	465a      	mov	r2, fp
   4aefe:	a90a      	add	r1, sp, #40	; 0x28
   4af00:	4620      	mov	r0, r4
   4af02:	f7ff ff2f 	bl	4ad64 <nvs_flash_data_wrt>
		if (rc) {
   4af06:	b9c0      	cbnz	r0, 4af3a <nvs_gc+0x164>
		len -= bytes_to_copy;
   4af08:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   4af0c:	445f      	add	r7, fp
   4af0e:	e7d7      	b.n	4aec0 <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   4af10:	4620      	mov	r0, r4
   4af12:	f7ff ff4b 	bl	4adac <nvs_add_gc_done_ate>
		if (rc) {
   4af16:	2800      	cmp	r0, #0
   4af18:	d08b      	beq.n	4ae32 <nvs_gc+0x5c>
   4af1a:	e00e      	b.n	4af3a <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   4af1c:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4af1e:	a904      	add	r1, sp, #16
   4af20:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   4af22:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4af26:	f7ff fe7b 	bl	4ac20 <nvs_close_ate_valid>
   4af2a:	2800      	cmp	r0, #0
   4af2c:	d186      	bne.n	4ae3c <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   4af2e:	a902      	add	r1, sp, #8
   4af30:	4620      	mov	r0, r4
   4af32:	f7e0 fc2d 	bl	2b790 <nvs_recover_last_ate>
		if (rc) {
   4af36:	2800      	cmp	r0, #0
   4af38:	d087      	beq.n	4ae4a <nvs_gc+0x74>
}
   4af3a:	b013      	add	sp, #76	; 0x4c
   4af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004af40 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   4af40:	2300      	movs	r3, #0
   4af42:	461a      	mov	r2, r3
   4af44:	f7e0 bdb4 	b.w	2bab0 <nvs_write>

0004af48 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   4af48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4af4c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   4af4e:	7c03      	ldrb	r3, [r0, #16]
{
   4af50:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   4af54:	4604      	mov	r4, r0
   4af56:	460f      	mov	r7, r1
   4af58:	4690      	mov	r8, r2
	if (!fs->ready) {
   4af5a:	2b00      	cmp	r3, #0
   4af5c:	d045      	beq.n	4afea <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4af5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4af60:	2108      	movs	r1, #8
   4af62:	f7ff fe39 	bl	4abd8 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   4af66:	89a3      	ldrh	r3, [r4, #12]
   4af68:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   4af6c:	429e      	cmp	r6, r3
   4af6e:	d83f      	bhi.n	4aff0 <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   4af70:	6863      	ldr	r3, [r4, #4]
   4af72:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   4af74:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4af78:	aa02      	add	r2, sp, #8
   4af7a:	a901      	add	r1, sp, #4
   4af7c:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   4af7e:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4af80:	f7ff fe6c 	bl	4ac5c <nvs_prev_ate>
		if (rc) {
   4af84:	bb38      	cbnz	r0, 4afd6 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   4af86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4af8a:	42bb      	cmp	r3, r7
   4af8c:	d108      	bne.n	4afa0 <nvs_read_hist+0x58>
   4af8e:	a902      	add	r1, sp, #8
   4af90:	4620      	mov	r0, r4
   4af92:	f7ff fe2b 	bl	4abec <nvs_ate_valid>
   4af96:	b118      	cbz	r0, 4afa0 <nvs_read_hist+0x58>
			cnt_his++;
   4af98:	f10a 0a01 	add.w	sl, sl, #1
   4af9c:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   4afa0:	6862      	ldr	r2, [r4, #4]
   4afa2:	9b01      	ldr	r3, [sp, #4]
   4afa4:	429a      	cmp	r2, r3
   4afa6:	d019      	beq.n	4afdc <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   4afa8:	45d1      	cmp	r9, sl
   4afaa:	d2e5      	bcs.n	4af78 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4afac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4afb0:	b1c3      	cbz	r3, 4afe4 <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4afb2:	45d1      	cmp	r9, sl
   4afb4:	d816      	bhi.n	4afe4 <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   4afb6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   4afba:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4afbc:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   4afbe:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4afc2:	bf28      	it	cs
   4afc4:	4633      	movcs	r3, r6
   4afc6:	4642      	mov	r2, r8
   4afc8:	4429      	add	r1, r5
   4afca:	4620      	mov	r0, r4
   4afcc:	f7ff fd79 	bl	4aac2 <nvs_flash_rd>
	if (rc) {
   4afd0:	b908      	cbnz	r0, 4afd6 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   4afd2:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   4afd6:	b004      	add	sp, #16
   4afd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4afdc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4afe0:	42bb      	cmp	r3, r7
   4afe2:	d0e3      	beq.n	4afac <nvs_read_hist+0x64>
		return -ENOENT;
   4afe4:	f06f 0001 	mvn.w	r0, #1
   4afe8:	e7f5      	b.n	4afd6 <nvs_read_hist+0x8e>
		return -EACCES;
   4afea:	f06f 000c 	mvn.w	r0, #12
   4afee:	e7f2      	b.n	4afd6 <nvs_read_hist+0x8e>
		return -EINVAL;
   4aff0:	f06f 0015 	mvn.w	r0, #21
   4aff4:	e7ef      	b.n	4afd6 <nvs_read_hist+0x8e>

0004aff6 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   4aff6:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   4aff8:	2400      	movs	r4, #0
   4affa:	9400      	str	r4, [sp, #0]
   4affc:	f7ff ffa4 	bl	4af48 <nvs_read_hist>
	return rc;
}
   4b000:	b002      	add	sp, #8
   4b002:	bd10      	pop	{r4, pc}

0004b004 <usb_write>:
{
   4b004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4b008:	4606      	mov	r6, r0
   4b00a:	460f      	mov	r7, r1
   4b00c:	4690      	mov	r8, r2
   4b00e:	4699      	mov	r9, r3
   4b010:	250b      	movs	r5, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4b012:	464b      	mov	r3, r9
   4b014:	4642      	mov	r2, r8
   4b016:	4639      	mov	r1, r7
   4b018:	4630      	mov	r0, r6
   4b01a:	f7f9 fdf9 	bl	44c10 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   4b01e:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4b022:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   4b024:	d103      	bne.n	4b02e <usb_write+0x2a>
	z_impl_k_yield();
   4b026:	f7fe f89f 	bl	49168 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   4b02a:	3d01      	subs	r5, #1
   4b02c:	d1f1      	bne.n	4b012 <usb_write+0xe>
}
   4b02e:	4620      	mov	r0, r4
   4b030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004b034 <usb_get_dev_data_by_cfg>:
	return list->head;
   4b034:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4b036:	b140      	cbz	r0, 4b04a <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   4b038:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   4b03c:	685b      	ldr	r3, [r3, #4]
   4b03e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4b040:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   4b044:	d001      	beq.n	4b04a <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   4b046:	6840      	ldr	r0, [r0, #4]
   4b048:	e7f5      	b.n	4b036 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   4b04a:	4770      	bx	lr

0004b04c <usb_get_dev_data_by_iface>:
	return list->head;
   4b04c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4b04e:	b150      	cbz	r0, 4b066 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4b050:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   4b054:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   4b056:	685b      	ldr	r3, [r3, #4]
   4b058:	789b      	ldrb	r3, [r3, #2]
   4b05a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4b05c:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   4b060:	d001      	beq.n	4b066 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   4b062:	6840      	ldr	r0, [r0, #4]
   4b064:	e7f3      	b.n	4b04e <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   4b066:	4770      	bx	lr

0004b068 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   4b068:	b530      	push	{r4, r5, lr}
	return list->head;
   4b06a:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4b06c:	b188      	cbz	r0, 4b092 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4b06e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   4b072:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   4b074:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4b076:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4b078:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4b07a:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   4b07c:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4b07e:	b2dc      	uxtb	r4, r3
   4b080:	42a5      	cmp	r5, r4
   4b082:	d801      	bhi.n	4b088 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   4b084:	6840      	ldr	r0, [r0, #4]
   4b086:	e7f1      	b.n	4b06c <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   4b088:	3301      	adds	r3, #1
   4b08a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   4b08e:	428c      	cmp	r4, r1
   4b090:	d1f5      	bne.n	4b07e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   4b092:	bd30      	pop	{r4, r5, pc}

0004b094 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4b094:	4770      	bx	lr

0004b096 <get_sectors_cb>:
{
   4b096:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4b098:	6802      	ldr	r2, [r0, #0]
   4b09a:	684c      	ldr	r4, [r1, #4]
   4b09c:	42a2      	cmp	r2, r4
   4b09e:	d316      	bcc.n	4b0ce <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   4b0a0:	688b      	ldr	r3, [r1, #8]
   4b0a2:	4423      	add	r3, r4
   4b0a4:	429a      	cmp	r2, r3
   4b0a6:	d206      	bcs.n	4b0b6 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   4b0a8:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   4b0ac:	42ab      	cmp	r3, r5
   4b0ae:	d304      	bcc.n	4b0ba <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   4b0b0:	f06f 030b 	mvn.w	r3, #11
   4b0b4:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   4b0b6:	2000      	movs	r0, #0
   4b0b8:	e00a      	b.n	4b0d0 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4b0ba:	68cd      	ldr	r5, [r1, #12]
   4b0bc:	1b12      	subs	r2, r2, r4
   4b0be:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   4b0c2:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   4b0c6:	6842      	ldr	r2, [r0, #4]
   4b0c8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   4b0ca:	3301      	adds	r3, #1
   4b0cc:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   4b0ce:	2001      	movs	r0, #1
}
   4b0d0:	bd70      	pop	{r4, r5, r6, pc}

0004b0d2 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   4b0d2:	2200      	movs	r2, #0
   4b0d4:	4611      	mov	r1, r2
   4b0d6:	f7e1 bc47 	b.w	2c968 <settings_save_one>

0004b0da <settings_name_steq>:
{
   4b0da:	4603      	mov	r3, r0
   4b0dc:	b530      	push	{r4, r5, lr}
   4b0de:	4608      	mov	r0, r1
	if (next) {
   4b0e0:	b10a      	cbz	r2, 4b0e6 <settings_name_steq+0xc>
		*next = NULL;
   4b0e2:	2100      	movs	r1, #0
   4b0e4:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   4b0e6:	b163      	cbz	r3, 4b102 <settings_name_steq+0x28>
   4b0e8:	b190      	cbz	r0, 4b110 <settings_name_steq+0x36>
   4b0ea:	1e41      	subs	r1, r0, #1
   4b0ec:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   4b0ee:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   4b0f2:	4604      	mov	r4, r0
   4b0f4:	f810 3b01 	ldrb.w	r3, [r0], #1
   4b0f8:	b15d      	cbz	r5, 4b112 <settings_name_steq+0x38>
   4b0fa:	429d      	cmp	r5, r3
   4b0fc:	d101      	bne.n	4b102 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4b0fe:	2d3d      	cmp	r5, #61	; 0x3d
   4b100:	d1f5      	bne.n	4b0ee <settings_name_steq+0x14>
	return 0;
   4b102:	2000      	movs	r0, #0
   4b104:	e004      	b.n	4b110 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   4b106:	2b3d      	cmp	r3, #61	; 0x3d
   4b108:	d008      	beq.n	4b11c <settings_name_steq+0x42>
   4b10a:	fab3 f083 	clz	r0, r3
   4b10e:	0940      	lsrs	r0, r0, #5
}
   4b110:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4b112:	2b2f      	cmp	r3, #47	; 0x2f
   4b114:	d1f7      	bne.n	4b106 <settings_name_steq+0x2c>
		if (next) {
   4b116:	b10a      	cbz	r2, 4b11c <settings_name_steq+0x42>
			*next = name + 1;
   4b118:	3401      	adds	r4, #1
   4b11a:	6014      	str	r4, [r2, #0]
		return 1;
   4b11c:	2001      	movs	r0, #1
   4b11e:	e7f7      	b.n	4b110 <settings_name_steq+0x36>

0004b120 <settings_name_next>:
{
   4b120:	b530      	push	{r4, r5, lr}
   4b122:	4603      	mov	r3, r0
	if (next) {
   4b124:	b109      	cbz	r1, 4b12a <settings_name_next+0xa>
		*next = NULL;
   4b126:	2200      	movs	r2, #0
   4b128:	600a      	str	r2, [r1, #0]
	if (!name) {
   4b12a:	b16b      	cbz	r3, 4b148 <settings_name_next+0x28>
   4b12c:	461a      	mov	r2, r3
   4b12e:	4614      	mov	r4, r2
   4b130:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4b132:	f812 5b01 	ldrb.w	r5, [r2], #1
   4b136:	b135      	cbz	r5, 4b146 <settings_name_next+0x26>
   4b138:	2d3d      	cmp	r5, #61	; 0x3d
   4b13a:	d004      	beq.n	4b146 <settings_name_next+0x26>
   4b13c:	2d2f      	cmp	r5, #47	; 0x2f
   4b13e:	d1f6      	bne.n	4b12e <settings_name_next+0xe>
		if (next) {
   4b140:	b109      	cbz	r1, 4b146 <settings_name_next+0x26>
			*next = name + 1;
   4b142:	3401      	adds	r4, #1
   4b144:	600c      	str	r4, [r1, #0]
}
   4b146:	bd30      	pop	{r4, r5, pc}
		return 0;
   4b148:	4618      	mov	r0, r3
   4b14a:	e7fc      	b.n	4b146 <settings_name_next+0x26>

0004b14c <settings_call_set_handler>:
{
   4b14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4b150:	b085      	sub	sp, #20
   4b152:	4604      	mov	r4, r0
   4b154:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const char *name_key = name;
   4b158:	9003      	str	r0, [sp, #12]
{
   4b15a:	460d      	mov	r5, r1
   4b15c:	4616      	mov	r6, r2
   4b15e:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   4b160:	f1b8 0f00 	cmp.w	r8, #0
   4b164:	d018      	beq.n	4b198 <settings_call_set_handler+0x4c>
   4b166:	f8d8 1000 	ldr.w	r1, [r8]
   4b16a:	b181      	cbz	r1, 4b18e <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   4b16c:	aa03      	add	r2, sp, #12
   4b16e:	f7ff ffb4 	bl	4b0da <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4b172:	b960      	cbnz	r0, 4b18e <settings_call_set_handler+0x42>
			rc = 0;
   4b174:	2000      	movs	r0, #0
   4b176:	e007      	b.n	4b188 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4b178:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4b17c:	9300      	str	r3, [sp, #0]
   4b17e:	9803      	ldr	r0, [sp, #12]
   4b180:	463b      	mov	r3, r7
   4b182:	4632      	mov	r2, r6
   4b184:	4629      	mov	r1, r5
   4b186:	47c8      	blx	r9
}
   4b188:	b005      	add	sp, #20
   4b18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   4b18e:	f8d8 9004 	ldr.w	r9, [r8, #4]
   4b192:	f1b9 0f00 	cmp.w	r9, #0
   4b196:	d1ef      	bne.n	4b178 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   4b198:	a903      	add	r1, sp, #12
   4b19a:	4620      	mov	r0, r4
   4b19c:	f7e1 fcb4 	bl	2cb08 <settings_parse_and_lookup>
		if (!ch) {
   4b1a0:	2800      	cmp	r0, #0
   4b1a2:	d0e7      	beq.n	4b174 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   4b1a4:	6884      	ldr	r4, [r0, #8]
   4b1a6:	9803      	ldr	r0, [sp, #12]
   4b1a8:	463b      	mov	r3, r7
   4b1aa:	4632      	mov	r2, r6
   4b1ac:	4629      	mov	r1, r5
   4b1ae:	47a0      	blx	r4
   4b1b0:	e7e0      	b.n	4b174 <settings_call_set_handler+0x28>

0004b1b2 <settings_nvs_read_fn>:
{
   4b1b2:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4b1b4:	4613      	mov	r3, r2
{
   4b1b6:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4b1b8:	460a      	mov	r2, r1
   4b1ba:	8881      	ldrh	r1, [r0, #4]
   4b1bc:	6800      	ldr	r0, [r0, #0]
   4b1be:	f7ff ff1a 	bl	4aff6 <nvs_read>
}
   4b1c2:	42a0      	cmp	r0, r4
   4b1c4:	bfa8      	it	ge
   4b1c6:	4620      	movge	r0, r4
   4b1c8:	bd10      	pop	{r4, pc}

0004b1ca <settings_nvs_save>:
{
   4b1ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b1ce:	b097      	sub	sp, #92	; 0x5c
   4b1d0:	4604      	mov	r4, r0
   4b1d2:	9201      	str	r2, [sp, #4]
   4b1d4:	469b      	mov	fp, r3
	if (!name) {
   4b1d6:	4689      	mov	r9, r1
   4b1d8:	2900      	cmp	r1, #0
   4b1da:	d069      	beq.n	4b2b0 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   4b1dc:	b1da      	cbz	r2, 4b216 <settings_nvs_save+0x4c>
   4b1de:	fabb f78b 	clz	r7, fp
   4b1e2:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   4b1e4:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   4b1e6:	3501      	adds	r5, #1
   4b1e8:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   4b1ea:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4b1ec:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   4b1f0:	1e6e      	subs	r6, r5, #1
   4b1f2:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   4b1f4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   4b1f8:	d02e      	beq.n	4b258 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4b1fa:	234a      	movs	r3, #74	; 0x4a
   4b1fc:	aa03      	add	r2, sp, #12
   4b1fe:	4631      	mov	r1, r6
   4b200:	4650      	mov	r0, sl
   4b202:	f7ff fef8 	bl	4aff6 <nvs_read>
		if (rc < 0) {
   4b206:	2800      	cmp	r0, #0
   4b208:	da07      	bge.n	4b21a <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   4b20a:	f110 0f02 	cmn.w	r0, #2
   4b20e:	bf08      	it	eq
   4b210:	46b0      	moveq	r8, r6
   4b212:	4635      	mov	r5, r6
   4b214:	e7ec      	b.n	4b1f0 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   4b216:	2701      	movs	r7, #1
   4b218:	e7e4      	b.n	4b1e4 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   4b21a:	ab16      	add	r3, sp, #88	; 0x58
   4b21c:	4418      	add	r0, r3
   4b21e:	2300      	movs	r3, #0
   4b220:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   4b224:	a903      	add	r1, sp, #12
   4b226:	4648      	mov	r0, r9
   4b228:	f001 fa17 	bl	4c65a <strcmp>
   4b22c:	2800      	cmp	r0, #0
   4b22e:	d1f0      	bne.n	4b212 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   4b230:	2f00      	cmp	r7, #0
   4b232:	d03b      	beq.n	4b2ac <settings_nvs_save+0xe2>
   4b234:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4b236:	42b3      	cmp	r3, r6
   4b238:	d142      	bne.n	4b2c0 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   4b23a:	4622      	mov	r2, r4
   4b23c:	1e73      	subs	r3, r6, #1
   4b23e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   4b242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4b246:	2302      	movs	r3, #2
   4b248:	4650      	mov	r0, sl
   4b24a:	f7e0 fc31 	bl	2bab0 <nvs_write>
			if (rc < 0) {
   4b24e:	2800      	cmp	r0, #0
   4b250:	da36      	bge.n	4b2c0 <settings_nvs_save+0xf6>
}
   4b252:	b017      	add	sp, #92	; 0x5c
   4b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   4b258:	bb6f      	cbnz	r7, 4b2b6 <settings_nvs_save+0xec>
	write_name = true;
   4b25a:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   4b25c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   4b260:	d02b      	beq.n	4b2ba <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   4b262:	f104 0508 	add.w	r5, r4, #8
   4b266:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   4b26a:	9a01      	ldr	r2, [sp, #4]
   4b26c:	465b      	mov	r3, fp
   4b26e:	b289      	uxth	r1, r1
   4b270:	4628      	mov	r0, r5
   4b272:	f7e0 fc1d 	bl	2bab0 <nvs_write>
	if (rc < 0) {
   4b276:	2800      	cmp	r0, #0
   4b278:	dbeb      	blt.n	4b252 <settings_nvs_save+0x88>
	if (write_name) {
   4b27a:	b157      	cbz	r7, 4b292 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   4b27c:	4648      	mov	r0, r9
   4b27e:	f001 f9e5 	bl	4c64c <strlen>
   4b282:	464a      	mov	r2, r9
   4b284:	4603      	mov	r3, r0
   4b286:	4641      	mov	r1, r8
   4b288:	4628      	mov	r0, r5
   4b28a:	f7e0 fc11 	bl	2bab0 <nvs_write>
		if (rc < 0) {
   4b28e:	2800      	cmp	r0, #0
   4b290:	dbdf      	blt.n	4b252 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   4b292:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4b294:	4543      	cmp	r3, r8
   4b296:	d220      	bcs.n	4b2da <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   4b298:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4b29a:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   4b29c:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4b2a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4b2a4:	4628      	mov	r0, r5
   4b2a6:	f7e0 fc03 	bl	2bab0 <nvs_write>
   4b2aa:	e016      	b.n	4b2da <settings_nvs_save+0x110>
   4b2ac:	46b0      	mov	r8, r6
   4b2ae:	e7d5      	b.n	4b25c <settings_nvs_save+0x92>
		return -EINVAL;
   4b2b0:	f06f 0015 	mvn.w	r0, #21
   4b2b4:	e7cd      	b.n	4b252 <settings_nvs_save+0x88>
		return 0;
   4b2b6:	2000      	movs	r0, #0
   4b2b8:	e7cb      	b.n	4b252 <settings_nvs_save+0x88>
		return -ENOMEM;
   4b2ba:	f06f 000b 	mvn.w	r0, #11
   4b2be:	e7c8      	b.n	4b252 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   4b2c0:	4631      	mov	r1, r6
   4b2c2:	4650      	mov	r0, sl
   4b2c4:	f7ff fe3c 	bl	4af40 <nvs_delete>
			if (rc >= 0) {
   4b2c8:	2800      	cmp	r0, #0
   4b2ca:	dbc2      	blt.n	4b252 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   4b2cc:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   4b2d0:	313f      	adds	r1, #63	; 0x3f
   4b2d2:	b289      	uxth	r1, r1
   4b2d4:	4650      	mov	r0, sl
   4b2d6:	f7ff fe33 	bl	4af40 <nvs_delete>
	if (rc < 0) {
   4b2da:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   4b2de:	e7b8      	b.n	4b252 <settings_nvs_save+0x88>

0004b2e0 <settings_nvs_backend_init>:
{
   4b2e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4b2e2:	f100 0608 	add.w	r6, r0, #8
   4b2e6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   4b2e8:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4b2ea:	4630      	mov	r0, r6
   4b2ec:	f7e0 fa82 	bl	2b7f4 <nvs_init>
	if (rc) {
   4b2f0:	4605      	mov	r5, r0
   4b2f2:	b970      	cbnz	r0, 4b312 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   4b2f4:	2302      	movs	r3, #2
   4b2f6:	f10d 0206 	add.w	r2, sp, #6
   4b2fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4b2fe:	4630      	mov	r0, r6
   4b300:	f7ff fe79 	bl	4aff6 <nvs_read>
	if (rc < 0) {
   4b304:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   4b306:	bfac      	ite	ge
   4b308:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   4b30c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   4b310:	8723      	strh	r3, [r4, #56]	; 0x38
}
   4b312:	4628      	mov	r0, r5
   4b314:	b002      	add	sp, #8
   4b316:	bd70      	pop	{r4, r5, r6, pc}

0004b318 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   4b318:	b538      	push	{r3, r4, r5, lr}
   4b31a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   4b31c:	42ab      	cmp	r3, r5
{
   4b31e:	4611      	mov	r1, r2
   4b320:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   4b322:	d804      	bhi.n	4b32e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   4b324:	461a      	mov	r2, r3
   4b326:	f001 f9c6 	bl	4c6b6 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   4b32a:	4620      	mov	r0, r4
   4b32c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   4b32e:	2400      	movs	r4, #0
   4b330:	e7fb      	b.n	4b32a <_copy+0x12>

0004b332 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   4b332:	f001 b9cb 	b.w	4c6cc <memset>

0004b336 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   4b336:	09c3      	lsrs	r3, r0, #7
   4b338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   4b33c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   4b340:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   4b344:	b2c0      	uxtb	r0, r0
   4b346:	4770      	bx	lr

0004b348 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   4b348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4b34c:	4606      	mov	r6, r0
   4b34e:	b0a9      	sub	sp, #164	; 0xa4
   4b350:	4688      	mov	r8, r1
   4b352:	4614      	mov	r4, r2
   4b354:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4b356:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   4b35a:	f7e1 fe6d 	bl	2d038 <uECC_get_rng>
		if (!rng_function ||
   4b35e:	4603      	mov	r3, r0
   4b360:	2800      	cmp	r0, #0
   4b362:	d03e      	beq.n	4b3e2 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   4b364:	2140      	movs	r1, #64	; 0x40
   4b366:	a808      	add	r0, sp, #32
   4b368:	4798      	blx	r3
		if (!rng_function ||
   4b36a:	b3d0      	cbz	r0, 4b3e2 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4b36c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   4b370:	f112 031f 	adds.w	r3, r2, #31
   4b374:	bf48      	it	mi
   4b376:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   4b37a:	466d      	mov	r5, sp
   4b37c:	464a      	mov	r2, r9
   4b37e:	a908      	add	r1, sp, #32
   4b380:	4628      	mov	r0, r5
   4b382:	f343 1347 	sbfx	r3, r3, #5, #8
   4b386:	f000 f9ee 	bl	4b766 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   4b38a:	4622      	mov	r2, r4
   4b38c:	4629      	mov	r1, r5
   4b38e:	a818      	add	r0, sp, #96	; 0x60
   4b390:	f000 fe03 	bl	4bf9a <EccPoint_compute_public_key>
   4b394:	b318      	cbz	r0, 4b3de <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   4b396:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   4b39a:	1dd9      	adds	r1, r3, #7
   4b39c:	bf48      	it	mi
   4b39e:	f103 010e 	addmi.w	r1, r3, #14
   4b3a2:	462a      	mov	r2, r5
   4b3a4:	4640      	mov	r0, r8
   4b3a6:	10c9      	asrs	r1, r1, #3
   4b3a8:	f000 fe1f 	bl	4bfea <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   4b3ac:	f994 1001 	ldrsb.w	r1, [r4, #1]
   4b3b0:	aa18      	add	r2, sp, #96	; 0x60
   4b3b2:	4630      	mov	r0, r6
   4b3b4:	f000 fe19 	bl	4bfea <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4b3b8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   4b3bc:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4b3c0:	ab18      	add	r3, sp, #96	; 0x60
   4b3c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4b3c6:	1870      	adds	r0, r6, r1
   4b3c8:	f000 fe0f 	bl	4bfea <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   4b3cc:	2220      	movs	r2, #32
   4b3ce:	2100      	movs	r1, #0
   4b3d0:	4628      	mov	r0, r5
   4b3d2:	f001 f97b 	bl	4c6cc <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   4b3d6:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   4b3d8:	b029      	add	sp, #164	; 0xa4
   4b3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   4b3de:	3f01      	subs	r7, #1
   4b3e0:	d1bb      	bne.n	4b35a <uECC_make_key+0x12>
        		return 0;
   4b3e2:	2000      	movs	r0, #0
   4b3e4:	e7f8      	b.n	4b3d8 <uECC_make_key+0x90>

0004b3e6 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   4b3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4b3ea:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   4b3ec:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   4b3f0:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   4b3f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   4b3f8:	b0a4      	sub	sp, #144	; 0x90
   4b3fa:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   4b3fc:	1dda      	adds	r2, r3, #7
   4b3fe:	bf48      	it	mi
   4b400:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   4b404:	ad04      	add	r5, sp, #16
{
   4b406:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   4b408:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   4b40a:	4628      	mov	r0, r5
   4b40c:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   4b40e:	9502      	str	r5, [sp, #8]
   4b410:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   4b412:	f000 fdfe 	bl	4c012 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   4b416:	463a      	mov	r2, r7
   4b418:	4649      	mov	r1, r9
   4b41a:	a814      	add	r0, sp, #80	; 0x50
   4b41c:	f000 fdf9 	bl	4c012 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   4b420:	ab14      	add	r3, sp, #80	; 0x50
   4b422:	eb09 0107 	add.w	r1, r9, r7
   4b426:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   4b42a:	463a      	mov	r2, r7
   4b42c:	f000 fdf1 	bl	4c012 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   4b430:	4623      	mov	r3, r4
   4b432:	4632      	mov	r2, r6
   4b434:	4629      	mov	r1, r5
   4b436:	4628      	mov	r0, r5
   4b438:	f000 fd83 	bl	4bf42 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   4b43c:	fab0 f380 	clz	r3, r0
   4b440:	9401      	str	r4, [sp, #4]
   4b442:	aa24      	add	r2, sp, #144	; 0x90
   4b444:	095b      	lsrs	r3, r3, #5
   4b446:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   4b44a:	8863      	ldrh	r3, [r4, #2]
   4b44c:	3301      	adds	r3, #1
   4b44e:	b21b      	sxth	r3, r3
   4b450:	9300      	str	r3, [sp, #0]
   4b452:	f851 2c88 	ldr.w	r2, [r1, #-136]
   4b456:	a914      	add	r1, sp, #80	; 0x50
   4b458:	2300      	movs	r3, #0
   4b45a:	4608      	mov	r0, r1
   4b45c:	f000 fca4 	bl	4bda8 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   4b460:	aa14      	add	r2, sp, #80	; 0x50
   4b462:	4639      	mov	r1, r7
   4b464:	4640      	mov	r0, r8
   4b466:	f000 fdc0 	bl	4bfea <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   4b46a:	4621      	mov	r1, r4
   4b46c:	a814      	add	r0, sp, #80	; 0x50
   4b46e:	f000 fc10 	bl	4bc92 <EccPoint_isZero>
   4b472:	af02      	add	r7, sp, #8
   4b474:	4604      	mov	r4, r0
   4b476:	2208      	movs	r2, #8
   4b478:	2100      	movs	r1, #0
   4b47a:	4638      	mov	r0, r7
   4b47c:	f001 f926 	bl	4c6cc <memset>
   4b480:	2220      	movs	r2, #32
   4b482:	2100      	movs	r1, #0
   4b484:	4630      	mov	r0, r6
   4b486:	f001 f921 	bl	4c6cc <memset>
   4b48a:	2220      	movs	r2, #32
   4b48c:	2100      	movs	r1, #0
   4b48e:	4628      	mov	r0, r5
   4b490:	f001 f91c 	bl	4c6cc <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   4b494:	fab4 f084 	clz	r0, r4
   4b498:	0940      	lsrs	r0, r0, #5
   4b49a:	b024      	add	sp, #144	; 0x90
   4b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004b4a0 <uECC_vli_add>:
{
   4b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4b4a2:	2400      	movs	r4, #0
{
   4b4a4:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   4b4a6:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4b4a8:	b265      	sxtb	r5, r4
   4b4aa:	42ab      	cmp	r3, r5
   4b4ac:	dc00      	bgt.n	4b4b0 <uECC_vli_add+0x10>
}
   4b4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   4b4b0:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4b4b4:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   4b4b8:	443d      	add	r5, r7
   4b4ba:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   4b4bc:	42af      	cmp	r7, r5
   4b4be:	f000 0001 	and.w	r0, r0, #1
   4b4c2:	bf18      	it	ne
   4b4c4:	2000      	movne	r0, #0
		result[i] = sum;
   4b4c6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4b4ca:	bf88      	it	hi
   4b4cc:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4b4d0:	3401      	adds	r4, #1
   4b4d2:	e7e9      	b.n	4b4a8 <uECC_vli_add+0x8>

0004b4d4 <uECC_vli_rshift1>:
	vli += num_words;
   4b4d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   4b4d8:	2300      	movs	r3, #0
	while (vli-- > end) {
   4b4da:	4288      	cmp	r0, r1
   4b4dc:	d300      	bcc.n	4b4e0 <uECC_vli_rshift1+0xc>
}
   4b4de:	4770      	bx	lr
		uECC_word_t temp = *vli;
   4b4e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   4b4e4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   4b4e8:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   4b4ea:	07d3      	lsls	r3, r2, #31
   4b4ec:	e7f5      	b.n	4b4da <uECC_vli_rshift1+0x6>

0004b4ee <vli_modInv_update>:
	if (!EVEN(uv)) {
   4b4ee:	6803      	ldr	r3, [r0, #0]
{
   4b4f0:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   4b4f2:	f013 0601 	ands.w	r6, r3, #1
{
   4b4f6:	4605      	mov	r5, r0
   4b4f8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   4b4fa:	d005      	beq.n	4b508 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4b4fc:	4613      	mov	r3, r2
   4b4fe:	460a      	mov	r2, r1
   4b500:	4601      	mov	r1, r0
   4b502:	f7ff ffcd 	bl	4b4a0 <uECC_vli_add>
   4b506:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   4b508:	4621      	mov	r1, r4
   4b50a:	4628      	mov	r0, r5
   4b50c:	f7ff ffe2 	bl	4b4d4 <uECC_vli_rshift1>
	if (carry) {
   4b510:	b146      	cbz	r6, 4b524 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   4b512:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   4b516:	3a01      	subs	r2, #1
   4b518:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   4b51c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4b520:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   4b524:	bd70      	pop	{r4, r5, r6, pc}

0004b526 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   4b526:	f04f 0c00 	mov.w	ip, #0
{
   4b52a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   4b52e:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   4b530:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   4b532:	fa4f f98c 	sxtb.w	r9, ip
   4b536:	454b      	cmp	r3, r9
   4b538:	dc16      	bgt.n	4b568 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4b53a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4b53e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   4b542:	9601      	str	r6, [sp, #4]
   4b544:	f04f 0800 	mov.w	r8, #0
   4b548:	9f01      	ldr	r7, [sp, #4]
   4b54a:	fa53 fe88 	uxtab	lr, r3, r8
   4b54e:	fa4f fe8e 	sxtb.w	lr, lr
   4b552:	45be      	cmp	lr, r7
   4b554:	fa5f f688 	uxtb.w	r6, r8
   4b558:	db26      	blt.n	4b5a8 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   4b55a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4b55e:	f840 4c04 	str.w	r4, [r0, #-4]
}
   4b562:	b003      	add	sp, #12
   4b564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   4b568:	f04f 0e00 	mov.w	lr, #0
   4b56c:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   4b570:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   4b572:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4b576:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   4b57a:	fba6 6707 	umull	r6, r7, r6, r7
   4b57e:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   4b580:	f10e 0e01 	add.w	lr, lr, #1
   4b584:	417d      	adcs	r5, r7
   4b586:	fa4f f68e 	sxtb.w	r6, lr
   4b58a:	f04f 0b00 	mov.w	fp, #0
   4b58e:	bf28      	it	cs
   4b590:	f04f 0b01 	movcs.w	fp, #1
   4b594:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   4b596:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   4b598:	ddeb      	ble.n	4b572 <uECC_vli_mult+0x4c>
		result[k] = r0;
   4b59a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   4b59e:	462c      	mov	r4, r5
   4b5a0:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   4b5a4:	4645      	mov	r5, r8
   4b5a6:	e7c4      	b.n	4b532 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4b5a8:	3601      	adds	r6, #1
   4b5aa:	46a9      	mov	r9, r5
   4b5ac:	b276      	sxtb	r6, r6
   4b5ae:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   4b5b2:	2500      	movs	r5, #0
   4b5b4:	b277      	sxtb	r7, r6
   4b5b6:	42bb      	cmp	r3, r7
   4b5b8:	dc05      	bgt.n	4b5c6 <uECC_vli_mult+0xa0>
		result[k] = r0;
   4b5ba:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4b5be:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   4b5c2:	464c      	mov	r4, r9
   4b5c4:	e7c0      	b.n	4b548 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4b5c6:	f06f 0703 	mvn.w	r7, #3
   4b5ca:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   4b5cc:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   4b5d0:	f85a 7007 	ldr.w	r7, [sl, r7]
   4b5d4:	fba7 7c0c 	umull	r7, ip, r7, ip
   4b5d8:	193c      	adds	r4, r7, r4
   4b5da:	eb5c 0909 	adcs.w	r9, ip, r9
   4b5de:	f04f 0b00 	mov.w	fp, #0
   4b5e2:	bf28      	it	cs
   4b5e4:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   4b5e8:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4b5ea:	3601      	adds	r6, #1
   4b5ec:	e7e2      	b.n	4b5b4 <uECC_vli_mult+0x8e>

0004b5ee <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   4b5ee:	2300      	movs	r3, #0
{
   4b5f0:	b510      	push	{r4, lr}
		 vli[i] = 0;
   4b5f2:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   4b5f4:	b25a      	sxtb	r2, r3
   4b5f6:	4291      	cmp	r1, r2
   4b5f8:	dc00      	bgt.n	4b5fc <uECC_vli_clear+0xe>
}
   4b5fa:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   4b5fc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4b600:	3301      	adds	r3, #1
   4b602:	e7f7      	b.n	4b5f4 <uECC_vli_clear+0x6>

0004b604 <uECC_vli_isZero>:
{
   4b604:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4b606:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   4b608:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   4b60a:	b25c      	sxtb	r4, r3
   4b60c:	42a1      	cmp	r1, r4
   4b60e:	dc03      	bgt.n	4b618 <uECC_vli_isZero+0x14>
}
   4b610:	fab2 f082 	clz	r0, r2
   4b614:	0940      	lsrs	r0, r0, #5
   4b616:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   4b618:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4b61c:	3301      	adds	r3, #1
   4b61e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   4b620:	e7f3      	b.n	4b60a <uECC_vli_isZero+0x6>

0004b622 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b622:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4b624:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b626:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4b62a:	f001 011f 	and.w	r1, r1, #31
   4b62e:	fa03 f101 	lsl.w	r1, r3, r1
}
   4b632:	4008      	ands	r0, r1
   4b634:	4770      	bx	lr

0004b636 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4b636:	3901      	subs	r1, #1
{
   4b638:	b510      	push	{r4, lr}
   4b63a:	4602      	mov	r2, r0
   4b63c:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4b63e:	1d04      	adds	r4, r0, #4
   4b640:	0608      	lsls	r0, r1, #24
   4b642:	b2cb      	uxtb	r3, r1
   4b644:	d404      	bmi.n	4b650 <uECC_vli_numBits+0x1a>
   4b646:	3901      	subs	r1, #1
   4b648:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   4b64c:	2800      	cmp	r0, #0
   4b64e:	d0f7      	beq.n	4b640 <uECC_vli_numBits+0xa>
	return (i + 1);
   4b650:	3301      	adds	r3, #1
   4b652:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   4b654:	b150      	cbz	r0, 4b66c <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   4b656:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   4b65a:	3b01      	subs	r3, #1
   4b65c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   4b660:	2300      	movs	r3, #0
   4b662:	b922      	cbnz	r2, 4b66e <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   4b664:	3801      	subs	r0, #1
   4b666:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   4b66a:	b200      	sxth	r0, r0
}
   4b66c:	bd10      	pop	{r4, pc}
		digit >>= 1;
   4b66e:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   4b670:	3301      	adds	r3, #1
   4b672:	e7f6      	b.n	4b662 <uECC_vli_numBits+0x2c>

0004b674 <uECC_vli_set>:
{
   4b674:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4b676:	2300      	movs	r3, #0
   4b678:	b25c      	sxtb	r4, r3
   4b67a:	42a2      	cmp	r2, r4
   4b67c:	dc00      	bgt.n	4b680 <uECC_vli_set+0xc>
}
   4b67e:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   4b680:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   4b684:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4b688:	3301      	adds	r3, #1
   4b68a:	e7f5      	b.n	4b678 <uECC_vli_set+0x4>

0004b68c <uECC_vli_cmp_unsafe>:
{
   4b68c:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4b68e:	3a01      	subs	r2, #1
   4b690:	b252      	sxtb	r2, r2
   4b692:	0613      	lsls	r3, r2, #24
   4b694:	d501      	bpl.n	4b69a <uECC_vli_cmp_unsafe+0xe>
	return 0;
   4b696:	2000      	movs	r0, #0
}
   4b698:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   4b69a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4b69e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   4b6a2:	429c      	cmp	r4, r3
   4b6a4:	d805      	bhi.n	4b6b2 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   4b6a6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   4b6aa:	d2f2      	bcs.n	4b692 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   4b6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4b6b0:	e7f2      	b.n	4b698 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   4b6b2:	2001      	movs	r0, #1
   4b6b4:	e7f0      	b.n	4b698 <uECC_vli_cmp_unsafe+0xc>

0004b6b6 <uECC_vli_equal>:
{
   4b6b6:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4b6b8:	3a01      	subs	r2, #1
   4b6ba:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   4b6bc:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   4b6be:	0614      	lsls	r4, r2, #24
   4b6c0:	d503      	bpl.n	4b6ca <uECC_vli_equal+0x14>
}
   4b6c2:	1e18      	subs	r0, r3, #0
   4b6c4:	bf18      	it	ne
   4b6c6:	2001      	movne	r0, #1
   4b6c8:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   4b6ca:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4b6ce:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   4b6d2:	406c      	eors	r4, r5
   4b6d4:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   4b6d6:	3a01      	subs	r2, #1
   4b6d8:	e7f1      	b.n	4b6be <uECC_vli_equal+0x8>

0004b6da <uECC_vli_sub>:
{
   4b6da:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4b6dc:	2400      	movs	r4, #0
{
   4b6de:	4606      	mov	r6, r0
   4b6e0:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   4b6e2:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4b6e4:	b265      	sxtb	r5, r4
   4b6e6:	4565      	cmp	r5, ip
   4b6e8:	db00      	blt.n	4b6ec <uECC_vli_sub+0x12>
}
   4b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   4b6ec:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4b6f0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   4b6f4:	1a3d      	subs	r5, r7, r0
   4b6f6:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   4b6f8:	42af      	cmp	r7, r5
   4b6fa:	f000 0001 	and.w	r0, r0, #1
   4b6fe:	bf18      	it	ne
   4b700:	2000      	movne	r0, #0
		result[i] = diff;
   4b702:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4b706:	bf38      	it	cc
   4b708:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4b70c:	3401      	adds	r4, #1
   4b70e:	e7e9      	b.n	4b6e4 <uECC_vli_sub+0xa>

0004b710 <uECC_vli_modAdd>:
{
   4b710:	b570      	push	{r4, r5, r6, lr}
   4b712:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4b716:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4b718:	4633      	mov	r3, r6
{
   4b71a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4b71c:	f7ff fec0 	bl	4b4a0 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   4b720:	b930      	cbnz	r0, 4b730 <uECC_vli_modAdd+0x20>
   4b722:	4632      	mov	r2, r6
   4b724:	4621      	mov	r1, r4
   4b726:	4628      	mov	r0, r5
   4b728:	f7ff ffb0 	bl	4b68c <uECC_vli_cmp_unsafe>
   4b72c:	2801      	cmp	r0, #1
   4b72e:	d007      	beq.n	4b740 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   4b730:	4633      	mov	r3, r6
   4b732:	462a      	mov	r2, r5
   4b734:	4621      	mov	r1, r4
   4b736:	4620      	mov	r0, r4
}
   4b738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   4b73c:	f7ff bfcd 	b.w	4b6da <uECC_vli_sub>
}
   4b740:	bd70      	pop	{r4, r5, r6, pc}

0004b742 <uECC_vli_modSub>:
{
   4b742:	b570      	push	{r4, r5, r6, lr}
   4b744:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4b748:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4b74a:	4633      	mov	r3, r6
{
   4b74c:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4b74e:	f7ff ffc4 	bl	4b6da <uECC_vli_sub>
	if (l_borrow) {
   4b752:	b138      	cbz	r0, 4b764 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   4b754:	4633      	mov	r3, r6
   4b756:	462a      	mov	r2, r5
   4b758:	4621      	mov	r1, r4
   4b75a:	4620      	mov	r0, r4
}
   4b75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   4b760:	f7ff be9e 	b.w	4b4a0 <uECC_vli_add>
}
   4b764:	bd70      	pop	{r4, r5, r6, pc}

0004b766 <uECC_vli_mmod>:
{
   4b766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b76a:	b0a5      	sub	sp, #148	; 0x94
   4b76c:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   4b76e:	ab14      	add	r3, sp, #80	; 0x50
   4b770:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   4b774:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   4b776:	4629      	mov	r1, r5
   4b778:	4610      	mov	r0, r2
{
   4b77a:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   4b77c:	f7ff ff5b 	bl	4b636 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   4b780:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   4b784:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4b786:	2c00      	cmp	r4, #0
   4b788:	4621      	mov	r1, r4
   4b78a:	bfb8      	it	lt
   4b78c:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4b790:	4263      	negs	r3, r4
   4b792:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4b796:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4b79a:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   4b79e:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4b7a0:	bf58      	it	pl
   4b7a2:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   4b7a4:	f7ff ff23 	bl	4b5ee <uECC_vli_clear>
	if (bit_shift > 0) {
   4b7a8:	2e00      	cmp	r6, #0
   4b7aa:	b208      	sxth	r0, r1
   4b7ac:	dd2b      	ble.n	4b806 <uECC_vli_mmod+0xa0>
   4b7ae:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   4b7b0:	2200      	movs	r2, #0
   4b7b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4b7b6:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4b7ba:	4613      	mov	r3, r2
   4b7bc:	429d      	cmp	r5, r3
   4b7be:	d817      	bhi.n	4b7f0 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   4b7c0:	006b      	lsls	r3, r5, #1
   4b7c2:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b7c4:	ab04      	add	r3, sp, #16
   4b7c6:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b7ca:	1e6f      	subs	r7, r5, #1
   4b7cc:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b7ce:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b7d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   4b7d4:	2c00      	cmp	r4, #0
   4b7d6:	da54      	bge.n	4b882 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   4b7d8:	ab24      	add	r3, sp, #144	; 0x90
   4b7da:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   4b7de:	462a      	mov	r2, r5
   4b7e0:	f856 1c88 	ldr.w	r1, [r6, #-136]
   4b7e4:	4640      	mov	r0, r8
   4b7e6:	f7ff ff45 	bl	4b674 <uECC_vli_set>
}
   4b7ea:	b025      	add	sp, #148	; 0x94
   4b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   4b7f0:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   4b7f4:	fa0c f106 	lsl.w	r1, ip, r6
   4b7f8:	430a      	orrs	r2, r1
   4b7fa:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4b7fe:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4b800:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4b804:	e7da      	b.n	4b7bc <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   4b806:	ab04      	add	r3, sp, #16
   4b808:	462a      	mov	r2, r5
   4b80a:	4639      	mov	r1, r7
   4b80c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4b810:	f7ff ff30 	bl	4b674 <uECC_vli_set>
   4b814:	e7d4      	b.n	4b7c0 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4b816:	fa0f fe82 	sxth.w	lr, r2
   4b81a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   4b81e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   4b822:	ab24      	add	r3, sp, #144	; 0x90
   4b824:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4b828:	3001      	adds	r0, #1
   4b82a:	f852 3c80 	ldr.w	r3, [r2, #-128]
   4b82e:	440b      	add	r3, r1
   4b830:	ebbb 0303 	subs.w	r3, fp, r3
   4b834:	bf34      	ite	cc
   4b836:	2201      	movcc	r2, #1
   4b838:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   4b83a:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   4b83c:	bf18      	it	ne
   4b83e:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   4b840:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   4b844:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   4b848:	9b01      	ldr	r3, [sp, #4]
   4b84a:	b242      	sxtb	r2, r0
   4b84c:	429a      	cmp	r2, r3
   4b84e:	dbe2      	blt.n	4b816 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   4b850:	1a73      	subs	r3, r6, r1
   4b852:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4b854:	4629      	mov	r1, r5
   4b856:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   4b858:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4b85a:	f7ff fe3b 	bl	4b4d4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b85e:	ab24      	add	r3, sp, #144	; 0x90
   4b860:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b864:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b866:	f853 2c80 	ldr.w	r2, [r3, #-128]
   4b86a:	f857 3c80 	ldr.w	r3, [r7, #-128]
   4b86e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   4b872:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b876:	4648      	mov	r0, r9
   4b878:	3c01      	subs	r4, #1
   4b87a:	f7ff fe2b 	bl	4b4d4 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   4b87e:	b224      	sxth	r4, r4
   4b880:	e7a8      	b.n	4b7d4 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4b882:	ab24      	add	r3, sp, #144	; 0x90
   4b884:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   4b886:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   4b88a:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4b88c:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   4b890:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   4b894:	e7d8      	b.n	4b848 <uECC_vli_mmod+0xe2>

0004b896 <uECC_vli_modMult_fast>:
{
   4b896:	b530      	push	{r4, r5, lr}
   4b898:	461c      	mov	r4, r3
   4b89a:	b091      	sub	sp, #68	; 0x44
   4b89c:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   4b89e:	f993 3000 	ldrsb.w	r3, [r3]
   4b8a2:	4668      	mov	r0, sp
   4b8a4:	f7ff fe3f 	bl	4b526 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   4b8a8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   4b8ac:	4669      	mov	r1, sp
   4b8ae:	4628      	mov	r0, r5
   4b8b0:	4798      	blx	r3
}
   4b8b2:	b011      	add	sp, #68	; 0x44
   4b8b4:	bd30      	pop	{r4, r5, pc}

0004b8b6 <uECC_vli_modSquare_fast>:
{
   4b8b6:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   4b8b8:	460a      	mov	r2, r1
   4b8ba:	f7ff bfec 	b.w	4b896 <uECC_vli_modMult_fast>

0004b8be <double_jacobian_default>:
{
   4b8be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4b8c2:	f993 6000 	ldrsb.w	r6, [r3]
{
   4b8c6:	b092      	sub	sp, #72	; 0x48
   4b8c8:	4604      	mov	r4, r0
   4b8ca:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   4b8cc:	4610      	mov	r0, r2
   4b8ce:	4631      	mov	r1, r6
{
   4b8d0:	4615      	mov	r5, r2
   4b8d2:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   4b8d4:	f7ff fe96 	bl	4b604 <uECC_vli_isZero>
   4b8d8:	2800      	cmp	r0, #0
   4b8da:	f040 8091 	bne.w	4ba00 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   4b8de:	463a      	mov	r2, r7
   4b8e0:	4649      	mov	r1, r9
   4b8e2:	a802      	add	r0, sp, #8
   4b8e4:	f7ff ffe7 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   4b8e8:	463b      	mov	r3, r7
   4b8ea:	aa02      	add	r2, sp, #8
   4b8ec:	4621      	mov	r1, r4
   4b8ee:	a80a      	add	r0, sp, #40	; 0x28
   4b8f0:	f7ff ffd1 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   4b8f4:	a902      	add	r1, sp, #8
   4b8f6:	4608      	mov	r0, r1
   4b8f8:	463a      	mov	r2, r7
   4b8fa:	f7ff ffdc 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   4b8fe:	463b      	mov	r3, r7
   4b900:	462a      	mov	r2, r5
   4b902:	4649      	mov	r1, r9
   4b904:	4648      	mov	r0, r9
   4b906:	f7ff ffc6 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4b90a:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   4b90e:	463a      	mov	r2, r7
   4b910:	4629      	mov	r1, r5
   4b912:	4628      	mov	r0, r5
   4b914:	f7ff ffcf 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4b918:	4643      	mov	r3, r8
   4b91a:	462a      	mov	r2, r5
   4b91c:	4621      	mov	r1, r4
   4b91e:	4620      	mov	r0, r4
   4b920:	9600      	str	r6, [sp, #0]
   4b922:	f7ff fef5 	bl	4b710 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   4b926:	4643      	mov	r3, r8
   4b928:	462a      	mov	r2, r5
   4b92a:	4629      	mov	r1, r5
   4b92c:	4628      	mov	r0, r5
   4b92e:	9600      	str	r6, [sp, #0]
   4b930:	f7ff feee 	bl	4b710 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4b934:	4643      	mov	r3, r8
   4b936:	462a      	mov	r2, r5
   4b938:	4621      	mov	r1, r4
   4b93a:	4628      	mov	r0, r5
   4b93c:	9600      	str	r6, [sp, #0]
   4b93e:	f7ff ff00 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4b942:	463b      	mov	r3, r7
   4b944:	462a      	mov	r2, r5
   4b946:	4621      	mov	r1, r4
   4b948:	4620      	mov	r0, r4
   4b94a:	f7ff ffa4 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   4b94e:	4643      	mov	r3, r8
   4b950:	4622      	mov	r2, r4
   4b952:	4621      	mov	r1, r4
   4b954:	4628      	mov	r0, r5
   4b956:	9600      	str	r6, [sp, #0]
   4b958:	f7ff feda 	bl	4b710 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   4b95c:	4643      	mov	r3, r8
   4b95e:	9600      	str	r6, [sp, #0]
   4b960:	462a      	mov	r2, r5
   4b962:	4621      	mov	r1, r4
   4b964:	4620      	mov	r0, r4
   4b966:	f7ff fed3 	bl	4b710 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b96a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   4b96c:	07db      	lsls	r3, r3, #31
   4b96e:	d54a      	bpl.n	4ba06 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4b970:	4633      	mov	r3, r6
   4b972:	4642      	mov	r2, r8
   4b974:	4621      	mov	r1, r4
   4b976:	4620      	mov	r0, r4
   4b978:	f7ff fd92 	bl	4b4a0 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   4b97c:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4b97e:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   4b980:	4620      	mov	r0, r4
   4b982:	f7ff fda7 	bl	4b4d4 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   4b986:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   4b98a:	3b01      	subs	r3, #1
   4b98c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   4b990:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   4b994:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   4b998:	463a      	mov	r2, r7
   4b99a:	4621      	mov	r1, r4
   4b99c:	4628      	mov	r0, r5
   4b99e:	f7ff ff8a 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   4b9a2:	4643      	mov	r3, r8
   4b9a4:	aa0a      	add	r2, sp, #40	; 0x28
   4b9a6:	4629      	mov	r1, r5
   4b9a8:	4628      	mov	r0, r5
   4b9aa:	9600      	str	r6, [sp, #0]
   4b9ac:	f7ff fec9 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   4b9b0:	4643      	mov	r3, r8
   4b9b2:	aa0a      	add	r2, sp, #40	; 0x28
   4b9b4:	4629      	mov	r1, r5
   4b9b6:	4628      	mov	r0, r5
   4b9b8:	9600      	str	r6, [sp, #0]
   4b9ba:	f7ff fec2 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   4b9be:	a90a      	add	r1, sp, #40	; 0x28
   4b9c0:	4608      	mov	r0, r1
   4b9c2:	4643      	mov	r3, r8
   4b9c4:	462a      	mov	r2, r5
   4b9c6:	9600      	str	r6, [sp, #0]
   4b9c8:	f7ff febb 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   4b9cc:	463b      	mov	r3, r7
   4b9ce:	aa0a      	add	r2, sp, #40	; 0x28
   4b9d0:	4621      	mov	r1, r4
   4b9d2:	4620      	mov	r0, r4
   4b9d4:	f7ff ff5f 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   4b9d8:	aa02      	add	r2, sp, #8
   4b9da:	4643      	mov	r3, r8
   4b9dc:	4610      	mov	r0, r2
   4b9de:	4621      	mov	r1, r4
   4b9e0:	9600      	str	r6, [sp, #0]
   4b9e2:	f7ff feae 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   4b9e6:	4632      	mov	r2, r6
   4b9e8:	4629      	mov	r1, r5
   4b9ea:	4620      	mov	r0, r4
   4b9ec:	f7ff fe42 	bl	4b674 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4b9f0:	4649      	mov	r1, r9
   4b9f2:	4628      	mov	r0, r5
   4b9f4:	f7ff fe3e 	bl	4b674 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   4b9f8:	a902      	add	r1, sp, #8
   4b9fa:	4648      	mov	r0, r9
   4b9fc:	f7ff fe3a 	bl	4b674 <uECC_vli_set>
}
   4ba00:	b012      	add	sp, #72	; 0x48
   4ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   4ba06:	4631      	mov	r1, r6
   4ba08:	4620      	mov	r0, r4
   4ba0a:	f7ff fd63 	bl	4b4d4 <uECC_vli_rshift1>
   4ba0e:	e7c3      	b.n	4b998 <double_jacobian_default+0xda>

0004ba10 <x_side_default>:
{
   4ba10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ba14:	4615      	mov	r5, r2
   4ba16:	b08a      	sub	sp, #40	; 0x28
   4ba18:	4604      	mov	r4, r0
   4ba1a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4ba1c:	221c      	movs	r2, #28
   4ba1e:	2100      	movs	r1, #0
   4ba20:	a803      	add	r0, sp, #12
   4ba22:	f000 fe53 	bl	4c6cc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4ba26:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   4ba28:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4ba2c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4ba2e:	462a      	mov	r2, r5
   4ba30:	4631      	mov	r1, r6
   4ba32:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4ba34:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4ba36:	f7ff ff3e 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4ba3a:	463b      	mov	r3, r7
   4ba3c:	aa02      	add	r2, sp, #8
   4ba3e:	4621      	mov	r1, r4
   4ba40:	4620      	mov	r0, r4
   4ba42:	f8cd 8000 	str.w	r8, [sp]
   4ba46:	f7ff fe7c 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   4ba4a:	462b      	mov	r3, r5
   4ba4c:	4632      	mov	r2, r6
   4ba4e:	4621      	mov	r1, r4
   4ba50:	4620      	mov	r0, r4
   4ba52:	f7ff ff20 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   4ba56:	f8cd 8000 	str.w	r8, [sp]
   4ba5a:	463b      	mov	r3, r7
   4ba5c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   4ba60:	4621      	mov	r1, r4
   4ba62:	4620      	mov	r0, r4
   4ba64:	f7ff fe54 	bl	4b710 <uECC_vli_modAdd>
}
   4ba68:	b00a      	add	sp, #40	; 0x28
   4ba6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004ba6e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   4ba6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ba72:	b09a      	sub	sp, #104	; 0x68
   4ba74:	4616      	mov	r6, r2
   4ba76:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4ba7a:	4644      	mov	r4, r8
{
   4ba7c:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   4ba7e:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4ba82:	9500      	str	r5, [sp, #0]
{
   4ba84:	4607      	mov	r7, r0
   4ba86:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4ba88:	4623      	mov	r3, r4
   4ba8a:	4602      	mov	r2, r0
   4ba8c:	4631      	mov	r1, r6
   4ba8e:	a802      	add	r0, sp, #8
   4ba90:	f7ff fe57 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4ba94:	a902      	add	r1, sp, #8
   4ba96:	4642      	mov	r2, r8
   4ba98:	4608      	mov	r0, r1
   4ba9a:	f7ff ff0c 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4ba9e:	4643      	mov	r3, r8
   4baa0:	aa02      	add	r2, sp, #8
   4baa2:	4639      	mov	r1, r7
   4baa4:	4638      	mov	r0, r7
   4baa6:	f7ff fef6 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4baaa:	4643      	mov	r3, r8
   4baac:	aa02      	add	r2, sp, #8
   4baae:	4631      	mov	r1, r6
   4bab0:	4630      	mov	r0, r6
   4bab2:	f7ff fef0 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   4bab6:	4623      	mov	r3, r4
   4bab8:	4652      	mov	r2, sl
   4baba:	4649      	mov	r1, r9
   4babc:	a802      	add	r0, sp, #8
   4babe:	9500      	str	r5, [sp, #0]
   4bac0:	f7ff fe26 	bl	4b710 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4bac4:	4623      	mov	r3, r4
   4bac6:	4652      	mov	r2, sl
   4bac8:	4649      	mov	r1, r9
   4baca:	4648      	mov	r0, r9
   4bacc:	9500      	str	r5, [sp, #0]
   4bace:	f7ff fe38 	bl	4b742 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4bad2:	4623      	mov	r3, r4
   4bad4:	463a      	mov	r2, r7
   4bad6:	4631      	mov	r1, r6
   4bad8:	a80a      	add	r0, sp, #40	; 0x28
   4bada:	9500      	str	r5, [sp, #0]
   4badc:	f7ff fe31 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4bae0:	4643      	mov	r3, r8
   4bae2:	aa0a      	add	r2, sp, #40	; 0x28
   4bae4:	4651      	mov	r1, sl
   4bae6:	4650      	mov	r0, sl
   4bae8:	f7ff fed5 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   4baec:	4623      	mov	r3, r4
   4baee:	4632      	mov	r2, r6
   4baf0:	4639      	mov	r1, r7
   4baf2:	a80a      	add	r0, sp, #40	; 0x28
   4baf4:	9500      	str	r5, [sp, #0]
   4baf6:	f7ff fe0b 	bl	4b710 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   4bafa:	4642      	mov	r2, r8
   4bafc:	4649      	mov	r1, r9
   4bafe:	4630      	mov	r0, r6
   4bb00:	f7ff fed9 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4bb04:	4623      	mov	r3, r4
   4bb06:	aa0a      	add	r2, sp, #40	; 0x28
   4bb08:	4631      	mov	r1, r6
   4bb0a:	4630      	mov	r0, r6
   4bb0c:	9500      	str	r5, [sp, #0]
   4bb0e:	f7ff fe18 	bl	4b742 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4bb12:	4623      	mov	r3, r4
   4bb14:	4632      	mov	r2, r6
   4bb16:	4639      	mov	r1, r7
   4bb18:	a812      	add	r0, sp, #72	; 0x48
   4bb1a:	9500      	str	r5, [sp, #0]
   4bb1c:	f7ff fe11 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4bb20:	4643      	mov	r3, r8
   4bb22:	aa12      	add	r2, sp, #72	; 0x48
   4bb24:	4649      	mov	r1, r9
   4bb26:	4648      	mov	r0, r9
   4bb28:	f7ff feb5 	bl	4b896 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   4bb2c:	4623      	mov	r3, r4
   4bb2e:	4652      	mov	r2, sl
   4bb30:	4649      	mov	r1, r9
   4bb32:	4648      	mov	r0, r9
   4bb34:	9500      	str	r5, [sp, #0]
   4bb36:	f7ff fe04 	bl	4b742 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   4bb3a:	4642      	mov	r2, r8
   4bb3c:	a902      	add	r1, sp, #8
   4bb3e:	a812      	add	r0, sp, #72	; 0x48
   4bb40:	f7ff feb9 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4bb44:	a912      	add	r1, sp, #72	; 0x48
   4bb46:	4623      	mov	r3, r4
   4bb48:	aa0a      	add	r2, sp, #40	; 0x28
   4bb4a:	4608      	mov	r0, r1
   4bb4c:	9500      	str	r5, [sp, #0]
   4bb4e:	f7ff fdf8 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4bb52:	4623      	mov	r3, r4
   4bb54:	463a      	mov	r2, r7
   4bb56:	a912      	add	r1, sp, #72	; 0x48
   4bb58:	a80a      	add	r0, sp, #40	; 0x28
   4bb5a:	9500      	str	r5, [sp, #0]
   4bb5c:	f7ff fdf1 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   4bb60:	a90a      	add	r1, sp, #40	; 0x28
   4bb62:	4643      	mov	r3, r8
   4bb64:	aa02      	add	r2, sp, #8
   4bb66:	4608      	mov	r0, r1
   4bb68:	f7ff fe95 	bl	4b896 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   4bb6c:	4623      	mov	r3, r4
   4bb6e:	4652      	mov	r2, sl
   4bb70:	a90a      	add	r1, sp, #40	; 0x28
   4bb72:	4650      	mov	r0, sl
   4bb74:	9500      	str	r5, [sp, #0]
   4bb76:	f7ff fde4 	bl	4b742 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   4bb7a:	462a      	mov	r2, r5
   4bb7c:	a912      	add	r1, sp, #72	; 0x48
   4bb7e:	4638      	mov	r0, r7
   4bb80:	f7ff fd78 	bl	4b674 <uECC_vli_set>
}
   4bb84:	b01a      	add	sp, #104	; 0x68
   4bb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004bb8a <uECC_vli_modInv>:
{
   4bb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4bb8c:	460f      	mov	r7, r1
   4bb8e:	b0a1      	sub	sp, #132	; 0x84
   4bb90:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   4bb92:	4619      	mov	r1, r3
   4bb94:	4638      	mov	r0, r7
{
   4bb96:	4615      	mov	r5, r2
   4bb98:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   4bb9a:	f7ff fd33 	bl	4b604 <uECC_vli_isZero>
   4bb9e:	b128      	cbz	r0, 4bbac <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   4bba0:	4630      	mov	r0, r6
}
   4bba2:	b021      	add	sp, #132	; 0x84
   4bba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   4bba8:	f7ff bd21 	b.w	4b5ee <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   4bbac:	4622      	mov	r2, r4
   4bbae:	4639      	mov	r1, r7
   4bbb0:	4668      	mov	r0, sp
   4bbb2:	f7ff fd5f 	bl	4b674 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   4bbb6:	4629      	mov	r1, r5
   4bbb8:	a808      	add	r0, sp, #32
   4bbba:	f7ff fd5b 	bl	4b674 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   4bbbe:	a810      	add	r0, sp, #64	; 0x40
   4bbc0:	4621      	mov	r1, r4
   4bbc2:	f7ff fd14 	bl	4b5ee <uECC_vli_clear>
	u[0] = 1;
   4bbc6:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   4bbc8:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   4bbca:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   4bbcc:	f7ff fd0f 	bl	4b5ee <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4bbd0:	4622      	mov	r2, r4
   4bbd2:	a908      	add	r1, sp, #32
   4bbd4:	4668      	mov	r0, sp
   4bbd6:	f7ff fd59 	bl	4b68c <uECC_vli_cmp_unsafe>
   4bbda:	b930      	cbnz	r0, 4bbea <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   4bbdc:	4622      	mov	r2, r4
   4bbde:	a910      	add	r1, sp, #64	; 0x40
   4bbe0:	4630      	mov	r0, r6
   4bbe2:	f7ff fd47 	bl	4b674 <uECC_vli_set>
}
   4bbe6:	b021      	add	sp, #132	; 0x84
   4bbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   4bbea:	9b00      	ldr	r3, [sp, #0]
   4bbec:	07da      	lsls	r2, r3, #31
   4bbee:	d409      	bmi.n	4bc04 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   4bbf0:	4621      	mov	r1, r4
   4bbf2:	4668      	mov	r0, sp
   4bbf4:	f7ff fc6e 	bl	4b4d4 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   4bbf8:	4622      	mov	r2, r4
   4bbfa:	4629      	mov	r1, r5
   4bbfc:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   4bbfe:	f7ff fc76 	bl	4b4ee <vli_modInv_update>
   4bc02:	e7e5      	b.n	4bbd0 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4bc04:	9b08      	ldr	r3, [sp, #32]
   4bc06:	07db      	lsls	r3, r3, #31
   4bc08:	d407      	bmi.n	4bc1a <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   4bc0a:	4621      	mov	r1, r4
   4bc0c:	a808      	add	r0, sp, #32
   4bc0e:	f7ff fc61 	bl	4b4d4 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4bc12:	4622      	mov	r2, r4
   4bc14:	4629      	mov	r1, r5
   4bc16:	a818      	add	r0, sp, #96	; 0x60
   4bc18:	e7f1      	b.n	4bbfe <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   4bc1a:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   4bc1c:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   4bc1e:	dd1c      	ble.n	4bc5a <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4bc20:	aa08      	add	r2, sp, #32
   4bc22:	4669      	mov	r1, sp
   4bc24:	4668      	mov	r0, sp
   4bc26:	f7ff fd58 	bl	4b6da <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   4bc2a:	4621      	mov	r1, r4
   4bc2c:	4668      	mov	r0, sp
   4bc2e:	f7ff fc51 	bl	4b4d4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4bc32:	4622      	mov	r2, r4
   4bc34:	a918      	add	r1, sp, #96	; 0x60
   4bc36:	a810      	add	r0, sp, #64	; 0x40
   4bc38:	f7ff fd28 	bl	4b68c <uECC_vli_cmp_unsafe>
   4bc3c:	2800      	cmp	r0, #0
   4bc3e:	da05      	bge.n	4bc4c <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4bc40:	a910      	add	r1, sp, #64	; 0x40
   4bc42:	4623      	mov	r3, r4
   4bc44:	462a      	mov	r2, r5
   4bc46:	4608      	mov	r0, r1
   4bc48:	f7ff fc2a 	bl	4b4a0 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   4bc4c:	a910      	add	r1, sp, #64	; 0x40
   4bc4e:	4623      	mov	r3, r4
   4bc50:	aa18      	add	r2, sp, #96	; 0x60
   4bc52:	4608      	mov	r0, r1
   4bc54:	f7ff fd41 	bl	4b6da <uECC_vli_sub>
   4bc58:	e7ce      	b.n	4bbf8 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   4bc5a:	466a      	mov	r2, sp
   4bc5c:	a808      	add	r0, sp, #32
   4bc5e:	f7ff fd3c 	bl	4b6da <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4bc62:	4621      	mov	r1, r4
   4bc64:	a808      	add	r0, sp, #32
   4bc66:	f7ff fc35 	bl	4b4d4 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   4bc6a:	4622      	mov	r2, r4
   4bc6c:	a910      	add	r1, sp, #64	; 0x40
   4bc6e:	a818      	add	r0, sp, #96	; 0x60
   4bc70:	f7ff fd0c 	bl	4b68c <uECC_vli_cmp_unsafe>
   4bc74:	2800      	cmp	r0, #0
   4bc76:	da05      	bge.n	4bc84 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   4bc78:	a918      	add	r1, sp, #96	; 0x60
   4bc7a:	4623      	mov	r3, r4
   4bc7c:	462a      	mov	r2, r5
   4bc7e:	4608      	mov	r0, r1
   4bc80:	f7ff fc0e 	bl	4b4a0 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4bc84:	a918      	add	r1, sp, #96	; 0x60
   4bc86:	4623      	mov	r3, r4
   4bc88:	aa10      	add	r2, sp, #64	; 0x40
   4bc8a:	4608      	mov	r0, r1
   4bc8c:	f7ff fd25 	bl	4b6da <uECC_vli_sub>
   4bc90:	e7bf      	b.n	4bc12 <uECC_vli_modInv+0x88>

0004bc92 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   4bc92:	7809      	ldrb	r1, [r1, #0]
   4bc94:	0049      	lsls	r1, r1, #1
   4bc96:	b249      	sxtb	r1, r1
   4bc98:	f7ff bcb4 	b.w	4b604 <uECC_vli_isZero>

0004bc9c <apply_z>:
{
   4bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4bc9e:	4615      	mov	r5, r2
   4bca0:	b089      	sub	sp, #36	; 0x24
   4bca2:	461c      	mov	r4, r3
   4bca4:	4607      	mov	r7, r0
   4bca6:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   4bca8:	461a      	mov	r2, r3
   4bcaa:	4629      	mov	r1, r5
   4bcac:	4668      	mov	r0, sp
   4bcae:	f7ff fe02 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   4bcb2:	4623      	mov	r3, r4
   4bcb4:	466a      	mov	r2, sp
   4bcb6:	4639      	mov	r1, r7
   4bcb8:	4638      	mov	r0, r7
   4bcba:	f7ff fdec 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   4bcbe:	4623      	mov	r3, r4
   4bcc0:	462a      	mov	r2, r5
   4bcc2:	4669      	mov	r1, sp
   4bcc4:	4668      	mov	r0, sp
   4bcc6:	f7ff fde6 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   4bcca:	4623      	mov	r3, r4
   4bccc:	466a      	mov	r2, sp
   4bcce:	4631      	mov	r1, r6
   4bcd0:	4630      	mov	r0, r6
   4bcd2:	f7ff fde0 	bl	4b896 <uECC_vli_modMult_fast>
}
   4bcd6:	b009      	add	sp, #36	; 0x24
   4bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004bcda <XYcZ_add>:
{
   4bcda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4bcde:	b08a      	sub	sp, #40	; 0x28
   4bce0:	4614      	mov	r4, r2
   4bce2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   4bce6:	4655      	mov	r5, sl
{
   4bce8:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   4bcea:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4bcee:	9600      	str	r6, [sp, #0]
{
   4bcf0:	4680      	mov	r8, r0
   4bcf2:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4bcf4:	462b      	mov	r3, r5
   4bcf6:	4602      	mov	r2, r0
   4bcf8:	4621      	mov	r1, r4
   4bcfa:	a802      	add	r0, sp, #8
   4bcfc:	f7ff fd21 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4bd00:	a902      	add	r1, sp, #8
   4bd02:	4652      	mov	r2, sl
   4bd04:	4608      	mov	r0, r1
   4bd06:	f7ff fdd6 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4bd0a:	4653      	mov	r3, sl
   4bd0c:	aa02      	add	r2, sp, #8
   4bd0e:	4641      	mov	r1, r8
   4bd10:	4640      	mov	r0, r8
   4bd12:	f7ff fdc0 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4bd16:	4653      	mov	r3, sl
   4bd18:	aa02      	add	r2, sp, #8
   4bd1a:	4621      	mov	r1, r4
   4bd1c:	4620      	mov	r0, r4
   4bd1e:	f7ff fdba 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4bd22:	462b      	mov	r3, r5
   4bd24:	464a      	mov	r2, r9
   4bd26:	4639      	mov	r1, r7
   4bd28:	4638      	mov	r0, r7
   4bd2a:	9600      	str	r6, [sp, #0]
   4bd2c:	f7ff fd09 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4bd30:	4652      	mov	r2, sl
   4bd32:	4639      	mov	r1, r7
   4bd34:	a802      	add	r0, sp, #8
   4bd36:	f7ff fdbe 	bl	4b8b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   4bd3a:	a902      	add	r1, sp, #8
   4bd3c:	462b      	mov	r3, r5
   4bd3e:	4642      	mov	r2, r8
   4bd40:	4608      	mov	r0, r1
   4bd42:	9600      	str	r6, [sp, #0]
   4bd44:	f7ff fcfd 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   4bd48:	a902      	add	r1, sp, #8
   4bd4a:	462b      	mov	r3, r5
   4bd4c:	4622      	mov	r2, r4
   4bd4e:	4608      	mov	r0, r1
   4bd50:	9600      	str	r6, [sp, #0]
   4bd52:	f7ff fcf6 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   4bd56:	462b      	mov	r3, r5
   4bd58:	4642      	mov	r2, r8
   4bd5a:	4621      	mov	r1, r4
   4bd5c:	4620      	mov	r0, r4
   4bd5e:	9600      	str	r6, [sp, #0]
   4bd60:	f7ff fcef 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4bd64:	4653      	mov	r3, sl
   4bd66:	4622      	mov	r2, r4
   4bd68:	4649      	mov	r1, r9
   4bd6a:	4648      	mov	r0, r9
   4bd6c:	f7ff fd93 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   4bd70:	462b      	mov	r3, r5
   4bd72:	aa02      	add	r2, sp, #8
   4bd74:	4641      	mov	r1, r8
   4bd76:	4620      	mov	r0, r4
   4bd78:	9600      	str	r6, [sp, #0]
   4bd7a:	f7ff fce2 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   4bd7e:	4653      	mov	r3, sl
   4bd80:	4622      	mov	r2, r4
   4bd82:	4639      	mov	r1, r7
   4bd84:	4638      	mov	r0, r7
   4bd86:	f7ff fd86 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   4bd8a:	462b      	mov	r3, r5
   4bd8c:	464a      	mov	r2, r9
   4bd8e:	4639      	mov	r1, r7
   4bd90:	4638      	mov	r0, r7
   4bd92:	9600      	str	r6, [sp, #0]
   4bd94:	f7ff fcd5 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   4bd98:	4632      	mov	r2, r6
   4bd9a:	a902      	add	r1, sp, #8
   4bd9c:	4620      	mov	r0, r4
   4bd9e:	f7ff fc69 	bl	4b674 <uECC_vli_set>
}
   4bda2:	b00a      	add	sp, #40	; 0x28
   4bda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004bda8 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   4bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4bdac:	b0b1      	sub	sp, #196	; 0xc4
   4bdae:	e9cd 0103 	strd	r0, r1, [sp, #12]
   4bdb2:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   4bdb4:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   4bdb8:	a818      	add	r0, sp, #96	; 0x60
{
   4bdba:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   4bdbc:	463a      	mov	r2, r7
{
   4bdbe:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   4bdc0:	f7ff fc58 	bl	4b674 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4bdc4:	00bb      	lsls	r3, r7, #2
   4bdc6:	9305      	str	r3, [sp, #20]
   4bdc8:	9b04      	ldr	r3, [sp, #16]
   4bdca:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   4bdce:	4619      	mov	r1, r3
   4bdd0:	a828      	add	r0, sp, #160	; 0xa0
   4bdd2:	9302      	str	r3, [sp, #8]
   4bdd4:	f7ff fc4e 	bl	4b674 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   4bdd8:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   4bddc:	2d00      	cmp	r5, #0
   4bdde:	f000 8086 	beq.w	4beee <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   4bde2:	4632      	mov	r2, r6
   4bde4:	4629      	mov	r1, r5
   4bde6:	a808      	add	r0, sp, #32
   4bde8:	f7ff fc44 	bl	4b674 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   4bdec:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   4bdf0:	4632      	mov	r2, r6
   4bdf2:	a918      	add	r1, sp, #96	; 0x60
   4bdf4:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   4bdf6:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   4bdfa:	f7ff fc3b 	bl	4b674 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   4bdfe:	a928      	add	r1, sp, #160	; 0xa0
   4be00:	4648      	mov	r0, r9
   4be02:	f7ff fc37 	bl	4b674 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   4be06:	4623      	mov	r3, r4
   4be08:	aa08      	add	r2, sp, #32
   4be0a:	a818      	add	r0, sp, #96	; 0x60
   4be0c:	f7ff ff46 	bl	4bc9c <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4be10:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4be14:	4623      	mov	r3, r4
   4be16:	aa08      	add	r2, sp, #32
   4be18:	a928      	add	r1, sp, #160	; 0xa0
   4be1a:	a818      	add	r0, sp, #96	; 0x60
   4be1c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   4be1e:	4623      	mov	r3, r4
   4be20:	aa08      	add	r2, sp, #32
   4be22:	4649      	mov	r1, r9
   4be24:	4640      	mov	r0, r8
   4be26:	f7ff ff39 	bl	4bc9c <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   4be2a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   4be2e:	3d02      	subs	r5, #2
   4be30:	b22d      	sxth	r5, r5
   4be32:	2d00      	cmp	r5, #0
   4be34:	dc62      	bgt.n	4befc <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4be36:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4be3a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4be3c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4be40:	ab10      	add	r3, sp, #64	; 0x40
   4be42:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   4be46:	43ed      	mvns	r5, r5
   4be48:	ab20      	add	r3, sp, #128	; 0x80
   4be4a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   4be4e:	f005 0501 	and.w	r5, r5, #1
   4be52:	ab10      	add	r3, sp, #64	; 0x40
   4be54:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   4be58:	ab20      	add	r3, sp, #128	; 0x80
   4be5a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   4be5e:	462b      	mov	r3, r5
   4be60:	464a      	mov	r2, r9
   4be62:	4631      	mov	r1, r6
   4be64:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4be66:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4be6a:	f7ff fe00 	bl	4ba6e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4be6e:	4653      	mov	r3, sl
   4be70:	aa10      	add	r2, sp, #64	; 0x40
   4be72:	a918      	add	r1, sp, #96	; 0x60
   4be74:	a808      	add	r0, sp, #32
   4be76:	9700      	str	r7, [sp, #0]
   4be78:	f7ff fc63 	bl	4b742 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   4be7c:	a908      	add	r1, sp, #32
   4be7e:	4623      	mov	r3, r4
   4be80:	4632      	mov	r2, r6
   4be82:	4608      	mov	r0, r1
   4be84:	f7ff fd07 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   4be88:	a908      	add	r1, sp, #32
   4be8a:	9a04      	ldr	r2, [sp, #16]
   4be8c:	4623      	mov	r3, r4
   4be8e:	4608      	mov	r0, r1
   4be90:	f7ff fd01 	bl	4b896 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4be94:	a908      	add	r1, sp, #32
   4be96:	463b      	mov	r3, r7
   4be98:	4652      	mov	r2, sl
   4be9a:	4608      	mov	r0, r1
   4be9c:	f7ff fe75 	bl	4bb8a <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   4bea0:	a908      	add	r1, sp, #32
   4bea2:	9a02      	ldr	r2, [sp, #8]
   4bea4:	4623      	mov	r3, r4
   4bea6:	4608      	mov	r0, r1
   4bea8:	f7ff fcf5 	bl	4b896 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   4beac:	a908      	add	r1, sp, #32
   4beae:	4623      	mov	r3, r4
   4beb0:	4642      	mov	r2, r8
   4beb2:	4608      	mov	r0, r1
   4beb4:	f7ff fcef 	bl	4b896 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4beb8:	4633      	mov	r3, r6
   4beba:	4642      	mov	r2, r8
   4bebc:	4629      	mov	r1, r5
   4bebe:	4648      	mov	r0, r9
   4bec0:	9400      	str	r4, [sp, #0]
   4bec2:	f7ff ff0a 	bl	4bcda <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   4bec6:	4623      	mov	r3, r4
   4bec8:	aa08      	add	r2, sp, #32
   4beca:	a920      	add	r1, sp, #128	; 0x80
   4becc:	a810      	add	r0, sp, #64	; 0x40
   4bece:	f7ff fee5 	bl	4bc9c <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   4bed2:	9803      	ldr	r0, [sp, #12]
   4bed4:	463a      	mov	r2, r7
   4bed6:	a910      	add	r1, sp, #64	; 0x40
   4bed8:	f7ff fbcc 	bl	4b674 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   4bedc:	9803      	ldr	r0, [sp, #12]
   4bede:	9b05      	ldr	r3, [sp, #20]
   4bee0:	a920      	add	r1, sp, #128	; 0x80
   4bee2:	4418      	add	r0, r3
   4bee4:	f7ff fbc6 	bl	4b674 <uECC_vli_set>
}
   4bee8:	b031      	add	sp, #196	; 0xc4
   4beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   4beee:	4631      	mov	r1, r6
   4bef0:	a808      	add	r0, sp, #32
   4bef2:	f7ff fb7c 	bl	4b5ee <uECC_vli_clear>
		z[0] = 1;
   4bef6:	2301      	movs	r3, #1
   4bef8:	9308      	str	r3, [sp, #32]
   4befa:	e777      	b.n	4bdec <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   4befc:	4629      	mov	r1, r5
   4befe:	4650      	mov	r0, sl
   4bf00:	f7ff fb8f 	bl	4b622 <uECC_vli_testBit>
   4bf04:	fab0 f680 	clz	r6, r0
   4bf08:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4bf0a:	f1c6 0101 	rsb	r1, r6, #1
   4bf0e:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   4bf12:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   4bf16:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   4bf1a:	4633      	mov	r3, r6
   4bf1c:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   4bf20:	465a      	mov	r2, fp
   4bf22:	9400      	str	r4, [sp, #0]
   4bf24:	e9cd 0106 	strd	r0, r1, [sp, #24]
   4bf28:	f7ff fda1 	bl	4ba6e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4bf2c:	9907      	ldr	r1, [sp, #28]
   4bf2e:	9806      	ldr	r0, [sp, #24]
   4bf30:	9400      	str	r4, [sp, #0]
   4bf32:	460b      	mov	r3, r1
   4bf34:	4602      	mov	r2, r0
   4bf36:	4631      	mov	r1, r6
   4bf38:	4658      	mov	r0, fp
   4bf3a:	f7ff fece 	bl	4bcda <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   4bf3e:	3d01      	subs	r5, #1
   4bf40:	e776      	b.n	4be30 <EccPoint_mult+0x88>

0004bf42 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   4bf42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4bf46:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   4bf4a:	f119 081f 	adds.w	r8, r9, #31
{
   4bf4e:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4bf50:	bf48      	it	mi
   4bf52:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   4bf56:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4bf58:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4bf5c:	3524      	adds	r5, #36	; 0x24
   4bf5e:	4601      	mov	r1, r0
{
   4bf60:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4bf62:	4643      	mov	r3, r8
   4bf64:	462a      	mov	r2, r5
   4bf66:	4630      	mov	r0, r6
   4bf68:	f7ff fa9a 	bl	4b4a0 <uECC_vli_add>
   4bf6c:	4604      	mov	r4, r0
   4bf6e:	b990      	cbnz	r0, 4bf96 <regularize_k+0x54>
   4bf70:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   4bf74:	da06      	bge.n	4bf84 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   4bf76:	4649      	mov	r1, r9
   4bf78:	4630      	mov	r0, r6
   4bf7a:	f7ff fb52 	bl	4b622 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   4bf7e:	1e04      	subs	r4, r0, #0
   4bf80:	bf18      	it	ne
   4bf82:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   4bf84:	4643      	mov	r3, r8
   4bf86:	462a      	mov	r2, r5
   4bf88:	4631      	mov	r1, r6
   4bf8a:	4638      	mov	r0, r7
   4bf8c:	f7ff fa88 	bl	4b4a0 <uECC_vli_add>

	return carry;
}
   4bf90:	4620      	mov	r0, r4
   4bf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4bf96:	2401      	movs	r4, #1
   4bf98:	e7f4      	b.n	4bf84 <regularize_k+0x42>

0004bf9a <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   4bf9a:	b530      	push	{r4, r5, lr}
   4bf9c:	4614      	mov	r4, r2
   4bf9e:	b095      	sub	sp, #84	; 0x54
   4bfa0:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4bfa2:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4bfa4:	4623      	mov	r3, r4
{
   4bfa6:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4bfa8:	a904      	add	r1, sp, #16
   4bfaa:	9102      	str	r1, [sp, #8]
   4bfac:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4bfae:	f7ff ffc8 	bl	4bf42 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   4bfb2:	fab0 f380 	clz	r3, r0
   4bfb6:	095b      	lsrs	r3, r3, #5
   4bfb8:	aa14      	add	r2, sp, #80	; 0x50
   4bfba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   4bfbe:	8863      	ldrh	r3, [r4, #2]
   4bfc0:	9401      	str	r4, [sp, #4]
   4bfc2:	3301      	adds	r3, #1
   4bfc4:	b21b      	sxth	r3, r3
   4bfc6:	9300      	str	r3, [sp, #0]
   4bfc8:	f852 2c48 	ldr.w	r2, [r2, #-72]
   4bfcc:	2300      	movs	r3, #0
   4bfce:	f104 0144 	add.w	r1, r4, #68	; 0x44
   4bfd2:	4628      	mov	r0, r5
   4bfd4:	f7ff fee8 	bl	4bda8 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   4bfd8:	4621      	mov	r1, r4
   4bfda:	4628      	mov	r0, r5
   4bfdc:	f7ff fe59 	bl	4bc92 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   4bfe0:	fab0 f080 	clz	r0, r0
   4bfe4:	0940      	lsrs	r0, r0, #5
   4bfe6:	b015      	add	sp, #84	; 0x54
   4bfe8:	bd30      	pop	{r4, r5, pc}

0004bfea <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   4bfea:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   4bfec:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4bfee:	1e4f      	subs	r7, r1, #1
   4bff0:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   4bff2:	428c      	cmp	r4, r1
   4bff4:	f105 0501 	add.w	r5, r5, #1
   4bff8:	db00      	blt.n	4bffc <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   4bffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4bffc:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4bffe:	f023 0603 	bic.w	r6, r3, #3
   4c002:	f003 0303 	and.w	r3, r3, #3
   4c006:	5996      	ldr	r6, [r2, r6]
   4c008:	00db      	lsls	r3, r3, #3
   4c00a:	fa26 f303 	lsr.w	r3, r6, r3
   4c00e:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   4c010:	e7ee      	b.n	4bff0 <uECC_vli_nativeToBytes+0x6>

0004c012 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   4c012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c014:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4c016:	1cd1      	adds	r1, r2, #3
   4c018:	bf48      	it	mi
   4c01a:	1d91      	addmi	r1, r2, #6
   4c01c:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4c020:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4c022:	f7ff fae4 	bl	4b5ee <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   4c026:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4c028:	1e67      	subs	r7, r4, #1
   4c02a:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   4c02c:	42a2      	cmp	r2, r4
   4c02e:	f105 0501 	add.w	r5, r5, #1
   4c032:	db00      	blt.n	4c036 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   4c034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4c036:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   4c038:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4c03c:	5cb2      	ldrb	r2, [r6, r2]
   4c03e:	f003 0303 	and.w	r3, r3, #3
   4c042:	00db      	lsls	r3, r3, #3
   4c044:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   4c048:	5842      	ldr	r2, [r0, r1]
   4c04a:	431a      	orrs	r2, r3
   4c04c:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   4c04e:	e7ec      	b.n	4c02a <uECC_vli_bytesToNative+0x18>

0004c050 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4c050:	b5f0      	push	{r4, r5, r6, r7, lr}
   4c052:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4c054:	f991 6000 	ldrsb.w	r6, [r1]
{
   4c058:	4605      	mov	r5, r0
   4c05a:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   4c05c:	f7ff fe19 	bl	4bc92 <EccPoint_isZero>
   4c060:	bb28      	cbnz	r0, 4c0ae <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4c062:	1d27      	adds	r7, r4, #4
   4c064:	4632      	mov	r2, r6
   4c066:	4629      	mov	r1, r5
   4c068:	4638      	mov	r0, r7
   4c06a:	f7ff fb0f 	bl	4b68c <uECC_vli_cmp_unsafe>
   4c06e:	2801      	cmp	r0, #1
   4c070:	d120      	bne.n	4c0b4 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4c072:	4632      	mov	r2, r6
   4c074:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   4c078:	4638      	mov	r0, r7
   4c07a:	f7ff fb07 	bl	4b68c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4c07e:	2801      	cmp	r0, #1
   4c080:	d118      	bne.n	4c0b4 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4c082:	4622      	mov	r2, r4
   4c084:	4668      	mov	r0, sp
   4c086:	f7ff fc16 	bl	4b8b6 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   4c08a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4c08e:	4622      	mov	r2, r4
   4c090:	4629      	mov	r1, r5
   4c092:	a808      	add	r0, sp, #32
   4c094:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   4c096:	4632      	mov	r2, r6
   4c098:	a908      	add	r1, sp, #32
   4c09a:	4668      	mov	r0, sp
   4c09c:	f7ff fb0b 	bl	4b6b6 <uECC_vli_equal>
		return -3;
   4c0a0:	2800      	cmp	r0, #0
   4c0a2:	bf0c      	ite	eq
   4c0a4:	2000      	moveq	r0, #0
   4c0a6:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   4c0aa:	b011      	add	sp, #68	; 0x44
   4c0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   4c0ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4c0b2:	e7fa      	b.n	4c0aa <uECC_valid_point+0x5a>
		return -2;
   4c0b4:	f06f 0001 	mvn.w	r0, #1
   4c0b8:	e7f7      	b.n	4c0aa <uECC_valid_point+0x5a>

0004c0ba <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   4c0ba:	b570      	push	{r4, r5, r6, lr}
   4c0bc:	460c      	mov	r4, r1
   4c0be:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   4c0c0:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4c0c2:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   4c0c6:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4c0c8:	4601      	mov	r1, r0
   4c0ca:	4668      	mov	r0, sp
   4c0cc:	f7ff ffa1 	bl	4c012 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   4c0d0:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   4c0d4:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   4c0d8:	18a9      	adds	r1, r5, r2
   4c0da:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   4c0de:	f7ff ff98 	bl	4c012 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   4c0e2:	2210      	movs	r2, #16
   4c0e4:	4631      	mov	r1, r6
   4c0e6:	4668      	mov	r0, sp
   4c0e8:	f7ff fad0 	bl	4b68c <uECC_vli_cmp_unsafe>
   4c0ec:	b128      	cbz	r0, 4c0fa <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   4c0ee:	4621      	mov	r1, r4
   4c0f0:	4668      	mov	r0, sp
   4c0f2:	f7ff ffad 	bl	4c050 <uECC_valid_point>
}
   4c0f6:	b010      	add	sp, #64	; 0x40
   4c0f8:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   4c0fa:	f06f 0003 	mvn.w	r0, #3
   4c0fe:	e7fa      	b.n	4c0f6 <uECC_valid_public_key+0x3c>

0004c100 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4c100:	78cb      	ldrb	r3, [r1, #3]
   4c102:	7802      	ldrb	r2, [r0, #0]
   4c104:	4053      	eors	r3, r2
   4c106:	7003      	strb	r3, [r0, #0]
   4c108:	884b      	ldrh	r3, [r1, #2]
   4c10a:	7842      	ldrb	r2, [r0, #1]
   4c10c:	4053      	eors	r3, r2
   4c10e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4c110:	680a      	ldr	r2, [r1, #0]
   4c112:	7883      	ldrb	r3, [r0, #2]
   4c114:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4c118:	7083      	strb	r3, [r0, #2]
   4c11a:	680a      	ldr	r2, [r1, #0]
   4c11c:	78c3      	ldrb	r3, [r0, #3]
   4c11e:	4053      	eors	r3, r2
   4c120:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4c122:	79cb      	ldrb	r3, [r1, #7]
   4c124:	7902      	ldrb	r2, [r0, #4]
   4c126:	4053      	eors	r3, r2
   4c128:	7103      	strb	r3, [r0, #4]
   4c12a:	88cb      	ldrh	r3, [r1, #6]
   4c12c:	7942      	ldrb	r2, [r0, #5]
   4c12e:	4053      	eors	r3, r2
   4c130:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4c132:	684a      	ldr	r2, [r1, #4]
   4c134:	7983      	ldrb	r3, [r0, #6]
   4c136:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4c13a:	7183      	strb	r3, [r0, #6]
   4c13c:	684a      	ldr	r2, [r1, #4]
   4c13e:	79c3      	ldrb	r3, [r0, #7]
   4c140:	4053      	eors	r3, r2
   4c142:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   4c144:	7acb      	ldrb	r3, [r1, #11]
   4c146:	7a02      	ldrb	r2, [r0, #8]
   4c148:	4053      	eors	r3, r2
   4c14a:	7203      	strb	r3, [r0, #8]
   4c14c:	7a42      	ldrb	r2, [r0, #9]
   4c14e:	894b      	ldrh	r3, [r1, #10]
   4c150:	4053      	eors	r3, r2
   4c152:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   4c154:	688a      	ldr	r2, [r1, #8]
   4c156:	7a83      	ldrb	r3, [r0, #10]
   4c158:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4c15c:	7283      	strb	r3, [r0, #10]
   4c15e:	688a      	ldr	r2, [r1, #8]
   4c160:	7ac3      	ldrb	r3, [r0, #11]
   4c162:	4053      	eors	r3, r2
   4c164:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   4c166:	7bcb      	ldrb	r3, [r1, #15]
   4c168:	7b02      	ldrb	r2, [r0, #12]
   4c16a:	4053      	eors	r3, r2
   4c16c:	7303      	strb	r3, [r0, #12]
   4c16e:	89cb      	ldrh	r3, [r1, #14]
   4c170:	7b42      	ldrb	r2, [r0, #13]
   4c172:	4053      	eors	r3, r2
   4c174:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   4c176:	68ca      	ldr	r2, [r1, #12]
   4c178:	7b83      	ldrb	r3, [r0, #14]
   4c17a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4c17e:	7383      	strb	r3, [r0, #14]
   4c180:	68ca      	ldr	r2, [r1, #12]
   4c182:	7bc3      	ldrb	r3, [r0, #15]
   4c184:	4053      	eors	r3, r2
   4c186:	73c3      	strb	r3, [r0, #15]
}
   4c188:	4770      	bx	lr

0004c18a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   4c18a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   4c18c:	7802      	ldrb	r2, [r0, #0]
   4c18e:	f88d 2000 	strb.w	r2, [sp]
   4c192:	7942      	ldrb	r2, [r0, #5]
   4c194:	f88d 2001 	strb.w	r2, [sp, #1]
   4c198:	7a82      	ldrb	r2, [r0, #10]
   4c19a:	f88d 2002 	strb.w	r2, [sp, #2]
   4c19e:	7bc2      	ldrb	r2, [r0, #15]
   4c1a0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   4c1a4:	7902      	ldrb	r2, [r0, #4]
   4c1a6:	f88d 2004 	strb.w	r2, [sp, #4]
   4c1aa:	7a42      	ldrb	r2, [r0, #9]
   4c1ac:	f88d 2005 	strb.w	r2, [sp, #5]
   4c1b0:	7b82      	ldrb	r2, [r0, #14]
   4c1b2:	f88d 2006 	strb.w	r2, [sp, #6]
   4c1b6:	78c2      	ldrb	r2, [r0, #3]
   4c1b8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   4c1bc:	7a02      	ldrb	r2, [r0, #8]
   4c1be:	f88d 2008 	strb.w	r2, [sp, #8]
   4c1c2:	7b42      	ldrb	r2, [r0, #13]
   4c1c4:	f88d 2009 	strb.w	r2, [sp, #9]
   4c1c8:	7882      	ldrb	r2, [r0, #2]
   4c1ca:	f88d 200a 	strb.w	r2, [sp, #10]
   4c1ce:	79c2      	ldrb	r2, [r0, #7]
   4c1d0:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   4c1d4:	7b02      	ldrb	r2, [r0, #12]
   4c1d6:	f88d 200c 	strb.w	r2, [sp, #12]
   4c1da:	7842      	ldrb	r2, [r0, #1]
   4c1dc:	7ac3      	ldrb	r3, [r0, #11]
   4c1de:	f88d 200d 	strb.w	r2, [sp, #13]
   4c1e2:	7982      	ldrb	r2, [r0, #6]
   4c1e4:	f88d 200e 	strb.w	r2, [sp, #14]
   4c1e8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4c1ec:	2310      	movs	r3, #16
   4c1ee:	466a      	mov	r2, sp
   4c1f0:	4619      	mov	r1, r3
   4c1f2:	f7ff f891 	bl	4b318 <_copy>
}
   4c1f6:	b005      	add	sp, #20
   4c1f8:	f85d fb04 	ldr.w	pc, [sp], #4

0004c1fc <mult_row_column>:
{
   4c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c1fe:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4c200:	7808      	ldrb	r0, [r1, #0]
{
   4c202:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4c204:	f7ff f897 	bl	4b336 <_double_byte>
   4c208:	4605      	mov	r5, r0
   4c20a:	7860      	ldrb	r0, [r4, #1]
   4c20c:	f7ff f893 	bl	4b336 <_double_byte>
   4c210:	78a2      	ldrb	r2, [r4, #2]
   4c212:	7863      	ldrb	r3, [r4, #1]
   4c214:	4053      	eors	r3, r2
   4c216:	78e2      	ldrb	r2, [r4, #3]
   4c218:	4053      	eors	r3, r2
   4c21a:	405d      	eors	r5, r3
   4c21c:	4045      	eors	r5, r0
   4c21e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4c220:	7860      	ldrb	r0, [r4, #1]
   4c222:	7827      	ldrb	r7, [r4, #0]
   4c224:	f7ff f887 	bl	4b336 <_double_byte>
   4c228:	4605      	mov	r5, r0
   4c22a:	78a0      	ldrb	r0, [r4, #2]
   4c22c:	f7ff f883 	bl	4b336 <_double_byte>
   4c230:	78a3      	ldrb	r3, [r4, #2]
   4c232:	405f      	eors	r7, r3
   4c234:	78e3      	ldrb	r3, [r4, #3]
   4c236:	405f      	eors	r7, r3
   4c238:	407d      	eors	r5, r7
   4c23a:	4045      	eors	r5, r0
   4c23c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4c23e:	78a0      	ldrb	r0, [r4, #2]
   4c240:	7865      	ldrb	r5, [r4, #1]
   4c242:	7827      	ldrb	r7, [r4, #0]
   4c244:	f7ff f877 	bl	4b336 <_double_byte>
   4c248:	406f      	eors	r7, r5
   4c24a:	4605      	mov	r5, r0
   4c24c:	78e0      	ldrb	r0, [r4, #3]
   4c24e:	f7ff f872 	bl	4b336 <_double_byte>
   4c252:	78e3      	ldrb	r3, [r4, #3]
   4c254:	405f      	eors	r7, r3
   4c256:	407d      	eors	r5, r7
   4c258:	4045      	eors	r5, r0
   4c25a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   4c25c:	7820      	ldrb	r0, [r4, #0]
   4c25e:	f7ff f86a 	bl	4b336 <_double_byte>
   4c262:	7863      	ldrb	r3, [r4, #1]
   4c264:	7825      	ldrb	r5, [r4, #0]
   4c266:	405d      	eors	r5, r3
   4c268:	78a3      	ldrb	r3, [r4, #2]
   4c26a:	405d      	eors	r5, r3
   4c26c:	4045      	eors	r5, r0
   4c26e:	78e0      	ldrb	r0, [r4, #3]
   4c270:	f7ff f861 	bl	4b336 <_double_byte>
   4c274:	b2ed      	uxtb	r5, r5
   4c276:	4045      	eors	r5, r0
   4c278:	70f5      	strb	r5, [r6, #3]
}
   4c27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004c27c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   4c27c:	b570      	push	{r4, r5, r6, lr}
   4c27e:	4614      	mov	r4, r2
   4c280:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   4c282:	4605      	mov	r5, r0
   4c284:	2800      	cmp	r0, #0
   4c286:	d049      	beq.n	4c31c <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   4c288:	2900      	cmp	r1, #0
   4c28a:	d049      	beq.n	4c320 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   4c28c:	2a00      	cmp	r2, #0
   4c28e:	d049      	beq.n	4c324 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   4c290:	2310      	movs	r3, #16
   4c292:	460a      	mov	r2, r1
   4c294:	4668      	mov	r0, sp
   4c296:	4619      	mov	r1, r3
   4c298:	f7ff f83e 	bl	4b318 <_copy>
	add_round_key(state, s->words);
   4c29c:	4621      	mov	r1, r4
   4c29e:	4668      	mov	r0, sp
   4c2a0:	f7ff ff2e 	bl	4c100 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   4c2a4:	3410      	adds	r4, #16
   4c2a6:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   4c2aa:	4668      	mov	r0, sp
   4c2ac:	f7e0 ff8e 	bl	2d1cc <sub_bytes>
		shift_rows(state);
   4c2b0:	4668      	mov	r0, sp
   4c2b2:	f7ff ff6a 	bl	4c18a <shift_rows>
	mult_row_column(t, s);
   4c2b6:	4669      	mov	r1, sp
   4c2b8:	a804      	add	r0, sp, #16
   4c2ba:	f7ff ff9f 	bl	4c1fc <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   4c2be:	a901      	add	r1, sp, #4
   4c2c0:	a805      	add	r0, sp, #20
   4c2c2:	f7ff ff9b 	bl	4c1fc <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   4c2c6:	a902      	add	r1, sp, #8
   4c2c8:	a806      	add	r0, sp, #24
   4c2ca:	f7ff ff97 	bl	4c1fc <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   4c2ce:	a903      	add	r1, sp, #12
   4c2d0:	a807      	add	r0, sp, #28
   4c2d2:	f7ff ff93 	bl	4c1fc <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4c2d6:	2310      	movs	r3, #16
   4c2d8:	4619      	mov	r1, r3
   4c2da:	eb0d 0203 	add.w	r2, sp, r3
   4c2de:	4668      	mov	r0, sp
   4c2e0:	f7ff f81a 	bl	4b318 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   4c2e4:	4621      	mov	r1, r4
   4c2e6:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   4c2e8:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   4c2ea:	f7ff ff09 	bl	4c100 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   4c2ee:	42a6      	cmp	r6, r4
   4c2f0:	d1db      	bne.n	4c2aa <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   4c2f2:	f7e0 ff6b 	bl	2d1cc <sub_bytes>
	shift_rows(state);
   4c2f6:	4668      	mov	r0, sp
   4c2f8:	f7ff ff47 	bl	4c18a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   4c2fc:	4631      	mov	r1, r6
   4c2fe:	4668      	mov	r0, sp
   4c300:	f7ff fefe 	bl	4c100 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   4c304:	2310      	movs	r3, #16
   4c306:	4619      	mov	r1, r3
   4c308:	466a      	mov	r2, sp
   4c30a:	4628      	mov	r0, r5
   4c30c:	f7ff f804 	bl	4b318 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   4c310:	4668      	mov	r0, sp
   4c312:	2210      	movs	r2, #16
   4c314:	2100      	movs	r1, #0
   4c316:	f7ff f80c 	bl	4b332 <_set>

	return TC_CRYPTO_SUCCESS;
   4c31a:	2001      	movs	r0, #1
}
   4c31c:	b008      	add	sp, #32
   4c31e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4c320:	4608      	mov	r0, r1
   4c322:	e7fb      	b.n	4c31c <tc_aes_encrypt+0xa0>
   4c324:	4610      	mov	r0, r2
   4c326:	e7f9      	b.n	4c31c <tc_aes_encrypt+0xa0>

0004c328 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   4c328:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4c32a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   4c32c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4c32e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   4c332:	2b00      	cmp	r3, #0
   4c334:	bfb4      	ite	lt
   4c336:	2387      	movlt	r3, #135	; 0x87
   4c338:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   4c33a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4c33e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   4c342:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   4c344:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   4c348:	d002      	beq.n	4c350 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   4c34a:	7813      	ldrb	r3, [r2, #0]
   4c34c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   4c34e:	e7f4      	b.n	4c33a <gf_double+0x12>
	}
}
   4c350:	bd10      	pop	{r4, pc}

0004c352 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   4c352:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   4c354:	b120      	cbz	r0, 4c360 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   4c356:	2258      	movs	r2, #88	; 0x58
   4c358:	2100      	movs	r1, #0
   4c35a:	f7fe ffea 	bl	4b332 <_set>
   4c35e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4c360:	bd08      	pop	{r3, pc}

0004c362 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   4c362:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4c364:	4604      	mov	r4, r0
   4c366:	b188      	cbz	r0, 4c38c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4c368:	2210      	movs	r2, #16
   4c36a:	2100      	movs	r1, #0
   4c36c:	f7fe ffe1 	bl	4b332 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   4c370:	2210      	movs	r2, #16
   4c372:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4c376:	2100      	movs	r1, #0
   4c378:	f7fe ffdb 	bl	4b332 <_set>
	s->leftover_offset = 0;
   4c37c:	2300      	movs	r3, #0
   4c37e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   4c380:	2200      	movs	r2, #0
   4c382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4c386:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   4c38a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4c38c:	bd10      	pop	{r4, pc}

0004c38e <tc_cmac_setup>:
{
   4c38e:	b570      	push	{r4, r5, r6, lr}
   4c390:	460d      	mov	r5, r1
   4c392:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   4c394:	4604      	mov	r4, r0
   4c396:	b310      	cbz	r0, 4c3de <tc_cmac_setup+0x50>
   4c398:	b311      	cbz	r1, 4c3e0 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   4c39a:	2258      	movs	r2, #88	; 0x58
   4c39c:	2100      	movs	r1, #0
   4c39e:	f7fe ffc8 	bl	4b332 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   4c3a2:	4629      	mov	r1, r5
	s->sched = sched;
   4c3a4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   4c3a6:	4630      	mov	r0, r6
   4c3a8:	f7e0 ff1c 	bl	2d1e4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4c3ac:	2210      	movs	r2, #16
   4c3ae:	2100      	movs	r1, #0
   4c3b0:	4620      	mov	r0, r4
   4c3b2:	f7fe ffbe 	bl	4b332 <_set>
	gf_double (s->K1, s->iv);
   4c3b6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   4c3ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c3bc:	4621      	mov	r1, r4
   4c3be:	4620      	mov	r0, r4
   4c3c0:	f7ff ff5c 	bl	4c27c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   4c3c4:	4621      	mov	r1, r4
   4c3c6:	4628      	mov	r0, r5
   4c3c8:	f7ff ffae 	bl	4c328 <gf_double>
	gf_double (s->K2, s->K1);
   4c3cc:	4629      	mov	r1, r5
   4c3ce:	f104 0020 	add.w	r0, r4, #32
   4c3d2:	f7ff ffa9 	bl	4c328 <gf_double>
	tc_cmac_init(s);
   4c3d6:	4620      	mov	r0, r4
   4c3d8:	f7ff ffc3 	bl	4c362 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   4c3dc:	2001      	movs	r0, #1
}
   4c3de:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4c3e0:	4608      	mov	r0, r1
   4c3e2:	e7fc      	b.n	4c3de <tc_cmac_setup+0x50>

0004c3e4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   4c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4c3e8:	460d      	mov	r5, r1
   4c3ea:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4c3ec:	4604      	mov	r4, r0
   4c3ee:	2800      	cmp	r0, #0
   4c3f0:	d061      	beq.n	4c4b6 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   4c3f2:	b912      	cbnz	r2, 4c3fa <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   4c3f4:	2001      	movs	r0, #1
}
   4c3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   4c3fa:	2900      	cmp	r1, #0
   4c3fc:	d05b      	beq.n	4c4b6 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   4c3fe:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   4c402:	ea53 0102 	orrs.w	r1, r3, r2
   4c406:	d056      	beq.n	4c4b6 <tc_cmac_update+0xd2>
	s->countdown--;
   4c408:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   4c40a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   4c40e:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   4c412:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   4c416:	f1b8 0f00 	cmp.w	r8, #0
   4c41a:	d02a      	beq.n	4c472 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   4c41c:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4c420:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   4c424:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4c426:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   4c428:	d208      	bcs.n	4c43c <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4c42a:	462a      	mov	r2, r5
   4c42c:	4633      	mov	r3, r6
   4c42e:	4631      	mov	r1, r6
   4c430:	f7fe ff72 	bl	4b318 <_copy>
			s->leftover_offset += data_length;
   4c434:	6c62      	ldr	r2, [r4, #68]	; 0x44
   4c436:	4432      	add	r2, r6
   4c438:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   4c43a:	e7db      	b.n	4c3f4 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   4c43c:	463b      	mov	r3, r7
   4c43e:	462a      	mov	r2, r5
   4c440:	4639      	mov	r1, r7
   4c442:	f7fe ff69 	bl	4b318 <_copy>
		data_length -= remaining_space;
   4c446:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   4c448:	2300      	movs	r3, #0
   4c44a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   4c44c:	4446      	add	r6, r8
		data += remaining_space;
   4c44e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c450:	1e63      	subs	r3, r4, #1
   4c452:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   4c456:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c45a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c45e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   4c460:	ea82 0200 	eor.w	r2, r2, r0
   4c464:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c466:	d1f6      	bne.n	4c456 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4c468:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c46a:	4621      	mov	r1, r4
   4c46c:	4620      	mov	r0, r4
   4c46e:	f7ff ff05 	bl	4c27c <tc_aes_encrypt>
   4c472:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   4c476:	2e10      	cmp	r6, #16
   4c478:	d80a      	bhi.n	4c490 <tc_cmac_update+0xac>
	if (data_length > 0) {
   4c47a:	2e00      	cmp	r6, #0
   4c47c:	d0ba      	beq.n	4c3f4 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   4c47e:	4633      	mov	r3, r6
   4c480:	462a      	mov	r2, r5
   4c482:	4631      	mov	r1, r6
   4c484:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4c488:	f7fe ff46 	bl	4b318 <_copy>
		s->leftover_offset = data_length;
   4c48c:	6466      	str	r6, [r4, #68]	; 0x44
   4c48e:	e7b1      	b.n	4c3f4 <tc_cmac_update+0x10>
   4c490:	1e63      	subs	r3, r4, #1
   4c492:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   4c494:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c498:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c49c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   4c49e:	ea82 0200 	eor.w	r2, r2, r0
   4c4a2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c4a4:	d1f6      	bne.n	4c494 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4c4a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c4a8:	4621      	mov	r1, r4
   4c4aa:	4620      	mov	r0, r4
   4c4ac:	f7ff fee6 	bl	4c27c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   4c4b0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   4c4b2:	3e10      	subs	r6, #16
   4c4b4:	e7df      	b.n	4c476 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   4c4b6:	2000      	movs	r0, #0
   4c4b8:	e79d      	b.n	4c3f6 <tc_cmac_update+0x12>

0004c4ba <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   4c4ba:	b570      	push	{r4, r5, r6, lr}
   4c4bc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   4c4be:	4605      	mov	r5, r0
   4c4c0:	b1e8      	cbz	r0, 4c4fe <tc_cmac_final+0x44>
   4c4c2:	b369      	cbz	r1, 4c520 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   4c4c4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   4c4c6:	2a10      	cmp	r2, #16
   4c4c8:	d11a      	bne.n	4c500 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4c4ca:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c4cc:	1e63      	subs	r3, r4, #1
   4c4ce:	3901      	subs	r1, #1
   4c4d0:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4c4d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c4d8:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   4c4dc:	4072      	eors	r2, r6
   4c4de:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c4e2:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4c4e4:	ea82 0206 	eor.w	r2, r2, r6
   4c4e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c4ea:	d1f3      	bne.n	4c4d4 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   4c4ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c4ee:	4621      	mov	r1, r4
   4c4f0:	4628      	mov	r0, r5
   4c4f2:	f7ff fec3 	bl	4c27c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   4c4f6:	4620      	mov	r0, r4
   4c4f8:	f7ff ff2b 	bl	4c352 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   4c4fc:	2001      	movs	r0, #1
}
   4c4fe:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   4c500:	f102 0030 	add.w	r0, r2, #48	; 0x30
   4c504:	2100      	movs	r1, #0
   4c506:	f1c2 0210 	rsb	r2, r2, #16
   4c50a:	4420      	add	r0, r4
   4c50c:	f7fe ff11 	bl	4b332 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   4c510:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4c512:	4423      	add	r3, r4
   4c514:	2280      	movs	r2, #128	; 0x80
   4c516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4c51a:	f104 0120 	add.w	r1, r4, #32
   4c51e:	e7d5      	b.n	4c4cc <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   4c520:	4608      	mov	r0, r1
   4c522:	e7ec      	b.n	4c4fe <tc_cmac_final+0x44>

0004c524 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   4c524:	f004 bfe1 	b.w	514ea <z_fatal_error>

0004c528 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   4c528:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   4c52a:	6800      	ldr	r0, [r0, #0]
   4c52c:	f004 bfdd 	b.w	514ea <z_fatal_error>

0004c530 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4c530:	2100      	movs	r1, #0
   4c532:	2001      	movs	r0, #1
   4c534:	f7ff bff6 	b.w	4c524 <z_arm_fatal_error>

0004c538 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   4c538:	b508      	push	{r3, lr}
	handler();
   4c53a:	f7e0 ff1b 	bl	2d374 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4c53e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4c542:	f7e0 bfdb 	b.w	2d4fc <z_arm_exc_exit>

0004c546 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   4c546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4c54a:	4607      	mov	r7, r0
   4c54c:	4688      	mov	r8, r1
	register const char *s = nptr;
   4c54e:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   4c550:	4621      	mov	r1, r4
   4c552:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   4c556:	2b20      	cmp	r3, #32
   4c558:	d0fa      	beq.n	4c550 <strtoul+0xa>
   4c55a:	f1a3 0009 	sub.w	r0, r3, #9
   4c55e:	2804      	cmp	r0, #4
   4c560:	d9f6      	bls.n	4c550 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   4c562:	2b2d      	cmp	r3, #45	; 0x2d
   4c564:	d12f      	bne.n	4c5c6 <strtoul+0x80>
		neg = 1;
		c = *s++;
   4c566:	784b      	ldrb	r3, [r1, #1]
   4c568:	1c8c      	adds	r4, r1, #2
		neg = 1;
   4c56a:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   4c56e:	2a00      	cmp	r2, #0
   4c570:	d05e      	beq.n	4c630 <strtoul+0xea>
   4c572:	2a10      	cmp	r2, #16
   4c574:	d109      	bne.n	4c58a <strtoul+0x44>
   4c576:	2b30      	cmp	r3, #48	; 0x30
   4c578:	d107      	bne.n	4c58a <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4c57a:	7823      	ldrb	r3, [r4, #0]
   4c57c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   4c580:	2b58      	cmp	r3, #88	; 0x58
   4c582:	d150      	bne.n	4c626 <strtoul+0xe0>
		c = s[1];
   4c584:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   4c586:	2210      	movs	r2, #16
		s += 2;
   4c588:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4c58a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   4c58e:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4c590:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   4c594:	fb02 fe01 	mul.w	lr, r2, r1
   4c598:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   4c59c:	4630      	mov	r0, r6
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   4c59e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   4c5a2:	2d09      	cmp	r5, #9
   4c5a4:	d816      	bhi.n	4c5d4 <strtoul+0x8e>
			c -= '0';
   4c5a6:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   4c5a8:	429a      	cmp	r2, r3
   4c5aa:	dd23      	ble.n	4c5f4 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   4c5ac:	2e00      	cmp	r6, #0
   4c5ae:	db1e      	blt.n	4c5ee <strtoul+0xa8>
   4c5b0:	4288      	cmp	r0, r1
   4c5b2:	d81c      	bhi.n	4c5ee <strtoul+0xa8>
   4c5b4:	d101      	bne.n	4c5ba <strtoul+0x74>
   4c5b6:	4573      	cmp	r3, lr
   4c5b8:	dc19      	bgt.n	4c5ee <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   4c5ba:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   4c5be:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   4c5c0:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   4c5c4:	e7eb      	b.n	4c59e <strtoul+0x58>
	} else if (c == '+') {
   4c5c6:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   4c5c8:	bf04      	itt	eq
   4c5ca:	784b      	ldrbeq	r3, [r1, #1]
   4c5cc:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   4c5ce:	f04f 0c00 	mov.w	ip, #0
   4c5d2:	e7cc      	b.n	4c56e <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   4c5d4:	f043 0520 	orr.w	r5, r3, #32
   4c5d8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   4c5da:	2d19      	cmp	r5, #25
   4c5dc:	d80a      	bhi.n	4c5f4 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   4c5de:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   4c5e2:	2d1a      	cmp	r5, #26
   4c5e4:	bf34      	ite	cc
   4c5e6:	2537      	movcc	r5, #55	; 0x37
   4c5e8:	2557      	movcs	r5, #87	; 0x57
   4c5ea:	1b5b      	subs	r3, r3, r5
   4c5ec:	e7dc      	b.n	4c5a8 <strtoul+0x62>
			any = -1;
   4c5ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4c5f2:	e7e5      	b.n	4c5c0 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   4c5f4:	2e00      	cmp	r6, #0
   4c5f6:	da0a      	bge.n	4c60e <strtoul+0xc8>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   4c5f8:	f7fb fdbc 	bl	48174 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   4c5fc:	2322      	movs	r3, #34	; 0x22
   4c5fe:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   4c600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   4c604:	f1b8 0f00 	cmp.w	r8, #0
   4c608:	d109      	bne.n	4c61e <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   4c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   4c60e:	f1bc 0f00 	cmp.w	ip, #0
   4c612:	d000      	beq.n	4c616 <strtoul+0xd0>
		acc = -acc;
   4c614:	4240      	negs	r0, r0
	if (endptr != NULL) {
   4c616:	f1b8 0f00 	cmp.w	r8, #0
   4c61a:	d0f6      	beq.n	4c60a <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   4c61c:	b106      	cbz	r6, 4c620 <strtoul+0xda>
   4c61e:	1e67      	subs	r7, r4, #1
   4c620:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   4c624:	e7f1      	b.n	4c60a <strtoul+0xc4>
	if (base == 0) {
   4c626:	2330      	movs	r3, #48	; 0x30
   4c628:	2a00      	cmp	r2, #0
   4c62a:	d1ae      	bne.n	4c58a <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   4c62c:	2208      	movs	r2, #8
   4c62e:	e7ac      	b.n	4c58a <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   4c630:	2b30      	cmp	r3, #48	; 0x30
   4c632:	d0a2      	beq.n	4c57a <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   4c634:	220a      	movs	r2, #10
   4c636:	e7a8      	b.n	4c58a <strtoul+0x44>

0004c638 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   4c638:	3901      	subs	r1, #1
   4c63a:	4603      	mov	r3, r0
   4c63c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4c640:	b90a      	cbnz	r2, 4c646 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   4c642:	701a      	strb	r2, [r3, #0]

	return dest;
}
   4c644:	4770      	bx	lr
		*d = *s;
   4c646:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   4c64a:	e7f7      	b.n	4c63c <strcpy+0x4>

0004c64c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   4c64c:	4603      	mov	r3, r0
	size_t n = 0;
   4c64e:	2000      	movs	r0, #0

	while (*s != '\0') {
   4c650:	5c1a      	ldrb	r2, [r3, r0]
   4c652:	b902      	cbnz	r2, 4c656 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   4c654:	4770      	bx	lr
		n++;
   4c656:	3001      	adds	r0, #1
   4c658:	e7fa      	b.n	4c650 <strlen+0x4>

0004c65a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   4c65a:	1e43      	subs	r3, r0, #1
   4c65c:	3901      	subs	r1, #1
   4c65e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c662:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   4c666:	4282      	cmp	r2, r0
   4c668:	d101      	bne.n	4c66e <strcmp+0x14>
   4c66a:	2a00      	cmp	r2, #0
   4c66c:	d1f7      	bne.n	4c65e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   4c66e:	1a10      	subs	r0, r2, r0
   4c670:	4770      	bx	lr

0004c672 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   4c672:	b510      	push	{r4, lr}
   4c674:	3901      	subs	r1, #1
   4c676:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   4c678:	4282      	cmp	r2, r0
   4c67a:	d009      	beq.n	4c690 <strncmp+0x1e>
   4c67c:	7803      	ldrb	r3, [r0, #0]
   4c67e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4c682:	42a3      	cmp	r3, r4
   4c684:	d100      	bne.n	4c688 <strncmp+0x16>
   4c686:	b90b      	cbnz	r3, 4c68c <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   4c688:	1b18      	subs	r0, r3, r4
   4c68a:	e002      	b.n	4c692 <strncmp+0x20>
		s1++;
   4c68c:	3001      	adds	r0, #1
		n--;
   4c68e:	e7f3      	b.n	4c678 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   4c690:	2000      	movs	r0, #0
}
   4c692:	bd10      	pop	{r4, pc}

0004c694 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   4c694:	b510      	push	{r4, lr}
   4c696:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   4c698:	b15a      	cbz	r2, 4c6b2 <memcmp+0x1e>
   4c69a:	3901      	subs	r1, #1
   4c69c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   4c69e:	f813 0b01 	ldrb.w	r0, [r3], #1
   4c6a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4c6a6:	42a3      	cmp	r3, r4
   4c6a8:	d001      	beq.n	4c6ae <memcmp+0x1a>
   4c6aa:	4290      	cmp	r0, r2
   4c6ac:	d0f7      	beq.n	4c69e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   4c6ae:	1a80      	subs	r0, r0, r2
}
   4c6b0:	bd10      	pop	{r4, pc}
		return 0;
   4c6b2:	4610      	mov	r0, r2
   4c6b4:	e7fc      	b.n	4c6b0 <memcmp+0x1c>

0004c6b6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   4c6b6:	b510      	push	{r4, lr}
   4c6b8:	1e43      	subs	r3, r0, #1
   4c6ba:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   4c6bc:	4291      	cmp	r1, r2
   4c6be:	d100      	bne.n	4c6c2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   4c6c0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   4c6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   4c6c6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   4c6ca:	e7f7      	b.n	4c6bc <memcpy+0x6>

0004c6cc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   4c6cc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   4c6ce:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   4c6d0:	4603      	mov	r3, r0
	while (n > 0) {
   4c6d2:	4293      	cmp	r3, r2
   4c6d4:	d100      	bne.n	4c6d8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   4c6d6:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4c6d8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   4c6dc:	e7f9      	b.n	4c6d2 <memset+0x6>

0004c6de <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   4c6de:	684b      	ldr	r3, [r1, #4]
   4c6e0:	2b01      	cmp	r3, #1
   4c6e2:	dd07      	ble.n	4c6f4 <sprintf_out+0x16>
		*(p->ptr) = c;
   4c6e4:	680b      	ldr	r3, [r1, #0]
   4c6e6:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   4c6e8:	680b      	ldr	r3, [r1, #0]
   4c6ea:	3301      	adds	r3, #1
   4c6ec:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   4c6ee:	684b      	ldr	r3, [r1, #4]
   4c6f0:	3b01      	subs	r3, #1
   4c6f2:	604b      	str	r3, [r1, #4]
}
   4c6f4:	2000      	movs	r0, #0
   4c6f6:	4770      	bx	lr

0004c6f8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   4c6f8:	b084      	sub	sp, #16
   4c6fa:	ab04      	add	r3, sp, #16
   4c6fc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   4c700:	f89d 3004 	ldrb.w	r3, [sp, #4]
   4c704:	2b06      	cmp	r3, #6
   4c706:	d108      	bne.n	4c71a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4c708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4c70c:	2201      	movs	r2, #1
   4c70e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   4c712:	f3bf 8f4f 	dsb	sy
        __WFE();
   4c716:	bf20      	wfe
    while (true)
   4c718:	e7fd      	b.n	4c716 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   4c71a:	b004      	add	sp, #16
   4c71c:	4770      	bx	lr

0004c71e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   4c71e:	b084      	sub	sp, #16
   4c720:	ab04      	add	r3, sp, #16
   4c722:	e903 0007 	stmdb	r3, {r0, r1, r2}
   4c726:	2300      	movs	r3, #0
   4c728:	f383 8811 	msr	BASEPRI, r3
   4c72c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4c730:	b004      	add	sp, #16
   4c732:	4770      	bx	lr

0004c734 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   4c734:	b530      	push	{r4, r5, lr}
   4c736:	b085      	sub	sp, #20
   4c738:	4604      	mov	r4, r0
   4c73a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   4c73c:	4668      	mov	r0, sp
   4c73e:	2203      	movs	r2, #3
   4c740:	f7ff ffb9 	bl	4c6b6 <memcpy>
	(void)memset(res + 3, 0, 13);
   4c744:	220d      	movs	r2, #13
   4c746:	2100      	movs	r1, #0
   4c748:	f10d 0003 	add.w	r0, sp, #3
   4c74c:	f7ff ffbe 	bl	4c6cc <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   4c750:	4620      	mov	r0, r4
   4c752:	466a      	mov	r2, sp
   4c754:	4669      	mov	r1, sp
   4c756:	f7ea ffd7 	bl	37708 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   4c75a:	4604      	mov	r4, r0
   4c75c:	b920      	cbnz	r0, 4c768 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   4c75e:	2203      	movs	r2, #3
   4c760:	4669      	mov	r1, sp
   4c762:	4628      	mov	r0, r5
   4c764:	f7ff ffa7 	bl	4c6b6 <memcpy>

	return 0;
}
   4c768:	4620      	mov	r0, r4
   4c76a:	b005      	add	sp, #20
   4c76c:	bd30      	pop	{r4, r5, pc}

0004c76e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   4c76e:	b513      	push	{r0, r1, r4, lr}
   4c770:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   4c772:	aa01      	add	r2, sp, #4
   4c774:	3103      	adds	r1, #3
   4c776:	f7ff ffdd 	bl	4c734 <ah>
	if (err) {
   4c77a:	b948      	cbnz	r0, 4c790 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   4c77c:	2203      	movs	r2, #3
   4c77e:	a901      	add	r1, sp, #4
   4c780:	4620      	mov	r0, r4
   4c782:	f7ff ff87 	bl	4c694 <memcmp>
   4c786:	fab0 f080 	clz	r0, r0
   4c78a:	0940      	lsrs	r0, r0, #5
}
   4c78c:	b002      	add	sp, #8
   4c78e:	bd10      	pop	{r4, pc}
		return false;
   4c790:	2000      	movs	r0, #0
   4c792:	e7fb      	b.n	4c78c <bt_rpa_irk_matches+0x1e>

0004c794 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   4c794:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   4c796:	1cce      	adds	r6, r1, #3
{
   4c798:	4605      	mov	r5, r0
   4c79a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   4c79c:	4630      	mov	r0, r6
   4c79e:	2103      	movs	r1, #3
   4c7a0:	f7ea ffb0 	bl	37704 <bt_rand>
	if (err) {
   4c7a4:	b960      	cbnz	r0, 4c7c0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   4c7a6:	7963      	ldrb	r3, [r4, #5]
   4c7a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4c7b0:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   4c7b2:	4622      	mov	r2, r4
   4c7b4:	4631      	mov	r1, r6
   4c7b6:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   4c7b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   4c7bc:	f7ff bfba 	b.w	4c734 <ah>
}
   4c7c0:	bd70      	pop	{r4, r5, r6, pc}

0004c7c2 <send_cmd_status>:
{
   4c7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4c7c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4c7ca:	4606      	mov	r6, r0
   4c7cc:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4c7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c7d2:	2100      	movs	r1, #0
   4c7d4:	200f      	movs	r0, #15
   4c7d6:	f7e1 fbd1 	bl	2df7c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   4c7da:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   4c7dc:	f100 0808 	add.w	r8, r0, #8
   4c7e0:	4604      	mov	r4, r0
   4c7e2:	7507      	strb	r7, [r0, #20]
   4c7e4:	2102      	movs	r1, #2
   4c7e6:	4640      	mov	r0, r8
   4c7e8:	f003 ff8e 	bl	50708 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4c7ec:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   4c7ee:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4c7f0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   4c7f2:	7041      	strb	r1, [r0, #1]
   4c7f4:	4640      	mov	r0, r8
   4c7f6:	f003 ff87 	bl	50708 <net_buf_simple_add>
	evt->ncmd = 1U;
   4c7fa:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   4c7fc:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   4c7fe:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   4c800:	4620      	mov	r0, r4
}
   4c802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   4c806:	f7e2 b965 	b.w	2ead4 <bt_recv_prio>

0004c80a <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   4c80a:	f101 0320 	add.w	r3, r1, #32
   4c80e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   4c810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4c814:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   4c818:	428b      	cmp	r3, r1
   4c81a:	d1f9      	bne.n	4c810 <sys_memcpy_swap.constprop.0+0x6>
}
   4c81c:	4770      	bx	lr

0004c81e <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   4c81e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4c822:	f043 0306 	orr.w	r3, r3, #6
   4c826:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   4c82a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   4c82e:	f043 0304 	orr.w	r3, r3, #4
   4c832:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   4c836:	4770      	bx	lr

0004c838 <default_CSPRNG>:
{
   4c838:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   4c83a:	f7ea ff63 	bl	37704 <bt_rand>
}
   4c83e:	fab0 f080 	clz	r0, r0
   4c842:	0940      	lsrs	r0, r0, #5
   4c844:	bd08      	pop	{r3, pc}

0004c846 <bt_settings_decode_key>:
{
   4c846:	b570      	push	{r4, r5, r6, lr}
   4c848:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   4c84a:	2100      	movs	r1, #0
{
   4c84c:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   4c84e:	f7fe fc67 	bl	4b120 <settings_name_next>
   4c852:	280d      	cmp	r0, #13
   4c854:	d118      	bne.n	4c888 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   4c856:	7b23      	ldrb	r3, [r4, #12]
   4c858:	2b30      	cmp	r3, #48	; 0x30
   4c85a:	d111      	bne.n	4c880 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   4c85c:	2300      	movs	r3, #0
   4c85e:	702b      	strb	r3, [r5, #0]
   4c860:	f104 060c 	add.w	r6, r4, #12
   4c864:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4c866:	462a      	mov	r2, r5
   4c868:	4620      	mov	r0, r4
   4c86a:	2301      	movs	r3, #1
   4c86c:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   4c86e:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4c870:	f7fd fd9f 	bl	4a3b2 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   4c874:	42b4      	cmp	r4, r6
   4c876:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   4c87a:	d1f4      	bne.n	4c866 <bt_settings_decode_key+0x20>
	return 0;
   4c87c:	2000      	movs	r0, #0
}
   4c87e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   4c880:	2b31      	cmp	r3, #49	; 0x31
   4c882:	d101      	bne.n	4c888 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   4c884:	2301      	movs	r3, #1
   4c886:	e7ea      	b.n	4c85e <bt_settings_decode_key+0x18>
		return -EINVAL;
   4c888:	f06f 0015 	mvn.w	r0, #21
   4c88c:	e7f7      	b.n	4c87e <bt_settings_decode_key+0x38>

0004c88e <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   4c88e:	f7e0 b9b9 	b.w	2cc04 <settings_subsys_init>

0004c892 <bt_uuid_cmp>:
{
   4c892:	b510      	push	{r4, lr}
   4c894:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   4c896:	7801      	ldrb	r1, [r0, #0]
   4c898:	7822      	ldrb	r2, [r4, #0]
   4c89a:	428a      	cmp	r2, r1
{
   4c89c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   4c89e:	d00f      	beq.n	4c8c0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   4c8a0:	4669      	mov	r1, sp
   4c8a2:	f7e1 faad 	bl	2de00 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   4c8a6:	a905      	add	r1, sp, #20
   4c8a8:	4620      	mov	r0, r4
   4c8aa:	f7e1 faa9 	bl	2de00 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   4c8ae:	2210      	movs	r2, #16
   4c8b0:	f10d 0115 	add.w	r1, sp, #21
   4c8b4:	f10d 0001 	add.w	r0, sp, #1
   4c8b8:	f7ff feec 	bl	4c694 <memcmp>
}
   4c8bc:	b00a      	add	sp, #40	; 0x28
   4c8be:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   4c8c0:	2a01      	cmp	r2, #1
   4c8c2:	d006      	beq.n	4c8d2 <bt_uuid_cmp+0x40>
   4c8c4:	2a02      	cmp	r2, #2
   4c8c6:	d007      	beq.n	4c8d8 <bt_uuid_cmp+0x46>
   4c8c8:	b972      	cbnz	r2, 4c8e8 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   4c8ca:	8840      	ldrh	r0, [r0, #2]
   4c8cc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   4c8ce:	1ac0      	subs	r0, r0, r3
   4c8d0:	e7f4      	b.n	4c8bc <bt_uuid_cmp+0x2a>
   4c8d2:	6840      	ldr	r0, [r0, #4]
   4c8d4:	6863      	ldr	r3, [r4, #4]
   4c8d6:	e7fa      	b.n	4c8ce <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4c8d8:	2210      	movs	r2, #16
   4c8da:	1c61      	adds	r1, r4, #1
   4c8dc:	3001      	adds	r0, #1
}
   4c8de:	b00a      	add	sp, #40	; 0x28
   4c8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4c8e4:	f7ff bed6 	b.w	4c694 <memcmp>
	switch (u1->type) {
   4c8e8:	f06f 0015 	mvn.w	r0, #21
   4c8ec:	e7e6      	b.n	4c8bc <bt_uuid_cmp+0x2a>

0004c8ee <bt_uuid_create>:
	switch (data_len) {
   4c8ee:	2a04      	cmp	r2, #4
{
   4c8f0:	b510      	push	{r4, lr}
	switch (data_len) {
   4c8f2:	d00a      	beq.n	4c90a <bt_uuid_create+0x1c>
   4c8f4:	2a10      	cmp	r2, #16
   4c8f6:	d00d      	beq.n	4c914 <bt_uuid_create+0x26>
   4c8f8:	2a02      	cmp	r2, #2
   4c8fa:	f04f 0300 	mov.w	r3, #0
   4c8fe:	d10f      	bne.n	4c920 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   4c900:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   4c902:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4c904:	8043      	strh	r3, [r0, #2]
	return true;
   4c906:	2001      	movs	r0, #1
}
   4c908:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   4c90a:	2301      	movs	r3, #1
   4c90c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4c90e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4c910:	6042      	str	r2, [r0, #4]
		break;
   4c912:	e7f8      	b.n	4c906 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   4c914:	2302      	movs	r3, #2
   4c916:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   4c91a:	f7ff fecc 	bl	4c6b6 <memcpy>
		break;
   4c91e:	e7f2      	b.n	4c906 <bt_uuid_create+0x18>
	switch (data_len) {
   4c920:	4618      	mov	r0, r3
   4c922:	e7f1      	b.n	4c908 <bt_uuid_create+0x1a>

0004c924 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4c924:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   4c926:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   4c928:	2106      	movs	r1, #6
{
   4c92a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   4c92c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4c930:	f7ea fee8 	bl	37704 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4c934:	b918      	cbnz	r0, 4c93e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   4c936:	79a3      	ldrb	r3, [r4, #6]
   4c938:	f063 033f 	orn	r3, r3, #63	; 0x3f
   4c93c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   4c93e:	bd10      	pop	{r4, pc}

0004c940 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   4c940:	280f      	cmp	r0, #15
   4c942:	d806      	bhi.n	4c952 <bt_hci_evt_get_flags+0x12>
   4c944:	280d      	cmp	r0, #13
   4c946:	d80b      	bhi.n	4c960 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   4c948:	2805      	cmp	r0, #5
   4c94a:	bf14      	ite	ne
   4c94c:	2002      	movne	r0, #2
   4c94e:	2003      	moveq	r0, #3
   4c950:	4770      	bx	lr
	switch (evt) {
   4c952:	2813      	cmp	r0, #19
   4c954:	d004      	beq.n	4c960 <bt_hci_evt_get_flags+0x20>
   4c956:	281a      	cmp	r0, #26
   4c958:	bf14      	ite	ne
   4c95a:	2002      	movne	r0, #2
   4c95c:	2001      	moveq	r0, #1
   4c95e:	4770      	bx	lr
   4c960:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   4c962:	4770      	bx	lr

0004c964 <handle_event>:
{
   4c964:	b410      	push	{r4}
   4c966:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   4c96a:	4604      	mov	r4, r0
   4c96c:	4608      	mov	r0, r1
		if (handler->event != event) {
   4c96e:	7811      	ldrb	r1, [r2, #0]
   4c970:	42a1      	cmp	r1, r4
   4c972:	d004      	beq.n	4c97e <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   4c974:	3208      	adds	r2, #8
   4c976:	429a      	cmp	r2, r3
   4c978:	d1f9      	bne.n	4c96e <handle_event+0xa>
}
   4c97a:	bc10      	pop	{r4}
   4c97c:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   4c97e:	8981      	ldrh	r1, [r0, #12]
   4c980:	7853      	ldrb	r3, [r2, #1]
   4c982:	4299      	cmp	r1, r3
   4c984:	d3f9      	bcc.n	4c97a <handle_event+0x16>
		handler->handler(buf);
   4c986:	6853      	ldr	r3, [r2, #4]
}
   4c988:	bc10      	pop	{r4}
		handler->handler(buf);
   4c98a:	4718      	bx	r3

0004c98c <hci_data_buf_overflow>:
}
   4c98c:	4770      	bx	lr

0004c98e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   4c98e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   4c992:	b193      	cbz	r3, 4c9ba <update_sec_level+0x2c>
   4c994:	7b5a      	ldrb	r2, [r3, #13]
   4c996:	07d1      	lsls	r1, r2, #31
   4c998:	d50f      	bpl.n	4c9ba <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   4c99a:	06d2      	lsls	r2, r2, #27
   4c99c:	d50b      	bpl.n	4c9b6 <update_sec_level+0x28>
   4c99e:	7b1b      	ldrb	r3, [r3, #12]
   4c9a0:	2b10      	cmp	r3, #16
   4c9a2:	d108      	bne.n	4c9b6 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   4c9a4:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   4c9a6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   4c9a8:	7a82      	ldrb	r2, [r0, #10]
   4c9aa:	7a40      	ldrb	r0, [r0, #9]
}
   4c9ac:	4282      	cmp	r2, r0
   4c9ae:	bf8c      	ite	hi
   4c9b0:	2000      	movhi	r0, #0
   4c9b2:	2001      	movls	r0, #1
   4c9b4:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   4c9b6:	2303      	movs	r3, #3
   4c9b8:	e7f5      	b.n	4c9a6 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   4c9ba:	2302      	movs	r3, #2
   4c9bc:	e7f3      	b.n	4c9a6 <update_sec_level+0x18>

0004c9be <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4c9be:	2207      	movs	r2, #7
   4c9c0:	f7ff be79 	b.w	4c6b6 <memcpy>

0004c9c4 <atomic_or>:
{
   4c9c4:	4603      	mov	r3, r0
}
   4c9c6:	f3bf 8f5b 	dmb	ish
   4c9ca:	e853 0f00 	ldrex	r0, [r3]
   4c9ce:	ea40 0201 	orr.w	r2, r0, r1
   4c9d2:	e843 2c00 	strex	ip, r2, [r3]
   4c9d6:	f1bc 0f00 	cmp.w	ip, #0
   4c9da:	d1f6      	bne.n	4c9ca <atomic_or+0x6>
   4c9dc:	f3bf 8f5b 	dmb	ish
   4c9e0:	4770      	bx	lr

0004c9e2 <atomic_and>:
{
   4c9e2:	4603      	mov	r3, r0
}
   4c9e4:	f3bf 8f5b 	dmb	ish
   4c9e8:	e853 0f00 	ldrex	r0, [r3]
   4c9ec:	ea00 0201 	and.w	r2, r0, r1
   4c9f0:	e843 2c00 	strex	ip, r2, [r3]
   4c9f4:	f1bc 0f00 	cmp.w	ip, #0
   4c9f8:	d1f6      	bne.n	4c9e8 <atomic_and+0x6>
   4c9fa:	f3bf 8f5b 	dmb	ish
   4c9fe:	4770      	bx	lr

0004ca00 <unpair_remote>:
{
   4ca00:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   4ca02:	4601      	mov	r1, r0
   4ca04:	7818      	ldrb	r0, [r3, #0]
   4ca06:	f7e1 bae3 	b.w	2dfd0 <unpair>

0004ca0a <le_data_len_change>:
{
   4ca0a:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4ca0c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4ca0e:	8818      	ldrh	r0, [r3, #0]
   4ca10:	f7e3 fbc4 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4ca14:	b118      	cbz	r0, 4ca1e <le_data_len_change+0x14>
}
   4ca16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   4ca1a:	f000 be8b 	b.w	4d734 <bt_conn_unref>
}
   4ca1e:	bd08      	pop	{r3, pc}

0004ca20 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   4ca20:	2101      	movs	r1, #1
   4ca22:	3008      	adds	r0, #8
   4ca24:	f003 bea1 	b.w	5076a <net_buf_simple_pull_mem>

0004ca28 <le_conn_update_complete>:
{
   4ca28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   4ca2a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4ca2c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4ca30:	f7e3 fbb4 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4ca34:	4604      	mov	r4, r0
   4ca36:	2800      	cmp	r0, #0
   4ca38:	d03c      	beq.n	4cab4 <le_conn_update_complete+0x8c>
	if (!evt->status) {
   4ca3a:	782b      	ldrb	r3, [r5, #0]
   4ca3c:	b9cb      	cbnz	r3, 4ca72 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   4ca3e:	792a      	ldrb	r2, [r5, #4]
   4ca40:	78eb      	ldrb	r3, [r5, #3]
   4ca42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4ca46:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   4ca4a:	79aa      	ldrb	r2, [r5, #6]
   4ca4c:	796b      	ldrb	r3, [r5, #5]
   4ca4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4ca52:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4ca56:	79eb      	ldrb	r3, [r5, #7]
   4ca58:	7a2a      	ldrb	r2, [r5, #8]
   4ca5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4ca5e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   4ca62:	f7e3 fc8f 	bl	30384 <notify_le_param_updated>
	bt_conn_unref(conn);
   4ca66:	4620      	mov	r0, r4
}
   4ca68:	b003      	add	sp, #12
   4ca6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   4ca6e:	f000 be61 	b.w	4d734 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   4ca72:	2b1a      	cmp	r3, #26
   4ca74:	d1f7      	bne.n	4ca66 <le_conn_update_complete+0x3e>
   4ca76:	78c3      	ldrb	r3, [r0, #3]
   4ca78:	2b01      	cmp	r3, #1
   4ca7a:	d1f4      	bne.n	4ca66 <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   4ca7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   4ca80:	3004      	adds	r0, #4
   4ca82:	f7ff ff9f 	bl	4c9c4 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4ca86:	0543      	lsls	r3, r0, #21
   4ca88:	d4ed      	bmi.n	4ca66 <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   4ca8a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   4ca8e:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   4ca92:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   4ca96:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   4ca9a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   4ca9e:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   4caa2:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   4caa4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   4caa8:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   4caac:	4620      	mov	r0, r4
   4caae:	f7e4 f90d 	bl	30ccc <bt_l2cap_update_conn_param>
   4cab2:	e7d8      	b.n	4ca66 <le_conn_update_complete+0x3e>
}
   4cab4:	b003      	add	sp, #12
   4cab6:	bd30      	pop	{r4, r5, pc}

0004cab8 <hci_vendor_event>:
   4cab8:	4770      	bx	lr

0004caba <sys_put_le64>:
	dst[1] = val >> 8;
   4caba:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   4cabe:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   4cac0:	0e00      	lsrs	r0, r0, #24
   4cac2:	7053      	strb	r3, [r2, #1]
   4cac4:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   4cac6:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   4cac8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   4cacc:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   4cace:	7093      	strb	r3, [r2, #2]
   4cad0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   4cad2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   4cad4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   4cad6:	71d1      	strb	r1, [r2, #7]
}
   4cad8:	4770      	bx	lr

0004cada <hci_num_completed_packets>:
{
   4cada:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   4cade:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4cae0:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   4cae2:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   4cae4:	783b      	ldrb	r3, [r7, #0]
   4cae6:	429d      	cmp	r5, r3
   4cae8:	db01      	blt.n	4caee <hci_num_completed_packets+0x14>
}
   4caea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   4caee:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4caf2:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   4caf6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   4cafa:	f7e3 fb4f 	bl	3019c <bt_conn_lookup_handle>
		if (!conn) {
   4cafe:	4604      	mov	r4, r0
   4cb00:	b350      	cbz	r0, 4cb58 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   4cb02:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   4cb06:	b326      	cbz	r6, 4cb52 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   4cb08:	f04f 0320 	mov.w	r3, #32
   4cb0c:	f3ef 8211 	mrs	r2, BASEPRI
   4cb10:	f383 8812 	msr	BASEPRI_MAX, r3
   4cb14:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4cb18:	69e3      	ldr	r3, [r4, #28]
   4cb1a:	b16b      	cbz	r3, 4cb38 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   4cb1c:	3b01      	subs	r3, #1
   4cb1e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   4cb20:	f382 8811 	msr	BASEPRI, r2
   4cb24:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4cb28:	4620      	mov	r0, r4
   4cb2a:	f7e3 fa8d 	bl	30048 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   4cb2e:	3e01      	subs	r6, #1
   4cb30:	f7fb febe 	bl	488b0 <z_impl_k_sem_give>
   4cb34:	b2b6      	uxth	r6, r6
   4cb36:	e7e6      	b.n	4cb06 <hci_num_completed_packets+0x2c>
	return list->head;
   4cb38:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   4cb3a:	b12b      	cbz	r3, 4cb48 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4cb3c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   4cb3e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   4cb40:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4cb42:	428b      	cmp	r3, r1
	list->tail = node;
   4cb44:	bf08      	it	eq
   4cb46:	61a0      	streq	r0, [r4, #24]
   4cb48:	f382 8811 	msr	BASEPRI, r2
   4cb4c:	f3bf 8f6f 	isb	sy
			if (!node) {
   4cb50:	b923      	cbnz	r3, 4cb5c <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   4cb52:	4620      	mov	r0, r4
   4cb54:	f000 fdee 	bl	4d734 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4cb58:	3501      	adds	r5, #1
   4cb5a:	e7c3      	b.n	4cae4 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   4cb5c:	f04f 0220 	mov.w	r2, #32
   4cb60:	f3ef 8111 	mrs	r1, BASEPRI
   4cb64:	f382 8812 	msr	BASEPRI_MAX, r2
   4cb68:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   4cb6c:	68da      	ldr	r2, [r3, #12]
   4cb6e:	61e2      	str	r2, [r4, #28]
	return list->tail;
   4cb70:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   4cb72:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   4cb76:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   4cb7a:	b94a      	cbnz	r2, 4cb90 <hci_num_completed_packets+0xb6>
	list->head = node;
   4cb7c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   4cb80:	f381 8811 	msr	BASEPRI, r1
   4cb84:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   4cb88:	4648      	mov	r0, r9
   4cb8a:	f7fb fffd 	bl	48b88 <k_work_submit>
   4cb8e:	e7cb      	b.n	4cb28 <hci_num_completed_packets+0x4e>
	parent->next = child;
   4cb90:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4cb92:	6263      	str	r3, [r4, #36]	; 0x24
}
   4cb94:	e7f4      	b.n	4cb80 <hci_num_completed_packets+0xa6>

0004cb96 <hci_disconn_complete>:
{
   4cb96:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4cb98:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   4cb9a:	7835      	ldrb	r5, [r6, #0]
   4cb9c:	bb0d      	cbnz	r5, 4cbe2 <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   4cb9e:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   4cba2:	f7e3 fafb 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4cba6:	4604      	mov	r4, r0
   4cba8:	b1d8      	cbz	r0, 4cbe2 <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   4cbaa:	78f3      	ldrb	r3, [r6, #3]
   4cbac:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4cbae:	4629      	mov	r1, r5
   4cbb0:	f7e3 fafc 	bl	301ac <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   4cbb4:	78a3      	ldrb	r3, [r4, #2]
   4cbb6:	2b01      	cmp	r3, #1
   4cbb8:	d004      	beq.n	4cbc4 <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   4cbba:	4620      	mov	r0, r4
}
   4cbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4cbc0:	f000 bdb8 	b.w	4d734 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4cbc4:	f3bf 8f5b 	dmb	ish
   4cbc8:	6863      	ldr	r3, [r4, #4]
   4cbca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   4cbce:	07db      	lsls	r3, r3, #31
   4cbd0:	d5f3      	bpl.n	4cbba <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   4cbd2:	4620      	mov	r0, r4
   4cbd4:	2102      	movs	r1, #2
   4cbd6:	f7e3 fae9 	bl	301ac <bt_conn_set_state>
		bt_le_scan_update(false);
   4cbda:	4628      	mov	r0, r5
   4cbdc:	f7e2 feaa 	bl	2f934 <bt_le_scan_update>
   4cbe0:	e7eb      	b.n	4cbba <hci_disconn_complete+0x24>
}
   4cbe2:	bd70      	pop	{r4, r5, r6, pc}

0004cbe4 <le_ltk_request>:
{
   4cbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   4cbe6:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   4cbe8:	8826      	ldrh	r6, [r4, #0]
{
   4cbea:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   4cbec:	b2b0      	uxth	r0, r6
   4cbee:	f7e3 fad5 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4cbf2:	4605      	mov	r5, r0
   4cbf4:	b318      	cbz	r0, 4cc3e <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   4cbf6:	af02      	add	r7, sp, #8
   4cbf8:	f8d4 2002 	ldr.w	r2, [r4, #2]
   4cbfc:	f8d4 3006 	ldr.w	r3, [r4, #6]
   4cc00:	9701      	str	r7, [sp, #4]
   4cc02:	8961      	ldrh	r1, [r4, #10]
   4cc04:	9100      	str	r1, [sp, #0]
   4cc06:	f003 f9db 	bl	4ffc0 <bt_smp_request_ltk>
   4cc0a:	b1d0      	cbz	r0, 4cc42 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   4cc0c:	2112      	movs	r1, #18
   4cc0e:	f242 001a 	movw	r0, #8218	; 0x201a
   4cc12:	f7e1 fb9f 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4cc16:	4604      	mov	r4, r0
   4cc18:	b170      	cbz	r0, 4cc38 <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   4cc1a:	2112      	movs	r1, #18
   4cc1c:	3008      	adds	r0, #8
   4cc1e:	f003 fd73 	bl	50708 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4cc22:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   4cc24:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4cc28:	2210      	movs	r2, #16
   4cc2a:	f7ff fd44 	bl	4c6b6 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   4cc2e:	4621      	mov	r1, r4
   4cc30:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4cc34:	f7e1 fbc8 	bl	2e3c8 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4cc38:	4628      	mov	r0, r5
   4cc3a:	f000 fd7b 	bl	4d734 <bt_conn_unref>
}
   4cc3e:	b007      	add	sp, #28
   4cc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   4cc42:	2102      	movs	r1, #2
   4cc44:	f242 001b 	movw	r0, #8219	; 0x201b
   4cc48:	f7e1 fb84 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4cc4c:	4604      	mov	r4, r0
   4cc4e:	2800      	cmp	r0, #0
   4cc50:	d0f2      	beq.n	4cc38 <le_ltk_request+0x54>
   4cc52:	2102      	movs	r1, #2
   4cc54:	3008      	adds	r0, #8
   4cc56:	f003 fd57 	bl	50708 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4cc5a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   4cc5c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4cc5e:	f242 001b 	movw	r0, #8219	; 0x201b
   4cc62:	e7e7      	b.n	4cc34 <le_ltk_request+0x50>

0004cc64 <le_conn_param_neg_reply>:
{
   4cc64:	b570      	push	{r4, r5, r6, lr}
   4cc66:	4606      	mov	r6, r0
   4cc68:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4cc6a:	f242 0021 	movw	r0, #8225	; 0x2021
   4cc6e:	2103      	movs	r1, #3
   4cc70:	f7e1 fb70 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4cc74:	4604      	mov	r4, r0
   4cc76:	b160      	cbz	r0, 4cc92 <le_conn_param_neg_reply+0x2e>
   4cc78:	2103      	movs	r1, #3
   4cc7a:	3008      	adds	r0, #8
   4cc7c:	f003 fd44 	bl	50708 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   4cc80:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   4cc82:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4cc84:	4621      	mov	r1, r4
   4cc86:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4cc8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4cc8e:	f7e1 bb9b 	b.w	2e3c8 <bt_hci_cmd_send>
}
   4cc92:	bd70      	pop	{r4, r5, r6, pc}

0004cc94 <le_conn_param_req>:
{
   4cc94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4cc96:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4cc98:	78d9      	ldrb	r1, [r3, #3]
   4cc9a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   4cc9c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4cc9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4cca2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4cca6:	7959      	ldrb	r1, [r3, #5]
   4cca8:	791a      	ldrb	r2, [r3, #4]
   4ccaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4ccae:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   4ccb2:	799a      	ldrb	r2, [r3, #6]
   4ccb4:	79d9      	ldrb	r1, [r3, #7]
   4ccb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4ccba:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4ccbe:	7a1a      	ldrb	r2, [r3, #8]
   4ccc0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   4ccc2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4ccc4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   4ccc8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4ccca:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   4ccce:	f7e3 fa65 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4ccd2:	4606      	mov	r6, r0
   4ccd4:	b928      	cbnz	r0, 4cce2 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4ccd6:	2102      	movs	r1, #2
   4ccd8:	4620      	mov	r0, r4
   4ccda:	f7ff ffc3 	bl	4cc64 <le_conn_param_neg_reply>
}
   4ccde:	b003      	add	sp, #12
   4cce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   4cce2:	4669      	mov	r1, sp
   4cce4:	f7e3 fbb2 	bl	3044c <le_param_req>
   4cce8:	b938      	cbnz	r0, 4ccfa <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   4ccea:	211e      	movs	r1, #30
   4ccec:	4620      	mov	r0, r4
   4ccee:	f7ff ffb9 	bl	4cc64 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   4ccf2:	4630      	mov	r0, r6
   4ccf4:	f000 fd1e 	bl	4d734 <bt_conn_unref>
   4ccf8:	e7f1      	b.n	4ccde <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   4ccfa:	210e      	movs	r1, #14
   4ccfc:	f242 0020 	movw	r0, #8224	; 0x2020
   4cd00:	f7e1 fb28 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4cd04:	4605      	mov	r5, r0
   4cd06:	2800      	cmp	r0, #0
   4cd08:	d0f3      	beq.n	4ccf2 <le_conn_param_req+0x5e>
   4cd0a:	210e      	movs	r1, #14
   4cd0c:	3008      	adds	r0, #8
   4cd0e:	f003 fcfb 	bl	50708 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   4cd12:	220e      	movs	r2, #14
   4cd14:	4604      	mov	r4, r0
   4cd16:	2100      	movs	r1, #0
   4cd18:	f7ff fcd8 	bl	4c6cc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   4cd1c:	f8bd 3000 	ldrh.w	r3, [sp]
   4cd20:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   4cd22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4cd26:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4cd28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4cd2c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4cd2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   4cd32:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4cd34:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   4cd36:	4629      	mov	r1, r5
   4cd38:	f242 0020 	movw	r0, #8224	; 0x2020
   4cd3c:	f7e1 fb44 	bl	2e3c8 <bt_hci_cmd_send>
   4cd40:	e7d7      	b.n	4ccf2 <le_conn_param_req+0x5e>

0004cd42 <hci_le_read_max_data_len>:
{
   4cd42:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4cd44:	4606      	mov	r6, r0
   4cd46:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4cd48:	aa01      	add	r2, sp, #4
   4cd4a:	2100      	movs	r1, #0
   4cd4c:	f242 002f 	movw	r0, #8239	; 0x202f
   4cd50:	f7e1 fb5c 	bl	2e40c <bt_hci_cmd_send_sync>
	if (err) {
   4cd54:	4604      	mov	r4, r0
   4cd56:	b948      	cbnz	r0, 4cd6c <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4cd58:	9801      	ldr	r0, [sp, #4]
   4cd5a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   4cd5c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   4cd60:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   4cd62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4cd66:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4cd68:	f7f7 f9a4 	bl	440b4 <net_buf_unref>
}
   4cd6c:	4620      	mov	r0, r4
   4cd6e:	b002      	add	sp, #8
   4cd70:	bd70      	pop	{r4, r5, r6, pc}

0004cd72 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   4cd72:	f7e1 bbb7 	b.w	2e4e4 <bt_le_create_conn_legacy>

0004cd76 <bt_hci_disconnect>:
{
   4cd76:	b570      	push	{r4, r5, r6, lr}
   4cd78:	4606      	mov	r6, r0
   4cd7a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4cd7c:	f240 4006 	movw	r0, #1030	; 0x406
   4cd80:	2103      	movs	r1, #3
   4cd82:	f7e1 fae7 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4cd86:	4604      	mov	r4, r0
   4cd88:	b168      	cbz	r0, 4cda6 <bt_hci_disconnect+0x30>
   4cd8a:	2103      	movs	r1, #3
   4cd8c:	3008      	adds	r0, #8
   4cd8e:	f003 fcbb 	bl	50708 <net_buf_simple_add>
	disconn->reason = reason;
   4cd92:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   4cd94:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4cd96:	4621      	mov	r1, r4
   4cd98:	2200      	movs	r2, #0
}
   4cd9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4cd9e:	f240 4006 	movw	r0, #1030	; 0x406
   4cda2:	f7e1 bb33 	b.w	2e40c <bt_hci_cmd_send_sync>
}
   4cda6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cdaa:	bd70      	pop	{r4, r5, r6, pc}

0004cdac <bt_le_set_data_len>:
{
   4cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4cdae:	4607      	mov	r7, r0
   4cdb0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4cdb2:	f242 0022 	movw	r0, #8226	; 0x2022
   4cdb6:	2106      	movs	r1, #6
{
   4cdb8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4cdba:	f7e1 facb 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4cdbe:	4604      	mov	r4, r0
   4cdc0:	b170      	cbz	r0, 4cde0 <bt_le_set_data_len+0x34>
   4cdc2:	2106      	movs	r1, #6
   4cdc4:	3008      	adds	r0, #8
   4cdc6:	f003 fc9f 	bl	50708 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4cdca:	883b      	ldrh	r3, [r7, #0]
   4cdcc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   4cdce:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   4cdd0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4cdd2:	4621      	mov	r1, r4
   4cdd4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4cdd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4cddc:	f7e1 baf4 	b.w	2e3c8 <bt_hci_cmd_send>
}
   4cde0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004cde6 <bt_le_set_phy>:
{
   4cde6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4cdea:	4680      	mov	r8, r0
   4cdec:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4cdee:	f242 0032 	movw	r0, #8242	; 0x2032
   4cdf2:	2107      	movs	r1, #7
{
   4cdf4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   4cdf8:	4616      	mov	r6, r2
   4cdfa:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4cdfc:	f7e1 faaa 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4ce00:	4604      	mov	r4, r0
   4ce02:	b190      	cbz	r0, 4ce2a <bt_le_set_phy+0x44>
   4ce04:	2107      	movs	r1, #7
   4ce06:	3008      	adds	r0, #8
   4ce08:	f003 fc7e 	bl	50708 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4ce0c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   4ce10:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   4ce12:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   4ce14:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   4ce16:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   4ce18:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4ce1c:	4621      	mov	r1, r4
   4ce1e:	f242 0032 	movw	r0, #8242	; 0x2032
}
   4ce22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4ce26:	f7e1 bacf 	b.w	2e3c8 <bt_hci_cmd_send>
}
   4ce2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4ce2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004ce32 <le_phy_update_complete>:
{
   4ce32:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   4ce34:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4ce36:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4ce3a:	f7e3 f9af 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4ce3e:	4604      	mov	r4, r0
   4ce40:	b308      	cbz	r0, 4ce86 <le_phy_update_complete+0x54>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   4ce42:	1d06      	adds	r6, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ce44:	f06f 0180 	mvn.w	r1, #128	; 0x80
   4ce48:	4630      	mov	r0, r6
   4ce4a:	f7ff fdca 	bl	4c9e2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4ce4e:	0603      	lsls	r3, r0, #24
   4ce50:	d507      	bpl.n	4ce62 <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4ce52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   4ce56:	4630      	mov	r0, r6
   4ce58:	f7ff fdb4 	bl	4c9c4 <atomic_or>
		conn_auto_initiate(conn);
   4ce5c:	4620      	mov	r0, r4
   4ce5e:	f7e1 fbbd 	bl	2e5dc <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   4ce62:	78e8      	ldrb	r0, [r5, #3]
   4ce64:	f7e1 fb34 	bl	2e4d0 <bt_get_phy>
   4ce68:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4ce6c:	7928      	ldrb	r0, [r5, #4]
   4ce6e:	f7e1 fb2f 	bl	2e4d0 <bt_get_phy>
   4ce72:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   4ce76:	4620      	mov	r0, r4
   4ce78:	f7e3 fac6 	bl	30408 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4ce7c:	4620      	mov	r0, r4
}
   4ce7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4ce82:	f000 bc57 	b.w	4d734 <bt_conn_unref>
}
   4ce86:	bd70      	pop	{r4, r5, r6, pc}

0004ce88 <le_remote_feat_complete>:
{
   4ce88:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4ce8a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4ce8c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4ce90:	f7e3 f984 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4ce94:	4604      	mov	r4, r0
   4ce96:	b198      	cbz	r0, 4cec0 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   4ce98:	782b      	ldrb	r3, [r5, #0]
   4ce9a:	b923      	cbnz	r3, 4cea6 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4ce9c:	2208      	movs	r2, #8
   4ce9e:	1ce9      	adds	r1, r5, #3
   4cea0:	30ac      	adds	r0, #172	; 0xac
   4cea2:	f7ff fc08 	bl	4c6b6 <memcpy>
   4cea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4ceaa:	1d20      	adds	r0, r4, #4
   4ceac:	f7ff fd8a 	bl	4c9c4 <atomic_or>
	conn_auto_initiate(conn);
   4ceb0:	4620      	mov	r0, r4
   4ceb2:	f7e1 fb93 	bl	2e5dc <conn_auto_initiate>
	bt_conn_unref(conn);
   4ceb6:	4620      	mov	r0, r4
}
   4ceb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4cebc:	f000 bc3a 	b.w	4d734 <bt_conn_unref>
}
   4cec0:	bd38      	pop	{r3, r4, r5, pc}

0004cec2 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   4cec2:	6880      	ldr	r0, [r0, #8]
   4cec4:	f7e1 bbec 	b.w	2e6a0 <bt_hci_le_enh_conn_complete>

0004cec8 <le_legacy_conn_complete>:
{
   4cec8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4ceca:	6881      	ldr	r1, [r0, #8]
{
   4cecc:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   4cece:	780b      	ldrb	r3, [r1, #0]
   4ced0:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   4ced4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   4ced8:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   4cedc:	78cb      	ldrb	r3, [r1, #3]
   4cede:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   4cee2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   4cee6:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   4ceea:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   4ceee:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   4cef2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   4cef6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   4cefa:	7c4b      	ldrb	r3, [r1, #17]
   4cefc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   4cf00:	a803      	add	r0, sp, #12
   4cf02:	3104      	adds	r1, #4
   4cf04:	f7ff fd5b 	bl	4c9be <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   4cf08:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   4cf0a:	4669      	mov	r1, sp
   4cf0c:	2206      	movs	r2, #6
   4cf0e:	f10d 0013 	add.w	r0, sp, #19
   4cf12:	9400      	str	r4, [sp, #0]
   4cf14:	f8ad 4004 	strh.w	r4, [sp, #4]
   4cf18:	f7ff fbcd 	bl	4c6b6 <memcpy>
   4cf1c:	2206      	movs	r2, #6
   4cf1e:	4669      	mov	r1, sp
   4cf20:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   4cf24:	9400      	str	r4, [sp, #0]
   4cf26:	f8ad 4004 	strh.w	r4, [sp, #4]
   4cf2a:	f7ff fbc4 	bl	4c6b6 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   4cf2e:	a802      	add	r0, sp, #8
   4cf30:	f7e1 fbb6 	bl	2e6a0 <bt_hci_le_enh_conn_complete>
}
   4cf34:	b00a      	add	sp, #40	; 0x28
   4cf36:	bd10      	pop	{r4, pc}

0004cf38 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   4cf38:	8803      	ldrh	r3, [r0, #0]
   4cf3a:	8842      	ldrh	r2, [r0, #2]
   4cf3c:	4293      	cmp	r3, r2
{
   4cf3e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   4cf40:	d819      	bhi.n	4cf76 <bt_le_conn_params_valid+0x3e>
   4cf42:	2b05      	cmp	r3, #5
   4cf44:	d917      	bls.n	4cf76 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   4cf46:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   4cf4a:	d814      	bhi.n	4cf76 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   4cf4c:	8883      	ldrh	r3, [r0, #4]
   4cf4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   4cf52:	d210      	bcs.n	4cf76 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   4cf54:	88c0      	ldrh	r0, [r0, #6]
   4cf56:	f1a0 010a 	sub.w	r1, r0, #10
   4cf5a:	b289      	uxth	r1, r1
   4cf5c:	f640 4476 	movw	r4, #3190	; 0xc76
   4cf60:	42a1      	cmp	r1, r4
   4cf62:	d808      	bhi.n	4cf76 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   4cf64:	3301      	adds	r3, #1
   4cf66:	b29b      	uxth	r3, r3
   4cf68:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4cf6a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   4cf6e:	bf34      	ite	cc
   4cf70:	2001      	movcc	r0, #1
   4cf72:	2000      	movcs	r0, #0
}
   4cf74:	bd10      	pop	{r4, pc}
		return false;
   4cf76:	2000      	movs	r0, #0
   4cf78:	e7fc      	b.n	4cf74 <bt_le_conn_params_valid+0x3c>

0004cf7a <hci_encrypt_key_refresh_complete>:
{
   4cf7a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4cf7c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4cf7e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   4cf82:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   4cf84:	f7e3 f90a 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4cf88:	4604      	mov	r4, r0
   4cf8a:	b338      	cbz	r0, 4cfdc <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   4cf8c:	b165      	cbz	r5, 4cfa8 <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   4cf8e:	4628      	mov	r0, r5
   4cf90:	f7e1 fcc2 	bl	2e918 <bt_security_err_get>
   4cf94:	4629      	mov	r1, r5
   4cf96:	4602      	mov	r2, r0
   4cf98:	4620      	mov	r0, r4
   4cf9a:	f7e3 fabf 	bl	3051c <bt_conn_security_changed>
	bt_conn_unref(conn);
   4cf9e:	4620      	mov	r0, r4
}
   4cfa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4cfa4:	f000 bbc6 	b.w	4d734 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4cfa8:	7883      	ldrb	r3, [r0, #2]
   4cfaa:	2b01      	cmp	r3, #1
   4cfac:	d107      	bne.n	4cfbe <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   4cfae:	f003 fa75 	bl	5049c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4cfb2:	4620      	mov	r0, r4
   4cfb4:	f7ff fceb 	bl	4c98e <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   4cfb8:	2800      	cmp	r0, #0
   4cfba:	bf08      	it	eq
   4cfbc:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4cfbe:	4628      	mov	r0, r5
   4cfc0:	f7e1 fcaa 	bl	2e918 <bt_security_err_get>
   4cfc4:	4629      	mov	r1, r5
   4cfc6:	4602      	mov	r2, r0
   4cfc8:	4620      	mov	r0, r4
   4cfca:	f7e3 faa7 	bl	3051c <bt_conn_security_changed>
	if (status) {
   4cfce:	2d00      	cmp	r5, #0
   4cfd0:	d0e5      	beq.n	4cf9e <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   4cfd2:	4629      	mov	r1, r5
   4cfd4:	4620      	mov	r0, r4
   4cfd6:	f000 fca6 	bl	4d926 <bt_conn_disconnect>
   4cfda:	e7e0      	b.n	4cf9e <hci_encrypt_key_refresh_complete+0x24>
}
   4cfdc:	bd38      	pop	{r3, r4, r5, pc}

0004cfde <hci_encrypt_change>:
{
   4cfde:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   4cfe0:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4cfe2:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   4cfe6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   4cfe8:	f7e3 f8d8 	bl	3019c <bt_conn_lookup_handle>
	if (!conn) {
   4cfec:	4604      	mov	r4, r0
   4cfee:	b350      	cbz	r0, 4d046 <hci_encrypt_change+0x68>
	if (status) {
   4cff0:	b165      	cbz	r5, 4d00c <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   4cff2:	4628      	mov	r0, r5
   4cff4:	f7e1 fc90 	bl	2e918 <bt_security_err_get>
   4cff8:	4629      	mov	r1, r5
   4cffa:	4602      	mov	r2, r0
   4cffc:	4620      	mov	r0, r4
   4cffe:	f7e3 fa8d 	bl	3051c <bt_conn_security_changed>
	bt_conn_unref(conn);
   4d002:	4620      	mov	r0, r4
}
   4d004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4d008:	f000 bb94 	b.w	4d734 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4d00c:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   4d00e:	78f3      	ldrb	r3, [r6, #3]
   4d010:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   4d012:	2a01      	cmp	r2, #1
   4d014:	d108      	bne.n	4d028 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   4d016:	b10b      	cbz	r3, 4d01c <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   4d018:	f003 fa40 	bl	5049c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4d01c:	4620      	mov	r0, r4
   4d01e:	f7ff fcb6 	bl	4c98e <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   4d022:	2800      	cmp	r0, #0
   4d024:	bf08      	it	eq
   4d026:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4d028:	4628      	mov	r0, r5
   4d02a:	f7e1 fc75 	bl	2e918 <bt_security_err_get>
   4d02e:	4629      	mov	r1, r5
   4d030:	4602      	mov	r2, r0
   4d032:	4620      	mov	r0, r4
   4d034:	f7e3 fa72 	bl	3051c <bt_conn_security_changed>
	if (status) {
   4d038:	2d00      	cmp	r5, #0
   4d03a:	d0e2      	beq.n	4d002 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   4d03c:	4629      	mov	r1, r5
   4d03e:	4620      	mov	r0, r4
   4d040:	f000 fc71 	bl	4d926 <bt_conn_disconnect>
   4d044:	e7dd      	b.n	4d002 <hci_encrypt_change+0x24>
}
   4d046:	bd70      	pop	{r4, r5, r6, pc}

0004d048 <bt_send>:
		return bt_hci_ecc_send(buf);
   4d048:	f7e0 bda2 	b.w	2db90 <bt_hci_ecc_send>

0004d04c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4d04c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   4d04e:	f7e7 f98b 	bl	34368 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   4d052:	b118      	cbz	r0, 4d05c <bt_addr_le_is_bonded+0x10>
   4d054:	89c0      	ldrh	r0, [r0, #14]
   4d056:	3800      	subs	r0, #0
   4d058:	bf18      	it	ne
   4d05a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4d05c:	bd08      	pop	{r3, pc}

0004d05e <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   4d05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4d060:	4604      	mov	r4, r0
   4d062:	460e      	mov	r6, r1
   4d064:	4617      	mov	r7, r2
	while (ad->len > 1) {
   4d066:	88a3      	ldrh	r3, [r4, #4]
   4d068:	2b01      	cmp	r3, #1
   4d06a:	d801      	bhi.n	4d070 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   4d06c:	b003      	add	sp, #12
   4d06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   4d070:	4620      	mov	r0, r4
   4d072:	f003 fb82 	bl	5077a <net_buf_simple_pull_u8>
		if (len == 0U) {
   4d076:	4605      	mov	r5, r0
   4d078:	2800      	cmp	r0, #0
   4d07a:	d0f7      	beq.n	4d06c <bt_data_parse+0xe>
		if (len > ad->len) {
   4d07c:	88a2      	ldrh	r2, [r4, #4]
   4d07e:	b283      	uxth	r3, r0
   4d080:	429a      	cmp	r2, r3
   4d082:	d3f3      	bcc.n	4d06c <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   4d084:	4620      	mov	r0, r4
   4d086:	f003 fb78 	bl	5077a <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   4d08a:	3d01      	subs	r5, #1
		data.data = ad->data;
   4d08c:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   4d08e:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   4d092:	4639      	mov	r1, r7
   4d094:	4668      	mov	r0, sp
		data.data_len = len - 1;
   4d096:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   4d09a:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   4d09c:	47b0      	blx	r6
   4d09e:	2800      	cmp	r0, #0
   4d0a0:	d0e4      	beq.n	4d06c <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   4d0a2:	4629      	mov	r1, r5
   4d0a4:	4620      	mov	r0, r4
   4d0a6:	f003 fb58 	bl	5075a <net_buf_simple_pull>
   4d0aa:	e7dc      	b.n	4d066 <bt_data_parse+0x8>

0004d0ac <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   4d0ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4d0ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4d0b2:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4d0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d0b8:	2100      	movs	r1, #0
{
   4d0ba:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4d0bc:	f7e0 ff5e 	bl	2df7c <bt_buf_get_evt>
   4d0c0:	2102      	movs	r1, #2
   4d0c2:	4604      	mov	r4, r0
   4d0c4:	3008      	adds	r0, #8
   4d0c6:	f003 fb1f 	bl	50708 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4d0ca:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   4d0cc:	7045      	strb	r5, [r0, #1]

	return buf;
}
   4d0ce:	4620      	mov	r0, r4
   4d0d0:	bd70      	pop	{r4, r5, r6, pc}

0004d0d2 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4d0d2:	3103      	adds	r1, #3
{
   4d0d4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4d0d6:	b2c9      	uxtb	r1, r1
{
   4d0d8:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4d0da:	200e      	movs	r0, #14
   4d0dc:	f7ff ffe6 	bl	4d0ac <bt_hci_evt_create>
   4d0e0:	2103      	movs	r1, #3
   4d0e2:	4604      	mov	r4, r0
   4d0e4:	3008      	adds	r0, #8
   4d0e6:	f003 fb0f 	bl	50708 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4d0ea:	2301      	movs	r3, #1
   4d0ec:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   4d0ee:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   4d0f2:	4620      	mov	r0, r4
   4d0f4:	bd38      	pop	{r3, r4, r5, pc}

0004d0f6 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4d0f6:	b570      	push	{r4, r5, r6, lr}
   4d0f8:	4605      	mov	r5, r0
   4d0fa:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   4d0fc:	200f      	movs	r0, #15
   4d0fe:	2104      	movs	r1, #4
   4d100:	f7ff ffd4 	bl	4d0ac <bt_hci_evt_create>
   4d104:	2104      	movs	r1, #4
   4d106:	4604      	mov	r4, r0
   4d108:	3008      	adds	r0, #8
   4d10a:	f003 fafd 	bl	50708 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   4d10e:	2201      	movs	r2, #1
	cs->status = status;
   4d110:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   4d112:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   4d114:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4d116:	4620      	mov	r0, r4
   4d118:	bd70      	pop	{r4, r5, r6, pc}

0004d11a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4d11a:	2207      	movs	r2, #7
   4d11c:	f7ff bacb 	b.w	4c6b6 <memcpy>

0004d120 <atomic_get>:
   4d120:	f3bf 8f5b 	dmb	ish
   4d124:	6800      	ldr	r0, [r0, #0]
   4d126:	f3bf 8f5b 	dmb	ish
}
   4d12a:	4770      	bx	lr

0004d12c <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4d12c:	f100 0310 	add.w	r3, r0, #16
   4d130:	f3bf 8f5b 	dmb	ish
   4d134:	e853 2f00 	ldrex	r2, [r3]
   4d138:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   4d13c:	e843 1c00 	strex	ip, r1, [r3]
   4d140:	f1bc 0f00 	cmp.w	ip, #0
   4d144:	d1f6      	bne.n	4d134 <adv_unpause_enabled+0x8>
   4d146:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   4d14a:	0453      	lsls	r3, r2, #17
   4d14c:	d502      	bpl.n	4d154 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   4d14e:	2101      	movs	r1, #1
   4d150:	f000 b9ff 	b.w	4d552 <bt_le_adv_set_enable>
}
   4d154:	4770      	bx	lr

0004d156 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   4d156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d158:	4607      	mov	r7, r0
   4d15a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4d15c:	f242 0027 	movw	r0, #8231	; 0x2027
   4d160:	2127      	movs	r1, #39	; 0x27
   4d162:	f7e1 f8f7 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4d166:	4604      	mov	r4, r0
   4d168:	b1d0      	cbz	r0, 4d1a0 <hci_id_add.constprop.0+0x4a>
   4d16a:	2127      	movs	r1, #39	; 0x27
   4d16c:	3008      	adds	r0, #8
   4d16e:	f003 facb 	bl	50708 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   4d172:	4639      	mov	r1, r7
   4d174:	4605      	mov	r5, r0
   4d176:	f7ff ffd0 	bl	4d11a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   4d17a:	4631      	mov	r1, r6
   4d17c:	2210      	movs	r2, #16
   4d17e:	1de8      	adds	r0, r5, #7
   4d180:	f7ff fa99 	bl	4c6b6 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   4d184:	2210      	movs	r2, #16
   4d186:	2100      	movs	r1, #0
   4d188:	f105 0017 	add.w	r0, r5, #23
   4d18c:	f7ff fa9e 	bl	4c6cc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4d190:	4621      	mov	r1, r4
   4d192:	2200      	movs	r2, #0
}
   4d194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4d198:	f242 0027 	movw	r0, #8231	; 0x2027
   4d19c:	f7e1 b936 	b.w	2e40c <bt_hci_cmd_send_sync>
}
   4d1a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d1a6 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4d1a6:	7a03      	ldrb	r3, [r0, #8]
   4d1a8:	075b      	lsls	r3, r3, #29
   4d1aa:	d504      	bpl.n	4d1b6 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   4d1ac:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   4d1b0:	3001      	adds	r0, #1
   4d1b2:	f7ff bfd0 	b.w	4d156 <hci_id_add.constprop.0>
}
   4d1b6:	4770      	bx	lr

0004d1b8 <addr_res_enable>:
{
   4d1b8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4d1ba:	2101      	movs	r1, #1
{
   4d1bc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4d1be:	f242 002d 	movw	r0, #8237	; 0x202d
   4d1c2:	f7e1 f8c7 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4d1c6:	4604      	mov	r4, r0
   4d1c8:	b158      	cbz	r0, 4d1e2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   4d1ca:	4629      	mov	r1, r5
   4d1cc:	3008      	adds	r0, #8
   4d1ce:	f003 faaa 	bl	50726 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4d1d2:	4621      	mov	r1, r4
   4d1d4:	2200      	movs	r2, #0
}
   4d1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4d1da:	f242 002d 	movw	r0, #8237	; 0x202d
   4d1de:	f7e1 b915 	b.w	2e40c <bt_hci_cmd_send_sync>
}
   4d1e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d1e6:	bd38      	pop	{r3, r4, r5, pc}

0004d1e8 <is_adv_using_rand_addr>:
{
   4d1e8:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4d1ea:	f7e2 f913 	bl	2f414 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   4d1ee:	b120      	cbz	r0, 4d1fa <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4d1f0:	3010      	adds	r0, #16
   4d1f2:	f7ff ff95 	bl	4d120 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4d1f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   4d1fa:	bd08      	pop	{r3, pc}

0004d1fc <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4d1fc:	f100 0210 	add.w	r2, r0, #16
{
   4d200:	b508      	push	{r3, lr}
   4d202:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4d204:	4610      	mov	r0, r2
   4d206:	f7ff ff8b 	bl	4d120 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4d20a:	0641      	lsls	r1, r0, #25
   4d20c:	d511      	bpl.n	4d232 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4d20e:	f3bf 8f5b 	dmb	ish
   4d212:	e852 1f00 	ldrex	r1, [r2]
   4d216:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   4d21a:	e842 1000 	strex	r0, r1, [r2]
   4d21e:	2800      	cmp	r0, #0
   4d220:	d1f7      	bne.n	4d212 <adv_pause_enabled+0x16>
   4d222:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   4d226:	4618      	mov	r0, r3
   4d228:	2100      	movs	r1, #0
}
   4d22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   4d22e:	f000 b990 	b.w	4d552 <bt_le_adv_set_enable>
}
   4d232:	bd08      	pop	{r3, pc}

0004d234 <bt_lookup_id_addr>:
{
   4d234:	b510      	push	{r4, lr}
   4d236:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   4d238:	f7e7 f844 	bl	342c4 <bt_keys_find_irk>
		if (keys) {
   4d23c:	b100      	cbz	r0, 4d240 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   4d23e:	1c44      	adds	r4, r0, #1
}
   4d240:	4620      	mov	r0, r4
   4d242:	bd10      	pop	{r4, pc}

0004d244 <bt_id_set_private_addr>:
{
   4d244:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4d246:	2106      	movs	r1, #6
   4d248:	4668      	mov	r0, sp
   4d24a:	f7ea fa5b 	bl	37704 <bt_rand>
	if (err) {
   4d24e:	b940      	cbnz	r0, 4d262 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4d250:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4d254:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4d256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4d25a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4d25e:	f7e1 fcf3 	bl	2ec48 <set_random_address>
}
   4d262:	b003      	add	sp, #12
   4d264:	f85d fb04 	ldr.w	pc, [sp], #4

0004d268 <bt_id_set_adv_private_addr>:
{
   4d268:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4d26a:	2106      	movs	r1, #6
   4d26c:	4668      	mov	r0, sp
   4d26e:	f7ea fa49 	bl	37704 <bt_rand>
	if (err) {
   4d272:	b940      	cbnz	r0, 4d286 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4d274:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   4d278:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4d27a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4d27e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   4d282:	f7e1 fce1 	bl	2ec48 <set_random_address>
}
   4d286:	b003      	add	sp, #12
   4d288:	f85d fb04 	ldr.w	pc, [sp], #4

0004d28c <bt_id_scan_random_addr_check>:
{
   4d28c:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4d28e:	f7e2 f8c1 	bl	2f414 <bt_le_adv_lookup_legacy>
	if (!adv) {
   4d292:	b110      	cbz	r0, 4d29a <bt_id_scan_random_addr_check+0xe>
   4d294:	3010      	adds	r0, #16
   4d296:	f7ff ff43 	bl	4d120 <atomic_get>
}
   4d29a:	2001      	movs	r0, #1
   4d29c:	bd08      	pop	{r3, pc}

0004d29e <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   4d29e:	7a03      	ldrb	r3, [r0, #8]
   4d2a0:	07d9      	lsls	r1, r3, #31
   4d2a2:	d504      	bpl.n	4d2ae <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   4d2a4:	f023 0301 	bic.w	r3, r3, #1
   4d2a8:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   4d2aa:	f7e1 bd63 	b.w	2ed74 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   4d2ae:	0799      	lsls	r1, r3, #30
   4d2b0:	d504      	bpl.n	4d2bc <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   4d2b2:	f023 0302 	bic.w	r3, r3, #2
   4d2b6:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   4d2b8:	f7e1 be02 	b.w	2eec0 <bt_id_del>
}
   4d2bc:	4770      	bx	lr

0004d2be <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   4d2be:	2000      	movs	r0, #0
   4d2c0:	4770      	bx	lr

0004d2c2 <get_adv_channel_map>:
{
   4d2c2:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   4d2c4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   4d2c8:	bf0c      	ite	eq
   4d2ca:	2007      	moveq	r0, #7
   4d2cc:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   4d2ce:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   4d2d0:	bf48      	it	mi
   4d2d2:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   4d2d6:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   4d2d8:	bf48      	it	mi
   4d2da:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   4d2de:	4770      	bx	lr

0004d2e0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d2e0:	f3bf 8f5b 	dmb	ish
   4d2e4:	6800      	ldr	r0, [r0, #0]
   4d2e6:	f3bf 8f5b 	dmb	ish
}
   4d2ea:	4770      	bx	lr

0004d2ec <atomic_and>:
{
   4d2ec:	4603      	mov	r3, r0
}
   4d2ee:	f3bf 8f5b 	dmb	ish
   4d2f2:	e853 0f00 	ldrex	r0, [r3]
   4d2f6:	ea00 0201 	and.w	r2, r0, r1
   4d2fa:	e843 2c00 	strex	ip, r2, [r3]
   4d2fe:	f1bc 0f00 	cmp.w	ip, #0
   4d302:	d1f6      	bne.n	4d2f2 <atomic_and+0x6>
   4d304:	f3bf 8f5b 	dmb	ish
   4d308:	4770      	bx	lr

0004d30a <hci_set_ad>:
{
   4d30a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d30e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4d310:	2120      	movs	r1, #32
{
   4d312:	4682      	mov	sl, r0
   4d314:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4d316:	f7e1 f81d 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4d31a:	4605      	mov	r5, r0
   4d31c:	2800      	cmp	r0, #0
   4d31e:	d04a      	beq.n	4d3b6 <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   4d320:	2120      	movs	r1, #32
   4d322:	3008      	adds	r0, #8
   4d324:	f003 f9f0 	bl	50708 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4d328:	2220      	movs	r2, #32
   4d32a:	2100      	movs	r1, #0
   4d32c:	4681      	mov	r9, r0
   4d32e:	f7ff f9cd 	bl	4c6cc <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   4d332:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   4d336:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   4d33a:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   4d33c:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   4d33e:	f8d4 8000 	ldr.w	r8, [r4]
   4d342:	2300      	movs	r3, #0
   4d344:	6862      	ldr	r2, [r4, #4]
   4d346:	4293      	cmp	r3, r2
   4d348:	d30d      	bcc.n	4d366 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   4d34a:	9b00      	ldr	r3, [sp, #0]
   4d34c:	3408      	adds	r4, #8
   4d34e:	42a3      	cmp	r3, r4
   4d350:	d1f5      	bne.n	4d33e <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4d352:	2200      	movs	r2, #0
   4d354:	4629      	mov	r1, r5
   4d356:	4650      	mov	r0, sl
	*data_len = set_data_len;
   4d358:	f889 6000 	strb.w	r6, [r9]
}
   4d35c:	b003      	add	sp, #12
   4d35e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4d362:	f7e1 b853 	b.w	2e40c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   4d366:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   4d36a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   4d36e:	1cb0      	adds	r0, r6, #2
   4d370:	1811      	adds	r1, r2, r0
   4d372:	291f      	cmp	r1, #31
   4d374:	d908      	bls.n	4d388 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4d376:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   4d37a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4d37e:	d11f      	bne.n	4d3c0 <hci_set_ad+0xb6>
   4d380:	2a00      	cmp	r2, #0
   4d382:	dd1d      	ble.n	4d3c0 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   4d384:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   4d388:	b2d7      	uxtb	r7, r2
   4d38a:	1c79      	adds	r1, r7, #1
   4d38c:	f80b 1006 	strb.w	r1, [fp, r6]
   4d390:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   4d392:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   4d394:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   4d398:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   4d39c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   4d3a0:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   4d3a2:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   4d3a4:	f7ff f987 	bl	4c6b6 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   4d3a8:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   4d3aa:	443e      	add	r6, r7
   4d3ac:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   4d3ae:	3301      	adds	r3, #1
   4d3b0:	f108 0808 	add.w	r8, r8, #8
   4d3b4:	e7c6      	b.n	4d344 <hci_set_ad+0x3a>
		return -ENOBUFS;
   4d3b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   4d3ba:	b003      	add	sp, #12
   4d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   4d3c0:	4628      	mov	r0, r5
   4d3c2:	f7f6 fe77 	bl	440b4 <net_buf_unref>
		return err;
   4d3c6:	f06f 0015 	mvn.w	r0, #21
   4d3ca:	e7f6      	b.n	4d3ba <hci_set_ad+0xb0>

0004d3cc <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4d3cc:	2301      	movs	r3, #1
{
   4d3ce:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4d3d0:	fa03 f101 	lsl.w	r1, r3, r1
{
   4d3d4:	4604      	mov	r4, r0
	if (val) {
   4d3d6:	b162      	cbz	r2, 4d3f2 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4d3d8:	f3bf 8f5b 	dmb	ish
   4d3dc:	e854 3f00 	ldrex	r3, [r4]
   4d3e0:	430b      	orrs	r3, r1
   4d3e2:	e844 3200 	strex	r2, r3, [r4]
   4d3e6:	2a00      	cmp	r2, #0
   4d3e8:	d1f8      	bne.n	4d3dc <atomic_set_bit_to+0x10>
   4d3ea:	f3bf 8f5b 	dmb	ish
	}
}
   4d3ee:	bc10      	pop	{r4}
   4d3f0:	4770      	bx	lr
   4d3f2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4d3f4:	43c9      	mvns	r1, r1
   4d3f6:	f7ff bf79 	b.w	4d2ec <atomic_and>

0004d3fa <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   4d3fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d3fe:	b087      	sub	sp, #28
   4d400:	4605      	mov	r5, r0
   4d402:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   4d406:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4d40a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   4d40e:	460c      	mov	r4, r1
   4d410:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   4d412:	2100      	movs	r1, #0
   4d414:	2210      	movs	r2, #16
   4d416:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   4d418:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   4d41a:	f7ff f957 	bl	4c6cc <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   4d41e:	b186      	cbz	r6, 4d442 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   4d420:	f7e1 fbf4 	bl	2ec0c <bt_get_name>
   4d424:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   4d426:	2c00      	cmp	r4, #0
   4d428:	d139      	bne.n	4d49e <le_adv_update.constprop.0+0xa4>
   4d42a:	2f00      	cmp	r7, #0
   4d42c:	d142      	bne.n	4d4b4 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   4d42e:	4658      	mov	r0, fp
   4d430:	f7ff f90c 	bl	4c64c <strlen>
   4d434:	2309      	movs	r3, #9
   4d436:	f88d 3000 	strb.w	r3, [sp]
   4d43a:	f88d 0001 	strb.w	r0, [sp, #1]
   4d43e:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   4d442:	2e01      	cmp	r6, #1
			d_len = 2;
   4d444:	bf0c      	ite	eq
   4d446:	2202      	moveq	r2, #2
		d_len = 1;
   4d448:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4d44a:	a902      	add	r1, sp, #8
   4d44c:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   4d450:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   4d454:	bf04      	itt	eq
   4d456:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   4d45a:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4d45c:	f7ff ff55 	bl	4d30a <hci_set_ad>
		if (err) {
   4d460:	4604      	mov	r4, r0
   4d462:	b978      	cbnz	r0, 4d484 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   4d464:	f1ba 0f00 	cmp.w	sl, #0
   4d468:	d126      	bne.n	4d4b8 <le_adv_update.constprop.0+0xbe>
   4d46a:	3510      	adds	r5, #16
   4d46c:	f3bf 8f5b 	dmb	ish
   4d470:	e855 3f00 	ldrex	r3, [r5]
   4d474:	f043 0304 	orr.w	r3, r3, #4
   4d478:	e845 3200 	strex	r2, r3, [r5]
   4d47c:	2a00      	cmp	r2, #0
   4d47e:	d1f7      	bne.n	4d470 <le_adv_update.constprop.0+0x76>
   4d480:	f3bf 8f5b 	dmb	ish
}
   4d484:	4620      	mov	r0, r4
   4d486:	b007      	add	sp, #28
   4d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4d48c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   4d490:	3a08      	subs	r2, #8
   4d492:	2a01      	cmp	r2, #1
   4d494:	d925      	bls.n	4d4e2 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4d496:	3301      	adds	r3, #1
   4d498:	4598      	cmp	r8, r3
   4d49a:	d1f7      	bne.n	4d48c <le_adv_update.constprop.0+0x92>
   4d49c:	e7c5      	b.n	4d42a <le_adv_update.constprop.0+0x30>
   4d49e:	2300      	movs	r3, #0
   4d4a0:	e7fa      	b.n	4d498 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4d4a2:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   4d4a6:	3a08      	subs	r2, #8
   4d4a8:	2a01      	cmp	r2, #1
   4d4aa:	d91a      	bls.n	4d4e2 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4d4ac:	3301      	adds	r3, #1
   4d4ae:	4599      	cmp	r9, r3
   4d4b0:	d1f7      	bne.n	4d4a2 <le_adv_update.constprop.0+0xa8>
   4d4b2:	e7bc      	b.n	4d42e <le_adv_update.constprop.0+0x34>
   4d4b4:	2300      	movs	r3, #0
   4d4b6:	e7fa      	b.n	4d4ae <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   4d4b8:	2e02      	cmp	r6, #2
   4d4ba:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   4d4be:	bf08      	it	eq
   4d4c0:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4d4c2:	a902      	add	r1, sp, #8
			d_len = 2;
   4d4c4:	bf08      	it	eq
   4d4c6:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4d4c8:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   4d4cc:	bf08      	it	eq
   4d4ce:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   4d4d2:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4d4d6:	f7ff ff18 	bl	4d30a <hci_set_ad>
		if (err) {
   4d4da:	2800      	cmp	r0, #0
   4d4dc:	d0c5      	beq.n	4d46a <le_adv_update.constprop.0+0x70>
   4d4de:	4604      	mov	r4, r0
   4d4e0:	e7d0      	b.n	4d484 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   4d4e2:	f06f 0415 	mvn.w	r4, #21
   4d4e6:	e7cd      	b.n	4d484 <le_adv_update.constprop.0+0x8a>

0004d4e8 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   4d4e8:	6843      	ldr	r3, [r0, #4]
   4d4ea:	f013 0008 	ands.w	r0, r3, #8
   4d4ee:	d00a      	beq.n	4d506 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   4d4f0:	035a      	lsls	r2, r3, #13
   4d4f2:	d407      	bmi.n	4d504 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   4d4f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   4d4f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   4d4fc:	bf0c      	ite	eq
   4d4fe:	2001      	moveq	r0, #1
   4d500:	2002      	movne	r0, #2
   4d502:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   4d504:	2001      	movs	r0, #1
}
   4d506:	4770      	bx	lr

0004d508 <bt_le_adv_set_enable_legacy>:
{
   4d508:	b570      	push	{r4, r5, r6, lr}
   4d50a:	4606      	mov	r6, r0
   4d50c:	b086      	sub	sp, #24
   4d50e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   4d510:	f242 000a 	movw	r0, #8202	; 0x200a
   4d514:	2101      	movs	r1, #1
   4d516:	f7e0 ff1d 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4d51a:	4604      	mov	r4, r0
   4d51c:	b1b0      	cbz	r0, 4d54c <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   4d51e:	3008      	adds	r0, #8
	if (enable) {
   4d520:	b195      	cbz	r5, 4d548 <bt_le_adv_set_enable_legacy+0x40>
   4d522:	2101      	movs	r1, #1
   4d524:	f003 f8ff 	bl	50726 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   4d528:	f106 0210 	add.w	r2, r6, #16
   4d52c:	a903      	add	r1, sp, #12
   4d52e:	4620      	mov	r0, r4
   4d530:	9500      	str	r5, [sp, #0]
   4d532:	2306      	movs	r3, #6
   4d534:	f7e0 fefc 	bl	2e330 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   4d538:	2200      	movs	r2, #0
   4d53a:	4621      	mov	r1, r4
   4d53c:	f242 000a 	movw	r0, #8202	; 0x200a
   4d540:	f7e0 ff64 	bl	2e40c <bt_hci_cmd_send_sync>
}
   4d544:	b006      	add	sp, #24
   4d546:	bd70      	pop	{r4, r5, r6, pc}
   4d548:	4629      	mov	r1, r5
   4d54a:	e7eb      	b.n	4d524 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   4d54c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d550:	e7f8      	b.n	4d544 <bt_le_adv_set_enable_legacy+0x3c>

0004d552 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   4d552:	f7ff bfd9 	b.w	4d508 <bt_le_adv_set_enable_legacy>

0004d556 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   4d556:	3018      	adds	r0, #24
   4d558:	f004 ba23 	b.w	519a2 <k_work_cancel_delayable>

0004d55c <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4d55c:	f7e2 b8b6 	b.w	2f6cc <bt_le_adv_stop>

0004d560 <atomic_and>:
{
   4d560:	4603      	mov	r3, r0
}
   4d562:	f3bf 8f5b 	dmb	ish
   4d566:	e853 0f00 	ldrex	r0, [r3]
   4d56a:	ea00 0201 	and.w	r2, r0, r1
   4d56e:	e843 2c00 	strex	ip, r2, [r3]
   4d572:	f1bc 0f00 	cmp.w	ip, #0
   4d576:	d1f6      	bne.n	4d566 <atomic_and+0x6>
   4d578:	f3bf 8f5b 	dmb	ish
   4d57c:	4770      	bx	lr

0004d57e <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   4d57e:	f7e2 b94f 	b.w	2f820 <bt_le_scan_set_enable_legacy>

0004d582 <atomic_and>:
{
   4d582:	4603      	mov	r3, r0
}
   4d584:	f3bf 8f5b 	dmb	ish
   4d588:	e853 0f00 	ldrex	r0, [r3]
   4d58c:	ea00 0201 	and.w	r2, r0, r1
   4d590:	e843 2c00 	strex	ip, r2, [r3]
   4d594:	f1bc 0f00 	cmp.w	ip, #0
   4d598:	d1f6      	bne.n	4d588 <atomic_and+0x6>
   4d59a:	f3bf 8f5b 	dmb	ish
   4d59e:	4770      	bx	lr

0004d5a0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d5a0:	f3bf 8f5b 	dmb	ish
   4d5a4:	6800      	ldr	r0, [r0, #0]
   4d5a6:	f3bf 8f5b 	dmb	ish
}
   4d5aa:	4770      	bx	lr

0004d5ac <atomic_or>:
{
   4d5ac:	4603      	mov	r3, r0
}
   4d5ae:	f3bf 8f5b 	dmb	ish
   4d5b2:	e853 0f00 	ldrex	r0, [r3]
   4d5b6:	ea40 0201 	orr.w	r2, r0, r1
   4d5ba:	e843 2c00 	strex	ip, r2, [r3]
   4d5be:	f1bc 0f00 	cmp.w	ip, #0
   4d5c2:	d1f6      	bne.n	4d5b2 <atomic_or+0x6>
   4d5c4:	f3bf 8f5b 	dmb	ish
   4d5c8:	4770      	bx	lr

0004d5ca <tx_notify>:
{
   4d5ca:	b570      	push	{r4, r5, r6, lr}
   4d5cc:	4604      	mov	r4, r0
	__asm__ volatile(
   4d5ce:	f04f 0220 	mov.w	r2, #32
   4d5d2:	f3ef 8311 	mrs	r3, BASEPRI
   4d5d6:	f382 8812 	msr	BASEPRI_MAX, r2
   4d5da:	f3bf 8f6f 	isb	sy
	return list->head;
   4d5de:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   4d5e0:	b920      	cbnz	r0, 4d5ec <tx_notify+0x22>
	__asm__ volatile(
   4d5e2:	f383 8811 	msr	BASEPRI, r3
   4d5e6:	f3bf 8f6f 	isb	sy
}
   4d5ea:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d5ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   4d5ee:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4d5f0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d5f2:	4288      	cmp	r0, r1
	list->tail = node;
   4d5f4:	bf08      	it	eq
   4d5f6:	6262      	streq	r2, [r4, #36]	; 0x24
   4d5f8:	f383 8811 	msr	BASEPRI, r3
   4d5fc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   4d600:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   4d604:	f7e2 fc6a 	bl	2fedc <tx_free>
		cb(conn, user_data);
   4d608:	4631      	mov	r1, r6
   4d60a:	4620      	mov	r0, r4
   4d60c:	47a8      	blx	r5
	while (1) {
   4d60e:	e7de      	b.n	4d5ce <tx_notify+0x4>

0004d610 <tx_complete_work>:
	tx_notify(conn);
   4d610:	3828      	subs	r0, #40	; 0x28
   4d612:	f7ff bfda 	b.w	4d5ca <tx_notify>

0004d616 <bt_conn_reset_rx_state>:
{
   4d616:	b510      	push	{r4, lr}
   4d618:	4604      	mov	r4, r0
	if (!conn->rx) {
   4d61a:	6900      	ldr	r0, [r0, #16]
   4d61c:	b118      	cbz	r0, 4d626 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   4d61e:	f7f6 fd49 	bl	440b4 <net_buf_unref>
	conn->rx = NULL;
   4d622:	2300      	movs	r3, #0
   4d624:	6123      	str	r3, [r4, #16]
}
   4d626:	bd10      	pop	{r4, pc}

0004d628 <conn_cleanup>:
{
   4d628:	b570      	push	{r4, r5, r6, lr}
   4d62a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   4d62c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   4d630:	2200      	movs	r2, #0
   4d632:	2300      	movs	r3, #0
   4d634:	4630      	mov	r0, r6
   4d636:	f003 f804 	bl	50642 <net_buf_get>
   4d63a:	4605      	mov	r5, r0
   4d63c:	b950      	cbnz	r0, 4d654 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   4d63e:	4620      	mov	r0, r4
   4d640:	f7ff ffe9 	bl	4d616 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4d644:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4d648:	2200      	movs	r2, #0
}
   4d64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4d64e:	2300      	movs	r3, #0
   4d650:	f7fb bb36 	b.w	48cc0 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   4d654:	6968      	ldr	r0, [r5, #20]
   4d656:	b108      	cbz	r0, 4d65c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   4d658:	f7e2 fc40 	bl	2fedc <tx_free>
		net_buf_unref(buf);
   4d65c:	4628      	mov	r0, r5
   4d65e:	f7f6 fd29 	bl	440b4 <net_buf_unref>
   4d662:	e7e5      	b.n	4d630 <conn_cleanup+0x8>

0004d664 <bt_conn_recv>:
{
   4d664:	b570      	push	{r4, r5, r6, lr}
   4d666:	4616      	mov	r6, r2
   4d668:	4604      	mov	r4, r0
   4d66a:	460d      	mov	r5, r1
	tx_notify(conn);
   4d66c:	f7ff ffad 	bl	4d5ca <tx_notify>
	switch (flags) {
   4d670:	2e01      	cmp	r6, #1
   4d672:	d017      	beq.n	4d6a4 <bt_conn_recv+0x40>
   4d674:	2e02      	cmp	r6, #2
   4d676:	d117      	bne.n	4d6a8 <bt_conn_recv+0x44>
		if (conn->rx) {
   4d678:	6923      	ldr	r3, [r4, #16]
   4d67a:	b113      	cbz	r3, 4d682 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4d67c:	4620      	mov	r0, r4
   4d67e:	f7ff ffca 	bl	4d616 <bt_conn_reset_rx_state>
		conn->rx = buf;
   4d682:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   4d684:	6921      	ldr	r1, [r4, #16]
   4d686:	898a      	ldrh	r2, [r1, #12]
   4d688:	2a01      	cmp	r2, #1
   4d68a:	d937      	bls.n	4d6fc <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4d68c:	688b      	ldr	r3, [r1, #8]
   4d68e:	881b      	ldrh	r3, [r3, #0]
   4d690:	3304      	adds	r3, #4
   4d692:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   4d694:	429a      	cmp	r2, r3
   4d696:	d331      	bcc.n	4d6fc <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   4d698:	d928      	bls.n	4d6ec <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   4d69a:	4620      	mov	r0, r4
}
   4d69c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   4d6a0:	f7ff bfb9 	b.w	4d616 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   4d6a4:	6920      	ldr	r0, [r4, #16]
   4d6a6:	b918      	cbnz	r0, 4d6b0 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   4d6a8:	4620      	mov	r0, r4
   4d6aa:	f7ff ffb4 	bl	4d616 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4d6ae:	e001      	b.n	4d6b4 <bt_conn_recv+0x50>
		if (!buf->len) {
   4d6b0:	89ae      	ldrh	r6, [r5, #12]
   4d6b2:	b926      	cbnz	r6, 4d6be <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   4d6b4:	4628      	mov	r0, r5
}
   4d6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   4d6ba:	f7f6 bcfb 	b.w	440b4 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4d6be:	3008      	adds	r0, #8
   4d6c0:	f003 f86f 	bl	507a2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   4d6c4:	4286      	cmp	r6, r0
   4d6c6:	d907      	bls.n	4d6d8 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   4d6c8:	6921      	ldr	r1, [r4, #16]
   4d6ca:	2200      	movs	r2, #0
   4d6cc:	4620      	mov	r0, r4
   4d6ce:	f000 fac2 	bl	4dc56 <bt_l2cap_recv>
			conn->rx = NULL;
   4d6d2:	2300      	movs	r3, #0
   4d6d4:	6123      	str	r3, [r4, #16]
   4d6d6:	e7ed      	b.n	4d6b4 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4d6d8:	6920      	ldr	r0, [r4, #16]
   4d6da:	89aa      	ldrh	r2, [r5, #12]
   4d6dc:	68a9      	ldr	r1, [r5, #8]
   4d6de:	3008      	adds	r0, #8
   4d6e0:	f003 f818 	bl	50714 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   4d6e4:	4628      	mov	r0, r5
   4d6e6:	f7f6 fce5 	bl	440b4 <net_buf_unref>
		break;
   4d6ea:	e7cb      	b.n	4d684 <bt_conn_recv+0x20>
	conn->rx = NULL;
   4d6ec:	2300      	movs	r3, #0
   4d6ee:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   4d6f0:	4620      	mov	r0, r4
   4d6f2:	2201      	movs	r2, #1
}
   4d6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   4d6f8:	f000 baad 	b.w	4dc56 <bt_l2cap_recv>
}
   4d6fc:	bd70      	pop	{r4, r5, r6, pc}

0004d6fe <bt_conn_ref>:
{
   4d6fe:	b510      	push	{r4, lr}
   4d700:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   4d702:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   4d706:	4610      	mov	r0, r2
   4d708:	f7ff ff4a 	bl	4d5a0 <atomic_get>
		if (!old) {
   4d70c:	b180      	cbz	r0, 4d730 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4d70e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   4d712:	1c41      	adds	r1, r0, #1
   4d714:	e852 4f00 	ldrex	r4, [r2]
   4d718:	4284      	cmp	r4, r0
   4d71a:	d104      	bne.n	4d726 <bt_conn_ref+0x28>
   4d71c:	e842 1c00 	strex	ip, r1, [r2]
   4d720:	f1bc 0f00 	cmp.w	ip, #0
   4d724:	d1f6      	bne.n	4d714 <bt_conn_ref+0x16>
   4d726:	f3bf 8f5b 	dmb	ish
   4d72a:	d1ec      	bne.n	4d706 <bt_conn_ref+0x8>
}
   4d72c:	4618      	mov	r0, r3
   4d72e:	bd10      	pop	{r4, pc}
			return NULL;
   4d730:	4603      	mov	r3, r0
   4d732:	e7fb      	b.n	4d72c <bt_conn_ref+0x2e>

0004d734 <bt_conn_unref>:
{
   4d734:	b508      	push	{r3, lr}
   4d736:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   4d738:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4d73a:	f3bf 8f5b 	dmb	ish
   4d73e:	e850 2f00 	ldrex	r2, [r0]
   4d742:	3a01      	subs	r2, #1
   4d744:	e840 2100 	strex	r1, r2, [r0]
   4d748:	2900      	cmp	r1, #0
   4d74a:	d1f8      	bne.n	4d73e <bt_conn_unref+0xa>
   4d74c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4d750:	789b      	ldrb	r3, [r3, #2]
   4d752:	2b01      	cmp	r3, #1
   4d754:	d106      	bne.n	4d764 <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   4d756:	f7ff ff23 	bl	4d5a0 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4d75a:	b918      	cbnz	r0, 4d764 <bt_conn_unref+0x30>
}
   4d75c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   4d760:	f7e2 b814 	b.w	2f78c <bt_le_adv_resume>
}
   4d764:	bd08      	pop	{r3, pc}

0004d766 <conn_lookup_handle>:
{
   4d766:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4d76a:	4607      	mov	r7, r0
   4d76c:	460e      	mov	r6, r1
   4d76e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   4d770:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4d772:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   4d776:	42b4      	cmp	r4, r6
   4d778:	d103      	bne.n	4d782 <conn_lookup_handle+0x1c>
	return NULL;
   4d77a:	2300      	movs	r3, #0
}
   4d77c:	4618      	mov	r0, r3
   4d77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4d782:	fb09 7004 	mla	r0, r9, r4, r7
   4d786:	f7ff ffba 	bl	4d6fe <bt_conn_ref>
   4d78a:	4603      	mov	r3, r0
		if (!conn) {
   4d78c:	b158      	cbz	r0, 4d7a6 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   4d78e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   4d790:	2d01      	cmp	r5, #1
   4d792:	d002      	beq.n	4d79a <conn_lookup_handle+0x34>
   4d794:	3d07      	subs	r5, #7
   4d796:	2d01      	cmp	r5, #1
   4d798:	d803      	bhi.n	4d7a2 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   4d79a:	881a      	ldrh	r2, [r3, #0]
   4d79c:	4542      	cmp	r2, r8
   4d79e:	d0ed      	beq.n	4d77c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   4d7a0:	4618      	mov	r0, r3
   4d7a2:	f7ff ffc7 	bl	4d734 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   4d7a6:	3401      	adds	r4, #1
   4d7a8:	e7e5      	b.n	4d776 <conn_lookup_handle+0x10>

0004d7aa <bt_conn_connected>:
{
   4d7aa:	b510      	push	{r4, lr}
   4d7ac:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   4d7ae:	f7e3 fa31 	bl	30c14 <bt_l2cap_connected>
	notify_connected(conn);
   4d7b2:	4620      	mov	r0, r4
}
   4d7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   4d7b8:	f7e2 bb9a 	b.w	2fef0 <notify_connected>

0004d7bc <bt_conn_le_start_encryption>:
{
   4d7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4d7c0:	4682      	mov	sl, r0
   4d7c2:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4d7c4:	f242 0019 	movw	r0, #8217	; 0x2019
   4d7c8:	211c      	movs	r1, #28
{
   4d7ca:	9e08      	ldr	r6, [sp, #32]
   4d7cc:	4690      	mov	r8, r2
   4d7ce:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4d7d0:	f7e0 fdc0 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4d7d4:	4605      	mov	r5, r0
   4d7d6:	b340      	cbz	r0, 4d82a <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   4d7d8:	211c      	movs	r1, #28
   4d7da:	3008      	adds	r0, #8
   4d7dc:	f002 ff94 	bl	50708 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4d7e0:	f8ba 3000 	ldrh.w	r3, [sl]
   4d7e4:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4d7e6:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   4d7e8:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4d7ec:	4649      	mov	r1, r9
   4d7ee:	f7fe ff62 	bl	4c6b6 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4d7f2:	2202      	movs	r2, #2
   4d7f4:	4641      	mov	r1, r8
   4d7f6:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   4d7fa:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4d7fc:	f7fe ff5b 	bl	4c6b6 <memcpy>
	memcpy(cp->ltk, ltk, len);
   4d800:	4632      	mov	r2, r6
   4d802:	4639      	mov	r1, r7
   4d804:	4620      	mov	r0, r4
   4d806:	f7fe ff56 	bl	4c6b6 <memcpy>
	if (len < sizeof(cp->ltk)) {
   4d80a:	2e0f      	cmp	r6, #15
   4d80c:	d805      	bhi.n	4d81a <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   4d80e:	f1c6 0210 	rsb	r2, r6, #16
   4d812:	2100      	movs	r1, #0
   4d814:	19a0      	adds	r0, r4, r6
   4d816:	f7fe ff59 	bl	4c6cc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4d81a:	4629      	mov	r1, r5
   4d81c:	2200      	movs	r2, #0
}
   4d81e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4d822:	f242 0019 	movw	r0, #8217	; 0x2019
   4d826:	f7e0 bdf1 	b.w	2e40c <bt_hci_cmd_send_sync>
}
   4d82a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004d832 <bt_conn_set_security>:
{
   4d832:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4d834:	7b43      	ldrb	r3, [r0, #13]
   4d836:	2b07      	cmp	r3, #7
{
   4d838:	4604      	mov	r4, r0
   4d83a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4d83c:	d11c      	bne.n	4d878 <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   4d83e:	7a43      	ldrb	r3, [r0, #9]
   4d840:	428b      	cmp	r3, r1
   4d842:	d21c      	bcs.n	4d87e <bt_conn_set_security+0x4c>
   4d844:	7a83      	ldrb	r3, [r0, #10]
   4d846:	428b      	cmp	r3, r1
   4d848:	d219      	bcs.n	4d87e <bt_conn_set_security+0x4c>
	if (val) {
   4d84a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   4d84c:	f100 0004 	add.w	r0, r0, #4
   4d850:	d50d      	bpl.n	4d86e <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4d852:	f44f 6100 	mov.w	r1, #2048	; 0x800
   4d856:	f7ff fea9 	bl	4d5ac <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   4d85a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   4d85e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   4d860:	4620      	mov	r0, r4
   4d862:	f002 fc31 	bl	500c8 <bt_smp_start_security>
	if (err) {
   4d866:	b108      	cbz	r0, 4d86c <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   4d868:	7a63      	ldrb	r3, [r4, #9]
   4d86a:	72a3      	strb	r3, [r4, #10]
}
   4d86c:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4d86e:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   4d872:	f7ff fe86 	bl	4d582 <atomic_and>
   4d876:	e7f0      	b.n	4d85a <bt_conn_set_security+0x28>
		return -ENOTCONN;
   4d878:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4d87c:	e7f6      	b.n	4d86c <bt_conn_set_security+0x3a>
		return 0;
   4d87e:	2000      	movs	r0, #0
   4d880:	e7f4      	b.n	4d86c <bt_conn_set_security+0x3a>

0004d882 <bt_conn_get_security>:
}
   4d882:	7a40      	ldrb	r0, [r0, #9]
   4d884:	4770      	bx	lr

0004d886 <bt_conn_is_peer_addr_le>:
{
   4d886:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   4d888:	7a03      	ldrb	r3, [r0, #8]
   4d88a:	428b      	cmp	r3, r1
{
   4d88c:	4604      	mov	r4, r0
   4d88e:	4615      	mov	r5, r2
	if (id != conn->id) {
   4d890:	d115      	bne.n	4d8be <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   4d892:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4d896:	2207      	movs	r2, #7
   4d898:	4628      	mov	r0, r5
   4d89a:	f7fe fefb 	bl	4c694 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   4d89e:	b180      	cbz	r0, 4d8c2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4d8a0:	78e3      	ldrb	r3, [r4, #3]
   4d8a2:	2207      	movs	r2, #7
   4d8a4:	b943      	cbnz	r3, 4d8b8 <bt_conn_is_peer_addr_le+0x32>
   4d8a6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   4d8aa:	4628      	mov	r0, r5
   4d8ac:	f7fe fef2 	bl	4c694 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   4d8b0:	fab0 f080 	clz	r0, r0
   4d8b4:	0940      	lsrs	r0, r0, #5
}
   4d8b6:	bd38      	pop	{r3, r4, r5, pc}
   4d8b8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   4d8bc:	e7f5      	b.n	4d8aa <bt_conn_is_peer_addr_le+0x24>
		return false;
   4d8be:	2000      	movs	r0, #0
   4d8c0:	e7f9      	b.n	4d8b6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   4d8c2:	2001      	movs	r0, #1
   4d8c4:	e7f7      	b.n	4d8b6 <bt_conn_is_peer_addr_le+0x30>

0004d8c6 <bt_conn_exists_le>:
{
   4d8c6:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   4d8c8:	f7e2 fe72 	bl	305b0 <bt_conn_lookup_addr_le>
	if (conn) {
   4d8cc:	b110      	cbz	r0, 4d8d4 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   4d8ce:	f7ff ff31 	bl	4d734 <bt_conn_unref>
		return true;
   4d8d2:	2001      	movs	r0, #1
}
   4d8d4:	bd08      	pop	{r3, pc}

0004d8d6 <bt_conn_get_dst>:
}
   4d8d6:	3088      	adds	r0, #136	; 0x88
   4d8d8:	4770      	bx	lr

0004d8da <bt_conn_le_phy_update>:
{
   4d8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d8dc:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4d8de:	3004      	adds	r0, #4
   4d8e0:	f7ff fe5e 	bl	4d5a0 <atomic_get>
   4d8e4:	460b      	mov	r3, r1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4d8e6:	04c1      	lsls	r1, r0, #19
   4d8e8:	d51a      	bpl.n	4d920 <bt_conn_le_phy_update+0x46>
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   4d8ea:	881c      	ldrh	r4, [r3, #0]
   4d8ec:	f004 0203 	and.w	r2, r4, #3
   4d8f0:	2a03      	cmp	r2, #3
   4d8f2:	d011      	beq.n	4d918 <bt_conn_le_phy_update+0x3e>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   4d8f4:	07e2      	lsls	r2, r4, #31
   4d8f6:	d411      	bmi.n	4d91c <bt_conn_le_phy_update+0x42>
		phy_opts = BT_HCI_LE_PHY_CODED_S8;
   4d8f8:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4d8fc:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4d8fe:	78db      	ldrb	r3, [r3, #3]
		all_phys |= BT_HCI_LE_PHY_TX_ANY;
   4d900:	fab2 f182 	clz	r1, r2
   4d904:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4d906:	b90b      	cbnz	r3, 4d90c <bt_conn_le_phy_update+0x32>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   4d908:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   4d90c:	9400      	str	r4, [sp, #0]
   4d90e:	4628      	mov	r0, r5
   4d910:	f7ff fa69 	bl	4cde6 <bt_le_set_phy>
}
   4d914:	b003      	add	sp, #12
   4d916:	bd30      	pop	{r4, r5, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   4d918:	2400      	movs	r4, #0
   4d91a:	e7ef      	b.n	4d8fc <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   4d91c:	2401      	movs	r4, #1
   4d91e:	e7ed      	b.n	4d8fc <bt_conn_le_phy_update+0x22>
		return -EAGAIN;
   4d920:	f06f 000a 	mvn.w	r0, #10
   4d924:	e7f6      	b.n	4d914 <bt_conn_le_phy_update+0x3a>

0004d926 <bt_conn_disconnect>:
{
   4d926:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4d928:	7883      	ldrb	r3, [r0, #2]
   4d92a:	2b01      	cmp	r3, #1
{
   4d92c:	4604      	mov	r4, r0
   4d92e:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4d930:	d103      	bne.n	4d93a <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   4d932:	2100      	movs	r1, #0
   4d934:	3088      	adds	r0, #136	; 0x88
   4d936:	f7e2 ff63 	bl	30800 <bt_le_set_auto_conn>
	switch (conn->state) {
   4d93a:	7b63      	ldrb	r3, [r4, #13]
   4d93c:	3b02      	subs	r3, #2
   4d93e:	2b06      	cmp	r3, #6
   4d940:	d805      	bhi.n	4d94e <bt_conn_disconnect+0x28>
   4d942:	e8df f003 	tbb	[pc, r3]
   4d946:	0408      	.short	0x0408
   4d948:	1a120404 	.word	0x1a120404
   4d94c:	10          	.byte	0x10
   4d94d:	00          	.byte	0x00
   4d94e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   4d952:	4628      	mov	r0, r5
   4d954:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4d956:	4620      	mov	r0, r4
		conn->err = reason;
   4d958:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4d95a:	2100      	movs	r1, #0
   4d95c:	f7e2 fc26 	bl	301ac <bt_conn_set_state>
			bt_le_scan_update(false);
   4d960:	2000      	movs	r0, #0
   4d962:	f7e1 ffe7 	bl	2f934 <bt_le_scan_update>
		return 0;
   4d966:	2500      	movs	r5, #0
   4d968:	e7f3      	b.n	4d952 <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   4d96a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4d96e:	f004 f818 	bl	519a2 <k_work_cancel_delayable>
}
   4d972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   4d976:	f7e0 be17 	b.w	2e5a8 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   4d97a:	4629      	mov	r1, r5
   4d97c:	8820      	ldrh	r0, [r4, #0]
   4d97e:	f7ff f9fa 	bl	4cd76 <bt_hci_disconnect>
	if (err) {
   4d982:	4605      	mov	r5, r0
   4d984:	2800      	cmp	r0, #0
   4d986:	d1e4      	bne.n	4d952 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   4d988:	7b63      	ldrb	r3, [r4, #13]
   4d98a:	2b07      	cmp	r3, #7
   4d98c:	d1e1      	bne.n	4d952 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   4d98e:	2108      	movs	r1, #8
   4d990:	4620      	mov	r0, r4
   4d992:	f7e2 fc0b 	bl	301ac <bt_conn_set_state>
   4d996:	e7dc      	b.n	4d952 <bt_conn_disconnect+0x2c>

0004d998 <bt_conn_le_conn_update>:
{
   4d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d99a:	4607      	mov	r7, r0
   4d99c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4d99e:	f242 0013 	movw	r0, #8211	; 0x2013
   4d9a2:	210e      	movs	r1, #14
   4d9a4:	f7e0 fcd6 	bl	2e354 <bt_hci_cmd_create>
	if (!buf) {
   4d9a8:	4606      	mov	r6, r0
   4d9aa:	b1d0      	cbz	r0, 4d9e2 <bt_conn_le_conn_update+0x4a>
   4d9ac:	210e      	movs	r1, #14
   4d9ae:	3008      	adds	r0, #8
   4d9b0:	f002 feaa 	bl	50708 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   4d9b4:	220e      	movs	r2, #14
   4d9b6:	4604      	mov	r4, r0
   4d9b8:	2100      	movs	r1, #0
   4d9ba:	f7fe fe87 	bl	4c6cc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4d9be:	883b      	ldrh	r3, [r7, #0]
   4d9c0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4d9c2:	882b      	ldrh	r3, [r5, #0]
   4d9c4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   4d9c6:	886b      	ldrh	r3, [r5, #2]
   4d9c8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   4d9ca:	88ab      	ldrh	r3, [r5, #4]
   4d9cc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4d9ce:	88eb      	ldrh	r3, [r5, #6]
   4d9d0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4d9d2:	4631      	mov	r1, r6
   4d9d4:	2200      	movs	r2, #0
}
   4d9d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4d9da:	f242 0013 	movw	r0, #8211	; 0x2013
   4d9de:	f7e0 bd15 	b.w	2e40c <bt_hci_cmd_send_sync>
}
   4d9e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d9e8 <l2cap_connected>:
}
   4d9e8:	4770      	bx	lr

0004d9ea <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   4d9ea:	3010      	adds	r0, #16
   4d9ec:	f003 bfd9 	b.w	519a2 <k_work_cancel_delayable>

0004d9f0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   4d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d9f2:	4607      	mov	r7, r0
   4d9f4:	460e      	mov	r6, r1
   4d9f6:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4d9f8:	2300      	movs	r3, #0
   4d9fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4d9fe:	2104      	movs	r1, #4
   4da00:	2000      	movs	r0, #0
   4da02:	f7e2 fcad 	bl	30360 <bt_conn_create_pdu_timeout>
	if (!buf) {
   4da06:	4604      	mov	r4, r0
   4da08:	b130      	cbz	r0, 4da18 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   4da0a:	2104      	movs	r1, #4
   4da0c:	3008      	adds	r0, #8
   4da0e:	f002 fe7b 	bl	50708 <net_buf_simple_add>
	hdr->code = code;
   4da12:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   4da14:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   4da16:	8045      	strh	r5, [r0, #2]
}
   4da18:	4620      	mov	r0, r4
   4da1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004da1c <bt_l2cap_chan_remove>:
	return list->head;
   4da1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4da1e:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4da20:	b173      	cbz	r3, 4da40 <bt_l2cap_chan_remove+0x24>
   4da22:	3b08      	subs	r3, #8
   4da24:	2500      	movs	r5, #0
	return node->next;
   4da26:	461a      	mov	r2, r3
		if (chan == ch) {
   4da28:	4299      	cmp	r1, r3
   4da2a:	f852 4f08 	ldr.w	r4, [r2, #8]!
   4da2e:	d10d      	bne.n	4da4c <bt_l2cap_chan_remove+0x30>
	return list->tail;
   4da30:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   4da32:	b935      	cbnz	r5, 4da42 <bt_l2cap_chan_remove+0x26>
   4da34:	4291      	cmp	r1, r2
	list->head = node;
   4da36:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   4da38:	d100      	bne.n	4da3c <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   4da3a:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   4da3c:	2200      	movs	r2, #0
   4da3e:	609a      	str	r2, [r3, #8]
}
   4da40:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   4da42:	4291      	cmp	r1, r2
	parent->next = child;
   4da44:	602c      	str	r4, [r5, #0]
	list->tail = node;
   4da46:	bf08      	it	eq
   4da48:	6545      	streq	r5, [r0, #84]	; 0x54
}
   4da4a:	e7f7      	b.n	4da3c <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4da4c:	2c00      	cmp	r4, #0
   4da4e:	d0f7      	beq.n	4da40 <bt_l2cap_chan_remove+0x24>
   4da50:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   4da54:	4615      	mov	r5, r2
   4da56:	e7e6      	b.n	4da26 <bt_l2cap_chan_remove+0xa>

0004da58 <bt_l2cap_chan_del>:
{
   4da58:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   4da5a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   4da5e:	4604      	mov	r4, r0
	if (!chan->conn) {
   4da60:	b123      	cbz	r3, 4da6c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   4da62:	686b      	ldr	r3, [r5, #4]
   4da64:	b103      	cbz	r3, 4da68 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   4da66:	4798      	blx	r3
	chan->conn = NULL;
   4da68:	2300      	movs	r3, #0
   4da6a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   4da6c:	68e3      	ldr	r3, [r4, #12]
   4da6e:	b10b      	cbz	r3, 4da74 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   4da70:	4620      	mov	r0, r4
   4da72:	4798      	blx	r3
	if (ops->released) {
   4da74:	69eb      	ldr	r3, [r5, #28]
   4da76:	b11b      	cbz	r3, 4da80 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   4da78:	4620      	mov	r0, r4
}
   4da7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   4da7e:	4718      	bx	r3
}
   4da80:	bd70      	pop	{r4, r5, r6, pc}

0004da82 <l2cap_rtx_timeout>:
{
   4da82:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   4da84:	f1a0 0410 	sub.w	r4, r0, #16
   4da88:	4621      	mov	r1, r4
   4da8a:	f850 0c10 	ldr.w	r0, [r0, #-16]
   4da8e:	f7ff ffc5 	bl	4da1c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   4da92:	4620      	mov	r0, r4
}
   4da94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   4da98:	f7ff bfde 	b.w	4da58 <bt_l2cap_chan_del>

0004da9c <bt_l2cap_disconnected>:
	return list->head;
   4da9c:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   4da9e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4daa0:	b160      	cbz	r0, 4dabc <bt_l2cap_disconnected+0x20>
	return node->next;
   4daa2:	f850 4908 	ldr.w	r4, [r0], #-8
   4daa6:	b104      	cbz	r4, 4daaa <bt_l2cap_disconnected+0xe>
   4daa8:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   4daaa:	f7ff ffd5 	bl	4da58 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4daae:	b12c      	cbz	r4, 4dabc <bt_l2cap_disconnected+0x20>
   4dab0:	68a3      	ldr	r3, [r4, #8]
   4dab2:	b103      	cbz	r3, 4dab6 <bt_l2cap_disconnected+0x1a>
   4dab4:	3b08      	subs	r3, #8
{
   4dab6:	4620      	mov	r0, r4
   4dab8:	461c      	mov	r4, r3
   4daba:	e7f6      	b.n	4daaa <bt_l2cap_disconnected+0xe>
}
   4dabc:	bd10      	pop	{r4, pc}

0004dabe <bt_l2cap_security_changed>:
	return list->head;
   4dabe:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   4dac0:	b538      	push	{r3, r4, r5, lr}
   4dac2:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4dac4:	b178      	cbz	r0, 4dae6 <bt_l2cap_security_changed+0x28>
	return node->next;
   4dac6:	f850 4908 	ldr.w	r4, [r0], #-8
   4daca:	b104      	cbz	r4, 4dace <bt_l2cap_security_changed+0x10>
   4dacc:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4dace:	6843      	ldr	r3, [r0, #4]
   4dad0:	689b      	ldr	r3, [r3, #8]
   4dad2:	b10b      	cbz	r3, 4dad8 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   4dad4:	4629      	mov	r1, r5
   4dad6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4dad8:	b12c      	cbz	r4, 4dae6 <bt_l2cap_security_changed+0x28>
   4dada:	68a3      	ldr	r3, [r4, #8]
   4dadc:	b103      	cbz	r3, 4dae0 <bt_l2cap_security_changed+0x22>
   4dade:	3b08      	subs	r3, #8
{
   4dae0:	4620      	mov	r0, r4
   4dae2:	461c      	mov	r4, r3
   4dae4:	e7f3      	b.n	4dace <bt_l2cap_security_changed+0x10>
}
   4dae6:	bd38      	pop	{r3, r4, r5, pc}

0004dae8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   4dae8:	3104      	adds	r1, #4
   4daea:	f7e2 bc39 	b.w	30360 <bt_conn_create_pdu_timeout>

0004daee <bt_l2cap_send_cb>:
{
   4daee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4daf2:	4614      	mov	r4, r2
   4daf4:	4605      	mov	r5, r0
   4daf6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   4daf8:	f102 0008 	add.w	r0, r2, #8
   4dafc:	2104      	movs	r1, #4
   4dafe:	461e      	mov	r6, r3
   4db00:	f8dd 8018 	ldr.w	r8, [sp, #24]
   4db04:	f002 fe21 	bl	5074a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4db08:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4db0a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4db0c:	3a04      	subs	r2, #4
   4db0e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4db10:	4643      	mov	r3, r8
   4db12:	4632      	mov	r2, r6
   4db14:	4621      	mov	r1, r4
   4db16:	4628      	mov	r0, r5
}
   4db18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4db1c:	f7e2 bacc 	b.w	300b8 <bt_conn_send_cb>

0004db20 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   4db20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4db22:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4db24:	2202      	movs	r2, #2
   4db26:	2001      	movs	r0, #1
   4db28:	f7ff ff62 	bl	4d9f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4db2c:	4604      	mov	r4, r0
   4db2e:	b198      	cbz	r0, 4db58 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   4db30:	2102      	movs	r1, #2
   4db32:	3008      	adds	r0, #8
   4db34:	f002 fde8 	bl	50708 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   4db38:	2300      	movs	r3, #0
   4db3a:	7003      	strb	r3, [r0, #0]
   4db3c:	7043      	strb	r3, [r0, #1]
   4db3e:	4622      	mov	r2, r4
   4db40:	9300      	str	r3, [sp, #0]
   4db42:	2105      	movs	r1, #5
   4db44:	4628      	mov	r0, r5
   4db46:	f7ff ffd2 	bl	4daee <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4db4a:	b128      	cbz	r0, 4db58 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   4db4c:	4620      	mov	r0, r4
}
   4db4e:	b003      	add	sp, #12
   4db50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4db54:	f7f6 baae 	b.w	440b4 <net_buf_unref>
}
   4db58:	b003      	add	sp, #12
   4db5a:	bd30      	pop	{r4, r5, pc}

0004db5c <l2cap_recv>:
{
   4db5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   4db5e:	898b      	ldrh	r3, [r1, #12]
   4db60:	2b03      	cmp	r3, #3
{
   4db62:	b085      	sub	sp, #20
   4db64:	4605      	mov	r5, r0
   4db66:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4db68:	d911      	bls.n	4db8e <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   4db6a:	2104      	movs	r1, #4
   4db6c:	f104 0008 	add.w	r0, r4, #8
   4db70:	f002 fdfb 	bl	5076a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4db74:	89a3      	ldrh	r3, [r4, #12]
   4db76:	8842      	ldrh	r2, [r0, #2]
   4db78:	429a      	cmp	r2, r3
   4db7a:	d108      	bne.n	4db8e <l2cap_recv+0x32>
	if (!hdr->ident) {
   4db7c:	7841      	ldrb	r1, [r0, #1]
   4db7e:	b131      	cbz	r1, 4db8e <l2cap_recv+0x32>
	switch (hdr->code) {
   4db80:	7803      	ldrb	r3, [r0, #0]
   4db82:	2b12      	cmp	r3, #18
   4db84:	d006      	beq.n	4db94 <l2cap_recv+0x38>
   4db86:	2b13      	cmp	r3, #19
   4db88:	d001      	beq.n	4db8e <l2cap_recv+0x32>
   4db8a:	2b01      	cmp	r3, #1
   4db8c:	d14b      	bne.n	4dc26 <l2cap_recv+0xca>
}
   4db8e:	2000      	movs	r0, #0
   4db90:	b005      	add	sp, #20
   4db92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   4db94:	2a07      	cmp	r2, #7
   4db96:	d9fa      	bls.n	4db8e <l2cap_recv+0x32>
   4db98:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   4db9a:	78ef      	ldrb	r7, [r5, #3]
   4db9c:	b11f      	cbz	r7, 4dba6 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   4db9e:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   4dba0:	f7ff ffbe 	bl	4db20 <l2cap_send_reject.constprop.0>
		break;
   4dba4:	e7f3      	b.n	4db8e <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   4dba6:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   4dba8:	7850      	ldrb	r0, [r2, #1]
   4dbaa:	7813      	ldrb	r3, [r2, #0]
   4dbac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4dbb0:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   4dbb4:	78d0      	ldrb	r0, [r2, #3]
   4dbb6:	7893      	ldrb	r3, [r2, #2]
   4dbb8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4dbbc:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   4dbc0:	7950      	ldrb	r0, [r2, #5]
   4dbc2:	7913      	ldrb	r3, [r2, #4]
   4dbc4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4dbc8:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   4dbcc:	7993      	ldrb	r3, [r2, #6]
   4dbce:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4dbd0:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   4dbd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4dbd6:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   4dbd8:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4dbdc:	f7ff ff08 	bl	4d9f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4dbe0:	4604      	mov	r4, r0
   4dbe2:	2800      	cmp	r0, #0
   4dbe4:	d0d3      	beq.n	4db8e <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   4dbe6:	a902      	add	r1, sp, #8
   4dbe8:	4628      	mov	r0, r5
   4dbea:	f7e2 fc2f 	bl	3044c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   4dbee:	2102      	movs	r1, #2
   4dbf0:	4606      	mov	r6, r0
   4dbf2:	f104 0008 	add.w	r0, r4, #8
   4dbf6:	f002 fd87 	bl	50708 <net_buf_simple_add>
	if (accepted) {
   4dbfa:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   4dbfe:	b2db      	uxtb	r3, r3
   4dc00:	8003      	strh	r3, [r0, #0]
   4dc02:	4622      	mov	r2, r4
   4dc04:	9700      	str	r7, [sp, #0]
   4dc06:	463b      	mov	r3, r7
   4dc08:	2105      	movs	r1, #5
   4dc0a:	4628      	mov	r0, r5
   4dc0c:	f7ff ff6f 	bl	4daee <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4dc10:	b110      	cbz	r0, 4dc18 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   4dc12:	4620      	mov	r0, r4
   4dc14:	f7f6 fa4e 	bl	440b4 <net_buf_unref>
	if (accepted) {
   4dc18:	2e00      	cmp	r6, #0
   4dc1a:	d0b8      	beq.n	4db8e <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   4dc1c:	a902      	add	r1, sp, #8
   4dc1e:	4628      	mov	r0, r5
   4dc20:	f7ff feba 	bl	4d998 <bt_conn_le_conn_update>
   4dc24:	e7b3      	b.n	4db8e <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   4dc26:	6828      	ldr	r0, [r5, #0]
   4dc28:	e7ba      	b.n	4dba0 <l2cap_recv+0x44>

0004dc2a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   4dc2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4dc2c:	b138      	cbz	r0, 4dc3e <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4dc2e:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   4dc32:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4dc34:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4dc38:	d001      	beq.n	4dc3e <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   4dc3a:	6880      	ldr	r0, [r0, #8]
   4dc3c:	e7f6      	b.n	4dc2c <bt_l2cap_le_lookup_tx_cid+0x2>
}
   4dc3e:	4770      	bx	lr

0004dc40 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   4dc40:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4dc42:	b138      	cbz	r0, 4dc54 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4dc44:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   4dc48:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4dc4a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4dc4e:	d001      	beq.n	4dc54 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   4dc50:	6880      	ldr	r0, [r0, #8]
   4dc52:	e7f6      	b.n	4dc42 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   4dc54:	4770      	bx	lr

0004dc56 <bt_l2cap_recv>:
{
   4dc56:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   4dc58:	898b      	ldrh	r3, [r1, #12]
   4dc5a:	2b03      	cmp	r3, #3
{
   4dc5c:	4605      	mov	r5, r0
   4dc5e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4dc60:	d804      	bhi.n	4dc6c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   4dc62:	4620      	mov	r0, r4
}
   4dc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   4dc68:	f7f6 ba24 	b.w	440b4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   4dc6c:	2104      	movs	r1, #4
   4dc6e:	f104 0008 	add.w	r0, r4, #8
   4dc72:	f002 fd7a 	bl	5076a <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   4dc76:	8841      	ldrh	r1, [r0, #2]
   4dc78:	4628      	mov	r0, r5
   4dc7a:	f7ff ffe1 	bl	4dc40 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4dc7e:	2800      	cmp	r0, #0
   4dc80:	d0ef      	beq.n	4dc62 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   4dc82:	6843      	ldr	r3, [r0, #4]
   4dc84:	4621      	mov	r1, r4
   4dc86:	691b      	ldr	r3, [r3, #16]
   4dc88:	4798      	blx	r3
   4dc8a:	e7ea      	b.n	4dc62 <bt_l2cap_recv+0xc>

0004dc8c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   4dc8c:	4770      	bx	lr

0004dc8e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   4dc8e:	4603      	mov	r3, r0
	return list->head;
   4dc90:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   4dc92:	b128      	cbz	r0, 4dca0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4dc94:	6859      	ldr	r1, [r3, #4]
	return node->next;
   4dc96:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4dc98:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4dc9a:	4288      	cmp	r0, r1
	list->tail = node;
   4dc9c:	bf08      	it	eq
   4dc9e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   4dca0:	4770      	bx	lr

0004dca2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   4dca2:	4603      	mov	r3, r0
	size_t bytes = 0;
   4dca4:	2000      	movs	r0, #0

	while (buf) {
   4dca6:	b903      	cbnz	r3, 4dcaa <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   4dca8:	4770      	bx	lr
		bytes += buf->len;
   4dcaa:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4dcac:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4dcae:	4410      	add	r0, r2
		buf = buf->frags;
   4dcb0:	e7f9      	b.n	4dca6 <net_buf_frags_len+0x4>

0004dcb2 <att_sent>:
	if (chan->ops->sent) {
   4dcb2:	684b      	ldr	r3, [r1, #4]
   4dcb4:	695b      	ldr	r3, [r3, #20]
{
   4dcb6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   4dcb8:	b103      	cbz	r3, 4dcbc <att_sent+0xa>
		chan->ops->sent(chan);
   4dcba:	4718      	bx	r3
}
   4dcbc:	4770      	bx	lr

0004dcbe <attr_read_type_cb>:
{
   4dcbe:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4dcc0:	68d4      	ldr	r4, [r2, #12]
   4dcc2:	7823      	ldrb	r3, [r4, #0]
   4dcc4:	3102      	adds	r1, #2
   4dcc6:	b913      	cbnz	r3, 4dcce <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   4dcc8:	7021      	strb	r1, [r4, #0]
	return true;
   4dcca:	2001      	movs	r0, #1
   4dccc:	e006      	b.n	4dcdc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   4dcce:	428b      	cmp	r3, r1
   4dcd0:	d0fb      	beq.n	4dcca <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4dcd2:	8983      	ldrh	r3, [r0, #12]
   4dcd4:	3b02      	subs	r3, #2
   4dcd6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   4dcd8:	2000      	movs	r0, #0
   4dcda:	6110      	str	r0, [r2, #16]
}
   4dcdc:	bd10      	pop	{r4, pc}

0004dcde <att_prepare_write_req>:
}
   4dcde:	2006      	movs	r0, #6
   4dce0:	4770      	bx	lr

0004dce2 <att_op_get_type>:
	switch (op) {
   4dce2:	281e      	cmp	r0, #30
   4dce4:	d816      	bhi.n	4dd14 <att_op_get_type+0x32>
   4dce6:	b308      	cbz	r0, 4dd2c <att_op_get_type+0x4a>
   4dce8:	1e43      	subs	r3, r0, #1
   4dcea:	2b1d      	cmp	r3, #29
   4dcec:	d81e      	bhi.n	4dd2c <att_op_get_type+0x4a>
   4dcee:	e8df f003 	tbb	[pc, r3]
   4dcf2:	2317      	.short	0x2317
   4dcf4:	23172317 	.word	0x23172317
   4dcf8:	23172317 	.word	0x23172317
   4dcfc:	23172317 	.word	0x23172317
   4dd00:	23172317 	.word	0x23172317
   4dd04:	231d1d17 	.word	0x231d1d17
   4dd08:	1d172317 	.word	0x1d172317
   4dd0c:	0f1b1d19 	.word	0x0f1b1d19
   4dd10:	2004      	movs	r0, #4
   4dd12:	4770      	bx	lr
   4dd14:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   4dd18:	2b52      	cmp	r3, #82	; 0x52
   4dd1a:	d107      	bne.n	4dd2c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   4dd1c:	2000      	movs	r0, #0
}
   4dd1e:	4770      	bx	lr
		return ATT_RESPONSE;
   4dd20:	2002      	movs	r0, #2
   4dd22:	4770      	bx	lr
		return ATT_NOTIFICATION;
   4dd24:	2003      	movs	r0, #3
   4dd26:	4770      	bx	lr
		return ATT_INDICATION;
   4dd28:	2005      	movs	r0, #5
   4dd2a:	4770      	bx	lr
		return ATT_COMMAND;
   4dd2c:	f010 0f40 	tst.w	r0, #64	; 0x40
   4dd30:	bf0c      	ite	eq
   4dd32:	2006      	moveq	r0, #6
   4dd34:	2000      	movne	r0, #0
   4dd36:	4770      	bx	lr
		return ATT_REQUEST;
   4dd38:	2001      	movs	r0, #1
   4dd3a:	4770      	bx	lr

0004dd3c <att_notify_mult>:
{
   4dd3c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   4dd3e:	6803      	ldr	r3, [r0, #0]
   4dd40:	898a      	ldrh	r2, [r1, #12]
   4dd42:	6818      	ldr	r0, [r3, #0]
   4dd44:	6889      	ldr	r1, [r1, #8]
   4dd46:	f001 fcca 	bl	4f6de <bt_gatt_mult_notification>
}
   4dd4a:	2000      	movs	r0, #0
   4dd4c:	bd08      	pop	{r3, pc}

0004dd4e <att_notify>:
{
   4dd4e:	b538      	push	{r3, r4, r5, lr}
   4dd50:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4dd52:	f101 0008 	add.w	r0, r1, #8
   4dd56:	460c      	mov	r4, r1
   4dd58:	f002 fd17 	bl	5078a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   4dd5c:	682d      	ldr	r5, [r5, #0]
   4dd5e:	89a3      	ldrh	r3, [r4, #12]
   4dd60:	68a2      	ldr	r2, [r4, #8]
   4dd62:	4601      	mov	r1, r0
   4dd64:	6828      	ldr	r0, [r5, #0]
   4dd66:	f001 fc8e 	bl	4f686 <bt_gatt_notification>
}
   4dd6a:	2000      	movs	r0, #0
   4dd6c:	bd38      	pop	{r3, r4, r5, pc}

0004dd6e <att_chan_mtu_updated>:
{
   4dd6e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4dd70:	6806      	ldr	r6, [r0, #0]
	return list->head;
   4dd72:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dd74:	b1e3      	cbz	r3, 4ddb0 <att_chan_mtu_updated+0x42>
	return node->next;
   4dd76:	681a      	ldr	r2, [r3, #0]
   4dd78:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   4dd7c:	b10a      	cbz	r2, 4dd82 <att_chan_mtu_updated+0x14>
   4dd7e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   4dd82:	2300      	movs	r3, #0
   4dd84:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   4dd86:	42a8      	cmp	r0, r5
   4dd88:	d009      	beq.n	4dd9e <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4dd8a:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   4dd8e:	42a1      	cmp	r1, r4
   4dd90:	bf38      	it	cc
   4dd92:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4dd94:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   4dd98:	42a3      	cmp	r3, r4
   4dd9a:	bf38      	it	cc
   4dd9c:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dd9e:	b142      	cbz	r2, 4ddb2 <att_chan_mtu_updated+0x44>
   4dda0:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   4dda4:	b10c      	cbz	r4, 4ddaa <att_chan_mtu_updated+0x3c>
   4dda6:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   4ddaa:	4615      	mov	r5, r2
   4ddac:	4622      	mov	r2, r4
   4ddae:	e7ea      	b.n	4dd86 <att_chan_mtu_updated+0x18>
   4ddb0:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4ddb2:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   4ddb6:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4ddba:	428c      	cmp	r4, r1
   4ddbc:	d801      	bhi.n	4ddc2 <att_chan_mtu_updated+0x54>
   4ddbe:	429a      	cmp	r2, r3
   4ddc0:	d909      	bls.n	4ddd6 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4ddc2:	429a      	cmp	r2, r3
   4ddc4:	bf38      	it	cc
   4ddc6:	461a      	movcc	r2, r3
   4ddc8:	42a1      	cmp	r1, r4
   4ddca:	6830      	ldr	r0, [r6, #0]
   4ddcc:	bf38      	it	cc
   4ddce:	4621      	movcc	r1, r4
}
   4ddd0:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4ddd2:	f7e4 bfc7 	b.w	32d64 <bt_gatt_att_max_mtu_changed>
}
   4ddd6:	bc70      	pop	{r4, r5, r6}
   4ddd8:	4770      	bx	lr

0004ddda <bt_gatt_foreach_attr>:
{
   4ddda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4dddc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4dde0:	2300      	movs	r3, #0
   4dde2:	9300      	str	r3, [sp, #0]
   4dde4:	461a      	mov	r2, r3
   4dde6:	f7e4 f931 	bl	3204c <bt_gatt_foreach_attr_type>
}
   4ddea:	b005      	add	sp, #20
   4ddec:	f85d fb04 	ldr.w	pc, [sp], #4

0004ddf0 <find_type_cb>:
{
   4ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   4ddf4:	f8d2 9000 	ldr.w	r9, [r2]
{
   4ddf8:	b091      	sub	sp, #68	; 0x44
   4ddfa:	4607      	mov	r7, r0
   4ddfc:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4ddfe:	2500      	movs	r5, #0
   4de00:	f642 0301 	movw	r3, #10241	; 0x2801
   4de04:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   4de06:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4de0a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4de0e:	a90b      	add	r1, sp, #44	; 0x2c
{
   4de10:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4de12:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4de16:	f7fe fd3c 	bl	4c892 <bt_uuid_cmp>
   4de1a:	2800      	cmp	r0, #0
   4de1c:	d079      	beq.n	4df12 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4de1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4de22:	6838      	ldr	r0, [r7, #0]
   4de24:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4de28:	a90b      	add	r1, sp, #44	; 0x2c
   4de2a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4de2e:	f7fe fd30 	bl	4c892 <bt_uuid_cmp>
   4de32:	b138      	cbz	r0, 4de44 <find_type_cb+0x54>
		if (data->group &&
   4de34:	68a3      	ldr	r3, [r4, #8]
   4de36:	b11b      	cbz	r3, 4de40 <find_type_cb+0x50>
   4de38:	885a      	ldrh	r2, [r3, #2]
   4de3a:	42b2      	cmp	r2, r6
   4de3c:	d200      	bcs.n	4de40 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   4de3e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   4de40:	2001      	movs	r0, #1
   4de42:	e009      	b.n	4de58 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   4de44:	6861      	ldr	r1, [r4, #4]
   4de46:	4608      	mov	r0, r1
   4de48:	f7ff ff2b 	bl	4dca2 <net_buf_frags_len>
   4de4c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4de50:	1a1b      	subs	r3, r3, r0
   4de52:	2b03      	cmp	r3, #3
   4de54:	d803      	bhi.n	4de5e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   4de56:	2000      	movs	r0, #0
}
   4de58:	b011      	add	sp, #68	; 0x44
   4de5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   4de5e:	4608      	mov	r0, r1
   4de60:	f002 fc24 	bl	506ac <net_buf_frag_last>
   4de64:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   4de66:	6860      	ldr	r0, [r4, #4]
   4de68:	f7ff ff1b 	bl	4dca2 <net_buf_frags_len>
   4de6c:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4de70:	f105 0b08 	add.w	fp, r5, #8
   4de74:	ebaa 0a00 	sub.w	sl, sl, r0
   4de78:	4658      	mov	r0, fp
   4de7a:	f002 fc92 	bl	507a2 <net_buf_simple_tailroom>
   4de7e:	4582      	cmp	sl, r0
   4de80:	d23f      	bcs.n	4df02 <find_type_cb+0x112>
   4de82:	6860      	ldr	r0, [r4, #4]
   4de84:	f7ff ff0d 	bl	4dca2 <net_buf_frags_len>
   4de88:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4de8c:	1a18      	subs	r0, r3, r0
	if (!len) {
   4de8e:	b970      	cbnz	r0, 4deae <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   4de90:	6863      	ldr	r3, [r4, #4]
   4de92:	7998      	ldrb	r0, [r3, #6]
   4de94:	f7f6 f84a 	bl	43f2c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4de98:	2200      	movs	r2, #0
   4de9a:	2300      	movs	r3, #0
   4de9c:	f002 fbcc 	bl	50638 <net_buf_alloc_fixed>
		if (!frag) {
   4dea0:	4605      	mov	r5, r0
   4dea2:	2800      	cmp	r0, #0
   4dea4:	d0d7      	beq.n	4de56 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   4dea6:	4601      	mov	r1, r0
   4dea8:	6860      	ldr	r0, [r4, #4]
   4deaa:	f002 fc10 	bl	506ce <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4deae:	2300      	movs	r3, #0
   4deb0:	9300      	str	r3, [sp, #0]
   4deb2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   4deb6:	4639      	mov	r1, r7
   4deb8:	2310      	movs	r3, #16
   4deba:	aa02      	add	r2, sp, #8
   4debc:	4640      	mov	r0, r8
   4debe:	47c8      	blx	r9
	if (read < 0) {
   4dec0:	1e07      	subs	r7, r0, #0
   4dec2:	db26      	blt.n	4df12 <find_type_cb+0x122>
	if (read != data->value_len) {
   4dec4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4dec6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   4dec8:	42ba      	cmp	r2, r7
   4deca:	d01e      	beq.n	4df0a <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4decc:	4601      	mov	r1, r0
   4dece:	a80b      	add	r0, sp, #44	; 0x2c
   4ded0:	f7fe fd0d 	bl	4c8ee <bt_uuid_create>
   4ded4:	b1e8      	cbz	r0, 4df12 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   4ded6:	b2fa      	uxtb	r2, r7
   4ded8:	a902      	add	r1, sp, #8
   4deda:	a806      	add	r0, sp, #24
   4dedc:	f7fe fd07 	bl	4c8ee <bt_uuid_create>
   4dee0:	b1b8      	cbz	r0, 4df12 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4dee2:	a906      	add	r1, sp, #24
   4dee4:	a80b      	add	r0, sp, #44	; 0x2c
   4dee6:	f7fe fcd4 	bl	4c892 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   4deea:	b990      	cbnz	r0, 4df12 <find_type_cb+0x122>
	data->err = 0x00;
   4deec:	2300      	movs	r3, #0
   4deee:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4def0:	2104      	movs	r1, #4
   4def2:	f105 0008 	add.w	r0, r5, #8
   4def6:	f002 fc07 	bl	50708 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   4defa:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   4defc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4defe:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   4df00:	e79e      	b.n	4de40 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   4df02:	4658      	mov	r0, fp
   4df04:	f002 fc4d 	bl	507a2 <net_buf_simple_tailroom>
   4df08:	e7c1      	b.n	4de8e <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   4df0a:	a902      	add	r1, sp, #8
   4df0c:	f7fe fbc2 	bl	4c694 <memcmp>
   4df10:	e7eb      	b.n	4deea <find_type_cb+0xfa>
	data->group = NULL;
   4df12:	2300      	movs	r3, #0
   4df14:	60a3      	str	r3, [r4, #8]
   4df16:	e793      	b.n	4de40 <find_type_cb+0x50>

0004df18 <find_info_cb>:
{
   4df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   4df1a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   4df1c:	6817      	ldr	r7, [r2, #0]
{
   4df1e:	4605      	mov	r5, r0
   4df20:	460e      	mov	r6, r1
   4df22:	4614      	mov	r4, r2
	if (!data->rsp) {
   4df24:	b963      	cbnz	r3, 4df40 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   4df26:	6850      	ldr	r0, [r2, #4]
   4df28:	2101      	movs	r1, #1
   4df2a:	3008      	adds	r0, #8
   4df2c:	f002 fbec 	bl	50708 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4df30:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4df32:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4df34:	781b      	ldrb	r3, [r3, #0]
   4df36:	2b00      	cmp	r3, #0
   4df38:	bf0c      	ite	eq
   4df3a:	2301      	moveq	r3, #1
   4df3c:	2302      	movne	r3, #2
   4df3e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4df40:	68a3      	ldr	r3, [r4, #8]
   4df42:	781b      	ldrb	r3, [r3, #0]
   4df44:	2b01      	cmp	r3, #1
   4df46:	d003      	beq.n	4df50 <find_info_cb+0x38>
   4df48:	2b02      	cmp	r3, #2
   4df4a:	d019      	beq.n	4df80 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   4df4c:	2000      	movs	r0, #0
   4df4e:	e016      	b.n	4df7e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4df50:	682b      	ldr	r3, [r5, #0]
   4df52:	781b      	ldrb	r3, [r3, #0]
   4df54:	2b00      	cmp	r3, #0
   4df56:	d1f9      	bne.n	4df4c <find_info_cb+0x34>
   4df58:	6860      	ldr	r0, [r4, #4]
   4df5a:	2104      	movs	r1, #4
   4df5c:	3008      	adds	r0, #8
   4df5e:	f002 fbd3 	bl	50708 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4df62:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   4df64:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4df66:	885b      	ldrh	r3, [r3, #2]
   4df68:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   4df6a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   4df6c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   4df6e:	899b      	ldrh	r3, [r3, #12]
   4df70:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4df74:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4df76:	2804      	cmp	r0, #4
   4df78:	bf94      	ite	ls
   4df7a:	2000      	movls	r0, #0
   4df7c:	2001      	movhi	r0, #1
}
   4df7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   4df80:	682b      	ldr	r3, [r5, #0]
   4df82:	781b      	ldrb	r3, [r3, #0]
   4df84:	2b02      	cmp	r3, #2
   4df86:	d1e1      	bne.n	4df4c <find_info_cb+0x34>
   4df88:	6860      	ldr	r0, [r4, #4]
   4df8a:	2112      	movs	r1, #18
   4df8c:	3008      	adds	r0, #8
   4df8e:	f002 fbbb 	bl	50708 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4df92:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   4df94:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4df96:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   4df98:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4df9c:	3101      	adds	r1, #1
   4df9e:	f7fe fb8a 	bl	4c6b6 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4dfa2:	6863      	ldr	r3, [r4, #4]
   4dfa4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4dfa8:	899b      	ldrh	r3, [r3, #12]
   4dfaa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4dfac:	2812      	cmp	r0, #18
   4dfae:	e7e3      	b.n	4df78 <find_info_cb+0x60>

0004dfb0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   4dfb0:	68d0      	ldr	r0, [r2, #12]
   4dfb2:	7803      	ldrb	r3, [r0, #0]
   4dfb4:	3104      	adds	r1, #4
   4dfb6:	b913      	cbnz	r3, 4dfbe <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4dfb8:	7001      	strb	r1, [r0, #0]
	return true;
   4dfba:	2001      	movs	r0, #1
}
   4dfbc:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   4dfbe:	428b      	cmp	r3, r1
   4dfc0:	d0fb      	beq.n	4dfba <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   4dfc2:	6891      	ldr	r1, [r2, #8]
   4dfc4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   4dfc6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4dfc8:	3b04      	subs	r3, #4
   4dfca:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   4dfcc:	6110      	str	r0, [r2, #16]
		return false;
   4dfce:	4770      	bx	lr

0004dfd0 <att_get>:
{
   4dfd0:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4dfd2:	7b43      	ldrb	r3, [r0, #13]
   4dfd4:	2b07      	cmp	r3, #7
   4dfd6:	d001      	beq.n	4dfdc <att_get+0xc>
		return NULL;
   4dfd8:	2000      	movs	r0, #0
}
   4dfda:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   4dfdc:	2104      	movs	r1, #4
   4dfde:	f7ff fe2f 	bl	4dc40 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4dfe2:	2800      	cmp	r0, #0
   4dfe4:	d0f8      	beq.n	4dfd8 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4dfe6:	f3bf 8f5b 	dmb	ish
   4dfea:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   4dfee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   4dff2:	075b      	lsls	r3, r3, #29
   4dff4:	d4f0      	bmi.n	4dfd8 <att_get+0x8>
	return att_chan->att;
   4dff6:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4dffa:	e7ee      	b.n	4dfda <att_get+0xa>

0004dffc <chan_req_sent>:
	if (chan->req) {
   4dffc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4e000:	b133      	cbz	r3, 4e010 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4e002:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4e006:	2300      	movs	r3, #0
   4e008:	f500 7088 	add.w	r0, r0, #272	; 0x110
   4e00c:	f7fa be58 	b.w	48cc0 <k_work_reschedule>
}
   4e010:	4770      	bx	lr

0004e012 <write_cb>:
{
   4e012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4e014:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4e016:	4601      	mov	r1, r0
{
   4e018:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   4e01a:	222a      	movs	r2, #42	; 0x2a
   4e01c:	6820      	ldr	r0, [r4, #0]
   4e01e:	f001 f816 	bl	4f04e <bt_gatt_check_perm>
   4e022:	4605      	mov	r5, r0
   4e024:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4e026:	bb20      	cbnz	r0, 4e072 <write_cb+0x60>
	if (!data->req) {
   4e028:	7a23      	ldrb	r3, [r4, #8]
   4e02a:	b1ab      	cbz	r3, 4e058 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   4e02c:	2b18      	cmp	r3, #24
   4e02e:	bf14      	ite	ne
   4e030:	2300      	movne	r3, #0
   4e032:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   4e034:	9301      	str	r3, [sp, #4]
   4e036:	8a63      	ldrh	r3, [r4, #18]
   4e038:	9300      	str	r3, [sp, #0]
   4e03a:	68b7      	ldr	r7, [r6, #8]
   4e03c:	8a23      	ldrh	r3, [r4, #16]
   4e03e:	68e2      	ldr	r2, [r4, #12]
   4e040:	6820      	ldr	r0, [r4, #0]
   4e042:	4631      	mov	r1, r6
   4e044:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   4e046:	1e03      	subs	r3, r0, #0
   4e048:	db08      	blt.n	4e05c <write_cb+0x4a>
   4e04a:	8a22      	ldrh	r2, [r4, #16]
   4e04c:	4293      	cmp	r3, r2
   4e04e:	d10e      	bne.n	4e06e <write_cb+0x5c>
	data->err = 0U;
   4e050:	2300      	movs	r3, #0
   4e052:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4e054:	2501      	movs	r5, #1
   4e056:	e007      	b.n	4e068 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   4e058:	2302      	movs	r3, #2
   4e05a:	e7eb      	b.n	4e034 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   4e05c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   4e060:	d305      	bcc.n	4e06e <write_cb+0x5c>
		return -err;
   4e062:	425b      	negs	r3, r3
   4e064:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   4e066:	7523      	strb	r3, [r4, #20]
}
   4e068:	4628      	mov	r0, r5
   4e06a:	b003      	add	sp, #12
   4e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   4e06e:	230e      	movs	r3, #14
   4e070:	e7f9      	b.n	4e066 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   4e072:	2500      	movs	r5, #0
   4e074:	e7f8      	b.n	4e068 <write_cb+0x56>

0004e076 <att_chan_read>:
{
   4e076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e07a:	4680      	mov	r8, r0
   4e07c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4e07e:	4610      	mov	r0, r2
{
   4e080:	4699      	mov	r9, r3
   4e082:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4e084:	f7ff fe0d 	bl	4dca2 <net_buf_frags_len>
   4e088:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4e08c:	4283      	cmp	r3, r0
{
   4e08e:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4e090:	d97a      	bls.n	4e188 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   4e092:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4e096:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   4e098:	4630      	mov	r0, r6
   4e09a:	f002 fb07 	bl	506ac <net_buf_frag_last>
	size_t len, total = 0;
   4e09e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   4e0a2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4e0a4:	4630      	mov	r0, r6
   4e0a6:	f7ff fdfc 	bl	4dca2 <net_buf_frags_len>
   4e0aa:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4e0ae:	f105 0708 	add.w	r7, r5, #8
   4e0b2:	1a24      	subs	r4, r4, r0
   4e0b4:	4638      	mov	r0, r7
   4e0b6:	f002 fb74 	bl	507a2 <net_buf_simple_tailroom>
   4e0ba:	4284      	cmp	r4, r0
   4e0bc:	d211      	bcs.n	4e0e2 <att_chan_read+0x6c>
   4e0be:	4630      	mov	r0, r6
   4e0c0:	f7ff fdef 	bl	4dca2 <net_buf_frags_len>
   4e0c4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4e0c8:	1a24      	subs	r4, r4, r0
		if (!len) {
   4e0ca:	bb34      	cbnz	r4, 4e11a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4e0cc:	79b0      	ldrb	r0, [r6, #6]
   4e0ce:	f7f5 ff2d 	bl	43f2c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4e0d2:	2200      	movs	r2, #0
   4e0d4:	2300      	movs	r3, #0
   4e0d6:	f002 faaf 	bl	50638 <net_buf_alloc_fixed>
			if (!frag) {
   4e0da:	4605      	mov	r5, r0
   4e0dc:	b930      	cbnz	r0, 4e0ec <att_chan_read+0x76>
	return total;
   4e0de:	4657      	mov	r7, sl
   4e0e0:	e02c      	b.n	4e13c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   4e0e2:	4638      	mov	r0, r7
   4e0e4:	f002 fb5d 	bl	507a2 <net_buf_simple_tailroom>
   4e0e8:	4604      	mov	r4, r0
   4e0ea:	e7ee      	b.n	4e0ca <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4e0ec:	4601      	mov	r1, r0
   4e0ee:	4630      	mov	r0, r6
   4e0f0:	f002 faed 	bl	506ce <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4e0f4:	4630      	mov	r0, r6
   4e0f6:	f7ff fdd4 	bl	4dca2 <net_buf_frags_len>
   4e0fa:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4e0fe:	f105 0708 	add.w	r7, r5, #8
   4e102:	1a24      	subs	r4, r4, r0
   4e104:	4638      	mov	r0, r7
   4e106:	f002 fb4c 	bl	507a2 <net_buf_simple_tailroom>
   4e10a:	4284      	cmp	r4, r0
   4e10c:	d21a      	bcs.n	4e144 <att_chan_read+0xce>
   4e10e:	4630      	mov	r0, r6
   4e110:	f7ff fdc7 	bl	4dca2 <net_buf_frags_len>
   4e114:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4e118:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   4e11a:	68a9      	ldr	r1, [r5, #8]
   4e11c:	89aa      	ldrh	r2, [r5, #12]
   4e11e:	f8db 7004 	ldr.w	r7, [fp, #4]
   4e122:	9803      	ldr	r0, [sp, #12]
   4e124:	f8cd 9000 	str.w	r9, [sp]
   4e128:	440a      	add	r2, r1
   4e12a:	b2a3      	uxth	r3, r4
   4e12c:	4659      	mov	r1, fp
   4e12e:	47b8      	blx	r7
		if (read < 0) {
   4e130:	1e07      	subs	r7, r0, #0
   4e132:	da0c      	bge.n	4e14e <att_chan_read+0xd8>
				return total;
   4e134:	f1ba 0f00 	cmp.w	sl, #0
   4e138:	bf18      	it	ne
   4e13a:	4657      	movne	r7, sl
}
   4e13c:	4638      	mov	r0, r7
   4e13e:	b005      	add	sp, #20
   4e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4e144:	4638      	mov	r0, r7
   4e146:	f002 fb2c 	bl	507a2 <net_buf_simple_tailroom>
   4e14a:	4604      	mov	r4, r0
   4e14c:	e7e5      	b.n	4e11a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4e14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4e150:	b993      	cbnz	r3, 4e178 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   4e152:	4639      	mov	r1, r7
   4e154:	f105 0008 	add.w	r0, r5, #8
   4e158:	f002 fad6 	bl	50708 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4e15c:	4630      	mov	r0, r6
   4e15e:	f7ff fda0 	bl	4dca2 <net_buf_frags_len>
   4e162:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4e166:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4e168:	4283      	cmp	r3, r0
		total += read;
   4e16a:	44ba      	add	sl, r7
		offset += read;
   4e16c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4e170:	d9b5      	bls.n	4e0de <att_chan_read+0x68>
   4e172:	42a7      	cmp	r7, r4
   4e174:	d096      	beq.n	4e0a4 <att_chan_read+0x2e>
   4e176:	e7b2      	b.n	4e0de <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4e178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   4e17a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4e17c:	4639      	mov	r1, r7
   4e17e:	4628      	mov	r0, r5
   4e180:	4798      	blx	r3
   4e182:	2800      	cmp	r0, #0
   4e184:	d1e5      	bne.n	4e152 <att_chan_read+0xdc>
   4e186:	e7aa      	b.n	4e0de <att_chan_read+0x68>
		return 0;
   4e188:	2700      	movs	r7, #0
   4e18a:	e7d7      	b.n	4e13c <att_chan_read+0xc6>

0004e18c <chan_req_send>:
{
   4e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4e18e:	688f      	ldr	r7, [r1, #8]
{
   4e190:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4e192:	4638      	mov	r0, r7
   4e194:	f7ff fd85 	bl	4dca2 <net_buf_frags_len>
   4e198:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   4e19c:	4283      	cmp	r3, r0
{
   4e19e:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4e1a0:	d30d      	bcc.n	4e1be <chan_req_send+0x32>
	req->buf = NULL;
   4e1a2:	2600      	movs	r6, #0
	chan->req = req;
   4e1a4:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   4e1a8:	4632      	mov	r2, r6
	req->buf = NULL;
   4e1aa:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   4e1ac:	4620      	mov	r0, r4
   4e1ae:	4639      	mov	r1, r7
   4e1b0:	f7e2 fe80 	bl	30eb4 <chan_send>
	if (err) {
   4e1b4:	b110      	cbz	r0, 4e1bc <chan_req_send+0x30>
		req->buf = buf;
   4e1b6:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   4e1b8:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   4e1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   4e1be:	f06f 0079 	mvn.w	r0, #121	; 0x79
   4e1c2:	e7fb      	b.n	4e1bc <chan_req_send+0x30>

0004e1c4 <process_queue>:
{
   4e1c4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   4e1c6:	2200      	movs	r2, #0
{
   4e1c8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   4e1ca:	2300      	movs	r3, #0
   4e1cc:	4608      	mov	r0, r1
{
   4e1ce:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   4e1d0:	f002 fa37 	bl	50642 <net_buf_get>
	if (buf) {
   4e1d4:	4605      	mov	r5, r0
   4e1d6:	b160      	cbz	r0, 4e1f2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   4e1d8:	4601      	mov	r1, r0
   4e1da:	2200      	movs	r2, #0
   4e1dc:	4620      	mov	r0, r4
   4e1de:	f7e2 fe69 	bl	30eb4 <chan_send>
		if (err) {
   4e1e2:	4604      	mov	r4, r0
   4e1e4:	b118      	cbz	r0, 4e1ee <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   4e1e6:	4629      	mov	r1, r5
   4e1e8:	4630      	mov	r0, r6
   4e1ea:	f003 fad0 	bl	5178e <k_queue_prepend>
}
   4e1ee:	4620      	mov	r0, r4
   4e1f0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   4e1f2:	f06f 0401 	mvn.w	r4, #1
   4e1f6:	e7fa      	b.n	4e1ee <process_queue+0x2a>

0004e1f8 <bt_att_chan_send_rsp>:
{
   4e1f8:	b538      	push	{r3, r4, r5, lr}
   4e1fa:	4604      	mov	r4, r0
   4e1fc:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   4e1fe:	f7e2 fe59 	bl	30eb4 <chan_send>
	if (err) {
   4e202:	b130      	cbz	r0, 4e212 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4e204:	4629      	mov	r1, r5
   4e206:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   4e20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   4e20e:	f002 ba3c 	b.w	5068a <net_buf_put>
}
   4e212:	bd38      	pop	{r3, r4, r5, pc}

0004e214 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4e214:	b510      	push	{r4, lr}
	return list->head;
   4e216:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4e218:	2200      	movs	r2, #0
   4e21a:	b153      	cbz	r3, 4e232 <sys_slist_find_and_remove.isra.0+0x1e>
   4e21c:	428b      	cmp	r3, r1
   4e21e:	d10e      	bne.n	4e23e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   4e220:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4e222:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   4e224:	b932      	cbnz	r2, 4e234 <sys_slist_find_and_remove.isra.0+0x20>
   4e226:	42a1      	cmp	r1, r4
	list->head = node;
   4e228:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   4e22a:	d100      	bne.n	4e22e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   4e22c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4e22e:	2300      	movs	r3, #0
   4e230:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4e232:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4e234:	42a1      	cmp	r1, r4
	parent->next = child;
   4e236:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4e238:	bf08      	it	eq
   4e23a:	6042      	streq	r2, [r0, #4]
}
   4e23c:	e7f7      	b.n	4e22e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   4e23e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4e240:	681b      	ldr	r3, [r3, #0]
   4e242:	e7ea      	b.n	4e21a <sys_slist_find_and_remove.isra.0+0x6>

0004e244 <att_exec_write_req>:
   4e244:	2006      	movs	r0, #6
   4e246:	4770      	bx	lr

0004e248 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4e248:	30f0      	adds	r0, #240	; 0xf0
   4e24a:	f3bf 8f5b 	dmb	ish
   4e24e:	e850 3f00 	ldrex	r3, [r0]
   4e252:	f023 0301 	bic.w	r3, r3, #1
   4e256:	e840 3200 	strex	r2, r3, [r0]
   4e25a:	2a00      	cmp	r2, #0
   4e25c:	d1f7      	bne.n	4e24e <chan_rsp_sent+0x6>
   4e25e:	f3bf 8f5b 	dmb	ish
}
   4e262:	4770      	bx	lr

0004e264 <chan_cfm_sent>:
   4e264:	30f0      	adds	r0, #240	; 0xf0
   4e266:	f3bf 8f5b 	dmb	ish
   4e26a:	e850 3f00 	ldrex	r3, [r0]
   4e26e:	f023 0302 	bic.w	r3, r3, #2
   4e272:	e840 3200 	strex	r2, r3, [r0]
   4e276:	2a00      	cmp	r2, #0
   4e278:	d1f7      	bne.n	4e26a <chan_cfm_sent+0x6>
   4e27a:	f3bf 8f5b 	dmb	ish
}
   4e27e:	4770      	bx	lr

0004e280 <read_cb>:
{
   4e280:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   4e284:	f8d2 8000 	ldr.w	r8, [r2]
{
   4e288:	4606      	mov	r6, r0
	data->err = 0x00;
   4e28a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   4e28c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   4e290:	7317      	strb	r7, [r2, #12]
{
   4e292:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   4e294:	4631      	mov	r1, r6
   4e296:	2215      	movs	r2, #21
   4e298:	f000 fed9 	bl	4f04e <bt_gatt_check_perm>
   4e29c:	4604      	mov	r4, r0
   4e29e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   4e2a0:	b9a0      	cbnz	r0, 4e2cc <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   4e2a2:	e9cd 0000 	strd	r0, r0, [sp]
   4e2a6:	88ab      	ldrh	r3, [r5, #4]
   4e2a8:	68aa      	ldr	r2, [r5, #8]
   4e2aa:	4631      	mov	r1, r6
   4e2ac:	4640      	mov	r0, r8
   4e2ae:	f7ff fee2 	bl	4e076 <att_chan_read>
	if (ret < 0) {
   4e2b2:	1e03      	subs	r3, r0, #0
   4e2b4:	da0c      	bge.n	4e2d0 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   4e2b6:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   4e2ba:	bf26      	itte	cs
   4e2bc:	425b      	negcs	r3, r3
   4e2be:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   4e2c0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   4e2c2:	732b      	strb	r3, [r5, #12]
}
   4e2c4:	4620      	mov	r0, r4
   4e2c6:	b002      	add	sp, #8
   4e2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   4e2cc:	463c      	mov	r4, r7
   4e2ce:	e7f9      	b.n	4e2c4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   4e2d0:	2401      	movs	r4, #1
   4e2d2:	e7f7      	b.n	4e2c4 <read_cb+0x44>

0004e2d4 <bt_att_sent>:
{
   4e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   4e2d6:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   4e2da:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4e2de:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   4e2e0:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   4e2e4:	b10b      	cbz	r3, 4e2ea <bt_att_sent+0x16>
		chan->sent(chan);
   4e2e6:	4638      	mov	r0, r7
   4e2e8:	4798      	blx	r3
   4e2ea:	f3bf 8f5b 	dmb	ish
   4e2ee:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4e2f2:	e853 2f00 	ldrex	r2, [r3]
   4e2f6:	f022 0210 	bic.w	r2, r2, #16
   4e2fa:	e843 2100 	strex	r1, r2, [r3]
   4e2fe:	2900      	cmp	r1, #0
   4e300:	d1f7      	bne.n	4e2f2 <bt_att_sent+0x1e>
   4e302:	f3bf 8f5b 	dmb	ish
	if (!att) {
   4e306:	b30c      	cbz	r4, 4e34c <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   4e308:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4e30c:	b98b      	cbnz	r3, 4e332 <bt_att_sent+0x5e>
   4e30e:	6863      	ldr	r3, [r4, #4]
   4e310:	b17b      	cbz	r3, 4e332 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4e312:	1d20      	adds	r0, r4, #4
   4e314:	f7ff fcbb 	bl	4dc8e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4e318:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4e31a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4e31c:	4638      	mov	r0, r7
   4e31e:	f7ff ff35 	bl	4e18c <chan_req_send>
   4e322:	2800      	cmp	r0, #0
   4e324:	da12      	bge.n	4e34c <bt_att_sent+0x78>
	parent->next = child;
   4e326:	6863      	ldr	r3, [r4, #4]
   4e328:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4e32a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4e32c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4e32e:	b903      	cbnz	r3, 4e332 <bt_att_sent+0x5e>
	list->tail = node;
   4e330:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4e332:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   4e336:	4638      	mov	r0, r7
   4e338:	f7ff ff44 	bl	4e1c4 <process_queue>
	if (!err) {
   4e33c:	b130      	cbz	r0, 4e34c <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   4e33e:	f104 010c 	add.w	r1, r4, #12
   4e342:	4638      	mov	r0, r7
}
   4e344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   4e348:	f7ff bf3c 	b.w	4e1c4 <process_queue>
}
   4e34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004e34e <att_req_send_process>:
{
   4e34e:	b570      	push	{r4, r5, r6, lr}
   4e350:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   4e352:	3004      	adds	r0, #4
   4e354:	f7ff fc9b 	bl	4dc8e <sys_slist_get>
	if (!node) {
   4e358:	4605      	mov	r5, r0
   4e35a:	b1b8      	cbz	r0, 4e38c <att_req_send_process+0x3e>
	return list->head;
   4e35c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e35e:	b14b      	cbz	r3, 4e374 <att_req_send_process+0x26>
	return node->next;
   4e360:	681e      	ldr	r6, [r3, #0]
   4e362:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4e366:	b10e      	cbz	r6, 4e36c <att_req_send_process+0x1e>
   4e368:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   4e36c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4e370:	b13b      	cbz	r3, 4e382 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e372:	b966      	cbnz	r6, 4e38e <att_req_send_process+0x40>
	parent->next = child;
   4e374:	6863      	ldr	r3, [r4, #4]
   4e376:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   4e378:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4e37a:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4e37c:	b933      	cbnz	r3, 4e38c <att_req_send_process+0x3e>
	list->tail = node;
   4e37e:	60a5      	str	r5, [r4, #8]
}
   4e380:	e004      	b.n	4e38c <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   4e382:	4629      	mov	r1, r5
   4e384:	f7ff ff02 	bl	4e18c <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4e388:	2800      	cmp	r0, #0
   4e38a:	dbf2      	blt.n	4e372 <att_req_send_process+0x24>
}
   4e38c:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   4e38e:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e392:	b10b      	cbz	r3, 4e398 <att_req_send_process+0x4a>
   4e394:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4e398:	4630      	mov	r0, r6
   4e39a:	461e      	mov	r6, r3
   4e39c:	e7e6      	b.n	4e36c <att_req_send_process+0x1e>

0004e39e <bt_att_status>:
{
   4e39e:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4e3a0:	f3bf 8f5b 	dmb	ish
   4e3a4:	680b      	ldr	r3, [r1, #0]
   4e3a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4e3aa:	07db      	lsls	r3, r3, #31
{
   4e3ac:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4e3ae:	d519      	bpl.n	4e3e4 <bt_att_status+0x46>
	if (!chan->att) {
   4e3b0:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4e3b4:	b1b0      	cbz	r0, 4e3e4 <bt_att_status+0x46>
	if (chan->req) {
   4e3b6:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4e3ba:	b99b      	cbnz	r3, 4e3e4 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   4e3bc:	3004      	adds	r0, #4
   4e3be:	f7ff fc66 	bl	4dc8e <sys_slist_get>
	if (!node) {
   4e3c2:	4604      	mov	r4, r0
   4e3c4:	b170      	cbz	r0, 4e3e4 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   4e3c6:	4601      	mov	r1, r0
   4e3c8:	f1a5 0008 	sub.w	r0, r5, #8
   4e3cc:	f7ff fede 	bl	4e18c <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4e3d0:	2800      	cmp	r0, #0
   4e3d2:	da07      	bge.n	4e3e4 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   4e3d4:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   4e3d8:	685a      	ldr	r2, [r3, #4]
   4e3da:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   4e3dc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   4e3de:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4e3e0:	b902      	cbnz	r2, 4e3e4 <bt_att_status+0x46>
	list->tail = node;
   4e3e2:	609c      	str	r4, [r3, #8]
}
   4e3e4:	bd38      	pop	{r3, r4, r5, pc}

0004e3e6 <bt_att_chan_create_pdu>:
{
   4e3e6:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4e3e8:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   4e3ec:	3201      	adds	r2, #1
   4e3ee:	429a      	cmp	r2, r3
{
   4e3f0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4e3f2:	d81b      	bhi.n	4e42c <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   4e3f4:	4608      	mov	r0, r1
   4e3f6:	f7ff fc74 	bl	4dce2 <att_op_get_type>
   4e3fa:	2802      	cmp	r0, #2
   4e3fc:	d001      	beq.n	4e402 <bt_att_chan_create_pdu+0x1c>
   4e3fe:	2804      	cmp	r0, #4
   4e400:	d10f      	bne.n	4e422 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   4e402:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4e406:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   4e408:	2100      	movs	r1, #0
   4e40a:	4608      	mov	r0, r1
   4e40c:	f7ff fb6c 	bl	4dae8 <bt_l2cap_create_pdu_timeout>
   4e410:	4604      	mov	r4, r0
	if (!buf) {
   4e412:	b120      	cbz	r0, 4e41e <bt_att_chan_create_pdu+0x38>
   4e414:	2101      	movs	r1, #1
   4e416:	3008      	adds	r0, #8
   4e418:	f002 f976 	bl	50708 <net_buf_simple_add>
	hdr->code = op;
   4e41c:	7005      	strb	r5, [r0, #0]
}
   4e41e:	4620      	mov	r0, r4
   4e420:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4e422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4e426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4e42a:	e7ed      	b.n	4e408 <bt_att_chan_create_pdu+0x22>
		return NULL;
   4e42c:	2400      	movs	r4, #0
   4e42e:	e7f6      	b.n	4e41e <bt_att_chan_create_pdu+0x38>

0004e430 <att_write_req>:
{
   4e430:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4e432:	460c      	mov	r4, r1
   4e434:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4e436:	f101 0008 	add.w	r0, r1, #8
   4e43a:	f002 f9a6 	bl	5078a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   4e43e:	89a2      	ldrh	r2, [r4, #12]
   4e440:	9201      	str	r2, [sp, #4]
   4e442:	68a2      	ldr	r2, [r4, #8]
   4e444:	9200      	str	r2, [sp, #0]
   4e446:	4603      	mov	r3, r0
   4e448:	2213      	movs	r2, #19
   4e44a:	2112      	movs	r1, #18
   4e44c:	4628      	mov	r0, r5
   4e44e:	f7e2 fec7 	bl	311e0 <att_write_rsp.constprop.0>
}
   4e452:	b003      	add	sp, #12
   4e454:	bd30      	pop	{r4, r5, pc}

0004e456 <att_write_cmd>:
{
   4e456:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4e458:	460c      	mov	r4, r1
   4e45a:	4605      	mov	r5, r0
   4e45c:	f101 0008 	add.w	r0, r1, #8
   4e460:	f002 f993 	bl	5078a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   4e464:	89a2      	ldrh	r2, [r4, #12]
   4e466:	9201      	str	r2, [sp, #4]
   4e468:	68a2      	ldr	r2, [r4, #8]
   4e46a:	9200      	str	r2, [sp, #0]
   4e46c:	2200      	movs	r2, #0
   4e46e:	4603      	mov	r3, r0
   4e470:	4611      	mov	r1, r2
   4e472:	4628      	mov	r0, r5
   4e474:	f7e2 feb4 	bl	311e0 <att_write_rsp.constprop.0>
}
   4e478:	b003      	add	sp, #12
   4e47a:	bd30      	pop	{r4, r5, pc}

0004e47c <bt_att_create_pdu>:
{
   4e47c:	b570      	push	{r4, r5, r6, lr}
   4e47e:	460e      	mov	r6, r1
   4e480:	4615      	mov	r5, r2
	att = att_get(conn);
   4e482:	f7ff fda5 	bl	4dfd0 <att_get>
	if (!att) {
   4e486:	b168      	cbz	r0, 4e4a4 <bt_att_create_pdu+0x28>
	return list->head;
   4e488:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e48a:	b15b      	cbz	r3, 4e4a4 <bt_att_create_pdu+0x28>
   4e48c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   4e490:	681b      	ldr	r3, [r3, #0]
   4e492:	b10b      	cbz	r3, 4e498 <bt_att_create_pdu+0x1c>
   4e494:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4e498:	1c6a      	adds	r2, r5, #1
   4e49a:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4e49e:	428a      	cmp	r2, r1
   4e4a0:	d902      	bls.n	4e4a8 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e4a2:	b93b      	cbnz	r3, 4e4b4 <bt_att_create_pdu+0x38>
}
   4e4a4:	2000      	movs	r0, #0
   4e4a6:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   4e4a8:	462a      	mov	r2, r5
   4e4aa:	4631      	mov	r1, r6
}
   4e4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   4e4b0:	f7ff bf99 	b.w	4e3e6 <bt_att_chan_create_pdu>
   4e4b4:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e4b8:	b10c      	cbz	r4, 4e4be <bt_att_create_pdu+0x42>
   4e4ba:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   4e4be:	4618      	mov	r0, r3
   4e4c0:	4623      	mov	r3, r4
   4e4c2:	e7ea      	b.n	4e49a <bt_att_create_pdu+0x1e>

0004e4c4 <att_read_blob_req>:
{
   4e4c4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   4e4c6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   4e4c8:	8813      	ldrh	r3, [r2, #0]
   4e4ca:	8852      	ldrh	r2, [r2, #2]
   4e4cc:	9200      	str	r2, [sp, #0]
   4e4ce:	210c      	movs	r1, #12
   4e4d0:	220d      	movs	r2, #13
   4e4d2:	f7e2 ffbb 	bl	3144c <att_read_rsp>
}
   4e4d6:	b003      	add	sp, #12
   4e4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0004e4dc <att_read_req>:
{
   4e4dc:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   4e4de:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   4e4e0:	2200      	movs	r2, #0
   4e4e2:	881b      	ldrh	r3, [r3, #0]
   4e4e4:	9200      	str	r2, [sp, #0]
   4e4e6:	210a      	movs	r1, #10
   4e4e8:	220b      	movs	r2, #11
   4e4ea:	f7e2 ffaf 	bl	3144c <att_read_rsp>
}
   4e4ee:	b003      	add	sp, #12
   4e4f0:	f85d fb04 	ldr.w	pc, [sp], #4

0004e4f4 <bt_att_init>:
	bt_gatt_init();
   4e4f4:	f7e3 bd10 	b.w	31f18 <bt_gatt_init>

0004e4f8 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   4e4f8:	898a      	ldrh	r2, [r1, #12]
   4e4fa:	6889      	ldr	r1, [r1, #8]
   4e4fc:	2300      	movs	r3, #0
   4e4fe:	f7e3 b969 	b.w	317d4 <att_handle_rsp>

0004e502 <att_handle_find_type_rsp>:
   4e502:	f7ff bff9 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e506 <att_handle_read_type_rsp>:
   4e506:	f7ff bff7 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e50a <att_handle_read_rsp>:
   4e50a:	f7ff bff5 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e50e <att_handle_read_blob_rsp>:
   4e50e:	f7ff bff3 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e512 <att_handle_read_mult_rsp>:
   4e512:	f7ff bff1 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e516 <att_handle_read_group_rsp>:
   4e516:	f7ff bfef 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e51a <att_handle_write_rsp>:
   4e51a:	f7ff bfed 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e51e <att_handle_prepare_write_rsp>:
   4e51e:	f7ff bfeb 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e522 <att_handle_exec_write_rsp>:
   4e522:	f7ff bfe9 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e526 <att_confirm>:
   4e526:	f7ff bfe7 	b.w	4e4f8 <att_handle_find_info_rsp>

0004e52a <att_mtu_rsp>:
{
   4e52a:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   4e52c:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   4e52e:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4e530:	2b16      	cmp	r3, #22
{
   4e532:	4604      	mov	r4, r0
   4e534:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4e536:	d806      	bhi.n	4e546 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   4e538:	2200      	movs	r2, #0
   4e53a:	2304      	movs	r3, #4
   4e53c:	4611      	mov	r1, r2
}
   4e53e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4e542:	f7e3 b947 	b.w	317d4 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   4e546:	2b41      	cmp	r3, #65	; 0x41
   4e548:	bf28      	it	cs
   4e54a:	2341      	movcs	r3, #65	; 0x41
   4e54c:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   4e550:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   4e554:	f7ff fc0b 	bl	4dd6e <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4e558:	89aa      	ldrh	r2, [r5, #12]
   4e55a:	2300      	movs	r3, #0
   4e55c:	4631      	mov	r1, r6
   4e55e:	4620      	mov	r0, r4
   4e560:	e7ed      	b.n	4e53e <att_mtu_rsp+0x14>

0004e562 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   4e562:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   4e566:	b570      	push	{r4, r5, r6, lr}
   4e568:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   4e56a:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   4e56e:	2b00      	cmp	r3, #0
   4e570:	d037      	beq.n	4e5e2 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   4e572:	b171      	cbz	r1, 4e592 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   4e574:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   4e578:	2b00      	cmp	r3, #0
   4e57a:	d032      	beq.n	4e5e2 <bt_att_encrypt_change+0x80>
   4e57c:	7c1b      	ldrb	r3, [r3, #16]
   4e57e:	07da      	lsls	r2, r3, #31
   4e580:	d52f      	bpl.n	4e5e2 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   4e582:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   4e584:	2200      	movs	r2, #0
   4e586:	4630      	mov	r0, r6
   4e588:	4611      	mov	r1, r2
}
   4e58a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   4e58e:	f7e3 b921 	b.w	317d4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   4e592:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   4e594:	4628      	mov	r0, r5
   4e596:	f7e4 fbf9 	bl	32d8c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   4e59a:	7a6b      	ldrb	r3, [r5, #9]
   4e59c:	2b01      	cmp	r3, #1
   4e59e:	d020      	beq.n	4e5e2 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   4e5a0:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   4e5a4:	b1ec      	cbz	r4, 4e5e2 <bt_att_encrypt_change+0x80>
   4e5a6:	7c23      	ldrb	r3, [r4, #16]
   4e5a8:	07db      	lsls	r3, r3, #31
   4e5aa:	d51a      	bpl.n	4e5e2 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   4e5ac:	68e3      	ldr	r3, [r4, #12]
   4e5ae:	2b00      	cmp	r3, #0
   4e5b0:	d0e7      	beq.n	4e582 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   4e5b2:	6962      	ldr	r2, [r4, #20]
   4e5b4:	7c61      	ldrb	r1, [r4, #17]
   4e5b6:	4630      	mov	r0, r6
   4e5b8:	f7ff ff15 	bl	4e3e6 <bt_att_chan_create_pdu>
	if (!buf) {
   4e5bc:	4605      	mov	r5, r0
   4e5be:	b140      	cbz	r0, 4e5d2 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   4e5c0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   4e5c4:	68e3      	ldr	r3, [r4, #12]
   4e5c6:	4798      	blx	r3
   4e5c8:	4602      	mov	r2, r0
   4e5ca:	b120      	cbz	r0, 4e5d6 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   4e5cc:	4628      	mov	r0, r5
   4e5ce:	f7f5 fd71 	bl	440b4 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   4e5d2:	230e      	movs	r3, #14
   4e5d4:	e7d6      	b.n	4e584 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   4e5d6:	4629      	mov	r1, r5
   4e5d8:	4630      	mov	r0, r6
   4e5da:	f7e2 fc6b 	bl	30eb4 <chan_send>
   4e5de:	2800      	cmp	r0, #0
   4e5e0:	d1f4      	bne.n	4e5cc <bt_att_encrypt_change+0x6a>
}
   4e5e2:	bd70      	pop	{r4, r5, r6, pc}

0004e5e4 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   4e5e4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   4e5e8:	f7e3 b95a 	b.w	318a0 <bt_att_disconnected>

0004e5ec <bt_att_send>:
{
   4e5ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4e5f0:	4607      	mov	r7, r0
   4e5f2:	460d      	mov	r5, r1
   4e5f4:	4616      	mov	r6, r2
   4e5f6:	4698      	mov	r8, r3
	att = att_get(conn);
   4e5f8:	f7ff fcea 	bl	4dfd0 <att_get>
	if (!att) {
   4e5fc:	4604      	mov	r4, r0
   4e5fe:	b938      	cbnz	r0, 4e610 <bt_att_send+0x24>
		net_buf_unref(buf);
   4e600:	4628      	mov	r0, r5
   4e602:	f7f5 fd57 	bl	440b4 <net_buf_unref>
		return -ENOTCONN;
   4e606:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4e60a:	b002      	add	sp, #8
   4e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   4e610:	b146      	cbz	r6, 4e624 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   4e612:	f8cd 8000 	str.w	r8, [sp]
   4e616:	4633      	mov	r3, r6
   4e618:	462a      	mov	r2, r5
   4e61a:	2104      	movs	r1, #4
   4e61c:	4638      	mov	r0, r7
   4e61e:	f7ff fa66 	bl	4daee <bt_l2cap_send_cb>
   4e622:	e7f2      	b.n	4e60a <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   4e624:	f100 060c 	add.w	r6, r0, #12
   4e628:	4629      	mov	r1, r5
   4e62a:	4630      	mov	r0, r6
   4e62c:	f002 f82d 	bl	5068a <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   4e630:	2200      	movs	r2, #0
   4e632:	2300      	movs	r3, #0
   4e634:	4630      	mov	r0, r6
   4e636:	f002 f804 	bl	50642 <net_buf_get>
	if (!buf) {
   4e63a:	4605      	mov	r5, r0
   4e63c:	b908      	cbnz	r0, 4e642 <bt_att_send+0x56>
	return 0;
   4e63e:	2000      	movs	r0, #0
   4e640:	e7e3      	b.n	4e60a <bt_att_send+0x1e>
	return list->head;
   4e642:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e644:	b1a3      	cbz	r3, 4e670 <bt_att_send+0x84>
	return node->next;
   4e646:	681c      	ldr	r4, [r3, #0]
   4e648:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4e64c:	b10c      	cbz	r4, 4e652 <bt_att_send+0x66>
   4e64e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   4e652:	2200      	movs	r2, #0
   4e654:	4629      	mov	r1, r5
   4e656:	f7e2 fc2d 	bl	30eb4 <chan_send>
		if (err >= 0) {
   4e65a:	2800      	cmp	r0, #0
   4e65c:	daef      	bge.n	4e63e <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e65e:	b13c      	cbz	r4, 4e670 <bt_att_send+0x84>
   4e660:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4e664:	b10b      	cbz	r3, 4e66a <bt_att_send+0x7e>
   4e666:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4e66a:	4620      	mov	r0, r4
   4e66c:	461c      	mov	r4, r3
   4e66e:	e7f0      	b.n	4e652 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   4e670:	4629      	mov	r1, r5
   4e672:	4630      	mov	r0, r6
   4e674:	f003 f88b 	bl	5178e <k_queue_prepend>
   4e678:	e7e1      	b.n	4e63e <bt_att_send+0x52>

0004e67a <bt_att_req_send>:
{
   4e67a:	b510      	push	{r4, lr}
   4e67c:	460c      	mov	r4, r1
	att = att_get(conn);
   4e67e:	f7ff fca7 	bl	4dfd0 <att_get>
	if (!att) {
   4e682:	b160      	cbz	r0, 4e69e <bt_att_req_send+0x24>
	parent->next = child;
   4e684:	2300      	movs	r3, #0
   4e686:	6023      	str	r3, [r4, #0]
	return list->tail;
   4e688:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   4e68a:	b92b      	cbnz	r3, 4e698 <bt_att_req_send+0x1e>
	list->head = node;
   4e68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   4e690:	f7ff fe5d 	bl	4e34e <att_req_send_process>
	return 0;
   4e694:	2000      	movs	r0, #0
}
   4e696:	bd10      	pop	{r4, pc}
	parent->next = child;
   4e698:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4e69a:	6084      	str	r4, [r0, #8]
}
   4e69c:	e7f8      	b.n	4e690 <bt_att_req_send+0x16>
		return -ENOTCONN;
   4e69e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4e6a2:	e7f8      	b.n	4e696 <bt_att_req_send+0x1c>

0004e6a4 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   4e6a4:	b510      	push	{r4, lr}
   4e6a6:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   4e6a8:	f7ff fc92 	bl	4dfd0 <att_get>
	if (!att) {
   4e6ac:	b198      	cbz	r0, 4e6d6 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   4e6ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4e6b0:	b14b      	cbz	r3, 4e6c6 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   4e6b2:	f853 2c50 	ldr.w	r2, [r3, #-80]
   4e6b6:	6991      	ldr	r1, [r2, #24]
   4e6b8:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4e6ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   4e6be:	d009      	beq.n	4e6d4 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   4e6c0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4e6c4:	e7f4      	b.n	4e6b0 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   4e6c6:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   4e6c8:	b128      	cbz	r0, 4e6d6 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   4e6ca:	6983      	ldr	r3, [r0, #24]
   4e6cc:	42a3      	cmp	r3, r4
   4e6ce:	d002      	beq.n	4e6d6 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   4e6d0:	6800      	ldr	r0, [r0, #0]
   4e6d2:	e7f9      	b.n	4e6c8 <bt_att_find_req_by_user_data+0x24>
   4e6d4:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   4e6d6:	bd10      	pop	{r4, pc}

0004e6d8 <gatt_ccc_changed>:
{
   4e6d8:	b430      	push	{r4, r5}
   4e6da:	460b      	mov	r3, r1
   4e6dc:	460a      	mov	r2, r1
   4e6de:	f101 043c 	add.w	r4, r1, #60	; 0x3c
	uint16_t value = 0x0000;
   4e6e2:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   4e6e4:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4e6e6:	320a      	adds	r2, #10
   4e6e8:	42a9      	cmp	r1, r5
   4e6ea:	bf38      	it	cc
   4e6ec:	4629      	movcc	r1, r5
   4e6ee:	42a2      	cmp	r2, r4
   4e6f0:	d1f8      	bne.n	4e6e4 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   4e6f2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   4e6f4:	428a      	cmp	r2, r1
   4e6f6:	d004      	beq.n	4e702 <gatt_ccc_changed+0x2a>
		ccc->value = value;
   4e6f8:	8799      	strh	r1, [r3, #60]	; 0x3c
		if (ccc->cfg_changed) {
   4e6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   4e6fc:	b10b      	cbz	r3, 4e702 <gatt_ccc_changed+0x2a>
}
   4e6fe:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   4e700:	4718      	bx	r3
}
   4e702:	bc30      	pop	{r4, r5}
   4e704:	4770      	bx	lr

0004e706 <gatt_indicate_rsp>:
{
   4e706:	b510      	push	{r4, lr}
   4e708:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   4e70a:	68a3      	ldr	r3, [r4, #8]
{
   4e70c:	460a      	mov	r2, r1
	if (params->func) {
   4e70e:	b10b      	cbz	r3, 4e714 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   4e710:	4621      	mov	r1, r4
   4e712:	4798      	blx	r3
	params->_ref--;
   4e714:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4e716:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   4e718:	3b01      	subs	r3, #1
   4e71a:	b2db      	uxtb	r3, r3
   4e71c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4e71e:	b122      	cbz	r2, 4e72a <gatt_indicate_rsp+0x24>
   4e720:	b91b      	cbnz	r3, 4e72a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   4e722:	4620      	mov	r0, r4
}
   4e724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   4e728:	4710      	bx	r2
}
   4e72a:	bd10      	pop	{r4, pc}

0004e72c <match_uuid>:
	data->attr = attr;
   4e72c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   4e72e:	8091      	strh	r1, [r2, #4]
}
   4e730:	2000      	movs	r0, #0
   4e732:	4770      	bx	lr

0004e734 <ccc_set_cb>:
}
   4e734:	2000      	movs	r0, #0
   4e736:	4770      	bx	lr

0004e738 <atomic_get>:
   4e738:	f3bf 8f5b 	dmb	ish
   4e73c:	6800      	ldr	r0, [r0, #0]
   4e73e:	f3bf 8f5b 	dmb	ish
}
   4e742:	4770      	bx	lr

0004e744 <gen_hash_m>:
{
   4e744:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4e746:	6807      	ldr	r7, [r0, #0]
   4e748:	783d      	ldrb	r5, [r7, #0]
{
   4e74a:	b089      	sub	sp, #36	; 0x24
   4e74c:	4606      	mov	r6, r0
   4e74e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4e750:	b10d      	cbz	r5, 4e756 <gen_hash_m+0x12>
	switch (u16->val) {
   4e752:	2501      	movs	r5, #1
   4e754:	e014      	b.n	4e780 <gen_hash_m+0x3c>
   4e756:	887b      	ldrh	r3, [r7, #2]
   4e758:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   4e75c:	d004      	beq.n	4e768 <gen_hash_m+0x24>
   4e75e:	d812      	bhi.n	4e786 <gen_hash_m+0x42>
   4e760:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   4e764:	2b03      	cmp	r3, #3
   4e766:	d8f4      	bhi.n	4e752 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   4e768:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e76c:	2202      	movs	r2, #2
   4e76e:	f10d 010a 	add.w	r1, sp, #10
   4e772:	4620      	mov	r0, r4
   4e774:	f7fd fe36 	bl	4c3e4 <tc_cmac_update>
   4e778:	b9e0      	cbnz	r0, 4e7b4 <gen_hash_m+0x70>
			state->err = -EINVAL;
   4e77a:	f06f 0315 	mvn.w	r3, #21
   4e77e:	65a3      	str	r3, [r4, #88]	; 0x58
}
   4e780:	4628      	mov	r0, r5
   4e782:	b009      	add	sp, #36	; 0x24
   4e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   4e786:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   4e78a:	33ff      	adds	r3, #255	; 0xff
   4e78c:	b29b      	uxth	r3, r3
   4e78e:	2b04      	cmp	r3, #4
   4e790:	d8df      	bhi.n	4e752 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   4e792:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e796:	2202      	movs	r2, #2
   4e798:	f10d 010a 	add.w	r1, sp, #10
   4e79c:	4620      	mov	r0, r4
   4e79e:	f7fd fe21 	bl	4c3e4 <tc_cmac_update>
   4e7a2:	2800      	cmp	r0, #0
   4e7a4:	d0e9      	beq.n	4e77a <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   4e7a6:	887b      	ldrh	r3, [r7, #2]
   4e7a8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e7ac:	2202      	movs	r2, #2
   4e7ae:	f10d 010a 	add.w	r1, sp, #10
   4e7b2:	e016      	b.n	4e7e2 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   4e7b4:	887b      	ldrh	r3, [r7, #2]
   4e7b6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e7ba:	2202      	movs	r2, #2
   4e7bc:	f10d 010a 	add.w	r1, sp, #10
   4e7c0:	4620      	mov	r0, r4
   4e7c2:	f7fd fe0f 	bl	4c3e4 <tc_cmac_update>
   4e7c6:	2800      	cmp	r0, #0
   4e7c8:	d0d7      	beq.n	4e77a <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   4e7ca:	2000      	movs	r0, #0
   4e7cc:	aa03      	add	r2, sp, #12
   4e7ce:	6877      	ldr	r7, [r6, #4]
   4e7d0:	9000      	str	r0, [sp, #0]
   4e7d2:	2313      	movs	r3, #19
   4e7d4:	4631      	mov	r1, r6
   4e7d6:	47b8      	blx	r7
		if (len < 0) {
   4e7d8:	1e02      	subs	r2, r0, #0
   4e7da:	da01      	bge.n	4e7e0 <gen_hash_m+0x9c>
			state->err = len;
   4e7dc:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   4e7de:	e7cf      	b.n	4e780 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   4e7e0:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e7e2:	4620      	mov	r0, r4
   4e7e4:	f7fd fdfe 	bl	4c3e4 <tc_cmac_update>
   4e7e8:	2800      	cmp	r0, #0
   4e7ea:	d1b2      	bne.n	4e752 <gen_hash_m+0xe>
   4e7ec:	e7c5      	b.n	4e77a <gen_hash_m+0x36>

0004e7ee <atomic_or>:
{
   4e7ee:	4603      	mov	r3, r0
}
   4e7f0:	f3bf 8f5b 	dmb	ish
   4e7f4:	e853 0f00 	ldrex	r0, [r3]
   4e7f8:	ea40 0201 	orr.w	r2, r0, r1
   4e7fc:	e843 2c00 	strex	ip, r2, [r3]
   4e800:	f1bc 0f00 	cmp.w	ip, #0
   4e804:	d1f6      	bne.n	4e7f4 <atomic_or+0x6>
   4e806:	f3bf 8f5b 	dmb	ish
   4e80a:	4770      	bx	lr

0004e80c <bt_addr_le_cmp>:
   4e80c:	2207      	movs	r2, #7
   4e80e:	f7fd bf41 	b.w	4c694 <memcmp>

0004e812 <find_ccc_cfg>:
{
   4e812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4e814:	4606      	mov	r6, r0
   4e816:	1c4c      	adds	r4, r1, #1
   4e818:	f101 053d 	add.w	r5, r1, #61	; 0x3d
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4e81c:	1e67      	subs	r7, r4, #1
		if (conn) {
   4e81e:	b14e      	cbz	r6, 4e834 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   4e820:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   4e824:	4622      	mov	r2, r4
   4e826:	4630      	mov	r0, r6
   4e828:	f7ff f82d 	bl	4d886 <bt_conn_is_peer_addr_le>
   4e82c:	b158      	cbz	r0, 4e846 <find_ccc_cfg+0x34>
}
   4e82e:	4638      	mov	r0, r7
   4e830:	b003      	add	sp, #12
   4e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   4e834:	4669      	mov	r1, sp
   4e836:	4620      	mov	r0, r4
   4e838:	9600      	str	r6, [sp, #0]
   4e83a:	f8cd 6003 	str.w	r6, [sp, #3]
   4e83e:	f7ff ffe5 	bl	4e80c <bt_addr_le_cmp>
   4e842:	2800      	cmp	r0, #0
   4e844:	d0f3      	beq.n	4e82e <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4e846:	340a      	adds	r4, #10
   4e848:	42ac      	cmp	r4, r5
   4e84a:	d1e7      	bne.n	4e81c <find_ccc_cfg+0xa>
	return NULL;
   4e84c:	2700      	movs	r7, #0
   4e84e:	e7ee      	b.n	4e82e <find_ccc_cfg+0x1c>

0004e850 <ccc_find_cfg>:
{
   4e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e854:	4604      	mov	r4, r0
   4e856:	460f      	mov	r7, r1
   4e858:	4690      	mov	r8, r2
   4e85a:	1c46      	adds	r6, r0, #1
   4e85c:	2500      	movs	r5, #0
		if (id == ccc->cfg[i].id &&
   4e85e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   4e862:	4543      	cmp	r3, r8
   4e864:	d107      	bne.n	4e876 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   4e866:	4639      	mov	r1, r7
   4e868:	4630      	mov	r0, r6
   4e86a:	f7ff ffcf 	bl	4e80c <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   4e86e:	b910      	cbnz	r0, 4e876 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   4e870:	1960      	adds	r0, r4, r5
}
   4e872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4e876:	350a      	adds	r5, #10
   4e878:	2d3c      	cmp	r5, #60	; 0x3c
   4e87a:	f106 060a 	add.w	r6, r6, #10
   4e87e:	d1ee      	bne.n	4e85e <ccc_find_cfg+0xe>
	return NULL;
   4e880:	2000      	movs	r0, #0
   4e882:	e7f6      	b.n	4e872 <ccc_find_cfg+0x22>

0004e884 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4e884:	2207      	movs	r2, #7
   4e886:	f7fd bf16 	b.w	4c6b6 <memcpy>

0004e88a <cf_write>:
{
   4e88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e88e:	4698      	mov	r8, r3
   4e890:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   4e894:	2b01      	cmp	r3, #1
{
   4e896:	4606      	mov	r6, r0
   4e898:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   4e89a:	d830      	bhi.n	4e8fe <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   4e89c:	4443      	add	r3, r8
   4e89e:	2b01      	cmp	r3, #1
   4e8a0:	4645      	mov	r5, r8
   4e8a2:	dc2f      	bgt.n	4e904 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   4e8a4:	f7e3 f890 	bl	319c8 <find_cf_cfg>
	if (!cfg) {
   4e8a8:	4604      	mov	r4, r0
   4e8aa:	b918      	cbnz	r0, 4e8b4 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   4e8ac:	f7e3 f88c 	bl	319c8 <find_cf_cfg>
	if (!cfg) {
   4e8b0:	4604      	mov	r4, r0
   4e8b2:	b350      	cbz	r0, 4e90a <cf_write+0x80>
{
   4e8b4:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4e8b6:	f1b8 0f00 	cmp.w	r8, #0
   4e8ba:	d10e      	bne.n	4e8da <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   4e8bc:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4e8c0:	1c60      	adds	r0, r4, #1
   4e8c2:	f7ff ffdf 	bl	4e884 <bt_addr_le_copy>
	cfg->id = conn->id;
   4e8c6:	4620      	mov	r0, r4
   4e8c8:	7a33      	ldrb	r3, [r6, #8]
   4e8ca:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e8ce:	2101      	movs	r1, #1
   4e8d0:	f7ff ff8d 	bl	4e7ee <atomic_or>
}
   4e8d4:	4628      	mov	r0, r5
   4e8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4e8da:	7a20      	ldrb	r0, [r4, #8]
   4e8dc:	fa20 f301 	lsr.w	r3, r0, r1
   4e8e0:	07da      	lsls	r2, r3, #31
   4e8e2:	d503      	bpl.n	4e8ec <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   4e8e4:	783b      	ldrb	r3, [r7, #0]
   4e8e6:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4e8e8:	07db      	lsls	r3, r3, #31
   4e8ea:	d511      	bpl.n	4e910 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4e8ec:	3101      	adds	r1, #1
   4e8ee:	2903      	cmp	r1, #3
   4e8f0:	d1e1      	bne.n	4e8b6 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4e8f2:	783b      	ldrb	r3, [r7, #0]
   4e8f4:	f003 0307 	and.w	r3, r3, #7
   4e8f8:	4318      	orrs	r0, r3
   4e8fa:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   4e8fc:	e7de      	b.n	4e8bc <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e8fe:	f06f 0506 	mvn.w	r5, #6
   4e902:	e7e7      	b.n	4e8d4 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   4e904:	f06f 050c 	mvn.w	r5, #12
   4e908:	e7e4      	b.n	4e8d4 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4e90a:	f06f 0510 	mvn.w	r5, #16
   4e90e:	e7e1      	b.n	4e8d4 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   4e910:	f06f 0512 	mvn.w	r5, #18
   4e914:	e7de      	b.n	4e8d4 <cf_write+0x4a>

0004e916 <clear_ccc_cfg>:
{
   4e916:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e918:	2500      	movs	r5, #0
{
   4e91a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e91c:	4669      	mov	r1, sp
   4e91e:	3001      	adds	r0, #1
   4e920:	9500      	str	r5, [sp, #0]
   4e922:	f8cd 5003 	str.w	r5, [sp, #3]
   4e926:	f7ff ffad 	bl	4e884 <bt_addr_le_copy>
	cfg->id = 0U;
   4e92a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   4e92c:	8125      	strh	r5, [r4, #8]
}
   4e92e:	b003      	add	sp, #12
   4e930:	bd30      	pop	{r4, r5, pc}

0004e932 <gatt_sub_free>:
{
   4e932:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   4e934:	2300      	movs	r3, #0
   4e936:	4669      	mov	r1, sp
   4e938:	3001      	adds	r0, #1
   4e93a:	9300      	str	r3, [sp, #0]
   4e93c:	f8cd 3003 	str.w	r3, [sp, #3]
   4e940:	f7ff ffa0 	bl	4e884 <bt_addr_le_copy>
}
   4e944:	b003      	add	sp, #12
   4e946:	f85d fb04 	ldr.w	pc, [sp], #4

0004e94a <gatt_sub_remove>:
{
   4e94a:	b570      	push	{r4, r5, r6, lr}
   4e94c:	460c      	mov	r4, r1
	if (params) {
   4e94e:	4619      	mov	r1, r3
   4e950:	b16b      	cbz	r3, 4e96e <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   4e952:	f103 061c 	add.w	r6, r3, #28
	return list->tail;
   4e956:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   4e958:	69db      	ldr	r3, [r3, #28]
Z_GENLIST_REMOVE(slist, snode)
   4e95a:	b97a      	cbnz	r2, 4e97c <gatt_sub_remove+0x32>
   4e95c:	42ae      	cmp	r6, r5
	list->head = node;
   4e95e:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   4e960:	d100      	bne.n	4e964 <gatt_sub_remove+0x1a>
	list->tail = node;
   4e962:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   4e964:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   4e966:	680d      	ldr	r5, [r1, #0]
   4e968:	61cb      	str	r3, [r1, #28]
   4e96a:	461a      	mov	r2, r3
   4e96c:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   4e96e:	68a3      	ldr	r3, [r4, #8]
   4e970:	b94b      	cbnz	r3, 4e986 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   4e972:	4620      	mov	r0, r4
}
   4e974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   4e978:	f7ff bfdb 	b.w	4e932 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   4e97c:	42ae      	cmp	r6, r5
	parent->next = child;
   4e97e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4e980:	bf08      	it	eq
   4e982:	60e2      	streq	r2, [r4, #12]
}
   4e984:	e7ee      	b.n	4e964 <gatt_sub_remove+0x1a>
}
   4e986:	bd70      	pop	{r4, r5, r6, pc}

0004e988 <sc_save>:
{
   4e988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4e98c:	4680      	mov	r8, r0
   4e98e:	460f      	mov	r7, r1
   4e990:	4616      	mov	r6, r2
   4e992:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   4e994:	f7e3 f83a 	bl	31a0c <find_sc_cfg>
	if (!cfg) {
   4e998:	4604      	mov	r4, r0
   4e99a:	b960      	cbnz	r0, 4e9b6 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4e99c:	4669      	mov	r1, sp
   4e99e:	9000      	str	r0, [sp, #0]
   4e9a0:	f8cd 0003 	str.w	r0, [sp, #3]
   4e9a4:	f7e3 f832 	bl	31a0c <find_sc_cfg>
		if (!cfg) {
   4e9a8:	4604      	mov	r4, r0
   4e9aa:	b1d0      	cbz	r0, 4e9e2 <sc_save+0x5a>
		cfg->id = id;
   4e9ac:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   4e9b0:	4639      	mov	r1, r7
   4e9b2:	f7ff ff67 	bl	4e884 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   4e9b6:	8922      	ldrh	r2, [r4, #8]
   4e9b8:	8963      	ldrh	r3, [r4, #10]
   4e9ba:	b972      	cbnz	r2, 4e9da <sc_save+0x52>
   4e9bc:	b97b      	cbnz	r3, 4e9de <sc_save+0x56>
		cfg->data.start = start;
   4e9be:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   4e9c0:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   4e9c2:	4621      	mov	r1, r4
   4e9c4:	f811 0b01 	ldrb.w	r0, [r1], #1
   4e9c8:	f7fe fb40 	bl	4d04c <bt_addr_le_is_bonded>
   4e9cc:	b148      	cbz	r0, 4e9e2 <sc_save+0x5a>
		sc_store(cfg);
   4e9ce:	4620      	mov	r0, r4
}
   4e9d0:	b002      	add	sp, #8
   4e9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   4e9d6:	f7e3 b873 	b.w	31ac0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   4e9da:	4296      	cmp	r6, r2
   4e9dc:	d304      	bcc.n	4e9e8 <sc_save+0x60>
   4e9de:	429d      	cmp	r5, r3
   4e9e0:	d8ee      	bhi.n	4e9c0 <sc_save+0x38>
}
   4e9e2:	b002      	add	sp, #8
   4e9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   4e9e8:	429d      	cmp	r5, r3
		*start = new_start;
   4e9ea:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   4e9ec:	d9e9      	bls.n	4e9c2 <sc_save+0x3a>
   4e9ee:	e7e7      	b.n	4e9c0 <sc_save+0x38>

0004e9f0 <atomic_and>:
{
   4e9f0:	4603      	mov	r3, r0
}
   4e9f2:	f3bf 8f5b 	dmb	ish
   4e9f6:	e853 0f00 	ldrex	r0, [r3]
   4e9fa:	ea00 0201 	and.w	r2, r0, r1
   4e9fe:	e843 2c00 	strex	ip, r2, [r3]
   4ea02:	f1bc 0f00 	cmp.w	ip, #0
   4ea06:	d1f6      	bne.n	4e9f6 <atomic_and+0x6>
   4ea08:	f3bf 8f5b 	dmb	ish
   4ea0c:	4770      	bx	lr

0004ea0e <gatt_write_ccc_rsp>:
{
   4ea0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ea12:	9c06      	ldr	r4, [sp, #24]
   4ea14:	460e      	mov	r6, r1
   4ea16:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ea18:	f06f 0104 	mvn.w	r1, #4
   4ea1c:	f104 0018 	add.w	r0, r4, #24
   4ea20:	f7ff ffe6 	bl	4e9f0 <atomic_and>
	if (err) {
   4ea24:	b1e6      	cbz	r6, 4ea60 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   4ea26:	4628      	mov	r0, r5
   4ea28:	f7e3 f80c 	bl	31a44 <gatt_sub_find>
		if (!sub) {
   4ea2c:	4601      	mov	r1, r0
   4ea2e:	b308      	cbz	r0, 4ea74 <gatt_write_ccc_rsp+0x66>
	return list->head;
   4ea30:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4ea32:	b143      	cbz	r3, 4ea46 <gatt_write_ccc_rsp+0x38>
	return node->next;
   4ea34:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   4ea36:	f104 001c 	add.w	r0, r4, #28
   4ea3a:	4283      	cmp	r3, r0
   4ea3c:	d10b      	bne.n	4ea56 <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   4ea3e:	4623      	mov	r3, r4
   4ea40:	4628      	mov	r0, r5
   4ea42:	f7ff ff82 	bl	4e94a <gatt_sub_remove>
	if (params->write) {
   4ea46:	6863      	ldr	r3, [r4, #4]
   4ea48:	b1a3      	cbz	r3, 4ea74 <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   4ea4a:	4631      	mov	r1, r6
   4ea4c:	4628      	mov	r0, r5
   4ea4e:	2200      	movs	r2, #0
}
   4ea50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   4ea54:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   4ea56:	2a00      	cmp	r2, #0
   4ea58:	d0f5      	beq.n	4ea46 <gatt_write_ccc_rsp+0x38>
	return node->next;
   4ea5a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   4ea5c:	6812      	ldr	r2, [r2, #0]
   4ea5e:	e7ec      	b.n	4ea3a <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   4ea60:	8aa3      	ldrh	r3, [r4, #20]
   4ea62:	2b00      	cmp	r3, #0
   4ea64:	d1ef      	bne.n	4ea46 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   4ea66:	6827      	ldr	r7, [r4, #0]
   4ea68:	4633      	mov	r3, r6
   4ea6a:	4632      	mov	r2, r6
   4ea6c:	4621      	mov	r1, r4
   4ea6e:	4628      	mov	r0, r5
   4ea70:	47b8      	blx	r7
   4ea72:	e7e8      	b.n	4ea46 <gatt_write_ccc_rsp+0x38>
}
   4ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004ea78 <gatt_req_send>:
{
   4ea78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ea7c:	4606      	mov	r6, r0
   4ea7e:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4ea80:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   4ea84:	2100      	movs	r1, #0
{
   4ea86:	f89d a020 	ldrb.w	sl, [sp, #32]
   4ea8a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   4ea8e:	4617      	mov	r7, r2
   4ea90:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4ea92:	f7e2 fe6b 	bl	3176c <bt_att_req_alloc>
	if (!req) {
   4ea96:	4604      	mov	r4, r0
   4ea98:	b920      	cbnz	r0, 4eaa4 <gatt_req_send+0x2c>
		return -ENOMEM;
   4ea9a:	f06f 050b 	mvn.w	r5, #11
}
   4ea9e:	4628      	mov	r0, r5
   4eaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   4eaa4:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   4eaa8:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   4eaac:	60c5      	str	r5, [r0, #12]
	req->func = func;
   4eaae:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   4eab2:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   4eab4:	4642      	mov	r2, r8
   4eab6:	4651      	mov	r1, sl
   4eab8:	4630      	mov	r0, r6
   4eaba:	f7ff fcdf 	bl	4e47c <bt_att_create_pdu>
	if (!buf) {
   4eabe:	b918      	cbnz	r0, 4eac8 <gatt_req_send+0x50>
		bt_att_req_free(req);
   4eac0:	4620      	mov	r0, r4
   4eac2:	f7e2 fe75 	bl	317b0 <bt_att_req_free>
   4eac6:	e7e8      	b.n	4ea9a <gatt_req_send+0x22>
	req->buf = buf;
   4eac8:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   4eaca:	463a      	mov	r2, r7
   4eacc:	4641      	mov	r1, r8
   4eace:	47a8      	blx	r5
	if (err) {
   4ead0:	4605      	mov	r5, r0
   4ead2:	b118      	cbz	r0, 4eadc <gatt_req_send+0x64>
		bt_att_req_free(req);
   4ead4:	4620      	mov	r0, r4
   4ead6:	f7e2 fe6b 	bl	317b0 <bt_att_req_free>
   4eada:	e7e0      	b.n	4ea9e <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   4eadc:	4621      	mov	r1, r4
   4eade:	4630      	mov	r0, r6
   4eae0:	f7ff fdcb 	bl	4e67a <bt_att_req_send>
	if (err) {
   4eae4:	4605      	mov	r5, r0
   4eae6:	2800      	cmp	r0, #0
   4eae8:	d0d9      	beq.n	4ea9e <gatt_req_send+0x26>
   4eaea:	e7f3      	b.n	4ead4 <gatt_req_send+0x5c>

0004eaec <read_included_uuid_encode>:
{
   4eaec:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   4eaee:	2102      	movs	r1, #2
   4eaf0:	3008      	adds	r0, #8
   4eaf2:	4614      	mov	r4, r2
   4eaf4:	f001 fe08 	bl	50708 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   4eaf8:	8963      	ldrh	r3, [r4, #10]
   4eafa:	8003      	strh	r3, [r0, #0]
}
   4eafc:	2000      	movs	r0, #0
   4eafe:	bd10      	pop	{r4, pc}

0004eb00 <gatt_find_info_encode>:
{
   4eb00:	b510      	push	{r4, lr}
   4eb02:	2104      	movs	r1, #4
   4eb04:	3008      	adds	r0, #8
   4eb06:	4614      	mov	r4, r2
   4eb08:	f001 fdfe 	bl	50708 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4eb0c:	8923      	ldrh	r3, [r4, #8]
   4eb0e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4eb10:	89e3      	ldrh	r3, [r4, #14]
   4eb12:	8043      	strh	r3, [r0, #2]
}
   4eb14:	2000      	movs	r0, #0
   4eb16:	bd10      	pop	{r4, pc}

0004eb18 <gatt_read_group_encode>:
{
   4eb18:	b538      	push	{r3, r4, r5, lr}
   4eb1a:	f100 0408 	add.w	r4, r0, #8
   4eb1e:	2104      	movs	r1, #4
   4eb20:	4620      	mov	r0, r4
   4eb22:	4615      	mov	r5, r2
   4eb24:	f001 fdf0 	bl	50708 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4eb28:	892b      	ldrh	r3, [r5, #8]
   4eb2a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4eb2c:	89eb      	ldrh	r3, [r5, #14]
   4eb2e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4eb30:	7c2b      	ldrb	r3, [r5, #16]
   4eb32:	b933      	cbnz	r3, 4eb42 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   4eb34:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   4eb38:	4620      	mov	r0, r4
   4eb3a:	f001 fdfc 	bl	50736 <net_buf_simple_add_le16>
}
   4eb3e:	2000      	movs	r0, #0
   4eb40:	bd38      	pop	{r3, r4, r5, pc}
   4eb42:	f642 0101 	movw	r1, #10241	; 0x2801
   4eb46:	e7f7      	b.n	4eb38 <gatt_read_group_encode+0x20>

0004eb48 <gatt_read_type_encode>:
{
   4eb48:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4eb4a:	f100 0408 	add.w	r4, r0, #8
   4eb4e:	2104      	movs	r1, #4
   4eb50:	4620      	mov	r0, r4
   4eb52:	4615      	mov	r5, r2
   4eb54:	f001 fdd8 	bl	50708 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4eb58:	892b      	ldrh	r3, [r5, #8]
   4eb5a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4eb5c:	89eb      	ldrh	r3, [r5, #14]
   4eb5e:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   4eb60:	7c2b      	ldrb	r3, [r5, #16]
   4eb62:	2b02      	cmp	r3, #2
   4eb64:	d004      	beq.n	4eb70 <gatt_read_type_encode+0x28>
   4eb66:	2b03      	cmp	r3, #3
   4eb68:	d009      	beq.n	4eb7e <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   4eb6a:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4eb6c:	8859      	ldrh	r1, [r3, #2]
   4eb6e:	e001      	b.n	4eb74 <gatt_read_type_encode+0x2c>
   4eb70:	f642 0102 	movw	r1, #10242	; 0x2802
   4eb74:	4620      	mov	r0, r4
   4eb76:	f001 fdde 	bl	50736 <net_buf_simple_add_le16>
}
   4eb7a:	2000      	movs	r0, #0
   4eb7c:	bd38      	pop	{r3, r4, r5, pc}
   4eb7e:	f642 0103 	movw	r1, #10243	; 0x2803
   4eb82:	e7f7      	b.n	4eb74 <gatt_read_type_encode+0x2c>

0004eb84 <sc_set>:
{
   4eb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4eb88:	460e      	mov	r6, r1
   4eb8a:	b086      	sub	sp, #24
   4eb8c:	4617      	mov	r7, r2
   4eb8e:	4698      	mov	r8, r3
	if (!name) {
   4eb90:	4605      	mov	r5, r0
   4eb92:	b928      	cbnz	r0, 4eba0 <sc_set+0x1c>
		return -EINVAL;
   4eb94:	f06f 0415 	mvn.w	r4, #21
}
   4eb98:	4620      	mov	r0, r4
   4eb9a:	b006      	add	sp, #24
   4eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4eba0:	a902      	add	r1, sp, #8
   4eba2:	f7fd fe50 	bl	4c846 <bt_settings_decode_key>
	if (err) {
   4eba6:	4604      	mov	r4, r0
   4eba8:	2800      	cmp	r0, #0
   4ebaa:	d1f3      	bne.n	4eb94 <sc_set+0x10>
	settings_name_next(name, &next);
   4ebac:	a901      	add	r1, sp, #4
   4ebae:	4628      	mov	r0, r5
   4ebb0:	f7fc fab6 	bl	4b120 <settings_name_next>
	if (!next) {
   4ebb4:	9801      	ldr	r0, [sp, #4]
   4ebb6:	b998      	cbnz	r0, 4ebe0 <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   4ebb8:	a902      	add	r1, sp, #8
   4ebba:	2000      	movs	r0, #0
   4ebbc:	f7e2 ff26 	bl	31a0c <find_sc_cfg>
	if (!cfg && len_rd) {
   4ebc0:	4605      	mov	r5, r0
   4ebc2:	bb08      	cbnz	r0, 4ec08 <sc_set+0x84>
   4ebc4:	2e00      	cmp	r6, #0
   4ebc6:	d0e7      	beq.n	4eb98 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4ebc8:	a904      	add	r1, sp, #16
   4ebca:	9004      	str	r0, [sp, #16]
   4ebcc:	4604      	mov	r4, r0
   4ebce:	f8cd 0013 	str.w	r0, [sp, #19]
   4ebd2:	f7e2 ff1b 	bl	31a0c <find_sc_cfg>
		if (!cfg) {
   4ebd6:	4605      	mov	r5, r0
   4ebd8:	b948      	cbnz	r0, 4ebee <sc_set+0x6a>
			return -ENOMEM;
   4ebda:	f06f 040b 	mvn.w	r4, #11
   4ebde:	e7db      	b.n	4eb98 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   4ebe0:	220a      	movs	r2, #10
   4ebe2:	4621      	mov	r1, r4
   4ebe4:	f7fd fcaf 	bl	4c546 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4ebe8:	2800      	cmp	r0, #0
   4ebea:	d0e5      	beq.n	4ebb8 <sc_set+0x34>
   4ebec:	e7d2      	b.n	4eb94 <sc_set+0x10>
		cfg->id = id;
   4ebee:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4ebf2:	a902      	add	r1, sp, #8
   4ebf4:	f7ff fe46 	bl	4e884 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   4ebf8:	2204      	movs	r2, #4
   4ebfa:	f105 0108 	add.w	r1, r5, #8
   4ebfe:	4640      	mov	r0, r8
   4ec00:	47b8      	blx	r7
		if (len < 0) {
   4ec02:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4ec06:	e7c7      	b.n	4eb98 <sc_set+0x14>
	if (len_rd) {
   4ec08:	2e00      	cmp	r6, #0
   4ec0a:	d1f5      	bne.n	4ebf8 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   4ec0c:	220c      	movs	r2, #12
   4ec0e:	4631      	mov	r1, r6
   4ec10:	f7fd fd5c 	bl	4c6cc <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   4ec14:	e7c0      	b.n	4eb98 <sc_set+0x14>

0004ec16 <clear_cf_cfg>:
{
   4ec16:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4ec18:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4ec1a:	2500      	movs	r5, #0
   4ec1c:	4669      	mov	r1, sp
   4ec1e:	3001      	adds	r0, #1
   4ec20:	9500      	str	r5, [sp, #0]
   4ec22:	f8cd 5003 	str.w	r5, [sp, #3]
   4ec26:	f7ff fe2d 	bl	4e884 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   4ec2a:	f104 0008 	add.w	r0, r4, #8
   4ec2e:	2201      	movs	r2, #1
   4ec30:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4ec32:	340c      	adds	r4, #12
   4ec34:	f7fd fd4a 	bl	4c6cc <memset>
   4ec38:	f3bf 8f5b 	dmb	ish
   4ec3c:	e854 3f00 	ldrex	r3, [r4]
   4ec40:	e844 5200 	strex	r2, r5, [r4]
   4ec44:	2a00      	cmp	r2, #0
   4ec46:	d1f9      	bne.n	4ec3c <clear_cf_cfg+0x26>
   4ec48:	f3bf 8f5b 	dmb	ish
}
   4ec4c:	b003      	add	sp, #12
   4ec4e:	bd30      	pop	{r4, r5, pc}

0004ec50 <cf_set>:
{
   4ec50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   4ec54:	4688      	mov	r8, r1
   4ec56:	4616      	mov	r6, r2
   4ec58:	461f      	mov	r7, r3
	if (!name) {
   4ec5a:	4605      	mov	r5, r0
   4ec5c:	b928      	cbnz	r0, 4ec6a <cf_set+0x1a>
		return -EINVAL;
   4ec5e:	f06f 0415 	mvn.w	r4, #21
}
   4ec62:	4620      	mov	r0, r4
   4ec64:	b004      	add	sp, #16
   4ec66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4ec6a:	a902      	add	r1, sp, #8
   4ec6c:	f7fd fdeb 	bl	4c846 <bt_settings_decode_key>
	if (err) {
   4ec70:	4604      	mov	r4, r0
   4ec72:	2800      	cmp	r0, #0
   4ec74:	d1f3      	bne.n	4ec5e <cf_set+0xe>
	settings_name_next(name, &next);
   4ec76:	a901      	add	r1, sp, #4
   4ec78:	4628      	mov	r0, r5
   4ec7a:	f7fc fa51 	bl	4b120 <settings_name_next>
	if (!next) {
   4ec7e:	9801      	ldr	r0, [sp, #4]
   4ec80:	b9d0      	cbnz	r0, 4ecb8 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   4ec82:	a902      	add	r1, sp, #8
   4ec84:	2000      	movs	r0, #0
   4ec86:	f7e2 feff 	bl	31a88 <find_cf_cfg_by_addr>
	if (!cfg) {
   4ec8a:	4605      	mov	r5, r0
   4ec8c:	b948      	cbnz	r0, 4eca2 <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   4ec8e:	f7e2 fe9b 	bl	319c8 <find_cf_cfg>
		if (!cfg) {
   4ec92:	4605      	mov	r5, r0
   4ec94:	b1d8      	cbz	r0, 4ecce <cf_set+0x7e>
		cfg->id = id;
   4ec96:	2300      	movs	r3, #0
   4ec98:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4ec9c:	a902      	add	r1, sp, #8
   4ec9e:	f7ff fdf1 	bl	4e884 <bt_addr_le_copy>
	if (len_rd) {
   4eca2:	f1b8 0f00 	cmp.w	r8, #0
   4eca6:	d00e      	beq.n	4ecc6 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   4eca8:	2201      	movs	r2, #1
   4ecaa:	f105 0108 	add.w	r1, r5, #8
   4ecae:	4638      	mov	r0, r7
   4ecb0:	47b0      	blx	r6
		if (len < 0) {
   4ecb2:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4ecb6:	e7d4      	b.n	4ec62 <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   4ecb8:	220a      	movs	r2, #10
   4ecba:	4621      	mov	r1, r4
   4ecbc:	f7fd fc43 	bl	4c546 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4ecc0:	2800      	cmp	r0, #0
   4ecc2:	d0de      	beq.n	4ec82 <cf_set+0x32>
   4ecc4:	e7cb      	b.n	4ec5e <cf_set+0xe>
		clear_cf_cfg(cfg);
   4ecc6:	4628      	mov	r0, r5
   4ecc8:	f7ff ffa5 	bl	4ec16 <clear_cf_cfg>
   4eccc:	e7c9      	b.n	4ec62 <cf_set+0x12>
			return -ENOMEM;
   4ecce:	f06f 040b 	mvn.w	r4, #11
   4ecd2:	e7c6      	b.n	4ec62 <cf_set+0x12>

0004ecd4 <gatt_find_type_encode>:
{
   4ecd4:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4ecd6:	f100 0508 	add.w	r5, r0, #8
   4ecda:	2106      	movs	r1, #6
   4ecdc:	4628      	mov	r0, r5
   4ecde:	4614      	mov	r4, r2
   4ece0:	f001 fd12 	bl	50708 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4ece4:	8923      	ldrh	r3, [r4, #8]
   4ece6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4ece8:	89e3      	ldrh	r3, [r4, #14]
   4ecea:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4ecec:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   4ecee:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   4ecf0:	2b00      	cmp	r3, #0
   4ecf2:	f642 0301 	movw	r3, #10241	; 0x2801
   4ecf6:	bf08      	it	eq
   4ecf8:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   4ecfc:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   4ecfe:	780b      	ldrb	r3, [r1, #0]
   4ed00:	b11b      	cbz	r3, 4ed0a <gatt_find_type_encode+0x36>
   4ed02:	2b02      	cmp	r3, #2
   4ed04:	d006      	beq.n	4ed14 <gatt_find_type_encode+0x40>
}
   4ed06:	2000      	movs	r0, #0
   4ed08:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   4ed0a:	8849      	ldrh	r1, [r1, #2]
   4ed0c:	4628      	mov	r0, r5
   4ed0e:	f001 fd12 	bl	50736 <net_buf_simple_add_le16>
}
   4ed12:	e7f8      	b.n	4ed06 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4ed14:	2210      	movs	r2, #16
   4ed16:	3101      	adds	r1, #1
   4ed18:	4628      	mov	r0, r5
   4ed1a:	f001 fcfb 	bl	50714 <net_buf_simple_add_mem>
   4ed1e:	e7f2      	b.n	4ed06 <gatt_find_type_encode+0x32>

0004ed20 <sc_clear>:
{
   4ed20:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4ed22:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   4ed26:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4ed28:	4631      	mov	r1, r6
   4ed2a:	7a00      	ldrb	r0, [r0, #8]
   4ed2c:	f7fe f98e 	bl	4d04c <bt_addr_le_is_bonded>
   4ed30:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4ed32:	4631      	mov	r1, r6
   4ed34:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4ed36:	b11d      	cbz	r5, 4ed40 <sc_clear+0x20>
}
   4ed38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4ed3c:	f7e3 b838 	b.w	31db0 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4ed40:	f7e2 fe64 	bl	31a0c <find_sc_cfg>
		if (cfg) {
   4ed44:	b128      	cbz	r0, 4ed52 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   4ed46:	4629      	mov	r1, r5
   4ed48:	220c      	movs	r2, #12
}
   4ed4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   4ed4e:	f7fd bcbd 	b.w	4c6cc <memset>
}
   4ed52:	bd70      	pop	{r4, r5, r6, pc}

0004ed54 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   4ed54:	2a02      	cmp	r2, #2
{
   4ed56:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   4ed58:	d108      	bne.n	4ed6c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   4ed5a:	2300      	movs	r3, #0
   4ed5c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4ed60:	461a      	mov	r2, r3
   4ed62:	7a00      	ldrb	r0, [r0, #8]
   4ed64:	f7ff fe10 	bl	4e988 <sc_save>
}
   4ed68:	2002      	movs	r0, #2
   4ed6a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   4ed6c:	f7ff ffd8 	bl	4ed20 <sc_clear>
   4ed70:	e7fa      	b.n	4ed68 <sc_ccc_cfg_write+0x14>

0004ed72 <read_ppcp>:
{
   4ed72:	b513      	push	{r0, r1, r4, lr}
   4ed74:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   4ed76:	2206      	movs	r2, #6
{
   4ed78:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   4ed7c:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   4ed80:	220c      	movs	r2, #12
   4ed82:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   4ed86:	221e      	movs	r2, #30
   4ed88:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   4ed8c:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   4ed8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   4ed92:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4ed96:	d80b      	bhi.n	4edb0 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   4ed98:	f1c1 0408 	rsb	r4, r1, #8
   4ed9c:	429c      	cmp	r4, r3
   4ed9e:	bfa8      	it	ge
   4eda0:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4eda2:	4622      	mov	r2, r4
   4eda4:	4469      	add	r1, sp
   4eda6:	f7fd fc86 	bl	4c6b6 <memcpy>
}
   4edaa:	4620      	mov	r0, r4
   4edac:	b002      	add	sp, #8
   4edae:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4edb0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   4edb4:	e7f9      	b.n	4edaa <read_ppcp+0x38>

0004edb6 <read_appearance>:
{
   4edb6:	b513      	push	{r0, r1, r4, lr}
   4edb8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4edbc:	4610      	mov	r0, r2
	if (offset > value_len) {
   4edbe:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   4edc0:	f240 32c1 	movw	r2, #961	; 0x3c1
   4edc4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4edc8:	d80d      	bhi.n	4ede6 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   4edca:	f1c1 0402 	rsb	r4, r1, #2
   4edce:	429c      	cmp	r4, r3
   4edd0:	bfa8      	it	ge
   4edd2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4edd4:	f10d 0306 	add.w	r3, sp, #6
   4edd8:	4622      	mov	r2, r4
   4edda:	4419      	add	r1, r3
   4eddc:	f7fd fc6b 	bl	4c6b6 <memcpy>
}
   4ede0:	4620      	mov	r0, r4
   4ede2:	b002      	add	sp, #8
   4ede4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4ede6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   4edea:	e7f9      	b.n	4ede0 <read_appearance+0x2a>

0004edec <read_name>:
{
   4edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4edf0:	4698      	mov	r8, r3
   4edf2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   4edf6:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   4edf8:	f7df ff08 	bl	2ec0c <bt_get_name>
   4edfc:	4607      	mov	r7, r0
				 strlen(name));
   4edfe:	f7fd fc25 	bl	4c64c <strlen>
	if (offset > value_len) {
   4ee02:	b283      	uxth	r3, r0
   4ee04:	42b3      	cmp	r3, r6
   4ee06:	d30c      	bcc.n	4ee22 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   4ee08:	1b9c      	subs	r4, r3, r6
   4ee0a:	4544      	cmp	r4, r8
   4ee0c:	bfa8      	it	ge
   4ee0e:	4644      	movge	r4, r8
   4ee10:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4ee12:	4622      	mov	r2, r4
   4ee14:	19b9      	adds	r1, r7, r6
   4ee16:	4628      	mov	r0, r5
   4ee18:	f7fd fc4d 	bl	4c6b6 <memcpy>
}
   4ee1c:	4620      	mov	r0, r4
   4ee1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4ee22:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4ee26:	e7f9      	b.n	4ee1c <read_name+0x30>

0004ee28 <cf_read>:
{
   4ee28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4ee2a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   4ee2c:	2300      	movs	r3, #0
{
   4ee2e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   4ee32:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4ee36:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4ee38:	f7e2 fdc6 	bl	319c8 <find_cf_cfg>
	if (cfg) {
   4ee3c:	b128      	cbz	r0, 4ee4a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   4ee3e:	f100 0108 	add.w	r1, r0, #8
   4ee42:	2201      	movs	r2, #1
   4ee44:	a801      	add	r0, sp, #4
   4ee46:	f7fd fc36 	bl	4c6b6 <memcpy>
	if (offset > value_len) {
   4ee4a:	2e01      	cmp	r6, #1
   4ee4c:	d80d      	bhi.n	4ee6a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   4ee4e:	f1c6 0401 	rsb	r4, r6, #1
   4ee52:	42bc      	cmp	r4, r7
   4ee54:	bfa8      	it	ge
   4ee56:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4ee58:	ab01      	add	r3, sp, #4
   4ee5a:	4622      	mov	r2, r4
   4ee5c:	1999      	adds	r1, r3, r6
   4ee5e:	4628      	mov	r0, r5
   4ee60:	f7fd fc29 	bl	4c6b6 <memcpy>
}
   4ee64:	4620      	mov	r0, r4
   4ee66:	b003      	add	sp, #12
   4ee68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4ee6a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   4ee6e:	e7f9      	b.n	4ee64 <cf_read+0x3c>

0004ee70 <bt_gatt_attr_read_service>:
{
   4ee70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   4ee72:	68c9      	ldr	r1, [r1, #12]
{
   4ee74:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   4ee78:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   4ee7a:	780b      	ldrb	r3, [r1, #0]
{
   4ee7c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4ee7e:	b993      	cbnz	r3, 4eea6 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   4ee80:	884b      	ldrh	r3, [r1, #2]
   4ee82:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   4ee86:	2d02      	cmp	r5, #2
   4ee88:	d819      	bhi.n	4eebe <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   4ee8a:	f1c5 0202 	rsb	r2, r5, #2
   4ee8e:	4294      	cmp	r4, r2
   4ee90:	bfa8      	it	ge
   4ee92:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4ee94:	f10d 0306 	add.w	r3, sp, #6
   4ee98:	4622      	mov	r2, r4
   4ee9a:	1959      	adds	r1, r3, r5
   4ee9c:	f7fd fc0b 	bl	4c6b6 <memcpy>
}
   4eea0:	4620      	mov	r0, r4
   4eea2:	b003      	add	sp, #12
   4eea4:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   4eea6:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   4eea8:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   4eeac:	d807      	bhi.n	4eebe <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   4eeae:	f1c5 0210 	rsb	r2, r5, #16
   4eeb2:	4294      	cmp	r4, r2
   4eeb4:	bfa8      	it	ge
   4eeb6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4eeb8:	4622      	mov	r2, r4
   4eeba:	4429      	add	r1, r5
   4eebc:	e7ee      	b.n	4ee9c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4eebe:	f06f 0406 	mvn.w	r4, #6
   4eec2:	e7ed      	b.n	4eea0 <bt_gatt_attr_read_service+0x30>

0004eec4 <bt_gatt_attr_read_ccc>:
{
   4eec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4eec6:	68c9      	ldr	r1, [r1, #12]
{
   4eec8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   4eecc:	4615      	mov	r5, r2
   4eece:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   4eed0:	f7ff fc9f 	bl	4e812 <find_ccc_cfg>
	if (cfg) {
   4eed4:	b100      	cbz	r0, 4eed8 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4eed6:	8900      	ldrh	r0, [r0, #8]
   4eed8:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   4eedc:	2e02      	cmp	r6, #2
   4eede:	d80e      	bhi.n	4eefe <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   4eee0:	f1c6 0402 	rsb	r4, r6, #2
   4eee4:	42bc      	cmp	r4, r7
   4eee6:	bfa8      	it	ge
   4eee8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4eeea:	f10d 0306 	add.w	r3, sp, #6
   4eeee:	4622      	mov	r2, r4
   4eef0:	1999      	adds	r1, r3, r6
   4eef2:	4628      	mov	r0, r5
   4eef4:	f7fd fbdf 	bl	4c6b6 <memcpy>
}
   4eef8:	4620      	mov	r0, r4
   4eefa:	b003      	add	sp, #12
   4eefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4eefe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   4ef02:	e7f9      	b.n	4eef8 <bt_gatt_attr_read_ccc+0x34>

0004ef04 <gatt_write_ccc_buf>:
{
   4ef04:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4ef06:	f100 0508 	add.w	r5, r0, #8
   4ef0a:	2102      	movs	r1, #2
   4ef0c:	4628      	mov	r0, r5
   4ef0e:	4614      	mov	r4, r2
   4ef10:	f001 fbfa 	bl	50708 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   4ef14:	8963      	ldrh	r3, [r4, #10]
   4ef16:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4ef18:	8aa1      	ldrh	r1, [r4, #20]
   4ef1a:	4628      	mov	r0, r5
   4ef1c:	f001 fc0b 	bl	50736 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4ef20:	2104      	movs	r1, #4
   4ef22:	f104 0018 	add.w	r0, r4, #24
   4ef26:	f7ff fc62 	bl	4e7ee <atomic_or>
}
   4ef2a:	2000      	movs	r0, #0
   4ef2c:	bd38      	pop	{r3, r4, r5, pc}

0004ef2e <sc_restore_rsp>:
{
   4ef2e:	b538      	push	{r3, r4, r5, lr}
   4ef30:	4604      	mov	r4, r0
   4ef32:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4ef34:	f7e2 fd48 	bl	319c8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   4ef38:	b130      	cbz	r0, 4ef48 <sc_restore_rsp+0x1a>
   4ef3a:	7a03      	ldrb	r3, [r0, #8]
   4ef3c:	07db      	lsls	r3, r3, #31
   4ef3e:	d503      	bpl.n	4ef48 <sc_restore_rsp+0x1a>
   4ef40:	2101      	movs	r1, #1
   4ef42:	300c      	adds	r0, #12
   4ef44:	f7ff fc53 	bl	4e7ee <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   4ef48:	b985      	cbnz	r5, 4ef6c <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4ef4a:	7a20      	ldrb	r0, [r4, #8]
   4ef4c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4ef50:	f7e2 fd5c 	bl	31a0c <find_sc_cfg>
		if (sc_cfg) {
   4ef54:	4604      	mov	r4, r0
   4ef56:	b148      	cbz	r0, 4ef6c <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   4ef58:	4629      	mov	r1, r5
   4ef5a:	2204      	movs	r2, #4
   4ef5c:	3008      	adds	r0, #8
   4ef5e:	f7fd fbb5 	bl	4c6cc <memset>
		sc_store(cfg);
   4ef62:	4620      	mov	r0, r4
}
   4ef64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   4ef68:	f7e2 bdaa 	b.w	31ac0 <sc_store>
}
   4ef6c:	bd38      	pop	{r3, r4, r5, pc}

0004ef6e <bt_gatt_attr_read>:
{
   4ef6e:	b538      	push	{r3, r4, r5, lr}
   4ef70:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4ef74:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   4ef78:	42a9      	cmp	r1, r5
{
   4ef7a:	4610      	mov	r0, r2
	if (offset > value_len) {
   4ef7c:	d80b      	bhi.n	4ef96 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   4ef7e:	1a6d      	subs	r5, r5, r1
   4ef80:	429d      	cmp	r5, r3
   4ef82:	bfa8      	it	ge
   4ef84:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4ef86:	9b05      	ldr	r3, [sp, #20]
   4ef88:	b2ad      	uxth	r5, r5
   4ef8a:	462a      	mov	r2, r5
   4ef8c:	4419      	add	r1, r3
   4ef8e:	f7fd fb92 	bl	4c6b6 <memcpy>
}
   4ef92:	4628      	mov	r0, r5
   4ef94:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4ef96:	f06f 0506 	mvn.w	r5, #6
   4ef9a:	e7fa      	b.n	4ef92 <bt_gatt_attr_read+0x24>

0004ef9c <bt_gatt_attr_value_handle>:
{
   4ef9c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4ef9e:	4604      	mov	r4, r0
   4efa0:	b910      	cbnz	r0, 4efa8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   4efa2:	2000      	movs	r0, #0
}
   4efa4:	b002      	add	sp, #8
   4efa6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4efa8:	2300      	movs	r3, #0
   4efaa:	f88d 3004 	strb.w	r3, [sp, #4]
   4efae:	6800      	ldr	r0, [r0, #0]
   4efb0:	f642 0303 	movw	r3, #10243	; 0x2803
   4efb4:	a901      	add	r1, sp, #4
   4efb6:	f8ad 3006 	strh.w	r3, [sp, #6]
   4efba:	f7fd fc6a 	bl	4c892 <bt_uuid_cmp>
   4efbe:	2800      	cmp	r0, #0
   4efc0:	d1ef      	bne.n	4efa2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   4efc2:	68e3      	ldr	r3, [r4, #12]
   4efc4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   4efc6:	2800      	cmp	r0, #0
   4efc8:	d1ec      	bne.n	4efa4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   4efca:	4620      	mov	r0, r4
   4efcc:	f7e3 f80e 	bl	31fec <bt_gatt_attr_get_handle>
   4efd0:	3001      	adds	r0, #1
   4efd2:	b280      	uxth	r0, r0
	return handle;
   4efd4:	e7e6      	b.n	4efa4 <bt_gatt_attr_value_handle+0x8>

0004efd6 <bt_gatt_attr_read_chrc>:
{
   4efd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   4efd8:	68cf      	ldr	r7, [r1, #12]
{
   4efda:	b087      	sub	sp, #28
   4efdc:	4608      	mov	r0, r1
   4efde:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   4efe0:	79bb      	ldrb	r3, [r7, #6]
   4efe2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4efe6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   4efea:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4efec:	f7ff ffd6 	bl	4ef9c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4eff0:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4eff2:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4eff6:	780b      	ldrb	r3, [r1, #0]
   4eff8:	b99b      	cbnz	r3, 4f022 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   4effa:	884b      	ldrh	r3, [r1, #2]
   4effc:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   4f000:	2105      	movs	r1, #5
	if (offset > value_len) {
   4f002:	42b1      	cmp	r1, r6
   4f004:	d315      	bcc.n	4f032 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   4f006:	1b89      	subs	r1, r1, r6
   4f008:	42a1      	cmp	r1, r4
   4f00a:	bfa8      	it	ge
   4f00c:	4621      	movge	r1, r4
   4f00e:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   4f010:	ab01      	add	r3, sp, #4
   4f012:	4622      	mov	r2, r4
   4f014:	1999      	adds	r1, r3, r6
   4f016:	4628      	mov	r0, r5
   4f018:	f7fd fb4d 	bl	4c6b6 <memcpy>
}
   4f01c:	4620      	mov	r0, r4
   4f01e:	b007      	add	sp, #28
   4f020:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   4f022:	3101      	adds	r1, #1
   4f024:	2210      	movs	r2, #16
   4f026:	f10d 0007 	add.w	r0, sp, #7
   4f02a:	f7fd fb44 	bl	4c6b6 <memcpy>
		value_len += 16U;
   4f02e:	2113      	movs	r1, #19
   4f030:	e7e7      	b.n	4f002 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4f032:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4f036:	e7f1      	b.n	4f01c <bt_gatt_attr_read_chrc+0x46>

0004f038 <bt_gatt_foreach_attr>:
{
   4f038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4f03a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4f03e:	2300      	movs	r3, #0
   4f040:	9300      	str	r3, [sp, #0]
   4f042:	461a      	mov	r2, r3
   4f044:	f7e3 f802 	bl	3204c <bt_gatt_foreach_attr_type>
}
   4f048:	b005      	add	sp, #20
   4f04a:	f85d fb04 	ldr.w	pc, [sp], #4

0004f04e <bt_gatt_check_perm>:
{
   4f04e:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   4f050:	07d4      	lsls	r4, r2, #31
{
   4f052:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4f054:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   4f056:	d504      	bpl.n	4f062 <bt_gatt_check_perm+0x14>
   4f058:	f010 0f15 	tst.w	r0, #21
   4f05c:	d01e      	beq.n	4f09c <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4f05e:	684b      	ldr	r3, [r1, #4]
   4f060:	b1e3      	cbz	r3, 4f09c <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   4f062:	0793      	lsls	r3, r2, #30
   4f064:	d504      	bpl.n	4f070 <bt_gatt_check_perm+0x22>
   4f066:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   4f06a:	d019      	beq.n	4f0a0 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   4f06c:	688b      	ldr	r3, [r1, #8]
   4f06e:	b1bb      	cbz	r3, 4f0a0 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   4f070:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   4f074:	f014 0f30 	tst.w	r4, #48	; 0x30
   4f078:	d103      	bne.n	4f082 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   4f07a:	f014 000c 	ands.w	r0, r4, #12
   4f07e:	d107      	bne.n	4f090 <bt_gatt_check_perm+0x42>
}
   4f080:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   4f082:	4628      	mov	r0, r5
   4f084:	f7fe fbfd 	bl	4d882 <bt_conn_get_security>
   4f088:	2802      	cmp	r0, #2
   4f08a:	d8f6      	bhi.n	4f07a <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   4f08c:	2005      	movs	r0, #5
   4f08e:	e7f7      	b.n	4f080 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   4f090:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4f092:	2b00      	cmp	r3, #0
   4f094:	bf14      	ite	ne
   4f096:	2000      	movne	r0, #0
   4f098:	200f      	moveq	r0, #15
   4f09a:	e7f1      	b.n	4f080 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   4f09c:	2002      	movs	r0, #2
   4f09e:	e7ef      	b.n	4f080 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   4f0a0:	2003      	movs	r0, #3
   4f0a2:	e7ed      	b.n	4f080 <bt_gatt_check_perm+0x32>

0004f0a4 <gatt_notify>:
{
   4f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4f0a8:	4614      	mov	r4, r2
   4f0aa:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   4f0ac:	2214      	movs	r2, #20
   4f0ae:	6861      	ldr	r1, [r4, #4]
{
   4f0b0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   4f0b2:	f7ff ffcc 	bl	4f04e <bt_gatt_check_perm>
   4f0b6:	bb08      	cbnz	r0, 4f0fc <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   4f0b8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   4f0ba:	211b      	movs	r1, #27
   4f0bc:	3202      	adds	r2, #2
   4f0be:	4638      	mov	r0, r7
   4f0c0:	f7ff f9dc 	bl	4e47c <bt_att_create_pdu>
	if (!buf) {
   4f0c4:	4605      	mov	r5, r0
   4f0c6:	b1e8      	cbz	r0, 4f104 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   4f0c8:	f100 0908 	add.w	r9, r0, #8
   4f0cc:	2102      	movs	r1, #2
   4f0ce:	4648      	mov	r0, r9
   4f0d0:	f001 fb1a 	bl	50708 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   4f0d4:	4606      	mov	r6, r0
   4f0d6:	89a1      	ldrh	r1, [r4, #12]
   4f0d8:	f826 8b02 	strh.w	r8, [r6], #2
   4f0dc:	4648      	mov	r0, r9
   4f0de:	f001 fb13 	bl	50708 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   4f0e2:	89a2      	ldrh	r2, [r4, #12]
   4f0e4:	68a1      	ldr	r1, [r4, #8]
   4f0e6:	4630      	mov	r0, r6
   4f0e8:	f7fd fae5 	bl	4c6b6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   4f0ec:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4f0f0:	4629      	mov	r1, r5
   4f0f2:	4638      	mov	r0, r7
}
   4f0f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   4f0f8:	f7ff ba78 	b.w	4e5ec <bt_att_send>
		return -EPERM;
   4f0fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4f100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   4f104:	f06f 000b 	mvn.w	r0, #11
   4f108:	e7fa      	b.n	4f100 <gatt_notify+0x5c>

0004f10a <gatt_discover_next>:
{
   4f10a:	b570      	push	{r4, r5, r6, lr}
   4f10c:	4605      	mov	r5, r0
   4f10e:	4614      	mov	r4, r2
	if (!last_handle)
   4f110:	b929      	cbnz	r1, 4f11e <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   4f112:	4621      	mov	r1, r4
   4f114:	4628      	mov	r0, r5
   4f116:	f7e3 fb3d 	bl	32794 <bt_gatt_discover>
   4f11a:	b928      	cbnz	r0, 4f128 <gatt_discover_next+0x1e>
}
   4f11c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   4f11e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   4f122:	4291      	cmp	r1, r2
   4f124:	d107      	bne.n	4f136 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   4f126:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   4f128:	6863      	ldr	r3, [r4, #4]
   4f12a:	4622      	mov	r2, r4
   4f12c:	4628      	mov	r0, r5
   4f12e:	2100      	movs	r1, #0
}
   4f130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   4f134:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   4f136:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   4f138:	1c4b      	adds	r3, r1, #1
   4f13a:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   4f13c:	429a      	cmp	r2, r3
		params->start_handle++;
   4f13e:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   4f140:	d2e7      	bcs.n	4f112 <gatt_discover_next+0x8>
   4f142:	e7f1      	b.n	4f128 <gatt_discover_next+0x1e>

0004f144 <gatt_find_type_rsp>:
{
   4f144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4f148:	b088      	sub	sp, #32
   4f14a:	4607      	mov	r7, r0
   4f14c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4f150:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   4f152:	b911      	cbnz	r1, 4f15a <gatt_find_type_rsp+0x16>
   4f154:	f013 0803 	ands.w	r8, r3, #3
   4f158:	d008      	beq.n	4f16c <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   4f15a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   4f15e:	464a      	mov	r2, r9
   4f160:	2100      	movs	r1, #0
   4f162:	4638      	mov	r0, r7
}
   4f164:	b008      	add	sp, #32
   4f166:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   4f16a:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   4f16c:	f3c3 0387 	ubfx	r3, r3, #2, #8
   4f170:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4f174:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4f176:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   4f17a:	42ac      	cmp	r4, r5
   4f17c:	d107      	bne.n	4f18e <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   4f17e:	464a      	mov	r2, r9
   4f180:	4641      	mov	r1, r8
   4f182:	4638      	mov	r0, r7
}
   4f184:	b008      	add	sp, #32
   4f186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   4f18a:	f7ff bfbe 	b.w	4f10a <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4f18e:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4f190:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   4f194:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4f198:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4f19a:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   4f19e:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   4f1a2:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   4f1a4:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4f1a6:	bf0c      	ite	eq
   4f1a8:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   4f1ac:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4f1ae:	ab01      	add	r3, sp, #4
   4f1b0:	f8ad 1002 	strh.w	r1, [sp, #2]
   4f1b4:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   4f1b6:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4f1ba:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4f1be:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4f1c2:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4f1c6:	f8cd d00c 	str.w	sp, [sp, #12]
   4f1ca:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4f1ce:	464a      	mov	r2, r9
   4f1d0:	a903      	add	r1, sp, #12
   4f1d2:	4638      	mov	r0, r7
   4f1d4:	4798      	blx	r3
   4f1d6:	3404      	adds	r4, #4
   4f1d8:	2800      	cmp	r0, #0
   4f1da:	d1ce      	bne.n	4f17a <gatt_find_type_rsp+0x36>
}
   4f1dc:	b008      	add	sp, #32
   4f1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004f1e2 <gatt_read_group_rsp>:
{
   4f1e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f1e6:	b08f      	sub	sp, #60	; 0x3c
   4f1e8:	4681      	mov	r9, r0
   4f1ea:	9d18      	ldr	r5, [sp, #96]	; 0x60
   4f1ec:	4617      	mov	r7, r2
	if (err) {
   4f1ee:	b131      	cbz	r1, 4f1fe <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   4f1f0:	686b      	ldr	r3, [r5, #4]
   4f1f2:	462a      	mov	r2, r5
   4f1f4:	2100      	movs	r1, #0
}
   4f1f6:	b00f      	add	sp, #60	; 0x3c
   4f1f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   4f1fc:	4718      	bx	r3
	switch (rsp->len) {
   4f1fe:	7812      	ldrb	r2, [r2, #0]
   4f200:	2a06      	cmp	r2, #6
   4f202:	d009      	beq.n	4f218 <gatt_read_group_rsp+0x36>
   4f204:	2a14      	cmp	r2, #20
   4f206:	d01d      	beq.n	4f244 <gatt_read_group_rsp+0x62>
	params->func(conn, NULL, params);
   4f208:	686b      	ldr	r3, [r5, #4]
   4f20a:	462a      	mov	r2, r5
   4f20c:	2100      	movs	r1, #0
   4f20e:	4648      	mov	r0, r9
   4f210:	4798      	blx	r3
}
   4f212:	b00f      	add	sp, #60	; 0x3c
   4f214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   4f218:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   4f21c:	3b01      	subs	r3, #1
   4f21e:	b29c      	uxth	r4, r3
   4f220:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   4f224:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   4f226:	783b      	ldrb	r3, [r7, #0]
   4f228:	42a3      	cmp	r3, r4
   4f22a:	d90f      	bls.n	4f24c <gatt_read_group_rsp+0x6a>
	if (length == 0U && end_handle) {
   4f22c:	2c00      	cmp	r4, #0
   4f22e:	d1eb      	bne.n	4f208 <gatt_read_group_rsp+0x26>
   4f230:	2e00      	cmp	r6, #0
   4f232:	d0e9      	beq.n	4f208 <gatt_read_group_rsp+0x26>
	gatt_discover_next(conn, handle, params);
   4f234:	462a      	mov	r2, r5
   4f236:	4631      	mov	r1, r6
   4f238:	4648      	mov	r0, r9
}
   4f23a:	b00f      	add	sp, #60	; 0x3c
   4f23c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   4f240:	f7ff bf63 	b.w	4f10a <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   4f244:	2202      	movs	r2, #2
   4f246:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   4f24a:	e7e7      	b.n	4f21c <gatt_read_group_rsp+0x3a>
		struct bt_gatt_attr attr = {};
   4f24c:	2214      	movs	r2, #20
   4f24e:	2100      	movs	r1, #0
   4f250:	a809      	add	r0, sp, #36	; 0x24
   4f252:	f7fd fa3b 	bl	4c6cc <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   4f256:	f8b8 a000 	ldrh.w	sl, [r8]
   4f25a:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   4f25e:	2b00      	cmp	r3, #0
   4f260:	d0d2      	beq.n	4f208 <gatt_read_group_rsp+0x26>
		end_handle = sys_le16_to_cpu(data->end_handle);
   4f262:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   4f266:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   4f26a:	2e00      	cmp	r6, #0
   4f26c:	d0cc      	beq.n	4f208 <gatt_read_group_rsp+0x26>
   4f26e:	42b3      	cmp	r3, r6
   4f270:	d8ca      	bhi.n	4f208 <gatt_read_group_rsp+0x26>
		switch (u.uuid.type) {
   4f272:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4f276:	b323      	cbz	r3, 4f2c2 <gatt_read_group_rsp+0xe0>
   4f278:	2b02      	cmp	r3, #2
   4f27a:	d02a      	beq.n	4f2d2 <gatt_read_group_rsp+0xf0>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4f27c:	f04f 0300 	mov.w	r3, #0
   4f280:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4f284:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   4f286:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4f28a:	2b00      	cmp	r3, #0
   4f28c:	f642 0301 	movw	r3, #10241	; 0x2801
   4f290:	bf08      	it	eq
   4f292:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   4f296:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   4f29a:	ab04      	add	r3, sp, #16
   4f29c:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   4f29e:	ab01      	add	r3, sp, #4
   4f2a0:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   4f2a2:	ab02      	add	r3, sp, #8
   4f2a4:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   4f2a6:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4f2aa:	686b      	ldr	r3, [r5, #4]
   4f2ac:	462a      	mov	r2, r5
   4f2ae:	a909      	add	r1, sp, #36	; 0x24
   4f2b0:	4648      	mov	r0, r9
   4f2b2:	4798      	blx	r3
   4f2b4:	2800      	cmp	r0, #0
   4f2b6:	d0ac      	beq.n	4f212 <gatt_read_group_rsp+0x30>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   4f2b8:	783a      	ldrb	r2, [r7, #0]
   4f2ba:	1aa4      	subs	r4, r4, r2
   4f2bc:	b2a4      	uxth	r4, r4
   4f2be:	4490      	add	r8, r2
   4f2c0:	e7b1      	b.n	4f226 <gatt_read_group_rsp+0x44>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   4f2c2:	2202      	movs	r2, #2
   4f2c4:	f108 0104 	add.w	r1, r8, #4
   4f2c8:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4f2cc:	f7fd f9f3 	bl	4c6b6 <memcpy>
			break;
   4f2d0:	e7d4      	b.n	4f27c <gatt_read_group_rsp+0x9a>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4f2d2:	2210      	movs	r2, #16
   4f2d4:	f108 0104 	add.w	r1, r8, #4
   4f2d8:	f10d 0011 	add.w	r0, sp, #17
   4f2dc:	e7f6      	b.n	4f2cc <gatt_read_group_rsp+0xea>

0004f2de <read_included_uuid_cb>:
{
   4f2de:	b570      	push	{r4, r5, r6, lr}
   4f2e0:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   4f2e2:	2b10      	cmp	r3, #16
{
   4f2e4:	4611      	mov	r1, r2
   4f2e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
   4f2e8:	4605      	mov	r5, r0
   4f2ea:	461a      	mov	r2, r3
	if (length != 16U) {
   4f2ec:	d006      	beq.n	4f2fc <read_included_uuid_cb+0x1e>
		params->func(conn, NULL, params);
   4f2ee:	6863      	ldr	r3, [r4, #4]
   4f2f0:	4622      	mov	r2, r4
   4f2f2:	2100      	movs	r1, #0
}
   4f2f4:	b00e      	add	sp, #56	; 0x38
   4f2f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   4f2fa:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   4f2fc:	8963      	ldrh	r3, [r4, #10]
   4f2fe:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   4f302:	89a3      	ldrh	r3, [r4, #12]
   4f304:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   4f308:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   4f30a:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   4f30c:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   4f310:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   4f312:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   4f316:	f7fd f9ce 	bl	4c6b6 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4f31a:	6821      	ldr	r1, [r4, #0]
   4f31c:	b9c9      	cbnz	r1, 4f352 <read_included_uuid_cb+0x74>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4f31e:	f642 0202 	movw	r2, #10242	; 0x2802
   4f322:	2300      	movs	r3, #0
   4f324:	f8ad 2006 	strh.w	r2, [sp, #6]
   4f328:	aa01      	add	r2, sp, #4
   4f32a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   4f32e:	f88d 3004 	strb.w	r3, [sp, #4]
   4f332:	aa02      	add	r2, sp, #8
   4f334:	930b      	str	r3, [sp, #44]	; 0x2c
   4f336:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   4f33a:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4f33c:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   4f33e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4f342:	4622      	mov	r2, r4
   4f344:	6863      	ldr	r3, [r4, #4]
   4f346:	a909      	add	r1, sp, #36	; 0x24
   4f348:	4628      	mov	r0, r5
   4f34a:	4798      	blx	r3
   4f34c:	b930      	cbnz	r0, 4f35c <read_included_uuid_cb+0x7e>
}
   4f34e:	b00e      	add	sp, #56	; 0x38
   4f350:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4f352:	4630      	mov	r0, r6
   4f354:	f7fd fa9d 	bl	4c892 <bt_uuid_cmp>
   4f358:	2800      	cmp	r0, #0
   4f35a:	d0e0      	beq.n	4f31e <read_included_uuid_cb+0x40>
	gatt_discover_next(conn, params->start_handle, params);
   4f35c:	8921      	ldrh	r1, [r4, #8]
   4f35e:	4622      	mov	r2, r4
   4f360:	4628      	mov	r0, r5
   4f362:	f7ff fed2 	bl	4f10a <gatt_discover_next>
	return;
   4f366:	e7f2      	b.n	4f34e <read_included_uuid_cb+0x70>

0004f368 <gatt_find_info_rsp>:
{
   4f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f36c:	b08f      	sub	sp, #60	; 0x3c
   4f36e:	4680      	mov	r8, r0
   4f370:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   4f372:	b921      	cbnz	r1, 4f37e <gatt_find_info_rsp+0x16>
	switch (rsp->format) {
   4f374:	7810      	ldrb	r0, [r2, #0]
   4f376:	2801      	cmp	r0, #1
   4f378:	d007      	beq.n	4f38a <gatt_find_info_rsp+0x22>
   4f37a:	2802      	cmp	r0, #2
   4f37c:	d01e      	beq.n	4f3bc <gatt_find_info_rsp+0x54>
	params->func(conn, NULL, params);
   4f37e:	6873      	ldr	r3, [r6, #4]
   4f380:	4632      	mov	r2, r6
   4f382:	2100      	movs	r1, #0
   4f384:	4640      	mov	r0, r8
   4f386:	4798      	blx	r3
   4f388:	e08a      	b.n	4f4a0 <gatt_find_info_rsp+0x138>
		u.uuid.type = BT_UUID_TYPE_16;
   4f38a:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i16);
   4f38e:	f04f 0a04 	mov.w	sl, #4
	length--;
   4f392:	3b01      	subs	r3, #1
   4f394:	b29b      	uxth	r3, r3
	if (length < len) {
   4f396:	4553      	cmp	r3, sl
   4f398:	d3f1      	bcc.n	4f37e <gatt_find_info_rsp+0x16>
	for (i = length / len, pdu = rsp->info; i != 0;
   4f39a:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   4f39e:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   4f3a2:	9300      	str	r3, [sp, #0]
   4f3a4:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   4f3a6:	46cb      	mov	fp, r9
			skip = false;
   4f3a8:	464d      	mov	r5, r9
   4f3aa:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   4f3ac:	9b00      	ldr	r3, [sp, #0]
   4f3ae:	b953      	cbnz	r3, 4f3c6 <gatt_find_info_rsp+0x5e>
	gatt_discover_next(conn, handle, params);
   4f3b0:	4632      	mov	r2, r6
   4f3b2:	4659      	mov	r1, fp
   4f3b4:	4640      	mov	r0, r8
   4f3b6:	f7ff fea8 	bl	4f10a <gatt_discover_next>
	return;
   4f3ba:	e071      	b.n	4f4a0 <gatt_find_info_rsp+0x138>
		u.uuid.type = BT_UUID_TYPE_128;
   4f3bc:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i128);
   4f3c0:	f04f 0a12 	mov.w	sl, #18
		break;
   4f3c4:	e7e5      	b.n	4f392 <gatt_find_info_rsp+0x2a>
		handle = sys_le16_to_cpu(info.i16->handle);
   4f3c6:	8823      	ldrh	r3, [r4, #0]
   4f3c8:	9301      	str	r3, [sp, #4]
   4f3ca:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   4f3ce:	f1b9 0f00 	cmp.w	r9, #0
   4f3d2:	d151      	bne.n	4f478 <gatt_find_info_rsp+0x110>
		switch (u.uuid.type) {
   4f3d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4f3d8:	2b00      	cmp	r3, #0
   4f3da:	d03a      	beq.n	4f452 <gatt_find_info_rsp+0xea>
   4f3dc:	2b02      	cmp	r3, #2
   4f3de:	d03f      	beq.n	4f460 <gatt_find_info_rsp+0xf8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4f3e0:	6831      	ldr	r1, [r6, #0]
   4f3e2:	2900      	cmp	r1, #0
   4f3e4:	d143      	bne.n	4f46e <gatt_find_info_rsp+0x106>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4f3e6:	7c33      	ldrb	r3, [r6, #16]
   4f3e8:	2b04      	cmp	r3, #4
   4f3ea:	d148      	bne.n	4f47e <gatt_find_info_rsp+0x116>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4f3ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4f3f0:	a902      	add	r1, sp, #8
   4f3f2:	4638      	mov	r0, r7
   4f3f4:	f88d 5008 	strb.w	r5, [sp, #8]
   4f3f8:	f8ad 300a 	strh.w	r3, [sp, #10]
   4f3fc:	f7fd fa49 	bl	4c892 <bt_uuid_cmp>
   4f400:	b310      	cbz	r0, 4f448 <gatt_find_info_rsp+0xe0>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4f402:	f642 0301 	movw	r3, #10241	; 0x2801
   4f406:	a903      	add	r1, sp, #12
   4f408:	4638      	mov	r0, r7
   4f40a:	f88d 500c 	strb.w	r5, [sp, #12]
   4f40e:	f8ad 300e 	strh.w	r3, [sp, #14]
   4f412:	f7fd fa3e 	bl	4c892 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4f416:	b1b8      	cbz	r0, 4f448 <gatt_find_info_rsp+0xe0>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   4f418:	f642 0302 	movw	r3, #10242	; 0x2802
   4f41c:	a909      	add	r1, sp, #36	; 0x24
   4f41e:	4638      	mov	r0, r7
   4f420:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4f424:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4f428:	f7fd fa33 	bl	4c892 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4f42c:	b160      	cbz	r0, 4f448 <gatt_find_info_rsp+0xe0>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   4f42e:	f642 0303 	movw	r3, #10243	; 0x2803
   4f432:	a909      	add	r1, sp, #36	; 0x24
   4f434:	4638      	mov	r0, r7
   4f436:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4f43a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4f43e:	f7fd fa28 	bl	4c892 <bt_uuid_cmp>
   4f442:	b9e0      	cbnz	r0, 4f47e <gatt_find_info_rsp+0x116>
				skip = true;
   4f444:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   4f448:	9b00      	ldr	r3, [sp, #0]
   4f44a:	3b01      	subs	r3, #1
   4f44c:	9300      	str	r3, [sp, #0]
   4f44e:	4454      	add	r4, sl
   4f450:	e7ac      	b.n	4f3ac <gatt_find_info_rsp+0x44>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   4f452:	78a3      	ldrb	r3, [r4, #2]
   4f454:	78e2      	ldrb	r2, [r4, #3]
   4f456:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4f45a:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   4f45e:	e7bf      	b.n	4f3e0 <gatt_find_info_rsp+0x78>
			memcpy(u.u128.val, info.i128->uuid, 16);
   4f460:	2210      	movs	r2, #16
   4f462:	1ca1      	adds	r1, r4, #2
   4f464:	f10d 0011 	add.w	r0, sp, #17
   4f468:	f7fd f925 	bl	4c6b6 <memcpy>
			break;
   4f46c:	e7b8      	b.n	4f3e0 <gatt_find_info_rsp+0x78>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4f46e:	4638      	mov	r0, r7
   4f470:	f7fd fa0f 	bl	4c892 <bt_uuid_cmp>
   4f474:	2800      	cmp	r0, #0
   4f476:	d0b6      	beq.n	4f3e6 <gatt_find_info_rsp+0x7e>
			skip = false;
   4f478:	f04f 0900 	mov.w	r9, #0
   4f47c:	e7e4      	b.n	4f448 <gatt_find_info_rsp+0xe0>
		attr.handle = handle;
   4f47e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4f482:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4f486:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   4f48a:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4f48e:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4f490:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4f494:	4632      	mov	r2, r6
   4f496:	a909      	add	r1, sp, #36	; 0x24
   4f498:	4640      	mov	r0, r8
   4f49a:	4798      	blx	r3
   4f49c:	2800      	cmp	r0, #0
   4f49e:	d1d3      	bne.n	4f448 <gatt_find_info_rsp+0xe0>
}
   4f4a0:	b00f      	add	sp, #60	; 0x3c
   4f4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004f4a6 <bt_gatt_write_without_response_cb>:
{
   4f4a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4f4aa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   4f4ac:	7b42      	ldrb	r2, [r0, #13]
   4f4ae:	2a07      	cmp	r2, #7
{
   4f4b0:	461e      	mov	r6, r3
   4f4b2:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
   4f4b6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   4f4ba:	4605      	mov	r5, r0
   4f4bc:	4688      	mov	r8, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4f4be:	d130      	bne.n	4f522 <bt_gatt_write_without_response_cb+0x7c>
	if (conn->encrypt) {
   4f4c0:	7ac2      	ldrb	r2, [r0, #11]
   4f4c2:	bb0a      	cbnz	r2, 4f508 <bt_gatt_write_without_response_cb+0x62>
	if (sign) {
   4f4c4:	b303      	cbz	r3, 4f508 <bt_gatt_write_without_response_cb+0x62>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   4f4c6:	f106 020e 	add.w	r2, r6, #14
   4f4ca:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4f4cc:	f7fe ffd6 	bl	4e47c <bt_att_create_pdu>
   4f4d0:	4604      	mov	r4, r0
	if (!buf) {
   4f4d2:	b1b0      	cbz	r0, 4f502 <bt_gatt_write_without_response_cb+0x5c>
   4f4d4:	2102      	movs	r1, #2
   4f4d6:	3008      	adds	r0, #8
   4f4d8:	f001 f916 	bl	50708 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4f4dc:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   4f4de:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4f4e2:	2200      	movs	r2, #0
   4f4e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   4f4e8:	2300      	movs	r3, #0
   4f4ea:	e9cd 2300 	strd	r2, r3, [sp]
   4f4ee:	4631      	mov	r1, r6
   4f4f0:	463a      	mov	r2, r7
   4f4f2:	4620      	mov	r0, r4
   4f4f4:	f7f4 fe10 	bl	44118 <net_buf_append_bytes>
	if (write != length) {
   4f4f8:	42b0      	cmp	r0, r6
   4f4fa:	d009      	beq.n	4f510 <bt_gatt_write_without_response_cb+0x6a>
		net_buf_unref(buf);
   4f4fc:	4620      	mov	r0, r4
   4f4fe:	f7f4 fdd9 	bl	440b4 <net_buf_unref>
		return -ENOMEM;
   4f502:	f06f 000b 	mvn.w	r0, #11
   4f506:	e00e      	b.n	4f526 <bt_gatt_write_without_response_cb+0x80>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4f508:	1cb2      	adds	r2, r6, #2
   4f50a:	2152      	movs	r1, #82	; 0x52
   4f50c:	4628      	mov	r0, r5
   4f50e:	e7dd      	b.n	4f4cc <bt_gatt_write_without_response_cb+0x26>
	return bt_att_send(conn, buf, func, user_data);
   4f510:	4653      	mov	r3, sl
   4f512:	464a      	mov	r2, r9
   4f514:	4621      	mov	r1, r4
   4f516:	4628      	mov	r0, r5
}
   4f518:	b004      	add	sp, #16
   4f51a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   4f51e:	f7ff b865 	b.w	4e5ec <bt_att_send>
		return -ENOTCONN;
   4f522:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4f526:	b004      	add	sp, #16
   4f528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004f52c <gatt_ccc_discover_cb>:
{
   4f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4f52e:	4606      	mov	r6, r0
	struct bt_gatt_subscribe_params *sub_params = params->sub_params;
   4f530:	6955      	ldr	r5, [r2, #20]
{
   4f532:	4610      	mov	r0, r2
	if (!attr) {
   4f534:	460c      	mov	r4, r1
   4f536:	b951      	cbnz	r1, 4f54e <gatt_ccc_discover_cb+0x22>
		memset(params, 0, sizeof(*params));
   4f538:	2218      	movs	r2, #24
   4f53a:	f7fd f8c7 	bl	4c6cc <memset>
		sub_params->notify(conn, sub_params, NULL, 0);
   4f53e:	682f      	ldr	r7, [r5, #0]
   4f540:	4623      	mov	r3, r4
   4f542:	4622      	mov	r2, r4
   4f544:	4629      	mov	r1, r5
   4f546:	4630      	mov	r0, r6
   4f548:	47b8      	blx	r7
		return BT_GATT_ITER_STOP;
   4f54a:	2000      	movs	r0, #0
}
   4f54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4f54e:	7c13      	ldrb	r3, [r2, #16]
   4f550:	2b04      	cmp	r3, #4
   4f552:	d112      	bne.n	4f57a <gatt_ccc_discover_cb+0x4e>
		memset(params, 0, sizeof(*params));
   4f554:	2100      	movs	r1, #0
   4f556:	2218      	movs	r2, #24
   4f558:	f7fd f8b8 	bl	4c6cc <memset>
		sub_params->ccc_handle = attr->handle;
   4f55c:	8a23      	ldrh	r3, [r4, #16]
   4f55e:	816b      	strh	r3, [r5, #10]
		if (bt_gatt_subscribe(conn, sub_params)) {
   4f560:	4629      	mov	r1, r5
   4f562:	4630      	mov	r0, r6
   4f564:	f7e3 fb26 	bl	32bb4 <bt_gatt_subscribe>
   4f568:	2800      	cmp	r0, #0
   4f56a:	d0ef      	beq.n	4f54c <gatt_ccc_discover_cb+0x20>
			sub_params->notify(conn, sub_params, NULL, 0);
   4f56c:	2300      	movs	r3, #0
   4f56e:	682c      	ldr	r4, [r5, #0]
   4f570:	461a      	mov	r2, r3
   4f572:	4629      	mov	r1, r5
   4f574:	4630      	mov	r0, r6
   4f576:	47a0      	blx	r4
   4f578:	e7e7      	b.n	4f54a <gatt_ccc_discover_cb+0x1e>
	return BT_GATT_ITER_CONTINUE;
   4f57a:	2001      	movs	r0, #1
   4f57c:	e7e6      	b.n	4f54c <gatt_ccc_discover_cb+0x20>

0004f57e <bt_gatt_cancel>:
{
   4f57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4f580:	4604      	mov	r4, r0
   4f582:	460d      	mov	r5, r1
	k_sched_lock();
   4f584:	f7f9 fbfa 	bl	48d7c <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   4f588:	4629      	mov	r1, r5
   4f58a:	4620      	mov	r0, r4
   4f58c:	f7ff f88a 	bl	4e6a4 <bt_att_find_req_by_user_data>
	if (req) {
   4f590:	4601      	mov	r1, r0
   4f592:	b920      	cbnz	r0, 4f59e <bt_gatt_cancel+0x20>
}
   4f594:	b002      	add	sp, #8
   4f596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   4f59a:	f7f9 bdbd 	b.w	49118 <k_sched_unlock>
		func = req->func;
   4f59e:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   4f5a0:	4620      	mov	r0, r4
   4f5a2:	f7e2 f9d7 	bl	31954 <bt_att_req_cancel>
	k_sched_unlock();
   4f5a6:	f7f9 fdb7 	bl	49118 <k_sched_unlock>
	if (func) {
   4f5aa:	b12e      	cbz	r6, 4f5b8 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   4f5ac:	2300      	movs	r3, #0
   4f5ae:	9500      	str	r5, [sp, #0]
   4f5b0:	461a      	mov	r2, r3
   4f5b2:	210e      	movs	r1, #14
   4f5b4:	4620      	mov	r0, r4
   4f5b6:	47b0      	blx	r6
}
   4f5b8:	b002      	add	sp, #8
   4f5ba:	bd70      	pop	{r4, r5, r6, pc}

0004f5bc <bt_gatt_unsubscribe>:
{
   4f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4f5c0:	7b43      	ldrb	r3, [r0, #13]
   4f5c2:	2b07      	cmp	r3, #7
{
   4f5c4:	4680      	mov	r8, r0
   4f5c6:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4f5c8:	d155      	bne.n	4f676 <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   4f5ca:	f7e2 fa3b 	bl	31a44 <gatt_sub_find>
	if (!sub) {
   4f5ce:	4606      	mov	r6, r0
   4f5d0:	2800      	cmp	r0, #0
   4f5d2:	d053      	beq.n	4f67c <bt_gatt_unsubscribe+0xc0>
	return list->head;
   4f5d4:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4f5d6:	b104      	cbz	r4, 4f5da <bt_gatt_unsubscribe+0x1e>
   4f5d8:	3c1c      	subs	r4, #28
			has_subscription = true;
   4f5da:	2300      	movs	r3, #0
   4f5dc:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4f5de:	bb5c      	cbnz	r4, 4f638 <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   4f5e0:	2b00      	cmp	r3, #0
   4f5e2:	d04b      	beq.n	4f67c <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   4f5e4:	2f00      	cmp	r7, #0
   4f5e6:	d035      	beq.n	4f654 <bt_gatt_unsubscribe+0x98>
   4f5e8:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   4f5ea:	f105 021c 	add.w	r2, r5, #28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4f5ee:	b15b      	cbz	r3, 4f608 <bt_gatt_unsubscribe+0x4c>
   4f5f0:	429a      	cmp	r2, r3
   4f5f2:	d13d      	bne.n	4f670 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   4f5f4:	69eb      	ldr	r3, [r5, #28]
	return list->tail;
   4f5f6:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   4f5f8:	2c00      	cmp	r4, #0
   4f5fa:	d134      	bne.n	4f666 <bt_gatt_unsubscribe+0xaa>
   4f5fc:	428a      	cmp	r2, r1
	list->head = node;
   4f5fe:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   4f600:	d100      	bne.n	4f604 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   4f602:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   4f604:	2300      	movs	r3, #0
   4f606:	61eb      	str	r3, [r5, #28]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4f608:	f105 0018 	add.w	r0, r5, #24
   4f60c:	f7ff f894 	bl	4e738 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   4f610:	0743      	lsls	r3, r0, #29
   4f612:	d503      	bpl.n	4f61c <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   4f614:	4629      	mov	r1, r5
   4f616:	4640      	mov	r0, r8
   4f618:	f7ff ffb1 	bl	4f57e <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   4f61c:	68b3      	ldr	r3, [r6, #8]
   4f61e:	b913      	cbnz	r3, 4f626 <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   4f620:	4630      	mov	r0, r6
   4f622:	f7ff f986 	bl	4e932 <gatt_sub_free>
	if (has_subscription) {
   4f626:	b367      	cbz	r7, 4f682 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   4f628:	2300      	movs	r3, #0
   4f62a:	682c      	ldr	r4, [r5, #0]
   4f62c:	461a      	mov	r2, r3
   4f62e:	4629      	mov	r1, r5
   4f630:	4640      	mov	r0, r8
   4f632:	47a0      	blx	r4
	return 0;
   4f634:	2000      	movs	r0, #0
   4f636:	e014      	b.n	4f662 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   4f638:	42ac      	cmp	r4, r5
   4f63a:	d009      	beq.n	4f650 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   4f63c:	8921      	ldrh	r1, [r4, #8]
   4f63e:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   4f640:	4291      	cmp	r1, r2
   4f642:	bf08      	it	eq
   4f644:	2701      	moveq	r7, #1
	return node->next;
   4f646:	69e4      	ldr	r4, [r4, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4f648:	2c00      	cmp	r4, #0
   4f64a:	d0c9      	beq.n	4f5e0 <bt_gatt_unsubscribe+0x24>
   4f64c:	3c1c      	subs	r4, #28
   4f64e:	e7c6      	b.n	4f5de <bt_gatt_unsubscribe+0x22>
			found = true;
   4f650:	2301      	movs	r3, #1
   4f652:	e7f8      	b.n	4f646 <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   4f654:	82af      	strh	r7, [r5, #20]
		err = gatt_write_ccc(conn, params);
   4f656:	4629      	mov	r1, r5
   4f658:	4640      	mov	r0, r8
   4f65a:	f7e2 fad7 	bl	31c0c <gatt_write_ccc>
		if (err) {
   4f65e:	2800      	cmp	r0, #0
   4f660:	d0c2      	beq.n	4f5e8 <bt_gatt_unsubscribe+0x2c>
}
   4f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   4f666:	428a      	cmp	r2, r1
	parent->next = child;
   4f668:	6023      	str	r3, [r4, #0]
	list->tail = node;
   4f66a:	bf08      	it	eq
   4f66c:	60f4      	streq	r4, [r6, #12]
}
   4f66e:	e7c9      	b.n	4f604 <bt_gatt_unsubscribe+0x48>
	return node->next;
   4f670:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4f672:	681b      	ldr	r3, [r3, #0]
   4f674:	e7bb      	b.n	4f5ee <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   4f676:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4f67a:	e7f2      	b.n	4f662 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   4f67c:	f06f 0015 	mvn.w	r0, #21
   4f680:	e7ef      	b.n	4f662 <bt_gatt_unsubscribe+0xa6>
	return 0;
   4f682:	4638      	mov	r0, r7
   4f684:	e7ed      	b.n	4f662 <bt_gatt_unsubscribe+0xa6>

0004f686 <bt_gatt_notification>:
{
   4f686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4f68a:	4606      	mov	r6, r0
   4f68c:	460f      	mov	r7, r1
   4f68e:	4690      	mov	r8, r2
   4f690:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   4f692:	f7e2 f9d7 	bl	31a44 <gatt_sub_find>
	if (!sub) {
   4f696:	b300      	cbz	r0, 4f6da <bt_gatt_notification+0x54>
	return list->head;
   4f698:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4f69a:	b1f4      	cbz	r4, 4f6da <bt_gatt_notification+0x54>
	return node->next;
   4f69c:	f854 a91c 	ldr.w	sl, [r4], #-28
   4f6a0:	f1ba 0f00 	cmp.w	sl, #0
   4f6a4:	d001      	beq.n	4f6aa <bt_gatt_notification+0x24>
   4f6a6:	f1aa 0a1c 	sub.w	sl, sl, #28
		if (handle != params->value_handle) {
   4f6aa:	8923      	ldrh	r3, [r4, #8]
   4f6ac:	42bb      	cmp	r3, r7
   4f6ae:	d10a      	bne.n	4f6c6 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   4f6b0:	6825      	ldr	r5, [r4, #0]
   4f6b2:	464b      	mov	r3, r9
   4f6b4:	4642      	mov	r2, r8
   4f6b6:	4621      	mov	r1, r4
   4f6b8:	4630      	mov	r0, r6
   4f6ba:	47a8      	blx	r5
   4f6bc:	b918      	cbnz	r0, 4f6c6 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   4f6be:	4621      	mov	r1, r4
   4f6c0:	4630      	mov	r0, r6
   4f6c2:	f7ff ff7b 	bl	4f5bc <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4f6c6:	f1ba 0f00 	cmp.w	sl, #0
   4f6ca:	d006      	beq.n	4f6da <bt_gatt_notification+0x54>
   4f6cc:	f8da 501c 	ldr.w	r5, [sl, #28]
   4f6d0:	b105      	cbz	r5, 4f6d4 <bt_gatt_notification+0x4e>
   4f6d2:	3d1c      	subs	r5, #28
{
   4f6d4:	4654      	mov	r4, sl
   4f6d6:	46aa      	mov	sl, r5
   4f6d8:	e7e7      	b.n	4f6aa <bt_gatt_notification+0x24>
}
   4f6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004f6de <bt_gatt_mult_notification>:
{
   4f6de:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
   4f6e2:	4681      	mov	r9, r0
   4f6e4:	460c      	mov	r4, r1
   4f6e6:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   4f6e8:	f7e2 f9ac 	bl	31a44 <gatt_sub_find>
	if (!sub) {
   4f6ec:	4607      	mov	r7, r0
   4f6ee:	b140      	cbz	r0, 4f702 <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   4f6f0:	462a      	mov	r2, r5
   4f6f2:	4621      	mov	r1, r4
   4f6f4:	a801      	add	r0, sp, #4
   4f6f6:	f000 ffbe 	bl	50676 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   4f6fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4f6fe:	2b04      	cmp	r3, #4
   4f700:	d802      	bhi.n	4f708 <bt_gatt_mult_notification+0x2a>
}
   4f702:	b004      	add	sp, #16
   4f704:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4f708:	2104      	movs	r1, #4
   4f70a:	eb0d 0001 	add.w	r0, sp, r1
   4f70e:	f001 f82c 	bl	5076a <net_buf_simple_pull_mem>
		if (len > buf.len) {
   4f712:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   4f716:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   4f71a:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4f71c:	4605      	mov	r5, r0
		if (len > buf.len) {
   4f71e:	d3f0      	bcc.n	4f702 <bt_gatt_mult_notification+0x24>
	return list->head;
   4f720:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4f722:	b1dc      	cbz	r4, 4f75c <bt_gatt_mult_notification+0x7e>
	return node->next;
   4f724:	f854 691c 	ldr.w	r6, [r4], #-28
   4f728:	b106      	cbz	r6, 4f72c <bt_gatt_mult_notification+0x4e>
   4f72a:	3e1c      	subs	r6, #28
		handle = sys_cpu_to_le16(nfy->handle);
   4f72c:	f835 ab04 	ldrh.w	sl, [r5], #4
			if (handle != params->value_handle) {
   4f730:	8923      	ldrh	r3, [r4, #8]
   4f732:	4553      	cmp	r3, sl
   4f734:	d10b      	bne.n	4f74e <bt_gatt_mult_notification+0x70>
			if (params->notify(conn, params, nfy->value, len) ==
   4f736:	f8d4 c000 	ldr.w	ip, [r4]
   4f73a:	465b      	mov	r3, fp
   4f73c:	462a      	mov	r2, r5
   4f73e:	4621      	mov	r1, r4
   4f740:	4648      	mov	r0, r9
   4f742:	47e0      	blx	ip
   4f744:	b918      	cbnz	r0, 4f74e <bt_gatt_mult_notification+0x70>
				bt_gatt_unsubscribe(conn, params);
   4f746:	4621      	mov	r1, r4
   4f748:	4648      	mov	r0, r9
   4f74a:	f7ff ff37 	bl	4f5bc <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4f74e:	b12e      	cbz	r6, 4f75c <bt_gatt_mult_notification+0x7e>
   4f750:	69f2      	ldr	r2, [r6, #28]
   4f752:	b102      	cbz	r2, 4f756 <bt_gatt_mult_notification+0x78>
   4f754:	3a1c      	subs	r2, #28
{
   4f756:	4634      	mov	r4, r6
   4f758:	4616      	mov	r6, r2
   4f75a:	e7e9      	b.n	4f730 <bt_gatt_mult_notification+0x52>
		net_buf_simple_pull_mem(&buf, len);
   4f75c:	4659      	mov	r1, fp
   4f75e:	a801      	add	r0, sp, #4
   4f760:	f001 f803 	bl	5076a <net_buf_simple_pull_mem>
   4f764:	e7c9      	b.n	4f6fa <bt_gatt_mult_notification+0x1c>

0004f766 <bt_gatt_change_aware>:
{
   4f766:	b538      	push	{r3, r4, r5, lr}
   4f768:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   4f76a:	f7e2 f92d 	bl	319c8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4f76e:	b910      	cbnz	r0, 4f776 <bt_gatt_change_aware+0x10>
		return true;
   4f770:	2501      	movs	r5, #1
}
   4f772:	4628      	mov	r0, r5
   4f774:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4f776:	7a03      	ldrb	r3, [r0, #8]
   4f778:	07d9      	lsls	r1, r3, #31
   4f77a:	d5f9      	bpl.n	4f770 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   4f77c:	f100 040c 	add.w	r4, r0, #12
   4f780:	4620      	mov	r0, r4
   4f782:	f7fe ffd9 	bl	4e738 <atomic_get>
   4f786:	07c2      	lsls	r2, r0, #31
   4f788:	d4f2      	bmi.n	4f770 <bt_gatt_change_aware+0xa>
	if (!req) {
   4f78a:	2d00      	cmp	r5, #0
   4f78c:	d0f1      	beq.n	4f772 <bt_gatt_change_aware+0xc>
   4f78e:	4620      	mov	r0, r4
   4f790:	f7fe ffd2 	bl	4e738 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   4f794:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4f796:	f3c0 0540 	ubfx	r5, r0, #1, #1
   4f79a:	d509      	bpl.n	4f7b0 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f79c:	f06f 0102 	mvn.w	r1, #2
   4f7a0:	4620      	mov	r0, r4
   4f7a2:	f7ff f925 	bl	4e9f0 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4f7a6:	2101      	movs	r1, #1
   4f7a8:	4620      	mov	r0, r4
   4f7aa:	f7ff f820 	bl	4e7ee <atomic_or>
}
   4f7ae:	e7e0      	b.n	4f772 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4f7b0:	2102      	movs	r1, #2
   4f7b2:	e7f9      	b.n	4f7a8 <bt_gatt_change_aware+0x42>

0004f7b4 <ccc_delayed_store>:
{
   4f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4f7b8:	4605      	mov	r5, r0
   4f7ba:	f1a0 0618 	sub.w	r6, r0, #24
			ccc_store->conn_list[i] = NULL;
   4f7be:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = ccc_store->conn_list[i];
   4f7c2:	f856 4b04 	ldr.w	r4, [r6], #4
		if (!conn) {
   4f7c6:	b17c      	cbz	r4, 4f7e8 <ccc_delayed_store+0x34>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4f7c8:	f104 0788 	add.w	r7, r4, #136	; 0x88
   4f7cc:	7a20      	ldrb	r0, [r4, #8]
   4f7ce:	4639      	mov	r1, r7
   4f7d0:	f7fd fc3c 	bl	4d04c <bt_addr_le_is_bonded>
   4f7d4:	b140      	cbz	r0, 4f7e8 <ccc_delayed_store+0x34>
			ccc_store->conn_list[i] = NULL;
   4f7d6:	f846 8c04 	str.w	r8, [r6, #-4]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   4f7da:	7a20      	ldrb	r0, [r4, #8]
   4f7dc:	4639      	mov	r1, r7
   4f7de:	f7e3 fb15 	bl	32e0c <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   4f7e2:	4620      	mov	r0, r4
   4f7e4:	f7fd ffa6 	bl	4d734 <bt_conn_unref>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   4f7e8:	42ae      	cmp	r6, r5
   4f7ea:	d1ea      	bne.n	4f7c2 <ccc_delayed_store+0xe>
}
   4f7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004f7f0 <sys_memcpy_swap>:
	psrc += length - 1;
   4f7f0:	1e53      	subs	r3, r2, #1
   4f7f2:	4419      	add	r1, r3
	for (; length > 0; length--) {
   4f7f4:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   4f7f6:	f811 3901 	ldrb.w	r3, [r1], #-1
   4f7fa:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   4f7fe:	4290      	cmp	r0, r2
   4f800:	d1f9      	bne.n	4f7f6 <sys_memcpy_swap+0x6>
}
   4f802:	4770      	bx	lr

0004f804 <smp_encrypt_info>:
}
   4f804:	2007      	movs	r0, #7
   4f806:	4770      	bx	lr

0004f808 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4f808:	7ac2      	ldrb	r2, [r0, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4f80a:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f80c:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f810:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4f812:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4f816:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f81a:	b928      	cbnz	r0, 4f828 <le_sc_oob_config_set+0x20>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   4f81c:	b952      	cbnz	r2, 4f834 <le_sc_oob_config_set+0x2c>
				     BT_CONN_OOB_BOTH_PEERS :
   4f81e:	2b00      	cmp	r3, #0
   4f820:	bf0c      	ite	eq
   4f822:	2303      	moveq	r3, #3
   4f824:	2300      	movne	r3, #0
   4f826:	e009      	b.n	4f83c <le_sc_oob_config_set+0x34>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   4f828:	b952      	cbnz	r2, 4f840 <le_sc_oob_config_set+0x38>
				     BT_CONN_OOB_BOTH_PEERS :
   4f82a:	2b00      	cmp	r3, #0
   4f82c:	bf0c      	ite	eq
   4f82e:	2303      	moveq	r3, #3
   4f830:	2301      	movne	r3, #1
   4f832:	e003      	b.n	4f83c <le_sc_oob_config_set+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
   4f834:	2b00      	cmp	r3, #0
   4f836:	bf0c      	ite	eq
   4f838:	2301      	moveq	r3, #1
   4f83a:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   4f83c:	704b      	strb	r3, [r1, #1]
}
   4f83e:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   4f840:	005b      	lsls	r3, r3, #1
   4f842:	e7fb      	b.n	4f83c <le_sc_oob_config_set+0x34>

0004f844 <smp_chan_get>:
{
   4f844:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   4f846:	2106      	movs	r1, #6
   4f848:	f7fe f9fa 	bl	4dc40 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4f84c:	b100      	cbz	r0, 4f850 <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   4f84e:	38f0      	subs	r0, #240	; 0xf0
}
   4f850:	bd08      	pop	{r3, pc}

0004f852 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4f852:	f3bf 8f5b 	dmb	ish
   4f856:	6800      	ldr	r0, [r0, #0]
   4f858:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4f85c:	4108      	asrs	r0, r1
}
   4f85e:	f000 0001 	and.w	r0, r0, #1
   4f862:	4770      	bx	lr

0004f864 <update_keys_check>:
{
   4f864:	b510      	push	{r4, lr}
   4f866:	4603      	mov	r3, r0
	if (!keys ||
   4f868:	b1d9      	cbz	r1, 4f8a2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   4f86a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   4f86c:	f010 0f24 	tst.w	r0, #36	; 0x24
   4f870:	d017      	beq.n	4f8a2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f872:	7d1a      	ldrb	r2, [r3, #20]
   4f874:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   4f876:	7b09      	ldrb	r1, [r1, #12]
   4f878:	42a2      	cmp	r2, r4
   4f87a:	bf28      	it	cs
   4f87c:	4622      	movcs	r2, r4
   4f87e:	4291      	cmp	r1, r2
   4f880:	d901      	bls.n	4f886 <update_keys_check+0x22>
		return false;
   4f882:	2000      	movs	r0, #0
}
   4f884:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4f886:	0682      	lsls	r2, r0, #26
   4f888:	d404      	bmi.n	4f894 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   4f88a:	7a18      	ldrb	r0, [r3, #8]
   4f88c:	3800      	subs	r0, #0
   4f88e:	bf18      	it	ne
   4f890:	2001      	movne	r0, #1
   4f892:	e7f7      	b.n	4f884 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4f894:	2105      	movs	r1, #5
   4f896:	1d18      	adds	r0, r3, #4
   4f898:	f7ff ffdb 	bl	4f852 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4f89c:	2800      	cmp	r0, #0
   4f89e:	d1f4      	bne.n	4f88a <update_keys_check+0x26>
   4f8a0:	e7ef      	b.n	4f882 <update_keys_check+0x1e>
		return true;
   4f8a2:	2001      	movs	r0, #1
   4f8a4:	e7ee      	b.n	4f884 <update_keys_check+0x20>

0004f8a6 <remote_sec_level_reachable>:
{
   4f8a6:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   4f8a8:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   4f8ac:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   4f8ae:	2a03      	cmp	r2, #3
{
   4f8b0:	4603      	mov	r3, r0
	switch (sec) {
   4f8b2:	d014      	beq.n	4f8de <remote_sec_level_reachable+0x38>
   4f8b4:	d805      	bhi.n	4f8c2 <remote_sec_level_reachable+0x1c>
   4f8b6:	3a01      	subs	r2, #1
   4f8b8:	2a01      	cmp	r2, #1
   4f8ba:	bf94      	ite	ls
   4f8bc:	2000      	movls	r0, #0
   4f8be:	2008      	movhi	r0, #8
}
   4f8c0:	bd08      	pop	{r3, pc}
	switch (sec) {
   4f8c2:	2a04      	cmp	r2, #4
   4f8c4:	d10f      	bne.n	4f8e6 <remote_sec_level_reachable+0x40>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f8c6:	7d02      	ldrb	r2, [r0, #20]
   4f8c8:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   4f8ca:	428a      	cmp	r2, r1
   4f8cc:	bf28      	it	cs
   4f8ce:	460a      	movcs	r2, r1
   4f8d0:	2a10      	cmp	r2, #16
   4f8d2:	d10a      	bne.n	4f8ea <remote_sec_level_reachable+0x44>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4f8d4:	2105      	movs	r1, #5
   4f8d6:	3004      	adds	r0, #4
   4f8d8:	f7ff ffbb 	bl	4f852 <atomic_test_bit>
   4f8dc:	b108      	cbz	r0, 4f8e2 <remote_sec_level_reachable+0x3c>
		if (smp->method == JUST_WORKS) {
   4f8de:	7a1b      	ldrb	r3, [r3, #8]
   4f8e0:	b92b      	cbnz	r3, 4f8ee <remote_sec_level_reachable+0x48>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   4f8e2:	2003      	movs	r0, #3
   4f8e4:	e7ec      	b.n	4f8c0 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   4f8e6:	2008      	movs	r0, #8
   4f8e8:	e7ea      	b.n	4f8c0 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   4f8ea:	2006      	movs	r0, #6
   4f8ec:	e7e8      	b.n	4f8c0 <remote_sec_level_reachable+0x1a>
		return 0;
   4f8ee:	2000      	movs	r0, #0
   4f8f0:	e7e6      	b.n	4f8c0 <remote_sec_level_reachable+0x1a>

0004f8f2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f8f2:	2301      	movs	r3, #1
   4f8f4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f8f6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4f8f8:	f3bf 8f5b 	dmb	ish
   4f8fc:	e850 2f00 	ldrex	r2, [r0]
   4f900:	401a      	ands	r2, r3
   4f902:	e840 2100 	strex	r1, r2, [r0]
   4f906:	2900      	cmp	r1, #0
   4f908:	d1f8      	bne.n	4f8fc <atomic_clear_bit+0xa>
   4f90a:	f3bf 8f5b 	dmb	ish
}
   4f90e:	4770      	bx	lr

0004f910 <bt_smp_aes_cmac>:
{
   4f910:	b570      	push	{r4, r5, r6, lr}
   4f912:	b0c2      	sub	sp, #264	; 0x108
   4f914:	460d      	mov	r5, r1
   4f916:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4f918:	4601      	mov	r1, r0
   4f91a:	aa16      	add	r2, sp, #88	; 0x58
   4f91c:	4668      	mov	r0, sp
{
   4f91e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4f920:	f7fc fd35 	bl	4c38e <tc_cmac_setup>
   4f924:	b150      	cbz	r0, 4f93c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   4f926:	4632      	mov	r2, r6
   4f928:	4629      	mov	r1, r5
   4f92a:	4668      	mov	r0, sp
   4f92c:	f7fc fd5a 	bl	4c3e4 <tc_cmac_update>
   4f930:	b120      	cbz	r0, 4f93c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4f932:	4669      	mov	r1, sp
   4f934:	4620      	mov	r0, r4
   4f936:	f7fc fdc0 	bl	4c4ba <tc_cmac_final>
   4f93a:	b918      	cbnz	r0, 4f944 <bt_smp_aes_cmac+0x34>
		return -EIO;
   4f93c:	f06f 0004 	mvn.w	r0, #4
}
   4f940:	b042      	add	sp, #264	; 0x108
   4f942:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   4f944:	2000      	movs	r0, #0
   4f946:	e7fb      	b.n	4f940 <bt_smp_aes_cmac+0x30>

0004f948 <smp_keys_check>:
{
   4f948:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4f94a:	210b      	movs	r1, #11
{
   4f94c:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4f94e:	3004      	adds	r0, #4
   4f950:	f7ff ff7f 	bl	4f852 <atomic_test_bit>
   4f954:	b108      	cbz	r0, 4f95a <smp_keys_check+0x12>
		return false;
   4f956:	2000      	movs	r0, #0
}
   4f958:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   4f95a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f95e:	b983      	cbnz	r3, 4f982 <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   4f960:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   4f964:	7a21      	ldrb	r1, [r4, #8]
   4f966:	462a      	mov	r2, r5
   4f968:	2020      	movs	r0, #32
   4f96a:	f7e4 fc85 	bl	34278 <bt_keys_find>
   4f96e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f972:	b930      	cbnz	r0, 4f982 <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   4f974:	7a21      	ldrb	r1, [r4, #8]
   4f976:	462a      	mov	r2, r5
   4f978:	2004      	movs	r0, #4
   4f97a:	f7e4 fc7d 	bl	34278 <bt_keys_find>
   4f97e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   4f982:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f986:	2b00      	cmp	r3, #0
   4f988:	d0e5      	beq.n	4f956 <smp_keys_check+0xe>
   4f98a:	89da      	ldrh	r2, [r3, #14]
   4f98c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   4f990:	2a00      	cmp	r2, #0
   4f992:	d0e0      	beq.n	4f956 <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   4f994:	7aa2      	ldrb	r2, [r4, #10]
   4f996:	2a02      	cmp	r2, #2
   4f998:	d902      	bls.n	4f9a0 <smp_keys_check+0x58>
   4f99a:	7b5b      	ldrb	r3, [r3, #13]
   4f99c:	07db      	lsls	r3, r3, #31
   4f99e:	d5da      	bpl.n	4f956 <smp_keys_check+0xe>
	return true;
   4f9a0:	2001      	movs	r0, #1
   4f9a2:	e7d9      	b.n	4f958 <smp_keys_check+0x10>

0004f9a4 <smp_signing_info>:
   4f9a4:	2007      	movs	r0, #7
   4f9a6:	4770      	bx	lr

0004f9a8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4f9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4f9aa:	2300      	movs	r3, #0
   4f9ac:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4f9ae:	4604      	mov	r4, r0
   4f9b0:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4f9b2:	460a      	mov	r2, r1
   4f9b4:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   4f9b8:	2106      	movs	r1, #6
   4f9ba:	f7fe f898 	bl	4daee <bt_l2cap_send_cb>
   4f9be:	b128      	cbz	r0, 4f9cc <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   4f9c0:	4628      	mov	r0, r5
}
   4f9c2:	b003      	add	sp, #12
   4f9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4f9c8:	f7f4 bb74 	b.w	440b4 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4f9cc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4f9d0:	2300      	movs	r3, #0
   4f9d2:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   4f9d6:	b003      	add	sp, #12
   4f9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4f9dc:	f7f9 b970 	b.w	48cc0 <k_work_reschedule>

0004f9e0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   4f9e0:	b510      	push	{r4, lr}
   4f9e2:	1e43      	subs	r3, r0, #1
   4f9e4:	f100 0210 	add.w	r2, r0, #16
   4f9e8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   4f9ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   4f9ee:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4f9f2:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   4f9f4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   4f9f6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   4f9f8:	d1f7      	bne.n	4f9ea <sys_mem_swap.constprop.0+0xa>
	}
}
   4f9fa:	bd10      	pop	{r4, pc}

0004f9fc <smp_f6>:
{
   4f9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   4f9fe:	b097      	sub	sp, #92	; 0x5c
   4fa00:	4605      	mov	r5, r0
   4fa02:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   4fa04:	a805      	add	r0, sp, #20
   4fa06:	2210      	movs	r2, #16
{
   4fa08:	461c      	mov	r4, r3
   4fa0a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   4fa0c:	f7ff fef0 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4fa10:	2210      	movs	r2, #16
   4fa12:	4631      	mov	r1, r6
   4fa14:	a809      	add	r0, sp, #36	; 0x24
   4fa16:	f7ff feeb 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   4fa1a:	4621      	mov	r1, r4
   4fa1c:	2210      	movs	r2, #16
   4fa1e:	a80d      	add	r0, sp, #52	; 0x34
   4fa20:	f7ff fee6 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4fa24:	991c      	ldr	r1, [sp, #112]	; 0x70
   4fa26:	2203      	movs	r2, #3
   4fa28:	a811      	add	r0, sp, #68	; 0x44
   4fa2a:	f7ff fee1 	bl	4f7f0 <sys_memcpy_swap>
	m[51] = a1->type;
   4fa2e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4fa30:	f814 3b01 	ldrb.w	r3, [r4], #1
   4fa34:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   4fa38:	4621      	mov	r1, r4
   4fa3a:	2206      	movs	r2, #6
   4fa3c:	a812      	add	r0, sp, #72	; 0x48
   4fa3e:	f7fc fe3a 	bl	4c6b6 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4fa42:	4621      	mov	r1, r4
   4fa44:	2206      	movs	r2, #6
   4fa46:	a812      	add	r0, sp, #72	; 0x48
   4fa48:	f7ff fed2 	bl	4f7f0 <sys_memcpy_swap>
	m[58] = a2->type;
   4fa4c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   4fa4e:	f814 3b01 	ldrb.w	r3, [r4], #1
   4fa52:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   4fa56:	4621      	mov	r1, r4
   4fa58:	2206      	movs	r2, #6
   4fa5a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4fa5e:	f7fc fe2a 	bl	4c6b6 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4fa62:	4621      	mov	r1, r4
   4fa64:	2206      	movs	r2, #6
   4fa66:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4fa6a:	f7ff fec1 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   4fa6e:	2210      	movs	r2, #16
   4fa70:	4629      	mov	r1, r5
   4fa72:	a801      	add	r0, sp, #4
   4fa74:	f7ff febc 	bl	4f7f0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   4fa78:	463b      	mov	r3, r7
   4fa7a:	2241      	movs	r2, #65	; 0x41
   4fa7c:	a905      	add	r1, sp, #20
   4fa7e:	a801      	add	r0, sp, #4
   4fa80:	f7ff ff46 	bl	4f910 <bt_smp_aes_cmac>
	if (err) {
   4fa84:	4604      	mov	r4, r0
   4fa86:	b910      	cbnz	r0, 4fa8e <smp_f6+0x92>
	sys_mem_swap(check, 16);
   4fa88:	4638      	mov	r0, r7
   4fa8a:	f7ff ffa9 	bl	4f9e0 <sys_mem_swap.constprop.0>
}
   4fa8e:	4620      	mov	r0, r4
   4fa90:	b017      	add	sp, #92	; 0x5c
   4fa92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004fa94 <smp_f4>:
{
   4fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
   4fa96:	b097      	sub	sp, #92	; 0x5c
   4fa98:	4614      	mov	r4, r2
   4fa9a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   4fa9c:	2220      	movs	r2, #32
   4fa9e:	4601      	mov	r1, r0
   4faa0:	a805      	add	r0, sp, #20
{
   4faa2:	461d      	mov	r5, r3
   4faa4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   4faa6:	f7ff fea3 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   4faaa:	2220      	movs	r2, #32
   4faac:	4631      	mov	r1, r6
   4faae:	a80d      	add	r0, sp, #52	; 0x34
   4fab0:	f7ff fe9e 	bl	4f7f0 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4fab4:	4621      	mov	r1, r4
   4fab6:	2210      	movs	r2, #16
   4fab8:	a801      	add	r0, sp, #4
	m[64] = z;
   4faba:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   4fabe:	f7ff fe97 	bl	4f7f0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   4fac2:	463b      	mov	r3, r7
   4fac4:	2241      	movs	r2, #65	; 0x41
   4fac6:	a905      	add	r1, sp, #20
   4fac8:	a801      	add	r0, sp, #4
   4faca:	f7ff ff21 	bl	4f910 <bt_smp_aes_cmac>
	if (err) {
   4face:	4604      	mov	r4, r0
   4fad0:	b910      	cbnz	r0, 4fad8 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   4fad2:	4638      	mov	r0, r7
   4fad4:	f7ff ff84 	bl	4f9e0 <sys_mem_swap.constprop.0>
}
   4fad8:	4620      	mov	r0, r4
   4fada:	b017      	add	sp, #92	; 0x5c
   4fadc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004fade <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4fade:	2301      	movs	r3, #1
   4fae0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4fae2:	f3bf 8f5b 	dmb	ish
   4fae6:	e850 2f00 	ldrex	r2, [r0]
   4faea:	431a      	orrs	r2, r3
   4faec:	e840 2100 	strex	r1, r2, [r0]
   4faf0:	2900      	cmp	r1, #0
   4faf2:	d1f8      	bne.n	4fae6 <atomic_set_bit+0x8>
   4faf4:	f3bf 8f5b 	dmb	ish
}
   4faf8:	4770      	bx	lr

0004fafa <smp_keypress_notif>:
{
   4fafa:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   4fafc:	210e      	movs	r1, #14
   4fafe:	f7ff ffee 	bl	4fade <atomic_set_bit>
}
   4fb02:	2000      	movs	r0, #0
   4fb04:	bd08      	pop	{r3, pc}

0004fb06 <generate_dhkey>:
{
   4fb06:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4fb08:	2107      	movs	r1, #7
{
   4fb0a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4fb0c:	3004      	adds	r0, #4
   4fb0e:	f7ff ffe6 	bl	4fade <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   4fb12:	2008      	movs	r0, #8
   4fb14:	f7e3 fb40 	bl	33198 <smp_find>
   4fb18:	b920      	cbnz	r0, 4fb24 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   4fb1a:	4620      	mov	r0, r4
}
   4fb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   4fb20:	f7e3 bcb4 	b.w	3348c <smp_dhkey_generate>
}
   4fb24:	2000      	movs	r0, #0
   4fb26:	bd10      	pop	{r4, pc}

0004fb28 <smp_ident_info>:
{
   4fb28:	b538      	push	{r3, r4, r5, lr}
   4fb2a:	4604      	mov	r4, r0
   4fb2c:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4fb2e:	3004      	adds	r0, #4
   4fb30:	210d      	movs	r1, #13
   4fb32:	f7ff fe8e 	bl	4f852 <atomic_test_bit>
   4fb36:	b170      	cbz	r0, 4fb56 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   4fb38:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   4fb3a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4fb3e:	2002      	movs	r0, #2
   4fb40:	7a19      	ldrb	r1, [r3, #8]
   4fb42:	f103 0288 	add.w	r2, r3, #136	; 0x88
   4fb46:	f000 fd1e 	bl	50586 <bt_keys_get_type>
		if (!keys) {
   4fb4a:	b150      	cbz	r0, 4fb62 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   4fb4c:	2210      	movs	r2, #16
   4fb4e:	4629      	mov	r1, r5
   4fb50:	302a      	adds	r0, #42	; 0x2a
   4fb52:	f7fc fdb0 	bl	4c6b6 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   4fb56:	4620      	mov	r0, r4
   4fb58:	2109      	movs	r1, #9
   4fb5a:	f7ff ffc0 	bl	4fade <atomic_set_bit>
	return 0;
   4fb5e:	2000      	movs	r0, #0
}
   4fb60:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   4fb62:	2008      	movs	r0, #8
   4fb64:	e7fc      	b.n	4fb60 <smp_ident_info+0x38>

0004fb66 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4fb66:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4fb68:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4fb6a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4fb6c:	4628      	mov	r0, r5
   4fb6e:	2104      	movs	r1, #4
   4fb70:	f7ff fe6f 	bl	4f852 <atomic_test_bit>
   4fb74:	b970      	cbnz	r0, 4fb94 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   4fb76:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4fb7a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   4fb7c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4fb7e:	4608      	mov	r0, r1
   4fb80:	f7fd ffb2 	bl	4dae8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   4fb84:	4604      	mov	r4, r0
   4fb86:	b938      	cbnz	r0, 4fb98 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4fb88:	2104      	movs	r1, #4
   4fb8a:	4628      	mov	r0, r5
   4fb8c:	f7ff ffa7 	bl	4fade <atomic_set_bit>
}
   4fb90:	4620      	mov	r0, r4
   4fb92:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   4fb94:	2200      	movs	r2, #0
   4fb96:	e7f0      	b.n	4fb7a <smp_create_pdu.constprop.0+0x14>
   4fb98:	2101      	movs	r1, #1
   4fb9a:	3008      	adds	r0, #8
   4fb9c:	f000 fdb4 	bl	50708 <net_buf_simple_add>
	hdr->code = op;
   4fba0:	7006      	strb	r6, [r0, #0]
	return buf;
   4fba2:	e7f5      	b.n	4fb90 <smp_create_pdu.constprop.0+0x2a>

0004fba4 <smp_send_pairing_random>:
{
   4fba4:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4fba6:	2104      	movs	r1, #4
{
   4fba8:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4fbaa:	f7ff ffdc 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   4fbae:	4604      	mov	r4, r0
   4fbb0:	b170      	cbz	r0, 4fbd0 <smp_send_pairing_random+0x2c>
   4fbb2:	2110      	movs	r1, #16
   4fbb4:	3008      	adds	r0, #8
   4fbb6:	f000 fda7 	bl	50708 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   4fbba:	2210      	movs	r2, #16
   4fbbc:	f105 0127 	add.w	r1, r5, #39	; 0x27
   4fbc0:	f7fc fd79 	bl	4c6b6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4fbc4:	4628      	mov	r0, r5
   4fbc6:	4621      	mov	r1, r4
   4fbc8:	f7ff feee 	bl	4f9a8 <smp_send.constprop.0>
	return 0;
   4fbcc:	2000      	movs	r0, #0
}
   4fbce:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4fbd0:	2008      	movs	r0, #8
   4fbd2:	e7fc      	b.n	4fbce <smp_send_pairing_random+0x2a>

0004fbd4 <sc_smp_send_dhkey_check>:
{
   4fbd4:	b570      	push	{r4, r5, r6, lr}
   4fbd6:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4fbd8:	210d      	movs	r1, #13
{
   4fbda:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4fbdc:	f7ff ffc3 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!buf) {
   4fbe0:	4604      	mov	r4, r0
   4fbe2:	b168      	cbz	r0, 4fc00 <sc_smp_send_dhkey_check+0x2c>
   4fbe4:	2110      	movs	r1, #16
   4fbe6:	3008      	adds	r0, #8
   4fbe8:	f000 fd8e 	bl	50708 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   4fbec:	2210      	movs	r2, #16
   4fbee:	4631      	mov	r1, r6
   4fbf0:	f7fc fd61 	bl	4c6b6 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   4fbf4:	4628      	mov	r0, r5
   4fbf6:	4621      	mov	r1, r4
   4fbf8:	f7ff fed6 	bl	4f9a8 <smp_send.constprop.0>
	return 0;
   4fbfc:	2000      	movs	r0, #0
}
   4fbfe:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4fc00:	2008      	movs	r0, #8
   4fc02:	e7fc      	b.n	4fbfe <sc_smp_send_dhkey_check+0x2a>

0004fc04 <compute_and_send_central_dhcheck>:
{
   4fc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4fc08:	4604      	mov	r4, r0
   4fc0a:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   4fc0c:	2210      	movs	r2, #16
   4fc0e:	2100      	movs	r1, #0
   4fc10:	a808      	add	r0, sp, #32
   4fc12:	f7fc fd5b 	bl	4c6cc <memset>
	switch (smp->method) {
   4fc16:	7a23      	ldrb	r3, [r4, #8]
   4fc18:	2b05      	cmp	r3, #5
   4fc1a:	d821      	bhi.n	4fc60 <compute_and_send_central_dhcheck+0x5c>
   4fc1c:	e8df f003 	tbb	[pc, r3]
   4fc20:	09030309 	.word	0x09030309
   4fc24:	2220      	.short	0x2220
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4fc26:	2204      	movs	r2, #4
   4fc28:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4fc2c:	a808      	add	r0, sp, #32
   4fc2e:	f7fc fd42 	bl	4c6b6 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4fc32:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4fc36:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4fc3a:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4fc3e:	e9cd 6201 	strd	r6, r2, [sp, #4]
   4fc42:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4fc46:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4fc4a:	f104 0837 	add.w	r8, r4, #55	; 0x37
   4fc4e:	9200      	str	r2, [sp, #0]
   4fc50:	338f      	adds	r3, #143	; 0x8f
   4fc52:	4642      	mov	r2, r8
   4fc54:	4639      	mov	r1, r7
   4fc56:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4fc5a:	f7e3 fb03 	bl	33264 <smp_f5>
   4fc5e:	b138      	cbz	r0, 4fc70 <compute_and_send_central_dhcheck+0x6c>
	switch (smp->method) {
   4fc60:	2008      	movs	r0, #8
   4fc62:	e020      	b.n	4fca6 <compute_and_send_central_dhcheck+0xa2>
		if (smp->oobd_remote) {
   4fc64:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4fc68:	2900      	cmp	r1, #0
   4fc6a:	d0e2      	beq.n	4fc32 <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4fc6c:	2210      	movs	r2, #16
   4fc6e:	e7dd      	b.n	4fc2c <compute_and_send_central_dhcheck+0x28>
		   &smp->chan.chan.conn->le.init_addr,
   4fc70:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   4fc74:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4fc78:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   4fc7a:	ad04      	add	r5, sp, #16
   4fc7c:	9301      	str	r3, [sp, #4]
   4fc7e:	f104 030a 	add.w	r3, r4, #10
   4fc82:	9202      	str	r2, [sp, #8]
   4fc84:	9300      	str	r3, [sp, #0]
   4fc86:	9503      	str	r5, [sp, #12]
   4fc88:	ab08      	add	r3, sp, #32
   4fc8a:	4642      	mov	r2, r8
   4fc8c:	4639      	mov	r1, r7
   4fc8e:	4630      	mov	r0, r6
   4fc90:	f7ff feb4 	bl	4f9fc <smp_f6>
   4fc94:	2800      	cmp	r0, #0
   4fc96:	d1e3      	bne.n	4fc60 <compute_and_send_central_dhcheck+0x5c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   4fc98:	210d      	movs	r1, #13
   4fc9a:	4620      	mov	r0, r4
   4fc9c:	f7ff ff1f 	bl	4fade <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   4fca0:	4629      	mov	r1, r5
   4fca2:	f7ff ff97 	bl	4fbd4 <sc_smp_send_dhkey_check>
}
   4fca6:	b00c      	add	sp, #48	; 0x30
   4fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004fcac <compute_and_check_and_send_periph_dhcheck>:
{
   4fcac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4fcb0:	4604      	mov	r4, r0
   4fcb2:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   4fcb4:	2210      	movs	r2, #16
   4fcb6:	2100      	movs	r1, #0
   4fcb8:	a80c      	add	r0, sp, #48	; 0x30
   4fcba:	f7fc fd07 	bl	4c6cc <memset>
	switch (smp->method) {
   4fcbe:	7a23      	ldrb	r3, [r4, #8]
   4fcc0:	2b05      	cmp	r3, #5
   4fcc2:	d821      	bhi.n	4fd08 <compute_and_check_and_send_periph_dhcheck+0x5c>
   4fcc4:	e8df f003 	tbb	[pc, r3]
   4fcc8:	09030309 	.word	0x09030309
   4fccc:	2220      	.short	0x2220
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4fcce:	2204      	movs	r2, #4
   4fcd0:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4fcd4:	a80c      	add	r0, sp, #48	; 0x30
   4fcd6:	f7fc fcee 	bl	4c6b6 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4fcda:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4fcde:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4fce2:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4fce6:	e9cd 5201 	strd	r5, r2, [sp, #4]
   4fcea:	f104 0637 	add.w	r6, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4fcee:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4fcf2:	f104 0727 	add.w	r7, r4, #39	; 0x27
   4fcf6:	9200      	str	r2, [sp, #0]
   4fcf8:	338f      	adds	r3, #143	; 0x8f
   4fcfa:	463a      	mov	r2, r7
   4fcfc:	4631      	mov	r1, r6
   4fcfe:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4fd02:	f7e3 faaf 	bl	33264 <smp_f5>
   4fd06:	b138      	cbz	r0, 4fd18 <compute_and_check_and_send_periph_dhcheck+0x6c>
	switch (smp->method) {
   4fd08:	2508      	movs	r5, #8
   4fd0a:	e04c      	b.n	4fda6 <compute_and_check_and_send_periph_dhcheck+0xfa>
		if (smp->oobd_remote) {
   4fd0c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4fd10:	2900      	cmp	r1, #0
   4fd12:	d0e2      	beq.n	4fcda <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4fd14:	2210      	movs	r2, #16
   4fd16:	e7dd      	b.n	4fcd4 <compute_and_check_and_send_periph_dhcheck+0x28>
		   &smp->chan.chan.conn->le.resp_addr,
   4fd18:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
   4fd1c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   4fd20:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   4fd22:	f10d 0820 	add.w	r8, sp, #32
   4fd26:	9301      	str	r3, [sp, #4]
   4fd28:	f104 0311 	add.w	r3, r4, #17
   4fd2c:	9202      	str	r2, [sp, #8]
   4fd2e:	9300      	str	r3, [sp, #0]
   4fd30:	f8cd 800c 	str.w	r8, [sp, #12]
   4fd34:	ab0c      	add	r3, sp, #48	; 0x30
   4fd36:	4632      	mov	r2, r6
   4fd38:	4639      	mov	r1, r7
   4fd3a:	4628      	mov	r0, r5
   4fd3c:	f7ff fe5e 	bl	4f9fc <smp_f6>
   4fd40:	2800      	cmp	r0, #0
   4fd42:	d1e1      	bne.n	4fd08 <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   4fd44:	7a23      	ldrb	r3, [r4, #8]
   4fd46:	2b05      	cmp	r3, #5
   4fd48:	d106      	bne.n	4fd58 <compute_and_check_and_send_periph_dhcheck+0xac>
		if (smp->oobd_local) {
   4fd4a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4fd4e:	2210      	movs	r2, #16
   4fd50:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   4fd52:	b361      	cbz	r1, 4fdae <compute_and_check_and_send_periph_dhcheck+0x102>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4fd54:	f7fc fcaf 	bl	4c6b6 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4fd58:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   4fd5c:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4fd60:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   4fd62:	f10d 0910 	add.w	r9, sp, #16
   4fd66:	9301      	str	r3, [sp, #4]
   4fd68:	f104 030a 	add.w	r3, r4, #10
   4fd6c:	9202      	str	r2, [sp, #8]
   4fd6e:	9300      	str	r3, [sp, #0]
   4fd70:	f8cd 900c 	str.w	r9, [sp, #12]
   4fd74:	ab0c      	add	r3, sp, #48	; 0x30
   4fd76:	463a      	mov	r2, r7
   4fd78:	4631      	mov	r1, r6
   4fd7a:	4628      	mov	r0, r5
   4fd7c:	f7ff fe3e 	bl	4f9fc <smp_f6>
   4fd80:	2800      	cmp	r0, #0
   4fd82:	d1c1      	bne.n	4fd08 <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   4fd84:	2210      	movs	r2, #16
   4fd86:	4649      	mov	r1, r9
   4fd88:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4fd8c:	f7fc fc82 	bl	4c694 <memcmp>
   4fd90:	b980      	cbnz	r0, 4fdb4 <compute_and_check_and_send_periph_dhcheck+0x108>
	err = sc_smp_send_dhkey_check(smp, e);
   4fd92:	4641      	mov	r1, r8
   4fd94:	4620      	mov	r0, r4
   4fd96:	f7ff ff1d 	bl	4fbd4 <sc_smp_send_dhkey_check>
	if (err) {
   4fd9a:	4605      	mov	r5, r0
   4fd9c:	b918      	cbnz	r0, 4fda6 <compute_and_check_and_send_periph_dhcheck+0xfa>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4fd9e:	2101      	movs	r1, #1
   4fda0:	1d20      	adds	r0, r4, #4
   4fda2:	f7ff fe9c 	bl	4fade <atomic_set_bit>
}
   4fda6:	4628      	mov	r0, r5
   4fda8:	b011      	add	sp, #68	; 0x44
   4fdaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   4fdae:	f7fc fc8d 	bl	4c6cc <memset>
   4fdb2:	e7d1      	b.n	4fd58 <compute_and_check_and_send_periph_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4fdb4:	250b      	movs	r5, #11
   4fdb6:	e7f6      	b.n	4fda6 <compute_and_check_and_send_periph_dhcheck+0xfa>

0004fdb8 <smp_dhkey_check>:
{
   4fdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4fdba:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4fdbe:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4fdc0:	78dd      	ldrb	r5, [r3, #3]
{
   4fdc2:	b091      	sub	sp, #68	; 0x44
   4fdc4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4fdc6:	2d00      	cmp	r5, #0
   4fdc8:	d15b      	bne.n	4fe82 <smp_dhkey_check+0xca>
		(void)memset(r, 0, sizeof(r));
   4fdca:	2210      	movs	r2, #16
   4fdcc:	4629      	mov	r1, r5
   4fdce:	a80c      	add	r0, sp, #48	; 0x30
   4fdd0:	f7fc fc7c 	bl	4c6cc <memset>
		switch (smp->method) {
   4fdd4:	7a23      	ldrb	r3, [r4, #8]
   4fdd6:	2b05      	cmp	r3, #5
   4fdd8:	d820      	bhi.n	4fe1c <smp_dhkey_check+0x64>
   4fdda:	e8df f003 	tbb	[pc, r3]
   4fdde:	0309      	.short	0x0309
   4fde0:	231f0903 	.word	0x231f0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4fde4:	2204      	movs	r2, #4
   4fde6:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4fdea:	a80c      	add	r0, sp, #48	; 0x30
   4fdec:	f7fc fc63 	bl	4c6b6 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   4fdf0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   4fdf4:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   4fdf8:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   4fdfa:	ae08      	add	r6, sp, #32
   4fdfc:	9301      	str	r3, [sp, #4]
   4fdfe:	f104 0311 	add.w	r3, r4, #17
   4fe02:	9202      	str	r2, [sp, #8]
   4fe04:	9300      	str	r3, [sp, #0]
   4fe06:	9603      	str	r6, [sp, #12]
   4fe08:	ab0c      	add	r3, sp, #48	; 0x30
   4fe0a:	f104 0227 	add.w	r2, r4, #39	; 0x27
   4fe0e:	f104 0137 	add.w	r1, r4, #55	; 0x37
   4fe12:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   4fe16:	f7ff fdf1 	bl	4f9fc <smp_f6>
   4fe1a:	b148      	cbz	r0, 4fe30 <smp_dhkey_check+0x78>
		switch (smp->method) {
   4fe1c:	2508      	movs	r5, #8
}
   4fe1e:	4628      	mov	r0, r5
   4fe20:	b011      	add	sp, #68	; 0x44
   4fe22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   4fe24:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   4fe28:	2900      	cmp	r1, #0
   4fe2a:	d0e1      	beq.n	4fdf0 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4fe2c:	2210      	movs	r2, #16
   4fe2e:	e7dc      	b.n	4fdea <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   4fe30:	4630      	mov	r0, r6
   4fe32:	2210      	movs	r2, #16
   4fe34:	4639      	mov	r1, r7
   4fe36:	f7fc fc2d 	bl	4c694 <memcmp>
   4fe3a:	4606      	mov	r6, r0
   4fe3c:	b9f8      	cbnz	r0, 4fe7e <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   4fe3e:	7d23      	ldrb	r3, [r4, #20]
   4fe40:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   4fe42:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   4fe44:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4fe46:	f04f 0202 	mov.w	r2, #2
   4fe4a:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   4fe4c:	bf28      	it	cs
   4fe4e:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4fe50:	f7fc fc3c 	bl	4c6cc <memset>
		(void)memset(rand, 0, sizeof(rand));
   4fe54:	2208      	movs	r2, #8
   4fe56:	4631      	mov	r1, r6
   4fe58:	a806      	add	r0, sp, #24
   4fe5a:	f7fc fc37 	bl	4c6cc <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   4fe5e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   4fe62:	9700      	str	r7, [sp, #0]
   4fe64:	f104 0347 	add.w	r3, r4, #71	; 0x47
   4fe68:	aa05      	add	r2, sp, #20
   4fe6a:	a906      	add	r1, sp, #24
   4fe6c:	f7fd fca6 	bl	4d7bc <bt_conn_le_start_encryption>
   4fe70:	2800      	cmp	r0, #0
   4fe72:	dbd3      	blt.n	4fe1c <smp_dhkey_check+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4fe74:	2101      	movs	r1, #1
   4fe76:	1d20      	adds	r0, r4, #4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4fe78:	f7ff fe31 	bl	4fade <atomic_set_bit>
			return 0;
   4fe7c:	e7cf      	b.n	4fe1e <smp_dhkey_check+0x66>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4fe7e:	250b      	movs	r5, #11
   4fe80:	e7cd      	b.n	4fe1e <smp_dhkey_check+0x66>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4fe82:	2d01      	cmp	r5, #1
   4fe84:	d114      	bne.n	4feb0 <smp_dhkey_check+0xf8>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4fe86:	1d06      	adds	r6, r0, #4
   4fe88:	2110      	movs	r1, #16
   4fe8a:	4630      	mov	r0, r6
   4fe8c:	f7ff fd31 	bl	4f8f2 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   4fe90:	4639      	mov	r1, r7
   4fe92:	2210      	movs	r2, #16
   4fe94:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4fe98:	f7fc fc0d 	bl	4c6b6 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   4fe9c:	2107      	movs	r1, #7
   4fe9e:	4630      	mov	r0, r6
   4fea0:	f7ff fcd7 	bl	4f852 <atomic_test_bit>
   4fea4:	4605      	mov	r5, r0
   4fea6:	b128      	cbz	r0, 4feb4 <smp_dhkey_check+0xfc>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4fea8:	2109      	movs	r1, #9
   4feaa:	4630      	mov	r0, r6
   4feac:	f7ff fe17 	bl	4fade <atomic_set_bit>
	return 0;
   4feb0:	2500      	movs	r5, #0
   4feb2:	e7b4      	b.n	4fe1e <smp_dhkey_check+0x66>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4feb4:	210a      	movs	r1, #10
   4feb6:	4630      	mov	r0, r6
   4feb8:	f7ff fccb 	bl	4f852 <atomic_test_bit>
   4febc:	b110      	cbz	r0, 4fec4 <smp_dhkey_check+0x10c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4febe:	2109      	movs	r1, #9
   4fec0:	4630      	mov	r0, r6
   4fec2:	e7d9      	b.n	4fe78 <smp_dhkey_check+0xc0>
		return compute_and_check_and_send_periph_dhcheck(smp);
   4fec4:	4620      	mov	r0, r4
}
   4fec6:	b011      	add	sp, #68	; 0x44
   4fec8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   4fecc:	f7ff beee 	b.w	4fcac <compute_and_check_and_send_periph_dhcheck>

0004fed0 <smp_pairing_confirm>:
{
   4fed0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   4fed2:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4fed4:	1d05      	adds	r5, r0, #4
{
   4fed6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4fed8:	210b      	movs	r1, #11
   4feda:	4628      	mov	r0, r5
   4fedc:	f7ff fd09 	bl	4f8f2 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   4fee0:	2210      	movs	r2, #16
   4fee2:	4631      	mov	r1, r6
   4fee4:	f104 0017 	add.w	r0, r4, #23
   4fee8:	f7fc fbe5 	bl	4c6b6 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4feec:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4fef0:	78db      	ldrb	r3, [r3, #3]
   4fef2:	b93b      	cbnz	r3, 4ff04 <smp_pairing_confirm+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4fef4:	4620      	mov	r0, r4
   4fef6:	2104      	movs	r1, #4
   4fef8:	f7ff fdf1 	bl	4fade <atomic_set_bit>
}
   4fefc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   4ff00:	f7ff be50 	b.w	4fba4 <smp_send_pairing_random>
	switch (smp->method) {
   4ff04:	7a23      	ldrb	r3, [r4, #8]
   4ff06:	2b01      	cmp	r3, #1
   4ff08:	d009      	beq.n	4ff1e <smp_pairing_confirm+0x4e>
   4ff0a:	2b02      	cmp	r3, #2
   4ff0c:	d113      	bne.n	4ff36 <smp_pairing_confirm+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4ff0e:	4620      	mov	r0, r4
   4ff10:	2104      	movs	r1, #4
   4ff12:	f7ff fde4 	bl	4fade <atomic_set_bit>
}
   4ff16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   4ff1a:	f7e3 bbd7 	b.w	336cc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4ff1e:	210a      	movs	r1, #10
   4ff20:	4628      	mov	r0, r5
   4ff22:	f7ff fc96 	bl	4f852 <atomic_test_bit>
   4ff26:	2800      	cmp	r0, #0
   4ff28:	d0f1      	beq.n	4ff0e <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   4ff2a:	4628      	mov	r0, r5
   4ff2c:	2100      	movs	r1, #0
   4ff2e:	f7ff fdd6 	bl	4fade <atomic_set_bit>
			return 0;
   4ff32:	2000      	movs	r0, #0
}
   4ff34:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   4ff36:	2008      	movs	r0, #8
   4ff38:	e7fc      	b.n	4ff34 <smp_pairing_confirm+0x64>

0004ff3a <smp_central_ident>:
   4ff3a:	2007      	movs	r0, #7
   4ff3c:	4770      	bx	lr

0004ff3e <atomic_test_and_clear_bit>:
{
   4ff3e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ff40:	2301      	movs	r3, #1
   4ff42:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ff46:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4ff48:	f3bf 8f5b 	dmb	ish
   4ff4c:	e850 3f00 	ldrex	r3, [r0]
   4ff50:	ea03 0c02 	and.w	ip, r3, r2
   4ff54:	e840 ce00 	strex	lr, ip, [r0]
   4ff58:	f1be 0f00 	cmp.w	lr, #0
   4ff5c:	d1f6      	bne.n	4ff4c <atomic_test_and_clear_bit+0xe>
   4ff5e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4ff62:	420b      	tst	r3, r1
}
   4ff64:	bf14      	ite	ne
   4ff66:	2001      	movne	r0, #1
   4ff68:	2000      	moveq	r0, #0
   4ff6a:	f85d fb04 	ldr.w	pc, [sp], #4

0004ff6e <smp_reset>:
{
   4ff6e:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4ff70:	1d03      	adds	r3, r0, #4
   4ff72:	4604      	mov	r4, r0
   4ff74:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   4ff76:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   4ff7a:	f3bf 8f5b 	dmb	ish
   4ff7e:	e853 2f00 	ldrex	r2, [r3]
   4ff82:	e843 5100 	strex	r1, r5, [r3]
   4ff86:	2900      	cmp	r1, #0
   4ff88:	d1f9      	bne.n	4ff7e <smp_reset+0x10>
   4ff8a:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   4ff8e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   4ff92:	f001 fd06 	bl	519a2 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   4ff96:	7225      	strb	r5, [r4, #8]
   4ff98:	f3bf 8f5b 	dmb	ish
   4ff9c:	e854 3f00 	ldrex	r3, [r4]
   4ffa0:	e844 5200 	strex	r2, r5, [r4]
   4ffa4:	2a00      	cmp	r2, #0
   4ffa6:	d1f9      	bne.n	4ff9c <smp_reset+0x2e>
   4ffa8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4ffac:	78f3      	ldrb	r3, [r6, #3]
   4ffae:	b92b      	cbnz	r3, 4ffbc <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4ffb0:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4ffb2:	4620      	mov	r0, r4
}
   4ffb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4ffb8:	f7ff bd91 	b.w	4fade <atomic_set_bit>
   4ffbc:	2101      	movs	r1, #1
   4ffbe:	e7f8      	b.n	4ffb2 <smp_reset+0x44>

0004ffc0 <bt_smp_request_ltk>:
{
   4ffc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ffc4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   4ffc8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   4ffcc:	4604      	mov	r4, r0
   4ffce:	4693      	mov	fp, r2
   4ffd0:	469a      	mov	sl, r3
	smp = smp_chan_get(conn);
   4ffd2:	f7ff fc37 	bl	4f844 <smp_chan_get>
	if (!smp) {
   4ffd6:	4605      	mov	r5, r0
   4ffd8:	2800      	cmp	r0, #0
   4ffda:	d070      	beq.n	500be <bt_smp_request_ltk+0xfe>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4ffdc:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   4ffde:	f1b9 0f00 	cmp.w	r9, #0
   4ffe2:	d128      	bne.n	50036 <bt_smp_request_ltk+0x76>
   4ffe4:	ea5b 030a 	orrs.w	r3, fp, sl
   4ffe8:	d125      	bne.n	50036 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4ffea:	2103      	movs	r1, #3
   4ffec:	4638      	mov	r0, r7
   4ffee:	f7ff fc30 	bl	4f852 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   4fff2:	b300      	cbz	r0, 50036 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4fff4:	2101      	movs	r1, #1
   4fff6:	4638      	mov	r0, r7
   4fff8:	f7ff fc2b 	bl	4f852 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4fffc:	4606      	mov	r6, r0
   4fffe:	b1d0      	cbz	r0, 50036 <bt_smp_request_ltk+0x76>
	return MIN(req->max_key_size, rsp->max_key_size);
   50000:	7d2c      	ldrb	r4, [r5, #20]
   50002:	7b6b      	ldrb	r3, [r5, #13]
   50004:	429c      	cmp	r4, r3
   50006:	bf28      	it	cs
   50008:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   5000a:	4622      	mov	r2, r4
   5000c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   50010:	4640      	mov	r0, r8
   50012:	f7fc fb50 	bl	4c6b6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   50016:	2c0f      	cmp	r4, #15
   50018:	d806      	bhi.n	50028 <bt_smp_request_ltk+0x68>
			(void)memset(ltk + enc_size, 0,
   5001a:	f1c4 0210 	rsb	r2, r4, #16
   5001e:	4649      	mov	r1, r9
   50020:	eb08 0004 	add.w	r0, r8, r4
   50024:	f7fc fb52 	bl	4c6cc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   50028:	2101      	movs	r1, #1
   5002a:	4638      	mov	r0, r7
   5002c:	f7ff fd57 	bl	4fade <atomic_set_bit>
}
   50030:	4630      	mov	r0, r6
   50032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   50036:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   5003a:	b983      	cbnz	r3, 5005e <bt_smp_request_ltk+0x9e>
					     &conn->le.dst);
   5003c:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   50040:	7a21      	ldrb	r1, [r4, #8]
   50042:	4632      	mov	r2, r6
   50044:	2020      	movs	r0, #32
   50046:	f7e4 f917 	bl	34278 <bt_keys_find>
   5004a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   5004e:	b930      	cbnz	r0, 5005e <bt_smp_request_ltk+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   50050:	7a21      	ldrb	r1, [r4, #8]
   50052:	4632      	mov	r2, r6
   50054:	2001      	movs	r0, #1
   50056:	f7e4 f90f 	bl	34278 <bt_keys_find>
   5005a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   5005e:	f1b9 0f00 	cmp.w	r9, #0
   50062:	d11d      	bne.n	500a0 <bt_smp_request_ltk+0xe0>
   50064:	ea5b 030a 	orrs.w	r3, fp, sl
   50068:	d11a      	bne.n	500a0 <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   5006a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   5006e:	b1b9      	cbz	r1, 500a0 <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   50070:	89cb      	ldrh	r3, [r1, #14]
   50072:	069b      	lsls	r3, r3, #26
   50074:	d514      	bpl.n	500a0 <bt_smp_request_ltk+0xe0>
		enc_size = conn->le.keys->enc_size;
   50076:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   50078:	4640      	mov	r0, r8
   5007a:	4622      	mov	r2, r4
   5007c:	311a      	adds	r1, #26
   5007e:	f7fc fb1a 	bl	4c6b6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   50082:	2c0f      	cmp	r4, #15
   50084:	d806      	bhi.n	50094 <bt_smp_request_ltk+0xd4>
			(void)memset(ltk + enc_size, 0,
   50086:	f1c4 0210 	rsb	r2, r4, #16
   5008a:	4649      	mov	r1, r9
   5008c:	eb08 0004 	add.w	r0, r8, r4
   50090:	f7fc fb1c 	bl	4c6cc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   50094:	2101      	movs	r1, #1
   50096:	4638      	mov	r0, r7
   50098:	f7ff fd21 	bl	4fade <atomic_set_bit>
		return true;
   5009c:	2601      	movs	r6, #1
   5009e:	e7c7      	b.n	50030 <bt_smp_request_ltk+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   500a0:	210f      	movs	r1, #15
   500a2:	4638      	mov	r0, r7
   500a4:	f7ff fbd5 	bl	4f852 <atomic_test_bit>
   500a8:	b120      	cbz	r0, 500b4 <bt_smp_request_ltk+0xf4>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   500aa:	2202      	movs	r2, #2
   500ac:	2106      	movs	r1, #6
   500ae:	4620      	mov	r0, r4
   500b0:	f7e0 fa34 	bl	3051c <bt_conn_security_changed>
	smp_reset(smp);
   500b4:	4628      	mov	r0, r5
   500b6:	f7ff ff5a 	bl	4ff6e <smp_reset>
	return false;
   500ba:	2600      	movs	r6, #0
   500bc:	e7b8      	b.n	50030 <bt_smp_request_ltk+0x70>
		return false;
   500be:	4606      	mov	r6, r0
   500c0:	e7b6      	b.n	50030 <bt_smp_request_ltk+0x70>

000500c2 <bt_smp_sign>:
   500c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   500c6:	4770      	bx	lr

000500c8 <bt_smp_start_security>:
{
   500c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   500cc:	78c6      	ldrb	r6, [r0, #3]
{
   500ce:	4604      	mov	r4, r0
	switch (conn->role) {
   500d0:	b126      	cbz	r6, 500dc <bt_smp_start_security+0x14>
   500d2:	2e01      	cmp	r6, #1
   500d4:	d03d      	beq.n	50152 <bt_smp_start_security+0x8a>
		return -EINVAL;
   500d6:	f06f 0415 	mvn.w	r4, #21
   500da:	e005      	b.n	500e8 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   500dc:	f7ff fbb2 	bl	4f844 <smp_chan_get>
		if (!smp) {
   500e0:	4605      	mov	r5, r0
   500e2:	b928      	cbnz	r0, 500f0 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   500e4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
   500e8:	4620      	mov	r0, r4
   500ea:	b003      	add	sp, #12
   500ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   500f0:	1d06      	adds	r6, r0, #4
   500f2:	2103      	movs	r1, #3
   500f4:	4630      	mov	r0, r6
   500f6:	f7ff fbac 	bl	4f852 <atomic_test_bit>
   500fa:	b110      	cbz	r0, 50102 <bt_smp_start_security+0x3a>
			return -EBUSY;
   500fc:	f06f 040f 	mvn.w	r4, #15
   50100:	e7f2      	b.n	500e8 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   50102:	2101      	movs	r1, #1
   50104:	4630      	mov	r0, r6
   50106:	f7ff fba4 	bl	4f852 <atomic_test_bit>
   5010a:	2800      	cmp	r0, #0
   5010c:	d1f6      	bne.n	500fc <bt_smp_start_security+0x34>
		if (!smp_keys_check(conn)) {
   5010e:	4620      	mov	r0, r4
   50110:	f7ff fc1a 	bl	4f948 <smp_keys_check>
   50114:	b928      	cbnz	r0, 50122 <bt_smp_start_security+0x5a>
			return smp_send_pairing_req(conn);
   50116:	4620      	mov	r0, r4
}
   50118:	b003      	add	sp, #12
   5011a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   5011e:	f7e3 b9cb 	b.w	334b8 <smp_send_pairing_req>
						  conn->le.keys->ltk.rand,
   50122:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   50126:	7b0b      	ldrb	r3, [r1, #12]
   50128:	9300      	str	r3, [sp, #0]
   5012a:	f101 0218 	add.w	r2, r1, #24
   5012e:	f101 031a 	add.w	r3, r1, #26
   50132:	4620      	mov	r0, r4
   50134:	3110      	adds	r1, #16
   50136:	f7fd fb41 	bl	4d7bc <bt_conn_le_start_encryption>
		if (err) {
   5013a:	4604      	mov	r4, r0
   5013c:	2800      	cmp	r0, #0
   5013e:	d1d3      	bne.n	500e8 <bt_smp_start_security+0x20>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   50140:	210b      	movs	r1, #11
   50142:	4628      	mov	r0, r5
   50144:	f7ff fccb 	bl	4fade <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   50148:	2101      	movs	r1, #1
   5014a:	4630      	mov	r0, r6
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   5014c:	f7ff fcc7 	bl	4fade <atomic_set_bit>
	return 0;
   50150:	e7ca      	b.n	500e8 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   50152:	f7ff fb77 	bl	4f844 <smp_chan_get>
	if (!smp) {
   50156:	4605      	mov	r5, r0
   50158:	2800      	cmp	r0, #0
   5015a:	d0c3      	beq.n	500e4 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   5015c:	f100 0804 	add.w	r8, r0, #4
   50160:	2104      	movs	r1, #4
   50162:	4640      	mov	r0, r8
   50164:	f7ff fb75 	bl	4f852 <atomic_test_bit>
   50168:	2800      	cmp	r0, #0
   5016a:	d150      	bne.n	5020e <bt_smp_start_security+0x146>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   5016c:	2103      	movs	r1, #3
   5016e:	4640      	mov	r0, r8
   50170:	f7ff fb6f 	bl	4f852 <atomic_test_bit>
   50174:	2800      	cmp	r0, #0
   50176:	d1c1      	bne.n	500fc <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   50178:	4631      	mov	r1, r6
   5017a:	4640      	mov	r0, r8
   5017c:	f7ff fb69 	bl	4f852 <atomic_test_bit>
   50180:	2800      	cmp	r0, #0
   50182:	d1bb      	bne.n	500fc <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   50184:	7aa0      	ldrb	r0, [r4, #10]
   50186:	f7e3 f909 	bl	3339c <sec_level_reachable.isra.0>
   5018a:	b168      	cbz	r0, 501a8 <bt_smp_start_security+0xe0>
	if (!conn->le.keys) {
   5018c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   50190:	b983      	cbnz	r3, 501b4 <bt_smp_start_security+0xec>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   50192:	7a20      	ldrb	r0, [r4, #8]
   50194:	f104 0188 	add.w	r1, r4, #136	; 0x88
   50198:	f7e3 ffea 	bl	34170 <bt_keys_get_addr>
   5019c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   501a0:	b940      	cbnz	r0, 501b4 <bt_smp_start_security+0xec>
			return -ENOMEM;
   501a2:	f06f 040b 	mvn.w	r4, #11
   501a6:	e79f      	b.n	500e8 <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   501a8:	4620      	mov	r0, r4
   501aa:	f7ff fbcd 	bl	4f948 <smp_keys_check>
   501ae:	2800      	cmp	r0, #0
   501b0:	d1ec      	bne.n	5018c <bt_smp_start_security+0xc4>
   501b2:	e790      	b.n	500d6 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   501b4:	4628      	mov	r0, r5
   501b6:	f7e3 f94d 	bl	33454 <smp_init>
   501ba:	4607      	mov	r7, r0
   501bc:	b110      	cbz	r0, 501c4 <bt_smp_start_security+0xfc>
		return -ENOBUFS;
   501be:	f06f 0468 	mvn.w	r4, #104	; 0x68
   501c2:	e791      	b.n	500e8 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   501c4:	210b      	movs	r1, #11
   501c6:	4628      	mov	r0, r5
   501c8:	f7ff fccd 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   501cc:	4606      	mov	r6, r0
   501ce:	2800      	cmp	r0, #0
   501d0:	d0f5      	beq.n	501be <bt_smp_start_security+0xf6>
   501d2:	2101      	movs	r1, #1
   501d4:	3008      	adds	r0, #8
   501d6:	f000 fa97 	bl	50708 <net_buf_simple_add>
   501da:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   501dc:	2009      	movs	r0, #9
   501de:	f7e3 f823 	bl	33228 <get_auth.constprop.0>
   501e2:	463b      	mov	r3, r7
   501e4:	f889 0000 	strb.w	r0, [r9]
   501e8:	4632      	mov	r2, r6
   501ea:	4620      	mov	r0, r4
   501ec:	9700      	str	r7, [sp, #0]
   501ee:	2106      	movs	r1, #6
   501f0:	f7fd fc7d 	bl	4daee <bt_l2cap_send_cb>
	if (err) {
   501f4:	4604      	mov	r4, r0
   501f6:	b118      	cbz	r0, 50200 <bt_smp_start_security+0x138>
		net_buf_unref(req_buf);
   501f8:	4630      	mov	r0, r6
   501fa:	f7f3 ff5b 	bl	440b4 <net_buf_unref>
		return err;
   501fe:	e773      	b.n	500e8 <bt_smp_start_security+0x20>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   50200:	210f      	movs	r1, #15
   50202:	4640      	mov	r0, r8
   50204:	f7ff fc6b 	bl	4fade <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   50208:	2101      	movs	r1, #1
   5020a:	4628      	mov	r0, r5
   5020c:	e79e      	b.n	5014c <bt_smp_start_security+0x84>
		return -EIO;
   5020e:	f06f 0404 	mvn.w	r4, #4
   50212:	e769      	b.n	500e8 <bt_smp_start_security+0x20>

00050214 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   50214:	1d03      	adds	r3, r0, #4
{
   50216:	b573      	push	{r0, r1, r4, r5, r6, lr}
   50218:	4605      	mov	r5, r0
   5021a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   5021c:	4618      	mov	r0, r3
   5021e:	2103      	movs	r1, #3
   50220:	f7ff fb17 	bl	4f852 <atomic_test_bit>
   50224:	b1f0      	cbz	r0, 50264 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   50226:	4631      	mov	r1, r6
   50228:	4628      	mov	r0, r5
   5022a:	f7e3 fe15 	bl	33e58 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   5022e:	2105      	movs	r1, #5
   50230:	4628      	mov	r0, r5
   50232:	f7ff fc98 	bl	4fb66 <smp_create_pdu.constprop.0>
	if (!buf) {
   50236:	4604      	mov	r4, r0
   50238:	b308      	cbz	r0, 5027e <smp_error+0x6a>
   5023a:	2101      	movs	r1, #1
   5023c:	3008      	adds	r0, #8
   5023e:	f000 fa63 	bl	50708 <net_buf_simple_add>
	rsp->reason = reason;
   50242:	7006      	strb	r6, [r0, #0]
   50244:	2600      	movs	r6, #0
   50246:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   5024a:	9600      	str	r6, [sp, #0]
   5024c:	4633      	mov	r3, r6
   5024e:	4622      	mov	r2, r4
   50250:	2106      	movs	r1, #6
   50252:	f7fd fc4c 	bl	4daee <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   50256:	b118      	cbz	r0, 50260 <smp_error+0x4c>
		net_buf_unref(buf);
   50258:	4620      	mov	r0, r4
   5025a:	f7f3 ff2b 	bl	440b4 <net_buf_unref>
	return 0;
   5025e:	4630      	mov	r0, r6
}
   50260:	b002      	add	sp, #8
   50262:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   50264:	2101      	movs	r1, #1
   50266:	4618      	mov	r0, r3
   50268:	f7ff faf3 	bl	4f852 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   5026c:	2800      	cmp	r0, #0
   5026e:	d1da      	bne.n	50226 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   50270:	210f      	movs	r1, #15
   50272:	4618      	mov	r0, r3
   50274:	f7ff faed 	bl	4f852 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   50278:	2800      	cmp	r0, #0
   5027a:	d1d4      	bne.n	50226 <smp_error+0x12>
   5027c:	e7d7      	b.n	5022e <smp_error+0x1a>
		return -ENOBUFS;
   5027e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   50282:	e7ed      	b.n	50260 <smp_error+0x4c>

00050284 <bt_smp_dhkey_ready>:
{
   50284:	b570      	push	{r4, r5, r6, lr}
   50286:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   50288:	2008      	movs	r0, #8
   5028a:	f7e2 ff85 	bl	33198 <smp_find>
	if (smp) {
   5028e:	4604      	mov	r4, r0
   50290:	b1b8      	cbz	r0, 502c2 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   50292:	1d05      	adds	r5, r0, #4
   50294:	2108      	movs	r1, #8
   50296:	4628      	mov	r0, r5
   50298:	f7ff fb2b 	bl	4f8f2 <atomic_clear_bit>
	if (!dhkey) {
   5029c:	b3c6      	cbz	r6, 50310 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   5029e:	2107      	movs	r1, #7
   502a0:	f7ff fb27 	bl	4f8f2 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   502a4:	4631      	mov	r1, r6
   502a6:	2220      	movs	r2, #32
   502a8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   502ac:	f7fc fa03 	bl	4c6b6 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   502b0:	210a      	movs	r1, #10
   502b2:	4628      	mov	r0, r5
   502b4:	f7ff facd 	bl	4f852 <atomic_test_bit>
   502b8:	b168      	cbz	r0, 502d6 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   502ba:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   502bc:	4628      	mov	r0, r5
   502be:	f7ff fc0e 	bl	4fade <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   502c2:	2007      	movs	r0, #7
   502c4:	f7e2 ff68 	bl	33198 <smp_find>
		if (smp) {
   502c8:	4604      	mov	r4, r0
   502ca:	b118      	cbz	r0, 502d4 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   502cc:	f7e3 f8de 	bl	3348c <smp_dhkey_generate>
			if (err) {
   502d0:	4601      	mov	r1, r0
   502d2:	b9b0      	cbnz	r0, 50302 <bt_smp_dhkey_ready+0x7e>
}
   502d4:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   502d6:	2110      	movs	r1, #16
   502d8:	4628      	mov	r0, r5
   502da:	f7ff faba 	bl	4f852 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   502de:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   502e0:	2800      	cmp	r0, #0
   502e2:	d1eb      	bne.n	502bc <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   502e4:	4628      	mov	r0, r5
   502e6:	f7ff fab4 	bl	4f852 <atomic_test_bit>
   502ea:	2800      	cmp	r0, #0
   502ec:	d0e9      	beq.n	502c2 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   502ee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   502f2:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   502f4:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   502f6:	b943      	cbnz	r3, 5030a <bt_smp_dhkey_ready+0x86>
			return compute_and_send_central_dhcheck(smp);
   502f8:	f7ff fc84 	bl	4fc04 <compute_and_send_central_dhcheck>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   502fc:	4601      	mov	r1, r0
		if (err) {
   502fe:	2800      	cmp	r0, #0
   50300:	d0df      	beq.n	502c2 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   50302:	4620      	mov	r0, r4
   50304:	f7ff ff86 	bl	50214 <smp_error>
   50308:	e7db      	b.n	502c2 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   5030a:	f7ff fccf 	bl	4fcac <compute_and_check_and_send_periph_dhcheck>
   5030e:	e7f5      	b.n	502fc <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   50310:	210b      	movs	r1, #11
   50312:	e7f6      	b.n	50302 <bt_smp_dhkey_ready+0x7e>

00050314 <smp_ident_addr_info>:
{
   50314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   50318:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   5031a:	783b      	ldrb	r3, [r7, #0]
{
   5031c:	4604      	mov	r4, r0
   5031e:	b123      	cbz	r3, 5032a <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   50320:	79bb      	ldrb	r3, [r7, #6]
   50322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   50326:	2bc0      	cmp	r3, #192	; 0xc0
   50328:	d176      	bne.n	50418 <smp_ident_addr_info+0x104>
	struct bt_conn *conn = smp->chan.chan.conn;
   5032a:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   5032e:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   50332:	2207      	movs	r2, #7
   50334:	4639      	mov	r1, r7
   50336:	4640      	mov	r0, r8
   50338:	f7fc f9ac 	bl	4c694 <memcmp>
   5033c:	b180      	cbz	r0, 50360 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   5033e:	7a28      	ldrb	r0, [r5, #8]
   50340:	4639      	mov	r1, r7
   50342:	f7e4 f811 	bl	34368 <bt_keys_find_addr>
		if (keys) {
   50346:	4606      	mov	r6, r0
   50348:	b150      	cbz	r0, 50360 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   5034a:	4601      	mov	r1, r0
   5034c:	4620      	mov	r0, r4
   5034e:	f7ff fa89 	bl	4f864 <update_keys_check>
   50352:	b910      	cbnz	r0, 5035a <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   50354:	2008      	movs	r0, #8
}
   50356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   5035a:	4630      	mov	r0, r6
   5035c:	f7e4 f822 	bl	343a4 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   50360:	210d      	movs	r1, #13
   50362:	1d20      	adds	r0, r4, #4
   50364:	f7ff fa75 	bl	4f852 <atomic_test_bit>
   50368:	b398      	cbz	r0, 503d2 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   5036a:	7a29      	ldrb	r1, [r5, #8]
   5036c:	4642      	mov	r2, r8
   5036e:	2002      	movs	r0, #2
   50370:	f000 f909 	bl	50586 <bt_keys_get_type>
		if (!keys) {
   50374:	4606      	mov	r6, r0
   50376:	2800      	cmp	r0, #0
   50378:	d0ec      	beq.n	50354 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   5037a:	78eb      	ldrb	r3, [r5, #3]
   5037c:	2b00      	cmp	r3, #0
   5037e:	d148      	bne.n	50412 <smp_ident_addr_info+0xfe>
			dst = &conn->le.resp_addr;
   50380:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   50384:	780b      	ldrb	r3, [r1, #0]
   50386:	2b01      	cmp	r3, #1
   50388:	d120      	bne.n	503cc <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   5038a:	798b      	ldrb	r3, [r1, #6]
   5038c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   50390:	2b40      	cmp	r3, #64	; 0x40
   50392:	d11b      	bne.n	503cc <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   50394:	2206      	movs	r2, #6
   50396:	3101      	adds	r1, #1
   50398:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   5039c:	f7fc f98b 	bl	4c6b6 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   503a0:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   503a4:	b193      	cbz	r3, 503cc <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   503a6:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   503aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   503ae:	2bc0      	cmp	r3, #192	; 0xc0
   503b0:	d00c      	beq.n	503cc <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   503b2:	2207      	movs	r2, #7
   503b4:	4639      	mov	r1, r7
   503b6:	1c70      	adds	r0, r6, #1
   503b8:	f7fc f97d 	bl	4c6b6 <memcpy>
   503bc:	2207      	movs	r2, #7
   503be:	4639      	mov	r1, r7
   503c0:	4640      	mov	r0, r8
   503c2:	f7fc f978 	bl	4c6b6 <memcpy>
				bt_conn_identity_resolved(conn);
   503c6:	4628      	mov	r0, r5
   503c8:	f7e0 f87a 	bl	304c0 <bt_conn_identity_resolved>
		bt_id_add(keys);
   503cc:	4630      	mov	r0, r6
   503ce:	f7de fcd1 	bl	2ed74 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   503d2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   503d6:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   503da:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   503dc:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   503e0:	d503      	bpl.n	503ea <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   503e2:	210a      	movs	r1, #10
   503e4:	4620      	mov	r0, r4
   503e6:	f7ff fb7a 	bl	4fade <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   503ea:	78eb      	ldrb	r3, [r5, #3]
   503ec:	b943      	cbnz	r3, 50400 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   503ee:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   503f2:	b92b      	cbnz	r3, 50400 <smp_ident_addr_info+0xec>
	struct bt_keys *keys = conn->le.keys;
   503f4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (!keys) {
   503f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   503fc:	2b00      	cmp	r3, #0
   503fe:	d0a9      	beq.n	50354 <smp_ident_addr_info+0x40>
	if (!smp->local_dist && !smp->remote_dist) {
   50400:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   50404:	b91d      	cbnz	r5, 5040e <smp_ident_addr_info+0xfa>
		smp_pairing_complete(smp, 0);
   50406:	4629      	mov	r1, r5
   50408:	4620      	mov	r0, r4
   5040a:	f7e3 fd25 	bl	33e58 <smp_pairing_complete>
	return 0;
   5040e:	2000      	movs	r0, #0
   50410:	e7a1      	b.n	50356 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   50412:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   50416:	e7b5      	b.n	50384 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   50418:	200a      	movs	r0, #10
   5041a:	e79c      	b.n	50356 <smp_ident_addr_info+0x42>

0005041c <bt_smp_disconnected>:
{
   5041c:	b570      	push	{r4, r5, r6, lr}
   5041e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   50420:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   50424:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   50428:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   5042a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   5042e:	f001 fab8 	bl	519a2 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   50432:	2103      	movs	r1, #3
   50434:	4620      	mov	r0, r4
   50436:	f7ff fa0c 	bl	4f852 <atomic_test_bit>
   5043a:	b1a0      	cbz	r0, 50466 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   5043c:	2108      	movs	r1, #8
   5043e:	4630      	mov	r0, r6
   50440:	f7e3 fd0a 	bl	33e58 <smp_pairing_complete>
	if (keys) {
   50444:	b13d      	cbz	r5, 50456 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   50446:	89eb      	ldrh	r3, [r5, #14]
   50448:	b113      	cbz	r3, 50450 <bt_smp_disconnected+0x34>
   5044a:	7b6b      	ldrb	r3, [r5, #13]
   5044c:	079b      	lsls	r3, r3, #30
   5044e:	d502      	bpl.n	50456 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   50450:	4628      	mov	r0, r5
   50452:	f7e3 ffa7 	bl	343a4 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   50456:	4630      	mov	r0, r6
   50458:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   5045c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   50460:	2100      	movs	r1, #0
   50462:	f7fc b933 	b.w	4c6cc <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   50466:	2101      	movs	r1, #1
   50468:	4620      	mov	r0, r4
   5046a:	f7ff f9f2 	bl	4f852 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   5046e:	2800      	cmp	r0, #0
   50470:	d1e4      	bne.n	5043c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   50472:	210f      	movs	r1, #15
   50474:	4620      	mov	r0, r4
   50476:	f7ff f9ec 	bl	4f852 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   5047a:	2800      	cmp	r0, #0
   5047c:	d1de      	bne.n	5043c <bt_smp_disconnected+0x20>
   5047e:	e7e1      	b.n	50444 <bt_smp_disconnected+0x28>

00050480 <smp_timeout>:
{
   50480:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   50482:	2108      	movs	r1, #8
{
   50484:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   50486:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   5048a:	f7e3 fce5 	bl	33e58 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   5048e:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   50492:	2104      	movs	r1, #4
}
   50494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   50498:	f7ff bb21 	b.w	4fade <atomic_set_bit>

0005049c <bt_smp_update_keys>:
{
   5049c:	b570      	push	{r4, r5, r6, lr}
   5049e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   504a0:	f7ff f9d0 	bl	4f844 <smp_chan_get>
	if (!smp) {
   504a4:	4605      	mov	r5, r0
   504a6:	2800      	cmp	r0, #0
   504a8:	d06a      	beq.n	50580 <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   504aa:	1d06      	adds	r6, r0, #4
   504ac:	2103      	movs	r1, #3
   504ae:	4630      	mov	r0, r6
   504b0:	f7ff f9cf 	bl	4f852 <atomic_test_bit>
   504b4:	2800      	cmp	r0, #0
   504b6:	d063      	beq.n	50580 <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   504b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   504bc:	b108      	cbz	r0, 504c2 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   504be:	f7e3 ff71 	bl	343a4 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   504c2:	7a20      	ldrb	r0, [r4, #8]
   504c4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   504c8:	f7e3 fe52 	bl	34170 <bt_keys_get_addr>
   504cc:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   504d0:	b928      	cbnz	r0, 504de <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   504d2:	4628      	mov	r0, r5
   504d4:	2108      	movs	r1, #8
}
   504d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   504da:	f7ff be9b 	b.w	50214 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   504de:	210e      	movs	r1, #14
   504e0:	4630      	mov	r0, r6
   504e2:	f7ff f9b6 	bl	4f852 <atomic_test_bit>
   504e6:	b128      	cbz	r0, 504f4 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   504e8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   504ec:	7b53      	ldrb	r3, [r2, #13]
   504ee:	f043 0302 	orr.w	r3, r3, #2
   504f2:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   504f4:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   504f6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   504fa:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   504fc:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   504fe:	d836      	bhi.n	5056e <bt_smp_update_keys+0xd2>
   50500:	b3c2      	cbz	r2, 50574 <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   50502:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   50506:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   50508:	7b6b      	ldrb	r3, [r5, #13]
   5050a:	7d2a      	ldrb	r2, [r5, #20]
   5050c:	4293      	cmp	r3, r2
   5050e:	bf28      	it	cs
   50510:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   50512:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   50514:	4630      	mov	r0, r6
   50516:	2105      	movs	r1, #5
   50518:	f7ff f99b 	bl	4f852 <atomic_test_bit>
   5051c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   50520:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   50522:	b350      	cbz	r0, 5057a <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   50524:	f042 0210 	orr.w	r2, r2, #16
   50528:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   5052a:	210d      	movs	r1, #13
   5052c:	4630      	mov	r0, r6
   5052e:	f7ff f990 	bl	4f852 <atomic_test_bit>
   50532:	b328      	cbz	r0, 50580 <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   50534:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   50538:	2120      	movs	r1, #32
   5053a:	f000 f834 	bl	505a6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   5053e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   50542:	f105 0147 	add.w	r1, r5, #71	; 0x47
   50546:	2210      	movs	r2, #16
   50548:	301a      	adds	r0, #26
   5054a:	f7fc f8b4 	bl	4c6b6 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   5054e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   50552:	2208      	movs	r2, #8
   50554:	2100      	movs	r1, #0
   50556:	3010      	adds	r0, #16
   50558:	f7fc f8b8 	bl	4c6cc <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   5055c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   50560:	2202      	movs	r2, #2
}
   50562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   50566:	2100      	movs	r1, #0
   50568:	3018      	adds	r0, #24
   5056a:	f7fc b8af 	b.w	4c6cc <memset>
	switch (smp->method) {
   5056e:	3a05      	subs	r2, #5
   50570:	2a01      	cmp	r2, #1
   50572:	d9c6      	bls.n	50502 <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   50574:	f023 0301 	bic.w	r3, r3, #1
   50578:	e7c5      	b.n	50506 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   5057a:	f022 0210 	bic.w	r2, r2, #16
   5057e:	735a      	strb	r2, [r3, #13]
}
   50580:	bd70      	pop	{r4, r5, r6, pc}

00050582 <id_add>:
	bt_id_add(keys);
   50582:	f7de bbf7 	b.w	2ed74 <bt_id_add>

00050586 <bt_keys_get_type>:
{
   50586:	b570      	push	{r4, r5, r6, lr}
   50588:	4604      	mov	r4, r0
   5058a:	460d      	mov	r5, r1
   5058c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   5058e:	f7e3 fe73 	bl	34278 <bt_keys_find>
	if (keys) {
   50592:	b938      	cbnz	r0, 505a4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   50594:	4631      	mov	r1, r6
   50596:	4628      	mov	r0, r5
   50598:	f7e3 fdea 	bl	34170 <bt_keys_get_addr>
	if (!keys) {
   5059c:	b110      	cbz	r0, 505a4 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   5059e:	89c3      	ldrh	r3, [r0, #14]
   505a0:	431c      	orrs	r4, r3
   505a2:	81c4      	strh	r4, [r0, #14]
}
   505a4:	bd70      	pop	{r4, r5, r6, pc}

000505a6 <bt_keys_add_type>:
	keys->keys |= type;
   505a6:	89c3      	ldrh	r3, [r0, #14]
   505a8:	4319      	orrs	r1, r3
   505aa:	81c1      	strh	r1, [r0, #14]
}
   505ac:	4770      	bx	lr

000505ae <keys_set>:
{
   505ae:	b570      	push	{r4, r5, r6, lr}
   505b0:	4605      	mov	r5, r0
   505b2:	b090      	sub	sp, #64	; 0x40
   505b4:	4614      	mov	r4, r2
   505b6:	4618      	mov	r0, r3
	if (!name) {
   505b8:	b915      	cbnz	r5, 505c0 <keys_set+0x12>
			return -EINVAL;
   505ba:	f06f 0415 	mvn.w	r4, #21
   505be:	e01c      	b.n	505fa <keys_set+0x4c>
	len = read_cb(cb_arg, val, sizeof(val));
   505c0:	2234      	movs	r2, #52	; 0x34
   505c2:	a903      	add	r1, sp, #12
   505c4:	47a0      	blx	r4
	if (len < 0) {
   505c6:	1e04      	subs	r4, r0, #0
   505c8:	dbf7      	blt.n	505ba <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   505ca:	a901      	add	r1, sp, #4
   505cc:	4628      	mov	r0, r5
   505ce:	f7fc f93a 	bl	4c846 <bt_settings_decode_key>
	if (err) {
   505d2:	4606      	mov	r6, r0
   505d4:	2800      	cmp	r0, #0
   505d6:	d1f0      	bne.n	505ba <keys_set+0xc>
	settings_name_next(name, &next);
   505d8:	4669      	mov	r1, sp
   505da:	4628      	mov	r0, r5
   505dc:	f7fa fda0 	bl	4b120 <settings_name_next>
	if (!next) {
   505e0:	9800      	ldr	r0, [sp, #0]
   505e2:	b968      	cbnz	r0, 50600 <keys_set+0x52>
	if (!len) {
   505e4:	b99c      	cbnz	r4, 5060e <keys_set+0x60>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   505e6:	aa01      	add	r2, sp, #4
   505e8:	4621      	mov	r1, r4
   505ea:	203f      	movs	r0, #63	; 0x3f
   505ec:	f7e3 fe44 	bl	34278 <bt_keys_find>
		if (keys) {
   505f0:	b118      	cbz	r0, 505fa <keys_set+0x4c>
			(void)memset(keys, 0, sizeof(*keys));
   505f2:	2240      	movs	r2, #64	; 0x40
   505f4:	4621      	mov	r1, r4
   505f6:	f7fc f869 	bl	4c6cc <memset>
}
   505fa:	4620      	mov	r0, r4
   505fc:	b010      	add	sp, #64	; 0x40
   505fe:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   50600:	220a      	movs	r2, #10
   50602:	4631      	mov	r1, r6
   50604:	f7fb ff9f 	bl	4c546 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   50608:	2800      	cmp	r0, #0
   5060a:	d0eb      	beq.n	505e4 <keys_set+0x36>
   5060c:	e7d5      	b.n	505ba <keys_set+0xc>
	keys = bt_keys_get_addr(id, &addr);
   5060e:	a901      	add	r1, sp, #4
   50610:	2000      	movs	r0, #0
   50612:	f7e3 fdad 	bl	34170 <bt_keys_get_addr>
	if (!keys) {
   50616:	b158      	cbz	r0, 50630 <keys_set+0x82>
	if (len != BT_KEYS_STORAGE_LEN) {
   50618:	2c34      	cmp	r4, #52	; 0x34
   5061a:	d002      	beq.n	50622 <keys_set+0x74>
			bt_keys_clear(keys);
   5061c:	f7e3 fec2 	bl	343a4 <bt_keys_clear>
   50620:	e7cb      	b.n	505ba <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   50622:	4622      	mov	r2, r4
   50624:	a903      	add	r1, sp, #12
   50626:	300c      	adds	r0, #12
   50628:	f7fc f845 	bl	4c6b6 <memcpy>
	return 0;
   5062c:	2400      	movs	r4, #0
   5062e:	e7e4      	b.n	505fa <keys_set+0x4c>
		return -ENOMEM;
   50630:	f06f 040b 	mvn.w	r4, #11
   50634:	e7e1      	b.n	505fa <keys_set+0x4c>

00050636 <fixed_data_unref>:
}
   50636:	4770      	bx	lr

00050638 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   50638:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   5063a:	6849      	ldr	r1, [r1, #4]
   5063c:	6809      	ldr	r1, [r1, #0]
   5063e:	f7f3 bca5 	b.w	43f8c <net_buf_alloc_len>

00050642 <net_buf_get>:
{
   50642:	b570      	push	{r4, r5, r6, lr}
   50644:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   50646:	f7f8 f8ff 	bl	48848 <z_impl_k_queue_get>
	if (!buf) {
   5064a:	4605      	mov	r5, r0
   5064c:	b128      	cbz	r0, 5065a <net_buf_get+0x18>
   5064e:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   50650:	7963      	ldrb	r3, [r4, #5]
   50652:	f013 0301 	ands.w	r3, r3, #1
   50656:	d102      	bne.n	5065e <net_buf_get+0x1c>
	frag->frags = NULL;
   50658:	6023      	str	r3, [r4, #0]
}
   5065a:	4628      	mov	r0, r5
   5065c:	bd70      	pop	{r4, r5, r6, pc}
   5065e:	2300      	movs	r3, #0
   50660:	2200      	movs	r2, #0
   50662:	4630      	mov	r0, r6
   50664:	f7f8 f8f0 	bl	48848 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   50668:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   5066a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   5066c:	f023 0301 	bic.w	r3, r3, #1
   50670:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   50672:	4604      	mov	r4, r0
   50674:	e7ec      	b.n	50650 <net_buf_get+0xe>

00050676 <net_buf_simple_init_with_data>:
	buf->size  = size;
   50676:	b292      	uxth	r2, r2
	buf->__buf = data;
   50678:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   5067a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   5067c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   5067e:	8082      	strh	r2, [r0, #4]
}
   50680:	4770      	bx	lr

00050682 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   50682:	6883      	ldr	r3, [r0, #8]
   50684:	440b      	add	r3, r1
   50686:	6003      	str	r3, [r0, #0]
}
   50688:	4770      	bx	lr

0005068a <net_buf_put>:
{
   5068a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   5068c:	460a      	mov	r2, r1
   5068e:	6814      	ldr	r4, [r2, #0]
   50690:	b914      	cbnz	r4, 50698 <net_buf_put+0xe>
}
   50692:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   50694:	f001 b885 	b.w	517a2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   50698:	7953      	ldrb	r3, [r2, #5]
   5069a:	f043 0301 	orr.w	r3, r3, #1
   5069e:	7153      	strb	r3, [r2, #5]
   506a0:	4622      	mov	r2, r4
   506a2:	e7f4      	b.n	5068e <net_buf_put+0x4>

000506a4 <net_buf_ref>:
	buf->ref++;
   506a4:	7902      	ldrb	r2, [r0, #4]
   506a6:	3201      	adds	r2, #1
   506a8:	7102      	strb	r2, [r0, #4]
}
   506aa:	4770      	bx	lr

000506ac <net_buf_frag_last>:
{
   506ac:	4603      	mov	r3, r0
	while (buf->frags) {
   506ae:	4618      	mov	r0, r3
   506b0:	681b      	ldr	r3, [r3, #0]
   506b2:	2b00      	cmp	r3, #0
   506b4:	d1fb      	bne.n	506ae <net_buf_frag_last+0x2>
}
   506b6:	4770      	bx	lr

000506b8 <net_buf_frag_insert>:
	if (parent->frags) {
   506b8:	6802      	ldr	r2, [r0, #0]
{
   506ba:	b510      	push	{r4, lr}
	if (parent->frags) {
   506bc:	b12a      	cbz	r2, 506ca <net_buf_frag_insert+0x12>
   506be:	460b      	mov	r3, r1
	while (buf->frags) {
   506c0:	461c      	mov	r4, r3
   506c2:	681b      	ldr	r3, [r3, #0]
   506c4:	2b00      	cmp	r3, #0
   506c6:	d1fb      	bne.n	506c0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   506c8:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   506ca:	6001      	str	r1, [r0, #0]
}
   506cc:	bd10      	pop	{r4, pc}

000506ce <net_buf_frag_add>:
{
   506ce:	b510      	push	{r4, lr}
	if (!head) {
   506d0:	4604      	mov	r4, r0
   506d2:	b920      	cbnz	r0, 506de <net_buf_frag_add+0x10>
	buf->ref++;
   506d4:	790b      	ldrb	r3, [r1, #4]
   506d6:	3301      	adds	r3, #1
   506d8:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   506da:	4608      	mov	r0, r1
}
   506dc:	bd10      	pop	{r4, pc}
   506de:	4603      	mov	r3, r0
	while (buf->frags) {
   506e0:	4618      	mov	r0, r3
   506e2:	681b      	ldr	r3, [r3, #0]
   506e4:	2b00      	cmp	r3, #0
   506e6:	d1fb      	bne.n	506e0 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   506e8:	f7ff ffe6 	bl	506b8 <net_buf_frag_insert>
   506ec:	4620      	mov	r0, r4
   506ee:	e7f5      	b.n	506dc <net_buf_frag_add+0xe>

000506f0 <net_buf_frag_del>:
{
   506f0:	b510      	push	{r4, lr}
	if (parent) {
   506f2:	b108      	cbz	r0, 506f8 <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   506f4:	680b      	ldr	r3, [r1, #0]
   506f6:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   506f8:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   506fa:	2300      	movs	r3, #0
	net_buf_unref(frag);
   506fc:	4608      	mov	r0, r1
	frag->frags = NULL;
   506fe:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   50700:	f7f3 fcd8 	bl	440b4 <net_buf_unref>
}
   50704:	4620      	mov	r0, r4
   50706:	bd10      	pop	{r4, pc}

00050708 <net_buf_simple_add>:
	return buf->data + buf->len;
   50708:	8883      	ldrh	r3, [r0, #4]
   5070a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   5070c:	4419      	add	r1, r3
   5070e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   50710:	18d0      	adds	r0, r2, r3
   50712:	4770      	bx	lr

00050714 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   50714:	b430      	push	{r4, r5}
   50716:	8884      	ldrh	r4, [r0, #4]
   50718:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   5071a:	18a3      	adds	r3, r4, r2
   5071c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   5071e:	1928      	adds	r0, r5, r4
}
   50720:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   50722:	f7fb bfc8 	b.w	4c6b6 <memcpy>

00050726 <net_buf_simple_add_u8>:
   50726:	8883      	ldrh	r3, [r0, #4]
   50728:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   5072a:	b510      	push	{r4, lr}
	buf->len += len;
   5072c:	1c5c      	adds	r4, r3, #1
   5072e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   50730:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   50732:	18d0      	adds	r0, r2, r3
   50734:	bd10      	pop	{r4, pc}

00050736 <net_buf_simple_add_le16>:
   50736:	8883      	ldrh	r3, [r0, #4]
   50738:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   5073a:	b530      	push	{r4, r5, lr}
   5073c:	18d4      	adds	r4, r2, r3
	buf->len += len;
   5073e:	1c9d      	adds	r5, r3, #2
   50740:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   50742:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   50744:	0a09      	lsrs	r1, r1, #8
   50746:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   50748:	bd30      	pop	{r4, r5, pc}

0005074a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   5074a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   5074c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   5074e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   50750:	1a40      	subs	r0, r0, r1
	buf->len += len;
   50752:	4411      	add	r1, r2
	buf->data -= len;
   50754:	6018      	str	r0, [r3, #0]
	buf->len += len;
   50756:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   50758:	4770      	bx	lr

0005075a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   5075a:	8882      	ldrh	r2, [r0, #4]
   5075c:	1a52      	subs	r2, r2, r1
{
   5075e:	4603      	mov	r3, r0
	buf->len -= len;
   50760:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   50762:	6800      	ldr	r0, [r0, #0]
   50764:	4408      	add	r0, r1
   50766:	6018      	str	r0, [r3, #0]
}
   50768:	4770      	bx	lr

0005076a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   5076a:	4603      	mov	r3, r0
	void *data = buf->data;
   5076c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   5076e:	889a      	ldrh	r2, [r3, #4]
   50770:	1a52      	subs	r2, r2, r1
	buf->data += len;
   50772:	4401      	add	r1, r0
	buf->len -= len;
   50774:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   50776:	6019      	str	r1, [r3, #0]

	return data;
}
   50778:	4770      	bx	lr

0005077a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   5077a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   5077c:	6803      	ldr	r3, [r0, #0]
   5077e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   50780:	2101      	movs	r1, #1
   50782:	f7ff ffea 	bl	5075a <net_buf_simple_pull>

	return val;
}
   50786:	4620      	mov	r0, r4
   50788:	bd10      	pop	{r4, pc}

0005078a <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   5078a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   5078c:	6803      	ldr	r3, [r0, #0]
   5078e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   50790:	2102      	movs	r1, #2
   50792:	f7ff ffe2 	bl	5075a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   50796:	4620      	mov	r0, r4
   50798:	bd10      	pop	{r4, pc}

0005079a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   5079a:	6802      	ldr	r2, [r0, #0]
   5079c:	6880      	ldr	r0, [r0, #8]
}
   5079e:	1a10      	subs	r0, r2, r0
   507a0:	4770      	bx	lr

000507a2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   507a2:	8883      	ldrh	r3, [r0, #4]
   507a4:	88c2      	ldrh	r2, [r0, #6]
   507a6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   507a8:	6803      	ldr	r3, [r0, #0]
   507aa:	6880      	ldr	r0, [r0, #8]
   507ac:	1a18      	subs	r0, r3, r0
}
   507ae:	1a10      	subs	r0, r2, r0
   507b0:	4770      	bx	lr

000507b2 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   507b2:	7081      	strb	r1, [r0, #2]
}
   507b4:	4770      	bx	lr

000507b6 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
   507b6:	2000      	movs	r0, #0
   507b8:	4770      	bx	lr

000507ba <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
   507ba:	6903      	ldr	r3, [r0, #16]
   507bc:	6842      	ldr	r2, [r0, #4]
   507be:	685b      	ldr	r3, [r3, #4]
   507c0:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
   507c2:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
   507c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   507c8:	7453      	strb	r3, [r2, #17]
}
   507ca:	2000      	movs	r0, #0
   507cc:	4770      	bx	lr

000507ce <hid_int_ep_write>:
{
   507ce:	b430      	push	{r4, r5}
	const struct usb_cfg_data *cfg = dev->config;
   507d0:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
   507d2:	6900      	ldr	r0, [r0, #16]
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
   507d4:	7b05      	ldrb	r5, [r0, #12]
   507d6:	b135      	cbz	r5, 507e6 <hid_int_ep_write+0x18>
   507d8:	7b40      	ldrb	r0, [r0, #13]
   507da:	b920      	cbnz	r0, 507e6 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   507dc:	6a20      	ldr	r0, [r4, #32]
}
   507de:	bc30      	pop	{r4, r5}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   507e0:	7900      	ldrb	r0, [r0, #4]
   507e2:	f7fa bc0f 	b.w	4b004 <usb_write>
}
   507e6:	f06f 000a 	mvn.w	r0, #10
   507ea:	bc30      	pop	{r4, r5}
   507ec:	4770      	bx	lr

000507ee <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   507ee:	6903      	ldr	r3, [r0, #16]
{
   507f0:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   507f2:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   507f6:	2300      	movs	r3, #0
   507f8:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   507fa:	7f83      	ldrb	r3, [r0, #30]
{
   507fc:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   507fe:	b113      	cbz	r3, 50806 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   50800:	7a40      	ldrb	r0, [r0, #9]
   50802:	f000 fb6d 	bl	50ee0 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   50806:	2301      	movs	r3, #1
   50808:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   5080a:	2300      	movs	r3, #0
   5080c:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   5080e:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   50810:	77a3      	strb	r3, [r4, #30]
}
   50812:	bd10      	pop	{r4, pc}

00050814 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   50814:	f7f7 bf5e 	b.w	486d4 <z_impl_k_mutex_lock>

00050818 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   50818:	f7f7 bfd4 	b.w	487c4 <z_impl_k_mutex_unlock>

0005081c <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   5081c:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   5081e:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   50820:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   50824:	b921      	cbnz	r1, 50830 <usb_dc_ep_check_cap+0x14>
   50826:	1e10      	subs	r0, r2, #0
   50828:	bf18      	it	ne
   5082a:	2001      	movne	r0, #1
   5082c:	4240      	negs	r0, r0
   5082e:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   50830:	2a08      	cmp	r2, #8
   50832:	d806      	bhi.n	50842 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   50834:	2901      	cmp	r1, #1
   50836:	d107      	bne.n	50848 <usb_dc_ep_check_cap+0x2c>
   50838:	f083 0008 	eor.w	r0, r3, #8
   5083c:	f340 00c0 	sbfx	r0, r0, #3, #1
   50840:	4770      	bx	lr
		return -1;
   50842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   50846:	4770      	bx	lr
	return 0;
   50848:	2000      	movs	r0, #0
}
   5084a:	4770      	bx	lr

0005084c <usb_dc_ep_read>:
{
   5084c:	b570      	push	{r4, r5, r6, lr}
   5084e:	4604      	mov	r4, r0
   50850:	460e      	mov	r6, r1
   50852:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   50854:	f7f4 fa54 	bl	44d00 <usb_dc_ep_read_wait>
	if (ret) {
   50858:	b930      	cbnz	r0, 50868 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   5085a:	b906      	cbnz	r6, 5085e <usb_dc_ep_read+0x12>
   5085c:	b125      	cbz	r5, 50868 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   5085e:	4620      	mov	r0, r4
}
   50860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   50864:	f7f4 ba94 	b.w	44d90 <usb_dc_ep_read_continue>
}
   50868:	bd70      	pop	{r4, r5, r6, pc}

0005086a <usb_dc_wakeup_request>:
{
   5086a:	b508      	push	{r3, lr}
	bool res = nrfx_usbd_wakeup_req();
   5086c:	f7f6 fe4c 	bl	47508 <nrfx_usbd_wakeup_req>
		return -EAGAIN;
   50870:	2800      	cmp	r0, #0
}
   50872:	bf0c      	ite	eq
   50874:	f06f 000a 	mvneq.w	r0, #10
   50878:	2000      	movne	r0, #0
   5087a:	bd08      	pop	{r3, pc}

0005087c <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   5087c:	f1a0 0308 	sub.w	r3, r0, #8
   50880:	f3bf 8f5b 	dmb	ish
   50884:	e853 2f00 	ldrex	r2, [r3]
   50888:	1c51      	adds	r1, r2, #1
   5088a:	e843 1c00 	strex	ip, r1, [r3]
   5088e:	f1bc 0f00 	cmp.w	ip, #0
   50892:	d1f7      	bne.n	50884 <adc_context_on_timer_expired+0x8>
   50894:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   50898:	b91a      	cbnz	r2, 508a2 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   5089a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   5089e:	f7f4 bb65 	b.w	44f6c <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   508a2:	f06f 030f 	mvn.w	r3, #15
   508a6:	6683      	str	r3, [r0, #104]	; 0x68
}
   508a8:	4770      	bx	lr

000508aa <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   508aa:	6903      	ldr	r3, [r0, #16]
   508ac:	b2c9      	uxtb	r1, r1
   508ae:	220c      	movs	r2, #12
   508b0:	fb01 3302 	mla	r3, r1, r2, r3
   508b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   508b6:	f000 0007 	and.w	r0, r0, #7
   508ba:	4770      	bx	lr

000508bc <set_on_state>:
	__asm__ volatile(
   508bc:	f04f 0320 	mov.w	r3, #32
   508c0:	f3ef 8211 	mrs	r2, BASEPRI
   508c4:	f383 8812 	msr	BASEPRI_MAX, r3
   508c8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   508cc:	6803      	ldr	r3, [r0, #0]
   508ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   508d2:	f043 0302 	orr.w	r3, r3, #2
   508d6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   508d8:	f382 8811 	msr	BASEPRI, r2
   508dc:	f3bf 8f6f 	isb	sy
}
   508e0:	4770      	bx	lr

000508e2 <stop>:
{
   508e2:	4603      	mov	r3, r0
   508e4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   508e6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   508e8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   508ea:	f04f 0420 	mov.w	r4, #32
   508ee:	f3ef 8611 	mrs	r6, BASEPRI
   508f2:	f384 8812 	msr	BASEPRI_MAX, r4
   508f6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   508fa:	250c      	movs	r5, #12
   508fc:	fb05 0401 	mla	r4, r5, r1, r0
   50900:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   50902:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   50906:	d001      	beq.n	5090c <stop+0x2a>
   50908:	42a2      	cmp	r2, r4
   5090a:	d110      	bne.n	5092e <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   5090c:	fb05 0001 	mla	r0, r5, r1, r0
   50910:	2201      	movs	r2, #1
   50912:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   50914:	2000      	movs	r0, #0
	__asm__ volatile(
   50916:	f386 8811 	msr	BASEPRI, r6
   5091a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   5091e:	b928      	cbnz	r0, 5092c <stop+0x4a>
	get_sub_config(dev, type)->stop();
   50920:	685b      	ldr	r3, [r3, #4]
   50922:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   50926:	684b      	ldr	r3, [r1, #4]
   50928:	4798      	blx	r3
	return 0;
   5092a:	2000      	movs	r0, #0
}
   5092c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   5092e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   50932:	e7f0      	b.n	50916 <stop+0x34>

00050934 <api_stop>:
	return stop(dev, subsys, CTX_API);
   50934:	2280      	movs	r2, #128	; 0x80
   50936:	f7ff bfd4 	b.w	508e2 <stop>

0005093a <async_start>:
{
   5093a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5093c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   5093e:	6904      	ldr	r4, [r0, #16]
{
   50940:	4605      	mov	r5, r0
   50942:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   50944:	f04f 0020 	mov.w	r0, #32
   50948:	f3ef 8c11 	mrs	ip, BASEPRI
   5094c:	f380 8812 	msr	BASEPRI_MAX, r0
   50950:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   50954:	260c      	movs	r6, #12
   50956:	fb06 4601 	mla	r6, r6, r1, r4
   5095a:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   5095c:	f000 0e07 	and.w	lr, r0, #7
   50960:	f1be 0f01 	cmp.w	lr, #1
   50964:	d111      	bne.n	5098a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   50966:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   50968:	2600      	movs	r6, #0
	__asm__ volatile(
   5096a:	f38c 8811 	msr	BASEPRI, ip
   5096e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   50972:	b946      	cbnz	r6, 50986 <async_start+0x4c>
	subdata->cb = cb;
   50974:	200c      	movs	r0, #12
   50976:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   5097a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   5097e:	686b      	ldr	r3, [r5, #4]
   50980:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   50984:	4798      	blx	r3
}
   50986:	4630      	mov	r0, r6
   50988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   5098a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   5098e:	4287      	cmp	r7, r0
   50990:	bf14      	ite	ne
   50992:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   50996:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   5099a:	e7e6      	b.n	5096a <async_start+0x30>

0005099c <api_start>:
{
   5099c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   5099e:	2480      	movs	r4, #128	; 0x80
   509a0:	9400      	str	r4, [sp, #0]
   509a2:	f7ff ffca 	bl	5093a <async_start>
}
   509a6:	b002      	add	sp, #8
   509a8:	bd10      	pop	{r4, pc}

000509aa <onoff_started_callback>:
	return &data->mgr[type];
   509aa:	6900      	ldr	r0, [r0, #16]
{
   509ac:	b410      	push	{r4}
	return &data->mgr[type];
   509ae:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   509b0:	241c      	movs	r4, #28
   509b2:	fb03 0004 	mla	r0, r3, r4, r0
   509b6:	2100      	movs	r1, #0
}
   509b8:	bc10      	pop	{r4}
	notify(mgr, 0);
   509ba:	4710      	bx	r2

000509bc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   509bc:	2000      	movs	r0, #0
   509be:	f000 b92d 	b.w	50c1c <nrfx_clock_start>

000509c2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   509c2:	2000      	movs	r0, #0
   509c4:	f7f5 be32 	b.w	4662c <nrfx_clock_stop>

000509c8 <blocking_start_callback>:
{
   509c8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   509ca:	f7f7 bf71 	b.w	488b0 <z_impl_k_sem_give>

000509ce <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   509ce:	6843      	ldr	r3, [r0, #4]
   509d0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   509d2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   509d6:	600b      	str	r3, [r1, #0]
}
   509d8:	2000      	movs	r0, #0
   509da:	4770      	bx	lr

000509dc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   509dc:	6843      	ldr	r3, [r0, #4]
   509de:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   509e0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   509e4:	4042      	eors	r2, r0
   509e6:	400a      	ands	r2, r1
   509e8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   509ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   509ee:	2000      	movs	r0, #0
   509f0:	4770      	bx	lr

000509f2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   509f2:	6843      	ldr	r3, [r0, #4]
   509f4:	685b      	ldr	r3, [r3, #4]
}
   509f6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   509f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   509fc:	4770      	bx	lr

000509fe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   509fe:	6843      	ldr	r3, [r0, #4]
   50a00:	685b      	ldr	r3, [r3, #4]
}
   50a02:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   50a04:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   50a08:	4770      	bx	lr

00050a0a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   50a0a:	6843      	ldr	r3, [r0, #4]
   50a0c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   50a0e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   50a12:	404b      	eors	r3, r1
    p_reg->OUT = value;
   50a14:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   50a18:	2000      	movs	r0, #0
   50a1a:	4770      	bx	lr

00050a1c <gpio_nrfx_manage_callback>:
	return port->data;
   50a1c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   50a1e:	6858      	ldr	r0, [r3, #4]
{
   50a20:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   50a22:	b158      	cbz	r0, 50a3c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50a24:	2400      	movs	r4, #0
   50a26:	4281      	cmp	r1, r0
   50a28:	d112      	bne.n	50a50 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   50a2a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   50a2c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   50a2e:	b954      	cbnz	r4, 50a46 <gpio_nrfx_manage_callback+0x2a>
   50a30:	428d      	cmp	r5, r1
	list->head = node;
   50a32:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   50a34:	d100      	bne.n	50a38 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   50a36:	6098      	str	r0, [r3, #8]
	parent->next = child;
   50a38:	2000      	movs	r0, #0
   50a3a:	6008      	str	r0, [r1, #0]
	if (set) {
   50a3c:	b96a      	cbnz	r2, 50a5a <gpio_nrfx_manage_callback+0x3e>
	return 0;
   50a3e:	2000      	movs	r0, #0
}
   50a40:	bd30      	pop	{r4, r5, pc}
   50a42:	4628      	mov	r0, r5
   50a44:	e7ef      	b.n	50a26 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   50a46:	428d      	cmp	r5, r1
	parent->next = child;
   50a48:	6020      	str	r0, [r4, #0]
	list->tail = node;
   50a4a:	bf08      	it	eq
   50a4c:	609c      	streq	r4, [r3, #8]
}
   50a4e:	e7f3      	b.n	50a38 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   50a50:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50a52:	4604      	mov	r4, r0
   50a54:	2d00      	cmp	r5, #0
   50a56:	d1f4      	bne.n	50a42 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   50a58:	b13a      	cbz	r2, 50a6a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   50a5a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   50a5c:	685a      	ldr	r2, [r3, #4]
   50a5e:	600a      	str	r2, [r1, #0]
	list->head = node;
   50a60:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   50a62:	2800      	cmp	r0, #0
   50a64:	d1eb      	bne.n	50a3e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   50a66:	6099      	str	r1, [r3, #8]
}
   50a68:	e7ea      	b.n	50a40 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   50a6a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   50a6e:	e7e7      	b.n	50a40 <gpio_nrfx_manage_callback+0x24>

00050a70 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   50a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   50a72:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   50a76:	2908      	cmp	r1, #8
   50a78:	6e66      	ldr	r6, [r4, #100]	; 0x64
   50a7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   50a7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   50a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   50a80:	ea4f 2515 	mov.w	r5, r5, lsr #8
   50a84:	ea4f 6303 	mov.w	r3, r3, lsl #24
   50a88:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   50a8c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   50a90:	ea4f 2202 	mov.w	r2, r2, lsl #8
   50a94:	ea43 0305 	orr.w	r3, r3, r5
   50a98:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   50a9c:	ea43 0302 	orr.w	r3, r3, r2
   50aa0:	9300      	str	r3, [sp, #0]
   50aa2:	6e26      	ldr	r6, [r4, #96]	; 0x60
   50aa4:	6e25      	ldr	r5, [r4, #96]	; 0x60
   50aa6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   50aa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   50aaa:	ea4f 2415 	mov.w	r4, r5, lsr #8
   50aae:	ea4f 6303 	mov.w	r3, r3, lsl #24
   50ab2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   50ab6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   50aba:	ea43 0304 	orr.w	r3, r3, r4
   50abe:	ea4f 2402 	mov.w	r4, r2, lsl #8
   50ac2:	bf28      	it	cs
   50ac4:	2108      	movcs	r1, #8
   50ac6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   50aca:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   50acc:	460a      	mov	r2, r1
   50ace:	460c      	mov	r4, r1
   50ad0:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   50ad2:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   50ad4:	f7fb fdef 	bl	4c6b6 <memcpy>

	return length;
}
   50ad8:	4620      	mov	r0, r4
   50ada:	b002      	add	sp, #8
   50adc:	bd70      	pop	{r4, r5, r6, pc}

00050ade <is_regular_addr_valid>:
{
   50ade:	b538      	push	{r3, r4, r5, lr}
   50ae0:	4605      	mov	r5, r0
   50ae2:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   50ae4:	f000 f91c 	bl	50d20 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   50ae8:	2d00      	cmp	r5, #0
   50aea:	db07      	blt.n	50afc <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   50aec:	42a8      	cmp	r0, r5
   50aee:	d905      	bls.n	50afc <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   50af0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   50af2:	4284      	cmp	r4, r0
   50af4:	bf8c      	ite	hi
   50af6:	2000      	movhi	r0, #0
   50af8:	2001      	movls	r0, #1
}
   50afa:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   50afc:	2000      	movs	r0, #0
   50afe:	e7fc      	b.n	50afa <is_regular_addr_valid+0x1c>

00050b00 <flash_nrf_read>:
{
   50b00:	b570      	push	{r4, r5, r6, lr}
   50b02:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   50b04:	4628      	mov	r0, r5
   50b06:	4619      	mov	r1, r3
{
   50b08:	4616      	mov	r6, r2
   50b0a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   50b0c:	f7ff ffe7 	bl	50ade <is_regular_addr_valid>
   50b10:	b138      	cbz	r0, 50b22 <flash_nrf_read+0x22>
	if (!len) {
   50b12:	b14c      	cbz	r4, 50b28 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   50b14:	4622      	mov	r2, r4
   50b16:	4629      	mov	r1, r5
   50b18:	4630      	mov	r0, r6
   50b1a:	f7fb fdcc 	bl	4c6b6 <memcpy>
	return 0;
   50b1e:	2000      	movs	r0, #0
}
   50b20:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   50b22:	f06f 0015 	mvn.w	r0, #21
   50b26:	e7fb      	b.n	50b20 <flash_nrf_read+0x20>
		return 0;
   50b28:	4620      	mov	r0, r4
   50b2a:	e7f9      	b.n	50b20 <flash_nrf_read+0x20>

00050b2c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   50b2c:	2000      	movs	r0, #0
   50b2e:	f7e4 bee7 	b.w	35900 <ticker_is_initialized>

00050b32 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   50b32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   50b36:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   50b38:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   50b3a:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   50b3e:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   50b40:	f8c4 8000 	str.w	r8, [r4]
{
   50b44:	460d      	mov	r5, r1
   50b46:	4616      	mov	r6, r2
	info->index = 0U;
   50b48:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   50b4c:	aa01      	add	r2, sp, #4
   50b4e:	4669      	mov	r1, sp
   50b50:	4798      	blx	r3

	while (layout_size--) {
   50b52:	e9dd 7c00 	ldrd	r7, ip, [sp]
   50b56:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   50b58:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   50b5c:	4560      	cmp	r0, ip
   50b5e:	d104      	bne.n	50b6a <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   50b60:	f06f 0015 	mvn.w	r0, #21
}
   50b64:	b003      	add	sp, #12
   50b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   50b6a:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   50b6e:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   50b70:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   50b72:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   50b76:	b985      	cbnz	r5, 50b9a <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   50b78:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   50b7a:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   50b7e:	4543      	cmp	r3, r8
   50b80:	bf28      	it	cs
   50b82:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   50b84:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   50b88:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   50b8a:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   50b8c:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   50b8e:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   50b90:	f100 0001 	add.w	r0, r0, #1
   50b94:	d9e2      	bls.n	50b5c <flash_get_page_info+0x2a>
			return 0;
   50b96:	2000      	movs	r0, #0
   50b98:	e7e4      	b.n	50b64 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   50b9a:	1aab      	subs	r3, r5, r2
   50b9c:	fbb3 f3f9 	udiv	r3, r3, r9
   50ba0:	e7eb      	b.n	50b7a <flash_get_page_info+0x48>

00050ba2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   50ba2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   50ba4:	2200      	movs	r2, #0
   50ba6:	f7ff bfc4 	b.w	50b32 <flash_get_page_info>

00050baa <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   50baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   50bae:	6883      	ldr	r3, [r0, #8]
{
   50bb0:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   50bb2:	691b      	ldr	r3, [r3, #16]
{
   50bb4:	4688      	mov	r8, r1
   50bb6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   50bb8:	a901      	add	r1, sp, #4
   50bba:	aa02      	add	r2, sp, #8
   50bbc:	4798      	blx	r3
	off_t off = 0;
   50bbe:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   50bc0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   50bc2:	4625      	mov	r5, r4
   50bc4:	9b02      	ldr	r3, [sp, #8]
   50bc6:	42ab      	cmp	r3, r5
   50bc8:	d802      	bhi.n	50bd0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   50bca:	b006      	add	sp, #24
   50bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   50bd0:	9f01      	ldr	r7, [sp, #4]
   50bd2:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   50bd6:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   50bd8:	687b      	ldr	r3, [r7, #4]
   50bda:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   50bdc:	683a      	ldr	r2, [r7, #0]
   50bde:	42b2      	cmp	r2, r6
   50be0:	eb0a 0306 	add.w	r3, sl, r6
   50be4:	d802      	bhi.n	50bec <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   50be6:	3501      	adds	r5, #1
   50be8:	469a      	mov	sl, r3
   50bea:	e7eb      	b.n	50bc4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   50bec:	4649      	mov	r1, r9
   50bee:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   50bf0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   50bf2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   50bf4:	47c0      	blx	r8
   50bf6:	2800      	cmp	r0, #0
   50bf8:	d0e7      	beq.n	50bca <flash_page_foreach+0x20>
			off += page_info.size;
   50bfa:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   50bfc:	3601      	adds	r6, #1
			off += page_info.size;
   50bfe:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   50c00:	e7ec      	b.n	50bdc <flash_page_foreach+0x32>

00050c02 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   50c02:	4770      	bx	lr

00050c04 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   50c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   50c08:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   50c0c:	f1a0 0308 	sub.w	r3, r0, #8
   50c10:	4258      	negs	r0, r3
   50c12:	4158      	adcs	r0, r3
   50c14:	4770      	bx	lr

00050c16 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   50c16:	4700      	bx	r0

00050c18 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   50c18:	f001 b85a 	b.w	51cd0 <z_impl_k_busy_wait>

00050c1c <nrfx_clock_start>:
    switch (domain)
   50c1c:	b110      	cbz	r0, 50c24 <nrfx_clock_start+0x8>
   50c1e:	2801      	cmp	r0, #1
   50c20:	d01d      	beq.n	50c5e <nrfx_clock_start+0x42>
   50c22:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   50c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50c28:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   50c2c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   50c30:	03c9      	lsls	r1, r1, #15
   50c32:	d512      	bpl.n	50c5a <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   50c34:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   50c38:	2a01      	cmp	r2, #1
   50c3a:	d10e      	bne.n	50c5a <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   50c3c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   50c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50c44:	2200      	movs	r2, #0
   50c46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   50c4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   50c4e:	2202      	movs	r2, #2
   50c50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   50c54:	2201      	movs	r2, #1
   50c56:	609a      	str	r2, [r3, #8]
}
   50c58:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   50c5a:	2200      	movs	r2, #0
   50c5c:	e7ee      	b.n	50c3c <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   50c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50c62:	2200      	movs	r2, #0
   50c64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   50c68:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   50c6c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   50c70:	6018      	str	r0, [r3, #0]
}
   50c72:	4770      	bx	lr

00050c74 <nrf_gpio_reconfigure>:
{
   50c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   50c76:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   50c78:	a801      	add	r0, sp, #4
{
   50c7a:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   50c7e:	4617      	mov	r7, r2
   50c80:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   50c82:	f7f5 fd43 	bl	4670c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   50c86:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   50c88:	2f00      	cmp	r7, #0
   50c8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   50c8e:	bf14      	ite	ne
   50c90:	2302      	movne	r3, #2
   50c92:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   50c94:	2900      	cmp	r1, #0
   50c96:	bf18      	it	ne
   50c98:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   50c9c:	2d00      	cmp	r5, #0
   50c9e:	bf14      	ite	ne
   50ca0:	f04f 0c0c 	movne.w	ip, #12
   50ca4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   50ca8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   50caa:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   50cae:	bf14      	ite	ne
   50cb0:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   50cb4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   50cb8:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   50cba:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   50cbe:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   50cc2:	bf14      	ite	ne
   50cc4:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   50cc8:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   50ccc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   50cd0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   50cd4:	b101      	cbz	r1, 50cd8 <nrf_gpio_reconfigure+0x64>
   50cd6:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   50cd8:	b10f      	cbz	r7, 50cde <nrf_gpio_reconfigure+0x6a>
   50cda:	783f      	ldrb	r7, [r7, #0]
   50cdc:	007f      	lsls	r7, r7, #1
   50cde:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   50ce0:	b10d      	cbz	r5, 50ce6 <nrf_gpio_reconfigure+0x72>
   50ce2:	782d      	ldrb	r5, [r5, #0]
   50ce4:	00ad      	lsls	r5, r5, #2
   50ce6:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   50ce8:	b10c      	cbz	r4, 50cee <nrf_gpio_reconfigure+0x7a>
   50cea:	7822      	ldrb	r2, [r4, #0]
   50cec:	0214      	lsls	r4, r2, #8
   50cee:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   50cf0:	b10e      	cbz	r6, 50cf6 <nrf_gpio_reconfigure+0x82>
   50cf2:	7836      	ldrb	r6, [r6, #0]
   50cf4:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   50cf6:	432c      	orrs	r4, r5
   50cf8:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   50cfa:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   50cfe:	b003      	add	sp, #12
   50d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00050d02 <nrf_gpio_cfg_sense_set>:
{
   50d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   50d04:	f10d 030f 	add.w	r3, sp, #15
   50d08:	9301      	str	r3, [sp, #4]
   50d0a:	2300      	movs	r3, #0
{
   50d0c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   50d10:	9300      	str	r3, [sp, #0]
   50d12:	461a      	mov	r2, r3
   50d14:	4619      	mov	r1, r3
   50d16:	f7ff ffad 	bl	50c74 <nrf_gpio_reconfigure>
}
   50d1a:	b005      	add	sp, #20
   50d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00050d20 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   50d20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50d24:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   50d26:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   50d28:	4350      	muls	r0, r2
   50d2a:	4770      	bx	lr

00050d2c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   50d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50d30:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   50d32:	4770      	bx	lr

00050d34 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   50d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50d38:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   50d3a:	4770      	bx	lr

00050d3c <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   50d3c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   50d40:	681a      	ldr	r2, [r3, #0]
   50d42:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   50d44:	bf1f      	itttt	ne
   50d46:	2200      	movne	r2, #0
   50d48:	601a      	strne	r2, [r3, #0]
   50d4a:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   50d4c:	2001      	movne	r0, #1
   50d4e:	bf08      	it	eq
   50d50:	2000      	moveq	r0, #0
}
   50d52:	4770      	bx	lr

00050d54 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   50d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50d58:	f44f 7260 	mov.w	r2, #896	; 0x380
   50d5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   50d60:	4770      	bx	lr

00050d62 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   50d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50d66:	f44f 7260 	mov.w	r2, #896	; 0x380
   50d6a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   50d6e:	4770      	bx	lr

00050d70 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   50d70:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   50d72:	f7f6 f8b5 	bl	46ee0 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   50d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   50d7a:	f7f5 bc93 	b.w	466a4 <nrfx_clock_irq_handler>

00050d7e <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   50d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   50d82:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   50d86:	f1a0 0308 	sub.w	r3, r0, #8
   50d8a:	4258      	negs	r0, r3
   50d8c:	4158      	adcs	r0, r3
   50d8e:	4770      	bx	lr

00050d90 <nrfx_usbd_consumer>:
{
   50d90:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   50d92:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   50d94:	680d      	ldr	r5, [r1, #0]
   50d96:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   50d98:	bf97      	itett	ls
   50d9a:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   50d9e:	2100      	movhi	r1, #0
        size -= data_size;
   50da0:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   50da2:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   50da4:	bf8e      	itee	hi
   50da6:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   50daa:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   50dac:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   50dae:	429a      	cmp	r2, r3
   50db0:	d103      	bne.n	50dba <nrfx_usbd_consumer+0x2a>
   50db2:	1e20      	subs	r0, r4, #0
   50db4:	bf18      	it	ne
   50db6:	2001      	movne	r0, #1
}
   50db8:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   50dba:	2000      	movs	r0, #0
   50dbc:	e7fc      	b.n	50db8 <nrfx_usbd_consumer+0x28>

00050dbe <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   50dbe:	684b      	ldr	r3, [r1, #4]
{
   50dc0:	b510      	push	{r4, lr}
   50dc2:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   50dc4:	680c      	ldr	r4, [r1, #0]
   50dc6:	bf28      	it	cs
   50dc8:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   50dca:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   50dce:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   50dd0:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   50dd2:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   50dd4:	441a      	add	r2, r3
}
   50dd6:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   50dd8:	600a      	str	r2, [r1, #0]
}
   50dda:	bf18      	it	ne
   50ddc:	2001      	movne	r0, #1
   50dde:	bd10      	pop	{r4, pc}

00050de0 <nrfx_usbd_feeder_ram_zlp>:
{
   50de0:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   50de2:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   50de4:	680b      	ldr	r3, [r1, #0]
   50de6:	42a2      	cmp	r2, r4
   50de8:	bf28      	it	cs
   50dea:	4622      	movcs	r2, r4
   50dec:	2a00      	cmp	r2, #0
   50dee:	bf14      	ite	ne
   50df0:	461d      	movne	r5, r3
   50df2:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   50df4:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   50df8:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   50dfc:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   50dfe:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   50e00:	600a      	str	r2, [r1, #0]
}
   50e02:	bf14      	ite	ne
   50e04:	2001      	movne	r0, #1
   50e06:	2000      	moveq	r0, #0
   50e08:	bd30      	pop	{r4, r5, pc}

00050e0a <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   50e0a:	f010 0f80 	tst.w	r0, #128	; 0x80
   50e0e:	bf14      	ite	ne
   50e10:	2300      	movne	r3, #0
   50e12:	2310      	moveq	r3, #16
   50e14:	f000 000f 	and.w	r0, r0, #15
}
   50e18:	4418      	add	r0, r3
   50e1a:	4770      	bx	lr

00050e1c <ev_started_handler>:
}
   50e1c:	4770      	bx	lr

00050e1e <nrf_usbd_epin_dma_handler>:
{
   50e1e:	b508      	push	{r3, lr}
   50e20:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   50e22:	f7f6 f8cf 	bl	46fc4 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   50e26:	4608      	mov	r0, r1
   50e28:	f7f6 f8be 	bl	46fa8 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   50e2c:	7b83      	ldrb	r3, [r0, #14]
   50e2e:	2b03      	cmp	r3, #3
   50e30:	d10a      	bne.n	50e48 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   50e32:	4608      	mov	r0, r1
   50e34:	f7ff ffe9 	bl	50e0a <ep2bit>
   50e38:	2301      	movs	r3, #1
   50e3a:	fa03 f000 	lsl.w	r0, r3, r0
   50e3e:	43c0      	mvns	r0, r0
}
   50e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   50e44:	f7f6 b9ce 	b.w	471e4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   50e48:	6803      	ldr	r3, [r0, #0]
   50e4a:	2b00      	cmp	r3, #0
   50e4c:	d0f1      	beq.n	50e32 <nrf_usbd_epin_dma_handler+0x14>
}
   50e4e:	bd08      	pop	{r3, pc}

00050e50 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   50e50:	2087      	movs	r0, #135	; 0x87
   50e52:	f7ff bfe4 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e56 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   50e56:	2086      	movs	r0, #134	; 0x86
   50e58:	f7ff bfe1 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e5c <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   50e5c:	2085      	movs	r0, #133	; 0x85
   50e5e:	f7ff bfde 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e62 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   50e62:	2084      	movs	r0, #132	; 0x84
   50e64:	f7ff bfdb 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e68 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   50e68:	2083      	movs	r0, #131	; 0x83
   50e6a:	f7ff bfd8 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e6e <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   50e6e:	2082      	movs	r0, #130	; 0x82
   50e70:	f7ff bfd5 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e74 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   50e74:	2081      	movs	r0, #129	; 0x81
   50e76:	f7ff bfd2 	b.w	50e1e <nrf_usbd_epin_dma_handler>

00050e7a <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   50e7a:	f7f6 b9c3 	b.w	47204 <nrf_usbd_ep0in_dma_handler>

00050e7e <nrfx_usbd_ep_max_packet_size_set>:
{
   50e7e:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   50e80:	f7f6 f892 	bl	46fa8 <ep_state_access>
    p_state->max_packet_size = size;
   50e84:	8181      	strh	r1, [r0, #12]
}
   50e86:	bd08      	pop	{r3, pc}

00050e88 <nrfx_usbd_ep_status_get>:
{
   50e88:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   50e8a:	f7f6 f88d 	bl	46fa8 <ep_state_access>
	__asm__ volatile(
   50e8e:	f04f 0220 	mov.w	r2, #32
   50e92:	f3ef 8311 	mrs	r3, BASEPRI
   50e96:	f382 8812 	msr	BASEPRI_MAX, r2
   50e9a:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   50e9e:	6882      	ldr	r2, [r0, #8]
   50ea0:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   50ea2:	6802      	ldr	r2, [r0, #0]
   50ea4:	b92a      	cbnz	r2, 50eb2 <nrfx_usbd_ep_status_get+0x2a>
   50ea6:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   50ea8:	f383 8811 	msr	BASEPRI, r3
   50eac:	f3bf 8f6f 	isb	sy
}
   50eb0:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   50eb2:	2004      	movs	r0, #4
   50eb4:	e7f8      	b.n	50ea8 <nrfx_usbd_ep_status_get+0x20>

00050eb6 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   50eb6:	2007      	movs	r0, #7
   50eb8:	f7f6 bd16 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050ebc <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   50ebc:	2006      	movs	r0, #6
   50ebe:	f7f6 bd13 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050ec2 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   50ec2:	2005      	movs	r0, #5
   50ec4:	f7f6 bd10 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050ec8 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   50ec8:	2004      	movs	r0, #4
   50eca:	f7f6 bd0d 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050ece <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   50ece:	2003      	movs	r0, #3
   50ed0:	f7f6 bd0a 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050ed4 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   50ed4:	2002      	movs	r0, #2
   50ed6:	f7f6 bd07 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050eda <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   50eda:	2001      	movs	r0, #1
   50edc:	f7f6 bd04 	b.w	478e8 <nrf_usbd_epout_dma_handler>

00050ee0 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   50ee0:	f7f6 bdf8 	b.w	47ad4 <usbd_ep_abort>

00050ee4 <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   50ee4:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   50ee6:	7804      	ldrb	r4, [r0, #0]
   50ee8:	f36f 0441 	bfc	r4, #1, #1
   50eec:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   50eee:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   50ef2:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   50ef4:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   50ef6:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   50efa:	d109      	bne.n	50f10 <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   50efc:	42b2      	cmp	r2, r6
   50efe:	dd03      	ble.n	50f08 <debounce_update+0x24>
        state->counter = 0;
   50f00:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   50f04:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   50f06:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   50f08:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   50f0a:	f366 048f 	bfi	r4, r6, #2, #14
   50f0e:	e7f9      	b.n	50f04 <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   50f10:	e9d3 1300 	ldrd	r1, r3, [r3]
   50f14:	f014 0f01 	tst.w	r4, #1
   50f18:	bf08      	it	eq
   50f1a:	460b      	moveq	r3, r1
    if (state->counter < flip_threshold) {
   50f1c:	429e      	cmp	r6, r3
   50f1e:	d208      	bcs.n	50f32 <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   50f20:	4416      	add	r6, r2
   50f22:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   50f26:	d3f0      	bcc.n	50f0a <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   50f28:	f643 73ff 	movw	r3, #16383	; 0x3fff
   50f2c:	f363 048f 	bfi	r4, r3, #2, #14
   50f30:	e7e8      	b.n	50f04 <debounce_update+0x20>
    state->pressed = !state->pressed;
   50f32:	f085 0401 	eor.w	r4, r5, #1
   50f36:	f044 0402 	orr.w	r4, r4, #2
   50f3a:	e7e3      	b.n	50f04 <debounce_update+0x20>

00050f3c <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   50f3c:	8800      	ldrh	r0, [r0, #0]
   50f3e:	f020 0002 	bic.w	r0, r0, #2
   50f42:	b280      	uxth	r0, r0
}
   50f44:	3800      	subs	r0, #0
   50f46:	bf18      	it	ne
   50f48:	2001      	movne	r0, #1
   50f4a:	4770      	bx	lr

00050f4c <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   50f4c:	7800      	ldrb	r0, [r0, #0]
   50f4e:	f000 0001 	and.w	r0, r0, #1
   50f52:	4770      	bx	lr

00050f54 <debounce_get_changed>:

   50f54:	7800      	ldrb	r0, [r0, #0]
   50f56:	f3c0 0040 	ubfx	r0, r0, #1, #1
   50f5a:	4770      	bx	lr

00050f5c <gpio_pin_configure_dt>:
{
   50f5c:	b470      	push	{r4, r5, r6}
   50f5e:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   50f60:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
   50f62:	795a      	ldrb	r2, [r3, #5]
	return gpio_pin_configure(spec->port,
   50f64:	791d      	ldrb	r5, [r3, #4]
   50f66:	430a      	orrs	r2, r1
	struct gpio_driver_data *data =
   50f68:	6901      	ldr	r1, [r0, #16]
	const struct gpio_driver_api *api =
   50f6a:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   50f6c:	2301      	movs	r3, #1
   50f6e:	fa03 f405 	lsl.w	r4, r3, r5
   50f72:	680b      	ldr	r3, [r1, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   50f74:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   50f78:	bf14      	ite	ne
   50f7a:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   50f7c:	43a3      	biceq	r3, r4
   50f7e:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
   50f80:	6833      	ldr	r3, [r6, #0]
   50f82:	4629      	mov	r1, r5
}
   50f84:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   50f86:	4718      	bx	r3

00050f88 <gpio_pin_set_dt>:
{
   50f88:	4603      	mov	r3, r0
   50f8a:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   50f8c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   50f8e:	7919      	ldrb	r1, [r3, #4]
   50f90:	2301      	movs	r3, #1
   50f92:	fa03 f101 	lsl.w	r1, r3, r1
   50f96:	6903      	ldr	r3, [r0, #16]
   50f98:	681b      	ldr	r3, [r3, #0]
   50f9a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   50f9c:	bf18      	it	ne
   50f9e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   50fa2:	b112      	cbz	r2, 50faa <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   50fa4:	6883      	ldr	r3, [r0, #8]
   50fa6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   50fa8:	4718      	bx	r3
   50faa:	6883      	ldr	r3, [r0, #8]
   50fac:	691b      	ldr	r3, [r3, #16]
   50fae:	e7fb      	b.n	50fa8 <gpio_pin_set_dt+0x20>

00050fb0 <kscan_matrix_configure>:
    struct kscan_matrix_data *data = dev->data;
   50fb0:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   50fb2:	b111      	cbz	r1, 50fba <kscan_matrix_configure+0xa>
    data->callback = callback;
   50fb4:	6059      	str	r1, [r3, #4]
    return 0;
   50fb6:	2000      	movs	r0, #0
   50fb8:	4770      	bx	lr
        return -EINVAL;
   50fba:	f06f 0015 	mvn.w	r0, #21
}
   50fbe:	4770      	bx	lr

00050fc0 <kscan_matrix_interrupt_configure.isra.0>:
static int kscan_matrix_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   50fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50fc4:	4606      	mov	r6, r0
   50fc6:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   50fc8:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50fca:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   50fce:	f04f 0801 	mov.w	r8, #1
   50fd2:	6973      	ldr	r3, [r6, #20]
   50fd4:	42ab      	cmp	r3, r5
   50fd6:	d802      	bhi.n	50fde <kscan_matrix_interrupt_configure.isra.0+0x1e>
    return 0;
   50fd8:	2000      	movs	r0, #0
}
   50fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   50fde:	6933      	ldr	r3, [r6, #16]
   50fe0:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   50fe4:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   50fe8:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   50fea:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50fee:	b197      	cbz	r7, 51016 <kscan_matrix_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   50ff0:	6902      	ldr	r2, [r0, #16]
   50ff2:	6812      	ldr	r2, [r2, #0]
   50ff4:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50ff8:	4213      	tst	r3, r2
   50ffa:	d00c      	beq.n	51016 <kscan_matrix_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   50ffc:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   51000:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   51004:	f8dc 9018 	ldr.w	r9, [ip, #24]
   51008:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   5100c:	47c8      	blx	r9
        if (err) {
   5100e:	2800      	cmp	r0, #0
   51010:	d1e3      	bne.n	50fda <kscan_matrix_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   51012:	3501      	adds	r5, #1
   51014:	e7dd      	b.n	50fd2 <kscan_matrix_interrupt_configure.isra.0+0x12>
   51016:	4622      	mov	r2, r4
   51018:	e7f2      	b.n	51000 <kscan_matrix_interrupt_configure.isra.0+0x40>

0005101a <kscan_matrix_set_all_outputs.isra.0>:
static int kscan_matrix_set_all_outputs(const struct device *dev, const int value) {
   5101a:	b570      	push	{r4, r5, r6, lr}
   5101c:	4605      	mov	r5, r0
   5101e:	460e      	mov	r6, r1
    for (int i = 0; i < config->outputs.len; i++) {
   51020:	2400      	movs	r4, #0
   51022:	69eb      	ldr	r3, [r5, #28]
   51024:	42a3      	cmp	r3, r4
   51026:	d801      	bhi.n	5102c <kscan_matrix_set_all_outputs.isra.0+0x12>
    return 0;
   51028:	2000      	movs	r0, #0
}
   5102a:	bd70      	pop	{r4, r5, r6, pc}
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i];
   5102c:	69a8      	ldr	r0, [r5, #24]
        int err = gpio_pin_set_dt(gpio, value);
   5102e:	4631      	mov	r1, r6
   51030:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   51034:	f7ff ffa8 	bl	50f88 <gpio_pin_set_dt>
        if (err) {
   51038:	2800      	cmp	r0, #0
   5103a:	d1f6      	bne.n	5102a <kscan_matrix_set_all_outputs.isra.0+0x10>
    for (int i = 0; i < config->outputs.len; i++) {
   5103c:	3401      	adds	r4, #1
   5103e:	e7f0      	b.n	51022 <kscan_matrix_set_all_outputs.isra.0+0x8>

00051040 <kscan_matrix_read>:
static int kscan_matrix_read(const struct device *dev) {
   51040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   51044:	f8d0 a010 	ldr.w	sl, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   51048:	6845      	ldr	r5, [r0, #4]
static int kscan_matrix_read(const struct device *dev) {
   5104a:	b085      	sub	sp, #20
   5104c:	4606      	mov	r6, r0
    for (int o = 0; o < config->outputs.len; o++) {
   5104e:	2700      	movs	r7, #0
   51050:	69eb      	ldr	r3, [r5, #28]
   51052:	42bb      	cmp	r3, r7
   51054:	d838      	bhi.n	510c8 <kscan_matrix_read+0x88>
    for (int r = 0; r < config->rows.len; r++) {
   51056:	f04f 0800 	mov.w	r8, #0
    bool continue_scan = false;
   5105a:	4647      	mov	r7, r8
    for (int r = 0; r < config->rows.len; r++) {
   5105c:	686b      	ldr	r3, [r5, #4]
   5105e:	4598      	cmp	r8, r3
   51060:	f0c0 80a1 	bcc.w	511a6 <kscan_matrix_read+0x166>
    const struct kscan_matrix_config *config = dev->config;
   51064:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   51066:	2f00      	cmp	r7, #0
   51068:	f000 80a5 	beq.w	511b6 <kscan_matrix_read+0x176>
    struct kscan_matrix_data *data = dev->data;
   5106c:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   5106e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   51070:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   51074:	1818      	adds	r0, r3, r0
   51076:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   5107a:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   5107e:	03c9      	lsls	r1, r1, #15
   51080:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   51084:	f240 33e7 	movw	r3, #999	; 0x3e7
   51088:	03c0      	lsls	r0, r0, #15
   5108a:	18c0      	adds	r0, r0, r3
   5108c:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   51090:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   51094:	f171 0300 	sbcs.w	r3, r1, #0
   51098:	f104 0408 	add.w	r4, r4, #8
   5109c:	f0c0 8086 	bcc.w	511ac <kscan_matrix_read+0x16c>
   510a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   510a4:	2300      	movs	r3, #0
   510a6:	f7d5 f82b 	bl	26100 <__aeabi_uldivmod>
   510aa:	f06f 0201 	mvn.w	r2, #1
   510ae:	1a12      	subs	r2, r2, r0
   510b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   510b4:	eb63 0301 	sbc.w	r3, r3, r1
   510b8:	4620      	mov	r0, r4
   510ba:	f7f7 fe01 	bl	48cc0 <k_work_reschedule>
    return 0;
   510be:	2400      	movs	r4, #0
}
   510c0:	4620      	mov	r0, r4
   510c2:	b005      	add	sp, #20
   510c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *out_gpio = &config->outputs.gpios[o];
   510c8:	69ab      	ldr	r3, [r5, #24]
   510ca:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
        int err = gpio_pin_set_dt(out_gpio, 1);
   510ce:	2101      	movs	r1, #1
   510d0:	4648      	mov	r0, r9
   510d2:	f7ff ff59 	bl	50f88 <gpio_pin_set_dt>
        if (err) {
   510d6:	4604      	mov	r4, r0
   510d8:	2800      	cmp	r0, #0
   510da:	d1f1      	bne.n	510c0 <kscan_matrix_read+0x80>
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   510dc:	f105 0b20 	add.w	fp, r5, #32
        for (int i = 0; i < config->inputs.len; i++) {
   510e0:	696b      	ldr	r3, [r5, #20]
   510e2:	42a3      	cmp	r3, r4
   510e4:	d808      	bhi.n	510f8 <kscan_matrix_read+0xb8>
        err = gpio_pin_set_dt(out_gpio, 0);
   510e6:	2100      	movs	r1, #0
   510e8:	4648      	mov	r0, r9
   510ea:	f7ff ff4d 	bl	50f88 <gpio_pin_set_dt>
        if (err) {
   510ee:	4604      	mov	r4, r0
   510f0:	2800      	cmp	r0, #0
   510f2:	d1e5      	bne.n	510c0 <kscan_matrix_read+0x80>
    for (int o = 0; o < config->outputs.len; o++) {
   510f4:	3701      	adds	r7, #1
   510f6:	e7ab      	b.n	51050 <kscan_matrix_read+0x10>
            const struct gpio_dt_spec *in_gpio = &config->inputs.gpios[i];
   510f8:	692b      	ldr	r3, [r5, #16]
               : state_index_rc(config, input_idx, output_idx);
   510fa:	f895 c030 	ldrb.w	ip, [r5, #48]	; 0x30
    return (col * config->rows.len) + row;
   510fe:	686a      	ldr	r2, [r5, #4]
            const struct gpio_dt_spec *in_gpio = &config->inputs.gpios[i];
   51100:	00e0      	lsls	r0, r4, #3
   51102:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
               : state_index_rc(config, input_idx, output_idx);
   51106:	f1bc 0f00 	cmp.w	ip, #0
   5110a:	d124      	bne.n	51156 <kscan_matrix_read+0x116>
    return (col * config->rows.len) + row;
   5110c:	fb02 7804 	mla	r8, r2, r4, r7
	return gpio_pin_get(spec->port, spec->pin);
   51110:	5818      	ldr	r0, [r3, r0]
   51112:	790b      	ldrb	r3, [r1, #4]
   51114:	9301      	str	r3, [sp, #4]
	const struct gpio_driver_data *const data =
   51116:	6903      	ldr	r3, [r0, #16]
   51118:	9300      	str	r3, [sp, #0]
	return api->port_get_raw(port, value);
   5111a:	6882      	ldr	r2, [r0, #8]
   5111c:	a903      	add	r1, sp, #12
   5111e:	6852      	ldr	r2, [r2, #4]
   51120:	4790      	blx	r2
	if (ret == 0) {
   51122:	b958      	cbnz	r0, 5113c <kscan_matrix_read+0xfc>
		*value ^= data->invert;
   51124:	9b00      	ldr	r3, [sp, #0]
   51126:	9903      	ldr	r1, [sp, #12]
   51128:	681a      	ldr	r2, [r3, #0]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   5112a:	9b01      	ldr	r3, [sp, #4]
		*value ^= data->invert;
   5112c:	404a      	eors	r2, r1
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   5112e:	2101      	movs	r1, #1
   51130:	fa01 f303 	lsl.w	r3, r1, r3
   51134:	421a      	tst	r2, r3
   51136:	bf14      	ite	ne
   51138:	4608      	movne	r0, r1
   5113a:	2000      	moveq	r0, #0
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   5113c:	1e01      	subs	r1, r0, #0
   5113e:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
   51142:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   51144:	465b      	mov	r3, fp
   51146:	bf18      	it	ne
   51148:	2101      	movne	r1, #1
   5114a:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   5114e:	f7ff fec9 	bl	50ee4 <debounce_update>
        for (int i = 0; i < config->inputs.len; i++) {
   51152:	3401      	adds	r4, #1
   51154:	e7c4      	b.n	510e0 <kscan_matrix_read+0xa0>
    return (col * config->rows.len) + row;
   51156:	fb02 4807 	mla	r8, r2, r7, r4
   5115a:	e7d9      	b.n	51110 <kscan_matrix_read+0xd0>
   5115c:	fb03 8b09 	mla	fp, r3, r9, r8
            struct debounce_state *state = &data->matrix_state[index];
   51160:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
   51164:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
            if (debounce_get_changed(state)) {
   51168:	4658      	mov	r0, fp
   5116a:	f7ff fef3 	bl	50f54 <debounce_get_changed>
   5116e:	b148      	cbz	r0, 51184 <kscan_matrix_read+0x144>
                const bool pressed = debounce_is_pressed(state);
   51170:	4658      	mov	r0, fp
   51172:	f7ff feeb 	bl	50f4c <debounce_is_pressed>
                data->callback(dev, r, c, pressed);
   51176:	f8da 4004 	ldr.w	r4, [sl, #4]
                const bool pressed = debounce_is_pressed(state);
   5117a:	4603      	mov	r3, r0
                data->callback(dev, r, c, pressed);
   5117c:	464a      	mov	r2, r9
   5117e:	4641      	mov	r1, r8
   51180:	4630      	mov	r0, r6
   51182:	47a0      	blx	r4
            continue_scan = continue_scan || debounce_is_active(state);
   51184:	b96f      	cbnz	r7, 511a2 <kscan_matrix_read+0x162>
   51186:	4658      	mov	r0, fp
   51188:	f7ff fed8 	bl	50f3c <debounce_is_active>
   5118c:	f000 0701 	and.w	r7, r0, #1
        for (int c = 0; c < config->cols.len; c++) {
   51190:	f109 0901 	add.w	r9, r9, #1
   51194:	68ea      	ldr	r2, [r5, #12]
    return (col * config->rows.len) + row;
   51196:	686b      	ldr	r3, [r5, #4]
        for (int c = 0; c < config->cols.len; c++) {
   51198:	454a      	cmp	r2, r9
   5119a:	d8df      	bhi.n	5115c <kscan_matrix_read+0x11c>
    for (int r = 0; r < config->rows.len; r++) {
   5119c:	f108 0801 	add.w	r8, r8, #1
   511a0:	e75c      	b.n	5105c <kscan_matrix_read+0x1c>
            continue_scan = continue_scan || debounce_is_active(state);
   511a2:	2001      	movs	r0, #1
   511a4:	e7f2      	b.n	5118c <kscan_matrix_read+0x14c>
        for (int c = 0; c < config->cols.len; c++) {
   511a6:	f04f 0900 	mov.w	r9, #0
   511aa:	e7f3      	b.n	51194 <kscan_matrix_read+0x154>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   511ac:	f06f 0201 	mvn.w	r2, #1
   511b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   511b4:	e780      	b.n	510b8 <kscan_matrix_read+0x78>
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   511b6:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   511ba:	f7ff ff01 	bl	50fc0 <kscan_matrix_interrupt_configure.isra.0>
    if (err) {
   511be:	4604      	mov	r4, r0
   511c0:	b920      	cbnz	r0, 511cc <kscan_matrix_read+0x18c>
    return kscan_matrix_set_all_outputs(dev, 1);
   511c2:	6870      	ldr	r0, [r6, #4]
   511c4:	2101      	movs	r1, #1
   511c6:	f7ff ff28 	bl	5101a <kscan_matrix_set_all_outputs.isra.0>
   511ca:	e779      	b.n	510c0 <kscan_matrix_read+0x80>
    return 0;
   511cc:	463c      	mov	r4, r7
   511ce:	e777      	b.n	510c0 <kscan_matrix_read+0x80>

000511d0 <kscan_matrix_work_handler>:
    kscan_matrix_read(data->dev);
   511d0:	f850 0c08 	ldr.w	r0, [r0, #-8]
   511d4:	f7ff bf34 	b.w	51040 <kscan_matrix_read>

000511d8 <kscan_matrix_interrupt_disable>:
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   511d8:	b510      	push	{r4, lr}
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   511da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   511de:	4604      	mov	r4, r0
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   511e0:	6840      	ldr	r0, [r0, #4]
   511e2:	f7ff feed 	bl	50fc0 <kscan_matrix_interrupt_configure.isra.0>
   511e6:	4601      	mov	r1, r0
    if (err) {
   511e8:	b920      	cbnz	r0, 511f4 <kscan_matrix_interrupt_disable+0x1c>
    return kscan_matrix_set_all_outputs(dev, 0);
   511ea:	6860      	ldr	r0, [r4, #4]
}
   511ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_set_all_outputs(dev, 0);
   511f0:	f7ff bf13 	b.w	5101a <kscan_matrix_set_all_outputs.isra.0>
}
   511f4:	bd10      	pop	{r4, pc}

000511f6 <kscan_matrix_irq_callback_handler>:
    struct kscan_matrix_data *data = irq_data->dev->data;
   511f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   511fa:	b510      	push	{r4, lr}
    struct kscan_matrix_data *data = irq_data->dev->data;
   511fc:	691c      	ldr	r4, [r3, #16]
    kscan_matrix_interrupt_disable(data->dev);
   511fe:	6820      	ldr	r0, [r4, #0]
   51200:	f7ff ffea 	bl	511d8 <kscan_matrix_interrupt_disable>
	return z_impl_k_uptime_ticks();
   51204:	f000 fd62 	bl	51ccc <z_impl_k_uptime_ticks>
   51208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   5120c:	fba0 0302 	umull	r0, r3, r0, r2
   51210:	fb02 3101 	mla	r1, r2, r1, r3
   51214:	0bc0      	lsrs	r0, r0, #15
   51216:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   5121a:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   5121c:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   51220:	2200      	movs	r2, #0
   51222:	f104 0008 	add.w	r0, r4, #8
   51226:	2300      	movs	r3, #0
}
   51228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   5122c:	f7f7 bd48 	b.w	48cc0 <k_work_reschedule>

00051230 <kscan_matrix_disable>:
static int kscan_matrix_disable(const struct device *dev) {
   51230:	b510      	push	{r4, lr}
   51232:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   51234:	6900      	ldr	r0, [r0, #16]
   51236:	3008      	adds	r0, #8
   51238:	f000 fbb3 	bl	519a2 <k_work_cancel_delayable>
    return kscan_matrix_interrupt_disable(dev);
   5123c:	4620      	mov	r0, r4
}
   5123e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_interrupt_disable(dev);
   51242:	f7ff bfc9 	b.w	511d8 <kscan_matrix_interrupt_disable>

00051246 <kscan_matrix_enable>:
static int kscan_matrix_enable(const struct device *dev) {
   51246:	b570      	push	{r4, r5, r6, lr}
    struct kscan_matrix_data *data = dev->data;
   51248:	6906      	ldr	r6, [r0, #16]
static int kscan_matrix_enable(const struct device *dev) {
   5124a:	4604      	mov	r4, r0
   5124c:	f000 fd3e 	bl	51ccc <z_impl_k_uptime_ticks>
   51250:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   51254:	fba0 3205 	umull	r3, r2, r0, r5
   51258:	fb05 2101 	mla	r1, r5, r1, r2
   5125c:	0bdb      	lsrs	r3, r3, #15
   5125e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   51262:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   51264:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_matrix_read(dev);
   51268:	4620      	mov	r0, r4
}
   5126a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_matrix_read(dev);
   5126e:	f7ff bee7 	b.w	51040 <kscan_matrix_read>

00051272 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   51272:	2927      	cmp	r1, #39	; 0x27
   51274:	d004      	beq.n	51280 <battery_channel_get+0xe>
   51276:	292c      	cmp	r1, #44	; 0x2c
   51278:	d00f      	beq.n	5129a <battery_channel_get+0x28>
   5127a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   5127e:	4770      	bx	lr
    case SENSOR_CHAN_GAUGE_VOLTAGE:
        val_out->val1 = value->millivolts / 1000;
   51280:	8843      	ldrh	r3, [r0, #2]
   51282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   51286:	fbb3 f0f1 	udiv	r0, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   5128a:	fb01 3310 	mls	r3, r1, r0, r3
   5128e:	b29b      	uxth	r3, r3
   51290:	434b      	muls	r3, r1
        val_out->val1 = value->millivolts / 1000;
   51292:	6010      	str	r0, [r2, #0]
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   51294:	6053      	str	r3, [r2, #4]

    default:
        return -ENOTSUP;
    }

    return 0;
   51296:	2000      	movs	r0, #0
        break;
   51298:	4770      	bx	lr
        val_out->val1 = value->state_of_charge;
   5129a:	7903      	ldrb	r3, [r0, #4]
   5129c:	6013      	str	r3, [r2, #0]
        val_out->val2 = 0;
   5129e:	2000      	movs	r0, #0
   512a0:	6050      	str	r0, [r2, #4]
}
   512a2:	4770      	bx	lr

000512a4 <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   512a4:	f241 0367 	movw	r3, #4199	; 0x1067
   512a8:	4298      	cmp	r0, r3
   512aa:	dc0a      	bgt.n	512c2 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   512ac:	f640 537a 	movw	r3, #3450	; 0xd7a
   512b0:	4298      	cmp	r0, r3
   512b2:	dd08      	ble.n	512c6 <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   512b4:	230f      	movs	r3, #15
   512b6:	0040      	lsls	r0, r0, #1
   512b8:	fbb0 f0f3 	udiv	r0, r0, r3
   512bc:	3035      	adds	r0, #53	; 0x35
   512be:	b2c0      	uxtb	r0, r0
   512c0:	4770      	bx	lr
        return 100;
   512c2:	2064      	movs	r0, #100	; 0x64
   512c4:	4770      	bx	lr
        return 0;
   512c6:	2000      	movs	r0, #0
   512c8:	4770      	bx	lr

000512ca <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   512ca:	6900      	ldr	r0, [r0, #16]
   512cc:	301c      	adds	r0, #28
   512ce:	f7ff bfd0 	b.w	51272 <battery_channel_get>

000512d2 <z_impl_gpio_pin_configure>:
{
   512d2:	b470      	push	{r4, r5, r6}
	struct gpio_driver_data *data =
   512d4:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   512d6:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   512d8:	682b      	ldr	r3, [r5, #0]
   512da:	2401      	movs	r4, #1
   512dc:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   512de:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   512e2:	bf14      	ite	ne
   512e4:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   512e6:	43a3      	biceq	r3, r4
   512e8:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   512ea:	6833      	ldr	r3, [r6, #0]
}
   512ec:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   512ee:	4718      	bx	r3

000512f0 <gpio_pin_get>:
{
   512f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
   512f2:	6905      	ldr	r5, [r0, #16]
{
   512f4:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   512f6:	6883      	ldr	r3, [r0, #8]
   512f8:	a901      	add	r1, sp, #4
   512fa:	685b      	ldr	r3, [r3, #4]
   512fc:	4798      	blx	r3
	if (ret == 0) {
   512fe:	b948      	cbnz	r0, 51314 <gpio_pin_get+0x24>
		*value ^= data->invert;
   51300:	9b01      	ldr	r3, [sp, #4]
   51302:	682a      	ldr	r2, [r5, #0]
   51304:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   51306:	2301      	movs	r3, #1
   51308:	fa03 f104 	lsl.w	r1, r3, r4
   5130c:	420a      	tst	r2, r1
   5130e:	bf14      	ite	ne
   51310:	4618      	movne	r0, r3
   51312:	2000      	moveq	r0, #0
}
   51314:	b003      	add	sp, #12
   51316:	bd30      	pop	{r4, r5, pc}

00051318 <ec11_get_ab_state>:

#include "ec11.h"

LOG_MODULE_REGISTER(EC11, CONFIG_SENSOR_LOG_LEVEL);

static int ec11_get_ab_state(const struct device *dev) {
   51318:	b570      	push	{r4, r5, r6, lr}
    struct ec11_data *drv_data = dev->data;
    const struct ec11_config *drv_cfg = dev->config;
   5131a:	6846      	ldr	r6, [r0, #4]
    struct ec11_data *drv_data = dev->data;
   5131c:	6905      	ldr	r5, [r0, #16]

    return (gpio_pin_get(drv_data->a, drv_cfg->a_pin) << 1) |
   5131e:	7931      	ldrb	r1, [r6, #4]
   51320:	6828      	ldr	r0, [r5, #0]
   51322:	f7ff ffe5 	bl	512f0 <gpio_pin_get>
           gpio_pin_get(drv_data->b, drv_cfg->b_pin);
   51326:	7b31      	ldrb	r1, [r6, #12]
    return (gpio_pin_get(drv_data->a, drv_cfg->a_pin) << 1) |
   51328:	4604      	mov	r4, r0
           gpio_pin_get(drv_data->b, drv_cfg->b_pin);
   5132a:	6868      	ldr	r0, [r5, #4]
   5132c:	f7ff ffe0 	bl	512f0 <gpio_pin_get>
}
   51330:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
   51334:	bd70      	pop	{r4, r5, r6, pc}

00051336 <ec11_sample_fetch>:

static int ec11_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   51336:	b538      	push	{r3, r4, r5, lr}
    struct ec11_data *drv_data = dev->data;
   51338:	6904      	ldr	r4, [r0, #16]
    const struct ec11_config *drv_cfg = dev->config;
   5133a:	6845      	ldr	r5, [r0, #4]
    uint8_t val;
    int8_t delta;

    __ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL || chan == SENSOR_CHAN_ROTATION);

    val = ec11_get_ab_state(dev);
   5133c:	f7ff ffec 	bl	51318 <ec11_get_ab_state>

    LOG_DBG("prev: %d, new: %d", drv_data->ab_state, val);

    switch (val | (drv_data->ab_state << 2)) {
   51340:	7a23      	ldrb	r3, [r4, #8]
    val = ec11_get_ab_state(dev);
   51342:	b2c0      	uxtb	r0, r0
    switch (val | (drv_data->ab_state << 2)) {
   51344:	ea40 0383 	orr.w	r3, r0, r3, lsl #2
   51348:	3b01      	subs	r3, #1
   5134a:	2b0d      	cmp	r3, #13
   5134c:	d817      	bhi.n	5137e <ec11_sample_fetch+0x48>
   5134e:	e8df f003 	tbb	[pc, r3]
   51352:	1807      	.short	0x1807
   51354:	16161816 	.word	0x16161816
   51358:	16160707 	.word	0x16160707
   5135c:	07181618 	.word	0x07181618
   51360:	2201      	movs	r2, #1
        break;
    }

    LOG_DBG("Delta: %d", delta);

    drv_data->pulses += delta;
   51362:	7a63      	ldrb	r3, [r4, #9]
    drv_data->ab_state = val;
   51364:	7220      	strb	r0, [r4, #8]

    drv_data->ticks = drv_data->pulses / drv_cfg->resolution;
   51366:	7ba8      	ldrb	r0, [r5, #14]
    drv_data->delta = delta;
   51368:	72e2      	strb	r2, [r4, #11]
    drv_data->pulses += delta;
   5136a:	4413      	add	r3, r2
   5136c:	b25b      	sxtb	r3, r3
    drv_data->ticks = drv_data->pulses / drv_cfg->resolution;
   5136e:	fb93 f1f0 	sdiv	r1, r3, r0
    drv_data->pulses %= drv_cfg->resolution;
   51372:	fb00 3311 	mls	r3, r0, r1, r3
    drv_data->ticks = drv_data->pulses / drv_cfg->resolution;
   51376:	72a1      	strb	r1, [r4, #10]
    drv_data->pulses %= drv_cfg->resolution;
   51378:	7263      	strb	r3, [r4, #9]

    return 0;
}
   5137a:	2000      	movs	r0, #0
   5137c:	bd38      	pop	{r3, r4, r5, pc}
        delta = 0;
   5137e:	2200      	movs	r2, #0
        break;
   51380:	e7ef      	b.n	51362 <ec11_sample_fetch+0x2c>
        delta = -1;
   51382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   51386:	e7ec      	b.n	51362 <ec11_sample_fetch+0x2c>

00051388 <ec11_channel_get>:

static int ec11_channel_get(const struct device *dev, enum sensor_channel chan,
                            struct sensor_value *val) {
    struct ec11_data *drv_data = dev->data;
   51388:	6903      	ldr	r3, [r0, #16]

    if (chan != SENSOR_CHAN_ROTATION) {
   5138a:	2922      	cmp	r1, #34	; 0x22
        return -ENOTSUP;
    }

    val->val1 = drv_data->ticks;
   5138c:	bf01      	itttt	eq
   5138e:	f993 100a 	ldrsbeq.w	r1, [r3, #10]
   51392:	6011      	streq	r1, [r2, #0]
    val->val2 = drv_data->delta;
   51394:	f993 300b 	ldrsbeq.w	r3, [r3, #11]
   51398:	6053      	streq	r3, [r2, #4]

    return 0;
   5139a:	bf0c      	ite	eq
   5139c:	2000      	moveq	r0, #0
        return -ENOTSUP;
   5139e:	f06f 0085 	mvnne.w	r0, #133	; 0x85
}
   513a2:	4770      	bx	lr

000513a4 <ec11_init>:
#endif
    .sample_fetch = ec11_sample_fetch,
    .channel_get = ec11_channel_get,
};

int ec11_init(const struct device *dev) {
   513a4:	b570      	push	{r4, r5, r6, lr}
    struct ec11_data *drv_data = dev->data;
    const struct ec11_config *drv_cfg = dev->config;
   513a6:	6844      	ldr	r4, [r0, #4]
    struct ec11_data *drv_data = dev->data;
   513a8:	6906      	ldr	r6, [r0, #16]
int ec11_init(const struct device *dev) {
   513aa:	4605      	mov	r5, r0

    LOG_DBG("A: %s %d B: %s %d resolution %d", drv_cfg->a_label, drv_cfg->a_pin, drv_cfg->b_label,
            drv_cfg->b_pin, drv_cfg->resolution);

    drv_data->a = device_get_binding(drv_cfg->a_label);
   513ac:	6820      	ldr	r0, [r4, #0]
   513ae:	f7f6 feb7 	bl	48120 <z_impl_device_get_binding>
   513b2:	6030      	str	r0, [r6, #0]
    if (drv_data->a == NULL) {
   513b4:	b918      	cbnz	r0, 513be <ec11_init+0x1a>
        LOG_ERR("Failed to get pointer to A GPIO device");
        return -EINVAL;
   513b6:	f06f 0415 	mvn.w	r4, #21
#endif

    drv_data->ab_state = ec11_get_ab_state(dev);

    return 0;
}
   513ba:	4620      	mov	r0, r4
   513bc:	bd70      	pop	{r4, r5, r6, pc}
    drv_data->b = device_get_binding(drv_cfg->b_label);
   513be:	68a0      	ldr	r0, [r4, #8]
   513c0:	f7f6 feae 	bl	48120 <z_impl_device_get_binding>
   513c4:	6070      	str	r0, [r6, #4]
    if (drv_data->b == NULL) {
   513c6:	2800      	cmp	r0, #0
   513c8:	d0f5      	beq.n	513b6 <ec11_init+0x12>
    if (gpio_pin_configure(drv_data->a, drv_cfg->a_pin, drv_cfg->a_flags | GPIO_INPUT)) {
   513ca:	7962      	ldrb	r2, [r4, #5]
   513cc:	6830      	ldr	r0, [r6, #0]
   513ce:	7921      	ldrb	r1, [r4, #4]
   513d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   513d4:	f7ff ff7d 	bl	512d2 <z_impl_gpio_pin_configure>
   513d8:	b110      	cbz	r0, 513e0 <ec11_init+0x3c>
        return -EIO;
   513da:	f06f 0404 	mvn.w	r4, #4
   513de:	e7ec      	b.n	513ba <ec11_init+0x16>
    if (gpio_pin_configure(drv_data->b, drv_cfg->b_pin, drv_cfg->b_flags | GPIO_INPUT)) {
   513e0:	7b62      	ldrb	r2, [r4, #13]
   513e2:	6870      	ldr	r0, [r6, #4]
   513e4:	7b21      	ldrb	r1, [r4, #12]
   513e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   513ea:	f7ff ff72 	bl	512d2 <z_impl_gpio_pin_configure>
   513ee:	4604      	mov	r4, r0
   513f0:	2800      	cmp	r0, #0
   513f2:	d1f2      	bne.n	513da <ec11_init+0x36>
    if (ec11_init_interrupt(dev) < 0) {
   513f4:	4628      	mov	r0, r5
   513f6:	f7f6 fe3d 	bl	48074 <ec11_init_interrupt>
   513fa:	2800      	cmp	r0, #0
   513fc:	dbed      	blt.n	513da <ec11_init+0x36>
    drv_data->ab_state = ec11_get_ab_state(dev);
   513fe:	4628      	mov	r0, r5
   51400:	f7ff ff8a 	bl	51318 <ec11_get_ab_state>
   51404:	7230      	strb	r0, [r6, #8]
    return 0;
   51406:	e7d8      	b.n	513ba <ec11_init+0x16>

00051408 <z_impl_gpio_pin_interrupt_configure.isra.0>:
	return api->pin_interrupt_configure(port, pin, mode, trig);
   51408:	6883      	ldr	r3, [r0, #8]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   5140a:	b410      	push	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   5140c:	699c      	ldr	r4, [r3, #24]
   5140e:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   51412:	46a4      	mov	ip, r4
   51414:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   51418:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   5141a:	4760      	bx	ip

0005141c <setup_int>:
static inline void setup_int(const struct device *dev, bool enable) {
   5141c:	b570      	push	{r4, r5, r6, lr}
    const struct ec11_config *cfg = dev->config;
   5141e:	6845      	ldr	r5, [r0, #4]
    struct ec11_data *data = dev->data;
   51420:	6906      	ldr	r6, [r0, #16]
    if (gpio_pin_interrupt_configure(data->a, cfg->a_pin,
   51422:	792b      	ldrb	r3, [r5, #4]
   51424:	6830      	ldr	r0, [r6, #0]
   51426:	2900      	cmp	r1, #0
   51428:	bf14      	ite	ne
   5142a:	f44f 24e8 	movne.w	r4, #475136	; 0x74000
   5142e:	f44f 5400 	moveq.w	r4, #8192	; 0x2000
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   51432:	4619      	mov	r1, r3
   51434:	4622      	mov	r2, r4
   51436:	f7ff ffe7 	bl	51408 <z_impl_gpio_pin_interrupt_configure.isra.0>
    if (gpio_pin_interrupt_configure(data->b, cfg->b_pin,
   5143a:	6870      	ldr	r0, [r6, #4]
   5143c:	7b29      	ldrb	r1, [r5, #12]
   5143e:	4622      	mov	r2, r4
}
   51440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   51444:	f7ff bfe0 	b.w	51408 <z_impl_gpio_pin_interrupt_configure.isra.0>

00051448 <ec11_work_cb>:
static void ec11_work_cb(struct k_work *work) {
   51448:	b510      	push	{r4, lr}
    ec11_thread_cb(drv_data->dev);
   5144a:	f850 4c0c 	ldr.w	r4, [r0, #-12]
    struct ec11_data *drv_data = dev->data;
   5144e:	6923      	ldr	r3, [r4, #16]
    drv_data->handler(dev, drv_data->trigger);
   51450:	4620      	mov	r0, r4
   51452:	e9d3 210a 	ldrd	r2, r1, [r3, #40]	; 0x28
   51456:	4790      	blx	r2
    setup_int(dev, true);
   51458:	4620      	mov	r0, r4
   5145a:	2101      	movs	r1, #1
}
   5145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setup_int(dev, true);
   51460:	f7ff bfdc 	b.w	5141c <setup_int>

00051464 <ec11_b_gpio_callback>:
                                 uint32_t pins) {
   51464:	b510      	push	{r4, lr}
   51466:	460c      	mov	r4, r1
    setup_int(drv_data->dev, false);
   51468:	2100      	movs	r1, #0
   5146a:	68e0      	ldr	r0, [r4, #12]
   5146c:	f7ff ffd6 	bl	5141c <setup_int>
    k_work_submit(&drv_data->work);
   51470:	f104 0018 	add.w	r0, r4, #24
}
   51474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_submit(&drv_data->work);
   51478:	f7f7 bb86 	b.w	48b88 <k_work_submit>

0005147c <ec11_a_gpio_callback>:
                                 uint32_t pins) {
   5147c:	b510      	push	{r4, lr}
   5147e:	460c      	mov	r4, r1
    setup_int(drv_data->dev, false);
   51480:	2100      	movs	r1, #0
   51482:	69a0      	ldr	r0, [r4, #24]
   51484:	f7ff ffca 	bl	5141c <setup_int>
    k_work_submit(&drv_data->work);
   51488:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   5148c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_submit(&drv_data->work);
   51490:	f7f7 bb7a 	b.w	48b88 <k_work_submit>

00051494 <ec11_trigger_set>:
                     sensor_trigger_handler_t handler) {
   51494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   51496:	460e      	mov	r6, r1
    setup_int(dev, false);
   51498:	2100      	movs	r1, #0
    struct ec11_data *drv_data = dev->data;
   5149a:	6907      	ldr	r7, [r0, #16]
                     sensor_trigger_handler_t handler) {
   5149c:	4604      	mov	r4, r0
   5149e:	4615      	mov	r5, r2
    setup_int(dev, false);
   514a0:	f7ff ffbc 	bl	5141c <setup_int>
	return z_impl_k_sleep(timeout);
   514a4:	2100      	movs	r1, #0
   514a6:	20a4      	movs	r0, #164	; 0xa4
   514a8:	f7f7 fee6 	bl	49278 <z_impl_k_sleep>
    setup_int(dev, true);
   514ac:	4620      	mov	r0, r4
    drv_data->handler = handler;
   514ae:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28
    setup_int(dev, true);
   514b2:	2101      	movs	r1, #1
   514b4:	f7ff ffb2 	bl	5141c <setup_int>
}
   514b8:	2000      	movs	r0, #0
   514ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000514bc <z_device_state_init>:
}
   514bc:	4770      	bx	lr

000514be <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   514be:	b138      	cbz	r0, 514d0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   514c0:	68c3      	ldr	r3, [r0, #12]
   514c2:	8818      	ldrh	r0, [r3, #0]
   514c4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   514c8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   514cc:	4258      	negs	r0, r3
   514ce:	4158      	adcs	r0, r3
}
   514d0:	4770      	bx	lr

000514d2 <arch_system_halt>:
	__asm__ volatile(
   514d2:	f04f 0220 	mov.w	r2, #32
   514d6:	f3ef 8311 	mrs	r3, BASEPRI
   514da:	f382 8812 	msr	BASEPRI_MAX, r2
   514de:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   514e2:	e7fe      	b.n	514e2 <arch_system_halt+0x10>

000514e4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   514e4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   514e6:	f7ff fff4 	bl	514d2 <arch_system_halt>

000514ea <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   514ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   514ec:	4605      	mov	r5, r0
   514ee:	460e      	mov	r6, r1
   514f0:	f04f 0320 	mov.w	r3, #32
   514f4:	f3ef 8711 	mrs	r7, BASEPRI
   514f8:	f383 8812 	msr	BASEPRI_MAX, r3
   514fc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   51500:	f7f7 fed4 	bl	492ac <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   51504:	4631      	mov	r1, r6
   51506:	4604      	mov	r4, r0
   51508:	4628      	mov	r0, r5
   5150a:	f7ff ffeb 	bl	514e4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   5150e:	f387 8811 	msr	BASEPRI, r7
   51512:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   51516:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   51518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   5151c:	f7dc b904 	b.w	2d728 <z_impl_k_thread_abort>

00051520 <k_heap_init>:
{
   51520:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   51522:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   51526:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   5152a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   5152c:	f7f9 ba72 	b.w	4aa14 <sys_heap_init>

00051530 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   51530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51534:	b085      	sub	sp, #20
   51536:	4606      	mov	r6, r0
   51538:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5153a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   5153e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   51540:	f000 fbca 	bl	51cd8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   51544:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   51548:	4605      	mov	r5, r0
   5154a:	460f      	mov	r7, r1
	__asm__ volatile(
   5154c:	f04f 0320 	mov.w	r3, #32
   51550:	f3ef 8411 	mrs	r4, BASEPRI
   51554:	f383 8812 	msr	BASEPRI_MAX, r3
   51558:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5155c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   51560:	464a      	mov	r2, r9
   51562:	4641      	mov	r1, r8
   51564:	4630      	mov	r0, r6
   51566:	f7f9 f9ed 	bl	4a944 <sys_heap_aligned_alloc>
   5156a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   5156c:	f7f8 f852 	bl	49614 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   51570:	9b03      	ldr	r3, [sp, #12]
   51572:	b13b      	cbz	r3, 51584 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   51574:	f384 8811 	msr	BASEPRI, r4
   51578:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   5157c:	4618      	mov	r0, r3
   5157e:	b005      	add	sp, #20
   51580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   51584:	1a28      	subs	r0, r5, r0
   51586:	eb67 0101 	sbc.w	r1, r7, r1
   5158a:	2801      	cmp	r0, #1
   5158c:	f171 0200 	sbcs.w	r2, r1, #0
   51590:	dbf0      	blt.n	51574 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   51592:	e9cd 0100 	strd	r0, r1, [sp]
   51596:	465a      	mov	r2, fp
   51598:	4621      	mov	r1, r4
   5159a:	4650      	mov	r0, sl
   5159c:	f7f7 fd2e 	bl	48ffc <z_pend_curr>
	__asm__ volatile(
   515a0:	f04f 0320 	mov.w	r3, #32
   515a4:	f3ef 8411 	mrs	r4, BASEPRI
   515a8:	f383 8812 	msr	BASEPRI_MAX, r3
   515ac:	f3bf 8f6f 	isb	sy
   515b0:	e7d6      	b.n	51560 <k_heap_aligned_alloc+0x30>

000515b2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   515b2:	b538      	push	{r3, r4, r5, lr}
   515b4:	4604      	mov	r4, r0
   515b6:	f04f 0320 	mov.w	r3, #32
   515ba:	f3ef 8511 	mrs	r5, BASEPRI
   515be:	f383 8812 	msr	BASEPRI_MAX, r3
   515c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   515c6:	f7f9 f985 	bl	4a8d4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   515ca:	f104 000c 	add.w	r0, r4, #12
   515ce:	f000 fb0c 	bl	51bea <z_unpend_all>
   515d2:	b130      	cbz	r0, 515e2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   515d4:	4629      	mov	r1, r5
   515d6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   515da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   515de:	f7f7 bbbb 	b.w	48d58 <z_reschedule>
	__asm__ volatile(
   515e2:	f385 8811 	msr	BASEPRI, r5
   515e6:	f3bf 8f6f 	isb	sy
}
   515ea:	bd38      	pop	{r3, r4, r5, pc}

000515ec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   515ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   515ee:	4604      	mov	r4, r0
   515f0:	460d      	mov	r5, r1
	__asm__ volatile(
   515f2:	f04f 0320 	mov.w	r3, #32
   515f6:	f3ef 8611 	mrs	r6, BASEPRI
   515fa:	f383 8812 	msr	BASEPRI_MAX, r3
   515fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   51602:	6947      	ldr	r7, [r0, #20]
   51604:	b977      	cbnz	r7, 51624 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   51606:	f000 fad8 	bl	51bba <z_unpend_first_thread>

		if (pending_thread != NULL) {
   5160a:	b158      	cbz	r0, 51624 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   5160c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   5160e:	6142      	str	r2, [r0, #20]
   51610:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   51612:	f000 fa61 	bl	51ad8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   51616:	4631      	mov	r1, r6
   51618:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   5161c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   51620:	f7f7 bb9a 	b.w	48d58 <z_reschedule>
	**(char ***) mem = slab->free_list;
   51624:	682b      	ldr	r3, [r5, #0]
   51626:	6962      	ldr	r2, [r4, #20]
   51628:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   5162a:	682b      	ldr	r3, [r5, #0]
   5162c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   5162e:	69a3      	ldr	r3, [r4, #24]
   51630:	3b01      	subs	r3, #1
   51632:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   51634:	f386 8811 	msr	BASEPRI, r6
   51638:	f3bf 8f6f 	isb	sy
}
   5163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005163e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   5163e:	f3ef 8005 	mrs	r0, IPSR
}
   51642:	3800      	subs	r0, #0
   51644:	bf18      	it	ne
   51646:	2001      	movne	r0, #1
   51648:	4770      	bx	lr

0005164a <z_impl_k_thread_name_set>:
}
   5164a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   5164e:	4770      	bx	lr

00051650 <z_impl_k_thread_start>:
	z_sched_start(thread);
   51650:	f7f7 bc78 	b.w	48f44 <z_sched_start>

00051654 <z_pm_save_idle_exit>:
{
   51654:	b508      	push	{r3, lr}
	pm_system_resume();
   51656:	f7db fbd3 	bl	2ce00 <pm_system_resume>
}
   5165a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   5165e:	f7ff bad0 	b.w	50c02 <sys_clock_idle_exit>

00051662 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   51662:	f990 300e 	ldrsb.w	r3, [r0, #14]
   51666:	428b      	cmp	r3, r1
   51668:	d001      	beq.n	5166e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   5166a:	f7f7 bcdb 	b.w	49024 <z_set_prio>
}
   5166e:	2000      	movs	r0, #0
   51670:	4770      	bx	lr

00051672 <z_impl_k_mutex_init>:
{
   51672:	4603      	mov	r3, r0
	mutex->owner = NULL;
   51674:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   51676:	e9c3 0002 	strd	r0, r0, [r3, #8]
   5167a:	e9c3 3300 	strd	r3, r3, [r3]
}
   5167e:	4770      	bx	lr

00051680 <queue_insert>:
{
   51680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   51684:	4699      	mov	r9, r3
   51686:	4604      	mov	r4, r0
   51688:	f89d 3020 	ldrb.w	r3, [sp, #32]
   5168c:	460d      	mov	r5, r1
   5168e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   51690:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   51694:	f04f 0220 	mov.w	r2, #32
   51698:	f3ef 8711 	mrs	r7, BASEPRI
   5169c:	f382 8812 	msr	BASEPRI_MAX, r2
   516a0:	f3bf 8f6f 	isb	sy
	if (is_append) {
   516a4:	b103      	cbz	r3, 516a8 <queue_insert+0x28>
	return list->tail;
   516a6:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   516a8:	4630      	mov	r0, r6
   516aa:	f000 fa86 	bl	51bba <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   516ae:	b158      	cbz	r0, 516c8 <queue_insert+0x48>
   516b0:	2400      	movs	r4, #0
   516b2:	67c4      	str	r4, [r0, #124]	; 0x7c
   516b4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   516b8:	f000 fa0e 	bl	51ad8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   516bc:	4630      	mov	r0, r6
   516be:	4639      	mov	r1, r7
   516c0:	f7f7 fb4a 	bl	48d58 <z_reschedule>
	return 0;
   516c4:	2000      	movs	r0, #0
   516c6:	e00c      	b.n	516e2 <queue_insert+0x62>
	if (alloc) {
   516c8:	f1b9 0f00 	cmp.w	r9, #0
   516cc:	d01b      	beq.n	51706 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   516ce:	2108      	movs	r1, #8
   516d0:	f7f8 f8e2 	bl	49898 <z_thread_aligned_alloc>
		if (anode == NULL) {
   516d4:	b938      	cbnz	r0, 516e6 <queue_insert+0x66>
	__asm__ volatile(
   516d6:	f387 8811 	msr	BASEPRI, r7
   516da:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   516de:	f06f 000b 	mvn.w	r0, #11
}
   516e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   516e6:	2301      	movs	r3, #1
		anode->data = data;
   516e8:	f8c0 8004 	str.w	r8, [r0, #4]
   516ec:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   516ee:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   516f0:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   516f4:	b95d      	cbnz	r5, 5170e <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   516f6:	6823      	ldr	r3, [r4, #0]
   516f8:	4313      	orrs	r3, r2
   516fa:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   516fc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   516fe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   51700:	b973      	cbnz	r3, 51720 <queue_insert+0xa0>
	list->tail = node;
   51702:	6060      	str	r0, [r4, #4]
}
   51704:	e00c      	b.n	51720 <queue_insert+0xa0>
	node->next_and_flags = flags;
   51706:	f8c8 9000 	str.w	r9, [r8]
}
   5170a:	4640      	mov	r0, r8
   5170c:	e7ef      	b.n	516ee <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5170e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   51710:	f033 0303 	bics.w	r3, r3, #3
   51714:	d110      	bne.n	51738 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   51716:	6002      	str	r2, [r0, #0]
	return list->tail;
   51718:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   5171a:	b93a      	cbnz	r2, 5172c <queue_insert+0xac>
	list->head = node;
   5171c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   51720:	2104      	movs	r1, #4
   51722:	f104 0010 	add.w	r0, r4, #16
   51726:	f000 fc5d 	bl	51fe4 <z_handle_obj_poll_events>
   5172a:	e7c7      	b.n	516bc <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5172c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5172e:	f003 0303 	and.w	r3, r3, #3
   51732:	4303      	orrs	r3, r0
   51734:	6013      	str	r3, [r2, #0]
   51736:	e7e4      	b.n	51702 <queue_insert+0x82>
   51738:	4313      	orrs	r3, r2
   5173a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5173c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5173e:	f003 0303 	and.w	r3, r3, #3
   51742:	4303      	orrs	r3, r0
   51744:	602b      	str	r3, [r5, #0]
}
   51746:	e7eb      	b.n	51720 <queue_insert+0xa0>

00051748 <z_queue_node_peek>:
{
   51748:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   5174a:	4604      	mov	r4, r0
   5174c:	b130      	cbz	r0, 5175c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5174e:	6802      	ldr	r2, [r0, #0]
   51750:	0793      	lsls	r3, r2, #30
   51752:	d003      	beq.n	5175c <z_queue_node_peek+0x14>
		ret = anode->data;
   51754:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   51756:	b109      	cbz	r1, 5175c <z_queue_node_peek+0x14>
			k_free(anode);
   51758:	f000 fc65 	bl	52026 <k_free>
}
   5175c:	4620      	mov	r0, r4
   5175e:	bd10      	pop	{r4, pc}

00051760 <z_impl_k_queue_init>:
	list->head = NULL;
   51760:	2300      	movs	r3, #0
	list->tail = NULL;
   51762:	e9c0 3300 	strd	r3, r3, [r0]
   51766:	f100 0308 	add.w	r3, r0, #8
   5176a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   5176e:	f100 0310 	add.w	r3, r0, #16
   51772:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   51776:	4770      	bx	lr

00051778 <k_queue_append>:
{
   51778:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   5177a:	2301      	movs	r3, #1
   5177c:	9300      	str	r3, [sp, #0]
   5177e:	2300      	movs	r3, #0
{
   51780:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   51782:	4619      	mov	r1, r3
   51784:	f7ff ff7c 	bl	51680 <queue_insert>
}
   51788:	b003      	add	sp, #12
   5178a:	f85d fb04 	ldr.w	pc, [sp], #4

0005178e <k_queue_prepend>:
{
   5178e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   51790:	2300      	movs	r3, #0
{
   51792:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   51794:	9300      	str	r3, [sp, #0]
   51796:	4619      	mov	r1, r3
   51798:	f7ff ff72 	bl	51680 <queue_insert>
}
   5179c:	b003      	add	sp, #12
   5179e:	f85d fb04 	ldr.w	pc, [sp], #4

000517a2 <k_queue_append_list>:
{
   517a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   517a6:	4605      	mov	r5, r0
   517a8:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   517aa:	460c      	mov	r4, r1
   517ac:	b391      	cbz	r1, 51814 <k_queue_append_list+0x72>
   517ae:	b38a      	cbz	r2, 51814 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   517b0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   517b4:	f04f 0320 	mov.w	r3, #32
   517b8:	f3ef 8811 	mrs	r8, BASEPRI
   517bc:	f383 8812 	msr	BASEPRI_MAX, r3
   517c0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   517c4:	4638      	mov	r0, r7
   517c6:	f000 f9f8 	bl	51bba <z_unpend_first_thread>
   517ca:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   517ce:	b920      	cbnz	r0, 517da <k_queue_append_list+0x38>
	return list->tail;
   517d0:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   517d2:	b9ca      	cbnz	r2, 51808 <k_queue_append_list+0x66>
	list->head = node;
   517d4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   517d6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   517d8:	e00a      	b.n	517f0 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   517da:	6144      	str	r4, [r0, #20]
   517dc:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   517e0:	f000 f97a 	bl	51ad8 <z_ready_thread>
		head = *(void **)head;
   517e4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   517e6:	4638      	mov	r0, r7
   517e8:	f000 f9e7 	bl	51bba <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   517ec:	2c00      	cmp	r4, #0
   517ee:	d1ee      	bne.n	517ce <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   517f0:	2104      	movs	r1, #4
   517f2:	f105 0010 	add.w	r0, r5, #16
   517f6:	f000 fbf5 	bl	51fe4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   517fa:	4638      	mov	r0, r7
   517fc:	4641      	mov	r1, r8
   517fe:	f7f7 faab 	bl	48d58 <z_reschedule>
	return 0;
   51802:	2000      	movs	r0, #0
}
   51804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   51808:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5180a:	f003 0303 	and.w	r3, r3, #3
   5180e:	431c      	orrs	r4, r3
   51810:	6014      	str	r4, [r2, #0]
}
   51812:	e7e0      	b.n	517d6 <k_queue_append_list+0x34>
		return -EINVAL;
   51814:	f06f 0015 	mvn.w	r0, #21
   51818:	e7f4      	b.n	51804 <k_queue_append_list+0x62>

0005181a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   5181a:	b15a      	cbz	r2, 51834 <z_impl_k_sem_init+0x1a>
   5181c:	428a      	cmp	r2, r1
   5181e:	d309      	bcc.n	51834 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   51820:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   51824:	e9c0 1202 	strd	r1, r2, [r0, #8]
   51828:	e9c0 0000 	strd	r0, r0, [r0]
   5182c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   51830:	2000      	movs	r0, #0
   51832:	4770      	bx	lr
		return -EINVAL;
   51834:	f06f 0015 	mvn.w	r0, #21
}
   51838:	4770      	bx	lr

0005183a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   5183a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   5183c:	2301      	movs	r3, #1
   5183e:	408b      	lsls	r3, r1
   51840:	ea22 0303 	bic.w	r3, r2, r3
   51844:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   51846:	fa22 f001 	lsr.w	r0, r2, r1
}
   5184a:	f000 0001 	and.w	r0, r0, #1
   5184e:	4770      	bx	lr

00051850 <unschedule_locked>:
{
   51850:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   51852:	2103      	movs	r1, #3
{
   51854:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   51856:	300c      	adds	r0, #12
   51858:	f7ff ffef 	bl	5183a <flag_test_and_clear>
   5185c:	4604      	mov	r4, r0
   5185e:	b118      	cbz	r0, 51868 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   51860:	f105 0010 	add.w	r0, r5, #16
   51864:	f000 f9ee 	bl	51c44 <z_abort_timeout>
}
   51868:	4620      	mov	r0, r4
   5186a:	bd38      	pop	{r3, r4, r5, pc}

0005186c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   5186c:	b120      	cbz	r0, 51878 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   5186e:	2200      	movs	r2, #0
   51870:	4611      	mov	r1, r2
   51872:	3088      	adds	r0, #136	; 0x88
   51874:	f000 b9c9 	b.w	51c0a <z_sched_wake>
}
   51878:	4770      	bx	lr

0005187a <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   5187a:	68c3      	ldr	r3, [r0, #12]
{
   5187c:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   5187e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   51882:	079b      	lsls	r3, r3, #30
{
   51884:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   51886:	d416      	bmi.n	518b6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   51888:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   5188a:	2102      	movs	r1, #2
   5188c:	300c      	adds	r0, #12
   5188e:	f7ff ffd4 	bl	5183a <flag_test_and_clear>
   51892:	b180      	cbz	r0, 518b6 <cancel_async_locked+0x3c>
	return list->head;
   51894:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   51898:	b16a      	cbz	r2, 518b6 <cancel_async_locked+0x3c>
   5189a:	4294      	cmp	r4, r2
   5189c:	d11b      	bne.n	518d6 <cancel_async_locked+0x5c>
	return node->next;
   5189e:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   518a0:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   518a4:	b98d      	cbnz	r5, 518ca <cancel_async_locked+0x50>
   518a6:	428c      	cmp	r4, r1
	list->head = node;
   518a8:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   518ac:	d101      	bne.n	518b2 <cancel_async_locked+0x38>
	list->tail = node;
   518ae:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   518b2:	2300      	movs	r3, #0
   518b4:	6023      	str	r3, [r4, #0]
	return *flagp;
   518b6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   518b8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   518bc:	bf1e      	ittt	ne
   518be:	f043 0302 	orrne.w	r3, r3, #2
   518c2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   518c4:	f003 000f 	andne.w	r0, r3, #15
}
   518c8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   518ca:	428c      	cmp	r4, r1
	parent->next = child;
   518cc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   518ce:	bf08      	it	eq
   518d0:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   518d4:	e7ed      	b.n	518b2 <cancel_async_locked+0x38>
	return node->next;
   518d6:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   518d8:	6812      	ldr	r2, [r2, #0]
   518da:	e7dd      	b.n	51898 <cancel_async_locked+0x1e>

000518dc <work_timeout>:
{
   518dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   518de:	4604      	mov	r4, r0
   518e0:	f04f 0320 	mov.w	r3, #32
   518e4:	f3ef 8511 	mrs	r5, BASEPRI
   518e8:	f383 8812 	msr	BASEPRI_MAX, r3
   518ec:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   518f0:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   518f2:	f1a0 0610 	sub.w	r6, r0, #16
   518f6:	2103      	movs	r1, #3
   518f8:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   518fa:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   518fc:	f7ff ff9d 	bl	5183a <flag_test_and_clear>
   51900:	b128      	cbz	r0, 5190e <work_timeout+0x32>
		queue = dw->queue;
   51902:	69a3      	ldr	r3, [r4, #24]
   51904:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   51906:	a901      	add	r1, sp, #4
   51908:	4630      	mov	r0, r6
   5190a:	f7f7 f8ed 	bl	48ae8 <submit_to_queue_locked>
	__asm__ volatile(
   5190e:	f385 8811 	msr	BASEPRI, r5
   51912:	f3bf 8f6f 	isb	sy
}
   51916:	b002      	add	sp, #8
   51918:	bd70      	pop	{r4, r5, r6, pc}

0005191a <k_work_init>:
{
   5191a:	b538      	push	{r3, r4, r5, lr}
   5191c:	4604      	mov	r4, r0
   5191e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   51920:	2210      	movs	r2, #16
   51922:	2100      	movs	r1, #0
   51924:	f7fa fed2 	bl	4c6cc <memset>
   51928:	6065      	str	r5, [r4, #4]
}
   5192a:	bd38      	pop	{r3, r4, r5, pc}

0005192c <k_work_busy_get>:
	__asm__ volatile(
   5192c:	f04f 0220 	mov.w	r2, #32
   51930:	f3ef 8311 	mrs	r3, BASEPRI
   51934:	f382 8812 	msr	BASEPRI_MAX, r2
   51938:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   5193c:	68c0      	ldr	r0, [r0, #12]
   5193e:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   51942:	f383 8811 	msr	BASEPRI, r3
   51946:	f3bf 8f6f 	isb	sy
}
   5194a:	4770      	bx	lr

0005194c <k_work_submit_to_queue>:
{
   5194c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   5194e:	9001      	str	r0, [sp, #4]
   51950:	4608      	mov	r0, r1
	__asm__ volatile(
   51952:	f04f 0320 	mov.w	r3, #32
   51956:	f3ef 8511 	mrs	r5, BASEPRI
   5195a:	f383 8812 	msr	BASEPRI_MAX, r3
   5195e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   51962:	a901      	add	r1, sp, #4
   51964:	f7f7 f8c0 	bl	48ae8 <submit_to_queue_locked>
   51968:	4604      	mov	r4, r0
	__asm__ volatile(
   5196a:	f385 8811 	msr	BASEPRI, r5
   5196e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   51972:	2800      	cmp	r0, #0
   51974:	dd04      	ble.n	51980 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   51976:	f7f7 fc9f 	bl	492b8 <z_impl_k_is_preempt_thread>
   5197a:	b108      	cbz	r0, 51980 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   5197c:	f7f7 fbf4 	bl	49168 <z_impl_k_yield>
}
   51980:	4620      	mov	r0, r4
   51982:	b003      	add	sp, #12
   51984:	bd30      	pop	{r4, r5, pc}

00051986 <k_work_init_delayable>:
{
   51986:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   51988:	2230      	movs	r2, #48	; 0x30
{
   5198a:	4604      	mov	r4, r0
   5198c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   5198e:	2100      	movs	r1, #0
   51990:	f7fa fe9c 	bl	4c6cc <memset>
   51994:	f44f 7380 	mov.w	r3, #256	; 0x100
   51998:	6065      	str	r5, [r4, #4]
   5199a:	60e3      	str	r3, [r4, #12]
}
   5199c:	bd38      	pop	{r3, r4, r5, pc}

0005199e <k_work_delayable_busy_get>:
   5199e:	f7ff bfc5 	b.w	5192c <k_work_busy_get>

000519a2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   519a2:	b538      	push	{r3, r4, r5, lr}
   519a4:	4604      	mov	r4, r0
	__asm__ volatile(
   519a6:	f04f 0320 	mov.w	r3, #32
   519aa:	f3ef 8511 	mrs	r5, BASEPRI
   519ae:	f383 8812 	msr	BASEPRI_MAX, r3
   519b2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   519b6:	f7ff ff4b 	bl	51850 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   519ba:	4620      	mov	r0, r4
   519bc:	f7ff ff5d 	bl	5187a <cancel_async_locked>
	__asm__ volatile(
   519c0:	f385 8811 	msr	BASEPRI, r5
   519c4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   519c8:	bd38      	pop	{r3, r4, r5, pc}

000519ca <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   519ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   519cc:	4604      	mov	r4, r0
   519ce:	460d      	mov	r5, r1
	__asm__ volatile(
   519d0:	f04f 0320 	mov.w	r3, #32
   519d4:	f3ef 8711 	mrs	r7, BASEPRI
   519d8:	f383 8812 	msr	BASEPRI_MAX, r3
   519dc:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   519e0:	68c3      	ldr	r3, [r0, #12]
   519e2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   519e6:	2b00      	cmp	r3, #0
   519e8:	bf14      	ite	ne
   519ea:	2601      	movne	r6, #1
   519ec:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   519ee:	d009      	beq.n	51a04 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   519f0:	f7ff ff2e 	bl	51850 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   519f4:	4620      	mov	r0, r4
   519f6:	f7ff ff40 	bl	5187a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   519fa:	4629      	mov	r1, r5
   519fc:	4620      	mov	r0, r4
   519fe:	f7f7 f855 	bl	48aac <cancel_sync_locked>
   51a02:	4603      	mov	r3, r0
	__asm__ volatile(
   51a04:	f387 8811 	msr	BASEPRI, r7
   51a08:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   51a0c:	b13b      	cbz	r3, 51a1e <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   51a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   51a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   51a16:	f105 0008 	add.w	r0, r5, #8
   51a1a:	f7f6 ff6f 	bl	488fc <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   51a1e:	4630      	mov	r0, r6
   51a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00051a22 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   51a22:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   51a26:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   51a28:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   51a2a:	2300      	movs	r3, #0
	node->prev = NULL;
   51a2c:	e9c0 3300 	strd	r3, r3, [r0]
}
   51a30:	4770      	bx	lr

00051a32 <unpend_thread_no_timeout>:
{
   51a32:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   51a34:	f7ff fff5 	bl	51a22 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   51a38:	7b43      	ldrb	r3, [r0, #13]
   51a3a:	f023 0302 	bic.w	r3, r3, #2
   51a3e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   51a40:	2300      	movs	r3, #0
   51a42:	6083      	str	r3, [r0, #8]
}
   51a44:	bd08      	pop	{r3, pc}

00051a46 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   51a46:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   51a4a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   51a4e:	4283      	cmp	r3, r0
		return b2 - b1;
   51a50:	bf14      	ite	ne
   51a52:	1ac0      	subne	r0, r0, r3
	return 0;
   51a54:	2000      	moveq	r0, #0
}
   51a56:	4770      	bx	lr

00051a58 <z_unpend_thread_no_timeout>:
{
   51a58:	b508      	push	{r3, lr}
	__asm__ volatile(
   51a5a:	f04f 0320 	mov.w	r3, #32
   51a5e:	f3ef 8111 	mrs	r1, BASEPRI
   51a62:	f383 8812 	msr	BASEPRI_MAX, r3
   51a66:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   51a6a:	f7ff ffe2 	bl	51a32 <unpend_thread_no_timeout>
	__asm__ volatile(
   51a6e:	f381 8811 	msr	BASEPRI, r1
   51a72:	f3bf 8f6f 	isb	sy
}
   51a76:	bd08      	pop	{r3, pc}

00051a78 <z_unpend_thread>:
{
   51a78:	b510      	push	{r4, lr}
	__asm__ volatile(
   51a7a:	f04f 0320 	mov.w	r3, #32
   51a7e:	f3ef 8411 	mrs	r4, BASEPRI
   51a82:	f383 8812 	msr	BASEPRI_MAX, r3
   51a86:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   51a8a:	f7ff ffd2 	bl	51a32 <unpend_thread_no_timeout>
	__asm__ volatile(
   51a8e:	f384 8811 	msr	BASEPRI, r4
   51a92:	f3bf 8f6f 	isb	sy
}
   51a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   51a9a:	3018      	adds	r0, #24
   51a9c:	f000 b8d2 	b.w	51c44 <z_abort_timeout>

00051aa0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   51aa0:	4603      	mov	r3, r0
   51aa2:	b920      	cbnz	r0, 51aae <z_reschedule_irqlock+0xe>
   51aa4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   51aa8:	b90a      	cbnz	r2, 51aae <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   51aaa:	f7db bc8b 	b.w	2d3c4 <arch_swap>
   51aae:	f383 8811 	msr	BASEPRI, r3
   51ab2:	f3bf 8f6f 	isb	sy
}
   51ab6:	4770      	bx	lr

00051ab8 <z_reschedule_unlocked>:
	__asm__ volatile(
   51ab8:	f04f 0320 	mov.w	r3, #32
   51abc:	f3ef 8011 	mrs	r0, BASEPRI
   51ac0:	f383 8812 	msr	BASEPRI_MAX, r3
   51ac4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   51ac8:	f7ff bfea 	b.w	51aa0 <z_reschedule_irqlock>

00051acc <z_priq_dumb_best>:
{
   51acc:	4603      	mov	r3, r0
	return list->head == list;
   51ace:	6800      	ldr	r0, [r0, #0]
}
   51ad0:	4283      	cmp	r3, r0
   51ad2:	bf08      	it	eq
   51ad4:	2000      	moveq	r0, #0
   51ad6:	4770      	bx	lr

00051ad8 <z_ready_thread>:
{
   51ad8:	b510      	push	{r4, lr}
   51ada:	f04f 0320 	mov.w	r3, #32
   51ade:	f3ef 8411 	mrs	r4, BASEPRI
   51ae2:	f383 8812 	msr	BASEPRI_MAX, r3
   51ae6:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   51aea:	f7f7 f9f5 	bl	48ed8 <ready_thread>
	__asm__ volatile(
   51aee:	f384 8811 	msr	BASEPRI, r4
   51af2:	f3bf 8f6f 	isb	sy
}
   51af6:	bd10      	pop	{r4, pc}

00051af8 <z_thread_timeout>:
{
   51af8:	b510      	push	{r4, lr}
   51afa:	4601      	mov	r1, r0
	__asm__ volatile(
   51afc:	f04f 0320 	mov.w	r3, #32
   51b00:	f3ef 8411 	mrs	r4, BASEPRI
   51b04:	f383 8812 	msr	BASEPRI_MAX, r3
   51b08:	f3bf 8f6f 	isb	sy
		if (!killed) {
   51b0c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   51b10:	f013 0f28 	tst.w	r3, #40	; 0x28
   51b14:	d10d      	bne.n	51b32 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   51b16:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   51b1a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   51b1c:	b10b      	cbz	r3, 51b22 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   51b1e:	f7ff ff88 	bl	51a32 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   51b22:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   51b26:	f023 0314 	bic.w	r3, r3, #20
   51b2a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   51b2e:	f7f7 f9d3 	bl	48ed8 <ready_thread>
	__asm__ volatile(
   51b32:	f384 8811 	msr	BASEPRI, r4
   51b36:	f3bf 8f6f 	isb	sy
}
   51b3a:	bd10      	pop	{r4, pc}

00051b3c <add_to_waitq_locked>:
{
   51b3c:	b538      	push	{r3, r4, r5, lr}
   51b3e:	4604      	mov	r4, r0
   51b40:	460d      	mov	r5, r1
	unready_thread(thread);
   51b42:	f7f7 fa1d 	bl	48f80 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   51b46:	7b63      	ldrb	r3, [r4, #13]
   51b48:	f043 0302 	orr.w	r3, r3, #2
   51b4c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   51b4e:	b195      	cbz	r5, 51b76 <add_to_waitq_locked+0x3a>
   51b50:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   51b52:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   51b54:	429d      	cmp	r5, r3
   51b56:	d015      	beq.n	51b84 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   51b58:	b1a3      	cbz	r3, 51b84 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   51b5a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   51b5e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   51b62:	4291      	cmp	r1, r2
   51b64:	d008      	beq.n	51b78 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   51b66:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   51b68:	2a00      	cmp	r2, #0
   51b6a:	dd05      	ble.n	51b78 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   51b6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   51b6e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   51b72:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   51b74:	605c      	str	r4, [r3, #4]
}
   51b76:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   51b78:	686a      	ldr	r2, [r5, #4]
   51b7a:	4293      	cmp	r3, r2
   51b7c:	d002      	beq.n	51b84 <add_to_waitq_locked+0x48>
   51b7e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   51b80:	2b00      	cmp	r3, #0
   51b82:	d1ec      	bne.n	51b5e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   51b84:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   51b86:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   51b8a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   51b8c:	606c      	str	r4, [r5, #4]
}
   51b8e:	e7f2      	b.n	51b76 <add_to_waitq_locked+0x3a>

00051b90 <z_unpend1_no_timeout>:
{
   51b90:	b510      	push	{r4, lr}
	__asm__ volatile(
   51b92:	f04f 0320 	mov.w	r3, #32
   51b96:	f3ef 8411 	mrs	r4, BASEPRI
   51b9a:	f383 8812 	msr	BASEPRI_MAX, r3
   51b9e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   51ba2:	f7ff ff93 	bl	51acc <z_priq_dumb_best>
		if (thread != NULL) {
   51ba6:	4601      	mov	r1, r0
   51ba8:	b108      	cbz	r0, 51bae <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   51baa:	f7ff ff42 	bl	51a32 <unpend_thread_no_timeout>
	__asm__ volatile(
   51bae:	f384 8811 	msr	BASEPRI, r4
   51bb2:	f3bf 8f6f 	isb	sy
}
   51bb6:	4608      	mov	r0, r1
   51bb8:	bd10      	pop	{r4, pc}

00051bba <z_unpend_first_thread>:
{
   51bba:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   51bbc:	f04f 0320 	mov.w	r3, #32
   51bc0:	f3ef 8511 	mrs	r5, BASEPRI
   51bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   51bc8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   51bcc:	f7ff ff7e 	bl	51acc <z_priq_dumb_best>
		if (thread != NULL) {
   51bd0:	4604      	mov	r4, r0
   51bd2:	b120      	cbz	r0, 51bde <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   51bd4:	f7ff ff2d 	bl	51a32 <unpend_thread_no_timeout>
   51bd8:	3018      	adds	r0, #24
   51bda:	f000 f833 	bl	51c44 <z_abort_timeout>
	__asm__ volatile(
   51bde:	f385 8811 	msr	BASEPRI, r5
   51be2:	f3bf 8f6f 	isb	sy
}
   51be6:	4620      	mov	r0, r4
   51be8:	bd38      	pop	{r3, r4, r5, pc}

00051bea <z_unpend_all>:
{
   51bea:	b538      	push	{r3, r4, r5, lr}
   51bec:	4605      	mov	r5, r0
	int need_sched = 0;
   51bee:	2000      	movs	r0, #0
	return list->head == list;
   51bf0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   51bf2:	42a5      	cmp	r5, r4
   51bf4:	d000      	beq.n	51bf8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   51bf6:	b904      	cbnz	r4, 51bfa <z_unpend_all+0x10>
}
   51bf8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   51bfa:	4620      	mov	r0, r4
   51bfc:	f7ff ff3c 	bl	51a78 <z_unpend_thread>
		z_ready_thread(thread);
   51c00:	4620      	mov	r0, r4
   51c02:	f7ff ff69 	bl	51ad8 <z_ready_thread>
		need_sched = 1;
   51c06:	2001      	movs	r0, #1
   51c08:	e7f2      	b.n	51bf0 <z_unpend_all+0x6>

00051c0a <z_sched_wake>:
{
   51c0a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   51c0c:	f04f 0320 	mov.w	r3, #32
   51c10:	f3ef 8511 	mrs	r5, BASEPRI
   51c14:	f383 8812 	msr	BASEPRI_MAX, r3
   51c18:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   51c1c:	f7ff ff56 	bl	51acc <z_priq_dumb_best>
		if (thread != NULL) {
   51c20:	4604      	mov	r4, r0
   51c22:	b150      	cbz	r0, 51c3a <z_sched_wake+0x30>
   51c24:	67c1      	str	r1, [r0, #124]	; 0x7c
   51c26:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   51c28:	f7ff ff03 	bl	51a32 <unpend_thread_no_timeout>
   51c2c:	3018      	adds	r0, #24
   51c2e:	f000 f809 	bl	51c44 <z_abort_timeout>
			ready_thread(thread);
   51c32:	4620      	mov	r0, r4
   51c34:	f7f7 f950 	bl	48ed8 <ready_thread>
			ret = true;
   51c38:	2001      	movs	r0, #1
	__asm__ volatile(
   51c3a:	f385 8811 	msr	BASEPRI, r5
   51c3e:	f3bf 8f6f 	isb	sy
}
   51c42:	bd38      	pop	{r3, r4, r5, pc}

00051c44 <z_abort_timeout>:
{
   51c44:	b510      	push	{r4, lr}
	__asm__ volatile(
   51c46:	f04f 0220 	mov.w	r2, #32
   51c4a:	f3ef 8411 	mrs	r4, BASEPRI
   51c4e:	f382 8812 	msr	BASEPRI_MAX, r2
   51c52:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   51c56:	6803      	ldr	r3, [r0, #0]
   51c58:	b13b      	cbz	r3, 51c6a <z_abort_timeout+0x26>
			remove_timeout(to);
   51c5a:	f7f7 fbeb 	bl	49434 <remove_timeout>
			ret = 0;
   51c5e:	2000      	movs	r0, #0
	__asm__ volatile(
   51c60:	f384 8811 	msr	BASEPRI, r4
   51c64:	f3bf 8f6f 	isb	sy
}
   51c68:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   51c6a:	f06f 0015 	mvn.w	r0, #21
   51c6e:	e7f7      	b.n	51c60 <z_abort_timeout+0x1c>

00051c70 <z_get_next_timeout_expiry>:
{
   51c70:	b510      	push	{r4, lr}
	__asm__ volatile(
   51c72:	f04f 0320 	mov.w	r3, #32
   51c76:	f3ef 8411 	mrs	r4, BASEPRI
   51c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   51c7e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   51c82:	f7f7 fbb1 	bl	493e8 <next_timeout>
	__asm__ volatile(
   51c86:	f384 8811 	msr	BASEPRI, r4
   51c8a:	f3bf 8f6f 	isb	sy
}
   51c8e:	bd10      	pop	{r4, pc}

00051c90 <z_set_timeout_expiry>:
{
   51c90:	b570      	push	{r4, r5, r6, lr}
   51c92:	4604      	mov	r4, r0
   51c94:	460d      	mov	r5, r1
	__asm__ volatile(
   51c96:	f04f 0320 	mov.w	r3, #32
   51c9a:	f3ef 8611 	mrs	r6, BASEPRI
   51c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   51ca2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   51ca6:	f7f7 fb9f 	bl	493e8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   51caa:	2801      	cmp	r0, #1
   51cac:	dd05      	ble.n	51cba <z_set_timeout_expiry+0x2a>
   51cae:	42a0      	cmp	r0, r4
   51cb0:	db03      	blt.n	51cba <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   51cb2:	4629      	mov	r1, r5
   51cb4:	4620      	mov	r0, r4
   51cb6:	f7f4 fb13 	bl	462e0 <sys_clock_set_timeout>
	__asm__ volatile(
   51cba:	f386 8811 	msr	BASEPRI, r6
   51cbe:	f3bf 8f6f 	isb	sy
}
   51cc2:	bd70      	pop	{r4, r5, r6, pc}

00051cc4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   51cc4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   51cc6:	f7f7 fca5 	bl	49614 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   51cca:	bd08      	pop	{r3, pc}

00051ccc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   51ccc:	f7f7 bca2 	b.w	49614 <sys_clock_tick_get>

00051cd0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   51cd0:	b108      	cbz	r0, 51cd6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   51cd2:	f7db be37 	b.w	2d944 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   51cd6:	4770      	bx	lr

00051cd8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   51cd8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   51cdc:	bf08      	it	eq
   51cde:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   51ce2:	b538      	push	{r3, r4, r5, lr}
   51ce4:	4605      	mov	r5, r0
   51ce6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   51ce8:	d01d      	beq.n	51d26 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   51cea:	ea51 0300 	orrs.w	r3, r1, r0
   51cee:	d103      	bne.n	51cf8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   51cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   51cf4:	f7f7 bc8e 	b.w	49614 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   51cf8:	f06f 0301 	mvn.w	r3, #1
   51cfc:	1a18      	subs	r0, r3, r0
   51cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   51d02:	eb63 0101 	sbc.w	r1, r3, r1
   51d06:	2900      	cmp	r1, #0
   51d08:	da0c      	bge.n	51d24 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   51d0a:	f7f7 fc83 	bl	49614 <sys_clock_tick_get>
   51d0e:	2d01      	cmp	r5, #1
   51d10:	4622      	mov	r2, r4
   51d12:	f174 0400 	sbcs.w	r4, r4, #0
   51d16:	462b      	mov	r3, r5
   51d18:	bfbc      	itt	lt
   51d1a:	2301      	movlt	r3, #1
   51d1c:	2200      	movlt	r2, #0
   51d1e:	1818      	adds	r0, r3, r0
   51d20:	eb41 0102 	adc.w	r1, r1, r2
}
   51d24:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   51d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   51d2a:	4601      	mov	r1, r0
   51d2c:	e7fa      	b.n	51d24 <sys_clock_timeout_end_calc+0x4c>

00051d2e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   51d2e:	b510      	push	{r4, lr}
   51d30:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   51d32:	f7ff ff87 	bl	51c44 <z_abort_timeout>

	if (inactive) {
   51d36:	b9b0      	cbnz	r0, 51d66 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   51d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   51d3a:	b10b      	cbz	r3, 51d40 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   51d3c:	4620      	mov	r0, r4
   51d3e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   51d40:	f104 0018 	add.w	r0, r4, #24
   51d44:	f7ff ff24 	bl	51b90 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   51d48:	b168      	cbz	r0, 51d66 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   51d4a:	f7ff fec5 	bl	51ad8 <z_ready_thread>
	__asm__ volatile(
   51d4e:	f04f 0320 	mov.w	r3, #32
   51d52:	f3ef 8011 	mrs	r0, BASEPRI
   51d56:	f383 8812 	msr	BASEPRI_MAX, r3
   51d5a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   51d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   51d62:	f7ff be9d 	b.w	51aa0 <z_reschedule_irqlock>
   51d66:	bd10      	pop	{r4, pc}

00051d68 <add_event>:
{
   51d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   51d6a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   51d6c:	e9d0 1300 	ldrd	r1, r3, [r0]
   51d70:	4288      	cmp	r0, r1
   51d72:	4604      	mov	r4, r0
   51d74:	d00d      	beq.n	51d92 <add_event+0x2a>
	if ((pending == NULL) ||
   51d76:	b163      	cbz	r3, 51d92 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   51d78:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51d7a:	b100      	cbz	r0, 51d7e <add_event+0x16>
   51d7c:	3860      	subs	r0, #96	; 0x60
   51d7e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   51d82:	4639      	mov	r1, r7
   51d84:	f7ff fe5f 	bl	51a46 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   51d88:	2800      	cmp	r0, #0
   51d8a:	dc02      	bgt.n	51d92 <add_event+0x2a>
	return list->head == list;
   51d8c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   51d8e:	42b4      	cmp	r4, r6
   51d90:	d109      	bne.n	51da6 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   51d92:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   51d94:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   51d98:	601d      	str	r5, [r3, #0]
	list->tail = node;
   51d9a:	6065      	str	r5, [r4, #4]
}
   51d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   51d9e:	6863      	ldr	r3, [r4, #4]
   51da0:	42b3      	cmp	r3, r6
   51da2:	d0f6      	beq.n	51d92 <add_event+0x2a>
   51da4:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   51da6:	2e00      	cmp	r6, #0
   51da8:	d0f3      	beq.n	51d92 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   51daa:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51dac:	b101      	cbz	r1, 51db0 <add_event+0x48>
   51dae:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   51db0:	4638      	mov	r0, r7
   51db2:	f7ff fe48 	bl	51a46 <z_sched_prio_cmp>
   51db6:	2800      	cmp	r0, #0
   51db8:	ddf1      	ble.n	51d9e <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   51dba:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   51dbc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   51dc0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   51dc2:	6075      	str	r5, [r6, #4]
			return;
   51dc4:	e7ea      	b.n	51d9c <add_event+0x34>

00051dc6 <register_events>:
{
   51dc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   51dca:	2500      	movs	r5, #0
{
   51dcc:	468b      	mov	fp, r1
   51dce:	4614      	mov	r4, r2
   51dd0:	461f      	mov	r7, r3
   51dd2:	4682      	mov	sl, r0
	int events_registered = 0;
   51dd4:	462e      	mov	r6, r5
	event->poller = NULL;
   51dd6:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   51dd8:	455d      	cmp	r5, fp
   51dda:	db02      	blt.n	51de2 <register_events+0x1c>
}
   51ddc:	4630      	mov	r0, r6
   51dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51de2:	f04f 0320 	mov.w	r3, #32
   51de6:	f3ef 8911 	mrs	r9, BASEPRI
   51dea:	f383 8812 	msr	BASEPRI_MAX, r3
   51dee:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   51df2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   51df6:	f003 031f 	and.w	r3, r3, #31
   51dfa:	3b01      	subs	r3, #1
   51dfc:	2b07      	cmp	r3, #7
   51dfe:	d80f      	bhi.n	51e20 <register_events+0x5a>
   51e00:	e8df f003 	tbb	[pc, r3]
   51e04:	0a0e041e 	.word	0x0a0e041e
   51e08:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   51e0c:	f8da 3010 	ldr.w	r3, [sl, #16]
   51e10:	689b      	ldr	r3, [r3, #8]
   51e12:	b12b      	cbz	r3, 51e20 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   51e14:	2302      	movs	r3, #2
   51e16:	e020      	b.n	51e5a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   51e18:	f8da 3010 	ldr.w	r3, [sl, #16]
   51e1c:	681b      	ldr	r3, [r3, #0]
   51e1e:	bb8b      	cbnz	r3, 51e84 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   51e20:	bb47      	cbnz	r7, 51e74 <register_events+0xae>
   51e22:	7823      	ldrb	r3, [r4, #0]
   51e24:	b333      	cbz	r3, 51e74 <register_events+0xae>
	switch (event->type) {
   51e26:	f89a 300d 	ldrb.w	r3, [sl, #13]
   51e2a:	f003 031f 	and.w	r3, r3, #31
   51e2e:	3b01      	subs	r3, #1
   51e30:	2b07      	cmp	r3, #7
   51e32:	d830      	bhi.n	51e96 <register_events+0xd0>
   51e34:	e8df f003 	tbb	[pc, r3]
   51e38:	282f2833 	.word	0x282f2833
   51e3c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   51e40:	f8da 3010 	ldr.w	r3, [sl, #16]
   51e44:	689b      	ldr	r3, [r3, #8]
   51e46:	2b00      	cmp	r3, #0
   51e48:	d0ea      	beq.n	51e20 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   51e4a:	2301      	movs	r3, #1
   51e4c:	e005      	b.n	51e5a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   51e4e:	f8da 3010 	ldr.w	r3, [sl, #16]
   51e52:	6a1b      	ldr	r3, [r3, #32]
   51e54:	2b00      	cmp	r3, #0
   51e56:	d0e3      	beq.n	51e20 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   51e58:	2310      	movs	r3, #16
	event->state |= state;
   51e5a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   51e5e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   51e62:	f3c2 3145 	ubfx	r1, r2, #13, #6
   51e66:	430b      	orrs	r3, r1
   51e68:	f363 3252 	bfi	r2, r3, #13, #6
   51e6c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   51e70:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   51e74:	f389 8811 	msr	BASEPRI, r9
   51e78:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   51e7c:	3501      	adds	r5, #1
   51e7e:	f10a 0a14 	add.w	sl, sl, #20
   51e82:	e7a9      	b.n	51dd8 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   51e84:	2304      	movs	r3, #4
   51e86:	e7e8      	b.n	51e5a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   51e88:	f8da 0010 	ldr.w	r0, [sl, #16]
   51e8c:	4622      	mov	r2, r4
   51e8e:	4651      	mov	r1, sl
   51e90:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   51e92:	f7ff ff69 	bl	51d68 <add_event>
	event->poller = poller;
   51e96:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   51e9a:	3601      	adds	r6, #1
   51e9c:	e7ea      	b.n	51e74 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   51e9e:	f8da 0010 	ldr.w	r0, [sl, #16]
   51ea2:	4622      	mov	r2, r4
   51ea4:	4651      	mov	r1, sl
   51ea6:	e7f4      	b.n	51e92 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   51ea8:	f8da 0010 	ldr.w	r0, [sl, #16]
   51eac:	4622      	mov	r2, r4
   51eae:	4651      	mov	r1, sl
   51eb0:	3024      	adds	r0, #36	; 0x24
   51eb2:	e7ee      	b.n	51e92 <register_events+0xcc>

00051eb4 <signal_poll_event>:
{
   51eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   51eb8:	6884      	ldr	r4, [r0, #8]
{
   51eba:	4605      	mov	r5, r0
   51ebc:	460e      	mov	r6, r1
	if (poller != NULL) {
   51ebe:	b144      	cbz	r4, 51ed2 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   51ec0:	7863      	ldrb	r3, [r4, #1]
   51ec2:	2b01      	cmp	r3, #1
   51ec4:	d136      	bne.n	51f34 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   51ec6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   51eca:	f013 0302 	ands.w	r3, r3, #2
   51ece:	d10a      	bne.n	51ee6 <signal_poll_event+0x32>
		poller->is_polling = false;
   51ed0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   51ed2:	68eb      	ldr	r3, [r5, #12]
   51ed4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   51ed8:	430e      	orrs	r6, r1
	event->poller = NULL;
   51eda:	2000      	movs	r0, #0
	event->state |= state;
   51edc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   51ee0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   51ee2:	60eb      	str	r3, [r5, #12]
	return retcode;
   51ee4:	e00b      	b.n	51efe <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   51ee6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   51eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   51eee:	bf08      	it	eq
   51ef0:	f112 0f02 	cmneq.w	r2, #2
   51ef4:	d105      	bne.n	51f02 <signal_poll_event+0x4e>
		poller->is_polling = false;
   51ef6:	2300      	movs	r3, #0
   51ef8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   51efa:	f06f 000a 	mvn.w	r0, #10
}
   51efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51f02:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   51f06:	4640      	mov	r0, r8
   51f08:	f7ff fdb6 	bl	51a78 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   51f0c:	2e08      	cmp	r6, #8
   51f0e:	bf0c      	ite	eq
   51f10:	f06f 0303 	mvneq.w	r3, #3
   51f14:	2300      	movne	r3, #0
   51f16:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   51f18:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   51f1c:	06db      	lsls	r3, r3, #27
   51f1e:	d102      	bne.n	51f26 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   51f20:	f854 7c48 	ldr.w	r7, [r4, #-72]
   51f24:	b10f      	cbz	r7, 51f2a <signal_poll_event+0x76>
		poller->is_polling = false;
   51f26:	2300      	movs	r3, #0
   51f28:	e7d2      	b.n	51ed0 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   51f2a:	4640      	mov	r0, r8
   51f2c:	f7ff fdd4 	bl	51ad8 <z_ready_thread>
		poller->is_polling = false;
   51f30:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   51f32:	e7ce      	b.n	51ed2 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   51f34:	2b02      	cmp	r3, #2
   51f36:	d1f6      	bne.n	51f26 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   51f38:	7823      	ldrb	r3, [r4, #0]
   51f3a:	2b00      	cmp	r3, #0
   51f3c:	d0c9      	beq.n	51ed2 <signal_poll_event+0x1e>
   51f3e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   51f42:	2f00      	cmp	r7, #0
   51f44:	d0f4      	beq.n	51f30 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   51f46:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   51f4a:	f1a4 0914 	sub.w	r9, r4, #20
   51f4e:	f104 0014 	add.w	r0, r4, #20
   51f52:	f7ff fe77 	bl	51c44 <z_abort_timeout>
		twork->poll_result = 0;
   51f56:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   51f5a:	4649      	mov	r1, r9
   51f5c:	4638      	mov	r0, r7
   51f5e:	f7ff fcf5 	bl	5194c <k_work_submit_to_queue>
		poller->is_polling = false;
   51f62:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   51f66:	e7b4      	b.n	51ed2 <signal_poll_event+0x1e>

00051f68 <clear_event_registrations>:
	while (num_events--) {
   51f68:	2314      	movs	r3, #20
{
   51f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   51f6c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   51f70:	2400      	movs	r4, #0
   51f72:	2601      	movs	r6, #1
	while (num_events--) {
   51f74:	b901      	cbnz	r1, 51f78 <clear_event_registrations+0x10>
}
   51f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   51f78:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   51f7c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   51f80:	f003 031f 	and.w	r3, r3, #31
   51f84:	2b08      	cmp	r3, #8
   51f86:	f1a0 0714 	sub.w	r7, r0, #20
   51f8a:	d80d      	bhi.n	51fa8 <clear_event_registrations+0x40>
   51f8c:	fa06 f303 	lsl.w	r3, r6, r3
   51f90:	f413 7f8b 	tst.w	r3, #278	; 0x116
   51f94:	d008      	beq.n	51fa8 <clear_event_registrations+0x40>
	return node->next != NULL;
   51f96:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   51f9a:	b12b      	cbz	r3, 51fa8 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   51f9c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   51fa0:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   51fa2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   51fa4:	e940 4405 	strd	r4, r4, [r0, #-20]
   51fa8:	f382 8811 	msr	BASEPRI, r2
   51fac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   51fb0:	f04f 0320 	mov.w	r3, #32
   51fb4:	f3ef 8211 	mrs	r2, BASEPRI
   51fb8:	f383 8812 	msr	BASEPRI_MAX, r3
   51fbc:	f3bf 8f6f 	isb	sy
   51fc0:	3901      	subs	r1, #1
   51fc2:	4638      	mov	r0, r7
   51fc4:	e7d6      	b.n	51f74 <clear_event_registrations+0xc>

00051fc6 <k_poll_event_init>:
{
   51fc6:	b510      	push	{r4, lr}
	event->type = type;
   51fc8:	04d2      	lsls	r2, r2, #19
   51fca:	0209      	lsls	r1, r1, #8
   51fcc:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   51fd0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   51fd4:	430a      	orrs	r2, r1
   51fd6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   51fd8:	2400      	movs	r4, #0
	event->type = type;
   51fda:	430a      	orrs	r2, r1
	event->obj = obj;
   51fdc:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   51fe0:	6084      	str	r4, [r0, #8]
}
   51fe2:	bd10      	pop	{r4, pc}

00051fe4 <z_handle_obj_poll_events>:
{
   51fe4:	4603      	mov	r3, r0
	return list->head == list;
   51fe6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   51fe8:	4283      	cmp	r3, r0
   51fea:	d008      	beq.n	51ffe <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   51fec:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   51ff0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   51ff2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   51ff4:	2300      	movs	r3, #0
	node->prev = NULL;
   51ff6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   51ffa:	f7ff bf5b 	b.w	51eb4 <signal_poll_event>
}
   51ffe:	4770      	bx	lr

00052000 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   52000:	3204      	adds	r2, #4
{
   52002:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   52004:	4604      	mov	r4, r0
   52006:	d208      	bcs.n	5201a <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   52008:	2600      	movs	r6, #0
   5200a:	2700      	movs	r7, #0
   5200c:	e9cd 6700 	strd	r6, r7, [sp]
   52010:	f041 0104 	orr.w	r1, r1, #4
   52014:	f7ff fa8c 	bl	51530 <k_heap_aligned_alloc>
	if (mem == NULL) {
   52018:	b910      	cbnz	r0, 52020 <z_heap_aligned_alloc+0x20>
		return NULL;
   5201a:	2000      	movs	r0, #0
}
   5201c:	b002      	add	sp, #8
   5201e:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   52020:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   52024:	e7fa      	b.n	5201c <z_heap_aligned_alloc+0x1c>

00052026 <k_free>:
	if (ptr != NULL) {
   52026:	b120      	cbz	r0, 52032 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   52028:	1f01      	subs	r1, r0, #4
   5202a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   5202e:	f7ff bac0 	b.w	515b2 <k_heap_free>
}
   52032:	4770      	bx	lr

00052034 <k_malloc>:
{
   52034:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   52036:	2004      	movs	r0, #4
   52038:	f7f7 bc20 	b.w	4987c <k_aligned_alloc>

0005203c <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   5203c:	4770      	bx	lr
	...

00052040 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   52040:	f7f4 b9a4 	b.w	4638c <SystemInit>
